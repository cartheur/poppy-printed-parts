
MouseHostDevice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  00002c18  00002cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  008001e4  008001e4  00002d90  2**0
                  ALLOC
  3 .stab         000026ac  00000000  00000000  00002d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e99  00000000  00000000  0000543c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000b18  00000000  00000000  000062d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001c36  00000000  00000000  00006ded  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00014400  00000000  00000000  00008a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004366  00000000  00000000  0001ce23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000f7c5  00000000  00000000  00021189  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011f0  00000000  00000000  00030950  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006867  00000000  00000000  00031b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a8c9  00000000  00000000  000383a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00002d46  00000000  00000000  00042c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f78  00000000  00000000  000459b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
	}
}
       0:	34 c1       	rjmp	.+616    	; 0x26a <__ctors_end>
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       2:	00 00       	nop
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	50 c1       	rjmp	.+672    	; 0x2a6 <__bad_interrupt>
       6:	00 00       	nop
       8:	4e c1       	rjmp	.+668    	; 0x2a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	4c c1       	rjmp	.+664    	; 0x2a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	4a c1       	rjmp	.+660    	; 0x2a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	48 c1       	rjmp	.+656    	; 0x2a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	46 c1       	rjmp	.+652    	; 0x2a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	44 c1       	rjmp	.+648    	; 0x2a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	42 c1       	rjmp	.+644    	; 0x2a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	40 c1       	rjmp	.+640    	; 0x2a6 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_10>
      2c:	3c c1       	rjmp	.+632    	; 0x2a6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3a c1       	rjmp	.+628    	; 0x2a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	38 c1       	rjmp	.+624    	; 0x2a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	36 c1       	rjmp	.+620    	; 0x2a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	34 c1       	rjmp	.+616    	; 0x2a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	32 c1       	rjmp	.+612    	; 0x2a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	30 c1       	rjmp	.+608    	; 0x2a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	2e c1       	rjmp	.+604    	; 0x2a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2c c1       	rjmp	.+600    	; 0x2a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2a c1       	rjmp	.+596    	; 0x2a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	28 c1       	rjmp	.+592    	; 0x2a6 <__bad_interrupt>
      56:	00 00       	nop
      58:	26 c1       	rjmp	.+588    	; 0x2a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	22 c1       	rjmp	.+580    	; 0x2a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	20 c1       	rjmp	.+576    	; 0x2a6 <__bad_interrupt>
      66:	00 00       	nop
      68:	1e c1       	rjmp	.+572    	; 0x2a6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1c c1       	rjmp	.+568    	; 0x2a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1a c1       	rjmp	.+564    	; 0x2a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	18 c1       	rjmp	.+560    	; 0x2a6 <__bad_interrupt>
      76:	00 00       	nop
      78:	16 c1       	rjmp	.+556    	; 0x2a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	14 c1       	rjmp	.+552    	; 0x2a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	12 c1       	rjmp	.+548    	; 0x2a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	10 c1       	rjmp	.+544    	; 0x2a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	0e c1       	rjmp	.+540    	; 0x2a6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c c1       	rjmp	.+536    	; 0x2a6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0a c1       	rjmp	.+532    	; 0x2a6 <__bad_interrupt>
      92:	00 00       	nop
      94:	08 c1       	rjmp	.+528    	; 0x2a6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.5028>:
      98:	48 6f 73 74 00                                      Host.

0000009d <__c.5026>:
      9d:	44 65 76 69 63 65 00                                Device.

000000a4 <__c.5024>:
      a4:	1b 5b 33 33 6d 55 49 44 20 43 68 61 6e 67 65 20     .[33mUID Change 
      b4:	74 6f 20 25 53 20 6d 6f 64 65 0d 0a 1b 5b 33 37     to %S mode...[37
      c4:	6d 00                                               m.

000000c6 <__c.5015>:
      c6:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 2f     .[36mMouse Host/
      d6:	44 65 76 69 63 65 20 44 65 6d 6f 20 72 75 6e 6e     Device Demo runn
      e6:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00                 ing....[37m.

000000f2 <MouseReport>:
      f2:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
     102:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
     112:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
     122:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

0000012c <DeviceDescriptor>:
     12c:	12 01 10 01 00 00 00 08 eb 03 41 20 00 00 01 02     ..........A ....
     13c:	00 01                                               ..

0000013e <ConfigurationDescriptor>:
     13e:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
     14e:	02 00 09 21 11 01 00 01 22 3a 00 07 05 81 03 08     ...!....":......
     15e:	00 05                                               ..

00000160 <LanguageString>:
     160:	04 03 09 04                                         ....

00000164 <ManufacturerString>:
     164:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     174:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000017e <ProductString>:
     17e:	20 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00      .L.U.F.A. .M.o.
     18e:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
     19e:	00 00                                               ..

000001a0 <__c.5045>:
     1a0:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
     1b0:	74 74 6f 6e 3a 25 64 0d 0a 00                       tton:%d...

000001ba <__c.5038>:
     1ba:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1ca:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     1da:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     1ea:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     1fa:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     20a:	1b 5b 33 37 6d 00                                   .[37m.

00000210 <__c.5031>:
     210:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     220:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     230:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000023f <__c.5021>:
     23f:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     24f:	68 65 64 2e 0d 0a 00                                hed....

00000256 <__c.5016>:
     256:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     266:	0d 0a 00 00                                         ....

0000026a <__ctors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	d0 e2       	ldi	r29, 0x20	; 32
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61

00000276 <__do_copy_data>:
     276:	11 e0       	ldi	r17, 0x01	; 1
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	e8 e1       	ldi	r30, 0x18	; 24
     27e:	fc e2       	ldi	r31, 0x2C	; 44
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	0b bf       	out	0x3b, r16	; 59
     284:	02 c0       	rjmp	.+4      	; 0x28a <__do_copy_data+0x14>
     286:	07 90       	elpm	r0, Z+
     288:	0d 92       	st	X+, r0
     28a:	a4 3e       	cpi	r26, 0xE4	; 228
     28c:	b1 07       	cpc	r27, r17
     28e:	d9 f7       	brne	.-10     	; 0x286 <__do_copy_data+0x10>

00000290 <__do_clear_bss>:
     290:	12 e0       	ldi	r17, 0x02	; 2
     292:	a4 ee       	ldi	r26, 0xE4	; 228
     294:	b1 e0       	ldi	r27, 0x01	; 1
     296:	01 c0       	rjmp	.+2      	; 0x29a <.do_clear_bss_start>

00000298 <.do_clear_bss_loop>:
     298:	1d 92       	st	X+, r1

0000029a <.do_clear_bss_start>:
     29a:	ae 30       	cpi	r26, 0x0E	; 14
     29c:	b1 07       	cpc	r27, r17
     29e:	e1 f7       	brne	.-8      	; 0x298 <.do_clear_bss_loop>
     2a0:	41 d0       	rcall	.+130    	; 0x324 <main>
     2a2:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <_exit>

000002a6 <__bad_interrupt>:
     2a6:	ac ce       	rjmp	.-680    	; 0x0 <__vectors>

000002a8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2a8:	84 b7       	in	r24, 0x34	; 52
     2aa:	87 7f       	andi	r24, 0xF7	; 247
     2ac:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2ae:	28 e1       	ldi	r18, 0x18	; 24
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	20 93 60 00 	sts	0x0060, r18
     2b8:	10 92 60 00 	sts	0x0060, r1
     2bc:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	80 e8       	ldi	r24, 0x80	; 128
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	80 93 61 00 	sts	0x0061, r24
     2ca:	90 93 61 00 	sts	0x0061, r25
     2ce:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2d0:	83 e3       	ldi	r24, 0x33	; 51
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	90 93 cd 00 	sts	0x00CD, r25
     2d8:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2dc:	86 e0       	ldi	r24, 0x06	; 6
     2de:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2e2:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2e6:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2ea:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2ec:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2ee:	8a b1       	in	r24, 0x0a	; 10
     2f0:	80 6f       	ori	r24, 0xF0	; 240
     2f2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2f4:	8b b1       	in	r24, 0x0b	; 11
     2f6:	8f 70       	andi	r24, 0x0F	; 15
     2f8:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     2fa:	84 b1       	in	r24, 0x04	; 4
     2fc:	8f 71       	andi	r24, 0x1F	; 31
     2fe:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     300:	8d b1       	in	r24, 0x0d	; 13
     302:	8f 7c       	andi	r24, 0xCF	; 207
     304:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     306:	85 b1       	in	r24, 0x05	; 5
     308:	80 6e       	ori	r24, 0xE0	; 224
     30a:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     30c:	8e b1       	in	r24, 0x0e	; 14
     30e:	80 63       	ori	r24, 0x30	; 48
     310:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     312:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     314:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Joystick_Init();
	Buttons_Init();
	USB_Init(USB_MODE_UID);
     316:	83 e0       	ldi	r24, 0x03	; 3
     318:	0e 94 a4 09 	call	0x1348	; 0x1348 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0c 94 9f 12 	jmp	0x253e	; 0x253e <Serial_CreateStream>

00000324 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     324:	c1 df       	rcall	.-126    	; 0x2a8 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host/Device Demo running.\r\n" ESC_FG_WHITE));
     326:	86 ec       	ldi	r24, 0xC6	; 198
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 2f 13 	call	0x265e	; 0x265e <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     32e:	8b b1       	in	r24, 0x0b	; 11
     330:	8f 70       	andi	r24, 0x0F	; 15
     332:	80 61       	ori	r24, 0x10	; 16
     334:	8b b9       	out	0x0b, r24	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     336:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		/* Determine which USB mode we are currently in */
		if (USB_CurrentMode == USB_MODE_Host)
     338:	80 91 ea 01 	lds	r24, 0x01EA
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	11 f4       	brne	.+4      	; 0x344 <main+0x20>
		{
			MouseHost_Task();
     340:	6f d1       	rcall	.+734    	; 0x620 <MouseHost_Task>
     342:	04 c0       	rjmp	.+8      	; 0x34c <main+0x28>
			HID_Host_USBTask(&Mouse_HID_Host_Interface);
		}
		else
		{
			HID_Device_USBTask(&Mouse_HID_Device_Interface);
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	0e 94 22 10 	call	0x2044	; 0x2044 <HID_Device_USBTask>
		}

		USB_USBTask();
     34c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <USB_USBTask>
	}
     350:	f3 cf       	rjmp	.-26     	; 0x338 <main+0x14>

00000352 <EVENT_USB_UIDChange>:

/** Event handler for the library USB mode change event. */
void EVENT_USB_UIDChange(void)
{
	printf_P(PSTR(ESC_FG_YELLOW "UID Change to %S mode\r\n" ESC_FG_WHITE),
	         (USB_CurrentMode == USB_MODE_Device) ? PSTR("Device") : PSTR("Host"));
     352:	80 91 ea 01 	lds	r24, 0x01EA
}

/** Event handler for the library USB mode change event. */
void EVENT_USB_UIDChange(void)
{
	printf_P(PSTR(ESC_FG_YELLOW "UID Change to %S mode\r\n" ESC_FG_WHITE),
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	19 f4       	brne	.+6      	; 0x360 <EVENT_USB_UIDChange+0xe>
     35a:	8d e9       	ldi	r24, 0x9D	; 157
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	02 c0       	rjmp	.+4      	; 0x364 <EVENT_USB_UIDChange+0x12>
     360:	88 e9       	ldi	r24, 0x98	; 152
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	00 d0       	rcall	.+0      	; 0x366 <EVENT_USB_UIDChange+0x14>
     366:	00 d0       	rcall	.+0      	; 0x368 <EVENT_USB_UIDChange+0x16>
     368:	24 ea       	ldi	r18, 0xA4	; 164
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	ed b7       	in	r30, 0x3d	; 61
     36e:	fe b7       	in	r31, 0x3e	; 62
     370:	32 83       	std	Z+2, r19	; 0x02
     372:	21 83       	std	Z+1, r18	; 0x01
     374:	94 83       	std	Z+4, r25	; 0x04
     376:	83 83       	std	Z+3, r24	; 0x03
     378:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <printf_P>
     37c:	8b b1       	in	r24, 0x0b	; 11
     37e:	8f 70       	andi	r24, 0x0F	; 15
     380:	80 61       	ori	r24, 0x10	; 16
     382:	8b b9       	out	0x0b, r24	; 11
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
	         (USB_CurrentMode == USB_MODE_Device) ? PSTR("Device") : PSTR("Host"));

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     38c:	08 95       	ret

0000038e <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     38e:	93 30       	cpi	r25, 0x03	; 3
     390:	89 f0       	breq	.+34     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x26>
     392:	94 30       	cpi	r25, 0x04	; 4
     394:	28 f4       	brcc	.+10     	; 0x3a0 <CALLBACK_USB_GetDescriptor+0x12>
     396:	91 30       	cpi	r25, 0x01	; 1
     398:	49 f1       	breq	.+82     	; 0x3ec <CALLBACK_USB_GetDescriptor+0x5e>
     39a:	92 30       	cpi	r25, 0x02	; 2
     39c:	61 f5       	brne	.+88     	; 0x3f6 <CALLBACK_USB_GetDescriptor+0x68>
     39e:	05 c0       	rjmp	.+10     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x1c>
     3a0:	91 32       	cpi	r25, 0x21	; 33
     3a2:	d1 f0       	breq	.+52     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x4a>
     3a4:	92 32       	cpi	r25, 0x22	; 34
     3a6:	39 f5       	brne	.+78     	; 0x3f6 <CALLBACK_USB_GetDescriptor+0x68>
     3a8:	1c c0       	rjmp	.+56     	; 0x3e2 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3aa:	22 e2       	ldi	r18, 0x22	; 34
     3ac:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3ae:	ee e3       	ldi	r30, 0x3E	; 62
     3b0:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3b2:	25 c0       	rjmp	.+74     	; 0x3fe <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     3b4:	81 30       	cpi	r24, 0x01	; 1
     3b6:	41 f0       	breq	.+16     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x3a>
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	18 f0       	brcs	.+6      	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x34>
     3bc:	82 30       	cpi	r24, 0x02	; 2
     3be:	d9 f4       	brne	.+54     	; 0x3f6 <CALLBACK_USB_GetDescriptor+0x68>
     3c0:	06 c0       	rjmp	.+12     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3c2:	e0 e6       	ldi	r30, 0x60	; 96
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3c8:	e4 e6       	ldi	r30, 0x64	; 100
     3ca:	f1 e0       	ldi	r31, 0x01	; 1
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3ce:	ee e7       	ldi	r30, 0x7E	; 126
     3d0:	f1 e0       	ldi	r31, 0x01	; 1
     3d2:	24 91       	lpm	r18, Z+
     3d4:	30 e0       	ldi	r19, 0x00	; 0
					break;
     3d6:	13 c0       	rjmp	.+38     	; 0x3fe <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     3d8:	29 e0       	ldi	r18, 0x09	; 9
     3da:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
     3dc:	e0 e5       	ldi	r30, 0x50	; 80
     3de:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3e0:	0e c0       	rjmp	.+28     	; 0x3fe <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
     3e2:	2a e3       	ldi	r18, 0x3A	; 58
     3e4:	30 e0       	ldi	r19, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
     3e6:	e2 ef       	ldi	r30, 0xF2	; 242
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(MouseReport);
			break;
     3ea:	09 c0       	rjmp	.+18     	; 0x3fe <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3ec:	22 e1       	ldi	r18, 0x12	; 18
     3ee:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     3f0:	ec e2       	ldi	r30, 0x2C	; 44
     3f2:	f1 e0       	ldi	r31, 0x01	; 1
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3fa:	e0 e0       	ldi	r30, 0x00	; 0
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
     3fe:	da 01       	movw	r26, r20
     400:	11 96       	adiw	r26, 0x01	; 1
     402:	fc 93       	st	X, r31
     404:	ee 93       	st	-X, r30
	return Size;
}
     406:	c9 01       	movw	r24, r18
     408:	08 95       	ret

0000040a <LEDs_SetAllLEDs>:
     40a:	9b b1       	in	r25, 0x0b	; 11
     40c:	9f 70       	andi	r25, 0x0F	; 15
     40e:	98 2b       	or	r25, r24
     410:	9b b9       	out	0x0b, r25	; 11
			}
     412:	08 95       	ret

00000414 <EVENT_USB_Device_Connect>:


/** Event handler for the library USB WakeUp event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     414:	80 ea       	ldi	r24, 0xA0	; 160
}
     416:	f9 cf       	rjmp	.-14     	; 0x40a <LEDs_SetAllLEDs>

00000418 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Suspend event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     418:	80 e1       	ldi	r24, 0x10	; 16
}
     41a:	f7 cf       	rjmp	.-18     	; 0x40a <LEDs_SetAllLEDs>

0000041c <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     41c:	80 e6       	ldi	r24, 0x60	; 96
     41e:	f5 df       	rcall	.-22     	; 0x40a <LEDs_SetAllLEDs>

	if (!(HID_Device_ConfigureEndpoints(&Mouse_HID_Device_Interface)))
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 08 10 	call	0x2010	; 0x2010 <HID_Device_ConfigureEndpoints>
     428:	88 23       	and	r24, r24
     42a:	11 f4       	brne	.+4      	; 0x430 <EVENT_USB_Device_ConfigurationChanged+0x14>
	  LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     42c:	80 e9       	ldi	r24, 0x90	; 144
     42e:	ed df       	rcall	.-38     	; 0x40a <LEDs_SetAllLEDs>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     430:	80 91 e2 00 	lds	r24, 0x00E2
     434:	84 60       	ori	r24, 0x04	; 4
     436:	80 93 e2 00 	sts	0x00E2, r24

	USB_Device_EnableSOFEvents();
}
     43a:	08 95       	ret

0000043c <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Mouse_HID_Device_Interface);
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <HID_Device_ProcessControlRequest>

00000444 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     444:	80 91 0e 01 	lds	r24, 0x010E
     448:	90 91 0f 01 	lds	r25, 0x010F
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	29 f0       	breq	.+10     	; 0x45a <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	90 93 0f 01 	sts	0x010F, r25
     456:	80 93 0e 01 	sts	0x010E, r24
     45a:	08 95       	ret

0000045c <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	d8 01       	movw	r26, r16
	USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;
     462:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     464:	23 b1       	in	r18, 0x03	; 3
     466:	8c b1       	in	r24, 0x0c	; 12
     468:	80 95       	com	r24
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	80 73       	andi	r24, 0x30	; 48
     46e:	90 70       	andi	r25, 0x00	; 0
     470:	95 95       	asr	r25
     472:	87 95       	ror	r24
     474:	20 95       	com	r18
     476:	20 7e       	andi	r18, 0xE0	; 224
     478:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     47a:	8c b1       	in	r24, 0x0c	; 12
     47c:	80 95       	com	r24
     47e:	84 70       	andi	r24, 0x04	; 4

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
     480:	27 ff       	sbrs	r18, 7
     482:	02 c0       	rjmp	.+4      	; 0x488 <CALLBACK_HID_Device_CreateHIDReport+0x2c>
	  MouseReport->Y = -1;
     484:	9f ef       	ldi	r25, 0xFF	; 255
     486:	03 c0       	rjmp	.+6      	; 0x48e <CALLBACK_HID_Device_CreateHIDReport+0x32>
	else if (JoyStatus_LCL & JOY_DOWN)
     488:	24 ff       	sbrs	r18, 4
     48a:	02 c0       	rjmp	.+4      	; 0x490 <CALLBACK_HID_Device_CreateHIDReport+0x34>
	  MouseReport->Y =  1;
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	92 83       	std	Z+2, r25	; 0x02

	if (JoyStatus_LCL & JOY_RIGHT)
     490:	23 ff       	sbrs	r18, 3
     492:	02 c0       	rjmp	.+4      	; 0x498 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
	  MouseReport->X =  1;
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	03 c0       	rjmp	.+6      	; 0x49e <CALLBACK_HID_Device_CreateHIDReport+0x42>
	else if (JoyStatus_LCL & JOY_LEFT)
     498:	26 ff       	sbrs	r18, 6
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <CALLBACK_HID_Device_CreateHIDReport+0x44>
	  MouseReport->X = -1;
     49c:	9f ef       	ldi	r25, 0xFF	; 255
     49e:	91 83       	std	Z+1, r25	; 0x01

	if (JoyStatus_LCL & JOY_PRESS)
     4a0:	25 ff       	sbrs	r18, 5
     4a2:	03 c0       	rjmp	.+6      	; 0x4aa <CALLBACK_HID_Device_CreateHIDReport+0x4e>
	  MouseReport->Button |= (1 << 0);
     4a4:	90 81       	ld	r25, Z
     4a6:	91 60       	ori	r25, 0x01	; 1
     4a8:	90 83       	st	Z, r25

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     4aa:	88 23       	and	r24, r24
     4ac:	19 f0       	breq	.+6      	; 0x4b4 <CALLBACK_HID_Device_CreateHIDReport+0x58>
	  MouseReport->Button |= (1 << 1);
     4ae:	80 81       	ld	r24, Z
     4b0:	82 60       	ori	r24, 0x02	; 2
     4b2:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_MouseReport_Data_t);
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	11 96       	adiw	r26, 0x01	; 1
     4ba:	9c 93       	st	X, r25
     4bc:	8e 93       	st	-X, r24
	return true;
}
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	08 95       	ret

000004c6 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Unused (but mandatory for the HID class driver) in this demo, since there are no Host->Device reports
}
     4c6:	08 95       	ret

000004c8 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     4c8:	9b b1       	in	r25, 0x0b	; 11
     4ca:	9f 70       	andi	r25, 0x0F	; 15
     4cc:	98 2b       	or	r25, r24
     4ce:	9b b9       	out	0x0b, r25	; 11
			}
     4d0:	08 95       	ret

000004d2 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     4d2:	86 e5       	ldi	r24, 0x56	; 86
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	0e 94 2f 13 	call	0x265e	; 0x265e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4da:	80 ea       	ldi	r24, 0xA0	; 160
}
     4dc:	f5 cf       	rjmp	.-22     	; 0x4c8 <LEDs_SetAllLEDs>

000004de <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     4de:	8f e3       	ldi	r24, 0x3F	; 63
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	0e 94 2f 13 	call	0x265e	; 0x265e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4e6:	80 e1       	ldi	r24, 0x10	; 16
}
     4e8:	ef cf       	rjmp	.-34     	; 0x4c8 <LEDs_SetAllLEDs>

000004ea <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	df 93       	push	r29
     4f0:	cf 93       	push	r28
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	c2 50       	subi	r28, 0x02	; 2
     4f8:	d2 40       	sbci	r29, 0x02	; 2
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     504:	80 ea       	ldi	r24, 0xA0	; 160
     506:	e0 df       	rcall	.-64     	; 0x4c8 <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     508:	8e 01       	movw	r16, r28
     50a:	0d 5f       	subi	r16, 0xFD	; 253
     50c:	1f 4f       	sbci	r17, 0xFF	; 255
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	be 01       	movw	r22, r28
     512:	6f 5f       	subi	r22, 0xFF	; 255
     514:	7f 4f       	sbci	r23, 0xFF	; 255
     516:	a8 01       	movw	r20, r16
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	32 e0       	ldi	r19, 0x02	; 2
     51c:	0e 94 44 0b 	call	0x1688	; 0x1688 <USB_Host_GetDeviceConfigDescriptor>
     520:	88 23       	and	r24, r24
     522:	19 f0       	breq	.+6      	; 0x52a <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		printf("Error Retrieving Configuration Descriptor.\r\n");
     524:	80 e1       	ldi	r24, 0x10	; 16
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	1c c0       	rjmp	.+56     	; 0x562 <EVENT_USB_Host_DeviceEnumerationComplete+0x78>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Mouse_HID_Host_Interface,
     52a:	69 81       	ldd	r22, Y+1	; 0x01
     52c:	7a 81       	ldd	r23, Y+2	; 0x02
     52e:	8b eb       	ldi	r24, 0xBB	; 187
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	a8 01       	movw	r20, r16
     534:	0e 94 19 11 	call	0x2232	; 0x2232 <HID_Host_ConfigurePipes>
     538:	88 23       	and	r24, r24
     53a:	19 f0       	breq	.+6      	; 0x542 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		printf("Attached Device Not a Valid Mouse.\r\n");
     53c:	8c e3       	ldi	r24, 0x3C	; 60
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	10 c0       	rjmp	.+32     	; 0x562 <EVENT_USB_Host_DeviceEnumerationComplete+0x78>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <USB_Host_SetDeviceConfiguration>
     548:	88 23       	and	r24, r24
     54a:	19 f0       	breq	.+6      	; 0x552 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
	{
		printf("Error Setting Device Configuration.\r\n");
     54c:	80 e6       	ldi	r24, 0x60	; 96
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	08 c0       	rjmp	.+16     	; 0x562 <EVENT_USB_Host_DeviceEnumerationComplete+0x78>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_SetBootProtocol(&Mouse_HID_Host_Interface) != HOST_SENDCONTROL_Successful)
     552:	8b eb       	ldi	r24, 0xBB	; 187
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <HID_Host_SetBootProtocol>
     55a:	88 23       	and	r24, r24
     55c:	31 f0       	breq	.+12     	; 0x56a <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
	{
		printf("Could not Set Boot Protocol Mode.\r\n");
     55e:	85 e8       	ldi	r24, 0x85	; 133
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <puts>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     566:	80 e9       	ldi	r24, 0x90	; 144
     568:	05 c0       	rjmp	.+10     	; 0x574 <EVENT_USB_Host_DeviceEnumerationComplete+0x8a>
		return;
	}

	printf("Mouse Enumerated.\r\n");
     56a:	88 ea       	ldi	r24, 0xA8	; 168
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <puts>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     572:	80 e6       	ldi	r24, 0x60	; 96
     574:	a9 df       	rcall	.-174    	; 0x4c8 <LEDs_SetAllLEDs>
}
     576:	ce 5f       	subi	r28, 0xFE	; 254
     578:	dd 4f       	sbci	r29, 0xFD	; 253
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	f8 94       	cli
     57e:	de bf       	out	0x3e, r29	; 62
     580:	0f be       	out	0x3f, r0	; 63
     582:	cd bf       	out	0x3d, r28	; 61
     584:	cf 91       	pop	r28
     586:	df 91       	pop	r29
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	08 95       	ret

0000058e <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     58e:	df 93       	push	r29
     590:	cf 93       	push	r28
     592:	0f 92       	push	r0
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     598:	89 83       	std	Y+1, r24	; 0x01
     59a:	2d d6       	rcall	.+3162   	; 0x11f6 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     59c:	00 d0       	rcall	.+0      	; 0x59e <EVENT_USB_Host_HostError+0x10>
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <EVENT_USB_Host_HostError+0x12>
     5a0:	ed b7       	in	r30, 0x3d	; 61
     5a2:	fe b7       	in	r31, 0x3e	; 62
     5a4:	31 96       	adiw	r30, 0x01	; 1
     5a6:	20 e1       	ldi	r18, 0x10	; 16
     5a8:	32 e0       	ldi	r19, 0x02	; 2
     5aa:	ad b7       	in	r26, 0x3d	; 61
     5ac:	be b7       	in	r27, 0x3e	; 62
     5ae:	12 96       	adiw	r26, 0x02	; 2
     5b0:	3c 93       	st	X, r19
     5b2:	2e 93       	st	-X, r18
     5b4:	11 97       	sbiw	r26, 0x01	; 1
     5b6:	89 81       	ldd	r24, Y+1	; 0x01
     5b8:	82 83       	std	Z+2, r24	; 0x02
     5ba:	13 82       	std	Z+3, r1	; 0x03
     5bc:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	80 e9       	ldi	r24, 0x90	; 144
     5ca:	7e df       	rcall	.-260    	; 0x4c8 <LEDs_SetAllLEDs>
     5cc:	ff cf       	rjmp	.-2      	; 0x5cc <EVENT_USB_Host_HostError+0x3e>

000005ce <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5ce:	90 91 f9 01 	lds	r25, 0x01F9
     5d2:	2d b7       	in	r18, 0x3d	; 61
     5d4:	3e b7       	in	r19, 0x3e	; 62
     5d6:	28 50       	subi	r18, 0x08	; 8
     5d8:	30 40       	sbci	r19, 0x00	; 0
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	3e bf       	out	0x3e, r19	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	2d bf       	out	0x3d, r18	; 61
     5e4:	ed b7       	in	r30, 0x3d	; 61
     5e6:	fe b7       	in	r31, 0x3e	; 62
     5e8:	31 96       	adiw	r30, 0x01	; 1
     5ea:	2a eb       	ldi	r18, 0xBA	; 186
     5ec:	31 e0       	ldi	r19, 0x01	; 1
     5ee:	ad b7       	in	r26, 0x3d	; 61
     5f0:	be b7       	in	r27, 0x3e	; 62
     5f2:	12 96       	adiw	r26, 0x02	; 2
     5f4:	3c 93       	st	X, r19
     5f6:	2e 93       	st	-X, r18
     5f8:	11 97       	sbiw	r26, 0x01	; 1
     5fa:	82 83       	std	Z+2, r24	; 0x02
     5fc:	13 82       	std	Z+3, r1	; 0x03
     5fe:	64 83       	std	Z+4, r22	; 0x04
     600:	15 82       	std	Z+5, r1	; 0x05
     602:	96 83       	std	Z+6, r25	; 0x06
     604:	17 82       	std	Z+7, r1	; 0x07
     606:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     60a:	2d b7       	in	r18, 0x3d	; 61
     60c:	3e b7       	in	r19, 0x3e	; 62
     60e:	28 5f       	subi	r18, 0xF8	; 248
     610:	3f 4f       	sbci	r19, 0xFF	; 255
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	3e bf       	out	0x3e, r19	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	2d bf       	out	0x3d, r18	; 61
     61c:	80 e9       	ldi	r24, 0x90	; 144
}
     61e:	54 cf       	rjmp	.-344    	; 0x4c8 <LEDs_SetAllLEDs>

00000620 <MouseHost_Task>:

/** Host USB management task. This task handles the control of USB Mice while in USB Host mode,
 *  setting up the appropriate data pipes and processing reports from the attached device.
 */
void MouseHost_Task(void)
{
     620:	df 93       	push	r29
     622:	cf 93       	push	r28
     624:	00 d0       	rcall	.+0      	; 0x626 <MouseHost_Task+0x6>
     626:	0f 92       	push	r0
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     62c:	80 91 f9 01 	lds	r24, 0x01F9
     630:	8b 30       	cpi	r24, 0x0B	; 11
     632:	09 f0       	breq	.+2      	; 0x636 <MouseHost_Task+0x16>
     634:	50 c0       	rjmp	.+160    	; 0x6d6 <MouseHost_Task+0xb6>
	  return;

	if (HID_Host_IsReportReceived(&Mouse_HID_Host_Interface))
     636:	8b eb       	ldi	r24, 0xBB	; 187
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	0e 94 3c 12 	call	0x2478	; 0x2478 <HID_Host_IsReportReceived>
     63e:	88 23       	and	r24, r24
     640:	09 f4       	brne	.+2      	; 0x644 <MouseHost_Task+0x24>
     642:	49 c0       	rjmp	.+146    	; 0x6d6 <MouseHost_Task+0xb6>
	{
		uint8_t LEDMask  = LEDS_NO_LEDS;

		USB_MouseReport_Data_t MouseReport;
		HID_Host_ReceiveReport(&Mouse_HID_Host_Interface, &MouseReport);
     644:	8b eb       	ldi	r24, 0xBB	; 187
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	be 01       	movw	r22, r28
     64a:	6f 5f       	subi	r22, 0xFF	; 255
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <HID_Host_ReceiveReport>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     652:	2d b7       	in	r18, 0x3d	; 61
     654:	3e b7       	in	r19, 0x3e	; 62
     656:	28 50       	subi	r18, 0x08	; 8
     658:	30 40       	sbci	r19, 0x00	; 0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	3e bf       	out	0x3e, r19	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	2d bf       	out	0x3d, r18	; 61
     664:	ed b7       	in	r30, 0x3d	; 61
     666:	fe b7       	in	r31, 0x3e	; 62
     668:	31 96       	adiw	r30, 0x01	; 1
     66a:	80 ea       	ldi	r24, 0xA0	; 160
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	ad b7       	in	r26, 0x3d	; 61
     670:	be b7       	in	r27, 0x3e	; 62
     672:	12 96       	adiw	r26, 0x02	; 2
     674:	9c 93       	st	X, r25
     676:	8e 93       	st	-X, r24
     678:	11 97       	sbiw	r26, 0x01	; 1
     67a:	8a 81       	ldd	r24, Y+2	; 0x02
     67c:	99 27       	eor	r25, r25
     67e:	87 fd       	sbrc	r24, 7
     680:	90 95       	com	r25
     682:	93 83       	std	Z+3, r25	; 0x03
     684:	82 83       	std	Z+2, r24	; 0x02
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	99 27       	eor	r25, r25
     68a:	87 fd       	sbrc	r24, 7
     68c:	90 95       	com	r25
     68e:	95 83       	std	Z+5, r25	; 0x05
     690:	84 83       	std	Z+4, r24	; 0x04
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	86 83       	std	Z+6, r24	; 0x06
     696:	17 82       	std	Z+7, r1	; 0x07
     698:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <printf_P>
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	2d b7       	in	r18, 0x3d	; 61
     6a0:	3e b7       	in	r19, 0x3e	; 62
     6a2:	28 5f       	subi	r18, 0xF8	; 248
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	3e bf       	out	0x3e, r19	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	2d bf       	out	0x3d, r18	; 61
     6b0:	18 16       	cp	r1, r24
     6b2:	1c f0       	brlt	.+6      	; 0x6ba <MouseHost_Task+0x9a>
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
     6b4:	88 23       	and	r24, r24
     6b6:	21 f0       	breq	.+8      	; 0x6c0 <MouseHost_Task+0xa0>
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <MouseHost_Task+0x9e>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
		  LEDMask |= LEDS_LED1;
     6ba:	80 e1       	ldi	r24, 0x10	; 16
     6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <MouseHost_Task+0xa0>
		else if (MouseReport.X < 0)
		  LEDMask |= LEDS_LED2;
     6be:	80 e2       	ldi	r24, 0x20	; 32

		if (MouseReport.Y > 0)
     6c0:	9b 81       	ldd	r25, Y+3	; 0x03
     6c2:	19 16       	cp	r1, r25
     6c4:	14 f4       	brge	.+4      	; 0x6ca <MouseHost_Task+0xaa>
		  LEDMask |= LEDS_LED3;
     6c6:	80 68       	ori	r24, 0x80	; 128
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <MouseHost_Task+0xae>
		else if (MouseReport.Y < 0)
     6ca:	91 11       	cpse	r25, r1
		  LEDMask |= LEDS_LED4;
     6cc:	80 64       	ori	r24, 0x40	; 64

		if (MouseReport.Button)
     6ce:	99 81       	ldd	r25, Y+1	; 0x01
     6d0:	91 11       	cpse	r25, r1
		  LEDMask  = LEDS_ALL_LEDS;
     6d2:	80 ef       	ldi	r24, 0xF0	; 240

		LEDs_SetAllLEDs(LEDMask);
     6d4:	f9 de       	rcall	.-526    	; 0x4c8 <LEDs_SetAllLEDs>
	}
}
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	cf 91       	pop	r28
     6de:	df 91       	pop	r29
     6e0:	08 95       	ret

000006e2 <USB_GetHIDReportSize>:
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     6e2:	e4 2f       	mov	r30, r20
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	ef 56       	subi	r30, 0x6F	; 111
     6ec:	fc 4f       	sbci	r31, 0xFC	; 252
     6ee:	e8 0f       	add	r30, r24
     6f0:	f9 1f       	adc	r31, r25
     6f2:	80 57       	subi	r24, 0x70	; 112
     6f4:	9c 4f       	sbci	r25, 0xFC	; 252
     6f6:	4a e0       	ldi	r20, 0x0A	; 10
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     6f8:	20 81       	ld	r18, Z
     6fa:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
     6fc:	dc 01       	movw	r26, r24
     6fe:	5c 91       	ld	r21, X
     700:	56 17       	cp	r21, r22
     702:	91 f4       	brne	.+36     	; 0x728 <USB_GetHIDReportSize+0x46>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
     704:	a9 01       	movw	r20, r18
     706:	47 70       	andi	r20, 0x07	; 7
     708:	50 70       	andi	r21, 0x00	; 0
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	41 15       	cp	r20, r1
     710:	51 05       	cpc	r21, r1
     712:	11 f4       	brne	.+4      	; 0x718 <USB_GetHIDReportSize+0x36>
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	43 e0       	ldi	r20, 0x03	; 3
     71a:	36 95       	lsr	r19
     71c:	27 95       	ror	r18
     71e:	4a 95       	dec	r20
     720:	e1 f7       	brne	.-8      	; 0x71a <USB_GetHIDReportSize+0x38>
     722:	28 0f       	add	r18, r24
     724:	39 1f       	adc	r19, r25
     726:	07 c0       	rjmp	.+14     	; 0x736 <USB_GetHIDReportSize+0x54>
     728:	41 50       	subi	r20, 0x01	; 1
     72a:	37 96       	adiw	r30, 0x07	; 7
     72c:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
     72e:	44 23       	and	r20, r20
     730:	19 f7       	brne	.-58     	; 0x6f8 <USB_GetHIDReportSize+0x16>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
}
     736:	c9 01       	movw	r24, r18
     738:	08 95       	ret

0000073a <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     73a:	8f 92       	push	r8
     73c:	9f 92       	push	r9
     73e:	bf 92       	push	r11
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	df 93       	push	r29
     74e:	cf 93       	push	r28
     750:	0f 92       	push	r0
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	e8 2e       	mov	r14, r24
     758:	4b 01       	movw	r8, r22
     75a:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     75c:	99 83       	std	Y+1, r25	; 0x01
     75e:	e5 d1       	rcall	.+970    	; 0xb2a <Endpoint_WaitUntilReady>
     760:	b8 2e       	mov	r11, r24
     762:	99 81       	ldd	r25, Y+1	; 0x01
     764:	88 23       	and	r24, r24
     766:	d1 f5       	brne	.+116    	; 0x7dc <Endpoint_Write_Stream_LE+0xa2>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     768:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     76a:	01 15       	cp	r16, r1
     76c:	11 05       	cpc	r17, r1
     76e:	39 f0       	breq	.+14     	; 0x77e <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     770:	f8 01       	movw	r30, r16
     772:	20 81       	ld	r18, Z
     774:	31 81       	ldd	r19, Z+1	; 0x01
     776:	82 1a       	sub	r8, r18
     778:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     77a:	e2 0e       	add	r14, r18
     77c:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     77e:	cc 24       	eor	r12, r12
     780:	dd 24       	eor	r13, r13
     782:	27 c0       	rjmp	.+78     	; 0x7d2 <Endpoint_Write_Stream_LE+0x98>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     784:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     788:	85 fd       	sbrc	r24, 5
     78a:	18 c0       	rjmp	.+48     	; 0x7bc <Endpoint_Write_Stream_LE+0x82>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     78c:	80 91 e8 00 	lds	r24, 0x00E8
     790:	8e 77       	andi	r24, 0x7E	; 126
     792:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     796:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
     79a:	01 15       	cp	r16, r1
     79c:	11 05       	cpc	r17, r1
     79e:	51 f0       	breq	.+20     	; 0x7b4 <Endpoint_Write_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     7a0:	f8 01       	movw	r30, r16
     7a2:	80 81       	ld	r24, Z
     7a4:	91 81       	ldd	r25, Z+1	; 0x01
     7a6:	8c 0d       	add	r24, r12
     7a8:	9d 1d       	adc	r25, r13
     7aa:	91 83       	std	Z+1, r25	; 0x01
     7ac:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     7ae:	25 e0       	ldi	r18, 0x05	; 5
     7b0:	b2 2e       	mov	r11, r18
     7b2:	14 c0       	rjmp	.+40     	; 0x7dc <Endpoint_Write_Stream_LE+0xa2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     7b4:	ba d1       	rcall	.+884    	; 0xb2a <Endpoint_WaitUntilReady>
     7b6:	88 23       	and	r24, r24
     7b8:	61 f0       	breq	.+24     	; 0x7d2 <Endpoint_Write_Stream_LE+0x98>
     7ba:	0f c0       	rjmp	.+30     	; 0x7da <Endpoint_Write_Stream_LE+0xa0>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     7bc:	f7 01       	movw	r30, r14
     7be:	81 91       	ld	r24, Z+
     7c0:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7c2:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     7c6:	08 94       	sec
     7c8:	81 08       	sbc	r8, r1
     7ca:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     7cc:	08 94       	sec
     7ce:	c1 1c       	adc	r12, r1
     7d0:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     7d2:	81 14       	cp	r8, r1
     7d4:	91 04       	cpc	r9, r1
     7d6:	b1 f6       	brne	.-84     	; 0x784 <Endpoint_Write_Stream_LE+0x4a>
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <Endpoint_Write_Stream_LE+0xa2>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     7da:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     7dc:	8b 2d       	mov	r24, r11
     7de:	0f 90       	pop	r0
     7e0:	cf 91       	pop	r28
     7e2:	df 91       	pop	r29
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	ff 90       	pop	r15
     7ea:	ef 90       	pop	r14
     7ec:	df 90       	pop	r13
     7ee:	cf 90       	pop	r12
     7f0:	bf 90       	pop	r11
     7f2:	9f 90       	pop	r9
     7f4:	8f 90       	pop	r8
     7f6:	08 95       	ret

000007f8 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     7f8:	28 2f       	mov	r18, r24
     7fa:	39 2f       	mov	r19, r25
     7fc:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     7fe:	80 91 f7 01 	lds	r24, 0x01F7
     802:	90 91 f8 01 	lds	r25, 0x01F8
     806:	86 17       	cp	r24, r22
     808:	97 07       	cpc	r25, r23
     80a:	18 f4       	brcc	.+6      	; 0x812 <Endpoint_Write_Control_Stream_LE+0x1a>
     80c:	bc 01       	movw	r22, r24
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	37 c0       	rjmp	.+110    	; 0x880 <Endpoint_Write_Control_Stream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     812:	61 15       	cp	r22, r1
     814:	71 05       	cpc	r23, r1
     816:	d9 f7       	brne	.-10     	; 0x80e <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     818:	80 91 e8 00 	lds	r24, 0x00E8
     81c:	8e 77       	andi	r24, 0x7E	; 126
     81e:	80 93 e8 00 	sts	0x00E8, r24
     822:	f5 cf       	rjmp	.-22     	; 0x80e <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     824:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     828:	88 23       	and	r24, r24
     82a:	09 f4       	brne	.+2      	; 0x82e <Endpoint_Write_Control_Stream_LE+0x36>
     82c:	3f c0       	rjmp	.+126    	; 0x8ac <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     82e:	85 30       	cpi	r24, 0x05	; 5
     830:	c9 f1       	breq	.+114    	; 0x8a4 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     832:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     836:	83 fd       	sbrc	r24, 3
     838:	37 c0       	rjmp	.+110    	; 0x8a8 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     83a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     83e:	82 fd       	sbrc	r24, 2
     840:	2b c0       	rjmp	.+86     	; 0x898 <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     842:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     846:	80 ff       	sbrs	r24, 0
     848:	1b c0       	rjmp	.+54     	; 0x880 <Endpoint_Write_Control_Stream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     84a:	80 91 f2 00 	lds	r24, 0x00F2
     84e:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     852:	06 c0       	rjmp	.+12     	; 0x860 <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     854:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     856:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     85a:	61 50       	subi	r22, 0x01	; 1
     85c:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     85e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     860:	61 15       	cp	r22, r1
     862:	71 05       	cpc	r23, r1
     864:	19 f0       	breq	.+6      	; 0x86c <Endpoint_Write_Control_Stream_LE+0x74>
     866:	88 30       	cpi	r24, 0x08	; 8
     868:	91 05       	cpc	r25, r1
     86a:	a0 f3       	brcs	.-24     	; 0x854 <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     86c:	21 e0       	ldi	r18, 0x01	; 1
     86e:	88 30       	cpi	r24, 0x08	; 8
     870:	91 05       	cpc	r25, r1
     872:	09 f0       	breq	.+2      	; 0x876 <Endpoint_Write_Control_Stream_LE+0x7e>
     874:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     876:	80 91 e8 00 	lds	r24, 0x00E8
     87a:	8e 77       	andi	r24, 0x7E	; 126
     87c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     880:	61 15       	cp	r22, r1
     882:	71 05       	cpc	r23, r1
     884:	79 f6       	brne	.-98     	; 0x824 <Endpoint_Write_Control_Stream_LE+0x2c>
     886:	22 23       	and	r18, r18
     888:	69 f6       	brne	.-102    	; 0x824 <Endpoint_Write_Control_Stream_LE+0x2c>
     88a:	06 c0       	rjmp	.+12     	; 0x898 <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     88c:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     890:	88 23       	and	r24, r24
     892:	61 f0       	breq	.+24     	; 0x8ac <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     894:	85 30       	cpi	r24, 0x05	; 5
     896:	61 f0       	breq	.+24     	; 0x8b0 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     898:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     89c:	82 ff       	sbrs	r24, 2
     89e:	f6 cf       	rjmp	.-20     	; 0x88c <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     8b0:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8b2:	08 95       	ret

000008b4 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     8b4:	61 15       	cp	r22, r1
     8b6:	71 05       	cpc	r23, r1
     8b8:	31 f5       	brne	.+76     	; 0x906 <Endpoint_Read_Control_Stream_LE+0x52>
     8ba:	20 c0       	rjmp	.+64     	; 0x8fc <Endpoint_Read_Control_Stream_LE+0x48>
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8bc:	20 91 f0 01 	lds	r18, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8c0:	22 23       	and	r18, r18
     8c2:	a9 f1       	breq	.+106    	; 0x92e <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8c4:	25 30       	cpi	r18, 0x05	; 5
     8c6:	79 f1       	breq	.+94     	; 0x926 <Endpoint_Read_Control_Stream_LE+0x72>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8c8:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     8cc:	23 fd       	sbrc	r18, 3
     8ce:	2d c0       	rjmp	.+90     	; 0x92a <Endpoint_Read_Control_Stream_LE+0x76>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8d0:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     8d4:	22 ff       	sbrs	r18, 2
     8d6:	f2 cf       	rjmp	.-28     	; 0x8bc <Endpoint_Read_Control_Stream_LE+0x8>
     8d8:	e8 2f       	mov	r30, r24
     8da:	f9 2f       	mov	r31, r25
     8dc:	07 c0       	rjmp	.+14     	; 0x8ec <Endpoint_Read_Control_Stream_LE+0x38>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     8de:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     8e2:	81 93       	st	Z+, r24
     8e4:	cf 01       	movw	r24, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     8e6:	61 50       	subi	r22, 0x01	; 1
     8e8:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     8ea:	41 f0       	breq	.+16     	; 0x8fc <Endpoint_Read_Control_Stream_LE+0x48>
     8ec:	cf 01       	movw	r24, r30
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     8ee:	20 91 f2 00 	lds	r18, 0x00F2
     8f2:	30 91 f3 00 	lds	r19, 0x00F3
     8f6:	21 15       	cp	r18, r1
     8f8:	31 05       	cpc	r19, r1
     8fa:	89 f7       	brne	.-30     	; 0x8de <Endpoint_Read_Control_Stream_LE+0x2a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8fc:	20 91 e8 00 	lds	r18, 0x00E8
     900:	2b 77       	andi	r18, 0x7B	; 123
     902:	20 93 e8 00 	sts	0x00E8, r18
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     906:	61 15       	cp	r22, r1
     908:	71 05       	cpc	r23, r1
     90a:	c1 f6       	brne	.-80     	; 0x8bc <Endpoint_Read_Control_Stream_LE+0x8>
     90c:	06 c0       	rjmp	.+12     	; 0x91a <Endpoint_Read_Control_Stream_LE+0x66>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     90e:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     912:	88 23       	and	r24, r24
     914:	61 f0       	breq	.+24     	; 0x92e <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     916:	85 30       	cpi	r24, 0x05	; 5
     918:	61 f0       	breq	.+24     	; 0x932 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     91a:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     91e:	80 ff       	sbrs	r24, 0
     920:	f6 cf       	rjmp	.-20     	; 0x90e <Endpoint_Read_Control_Stream_LE+0x5a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     932:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     934:	08 95       	ret

00000936 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     936:	e8 2f       	mov	r30, r24
     938:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     93a:	80 91 f7 01 	lds	r24, 0x01F7
     93e:	90 91 f8 01 	lds	r25, 0x01F8
     942:	86 17       	cp	r24, r22
     944:	97 07       	cpc	r25, r23
     946:	18 f4       	brcc	.+6      	; 0x94e <Endpoint_Write_Control_PStream_LE+0x18>
     948:	bc 01       	movw	r22, r24
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	38 c0       	rjmp	.+112    	; 0x9be <Endpoint_Write_Control_PStream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     94e:	61 15       	cp	r22, r1
     950:	71 05       	cpc	r23, r1
     952:	d9 f7       	brne	.-10     	; 0x94a <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     954:	80 91 e8 00 	lds	r24, 0x00E8
     958:	8e 77       	andi	r24, 0x7E	; 126
     95a:	80 93 e8 00 	sts	0x00E8, r24
     95e:	f5 cf       	rjmp	.-22     	; 0x94a <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     960:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     964:	88 23       	and	r24, r24
     966:	09 f4       	brne	.+2      	; 0x96a <Endpoint_Write_Control_PStream_LE+0x34>
     968:	40 c0       	rjmp	.+128    	; 0x9ea <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     96a:	85 30       	cpi	r24, 0x05	; 5
     96c:	d1 f1       	breq	.+116    	; 0x9e2 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     96e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     972:	83 fd       	sbrc	r24, 3
     974:	38 c0       	rjmp	.+112    	; 0x9e6 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     976:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     97a:	82 fd       	sbrc	r24, 2
     97c:	2c c0       	rjmp	.+88     	; 0x9d6 <Endpoint_Write_Control_PStream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     97e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     982:	80 ff       	sbrs	r24, 0
     984:	1c c0       	rjmp	.+56     	; 0x9be <Endpoint_Write_Control_PStream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     986:	80 91 f2 00 	lds	r24, 0x00F2
     98a:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     98e:	07 c0       	rjmp	.+14     	; 0x99e <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     990:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     992:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     996:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     998:	61 50       	subi	r22, 0x01	; 1
     99a:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     99c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     99e:	61 15       	cp	r22, r1
     9a0:	71 05       	cpc	r23, r1
     9a2:	19 f0       	breq	.+6      	; 0x9aa <Endpoint_Write_Control_PStream_LE+0x74>
     9a4:	88 30       	cpi	r24, 0x08	; 8
     9a6:	91 05       	cpc	r25, r1
     9a8:	98 f3       	brcs	.-26     	; 0x990 <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     9aa:	21 e0       	ldi	r18, 0x01	; 1
     9ac:	88 30       	cpi	r24, 0x08	; 8
     9ae:	91 05       	cpc	r25, r1
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <Endpoint_Write_Control_PStream_LE+0x7e>
     9b2:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9b4:	80 91 e8 00 	lds	r24, 0x00E8
     9b8:	8e 77       	andi	r24, 0x7E	; 126
     9ba:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     9be:	61 15       	cp	r22, r1
     9c0:	71 05       	cpc	r23, r1
     9c2:	71 f6       	brne	.-100    	; 0x960 <Endpoint_Write_Control_PStream_LE+0x2a>
     9c4:	22 23       	and	r18, r18
     9c6:	61 f6       	brne	.-104    	; 0x960 <Endpoint_Write_Control_PStream_LE+0x2a>
     9c8:	06 c0       	rjmp	.+12     	; 0x9d6 <Endpoint_Write_Control_PStream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9ca:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9ce:	88 23       	and	r24, r24
     9d0:	61 f0       	breq	.+24     	; 0x9ea <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9d2:	85 30       	cpi	r24, 0x05	; 5
     9d4:	61 f0       	breq	.+24     	; 0x9ee <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9d6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     9da:	82 ff       	sbrs	r24, 2
     9dc:	f6 cf       	rjmp	.-20     	; 0x9ca <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9e2:	83 e0       	ldi	r24, 0x03	; 3
     9e4:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     9ea:	82 e0       	ldi	r24, 0x02	; 2
     9ec:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9ee:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     9f0:	08 95       	ret

000009f2 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     9f2:	98 2f       	mov	r25, r24
     9f4:	2c c0       	rjmp	.+88     	; 0xa4e <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9f6:	29 2f       	mov	r18, r25
     9f8:	2f 70       	andi	r18, 0x0F	; 15
     9fa:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     9fe:	98 17       	cp	r25, r24
     a00:	39 f0       	breq	.+14     	; 0xa10 <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     a02:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     a06:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     a0a:	50 91 f0 00 	lds	r21, 0x00F0
     a0e:	03 c0       	rjmp	.+6      	; 0xa16 <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     a10:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     a12:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     a14:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     a16:	21 ff       	sbrs	r18, 1
     a18:	19 c0       	rjmp	.+50     	; 0xa4c <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     a1a:	30 91 eb 00 	lds	r19, 0x00EB
     a1e:	3e 7f       	andi	r19, 0xFE	; 254
     a20:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     a24:	30 91 ed 00 	lds	r19, 0x00ED
     a28:	3d 7f       	andi	r19, 0xFD	; 253
     a2a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     a2e:	30 91 eb 00 	lds	r19, 0x00EB
     a32:	31 60       	ori	r19, 0x01	; 1
     a34:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     a38:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     a3c:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     a40:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     a44:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     a48:	27 ff       	sbrs	r18, 7
     a4a:	08 c0       	rjmp	.+16     	; 0xa5c <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     a4c:	9f 5f       	subi	r25, 0xFF	; 255
     a4e:	97 30       	cpi	r25, 0x07	; 7
     a50:	90 f2       	brcs	.-92     	; 0x9f6 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a52:	8f 70       	andi	r24, 0x0F	; 15
     a54:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     a5c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     a5e:	08 95       	ret

00000a60 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     a6e:	e8 2e       	mov	r14, r24
     a70:	e7 01       	movw	r28, r14
     a72:	7e 01       	movw	r14, r28
     a74:	f9 2e       	mov	r15, r25
     a76:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a78:	00 e0       	ldi	r16, 0x00	; 0
     a7a:	2a c0       	rjmp	.+84     	; 0xad0 <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     a7c:	98 81       	ld	r25, Y
     a7e:	99 23       	and	r25, r25
     a80:	29 f1       	breq	.+74     	; 0xacc <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     a82:	6b 81       	ldd	r22, Y+3	; 0x03
     a84:	e9 81       	ldd	r30, Y+1	; 0x01
     a86:	fa 81       	ldd	r31, Y+2	; 0x02
     a88:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     a8a:	89 2f       	mov	r24, r25
     a8c:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     a8e:	87 30       	cpi	r24, 0x07	; 7
     a90:	18 f5       	brcc	.+70     	; 0xad8 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     a92:	62 95       	swap	r22
     a94:	66 0f       	add	r22, r22
     a96:	66 0f       	add	r22, r22
     a98:	60 7c       	andi	r22, 0xC0	; 192
     a9a:	99 1f       	adc	r25, r25
     a9c:	99 27       	eor	r25, r25
     a9e:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     aa0:	69 2b       	or	r22, r25
     aa2:	22 30       	cpi	r18, 0x02	; 2
     aa4:	10 f0       	brcs	.+4      	; 0xaaa <Endpoint_ConfigureEndpointTable+0x4a>
     aa6:	96 e0       	ldi	r25, 0x06	; 6
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <Endpoint_ConfigureEndpointTable+0x4c>
     aaa:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     aac:	28 e0       	ldi	r18, 0x08	; 8
     aae:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	03 c0       	rjmp	.+6      	; 0xaba <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     ab4:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     ab6:	22 0f       	add	r18, r18
     ab8:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     aba:	2e 17       	cp	r18, r30
     abc:	3f 07       	cpc	r19, r31
     abe:	d0 f3       	brcs	.-12     	; 0xab4 <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     ac0:	42 95       	swap	r20
     ac2:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ac4:	49 2b       	or	r20, r25
     ac6:	95 df       	rcall	.-214    	; 0x9f2 <Endpoint_ConfigureEndpoint_Prv>
     ac8:	88 23       	and	r24, r24
     aca:	31 f0       	breq	.+12     	; 0xad8 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     acc:	0f 5f       	subi	r16, 0xFF	; 255
     ace:	25 96       	adiw	r28, 0x05	; 5
     ad0:	01 17       	cp	r16, r17
     ad2:	a0 f2       	brcs	.-88     	; 0xa7c <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	01 c0       	rjmp	.+2      	; 0xada <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     ad8:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	08 95       	ret

00000ae8 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     ae8:	80 91 f1 01 	lds	r24, 0x01F1
     aec:	87 ff       	sbrs	r24, 7
     aee:	13 c0       	rjmp	.+38     	; 0xb16 <Endpoint_ClearStatusStage+0x2e>
     af0:	04 c0       	rjmp	.+8      	; 0xafa <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     af2:	80 91 f0 01 	lds	r24, 0x01F0
     af6:	88 23       	and	r24, r24
     af8:	b9 f0       	breq	.+46     	; 0xb28 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     afa:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     afe:	82 ff       	sbrs	r24, 2
     b00:	f8 cf       	rjmp	.-16     	; 0xaf2 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b02:	80 91 e8 00 	lds	r24, 0x00E8
     b06:	8b 77       	andi	r24, 0x7B	; 123
     b08:	80 93 e8 00 	sts	0x00E8, r24
     b0c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     b0e:	80 91 f0 01 	lds	r24, 0x01F0
     b12:	88 23       	and	r24, r24
     b14:	49 f0       	breq	.+18     	; 0xb28 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b16:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     b1a:	80 ff       	sbrs	r24, 0
     b1c:	f8 cf       	rjmp	.-16     	; 0xb0e <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b1e:	80 91 e8 00 	lds	r24, 0x00E8
     b22:	8e 77       	andi	r24, 0x7E	; 126
     b24:	80 93 e8 00 	sts	0x00E8, r24
     b28:	08 95       	ret

00000b2a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     b2a:	80 91 e4 00 	lds	r24, 0x00E4
     b2e:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     b32:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b34:	20 91 ec 00 	lds	r18, 0x00EC
     b38:	20 ff       	sbrs	r18, 0
     b3a:	26 c0       	rjmp	.+76     	; 0xb88 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b3c:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     b40:	20 fd       	sbrc	r18, 0
     b42:	16 c0       	rjmp	.+44     	; 0xb70 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b44:	20 91 f0 01 	lds	r18, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b48:	22 23       	and	r18, r18
     b4a:	a1 f0       	breq	.+40     	; 0xb74 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b4c:	25 30       	cpi	r18, 0x05	; 5
     b4e:	a1 f0       	breq	.+40     	; 0xb78 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b50:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     b54:	25 fd       	sbrc	r18, 5
     b56:	12 c0       	rjmp	.+36     	; 0xb7c <Endpoint_WaitUntilReady+0x52>
     b58:	20 91 e4 00 	lds	r18, 0x00E4
     b5c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b60:	28 17       	cp	r18, r24
     b62:	39 07       	cpc	r19, r25
     b64:	39 f3       	breq	.-50     	; 0xb34 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b66:	44 23       	and	r20, r20
     b68:	59 f0       	breq	.+22     	; 0xb80 <Endpoint_WaitUntilReady+0x56>
     b6a:	41 50       	subi	r20, 0x01	; 1
     b6c:	c9 01       	movw	r24, r18
     b6e:	e2 cf       	rjmp	.-60     	; 0xb34 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     b80:	84 e0       	ldi	r24, 0x04	; 4
     b82:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     b84:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     b86:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b88:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     b8c:	22 ff       	sbrs	r18, 2
     b8e:	da cf       	rjmp	.-76     	; 0xb44 <Endpoint_WaitUntilReady+0x1a>
     b90:	f9 cf       	rjmp	.-14     	; 0xb84 <Endpoint_WaitUntilReady+0x5a>

00000b92 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     b92:	80 91 9e 00 	lds	r24, 0x009E
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	81 70       	andi	r24, 0x01	; 1
     b9a:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     b9c:	20 91 a0 00 	lds	r18, 0x00A0
     ba0:	2d 7f       	andi	r18, 0xFD	; 253
     ba2:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     ba6:	20 91 9e 00 	lds	r18, 0x009E
     baa:	22 60       	ori	r18, 0x02	; 2
     bac:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     bb0:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     bb4:	21 fd       	sbrc	r18, 1
     bb6:	fc cf       	rjmp	.-8      	; 0xbb0 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     bb8:	20 91 9e 00 	lds	r18, 0x009E
     bbc:	21 60       	ori	r18, 0x01	; 1
     bbe:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     bc2:	10 92 ee 01 	sts	0x01EE, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     bc6:	20 91 a0 00 	lds	r18, 0x00A0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	20 72       	andi	r18, 0x20	; 32
     bce:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     bd0:	40 91 a0 00 	lds	r20, 0x00A0
     bd4:	4f 7d       	andi	r20, 0xDF	; 223
     bd6:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bda:	40 91 9f 00 	lds	r20, 0x009F
     bde:	4f 7d       	andi	r20, 0xDF	; 223
     be0:	40 93 9f 00 	sts	0x009F, r20
     be4:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     be6:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     bea:	55 ff       	sbrs	r21, 5
     bec:	0b c0       	rjmp	.+22     	; 0xc04 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bee:	40 91 9f 00 	lds	r20, 0x009F
     bf2:	4f 7d       	andi	r20, 0xDF	; 223
     bf4:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bf8:	40 91 9f 00 	lds	r20, 0x009F
     bfc:	4d 7f       	andi	r20, 0xFD	; 253
     bfe:	40 93 9f 00 	sts	0x009F, r20
     c02:	08 c0       	rjmp	.+16     	; 0xc14 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c04:	ef ec       	ldi	r30, 0xCF	; 207
     c06:	f7 e0       	ldi	r31, 0x07	; 7
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <USB_Host_ResetDevice+0x76>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <USB_Host_ResetDevice+0x7c>
     c0e:	00 00       	nop
     c10:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     c12:	49 f7       	brne	.-46     	; 0xbe6 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     c14:	21 15       	cp	r18, r1
     c16:	31 05       	cpc	r19, r1
     c18:	29 f0       	breq	.+10     	; 0xc24 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     c1a:	20 91 a0 00 	lds	r18, 0x00A0
     c1e:	20 62       	ori	r18, 0x20	; 32
     c20:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	29 f4       	brne	.+10     	; 0xc32 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     c28:	80 91 9e 00 	lds	r24, 0x009E
     c2c:	8e 7f       	andi	r24, 0xFE	; 254
     c2e:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c32:	80 91 a0 00 	lds	r24, 0x00A0
     c36:	82 60       	ori	r24, 0x02	; 2
     c38:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     c3c:	08 95       	ret

00000c3e <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     c3e:	40 91 9e 00 	lds	r20, 0x009E
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	41 70       	andi	r20, 0x01	; 1
     c46:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c48:	20 91 a0 00 	lds	r18, 0x00A0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	20 72       	andi	r18, 0x20	; 32
     c50:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     c52:	90 91 a0 00 	lds	r25, 0x00A0
     c56:	9f 7d       	andi	r25, 0xDF	; 223
     c58:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c5c:	90 91 9f 00 	lds	r25, 0x009F
     c60:	9f 7d       	andi	r25, 0xDF	; 223
     c62:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     c66:	90 91 9e 00 	lds	r25, 0x009E
     c6a:	91 60       	ori	r25, 0x01	; 1
     c6c:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     c70:	2a c0       	rjmp	.+84     	; 0xcc6 <USB_Host_WaitMS+0x88>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c72:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     c76:	95 ff       	sbrs	r25, 5
     c78:	06 c0       	rjmp	.+12     	; 0xc86 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c7a:	90 91 9f 00 	lds	r25, 0x009F
     c7e:	9f 7d       	andi	r25, 0xDF	; 223
     c80:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     c84:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     c86:	90 91 f9 01 	lds	r25, 0x01F9
     c8a:	91 30       	cpi	r25, 0x01	; 1
     c8c:	f9 f0       	breq	.+62     	; 0xccc <USB_Host_WaitMS+0x8e>
     c8e:	90 91 ea 01 	lds	r25, 0x01EA
     c92:	92 30       	cpi	r25, 0x02	; 2
     c94:	d9 f4       	brne	.+54     	; 0xccc <USB_Host_WaitMS+0x8e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     c96:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     c9a:	94 ff       	sbrs	r25, 4
     c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <USB_Host_WaitMS+0x72>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     c9e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     ca2:	80 91 a6 00 	lds	r24, 0x00A6
     ca6:	8f 7e       	andi	r24, 0xEF	; 239
     ca8:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     cac:	82 e0       	ldi	r24, 0x02	; 2

			break;
     cae:	0f c0       	rjmp	.+30     	; 0xcce <USB_Host_WaitMS+0x90>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     cb0:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     cb4:	91 ff       	sbrs	r25, 1
     cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <USB_Host_WaitMS+0x88>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     cb8:	80 91 a6 00 	lds	r24, 0x00A6
     cbc:	8d 7f       	andi	r24, 0xFD	; 253
     cbe:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     cc2:	83 e0       	ldi	r24, 0x03	; 3

			break;
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <USB_Host_WaitMS+0x90>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     cc6:	88 23       	and	r24, r24
     cc8:	a1 f6       	brne	.-88     	; 0xc72 <USB_Host_WaitMS+0x34>
     cca:	01 c0       	rjmp	.+2      	; 0xcce <USB_Host_WaitMS+0x90>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     ccc:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     cce:	41 15       	cp	r20, r1
     cd0:	51 05       	cpc	r21, r1
     cd2:	29 f4       	brne	.+10     	; 0xcde <USB_Host_WaitMS+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     cd4:	90 91 9e 00 	lds	r25, 0x009E
     cd8:	9e 7f       	andi	r25, 0xFE	; 254
     cda:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     cde:	21 15       	cp	r18, r1
     ce0:	31 05       	cpc	r19, r1
     ce2:	29 f0       	breq	.+10     	; 0xcee <USB_Host_WaitMS+0xb0>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     ce4:	90 91 a0 00 	lds	r25, 0x00A0
     ce8:	90 62       	ori	r25, 0x20	; 32
     cea:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     cee:	08 95       	ret

00000cf0 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	28 97       	sbiw	r28, 0x08	; 8
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     d08:	80 91 f9 01 	lds	r24, 0x01F9
     d0c:	85 30       	cpi	r24, 0x05	; 5
     d0e:	09 f4       	brne	.+2      	; 0xd12 <USB_Host_ProcessNextHostState+0x22>
     d10:	99 c0       	rjmp	.+306    	; 0xe44 <USB_Host_ProcessNextHostState+0x154>
     d12:	86 30       	cpi	r24, 0x06	; 6
     d14:	68 f4       	brcc	.+26     	; 0xd30 <USB_Host_ProcessNextHostState+0x40>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	c1 f1       	breq	.+112    	; 0xd8a <USB_Host_ProcessNextHostState+0x9a>
     d1a:	83 30       	cpi	r24, 0x03	; 3
     d1c:	18 f4       	brcc	.+6      	; 0xd24 <USB_Host_ProcessNextHostState+0x34>
     d1e:	88 23       	and	r24, r24
     d20:	a1 f0       	breq	.+40     	; 0xd4a <USB_Host_ProcessNextHostState+0x5a>
     d22:	04 c1       	rjmp	.+520    	; 0xf2c <USB_Host_ProcessNextHostState+0x23c>
     d24:	83 30       	cpi	r24, 0x03	; 3
     d26:	d9 f1       	breq	.+118    	; 0xd9e <USB_Host_ProcessNextHostState+0xae>
     d28:	84 30       	cpi	r24, 0x04	; 4
     d2a:	09 f0       	breq	.+2      	; 0xd2e <USB_Host_ProcessNextHostState+0x3e>
     d2c:	ff c0       	rjmp	.+510    	; 0xf2c <USB_Host_ProcessNextHostState+0x23c>
     d2e:	62 c0       	rjmp	.+196    	; 0xdf4 <USB_Host_ProcessNextHostState+0x104>
     d30:	87 30       	cpi	r24, 0x07	; 7
     d32:	09 f4       	brne	.+2      	; 0xd36 <USB_Host_ProcessNextHostState+0x46>
     d34:	9e c0       	rjmp	.+316    	; 0xe72 <USB_Host_ProcessNextHostState+0x182>
     d36:	87 30       	cpi	r24, 0x07	; 7
     d38:	08 f4       	brcc	.+2      	; 0xd3c <USB_Host_ProcessNextHostState+0x4c>
     d3a:	8f c0       	rjmp	.+286    	; 0xe5a <USB_Host_ProcessNextHostState+0x16a>
     d3c:	88 30       	cpi	r24, 0x08	; 8
     d3e:	09 f4       	brne	.+2      	; 0xd42 <USB_Host_ProcessNextHostState+0x52>
     d40:	b8 c0       	rjmp	.+368    	; 0xeb2 <USB_Host_ProcessNextHostState+0x1c2>
     d42:	89 30       	cpi	r24, 0x09	; 9
     d44:	09 f0       	breq	.+2      	; 0xd48 <USB_Host_ProcessNextHostState+0x58>
     d46:	f2 c0       	rjmp	.+484    	; 0xf2c <USB_Host_ProcessNextHostState+0x23c>
     d48:	d9 c0       	rjmp	.+434    	; 0xefc <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     d4a:	00 91 e8 01 	lds	r16, 0x01E8
     d4e:	10 91 e9 01 	lds	r17, 0x01E9
     d52:	01 15       	cp	r16, r1
     d54:	11 05       	cpc	r17, r1
     d56:	09 f4       	brne	.+2      	; 0xd5a <USB_Host_ProcessNextHostState+0x6a>
     d58:	e9 c0       	rjmp	.+466    	; 0xf2c <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	70 df       	rcall	.-288    	; 0xc3e <USB_Host_WaitMS>
     d5e:	68 2f       	mov	r22, r24
     d60:	88 23       	and	r24, r24
     d62:	31 f0       	breq	.+12     	; 0xd70 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     d64:	80 91 e7 01 	lds	r24, 0x01E7
     d68:	80 93 f9 01 	sts	0x01F9, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
					break;
     d6e:	d2 c0       	rjmp	.+420    	; 0xf14 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     d70:	01 50       	subi	r16, 0x01	; 1
     d72:	10 40       	sbci	r17, 0x00	; 0
     d74:	10 93 e9 01 	sts	0x01E9, r17
     d78:	00 93 e8 01 	sts	0x01E8, r16
     d7c:	01 15       	cp	r16, r1
     d7e:	11 05       	cpc	r17, r1
     d80:	09 f0       	breq	.+2      	; 0xd84 <USB_Host_ProcessNextHostState+0x94>
     d82:	d4 c0       	rjmp	.+424    	; 0xf2c <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     d84:	80 91 e7 01 	lds	r24, 0x01E7
     d88:	07 c0       	rjmp	.+14     	; 0xd98 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     d8a:	88 ee       	ldi	r24, 0xE8	; 232
     d8c:	93 e0       	ldi	r25, 0x03	; 3
     d8e:	90 93 e9 01 	sts	0x01E9, r25
     d92:	80 93 e8 01 	sts	0x01E8, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	80 93 f9 01 	sts	0x01F9, r24
			break;
     d9c:	c7 c0       	rjmp	.+398    	; 0xf2c <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     d9e:	80 91 e8 01 	lds	r24, 0x01E8
     da2:	90 91 e9 01 	lds	r25, 0x01E9
     da6:	9c 01       	movw	r18, r24
     da8:	21 50       	subi	r18, 0x01	; 1
     daa:	30 40       	sbci	r19, 0x00	; 0
     dac:	30 93 e9 01 	sts	0x01E9, r19
     db0:	20 93 e8 01 	sts	0x01E8, r18
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	39 f0       	breq	.+14     	; 0xdc6 <USB_Host_ProcessNextHostState+0xd6>
     db8:	8f ec       	ldi	r24, 0xCF	; 207
     dba:	97 e0       	ldi	r25, 0x07	; 7
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <USB_Host_ProcessNextHostState+0xcc>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <USB_Host_ProcessNextHostState+0xd2>
     dc2:	00 00       	nop
     dc4:	b3 c0       	rjmp	.+358    	; 0xf2c <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     dc6:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     dc8:	80 91 d8 00 	lds	r24, 0x00D8
     dcc:	80 61       	ori	r24, 0x10	; 16
     dce:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     dd2:	80 91 dd 00 	lds	r24, 0x00DD
     dd6:	8b 7f       	andi	r24, 0xFB	; 251
     dd8:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     ddc:	80 91 d7 00 	lds	r24, 0x00D7
     de0:	80 61       	ori	r24, 0x10	; 16
     de2:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     de6:	80 91 dd 00 	lds	r24, 0x00DD
     dea:	82 60       	ori	r24, 0x02	; 2
     dec:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     df0:	84 e0       	ldi	r24, 0x04	; 4
     df2:	d2 cf       	rjmp	.-92     	; 0xd98 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     df4:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     df8:	80 ff       	sbrs	r24, 0
     dfa:	98 c0       	rjmp	.+304    	; 0xf2c <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     dfc:	80 91 9f 00 	lds	r24, 0x009F
     e00:	8e 7f       	andi	r24, 0xFE	; 254
     e02:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     e06:	80 91 9f 00 	lds	r24, 0x009F
     e0a:	8d 7f       	andi	r24, 0xFD	; 253
     e0c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     e10:	80 91 df 00 	lds	r24, 0x00DF
     e14:	8d 7f       	andi	r24, 0xFD	; 253
     e16:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     e1a:	80 91 de 00 	lds	r24, 0x00DE
     e1e:	82 60       	ori	r24, 0x02	; 2
     e20:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e24:	80 91 9e 00 	lds	r24, 0x009E
     e28:	81 60       	ori	r24, 0x01	; 1
     e2a:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     e2e:	7a d1       	rcall	.+756    	; 0x1124 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     e30:	10 92 f9 01 	sts	0x01F9, r1
     e34:	84 e6       	ldi	r24, 0x64	; 100
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	90 93 e9 01 	sts	0x01E9, r25
     e3c:	80 93 e8 01 	sts	0x01E8, r24
     e40:	85 e0       	ldi	r24, 0x05	; 5
     e42:	59 c0       	rjmp	.+178    	; 0xef6 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     e44:	a6 de       	rcall	.-692    	; 0xb92 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     e46:	10 92 f9 01 	sts	0x01F9, r1
     e4a:	88 ec       	ldi	r24, 0xC8	; 200
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	90 93 e9 01 	sts	0x01E9, r25
     e52:	80 93 e8 01 	sts	0x01E8, r24
     e56:	86 e0       	ldi	r24, 0x06	; 6
     e58:	4e c0       	rjmp	.+156    	; 0xef6 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	20 e4       	ldi	r18, 0x40	; 64
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	01 e0       	ldi	r16, 0x01	; 1
     e66:	d0 d0       	rcall	.+416    	; 0x1008 <Pipe_ConfigurePipe>
     e68:	88 23       	and	r24, r24
     e6a:	09 f4       	brne	.+2      	; 0xe6e <USB_Host_ProcessNextHostState+0x17e>
     e6c:	4f c0       	rjmp	.+158    	; 0xf0c <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     e6e:	87 e0       	ldi	r24, 0x07	; 7
     e70:	93 cf       	rjmp	.-218    	; 0xd98 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     e72:	a1 ef       	ldi	r26, 0xF1	; 241
     e74:	b1 e0       	ldi	r27, 0x01	; 1
     e76:	ea ed       	ldi	r30, 0xDA	; 218
     e78:	f1 e0       	ldi	r31, 0x01	; 1
     e7a:	88 e0       	ldi	r24, 0x08	; 8
     e7c:	01 90       	ld	r0, Z+
     e7e:	0d 92       	st	X+, r0
     e80:	81 50       	subi	r24, 0x01	; 1
     e82:	e1 f7       	brne	.-8      	; 0xe7c <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     e84:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     e88:	ce 01       	movw	r24, r28
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	29 d6       	rcall	.+3154   	; 0x1ae0 <USB_Host_SendControlRequest>
     e8e:	68 2f       	mov	r22, r24
     e90:	88 23       	and	r24, r24
     e92:	09 f0       	breq	.+2      	; 0xe96 <USB_Host_ProcessNextHostState+0x1a6>
     e94:	3e c0       	rjmp	.+124    	; 0xf12 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     e96:	88 85       	ldd	r24, Y+8	; 0x08
     e98:	80 93 e2 01 	sts	0x01E2, r24

			USB_Host_ResetDevice();
     e9c:	7a de       	rcall	.-780    	; 0xb92 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     e9e:	10 92 f9 01 	sts	0x01F9, r1
     ea2:	88 ec       	ldi	r24, 0xC8	; 200
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	90 93 e9 01 	sts	0x01E9, r25
     eaa:	80 93 e8 01 	sts	0x01E8, r24
     eae:	88 e0       	ldi	r24, 0x08	; 8
     eb0:	22 c0       	rjmp	.+68     	; 0xef6 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     eb2:	20 91 e2 01 	lds	r18, 0x01E2
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	01 e0       	ldi	r16, 0x01	; 1
     ec0:	a3 d0       	rcall	.+326    	; 0x1008 <Pipe_ConfigurePipe>
     ec2:	88 23       	and	r24, r24
     ec4:	19 f1       	breq	.+70     	; 0xf0c <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     ec6:	a1 ef       	ldi	r26, 0xF1	; 241
     ec8:	b1 e0       	ldi	r27, 0x01	; 1
     eca:	e2 ed       	ldi	r30, 0xD2	; 210
     ecc:	f1 e0       	ldi	r31, 0x01	; 1
     ece:	88 e0       	ldi	r24, 0x08	; 8
     ed0:	01 90       	ld	r0, Z+
     ed2:	0d 92       	st	X+, r0
     ed4:	81 50       	subi	r24, 0x01	; 1
     ed6:	e1 f7       	brne	.-8      	; 0xed0 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	01 d6       	rcall	.+3074   	; 0x1ae0 <USB_Host_SendControlRequest>
     ede:	68 2f       	mov	r22, r24
     ee0:	88 23       	and	r24, r24
     ee2:	b9 f4       	brne	.+46     	; 0xf12 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     ee4:	10 92 f9 01 	sts	0x01F9, r1
     ee8:	84 e6       	ldi	r24, 0x64	; 100
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	90 93 e9 01 	sts	0x01E9, r25
     ef0:	80 93 e8 01 	sts	0x01E8, r24
     ef4:	89 e0       	ldi	r24, 0x09	; 9
     ef6:	80 93 e7 01 	sts	0x01E7, r24
			break;
     efa:	18 c0       	rjmp	.+48     	; 0xf2c <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     f02:	8a e0       	ldi	r24, 0x0A	; 10
     f04:	80 93 f9 01 	sts	0x01F9, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     f08:	f0 da       	rcall	.-2592   	; 0x4ea <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     f0a:	10 c0       	rjmp	.+32     	; 0xf2c <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     f0c:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     f0e:	84 e0       	ldi	r24, 0x04	; 4
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     f12:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     f14:	90 91 f9 01 	lds	r25, 0x01F9
     f18:	91 30       	cpi	r25, 0x01	; 1
     f1a:	41 f0       	breq	.+16     	; 0xf2c <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     f1c:	58 db       	rcall	.-2384   	; 0x5ce <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f1e:	80 91 dd 00 	lds	r24, 0x00DD
     f22:	81 60       	ori	r24, 0x01	; 1
     f24:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     f28:	da da       	rcall	.-2636   	; 0x4de <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     f2a:	7f d1       	rcall	.+766    	; 0x122a <USB_ResetInterface>
	}
}
     f2c:	28 96       	adiw	r28, 0x08	; 8
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	08 95       	ret

00000f42 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     f42:	8f 92       	push	r8
     f44:	9f 92       	push	r9
     f46:	bf 92       	push	r11
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	0f 92       	push	r0
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	e8 2e       	mov	r14, r24
     f60:	4b 01       	movw	r8, r22
     f62:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f64:	80 91 aa 00 	lds	r24, 0x00AA
     f68:	8f 7c       	andi	r24, 0xCF	; 207
     f6a:	80 61       	ori	r24, 0x10	; 16
     f6c:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     f70:	99 83       	std	Y+1, r25	; 0x01
     f72:	12 d1       	rcall	.+548    	; 0x1198 <Pipe_WaitUntilReady>
     f74:	b8 2e       	mov	r11, r24
     f76:	99 81       	ldd	r25, Y+1	; 0x01
     f78:	88 23       	and	r24, r24
     f7a:	c1 f5       	brne	.+112    	; 0xfec <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     f7c:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     f7e:	01 15       	cp	r16, r1
     f80:	11 05       	cpc	r17, r1
     f82:	39 f0       	breq	.+14     	; 0xf92 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     f84:	f8 01       	movw	r30, r16
     f86:	20 81       	ld	r18, Z
     f88:	31 81       	ldd	r19, Z+1	; 0x01
     f8a:	82 1a       	sub	r8, r18
     f8c:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     f8e:	e2 0e       	add	r14, r18
     f90:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     f92:	cc 24       	eor	r12, r12
     f94:	dd 24       	eor	r13, r13
     f96:	25 c0       	rjmp	.+74     	; 0xfe2 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     f98:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     f9c:	85 fd       	sbrc	r24, 5
     f9e:	16 c0       	rjmp	.+44     	; 0xfcc <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fa0:	80 91 a6 00 	lds	r24, 0x00A6
     fa4:	8e 77       	andi	r24, 0x7E	; 126
     fa6:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     faa:	01 15       	cp	r16, r1
     fac:	11 05       	cpc	r17, r1
     fae:	51 f0       	breq	.+20     	; 0xfc4 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     fb0:	f8 01       	movw	r30, r16
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	8c 0d       	add	r24, r12
     fb8:	9d 1d       	adc	r25, r13
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     fbe:	44 e0       	ldi	r20, 0x04	; 4
     fc0:	b4 2e       	mov	r11, r20
     fc2:	14 c0       	rjmp	.+40     	; 0xfec <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     fc4:	e9 d0       	rcall	.+466    	; 0x1198 <Pipe_WaitUntilReady>
     fc6:	88 23       	and	r24, r24
     fc8:	61 f0       	breq	.+24     	; 0xfe2 <Pipe_Read_Stream_LE+0xa0>
     fca:	0f c0       	rjmp	.+30     	; 0xfea <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     fcc:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     fd0:	f7 01       	movw	r30, r14
     fd2:	81 93       	st	Z+, r24
     fd4:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     fd6:	08 94       	sec
     fd8:	81 08       	sbc	r8, r1
     fda:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     fdc:	08 94       	sec
     fde:	c1 1c       	adc	r12, r1
     fe0:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     fe2:	81 14       	cp	r8, r1
     fe4:	91 04       	cpc	r9, r1
     fe6:	c1 f6       	brne	.-80     	; 0xf98 <Pipe_Read_Stream_LE+0x56>
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     fea:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     fec:	8b 2d       	mov	r24, r11
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	bf 90       	pop	r11
    1002:	9f 90       	pop	r9
    1004:	8f 90       	pop	r8
    1006:	08 95       	ret

00001008 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1008:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    100a:	58 2f       	mov	r21, r24
    100c:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    100e:	87 ff       	sbrs	r24, 7
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <Pipe_ConfigurePipe+0xe>
    1012:	80 e1       	ldi	r24, 0x10	; 16
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <Pipe_ConfigurePipe+0x10>
    1016:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    1018:	57 30       	cpi	r21, 0x07	; 7
    101a:	08 f0       	brcs	.+2      	; 0x101e <Pipe_ConfigurePipe+0x16>
    101c:	59 c0       	rjmp	.+178    	; 0x10d0 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    101e:	66 23       	and	r22, r22
    1020:	09 f4       	brne	.+2      	; 0x1024 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    1022:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1024:	4f 70       	andi	r20, 0x0F	; 15
    1026:	62 95       	swap	r22
    1028:	66 0f       	add	r22, r22
    102a:	66 0f       	add	r22, r22
    102c:	60 7c       	andi	r22, 0xC0	; 192
    102e:	64 2b       	or	r22, r20
    1030:	68 2b       	or	r22, r24
    1032:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1034:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1036:	84 2f       	mov	r24, r20
    1038:	8f 70       	andi	r24, 0x0F	; 15
    103a:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    103e:	45 17       	cp	r20, r21
    1040:	a1 f4       	brne	.+40     	; 0x106a <Pipe_ConfigurePipe+0x62>
    1042:	88 e0       	ldi	r24, 0x08	; 8
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    104a:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1050:	82 17       	cp	r24, r18
    1052:	93 07       	cpc	r25, r19
    1054:	10 f4       	brcc	.+4      	; 0x105a <Pipe_ConfigurePipe+0x52>
    1056:	75 30       	cpi	r23, 0x05	; 5
    1058:	c1 f7       	brne	.-16     	; 0x104a <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    105a:	87 2f       	mov	r24, r23
    105c:	82 95       	swap	r24
    105e:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1060:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1062:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    1064:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    1066:	e0 e0       	ldi	r30, 0x00	; 0
    1068:	08 c0       	rjmp	.+16     	; 0x107a <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    106a:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    106e:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    1072:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    1076:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    107a:	81 ff       	sbrs	r24, 1
    107c:	20 c0       	rjmp	.+64     	; 0x10be <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    107e:	90 91 a9 00 	lds	r25, 0x00A9
    1082:	9e 7f       	andi	r25, 0xFE	; 254
    1084:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1088:	90 91 ab 00 	lds	r25, 0x00AB
    108c:	9d 7f       	andi	r25, 0xFD	; 253
    108e:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    1092:	90 91 a9 00 	lds	r25, 0x00A9
    1096:	91 60       	ori	r25, 0x01	; 1
    1098:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    109c:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    10a0:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    10a4:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    10a8:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    10ac:	80 91 a9 00 	lds	r24, 0x00A9
    10b0:	80 62       	ori	r24, 0x20	; 32
    10b2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    10b6:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    10ba:	87 ff       	sbrs	r24, 7
    10bc:	09 c0       	rjmp	.+18     	; 0x10d0 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    10be:	4f 5f       	subi	r20, 0xFF	; 255
    10c0:	47 30       	cpi	r20, 0x07	; 7
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <Pipe_ConfigurePipe+0xbe>
    10c4:	b8 cf       	rjmp	.-144    	; 0x1036 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10c6:	5f 70       	andi	r21, 0x0F	; 15
    10c8:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    10d0:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    10d2:	0f 91       	pop	r16
    10d4:	08 95       	ret

000010d6 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
    10d6:	ef 92       	push	r14
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
    10e4:	e8 2e       	mov	r14, r24
    10e6:	e7 01       	movw	r28, r14
    10e8:	7e 01       	movw	r14, r28
    10ea:	f9 2e       	mov	r15, r25
    10ec:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    10ee:	ff 24       	eor	r15, r15
    10f0:	0d c0       	rjmp	.+26     	; 0x110c <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
    10f2:	88 81       	ld	r24, Y
    10f4:	88 23       	and	r24, r24
    10f6:	41 f0       	breq	.+16     	; 0x1108 <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
    10f8:	29 81       	ldd	r18, Y+1	; 0x01
    10fa:	3a 81       	ldd	r19, Y+2	; 0x02
    10fc:	6c 81       	ldd	r22, Y+4	; 0x04
    10fe:	4b 81       	ldd	r20, Y+3	; 0x03
    1100:	0d 81       	ldd	r16, Y+5	; 0x05
    1102:	82 df       	rcall	.-252    	; 0x1008 <Pipe_ConfigurePipe>
    1104:	88 23       	and	r24, r24
    1106:	31 f0       	breq	.+12     	; 0x1114 <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1108:	f3 94       	inc	r15
    110a:	26 96       	adiw	r28, 0x06	; 6
    110c:	f1 16       	cp	r15, r17
    110e:	88 f3       	brcs	.-30     	; 0x10f2 <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
    1114:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	ff 90       	pop	r15
    1120:	ef 90       	pop	r14
    1122:	08 95       	ret

00001124 <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    1124:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	98 2f       	mov	r25, r24
    112c:	9f 70       	andi	r25, 0x0F	; 15
    112e:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1132:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1136:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    113a:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    113e:	90 91 a9 00 	lds	r25, 0x00A9
    1142:	9e 7f       	andi	r25, 0xFE	; 254
    1144:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1148:	8f 5f       	subi	r24, 0xFF	; 255
    114a:	87 30       	cpi	r24, 0x07	; 7
    114c:	71 f7       	brne	.-36     	; 0x112a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    114e:	08 95       	ret

00001150 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1150:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1154:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1158:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    115a:	29 2f       	mov	r18, r25
    115c:	2f 70       	andi	r18, 0x0F	; 15
    115e:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1162:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    1166:	27 ff       	sbrs	r18, 7
    1168:	0c c0       	rjmp	.+24     	; 0x1182 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    116a:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    116e:	53 2f       	mov	r21, r19
    1170:	5f 70       	andi	r21, 0x0F	; 15
    1172:	30 ff       	sbrs	r19, 0
    1174:	02 c0       	rjmp	.+4      	; 0x117a <Pipe_IsEndpointBound+0x2a>
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	01 c0       	rjmp	.+2      	; 0x117c <Pipe_IsEndpointBound+0x2c>
    117a:	20 e8       	ldi	r18, 0x80	; 128
    117c:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    117e:	28 17       	cp	r18, r24
    1180:	49 f0       	breq	.+18     	; 0x1194 <Pipe_IsEndpointBound+0x44>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1182:	9f 5f       	subi	r25, 0xFF	; 255
    1184:	97 30       	cpi	r25, 0x07	; 7
    1186:	49 f7       	brne	.-46     	; 0x115a <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1188:	84 2f       	mov	r24, r20
    118a:	8f 70       	andi	r24, 0x0F	; 15
    118c:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    1194:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    1196:	08 95       	ret

00001198 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1198:	80 91 a2 00 	lds	r24, 0x00A2
    119c:	90 91 a3 00 	lds	r25, 0x00A3

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    11a0:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    11a2:	20 91 aa 00 	lds	r18, 0x00AA
    11a6:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    11a8:	20 31       	cpi	r18, 0x10	; 16
    11aa:	29 f4       	brne	.+10     	; 0x11b6 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    11ac:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    11b0:	20 ff       	sbrs	r18, 0
    11b2:	05 c0       	rjmp	.+10     	; 0x11be <Pipe_WaitUntilReady+0x26>
    11b4:	18 c0       	rjmp	.+48     	; 0x11e6 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    11b6:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    11ba:	22 fd       	sbrc	r18, 2
    11bc:	14 c0       	rjmp	.+40     	; 0x11e6 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    11be:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    11c2:	21 fd       	sbrc	r18, 1
    11c4:	12 c0       	rjmp	.+36     	; 0x11ea <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    11c6:	20 91 f9 01 	lds	r18, 0x01F9
    11ca:	21 30       	cpi	r18, 0x01	; 1
    11cc:	81 f0       	breq	.+32     	; 0x11ee <Pipe_WaitUntilReady+0x56>
    11ce:	20 91 a2 00 	lds	r18, 0x00A2
    11d2:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    11d6:	28 17       	cp	r18, r24
    11d8:	39 07       	cpc	r19, r25
    11da:	19 f3       	breq	.-58     	; 0x11a2 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    11dc:	44 23       	and	r20, r20
    11de:	49 f0       	breq	.+18     	; 0x11f2 <Pipe_WaitUntilReady+0x5a>
    11e0:	41 50       	subi	r20, 0x01	; 1
    11e2:	c9 01       	movw	r24, r18
    11e4:	de cf       	rjmp	.-68     	; 0x11a2 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    11f2:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    11f4:	08 95       	ret

000011f6 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    11f6:	d1 d0       	rcall	.+418    	; 0x139a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    11f8:	dc d0       	rcall	.+440    	; 0x13b2 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    11fa:	e0 ee       	ldi	r30, 0xE0	; 224
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	81 60       	ori	r24, 0x01	; 1
    1202:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1204:	e8 ed       	ldi	r30, 0xD8	; 216
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	8f 77       	andi	r24, 0x7F	; 127
    120c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    120e:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1210:	a7 ed       	ldi	r26, 0xD7	; 215
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	8c 91       	ld	r24, X
    1216:	8e 7f       	andi	r24, 0xFE	; 254
    1218:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    121a:	80 81       	ld	r24, Z
    121c:	8f 7e       	andi	r24, 0xEF	; 239
    121e:	80 83       	st	Z, r24
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_Off();
	#endif

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
    1220:	10 92 ea 01 	sts	0x01EA, r1
	#endif

	USB_IsInitialized = false;
    1224:	10 92 ef 01 	sts	0x01EF, r1
}
    1228:	08 95       	ret

0000122a <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    122a:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
    122c:	10 91 d7 00 	lds	r17, 0x00D7
	#endif

	USB_INT_DisableAllInterrupts();
    1230:	b4 d0       	rcall	.+360    	; 0x139a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1232:	bf d0       	rcall	.+382    	; 0x13b2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1234:	80 91 d8 00 	lds	r24, 0x00D8
    1238:	8f 77       	andi	r24, 0x7F	; 127
    123a:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    123e:	80 91 d8 00 	lds	r24, 0x00D8
    1242:	80 68       	ori	r24, 0x80	; 128
    1244:	80 93 d8 00 	sts	0x00D8, r24

	USB_Controller_Reset();

	#if defined(USB_CAN_BE_BOTH)
	if (UIDModeSelectEnabled)
    1248:	16 ff       	sbrs	r17, 6
    124a:	05 c0       	rjmp	.+10     	; 0x1256 <USB_ResetInterface+0x2c>
						USBCON |= (1 << VBUSTE);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBCON |= (1 << IDTE);
    124c:	80 91 d8 00 	lds	r24, 0x00D8
    1250:	82 60       	ori	r24, 0x02	; 2
    1252:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1256:	80 91 d8 00 	lds	r24, 0x00D8
    125a:	8f 7d       	andi	r24, 0xDF	; 223
    125c:	80 93 d8 00 	sts	0x00D8, r24
	  USB_INT_Enable(USB_INT_IDTI);
	#endif

	USB_CLK_Unfreeze();

	if (USB_CurrentMode == USB_MODE_Device)
    1260:	80 91 ea 01 	lds	r24, 0x01EA
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	61 f5       	brne	.+88     	; 0x12c0 <USB_ResetInterface+0x96>
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1268:	80 91 d7 00 	lds	r24, 0x00D7
    126c:	80 68       	ori	r24, 0x80	; 128
    126e:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1272:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1274:	10 92 f0 01 	sts	0x01F0, r1
	USB_Device_ConfigurationNumber  = 0;
    1278:	10 92 eb 01 	sts	0x01EB, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    127c:	10 92 ed 01 	sts	0x01ED, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1280:	10 92 ec 01 	sts	0x01EC, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1284:	80 91 e0 00 	lds	r24, 0x00E0
    1288:	8b 7f       	andi	r24, 0xFB	; 251
    128a:	80 93 e0 00 	sts	0x00E0, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    128e:	80 91 d8 00 	lds	r24, 0x00D8
    1292:	81 60       	ori	r24, 0x01	; 1
    1294:	80 93 d8 00 	sts	0x00D8, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	42 e0       	ldi	r20, 0x02	; 2
    129e:	a9 db       	rcall	.-2222   	; 0x9f2 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    12a0:	80 91 e1 00 	lds	r24, 0x00E1
    12a4:	8e 7f       	andi	r24, 0xFE	; 254
    12a6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    12aa:	80 91 e2 00 	lds	r24, 0x00E2
    12ae:	81 60       	ori	r24, 0x01	; 1
    12b0:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    12b4:	80 91 e2 00 	lds	r24, 0x00E2
    12b8:	88 60       	ori	r24, 0x08	; 8
    12ba:	80 93 e2 00 	sts	0x00E2, r24
    12be:	38 c0       	rjmp	.+112    	; 0x1330 <USB_ResetInterface+0x106>
		}

		USB_Init_Device();
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
    12c0:	80 91 ea 01 	lds	r24, 0x01EA
    12c4:	82 30       	cpi	r24, 0x02	; 2
    12c6:	c9 f5       	brne	.+114    	; 0x133a <USB_ResetInterface+0x110>
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    12c8:	80 91 d7 00 	lds	r24, 0x00D7
    12cc:	8f 77       	andi	r24, 0x7F	; 127
    12ce:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    12d2:	8c e0       	ldi	r24, 0x0C	; 12
    12d4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    12d6:	8e e0       	ldi	r24, 0x0E	; 14
    12d8:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    12da:	09 b4       	in	r0, 0x29	; 41
    12dc:	00 fe       	sbrs	r0, 0
    12de:	fd cf       	rjmp	.-6      	; 0x12da <USB_ResetInterface+0xb0>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	80 93 f9 01 	sts	0x01F9, r24
	USB_Host_ConfigurationNumber = 0;
    12e6:	10 92 ee 01 	sts	0x01EE, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    12ea:	80 e4       	ldi	r24, 0x40	; 64
    12ec:	80 93 e2 01 	sts	0x01E2, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    12f0:	80 91 d8 00 	lds	r24, 0x00D8
    12f4:	80 64       	ori	r24, 0x40	; 64
    12f6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    12fa:	80 91 dd 00 	lds	r24, 0x00DD
    12fe:	81 60       	ori	r24, 0x01	; 1
    1300:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1304:	80 91 dd 00 	lds	r24, 0x00DD
    1308:	84 60       	ori	r24, 0x04	; 4
    130a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    130e:	80 91 d7 00 	lds	r24, 0x00D7
    1312:	8f 7e       	andi	r24, 0xEF	; 239
    1314:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1318:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    131a:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    131c:	80 91 de 00 	lds	r24, 0x00DE
    1320:	81 60       	ori	r24, 0x01	; 1
    1322:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1326:	80 91 de 00 	lds	r24, 0x00DE
    132a:	84 60       	ori	r24, 0x04	; 4
    132c:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1330:	80 91 e0 00 	lds	r24, 0x00E0
    1334:	8e 7f       	andi	r24, 0xFE	; 254
    1336:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    133a:	80 91 d8 00 	lds	r24, 0x00D8
    133e:	80 61       	ori	r24, 0x10	; 16
    1340:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1344:	1f 91       	pop	r17
    1346:	08 95       	ret

00001348 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1348:	90 91 d8 00 	lds	r25, 0x00D8
    134c:	9f 7e       	andi	r25, 0xEF	; 239
    134e:	90 93 d8 00 	sts	0x00D8, r25

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1352:	90 91 d7 00 	lds	r25, 0x00D7
    1356:	91 60       	ori	r25, 0x01	; 1
    1358:	90 93 d7 00 	sts	0x00D7, r25
		PLLFRQ = (1 << PDIV2);
		#endif
	}

	#if defined(USB_CAN_BE_BOTH)
	if (Mode == USB_MODE_UID)
    135c:	83 30       	cpi	r24, 0x03	; 3
    135e:	91 f4       	brne	.+36     	; 0x1384 <USB_Init+0x3c>
	{
		UHWCON |=  (1 << UIDE);
    1360:	80 91 d7 00 	lds	r24, 0x00D7
    1364:	80 64       	ori	r24, 0x40	; 64
    1366:	80 93 d7 00 	sts	0x00D7, r24
						USBCON |= (1 << VBUSTE);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBCON |= (1 << IDTE);
    136a:	80 91 d8 00 	lds	r24, 0x00D8
    136e:	82 60       	ori	r24, 0x02	; 2
    1370:	80 93 d8 00 	sts	0x00D8, r24

			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
    1374:	80 91 d9 00 	lds	r24, 0x00D9
    1378:	81 ff       	sbrs	r24, 1
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <USB_Init+0x38>
				  return USB_MODE_Device;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	07 c0       	rjmp	.+14     	; 0x138e <USB_Init+0x46>
				else
				  return USB_MODE_Host;
    1380:	82 e0       	ldi	r24, 0x02	; 2
    1382:	05 c0       	rjmp	.+10     	; 0x138e <USB_Init+0x46>
		USB_INT_Enable(USB_INT_IDTI);
		USB_CurrentMode = USB_GetUSBModeFromUID();
	}
	else
	{
		UHWCON &= ~(1 << UIDE);
    1384:	90 91 d7 00 	lds	r25, 0x00D7
    1388:	9f 7b       	andi	r25, 0xBF	; 191
    138a:	90 93 d7 00 	sts	0x00D7, r25
		USB_CurrentMode = Mode;
    138e:	80 93 ea 01 	sts	0x01EA, r24
	}
	#endif

	USB_IsInitialized = true;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	80 93 ef 01 	sts	0x01EF, r24

	USB_ResetInterface();
}
    1398:	48 cf       	rjmp	.-368    	; 0x122a <USB_ResetInterface>

0000139a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    139a:	e8 ed       	ldi	r30, 0xD8	; 216
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	8c 7f       	andi	r24, 0xFC	; 252
    13a2:	80 83       	st	Z, r24
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
	#endif

	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
    13a4:	10 92 de 00 	sts	0x00DE, r1
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    13a8:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    13ac:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    13b0:	08 95       	ret

000013b2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    13b2:	10 92 da 00 	sts	0x00DA, r1
	#endif

	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
    13b6:	10 92 df 00 	sts	0x00DF, r1
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    13ba:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    13be:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    13c2:	08 95       	ret

000013c4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	0b b6       	in	r0, 0x3b	; 59
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
    13d2:	2f 93       	push	r18
    13d4:	3f 93       	push	r19
    13d6:	4f 93       	push	r20
    13d8:	5f 93       	push	r21
    13da:	6f 93       	push	r22
    13dc:	7f 93       	push	r23
    13de:	8f 93       	push	r24
    13e0:	9f 93       	push	r25
    13e2:	af 93       	push	r26
    13e4:	bf 93       	push	r27
    13e6:	ef 93       	push	r30
    13e8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    13ea:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    13ee:	82 ff       	sbrs	r24, 2
    13f0:	0a c0       	rjmp	.+20     	; 0x1406 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    13f2:	80 91 e2 00 	lds	r24, 0x00E2
    13f6:	82 ff       	sbrs	r24, 2
    13f8:	06 c0       	rjmp	.+12     	; 0x1406 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    13fa:	80 91 e1 00 	lds	r24, 0x00E1
    13fe:	8b 7f       	andi	r24, 0xFB	; 251
    1400:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1404:	1f d8       	rcall	.-4034   	; 0x444 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1406:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    140a:	80 ff       	sbrs	r24, 0
    140c:	1f c0       	rjmp	.+62     	; 0x144c <__vector_10+0x88>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    140e:	80 91 d8 00 	lds	r24, 0x00D8
    1412:	80 ff       	sbrs	r24, 0
    1414:	1b c0       	rjmp	.+54     	; 0x144c <__vector_10+0x88>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1416:	80 91 da 00 	lds	r24, 0x00DA
    141a:	8e 7f       	andi	r24, 0xFE	; 254
    141c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1420:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1424:	80 ff       	sbrs	r24, 0
    1426:	0d c0       	rjmp	.+26     	; 0x1442 <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1428:	8c e0       	ldi	r24, 0x0C	; 12
    142a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    142c:	8e e0       	ldi	r24, 0x0E	; 14
    142e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1430:	09 b4       	in	r0, 0x29	; 41
    1432:	00 fe       	sbrs	r0, 0
    1434:	fd cf       	rjmp	.-6      	; 0x1430 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	80 93 f0 01 	sts	0x01F0, r24
			EVENT_USB_Device_Connect();
    143c:	0e 94 0a 02 	call	0x414	; 0x414 <EVENT_USB_Device_Connect>
    1440:	05 c0       	rjmp	.+10     	; 0x144c <__vector_10+0x88>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1442:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1444:	10 92 f0 01 	sts	0x01F0, r1
			EVENT_USB_Device_Disconnect();
    1448:	0e 94 0c 02 	call	0x418	; 0x418 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    144c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1450:	80 ff       	sbrs	r24, 0
    1452:	18 c0       	rjmp	.+48     	; 0x1484 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1454:	80 91 e2 00 	lds	r24, 0x00E2
    1458:	80 ff       	sbrs	r24, 0
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    145c:	80 91 e2 00 	lds	r24, 0x00E2
    1460:	8e 7f       	andi	r24, 0xFE	; 254
    1462:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1466:	80 91 e2 00 	lds	r24, 0x00E2
    146a:	80 61       	ori	r24, 0x10	; 16
    146c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1470:	80 91 d8 00 	lds	r24, 0x00D8
    1474:	80 62       	ori	r24, 0x20	; 32
    1476:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    147a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    147c:	85 e0       	ldi	r24, 0x05	; 5
    147e:	80 93 f0 01 	sts	0x01F0, r24
		EVENT_USB_Device_Suspend();
    1482:	04 d3       	rcall	.+1544   	; 0x1a8c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1484:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1488:	84 ff       	sbrs	r24, 4
    148a:	2d c0       	rjmp	.+90     	; 0x14e6 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    148c:	80 91 e2 00 	lds	r24, 0x00E2
    1490:	84 ff       	sbrs	r24, 4
    1492:	29 c0       	rjmp	.+82     	; 0x14e6 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1494:	8c e0       	ldi	r24, 0x0C	; 12
    1496:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1498:	8e e0       	ldi	r24, 0x0E	; 14
    149a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    149c:	09 b4       	in	r0, 0x29	; 41
    149e:	00 fe       	sbrs	r0, 0
    14a0:	fd cf       	rjmp	.-6      	; 0x149c <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    14a2:	80 91 d8 00 	lds	r24, 0x00D8
    14a6:	8f 7d       	andi	r24, 0xDF	; 223
    14a8:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    14ac:	80 91 e1 00 	lds	r24, 0x00E1
    14b0:	8f 7e       	andi	r24, 0xEF	; 239
    14b2:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    14b6:	80 91 e2 00 	lds	r24, 0x00E2
    14ba:	8f 7e       	andi	r24, 0xEF	; 239
    14bc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    14c0:	80 91 e2 00 	lds	r24, 0x00E2
    14c4:	81 60       	ori	r24, 0x01	; 1
    14c6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    14ca:	80 91 eb 01 	lds	r24, 0x01EB
    14ce:	88 23       	and	r24, r24
    14d0:	21 f4       	brne	.+8      	; 0x14da <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    14d2:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    14d6:	87 ff       	sbrs	r24, 7
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <__vector_10+0x11a>
    14da:	84 e0       	ldi	r24, 0x04	; 4
    14dc:	01 c0       	rjmp	.+2      	; 0x14e0 <__vector_10+0x11c>
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	80 93 f0 01 	sts	0x01F0, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    14e4:	d3 d2       	rcall	.+1446   	; 0x1a8c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    14e6:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    14ea:	83 ff       	sbrs	r24, 3
    14ec:	22 c0       	rjmp	.+68     	; 0x1532 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    14ee:	80 91 e2 00 	lds	r24, 0x00E2
    14f2:	83 ff       	sbrs	r24, 3
    14f4:	1e c0       	rjmp	.+60     	; 0x1532 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    14f6:	80 91 e1 00 	lds	r24, 0x00E1
    14fa:	87 7f       	andi	r24, 0xF7	; 247
    14fc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	80 93 f0 01 	sts	0x01F0, r24
		USB_Device_ConfigurationNumber = 0;
    1506:	10 92 eb 01 	sts	0x01EB, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    150a:	80 91 e1 00 	lds	r24, 0x00E1
    150e:	8e 7f       	andi	r24, 0xFE	; 254
    1510:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1514:	80 91 e2 00 	lds	r24, 0x00E2
    1518:	8e 7f       	andi	r24, 0xFE	; 254
    151a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    151e:	80 91 e2 00 	lds	r24, 0x00E2
    1522:	80 61       	ori	r24, 0x10	; 16
    1524:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	42 e0       	ldi	r20, 0x02	; 2
    152e:	61 da       	rcall	.-2878   	; 0x9f2 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1530:	ad d2       	rcall	.+1370   	; 0x1a8c <USB_Event_Stub>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1532:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1536:	85 ff       	sbrs	r24, 5
    1538:	0a c0       	rjmp	.+20     	; 0x154e <__vector_10+0x18a>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    153a:	80 91 a0 00 	lds	r24, 0x00A0
    153e:	85 ff       	sbrs	r24, 5
    1540:	06 c0       	rjmp	.+12     	; 0x154e <__vector_10+0x18a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1542:	80 91 9f 00 	lds	r24, 0x009F
    1546:	8f 7d       	andi	r24, 0xDF	; 223
    1548:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    154c:	9f d2       	rcall	.+1342   	; 0x1a8c <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    154e:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1552:	81 ff       	sbrs	r24, 1
    1554:	16 c0       	rjmp	.+44     	; 0x1582 <__vector_10+0x1be>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1556:	80 91 a0 00 	lds	r24, 0x00A0
    155a:	81 ff       	sbrs	r24, 1
    155c:	12 c0       	rjmp	.+36     	; 0x1582 <__vector_10+0x1be>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    155e:	80 91 9f 00 	lds	r24, 0x009F
    1562:	8d 7f       	andi	r24, 0xFD	; 253
    1564:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1568:	80 91 9f 00 	lds	r24, 0x009F
    156c:	8e 7f       	andi	r24, 0xFE	; 254
    156e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1572:	80 91 a0 00 	lds	r24, 0x00A0
    1576:	8d 7f       	andi	r24, 0xFD	; 253
    1578:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    157c:	0e 94 6f 02 	call	0x4de	; 0x4de <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1580:	54 de       	rcall	.-856    	; 0x122a <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1582:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1586:	81 ff       	sbrs	r24, 1
    1588:	17 c0       	rjmp	.+46     	; 0x15b8 <__vector_10+0x1f4>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    158a:	80 91 de 00 	lds	r24, 0x00DE
    158e:	81 ff       	sbrs	r24, 1
    1590:	13 c0       	rjmp	.+38     	; 0x15b8 <__vector_10+0x1f4>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1592:	80 91 df 00 	lds	r24, 0x00DF
    1596:	8d 7f       	andi	r24, 0xFD	; 253
    1598:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    159c:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    159e:	80 91 dd 00 	lds	r24, 0x00DD
    15a2:	81 60       	ori	r24, 0x01	; 1
    15a4:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	0e 94 c7 02 	call	0x58e	; 0x58e <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    15ae:	0e 94 6f 02 	call	0x4de	; 0x4de <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	80 93 f9 01 	sts	0x01F9, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    15b8:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    15bc:	80 ff       	sbrs	r24, 0
    15be:	18 c0       	rjmp	.+48     	; 0x15f0 <__vector_10+0x22c>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    15c0:	80 91 de 00 	lds	r24, 0x00DE
    15c4:	80 ff       	sbrs	r24, 0
    15c6:	14 c0       	rjmp	.+40     	; 0x15f0 <__vector_10+0x22c>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    15c8:	80 91 df 00 	lds	r24, 0x00DF
    15cc:	8e 7f       	andi	r24, 0xFE	; 254
    15ce:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    15d2:	80 91 de 00 	lds	r24, 0x00DE
    15d6:	8e 7f       	andi	r24, 0xFE	; 254
    15d8:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    15dc:	0e 94 69 02 	call	0x4d2	; 0x4d2 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    15e0:	80 91 a0 00 	lds	r24, 0x00A0
    15e4:	82 60       	ori	r24, 0x02	; 2
    15e6:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	80 93 f9 01 	sts	0x01F9, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    15f0:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    15f4:	82 ff       	sbrs	r24, 2
    15f6:	10 c0       	rjmp	.+32     	; 0x1618 <__vector_10+0x254>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    15f8:	80 91 de 00 	lds	r24, 0x00DE
    15fc:	82 ff       	sbrs	r24, 2
    15fe:	0c c0       	rjmp	.+24     	; 0x1618 <__vector_10+0x254>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1600:	80 91 df 00 	lds	r24, 0x00DF
    1604:	8b 7f       	andi	r24, 0xFB	; 251
    1606:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1612:	0e 94 6f 02 	call	0x4de	; 0x4de <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1616:	09 de       	rcall	.-1006   	; 0x122a <USB_ResetInterface>
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
    1618:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_CAN_BE_BOTH)
	if (USB_INT_HasOccurred(USB_INT_IDTI) && USB_INT_IsEnabled(USB_INT_IDTI))
    161c:	81 ff       	sbrs	r24, 1
    161e:	21 c0       	rjmp	.+66     	; 0x1662 <__vector_10+0x29e>
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
    1620:	80 91 d8 00 	lds	r24, 0x00D8
    1624:	81 ff       	sbrs	r24, 1
    1626:	1d c0       	rjmp	.+58     	; 0x1662 <__vector_10+0x29e>
						USBINT &= ~(1 << VBUSTI);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBINT &= ~(1 << IDTI);
    1628:	80 91 da 00 	lds	r24, 0x00DA
    162c:	8d 7f       	andi	r24, 0xFD	; 253
    162e:	80 93 da 00 	sts	0x00DA, r24
	{
		USB_INT_Clear(USB_INT_IDTI);

		if (USB_DeviceState != DEVICE_STATE_Unattached)
    1632:	80 91 f0 01 	lds	r24, 0x01F0
    1636:	88 23       	and	r24, r24
    1638:	11 f0       	breq	.+4      	; 0x163e <__vector_10+0x27a>
		  EVENT_USB_Device_Disconnect();
    163a:	0e 94 0c 02 	call	0x418	; 0x418 <EVENT_USB_Device_Disconnect>

		if (USB_HostState != HOST_STATE_Unattached)
    163e:	80 91 f9 01 	lds	r24, 0x01F9
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	11 f0       	breq	.+4      	; 0x164a <__vector_10+0x286>
		  EVENT_USB_Host_DeviceUnattached();
    1646:	0e 94 6f 02 	call	0x4de	; 0x4de <EVENT_USB_Host_DeviceUnattached>

			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
    164a:	80 91 d9 00 	lds	r24, 0x00D9
    164e:	81 ff       	sbrs	r24, 1
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <__vector_10+0x292>
				  return USB_MODE_Device;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <__vector_10+0x294>
				else
				  return USB_MODE_Host;
    1656:	82 e0       	ldi	r24, 0x02	; 2

		USB_CurrentMode = USB_GetUSBModeFromUID();
    1658:	80 93 ea 01 	sts	0x01EA, r24
		USB_ResetInterface();
    165c:	e6 dd       	rcall	.-1076   	; 0x122a <USB_ResetInterface>

		EVENT_USB_UIDChange();
    165e:	0e 94 a9 01 	call	0x352	; 0x352 <EVENT_USB_UIDChange>
	}
	#endif
}
    1662:	ff 91       	pop	r31
    1664:	ef 91       	pop	r30
    1666:	bf 91       	pop	r27
    1668:	af 91       	pop	r26
    166a:	9f 91       	pop	r25
    166c:	8f 91       	pop	r24
    166e:	7f 91       	pop	r23
    1670:	6f 91       	pop	r22
    1672:	5f 91       	pop	r21
    1674:	4f 91       	pop	r20
    1676:	3f 91       	pop	r19
    1678:	2f 91       	pop	r18
    167a:	0f 90       	pop	r0
    167c:	0b be       	out	0x3b, r0	; 59
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0f 90       	pop	r0
    1684:	1f 90       	pop	r1
    1686:	18 95       	reti

00001688 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1688:	cf 92       	push	r12
    168a:	df 92       	push	r13
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	29 97       	sbiw	r28, 0x09	; 9
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	6b 01       	movw	r12, r22
    16aa:	8a 01       	movw	r16, r20
    16ac:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    16ae:	90 e8       	ldi	r25, 0x80	; 128
    16b0:	90 93 f1 01 	sts	0x01F1, r25
    16b4:	96 e0       	ldi	r25, 0x06	; 6
    16b6:	90 93 f2 01 	sts	0x01F2, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    16c0:	90 93 f4 01 	sts	0x01F4, r25
    16c4:	80 93 f3 01 	sts	0x01F3, r24
    16c8:	10 92 f6 01 	sts	0x01F6, r1
    16cc:	10 92 f5 01 	sts	0x01F5, r1
    16d0:	89 e0       	ldi	r24, 0x09	; 9
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	90 93 f8 01 	sts	0x01F8, r25
    16d8:	80 93 f7 01 	sts	0x01F7, r24
    16dc:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    16e0:	ce 01       	movw	r24, r28
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	fd d1       	rcall	.+1018   	; 0x1ae0 <USB_Host_SendControlRequest>
    16e6:	88 23       	and	r24, r24
    16e8:	b9 f4       	brne	.+46     	; 0x1718 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	f6 01       	movw	r30, r12
    16f0:	91 83       	std	Z+1, r25	; 0x01
    16f2:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    16f4:	e8 16       	cp	r14, r24
    16f6:	f9 06       	cpc	r15, r25
    16f8:	70 f0       	brcs	.+28     	; 0x1716 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    16fa:	90 93 f8 01 	sts	0x01F8, r25
    16fe:	80 93 f7 01 	sts	0x01F7, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1702:	c8 01       	movw	r24, r16
    1704:	ed d1       	rcall	.+986    	; 0x1ae0 <USB_Host_SendControlRequest>
    1706:	88 23       	and	r24, r24
    1708:	39 f4       	brne	.+14     	; 0x1718 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    170a:	f8 01       	movw	r30, r16
    170c:	91 81       	ldd	r25, Z+1	; 0x01
    170e:	92 30       	cpi	r25, 0x02	; 2
    1710:	19 f0       	breq	.+6      	; 0x1718 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1712:	86 e0       	ldi	r24, 0x06	; 6
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1716:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1718:	29 96       	adiw	r28, 0x09	; 9
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	df 90       	pop	r13
    1732:	cf 90       	pop	r12
    1734:	08 95       	ret

00001736 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1736:	af 92       	push	r10
    1738:	bf 92       	push	r11
    173a:	cf 92       	push	r12
    173c:	df 92       	push	r13
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	8c 01       	movw	r16, r24
    174c:	eb 01       	movw	r28, r22
    174e:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1750:	23 c0       	rjmp	.+70     	; 0x1798 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1752:	e8 81       	ld	r30, Y
    1754:	f9 81       	ldd	r31, Y+1	; 0x01
    1756:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1758:	20 81       	ld	r18, Z
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	c7 01       	movw	r24, r14
    175e:	2e 15       	cp	r18, r14
    1760:	3f 05       	cpc	r19, r15
    1762:	08 f4       	brcc	.+2      	; 0x1766 <USB_GetNextDescriptorComp+0x30>
    1764:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1766:	e8 0f       	add	r30, r24
    1768:	f9 1f       	adc	r31, r25
    176a:	f9 83       	std	Y+1, r31	; 0x01
    176c:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    176e:	f8 01       	movw	r30, r16
    1770:	20 81       	ld	r18, Z
    1772:	31 81       	ldd	r19, Z+1	; 0x01
    1774:	28 1b       	sub	r18, r24
    1776:	39 0b       	sbc	r19, r25
    1778:	31 83       	std	Z+1, r19	; 0x01
    177a:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    177c:	88 81       	ld	r24, Y
    177e:	99 81       	ldd	r25, Y+1	; 0x01
    1780:	f6 01       	movw	r30, r12
    1782:	09 95       	icall
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	41 f0       	breq	.+16     	; 0x1798 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	69 f4       	brne	.+26     	; 0x17a6 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    178c:	a8 82       	st	Y, r10
    178e:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    1790:	f8 01       	movw	r30, r16
    1792:	f1 82       	std	Z+1, r15	; 0x01
    1794:	e0 82       	st	Z, r14
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1798:	f8 01       	movw	r30, r16
    179a:	e0 80       	ld	r14, Z
    179c:	f1 80       	ldd	r15, Z+1	; 0x01
    179e:	e1 14       	cp	r14, r1
    17a0:	f1 04       	cpc	r15, r1
    17a2:	b9 f6       	brne	.-82     	; 0x1752 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    17a4:	82 e0       	ldi	r24, 0x02	; 2
}
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	ff 90       	pop	r15
    17b0:	ef 90       	pop	r14
    17b2:	df 90       	pop	r13
    17b4:	cf 90       	pop	r12
    17b6:	bf 90       	pop	r11
    17b8:	af 90       	pop	r10
    17ba:	08 95       	ret

000017bc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    17bc:	1f 93       	push	r17
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	ac 97       	sbiw	r28, 0x2c	; 44
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    17d2:	e1 ef       	ldi	r30, 0xF1	; 241
    17d4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    17d6:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    17da:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    17dc:	21 e0       	ldi	r18, 0x01	; 1
    17de:	e9 3f       	cpi	r30, 0xF9	; 249
    17e0:	f2 07       	cpc	r31, r18
    17e2:	c9 f7       	brne	.-14     	; 0x17d6 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    17e4:	0e 94 1e 02 	call	0x43c	; 0x43c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17e8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    17ec:	83 ff       	sbrs	r24, 3
    17ee:	36 c1       	rjmp	.+620    	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    17f0:	80 91 f1 01 	lds	r24, 0x01F1

		switch (USB_ControlRequest.bRequest)
    17f4:	20 91 f2 01 	lds	r18, 0x01F2
    17f8:	25 30       	cpi	r18, 0x05	; 5
    17fa:	09 f4       	brne	.+2      	; 0x17fe <USB_Device_ProcessControlRequest+0x42>
    17fc:	84 c0       	rjmp	.+264    	; 0x1906 <USB_Device_ProcessControlRequest+0x14a>
    17fe:	26 30       	cpi	r18, 0x06	; 6
    1800:	40 f4       	brcc	.+16     	; 0x1812 <USB_Device_ProcessControlRequest+0x56>
    1802:	21 30       	cpi	r18, 0x01	; 1
    1804:	a1 f1       	breq	.+104    	; 0x186e <USB_Device_ProcessControlRequest+0xb2>
    1806:	21 30       	cpi	r18, 0x01	; 1
    1808:	70 f0       	brcs	.+28     	; 0x1826 <USB_Device_ProcessControlRequest+0x6a>
    180a:	23 30       	cpi	r18, 0x03	; 3
    180c:	09 f0       	breq	.+2      	; 0x1810 <USB_Device_ProcessControlRequest+0x54>
    180e:	26 c1       	rjmp	.+588    	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
    1810:	2e c0       	rjmp	.+92     	; 0x186e <USB_Device_ProcessControlRequest+0xb2>
    1812:	28 30       	cpi	r18, 0x08	; 8
    1814:	09 f4       	brne	.+2      	; 0x1818 <USB_Device_ProcessControlRequest+0x5c>
    1816:	f3 c0       	rjmp	.+486    	; 0x19fe <USB_Device_ProcessControlRequest+0x242>
    1818:	29 30       	cpi	r18, 0x09	; 9
    181a:	09 f4       	brne	.+2      	; 0x181e <USB_Device_ProcessControlRequest+0x62>
    181c:	02 c1       	rjmp	.+516    	; 0x1a22 <USB_Device_ProcessControlRequest+0x266>
    181e:	26 30       	cpi	r18, 0x06	; 6
    1820:	09 f0       	breq	.+2      	; 0x1824 <USB_Device_ProcessControlRequest+0x68>
    1822:	1c c1       	rjmp	.+568    	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
    1824:	93 c0       	rjmp	.+294    	; 0x194c <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1826:	80 38       	cpi	r24, 0x80	; 128
    1828:	21 f0       	breq	.+8      	; 0x1832 <USB_Device_ProcessControlRequest+0x76>
    182a:	82 38       	cpi	r24, 0x82	; 130
    182c:	09 f0       	breq	.+2      	; 0x1830 <USB_Device_ProcessControlRequest+0x74>
    182e:	16 c1       	rjmp	.+556    	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1832:	80 91 ec 01 	lds	r24, 0x01EC
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1836:	90 91 ed 01 	lds	r25, 0x01ED
    183a:	99 23       	and	r25, r25
    183c:	71 f0       	breq	.+28     	; 0x185a <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    183e:	82 60       	ori	r24, 0x02	; 2
    1840:	0c c0       	rjmp	.+24     	; 0x185a <USB_Device_ProcessControlRequest+0x9e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1842:	80 91 f5 01 	lds	r24, 0x01F5
    1846:	8f 70       	andi	r24, 0x0F	; 15
    1848:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    184c:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	95 ff       	sbrs	r25, 5
    1854:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1856:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    185a:	90 91 e8 00 	lds	r25, 0x00E8
    185e:	97 7f       	andi	r25, 0xF7	; 247
    1860:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1864:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1868:	10 92 f1 00 	sts	0x00F1, r1
    186c:	d3 c0       	rjmp	.+422    	; 0x1a14 <USB_Device_ProcessControlRequest+0x258>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    186e:	88 23       	and	r24, r24
    1870:	19 f0       	breq	.+6      	; 0x1878 <USB_Device_ProcessControlRequest+0xbc>
    1872:	82 30       	cpi	r24, 0x02	; 2
    1874:	09 f0       	breq	.+2      	; 0x1878 <USB_Device_ProcessControlRequest+0xbc>
    1876:	f2 c0       	rjmp	.+484    	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	8f 71       	andi	r24, 0x1F	; 31
    187c:	90 70       	andi	r25, 0x00	; 0
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	29 f0       	breq	.+10     	; 0x188c <USB_Device_ProcessControlRequest+0xd0>
    1882:	82 30       	cpi	r24, 0x02	; 2
    1884:	91 05       	cpc	r25, r1
    1886:	09 f0       	breq	.+2      	; 0x188a <USB_Device_ProcessControlRequest+0xce>
    1888:	e9 c0       	rjmp	.+466    	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
    188a:	0b c0       	rjmp	.+22     	; 0x18a2 <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    188c:	80 91 f3 01 	lds	r24, 0x01F3
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	09 f0       	breq	.+2      	; 0x1896 <USB_Device_ProcessControlRequest+0xda>
    1894:	e3 c0       	rjmp	.+454    	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1896:	23 30       	cpi	r18, 0x03	; 3
    1898:	09 f0       	breq	.+2      	; 0x189c <USB_Device_ProcessControlRequest+0xe0>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	80 93 ed 01 	sts	0x01ED, r24
    18a0:	2c c0       	rjmp	.+88     	; 0x18fa <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    18a2:	80 91 f3 01 	lds	r24, 0x01F3
    18a6:	88 23       	and	r24, r24
    18a8:	41 f5       	brne	.+80     	; 0x18fa <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    18aa:	20 91 f5 01 	lds	r18, 0x01F5
    18ae:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <USB_Device_ProcessControlRequest+0xf8>
    18b2:	d4 c0       	rjmp	.+424    	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18b4:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    18b8:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    18bc:	80 ff       	sbrs	r24, 0
    18be:	1d c0       	rjmp	.+58     	; 0x18fa <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    18c0:	80 91 f2 01 	lds	r24, 0x01F2
    18c4:	83 30       	cpi	r24, 0x03	; 3
    18c6:	21 f4       	brne	.+8      	; 0x18d0 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    18c8:	80 91 eb 00 	lds	r24, 0x00EB
    18cc:	80 62       	ori	r24, 0x20	; 32
    18ce:	13 c0       	rjmp	.+38     	; 0x18f6 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    18d0:	80 91 eb 00 	lds	r24, 0x00EB
    18d4:	80 61       	ori	r24, 0x10	; 16
    18d6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <USB_Device_ProcessControlRequest+0x128>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	2a 95       	dec	r18
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <USB_Device_ProcessControlRequest+0x124>
    18e8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    18ec:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    18f0:	80 91 eb 00 	lds	r24, 0x00EB
    18f4:	88 60       	ori	r24, 0x08	; 8
    18f6:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18fa:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18fe:	80 91 e8 00 	lds	r24, 0x00E8
    1902:	87 7f       	andi	r24, 0xF7	; 247
    1904:	8a c0       	rjmp	.+276    	; 0x1a1a <USB_Device_ProcessControlRequest+0x25e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1906:	88 23       	and	r24, r24
    1908:	09 f0       	breq	.+2      	; 0x190c <USB_Device_ProcessControlRequest+0x150>
    190a:	a8 c0       	rjmp	.+336    	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    190c:	10 91 f3 01 	lds	r17, 0x01F3
    1910:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1912:	80 91 e3 00 	lds	r24, 0x00E3
    1916:	80 78       	andi	r24, 0x80	; 128
    1918:	81 2b       	or	r24, r17
    191a:	80 93 e3 00 	sts	0x00E3, r24
    191e:	80 91 e8 00 	lds	r24, 0x00E8
    1922:	87 7f       	andi	r24, 0xF7	; 247
    1924:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1928:	df d8       	rcall	.-3650   	; 0xae8 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    192a:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    192e:	80 ff       	sbrs	r24, 0
    1930:	fc cf       	rjmp	.-8      	; 0x192a <USB_Device_ProcessControlRequest+0x16e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    1932:	80 91 e3 00 	lds	r24, 0x00E3
    1936:	80 68       	ori	r24, 0x80	; 128
    1938:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    193c:	11 23       	and	r17, r17
    193e:	11 f0       	breq	.+4      	; 0x1944 <USB_Device_ProcessControlRequest+0x188>
    1940:	83 e0       	ldi	r24, 0x03	; 3
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <USB_Device_ProcessControlRequest+0x18a>
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	80 93 f0 01 	sts	0x01F0, r24
    194a:	88 c0       	rjmp	.+272    	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    194c:	80 58       	subi	r24, 0x80	; 128
    194e:	82 30       	cpi	r24, 0x02	; 2
    1950:	08 f0       	brcs	.+2      	; 0x1954 <USB_Device_ProcessControlRequest+0x198>
    1952:	84 c0       	rjmp	.+264    	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1954:	80 91 f3 01 	lds	r24, 0x01F3
    1958:	90 91 f4 01 	lds	r25, 0x01F4
    195c:	23 e0       	ldi	r18, 0x03	; 3
    195e:	8c 3d       	cpi	r24, 0xDC	; 220
    1960:	92 07       	cpc	r25, r18
    1962:	99 f5       	brne	.+102    	; 0x19ca <USB_Device_ProcessControlRequest+0x20e>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1968:	8a e2       	ldi	r24, 0x2A	; 42
    196a:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    196c:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    196e:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1970:	de 01       	movw	r26, r28
    1972:	15 96       	adiw	r26, 0x05	; 5
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1978:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    197a:	61 e2       	ldi	r22, 0x21	; 33
    197c:	e4 2f       	mov	r30, r20
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	60 93 57 00 	sts	0x0057, r22
    1984:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
    1986:	80 ff       	sbrs	r24, 0
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <USB_Device_ProcessControlRequest+0x1d4>
					{
						SerialByte >>= 4;
    198a:	e2 95       	swap	r30
    198c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    198e:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1990:	ef 70       	andi	r30, 0x0F	; 15
    1992:	2e 2f       	mov	r18, r30
    1994:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1996:	ea 30       	cpi	r30, 0x0A	; 10
    1998:	18 f0       	brcs	.+6      	; 0x19a0 <USB_Device_ProcessControlRequest+0x1e4>
    199a:	29 5c       	subi	r18, 0xC9	; 201
    199c:	3f 4f       	sbci	r19, 0xFF	; 255
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <USB_Device_ProcessControlRequest+0x1e8>
    19a0:	20 5d       	subi	r18, 0xD0	; 208
    19a2:	3f 4f       	sbci	r19, 0xFF	; 255
    19a4:	2d 93       	st	X+, r18
    19a6:	3d 93       	st	X+, r19
    19a8:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    19aa:	84 31       	cpi	r24, 0x14	; 20
    19ac:	91 05       	cpc	r25, r1
    19ae:	31 f7       	brne	.-52     	; 0x197c <USB_Device_ProcessControlRequest+0x1c0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    19b0:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19b2:	80 91 e8 00 	lds	r24, 0x00E8
    19b6:	87 7f       	andi	r24, 0xF7	; 247
    19b8:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    19bc:	ce 01       	movw	r24, r28
    19be:	03 96       	adiw	r24, 0x03	; 3
    19c0:	6a e2       	ldi	r22, 0x2A	; 42
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <Endpoint_Write_Control_Stream_LE>
    19c8:	14 c0       	rjmp	.+40     	; 0x19f2 <USB_Device_ProcessControlRequest+0x236>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    19ca:	60 91 f5 01 	lds	r22, 0x01F5
    19ce:	ae 01       	movw	r20, r28
    19d0:	4f 5f       	subi	r20, 0xFF	; 255
    19d2:	5f 4f       	sbci	r21, 0xFF	; 255
    19d4:	0e 94 c7 01 	call	0x38e	; 0x38e <CALLBACK_USB_GetDescriptor>
    19d8:	bc 01       	movw	r22, r24
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <USB_Device_ProcessControlRequest+0x224>
    19de:	3e c0       	rjmp	.+124    	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
    19e0:	80 91 e8 00 	lds	r24, 0x00E8
    19e4:	87 7f       	andi	r24, 0xF7	; 247
    19e6:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	0e 94 9b 04 	call	0x936	; 0x936 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19f2:	80 91 e8 00 	lds	r24, 0x00E8
    19f6:	8b 77       	andi	r24, 0x7B	; 123
    19f8:	80 93 e8 00 	sts	0x00E8, r24
    19fc:	2f c0       	rjmp	.+94     	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    19fe:	80 38       	cpi	r24, 0x80	; 128
    1a00:	69 f5       	brne	.+90     	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a02:	80 91 e8 00 	lds	r24, 0x00E8
    1a06:	87 7f       	andi	r24, 0xF7	; 247
    1a08:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1a0c:	80 91 eb 01 	lds	r24, 0x01EB
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a10:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a14:	80 91 e8 00 	lds	r24, 0x00E8
    1a18:	8e 77       	andi	r24, 0x7E	; 126
    1a1a:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1a1e:	64 d8       	rcall	.-3896   	; 0xae8 <Endpoint_ClearStatusStage>
    1a20:	1d c0       	rjmp	.+58     	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1a22:	88 23       	and	r24, r24
    1a24:	d9 f4       	brne	.+54     	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1a26:	90 91 f3 01 	lds	r25, 0x01F3
    1a2a:	92 30       	cpi	r25, 0x02	; 2
    1a2c:	b8 f4       	brcc	.+46     	; 0x1a5c <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a2e:	80 91 e8 00 	lds	r24, 0x00E8
    1a32:	87 7f       	andi	r24, 0xF7	; 247
    1a34:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1a38:	90 93 eb 01 	sts	0x01EB, r25

	Endpoint_ClearStatusStage();
    1a3c:	55 d8       	rcall	.-3926   	; 0xae8 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1a3e:	80 91 eb 01 	lds	r24, 0x01EB
    1a42:	88 23       	and	r24, r24
    1a44:	21 f4       	brne	.+8      	; 0x1a4e <USB_Device_ProcessControlRequest+0x292>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1a46:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1a4a:	87 ff       	sbrs	r24, 7
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <USB_Device_ProcessControlRequest+0x296>
    1a4e:	84 e0       	ldi	r24, 0x04	; 4
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <USB_Device_ProcessControlRequest+0x298>
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 93 f0 01 	sts	0x01F0, r24

	EVENT_USB_Device_ConfigurationChanged();
    1a58:	0e 94 0e 02 	call	0x41c	; 0x41c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a5c:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1a60:	83 ff       	sbrs	r24, 3
    1a62:	0a c0       	rjmp	.+20     	; 0x1a78 <USB_Device_ProcessControlRequest+0x2bc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a64:	80 91 e8 00 	lds	r24, 0x00E8
    1a68:	87 7f       	andi	r24, 0xF7	; 247
    1a6a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1a6e:	80 91 eb 00 	lds	r24, 0x00EB
    1a72:	80 62       	ori	r24, 0x20	; 32
    1a74:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1a78:	ac 96       	adiw	r28, 0x2c	; 44
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	1f 91       	pop	r17
    1a8a:	08 95       	ret

00001a8c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1a8c:	08 95       	ret

00001a8e <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1a96:	c8 ee       	ldi	r28, 0xE8	; 232
    1a98:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1a9a:	07 c0       	rjmp	.+14     	; 0x1aaa <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	cf d8       	rcall	.-3682   	; 0xc3e <USB_Host_WaitMS>
    1aa0:	88 23       	and	r24, r24
    1aa2:	d1 f4       	brne	.+52     	; 0x1ad8 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1aa4:	20 97       	sbiw	r28, 0x00	; 0
    1aa6:	b9 f0       	breq	.+46     	; 0x1ad6 <USB_Host_WaitForIOS+0x48>
    1aa8:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1aaa:	11 23       	and	r17, r17
    1aac:	29 f4       	brne	.+10     	; 0x1ab8 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1aae:	80 91 a6 00 	lds	r24, 0x00A6
    1ab2:	83 ff       	sbrs	r24, 3
    1ab4:	f3 cf       	rjmp	.-26     	; 0x1a9c <USB_Host_WaitForIOS+0xe>
    1ab6:	0d c0       	rjmp	.+26     	; 0x1ad2 <USB_Host_WaitForIOS+0x44>
    1ab8:	11 30       	cpi	r17, 0x01	; 1
    1aba:	29 f4       	brne	.+10     	; 0x1ac6 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1abc:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1ac0:	80 ff       	sbrs	r24, 0
    1ac2:	ec cf       	rjmp	.-40     	; 0x1a9c <USB_Host_WaitForIOS+0xe>
    1ac4:	06 c0       	rjmp	.+12     	; 0x1ad2 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1ac6:	12 30       	cpi	r17, 0x02	; 2
    1ac8:	49 f7       	brne	.-46     	; 0x1a9c <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1aca:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1ace:	82 ff       	sbrs	r24, 2
    1ad0:	e5 cf       	rjmp	.-54     	; 0x1a9c <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	01 c0       	rjmp	.+2      	; 0x1ad8 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1ad6:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	08 95       	ret

00001ae0 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1aee:	e0 90 9e 00 	lds	r14, 0x009E
    1af2:	ff 24       	eor	r15, r15
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	e8 22       	and	r14, r24
    1af8:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1afa:	c0 91 f7 01 	lds	r28, 0x01F7
    1afe:	d0 91 f8 01 	lds	r29, 0x01F8
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1b02:	80 91 9e 00 	lds	r24, 0x009E
    1b06:	81 60       	ori	r24, 0x01	; 1
    1b08:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	97 d8       	rcall	.-3794   	; 0xc3e <USB_Host_WaitMS>
    1b10:	88 23       	and	r24, r24
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <USB_Host_SendControlRequest+0x36>
    1b14:	cb c0       	rjmp	.+406    	; 0x1cac <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b16:	80 91 aa 00 	lds	r24, 0x00AA
    1b1a:	8f 7c       	andi	r24, 0xCF	; 207
    1b1c:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1b20:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1b24:	80 91 a6 00 	lds	r24, 0x00A6
    1b28:	8f 7e       	andi	r24, 0xEF	; 239
    1b2a:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b2e:	80 91 a9 00 	lds	r24, 0x00A9
    1b32:	8f 7b       	andi	r24, 0xBF	; 191
    1b34:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1b38:	e1 ef       	ldi	r30, 0xF1	; 241
    1b3a:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1b3c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1b3e:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	e9 3f       	cpi	r30, 0xF9	; 249
    1b46:	f8 07       	cpc	r31, r24
    1b48:	c9 f7       	brne	.-14     	; 0x1b3c <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1b4a:	80 91 a6 00 	lds	r24, 0x00A6
    1b4e:	87 77       	andi	r24, 0x77	; 119
    1b50:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	9b df       	rcall	.-202    	; 0x1a8e <USB_Host_WaitForIOS>
    1b58:	88 23       	and	r24, r24
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <USB_Host_SendControlRequest+0x7e>
    1b5c:	a7 c0       	rjmp	.+334    	; 0x1cac <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b5e:	80 91 a9 00 	lds	r24, 0x00A9
    1b62:	80 64       	ori	r24, 0x40	; 64
    1b64:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	69 d8       	rcall	.-3886   	; 0xc3e <USB_Host_WaitMS>
    1b6c:	88 23       	and	r24, r24
    1b6e:	09 f0       	breq	.+2      	; 0x1b72 <USB_Host_SendControlRequest+0x92>
    1b70:	9d c0       	rjmp	.+314    	; 0x1cac <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1b72:	80 91 f1 01 	lds	r24, 0x01F1
    1b76:	87 ff       	sbrs	r24, 7
    1b78:	4f c0       	rjmp	.+158    	; 0x1c18 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b7a:	80 91 aa 00 	lds	r24, 0x00AA
    1b7e:	8f 7c       	andi	r24, 0xCF	; 207
    1b80:	80 61       	ori	r24, 0x10	; 16
    1b82:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1b86:	01 15       	cp	r16, r1
    1b88:	11 05       	cpc	r17, r1
    1b8a:	61 f5       	brne	.+88     	; 0x1be4 <USB_Host_SendControlRequest+0x104>
    1b8c:	2d c0       	rjmp	.+90     	; 0x1be8 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b8e:	80 91 a9 00 	lds	r24, 0x00A9
    1b92:	8f 7b       	andi	r24, 0xBF	; 191
    1b94:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	79 df       	rcall	.-270    	; 0x1a8e <USB_Host_WaitForIOS>
    1b9c:	88 23       	and	r24, r24
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <USB_Host_SendControlRequest+0xc2>
    1ba0:	85 c0       	rjmp	.+266    	; 0x1cac <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1ba2:	80 91 f6 00 	lds	r24, 0x00F6
    1ba6:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	49 f4       	brne	.+18     	; 0x1bc0 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1bae:	c0 e0       	ldi	r28, 0x00	; 0
    1bb0:	d0 e0       	ldi	r29, 0x00	; 0
    1bb2:	06 c0       	rjmp	.+12     	; 0x1bc0 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1bb4:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1bb8:	f8 01       	movw	r30, r16
    1bba:	81 93       	st	Z+, r24
    1bbc:	8f 01       	movw	r16, r30
					DataLen--;
    1bbe:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1bc0:	80 91 f6 00 	lds	r24, 0x00F6
    1bc4:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	11 f0       	breq	.+4      	; 0x1bd0 <USB_Host_SendControlRequest+0xf0>
    1bcc:	20 97       	sbiw	r28, 0x00	; 0
    1bce:	91 f7       	brne	.-28     	; 0x1bb4 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1bd0:	80 91 a9 00 	lds	r24, 0x00A9
    1bd4:	80 64       	ori	r24, 0x40	; 64
    1bd6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1bda:	80 91 a6 00 	lds	r24, 0x00A6
    1bde:	8e 77       	andi	r24, 0x7E	; 126
    1be0:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1be4:	20 97       	sbiw	r28, 0x00	; 0
    1be6:	99 f6       	brne	.-90     	; 0x1b8e <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1be8:	80 91 aa 00 	lds	r24, 0x00AA
    1bec:	8f 7c       	andi	r24, 0xCF	; 207
    1bee:	80 62       	ori	r24, 0x20	; 32
    1bf0:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1bf4:	80 91 a9 00 	lds	r24, 0x00A9
    1bf8:	8f 7b       	andi	r24, 0xBF	; 191
    1bfa:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1bfe:	82 e0       	ldi	r24, 0x02	; 2
    1c00:	46 df       	rcall	.-372    	; 0x1a8e <USB_Host_WaitForIOS>
    1c02:	88 23       	and	r24, r24
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <USB_Host_SendControlRequest+0x128>
    1c06:	52 c0       	rjmp	.+164    	; 0x1cac <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1c08:	80 91 a6 00 	lds	r24, 0x00A6
    1c0c:	8b 77       	andi	r24, 0x7B	; 123
    1c0e:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c12:	82 e0       	ldi	r24, 0x02	; 2
    1c14:	3c df       	rcall	.-392    	; 0x1a8e <USB_Host_WaitForIOS>
    1c16:	4a c0       	rjmp	.+148    	; 0x1cac <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1c18:	01 15       	cp	r16, r1
    1c1a:	11 05       	cpc	r17, r1
    1c1c:	99 f1       	breq	.+102    	; 0x1c84 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c1e:	80 91 aa 00 	lds	r24, 0x00AA
    1c22:	8f 7c       	andi	r24, 0xCF	; 207
    1c24:	80 62       	ori	r24, 0x20	; 32
    1c26:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c2a:	80 91 a9 00 	lds	r24, 0x00A9
    1c2e:	8f 7b       	andi	r24, 0xBF	; 191
    1c30:	80 93 a9 00 	sts	0x00A9, r24
    1c34:	1c c0       	rjmp	.+56     	; 0x1c6e <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	2a df       	rcall	.-428    	; 0x1a8e <USB_Host_WaitForIOS>
    1c3a:	88 23       	and	r24, r24
    1c3c:	b9 f5       	brne	.+110    	; 0x1cac <USB_Host_SendControlRequest+0x1cc>
    1c3e:	f8 01       	movw	r30, r16
    1c40:	06 c0       	rjmp	.+12     	; 0x1c4e <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1c42:	81 91       	ld	r24, Z+
    1c44:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1c46:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1c4a:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1c4c:	59 f0       	breq	.+22     	; 0x1c64 <USB_Host_SendControlRequest+0x184>
    1c4e:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c50:	20 91 f6 00 	lds	r18, 0x00F6
    1c54:	30 91 f7 00 	lds	r19, 0x00F7
    1c58:	80 91 e2 01 	lds	r24, 0x01E2
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	28 17       	cp	r18, r24
    1c60:	39 07       	cpc	r19, r25
    1c62:	78 f3       	brcs	.-34     	; 0x1c42 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1c64:	80 91 a6 00 	lds	r24, 0x00A6
    1c68:	8b 77       	andi	r24, 0x7B	; 123
    1c6a:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1c6e:	20 97       	sbiw	r28, 0x00	; 0
    1c70:	11 f7       	brne	.-60     	; 0x1c36 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	0c df       	rcall	.-488    	; 0x1a8e <USB_Host_WaitForIOS>
    1c76:	88 23       	and	r24, r24
    1c78:	c9 f4       	brne	.+50     	; 0x1cac <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c7a:	80 91 a9 00 	lds	r24, 0x00A9
    1c7e:	80 64       	ori	r24, 0x40	; 64
    1c80:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c84:	80 91 aa 00 	lds	r24, 0x00AA
    1c88:	8f 7c       	andi	r24, 0xCF	; 207
    1c8a:	80 61       	ori	r24, 0x10	; 16
    1c8c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c90:	80 91 a9 00 	lds	r24, 0x00A9
    1c94:	8f 7b       	andi	r24, 0xBF	; 191
    1c96:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	f8 de       	rcall	.-528    	; 0x1a8e <USB_Host_WaitForIOS>
    1c9e:	88 23       	and	r24, r24
    1ca0:	29 f4       	brne	.+10     	; 0x1cac <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1ca2:	90 91 a6 00 	lds	r25, 0x00A6
    1ca6:	9e 77       	andi	r25, 0x7E	; 126
    1ca8:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1cac:	90 91 a9 00 	lds	r25, 0x00A9
    1cb0:	90 64       	ori	r25, 0x40	; 64
    1cb2:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1cb6:	e1 14       	cp	r14, r1
    1cb8:	f1 04       	cpc	r15, r1
    1cba:	29 f4       	brne	.+10     	; 0x1cc6 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1cbc:	90 91 9e 00 	lds	r25, 0x009E
    1cc0:	9e 7f       	andi	r25, 0xFE	; 254
    1cc2:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1cc6:	91 e0       	ldi	r25, 0x01	; 1
    1cc8:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1ccc:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	08 95       	ret

00001cde <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1cde:	1f 93       	push	r17
    1ce0:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1ce2:	10 92 f1 01 	sts	0x01F1, r1
    1ce6:	89 e0       	ldi	r24, 0x09	; 9
    1ce8:	80 93 f2 01 	sts	0x01F2, r24
    1cec:	10 93 f3 01 	sts	0x01F3, r17
    1cf0:	10 92 f4 01 	sts	0x01F4, r1
    1cf4:	10 92 f6 01 	sts	0x01F6, r1
    1cf8:	10 92 f5 01 	sts	0x01F5, r1
    1cfc:	10 92 f8 01 	sts	0x01F8, r1
    1d00:	10 92 f7 01 	sts	0x01F7, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d04:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	e9 de       	rcall	.-558    	; 0x1ae0 <USB_Host_SendControlRequest>
    1d0e:	88 23       	and	r24, r24
    1d10:	49 f4       	brne	.+18     	; 0x1d24 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1d12:	10 93 ee 01 	sts	0x01EE, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1d16:	11 23       	and	r17, r17
    1d18:	11 f0       	breq	.+4      	; 0x1d1e <USB_Host_SetDeviceConfiguration+0x40>
    1d1a:	9b e0       	ldi	r25, 0x0B	; 11
    1d1c:	01 c0       	rjmp	.+2      	; 0x1d20 <USB_Host_SetDeviceConfiguration+0x42>
    1d1e:	9a e0       	ldi	r25, 0x0A	; 10
    1d20:	90 93 f9 01 	sts	0x01F9, r25
	}

	return ErrorCode;
}
    1d24:	1f 91       	pop	r17
    1d26:	08 95       	ret

00001d28 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1d28:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
		if (USB_CurrentMode == USB_MODE_Device)
    1d2a:	80 91 ea 01 	lds	r24, 0x01EA
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	d1 f4       	brne	.+52     	; 0x1d66 <USB_USBTask+0x3e>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d32:	80 91 f0 01 	lds	r24, 0x01F0
    1d36:	88 23       	and	r24, r24
    1d38:	29 f1       	breq	.+74     	; 0x1d84 <USB_USBTask+0x5c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d3a:	80 91 e9 00 	lds	r24, 0x00E9
    1d3e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d40:	90 91 ec 00 	lds	r25, 0x00EC
    1d44:	90 ff       	sbrs	r25, 0
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <USB_USBTask+0x24>
    1d48:	10 e8       	ldi	r17, 0x80	; 128
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <USB_USBTask+0x26>
    1d4c:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d4e:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d50:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d54:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1d58:	83 ff       	sbrs	r24, 3
    1d5a:	01 c0       	rjmp	.+2      	; 0x1d5e <USB_USBTask+0x36>
	  USB_Device_ProcessControlRequest();
    1d5c:	2f dd       	rcall	.-1442   	; 0x17bc <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d5e:	1f 70       	andi	r17, 0x0F	; 15
    1d60:	10 93 e9 00 	sts	0x00E9, r17
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <USB_USBTask+0x5c>
void USB_USBTask(void)
{
	#if defined(USB_CAN_BE_BOTH)
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
    1d66:	80 91 ea 01 	lds	r24, 0x01EA
    1d6a:	82 30       	cpi	r24, 0x02	; 2
    1d6c:	59 f4       	brne	.+22     	; 0x1d84 <USB_USBTask+0x5c>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1d6e:	10 91 a7 00 	lds	r17, 0x00A7
    1d72:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1d74:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d78:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1d7c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <USB_Host_ProcessNextHostState>
    1d80:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1d84:	1f 91       	pop	r17
    1d86:	08 95       	ret

00001d88 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1d88:	6f 92       	push	r6
    1d8a:	7f 92       	push	r7
    1d8c:	8f 92       	push	r8
    1d8e:	9f 92       	push	r9
    1d90:	af 92       	push	r10
    1d92:	bf 92       	push	r11
    1d94:	cf 92       	push	r12
    1d96:	df 92       	push	r13
    1d98:	ef 92       	push	r14
    1d9a:	ff 92       	push	r15
    1d9c:	0f 93       	push	r16
    1d9e:	1f 93       	push	r17
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <HID_Device_ProcessControlRequest+0x1e>
    1da6:	0f 92       	push	r0
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1dae:	6d b6       	in	r6, 0x3d	; 61
    1db0:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1db2:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1db6:	83 ff       	sbrs	r24, 3
    1db8:	14 c1       	rjmp	.+552    	; 0x1fe2 <HID_Device_ProcessControlRequest+0x25a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1dba:	f7 01       	movw	r30, r14
    1dbc:	80 81       	ld	r24, Z
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	20 91 f5 01 	lds	r18, 0x01F5
    1dc4:	30 91 f6 01 	lds	r19, 0x01F6
    1dc8:	28 17       	cp	r18, r24
    1dca:	39 07       	cpc	r19, r25
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <HID_Device_ProcessControlRequest+0x48>
    1dce:	09 c1       	rjmp	.+530    	; 0x1fe2 <HID_Device_ProcessControlRequest+0x25a>
	  return;

	switch (USB_ControlRequest.bRequest)
    1dd0:	80 91 f2 01 	lds	r24, 0x01F2
    1dd4:	83 30       	cpi	r24, 0x03	; 3
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <HID_Device_ProcessControlRequest+0x52>
    1dd8:	a8 c0       	rjmp	.+336    	; 0x1f2a <HID_Device_ProcessControlRequest+0x1a2>
    1dda:	84 30       	cpi	r24, 0x04	; 4
    1ddc:	30 f4       	brcc	.+12     	; 0x1dea <HID_Device_ProcessControlRequest+0x62>
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	71 f0       	breq	.+28     	; 0x1dfe <HID_Device_ProcessControlRequest+0x76>
    1de2:	82 30       	cpi	r24, 0x02	; 2
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <HID_Device_ProcessControlRequest+0x60>
    1de6:	fd c0       	rjmp	.+506    	; 0x1fe2 <HID_Device_ProcessControlRequest+0x25a>
    1de8:	df c0       	rjmp	.+446    	; 0x1fa8 <HID_Device_ProcessControlRequest+0x220>
    1dea:	8a 30       	cpi	r24, 0x0A	; 10
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <HID_Device_ProcessControlRequest+0x68>
    1dee:	c3 c0       	rjmp	.+390    	; 0x1f76 <HID_Device_ProcessControlRequest+0x1ee>
    1df0:	8b 30       	cpi	r24, 0x0B	; 11
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <HID_Device_ProcessControlRequest+0x6e>
    1df4:	ab c0       	rjmp	.+342    	; 0x1f4c <HID_Device_ProcessControlRequest+0x1c4>
    1df6:	89 30       	cpi	r24, 0x09	; 9
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <HID_Device_ProcessControlRequest+0x74>
    1dfa:	f3 c0       	rjmp	.+486    	; 0x1fe2 <HID_Device_ProcessControlRequest+0x25a>
    1dfc:	4e c0       	rjmp	.+156    	; 0x1e9a <HID_Device_ProcessControlRequest+0x112>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1dfe:	80 91 f1 01 	lds	r24, 0x01F1
    1e02:	81 3a       	cpi	r24, 0xA1	; 161
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <HID_Device_ProcessControlRequest+0x80>
    1e06:	ed c0       	rjmp	.+474    	; 0x1fe2 <HID_Device_ProcessControlRequest+0x25a>
    1e08:	cd b6       	in	r12, 0x3d	; 61
    1e0a:	de b6       	in	r13, 0x3e	; 62
    1e0c:	9d b6       	in	r9, 0x3d	; 61
    1e0e:	8d 2c       	mov	r8, r13
			{
				uint16_t ReportSize = 0;
    1e10:	1b 82       	std	Y+3, r1	; 0x03
    1e12:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1e14:	80 91 f3 01 	lds	r24, 0x01F3
    1e18:	00 91 f4 01 	lds	r16, 0x01F4
    1e1c:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1e1e:	f7 01       	movw	r30, r14
    1e20:	40 85       	ldd	r20, Z+8	; 0x08
    1e22:	c4 1a       	sub	r12, r20
    1e24:	d1 08       	sbc	r13, r1
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de be       	out	0x3e, r13	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd be       	out	0x3d, r12	; 61
    1e30:	08 94       	sec
    1e32:	c1 1c       	adc	r12, r1
    1e34:	d1 1c       	adc	r13, r1
    1e36:	bc 2c       	mov	r11, r12
    1e38:	ad 2c       	mov	r10, r13

				memset(ReportData, 0, sizeof(ReportData));
    1e3a:	c6 01       	movw	r24, r12
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	b0 d3       	rcall	.+1888   	; 0x25a4 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1e44:	40 2f       	mov	r20, r16
    1e46:	41 50       	subi	r20, 0x01	; 1
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1e48:	c7 01       	movw	r24, r14
    1e4a:	be 01       	movw	r22, r28
    1e4c:	6f 5f       	subi	r22, 0xFF	; 255
    1e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e50:	96 01       	movw	r18, r12
    1e52:	8e 01       	movw	r16, r28
    1e54:	0e 5f       	subi	r16, 0xFE	; 254
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	0e 94 2e 02 	call	0x45c	; 0x45c <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1e5c:	f7 01       	movw	r30, r14
    1e5e:	26 81       	ldd	r18, Z+6	; 0x06
    1e60:	37 81       	ldd	r19, Z+7	; 0x07
    1e62:	21 15       	cp	r18, r1
    1e64:	31 05       	cpc	r19, r1
    1e66:	29 f0       	breq	.+10     	; 0x1e72 <HID_Device_ProcessControlRequest+0xea>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1e68:	40 85       	ldd	r20, Z+8	; 0x08
    1e6a:	c9 01       	movw	r24, r18
    1e6c:	b6 01       	movw	r22, r12
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	90 d3       	rcall	.+1824   	; 0x2592 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e72:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e76:	80 91 e8 00 	lds	r24, 0x00E8
    1e7a:	87 7f       	andi	r24, 0xF7	; 247
    1e7c:	80 93 e8 00 	sts	0x00E8, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1e80:	6a 81       	ldd	r22, Y+2	; 0x02
    1e82:	7b 81       	ldd	r23, Y+3	; 0x03
    1e84:	8b 2d       	mov	r24, r11
    1e86:	9a 2d       	mov	r25, r10
    1e88:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e8c:	80 91 e8 00 	lds	r24, 0x00E8
    1e90:	8b 77       	andi	r24, 0x7B	; 123
    1e92:	80 93 e8 00 	sts	0x00E8, r24
    1e96:	94 01       	movw	r18, r8
    1e98:	40 c0       	rjmp	.+128    	; 0x1f1a <HID_Device_ProcessControlRequest+0x192>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1e9a:	80 91 f1 01 	lds	r24, 0x01F1
    1e9e:	81 32       	cpi	r24, 0x21	; 33
    1ea0:	09 f0       	breq	.+2      	; 0x1ea4 <HID_Device_ProcessControlRequest+0x11c>
    1ea2:	9f c0       	rjmp	.+318    	; 0x1fe2 <HID_Device_ProcessControlRequest+0x25a>
    1ea4:	cd b6       	in	r12, 0x3d	; 61
    1ea6:	de b6       	in	r13, 0x3e	; 62
    1ea8:	bd b6       	in	r11, 0x3d	; 61
    1eaa:	9d 2c       	mov	r9, r13
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1eac:	00 91 f7 01 	lds	r16, 0x01F7
    1eb0:	10 91 f8 01 	lds	r17, 0x01F8
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1eb4:	a0 90 f3 01 	lds	r10, 0x01F3
    1eb8:	80 90 f4 01 	lds	r8, 0x01F4
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1ebc:	8d b7       	in	r24, 0x3d	; 61
    1ebe:	9e b7       	in	r25, 0x3e	; 62
    1ec0:	80 1b       	sub	r24, r16
    1ec2:	91 0b       	sbc	r25, r17
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	9e bf       	out	0x3e, r25	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	8d bf       	out	0x3d, r24	; 61
    1ece:	cd b6       	in	r12, 0x3d	; 61
    1ed0:	de b6       	in	r13, 0x3e	; 62
    1ed2:	08 94       	sec
    1ed4:	c1 1c       	adc	r12, r1
    1ed6:	d1 1c       	adc	r13, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ed8:	80 91 e8 00 	lds	r24, 0x00E8
    1edc:	87 7f       	andi	r24, 0xF7	; 247
    1ede:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1ee2:	c6 01       	movw	r24, r12
    1ee4:	b8 01       	movw	r22, r16
    1ee6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1eea:	80 91 e8 00 	lds	r24, 0x00E8
    1eee:	8e 77       	andi	r24, 0x7E	; 126
    1ef0:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	aa 20       	and	r10, r10
    1efa:	11 f4       	brne	.+4      	; 0x1f00 <HID_Device_ProcessControlRequest+0x178>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1f00:	48 2d       	mov	r20, r8
    1f02:	41 50       	subi	r20, 0x01	; 1

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1f04:	96 01       	movw	r18, r12
    1f06:	28 0f       	add	r18, r24
    1f08:	39 1f       	adc	r19, r25
    1f0a:	08 1b       	sub	r16, r24
    1f0c:	19 0b       	sbc	r17, r25
    1f0e:	c7 01       	movw	r24, r14
    1f10:	6a 2d       	mov	r22, r10
    1f12:	0e 94 63 02 	call	0x4c6	; 0x4c6 <CALLBACK_HID_Device_ProcessHIDReport>
    1f16:	3b 2d       	mov	r19, r11
    1f18:	29 2d       	mov	r18, r9
    1f1a:	83 2f       	mov	r24, r19
    1f1c:	92 2f       	mov	r25, r18
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	9e bf       	out	0x3e, r25	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	8d bf       	out	0x3d, r24	; 61
    1f28:	5c c0       	rjmp	.+184    	; 0x1fe2 <HID_Device_ProcessControlRequest+0x25a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1f2a:	80 91 f1 01 	lds	r24, 0x01F1
    1f2e:	81 3a       	cpi	r24, 0xA1	; 161
    1f30:	09 f0       	breq	.+2      	; 0x1f34 <HID_Device_ProcessControlRequest+0x1ac>
    1f32:	57 c0       	rjmp	.+174    	; 0x1fe2 <HID_Device_ProcessControlRequest+0x25a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f34:	80 91 e8 00 	lds	r24, 0x00E8
    1f38:	87 7f       	andi	r24, 0xF7	; 247
    1f3a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f3e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1f42:	80 ff       	sbrs	r24, 0
    1f44:	fc cf       	rjmp	.-8      	; 0x1f3e <HID_Device_ProcessControlRequest+0x1b6>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1f46:	f7 01       	movw	r30, r14
    1f48:	81 85       	ldd	r24, Z+9	; 0x09
    1f4a:	42 c0       	rjmp	.+132    	; 0x1fd0 <HID_Device_ProcessControlRequest+0x248>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1f4c:	80 91 f1 01 	lds	r24, 0x01F1
    1f50:	81 32       	cpi	r24, 0x21	; 33
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <HID_Device_ProcessControlRequest+0x1ce>
    1f54:	46 c0       	rjmp	.+140    	; 0x1fe2 <HID_Device_ProcessControlRequest+0x25a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f56:	80 91 e8 00 	lds	r24, 0x00E8
    1f5a:	87 7f       	andi	r24, 0xF7	; 247
    1f5c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1f60:	0e 94 74 05 	call	0xae8	; 0xae8 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1f64:	90 91 f3 01 	lds	r25, 0x01F3
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	99 23       	and	r25, r25
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <HID_Device_ProcessControlRequest+0x1e8>
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	f7 01       	movw	r30, r14
    1f72:	81 87       	std	Z+9, r24	; 0x09
    1f74:	36 c0       	rjmp	.+108    	; 0x1fe2 <HID_Device_ProcessControlRequest+0x25a>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1f76:	80 91 f1 01 	lds	r24, 0x01F1
    1f7a:	81 32       	cpi	r24, 0x21	; 33
    1f7c:	91 f5       	brne	.+100    	; 0x1fe2 <HID_Device_ProcessControlRequest+0x25a>
    1f7e:	80 91 e8 00 	lds	r24, 0x00E8
    1f82:	87 7f       	andi	r24, 0xF7	; 247
    1f84:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1f88:	0e 94 74 05 	call	0xae8	; 0xae8 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1f8c:	80 91 f3 01 	lds	r24, 0x01F3
    1f90:	90 91 f4 01 	lds	r25, 0x01F4
    1f94:	80 70       	andi	r24, 0x00	; 0
    1f96:	36 e0       	ldi	r19, 0x06	; 6
    1f98:	96 95       	lsr	r25
    1f9a:	87 95       	ror	r24
    1f9c:	3a 95       	dec	r19
    1f9e:	e1 f7       	brne	.-8      	; 0x1f98 <HID_Device_ProcessControlRequest+0x210>
    1fa0:	f7 01       	movw	r30, r14
    1fa2:	95 87       	std	Z+13, r25	; 0x0d
    1fa4:	84 87       	std	Z+12, r24	; 0x0c
    1fa6:	1d c0       	rjmp	.+58     	; 0x1fe2 <HID_Device_ProcessControlRequest+0x25a>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1fa8:	80 91 f1 01 	lds	r24, 0x01F1
    1fac:	81 3a       	cpi	r24, 0xA1	; 161
    1fae:	c9 f4       	brne	.+50     	; 0x1fe2 <HID_Device_ProcessControlRequest+0x25a>
    1fb0:	80 91 e8 00 	lds	r24, 0x00E8
    1fb4:	87 7f       	andi	r24, 0xF7	; 247
    1fb6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1fba:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1fbe:	80 ff       	sbrs	r24, 0
    1fc0:	fc cf       	rjmp	.-8      	; 0x1fba <HID_Device_ProcessControlRequest+0x232>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1fc2:	f7 01       	movw	r30, r14
    1fc4:	84 85       	ldd	r24, Z+12	; 0x0c
    1fc6:	95 85       	ldd	r25, Z+13	; 0x0d
    1fc8:	96 95       	lsr	r25
    1fca:	87 95       	ror	r24
    1fcc:	96 95       	lsr	r25
    1fce:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1fd0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fd4:	80 91 e8 00 	lds	r24, 0x00E8
    1fd8:	8e 77       	andi	r24, 0x7E	; 126
    1fda:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1fde:	0e 94 74 05 	call	0xae8	; 0xae8 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	7e be       	out	0x3e, r7	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	6d be       	out	0x3d, r6	; 61
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	df 90       	pop	r13
    2000:	cf 90       	pop	r12
    2002:	bf 90       	pop	r11
    2004:	af 90       	pop	r10
    2006:	9f 90       	pop	r9
    2008:	8f 90       	pop	r8
    200a:	7f 90       	pop	r7
    200c:	6f 90       	pop	r6
    200e:	08 95       	ret

00002010 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    2016:	09 96       	adiw	r24, 0x09	; 9
    2018:	dc 01       	movw	r26, r24
    201a:	87 e0       	ldi	r24, 0x07	; 7
    201c:	ed 01       	movw	r28, r26
    201e:	19 92       	st	Y+, r1
    2020:	8a 95       	dec	r24
    2022:	e9 f7       	brne	.-6      	; 0x201e <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    2028:	84 ef       	ldi	r24, 0xF4	; 244
    202a:	91 e0       	ldi	r25, 0x01	; 1
    202c:	95 87       	std	Z+13, r25	; 0x0d
    202e:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    2030:	83 e0       	ldi	r24, 0x03	; 3
    2032:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    2034:	cf 01       	movw	r24, r30
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	61 e0       	ldi	r22, 0x01	; 1
    203a:	0e 94 30 05 	call	0xa60	; 0xa60 <Endpoint_ConfigureEndpointTable>
	  return false;	
	
	return true;
}
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	08 95       	ret

00002044 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2044:	5f 92       	push	r5
    2046:	6f 92       	push	r6
    2048:	7f 92       	push	r7
    204a:	8f 92       	push	r8
    204c:	9f 92       	push	r9
    204e:	af 92       	push	r10
    2050:	bf 92       	push	r11
    2052:	cf 92       	push	r12
    2054:	df 92       	push	r13
    2056:	ef 92       	push	r14
    2058:	ff 92       	push	r15
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <HID_Device_USBTask+0x20>
    2064:	00 d0       	rcall	.+0      	; 0x2066 <HID_Device_USBTask+0x22>
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    206c:	6d b6       	in	r6, 0x3d	; 61
    206e:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    2070:	80 91 f0 01 	lds	r24, 0x01F0
    2074:	84 30       	cpi	r24, 0x04	; 4
    2076:	09 f0       	breq	.+2      	; 0x207a <HID_Device_USBTask+0x36>
    2078:	9a c0       	rjmp	.+308    	; 0x21ae <__stack+0xaf>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    207a:	80 91 e4 00 	lds	r24, 0x00E4
    207e:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    2082:	f7 01       	movw	r30, r14
    2084:	22 85       	ldd	r18, Z+10	; 0x0a
    2086:	33 85       	ldd	r19, Z+11	; 0x0b
    2088:	28 17       	cp	r18, r24
    208a:	39 07       	cpc	r19, r25
    208c:	09 f4       	brne	.+2      	; 0x2090 <HID_Device_USBTask+0x4c>
    208e:	8f c0       	rjmp	.+286    	; 0x21ae <__stack+0xaf>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2090:	81 81       	ldd	r24, Z+1	; 0x01
    2092:	8f 70       	andi	r24, 0x0F	; 15
    2094:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2098:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    209c:	85 ff       	sbrs	r24, 5
    209e:	87 c0       	rjmp	.+270    	; 0x21ae <__stack+0xaf>
    20a0:	8d b6       	in	r8, 0x3d	; 61
    20a2:	57 2c       	mov	r5, r7
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    20a4:	40 85       	ldd	r20, Z+8	; 0x08
    20a6:	cd b6       	in	r12, 0x3d	; 61
    20a8:	de b6       	in	r13, 0x3e	; 62
    20aa:	c4 1a       	sub	r12, r20
    20ac:	d1 08       	sbc	r13, r1
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de be       	out	0x3e, r13	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd be       	out	0x3d, r12	; 61
    20b8:	0d b7       	in	r16, 0x3d	; 61
    20ba:	1e b7       	in	r17, 0x3e	; 62
    20bc:	0f 5f       	subi	r16, 0xFF	; 255
    20be:	1f 4f       	sbci	r17, 0xFF	; 255
    20c0:	b0 2e       	mov	r11, r16
    20c2:	a1 2e       	mov	r10, r17
		uint8_t  ReportID     = 0;
    20c4:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    20c6:	1b 82       	std	Y+3, r1	; 0x03
    20c8:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    20ca:	c8 01       	movw	r24, r16
    20cc:	60 e0       	ldi	r22, 0x00	; 0
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	68 d2       	rcall	.+1232   	; 0x25a4 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    20d4:	c7 01       	movw	r24, r14
    20d6:	be 01       	movw	r22, r28
    20d8:	6f 5f       	subi	r22, 0xFF	; 255
    20da:	7f 4f       	sbci	r23, 0xFF	; 255
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	98 01       	movw	r18, r16
    20e0:	8e 01       	movw	r16, r28
    20e2:	0e 5f       	subi	r16, 0xFE	; 254
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	0e 94 2e 02 	call	0x45c	; 0x45c <CALLBACK_HID_Device_CreateHIDReport>
    20ea:	98 2e       	mov	r9, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    20ec:	f7 01       	movw	r30, r14
    20ee:	84 85       	ldd	r24, Z+12	; 0x0c
    20f0:	95 85       	ldd	r25, Z+13	; 0x0d
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	59 f0       	breq	.+22     	; 0x210c <__stack+0xd>
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	26 85       	ldd	r18, Z+14	; 0x0e
    20fc:	37 85       	ldd	r19, Z+15	; 0x0f
    20fe:	21 15       	cp	r18, r1
    2100:	31 05       	cpc	r19, r1
    2102:	11 f0       	breq	.+4      	; 0x2108 <__stack+0x9>
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    2108:	6c 01       	movw	r12, r24
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <__stack+0x11>
    210c:	cc 24       	eor	r12, r12
    210e:	dd 24       	eor	r13, r13

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2110:	f7 01       	movw	r30, r14
    2112:	06 81       	ldd	r16, Z+6	; 0x06
    2114:	17 81       	ldd	r17, Z+7	; 0x07
    2116:	01 15       	cp	r16, r1
    2118:	11 05       	cpc	r17, r1
    211a:	a1 f0       	breq	.+40     	; 0x2144 <__stack+0x45>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    211c:	4a 81       	ldd	r20, Y+2	; 0x02
    211e:	5b 81       	ldd	r21, Y+3	; 0x03
    2120:	8b 2d       	mov	r24, r11
    2122:	9a 2d       	mov	r25, r10
    2124:	b8 01       	movw	r22, r16
    2126:	28 d2       	rcall	.+1104   	; 0x2578 <memcmp>
    2128:	21 e0       	ldi	r18, 0x01	; 1
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	09 f4       	brne	.+2      	; 0x2130 <__stack+0x31>
    212e:	20 e0       	ldi	r18, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    2130:	f7 01       	movw	r30, r14
    2132:	40 85       	ldd	r20, Z+8	; 0x08
    2134:	c8 01       	movw	r24, r16
    2136:	6b 2d       	mov	r22, r11
    2138:	7a 2d       	mov	r23, r10
    213a:	50 e0       	ldi	r21, 0x00	; 0
    213c:	2c 83       	std	Y+4, r18	; 0x04
    213e:	29 d2       	rcall	.+1106   	; 0x2592 <memcpy>
    2140:	2c 81       	ldd	r18, Y+4	; 0x04
    2142:	01 c0       	rjmp	.+2      	; 0x2146 <__stack+0x47>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    2144:	20 e0       	ldi	r18, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	9b 81       	ldd	r25, Y+3	; 0x03
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	11 f1       	breq	.+68     	; 0x2192 <__stack+0x93>
    214e:	99 20       	and	r9, r9
    2150:	29 f4       	brne	.+10     	; 0x215c <__stack+0x5d>
    2152:	22 23       	and	r18, r18
    2154:	19 f4       	brne	.+6      	; 0x215c <__stack+0x5d>
    2156:	c1 14       	cp	r12, r1
    2158:	d1 04       	cpc	r13, r1
    215a:	d9 f0       	breq	.+54     	; 0x2192 <__stack+0x93>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    215c:	f7 01       	movw	r30, r14
    215e:	84 85       	ldd	r24, Z+12	; 0x0c
    2160:	95 85       	ldd	r25, Z+13	; 0x0d
    2162:	97 87       	std	Z+15, r25	; 0x0f
    2164:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2166:	81 81       	ldd	r24, Z+1	; 0x01
    2168:	8f 70       	andi	r24, 0x0F	; 15
    216a:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	88 23       	and	r24, r24
    2172:	11 f0       	breq	.+4      	; 0x2178 <__stack+0x79>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2174:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    2178:	6a 81       	ldd	r22, Y+2	; 0x02
    217a:	7b 81       	ldd	r23, Y+3	; 0x03
    217c:	8b 2d       	mov	r24, r11
    217e:	9a 2d       	mov	r25, r10
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	0e 94 9d 03 	call	0x73a	; 0x73a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2188:	80 91 e8 00 	lds	r24, 0x00E8
    218c:	8e 77       	andi	r24, 0x7E	; 126
    218e:	80 93 e8 00 	sts	0x00E8, r24
    2192:	80 91 e4 00 	lds	r24, 0x00E4
    2196:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    219a:	f7 01       	movw	r30, r14
    219c:	93 87       	std	Z+11, r25	; 0x0b
    219e:	82 87       	std	Z+10, r24	; 0x0a
    21a0:	88 2d       	mov	r24, r8
    21a2:	95 2d       	mov	r25, r5
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	9e bf       	out	0x3e, r25	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	8d bf       	out	0x3d, r24	; 61
	}
}
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	7e be       	out	0x3e, r7	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	6d be       	out	0x3d, r6	; 61
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	ff 90       	pop	r15
    21ca:	ef 90       	pop	r14
    21cc:	df 90       	pop	r13
    21ce:	cf 90       	pop	r12
    21d0:	bf 90       	pop	r11
    21d2:	af 90       	pop	r10
    21d4:	9f 90       	pop	r9
    21d6:	8f 90       	pop	r8
    21d8:	7f 90       	pop	r7
    21da:	6f 90       	pop	r6
    21dc:	5f 90       	pop	r5
    21de:	08 95       	ret

000021e0 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    21e0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    21e2:	81 81       	ldd	r24, Z+1	; 0x01
    21e4:	84 30       	cpi	r24, 0x04	; 4
    21e6:	19 f4       	brne	.+6      	; 0x21ee <DCOMP_HID_Host_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    21e8:	85 81       	ldd	r24, Z+5	; 0x05
    21ea:	83 30       	cpi	r24, 0x03	; 3
    21ec:	11 f0       	breq	.+4      	; 0x21f2 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    21ee:	82 e0       	ldi	r24, 0x02	; 2
    21f0:	08 95       	ret
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
		  return DESCRIPTOR_SEARCH_Found;
    21f2:	80 e0       	ldi	r24, 0x00	; 0
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    21f4:	08 95       	ret

000021f6 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    21f6:	fc 01       	movw	r30, r24
    21f8:	81 81       	ldd	r24, Z+1	; 0x01
    21fa:	81 32       	cpi	r24, 0x21	; 33
    21fc:	21 f0       	breq	.+8      	; 0x2206 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    21fe:	84 30       	cpi	r24, 0x04	; 4
    2200:	21 f4       	brne	.+8      	; 0x220a <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    220a:	82 e0       	ldi	r24, 0x02	; 2
}
    220c:	08 95       	ret

0000220e <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    220e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    2210:	81 81       	ldd	r24, Z+1	; 0x01
    2212:	85 30       	cpi	r24, 0x05	; 5
    2214:	31 f4       	brne	.+12     	; 0x2222 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	0e 94 a8 08 	call	0x1150	; 0x1150 <Pipe_IsEndpointBound>
    221c:	88 23       	and	r24, r24
    221e:	19 f4       	brne	.+6      	; 0x2226 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x18>
    2220:	04 c0       	rjmp	.+8      	; 0x222a <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    2222:	84 30       	cpi	r24, 0x04	; 4
    2224:	21 f0       	breq	.+8      	; 0x222e <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x20>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    222e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    2230:	08 95       	ret

00002232 <HID_Host_ConfigurePipes>:
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    2232:	4f 92       	push	r4
    2234:	5f 92       	push	r5
    2236:	6f 92       	push	r6
    2238:	7f 92       	push	r7
    223a:	8f 92       	push	r8
    223c:	9f 92       	push	r9
    223e:	af 92       	push	r10
    2240:	bf 92       	push	r11
    2242:	cf 92       	push	r12
    2244:	df 92       	push	r13
    2246:	ef 92       	push	r14
    2248:	ff 92       	push	r15
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	00 d0       	rcall	.+0      	; 0x2254 <HID_Host_ConfigurePipes+0x22>
    2254:	00 d0       	rcall	.+0      	; 0x2256 <HID_Host_ConfigurePipes+0x24>
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	8c 01       	movw	r16, r24
    225c:	7a 83       	std	Y+2, r23	; 0x02
    225e:	69 83       	std	Y+1, r22	; 0x01
    2260:	5c 83       	std	Y+4, r21	; 0x04
    2262:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    2264:	0f 96       	adiw	r24, 0x0f	; 15
    2266:	fc 01       	movw	r30, r24
    2268:	88 e0       	ldi	r24, 0x08	; 8
    226a:	df 01       	movw	r26, r30
    226c:	1d 92       	st	X+, r1
    226e:	8a 95       	dec	r24
    2270:	e9 f7       	brne	.-6      	; 0x226c <HID_Host_ConfigurePipes+0x3a>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    2272:	eb 81       	ldd	r30, Y+3	; 0x03
    2274:	fc 81       	ldd	r31, Y+4	; 0x04
    2276:	81 81       	ldd	r24, Z+1	; 0x01
    2278:	82 30       	cpi	r24, 0x02	; 2
    227a:	09 f0       	breq	.+2      	; 0x227e <HID_Host_ConfigurePipes+0x4c>
    227c:	97 c0       	rjmp	.+302    	; 0x23ac <HID_Host_ConfigurePipes+0x17a>
    227e:	44 24       	eor	r4, r4
    2280:	55 24       	eor	r5, r5
    2282:	aa 24       	eor	r10, r10
    2284:	bb 24       	eor	r11, r11
    2286:	ee 24       	eor	r14, r14
    2288:	ff 24       	eor	r15, r15
    228a:	cc 24       	eor	r12, r12
    228c:	dd 24       	eor	r13, r13
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    228e:	93 e0       	ldi	r25, 0x03	; 3
    2290:	69 2e       	mov	r6, r25
    2292:	71 2c       	mov	r7, r1
    2294:	6c 0e       	add	r6, r28
    2296:	7d 1e       	adc	r7, r29
    2298:	4e 01       	movw	r8, r28
    229a:	08 94       	sec
    229c:	81 1c       	adc	r8, r1
    229e:	91 1c       	adc	r9, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    22a0:	a1 14       	cp	r10, r1
    22a2:	b1 04       	cpc	r11, r1
    22a4:	39 f0       	breq	.+14     	; 0x22b4 <HID_Host_ConfigurePipes+0x82>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    22a6:	c4 01       	movw	r24, r8
    22a8:	b3 01       	movw	r22, r6
    22aa:	47 e0       	ldi	r20, 0x07	; 7
    22ac:	51 e1       	ldi	r21, 0x11	; 17
    22ae:	43 da       	rcall	.-2938   	; 0x1736 <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    22b0:	88 23       	and	r24, r24
    22b2:	21 f1       	breq	.+72     	; 0x22fc <HID_Host_ConfigurePipes+0xca>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    22b4:	c1 14       	cp	r12, r1
    22b6:	d1 04       	cpc	r13, r1
    22b8:	79 f5       	brne	.+94     	; 0x2318 <HID_Host_ConfigurePipes+0xe6>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    22ba:	c4 01       	movw	r24, r8
    22bc:	b3 01       	movw	r22, r6
    22be:	40 ef       	ldi	r20, 0xF0	; 240
    22c0:	50 e1       	ldi	r21, 0x10	; 16
    22c2:	39 da       	rcall	.-2958   	; 0x1736 <USB_GetNextDescriptorComp>
    22c4:	88 23       	and	r24, r24
    22c6:	09 f0       	breq	.+2      	; 0x22ca <HID_Host_ConfigurePipes+0x98>
    22c8:	73 c0       	rjmp	.+230    	; 0x23b0 <HID_Host_ConfigurePipes+0x17e>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    22ca:	ab 80       	ldd	r10, Y+3	; 0x03
    22cc:	bc 80       	ldd	r11, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    22ce:	f8 01       	movw	r30, r16
    22d0:	84 85       	ldd	r24, Z+12	; 0x0c
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    22d2:	88 23       	and	r24, r24
    22d4:	31 f0       	breq	.+12     	; 0x22e2 <HID_Host_ConfigurePipes+0xb0>
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    22d6:	d5 01       	movw	r26, r10
    22d8:	17 96       	adiw	r26, 0x07	; 7
    22da:	9c 91       	ld	r25, X
    22dc:	17 97       	sbiw	r26, 0x07	; 7
    22de:	98 17       	cp	r25, r24
    22e0:	61 f7       	brne	.-40     	; 0x22ba <HID_Host_ConfigurePipes+0x88>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    22e2:	c4 01       	movw	r24, r8
    22e4:	b3 01       	movw	r22, r6
    22e6:	4b ef       	ldi	r20, 0xFB	; 251
    22e8:	50 e1       	ldi	r21, 0x10	; 16
    22ea:	25 da       	rcall	.-2998   	; 0x1736 <USB_GetNextDescriptorComp>
    22ec:	88 23       	and	r24, r24
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <HID_Host_ConfigurePipes+0xc0>
    22f0:	5f c0       	rjmp	.+190    	; 0x23b0 <HID_Host_ConfigurePipes+0x17e>
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    22f2:	4b 80       	ldd	r4, Y+3	; 0x03
    22f4:	5c 80       	ldd	r5, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    22f6:	ee 24       	eor	r14, r14
    22f8:	ff 24       	eor	r15, r15
    22fa:	d2 cf       	rjmp	.-92     	; 0x22a0 <HID_Host_ConfigurePipes+0x6e>

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    22fc:	eb 81       	ldd	r30, Y+3	; 0x03
    22fe:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	87 ff       	sbrs	r24, 7
    2304:	02 c0       	rjmp	.+4      	; 0x230a <HID_Host_ConfigurePipes+0xd8>
		  DataINEndpoint  = EndpointData;
    2306:	6f 01       	movw	r12, r30
    2308:	01 c0       	rjmp	.+2      	; 0x230c <HID_Host_ConfigurePipes+0xda>
		else
		  DataOUTEndpoint = EndpointData;
    230a:	7f 01       	movw	r14, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    230c:	c1 14       	cp	r12, r1
    230e:	d1 04       	cpc	r13, r1
    2310:	39 f2       	breq	.-114    	; 0x22a0 <HID_Host_ConfigurePipes+0x6e>
    2312:	e1 14       	cp	r14, r1
    2314:	f1 04       	cpc	r15, r1
    2316:	21 f2       	breq	.-120    	; 0x22a0 <HID_Host_ConfigurePipes+0x6e>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    2318:	f6 01       	movw	r30, r12
    231a:	84 81       	ldd	r24, Z+4	; 0x04
    231c:	95 81       	ldd	r25, Z+5	; 0x05
    231e:	d8 01       	movw	r26, r16
    2320:	12 96       	adiw	r26, 0x02	; 2
    2322:	9c 93       	st	X, r25
    2324:	8e 93       	st	-X, r24
    2326:	11 97       	sbiw	r26, 0x01	; 1
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	13 96       	adiw	r26, 0x03	; 3
    232c:	8c 93       	st	X, r24
    232e:	13 97       	sbiw	r26, 0x03	; 3
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    2330:	83 e0       	ldi	r24, 0x03	; 3
    2332:	c8 2e       	mov	r12, r24
    2334:	14 96       	adiw	r26, 0x04	; 4
    2336:	cc 92       	st	X, r12

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    2338:	c8 01       	movw	r24, r16
    233a:	61 e0       	ldi	r22, 0x01	; 1
    233c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <Pipe_ConfigurePipeTable>
    2340:	88 23       	and	r24, r24
    2342:	c1 f1       	breq	.+112    	; 0x23b4 <HID_Host_ConfigurePipes+0x182>
	  return false;

	if (DataOUTEndpoint)
    2344:	e1 14       	cp	r14, r1
    2346:	f1 04       	cpc	r15, r1
    2348:	a9 f0       	breq	.+42     	; 0x2374 <HID_Host_ConfigurePipes+0x142>
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    234a:	f7 01       	movw	r30, r14
    234c:	84 81       	ldd	r24, Z+4	; 0x04
    234e:	95 81       	ldd	r25, Z+5	; 0x05
    2350:	d8 01       	movw	r26, r16
    2352:	18 96       	adiw	r26, 0x08	; 8
    2354:	9c 93       	st	X, r25
    2356:	8e 93       	st	-X, r24
    2358:	17 97       	sbiw	r26, 0x07	; 7
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	19 96       	adiw	r26, 0x09	; 9
    235e:	8c 93       	st	X, r24
    2360:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    2362:	1a 96       	adiw	r26, 0x0a	; 10
    2364:	cc 92       	st	X, r12

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    2366:	c8 01       	movw	r24, r16
    2368:	06 96       	adiw	r24, 0x06	; 6
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <Pipe_ConfigurePipeTable>
    2370:	88 23       	and	r24, r24
    2372:	01 f1       	breq	.+64     	; 0x23b4 <HID_Host_ConfigurePipes+0x182>
		  return false;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    2374:	f5 01       	movw	r30, r10
    2376:	82 81       	ldd	r24, Z+2	; 0x02
    2378:	d8 01       	movw	r26, r16
    237a:	50 96       	adiw	r26, 0x10	; 16
    237c:	8c 93       	st	X, r24
    237e:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    2380:	f2 01       	movw	r30, r4
    2382:	87 81       	ldd	r24, Z+7	; 0x07
    2384:	90 85       	ldd	r25, Z+8	; 0x08
    2386:	55 96       	adiw	r26, 0x15	; 21
    2388:	9c 93       	st	X, r25
    238a:	8e 93       	st	-X, r24
    238c:	54 97       	sbiw	r26, 0x14	; 20
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	d5 01       	movw	r26, r10
    2392:	16 96       	adiw	r26, 0x06	; 6
    2394:	9c 91       	ld	r25, X
    2396:	16 97       	sbiw	r26, 0x06	; 6
    2398:	99 23       	and	r25, r25
    239a:	09 f4       	brne	.+2      	; 0x239e <HID_Host_ConfigurePipes+0x16c>
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	f8 01       	movw	r30, r16
    23a0:	81 8b       	std	Z+17, r24	; 0x11
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    23a2:	88 e0       	ldi	r24, 0x08	; 8
    23a4:	86 8b       	std	Z+22, r24	; 0x16
	HIDInterfaceInfo->State.IsActive             = true;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	87 87       	std	Z+15, r24	; 0x0f
    23aa:	04 c0       	rjmp	.+8      	; 0x23b4 <HID_Host_ConfigurePipes+0x182>
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	03 c0       	rjmp	.+6      	; 0x23b6 <HID_Host_ConfigurePipes+0x184>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
    23b0:	82 e0       	ldi	r24, 0x02	; 2
    23b2:	01 c0       	rjmp	.+2      	; 0x23b6 <HID_Host_ConfigurePipes+0x184>
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return false;
    23b4:	80 e0       	ldi	r24, 0x00	; 0
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	ff 90       	pop	r15
    23c8:	ef 90       	pop	r14
    23ca:	df 90       	pop	r13
    23cc:	cf 90       	pop	r12
    23ce:	bf 90       	pop	r11
    23d0:	af 90       	pop	r10
    23d2:	9f 90       	pop	r9
    23d4:	8f 90       	pop	r8
    23d6:	7f 90       	pop	r7
    23d8:	6f 90       	pop	r6
    23da:	5f 90       	pop	r5
    23dc:	4f 90       	pop	r4
    23de:	08 95       	ret

000023e0 <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    23e0:	ef 92       	push	r14
    23e2:	ff 92       	push	r15
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    23ea:	80 91 f9 01 	lds	r24, 0x01F9
    23ee:	8b 30       	cpi	r24, 0x0B	; 11
    23f0:	e9 f5       	brne	.+122    	; 0x246c <HID_Host_ReceiveReport+0x8c>
    23f2:	87 85       	ldd	r24, Z+15	; 0x0f
    23f4:	88 23       	and	r24, r24
    23f6:	d1 f1       	breq	.+116    	; 0x246c <HID_Host_ReceiveReport+0x8c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    23f8:	80 81       	ld	r24, Z
    23fa:	8f 70       	andi	r24, 0x0F	; 15
    23fc:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    2400:	80 91 a9 00 	lds	r24, 0x00A9
    2404:	8f 7b       	andi	r24, 0xBF	; 191
    2406:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    240a:	e6 2e       	mov	r14, r22
    240c:	e7 01       	movw	r28, r14
    240e:	7e 01       	movw	r14, r28
    2410:	f7 2e       	mov	r15, r23
    2412:	e7 01       	movw	r28, r14

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    2414:	83 89       	ldd	r24, Z+19	; 0x13
    2416:	88 23       	and	r24, r24
    2418:	99 f4       	brne	.+38     	; 0x2440 <HID_Host_ReceiveReport+0x60>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    241a:	a5 85       	ldd	r26, Z+13	; 0x0d
    241c:	b6 85       	ldd	r27, Z+14	; 0x0e
    241e:	a8 52       	subi	r26, 0x28	; 40
    2420:	bc 4f       	sbci	r27, 0xFC	; 252
    2422:	8c 91       	ld	r24, X
    2424:	88 23       	and	r24, r24
    2426:	21 f0       	breq	.+8      	; 0x2430 <HID_Host_ReceiveReport+0x50>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    2428:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    242c:	69 93       	st	Y+, r22
    242e:	01 c0       	rjmp	.+2      	; 0x2432 <HID_Host_ReceiveReport+0x52>
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    2430:	60 e0       	ldi	r22, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    2432:	85 85       	ldd	r24, Z+13	; 0x0d
    2434:	96 85       	ldd	r25, Z+14	; 0x0e
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	0e 94 71 03 	call	0x6e2	; 0x6e2 <USB_GetHIDReportSize>
    243c:	bc 01       	movw	r22, r24
    243e:	04 c0       	rjmp	.+8      	; 0x2448 <HID_Host_ReceiveReport+0x68>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    2440:	60 91 f6 00 	lds	r22, 0x00F6
    2444:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    2448:	ce 01       	movw	r24, r28
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	50 e0       	ldi	r21, 0x00	; 0
    244e:	0e 94 a1 07 	call	0xf42	; 0xf42 <Pipe_Read_Stream_LE>
    2452:	88 23       	and	r24, r24
    2454:	61 f4       	brne	.+24     	; 0x246e <HID_Host_ReceiveReport+0x8e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    2456:	90 91 a6 00 	lds	r25, 0x00A6
    245a:	9e 77       	andi	r25, 0x7E	; 126
    245c:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    2460:	90 91 a9 00 	lds	r25, 0x00A9
    2464:	90 64       	ori	r25, 0x40	; 64
    2466:	90 93 a9 00 	sts	0x00A9, r25
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    246a:	01 c0       	rjmp	.+2      	; 0x246e <HID_Host_ReceiveReport+0x8e>

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    246c:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	ff 90       	pop	r15
    2474:	ef 90       	pop	r14
    2476:	08 95       	ret

00002478 <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    2478:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    247a:	80 91 f9 01 	lds	r24, 0x01F9
    247e:	8b 30       	cpi	r24, 0x0B	; 11
    2480:	a9 f4       	brne	.+42     	; 0x24ac <HID_Host_IsReportReceived+0x34>
    2482:	87 85       	ldd	r24, Z+15	; 0x0f
    2484:	88 23       	and	r24, r24
    2486:	a1 f0       	breq	.+40     	; 0x24b0 <HID_Host_IsReportReceived+0x38>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    2488:	80 81       	ld	r24, Z
    248a:	8f 70       	andi	r24, 0x0F	; 15
    248c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    2490:	80 91 a9 00 	lds	r24, 0x00A9
    2494:	8f 7b       	andi	r24, 0xBF	; 191
    2496:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    249a:	80 91 a6 00 	lds	r24, 0x00A6
    249e:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    24a0:	90 91 a9 00 	lds	r25, 0x00A9
    24a4:	90 64       	ori	r25, 0x40	; 64
    24a6:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    24aa:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	08 95       	ret
    24b0:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    24b2:	08 95       	ret

000024b4 <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    24ba:	89 89       	ldd	r24, Y+17	; 0x11
    24bc:	88 23       	and	r24, r24
    24be:	f9 f0       	breq	.+62     	; 0x24fe <HID_Host_SetBootProtocol+0x4a>
	  return HID_ERROR_LOGICAL;

	USB_ControlRequest = (USB_Request_Header_t)
    24c0:	88 89       	ldd	r24, Y+16	; 0x10
    24c2:	91 e2       	ldi	r25, 0x21	; 33
    24c4:	90 93 f1 01 	sts	0x01F1, r25
    24c8:	9b e0       	ldi	r25, 0x0B	; 11
    24ca:	90 93 f2 01 	sts	0x01F2, r25
    24ce:	10 92 f4 01 	sts	0x01F4, r1
    24d2:	10 92 f3 01 	sts	0x01F3, r1
    24d6:	80 93 f5 01 	sts	0x01F5, r24
    24da:	10 92 f6 01 	sts	0x01F6, r1
    24de:	10 92 f8 01 	sts	0x01F8, r1
    24e2:	10 92 f7 01 	sts	0x01F7, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    24e6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	f8 da       	rcall	.-2576   	; 0x1ae0 <USB_Host_SendControlRequest>
    24f0:	88 23       	and	r24, r24
    24f2:	31 f4       	brne	.+12     	; 0x2500 <HID_Host_SetBootProtocol+0x4c>
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    24f4:	98 e0       	ldi	r25, 0x08	; 8
    24f6:	9e 8b       	std	Y+22, r25	; 0x16
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    24f8:	91 e0       	ldi	r25, 0x01	; 1
    24fa:	9b 8b       	std	Y+19, r25	; 0x13

	return HOST_SENDCONTROL_Successful;
    24fc:	01 c0       	rjmp	.+2      	; 0x2500 <HID_Host_SetBootProtocol+0x4c>
uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
	  return HID_ERROR_LOGICAL;
    24fe:	80 e8       	ldi	r24, 0x80	; 128

	HIDInterfaceInfo->State.LargestReportSize = 8;
	HIDInterfaceInfo->State.UsingBootProtocol = true;

	return HOST_SENDCONTROL_Successful;
}
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	08 95       	ret

00002506 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    2506:	90 91 c8 00 	lds	r25, 0x00C8
    250a:	95 ff       	sbrs	r25, 5
    250c:	fc cf       	rjmp	.-8      	; 0x2506 <Serial_putchar>
				UDR1 = DataByte;
    250e:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	08 95       	ret

00002518 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    2518:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    251c:	87 ff       	sbrs	r24, 7
    251e:	08 c0       	rjmp	.+16     	; 0x2530 <Serial_getchar+0x18>
    2520:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    2524:	87 ff       	sbrs	r24, 7
    2526:	07 c0       	rjmp	.+14     	; 0x2536 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    2528:	20 91 ce 00 	lds	r18, 0x00CE
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	05 c0       	rjmp	.+10     	; 0x253a <Serial_getchar+0x22>
	  return _FDEV_EOF;
    2530:	2e ef       	ldi	r18, 0xFE	; 254
    2532:	3f ef       	ldi	r19, 0xFF	; 255
    2534:	02 c0       	rjmp	.+4      	; 0x253a <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    2536:	2f ef       	ldi	r18, 0xFF	; 255
    2538:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    253a:	c9 01       	movw	r24, r18
    253c:	08 95       	ret

0000253e <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    253e:	fc 01       	movw	r30, r24
	if (!(Stream))
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	51 f4       	brne	.+20     	; 0x2558 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    2544:	ea ef       	ldi	r30, 0xFA	; 250
    2546:	f1 e0       	ldi	r31, 0x01	; 1
    2548:	f0 93 09 02 	sts	0x0209, r31
    254c:	e0 93 08 02 	sts	0x0208, r30
		stdout = Stream;
    2550:	f0 93 0b 02 	sts	0x020B, r31
    2554:	e0 93 0a 02 	sts	0x020A, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    2558:	8e e0       	ldi	r24, 0x0E	; 14
    255a:	df 01       	movw	r26, r30
    255c:	1d 92       	st	X+, r1
    255e:	8a 95       	dec	r24
    2560:	e9 f7       	brne	.-6      	; 0x255c <Serial_CreateStream+0x1e>
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	83 83       	std	Z+3, r24	; 0x03
    2566:	83 e8       	ldi	r24, 0x83	; 131
    2568:	92 e1       	ldi	r25, 0x12	; 18
    256a:	91 87       	std	Z+9, r25	; 0x09
    256c:	80 87       	std	Z+8, r24	; 0x08
    256e:	8c e8       	ldi	r24, 0x8C	; 140
    2570:	92 e1       	ldi	r25, 0x12	; 18
    2572:	93 87       	std	Z+11, r25	; 0x0b
    2574:	82 87       	std	Z+10, r24	; 0x0a
}
    2576:	08 95       	ret

00002578 <memcmp>:
    2578:	fb 01       	movw	r30, r22
    257a:	dc 01       	movw	r26, r24
    257c:	04 c0       	rjmp	.+8      	; 0x2586 <memcmp+0xe>
    257e:	8d 91       	ld	r24, X+
    2580:	01 90       	ld	r0, Z+
    2582:	80 19       	sub	r24, r0
    2584:	21 f4       	brne	.+8      	; 0x258e <memcmp+0x16>
    2586:	41 50       	subi	r20, 0x01	; 1
    2588:	50 40       	sbci	r21, 0x00	; 0
    258a:	c8 f7       	brcc	.-14     	; 0x257e <memcmp+0x6>
    258c:	88 1b       	sub	r24, r24
    258e:	99 0b       	sbc	r25, r25
    2590:	08 95       	ret

00002592 <memcpy>:
    2592:	fb 01       	movw	r30, r22
    2594:	dc 01       	movw	r26, r24
    2596:	02 c0       	rjmp	.+4      	; 0x259c <memcpy+0xa>
    2598:	01 90       	ld	r0, Z+
    259a:	0d 92       	st	X+, r0
    259c:	41 50       	subi	r20, 0x01	; 1
    259e:	50 40       	sbci	r21, 0x00	; 0
    25a0:	d8 f7       	brcc	.-10     	; 0x2598 <memcpy+0x6>
    25a2:	08 95       	ret

000025a4 <memset>:
    25a4:	dc 01       	movw	r26, r24
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <memset+0x6>
    25a8:	6d 93       	st	X+, r22
    25aa:	41 50       	subi	r20, 0x01	; 1
    25ac:	50 40       	sbci	r21, 0x00	; 0
    25ae:	e0 f7       	brcc	.-8      	; 0x25a8 <memset+0x4>
    25b0:	08 95       	ret

000025b2 <printf_P>:
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	fe 01       	movw	r30, r28
    25bc:	35 96       	adiw	r30, 0x05	; 5
    25be:	61 91       	ld	r22, Z+
    25c0:	71 91       	ld	r23, Z+
    25c2:	80 91 0a 02 	lds	r24, 0x020A
    25c6:	90 91 0b 02 	lds	r25, 0x020B
    25ca:	dc 01       	movw	r26, r24
    25cc:	13 96       	adiw	r26, 0x03	; 3
    25ce:	2c 91       	ld	r18, X
    25d0:	13 97       	sbiw	r26, 0x03	; 3
    25d2:	28 60       	ori	r18, 0x08	; 8
    25d4:	13 96       	adiw	r26, 0x03	; 3
    25d6:	2c 93       	st	X, r18
    25d8:	af 01       	movw	r20, r30
    25da:	79 d0       	rcall	.+242    	; 0x26ce <vfprintf>
    25dc:	e0 91 0a 02 	lds	r30, 0x020A
    25e0:	f0 91 0b 02 	lds	r31, 0x020B
    25e4:	23 81       	ldd	r18, Z+3	; 0x03
    25e6:	27 7f       	andi	r18, 0xF7	; 247
    25e8:	23 83       	std	Z+3, r18	; 0x03
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <puts>:
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	8c 01       	movw	r16, r24
    25fe:	e0 91 0a 02 	lds	r30, 0x020A
    2602:	f0 91 0b 02 	lds	r31, 0x020B
    2606:	83 81       	ldd	r24, Z+3	; 0x03
    2608:	81 ff       	sbrs	r24, 1
    260a:	1f c0       	rjmp	.+62     	; 0x264a <puts+0x5a>
    260c:	c0 e0       	ldi	r28, 0x00	; 0
    260e:	d0 e0       	ldi	r29, 0x00	; 0
    2610:	0a c0       	rjmp	.+20     	; 0x2626 <puts+0x36>
    2612:	db 01       	movw	r26, r22
    2614:	18 96       	adiw	r26, 0x08	; 8
    2616:	ed 91       	ld	r30, X+
    2618:	fc 91       	ld	r31, X
    261a:	19 97       	sbiw	r26, 0x09	; 9
    261c:	09 95       	icall
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	11 f0       	breq	.+4      	; 0x2626 <puts+0x36>
    2622:	cf ef       	ldi	r28, 0xFF	; 255
    2624:	df ef       	ldi	r29, 0xFF	; 255
    2626:	f8 01       	movw	r30, r16
    2628:	81 91       	ld	r24, Z+
    262a:	8f 01       	movw	r16, r30
    262c:	60 91 0a 02 	lds	r22, 0x020A
    2630:	70 91 0b 02 	lds	r23, 0x020B
    2634:	88 23       	and	r24, r24
    2636:	69 f7       	brne	.-38     	; 0x2612 <puts+0x22>
    2638:	db 01       	movw	r26, r22
    263a:	18 96       	adiw	r26, 0x08	; 8
    263c:	ed 91       	ld	r30, X+
    263e:	fc 91       	ld	r31, X
    2640:	19 97       	sbiw	r26, 0x09	; 9
    2642:	8a e0       	ldi	r24, 0x0A	; 10
    2644:	09 95       	icall
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	11 f0       	breq	.+4      	; 0x264e <puts+0x5e>
    264a:	cf ef       	ldi	r28, 0xFF	; 255
    264c:	df ef       	ldi	r29, 0xFF	; 255
    264e:	ce 01       	movw	r24, r28
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	1f 91       	pop	r17
    2656:	0f 91       	pop	r16
    2658:	ff 90       	pop	r15
    265a:	ef 90       	pop	r14
    265c:	08 95       	ret

0000265e <puts_P>:
    265e:	ef 92       	push	r14
    2660:	ff 92       	push	r15
    2662:	0f 93       	push	r16
    2664:	1f 93       	push	r17
    2666:	cf 93       	push	r28
    2668:	df 93       	push	r29
    266a:	8c 01       	movw	r16, r24
    266c:	e0 91 0a 02 	lds	r30, 0x020A
    2670:	f0 91 0b 02 	lds	r31, 0x020B
    2674:	83 81       	ldd	r24, Z+3	; 0x03
    2676:	81 ff       	sbrs	r24, 1
    2678:	20 c0       	rjmp	.+64     	; 0x26ba <puts_P+0x5c>
    267a:	c0 e0       	ldi	r28, 0x00	; 0
    267c:	d0 e0       	ldi	r29, 0x00	; 0
    267e:	0c c0       	rjmp	.+24     	; 0x2698 <puts_P+0x3a>
    2680:	db 01       	movw	r26, r22
    2682:	18 96       	adiw	r26, 0x08	; 8
    2684:	ed 91       	ld	r30, X+
    2686:	fc 91       	ld	r31, X
    2688:	19 97       	sbiw	r26, 0x09	; 9
    268a:	09 95       	icall
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	11 f0       	breq	.+4      	; 0x2694 <puts_P+0x36>
    2690:	cf ef       	ldi	r28, 0xFF	; 255
    2692:	df ef       	ldi	r29, 0xFF	; 255
    2694:	0f 5f       	subi	r16, 0xFF	; 255
    2696:	1f 4f       	sbci	r17, 0xFF	; 255
    2698:	f8 01       	movw	r30, r16
    269a:	84 91       	lpm	r24, Z+
    269c:	60 91 0a 02 	lds	r22, 0x020A
    26a0:	70 91 0b 02 	lds	r23, 0x020B
    26a4:	88 23       	and	r24, r24
    26a6:	61 f7       	brne	.-40     	; 0x2680 <puts_P+0x22>
    26a8:	db 01       	movw	r26, r22
    26aa:	18 96       	adiw	r26, 0x08	; 8
    26ac:	ed 91       	ld	r30, X+
    26ae:	fc 91       	ld	r31, X
    26b0:	19 97       	sbiw	r26, 0x09	; 9
    26b2:	8a e0       	ldi	r24, 0x0A	; 10
    26b4:	09 95       	icall
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	11 f0       	breq	.+4      	; 0x26be <puts_P+0x60>
    26ba:	cf ef       	ldi	r28, 0xFF	; 255
    26bc:	df ef       	ldi	r29, 0xFF	; 255
    26be:	ce 01       	movw	r24, r28
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	1f 91       	pop	r17
    26c6:	0f 91       	pop	r16
    26c8:	ff 90       	pop	r15
    26ca:	ef 90       	pop	r14
    26cc:	08 95       	ret

000026ce <vfprintf>:
    26ce:	2f 92       	push	r2
    26d0:	3f 92       	push	r3
    26d2:	4f 92       	push	r4
    26d4:	5f 92       	push	r5
    26d6:	6f 92       	push	r6
    26d8:	7f 92       	push	r7
    26da:	8f 92       	push	r8
    26dc:	9f 92       	push	r9
    26de:	af 92       	push	r10
    26e0:	bf 92       	push	r11
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	2c 97       	sbiw	r28, 0x0c	; 12
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	6c 01       	movw	r12, r24
    2704:	1b 01       	movw	r2, r22
    2706:	8a 01       	movw	r16, r20
    2708:	fc 01       	movw	r30, r24
    270a:	17 82       	std	Z+7, r1	; 0x07
    270c:	16 82       	std	Z+6, r1	; 0x06
    270e:	83 81       	ldd	r24, Z+3	; 0x03
    2710:	81 ff       	sbrs	r24, 1
    2712:	c4 c1       	rjmp	.+904    	; 0x2a9c <vfprintf+0x3ce>
    2714:	2e 01       	movw	r4, r28
    2716:	08 94       	sec
    2718:	41 1c       	adc	r4, r1
    271a:	51 1c       	adc	r5, r1
    271c:	f6 01       	movw	r30, r12
    271e:	93 81       	ldd	r25, Z+3	; 0x03
    2720:	f1 01       	movw	r30, r2
    2722:	93 fd       	sbrc	r25, 3
    2724:	85 91       	lpm	r24, Z+
    2726:	93 ff       	sbrs	r25, 3
    2728:	81 91       	ld	r24, Z+
    272a:	1f 01       	movw	r2, r30
    272c:	88 23       	and	r24, r24
    272e:	09 f4       	brne	.+2      	; 0x2732 <vfprintf+0x64>
    2730:	b1 c1       	rjmp	.+866    	; 0x2a94 <vfprintf+0x3c6>
    2732:	85 32       	cpi	r24, 0x25	; 37
    2734:	39 f4       	brne	.+14     	; 0x2744 <vfprintf+0x76>
    2736:	93 fd       	sbrc	r25, 3
    2738:	85 91       	lpm	r24, Z+
    273a:	93 ff       	sbrs	r25, 3
    273c:	81 91       	ld	r24, Z+
    273e:	1f 01       	movw	r2, r30
    2740:	85 32       	cpi	r24, 0x25	; 37
    2742:	21 f4       	brne	.+8      	; 0x274c <vfprintf+0x7e>
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	b6 01       	movw	r22, r12
    2748:	db d1       	rcall	.+950    	; 0x2b00 <fputc>
    274a:	e8 cf       	rjmp	.-48     	; 0x271c <vfprintf+0x4e>
    274c:	ee 24       	eor	r14, r14
    274e:	ff 24       	eor	r15, r15
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	20 32       	cpi	r18, 0x20	; 32
    2754:	b0 f4       	brcc	.+44     	; 0x2782 <vfprintf+0xb4>
    2756:	8b 32       	cpi	r24, 0x2B	; 43
    2758:	69 f0       	breq	.+26     	; 0x2774 <vfprintf+0xa6>
    275a:	8c 32       	cpi	r24, 0x2C	; 44
    275c:	28 f4       	brcc	.+10     	; 0x2768 <vfprintf+0x9a>
    275e:	80 32       	cpi	r24, 0x20	; 32
    2760:	51 f0       	breq	.+20     	; 0x2776 <vfprintf+0xa8>
    2762:	83 32       	cpi	r24, 0x23	; 35
    2764:	71 f4       	brne	.+28     	; 0x2782 <vfprintf+0xb4>
    2766:	0b c0       	rjmp	.+22     	; 0x277e <vfprintf+0xb0>
    2768:	8d 32       	cpi	r24, 0x2D	; 45
    276a:	39 f0       	breq	.+14     	; 0x277a <vfprintf+0xac>
    276c:	80 33       	cpi	r24, 0x30	; 48
    276e:	49 f4       	brne	.+18     	; 0x2782 <vfprintf+0xb4>
    2770:	21 60       	ori	r18, 0x01	; 1
    2772:	2c c0       	rjmp	.+88     	; 0x27cc <vfprintf+0xfe>
    2774:	22 60       	ori	r18, 0x02	; 2
    2776:	24 60       	ori	r18, 0x04	; 4
    2778:	29 c0       	rjmp	.+82     	; 0x27cc <vfprintf+0xfe>
    277a:	28 60       	ori	r18, 0x08	; 8
    277c:	27 c0       	rjmp	.+78     	; 0x27cc <vfprintf+0xfe>
    277e:	20 61       	ori	r18, 0x10	; 16
    2780:	25 c0       	rjmp	.+74     	; 0x27cc <vfprintf+0xfe>
    2782:	27 fd       	sbrc	r18, 7
    2784:	2c c0       	rjmp	.+88     	; 0x27de <vfprintf+0x110>
    2786:	38 2f       	mov	r19, r24
    2788:	30 53       	subi	r19, 0x30	; 48
    278a:	3a 30       	cpi	r19, 0x0A	; 10
    278c:	98 f4       	brcc	.+38     	; 0x27b4 <vfprintf+0xe6>
    278e:	26 ff       	sbrs	r18, 6
    2790:	08 c0       	rjmp	.+16     	; 0x27a2 <vfprintf+0xd4>
    2792:	8e 2d       	mov	r24, r14
    2794:	88 0f       	add	r24, r24
    2796:	e8 2e       	mov	r14, r24
    2798:	ee 0c       	add	r14, r14
    279a:	ee 0c       	add	r14, r14
    279c:	e8 0e       	add	r14, r24
    279e:	e3 0e       	add	r14, r19
    27a0:	15 c0       	rjmp	.+42     	; 0x27cc <vfprintf+0xfe>
    27a2:	8f 2d       	mov	r24, r15
    27a4:	88 0f       	add	r24, r24
    27a6:	f8 2e       	mov	r15, r24
    27a8:	ff 0c       	add	r15, r15
    27aa:	ff 0c       	add	r15, r15
    27ac:	f8 0e       	add	r15, r24
    27ae:	f3 0e       	add	r15, r19
    27b0:	20 62       	ori	r18, 0x20	; 32
    27b2:	0c c0       	rjmp	.+24     	; 0x27cc <vfprintf+0xfe>
    27b4:	8e 32       	cpi	r24, 0x2E	; 46
    27b6:	21 f4       	brne	.+8      	; 0x27c0 <vfprintf+0xf2>
    27b8:	26 fd       	sbrc	r18, 6
    27ba:	6c c1       	rjmp	.+728    	; 0x2a94 <vfprintf+0x3c6>
    27bc:	20 64       	ori	r18, 0x40	; 64
    27be:	06 c0       	rjmp	.+12     	; 0x27cc <vfprintf+0xfe>
    27c0:	8c 36       	cpi	r24, 0x6C	; 108
    27c2:	11 f4       	brne	.+4      	; 0x27c8 <vfprintf+0xfa>
    27c4:	20 68       	ori	r18, 0x80	; 128
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <vfprintf+0xfe>
    27c8:	88 36       	cpi	r24, 0x68	; 104
    27ca:	49 f4       	brne	.+18     	; 0x27de <vfprintf+0x110>
    27cc:	f1 01       	movw	r30, r2
    27ce:	93 fd       	sbrc	r25, 3
    27d0:	85 91       	lpm	r24, Z+
    27d2:	93 ff       	sbrs	r25, 3
    27d4:	81 91       	ld	r24, Z+
    27d6:	1f 01       	movw	r2, r30
    27d8:	88 23       	and	r24, r24
    27da:	09 f0       	breq	.+2      	; 0x27de <vfprintf+0x110>
    27dc:	ba cf       	rjmp	.-140    	; 0x2752 <vfprintf+0x84>
    27de:	98 2f       	mov	r25, r24
    27e0:	95 54       	subi	r25, 0x45	; 69
    27e2:	93 30       	cpi	r25, 0x03	; 3
    27e4:	18 f0       	brcs	.+6      	; 0x27ec <vfprintf+0x11e>
    27e6:	90 52       	subi	r25, 0x20	; 32
    27e8:	93 30       	cpi	r25, 0x03	; 3
    27ea:	28 f4       	brcc	.+10     	; 0x27f6 <vfprintf+0x128>
    27ec:	0c 5f       	subi	r16, 0xFC	; 252
    27ee:	1f 4f       	sbci	r17, 0xFF	; 255
    27f0:	ff e3       	ldi	r31, 0x3F	; 63
    27f2:	f9 83       	std	Y+1, r31	; 0x01
    27f4:	0d c0       	rjmp	.+26     	; 0x2810 <vfprintf+0x142>
    27f6:	83 36       	cpi	r24, 0x63	; 99
    27f8:	31 f0       	breq	.+12     	; 0x2806 <vfprintf+0x138>
    27fa:	83 37       	cpi	r24, 0x73	; 115
    27fc:	71 f0       	breq	.+28     	; 0x281a <vfprintf+0x14c>
    27fe:	83 35       	cpi	r24, 0x53	; 83
    2800:	09 f0       	breq	.+2      	; 0x2804 <vfprintf+0x136>
    2802:	5c c0       	rjmp	.+184    	; 0x28bc <vfprintf+0x1ee>
    2804:	21 c0       	rjmp	.+66     	; 0x2848 <vfprintf+0x17a>
    2806:	f8 01       	movw	r30, r16
    2808:	80 81       	ld	r24, Z
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	0e 5f       	subi	r16, 0xFE	; 254
    280e:	1f 4f       	sbci	r17, 0xFF	; 255
    2810:	42 01       	movw	r8, r4
    2812:	71 e0       	ldi	r23, 0x01	; 1
    2814:	a7 2e       	mov	r10, r23
    2816:	b1 2c       	mov	r11, r1
    2818:	15 c0       	rjmp	.+42     	; 0x2844 <vfprintf+0x176>
    281a:	62 e0       	ldi	r22, 0x02	; 2
    281c:	66 2e       	mov	r6, r22
    281e:	71 2c       	mov	r7, r1
    2820:	60 0e       	add	r6, r16
    2822:	71 1e       	adc	r7, r17
    2824:	f8 01       	movw	r30, r16
    2826:	80 80       	ld	r8, Z
    2828:	91 80       	ldd	r9, Z+1	; 0x01
    282a:	26 ff       	sbrs	r18, 6
    282c:	03 c0       	rjmp	.+6      	; 0x2834 <vfprintf+0x166>
    282e:	6e 2d       	mov	r22, r14
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <vfprintf+0x16a>
    2834:	6f ef       	ldi	r22, 0xFF	; 255
    2836:	7f ef       	ldi	r23, 0xFF	; 255
    2838:	c4 01       	movw	r24, r8
    283a:	2c 87       	std	Y+12, r18	; 0x0c
    283c:	56 d1       	rcall	.+684    	; 0x2aea <strnlen>
    283e:	5c 01       	movw	r10, r24
    2840:	83 01       	movw	r16, r6
    2842:	2c 85       	ldd	r18, Y+12	; 0x0c
    2844:	2f 77       	andi	r18, 0x7F	; 127
    2846:	16 c0       	rjmp	.+44     	; 0x2874 <vfprintf+0x1a6>
    2848:	52 e0       	ldi	r21, 0x02	; 2
    284a:	65 2e       	mov	r6, r21
    284c:	71 2c       	mov	r7, r1
    284e:	60 0e       	add	r6, r16
    2850:	71 1e       	adc	r7, r17
    2852:	f8 01       	movw	r30, r16
    2854:	80 80       	ld	r8, Z
    2856:	91 80       	ldd	r9, Z+1	; 0x01
    2858:	26 ff       	sbrs	r18, 6
    285a:	03 c0       	rjmp	.+6      	; 0x2862 <vfprintf+0x194>
    285c:	6e 2d       	mov	r22, r14
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <vfprintf+0x198>
    2862:	6f ef       	ldi	r22, 0xFF	; 255
    2864:	7f ef       	ldi	r23, 0xFF	; 255
    2866:	c4 01       	movw	r24, r8
    2868:	2c 87       	std	Y+12, r18	; 0x0c
    286a:	34 d1       	rcall	.+616    	; 0x2ad4 <strnlen_P>
    286c:	5c 01       	movw	r10, r24
    286e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2870:	20 68       	ori	r18, 0x80	; 128
    2872:	83 01       	movw	r16, r6
    2874:	23 fd       	sbrc	r18, 3
    2876:	1e c0       	rjmp	.+60     	; 0x28b4 <vfprintf+0x1e6>
    2878:	07 c0       	rjmp	.+14     	; 0x2888 <vfprintf+0x1ba>
    287a:	80 e2       	ldi	r24, 0x20	; 32
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	b6 01       	movw	r22, r12
    2880:	2c 87       	std	Y+12, r18	; 0x0c
    2882:	3e d1       	rcall	.+636    	; 0x2b00 <fputc>
    2884:	fa 94       	dec	r15
    2886:	2c 85       	ldd	r18, Y+12	; 0x0c
    2888:	8f 2d       	mov	r24, r15
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	a8 16       	cp	r10, r24
    288e:	b9 06       	cpc	r11, r25
    2890:	a0 f3       	brcs	.-24     	; 0x287a <vfprintf+0x1ac>
    2892:	10 c0       	rjmp	.+32     	; 0x28b4 <vfprintf+0x1e6>
    2894:	f4 01       	movw	r30, r8
    2896:	27 fd       	sbrc	r18, 7
    2898:	85 91       	lpm	r24, Z+
    289a:	27 ff       	sbrs	r18, 7
    289c:	81 91       	ld	r24, Z+
    289e:	4f 01       	movw	r8, r30
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	b6 01       	movw	r22, r12
    28a4:	2c 87       	std	Y+12, r18	; 0x0c
    28a6:	2c d1       	rcall	.+600    	; 0x2b00 <fputc>
    28a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    28aa:	f1 10       	cpse	r15, r1
    28ac:	fa 94       	dec	r15
    28ae:	08 94       	sec
    28b0:	a1 08       	sbc	r10, r1
    28b2:	b1 08       	sbc	r11, r1
    28b4:	a1 14       	cp	r10, r1
    28b6:	b1 04       	cpc	r11, r1
    28b8:	69 f7       	brne	.-38     	; 0x2894 <vfprintf+0x1c6>
    28ba:	e9 c0       	rjmp	.+466    	; 0x2a8e <vfprintf+0x3c0>
    28bc:	84 36       	cpi	r24, 0x64	; 100
    28be:	11 f0       	breq	.+4      	; 0x28c4 <vfprintf+0x1f6>
    28c0:	89 36       	cpi	r24, 0x69	; 105
    28c2:	41 f5       	brne	.+80     	; 0x2914 <vfprintf+0x246>
    28c4:	27 ff       	sbrs	r18, 7
    28c6:	08 c0       	rjmp	.+16     	; 0x28d8 <vfprintf+0x20a>
    28c8:	f8 01       	movw	r30, r16
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	0c 5f       	subi	r16, 0xFC	; 252
    28d4:	1f 4f       	sbci	r17, 0xFF	; 255
    28d6:	09 c0       	rjmp	.+18     	; 0x28ea <vfprintf+0x21c>
    28d8:	f8 01       	movw	r30, r16
    28da:	60 81       	ld	r22, Z
    28dc:	71 81       	ldd	r23, Z+1	; 0x01
    28de:	88 27       	eor	r24, r24
    28e0:	77 fd       	sbrc	r23, 7
    28e2:	80 95       	com	r24
    28e4:	98 2f       	mov	r25, r24
    28e6:	0e 5f       	subi	r16, 0xFE	; 254
    28e8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ea:	4f e6       	ldi	r20, 0x6F	; 111
    28ec:	b4 2e       	mov	r11, r20
    28ee:	b2 22       	and	r11, r18
    28f0:	97 ff       	sbrs	r25, 7
    28f2:	09 c0       	rjmp	.+18     	; 0x2906 <vfprintf+0x238>
    28f4:	90 95       	com	r25
    28f6:	80 95       	com	r24
    28f8:	70 95       	com	r23
    28fa:	61 95       	neg	r22
    28fc:	7f 4f       	sbci	r23, 0xFF	; 255
    28fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2900:	9f 4f       	sbci	r25, 0xFF	; 255
    2902:	f0 e8       	ldi	r31, 0x80	; 128
    2904:	bf 2a       	or	r11, r31
    2906:	a2 01       	movw	r20, r4
    2908:	2a e0       	ldi	r18, 0x0A	; 10
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	25 d1       	rcall	.+586    	; 0x2b58 <__ultoa_invert>
    290e:	78 2e       	mov	r7, r24
    2910:	74 18       	sub	r7, r4
    2912:	44 c0       	rjmp	.+136    	; 0x299c <vfprintf+0x2ce>
    2914:	85 37       	cpi	r24, 0x75	; 117
    2916:	31 f4       	brne	.+12     	; 0x2924 <vfprintf+0x256>
    2918:	3f ee       	ldi	r19, 0xEF	; 239
    291a:	b3 2e       	mov	r11, r19
    291c:	b2 22       	and	r11, r18
    291e:	2a e0       	ldi	r18, 0x0A	; 10
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	25 c0       	rjmp	.+74     	; 0x296e <vfprintf+0x2a0>
    2924:	99 ef       	ldi	r25, 0xF9	; 249
    2926:	b9 2e       	mov	r11, r25
    2928:	b2 22       	and	r11, r18
    292a:	8f 36       	cpi	r24, 0x6F	; 111
    292c:	c1 f0       	breq	.+48     	; 0x295e <vfprintf+0x290>
    292e:	80 37       	cpi	r24, 0x70	; 112
    2930:	20 f4       	brcc	.+8      	; 0x293a <vfprintf+0x26c>
    2932:	88 35       	cpi	r24, 0x58	; 88
    2934:	09 f0       	breq	.+2      	; 0x2938 <vfprintf+0x26a>
    2936:	ae c0       	rjmp	.+348    	; 0x2a94 <vfprintf+0x3c6>
    2938:	0d c0       	rjmp	.+26     	; 0x2954 <vfprintf+0x286>
    293a:	80 37       	cpi	r24, 0x70	; 112
    293c:	21 f0       	breq	.+8      	; 0x2946 <vfprintf+0x278>
    293e:	88 37       	cpi	r24, 0x78	; 120
    2940:	09 f0       	breq	.+2      	; 0x2944 <vfprintf+0x276>
    2942:	a8 c0       	rjmp	.+336    	; 0x2a94 <vfprintf+0x3c6>
    2944:	02 c0       	rjmp	.+4      	; 0x294a <vfprintf+0x27c>
    2946:	20 e1       	ldi	r18, 0x10	; 16
    2948:	b2 2a       	or	r11, r18
    294a:	b4 fe       	sbrs	r11, 4
    294c:	0b c0       	rjmp	.+22     	; 0x2964 <vfprintf+0x296>
    294e:	84 e0       	ldi	r24, 0x04	; 4
    2950:	b8 2a       	or	r11, r24
    2952:	08 c0       	rjmp	.+16     	; 0x2964 <vfprintf+0x296>
    2954:	b4 fe       	sbrs	r11, 4
    2956:	09 c0       	rjmp	.+18     	; 0x296a <vfprintf+0x29c>
    2958:	e6 e0       	ldi	r30, 0x06	; 6
    295a:	be 2a       	or	r11, r30
    295c:	06 c0       	rjmp	.+12     	; 0x296a <vfprintf+0x29c>
    295e:	28 e0       	ldi	r18, 0x08	; 8
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	05 c0       	rjmp	.+10     	; 0x296e <vfprintf+0x2a0>
    2964:	20 e1       	ldi	r18, 0x10	; 16
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	02 c0       	rjmp	.+4      	; 0x296e <vfprintf+0x2a0>
    296a:	20 e1       	ldi	r18, 0x10	; 16
    296c:	32 e0       	ldi	r19, 0x02	; 2
    296e:	b7 fe       	sbrs	r11, 7
    2970:	08 c0       	rjmp	.+16     	; 0x2982 <vfprintf+0x2b4>
    2972:	f8 01       	movw	r30, r16
    2974:	60 81       	ld	r22, Z
    2976:	71 81       	ldd	r23, Z+1	; 0x01
    2978:	82 81       	ldd	r24, Z+2	; 0x02
    297a:	93 81       	ldd	r25, Z+3	; 0x03
    297c:	0c 5f       	subi	r16, 0xFC	; 252
    297e:	1f 4f       	sbci	r17, 0xFF	; 255
    2980:	07 c0       	rjmp	.+14     	; 0x2990 <vfprintf+0x2c2>
    2982:	f8 01       	movw	r30, r16
    2984:	60 81       	ld	r22, Z
    2986:	71 81       	ldd	r23, Z+1	; 0x01
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	0e 5f       	subi	r16, 0xFE	; 254
    298e:	1f 4f       	sbci	r17, 0xFF	; 255
    2990:	a2 01       	movw	r20, r4
    2992:	e2 d0       	rcall	.+452    	; 0x2b58 <__ultoa_invert>
    2994:	78 2e       	mov	r7, r24
    2996:	74 18       	sub	r7, r4
    2998:	ff e7       	ldi	r31, 0x7F	; 127
    299a:	bf 22       	and	r11, r31
    299c:	b6 fe       	sbrs	r11, 6
    299e:	0b c0       	rjmp	.+22     	; 0x29b6 <vfprintf+0x2e8>
    29a0:	2e ef       	ldi	r18, 0xFE	; 254
    29a2:	b2 22       	and	r11, r18
    29a4:	7e 14       	cp	r7, r14
    29a6:	38 f4       	brcc	.+14     	; 0x29b6 <vfprintf+0x2e8>
    29a8:	b4 fe       	sbrs	r11, 4
    29aa:	07 c0       	rjmp	.+14     	; 0x29ba <vfprintf+0x2ec>
    29ac:	b2 fc       	sbrc	r11, 2
    29ae:	05 c0       	rjmp	.+10     	; 0x29ba <vfprintf+0x2ec>
    29b0:	8f ee       	ldi	r24, 0xEF	; 239
    29b2:	b8 22       	and	r11, r24
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <vfprintf+0x2ec>
    29b6:	a7 2c       	mov	r10, r7
    29b8:	01 c0       	rjmp	.+2      	; 0x29bc <vfprintf+0x2ee>
    29ba:	ae 2c       	mov	r10, r14
    29bc:	8b 2d       	mov	r24, r11
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	b4 fe       	sbrs	r11, 4
    29c2:	0d c0       	rjmp	.+26     	; 0x29de <vfprintf+0x310>
    29c4:	fe 01       	movw	r30, r28
    29c6:	e7 0d       	add	r30, r7
    29c8:	f1 1d       	adc	r31, r1
    29ca:	20 81       	ld	r18, Z
    29cc:	20 33       	cpi	r18, 0x30	; 48
    29ce:	19 f4       	brne	.+6      	; 0x29d6 <vfprintf+0x308>
    29d0:	e9 ee       	ldi	r30, 0xE9	; 233
    29d2:	be 22       	and	r11, r30
    29d4:	09 c0       	rjmp	.+18     	; 0x29e8 <vfprintf+0x31a>
    29d6:	a3 94       	inc	r10
    29d8:	b2 fe       	sbrs	r11, 2
    29da:	06 c0       	rjmp	.+12     	; 0x29e8 <vfprintf+0x31a>
    29dc:	04 c0       	rjmp	.+8      	; 0x29e6 <vfprintf+0x318>
    29de:	86 78       	andi	r24, 0x86	; 134
    29e0:	90 70       	andi	r25, 0x00	; 0
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	09 f0       	breq	.+2      	; 0x29e8 <vfprintf+0x31a>
    29e6:	a3 94       	inc	r10
    29e8:	8b 2c       	mov	r8, r11
    29ea:	99 24       	eor	r9, r9
    29ec:	b3 fc       	sbrc	r11, 3
    29ee:	13 c0       	rjmp	.+38     	; 0x2a16 <vfprintf+0x348>
    29f0:	b0 fe       	sbrs	r11, 0
    29f2:	0e c0       	rjmp	.+28     	; 0x2a10 <vfprintf+0x342>
    29f4:	af 14       	cp	r10, r15
    29f6:	28 f4       	brcc	.+10     	; 0x2a02 <vfprintf+0x334>
    29f8:	e7 2c       	mov	r14, r7
    29fa:	ef 0c       	add	r14, r15
    29fc:	ea 18       	sub	r14, r10
    29fe:	af 2c       	mov	r10, r15
    2a00:	07 c0       	rjmp	.+14     	; 0x2a10 <vfprintf+0x342>
    2a02:	e7 2c       	mov	r14, r7
    2a04:	05 c0       	rjmp	.+10     	; 0x2a10 <vfprintf+0x342>
    2a06:	80 e2       	ldi	r24, 0x20	; 32
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	b6 01       	movw	r22, r12
    2a0c:	79 d0       	rcall	.+242    	; 0x2b00 <fputc>
    2a0e:	a3 94       	inc	r10
    2a10:	af 14       	cp	r10, r15
    2a12:	c8 f3       	brcs	.-14     	; 0x2a06 <vfprintf+0x338>
    2a14:	04 c0       	rjmp	.+8      	; 0x2a1e <vfprintf+0x350>
    2a16:	af 14       	cp	r10, r15
    2a18:	10 f4       	brcc	.+4      	; 0x2a1e <vfprintf+0x350>
    2a1a:	fa 18       	sub	r15, r10
    2a1c:	01 c0       	rjmp	.+2      	; 0x2a20 <vfprintf+0x352>
    2a1e:	ff 24       	eor	r15, r15
    2a20:	84 fe       	sbrs	r8, 4
    2a22:	0e c0       	rjmp	.+28     	; 0x2a40 <vfprintf+0x372>
    2a24:	80 e3       	ldi	r24, 0x30	; 48
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	b6 01       	movw	r22, r12
    2a2a:	6a d0       	rcall	.+212    	; 0x2b00 <fputc>
    2a2c:	82 fe       	sbrs	r8, 2
    2a2e:	1d c0       	rjmp	.+58     	; 0x2a6a <vfprintf+0x39c>
    2a30:	81 fe       	sbrs	r8, 1
    2a32:	03 c0       	rjmp	.+6      	; 0x2a3a <vfprintf+0x36c>
    2a34:	88 e5       	ldi	r24, 0x58	; 88
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	10 c0       	rjmp	.+32     	; 0x2a5a <vfprintf+0x38c>
    2a3a:	88 e7       	ldi	r24, 0x78	; 120
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0d c0       	rjmp	.+26     	; 0x2a5a <vfprintf+0x38c>
    2a40:	c4 01       	movw	r24, r8
    2a42:	86 78       	andi	r24, 0x86	; 134
    2a44:	90 70       	andi	r25, 0x00	; 0
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	81 f0       	breq	.+32     	; 0x2a6a <vfprintf+0x39c>
    2a4a:	81 fc       	sbrc	r8, 1
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <vfprintf+0x384>
    2a4e:	80 e2       	ldi	r24, 0x20	; 32
    2a50:	01 c0       	rjmp	.+2      	; 0x2a54 <vfprintf+0x386>
    2a52:	8b e2       	ldi	r24, 0x2B	; 43
    2a54:	b7 fc       	sbrc	r11, 7
    2a56:	8d e2       	ldi	r24, 0x2D	; 45
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	b6 01       	movw	r22, r12
    2a5c:	51 d0       	rcall	.+162    	; 0x2b00 <fputc>
    2a5e:	05 c0       	rjmp	.+10     	; 0x2a6a <vfprintf+0x39c>
    2a60:	80 e3       	ldi	r24, 0x30	; 48
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	b6 01       	movw	r22, r12
    2a66:	4c d0       	rcall	.+152    	; 0x2b00 <fputc>
    2a68:	ea 94       	dec	r14
    2a6a:	7e 14       	cp	r7, r14
    2a6c:	c8 f3       	brcs	.-14     	; 0x2a60 <vfprintf+0x392>
    2a6e:	7a 94       	dec	r7
    2a70:	f2 01       	movw	r30, r4
    2a72:	e7 0d       	add	r30, r7
    2a74:	f1 1d       	adc	r31, r1
    2a76:	80 81       	ld	r24, Z
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	b6 01       	movw	r22, r12
    2a7c:	41 d0       	rcall	.+130    	; 0x2b00 <fputc>
    2a7e:	77 20       	and	r7, r7
    2a80:	b1 f7       	brne	.-20     	; 0x2a6e <vfprintf+0x3a0>
    2a82:	05 c0       	rjmp	.+10     	; 0x2a8e <vfprintf+0x3c0>
    2a84:	80 e2       	ldi	r24, 0x20	; 32
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	b6 01       	movw	r22, r12
    2a8a:	3a d0       	rcall	.+116    	; 0x2b00 <fputc>
    2a8c:	fa 94       	dec	r15
    2a8e:	ff 20       	and	r15, r15
    2a90:	c9 f7       	brne	.-14     	; 0x2a84 <vfprintf+0x3b6>
    2a92:	44 ce       	rjmp	.-888    	; 0x271c <vfprintf+0x4e>
    2a94:	f6 01       	movw	r30, r12
    2a96:	26 81       	ldd	r18, Z+6	; 0x06
    2a98:	37 81       	ldd	r19, Z+7	; 0x07
    2a9a:	02 c0       	rjmp	.+4      	; 0x2aa0 <vfprintf+0x3d2>
    2a9c:	2f ef       	ldi	r18, 0xFF	; 255
    2a9e:	3f ef       	ldi	r19, 0xFF	; 255
    2aa0:	c9 01       	movw	r24, r18
    2aa2:	2c 96       	adiw	r28, 0x0c	; 12
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	1f 91       	pop	r17
    2ab4:	0f 91       	pop	r16
    2ab6:	ff 90       	pop	r15
    2ab8:	ef 90       	pop	r14
    2aba:	df 90       	pop	r13
    2abc:	cf 90       	pop	r12
    2abe:	bf 90       	pop	r11
    2ac0:	af 90       	pop	r10
    2ac2:	9f 90       	pop	r9
    2ac4:	8f 90       	pop	r8
    2ac6:	7f 90       	pop	r7
    2ac8:	6f 90       	pop	r6
    2aca:	5f 90       	pop	r5
    2acc:	4f 90       	pop	r4
    2ace:	3f 90       	pop	r3
    2ad0:	2f 90       	pop	r2
    2ad2:	08 95       	ret

00002ad4 <strnlen_P>:
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	05 90       	lpm	r0, Z+
    2ad8:	61 50       	subi	r22, 0x01	; 1
    2ada:	70 40       	sbci	r23, 0x00	; 0
    2adc:	01 10       	cpse	r0, r1
    2ade:	d8 f7       	brcc	.-10     	; 0x2ad6 <strnlen_P+0x2>
    2ae0:	80 95       	com	r24
    2ae2:	90 95       	com	r25
    2ae4:	8e 0f       	add	r24, r30
    2ae6:	9f 1f       	adc	r25, r31
    2ae8:	08 95       	ret

00002aea <strnlen>:
    2aea:	fc 01       	movw	r30, r24
    2aec:	61 50       	subi	r22, 0x01	; 1
    2aee:	70 40       	sbci	r23, 0x00	; 0
    2af0:	01 90       	ld	r0, Z+
    2af2:	01 10       	cpse	r0, r1
    2af4:	d8 f7       	brcc	.-10     	; 0x2aec <strnlen+0x2>
    2af6:	80 95       	com	r24
    2af8:	90 95       	com	r25
    2afa:	8e 0f       	add	r24, r30
    2afc:	9f 1f       	adc	r25, r31
    2afe:	08 95       	ret

00002b00 <fputc>:
    2b00:	0f 93       	push	r16
    2b02:	1f 93       	push	r17
    2b04:	cf 93       	push	r28
    2b06:	df 93       	push	r29
    2b08:	8c 01       	movw	r16, r24
    2b0a:	eb 01       	movw	r28, r22
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	81 ff       	sbrs	r24, 1
    2b10:	1b c0       	rjmp	.+54     	; 0x2b48 <fputc+0x48>
    2b12:	82 ff       	sbrs	r24, 2
    2b14:	0d c0       	rjmp	.+26     	; 0x2b30 <fputc+0x30>
    2b16:	2e 81       	ldd	r18, Y+6	; 0x06
    2b18:	3f 81       	ldd	r19, Y+7	; 0x07
    2b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b1e:	28 17       	cp	r18, r24
    2b20:	39 07       	cpc	r19, r25
    2b22:	64 f4       	brge	.+24     	; 0x2b3c <fputc+0x3c>
    2b24:	e8 81       	ld	r30, Y
    2b26:	f9 81       	ldd	r31, Y+1	; 0x01
    2b28:	01 93       	st	Z+, r16
    2b2a:	f9 83       	std	Y+1, r31	; 0x01
    2b2c:	e8 83       	st	Y, r30
    2b2e:	06 c0       	rjmp	.+12     	; 0x2b3c <fputc+0x3c>
    2b30:	e8 85       	ldd	r30, Y+8	; 0x08
    2b32:	f9 85       	ldd	r31, Y+9	; 0x09
    2b34:	80 2f       	mov	r24, r16
    2b36:	09 95       	icall
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	31 f4       	brne	.+12     	; 0x2b48 <fputc+0x48>
    2b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b40:	01 96       	adiw	r24, 0x01	; 1
    2b42:	9f 83       	std	Y+7, r25	; 0x07
    2b44:	8e 83       	std	Y+6, r24	; 0x06
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <fputc+0x4c>
    2b48:	0f ef       	ldi	r16, 0xFF	; 255
    2b4a:	1f ef       	ldi	r17, 0xFF	; 255
    2b4c:	c8 01       	movw	r24, r16
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	1f 91       	pop	r17
    2b54:	0f 91       	pop	r16
    2b56:	08 95       	ret

00002b58 <__ultoa_invert>:
    2b58:	fa 01       	movw	r30, r20
    2b5a:	aa 27       	eor	r26, r26
    2b5c:	28 30       	cpi	r18, 0x08	; 8
    2b5e:	51 f1       	breq	.+84     	; 0x2bb4 <__ultoa_invert+0x5c>
    2b60:	20 31       	cpi	r18, 0x10	; 16
    2b62:	81 f1       	breq	.+96     	; 0x2bc4 <__ultoa_invert+0x6c>
    2b64:	e8 94       	clt
    2b66:	6f 93       	push	r22
    2b68:	6e 7f       	andi	r22, 0xFE	; 254
    2b6a:	6e 5f       	subi	r22, 0xFE	; 254
    2b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b70:	9f 4f       	sbci	r25, 0xFF	; 255
    2b72:	af 4f       	sbci	r26, 0xFF	; 255
    2b74:	b1 e0       	ldi	r27, 0x01	; 1
    2b76:	3e d0       	rcall	.+124    	; 0x2bf4 <__ultoa_invert+0x9c>
    2b78:	b4 e0       	ldi	r27, 0x04	; 4
    2b7a:	3c d0       	rcall	.+120    	; 0x2bf4 <__ultoa_invert+0x9c>
    2b7c:	67 0f       	add	r22, r23
    2b7e:	78 1f       	adc	r23, r24
    2b80:	89 1f       	adc	r24, r25
    2b82:	9a 1f       	adc	r25, r26
    2b84:	a1 1d       	adc	r26, r1
    2b86:	68 0f       	add	r22, r24
    2b88:	79 1f       	adc	r23, r25
    2b8a:	8a 1f       	adc	r24, r26
    2b8c:	91 1d       	adc	r25, r1
    2b8e:	a1 1d       	adc	r26, r1
    2b90:	6a 0f       	add	r22, r26
    2b92:	71 1d       	adc	r23, r1
    2b94:	81 1d       	adc	r24, r1
    2b96:	91 1d       	adc	r25, r1
    2b98:	a1 1d       	adc	r26, r1
    2b9a:	20 d0       	rcall	.+64     	; 0x2bdc <__ultoa_invert+0x84>
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <__ultoa_invert+0x48>
    2b9e:	68 94       	set
    2ba0:	3f 91       	pop	r19
    2ba2:	2a e0       	ldi	r18, 0x0A	; 10
    2ba4:	26 9f       	mul	r18, r22
    2ba6:	11 24       	eor	r1, r1
    2ba8:	30 19       	sub	r19, r0
    2baa:	30 5d       	subi	r19, 0xD0	; 208
    2bac:	31 93       	st	Z+, r19
    2bae:	de f6       	brtc	.-74     	; 0x2b66 <__ultoa_invert+0xe>
    2bb0:	cf 01       	movw	r24, r30
    2bb2:	08 95       	ret
    2bb4:	46 2f       	mov	r20, r22
    2bb6:	47 70       	andi	r20, 0x07	; 7
    2bb8:	40 5d       	subi	r20, 0xD0	; 208
    2bba:	41 93       	st	Z+, r20
    2bbc:	b3 e0       	ldi	r27, 0x03	; 3
    2bbe:	0f d0       	rcall	.+30     	; 0x2bde <__ultoa_invert+0x86>
    2bc0:	c9 f7       	brne	.-14     	; 0x2bb4 <__ultoa_invert+0x5c>
    2bc2:	f6 cf       	rjmp	.-20     	; 0x2bb0 <__ultoa_invert+0x58>
    2bc4:	46 2f       	mov	r20, r22
    2bc6:	4f 70       	andi	r20, 0x0F	; 15
    2bc8:	40 5d       	subi	r20, 0xD0	; 208
    2bca:	4a 33       	cpi	r20, 0x3A	; 58
    2bcc:	18 f0       	brcs	.+6      	; 0x2bd4 <__ultoa_invert+0x7c>
    2bce:	49 5d       	subi	r20, 0xD9	; 217
    2bd0:	31 fd       	sbrc	r19, 1
    2bd2:	40 52       	subi	r20, 0x20	; 32
    2bd4:	41 93       	st	Z+, r20
    2bd6:	02 d0       	rcall	.+4      	; 0x2bdc <__ultoa_invert+0x84>
    2bd8:	a9 f7       	brne	.-22     	; 0x2bc4 <__ultoa_invert+0x6c>
    2bda:	ea cf       	rjmp	.-44     	; 0x2bb0 <__ultoa_invert+0x58>
    2bdc:	b4 e0       	ldi	r27, 0x04	; 4
    2bde:	a6 95       	lsr	r26
    2be0:	97 95       	ror	r25
    2be2:	87 95       	ror	r24
    2be4:	77 95       	ror	r23
    2be6:	67 95       	ror	r22
    2be8:	ba 95       	dec	r27
    2bea:	c9 f7       	brne	.-14     	; 0x2bde <__ultoa_invert+0x86>
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	61 05       	cpc	r22, r1
    2bf0:	71 05       	cpc	r23, r1
    2bf2:	08 95       	ret
    2bf4:	9b 01       	movw	r18, r22
    2bf6:	ac 01       	movw	r20, r24
    2bf8:	0a 2e       	mov	r0, r26
    2bfa:	06 94       	lsr	r0
    2bfc:	57 95       	ror	r21
    2bfe:	47 95       	ror	r20
    2c00:	37 95       	ror	r19
    2c02:	27 95       	ror	r18
    2c04:	ba 95       	dec	r27
    2c06:	c9 f7       	brne	.-14     	; 0x2bfa <__ultoa_invert+0xa2>
    2c08:	62 0f       	add	r22, r18
    2c0a:	73 1f       	adc	r23, r19
    2c0c:	84 1f       	adc	r24, r20
    2c0e:	95 1f       	adc	r25, r21
    2c10:	a0 1d       	adc	r26, r0
    2c12:	08 95       	ret

00002c14 <_exit>:
    2c14:	f8 94       	cli

00002c16 <__stop_program>:
    2c16:	ff cf       	rjmp	.-2      	; 0x2c16 <__stop_program>
