
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001f9c  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800112  00800112  00002042  2**0
                  ALLOC
  3 .stab         000021a8  00000000  00000000  00002044  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7e  00000000  00000000  000041ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003a0  00000000  00000000  00004f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000094e  00000000  00000000  0000530a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000054f0  00000000  00000000  00005c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000017f0  00000000  00000000  0000b148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004b98  00000000  00000000  0000c938  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000580  00000000  00000000  000114d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000272e  00000000  00000000  00011a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003109  00000000  00000000  0001417e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000a8b  00000000  00000000  00017287  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000004c8  00000000  00000000  00017d12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	9f c1       	rjmp	.+830    	; 0x340 <__ctors_end>
       2:	00 00       	nop
       4:	bb c1       	rjmp	.+886    	; 0x37c <__bad_interrupt>
       6:	00 00       	nop
       8:	b9 c1       	rjmp	.+882    	; 0x37c <__bad_interrupt>
       a:	00 00       	nop
       c:	b7 c1       	rjmp	.+878    	; 0x37c <__bad_interrupt>
       e:	00 00       	nop
      10:	b5 c1       	rjmp	.+874    	; 0x37c <__bad_interrupt>
      12:	00 00       	nop
      14:	b3 c1       	rjmp	.+870    	; 0x37c <__bad_interrupt>
      16:	00 00       	nop
      18:	b1 c1       	rjmp	.+866    	; 0x37c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	af c1       	rjmp	.+862    	; 0x37c <__bad_interrupt>
      1e:	00 00       	nop
      20:	ad c1       	rjmp	.+858    	; 0x37c <__bad_interrupt>
      22:	00 00       	nop
      24:	ab c1       	rjmp	.+854    	; 0x37c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__vector_10>
      2c:	a7 c1       	rjmp	.+846    	; 0x37c <__bad_interrupt>
      2e:	00 00       	nop
      30:	a5 c1       	rjmp	.+842    	; 0x37c <__bad_interrupt>
      32:	00 00       	nop
      34:	a3 c1       	rjmp	.+838    	; 0x37c <__bad_interrupt>
      36:	00 00       	nop
      38:	a1 c1       	rjmp	.+834    	; 0x37c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9f c1       	rjmp	.+830    	; 0x37c <__bad_interrupt>
      3e:	00 00       	nop
      40:	9d c1       	rjmp	.+826    	; 0x37c <__bad_interrupt>
      42:	00 00       	nop
      44:	9b c1       	rjmp	.+822    	; 0x37c <__bad_interrupt>
      46:	00 00       	nop
      48:	99 c1       	rjmp	.+818    	; 0x37c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	97 c1       	rjmp	.+814    	; 0x37c <__bad_interrupt>
      4e:	00 00       	nop
      50:	95 c1       	rjmp	.+810    	; 0x37c <__bad_interrupt>
      52:	00 00       	nop
      54:	93 c1       	rjmp	.+806    	; 0x37c <__bad_interrupt>
      56:	00 00       	nop
      58:	91 c1       	rjmp	.+802    	; 0x37c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8f c1       	rjmp	.+798    	; 0x37c <__bad_interrupt>
      5e:	00 00       	nop
      60:	8d c1       	rjmp	.+794    	; 0x37c <__bad_interrupt>
      62:	00 00       	nop
      64:	8b c1       	rjmp	.+790    	; 0x37c <__bad_interrupt>
      66:	00 00       	nop
      68:	89 c1       	rjmp	.+786    	; 0x37c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	87 c1       	rjmp	.+782    	; 0x37c <__bad_interrupt>
      6e:	00 00       	nop
      70:	85 c1       	rjmp	.+778    	; 0x37c <__bad_interrupt>
      72:	00 00       	nop
      74:	83 c1       	rjmp	.+774    	; 0x37c <__bad_interrupt>
      76:	00 00       	nop
      78:	81 c1       	rjmp	.+770    	; 0x37c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7f c1       	rjmp	.+766    	; 0x37c <__bad_interrupt>
      7e:	00 00       	nop
      80:	7d c1       	rjmp	.+762    	; 0x37c <__bad_interrupt>
      82:	00 00       	nop
      84:	7b c1       	rjmp	.+758    	; 0x37c <__bad_interrupt>
      86:	00 00       	nop
      88:	79 c1       	rjmp	.+754    	; 0x37c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	77 c1       	rjmp	.+750    	; 0x37c <__bad_interrupt>
      8e:	00 00       	nop
      90:	75 c1       	rjmp	.+746    	; 0x37c <__bad_interrupt>
      92:	00 00       	nop
      94:	73 c1       	rjmp	.+742    	; 0x37c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4359>:
      98:	1b 5b 33 31 6d 43 6f 6d 6d 61 6e 64 20 45 72 72     .[31mCommand Err
      a8:	6f 72 20 28 25 53 29 2e 0d 0a 20 2d 2d 20 45 72     or (%S)... -- Er
      b8:	72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 1b 5b 33     ror Code %d...[3
      c8:	37 6d 00                                            7m.

000000cb <__c.4357>:
      cb:	54 72 61 6e 73 61 63 74 69 6f 6e 20 46 61 69 6c     Transaction Fail
      db:	00                                                  .

000000dc <__c.4355>:
      dc:	52 65 73 70 6f 6e 73 65 20 43 6f 64 65 20 21 3d     Response Code !=
      ec:	20 4f 4b 00                                          OK.

000000f0 <__c.4340>:
      f0:	44 6f 6e 65 2e 0d 0a 00                             Done....

000000f8 <__c.4337>:
      f8:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     108:	2e 2e 0d 0a 00                                      .....

0000010d <__c.4334>:
     10d:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
     11d:	2e 2e 0d 0a 00                                      .....

00000122 <__c.4332>:
     122:	20 20 20 44 65 76 69 63 65 20 56 65 72 73 69 6f        Device Versio
     132:	6e 3a 20 25 73 0d 0a 00                             n: %s...

0000013a <__c.4329>:
     13a:	20 20 20 4d 6f 64 65 6c 3a 20 25 73 0d 0a 00           Model: %s...

00000149 <__c.4326>:
     149:	20 20 20 4d 61 6e 75 66 61 63 74 75 72 65 72 3a        Manufacturer:
     159:	20 25 73 0d 0a 00                                    %s...

0000015f <__c.4319>:
     15f:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     16f:	65 20 49 6e 66 6f 2e 2e 2e 0d 0a 00                 e Info......

0000017b <__c.4313>:
     17b:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     18b:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     19b:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     1ab:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     1bb:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     1cb:	1b 5b 33 37 6d 00                                   .[37m.

000001d1 <__c.4306>:
     1d1:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1e1:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1f1:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000200 <__c.4301>:
     200:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     210:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     220:	00                                                  .

00000221 <__c.4299>:
     221:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     231:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     241:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     251:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     261:	37 6d 00                                            7m.

00000264 <__c.4297>:
     264:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     274:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000027e <__c.4295>:
     27e:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     28e:	69 63 65 2e 0d 0a 00                                ice....

00000295 <__c.4293>:
     295:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     2a5:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     2b5:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000002bf <__c.4290>:
     2bf:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     2cf:	61 74 61 2e 0d 0a 00                                ata....

000002d6 <__c.4285>:
     2d6:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     2e6:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     2f6:	00                                                  .

000002f7 <__c.4280>:
     2f7:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     307:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000314 <__c.4271>:
     314:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
     324:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     334:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

00000340 <__ctors_end>:
     340:	11 24       	eor	r1, r1
     342:	1f be       	out	0x3f, r1	; 63
     344:	cf ef       	ldi	r28, 0xFF	; 255
     346:	d0 e2       	ldi	r29, 0x20	; 32
     348:	de bf       	out	0x3e, r29	; 62
     34a:	cd bf       	out	0x3d, r28	; 61

0000034c <__do_copy_data>:
     34c:	11 e0       	ldi	r17, 0x01	; 1
     34e:	a0 e0       	ldi	r26, 0x00	; 0
     350:	b1 e0       	ldi	r27, 0x01	; 1
     352:	ec e9       	ldi	r30, 0x9C	; 156
     354:	ff e1       	ldi	r31, 0x1F	; 31
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	0b bf       	out	0x3b, r16	; 59
     35a:	02 c0       	rjmp	.+4      	; 0x360 <__do_copy_data+0x14>
     35c:	07 90       	elpm	r0, Z+
     35e:	0d 92       	st	X+, r0
     360:	a2 31       	cpi	r26, 0x12	; 18
     362:	b1 07       	cpc	r27, r17
     364:	d9 f7       	brne	.-10     	; 0x35c <__do_copy_data+0x10>

00000366 <__do_clear_bss>:
     366:	11 e0       	ldi	r17, 0x01	; 1
     368:	a2 e1       	ldi	r26, 0x12	; 18
     36a:	b1 e0       	ldi	r27, 0x01	; 1
     36c:	01 c0       	rjmp	.+2      	; 0x370 <.do_clear_bss_start>

0000036e <.do_clear_bss_loop>:
     36e:	1d 92       	st	X+, r1

00000370 <.do_clear_bss_start>:
     370:	ac 37       	cpi	r26, 0x7C	; 124
     372:	b1 07       	cpc	r27, r17
     374:	e1 f7       	brne	.-8      	; 0x36e <.do_clear_bss_loop>
     376:	e2 d2       	rcall	.+1476   	; 0x93c <main>
     378:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <_exit>

0000037c <__bad_interrupt>:
     37c:	41 ce       	rjmp	.-894    	; 0x0 <__vectors>

0000037e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     37e:	9b b1       	in	r25, 0x0b	; 11
     380:	9f 70       	andi	r25, 0x0F	; 15
     382:	98 2b       	or	r25, r24
     384:	9b b9       	out	0x0b, r25	; 11
			}
     386:	08 95       	ret

00000388 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     388:	84 b7       	in	r24, 0x34	; 52
     38a:	87 7f       	andi	r24, 0xF7	; 247
     38c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     38e:	28 e1       	ldi	r18, 0x18	; 24
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	f8 94       	cli
     394:	20 93 60 00 	sts	0x0060, r18
     398:	10 92 60 00 	sts	0x0060, r1
     39c:	0f be       	out	0x3f, r0	; 63

	/* Disable Clock Division */
	CLKPR = (1 << CLKPCE);
     39e:	e1 e6       	ldi	r30, 0x61	; 97
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 e8       	ldi	r24, 0x80	; 128
     3a4:	80 83       	st	Z, r24
	CLKPR = 0;
     3a6:	10 82       	st	Z, r1
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3a8:	83 e3       	ldi	r24, 0x33	; 51
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	90 93 cd 00 	sts	0x00CD, r25
     3b0:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3b4:	86 e0       	ldi	r24, 0x06	; 6
     3b6:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3ba:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3be:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     3c2:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     3c4:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     3c6:	8a b1       	in	r24, 0x0a	; 10
     3c8:	80 6f       	ori	r24, 0xF0	; 240
     3ca:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3cc:	8b b1       	in	r24, 0x0b	; 11
     3ce:	8f 70       	andi	r24, 0x0F	; 15
     3d0:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     3d2:	ef d7       	rcall	.+4062   	; 0x13b2 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <Serial_CreateStream>

000003dc <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     3dc:	87 ef       	ldi	r24, 0xF7	; 247
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3e4:	80 ea       	ldi	r24, 0xA0	; 160
}
     3e6:	cb cf       	rjmp	.-106    	; 0x37e <LEDs_SetAllLEDs>

000003e8 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     3e8:	86 ed       	ldi	r24, 0xD6	; 214
     3ea:	92 e0       	ldi	r25, 0x02	; 2
     3ec:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3f0:	80 e1       	ldi	r24, 0x10	; 16
}
     3f2:	c5 cf       	rjmp	.-118    	; 0x37e <LEDs_SetAllLEDs>

000003f4 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3f4:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     3f6:	8f eb       	ldi	r24, 0xBF	; 191
     3f8:	92 e0       	ldi	r25, 0x02	; 2
     3fa:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     3fe:	cf d2       	rcall	.+1438   	; 0x99e <ProcessConfigurationDescriptor>
     400:	18 2f       	mov	r17, r24
     402:	88 23       	and	r24, r24
     404:	01 f1       	breq	.+64     	; 0x446 <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
	{
		if (ErrorCode == ControlError)
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	19 f4       	brne	.+6      	; 0x410 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     40a:	85 e9       	ldi	r24, 0x95	; 149
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	02 c0       	rjmp	.+4      	; 0x414 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     410:	8e e7       	ldi	r24, 0x7E	; 126
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     418:	00 d0       	rcall	.+0      	; 0x41a <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     41a:	00 d0       	rcall	.+0      	; 0x41c <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     41c:	ed b7       	in	r30, 0x3d	; 61
     41e:	fe b7       	in	r31, 0x3e	; 62
     420:	31 96       	adiw	r30, 0x01	; 1
     422:	24 e6       	ldi	r18, 0x64	; 100
     424:	32 e0       	ldi	r19, 0x02	; 2
     426:	ad b7       	in	r26, 0x3d	; 61
     428:	be b7       	in	r27, 0x3e	; 62
     42a:	12 96       	adiw	r26, 0x02	; 2
     42c:	3c 93       	st	X, r19
     42e:	2e 93       	st	-X, r18
     430:	11 97       	sbiw	r26, 0x01	; 1
     432:	12 83       	std	Z+2, r17	; 0x02
     434:	13 82       	std	Z+3, r1	; 0x03
     436:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	80 e9       	ldi	r24, 0x90	; 144
     444:	19 c0       	rjmp	.+50     	; 0x478 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <USB_Host_SetDeviceConfiguration>
     44c:	88 23       	and	r24, r24
     44e:	79 f0       	breq	.+30     	; 0x46e <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     450:	00 d0       	rcall	.+0      	; 0x452 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     452:	00 d0       	rcall	.+0      	; 0x454 <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
     454:	ed b7       	in	r30, 0x3d	; 61
     456:	fe b7       	in	r31, 0x3e	; 62
     458:	31 96       	adiw	r30, 0x01	; 1
     45a:	21 e2       	ldi	r18, 0x21	; 33
     45c:	32 e0       	ldi	r19, 0x02	; 2
     45e:	ad b7       	in	r26, 0x3d	; 61
     460:	be b7       	in	r27, 0x3e	; 62
     462:	12 96       	adiw	r26, 0x02	; 2
     464:	3c 93       	st	X, r19
     466:	2e 93       	st	-X, r18
     468:	11 97       	sbiw	r26, 0x01	; 1
     46a:	82 83       	std	Z+2, r24	; 0x02
     46c:	e3 cf       	rjmp	.-58     	; 0x434 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Still Image Device Enumerated.\r\n"));
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     476:	80 e6       	ldi	r24, 0x60	; 96
     478:	82 df       	rcall	.-252    	; 0x37e <LEDs_SetAllLEDs>
}
     47a:	1f 91       	pop	r17
     47c:	08 95       	ret

0000047e <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     47e:	df 93       	push	r29
     480:	cf 93       	push	r28
     482:	0f 92       	push	r0
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     488:	89 83       	std	Y+1, r24	; 0x01
     48a:	2b d7       	rcall	.+3670   	; 0x12e2 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     48c:	00 d0       	rcall	.+0      	; 0x48e <EVENT_USB_Host_HostError+0x10>
     48e:	00 d0       	rcall	.+0      	; 0x490 <EVENT_USB_Host_HostError+0x12>
     490:	ed b7       	in	r30, 0x3d	; 61
     492:	fe b7       	in	r31, 0x3e	; 62
     494:	31 96       	adiw	r30, 0x01	; 1
     496:	21 ed       	ldi	r18, 0xD1	; 209
     498:	31 e0       	ldi	r19, 0x01	; 1
     49a:	ad b7       	in	r26, 0x3d	; 61
     49c:	be b7       	in	r27, 0x3e	; 62
     49e:	12 96       	adiw	r26, 0x02	; 2
     4a0:	3c 93       	st	X, r19
     4a2:	2e 93       	st	-X, r18
     4a4:	11 97       	sbiw	r26, 0x01	; 1
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	82 83       	std	Z+2, r24	; 0x02
     4aa:	13 82       	std	Z+3, r1	; 0x03
     4ac:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	80 e9       	ldi	r24, 0x90	; 144
     4ba:	61 df       	rcall	.-318    	; 0x37e <LEDs_SetAllLEDs>
     4bc:	ff cf       	rjmp	.-2      	; 0x4bc <EVENT_USB_Host_HostError+0x3e>

000004be <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4be:	90 91 67 01 	lds	r25, 0x0167
     4c2:	2d b7       	in	r18, 0x3d	; 61
     4c4:	3e b7       	in	r19, 0x3e	; 62
     4c6:	28 50       	subi	r18, 0x08	; 8
     4c8:	30 40       	sbci	r19, 0x00	; 0
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	3e bf       	out	0x3e, r19	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	2d bf       	out	0x3d, r18	; 61
     4d4:	ed b7       	in	r30, 0x3d	; 61
     4d6:	fe b7       	in	r31, 0x3e	; 62
     4d8:	31 96       	adiw	r30, 0x01	; 1
     4da:	2b e7       	ldi	r18, 0x7B	; 123
     4dc:	31 e0       	ldi	r19, 0x01	; 1
     4de:	ad b7       	in	r26, 0x3d	; 61
     4e0:	be b7       	in	r27, 0x3e	; 62
     4e2:	12 96       	adiw	r26, 0x02	; 2
     4e4:	3c 93       	st	X, r19
     4e6:	2e 93       	st	-X, r18
     4e8:	11 97       	sbiw	r26, 0x01	; 1
     4ea:	82 83       	std	Z+2, r24	; 0x02
     4ec:	13 82       	std	Z+3, r1	; 0x03
     4ee:	64 83       	std	Z+4, r22	; 0x04
     4f0:	15 82       	std	Z+5, r1	; 0x05
     4f2:	96 83       	std	Z+6, r25	; 0x06
     4f4:	17 82       	std	Z+7, r1	; 0x07
     4f6:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4fa:	2d b7       	in	r18, 0x3d	; 61
     4fc:	3e b7       	in	r19, 0x3e	; 62
     4fe:	28 5f       	subi	r18, 0xF8	; 248
     500:	3f 4f       	sbci	r19, 0xFF	; 255
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	3e bf       	out	0x3e, r19	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	2d bf       	out	0x3d, r18	; 61
     50c:	80 e9       	ldi	r24, 0x90	; 144
}
     50e:	37 cf       	rjmp	.-402    	; 0x37e <LEDs_SetAllLEDs>

00000510 <UnicodeToASCII>:
 */
void UnicodeToASCII(uint8_t* UnicodeString,
                    char* Buffer)
{
	/* Get the number of characters in the string, skip to the start of the string data */
	uint8_t CharactersRemaining = *(UnicodeString++);
     510:	dc 01       	movw	r26, r24
     512:	3c 91       	ld	r19, X

	/* Loop through the entire unicode string */
	while (CharactersRemaining--)
     514:	23 2f       	mov	r18, r19
     516:	fb 01       	movw	r30, r22
     518:	07 c0       	rjmp	.+14     	; 0x528 <UnicodeToASCII+0x18>
	{
		/* Load in the next unicode character (only the lower byte, as only Unicode coded ASCII is supported) */
		*(Buffer++) = *UnicodeString;
     51a:	dc 01       	movw	r26, r24
     51c:	11 96       	adiw	r26, 0x01	; 1
     51e:	4c 91       	ld	r20, X
     520:	11 97       	sbiw	r26, 0x01	; 1
     522:	41 93       	st	Z+, r20
     524:	21 50       	subi	r18, 0x01	; 1
     526:	02 96       	adiw	r24, 0x02	; 2
{
	/* Get the number of characters in the string, skip to the start of the string data */
	uint8_t CharactersRemaining = *(UnicodeString++);

	/* Loop through the entire unicode string */
	while (CharactersRemaining--)
     528:	22 23       	and	r18, r18
     52a:	b9 f7       	brne	.-18     	; 0x51a <UnicodeToASCII+0xa>
		/* Jump to the next unicode character */
		UnicodeString += 2;
	}

	/* Null terminate the string */
	*Buffer = 0;
     52c:	63 0f       	add	r22, r19
     52e:	71 1d       	adc	r23, r1
     530:	fb 01       	movw	r30, r22
     532:	10 82       	st	Z, r1
}
     534:	08 95       	ret

00000536 <ShowCommandError>:
 *  \param[in] ResponseCodeError  Indicates if the error is due to a command failed indication from the device, or a communication failure
 */
void ShowCommandError(uint8_t ErrorCode,
                      bool ResponseCodeError)
{
	const char* FailureType = ((ResponseCodeError) ? PSTR("Response Code != OK") : PSTR("Transaction Fail"));
     536:	66 23       	and	r22, r22
     538:	19 f0       	breq	.+6      	; 0x540 <ShowCommandError+0xa>
     53a:	2c ed       	ldi	r18, 0xDC	; 220
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	02 c0       	rjmp	.+4      	; 0x544 <ShowCommandError+0xe>
     540:	2b ec       	ldi	r18, 0xCB	; 203
     542:	30 e0       	ldi	r19, 0x00	; 0

	printf_P(PSTR(ESC_FG_RED "Command Error (%S).\r\n"
     544:	00 d0       	rcall	.+0      	; 0x546 <ShowCommandError+0x10>
     546:	00 d0       	rcall	.+0      	; 0x548 <ShowCommandError+0x12>
     548:	00 d0       	rcall	.+0      	; 0x54a <ShowCommandError+0x14>
     54a:	ed b7       	in	r30, 0x3d	; 61
     54c:	fe b7       	in	r31, 0x3e	; 62
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	48 e9       	ldi	r20, 0x98	; 152
     552:	50 e0       	ldi	r21, 0x00	; 0
     554:	ad b7       	in	r26, 0x3d	; 61
     556:	be b7       	in	r27, 0x3e	; 62
     558:	12 96       	adiw	r26, 0x02	; 2
     55a:	5c 93       	st	X, r21
     55c:	4e 93       	st	-X, r20
     55e:	11 97       	sbiw	r26, 0x01	; 1
     560:	33 83       	std	Z+3, r19	; 0x03
     562:	22 83       	std	Z+2, r18	; 0x02
     564:	84 83       	std	Z+4, r24	; 0x04
     566:	15 82       	std	Z+5, r1	; 0x05
     568:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), FailureType, ErrorCode);

	/* Indicate error via status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     56c:	8d b7       	in	r24, 0x3d	; 61
     56e:	9e b7       	in	r25, 0x3e	; 62
     570:	06 96       	adiw	r24, 0x06	; 6
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	9e bf       	out	0x3e, r25	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	8d bf       	out	0x3d, r24	; 61
     57c:	80 e9       	ldi	r24, 0x90	; 144
}
     57e:	ff ce       	rjmp	.-514    	; 0x37e <LEDs_SetAllLEDs>

00000580 <StillImageHost_Task>:

/** Task to print device information through the serial port, and open/close a test PIMA session with the
 *  attached Still Image device.
 */
void StillImageHost_Task(void)
{
     580:	3f 92       	push	r3
     582:	4f 92       	push	r4
     584:	5f 92       	push	r5
     586:	6f 92       	push	r6
     588:	7f 92       	push	r7
     58a:	8f 92       	push	r8
     58c:	9f 92       	push	r9
     58e:	af 92       	push	r10
     590:	bf 92       	push	r11
     592:	cf 92       	push	r12
     594:	df 92       	push	r13
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <StillImageHost_Task+0x24>
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
	puts_P(PSTR("Done.\r\n"));

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     5a8:	ed b6       	in	r14, 0x3d	; 61
     5aa:	fe b6       	in	r15, 0x3e	; 62
     5ac:	fa 82       	std	Y+2, r15	; 0x02
     5ae:	e9 82       	std	Y+1, r14	; 0x01

/** Task to print device information through the serial port, and open/close a test PIMA session with the
 *  attached Still Image device.
 */
void StillImageHost_Task(void)
{
     5b0:	4d b6       	in	r4, 0x3d	; 61
     5b2:	3f 2c       	mov	r3, r15
	if (USB_HostState != HOST_STATE_Configured)
     5b4:	80 91 67 01 	lds	r24, 0x0167
     5b8:	8b 30       	cpi	r24, 0x0B	; 11
     5ba:	09 f0       	breq	.+2      	; 0x5be <StillImageHost_Task+0x3e>
     5bc:	9d c1       	rjmp	.+826    	; 0x8f8 <StillImageHost_Task+0x378>
	  return;

	uint8_t ErrorCode;

	/* Indicate device busy via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     5be:	80 e2       	ldi	r24, 0x20	; 32
     5c0:	de de       	rcall	.-580    	; 0x37e <LEDs_SetAllLEDs>

	puts_P(PSTR("Retrieving Device Info...\r\n"));
     5c2:	8f e5       	ldi	r24, 0x5F	; 95
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <puts_P>

	PIMA_SendBlock = (PIMA_Container_t)
     5ca:	28 e1       	ldi	r18, 0x18	; 24
     5cc:	52 2e       	mov	r5, r18
     5ce:	9d e2       	ldi	r25, 0x2D	; 45
     5d0:	69 2e       	mov	r6, r25
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	79 2e       	mov	r7, r25
     5d6:	d3 01       	movw	r26, r6
     5d8:	e5 2d       	mov	r30, r5
     5da:	1d 92       	st	X+, r1
     5dc:	ea 95       	dec	r30
     5de:	e9 f7       	brne	.-6      	; 0x5da <StillImageHost_Task+0x5a>
     5e0:	8c e0       	ldi	r24, 0x0C	; 12
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	a0 e0       	ldi	r26, 0x00	; 0
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	80 93 2d 01 	sts	0x012D, r24
     5ec:	90 93 2e 01 	sts	0x012E, r25
     5f0:	a0 93 2f 01 	sts	0x012F, r26
     5f4:	b0 93 30 01 	sts	0x0130, r27
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	90 93 32 01 	sts	0x0132, r25
     600:	80 93 31 01 	sts	0x0131, r24
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e1       	ldi	r25, 0x10	; 16
     608:	90 93 34 01 	sts	0x0134, r25
     60c:	80 93 33 01 	sts	0x0133, r24
			.TransactionID = 0x00000000,
			.Params        = {},
		};

	/* Send the GETDEVICEINFO block */
	SImage_SendBlockHeader();
     610:	6b d2       	rcall	.+1238   	; 0xae8 <SImage_SendBlockHeader>

	/* Receive the response data block */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     612:	95 d2       	rcall	.+1322   	; 0xb3e <SImage_ReceiveBlockHeader>
     614:	88 23       	and	r24, r24
     616:	09 f0       	breq	.+2      	; 0x61a <StillImageHost_Task+0x9a>
     618:	52 c1       	rjmp	.+676    	; 0x8be <StillImageHost_Task+0x33e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Calculate the size of the returned device info data structure */
	uint16_t DeviceInfoSize = (PIMA_ReceivedBlock.DataLength - PIMA_COMMAND_SIZE(0));
     61a:	60 91 45 01 	lds	r22, 0x0145
     61e:	70 91 46 01 	lds	r23, 0x0146
     622:	6c 50       	subi	r22, 0x0C	; 12
     624:	70 40       	sbci	r23, 0x00	; 0

	/* Create a buffer large enough to hold the entire device info */
	uint8_t DeviceInfo[DeviceInfoSize];
     626:	ed b6       	in	r14, 0x3d	; 61
     628:	fe b6       	in	r15, 0x3e	; 62
     62a:	e6 1a       	sub	r14, r22
     62c:	f7 0a       	sbc	r15, r23
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	fe be       	out	0x3e, r15	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	ed be       	out	0x3d, r14	; 61
     638:	0d b7       	in	r16, 0x3d	; 61
     63a:	1e b7       	in	r17, 0x3e	; 62
     63c:	0f 5f       	subi	r16, 0xFF	; 255
     63e:	1f 4f       	sbci	r17, 0xFF	; 255

	/* Read in the data block data (containing device info) */
	SImage_ReadData(DeviceInfo, DeviceInfoSize);
     640:	c8 01       	movw	r24, r16
     642:	f6 d2       	rcall	.+1516   	; 0xc30 <SImage_ReadData>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     644:	80 91 a6 00 	lds	r24, 0x00A6
     648:	8e 77       	andi	r24, 0x7E	; 126
     64a:	80 93 a6 00 	sts	0x00A6, r24
	/* Create a pointer for walking through the info dataset */
	uint8_t* DeviceInfoPos = DeviceInfo;

	/* Skip over the data before the unicode device information strings */
	DeviceInfoPos +=  8;                                          // Skip to VendorExtensionDesc String
	DeviceInfoPos += (1 + UNICODE_STRING_LENGTH(*DeviceInfoPos)); // Skip over VendorExtensionDesc String
     64e:	d8 01       	movw	r26, r16
     650:	18 96       	adiw	r26, 0x08	; 8
     652:	ec 91       	ld	r30, X
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	ee 0f       	add	r30, r30
     658:	ff 1f       	adc	r31, r31
     65a:	e0 0f       	add	r30, r16
     65c:	f1 1f       	adc	r31, r17
     65e:	39 96       	adiw	r30, 0x09	; 9
	DeviceInfoPos +=  2;                                          // Skip over FunctionalMode
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Operations Array
     660:	a2 81       	ldd	r26, Z+2	; 0x02
     662:	b3 81       	ldd	r27, Z+3	; 0x03
     664:	aa 0f       	add	r26, r26
     666:	bb 1f       	adc	r27, r27
     668:	ae 0f       	add	r26, r30
     66a:	bf 1f       	adc	r27, r31
     66c:	16 96       	adiw	r26, 0x06	; 6
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Events Array
     66e:	ed 91       	ld	r30, X+
     670:	fc 91       	ld	r31, X
     672:	11 97       	sbiw	r26, 0x01	; 1
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	34 96       	adiw	r30, 0x04	; 4
     67a:	ea 0f       	add	r30, r26
     67c:	fb 1f       	adc	r31, r27
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Device Properties Array
     67e:	a0 81       	ld	r26, Z
     680:	b1 81       	ldd	r27, Z+1	; 0x01
     682:	aa 0f       	add	r26, r26
     684:	bb 1f       	adc	r27, r27
     686:	14 96       	adiw	r26, 0x04	; 4
     688:	ae 0f       	add	r26, r30
     68a:	bf 1f       	adc	r27, r31
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Capture Formats Array
     68c:	ed 91       	ld	r30, X+
     68e:	fc 91       	ld	r31, X
     690:	11 97       	sbiw	r26, 0x01	; 1
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	34 96       	adiw	r30, 0x04	; 4
     698:	ea 0f       	add	r30, r26
     69a:	fb 1f       	adc	r31, r27
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Image Formats Array
     69c:	00 81       	ld	r16, Z
     69e:	11 81       	ldd	r17, Z+1	; 0x01
     6a0:	00 0f       	add	r16, r16
     6a2:	11 1f       	adc	r17, r17
     6a4:	0c 5f       	subi	r16, 0xFC	; 252
     6a6:	1f 4f       	sbci	r17, 0xFF	; 255
     6a8:	0e 0f       	add	r16, r30
     6aa:	1f 1f       	adc	r17, r31

	/* Extract and convert the Manufacturer Unicode string to ASCII and print it through the USART */
	char Manufacturer[*DeviceInfoPos];
     6ac:	f8 01       	movw	r30, r16
     6ae:	80 81       	ld	r24, Z
     6b0:	ed b6       	in	r14, 0x3d	; 61
     6b2:	fe b6       	in	r15, 0x3e	; 62
     6b4:	e8 1a       	sub	r14, r24
     6b6:	f1 08       	sbc	r15, r1
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	fe be       	out	0x3e, r15	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	ed be       	out	0x3d, r14	; 61
     6c2:	08 94       	sec
     6c4:	e1 1c       	adc	r14, r1
     6c6:	f1 1c       	adc	r15, r1
	UnicodeToASCII(DeviceInfoPos, Manufacturer);
     6c8:	c8 01       	movw	r24, r16
     6ca:	b7 01       	movw	r22, r14
     6cc:	21 df       	rcall	.-446    	; 0x510 <UnicodeToASCII>
	printf_P(PSTR("   Manufacturer: %s\r\n"), Manufacturer);
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <StillImageHost_Task+0x150>
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <StillImageHost_Task+0x152>
     6d2:	ed b7       	in	r30, 0x3d	; 61
     6d4:	fe b7       	in	r31, 0x3e	; 62
     6d6:	31 96       	adiw	r30, 0x01	; 1
     6d8:	89 e4       	ldi	r24, 0x49	; 73
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	ad b7       	in	r26, 0x3d	; 61
     6de:	be b7       	in	r27, 0x3e	; 62
     6e0:	12 96       	adiw	r26, 0x02	; 2
     6e2:	9c 93       	st	X, r25
     6e4:	8e 93       	st	-X, r24
     6e6:	11 97       	sbiw	r26, 0x01	; 1
     6e8:	e2 82       	std	Z+2, r14	; 0x02
     6ea:	f3 82       	std	Z+3, r15	; 0x03
     6ec:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <printf_P>

	DeviceInfoPos += 1 + UNICODE_STRING_LENGTH(*DeviceInfoPos);   // Skip over Manufacturer String
     6f0:	f8 01       	movw	r30, r16
     6f2:	e0 80       	ld	r14, Z
     6f4:	ff 24       	eor	r15, r15
     6f6:	ee 0c       	add	r14, r14
     6f8:	ff 1c       	adc	r15, r15
     6fa:	08 94       	sec
     6fc:	e1 1c       	adc	r14, r1
     6fe:	f1 1c       	adc	r15, r1
     700:	e0 0e       	add	r14, r16
     702:	f1 1e       	adc	r15, r17

	/* Extract and convert the Model Unicode string to ASCII and print it through the USART */
	char Model[*DeviceInfoPos];
     704:	d7 01       	movw	r26, r14
     706:	8c 91       	ld	r24, X
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	ed b7       	in	r30, 0x3d	; 61
     712:	fe b7       	in	r31, 0x3e	; 62
     714:	e8 1b       	sub	r30, r24
     716:	f1 09       	sbc	r31, r1
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	fe bf       	out	0x3e, r31	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	ed bf       	out	0x3d, r30	; 61
     722:	0d b7       	in	r16, 0x3d	; 61
     724:	1e b7       	in	r17, 0x3e	; 62
     726:	0f 5f       	subi	r16, 0xFF	; 255
     728:	1f 4f       	sbci	r17, 0xFF	; 255
	UnicodeToASCII(DeviceInfoPos, Model);
     72a:	c7 01       	movw	r24, r14
     72c:	b8 01       	movw	r22, r16
     72e:	f0 de       	rcall	.-544    	; 0x510 <UnicodeToASCII>
	printf_P(PSTR("   Model: %s\r\n"), Model);
     730:	00 d0       	rcall	.+0      	; 0x732 <StillImageHost_Task+0x1b2>
     732:	00 d0       	rcall	.+0      	; 0x734 <StillImageHost_Task+0x1b4>
     734:	ed b7       	in	r30, 0x3d	; 61
     736:	fe b7       	in	r31, 0x3e	; 62
     738:	31 96       	adiw	r30, 0x01	; 1
     73a:	8a e3       	ldi	r24, 0x3A	; 58
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	ad b7       	in	r26, 0x3d	; 61
     740:	be b7       	in	r27, 0x3e	; 62
     742:	12 96       	adiw	r26, 0x02	; 2
     744:	9c 93       	st	X, r25
     746:	8e 93       	st	-X, r24
     748:	11 97       	sbiw	r26, 0x01	; 1
     74a:	02 83       	std	Z+2, r16	; 0x02
     74c:	13 83       	std	Z+3, r17	; 0x03
     74e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <printf_P>

	DeviceInfoPos += 1 + UNICODE_STRING_LENGTH(*DeviceInfoPos);   // Skip over Model String
     752:	f7 01       	movw	r30, r14
     754:	80 81       	ld	r24, Z
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	8e 0d       	add	r24, r14
     760:	9f 1d       	adc	r25, r15

	/* Extract and convert the Device Version Unicode string to ASCII and print it through the USART */
	char DeviceVersion[*DeviceInfoPos];
     762:	dc 01       	movw	r26, r24
     764:	2c 91       	ld	r18, X
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	ed b7       	in	r30, 0x3d	; 61
     770:	fe b7       	in	r31, 0x3e	; 62
     772:	e2 1b       	sub	r30, r18
     774:	f1 09       	sbc	r31, r1
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	fe bf       	out	0x3e, r31	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	ed bf       	out	0x3d, r30	; 61
     780:	0d b7       	in	r16, 0x3d	; 61
     782:	1e b7       	in	r17, 0x3e	; 62
     784:	0f 5f       	subi	r16, 0xFF	; 255
     786:	1f 4f       	sbci	r17, 0xFF	; 255
	UnicodeToASCII(DeviceInfoPos, DeviceVersion);
     788:	b8 01       	movw	r22, r16
     78a:	c2 de       	rcall	.-636    	; 0x510 <UnicodeToASCII>
	printf_P(PSTR("   Device Version: %s\r\n"), DeviceVersion);
     78c:	00 d0       	rcall	.+0      	; 0x78e <StillImageHost_Task+0x20e>
     78e:	00 d0       	rcall	.+0      	; 0x790 <StillImageHost_Task+0x210>
     790:	ed b7       	in	r30, 0x3d	; 61
     792:	fe b7       	in	r31, 0x3e	; 62
     794:	31 96       	adiw	r30, 0x01	; 1
     796:	82 e2       	ldi	r24, 0x22	; 34
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	ad b7       	in	r26, 0x3d	; 61
     79c:	be b7       	in	r27, 0x3e	; 62
     79e:	12 96       	adiw	r26, 0x02	; 2
     7a0:	9c 93       	st	X, r25
     7a2:	8e 93       	st	-X, r24
     7a4:	11 97       	sbiw	r26, 0x01	; 1
     7a6:	02 83       	std	Z+2, r16	; 0x02
     7a8:	13 83       	std	Z+3, r17	; 0x03
     7aa:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <printf_P>

	/* Receive the final response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	c3 d1       	rcall	.+902    	; 0xb3e <SImage_ReceiveBlockHeader>
     7b8:	88 23       	and	r24, r24
     7ba:	09 f0       	breq	.+2      	; 0x7be <StillImageHost_Task+0x23e>
     7bc:	80 c0       	rjmp	.+256    	; 0x8be <StillImageHost_Task+0x33e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     7be:	80 91 49 01 	lds	r24, 0x0149
     7c2:	90 91 4a 01 	lds	r25, 0x014A
     7c6:	83 30       	cpi	r24, 0x03	; 3
     7c8:	91 05       	cpc	r25, r1
     7ca:	09 f0       	breq	.+2      	; 0x7ce <StillImageHost_Task+0x24e>
     7cc:	88 c0       	rjmp	.+272    	; 0x8de <StillImageHost_Task+0x35e>
     7ce:	00 91 4b 01 	lds	r16, 0x014B
     7d2:	10 91 4c 01 	lds	r17, 0x014C
     7d6:	01 30       	cpi	r16, 0x01	; 1
     7d8:	11 05       	cpc	r17, r1
     7da:	09 f0       	breq	.+2      	; 0x7de <StillImageHost_Task+0x25e>
     7dc:	80 c0       	rjmp	.+256    	; 0x8de <StillImageHost_Task+0x35e>
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Opening Session...\r\n"));
     7de:	8d e0       	ldi	r24, 0x0D	; 13
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <puts_P>

	PIMA_SendBlock = (PIMA_Container_t)
     7e6:	f3 01       	movw	r30, r6
     7e8:	e5 2c       	mov	r14, r5
     7ea:	11 92       	st	Z+, r1
     7ec:	ea 94       	dec	r14
     7ee:	e9 f7       	brne	.-6      	; 0x7ea <StillImageHost_Task+0x26a>
     7f0:	90 e1       	ldi	r25, 0x10	; 16
     7f2:	89 2e       	mov	r8, r25
     7f4:	91 2c       	mov	r9, r1
     7f6:	a1 2c       	mov	r10, r1
     7f8:	b1 2c       	mov	r11, r1
     7fa:	80 92 2d 01 	sts	0x012D, r8
     7fe:	90 92 2e 01 	sts	0x012E, r9
     802:	a0 92 2f 01 	sts	0x012F, r10
     806:	b0 92 30 01 	sts	0x0130, r11
     80a:	10 93 32 01 	sts	0x0132, r17
     80e:	00 93 31 01 	sts	0x0131, r16
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	90 e1       	ldi	r25, 0x10	; 16
     816:	90 93 34 01 	sts	0x0134, r25
     81a:	80 93 33 01 	sts	0x0133, r24
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	e1 2c       	mov	r14, r1
     826:	f1 2c       	mov	r15, r1
     828:	c0 92 39 01 	sts	0x0139, r12
     82c:	d0 92 3a 01 	sts	0x013A, r13
     830:	e0 92 3b 01 	sts	0x013B, r14
     834:	f0 92 3c 01 	sts	0x013C, r15
			.TransactionID = 0x00000000,
			.Params        = {0x00000001},
		};

	/* Send the OPENSESSION block, open a session with an ID of 0x0001 */
	SImage_SendBlockHeader();
     838:	57 d1       	rcall	.+686    	; 0xae8 <SImage_SendBlockHeader>

	/* Receive the response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     83a:	81 d1       	rcall	.+770    	; 0xb3e <SImage_ReceiveBlockHeader>
     83c:	88 23       	and	r24, r24
     83e:	09 f0       	breq	.+2      	; 0x842 <StillImageHost_Task+0x2c2>
     840:	3e c0       	rjmp	.+124    	; 0x8be <StillImageHost_Task+0x33e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     842:	80 91 49 01 	lds	r24, 0x0149
     846:	90 91 4a 01 	lds	r25, 0x014A
     84a:	83 30       	cpi	r24, 0x03	; 3
     84c:	91 05       	cpc	r25, r1
     84e:	09 f0       	breq	.+2      	; 0x852 <StillImageHost_Task+0x2d2>
     850:	46 c0       	rjmp	.+140    	; 0x8de <StillImageHost_Task+0x35e>
     852:	00 91 4b 01 	lds	r16, 0x014B
     856:	10 91 4c 01 	lds	r17, 0x014C
     85a:	01 30       	cpi	r16, 0x01	; 1
     85c:	11 05       	cpc	r17, r1
     85e:	09 f0       	breq	.+2      	; 0x862 <StillImageHost_Task+0x2e2>
     860:	3e c0       	rjmp	.+124    	; 0x8de <StillImageHost_Task+0x35e>
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Closing Session...\r\n"));
     862:	88 ef       	ldi	r24, 0xF8	; 248
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <puts_P>

	PIMA_SendBlock = (PIMA_Container_t)
     86a:	d3 01       	movw	r26, r6
     86c:	1d 92       	st	X+, r1
     86e:	5a 94       	dec	r5
     870:	e9 f7       	brne	.-6      	; 0x86c <StillImageHost_Task+0x2ec>
     872:	80 92 2d 01 	sts	0x012D, r8
     876:	90 92 2e 01 	sts	0x012E, r9
     87a:	a0 92 2f 01 	sts	0x012F, r10
     87e:	b0 92 30 01 	sts	0x0130, r11
     882:	10 93 32 01 	sts	0x0132, r17
     886:	00 93 31 01 	sts	0x0131, r16
     88a:	83 e0       	ldi	r24, 0x03	; 3
     88c:	90 e1       	ldi	r25, 0x10	; 16
     88e:	90 93 34 01 	sts	0x0134, r25
     892:	80 93 33 01 	sts	0x0133, r24
     896:	c0 92 35 01 	sts	0x0135, r12
     89a:	d0 92 36 01 	sts	0x0136, r13
     89e:	e0 92 37 01 	sts	0x0137, r14
     8a2:	f0 92 38 01 	sts	0x0138, r15
     8a6:	c0 92 39 01 	sts	0x0139, r12
     8aa:	d0 92 3a 01 	sts	0x013A, r13
     8ae:	e0 92 3b 01 	sts	0x013B, r14
     8b2:	f0 92 3c 01 	sts	0x013C, r15
			.TransactionID = 0x00000001,
			.Params        = {0x00000001},
		};

	/* Send the CLOSESESSION block, close the session with an ID of 0x0001 */
	SImage_SendBlockHeader();
     8b6:	18 d1       	rcall	.+560    	; 0xae8 <SImage_SendBlockHeader>

	/* Receive the response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     8b8:	42 d1       	rcall	.+644    	; 0xb3e <SImage_ReceiveBlockHeader>
     8ba:	88 23       	and	r24, r24
     8bc:	11 f0       	breq	.+4      	; 0x8c2 <StillImageHost_Task+0x342>
	{
		ShowCommandError(ErrorCode, false);
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	11 c0       	rjmp	.+34     	; 0x8e4 <StillImageHost_Task+0x364>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     8c2:	80 91 49 01 	lds	r24, 0x0149
     8c6:	90 91 4a 01 	lds	r25, 0x014A
     8ca:	83 30       	cpi	r24, 0x03	; 3
     8cc:	91 05       	cpc	r25, r1
     8ce:	39 f4       	brne	.+14     	; 0x8de <StillImageHost_Task+0x35e>
     8d0:	80 91 4b 01 	lds	r24, 0x014B
     8d4:	90 91 4c 01 	lds	r25, 0x014C
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	91 05       	cpc	r25, r1
     8dc:	29 f0       	breq	.+10     	; 0x8e8 <StillImageHost_Task+0x368>
	{
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
     8de:	80 91 4b 01 	lds	r24, 0x014B
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	28 de       	rcall	.-944    	; 0x536 <ShowCommandError>
     8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <StillImageHost_Task+0x374>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Done.\r\n"));
     8e8:	80 ef       	ldi	r24, 0xF0	; 240
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <puts_P>

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     8f0:	80 e6       	ldi	r24, 0x60	; 96
     8f2:	45 dd       	rcall	.-1398   	; 0x37e <LEDs_SetAllLEDs>
	USB_Host_SetDeviceConfiguration(0);
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	d4 d7       	rcall	.+4008   	; 0x18a0 <USB_Host_SetDeviceConfiguration>
     8f8:	84 2d       	mov	r24, r4
     8fa:	93 2d       	mov	r25, r3
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	f8 94       	cli
     900:	9e bf       	out	0x3e, r25	; 62
     902:	0f be       	out	0x3f, r0	; 63
     904:	8d bf       	out	0x3d, r24	; 61
}
     906:	e9 81       	ldd	r30, Y+1	; 0x01
     908:	fa 81       	ldd	r31, Y+2	; 0x02
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	fe bf       	out	0x3e, r31	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	ed bf       	out	0x3d, r30	; 61
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	cf 91       	pop	r28
     91a:	df 91       	pop	r29
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	bf 90       	pop	r11
     92a:	af 90       	pop	r10
     92c:	9f 90       	pop	r9
     92e:	8f 90       	pop	r8
     930:	7f 90       	pop	r7
     932:	6f 90       	pop	r6
     934:	5f 90       	pop	r5
     936:	4f 90       	pop	r4
     938:	3f 90       	pop	r3
     93a:	08 95       	ret

0000093c <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     93c:	25 dd       	rcall	.-1462   	; 0x388 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Still Image Host Demo running.\r\n" ESC_FG_WHITE));
     93e:	84 e1       	ldi	r24, 0x14	; 20
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     946:	80 e1       	ldi	r24, 0x10	; 16
     948:	1a dd       	rcall	.-1484   	; 0x37e <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     94a:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		StillImageHost_Task();
     94c:	19 de       	rcall	.-974    	; 0x580 <StillImageHost_Task>

		USB_USBTask();
     94e:	e4 d7       	rcall	.+4040   	; 0x1918 <USB_USBTask>
     950:	fd cf       	rjmp	.-6      	; 0x94c <main+0x10>

00000952 <DComp_NextStillImageInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Still Image Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextStillImageInterface(void* CurrentDescriptor)
{
     952:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     954:	81 81       	ldd	r24, Z+1	; 0x01
     956:	84 30       	cpi	r24, 0x04	; 4
     958:	49 f4       	brne	.+18     	; 0x96c <DComp_NextStillImageInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class, subclass and protocol, break out if correct interface found */
		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
     95a:	85 81       	ldd	r24, Z+5	; 0x05
     95c:	86 30       	cpi	r24, 0x06	; 6
     95e:	31 f4       	brne	.+12     	; 0x96c <DComp_NextStillImageInterface+0x1a>
     960:	86 81       	ldd	r24, Z+6	; 0x06
     962:	81 30       	cpi	r24, 0x01	; 1
     964:	19 f4       	brne	.+6      	; 0x96c <DComp_NextStillImageInterface+0x1a>
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
     966:	87 81       	ldd	r24, Z+7	; 0x07
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	11 f0       	breq	.+4      	; 0x970 <DComp_NextStillImageInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	08 95       	ret
		/* Check the descriptor class, subclass and protocol, break out if correct interface found */
		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
		    (Interface->Protocol == SI_CSCP_BulkOnlyProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     970:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     972:	08 95       	ret

00000974 <DComp_NextStillImageInterfaceDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextStillImageInterfaceDataEndpoint(void* CurrentDescriptor)
{
     974:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     976:	81 81       	ldd	r24, Z+1	; 0x01
     978:	85 30       	cpi	r24, 0x05	; 5
     97a:	49 f4       	brne	.+18     	; 0x98e <DComp_NextStillImageInterfaceDataEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
     97c:	83 81       	ldd	r24, Z+3	; 0x03
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	83 70       	andi	r24, 0x03	; 3
     982:	90 70       	andi	r25, 0x00	; 0
     984:	02 97       	sbiw	r24, 0x02	; 2
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	91 05       	cpc	r25, r1
     98a:	18 f4       	brcc	.+6      	; 0x992 <DComp_NextStillImageInterfaceDataEndpoint+0x1e>
     98c:	04 c0       	rjmp	.+8      	; 0x996 <DComp_NextStillImageInterfaceDataEndpoint+0x22>
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     98e:	84 30       	cpi	r24, 0x04	; 4
     990:	21 f0       	breq	.+8      	; 0x99a <DComp_NextStillImageInterfaceDataEndpoint+0x26>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	08 95       	ret

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     99a:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     99c:	08 95       	ret

0000099e <ProcessConfigurationDescriptor>:
 *  This routine searches for a SI interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref StillImageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     99e:	6f 92       	push	r6
     9a0:	7f 92       	push	r7
     9a2:	8f 92       	push	r8
     9a4:	9f 92       	push	r9
     9a6:	af 92       	push	r10
     9a8:	bf 92       	push	r11
     9aa:	cf 92       	push	r12
     9ac:	df 92       	push	r13
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	df 93       	push	r29
     9b8:	cf 93       	push	r28
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	c4 50       	subi	r28, 0x04	; 4
     9c0:	d2 40       	sbci	r29, 0x02	; 2
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     9cc:	ae 01       	movw	r20, r28
     9ce:	4b 5f       	subi	r20, 0xFB	; 251
     9d0:	5f 4f       	sbci	r21, 0xFF	; 255
     9d2:	5a 83       	std	Y+2, r21	; 0x02
     9d4:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	a8 2e       	mov	r10, r24
     9da:	b1 2c       	mov	r11, r1
     9dc:	ac 0e       	add	r10, r28
     9de:	bd 1e       	adc	r11, r29
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	b5 01       	movw	r22, r10
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	32 e0       	ldi	r19, 0x02	; 2
     9e8:	98 d5       	rcall	.+2864   	; 0x151a <USB_Host_GetDeviceConfigDescriptor>
     9ea:	85 30       	cpi	r24, 0x05	; 5
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <ProcessConfigurationDescriptor+0x52>
     9ee:	63 c0       	rjmp	.+198    	; 0xab6 <ProcessConfigurationDescriptor+0x118>
     9f0:	86 30       	cpi	r24, 0x06	; 6
     9f2:	89 f0       	breq	.+34     	; 0xa16 <ProcessConfigurationDescriptor+0x78>
     9f4:	88 23       	and	r24, r24
     9f6:	89 f4       	brne	.+34     	; 0xa1a <ProcessConfigurationDescriptor+0x7c>
     9f8:	cc 24       	eor	r12, r12
     9fa:	dd 24       	eor	r13, r13
     9fc:	ee 24       	eor	r14, r14
     9fe:	ff 24       	eor	r15, r15
     a00:	00 e0       	ldi	r16, 0x00	; 0
     a02:	10 e0       	ldi	r17, 0x00	; 0
     a04:	66 24       	eor	r6, r6
     a06:	77 24       	eor	r7, r7

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     a08:	9a 2c       	mov	r9, r10
     a0a:	8b 2c       	mov	r8, r11
     a0c:	5e 01       	movw	r10, r28
     a0e:	08 94       	sec
     a10:	a1 1c       	adc	r10, r1
     a12:	b1 1c       	adc	r11, r1
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <ProcessConfigurationDescriptor+0x80>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	51 c0       	rjmp	.+162    	; 0xabc <ProcessConfigurationDescriptor+0x11e>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	4f c0       	rjmp	.+158    	; 0xabc <ProcessConfigurationDescriptor+0x11e>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     a1e:	61 14       	cp	r6, r1
     a20:	71 04       	cpc	r7, r1
     a22:	41 f0       	breq	.+16     	; 0xa34 <ProcessConfigurationDescriptor+0x96>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     a24:	89 2d       	mov	r24, r9
     a26:	98 2d       	mov	r25, r8
     a28:	b5 01       	movw	r22, r10
     a2a:	4a eb       	ldi	r20, 0xBA	; 186
     a2c:	54 e0       	ldi	r21, 0x04	; 4
     a2e:	cc d5       	rcall	.+2968   	; 0x15c8 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     a30:	88 23       	and	r24, r24
     a32:	89 f0       	breq	.+34     	; 0xa56 <ProcessConfigurationDescriptor+0xb8>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextStillImageInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Still Image interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     a34:	89 2d       	mov	r24, r9
     a36:	98 2d       	mov	r25, r8
     a38:	b5 01       	movw	r22, r10
     a3a:	49 ea       	ldi	r20, 0xA9	; 169
     a3c:	54 e0       	ldi	r21, 0x04	; 4
     a3e:	c4 d5       	rcall	.+2952   	; 0x15c8 <USB_GetNextDescriptorComp>
     a40:	88 23       	and	r24, r24
     a42:	d9 f5       	brne	.+118    	; 0xaba <ProcessConfigurationDescriptor+0x11c>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     a44:	69 80       	ldd	r6, Y+1	; 0x01
     a46:	7a 80       	ldd	r7, Y+2	; 0x02

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
			EventsEndpoint  = NULL;
     a48:	cc 24       	eor	r12, r12
     a4a:	dd 24       	eor	r13, r13
			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
     a4c:	ee 24       	eor	r14, r14
     a4e:	ff 24       	eor	r15, r15
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     a50:	00 e0       	ldi	r16, 0x00	; 0
     a52:	10 e0       	ldi	r17, 0x00	; 0
     a54:	e4 cf       	rjmp	.-56     	; 0xa1e <ProcessConfigurationDescriptor+0x80>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     a56:	e9 81       	ldd	r30, Y+1	; 0x01
     a58:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     a5a:	82 81       	ldd	r24, Z+2	; 0x02
     a5c:	87 ff       	sbrs	r24, 7
     a5e:	06 c0       	rjmp	.+12     	; 0xa6c <ProcessConfigurationDescriptor+0xce>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     a60:	83 81       	ldd	r24, Z+3	; 0x03
     a62:	83 70       	andi	r24, 0x03	; 3
     a64:	83 30       	cpi	r24, 0x03	; 3
     a66:	21 f4       	brne	.+8      	; 0xa70 <ProcessConfigurationDescriptor+0xd2>
			  EventsEndpoint = EndpointData;
     a68:	6f 01       	movw	r12, r30
     a6a:	03 c0       	rjmp	.+6      	; 0xa72 <ProcessConfigurationDescriptor+0xd4>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
     a6c:	7f 01       	movw	r14, r30
     a6e:	01 c0       	rjmp	.+2      	; 0xa72 <ProcessConfigurationDescriptor+0xd4>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  EventsEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
     a70:	8f 01       	movw	r16, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     a72:	01 15       	cp	r16, r1
     a74:	11 05       	cpc	r17, r1
     a76:	99 f2       	breq	.-90     	; 0xa1e <ProcessConfigurationDescriptor+0x80>
     a78:	e1 14       	cp	r14, r1
     a7a:	f1 04       	cpc	r15, r1
     a7c:	81 f2       	breq	.-96     	; 0xa1e <ProcessConfigurationDescriptor+0x80>
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the Still Image data IN pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     a7e:	f8 01       	movw	r30, r16
     a80:	24 81       	ldd	r18, Z+4	; 0x04
     a82:	35 81       	ldd	r19, Z+5	; 0x05
     a84:	81 e8       	ldi	r24, 0x81	; 129
     a86:	62 e0       	ldi	r22, 0x02	; 2
     a88:	42 81       	ldd	r20, Z+2	; 0x02
     a8a:	01 e0       	ldi	r16, 0x01	; 1
     a8c:	7e d3       	rcall	.+1788   	; 0x118a <Pipe_ConfigurePipe>

	/* Configure the Still Image data OUT pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     a8e:	f7 01       	movw	r30, r14
     a90:	24 81       	ldd	r18, Z+4	; 0x04
     a92:	35 81       	ldd	r19, Z+5	; 0x05
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	42 81       	ldd	r20, Z+2	; 0x02
     a9a:	77 d3       	rcall	.+1774   	; 0x118a <Pipe_ConfigurePipe>

	/* Configure the Still Image events pipe */
	Pipe_ConfigurePipe(SIMAGE_EVENTS_PIPE, EP_TYPE_INTERRUPT, EventsEndpoint->EndpointAddress, EventsEndpoint->EndpointSize, 1);
     a9c:	f6 01       	movw	r30, r12
     a9e:	24 81       	ldd	r18, Z+4	; 0x04
     aa0:	35 81       	ldd	r19, Z+5	; 0x05
     aa2:	83 e8       	ldi	r24, 0x83	; 131
     aa4:	63 e0       	ldi	r22, 0x03	; 3
     aa6:	42 81       	ldd	r20, Z+2	; 0x02
     aa8:	70 d3       	rcall	.+1760   	; 0x118a <Pipe_ConfigurePipe>
	Pipe_SetInterruptPeriod(EventsEndpoint->PollingIntervalMS);
     aaa:	f6 01       	movw	r30, r12
     aac:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     aae:	80 93 ad 00 	sts	0x00AD, r24

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	03 c0       	rjmp	.+6      	; 0xabc <ProcessConfigurationDescriptor+0x11e>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <ProcessConfigurationDescriptor+0x11e>
			/* Get the next Still Image interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextStillImageInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     aba:	84 e0       	ldi	r24, 0x04	; 4
	Pipe_ConfigurePipe(SIMAGE_EVENTS_PIPE, EP_TYPE_INTERRUPT, EventsEndpoint->EndpointAddress, EventsEndpoint->EndpointSize, 1);
	Pipe_SetInterruptPeriod(EventsEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     abc:	cc 5f       	subi	r28, 0xFC	; 252
     abe:	dd 4f       	sbci	r29, 0xFD	; 253
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	cf 91       	pop	r28
     acc:	df 91       	pop	r29
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	bf 90       	pop	r11
     adc:	af 90       	pop	r10
     ade:	9f 90       	pop	r9
     ae0:	8f 90       	pop	r8
     ae2:	7f 90       	pop	r7
     ae4:	6f 90       	pop	r6
     ae6:	08 95       	ret

00000ae8 <SImage_SendBlockHeader>:
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     aee:	80 91 a9 00 	lds	r24, 0x00A9
     af2:	8f 7b       	andi	r24, 0xBF	; 191
     af4:	80 93 a9 00 	sts	0x00A9, r24
	/* Unfreeze the data OUT pipe ready for data transmission */
	Pipe_SelectPipe(SIMAGE_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Write the PIMA block to the data OUT pipe */
	Pipe_Write_Stream_LE(&PIMA_SendBlock, PIMA_COMMAND_SIZE(0), NULL);
     af8:	8d e2       	ldi	r24, 0x2D	; 45
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	6c e0       	ldi	r22, 0x0C	; 12
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	7c d2       	rcall	.+1272   	; 0xffe <Pipe_Write_Stream_LE>

	/* If the block type is a command, send its parameters (if any) */
	if (PIMA_SendBlock.Type == PIMA_CONTAINER_CommandBlock)
     b06:	80 91 31 01 	lds	r24, 0x0131
     b0a:	90 91 32 01 	lds	r25, 0x0132
     b0e:	81 30       	cpi	r24, 0x01	; 1
     b10:	91 05       	cpc	r25, r1
     b12:	79 f4       	brne	.+30     	; 0xb32 <SImage_SendBlockHeader+0x4a>
	{
		/* Determine the size of the parameters in the block via the data length attribute */
		uint8_t ParamBytes = (PIMA_SendBlock.DataLength - PIMA_COMMAND_SIZE(0));
     b14:	60 91 2d 01 	lds	r22, 0x012D
     b18:	6c 50       	subi	r22, 0x0C	; 12

		/* Check if any parameters in the command block */
		if (ParamBytes)
     b1a:	31 f0       	breq	.+12     	; 0xb28 <SImage_SendBlockHeader+0x40>
		{
			/* Write the PIMA parameters to the data OUT pipe */
			Pipe_Write_Stream_LE(&PIMA_SendBlock.Params, ParamBytes, NULL);
     b1c:	89 e3       	ldi	r24, 0x39	; 57
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	40 e0       	ldi	r20, 0x00	; 0
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	6b d2       	rcall	.+1238   	; 0xffe <Pipe_Write_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     b28:	80 91 a6 00 	lds	r24, 0x00A6
     b2c:	8b 77       	andi	r24, 0x7B	; 123
     b2e:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b32:	80 91 a9 00 	lds	r24, 0x00A9
     b36:	80 64       	ori	r24, 0x40	; 64
     b38:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearOUT();
	}

	/* Freeze pipe after use */
	Pipe_Freeze();
}
     b3c:	08 95       	ret

00000b3e <SImage_ReceiveBlockHeader>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b3e:	20 91 a2 00 	lds	r18, 0x00A2
     b42:	30 91 a3 00 	lds	r19, 0x00A3
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b4c:	80 91 a9 00 	lds	r24, 0x00A9
     b50:	8f 7b       	andi	r24, 0xBF	; 191
     b52:	80 93 a9 00 	sts	0x00A9, r24
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t SImage_ReceiveBlockHeader(void)
{
	uint16_t TimeoutMSRem        = COMMAND_DATA_TIMEOUT_MS;
     b56:	80 e1       	ldi	r24, 0x10	; 16
     b58:	97 e2       	ldi	r25, 0x27	; 39
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b5a:	72 e0       	ldi	r23, 0x02	; 2
     b5c:	61 e0       	ldi	r22, 0x01	; 1
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received on the IN pipe */
	while (!(Pipe_IsINReceived()))
     b5e:	3c c0       	rjmp	.+120    	; 0xbd8 <SImage_ReceiveBlockHeader+0x9a>
     b60:	40 91 a2 00 	lds	r20, 0x00A2
     b64:	50 91 a3 00 	lds	r21, 0x00A3
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		/* Check to see if a new frame has been issued (1ms elapsed) */
		if (CurrentFrameNumber != PreviousFrameNumber)
     b68:	42 17       	cp	r20, r18
     b6a:	53 07       	cpc	r21, r19
     b6c:	21 f0       	breq	.+8      	; 0xb76 <SImage_ReceiveBlockHeader+0x38>
		{
			/* Save the new frame number and decrement the timeout period */
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;
     b6e:	01 97       	sbiw	r24, 0x01	; 1

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
     b70:	09 f4       	brne	.+2      	; 0xb74 <SImage_ReceiveBlockHeader+0x36>
     b72:	5a c0       	rjmp	.+180    	; 0xc28 <SImage_ReceiveBlockHeader+0xea>
     b74:	9a 01       	movw	r18, r20

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b76:	40 91 a9 00 	lds	r20, 0x00A9
     b7a:	40 64       	ori	r20, 0x40	; 64
     b7c:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b80:	70 93 a7 00 	sts	0x00A7, r23

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b84:	40 91 a9 00 	lds	r20, 0x00A9
     b88:	4f 7b       	andi	r20, 0xBF	; 191
     b8a:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b8e:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(SIMAGE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     b92:	41 fd       	sbrc	r20, 1
     b94:	10 c0       	rjmp	.+32     	; 0xbb6 <SImage_ReceiveBlockHeader+0x78>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b96:	40 91 a9 00 	lds	r20, 0x00A9
     b9a:	40 64       	ori	r20, 0x40	; 64
     b9c:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ba0:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ba4:	40 91 a9 00 	lds	r20, 0x00A9
     ba8:	4f 7b       	andi	r20, 0xBF	; 191
     baa:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bae:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     bb2:	41 ff       	sbrs	r20, 1
     bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <SImage_ReceiveBlockHeader+0x92>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     bb6:	90 91 aa 00 	lds	r25, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     bba:	29 2f       	mov	r18, r25
     bbc:	2f 70       	andi	r18, 0x0F	; 15
     bbe:	90 ff       	sbrs	r25, 0
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <SImage_ReceiveBlockHeader+0x88>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <SImage_ReceiveBlockHeader+0x8a>
     bc6:	80 e8       	ldi	r24, 0x80	; 128
		{
			/* Clear the stall condition on the IN pipe */
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
     bc8:	82 2b       	or	r24, r18
     bca:	8f d6       	rcall	.+3358   	; 0x18ea <USB_Host_ClearEndpointStall>

			/* Return error code */
			return PIPE_RWSTREAM_PipeStalled;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	08 95       	ret
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
     bd0:	40 91 67 01 	lds	r20, 0x0167
     bd4:	41 30       	cpi	r20, 0x01	; 1
     bd6:	51 f1       	breq	.+84     	; 0xc2c <SImage_ReceiveBlockHeader+0xee>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     bd8:	40 91 a6 00 	lds	r20, 0x00A6
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received on the IN pipe */
	while (!(Pipe_IsINReceived()))
     bdc:	40 ff       	sbrs	r20, 0
     bde:	c0 cf       	rjmp	.-128    	; 0xb60 <SImage_ReceiveBlockHeader+0x22>
		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	/* Load in the response from the attached device */
	Pipe_Read_Stream_LE(&PIMA_ReceivedBlock, PIMA_COMMAND_SIZE(0), NULL);
     be0:	85 e4       	ldi	r24, 0x45	; 69
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	6c e0       	ldi	r22, 0x0C	; 12
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	6b d2       	rcall	.+1238   	; 0x10c4 <Pipe_Read_Stream_LE>

	/* Check if the returned block type is a response block */
	if (PIMA_ReceivedBlock.Type == PIMA_CONTAINER_ResponseBlock)
     bee:	80 91 49 01 	lds	r24, 0x0149
     bf2:	90 91 4a 01 	lds	r25, 0x014A
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	91 05       	cpc	r25, r1
     bfa:	79 f4       	brne	.+30     	; 0xc1a <SImage_ReceiveBlockHeader+0xdc>
	{
		/* Determine the size of the parameters in the block via the data length attribute */
		uint8_t ParamBytes = (PIMA_ReceivedBlock.DataLength - PIMA_COMMAND_SIZE(0));
     bfc:	60 91 45 01 	lds	r22, 0x0145
     c00:	6c 50       	subi	r22, 0x0C	; 12

		/* Check if the device has returned any parameters */
		if (ParamBytes)
     c02:	31 f0       	breq	.+12     	; 0xc10 <SImage_ReceiveBlockHeader+0xd2>
		{
			/* Read the PIMA parameters from the data IN pipe */
			Pipe_Read_Stream_LE(&PIMA_ReceivedBlock.Params, ParamBytes, NULL);
     c04:	81 e5       	ldi	r24, 0x51	; 81
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	5a d2       	rcall	.+1204   	; 0x10c4 <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     c10:	80 91 a6 00 	lds	r24, 0x00A6
     c14:	8e 77       	andi	r24, 0x7E	; 126
     c16:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c1a:	80 91 a9 00 	lds	r24, 0x00A9
     c1e:	80 64       	ori	r24, 0x40	; 64
     c20:	80 93 a9 00 	sts	0x00A9, r24
	}

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	08 95       	ret
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
			  return PIPE_RWSTREAM_Timeout;
     c28:	83 e0       	ldi	r24, 0x03	; 3
     c2a:	08 95       	ret
			return PIPE_RWSTREAM_PipeStalled;
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
     c2c:	82 e0       	ldi	r24, 0x02	; 2

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     c2e:	08 95       	ret

00000c30 <SImage_ReadData>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t SImage_ReadData(void* const Buffer,
                        const uint16_t Bytes)
{
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c34:	21 e0       	ldi	r18, 0x01	; 1
     c36:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c3a:	c9 ea       	ldi	r28, 0xA9	; 169
     c3c:	d0 e0       	ldi	r29, 0x00	; 0
     c3e:	28 81       	ld	r18, Y
     c40:	2f 7b       	andi	r18, 0xBF	; 191
     c42:	28 83       	st	Y, r18
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Read in the data into the buffer */
	ErrorCode = Pipe_Read_Stream_LE(Buffer, Bytes, NULL);
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	3d d2       	rcall	.+1146   	; 0x10c4 <Pipe_Read_Stream_LE>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c4a:	98 81       	ld	r25, Y
     c4c:	90 64       	ori	r25, 0x40	; 64
     c4e:	98 83       	st	Y, r25

	/* Freeze the pipe again after use */
	Pipe_Freeze();

	return ErrorCode;
}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     c56:	80 91 9e 00 	lds	r24, 0x009E
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	81 70       	andi	r24, 0x01	; 1
     c5e:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c60:	20 91 a0 00 	lds	r18, 0x00A0
     c64:	2d 7f       	andi	r18, 0xFD	; 253
     c66:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     c6a:	20 91 9e 00 	lds	r18, 0x009E
     c6e:	22 60       	ori	r18, 0x02	; 2
     c70:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     c74:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     c78:	21 fd       	sbrc	r18, 1
     c7a:	fc cf       	rjmp	.-8      	; 0xc74 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     c7c:	20 91 9e 00 	lds	r18, 0x009E
     c80:	21 60       	ori	r18, 0x01	; 1
     c82:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     c86:	10 92 5d 01 	sts	0x015D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c8a:	20 91 a0 00 	lds	r18, 0x00A0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	20 72       	andi	r18, 0x20	; 32
     c92:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     c94:	40 91 a0 00 	lds	r20, 0x00A0
     c98:	4f 7d       	andi	r20, 0xDF	; 223
     c9a:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c9e:	40 91 9f 00 	lds	r20, 0x009F
     ca2:	4f 7d       	andi	r20, 0xDF	; 223
     ca4:	40 93 9f 00 	sts	0x009F, r20
     ca8:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     caa:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     cae:	55 ff       	sbrs	r21, 5
     cb0:	0b c0       	rjmp	.+22     	; 0xcc8 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     cb2:	40 91 9f 00 	lds	r20, 0x009F
     cb6:	4f 7d       	andi	r20, 0xDF	; 223
     cb8:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     cbc:	40 91 9f 00 	lds	r20, 0x009F
     cc0:	4d 7f       	andi	r20, 0xFD	; 253
     cc2:	40 93 9f 00 	sts	0x009F, r20
     cc6:	08 c0       	rjmp	.+16     	; 0xcd8 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc8:	ef ec       	ldi	r30, 0xCF	; 207
     cca:	f7 e0       	ldi	r31, 0x07	; 7
     ccc:	31 97       	sbiw	r30, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <USB_Host_ResetDevice+0x76>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <USB_Host_ResetDevice+0x7c>
     cd2:	00 00       	nop
     cd4:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     cd6:	49 f7       	brne	.-46     	; 0xcaa <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     cd8:	21 15       	cp	r18, r1
     cda:	31 05       	cpc	r19, r1
     cdc:	29 f0       	breq	.+10     	; 0xce8 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     cde:	20 91 a0 00 	lds	r18, 0x00A0
     ce2:	20 62       	ori	r18, 0x20	; 32
     ce4:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	29 f4       	brne	.+10     	; 0xcf6 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     cec:	80 91 9e 00 	lds	r24, 0x009E
     cf0:	8e 7f       	andi	r24, 0xFE	; 254
     cf2:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     cf6:	80 91 a0 00 	lds	r24, 0x00A0
     cfa:	82 60       	ori	r24, 0x02	; 2
     cfc:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     d00:	08 95       	ret

00000d02 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     d02:	40 91 9e 00 	lds	r20, 0x009E
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	41 70       	andi	r20, 0x01	; 1
     d0a:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d0c:	20 91 a0 00 	lds	r18, 0x00A0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	20 72       	andi	r18, 0x20	; 32
     d14:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     d16:	90 91 a0 00 	lds	r25, 0x00A0
     d1a:	9f 7d       	andi	r25, 0xDF	; 223
     d1c:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d20:	90 91 9f 00 	lds	r25, 0x009F
     d24:	9f 7d       	andi	r25, 0xDF	; 223
     d26:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     d2a:	90 91 9e 00 	lds	r25, 0x009E
     d2e:	91 60       	ori	r25, 0x01	; 1
     d30:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     d34:	26 c0       	rjmp	.+76     	; 0xd82 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d36:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     d3a:	95 ff       	sbrs	r25, 5
     d3c:	06 c0       	rjmp	.+12     	; 0xd4a <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d3e:	90 91 9f 00 	lds	r25, 0x009F
     d42:	9f 7d       	andi	r25, 0xDF	; 223
     d44:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     d48:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     d4a:	90 91 67 01 	lds	r25, 0x0167
     d4e:	91 30       	cpi	r25, 0x01	; 1
     d50:	d9 f0       	breq	.+54     	; 0xd88 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     d52:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     d56:	94 ff       	sbrs	r25, 4
     d58:	09 c0       	rjmp	.+18     	; 0xd6c <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     d5a:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     d5e:	80 91 a6 00 	lds	r24, 0x00A6
     d62:	8f 7e       	andi	r24, 0xEF	; 239
     d64:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     d68:	82 e0       	ldi	r24, 0x02	; 2

			break;
     d6a:	0f c0       	rjmp	.+30     	; 0xd8a <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     d6c:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     d70:	91 ff       	sbrs	r25, 1
     d72:	07 c0       	rjmp	.+14     	; 0xd82 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     d74:	80 91 a6 00 	lds	r24, 0x00A6
     d78:	8d 7f       	andi	r24, 0xFD	; 253
     d7a:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     d7e:	83 e0       	ldi	r24, 0x03	; 3

			break;
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     d82:	88 23       	and	r24, r24
     d84:	c1 f6       	brne	.-80     	; 0xd36 <USB_Host_WaitMS+0x34>
     d86:	01 c0       	rjmp	.+2      	; 0xd8a <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     d88:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     d8a:	41 15       	cp	r20, r1
     d8c:	51 05       	cpc	r21, r1
     d8e:	29 f4       	brne	.+10     	; 0xd9a <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     d90:	90 91 9e 00 	lds	r25, 0x009E
     d94:	9e 7f       	andi	r25, 0xFE	; 254
     d96:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     d9a:	21 15       	cp	r18, r1
     d9c:	31 05       	cpc	r19, r1
     d9e:	29 f0       	breq	.+10     	; 0xdaa <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     da0:	90 91 a0 00 	lds	r25, 0x00A0
     da4:	90 62       	ori	r25, 0x20	; 32
     da6:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     daa:	08 95       	ret

00000dac <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	28 97       	sbiw	r28, 0x08	; 8
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     dc4:	80 91 67 01 	lds	r24, 0x0167
     dc8:	85 30       	cpi	r24, 0x05	; 5
     dca:	09 f4       	brne	.+2      	; 0xdce <USB_Host_ProcessNextHostState+0x22>
     dcc:	99 c0       	rjmp	.+306    	; 0xf00 <USB_Host_ProcessNextHostState+0x154>
     dce:	86 30       	cpi	r24, 0x06	; 6
     dd0:	68 f4       	brcc	.+26     	; 0xdec <USB_Host_ProcessNextHostState+0x40>
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	c1 f1       	breq	.+112    	; 0xe46 <USB_Host_ProcessNextHostState+0x9a>
     dd6:	83 30       	cpi	r24, 0x03	; 3
     dd8:	18 f4       	brcc	.+6      	; 0xde0 <USB_Host_ProcessNextHostState+0x34>
     dda:	88 23       	and	r24, r24
     ddc:	a1 f0       	breq	.+40     	; 0xe06 <USB_Host_ProcessNextHostState+0x5a>
     dde:	04 c1       	rjmp	.+520    	; 0xfe8 <USB_Host_ProcessNextHostState+0x23c>
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	d9 f1       	breq	.+118    	; 0xe5a <USB_Host_ProcessNextHostState+0xae>
     de4:	84 30       	cpi	r24, 0x04	; 4
     de6:	09 f0       	breq	.+2      	; 0xdea <USB_Host_ProcessNextHostState+0x3e>
     de8:	ff c0       	rjmp	.+510    	; 0xfe8 <USB_Host_ProcessNextHostState+0x23c>
     dea:	62 c0       	rjmp	.+196    	; 0xeb0 <USB_Host_ProcessNextHostState+0x104>
     dec:	87 30       	cpi	r24, 0x07	; 7
     dee:	09 f4       	brne	.+2      	; 0xdf2 <USB_Host_ProcessNextHostState+0x46>
     df0:	9e c0       	rjmp	.+316    	; 0xf2e <USB_Host_ProcessNextHostState+0x182>
     df2:	87 30       	cpi	r24, 0x07	; 7
     df4:	08 f4       	brcc	.+2      	; 0xdf8 <USB_Host_ProcessNextHostState+0x4c>
     df6:	8f c0       	rjmp	.+286    	; 0xf16 <USB_Host_ProcessNextHostState+0x16a>
     df8:	88 30       	cpi	r24, 0x08	; 8
     dfa:	09 f4       	brne	.+2      	; 0xdfe <USB_Host_ProcessNextHostState+0x52>
     dfc:	b8 c0       	rjmp	.+368    	; 0xf6e <USB_Host_ProcessNextHostState+0x1c2>
     dfe:	89 30       	cpi	r24, 0x09	; 9
     e00:	09 f0       	breq	.+2      	; 0xe04 <USB_Host_ProcessNextHostState+0x58>
     e02:	f2 c0       	rjmp	.+484    	; 0xfe8 <USB_Host_ProcessNextHostState+0x23c>
     e04:	d9 c0       	rjmp	.+434    	; 0xfb8 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     e06:	00 91 13 01 	lds	r16, 0x0113
     e0a:	10 91 14 01 	lds	r17, 0x0114
     e0e:	01 15       	cp	r16, r1
     e10:	11 05       	cpc	r17, r1
     e12:	09 f4       	brne	.+2      	; 0xe16 <USB_Host_ProcessNextHostState+0x6a>
     e14:	e9 c0       	rjmp	.+466    	; 0xfe8 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	74 df       	rcall	.-280    	; 0xd02 <USB_Host_WaitMS>
     e1a:	68 2f       	mov	r22, r24
     e1c:	88 23       	and	r24, r24
     e1e:	31 f0       	breq	.+12     	; 0xe2c <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     e20:	80 91 12 01 	lds	r24, 0x0112
     e24:	80 93 67 01 	sts	0x0167, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     e28:	81 e0       	ldi	r24, 0x01	; 1
					break;
     e2a:	d2 c0       	rjmp	.+420    	; 0xfd0 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     e2c:	01 50       	subi	r16, 0x01	; 1
     e2e:	10 40       	sbci	r17, 0x00	; 0
     e30:	10 93 14 01 	sts	0x0114, r17
     e34:	00 93 13 01 	sts	0x0113, r16
     e38:	01 15       	cp	r16, r1
     e3a:	11 05       	cpc	r17, r1
     e3c:	09 f0       	breq	.+2      	; 0xe40 <USB_Host_ProcessNextHostState+0x94>
     e3e:	d4 c0       	rjmp	.+424    	; 0xfe8 <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     e40:	80 91 12 01 	lds	r24, 0x0112
     e44:	07 c0       	rjmp	.+14     	; 0xe54 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     e46:	88 ee       	ldi	r24, 0xE8	; 232
     e48:	93 e0       	ldi	r25, 0x03	; 3
     e4a:	90 93 14 01 	sts	0x0114, r25
     e4e:	80 93 13 01 	sts	0x0113, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     e52:	83 e0       	ldi	r24, 0x03	; 3
     e54:	80 93 67 01 	sts	0x0167, r24
			break;
     e58:	c7 c0       	rjmp	.+398    	; 0xfe8 <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     e5a:	80 91 13 01 	lds	r24, 0x0113
     e5e:	90 91 14 01 	lds	r25, 0x0114
     e62:	9c 01       	movw	r18, r24
     e64:	21 50       	subi	r18, 0x01	; 1
     e66:	30 40       	sbci	r19, 0x00	; 0
     e68:	30 93 14 01 	sts	0x0114, r19
     e6c:	20 93 13 01 	sts	0x0113, r18
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	39 f0       	breq	.+14     	; 0xe82 <USB_Host_ProcessNextHostState+0xd6>
     e74:	8f ec       	ldi	r24, 0xCF	; 207
     e76:	97 e0       	ldi	r25, 0x07	; 7
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <USB_Host_ProcessNextHostState+0xcc>
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <USB_Host_ProcessNextHostState+0xd2>
     e7e:	00 00       	nop
     e80:	b3 c0       	rjmp	.+358    	; 0xfe8 <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     e82:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     e84:	80 91 d8 00 	lds	r24, 0x00D8
     e88:	80 61       	ori	r24, 0x10	; 16
     e8a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     e8e:	80 91 dd 00 	lds	r24, 0x00DD
     e92:	8b 7f       	andi	r24, 0xFB	; 251
     e94:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     e98:	80 91 d7 00 	lds	r24, 0x00D7
     e9c:	80 61       	ori	r24, 0x10	; 16
     e9e:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     ea2:	80 91 dd 00 	lds	r24, 0x00DD
     ea6:	82 60       	ori	r24, 0x02	; 2
     ea8:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     eac:	84 e0       	ldi	r24, 0x04	; 4
     eae:	d2 cf       	rjmp	.-92     	; 0xe54 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     eb0:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     eb4:	80 ff       	sbrs	r24, 0
     eb6:	98 c0       	rjmp	.+304    	; 0xfe8 <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     eb8:	80 91 9f 00 	lds	r24, 0x009F
     ebc:	8e 7f       	andi	r24, 0xFE	; 254
     ebe:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ec2:	80 91 9f 00 	lds	r24, 0x009F
     ec6:	8d 7f       	andi	r24, 0xFD	; 253
     ec8:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     ecc:	80 91 df 00 	lds	r24, 0x00DF
     ed0:	8d 7f       	andi	r24, 0xFD	; 253
     ed2:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     ed6:	80 91 de 00 	lds	r24, 0x00DE
     eda:	82 60       	ori	r24, 0x02	; 2
     edc:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     ee0:	80 91 9e 00 	lds	r24, 0x009E
     ee4:	81 60       	ori	r24, 0x01	; 1
     ee6:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     eea:	b6 d1       	rcall	.+876    	; 0x1258 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     eec:	10 92 67 01 	sts	0x0167, r1
     ef0:	84 e6       	ldi	r24, 0x64	; 100
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	90 93 14 01 	sts	0x0114, r25
     ef8:	80 93 13 01 	sts	0x0113, r24
     efc:	85 e0       	ldi	r24, 0x05	; 5
     efe:	59 c0       	rjmp	.+178    	; 0xfb2 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     f00:	aa de       	rcall	.-684    	; 0xc56 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     f02:	10 92 67 01 	sts	0x0167, r1
     f06:	88 ec       	ldi	r24, 0xC8	; 200
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	90 93 14 01 	sts	0x0114, r25
     f0e:	80 93 13 01 	sts	0x0113, r24
     f12:	86 e0       	ldi	r24, 0x06	; 6
     f14:	4e c0       	rjmp	.+156    	; 0xfb2 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	20 e4       	ldi	r18, 0x40	; 64
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	01 e0       	ldi	r16, 0x01	; 1
     f22:	33 d1       	rcall	.+614    	; 0x118a <Pipe_ConfigurePipe>
     f24:	88 23       	and	r24, r24
     f26:	09 f4       	brne	.+2      	; 0xf2a <USB_Host_ProcessNextHostState+0x17e>
     f28:	4f c0       	rjmp	.+158    	; 0xfc8 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     f2a:	87 e0       	ldi	r24, 0x07	; 7
     f2c:	93 cf       	rjmp	.-218    	; 0xe54 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     f2e:	af e5       	ldi	r26, 0x5F	; 95
     f30:	b1 e0       	ldi	r27, 0x01	; 1
     f32:	e8 e0       	ldi	r30, 0x08	; 8
     f34:	f1 e0       	ldi	r31, 0x01	; 1
     f36:	88 e0       	ldi	r24, 0x08	; 8
     f38:	01 90       	ld	r0, Z+
     f3a:	0d 92       	st	X+, r0
     f3c:	81 50       	subi	r24, 0x01	; 1
     f3e:	e1 f7       	brne	.-8      	; 0xf38 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     f40:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     f44:	ce 01       	movw	r24, r28
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	ac d3       	rcall	.+1880   	; 0x16a2 <USB_Host_SendControlRequest>
     f4a:	68 2f       	mov	r22, r24
     f4c:	88 23       	and	r24, r24
     f4e:	09 f0       	breq	.+2      	; 0xf52 <USB_Host_ProcessNextHostState+0x1a6>
     f50:	3e c0       	rjmp	.+124    	; 0xfce <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     f52:	88 85       	ldd	r24, Y+8	; 0x08
     f54:	80 93 10 01 	sts	0x0110, r24

			USB_Host_ResetDevice();
     f58:	7e de       	rcall	.-772    	; 0xc56 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     f5a:	10 92 67 01 	sts	0x0167, r1
     f5e:	88 ec       	ldi	r24, 0xC8	; 200
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	90 93 14 01 	sts	0x0114, r25
     f66:	80 93 13 01 	sts	0x0113, r24
     f6a:	88 e0       	ldi	r24, 0x08	; 8
     f6c:	22 c0       	rjmp	.+68     	; 0xfb2 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     f6e:	20 91 10 01 	lds	r18, 0x0110
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	01 e0       	ldi	r16, 0x01	; 1
     f7c:	06 d1       	rcall	.+524    	; 0x118a <Pipe_ConfigurePipe>
     f7e:	88 23       	and	r24, r24
     f80:	19 f1       	breq	.+70     	; 0xfc8 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     f82:	af e5       	ldi	r26, 0x5F	; 95
     f84:	b1 e0       	ldi	r27, 0x01	; 1
     f86:	e0 e0       	ldi	r30, 0x00	; 0
     f88:	f1 e0       	ldi	r31, 0x01	; 1
     f8a:	88 e0       	ldi	r24, 0x08	; 8
     f8c:	01 90       	ld	r0, Z+
     f8e:	0d 92       	st	X+, r0
     f90:	81 50       	subi	r24, 0x01	; 1
     f92:	e1 f7       	brne	.-8      	; 0xf8c <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	84 d3       	rcall	.+1800   	; 0x16a2 <USB_Host_SendControlRequest>
     f9a:	68 2f       	mov	r22, r24
     f9c:	88 23       	and	r24, r24
     f9e:	b9 f4       	brne	.+46     	; 0xfce <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     fa0:	10 92 67 01 	sts	0x0167, r1
     fa4:	84 e6       	ldi	r24, 0x64	; 100
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	90 93 14 01 	sts	0x0114, r25
     fac:	80 93 13 01 	sts	0x0113, r24
     fb0:	89 e0       	ldi	r24, 0x09	; 9
     fb2:	80 93 12 01 	sts	0x0112, r24
			break;
     fb6:	18 c0       	rjmp	.+48     	; 0xfe8 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     fbe:	8a e0       	ldi	r24, 0x0A	; 10
     fc0:	80 93 67 01 	sts	0x0167, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     fc4:	17 da       	rcall	.-3026   	; 0x3f4 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     fc6:	10 c0       	rjmp	.+32     	; 0xfe8 <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     fc8:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     fca:	84 e0       	ldi	r24, 0x04	; 4
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     fce:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     fd0:	90 91 67 01 	lds	r25, 0x0167
     fd4:	91 30       	cpi	r25, 0x01	; 1
     fd6:	41 f0       	breq	.+16     	; 0xfe8 <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     fd8:	72 da       	rcall	.-2844   	; 0x4be <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     fda:	80 91 dd 00 	lds	r24, 0x00DD
     fde:	81 60       	ori	r24, 0x01	; 1
     fe0:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     fe4:	01 da       	rcall	.-3070   	; 0x3e8 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     fe6:	95 d1       	rcall	.+810    	; 0x1312 <USB_ResetInterface>
	}
}
     fe8:	28 96       	adiw	r28, 0x08	; 8
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     ffe:	8f 92       	push	r8
    1000:	9f 92       	push	r9
    1002:	bf 92       	push	r11
    1004:	cf 92       	push	r12
    1006:	df 92       	push	r13
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	0f 92       	push	r0
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	e8 2e       	mov	r14, r24
    101c:	4b 01       	movw	r8, r22
    101e:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1020:	80 91 aa 00 	lds	r24, 0x00AA
    1024:	8f 7c       	andi	r24, 0xCF	; 207
    1026:	80 62       	ori	r24, 0x20	; 32
    1028:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    102c:	99 83       	std	Y+1, r25	; 0x01
    102e:	2a d1       	rcall	.+596    	; 0x1284 <Pipe_WaitUntilReady>
    1030:	b8 2e       	mov	r11, r24
    1032:	99 81       	ldd	r25, Y+1	; 0x01
    1034:	88 23       	and	r24, r24
    1036:	c1 f5       	brne	.+112    	; 0x10a8 <Pipe_Write_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1038:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    103a:	01 15       	cp	r16, r1
    103c:	11 05       	cpc	r17, r1
    103e:	39 f0       	breq	.+14     	; 0x104e <Pipe_Write_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    1040:	f8 01       	movw	r30, r16
    1042:	20 81       	ld	r18, Z
    1044:	31 81       	ldd	r19, Z+1	; 0x01
    1046:	82 1a       	sub	r8, r18
    1048:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    104a:	e2 0e       	add	r14, r18
    104c:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    104e:	cc 24       	eor	r12, r12
    1050:	dd 24       	eor	r13, r13
    1052:	25 c0       	rjmp	.+74     	; 0x109e <Pipe_Write_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1054:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1058:	85 fd       	sbrc	r24, 5
    105a:	16 c0       	rjmp	.+44     	; 0x1088 <Pipe_Write_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    105c:	80 91 a6 00 	lds	r24, 0x00A6
    1060:	8b 77       	andi	r24, 0x7B	; 123
    1062:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1066:	01 15       	cp	r16, r1
    1068:	11 05       	cpc	r17, r1
    106a:	51 f0       	breq	.+20     	; 0x1080 <Pipe_Write_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    106c:	f8 01       	movw	r30, r16
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	8c 0d       	add	r24, r12
    1074:	9d 1d       	adc	r25, r13
    1076:	91 83       	std	Z+1, r25	; 0x01
    1078:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    107a:	24 e0       	ldi	r18, 0x04	; 4
    107c:	b2 2e       	mov	r11, r18
    107e:	14 c0       	rjmp	.+40     	; 0x10a8 <Pipe_Write_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1080:	01 d1       	rcall	.+514    	; 0x1284 <Pipe_WaitUntilReady>
    1082:	88 23       	and	r24, r24
    1084:	61 f0       	breq	.+24     	; 0x109e <Pipe_Write_Stream_LE+0xa0>
    1086:	0f c0       	rjmp	.+30     	; 0x10a6 <Pipe_Write_Stream_LE+0xa8>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1088:	f7 01       	movw	r30, r14
    108a:	81 91       	ld	r24, Z+
    108c:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    108e:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1092:	08 94       	sec
    1094:	81 08       	sbc	r8, r1
    1096:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    1098:	08 94       	sec
    109a:	c1 1c       	adc	r12, r1
    109c:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    109e:	81 14       	cp	r8, r1
    10a0:	91 04       	cpc	r9, r1
    10a2:	c1 f6       	brne	.-80     	; 0x1054 <Pipe_Write_Stream_LE+0x56>
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <Pipe_Write_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    10a6:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    10a8:	8b 2d       	mov	r24, r11
    10aa:	0f 90       	pop	r0
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	bf 90       	pop	r11
    10be:	9f 90       	pop	r9
    10c0:	8f 90       	pop	r8
    10c2:	08 95       	ret

000010c4 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    10c4:	8f 92       	push	r8
    10c6:	9f 92       	push	r9
    10c8:	bf 92       	push	r11
    10ca:	cf 92       	push	r12
    10cc:	df 92       	push	r13
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	e8 2e       	mov	r14, r24
    10e2:	4b 01       	movw	r8, r22
    10e4:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10e6:	80 91 aa 00 	lds	r24, 0x00AA
    10ea:	8f 7c       	andi	r24, 0xCF	; 207
    10ec:	80 61       	ori	r24, 0x10	; 16
    10ee:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    10f2:	99 83       	std	Y+1, r25	; 0x01
    10f4:	c7 d0       	rcall	.+398    	; 0x1284 <Pipe_WaitUntilReady>
    10f6:	b8 2e       	mov	r11, r24
    10f8:	99 81       	ldd	r25, Y+1	; 0x01
    10fa:	88 23       	and	r24, r24
    10fc:	c1 f5       	brne	.+112    	; 0x116e <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    10fe:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1100:	01 15       	cp	r16, r1
    1102:	11 05       	cpc	r17, r1
    1104:	39 f0       	breq	.+14     	; 0x1114 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    1106:	f8 01       	movw	r30, r16
    1108:	20 81       	ld	r18, Z
    110a:	31 81       	ldd	r19, Z+1	; 0x01
    110c:	82 1a       	sub	r8, r18
    110e:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1110:	e2 0e       	add	r14, r18
    1112:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1114:	cc 24       	eor	r12, r12
    1116:	dd 24       	eor	r13, r13
    1118:	25 c0       	rjmp	.+74     	; 0x1164 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    111a:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    111e:	85 fd       	sbrc	r24, 5
    1120:	16 c0       	rjmp	.+44     	; 0x114e <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1122:	80 91 a6 00 	lds	r24, 0x00A6
    1126:	8e 77       	andi	r24, 0x7E	; 126
    1128:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    112c:	01 15       	cp	r16, r1
    112e:	11 05       	cpc	r17, r1
    1130:	51 f0       	breq	.+20     	; 0x1146 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    1132:	f8 01       	movw	r30, r16
    1134:	80 81       	ld	r24, Z
    1136:	91 81       	ldd	r25, Z+1	; 0x01
    1138:	8c 0d       	add	r24, r12
    113a:	9d 1d       	adc	r25, r13
    113c:	91 83       	std	Z+1, r25	; 0x01
    113e:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    1140:	44 e0       	ldi	r20, 0x04	; 4
    1142:	b4 2e       	mov	r11, r20
    1144:	14 c0       	rjmp	.+40     	; 0x116e <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1146:	9e d0       	rcall	.+316    	; 0x1284 <Pipe_WaitUntilReady>
    1148:	88 23       	and	r24, r24
    114a:	61 f0       	breq	.+24     	; 0x1164 <Pipe_Read_Stream_LE+0xa0>
    114c:	0f c0       	rjmp	.+30     	; 0x116c <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    114e:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1152:	f7 01       	movw	r30, r14
    1154:	81 93       	st	Z+, r24
    1156:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1158:	08 94       	sec
    115a:	81 08       	sbc	r8, r1
    115c:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    115e:	08 94       	sec
    1160:	c1 1c       	adc	r12, r1
    1162:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1164:	81 14       	cp	r8, r1
    1166:	91 04       	cpc	r9, r1
    1168:	c1 f6       	brne	.-80     	; 0x111a <Pipe_Read_Stream_LE+0x56>
    116a:	01 c0       	rjmp	.+2      	; 0x116e <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    116c:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    116e:	8b 2d       	mov	r24, r11
    1170:	0f 90       	pop	r0
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	ff 90       	pop	r15
    117c:	ef 90       	pop	r14
    117e:	df 90       	pop	r13
    1180:	cf 90       	pop	r12
    1182:	bf 90       	pop	r11
    1184:	9f 90       	pop	r9
    1186:	8f 90       	pop	r8
    1188:	08 95       	ret

0000118a <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    118a:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    118c:	58 2f       	mov	r21, r24
    118e:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    1190:	87 ff       	sbrs	r24, 7
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <Pipe_ConfigurePipe+0xe>
    1194:	80 e1       	ldi	r24, 0x10	; 16
    1196:	01 c0       	rjmp	.+2      	; 0x119a <Pipe_ConfigurePipe+0x10>
    1198:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    119a:	57 30       	cpi	r21, 0x07	; 7
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <Pipe_ConfigurePipe+0x16>
    119e:	59 c0       	rjmp	.+178    	; 0x1252 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    11a0:	66 23       	and	r22, r22
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    11a4:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    11a6:	4f 70       	andi	r20, 0x0F	; 15
    11a8:	62 95       	swap	r22
    11aa:	66 0f       	add	r22, r22
    11ac:	66 0f       	add	r22, r22
    11ae:	60 7c       	andi	r22, 0xC0	; 192
    11b0:	64 2b       	or	r22, r20
    11b2:	68 2b       	or	r22, r24
    11b4:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    11b6:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11b8:	84 2f       	mov	r24, r20
    11ba:	8f 70       	andi	r24, 0x0F	; 15
    11bc:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    11c0:	45 17       	cp	r20, r21
    11c2:	a1 f4       	brne	.+40     	; 0x11ec <Pipe_ConfigurePipe+0x62>
    11c4:	88 e0       	ldi	r24, 0x08	; 8
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    11cc:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    11d2:	82 17       	cp	r24, r18
    11d4:	93 07       	cpc	r25, r19
    11d6:	10 f4       	brcc	.+4      	; 0x11dc <Pipe_ConfigurePipe+0x52>
    11d8:	75 30       	cpi	r23, 0x05	; 5
    11da:	c1 f7       	brne	.-16     	; 0x11cc <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    11dc:	87 2f       	mov	r24, r23
    11de:	82 95       	swap	r24
    11e0:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    11e2:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    11e4:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    11e6:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    11e8:	e0 e0       	ldi	r30, 0x00	; 0
    11ea:	08 c0       	rjmp	.+16     	; 0x11fc <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    11ec:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    11f0:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    11f4:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    11f8:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    11fc:	81 ff       	sbrs	r24, 1
    11fe:	20 c0       	rjmp	.+64     	; 0x1240 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1200:	90 91 a9 00 	lds	r25, 0x00A9
    1204:	9e 7f       	andi	r25, 0xFE	; 254
    1206:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    120a:	90 91 ab 00 	lds	r25, 0x00AB
    120e:	9d 7f       	andi	r25, 0xFD	; 253
    1210:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    1214:	90 91 a9 00 	lds	r25, 0x00A9
    1218:	91 60       	ori	r25, 0x01	; 1
    121a:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    121e:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    1222:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    1226:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    122a:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    122e:	80 91 a9 00 	lds	r24, 0x00A9
    1232:	80 62       	ori	r24, 0x20	; 32
    1234:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1238:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    123c:	87 ff       	sbrs	r24, 7
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1240:	4f 5f       	subi	r20, 0xFF	; 255
    1242:	47 30       	cpi	r20, 0x07	; 7
    1244:	09 f0       	breq	.+2      	; 0x1248 <Pipe_ConfigurePipe+0xbe>
    1246:	b8 cf       	rjmp	.-144    	; 0x11b8 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1248:	5f 70       	andi	r21, 0x0F	; 15
    124a:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    1252:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1254:	0f 91       	pop	r16
    1256:	08 95       	ret

00001258 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    1258:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	98 2f       	mov	r25, r24
    1260:	9f 70       	andi	r25, 0x0F	; 15
    1262:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1266:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    126a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    126e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1272:	90 91 a9 00 	lds	r25, 0x00A9
    1276:	9e 7f       	andi	r25, 0xFE	; 254
    1278:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    127c:	8f 5f       	subi	r24, 0xFF	; 255
    127e:	87 30       	cpi	r24, 0x07	; 7
    1280:	71 f7       	brne	.-36     	; 0x125e <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1282:	08 95       	ret

00001284 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1284:	80 91 a2 00 	lds	r24, 0x00A2
    1288:	90 91 a3 00 	lds	r25, 0x00A3
}

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    128c:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    128e:	20 91 aa 00 	lds	r18, 0x00AA
    1292:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1294:	20 31       	cpi	r18, 0x10	; 16
    1296:	29 f4       	brne	.+10     	; 0x12a2 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1298:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    129c:	20 ff       	sbrs	r18, 0
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <Pipe_WaitUntilReady+0x26>
    12a0:	18 c0       	rjmp	.+48     	; 0x12d2 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    12a2:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    12a6:	22 fd       	sbrc	r18, 2
    12a8:	14 c0       	rjmp	.+40     	; 0x12d2 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    12aa:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    12ae:	21 fd       	sbrc	r18, 1
    12b0:	12 c0       	rjmp	.+36     	; 0x12d6 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    12b2:	20 91 67 01 	lds	r18, 0x0167
    12b6:	21 30       	cpi	r18, 0x01	; 1
    12b8:	81 f0       	breq	.+32     	; 0x12da <Pipe_WaitUntilReady+0x56>
    12ba:	20 91 a2 00 	lds	r18, 0x00A2
    12be:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    12c2:	28 17       	cp	r18, r24
    12c4:	39 07       	cpc	r19, r25
    12c6:	19 f3       	breq	.-58     	; 0x128e <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    12c8:	44 23       	and	r20, r20
    12ca:	49 f0       	breq	.+18     	; 0x12de <Pipe_WaitUntilReady+0x5a>
    12cc:	41 50       	subi	r20, 0x01	; 1
    12ce:	c9 01       	movw	r24, r18
    12d0:	de cf       	rjmp	.-68     	; 0x128e <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    12de:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    12e0:	08 95       	ret

000012e2 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    12e2:	75 d0       	rcall	.+234    	; 0x13ce <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    12e4:	7c d0       	rcall	.+248    	; 0x13de <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    12e6:	e0 ee       	ldi	r30, 0xE0	; 224
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	81 60       	ori	r24, 0x01	; 1
    12ee:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    12f0:	e8 ed       	ldi	r30, 0xD8	; 216
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	8f 77       	andi	r24, 0x7F	; 127
    12f8:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    12fa:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    12fc:	a7 ed       	ldi	r26, 0xD7	; 215
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	8c 91       	ld	r24, X
    1302:	8e 7f       	andi	r24, 0xFE	; 254
    1304:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1306:	80 81       	ld	r24, Z
    1308:	8f 7e       	andi	r24, 0xEF	; 239
    130a:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    130c:	10 92 5e 01 	sts	0x015E, r1
}
    1310:	08 95       	ret

00001312 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1312:	5d d0       	rcall	.+186    	; 0x13ce <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1314:	64 d0       	rcall	.+200    	; 0x13de <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1316:	80 91 d8 00 	lds	r24, 0x00D8
    131a:	8f 77       	andi	r24, 0x7F	; 127
    131c:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    1320:	80 91 d8 00 	lds	r24, 0x00D8
    1324:	80 68       	ori	r24, 0x80	; 128
    1326:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    132a:	80 91 d8 00 	lds	r24, 0x00D8
    132e:	8f 7d       	andi	r24, 0xDF	; 223
    1330:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1334:	80 91 d7 00 	lds	r24, 0x00D7
    1338:	8f 77       	andi	r24, 0x7F	; 127
    133a:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    133e:	8c e0       	ldi	r24, 0x0C	; 12
    1340:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1342:	8e e0       	ldi	r24, 0x0E	; 14
    1344:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1346:	09 b4       	in	r0, 0x29	; 41
    1348:	00 fe       	sbrs	r0, 0
    134a:	fd cf       	rjmp	.-6      	; 0x1346 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 67 01 	sts	0x0167, r24
	USB_Host_ConfigurationNumber = 0;
    1352:	10 92 5d 01 	sts	0x015D, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1356:	80 e4       	ldi	r24, 0x40	; 64
    1358:	80 93 10 01 	sts	0x0110, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    135c:	80 91 d8 00 	lds	r24, 0x00D8
    1360:	80 64       	ori	r24, 0x40	; 64
    1362:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1366:	80 91 dd 00 	lds	r24, 0x00DD
    136a:	81 60       	ori	r24, 0x01	; 1
    136c:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1370:	80 91 dd 00 	lds	r24, 0x00DD
    1374:	84 60       	ori	r24, 0x04	; 4
    1376:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    137a:	80 91 d7 00 	lds	r24, 0x00D7
    137e:	8f 7e       	andi	r24, 0xEF	; 239
    1380:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1384:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    1386:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1388:	80 91 de 00 	lds	r24, 0x00DE
    138c:	81 60       	ori	r24, 0x01	; 1
    138e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1392:	80 91 de 00 	lds	r24, 0x00DE
    1396:	84 60       	ori	r24, 0x04	; 4
    1398:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    139c:	80 91 e0 00 	lds	r24, 0x00E0
    13a0:	8e 7f       	andi	r24, 0xFE	; 254
    13a2:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    13a6:	80 91 d8 00 	lds	r24, 0x00D8
    13aa:	80 61       	ori	r24, 0x10	; 16
    13ac:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    13b0:	08 95       	ret

000013b2 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    13b2:	e8 ed       	ldi	r30, 0xD8	; 216
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8f 7e       	andi	r24, 0xEF	; 239
    13ba:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    13bc:	e7 ed       	ldi	r30, 0xD7	; 215
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	81 60       	ori	r24, 0x01	; 1
    13c4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	80 93 5e 01 	sts	0x015E, r24

	USB_ResetInterface();
}
    13cc:	a2 cf       	rjmp	.-188    	; 0x1312 <USB_ResetInterface>

000013ce <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    13ce:	e8 ed       	ldi	r30, 0xD8	; 216
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8c 7f       	andi	r24, 0xFC	; 252
    13d6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    13d8:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    13dc:	08 95       	ret

000013de <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    13de:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    13e2:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    13e6:	08 95       	ret

000013e8 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    13e8:	1f 92       	push	r1
    13ea:	0f 92       	push	r0
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	0f 92       	push	r0
    13f0:	0b b6       	in	r0, 0x3b	; 59
    13f2:	0f 92       	push	r0
    13f4:	11 24       	eor	r1, r1
    13f6:	2f 93       	push	r18
    13f8:	3f 93       	push	r19
    13fa:	4f 93       	push	r20
    13fc:	5f 93       	push	r21
    13fe:	6f 93       	push	r22
    1400:	7f 93       	push	r23
    1402:	8f 93       	push	r24
    1404:	9f 93       	push	r25
    1406:	af 93       	push	r26
    1408:	bf 93       	push	r27
    140a:	ef 93       	push	r30
    140c:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    140e:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1412:	85 ff       	sbrs	r24, 5
    1414:	0a c0       	rjmp	.+20     	; 0x142a <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1416:	80 91 a0 00 	lds	r24, 0x00A0
    141a:	85 ff       	sbrs	r24, 5
    141c:	06 c0       	rjmp	.+12     	; 0x142a <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    141e:	80 91 9f 00 	lds	r24, 0x009F
    1422:	8f 7d       	andi	r24, 0xDF	; 223
    1424:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1428:	12 d1       	rcall	.+548    	; 0x164e <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    142a:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    142e:	81 ff       	sbrs	r24, 1
    1430:	16 c0       	rjmp	.+44     	; 0x145e <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1432:	80 91 a0 00 	lds	r24, 0x00A0
    1436:	81 ff       	sbrs	r24, 1
    1438:	12 c0       	rjmp	.+36     	; 0x145e <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    143a:	80 91 9f 00 	lds	r24, 0x009F
    143e:	8d 7f       	andi	r24, 0xFD	; 253
    1440:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1444:	80 91 9f 00 	lds	r24, 0x009F
    1448:	8e 7f       	andi	r24, 0xFE	; 254
    144a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    144e:	80 91 a0 00 	lds	r24, 0x00A0
    1452:	8d 7f       	andi	r24, 0xFD	; 253
    1454:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1458:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    145c:	5a df       	rcall	.-332    	; 0x1312 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    145e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1462:	81 ff       	sbrs	r24, 1
    1464:	17 c0       	rjmp	.+46     	; 0x1494 <__vector_10+0xac>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1466:	80 91 de 00 	lds	r24, 0x00DE
    146a:	81 ff       	sbrs	r24, 1
    146c:	13 c0       	rjmp	.+38     	; 0x1494 <__vector_10+0xac>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    146e:	80 91 df 00 	lds	r24, 0x00DF
    1472:	8d 7f       	andi	r24, 0xFD	; 253
    1474:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    1478:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    147a:	80 91 dd 00 	lds	r24, 0x00DD
    147e:	81 60       	ori	r24, 0x01	; 1
    1480:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	0e 94 3f 02 	call	0x47e	; 0x47e <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    148a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	80 93 67 01 	sts	0x0167, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1494:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1498:	80 ff       	sbrs	r24, 0
    149a:	18 c0       	rjmp	.+48     	; 0x14cc <__vector_10+0xe4>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    149c:	80 91 de 00 	lds	r24, 0x00DE
    14a0:	80 ff       	sbrs	r24, 0
    14a2:	14 c0       	rjmp	.+40     	; 0x14cc <__vector_10+0xe4>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    14a4:	80 91 df 00 	lds	r24, 0x00DF
    14a8:	8e 7f       	andi	r24, 0xFE	; 254
    14aa:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    14ae:	80 91 de 00 	lds	r24, 0x00DE
    14b2:	8e 7f       	andi	r24, 0xFE	; 254
    14b4:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    14b8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    14bc:	80 91 a0 00 	lds	r24, 0x00A0
    14c0:	82 60       	ori	r24, 0x02	; 2
    14c2:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	80 93 67 01 	sts	0x0167, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    14cc:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    14d0:	82 ff       	sbrs	r24, 2
    14d2:	10 c0       	rjmp	.+32     	; 0x14f4 <__vector_10+0x10c>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    14d4:	80 91 de 00 	lds	r24, 0x00DE
    14d8:	82 ff       	sbrs	r24, 2
    14da:	0c c0       	rjmp	.+24     	; 0x14f4 <__vector_10+0x10c>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    14dc:	80 91 df 00 	lds	r24, 0x00DF
    14e0:	8b 7f       	andi	r24, 0xFB	; 251
    14e2:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	0e 94 5f 02 	call	0x4be	; 0x4be <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    14ee:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    14f2:	0f df       	rcall	.-482    	; 0x1312 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    14f4:	ff 91       	pop	r31
    14f6:	ef 91       	pop	r30
    14f8:	bf 91       	pop	r27
    14fa:	af 91       	pop	r26
    14fc:	9f 91       	pop	r25
    14fe:	8f 91       	pop	r24
    1500:	7f 91       	pop	r23
    1502:	6f 91       	pop	r22
    1504:	5f 91       	pop	r21
    1506:	4f 91       	pop	r20
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	0f 90       	pop	r0
    150e:	0b be       	out	0x3b, r0	; 59
    1510:	0f 90       	pop	r0
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	0f 90       	pop	r0
    1516:	1f 90       	pop	r1
    1518:	18 95       	reti

0000151a <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    151a:	cf 92       	push	r12
    151c:	df 92       	push	r13
    151e:	ef 92       	push	r14
    1520:	ff 92       	push	r15
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	29 97       	sbiw	r28, 0x09	; 9
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	6b 01       	movw	r12, r22
    153c:	8a 01       	movw	r16, r20
    153e:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1540:	90 e8       	ldi	r25, 0x80	; 128
    1542:	90 93 5f 01 	sts	0x015F, r25
    1546:	96 e0       	ldi	r25, 0x06	; 6
    1548:	90 93 60 01 	sts	0x0160, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1552:	90 93 62 01 	sts	0x0162, r25
    1556:	80 93 61 01 	sts	0x0161, r24
    155a:	10 92 64 01 	sts	0x0164, r1
    155e:	10 92 63 01 	sts	0x0163, r1
    1562:	89 e0       	ldi	r24, 0x09	; 9
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	90 93 66 01 	sts	0x0166, r25
    156a:	80 93 65 01 	sts	0x0165, r24
    156e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1572:	ce 01       	movw	r24, r28
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	95 d0       	rcall	.+298    	; 0x16a2 <USB_Host_SendControlRequest>
    1578:	88 23       	and	r24, r24
    157a:	b9 f4       	brne	.+46     	; 0x15aa <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	f6 01       	movw	r30, r12
    1582:	91 83       	std	Z+1, r25	; 0x01
    1584:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1586:	e8 16       	cp	r14, r24
    1588:	f9 06       	cpc	r15, r25
    158a:	70 f0       	brcs	.+28     	; 0x15a8 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    158c:	90 93 66 01 	sts	0x0166, r25
    1590:	80 93 65 01 	sts	0x0165, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1594:	c8 01       	movw	r24, r16
    1596:	85 d0       	rcall	.+266    	; 0x16a2 <USB_Host_SendControlRequest>
    1598:	88 23       	and	r24, r24
    159a:	39 f4       	brne	.+14     	; 0x15aa <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    159c:	f8 01       	movw	r30, r16
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	92 30       	cpi	r25, 0x02	; 2
    15a2:	19 f0       	breq	.+6      	; 0x15aa <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    15a4:	86 e0       	ldi	r24, 0x06	; 6
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    15a8:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    15aa:	29 96       	adiw	r28, 0x09	; 9
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	cf 90       	pop	r12
    15c6:	08 95       	ret

000015c8 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    15c8:	af 92       	push	r10
    15ca:	bf 92       	push	r11
    15cc:	cf 92       	push	r12
    15ce:	df 92       	push	r13
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	8c 01       	movw	r16, r24
    15de:	eb 01       	movw	r28, r22
    15e0:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    15e2:	23 c0       	rjmp	.+70     	; 0x162a <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    15e4:	e8 81       	ld	r30, Y
    15e6:	f9 81       	ldd	r31, Y+1	; 0x01
    15e8:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    15ea:	20 81       	ld	r18, Z
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	c7 01       	movw	r24, r14
    15f0:	2e 15       	cp	r18, r14
    15f2:	3f 05       	cpc	r19, r15
    15f4:	08 f4       	brcc	.+2      	; 0x15f8 <USB_GetNextDescriptorComp+0x30>
    15f6:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    15f8:	e8 0f       	add	r30, r24
    15fa:	f9 1f       	adc	r31, r25
    15fc:	f9 83       	std	Y+1, r31	; 0x01
    15fe:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1600:	f8 01       	movw	r30, r16
    1602:	20 81       	ld	r18, Z
    1604:	31 81       	ldd	r19, Z+1	; 0x01
    1606:	28 1b       	sub	r18, r24
    1608:	39 0b       	sbc	r19, r25
    160a:	31 83       	std	Z+1, r19	; 0x01
    160c:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    160e:	88 81       	ld	r24, Y
    1610:	99 81       	ldd	r25, Y+1	; 0x01
    1612:	f6 01       	movw	r30, r12
    1614:	09 95       	icall
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	41 f0       	breq	.+16     	; 0x162a <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	69 f4       	brne	.+26     	; 0x1638 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    161e:	a8 82       	st	Y, r10
    1620:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    1622:	f8 01       	movw	r30, r16
    1624:	f1 82       	std	Z+1, r15	; 0x01
    1626:	e0 82       	st	Z, r14
    1628:	07 c0       	rjmp	.+14     	; 0x1638 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    162a:	f8 01       	movw	r30, r16
    162c:	e0 80       	ld	r14, Z
    162e:	f1 80       	ldd	r15, Z+1	; 0x01
    1630:	e1 14       	cp	r14, r1
    1632:	f1 04       	cpc	r15, r1
    1634:	b9 f6       	brne	.-82     	; 0x15e4 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1636:	82 e0       	ldi	r24, 0x02	; 2
}
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	08 95       	ret

0000164e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    164e:	08 95       	ret

00001650 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1658:	c8 ee       	ldi	r28, 0xE8	; 232
    165a:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    165c:	07 c0       	rjmp	.+14     	; 0x166c <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	50 db       	rcall	.-2400   	; 0xd02 <USB_Host_WaitMS>
    1662:	88 23       	and	r24, r24
    1664:	d1 f4       	brne	.+52     	; 0x169a <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1666:	20 97       	sbiw	r28, 0x00	; 0
    1668:	b9 f0       	breq	.+46     	; 0x1698 <USB_Host_WaitForIOS+0x48>
    166a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    166c:	11 23       	and	r17, r17
    166e:	29 f4       	brne	.+10     	; 0x167a <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1670:	80 91 a6 00 	lds	r24, 0x00A6
    1674:	83 ff       	sbrs	r24, 3
    1676:	f3 cf       	rjmp	.-26     	; 0x165e <USB_Host_WaitForIOS+0xe>
    1678:	0d c0       	rjmp	.+26     	; 0x1694 <USB_Host_WaitForIOS+0x44>
    167a:	11 30       	cpi	r17, 0x01	; 1
    167c:	29 f4       	brne	.+10     	; 0x1688 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    167e:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1682:	80 ff       	sbrs	r24, 0
    1684:	ec cf       	rjmp	.-40     	; 0x165e <USB_Host_WaitForIOS+0xe>
    1686:	06 c0       	rjmp	.+12     	; 0x1694 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1688:	12 30       	cpi	r17, 0x02	; 2
    168a:	49 f7       	brne	.-46     	; 0x165e <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    168c:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1690:	82 ff       	sbrs	r24, 2
    1692:	e5 cf       	rjmp	.-54     	; 0x165e <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	01 c0       	rjmp	.+2      	; 0x169a <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1698:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	08 95       	ret

000016a2 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    16b0:	e0 90 9e 00 	lds	r14, 0x009E
    16b4:	ff 24       	eor	r15, r15
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	e8 22       	and	r14, r24
    16ba:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    16bc:	c0 91 65 01 	lds	r28, 0x0165
    16c0:	d0 91 66 01 	lds	r29, 0x0166
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    16c4:	80 91 9e 00 	lds	r24, 0x009E
    16c8:	81 60       	ori	r24, 0x01	; 1
    16ca:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	18 db       	rcall	.-2512   	; 0xd02 <USB_Host_WaitMS>
    16d2:	88 23       	and	r24, r24
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <USB_Host_SendControlRequest+0x36>
    16d6:	cb c0       	rjmp	.+406    	; 0x186e <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    16d8:	80 91 aa 00 	lds	r24, 0x00AA
    16dc:	8f 7c       	andi	r24, 0xCF	; 207
    16de:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    16e2:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    16e6:	80 91 a6 00 	lds	r24, 0x00A6
    16ea:	8f 7e       	andi	r24, 0xEF	; 239
    16ec:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    16f0:	80 91 a9 00 	lds	r24, 0x00A9
    16f4:	8f 7b       	andi	r24, 0xBF	; 191
    16f6:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    16fa:	ef e5       	ldi	r30, 0x5F	; 95
    16fc:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    16fe:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1700:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	e7 36       	cpi	r30, 0x67	; 103
    1708:	f8 07       	cpc	r31, r24
    170a:	c9 f7       	brne	.-14     	; 0x16fe <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    170c:	80 91 a6 00 	lds	r24, 0x00A6
    1710:	87 77       	andi	r24, 0x77	; 119
    1712:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	9b df       	rcall	.-202    	; 0x1650 <USB_Host_WaitForIOS>
    171a:	88 23       	and	r24, r24
    171c:	09 f0       	breq	.+2      	; 0x1720 <USB_Host_SendControlRequest+0x7e>
    171e:	a7 c0       	rjmp	.+334    	; 0x186e <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1720:	80 91 a9 00 	lds	r24, 0x00A9
    1724:	80 64       	ori	r24, 0x40	; 64
    1726:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	ea da       	rcall	.-2604   	; 0xd02 <USB_Host_WaitMS>
    172e:	88 23       	and	r24, r24
    1730:	09 f0       	breq	.+2      	; 0x1734 <USB_Host_SendControlRequest+0x92>
    1732:	9d c0       	rjmp	.+314    	; 0x186e <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1734:	80 91 5f 01 	lds	r24, 0x015F
    1738:	87 ff       	sbrs	r24, 7
    173a:	4f c0       	rjmp	.+158    	; 0x17da <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    173c:	80 91 aa 00 	lds	r24, 0x00AA
    1740:	8f 7c       	andi	r24, 0xCF	; 207
    1742:	80 61       	ori	r24, 0x10	; 16
    1744:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1748:	01 15       	cp	r16, r1
    174a:	11 05       	cpc	r17, r1
    174c:	61 f5       	brne	.+88     	; 0x17a6 <USB_Host_SendControlRequest+0x104>
    174e:	2d c0       	rjmp	.+90     	; 0x17aa <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1750:	80 91 a9 00 	lds	r24, 0x00A9
    1754:	8f 7b       	andi	r24, 0xBF	; 191
    1756:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	79 df       	rcall	.-270    	; 0x1650 <USB_Host_WaitForIOS>
    175e:	88 23       	and	r24, r24
    1760:	09 f0       	breq	.+2      	; 0x1764 <USB_Host_SendControlRequest+0xc2>
    1762:	85 c0       	rjmp	.+266    	; 0x186e <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1764:	80 91 f6 00 	lds	r24, 0x00F6
    1768:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	49 f4       	brne	.+18     	; 0x1782 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1770:	c0 e0       	ldi	r28, 0x00	; 0
    1772:	d0 e0       	ldi	r29, 0x00	; 0
    1774:	06 c0       	rjmp	.+12     	; 0x1782 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1776:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    177a:	f8 01       	movw	r30, r16
    177c:	81 93       	st	Z+, r24
    177e:	8f 01       	movw	r16, r30
					DataLen--;
    1780:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1782:	80 91 f6 00 	lds	r24, 0x00F6
    1786:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	11 f0       	breq	.+4      	; 0x1792 <USB_Host_SendControlRequest+0xf0>
    178e:	20 97       	sbiw	r28, 0x00	; 0
    1790:	91 f7       	brne	.-28     	; 0x1776 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1792:	80 91 a9 00 	lds	r24, 0x00A9
    1796:	80 64       	ori	r24, 0x40	; 64
    1798:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    179c:	80 91 a6 00 	lds	r24, 0x00A6
    17a0:	8e 77       	andi	r24, 0x7E	; 126
    17a2:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    17a6:	20 97       	sbiw	r28, 0x00	; 0
    17a8:	99 f6       	brne	.-90     	; 0x1750 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    17aa:	80 91 aa 00 	lds	r24, 0x00AA
    17ae:	8f 7c       	andi	r24, 0xCF	; 207
    17b0:	80 62       	ori	r24, 0x20	; 32
    17b2:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    17b6:	80 91 a9 00 	lds	r24, 0x00A9
    17ba:	8f 7b       	andi	r24, 0xBF	; 191
    17bc:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	46 df       	rcall	.-372    	; 0x1650 <USB_Host_WaitForIOS>
    17c4:	88 23       	and	r24, r24
    17c6:	09 f0       	breq	.+2      	; 0x17ca <USB_Host_SendControlRequest+0x128>
    17c8:	52 c0       	rjmp	.+164    	; 0x186e <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    17ca:	80 91 a6 00 	lds	r24, 0x00A6
    17ce:	8b 77       	andi	r24, 0x7B	; 123
    17d0:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	3c df       	rcall	.-392    	; 0x1650 <USB_Host_WaitForIOS>
    17d8:	4a c0       	rjmp	.+148    	; 0x186e <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    17da:	01 15       	cp	r16, r1
    17dc:	11 05       	cpc	r17, r1
    17de:	99 f1       	breq	.+102    	; 0x1846 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    17e0:	80 91 aa 00 	lds	r24, 0x00AA
    17e4:	8f 7c       	andi	r24, 0xCF	; 207
    17e6:	80 62       	ori	r24, 0x20	; 32
    17e8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    17ec:	80 91 a9 00 	lds	r24, 0x00A9
    17f0:	8f 7b       	andi	r24, 0xBF	; 191
    17f2:	80 93 a9 00 	sts	0x00A9, r24
    17f6:	1c c0       	rjmp	.+56     	; 0x1830 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    17f8:	82 e0       	ldi	r24, 0x02	; 2
    17fa:	2a df       	rcall	.-428    	; 0x1650 <USB_Host_WaitForIOS>
    17fc:	88 23       	and	r24, r24
    17fe:	b9 f5       	brne	.+110    	; 0x186e <USB_Host_SendControlRequest+0x1cc>
    1800:	f8 01       	movw	r30, r16
    1802:	06 c0       	rjmp	.+12     	; 0x1810 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1804:	81 91       	ld	r24, Z+
    1806:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1808:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    180c:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    180e:	59 f0       	breq	.+22     	; 0x1826 <USB_Host_SendControlRequest+0x184>
    1810:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1812:	20 91 f6 00 	lds	r18, 0x00F6
    1816:	30 91 f7 00 	lds	r19, 0x00F7
    181a:	80 91 10 01 	lds	r24, 0x0110
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	28 17       	cp	r18, r24
    1822:	39 07       	cpc	r19, r25
    1824:	78 f3       	brcs	.-34     	; 0x1804 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1826:	80 91 a6 00 	lds	r24, 0x00A6
    182a:	8b 77       	andi	r24, 0x7B	; 123
    182c:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1830:	20 97       	sbiw	r28, 0x00	; 0
    1832:	11 f7       	brne	.-60     	; 0x17f8 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	0c df       	rcall	.-488    	; 0x1650 <USB_Host_WaitForIOS>
    1838:	88 23       	and	r24, r24
    183a:	c9 f4       	brne	.+50     	; 0x186e <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    183c:	80 91 a9 00 	lds	r24, 0x00A9
    1840:	80 64       	ori	r24, 0x40	; 64
    1842:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1846:	80 91 aa 00 	lds	r24, 0x00AA
    184a:	8f 7c       	andi	r24, 0xCF	; 207
    184c:	80 61       	ori	r24, 0x10	; 16
    184e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1852:	80 91 a9 00 	lds	r24, 0x00A9
    1856:	8f 7b       	andi	r24, 0xBF	; 191
    1858:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	f8 de       	rcall	.-528    	; 0x1650 <USB_Host_WaitForIOS>
    1860:	88 23       	and	r24, r24
    1862:	29 f4       	brne	.+10     	; 0x186e <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1864:	90 91 a6 00 	lds	r25, 0x00A6
    1868:	9e 77       	andi	r25, 0x7E	; 126
    186a:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    186e:	90 91 a9 00 	lds	r25, 0x00A9
    1872:	90 64       	ori	r25, 0x40	; 64
    1874:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1878:	e1 14       	cp	r14, r1
    187a:	f1 04       	cpc	r15, r1
    187c:	29 f4       	brne	.+10     	; 0x1888 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    187e:	90 91 9e 00 	lds	r25, 0x009E
    1882:	9e 7f       	andi	r25, 0xFE	; 254
    1884:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    188e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	08 95       	ret

000018a0 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    18a0:	1f 93       	push	r17
    18a2:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    18a4:	10 92 5f 01 	sts	0x015F, r1
    18a8:	89 e0       	ldi	r24, 0x09	; 9
    18aa:	80 93 60 01 	sts	0x0160, r24
    18ae:	10 93 61 01 	sts	0x0161, r17
    18b2:	10 92 62 01 	sts	0x0162, r1
    18b6:	10 92 64 01 	sts	0x0164, r1
    18ba:	10 92 63 01 	sts	0x0163, r1
    18be:	10 92 66 01 	sts	0x0166, r1
    18c2:	10 92 65 01 	sts	0x0165, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    18c6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	e9 de       	rcall	.-558    	; 0x16a2 <USB_Host_SendControlRequest>
    18d0:	88 23       	and	r24, r24
    18d2:	49 f4       	brne	.+18     	; 0x18e6 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    18d4:	10 93 5d 01 	sts	0x015D, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    18d8:	11 23       	and	r17, r17
    18da:	11 f0       	breq	.+4      	; 0x18e0 <USB_Host_SetDeviceConfiguration+0x40>
    18dc:	9b e0       	ldi	r25, 0x0B	; 11
    18de:	01 c0       	rjmp	.+2      	; 0x18e2 <USB_Host_SetDeviceConfiguration+0x42>
    18e0:	9a e0       	ldi	r25, 0x0A	; 10
    18e2:	90 93 67 01 	sts	0x0167, r25
	}

	return ErrorCode;
}
    18e6:	1f 91       	pop	r17
    18e8:	08 95       	ret

000018ea <USB_Host_ClearEndpointStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    18ea:	92 e0       	ldi	r25, 0x02	; 2
    18ec:	90 93 5f 01 	sts	0x015F, r25
    18f0:	91 e0       	ldi	r25, 0x01	; 1
    18f2:	90 93 60 01 	sts	0x0160, r25
    18f6:	10 92 62 01 	sts	0x0162, r1
    18fa:	10 92 61 01 	sts	0x0161, r1
    18fe:	80 93 63 01 	sts	0x0163, r24
    1902:	10 92 64 01 	sts	0x0164, r1
    1906:	10 92 66 01 	sts	0x0166, r1
    190a:	10 92 65 01 	sts	0x0165, r1
    190e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
}
    1916:	c5 ce       	rjmp	.-630    	; 0x16a2 <USB_Host_SendControlRequest>

00001918 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1918:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    191a:	10 91 a7 00 	lds	r17, 0x00A7
    191e:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1920:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1924:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1928:	41 da       	rcall	.-2942   	; 0xdac <USB_Host_ProcessNextHostState>
    192a:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    192e:	1f 91       	pop	r17
    1930:	08 95       	ret

00001932 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1932:	90 91 c8 00 	lds	r25, 0x00C8
    1936:	95 ff       	sbrs	r25, 5
    1938:	fc cf       	rjmp	.-8      	; 0x1932 <Serial_putchar>
				UDR1 = DataByte;
    193a:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	08 95       	ret

00001944 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1944:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1948:	87 ff       	sbrs	r24, 7
    194a:	08 c0       	rjmp	.+16     	; 0x195c <Serial_getchar+0x18>
    194c:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1950:	87 ff       	sbrs	r24, 7
    1952:	07 c0       	rjmp	.+14     	; 0x1962 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1954:	20 91 ce 00 	lds	r18, 0x00CE
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	05 c0       	rjmp	.+10     	; 0x1966 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    195c:	2e ef       	ldi	r18, 0xFE	; 254
    195e:	3f ef       	ldi	r19, 0xFF	; 255
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1962:	2f ef       	ldi	r18, 0xFF	; 255
    1964:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1966:	c9 01       	movw	r24, r18
    1968:	08 95       	ret

0000196a <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    196a:	fc 01       	movw	r30, r24
	if (!(Stream))
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	51 f4       	brne	.+20     	; 0x1984 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1970:	e8 e6       	ldi	r30, 0x68	; 104
    1972:	f1 e0       	ldi	r31, 0x01	; 1
    1974:	f0 93 77 01 	sts	0x0177, r31
    1978:	e0 93 76 01 	sts	0x0176, r30
		stdout = Stream;
    197c:	f0 93 79 01 	sts	0x0179, r31
    1980:	e0 93 78 01 	sts	0x0178, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1984:	8e e0       	ldi	r24, 0x0E	; 14
    1986:	df 01       	movw	r26, r30
    1988:	1d 92       	st	X+, r1
    198a:	8a 95       	dec	r24
    198c:	e9 f7       	brne	.-6      	; 0x1988 <Serial_CreateStream+0x1e>
    198e:	83 e0       	ldi	r24, 0x03	; 3
    1990:	83 83       	std	Z+3, r24	; 0x03
    1992:	89 e9       	ldi	r24, 0x99	; 153
    1994:	9c e0       	ldi	r25, 0x0C	; 12
    1996:	91 87       	std	Z+9, r25	; 0x09
    1998:	80 87       	std	Z+8, r24	; 0x08
    199a:	82 ea       	ldi	r24, 0xA2	; 162
    199c:	9c e0       	ldi	r25, 0x0C	; 12
    199e:	93 87       	std	Z+11, r25	; 0x0b
    19a0:	82 87       	std	Z+10, r24	; 0x0a
}
    19a2:	08 95       	ret

000019a4 <printf_P>:
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	fe 01       	movw	r30, r28
    19ae:	35 96       	adiw	r30, 0x05	; 5
    19b0:	61 91       	ld	r22, Z+
    19b2:	71 91       	ld	r23, Z+
    19b4:	80 91 78 01 	lds	r24, 0x0178
    19b8:	90 91 79 01 	lds	r25, 0x0179
    19bc:	dc 01       	movw	r26, r24
    19be:	13 96       	adiw	r26, 0x03	; 3
    19c0:	2c 91       	ld	r18, X
    19c2:	13 97       	sbiw	r26, 0x03	; 3
    19c4:	28 60       	ori	r18, 0x08	; 8
    19c6:	13 96       	adiw	r26, 0x03	; 3
    19c8:	2c 93       	st	X, r18
    19ca:	af 01       	movw	r20, r30
    19cc:	42 d0       	rcall	.+132    	; 0x1a52 <vfprintf>
    19ce:	e0 91 78 01 	lds	r30, 0x0178
    19d2:	f0 91 79 01 	lds	r31, 0x0179
    19d6:	23 81       	ldd	r18, Z+3	; 0x03
    19d8:	27 7f       	andi	r18, 0xF7	; 247
    19da:	23 83       	std	Z+3, r18	; 0x03
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <puts_P>:
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	8c 01       	movw	r16, r24
    19f0:	e0 91 78 01 	lds	r30, 0x0178
    19f4:	f0 91 79 01 	lds	r31, 0x0179
    19f8:	83 81       	ldd	r24, Z+3	; 0x03
    19fa:	81 ff       	sbrs	r24, 1
    19fc:	20 c0       	rjmp	.+64     	; 0x1a3e <puts_P+0x5c>
    19fe:	c0 e0       	ldi	r28, 0x00	; 0
    1a00:	d0 e0       	ldi	r29, 0x00	; 0
    1a02:	0c c0       	rjmp	.+24     	; 0x1a1c <puts_P+0x3a>
    1a04:	db 01       	movw	r26, r22
    1a06:	18 96       	adiw	r26, 0x08	; 8
    1a08:	ed 91       	ld	r30, X+
    1a0a:	fc 91       	ld	r31, X
    1a0c:	19 97       	sbiw	r26, 0x09	; 9
    1a0e:	09 95       	icall
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	11 f0       	breq	.+4      	; 0x1a18 <puts_P+0x36>
    1a14:	cf ef       	ldi	r28, 0xFF	; 255
    1a16:	df ef       	ldi	r29, 0xFF	; 255
    1a18:	0f 5f       	subi	r16, 0xFF	; 255
    1a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	84 91       	lpm	r24, Z+
    1a20:	60 91 78 01 	lds	r22, 0x0178
    1a24:	70 91 79 01 	lds	r23, 0x0179
    1a28:	88 23       	and	r24, r24
    1a2a:	61 f7       	brne	.-40     	; 0x1a04 <puts_P+0x22>
    1a2c:	db 01       	movw	r26, r22
    1a2e:	18 96       	adiw	r26, 0x08	; 8
    1a30:	ed 91       	ld	r30, X+
    1a32:	fc 91       	ld	r31, X
    1a34:	19 97       	sbiw	r26, 0x09	; 9
    1a36:	8a e0       	ldi	r24, 0x0A	; 10
    1a38:	09 95       	icall
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	11 f0       	breq	.+4      	; 0x1a42 <puts_P+0x60>
    1a3e:	cf ef       	ldi	r28, 0xFF	; 255
    1a40:	df ef       	ldi	r29, 0xFF	; 255
    1a42:	ce 01       	movw	r24, r28
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ff 90       	pop	r15
    1a4e:	ef 90       	pop	r14
    1a50:	08 95       	ret

00001a52 <vfprintf>:
    1a52:	2f 92       	push	r2
    1a54:	3f 92       	push	r3
    1a56:	4f 92       	push	r4
    1a58:	5f 92       	push	r5
    1a5a:	6f 92       	push	r6
    1a5c:	7f 92       	push	r7
    1a5e:	8f 92       	push	r8
    1a60:	9f 92       	push	r9
    1a62:	af 92       	push	r10
    1a64:	bf 92       	push	r11
    1a66:	cf 92       	push	r12
    1a68:	df 92       	push	r13
    1a6a:	ef 92       	push	r14
    1a6c:	ff 92       	push	r15
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	2c 97       	sbiw	r28, 0x0c	; 12
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	6c 01       	movw	r12, r24
    1a88:	1b 01       	movw	r2, r22
    1a8a:	8a 01       	movw	r16, r20
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	17 82       	std	Z+7, r1	; 0x07
    1a90:	16 82       	std	Z+6, r1	; 0x06
    1a92:	83 81       	ldd	r24, Z+3	; 0x03
    1a94:	81 ff       	sbrs	r24, 1
    1a96:	c4 c1       	rjmp	.+904    	; 0x1e20 <vfprintf+0x3ce>
    1a98:	2e 01       	movw	r4, r28
    1a9a:	08 94       	sec
    1a9c:	41 1c       	adc	r4, r1
    1a9e:	51 1c       	adc	r5, r1
    1aa0:	f6 01       	movw	r30, r12
    1aa2:	93 81       	ldd	r25, Z+3	; 0x03
    1aa4:	f1 01       	movw	r30, r2
    1aa6:	93 fd       	sbrc	r25, 3
    1aa8:	85 91       	lpm	r24, Z+
    1aaa:	93 ff       	sbrs	r25, 3
    1aac:	81 91       	ld	r24, Z+
    1aae:	1f 01       	movw	r2, r30
    1ab0:	88 23       	and	r24, r24
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <vfprintf+0x64>
    1ab4:	b1 c1       	rjmp	.+866    	; 0x1e18 <vfprintf+0x3c6>
    1ab6:	85 32       	cpi	r24, 0x25	; 37
    1ab8:	39 f4       	brne	.+14     	; 0x1ac8 <vfprintf+0x76>
    1aba:	93 fd       	sbrc	r25, 3
    1abc:	85 91       	lpm	r24, Z+
    1abe:	93 ff       	sbrs	r25, 3
    1ac0:	81 91       	ld	r24, Z+
    1ac2:	1f 01       	movw	r2, r30
    1ac4:	85 32       	cpi	r24, 0x25	; 37
    1ac6:	21 f4       	brne	.+8      	; 0x1ad0 <vfprintf+0x7e>
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	b6 01       	movw	r22, r12
    1acc:	db d1       	rcall	.+950    	; 0x1e84 <fputc>
    1ace:	e8 cf       	rjmp	.-48     	; 0x1aa0 <vfprintf+0x4e>
    1ad0:	ee 24       	eor	r14, r14
    1ad2:	ff 24       	eor	r15, r15
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	20 32       	cpi	r18, 0x20	; 32
    1ad8:	b0 f4       	brcc	.+44     	; 0x1b06 <vfprintf+0xb4>
    1ada:	8b 32       	cpi	r24, 0x2B	; 43
    1adc:	69 f0       	breq	.+26     	; 0x1af8 <vfprintf+0xa6>
    1ade:	8c 32       	cpi	r24, 0x2C	; 44
    1ae0:	28 f4       	brcc	.+10     	; 0x1aec <vfprintf+0x9a>
    1ae2:	80 32       	cpi	r24, 0x20	; 32
    1ae4:	51 f0       	breq	.+20     	; 0x1afa <vfprintf+0xa8>
    1ae6:	83 32       	cpi	r24, 0x23	; 35
    1ae8:	71 f4       	brne	.+28     	; 0x1b06 <vfprintf+0xb4>
    1aea:	0b c0       	rjmp	.+22     	; 0x1b02 <vfprintf+0xb0>
    1aec:	8d 32       	cpi	r24, 0x2D	; 45
    1aee:	39 f0       	breq	.+14     	; 0x1afe <vfprintf+0xac>
    1af0:	80 33       	cpi	r24, 0x30	; 48
    1af2:	49 f4       	brne	.+18     	; 0x1b06 <vfprintf+0xb4>
    1af4:	21 60       	ori	r18, 0x01	; 1
    1af6:	2c c0       	rjmp	.+88     	; 0x1b50 <vfprintf+0xfe>
    1af8:	22 60       	ori	r18, 0x02	; 2
    1afa:	24 60       	ori	r18, 0x04	; 4
    1afc:	29 c0       	rjmp	.+82     	; 0x1b50 <vfprintf+0xfe>
    1afe:	28 60       	ori	r18, 0x08	; 8
    1b00:	27 c0       	rjmp	.+78     	; 0x1b50 <vfprintf+0xfe>
    1b02:	20 61       	ori	r18, 0x10	; 16
    1b04:	25 c0       	rjmp	.+74     	; 0x1b50 <vfprintf+0xfe>
    1b06:	27 fd       	sbrc	r18, 7
    1b08:	2c c0       	rjmp	.+88     	; 0x1b62 <vfprintf+0x110>
    1b0a:	38 2f       	mov	r19, r24
    1b0c:	30 53       	subi	r19, 0x30	; 48
    1b0e:	3a 30       	cpi	r19, 0x0A	; 10
    1b10:	98 f4       	brcc	.+38     	; 0x1b38 <vfprintf+0xe6>
    1b12:	26 ff       	sbrs	r18, 6
    1b14:	08 c0       	rjmp	.+16     	; 0x1b26 <vfprintf+0xd4>
    1b16:	8e 2d       	mov	r24, r14
    1b18:	88 0f       	add	r24, r24
    1b1a:	e8 2e       	mov	r14, r24
    1b1c:	ee 0c       	add	r14, r14
    1b1e:	ee 0c       	add	r14, r14
    1b20:	e8 0e       	add	r14, r24
    1b22:	e3 0e       	add	r14, r19
    1b24:	15 c0       	rjmp	.+42     	; 0x1b50 <vfprintf+0xfe>
    1b26:	8f 2d       	mov	r24, r15
    1b28:	88 0f       	add	r24, r24
    1b2a:	f8 2e       	mov	r15, r24
    1b2c:	ff 0c       	add	r15, r15
    1b2e:	ff 0c       	add	r15, r15
    1b30:	f8 0e       	add	r15, r24
    1b32:	f3 0e       	add	r15, r19
    1b34:	20 62       	ori	r18, 0x20	; 32
    1b36:	0c c0       	rjmp	.+24     	; 0x1b50 <vfprintf+0xfe>
    1b38:	8e 32       	cpi	r24, 0x2E	; 46
    1b3a:	21 f4       	brne	.+8      	; 0x1b44 <vfprintf+0xf2>
    1b3c:	26 fd       	sbrc	r18, 6
    1b3e:	6c c1       	rjmp	.+728    	; 0x1e18 <vfprintf+0x3c6>
    1b40:	20 64       	ori	r18, 0x40	; 64
    1b42:	06 c0       	rjmp	.+12     	; 0x1b50 <vfprintf+0xfe>
    1b44:	8c 36       	cpi	r24, 0x6C	; 108
    1b46:	11 f4       	brne	.+4      	; 0x1b4c <vfprintf+0xfa>
    1b48:	20 68       	ori	r18, 0x80	; 128
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <vfprintf+0xfe>
    1b4c:	88 36       	cpi	r24, 0x68	; 104
    1b4e:	49 f4       	brne	.+18     	; 0x1b62 <vfprintf+0x110>
    1b50:	f1 01       	movw	r30, r2
    1b52:	93 fd       	sbrc	r25, 3
    1b54:	85 91       	lpm	r24, Z+
    1b56:	93 ff       	sbrs	r25, 3
    1b58:	81 91       	ld	r24, Z+
    1b5a:	1f 01       	movw	r2, r30
    1b5c:	88 23       	and	r24, r24
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <vfprintf+0x110>
    1b60:	ba cf       	rjmp	.-140    	; 0x1ad6 <vfprintf+0x84>
    1b62:	98 2f       	mov	r25, r24
    1b64:	95 54       	subi	r25, 0x45	; 69
    1b66:	93 30       	cpi	r25, 0x03	; 3
    1b68:	18 f0       	brcs	.+6      	; 0x1b70 <vfprintf+0x11e>
    1b6a:	90 52       	subi	r25, 0x20	; 32
    1b6c:	93 30       	cpi	r25, 0x03	; 3
    1b6e:	28 f4       	brcc	.+10     	; 0x1b7a <vfprintf+0x128>
    1b70:	0c 5f       	subi	r16, 0xFC	; 252
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	ff e3       	ldi	r31, 0x3F	; 63
    1b76:	f9 83       	std	Y+1, r31	; 0x01
    1b78:	0d c0       	rjmp	.+26     	; 0x1b94 <vfprintf+0x142>
    1b7a:	83 36       	cpi	r24, 0x63	; 99
    1b7c:	31 f0       	breq	.+12     	; 0x1b8a <vfprintf+0x138>
    1b7e:	83 37       	cpi	r24, 0x73	; 115
    1b80:	71 f0       	breq	.+28     	; 0x1b9e <vfprintf+0x14c>
    1b82:	83 35       	cpi	r24, 0x53	; 83
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <vfprintf+0x136>
    1b86:	5c c0       	rjmp	.+184    	; 0x1c40 <vfprintf+0x1ee>
    1b88:	21 c0       	rjmp	.+66     	; 0x1bcc <vfprintf+0x17a>
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	80 81       	ld	r24, Z
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	0e 5f       	subi	r16, 0xFE	; 254
    1b92:	1f 4f       	sbci	r17, 0xFF	; 255
    1b94:	42 01       	movw	r8, r4
    1b96:	71 e0       	ldi	r23, 0x01	; 1
    1b98:	a7 2e       	mov	r10, r23
    1b9a:	b1 2c       	mov	r11, r1
    1b9c:	15 c0       	rjmp	.+42     	; 0x1bc8 <vfprintf+0x176>
    1b9e:	62 e0       	ldi	r22, 0x02	; 2
    1ba0:	66 2e       	mov	r6, r22
    1ba2:	71 2c       	mov	r7, r1
    1ba4:	60 0e       	add	r6, r16
    1ba6:	71 1e       	adc	r7, r17
    1ba8:	f8 01       	movw	r30, r16
    1baa:	80 80       	ld	r8, Z
    1bac:	91 80       	ldd	r9, Z+1	; 0x01
    1bae:	26 ff       	sbrs	r18, 6
    1bb0:	03 c0       	rjmp	.+6      	; 0x1bb8 <vfprintf+0x166>
    1bb2:	6e 2d       	mov	r22, r14
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <vfprintf+0x16a>
    1bb8:	6f ef       	ldi	r22, 0xFF	; 255
    1bba:	7f ef       	ldi	r23, 0xFF	; 255
    1bbc:	c4 01       	movw	r24, r8
    1bbe:	2c 87       	std	Y+12, r18	; 0x0c
    1bc0:	56 d1       	rcall	.+684    	; 0x1e6e <strnlen>
    1bc2:	5c 01       	movw	r10, r24
    1bc4:	83 01       	movw	r16, r6
    1bc6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bc8:	2f 77       	andi	r18, 0x7F	; 127
    1bca:	16 c0       	rjmp	.+44     	; 0x1bf8 <vfprintf+0x1a6>
    1bcc:	52 e0       	ldi	r21, 0x02	; 2
    1bce:	65 2e       	mov	r6, r21
    1bd0:	71 2c       	mov	r7, r1
    1bd2:	60 0e       	add	r6, r16
    1bd4:	71 1e       	adc	r7, r17
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	80 80       	ld	r8, Z
    1bda:	91 80       	ldd	r9, Z+1	; 0x01
    1bdc:	26 ff       	sbrs	r18, 6
    1bde:	03 c0       	rjmp	.+6      	; 0x1be6 <vfprintf+0x194>
    1be0:	6e 2d       	mov	r22, r14
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <vfprintf+0x198>
    1be6:	6f ef       	ldi	r22, 0xFF	; 255
    1be8:	7f ef       	ldi	r23, 0xFF	; 255
    1bea:	c4 01       	movw	r24, r8
    1bec:	2c 87       	std	Y+12, r18	; 0x0c
    1bee:	34 d1       	rcall	.+616    	; 0x1e58 <strnlen_P>
    1bf0:	5c 01       	movw	r10, r24
    1bf2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bf4:	20 68       	ori	r18, 0x80	; 128
    1bf6:	83 01       	movw	r16, r6
    1bf8:	23 fd       	sbrc	r18, 3
    1bfa:	1e c0       	rjmp	.+60     	; 0x1c38 <vfprintf+0x1e6>
    1bfc:	07 c0       	rjmp	.+14     	; 0x1c0c <vfprintf+0x1ba>
    1bfe:	80 e2       	ldi	r24, 0x20	; 32
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	b6 01       	movw	r22, r12
    1c04:	2c 87       	std	Y+12, r18	; 0x0c
    1c06:	3e d1       	rcall	.+636    	; 0x1e84 <fputc>
    1c08:	fa 94       	dec	r15
    1c0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c0c:	8f 2d       	mov	r24, r15
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a8 16       	cp	r10, r24
    1c12:	b9 06       	cpc	r11, r25
    1c14:	a0 f3       	brcs	.-24     	; 0x1bfe <vfprintf+0x1ac>
    1c16:	10 c0       	rjmp	.+32     	; 0x1c38 <vfprintf+0x1e6>
    1c18:	f4 01       	movw	r30, r8
    1c1a:	27 fd       	sbrc	r18, 7
    1c1c:	85 91       	lpm	r24, Z+
    1c1e:	27 ff       	sbrs	r18, 7
    1c20:	81 91       	ld	r24, Z+
    1c22:	4f 01       	movw	r8, r30
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	b6 01       	movw	r22, r12
    1c28:	2c 87       	std	Y+12, r18	; 0x0c
    1c2a:	2c d1       	rcall	.+600    	; 0x1e84 <fputc>
    1c2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c2e:	f1 10       	cpse	r15, r1
    1c30:	fa 94       	dec	r15
    1c32:	08 94       	sec
    1c34:	a1 08       	sbc	r10, r1
    1c36:	b1 08       	sbc	r11, r1
    1c38:	a1 14       	cp	r10, r1
    1c3a:	b1 04       	cpc	r11, r1
    1c3c:	69 f7       	brne	.-38     	; 0x1c18 <vfprintf+0x1c6>
    1c3e:	e9 c0       	rjmp	.+466    	; 0x1e12 <vfprintf+0x3c0>
    1c40:	84 36       	cpi	r24, 0x64	; 100
    1c42:	11 f0       	breq	.+4      	; 0x1c48 <vfprintf+0x1f6>
    1c44:	89 36       	cpi	r24, 0x69	; 105
    1c46:	41 f5       	brne	.+80     	; 0x1c98 <vfprintf+0x246>
    1c48:	27 ff       	sbrs	r18, 7
    1c4a:	08 c0       	rjmp	.+16     	; 0x1c5c <vfprintf+0x20a>
    1c4c:	f8 01       	movw	r30, r16
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	0c 5f       	subi	r16, 0xFC	; 252
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	09 c0       	rjmp	.+18     	; 0x1c6e <vfprintf+0x21c>
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	60 81       	ld	r22, Z
    1c60:	71 81       	ldd	r23, Z+1	; 0x01
    1c62:	88 27       	eor	r24, r24
    1c64:	77 fd       	sbrc	r23, 7
    1c66:	80 95       	com	r24
    1c68:	98 2f       	mov	r25, r24
    1c6a:	0e 5f       	subi	r16, 0xFE	; 254
    1c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6e:	4f e6       	ldi	r20, 0x6F	; 111
    1c70:	b4 2e       	mov	r11, r20
    1c72:	b2 22       	and	r11, r18
    1c74:	97 ff       	sbrs	r25, 7
    1c76:	09 c0       	rjmp	.+18     	; 0x1c8a <vfprintf+0x238>
    1c78:	90 95       	com	r25
    1c7a:	80 95       	com	r24
    1c7c:	70 95       	com	r23
    1c7e:	61 95       	neg	r22
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	8f 4f       	sbci	r24, 0xFF	; 255
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	f0 e8       	ldi	r31, 0x80	; 128
    1c88:	bf 2a       	or	r11, r31
    1c8a:	a2 01       	movw	r20, r4
    1c8c:	2a e0       	ldi	r18, 0x0A	; 10
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	25 d1       	rcall	.+586    	; 0x1edc <__ultoa_invert>
    1c92:	78 2e       	mov	r7, r24
    1c94:	74 18       	sub	r7, r4
    1c96:	44 c0       	rjmp	.+136    	; 0x1d20 <vfprintf+0x2ce>
    1c98:	85 37       	cpi	r24, 0x75	; 117
    1c9a:	31 f4       	brne	.+12     	; 0x1ca8 <vfprintf+0x256>
    1c9c:	3f ee       	ldi	r19, 0xEF	; 239
    1c9e:	b3 2e       	mov	r11, r19
    1ca0:	b2 22       	and	r11, r18
    1ca2:	2a e0       	ldi	r18, 0x0A	; 10
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	25 c0       	rjmp	.+74     	; 0x1cf2 <vfprintf+0x2a0>
    1ca8:	99 ef       	ldi	r25, 0xF9	; 249
    1caa:	b9 2e       	mov	r11, r25
    1cac:	b2 22       	and	r11, r18
    1cae:	8f 36       	cpi	r24, 0x6F	; 111
    1cb0:	c1 f0       	breq	.+48     	; 0x1ce2 <vfprintf+0x290>
    1cb2:	80 37       	cpi	r24, 0x70	; 112
    1cb4:	20 f4       	brcc	.+8      	; 0x1cbe <vfprintf+0x26c>
    1cb6:	88 35       	cpi	r24, 0x58	; 88
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <vfprintf+0x26a>
    1cba:	ae c0       	rjmp	.+348    	; 0x1e18 <vfprintf+0x3c6>
    1cbc:	0d c0       	rjmp	.+26     	; 0x1cd8 <vfprintf+0x286>
    1cbe:	80 37       	cpi	r24, 0x70	; 112
    1cc0:	21 f0       	breq	.+8      	; 0x1cca <vfprintf+0x278>
    1cc2:	88 37       	cpi	r24, 0x78	; 120
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <vfprintf+0x276>
    1cc6:	a8 c0       	rjmp	.+336    	; 0x1e18 <vfprintf+0x3c6>
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <vfprintf+0x27c>
    1cca:	20 e1       	ldi	r18, 0x10	; 16
    1ccc:	b2 2a       	or	r11, r18
    1cce:	b4 fe       	sbrs	r11, 4
    1cd0:	0b c0       	rjmp	.+22     	; 0x1ce8 <vfprintf+0x296>
    1cd2:	84 e0       	ldi	r24, 0x04	; 4
    1cd4:	b8 2a       	or	r11, r24
    1cd6:	08 c0       	rjmp	.+16     	; 0x1ce8 <vfprintf+0x296>
    1cd8:	b4 fe       	sbrs	r11, 4
    1cda:	09 c0       	rjmp	.+18     	; 0x1cee <vfprintf+0x29c>
    1cdc:	e6 e0       	ldi	r30, 0x06	; 6
    1cde:	be 2a       	or	r11, r30
    1ce0:	06 c0       	rjmp	.+12     	; 0x1cee <vfprintf+0x29c>
    1ce2:	28 e0       	ldi	r18, 0x08	; 8
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	05 c0       	rjmp	.+10     	; 0x1cf2 <vfprintf+0x2a0>
    1ce8:	20 e1       	ldi	r18, 0x10	; 16
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <vfprintf+0x2a0>
    1cee:	20 e1       	ldi	r18, 0x10	; 16
    1cf0:	32 e0       	ldi	r19, 0x02	; 2
    1cf2:	b7 fe       	sbrs	r11, 7
    1cf4:	08 c0       	rjmp	.+16     	; 0x1d06 <vfprintf+0x2b4>
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	60 81       	ld	r22, Z
    1cfa:	71 81       	ldd	r23, Z+1	; 0x01
    1cfc:	82 81       	ldd	r24, Z+2	; 0x02
    1cfe:	93 81       	ldd	r25, Z+3	; 0x03
    1d00:	0c 5f       	subi	r16, 0xFC	; 252
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	07 c0       	rjmp	.+14     	; 0x1d14 <vfprintf+0x2c2>
    1d06:	f8 01       	movw	r30, r16
    1d08:	60 81       	ld	r22, Z
    1d0a:	71 81       	ldd	r23, Z+1	; 0x01
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 5f       	subi	r16, 0xFE	; 254
    1d12:	1f 4f       	sbci	r17, 0xFF	; 255
    1d14:	a2 01       	movw	r20, r4
    1d16:	e2 d0       	rcall	.+452    	; 0x1edc <__ultoa_invert>
    1d18:	78 2e       	mov	r7, r24
    1d1a:	74 18       	sub	r7, r4
    1d1c:	ff e7       	ldi	r31, 0x7F	; 127
    1d1e:	bf 22       	and	r11, r31
    1d20:	b6 fe       	sbrs	r11, 6
    1d22:	0b c0       	rjmp	.+22     	; 0x1d3a <vfprintf+0x2e8>
    1d24:	2e ef       	ldi	r18, 0xFE	; 254
    1d26:	b2 22       	and	r11, r18
    1d28:	7e 14       	cp	r7, r14
    1d2a:	38 f4       	brcc	.+14     	; 0x1d3a <vfprintf+0x2e8>
    1d2c:	b4 fe       	sbrs	r11, 4
    1d2e:	07 c0       	rjmp	.+14     	; 0x1d3e <vfprintf+0x2ec>
    1d30:	b2 fc       	sbrc	r11, 2
    1d32:	05 c0       	rjmp	.+10     	; 0x1d3e <vfprintf+0x2ec>
    1d34:	8f ee       	ldi	r24, 0xEF	; 239
    1d36:	b8 22       	and	r11, r24
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <vfprintf+0x2ec>
    1d3a:	a7 2c       	mov	r10, r7
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <vfprintf+0x2ee>
    1d3e:	ae 2c       	mov	r10, r14
    1d40:	8b 2d       	mov	r24, r11
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	b4 fe       	sbrs	r11, 4
    1d46:	0d c0       	rjmp	.+26     	; 0x1d62 <vfprintf+0x310>
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e7 0d       	add	r30, r7
    1d4c:	f1 1d       	adc	r31, r1
    1d4e:	20 81       	ld	r18, Z
    1d50:	20 33       	cpi	r18, 0x30	; 48
    1d52:	19 f4       	brne	.+6      	; 0x1d5a <vfprintf+0x308>
    1d54:	e9 ee       	ldi	r30, 0xE9	; 233
    1d56:	be 22       	and	r11, r30
    1d58:	09 c0       	rjmp	.+18     	; 0x1d6c <vfprintf+0x31a>
    1d5a:	a3 94       	inc	r10
    1d5c:	b2 fe       	sbrs	r11, 2
    1d5e:	06 c0       	rjmp	.+12     	; 0x1d6c <vfprintf+0x31a>
    1d60:	04 c0       	rjmp	.+8      	; 0x1d6a <vfprintf+0x318>
    1d62:	86 78       	andi	r24, 0x86	; 134
    1d64:	90 70       	andi	r25, 0x00	; 0
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <vfprintf+0x31a>
    1d6a:	a3 94       	inc	r10
    1d6c:	8b 2c       	mov	r8, r11
    1d6e:	99 24       	eor	r9, r9
    1d70:	b3 fc       	sbrc	r11, 3
    1d72:	13 c0       	rjmp	.+38     	; 0x1d9a <vfprintf+0x348>
    1d74:	b0 fe       	sbrs	r11, 0
    1d76:	0e c0       	rjmp	.+28     	; 0x1d94 <vfprintf+0x342>
    1d78:	af 14       	cp	r10, r15
    1d7a:	28 f4       	brcc	.+10     	; 0x1d86 <vfprintf+0x334>
    1d7c:	e7 2c       	mov	r14, r7
    1d7e:	ef 0c       	add	r14, r15
    1d80:	ea 18       	sub	r14, r10
    1d82:	af 2c       	mov	r10, r15
    1d84:	07 c0       	rjmp	.+14     	; 0x1d94 <vfprintf+0x342>
    1d86:	e7 2c       	mov	r14, r7
    1d88:	05 c0       	rjmp	.+10     	; 0x1d94 <vfprintf+0x342>
    1d8a:	80 e2       	ldi	r24, 0x20	; 32
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	b6 01       	movw	r22, r12
    1d90:	79 d0       	rcall	.+242    	; 0x1e84 <fputc>
    1d92:	a3 94       	inc	r10
    1d94:	af 14       	cp	r10, r15
    1d96:	c8 f3       	brcs	.-14     	; 0x1d8a <vfprintf+0x338>
    1d98:	04 c0       	rjmp	.+8      	; 0x1da2 <vfprintf+0x350>
    1d9a:	af 14       	cp	r10, r15
    1d9c:	10 f4       	brcc	.+4      	; 0x1da2 <vfprintf+0x350>
    1d9e:	fa 18       	sub	r15, r10
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <vfprintf+0x352>
    1da2:	ff 24       	eor	r15, r15
    1da4:	84 fe       	sbrs	r8, 4
    1da6:	0e c0       	rjmp	.+28     	; 0x1dc4 <vfprintf+0x372>
    1da8:	80 e3       	ldi	r24, 0x30	; 48
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	b6 01       	movw	r22, r12
    1dae:	6a d0       	rcall	.+212    	; 0x1e84 <fputc>
    1db0:	82 fe       	sbrs	r8, 2
    1db2:	1d c0       	rjmp	.+58     	; 0x1dee <vfprintf+0x39c>
    1db4:	81 fe       	sbrs	r8, 1
    1db6:	03 c0       	rjmp	.+6      	; 0x1dbe <vfprintf+0x36c>
    1db8:	88 e5       	ldi	r24, 0x58	; 88
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	10 c0       	rjmp	.+32     	; 0x1dde <vfprintf+0x38c>
    1dbe:	88 e7       	ldi	r24, 0x78	; 120
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0d c0       	rjmp	.+26     	; 0x1dde <vfprintf+0x38c>
    1dc4:	c4 01       	movw	r24, r8
    1dc6:	86 78       	andi	r24, 0x86	; 134
    1dc8:	90 70       	andi	r25, 0x00	; 0
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	81 f0       	breq	.+32     	; 0x1dee <vfprintf+0x39c>
    1dce:	81 fc       	sbrc	r8, 1
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <vfprintf+0x384>
    1dd2:	80 e2       	ldi	r24, 0x20	; 32
    1dd4:	01 c0       	rjmp	.+2      	; 0x1dd8 <vfprintf+0x386>
    1dd6:	8b e2       	ldi	r24, 0x2B	; 43
    1dd8:	b7 fc       	sbrc	r11, 7
    1dda:	8d e2       	ldi	r24, 0x2D	; 45
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	b6 01       	movw	r22, r12
    1de0:	51 d0       	rcall	.+162    	; 0x1e84 <fputc>
    1de2:	05 c0       	rjmp	.+10     	; 0x1dee <vfprintf+0x39c>
    1de4:	80 e3       	ldi	r24, 0x30	; 48
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	b6 01       	movw	r22, r12
    1dea:	4c d0       	rcall	.+152    	; 0x1e84 <fputc>
    1dec:	ea 94       	dec	r14
    1dee:	7e 14       	cp	r7, r14
    1df0:	c8 f3       	brcs	.-14     	; 0x1de4 <vfprintf+0x392>
    1df2:	7a 94       	dec	r7
    1df4:	f2 01       	movw	r30, r4
    1df6:	e7 0d       	add	r30, r7
    1df8:	f1 1d       	adc	r31, r1
    1dfa:	80 81       	ld	r24, Z
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	b6 01       	movw	r22, r12
    1e00:	41 d0       	rcall	.+130    	; 0x1e84 <fputc>
    1e02:	77 20       	and	r7, r7
    1e04:	b1 f7       	brne	.-20     	; 0x1df2 <vfprintf+0x3a0>
    1e06:	05 c0       	rjmp	.+10     	; 0x1e12 <vfprintf+0x3c0>
    1e08:	80 e2       	ldi	r24, 0x20	; 32
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	b6 01       	movw	r22, r12
    1e0e:	3a d0       	rcall	.+116    	; 0x1e84 <fputc>
    1e10:	fa 94       	dec	r15
    1e12:	ff 20       	and	r15, r15
    1e14:	c9 f7       	brne	.-14     	; 0x1e08 <vfprintf+0x3b6>
    1e16:	44 ce       	rjmp	.-888    	; 0x1aa0 <vfprintf+0x4e>
    1e18:	f6 01       	movw	r30, r12
    1e1a:	26 81       	ldd	r18, Z+6	; 0x06
    1e1c:	37 81       	ldd	r19, Z+7	; 0x07
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <vfprintf+0x3d2>
    1e20:	2f ef       	ldi	r18, 0xFF	; 255
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	c9 01       	movw	r24, r18
    1e26:	2c 96       	adiw	r28, 0x0c	; 12
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	ff 90       	pop	r15
    1e3c:	ef 90       	pop	r14
    1e3e:	df 90       	pop	r13
    1e40:	cf 90       	pop	r12
    1e42:	bf 90       	pop	r11
    1e44:	af 90       	pop	r10
    1e46:	9f 90       	pop	r9
    1e48:	8f 90       	pop	r8
    1e4a:	7f 90       	pop	r7
    1e4c:	6f 90       	pop	r6
    1e4e:	5f 90       	pop	r5
    1e50:	4f 90       	pop	r4
    1e52:	3f 90       	pop	r3
    1e54:	2f 90       	pop	r2
    1e56:	08 95       	ret

00001e58 <strnlen_P>:
    1e58:	fc 01       	movw	r30, r24
    1e5a:	05 90       	lpm	r0, Z+
    1e5c:	61 50       	subi	r22, 0x01	; 1
    1e5e:	70 40       	sbci	r23, 0x00	; 0
    1e60:	01 10       	cpse	r0, r1
    1e62:	d8 f7       	brcc	.-10     	; 0x1e5a <strnlen_P+0x2>
    1e64:	80 95       	com	r24
    1e66:	90 95       	com	r25
    1e68:	8e 0f       	add	r24, r30
    1e6a:	9f 1f       	adc	r25, r31
    1e6c:	08 95       	ret

00001e6e <strnlen>:
    1e6e:	fc 01       	movw	r30, r24
    1e70:	61 50       	subi	r22, 0x01	; 1
    1e72:	70 40       	sbci	r23, 0x00	; 0
    1e74:	01 90       	ld	r0, Z+
    1e76:	01 10       	cpse	r0, r1
    1e78:	d8 f7       	brcc	.-10     	; 0x1e70 <strnlen+0x2>
    1e7a:	80 95       	com	r24
    1e7c:	90 95       	com	r25
    1e7e:	8e 0f       	add	r24, r30
    1e80:	9f 1f       	adc	r25, r31
    1e82:	08 95       	ret

00001e84 <fputc>:
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	8c 01       	movw	r16, r24
    1e8e:	eb 01       	movw	r28, r22
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	81 ff       	sbrs	r24, 1
    1e94:	1b c0       	rjmp	.+54     	; 0x1ecc <fputc+0x48>
    1e96:	82 ff       	sbrs	r24, 2
    1e98:	0d c0       	rjmp	.+26     	; 0x1eb4 <fputc+0x30>
    1e9a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e9c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	28 17       	cp	r18, r24
    1ea4:	39 07       	cpc	r19, r25
    1ea6:	64 f4       	brge	.+24     	; 0x1ec0 <fputc+0x3c>
    1ea8:	e8 81       	ld	r30, Y
    1eaa:	f9 81       	ldd	r31, Y+1	; 0x01
    1eac:	01 93       	st	Z+, r16
    1eae:	f9 83       	std	Y+1, r31	; 0x01
    1eb0:	e8 83       	st	Y, r30
    1eb2:	06 c0       	rjmp	.+12     	; 0x1ec0 <fputc+0x3c>
    1eb4:	e8 85       	ldd	r30, Y+8	; 0x08
    1eb6:	f9 85       	ldd	r31, Y+9	; 0x09
    1eb8:	80 2f       	mov	r24, r16
    1eba:	09 95       	icall
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	31 f4       	brne	.+12     	; 0x1ecc <fputc+0x48>
    1ec0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec4:	01 96       	adiw	r24, 0x01	; 1
    1ec6:	9f 83       	std	Y+7, r25	; 0x07
    1ec8:	8e 83       	std	Y+6, r24	; 0x06
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <fputc+0x4c>
    1ecc:	0f ef       	ldi	r16, 0xFF	; 255
    1ece:	1f ef       	ldi	r17, 0xFF	; 255
    1ed0:	c8 01       	movw	r24, r16
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	08 95       	ret

00001edc <__ultoa_invert>:
    1edc:	fa 01       	movw	r30, r20
    1ede:	aa 27       	eor	r26, r26
    1ee0:	28 30       	cpi	r18, 0x08	; 8
    1ee2:	51 f1       	breq	.+84     	; 0x1f38 <__ultoa_invert+0x5c>
    1ee4:	20 31       	cpi	r18, 0x10	; 16
    1ee6:	81 f1       	breq	.+96     	; 0x1f48 <__ultoa_invert+0x6c>
    1ee8:	e8 94       	clt
    1eea:	6f 93       	push	r22
    1eec:	6e 7f       	andi	r22, 0xFE	; 254
    1eee:	6e 5f       	subi	r22, 0xFE	; 254
    1ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef6:	af 4f       	sbci	r26, 0xFF	; 255
    1ef8:	b1 e0       	ldi	r27, 0x01	; 1
    1efa:	3e d0       	rcall	.+124    	; 0x1f78 <__ultoa_invert+0x9c>
    1efc:	b4 e0       	ldi	r27, 0x04	; 4
    1efe:	3c d0       	rcall	.+120    	; 0x1f78 <__ultoa_invert+0x9c>
    1f00:	67 0f       	add	r22, r23
    1f02:	78 1f       	adc	r23, r24
    1f04:	89 1f       	adc	r24, r25
    1f06:	9a 1f       	adc	r25, r26
    1f08:	a1 1d       	adc	r26, r1
    1f0a:	68 0f       	add	r22, r24
    1f0c:	79 1f       	adc	r23, r25
    1f0e:	8a 1f       	adc	r24, r26
    1f10:	91 1d       	adc	r25, r1
    1f12:	a1 1d       	adc	r26, r1
    1f14:	6a 0f       	add	r22, r26
    1f16:	71 1d       	adc	r23, r1
    1f18:	81 1d       	adc	r24, r1
    1f1a:	91 1d       	adc	r25, r1
    1f1c:	a1 1d       	adc	r26, r1
    1f1e:	20 d0       	rcall	.+64     	; 0x1f60 <__ultoa_invert+0x84>
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <__ultoa_invert+0x48>
    1f22:	68 94       	set
    1f24:	3f 91       	pop	r19
    1f26:	2a e0       	ldi	r18, 0x0A	; 10
    1f28:	26 9f       	mul	r18, r22
    1f2a:	11 24       	eor	r1, r1
    1f2c:	30 19       	sub	r19, r0
    1f2e:	30 5d       	subi	r19, 0xD0	; 208
    1f30:	31 93       	st	Z+, r19
    1f32:	de f6       	brtc	.-74     	; 0x1eea <__ultoa_invert+0xe>
    1f34:	cf 01       	movw	r24, r30
    1f36:	08 95       	ret
    1f38:	46 2f       	mov	r20, r22
    1f3a:	47 70       	andi	r20, 0x07	; 7
    1f3c:	40 5d       	subi	r20, 0xD0	; 208
    1f3e:	41 93       	st	Z+, r20
    1f40:	b3 e0       	ldi	r27, 0x03	; 3
    1f42:	0f d0       	rcall	.+30     	; 0x1f62 <__ultoa_invert+0x86>
    1f44:	c9 f7       	brne	.-14     	; 0x1f38 <__ultoa_invert+0x5c>
    1f46:	f6 cf       	rjmp	.-20     	; 0x1f34 <__ultoa_invert+0x58>
    1f48:	46 2f       	mov	r20, r22
    1f4a:	4f 70       	andi	r20, 0x0F	; 15
    1f4c:	40 5d       	subi	r20, 0xD0	; 208
    1f4e:	4a 33       	cpi	r20, 0x3A	; 58
    1f50:	18 f0       	brcs	.+6      	; 0x1f58 <__ultoa_invert+0x7c>
    1f52:	49 5d       	subi	r20, 0xD9	; 217
    1f54:	31 fd       	sbrc	r19, 1
    1f56:	40 52       	subi	r20, 0x20	; 32
    1f58:	41 93       	st	Z+, r20
    1f5a:	02 d0       	rcall	.+4      	; 0x1f60 <__ultoa_invert+0x84>
    1f5c:	a9 f7       	brne	.-22     	; 0x1f48 <__ultoa_invert+0x6c>
    1f5e:	ea cf       	rjmp	.-44     	; 0x1f34 <__ultoa_invert+0x58>
    1f60:	b4 e0       	ldi	r27, 0x04	; 4
    1f62:	a6 95       	lsr	r26
    1f64:	97 95       	ror	r25
    1f66:	87 95       	ror	r24
    1f68:	77 95       	ror	r23
    1f6a:	67 95       	ror	r22
    1f6c:	ba 95       	dec	r27
    1f6e:	c9 f7       	brne	.-14     	; 0x1f62 <__ultoa_invert+0x86>
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	61 05       	cpc	r22, r1
    1f74:	71 05       	cpc	r23, r1
    1f76:	08 95       	ret
    1f78:	9b 01       	movw	r18, r22
    1f7a:	ac 01       	movw	r20, r24
    1f7c:	0a 2e       	mov	r0, r26
    1f7e:	06 94       	lsr	r0
    1f80:	57 95       	ror	r21
    1f82:	47 95       	ror	r20
    1f84:	37 95       	ror	r19
    1f86:	27 95       	ror	r18
    1f88:	ba 95       	dec	r27
    1f8a:	c9 f7       	brne	.-14     	; 0x1f7e <__ultoa_invert+0xa2>
    1f8c:	62 0f       	add	r22, r18
    1f8e:	73 1f       	adc	r23, r19
    1f90:	84 1f       	adc	r24, r20
    1f92:	95 1f       	adc	r25, r21
    1f94:	a0 1d       	adc	r26, r0
    1f96:	08 95       	ret

00001f98 <_exit>:
    1f98:	f8 94       	cli

00001f9a <__stop_program>:
    1f9a:	ff cf       	rjmp	.-2      	; 0x1f9a <__stop_program>
