
AudioInputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000196c  00001a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000196c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800114  00800114  00001a14  2**0
                  ALLOC
  3 .stab         000021a8  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7e  00000000  00000000  00003bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000350  00000000  00000000  0000493a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008ae  00000000  00000000  00004c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004f44  00000000  00000000  00005538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001659  00000000  00000000  0000a47c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004556  00000000  00000000  0000bad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000500  00000000  00000000  0001002c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000026ce  00000000  00000000  0001052c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002d9c  00000000  00000000  00012bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000009ed  00000000  00000000  00015996  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000440  00000000  00000000  00016383  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c1       	rjmp	.+754    	; 0x2f4 <__ctors_end>
       2:	00 00       	nop
       4:	95 c1       	rjmp	.+810    	; 0x330 <__bad_interrupt>
       6:	00 00       	nop
       8:	93 c1       	rjmp	.+806    	; 0x330 <__bad_interrupt>
       a:	00 00       	nop
       c:	91 c1       	rjmp	.+802    	; 0x330 <__bad_interrupt>
       e:	00 00       	nop
      10:	8f c1       	rjmp	.+798    	; 0x330 <__bad_interrupt>
      12:	00 00       	nop
      14:	8d c1       	rjmp	.+794    	; 0x330 <__bad_interrupt>
      16:	00 00       	nop
      18:	8b c1       	rjmp	.+790    	; 0x330 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	89 c1       	rjmp	.+786    	; 0x330 <__bad_interrupt>
      1e:	00 00       	nop
      20:	87 c1       	rjmp	.+782    	; 0x330 <__bad_interrupt>
      22:	00 00       	nop
      24:	85 c1       	rjmp	.+778    	; 0x330 <__bad_interrupt>
      26:	00 00       	nop
      28:	cd c6       	rjmp	.+3482   	; 0xdc4 <__vector_10>
      2a:	00 00       	nop
      2c:	81 c1       	rjmp	.+770    	; 0x330 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7f c1       	rjmp	.+766    	; 0x330 <__bad_interrupt>
      32:	00 00       	nop
      34:	7d c1       	rjmp	.+762    	; 0x330 <__bad_interrupt>
      36:	00 00       	nop
      38:	7b c1       	rjmp	.+758    	; 0x330 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	79 c1       	rjmp	.+754    	; 0x330 <__bad_interrupt>
      3e:	00 00       	nop
      40:	77 c1       	rjmp	.+750    	; 0x330 <__bad_interrupt>
      42:	00 00       	nop
      44:	75 c1       	rjmp	.+746    	; 0x330 <__bad_interrupt>
      46:	00 00       	nop
      48:	73 c1       	rjmp	.+742    	; 0x330 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	71 c1       	rjmp	.+738    	; 0x330 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6f c1       	rjmp	.+734    	; 0x330 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c2       	rjmp	.+1354   	; 0x5a0 <__vector_21>
      56:	00 00       	nop
      58:	6b c1       	rjmp	.+726    	; 0x330 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	69 c1       	rjmp	.+722    	; 0x330 <__bad_interrupt>
      5e:	00 00       	nop
      60:	67 c1       	rjmp	.+718    	; 0x330 <__bad_interrupt>
      62:	00 00       	nop
      64:	65 c1       	rjmp	.+714    	; 0x330 <__bad_interrupt>
      66:	00 00       	nop
      68:	63 c1       	rjmp	.+710    	; 0x330 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	61 c1       	rjmp	.+706    	; 0x330 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5f c1       	rjmp	.+702    	; 0x330 <__bad_interrupt>
      72:	00 00       	nop
      74:	5d c1       	rjmp	.+698    	; 0x330 <__bad_interrupt>
      76:	00 00       	nop
      78:	5b c1       	rjmp	.+694    	; 0x330 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	59 c1       	rjmp	.+690    	; 0x330 <__bad_interrupt>
      7e:	00 00       	nop
      80:	57 c1       	rjmp	.+686    	; 0x330 <__bad_interrupt>
      82:	00 00       	nop
      84:	55 c1       	rjmp	.+682    	; 0x330 <__bad_interrupt>
      86:	00 00       	nop
      88:	53 c1       	rjmp	.+678    	; 0x330 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	51 c1       	rjmp	.+674    	; 0x330 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4f c1       	rjmp	.+670    	; 0x330 <__bad_interrupt>
      92:	00 00       	nop
      94:	4d c1       	rjmp	.+666    	; 0x330 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4299>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4292>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4287>:
     11d:	4d 69 63 72 6f 70 68 6f 6e 65 20 45 6e 75 6d 65     Microphone Enume
     12d:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000136 <__c.4285>:
     136:	1b 5b 33 31 6d 43 6f 75 6c 64 20 6e 6f 74 20 73     .[31mCould not s
     146:	65 74 20 72 65 71 75 65 73 74 65 64 20 41 75 64     et requested Aud
     156:	69 6f 20 73 61 6d 70 6c 65 20 72 61 74 65 2e 0d     io sample rate..
     166:	0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a     . -- Error Code:
     176:	20 25 64 0d 0a 1b 5b 33 37 6d 00                     %d...[37m.

00000181 <__c.4281>:
     181:	1b 5b 33 31 6d 43 6f 75 6c 64 20 6e 6f 74 20 73     .[31mCould not s
     191:	65 74 20 61 6c 74 65 72 6e 61 74 69 76 65 20 73     et alternative s
     1a1:	74 72 65 61 6d 69 6e 67 20 69 6e 74 65 72 66 61     treaming interfa
     1b1:	63 65 20 73 65 74 74 69 6e 67 2e 0d 0a 20 2d 2d     ce setting... --
     1c1:	20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64 0d      Error Code: %d.
     1d1:	0a 1b 5b 33 37 6d 00                                ..[37m.

000001d8 <__c.4279>:
     1d8:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1e8:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1f8:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     208:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     218:	37 6d 00                                            7m.

0000021b <__c.4277>:
     21b:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     22b:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000235 <__c.4275>:
     235:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     245:	69 63 65 2e 0d 0a 00                                ice....

0000024c <__c.4273>:
     24c:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     25c:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     26c:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000276 <__c.4270>:
     276:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     286:	61 74 61 2e 0d 0a 00                                ata....

0000028d <__c.4265>:
     28d:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     29d:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

000002ac <__c.4260>:
     2ac:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     2bc:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000002c9 <__c.4251>:
     2c9:	1b 5b 33 36 6d 41 75 64 69 6f 20 49 6e 70 75 74     .[36mAudio Input
     2d9:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     2e9:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00                    ng....[37m.

000002f4 <__ctors_end>:
     2f4:	11 24       	eor	r1, r1
     2f6:	1f be       	out	0x3f, r1	; 63
     2f8:	cf ef       	ldi	r28, 0xFF	; 255
     2fa:	d0 e2       	ldi	r29, 0x20	; 32
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	cd bf       	out	0x3d, r28	; 61

00000300 <__do_copy_data>:
     300:	11 e0       	ldi	r17, 0x01	; 1
     302:	a0 e0       	ldi	r26, 0x00	; 0
     304:	b1 e0       	ldi	r27, 0x01	; 1
     306:	ec e6       	ldi	r30, 0x6C	; 108
     308:	f9 e1       	ldi	r31, 0x19	; 25
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0b bf       	out	0x3b, r16	; 59
     30e:	02 c0       	rjmp	.+4      	; 0x314 <__do_copy_data+0x14>
     310:	07 90       	elpm	r0, Z+
     312:	0d 92       	st	X+, r0
     314:	a4 31       	cpi	r26, 0x14	; 20
     316:	b1 07       	cpc	r27, r17
     318:	d9 f7       	brne	.-10     	; 0x310 <__do_copy_data+0x10>

0000031a <__do_clear_bss>:
     31a:	11 e0       	ldi	r17, 0x01	; 1
     31c:	a4 e1       	ldi	r26, 0x14	; 20
     31e:	b1 e0       	ldi	r27, 0x01	; 1
     320:	01 c0       	rjmp	.+2      	; 0x324 <.do_clear_bss_start>

00000322 <.do_clear_bss_loop>:
     322:	1d 92       	st	X+, r1

00000324 <.do_clear_bss_start>:
     324:	a9 33       	cpi	r26, 0x39	; 57
     326:	b1 07       	cpc	r27, r17
     328:	e1 f7       	brne	.-8      	; 0x322 <.do_clear_bss_loop>
     32a:	35 d0       	rcall	.+106    	; 0x396 <main>
     32c:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <_exit>

00000330 <__bad_interrupt>:
     330:	67 ce       	rjmp	.-818    	; 0x0 <__vectors>

00000332 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     332:	9b b1       	in	r25, 0x0b	; 11
     334:	9f 70       	andi	r25, 0x0F	; 15
     336:	98 2b       	or	r25, r24
     338:	9b b9       	out	0x0b, r25	; 11
			}
     33a:	08 95       	ret

0000033c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     33c:	84 b7       	in	r24, 0x34	; 52
     33e:	87 7f       	andi	r24, 0xF7	; 247
     340:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     342:	28 e1       	ldi	r18, 0x18	; 24
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	20 93 60 00 	sts	0x0060, r18
     34c:	10 92 60 00 	sts	0x0060, r1
     350:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	80 e8       	ldi	r24, 0x80	; 128
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	80 93 61 00 	sts	0x0061, r24
     35e:	90 93 61 00 	sts	0x0061, r25
     362:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     364:	83 e3       	ldi	r24, 0x33	; 51
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	90 93 cd 00 	sts	0x00CD, r25
     36c:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     370:	86 e0       	ldi	r24, 0x06	; 6
     372:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     376:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     37a:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     37e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     380:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     382:	8a b1       	in	r24, 0x0a	; 10
     384:	80 6f       	ori	r24, 0xF0	; 240
     386:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     388:	8b b1       	in	r24, 0x0b	; 11
     38a:	8f 70       	andi	r24, 0x0F	; 15
     38c:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     38e:	ff d4       	rcall	.+2558   	; 0xd8e <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
}
     394:	d2 c7       	rjmp	.+4004   	; 0x133a <Serial_CreateStream>

00000396 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     396:	d2 df       	rcall	.-92     	; 0x33c <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Audio Input Host Demo running.\r\n" ESC_FG_WHITE));
     398:	89 ec       	ldi	r24, 0xC9	; 201
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3a0:	80 e1       	ldi	r24, 0x10	; 16
     3a2:	c7 df       	rcall	.-114    	; 0x332 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     3a4:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		USB_USBTask();
     3a6:	a0 d7       	rcall	.+3904   	; 0x12e8 <USB_USBTask>
     3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <main+0x10>

000003aa <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     3aa:	8c ea       	ldi	r24, 0xAC	; 172
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3b2:	80 ea       	ldi	r24, 0xA0	; 160
}
     3b4:	be cf       	rjmp	.-132    	; 0x332 <LEDs_SetAllLEDs>

000003b6 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     3b6:	8d e8       	ldi	r24, 0x8D	; 141
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	fb d7       	rcall	.+4086   	; 0x13b2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3bc:	80 e1       	ldi	r24, 0x10	; 16
}
     3be:	b9 cf       	rjmp	.-142    	; 0x332 <LEDs_SetAllLEDs>

000003c0 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3c0:	1f 93       	push	r17
     3c2:	df 93       	push	r29
     3c4:	cf 93       	push	r28
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <EVENT_USB_Host_DeviceEnumerationComplete+0x8>
     3c8:	0f 92       	push	r0
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
	puts_P(PSTR("Getting Config Data.\r\n"));
     3ce:	86 e7       	ldi	r24, 0x76	; 118
     3d0:	92 e0       	ldi	r25, 0x02	; 2
     3d2:	ef d7       	rcall	.+4062   	; 0x13b2 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     3d4:	8a d1       	rcall	.+788    	; 0x6ea <ProcessConfigurationDescriptor>
     3d6:	18 2f       	mov	r17, r24
     3d8:	88 23       	and	r24, r24
     3da:	f1 f0       	breq	.+60     	; 0x418 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
	{
		if (ErrorCode == ControlError)
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	19 f4       	brne	.+6      	; 0x3e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     3e0:	8c e4       	ldi	r24, 0x4C	; 76
     3e2:	92 e0       	ldi	r25, 0x02	; 2
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <EVENT_USB_Host_DeviceEnumerationComplete+0x2a>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     3e6:	85 e3       	ldi	r24, 0x35	; 53
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	e3 d7       	rcall	.+4038   	; 0x13b2 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3ec:	00 d0       	rcall	.+0      	; 0x3ee <EVENT_USB_Host_DeviceEnumerationComplete+0x2e>
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
     3f0:	ed b7       	in	r30, 0x3d	; 61
     3f2:	fe b7       	in	r31, 0x3e	; 62
     3f4:	31 96       	adiw	r30, 0x01	; 1
     3f6:	2b e1       	ldi	r18, 0x1B	; 27
     3f8:	32 e0       	ldi	r19, 0x02	; 2
     3fa:	ad b7       	in	r26, 0x3d	; 61
     3fc:	be b7       	in	r27, 0x3e	; 62
     3fe:	12 96       	adiw	r26, 0x02	; 2
     400:	3c 93       	st	X, r19
     402:	2e 93       	st	-X, r18
     404:	11 97       	sbiw	r26, 0x01	; 1
     406:	12 83       	std	Z+2, r17	; 0x02
     408:	13 82       	std	Z+3, r1	; 0x03
     40a:	b4 d7       	rcall	.+3944   	; 0x1374 <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	80 e9       	ldi	r24, 0x90	; 144
     416:	75 c0       	rjmp	.+234    	; 0x502 <EVENT_USB_Host_DeviceEnumerationComplete+0x142>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	2a d7       	rcall	.+3668   	; 0x1270 <USB_Host_SetDeviceConfiguration>
     41c:	88 23       	and	r24, r24
     41e:	79 f0       	breq	.+30     	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     420:	00 d0       	rcall	.+0      	; 0x422 <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
     422:	00 d0       	rcall	.+0      	; 0x424 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     424:	ed b7       	in	r30, 0x3d	; 61
     426:	fe b7       	in	r31, 0x3e	; 62
     428:	31 96       	adiw	r30, 0x01	; 1
     42a:	28 ed       	ldi	r18, 0xD8	; 216
     42c:	31 e0       	ldi	r19, 0x01	; 1
     42e:	ad b7       	in	r26, 0x3d	; 61
     430:	be b7       	in	r27, 0x3e	; 62
     432:	12 96       	adiw	r26, 0x02	; 2
     434:	3c 93       	st	X, r19
     436:	2e 93       	st	-X, r18
     438:	11 97       	sbiw	r26, 0x01	; 1
     43a:	82 83       	std	Z+2, r24	; 0x02
     43c:	e5 cf       	rjmp	.-54     	; 0x408 <EVENT_USB_Host_DeviceEnumerationComplete+0x48>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if ((ErrorCode = USB_Host_SetInterfaceAltSetting(StreamingInterfaceIndex,
     43e:	80 91 14 01 	lds	r24, 0x0114
     442:	60 91 15 01 	lds	r22, 0x0115
     446:	39 d7       	rcall	.+3698   	; 0x12ba <USB_Host_SetInterfaceAltSetting>
     448:	88 23       	and	r24, r24
     44a:	41 f0       	breq	.+16     	; 0x45c <EVENT_USB_Host_DeviceEnumerationComplete+0x9c>
	                                                 StreamingInterfaceAltSetting)) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Could not set alternative streaming interface setting.\r\n"
     44c:	00 d0       	rcall	.+0      	; 0x44e <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
     44e:	00 d0       	rcall	.+0      	; 0x450 <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
     450:	ed b7       	in	r30, 0x3d	; 61
     452:	fe b7       	in	r31, 0x3e	; 62
     454:	31 96       	adiw	r30, 0x01	; 1
     456:	21 e8       	ldi	r18, 0x81	; 129
     458:	31 e0       	ldi	r19, 0x01	; 1
     45a:	2f c0       	rjmp	.+94     	; 0x4ba <EVENT_USB_Host_DeviceEnumerationComplete+0xfa>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	USB_ControlRequest = (USB_Request_Header_t)
     45c:	20 91 16 01 	lds	r18, 0x0116
     460:	82 e2       	ldi	r24, 0x22	; 34
     462:	80 93 1c 01 	sts	0x011C, r24
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 93 1d 01 	sts	0x011D, r24
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	90 93 1f 01 	sts	0x011F, r25
     474:	80 93 1e 01 	sts	0x011E, r24
     478:	20 93 20 01 	sts	0x0120, r18
     47c:	10 92 21 01 	sts	0x0121, r1
     480:	83 e0       	ldi	r24, 0x03	; 3
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	90 93 23 01 	sts	0x0123, r25
     488:	80 93 22 01 	sts	0x0122, r24
			.wValue        = (AUDIO_EPCONTROL_SamplingFreq << 8),
			.wIndex        = StreamingEndpointAddress,
			.wLength       = sizeof(USB_Audio_SampleFreq_t),
		};

	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     48c:	de 01       	movw	r26, r28
     48e:	11 96       	adiw	r26, 0x01	; 1
     490:	e0 e0       	ldi	r30, 0x00	; 0
     492:	f1 e0       	ldi	r31, 0x01	; 1
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	01 90       	ld	r0, Z+
     498:	0d 92       	st	X+, r0
     49a:	81 50       	subi	r24, 0x01	; 1
     49c:	e1 f7       	brne	.-8      	; 0x496 <EVENT_USB_Host_DeviceEnumerationComplete+0xd6>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     49e:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Set the sample rate on the streaming interface endpoint */
	if ((ErrorCode = USB_Host_SendControlRequest(&SampleRate)) != HOST_SENDCONTROL_Successful)
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	e5 d5       	rcall	.+3018   	; 0x1072 <USB_Host_SendControlRequest>
     4a8:	88 23       	and	r24, r24
     4aa:	c9 f0       	breq	.+50     	; 0x4de <EVENT_USB_Host_DeviceEnumerationComplete+0x11e>
	{
		printf_P(PSTR(ESC_FG_RED "Could not set requested Audio sample rate.\r\n"
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <EVENT_USB_Host_DeviceEnumerationComplete+0xee>
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <EVENT_USB_Host_DeviceEnumerationComplete+0xf0>
     4b0:	ed b7       	in	r30, 0x3d	; 61
     4b2:	fe b7       	in	r31, 0x3e	; 62
     4b4:	31 96       	adiw	r30, 0x01	; 1
     4b6:	26 e3       	ldi	r18, 0x36	; 54
     4b8:	31 e0       	ldi	r19, 0x01	; 1
     4ba:	ad b7       	in	r26, 0x3d	; 61
     4bc:	be b7       	in	r27, 0x3e	; 62
     4be:	12 96       	adiw	r26, 0x02	; 2
     4c0:	3c 93       	st	X, r19
     4c2:	2e 93       	st	-X, r18
     4c4:	11 97       	sbiw	r26, 0x01	; 1
     4c6:	82 83       	std	Z+2, r24	; 0x02
     4c8:	13 82       	std	Z+3, r1	; 0x03
     4ca:	54 d7       	rcall	.+3752   	; 0x1374 <printf_P>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	80 e9       	ldi	r24, 0x90	; 144
     4d6:	2d df       	rcall	.-422    	; 0x332 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	ca d6       	rcall	.+3476   	; 0x1270 <USB_Host_SetDeviceConfiguration>
		return;
     4dc:	13 c0       	rjmp	.+38     	; 0x504 <EVENT_USB_Host_DeviceEnumerationComplete+0x144>
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	80 93 6e 00 	sts	0x006E, r24
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     4e4:	93 e1       	ldi	r25, 0x13	; 19
     4e6:	97 bd       	out	0x27, r25	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
     4e8:	84 bd       	out	0x24, r24	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     4ea:	85 bd       	out	0x25, r24	; 37

	/* Set speaker as output */
	DDRC   |= (1 << 6);
     4ec:	3e 9a       	sbi	0x07, 6	; 7

	/* PWM speaker timer initialization */
	TCCR3A  = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)); // Set on match, clear on TOP
     4ee:	81 ec       	ldi	r24, 0xC1	; 193
     4f0:	80 93 90 00 	sts	0x0090, r24
	TCCR3B  = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
     4f4:	89 e0       	ldi	r24, 0x09	; 9
     4f6:	80 93 91 00 	sts	0x0091, r24

	puts_P(PSTR("Microphone Enumerated.\r\n"));
     4fa:	8d e1       	ldi	r24, 0x1D	; 29
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	59 d7       	rcall	.+3762   	; 0x13b2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     500:	80 e6       	ldi	r24, 0x60	; 96
     502:	17 df       	rcall	.-466    	; 0x332 <LEDs_SetAllLEDs>
}
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	cf 91       	pop	r28
     50c:	df 91       	pop	r29
     50e:	1f 91       	pop	r17
     510:	08 95       	ret

00000512 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     512:	df 93       	push	r29
     514:	cf 93       	push	r28
     516:	0f 92       	push	r0
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     51c:	89 83       	std	Y+1, r24	; 0x01
     51e:	cf d3       	rcall	.+1950   	; 0xcbe <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     520:	00 d0       	rcall	.+0      	; 0x522 <EVENT_USB_Host_HostError+0x10>
     522:	00 d0       	rcall	.+0      	; 0x524 <EVENT_USB_Host_HostError+0x12>
     524:	ed b7       	in	r30, 0x3d	; 61
     526:	fe b7       	in	r31, 0x3e	; 62
     528:	31 96       	adiw	r30, 0x01	; 1
     52a:	2e ee       	ldi	r18, 0xEE	; 238
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	ad b7       	in	r26, 0x3d	; 61
     530:	be b7       	in	r27, 0x3e	; 62
     532:	12 96       	adiw	r26, 0x02	; 2
     534:	3c 93       	st	X, r19
     536:	2e 93       	st	-X, r18
     538:	11 97       	sbiw	r26, 0x01	; 1
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	82 83       	std	Z+2, r24	; 0x02
     53e:	13 82       	std	Z+3, r1	; 0x03
     540:	19 d7       	rcall	.+3634   	; 0x1374 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	80 e9       	ldi	r24, 0x90	; 144
     54c:	f2 de       	rcall	.-540    	; 0x332 <LEDs_SetAllLEDs>
     54e:	ff cf       	rjmp	.-2      	; 0x54e <EVENT_USB_Host_HostError+0x3c>

00000550 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     550:	90 91 24 01 	lds	r25, 0x0124
     554:	2d b7       	in	r18, 0x3d	; 61
     556:	3e b7       	in	r19, 0x3e	; 62
     558:	28 50       	subi	r18, 0x08	; 8
     55a:	30 40       	sbci	r19, 0x00	; 0
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	3e bf       	out	0x3e, r19	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	2d bf       	out	0x3d, r18	; 61
     566:	ed b7       	in	r30, 0x3d	; 61
     568:	fe b7       	in	r31, 0x3e	; 62
     56a:	31 96       	adiw	r30, 0x01	; 1
     56c:	28 e9       	ldi	r18, 0x98	; 152
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	ad b7       	in	r26, 0x3d	; 61
     572:	be b7       	in	r27, 0x3e	; 62
     574:	12 96       	adiw	r26, 0x02	; 2
     576:	3c 93       	st	X, r19
     578:	2e 93       	st	-X, r18
     57a:	11 97       	sbiw	r26, 0x01	; 1
     57c:	82 83       	std	Z+2, r24	; 0x02
     57e:	13 82       	std	Z+3, r1	; 0x03
     580:	64 83       	std	Z+4, r22	; 0x04
     582:	15 82       	std	Z+5, r1	; 0x05
     584:	96 83       	std	Z+6, r25	; 0x06
     586:	17 82       	std	Z+7, r1	; 0x07
     588:	f5 d6       	rcall	.+3562   	; 0x1374 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     58a:	2d b7       	in	r18, 0x3d	; 61
     58c:	3e b7       	in	r19, 0x3e	; 62
     58e:	28 5f       	subi	r18, 0xF8	; 248
     590:	3f 4f       	sbci	r19, 0xFF	; 255
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	3e bf       	out	0x3e, r19	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	2d bf       	out	0x3d, r18	; 61
     59c:	80 e9       	ldi	r24, 0x90	; 144
}
     59e:	c9 ce       	rjmp	.-622    	; 0x332 <LEDs_SetAllLEDs>

000005a0 <__vector_21>:

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	0b b6       	in	r0, 0x3b	; 59
     5aa:	0f 92       	push	r0
     5ac:	11 24       	eor	r1, r1
     5ae:	1f 93       	push	r17
     5b0:	2f 93       	push	r18
     5b2:	3f 93       	push	r19
     5b4:	4f 93       	push	r20
     5b6:	5f 93       	push	r21
     5b8:	6f 93       	push	r22
     5ba:	7f 93       	push	r23
     5bc:	8f 93       	push	r24
     5be:	9f 93       	push	r25
     5c0:	af 93       	push	r26
     5c2:	bf 93       	push	r27
     5c4:	ef 93       	push	r30
     5c6:	ff 93       	push	r31
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     5c8:	80 91 a7 00 	lds	r24, 0x00A7
     5cc:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     5ce:	90 91 aa 00 	lds	r25, 0x00AA
     5d2:	90 ff       	sbrs	r25, 0
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <__vector_21+0x3a>
     5d6:	10 e8       	ldi	r17, 0x80	; 128
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <__vector_21+0x3c>
     5da:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     5dc:	18 2b       	or	r17, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     5e4:	80 91 a9 00 	lds	r24, 0x00A9
     5e8:	8f 7b       	andi	r24, 0xBF	; 191
     5ea:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     5ee:	80 91 a6 00 	lds	r24, 0x00A6

	Pipe_SelectPipe(AUDIO_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check if the current pipe can be read from (contains a packet) and the device is sending data */
	if (Pipe_IsINReceived())
     5f2:	80 ff       	sbrs	r24, 0
     5f4:	2b c0       	rjmp	.+86     	; 0x64c <__vector_21+0xac>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UPDATX;
     5f6:	80 91 af 00 	lds	r24, 0x00AF
				Data.Bytes[1] = UPDATX;
     5fa:	40 91 af 00 	lds	r20, 0x00AF
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     5fe:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Retrieve the signed 16-bit audio sample, convert to 8-bit */
		int8_t Sample_8Bit = (Pipe_Read_16_LE() >> 8);

		/* Check to see if the bank is now empty */
		if (!(Pipe_IsReadWriteAllowed()))
     602:	85 fd       	sbrc	r24, 5
     604:	05 c0       	rjmp	.+10     	; 0x610 <__vector_21+0x70>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     606:	80 91 a6 00 	lds	r24, 0x00A6
     60a:	8e 77       	andi	r24, 0x7E	; 126
     60c:	80 93 a6 00 	sts	0x00A6, r24
			/* Acknowledge the packet, clear the bank ready for the next packet */
			Pipe_ClearIN();
		}

		/* Load the sample into the PWM timer channel */
		OCR3A = (Sample_8Bit ^ (1 << 7));
     610:	84 2f       	mov	r24, r20
     612:	99 27       	eor	r25, r25
     614:	87 fd       	sbrc	r24, 7
     616:	90 95       	com	r25
     618:	20 e8       	ldi	r18, 0x80	; 128
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	82 27       	eor	r24, r18
     61e:	93 27       	eor	r25, r19
     620:	90 93 99 00 	sts	0x0099, r25
     624:	80 93 98 00 	sts	0x0098, r24

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (Sample_8Bit > 16)
     628:	41 31       	cpi	r20, 0x11	; 17
     62a:	44 f4       	brge	.+16     	; 0x63c <__vector_21+0x9c>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (Sample_8Bit > 8)
     62c:	49 30       	cpi	r20, 0x09	; 9
     62e:	44 f4       	brge	.+16     	; 0x640 <__vector_21+0xa0>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (Sample_8Bit > 4)
     630:	45 30       	cpi	r20, 0x05	; 5
     632:	44 f4       	brge	.+16     	; 0x644 <__vector_21+0xa4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (Sample_8Bit > 2)
     634:	43 30       	cpi	r20, 0x03	; 3
     636:	44 f4       	brge	.+16     	; 0x648 <__vector_21+0xa8>
		}

		/* Load the sample into the PWM timer channel */
		OCR3A = (Sample_8Bit ^ (1 << 7));

		uint8_t LEDMask = LEDS_NO_LEDS;
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	07 c0       	rjmp	.+14     	; 0x64a <__vector_21+0xaa>

		/* Turn on LEDs as the sample amplitude increases */
		if (Sample_8Bit > 16)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
     63c:	80 ef       	ldi	r24, 0xF0	; 240
     63e:	05 c0       	rjmp	.+10     	; 0x64a <__vector_21+0xaa>
		else if (Sample_8Bit > 8)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
     640:	80 eb       	ldi	r24, 0xB0	; 176
     642:	03 c0       	rjmp	.+6      	; 0x64a <__vector_21+0xaa>
		else if (Sample_8Bit > 4)
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
     644:	80 e3       	ldi	r24, 0x30	; 48
     646:	01 c0       	rjmp	.+2      	; 0x64a <__vector_21+0xaa>
		else if (Sample_8Bit > 2)
		  LEDMask = (LEDS_LED1);
     648:	80 e1       	ldi	r24, 0x10	; 16

		LEDs_SetAllLEDs(LEDMask);
     64a:	73 de       	rcall	.-794    	; 0x332 <LEDs_SetAllLEDs>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     64c:	80 91 a9 00 	lds	r24, 0x00A9
     650:	80 64       	ori	r24, 0x40	; 64
     652:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     656:	1f 70       	andi	r17, 0x0F	; 15
     658:	10 93 a7 00 	sts	0x00A7, r17
	}

	Pipe_Freeze();
	Pipe_SelectPipe(PrevPipe);
}
     65c:	ff 91       	pop	r31
     65e:	ef 91       	pop	r30
     660:	bf 91       	pop	r27
     662:	af 91       	pop	r26
     664:	9f 91       	pop	r25
     666:	8f 91       	pop	r24
     668:	7f 91       	pop	r23
     66a:	6f 91       	pop	r22
     66c:	5f 91       	pop	r21
     66e:	4f 91       	pop	r20
     670:	3f 91       	pop	r19
     672:	2f 91       	pop	r18
     674:	1f 91       	pop	r17
     676:	0f 90       	pop	r0
     678:	0b be       	out	0x3b, r0	; 59
     67a:	0f 90       	pop	r0
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	0f 90       	pop	r0
     680:	1f 90       	pop	r1
     682:	18 95       	reti

00000684 <DComp_NextAudioControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Audio Control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioControlInterface(void* CurrentDescriptor)
{
     684:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     686:	81 81       	ldd	r24, Z+1	; 0x01
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	49 f4       	brne	.+18     	; 0x69e <DComp_NextAudioControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
     68c:	85 81       	ldd	r24, Z+5	; 0x05
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	31 f4       	brne	.+12     	; 0x69e <DComp_NextAudioControlInterface+0x1a>
     692:	86 81       	ldd	r24, Z+6	; 0x06
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	19 f4       	brne	.+6      	; 0x69e <DComp_NextAudioControlInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
     698:	87 81       	ldd	r24, Z+7	; 0x07
     69a:	88 23       	and	r24, r24
     69c:	11 f0       	breq	.+4      	; 0x6a2 <DComp_NextAudioControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_ControlProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     6a2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6a4:	08 95       	ret

000006a6 <DComp_NextAudioStreamInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Audio Streaming Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioStreamInterface(void* CurrentDescriptor)
{
     6a6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     6a8:	81 81       	ldd	r24, Z+1	; 0x01
     6aa:	84 30       	cpi	r24, 0x04	; 4
     6ac:	49 f4       	brne	.+18     	; 0x6c0 <DComp_NextAudioStreamInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
     6ae:	85 81       	ldd	r24, Z+5	; 0x05
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	31 f4       	brne	.+12     	; 0x6c0 <DComp_NextAudioStreamInterface+0x1a>
     6b4:	86 81       	ldd	r24, Z+6	; 0x06
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	19 f4       	brne	.+6      	; 0x6c0 <DComp_NextAudioStreamInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
     6ba:	87 81       	ldd	r24, Z+7	; 0x07
     6bc:	88 23       	and	r24, r24
     6be:	11 f0       	breq	.+4      	; 0x6c4 <DComp_NextAudioStreamInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6c6:	08 95       	ret

000006c8 <DComp_NextAudioInterfaceDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
     6c8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     6ca:	81 81       	ldd	r24, Z+1	; 0x01
     6cc:	85 30       	cpi	r24, 0x05	; 5
     6ce:	29 f4       	brne	.+10     	; 0x6da <DComp_NextAudioInterfaceDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
     6d0:	83 81       	ldd	r24, Z+3	; 0x03
     6d2:	83 70       	andi	r24, 0x03	; 3
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	19 f4       	brne	.+6      	; 0x6de <DComp_NextAudioInterfaceDataEndpoint+0x16>
     6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <DComp_NextAudioInterfaceDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     6da:	84 30       	cpi	r24, 0x04	; 4
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <DComp_NextAudioInterfaceDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
		  return DESCRIPTOR_SEARCH_Found;
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6e8:	08 95       	ret

000006ea <ProcessConfigurationDescriptor>:
 *  This routine searches for a Streaming Audio interface descriptor containing a valid Isochronous audio endpoint.
 *
 *  \return An error code from the \ref AudioHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     6ea:	af 92       	push	r10
     6ec:	bf 92       	push	r11
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	df 93       	push	r29
     6fc:	cf 93       	push	r28
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	c4 50       	subi	r28, 0x04	; 4
     704:	d2 40       	sbci	r29, 0x02	; 2
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     710:	ae 01       	movw	r20, r28
     712:	4b 5f       	subi	r20, 0xFB	; 251
     714:	5f 4f       	sbci	r21, 0xFF	; 255
     716:	5a 83       	std	Y+2, r21	; 0x02
     718:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	e8 2e       	mov	r14, r24
     71e:	f1 2c       	mov	r15, r1
     720:	ec 0e       	add	r14, r28
     722:	fd 1e       	adc	r15, r29
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	b7 01       	movw	r22, r14
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	32 e0       	ldi	r19, 0x02	; 2
     72c:	de d3       	rcall	.+1980   	; 0xeea <USB_Host_GetDeviceConfigDescriptor>
     72e:	85 30       	cpi	r24, 0x05	; 5
     730:	09 f4       	brne	.+2      	; 0x734 <ProcessConfigurationDescriptor+0x4a>
     732:	53 c0       	rjmp	.+166    	; 0x7da <ProcessConfigurationDescriptor+0xf0>
     734:	86 30       	cpi	r24, 0x06	; 6
     736:	61 f0       	breq	.+24     	; 0x750 <ProcessConfigurationDescriptor+0x66>
     738:	88 23       	and	r24, r24
     73a:	61 f4       	brne	.+24     	; 0x754 <ProcessConfigurationDescriptor+0x6a>
     73c:	00 e0       	ldi	r16, 0x00	; 0
     73e:	10 e0       	ldi	r17, 0x00	; 0
     740:	cc 24       	eor	r12, r12
     742:	dd 24       	eor	r13, r13
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
			                              DComp_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Find a new Audio Control interface if the current one doesn't contain a compatible streaming interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     744:	57 01       	movw	r10, r14
     746:	7e 01       	movw	r14, r28
     748:	08 94       	sec
     74a:	e1 1c       	adc	r14, r1
     74c:	f1 1c       	adc	r15, r1
     74e:	07 c0       	rjmp	.+14     	; 0x75e <ProcessConfigurationDescriptor+0x74>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	46 c0       	rjmp	.+140    	; 0x7e0 <ProcessConfigurationDescriptor+0xf6>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	44 c0       	rjmp	.+136    	; 0x7e0 <ProcessConfigurationDescriptor+0xf6>
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     758:	9c 01       	movw	r18, r24
     75a:	03 2f       	mov	r16, r19
     75c:	18 2f       	mov	r17, r24
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(AudioControlInterface) ||
     75e:	c1 14       	cp	r12, r1
     760:	d1 04       	cpc	r13, r1
     762:	49 f0       	breq	.+18     	; 0x776 <ProcessConfigurationDescriptor+0x8c>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     764:	c5 01       	movw	r24, r10
     766:	b7 01       	movw	r22, r14
     768:	44 e6       	ldi	r20, 0x64	; 100
     76a:	53 e0       	ldi	r21, 0x03	; 3
     76c:	15 d4       	rcall	.+2090   	; 0xf98 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(AudioControlInterface) ||
     76e:	88 23       	and	r24, r24
     770:	09 f0       	breq	.+2      	; 0x774 <ProcessConfigurationDescriptor+0x8a>
     772:	48 c0       	rjmp	.+144    	; 0x804 <ProcessConfigurationDescriptor+0x11a>
     774:	14 c0       	rjmp	.+40     	; 0x79e <ProcessConfigurationDescriptor+0xb4>
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
			                              DComp_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Find a new Audio Control interface if the current one doesn't contain a compatible streaming interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     776:	c5 01       	movw	r24, r10
     778:	b7 01       	movw	r22, r14
     77a:	42 e4       	ldi	r20, 0x42	; 66
     77c:	53 e0       	ldi	r21, 0x03	; 3
     77e:	0c d4       	rcall	.+2072   	; 0xf98 <USB_GetNextDescriptorComp>
     780:	88 23       	and	r24, r24
     782:	69 f5       	brne	.+90     	; 0x7de <ProcessConfigurationDescriptor+0xf4>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				AudioControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     784:	c9 80       	ldd	r12, Y+1	; 0x01
     786:	0a 81       	ldd	r16, Y+2	; 0x02

				/* Find the next Audio Streaming interface within that Audio Control interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     788:	c5 01       	movw	r24, r10
     78a:	b7 01       	movw	r22, r14
     78c:	43 e5       	ldi	r20, 0x53	; 83
     78e:	53 e0       	ldi	r21, 0x03	; 3
     790:	03 d4       	rcall	.+2054   	; 0xf98 <USB_GetNextDescriptorComp>
     792:	88 23       	and	r24, r24
     794:	21 f5       	brne	.+72     	; 0x7de <ProcessConfigurationDescriptor+0xf4>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				AudioControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     796:	d0 2e       	mov	r13, r16
					return NoCompatibleInterfaceFound;
				}
			}

			/* Save the interface in case we need to refer back to it later */
			AudioStreamingInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     798:	09 81       	ldd	r16, Y+1	; 0x01
     79a:	1a 81       	ldd	r17, Y+2	; 0x02

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     79c:	3c c0       	rjmp	.+120    	; 0x816 <ProcessConfigurationDescriptor+0x12c>
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     79e:	e9 81       	ldd	r30, Y+1	; 0x01
     7a0:	fa 81       	ldd	r31, Y+2	; 0x02

		/* Save the endpoint if it is an IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     7a2:	82 81       	ldd	r24, Z+2	; 0x02
     7a4:	87 ff       	sbrs	r24, 7
     7a6:	37 c0       	rjmp	.+110    	; 0x816 <ProcessConfigurationDescriptor+0x12c>
     7a8:	90 2f       	mov	r25, r16
     7aa:	81 2f       	mov	r24, r17
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     7ac:	30 97       	sbiw	r30, 0x00	; 0
     7ae:	a1 f2       	breq	.-88     	; 0x758 <ProcessConfigurationDescriptor+0x6e>
		/* Save the endpoint if it is an IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	StreamingInterfaceIndex      = AudioStreamingInterface->InterfaceNumber;
     7b0:	d8 01       	movw	r26, r16
     7b2:	12 96       	adiw	r26, 0x02	; 2
     7b4:	8c 91       	ld	r24, X
     7b6:	12 97       	sbiw	r26, 0x02	; 2
     7b8:	80 93 14 01 	sts	0x0114, r24
	StreamingInterfaceAltSetting = AudioStreamingInterface->AlternateSetting;
     7bc:	13 96       	adiw	r26, 0x03	; 3
     7be:	8c 91       	ld	r24, X
     7c0:	80 93 15 01 	sts	0x0115, r24
	StreamingEndpointAddress     = DataINEndpoint->EndpointAddress;
     7c4:	42 81       	ldd	r20, Z+2	; 0x02
     7c6:	40 93 16 01 	sts	0x0116, r20

	/* Configure the Audio data IN pipe */
	Pipe_ConfigurePipe(AUDIO_DATA_IN_PIPE, EP_TYPE_ISOCHRONOUS, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 2);
     7ca:	24 81       	ldd	r18, Z+4	; 0x04
     7cc:	35 81       	ldd	r19, Z+5	; 0x05
     7ce:	81 e8       	ldi	r24, 0x81	; 129
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	02 e0       	ldi	r16, 0x02	; 2
     7d4:	f7 d1       	rcall	.+1006   	; 0xbc4 <Pipe_ConfigurePipe>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <ProcessConfigurationDescriptor+0xf6>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <ProcessConfigurationDescriptor+0xf6>
				/* Find the next Audio Streaming interface within that Audio Control interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
				                              DComp_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
     7de:	84 e0       	ldi	r24, 0x04	; 4
	/* Configure the Audio data IN pipe */
	Pipe_ConfigurePipe(AUDIO_DATA_IN_PIPE, EP_TYPE_ISOCHRONOUS, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 2);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     7e0:	cc 5f       	subi	r28, 0xFC	; 252
     7e2:	dd 4f       	sbci	r29, 0xFD	; 253
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
     7ee:	cf 91       	pop	r28
     7f0:	df 91       	pop	r29
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	bf 90       	pop	r11
     800:	af 90       	pop	r10
     802:	08 95       	ret
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we haven't found an Audio Control interface yet, or if we have run out of related Audio Streaming interfaces */
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     804:	c5 01       	movw	r24, r10
     806:	b7 01       	movw	r22, r14
     808:	43 e5       	ldi	r20, 0x53	; 83
     80a:	53 e0       	ldi	r21, 0x03	; 3
     80c:	c5 d3       	rcall	.+1930   	; 0xf98 <USB_GetNextDescriptorComp>
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we haven't found an Audio Control interface yet, or if we have run out of related Audio Streaming interfaces */
			if (!(AudioControlInterface) ||
     80e:	88 23       	and	r24, r24
     810:	09 f0       	breq	.+2      	; 0x814 <ProcessConfigurationDescriptor+0x12a>
     812:	b1 cf       	rjmp	.-158    	; 0x776 <ProcessConfigurationDescriptor+0x8c>
     814:	c1 cf       	rjmp	.-126    	; 0x798 <ProcessConfigurationDescriptor+0xae>
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     816:	90 2f       	mov	r25, r16
     818:	81 2f       	mov	r24, r17
     81a:	9e cf       	rjmp	.-196    	; 0x758 <ProcessConfigurationDescriptor+0x6e>

0000081c <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     81c:	80 91 9e 00 	lds	r24, 0x009E
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	81 70       	andi	r24, 0x01	; 1
     824:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     826:	20 91 a0 00 	lds	r18, 0x00A0
     82a:	2d 7f       	andi	r18, 0xFD	; 253
     82c:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     830:	20 91 9e 00 	lds	r18, 0x009E
     834:	22 60       	ori	r18, 0x02	; 2
     836:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     83a:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     83e:	21 fd       	sbrc	r18, 1
     840:	fc cf       	rjmp	.-8      	; 0x83a <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     842:	20 91 9e 00 	lds	r18, 0x009E
     846:	21 60       	ori	r18, 0x01	; 1
     848:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     84c:	10 92 1a 01 	sts	0x011A, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     850:	20 91 a0 00 	lds	r18, 0x00A0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	20 72       	andi	r18, 0x20	; 32
     858:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     85a:	40 91 a0 00 	lds	r20, 0x00A0
     85e:	4f 7d       	andi	r20, 0xDF	; 223
     860:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     864:	40 91 9f 00 	lds	r20, 0x009F
     868:	4f 7d       	andi	r20, 0xDF	; 223
     86a:	40 93 9f 00 	sts	0x009F, r20
     86e:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     870:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     874:	55 ff       	sbrs	r21, 5
     876:	0b c0       	rjmp	.+22     	; 0x88e <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     878:	40 91 9f 00 	lds	r20, 0x009F
     87c:	4f 7d       	andi	r20, 0xDF	; 223
     87e:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     882:	40 91 9f 00 	lds	r20, 0x009F
     886:	4d 7f       	andi	r20, 0xFD	; 253
     888:	40 93 9f 00 	sts	0x009F, r20
     88c:	08 c0       	rjmp	.+16     	; 0x89e <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88e:	ef ec       	ldi	r30, 0xCF	; 207
     890:	f7 e0       	ldi	r31, 0x07	; 7
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <USB_Host_ResetDevice+0x76>
     896:	00 c0       	rjmp	.+0      	; 0x898 <USB_Host_ResetDevice+0x7c>
     898:	00 00       	nop
     89a:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     89c:	49 f7       	brne	.-46     	; 0x870 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     89e:	21 15       	cp	r18, r1
     8a0:	31 05       	cpc	r19, r1
     8a2:	29 f0       	breq	.+10     	; 0x8ae <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     8a4:	20 91 a0 00 	lds	r18, 0x00A0
     8a8:	20 62       	ori	r18, 0x20	; 32
     8aa:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     8ae:	00 97       	sbiw	r24, 0x00	; 0
     8b0:	29 f4       	brne	.+10     	; 0x8bc <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     8b2:	80 91 9e 00 	lds	r24, 0x009E
     8b6:	8e 7f       	andi	r24, 0xFE	; 254
     8b8:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     8bc:	80 91 a0 00 	lds	r24, 0x00A0
     8c0:	82 60       	ori	r24, 0x02	; 2
     8c2:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     8c6:	08 95       	ret

000008c8 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     8c8:	40 91 9e 00 	lds	r20, 0x009E
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	41 70       	andi	r20, 0x01	; 1
     8d0:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     8d2:	20 91 a0 00 	lds	r18, 0x00A0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	20 72       	andi	r18, 0x20	; 32
     8da:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     8dc:	90 91 a0 00 	lds	r25, 0x00A0
     8e0:	9f 7d       	andi	r25, 0xDF	; 223
     8e2:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8e6:	90 91 9f 00 	lds	r25, 0x009F
     8ea:	9f 7d       	andi	r25, 0xDF	; 223
     8ec:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8f0:	90 91 9e 00 	lds	r25, 0x009E
     8f4:	91 60       	ori	r25, 0x01	; 1
     8f6:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     8fa:	26 c0       	rjmp	.+76     	; 0x948 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     8fc:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     900:	95 ff       	sbrs	r25, 5
     902:	06 c0       	rjmp	.+12     	; 0x910 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     904:	90 91 9f 00 	lds	r25, 0x009F
     908:	9f 7d       	andi	r25, 0xDF	; 223
     90a:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     90e:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     910:	90 91 24 01 	lds	r25, 0x0124
     914:	91 30       	cpi	r25, 0x01	; 1
     916:	d9 f0       	breq	.+54     	; 0x94e <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     918:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     91c:	94 ff       	sbrs	r25, 4
     91e:	09 c0       	rjmp	.+18     	; 0x932 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     920:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     924:	80 91 a6 00 	lds	r24, 0x00A6
     928:	8f 7e       	andi	r24, 0xEF	; 239
     92a:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     92e:	82 e0       	ldi	r24, 0x02	; 2

			break;
     930:	0f c0       	rjmp	.+30     	; 0x950 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     932:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     936:	91 ff       	sbrs	r25, 1
     938:	07 c0       	rjmp	.+14     	; 0x948 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     93a:	80 91 a6 00 	lds	r24, 0x00A6
     93e:	8d 7f       	andi	r24, 0xFD	; 253
     940:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     944:	83 e0       	ldi	r24, 0x03	; 3

			break;
     946:	04 c0       	rjmp	.+8      	; 0x950 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     948:	88 23       	and	r24, r24
     94a:	c1 f6       	brne	.-80     	; 0x8fc <USB_Host_WaitMS+0x34>
     94c:	01 c0       	rjmp	.+2      	; 0x950 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     94e:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     950:	41 15       	cp	r20, r1
     952:	51 05       	cpc	r21, r1
     954:	29 f4       	brne	.+10     	; 0x960 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     956:	90 91 9e 00 	lds	r25, 0x009E
     95a:	9e 7f       	andi	r25, 0xFE	; 254
     95c:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     960:	21 15       	cp	r18, r1
     962:	31 05       	cpc	r19, r1
     964:	29 f0       	breq	.+10     	; 0x970 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     966:	90 91 a0 00 	lds	r25, 0x00A0
     96a:	90 62       	ori	r25, 0x20	; 32
     96c:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     970:	08 95       	ret

00000972 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	df 93       	push	r29
     978:	cf 93       	push	r28
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	28 97       	sbiw	r28, 0x08	; 8
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     98a:	80 91 24 01 	lds	r24, 0x0124
     98e:	85 30       	cpi	r24, 0x05	; 5
     990:	09 f4       	brne	.+2      	; 0x994 <USB_Host_ProcessNextHostState+0x22>
     992:	99 c0       	rjmp	.+306    	; 0xac6 <USB_Host_ProcessNextHostState+0x154>
     994:	86 30       	cpi	r24, 0x06	; 6
     996:	68 f4       	brcc	.+26     	; 0x9b2 <USB_Host_ProcessNextHostState+0x40>
     998:	82 30       	cpi	r24, 0x02	; 2
     99a:	c1 f1       	breq	.+112    	; 0xa0c <USB_Host_ProcessNextHostState+0x9a>
     99c:	83 30       	cpi	r24, 0x03	; 3
     99e:	18 f4       	brcc	.+6      	; 0x9a6 <USB_Host_ProcessNextHostState+0x34>
     9a0:	88 23       	and	r24, r24
     9a2:	a1 f0       	breq	.+40     	; 0x9cc <USB_Host_ProcessNextHostState+0x5a>
     9a4:	04 c1       	rjmp	.+520    	; 0xbae <USB_Host_ProcessNextHostState+0x23c>
     9a6:	83 30       	cpi	r24, 0x03	; 3
     9a8:	d9 f1       	breq	.+118    	; 0xa20 <USB_Host_ProcessNextHostState+0xae>
     9aa:	84 30       	cpi	r24, 0x04	; 4
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <USB_Host_ProcessNextHostState+0x3e>
     9ae:	ff c0       	rjmp	.+510    	; 0xbae <USB_Host_ProcessNextHostState+0x23c>
     9b0:	62 c0       	rjmp	.+196    	; 0xa76 <USB_Host_ProcessNextHostState+0x104>
     9b2:	87 30       	cpi	r24, 0x07	; 7
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <USB_Host_ProcessNextHostState+0x46>
     9b6:	9e c0       	rjmp	.+316    	; 0xaf4 <USB_Host_ProcessNextHostState+0x182>
     9b8:	87 30       	cpi	r24, 0x07	; 7
     9ba:	08 f4       	brcc	.+2      	; 0x9be <USB_Host_ProcessNextHostState+0x4c>
     9bc:	8f c0       	rjmp	.+286    	; 0xadc <USB_Host_ProcessNextHostState+0x16a>
     9be:	88 30       	cpi	r24, 0x08	; 8
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <USB_Host_ProcessNextHostState+0x52>
     9c2:	b8 c0       	rjmp	.+368    	; 0xb34 <USB_Host_ProcessNextHostState+0x1c2>
     9c4:	89 30       	cpi	r24, 0x09	; 9
     9c6:	09 f0       	breq	.+2      	; 0x9ca <USB_Host_ProcessNextHostState+0x58>
     9c8:	f2 c0       	rjmp	.+484    	; 0xbae <USB_Host_ProcessNextHostState+0x23c>
     9ca:	d9 c0       	rjmp	.+434    	; 0xb7e <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     9cc:	00 91 18 01 	lds	r16, 0x0118
     9d0:	10 91 19 01 	lds	r17, 0x0119
     9d4:	01 15       	cp	r16, r1
     9d6:	11 05       	cpc	r17, r1
     9d8:	09 f4       	brne	.+2      	; 0x9dc <USB_Host_ProcessNextHostState+0x6a>
     9da:	e9 c0       	rjmp	.+466    	; 0xbae <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	74 df       	rcall	.-280    	; 0x8c8 <USB_Host_WaitMS>
     9e0:	68 2f       	mov	r22, r24
     9e2:	88 23       	and	r24, r24
     9e4:	31 f0       	breq	.+12     	; 0x9f2 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     9e6:	80 91 17 01 	lds	r24, 0x0117
     9ea:	80 93 24 01 	sts	0x0124, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     9ee:	81 e0       	ldi	r24, 0x01	; 1
					break;
     9f0:	d2 c0       	rjmp	.+420    	; 0xb96 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     9f2:	01 50       	subi	r16, 0x01	; 1
     9f4:	10 40       	sbci	r17, 0x00	; 0
     9f6:	10 93 19 01 	sts	0x0119, r17
     9fa:	00 93 18 01 	sts	0x0118, r16
     9fe:	01 15       	cp	r16, r1
     a00:	11 05       	cpc	r17, r1
     a02:	09 f0       	breq	.+2      	; 0xa06 <USB_Host_ProcessNextHostState+0x94>
     a04:	d4 c0       	rjmp	.+424    	; 0xbae <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     a06:	80 91 17 01 	lds	r24, 0x0117
     a0a:	07 c0       	rjmp	.+14     	; 0xa1a <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     a0c:	88 ee       	ldi	r24, 0xE8	; 232
     a0e:	93 e0       	ldi	r25, 0x03	; 3
     a10:	90 93 19 01 	sts	0x0119, r25
     a14:	80 93 18 01 	sts	0x0118, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	80 93 24 01 	sts	0x0124, r24
			break;
     a1e:	c7 c0       	rjmp	.+398    	; 0xbae <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     a20:	80 91 18 01 	lds	r24, 0x0118
     a24:	90 91 19 01 	lds	r25, 0x0119
     a28:	9c 01       	movw	r18, r24
     a2a:	21 50       	subi	r18, 0x01	; 1
     a2c:	30 40       	sbci	r19, 0x00	; 0
     a2e:	30 93 19 01 	sts	0x0119, r19
     a32:	20 93 18 01 	sts	0x0118, r18
     a36:	00 97       	sbiw	r24, 0x00	; 0
     a38:	39 f0       	breq	.+14     	; 0xa48 <USB_Host_ProcessNextHostState+0xd6>
     a3a:	8f ec       	ldi	r24, 0xCF	; 207
     a3c:	97 e0       	ldi	r25, 0x07	; 7
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <USB_Host_ProcessNextHostState+0xcc>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <USB_Host_ProcessNextHostState+0xd2>
     a44:	00 00       	nop
     a46:	b3 c0       	rjmp	.+358    	; 0xbae <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     a48:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     a4a:	80 91 d8 00 	lds	r24, 0x00D8
     a4e:	80 61       	ori	r24, 0x10	; 16
     a50:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     a54:	80 91 dd 00 	lds	r24, 0x00DD
     a58:	8b 7f       	andi	r24, 0xFB	; 251
     a5a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     a5e:	80 91 d7 00 	lds	r24, 0x00D7
     a62:	80 61       	ori	r24, 0x10	; 16
     a64:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     a68:	80 91 dd 00 	lds	r24, 0x00DD
     a6c:	82 60       	ori	r24, 0x02	; 2
     a6e:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     a72:	84 e0       	ldi	r24, 0x04	; 4
     a74:	d2 cf       	rjmp	.-92     	; 0xa1a <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     a76:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     a7a:	80 ff       	sbrs	r24, 0
     a7c:	98 c0       	rjmp	.+304    	; 0xbae <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     a7e:	80 91 9f 00 	lds	r24, 0x009F
     a82:	8e 7f       	andi	r24, 0xFE	; 254
     a84:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a88:	80 91 9f 00 	lds	r24, 0x009F
     a8c:	8d 7f       	andi	r24, 0xFD	; 253
     a8e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     a92:	80 91 df 00 	lds	r24, 0x00DF
     a96:	8d 7f       	andi	r24, 0xFD	; 253
     a98:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     a9c:	80 91 de 00 	lds	r24, 0x00DE
     aa0:	82 60       	ori	r24, 0x02	; 2
     aa2:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     aa6:	80 91 9e 00 	lds	r24, 0x009E
     aaa:	81 60       	ori	r24, 0x01	; 1
     aac:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     ab0:	f0 d0       	rcall	.+480    	; 0xc92 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     ab2:	10 92 24 01 	sts	0x0124, r1
     ab6:	84 e6       	ldi	r24, 0x64	; 100
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	90 93 19 01 	sts	0x0119, r25
     abe:	80 93 18 01 	sts	0x0118, r24
     ac2:	85 e0       	ldi	r24, 0x05	; 5
     ac4:	59 c0       	rjmp	.+178    	; 0xb78 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     ac6:	aa de       	rcall	.-684    	; 0x81c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     ac8:	10 92 24 01 	sts	0x0124, r1
     acc:	88 ec       	ldi	r24, 0xC8	; 200
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	90 93 19 01 	sts	0x0119, r25
     ad4:	80 93 18 01 	sts	0x0118, r24
     ad8:	86 e0       	ldi	r24, 0x06	; 6
     ada:	4e c0       	rjmp	.+156    	; 0xb78 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	20 e4       	ldi	r18, 0x40	; 64
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	01 e0       	ldi	r16, 0x01	; 1
     ae8:	6d d0       	rcall	.+218    	; 0xbc4 <Pipe_ConfigurePipe>
     aea:	88 23       	and	r24, r24
     aec:	09 f4       	brne	.+2      	; 0xaf0 <USB_Host_ProcessNextHostState+0x17e>
     aee:	4f c0       	rjmp	.+158    	; 0xb8e <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     af0:	87 e0       	ldi	r24, 0x07	; 7
     af2:	93 cf       	rjmp	.-218    	; 0xa1a <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     af4:	ac e1       	ldi	r26, 0x1C	; 28
     af6:	b1 e0       	ldi	r27, 0x01	; 1
     af8:	eb e0       	ldi	r30, 0x0B	; 11
     afa:	f1 e0       	ldi	r31, 0x01	; 1
     afc:	88 e0       	ldi	r24, 0x08	; 8
     afe:	01 90       	ld	r0, Z+
     b00:	0d 92       	st	X+, r0
     b02:	81 50       	subi	r24, 0x01	; 1
     b04:	e1 f7       	brne	.-8      	; 0xafe <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b06:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	b1 d2       	rcall	.+1378   	; 0x1072 <USB_Host_SendControlRequest>
     b10:	68 2f       	mov	r22, r24
     b12:	88 23       	and	r24, r24
     b14:	09 f0       	breq	.+2      	; 0xb18 <USB_Host_ProcessNextHostState+0x1a6>
     b16:	3e c0       	rjmp	.+124    	; 0xb94 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     b18:	88 85       	ldd	r24, Y+8	; 0x08
     b1a:	80 93 13 01 	sts	0x0113, r24

			USB_Host_ResetDevice();
     b1e:	7e de       	rcall	.-772    	; 0x81c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     b20:	10 92 24 01 	sts	0x0124, r1
     b24:	88 ec       	ldi	r24, 0xC8	; 200
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	90 93 19 01 	sts	0x0119, r25
     b2c:	80 93 18 01 	sts	0x0118, r24
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	22 c0       	rjmp	.+68     	; 0xb78 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     b34:	20 91 13 01 	lds	r18, 0x0113
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	01 e0       	ldi	r16, 0x01	; 1
     b42:	40 d0       	rcall	.+128    	; 0xbc4 <Pipe_ConfigurePipe>
     b44:	88 23       	and	r24, r24
     b46:	19 f1       	breq	.+70     	; 0xb8e <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     b48:	ac e1       	ldi	r26, 0x1C	; 28
     b4a:	b1 e0       	ldi	r27, 0x01	; 1
     b4c:	e3 e0       	ldi	r30, 0x03	; 3
     b4e:	f1 e0       	ldi	r31, 0x01	; 1
     b50:	88 e0       	ldi	r24, 0x08	; 8
     b52:	01 90       	ld	r0, Z+
     b54:	0d 92       	st	X+, r0
     b56:	81 50       	subi	r24, 0x01	; 1
     b58:	e1 f7       	brne	.-8      	; 0xb52 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	89 d2       	rcall	.+1298   	; 0x1072 <USB_Host_SendControlRequest>
     b60:	68 2f       	mov	r22, r24
     b62:	88 23       	and	r24, r24
     b64:	b9 f4       	brne	.+46     	; 0xb94 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     b66:	10 92 24 01 	sts	0x0124, r1
     b6a:	84 e6       	ldi	r24, 0x64	; 100
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	90 93 19 01 	sts	0x0119, r25
     b72:	80 93 18 01 	sts	0x0118, r24
     b76:	89 e0       	ldi	r24, 0x09	; 9
     b78:	80 93 17 01 	sts	0x0117, r24
			break;
     b7c:	18 c0       	rjmp	.+48     	; 0xbae <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     b84:	8a e0       	ldi	r24, 0x0A	; 10
     b86:	80 93 24 01 	sts	0x0124, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     b8a:	1a dc       	rcall	.-1996   	; 0x3c0 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     b8c:	10 c0       	rjmp	.+32     	; 0xbae <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     b8e:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     b90:	84 e0       	ldi	r24, 0x04	; 4
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     b94:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b96:	90 91 24 01 	lds	r25, 0x0124
     b9a:	91 30       	cpi	r25, 0x01	; 1
     b9c:	41 f0       	breq	.+16     	; 0xbae <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     b9e:	d8 dc       	rcall	.-1616   	; 0x550 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ba0:	80 91 dd 00 	lds	r24, 0x00DD
     ba4:	81 60       	ori	r24, 0x01	; 1
     ba6:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     baa:	05 dc       	rcall	.-2038   	; 0x3b6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     bac:	a0 d0       	rcall	.+320    	; 0xcee <USB_ResetInterface>
	}
}
     bae:	28 96       	adiw	r28, 0x08	; 8
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	cf 91       	pop	r28
     bbc:	df 91       	pop	r29
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	08 95       	ret

00000bc4 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     bc4:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     bc6:	58 2f       	mov	r21, r24
     bc8:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     bca:	87 ff       	sbrs	r24, 7
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <Pipe_ConfigurePipe+0xe>
     bce:	80 e1       	ldi	r24, 0x10	; 16
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <Pipe_ConfigurePipe+0x10>
     bd2:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     bd4:	57 30       	cpi	r21, 0x07	; 7
     bd6:	08 f0       	brcs	.+2      	; 0xbda <Pipe_ConfigurePipe+0x16>
     bd8:	59 c0       	rjmp	.+178    	; 0xc8c <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     bda:	66 23       	and	r22, r22
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     bde:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     be0:	4f 70       	andi	r20, 0x0F	; 15
     be2:	62 95       	swap	r22
     be4:	66 0f       	add	r22, r22
     be6:	66 0f       	add	r22, r22
     be8:	60 7c       	andi	r22, 0xC0	; 192
     bea:	64 2b       	or	r22, r20
     bec:	68 2b       	or	r22, r24
     bee:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     bf0:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bf2:	84 2f       	mov	r24, r20
     bf4:	8f 70       	andi	r24, 0x0F	; 15
     bf6:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     bfa:	45 17       	cp	r20, r21
     bfc:	a1 f4       	brne	.+40     	; 0xc26 <Pipe_ConfigurePipe+0x62>
     bfe:	88 e0       	ldi	r24, 0x08	; 8
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     c06:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     c0c:	82 17       	cp	r24, r18
     c0e:	93 07       	cpc	r25, r19
     c10:	10 f4       	brcc	.+4      	; 0xc16 <Pipe_ConfigurePipe+0x52>
     c12:	75 30       	cpi	r23, 0x05	; 5
     c14:	c1 f7       	brne	.-16     	; 0xc06 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     c16:	87 2f       	mov	r24, r23
     c18:	82 95       	swap	r24
     c1a:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c1c:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     c1e:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     c20:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     c22:	e0 e0       	ldi	r30, 0x00	; 0
     c24:	08 c0       	rjmp	.+16     	; 0xc36 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     c26:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     c2a:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     c2e:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     c32:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     c36:	81 ff       	sbrs	r24, 1
     c38:	20 c0       	rjmp	.+64     	; 0xc7a <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c3a:	90 91 a9 00 	lds	r25, 0x00A9
     c3e:	9e 7f       	andi	r25, 0xFE	; 254
     c40:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     c44:	90 91 ab 00 	lds	r25, 0x00AB
     c48:	9d 7f       	andi	r25, 0xFD	; 253
     c4a:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     c4e:	90 91 a9 00 	lds	r25, 0x00A9
     c52:	91 60       	ori	r25, 0x01	; 1
     c54:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     c58:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     c5c:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     c60:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     c64:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     c68:	80 91 a9 00 	lds	r24, 0x00A9
     c6c:	80 62       	ori	r24, 0x20	; 32
     c6e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c72:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     c76:	87 ff       	sbrs	r24, 7
     c78:	09 c0       	rjmp	.+18     	; 0xc8c <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     c7a:	4f 5f       	subi	r20, 0xFF	; 255
     c7c:	47 30       	cpi	r20, 0x07	; 7
     c7e:	09 f0       	breq	.+2      	; 0xc82 <Pipe_ConfigurePipe+0xbe>
     c80:	b8 cf       	rjmp	.-144    	; 0xbf2 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c82:	5f 70       	andi	r21, 0x0F	; 15
     c84:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     c8c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     c8e:	0f 91       	pop	r16
     c90:	08 95       	ret

00000c92 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     c92:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	98 2f       	mov	r25, r24
     c9a:	9f 70       	andi	r25, 0x0F	; 15
     c9c:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     ca0:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     ca4:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     ca8:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     cac:	90 91 a9 00 	lds	r25, 0x00A9
     cb0:	9e 7f       	andi	r25, 0xFE	; 254
     cb2:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
     cb8:	87 30       	cpi	r24, 0x07	; 7
     cba:	71 f7       	brne	.-36     	; 0xc98 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     cbc:	08 95       	ret

00000cbe <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     cbe:	75 d0       	rcall	.+234    	; 0xdaa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cc0:	7c d0       	rcall	.+248    	; 0xdba <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cc2:	e0 ee       	ldi	r30, 0xE0	; 224
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	81 60       	ori	r24, 0x01	; 1
     cca:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     ccc:	e8 ed       	ldi	r30, 0xD8	; 216
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8f 77       	andi	r24, 0x7F	; 127
     cd4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cd6:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     cd8:	a7 ed       	ldi	r26, 0xD7	; 215
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	8c 91       	ld	r24, X
     cde:	8e 7f       	andi	r24, 0xFE	; 254
     ce0:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     ce2:	80 81       	ld	r24, Z
     ce4:	8f 7e       	andi	r24, 0xEF	; 239
     ce6:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     ce8:	10 92 1b 01 	sts	0x011B, r1
}
     cec:	08 95       	ret

00000cee <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     cee:	5d d0       	rcall	.+186    	; 0xdaa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cf0:	64 d0       	rcall	.+200    	; 0xdba <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     cf2:	80 91 d8 00 	lds	r24, 0x00D8
     cf6:	8f 77       	andi	r24, 0x7F	; 127
     cf8:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     cfc:	80 91 d8 00 	lds	r24, 0x00D8
     d00:	80 68       	ori	r24, 0x80	; 128
     d02:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     d06:	80 91 d8 00 	lds	r24, 0x00D8
     d0a:	8f 7d       	andi	r24, 0xDF	; 223
     d0c:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     d10:	80 91 d7 00 	lds	r24, 0x00D7
     d14:	8f 77       	andi	r24, 0x7F	; 127
     d16:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d1a:	8c e0       	ldi	r24, 0x0C	; 12
     d1c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d1e:	8e e0       	ldi	r24, 0x0E	; 14
     d20:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d22:	09 b4       	in	r0, 0x29	; 41
     d24:	00 fe       	sbrs	r0, 0
     d26:	fd cf       	rjmp	.-6      	; 0xd22 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 93 24 01 	sts	0x0124, r24
	USB_Host_ConfigurationNumber = 0;
     d2e:	10 92 1a 01 	sts	0x011A, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     d32:	80 e4       	ldi	r24, 0x40	; 64
     d34:	80 93 13 01 	sts	0x0113, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     d38:	80 91 d8 00 	lds	r24, 0x00D8
     d3c:	80 64       	ori	r24, 0x40	; 64
     d3e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d42:	80 91 dd 00 	lds	r24, 0x00DD
     d46:	81 60       	ori	r24, 0x01	; 1
     d48:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     d4c:	80 91 dd 00 	lds	r24, 0x00DD
     d50:	84 60       	ori	r24, 0x04	; 4
     d52:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     d56:	80 91 d7 00 	lds	r24, 0x00D7
     d5a:	8f 7e       	andi	r24, 0xEF	; 239
     d5c:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     d60:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     d62:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     d64:	80 91 de 00 	lds	r24, 0x00DE
     d68:	81 60       	ori	r24, 0x01	; 1
     d6a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     d6e:	80 91 de 00 	lds	r24, 0x00DE
     d72:	84 60       	ori	r24, 0x04	; 4
     d74:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     d78:	80 91 e0 00 	lds	r24, 0x00E0
     d7c:	8e 7f       	andi	r24, 0xFE	; 254
     d7e:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     d82:	80 91 d8 00 	lds	r24, 0x00D8
     d86:	80 61       	ori	r24, 0x10	; 16
     d88:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     d8c:	08 95       	ret

00000d8e <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d8e:	e8 ed       	ldi	r30, 0xD8	; 216
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	8f 7e       	andi	r24, 0xEF	; 239
     d96:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     d98:	e7 ed       	ldi	r30, 0xD7	; 215
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	81 60       	ori	r24, 0x01	; 1
     da0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	80 93 1b 01 	sts	0x011B, r24

	USB_ResetInterface();
}
     da8:	a2 cf       	rjmp	.-188    	; 0xcee <USB_ResetInterface>

00000daa <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     daa:	e8 ed       	ldi	r30, 0xD8	; 216
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8c 7f       	andi	r24, 0xFC	; 252
     db2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     db4:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     db8:	08 95       	ret

00000dba <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     dba:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     dbe:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     dc2:	08 95       	ret

00000dc4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     dc4:	1f 92       	push	r1
     dc6:	0f 92       	push	r0
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	0f 92       	push	r0
     dcc:	0b b6       	in	r0, 0x3b	; 59
     dce:	0f 92       	push	r0
     dd0:	11 24       	eor	r1, r1
     dd2:	2f 93       	push	r18
     dd4:	3f 93       	push	r19
     dd6:	4f 93       	push	r20
     dd8:	5f 93       	push	r21
     dda:	6f 93       	push	r22
     ddc:	7f 93       	push	r23
     dde:	8f 93       	push	r24
     de0:	9f 93       	push	r25
     de2:	af 93       	push	r26
     de4:	bf 93       	push	r27
     de6:	ef 93       	push	r30
     de8:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     dea:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     dee:	85 ff       	sbrs	r24, 5
     df0:	0a c0       	rjmp	.+20     	; 0xe06 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     df2:	80 91 a0 00 	lds	r24, 0x00A0
     df6:	85 ff       	sbrs	r24, 5
     df8:	06 c0       	rjmp	.+12     	; 0xe06 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     dfa:	80 91 9f 00 	lds	r24, 0x009F
     dfe:	8f 7d       	andi	r24, 0xDF	; 223
     e00:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     e04:	0c d1       	rcall	.+536    	; 0x101e <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     e06:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     e0a:	81 ff       	sbrs	r24, 1
     e0c:	15 c0       	rjmp	.+42     	; 0xe38 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     e0e:	80 91 a0 00 	lds	r24, 0x00A0
     e12:	81 ff       	sbrs	r24, 1
     e14:	11 c0       	rjmp	.+34     	; 0xe38 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     e16:	80 91 9f 00 	lds	r24, 0x009F
     e1a:	8d 7f       	andi	r24, 0xFD	; 253
     e1c:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     e20:	80 91 9f 00 	lds	r24, 0x009F
     e24:	8e 7f       	andi	r24, 0xFE	; 254
     e26:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e2a:	80 91 a0 00 	lds	r24, 0x00A0
     e2e:	8d 7f       	andi	r24, 0xFD	; 253
     e30:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     e34:	c0 da       	rcall	.-2688   	; 0x3b6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     e36:	5b df       	rcall	.-330    	; 0xcee <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     e38:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     e3c:	81 ff       	sbrs	r24, 1
     e3e:	15 c0       	rjmp	.+42     	; 0xe6a <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     e40:	80 91 de 00 	lds	r24, 0x00DE
     e44:	81 ff       	sbrs	r24, 1
     e46:	11 c0       	rjmp	.+34     	; 0xe6a <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     e48:	80 91 df 00 	lds	r24, 0x00DF
     e4c:	8d 7f       	andi	r24, 0xFD	; 253
     e4e:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     e52:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e54:	80 91 dd 00 	lds	r24, 0x00DD
     e58:	81 60       	ori	r24, 0x01	; 1
     e5a:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	58 db       	rcall	.-2384   	; 0x512 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     e62:	a9 da       	rcall	.-2734   	; 0x3b6 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	80 93 24 01 	sts	0x0124, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     e6a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     e6e:	80 ff       	sbrs	r24, 0
     e70:	17 c0       	rjmp	.+46     	; 0xea0 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     e72:	80 91 de 00 	lds	r24, 0x00DE
     e76:	80 ff       	sbrs	r24, 0
     e78:	13 c0       	rjmp	.+38     	; 0xea0 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     e7a:	80 91 df 00 	lds	r24, 0x00DF
     e7e:	8e 7f       	andi	r24, 0xFE	; 254
     e80:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     e84:	80 91 de 00 	lds	r24, 0x00DE
     e88:	8e 7f       	andi	r24, 0xFE	; 254
     e8a:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     e8e:	8d da       	rcall	.-2790   	; 0x3aa <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e90:	80 91 a0 00 	lds	r24, 0x00A0
     e94:	82 60       	ori	r24, 0x02	; 2
     e96:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	80 93 24 01 	sts	0x0124, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     ea0:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ea4:	82 ff       	sbrs	r24, 2
     ea6:	0e c0       	rjmp	.+28     	; 0xec4 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ea8:	80 91 de 00 	lds	r24, 0x00DE
     eac:	82 ff       	sbrs	r24, 2
     eae:	0a c0       	rjmp	.+20     	; 0xec4 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     eb0:	80 91 df 00 	lds	r24, 0x00DF
     eb4:	8b 7f       	andi	r24, 0xFB	; 251
     eb6:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	48 db       	rcall	.-2416   	; 0x550 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     ec0:	7a da       	rcall	.-2828   	; 0x3b6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     ec2:	15 df       	rcall	.-470    	; 0xcee <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	0f 90       	pop	r0
     ede:	0b be       	out	0x3b, r0	; 59
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	29 97       	sbiw	r28, 0x09	; 9
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	6b 01       	movw	r12, r22
     f0c:	8a 01       	movw	r16, r20
     f0e:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f10:	90 e8       	ldi	r25, 0x80	; 128
     f12:	90 93 1c 01 	sts	0x011C, r25
     f16:	96 e0       	ldi	r25, 0x06	; 6
     f18:	90 93 1d 01 	sts	0x011D, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f22:	90 93 1f 01 	sts	0x011F, r25
     f26:	80 93 1e 01 	sts	0x011E, r24
     f2a:	10 92 21 01 	sts	0x0121, r1
     f2e:	10 92 20 01 	sts	0x0120, r1
     f32:	89 e0       	ldi	r24, 0x09	; 9
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	90 93 23 01 	sts	0x0123, r25
     f3a:	80 93 22 01 	sts	0x0122, r24
     f3e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f42:	ce 01       	movw	r24, r28
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	95 d0       	rcall	.+298    	; 0x1072 <USB_Host_SendControlRequest>
     f48:	88 23       	and	r24, r24
     f4a:	b9 f4       	brne	.+46     	; 0xf7a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	f6 01       	movw	r30, r12
     f52:	91 83       	std	Z+1, r25	; 0x01
     f54:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     f56:	e8 16       	cp	r14, r24
     f58:	f9 06       	cpc	r15, r25
     f5a:	70 f0       	brcs	.+28     	; 0xf78 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f5c:	90 93 23 01 	sts	0x0123, r25
     f60:	80 93 22 01 	sts	0x0122, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f64:	c8 01       	movw	r24, r16
     f66:	85 d0       	rcall	.+266    	; 0x1072 <USB_Host_SendControlRequest>
     f68:	88 23       	and	r24, r24
     f6a:	39 f4       	brne	.+14     	; 0xf7a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f6c:	f8 01       	movw	r30, r16
     f6e:	91 81       	ldd	r25, Z+1	; 0x01
     f70:	92 30       	cpi	r25, 0x02	; 2
     f72:	19 f0       	breq	.+6      	; 0xf7a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     f74:	86 e0       	ldi	r24, 0x06	; 6
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     f78:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f7a:	29 96       	adiw	r28, 0x09	; 9
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	df 90       	pop	r13
     f94:	cf 90       	pop	r12
     f96:	08 95       	ret

00000f98 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     f98:	af 92       	push	r10
     f9a:	bf 92       	push	r11
     f9c:	cf 92       	push	r12
     f9e:	df 92       	push	r13
     fa0:	ef 92       	push	r14
     fa2:	ff 92       	push	r15
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	8c 01       	movw	r16, r24
     fae:	eb 01       	movw	r28, r22
     fb0:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     fb2:	23 c0       	rjmp	.+70     	; 0xffa <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     fb4:	e8 81       	ld	r30, Y
     fb6:	f9 81       	ldd	r31, Y+1	; 0x01
     fb8:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     fba:	20 81       	ld	r18, Z
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	c7 01       	movw	r24, r14
     fc0:	2e 15       	cp	r18, r14
     fc2:	3f 05       	cpc	r19, r15
     fc4:	08 f4       	brcc	.+2      	; 0xfc8 <USB_GetNextDescriptorComp+0x30>
     fc6:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     fc8:	e8 0f       	add	r30, r24
     fca:	f9 1f       	adc	r31, r25
     fcc:	f9 83       	std	Y+1, r31	; 0x01
     fce:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     fd0:	f8 01       	movw	r30, r16
     fd2:	20 81       	ld	r18, Z
     fd4:	31 81       	ldd	r19, Z+1	; 0x01
     fd6:	28 1b       	sub	r18, r24
     fd8:	39 0b       	sbc	r19, r25
     fda:	31 83       	std	Z+1, r19	; 0x01
     fdc:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     fde:	88 81       	ld	r24, Y
     fe0:	99 81       	ldd	r25, Y+1	; 0x01
     fe2:	f6 01       	movw	r30, r12
     fe4:	09 95       	icall
     fe6:	82 30       	cpi	r24, 0x02	; 2
     fe8:	41 f0       	breq	.+16     	; 0xffa <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	69 f4       	brne	.+26     	; 0x1008 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
     fee:	a8 82       	st	Y, r10
     ff0:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
     ff2:	f8 01       	movw	r30, r16
     ff4:	f1 82       	std	Z+1, r15	; 0x01
     ff6:	e0 82       	st	Z, r14
     ff8:	07 c0       	rjmp	.+14     	; 0x1008 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     ffa:	f8 01       	movw	r30, r16
     ffc:	e0 80       	ld	r14, Z
     ffe:	f1 80       	ldd	r15, Z+1	; 0x01
    1000:	e1 14       	cp	r14, r1
    1002:	f1 04       	cpc	r15, r1
    1004:	b9 f6       	brne	.-82     	; 0xfb4 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1006:	82 e0       	ldi	r24, 0x02	; 2
}
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	df 90       	pop	r13
    1016:	cf 90       	pop	r12
    1018:	bf 90       	pop	r11
    101a:	af 90       	pop	r10
    101c:	08 95       	ret

0000101e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    101e:	08 95       	ret

00001020 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1028:	c8 ee       	ldi	r28, 0xE8	; 232
    102a:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    102c:	07 c0       	rjmp	.+14     	; 0x103c <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	4b dc       	rcall	.-1898   	; 0x8c8 <USB_Host_WaitMS>
    1032:	88 23       	and	r24, r24
    1034:	d1 f4       	brne	.+52     	; 0x106a <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1036:	20 97       	sbiw	r28, 0x00	; 0
    1038:	b9 f0       	breq	.+46     	; 0x1068 <USB_Host_WaitForIOS+0x48>
    103a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    103c:	11 23       	and	r17, r17
    103e:	29 f4       	brne	.+10     	; 0x104a <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1040:	80 91 a6 00 	lds	r24, 0x00A6
    1044:	83 ff       	sbrs	r24, 3
    1046:	f3 cf       	rjmp	.-26     	; 0x102e <USB_Host_WaitForIOS+0xe>
    1048:	0d c0       	rjmp	.+26     	; 0x1064 <USB_Host_WaitForIOS+0x44>
    104a:	11 30       	cpi	r17, 0x01	; 1
    104c:	29 f4       	brne	.+10     	; 0x1058 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    104e:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1052:	80 ff       	sbrs	r24, 0
    1054:	ec cf       	rjmp	.-40     	; 0x102e <USB_Host_WaitForIOS+0xe>
    1056:	06 c0       	rjmp	.+12     	; 0x1064 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1058:	12 30       	cpi	r17, 0x02	; 2
    105a:	49 f7       	brne	.-46     	; 0x102e <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    105c:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1060:	82 ff       	sbrs	r24, 2
    1062:	e5 cf       	rjmp	.-54     	; 0x102e <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	01 c0       	rjmp	.+2      	; 0x106a <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1068:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	08 95       	ret

00001072 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1080:	e0 90 9e 00 	lds	r14, 0x009E
    1084:	ff 24       	eor	r15, r15
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	e8 22       	and	r14, r24
    108a:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    108c:	c0 91 22 01 	lds	r28, 0x0122
    1090:	d0 91 23 01 	lds	r29, 0x0123
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1094:	80 91 9e 00 	lds	r24, 0x009E
    1098:	81 60       	ori	r24, 0x01	; 1
    109a:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	13 dc       	rcall	.-2010   	; 0x8c8 <USB_Host_WaitMS>
    10a2:	88 23       	and	r24, r24
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <USB_Host_SendControlRequest+0x36>
    10a6:	cb c0       	rjmp	.+406    	; 0x123e <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10a8:	80 91 aa 00 	lds	r24, 0x00AA
    10ac:	8f 7c       	andi	r24, 0xCF	; 207
    10ae:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    10b2:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    10b6:	80 91 a6 00 	lds	r24, 0x00A6
    10ba:	8f 7e       	andi	r24, 0xEF	; 239
    10bc:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10c0:	80 91 a9 00 	lds	r24, 0x00A9
    10c4:	8f 7b       	andi	r24, 0xBF	; 191
    10c6:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    10ca:	ec e1       	ldi	r30, 0x1C	; 28
    10cc:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    10ce:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10d0:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	e4 32       	cpi	r30, 0x24	; 36
    10d8:	f8 07       	cpc	r31, r24
    10da:	c9 f7       	brne	.-14     	; 0x10ce <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    10dc:	80 91 a6 00 	lds	r24, 0x00A6
    10e0:	87 77       	andi	r24, 0x77	; 119
    10e2:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	9b df       	rcall	.-202    	; 0x1020 <USB_Host_WaitForIOS>
    10ea:	88 23       	and	r24, r24
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <USB_Host_SendControlRequest+0x7e>
    10ee:	a7 c0       	rjmp	.+334    	; 0x123e <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10f0:	80 91 a9 00 	lds	r24, 0x00A9
    10f4:	80 64       	ori	r24, 0x40	; 64
    10f6:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	e5 db       	rcall	.-2102   	; 0x8c8 <USB_Host_WaitMS>
    10fe:	88 23       	and	r24, r24
    1100:	09 f0       	breq	.+2      	; 0x1104 <USB_Host_SendControlRequest+0x92>
    1102:	9d c0       	rjmp	.+314    	; 0x123e <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1104:	80 91 1c 01 	lds	r24, 0x011C
    1108:	87 ff       	sbrs	r24, 7
    110a:	4f c0       	rjmp	.+158    	; 0x11aa <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    110c:	80 91 aa 00 	lds	r24, 0x00AA
    1110:	8f 7c       	andi	r24, 0xCF	; 207
    1112:	80 61       	ori	r24, 0x10	; 16
    1114:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1118:	01 15       	cp	r16, r1
    111a:	11 05       	cpc	r17, r1
    111c:	61 f5       	brne	.+88     	; 0x1176 <USB_Host_SendControlRequest+0x104>
    111e:	2d c0       	rjmp	.+90     	; 0x117a <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1120:	80 91 a9 00 	lds	r24, 0x00A9
    1124:	8f 7b       	andi	r24, 0xBF	; 191
    1126:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	79 df       	rcall	.-270    	; 0x1020 <USB_Host_WaitForIOS>
    112e:	88 23       	and	r24, r24
    1130:	09 f0       	breq	.+2      	; 0x1134 <USB_Host_SendControlRequest+0xc2>
    1132:	85 c0       	rjmp	.+266    	; 0x123e <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1134:	80 91 f6 00 	lds	r24, 0x00F6
    1138:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	49 f4       	brne	.+18     	; 0x1152 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1140:	c0 e0       	ldi	r28, 0x00	; 0
    1142:	d0 e0       	ldi	r29, 0x00	; 0
    1144:	06 c0       	rjmp	.+12     	; 0x1152 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1146:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    114a:	f8 01       	movw	r30, r16
    114c:	81 93       	st	Z+, r24
    114e:	8f 01       	movw	r16, r30
					DataLen--;
    1150:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1152:	80 91 f6 00 	lds	r24, 0x00F6
    1156:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	11 f0       	breq	.+4      	; 0x1162 <USB_Host_SendControlRequest+0xf0>
    115e:	20 97       	sbiw	r28, 0x00	; 0
    1160:	91 f7       	brne	.-28     	; 0x1146 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1162:	80 91 a9 00 	lds	r24, 0x00A9
    1166:	80 64       	ori	r24, 0x40	; 64
    1168:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    116c:	80 91 a6 00 	lds	r24, 0x00A6
    1170:	8e 77       	andi	r24, 0x7E	; 126
    1172:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1176:	20 97       	sbiw	r28, 0x00	; 0
    1178:	99 f6       	brne	.-90     	; 0x1120 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    117a:	80 91 aa 00 	lds	r24, 0x00AA
    117e:	8f 7c       	andi	r24, 0xCF	; 207
    1180:	80 62       	ori	r24, 0x20	; 32
    1182:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1186:	80 91 a9 00 	lds	r24, 0x00A9
    118a:	8f 7b       	andi	r24, 0xBF	; 191
    118c:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	46 df       	rcall	.-372    	; 0x1020 <USB_Host_WaitForIOS>
    1194:	88 23       	and	r24, r24
    1196:	09 f0       	breq	.+2      	; 0x119a <USB_Host_SendControlRequest+0x128>
    1198:	52 c0       	rjmp	.+164    	; 0x123e <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    119a:	80 91 a6 00 	lds	r24, 0x00A6
    119e:	8b 77       	andi	r24, 0x7B	; 123
    11a0:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11a4:	82 e0       	ldi	r24, 0x02	; 2
    11a6:	3c df       	rcall	.-392    	; 0x1020 <USB_Host_WaitForIOS>
    11a8:	4a c0       	rjmp	.+148    	; 0x123e <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    11aa:	01 15       	cp	r16, r1
    11ac:	11 05       	cpc	r17, r1
    11ae:	99 f1       	breq	.+102    	; 0x1216 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11b0:	80 91 aa 00 	lds	r24, 0x00AA
    11b4:	8f 7c       	andi	r24, 0xCF	; 207
    11b6:	80 62       	ori	r24, 0x20	; 32
    11b8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11bc:	80 91 a9 00 	lds	r24, 0x00A9
    11c0:	8f 7b       	andi	r24, 0xBF	; 191
    11c2:	80 93 a9 00 	sts	0x00A9, r24
    11c6:	1c c0       	rjmp	.+56     	; 0x1200 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	2a df       	rcall	.-428    	; 0x1020 <USB_Host_WaitForIOS>
    11cc:	88 23       	and	r24, r24
    11ce:	b9 f5       	brne	.+110    	; 0x123e <USB_Host_SendControlRequest+0x1cc>
    11d0:	f8 01       	movw	r30, r16
    11d2:	06 c0       	rjmp	.+12     	; 0x11e0 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    11d4:	81 91       	ld	r24, Z+
    11d6:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11d8:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    11dc:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11de:	59 f0       	breq	.+22     	; 0x11f6 <USB_Host_SendControlRequest+0x184>
    11e0:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11e2:	20 91 f6 00 	lds	r18, 0x00F6
    11e6:	30 91 f7 00 	lds	r19, 0x00F7
    11ea:	80 91 13 01 	lds	r24, 0x0113
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	28 17       	cp	r18, r24
    11f2:	39 07       	cpc	r19, r25
    11f4:	78 f3       	brcs	.-34     	; 0x11d4 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11f6:	80 91 a6 00 	lds	r24, 0x00A6
    11fa:	8b 77       	andi	r24, 0x7B	; 123
    11fc:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1200:	20 97       	sbiw	r28, 0x00	; 0
    1202:	11 f7       	brne	.-60     	; 0x11c8 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	0c df       	rcall	.-488    	; 0x1020 <USB_Host_WaitForIOS>
    1208:	88 23       	and	r24, r24
    120a:	c9 f4       	brne	.+50     	; 0x123e <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    120c:	80 91 a9 00 	lds	r24, 0x00A9
    1210:	80 64       	ori	r24, 0x40	; 64
    1212:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1216:	80 91 aa 00 	lds	r24, 0x00AA
    121a:	8f 7c       	andi	r24, 0xCF	; 207
    121c:	80 61       	ori	r24, 0x10	; 16
    121e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1222:	80 91 a9 00 	lds	r24, 0x00A9
    1226:	8f 7b       	andi	r24, 0xBF	; 191
    1228:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	f8 de       	rcall	.-528    	; 0x1020 <USB_Host_WaitForIOS>
    1230:	88 23       	and	r24, r24
    1232:	29 f4       	brne	.+10     	; 0x123e <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1234:	90 91 a6 00 	lds	r25, 0x00A6
    1238:	9e 77       	andi	r25, 0x7E	; 126
    123a:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    123e:	90 91 a9 00 	lds	r25, 0x00A9
    1242:	90 64       	ori	r25, 0x40	; 64
    1244:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1248:	e1 14       	cp	r14, r1
    124a:	f1 04       	cpc	r15, r1
    124c:	29 f4       	brne	.+10     	; 0x1258 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    124e:	90 91 9e 00 	lds	r25, 0x009E
    1252:	9e 7f       	andi	r25, 0xFE	; 254
    1254:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    125e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	08 95       	ret

00001270 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1270:	1f 93       	push	r17
    1272:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1274:	10 92 1c 01 	sts	0x011C, r1
    1278:	89 e0       	ldi	r24, 0x09	; 9
    127a:	80 93 1d 01 	sts	0x011D, r24
    127e:	10 93 1e 01 	sts	0x011E, r17
    1282:	10 92 1f 01 	sts	0x011F, r1
    1286:	10 92 21 01 	sts	0x0121, r1
    128a:	10 92 20 01 	sts	0x0120, r1
    128e:	10 92 23 01 	sts	0x0123, r1
    1292:	10 92 22 01 	sts	0x0122, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1296:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	e9 de       	rcall	.-558    	; 0x1072 <USB_Host_SendControlRequest>
    12a0:	88 23       	and	r24, r24
    12a2:	49 f4       	brne	.+18     	; 0x12b6 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    12a4:	10 93 1a 01 	sts	0x011A, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    12a8:	11 23       	and	r17, r17
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <USB_Host_SetDeviceConfiguration+0x40>
    12ac:	9b e0       	ldi	r25, 0x0B	; 11
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <USB_Host_SetDeviceConfiguration+0x42>
    12b0:	9a e0       	ldi	r25, 0x0A	; 10
    12b2:	90 93 24 01 	sts	0x0124, r25
	}

	return ErrorCode;
}
    12b6:	1f 91       	pop	r17
    12b8:	08 95       	ret

000012ba <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    12ba:	ec e1       	ldi	r30, 0x1C	; 28
    12bc:	f1 e0       	ldi	r31, 0x01	; 1
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	90 93 1c 01 	sts	0x011C, r25
    12c4:	9b e0       	ldi	r25, 0x0B	; 11
    12c6:	90 93 1d 01 	sts	0x011D, r25
    12ca:	60 93 1e 01 	sts	0x011E, r22
    12ce:	13 82       	std	Z+3, r1	; 0x03
    12d0:	80 93 20 01 	sts	0x0120, r24
    12d4:	15 82       	std	Z+5, r1	; 0x05
    12d6:	10 92 23 01 	sts	0x0123, r1
    12da:	10 92 22 01 	sts	0x0122, r1
    12de:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	90 e0       	ldi	r25, 0x00	; 0
}
    12e6:	c5 ce       	rjmp	.-630    	; 0x1072 <USB_Host_SendControlRequest>

000012e8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12e8:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    12ea:	10 91 a7 00 	lds	r17, 0x00A7
    12ee:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    12f0:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12f4:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12f8:	3c db       	rcall	.-2440   	; 0x972 <USB_Host_ProcessNextHostState>
    12fa:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    12fe:	1f 91       	pop	r17
    1300:	08 95       	ret

00001302 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1302:	90 91 c8 00 	lds	r25, 0x00C8
    1306:	95 ff       	sbrs	r25, 5
    1308:	fc cf       	rjmp	.-8      	; 0x1302 <Serial_putchar>
				UDR1 = DataByte;
    130a:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	08 95       	ret

00001314 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1314:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1318:	87 ff       	sbrs	r24, 7
    131a:	08 c0       	rjmp	.+16     	; 0x132c <Serial_getchar+0x18>
    131c:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1320:	87 ff       	sbrs	r24, 7
    1322:	07 c0       	rjmp	.+14     	; 0x1332 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1324:	20 91 ce 00 	lds	r18, 0x00CE
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    132c:	2e ef       	ldi	r18, 0xFE	; 254
    132e:	3f ef       	ldi	r19, 0xFF	; 255
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1332:	2f ef       	ldi	r18, 0xFF	; 255
    1334:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1336:	c9 01       	movw	r24, r18
    1338:	08 95       	ret

0000133a <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    133a:	fc 01       	movw	r30, r24
	if (!(Stream))
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	51 f4       	brne	.+20     	; 0x1354 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1340:	e5 e2       	ldi	r30, 0x25	; 37
    1342:	f1 e0       	ldi	r31, 0x01	; 1
    1344:	f0 93 34 01 	sts	0x0134, r31
    1348:	e0 93 33 01 	sts	0x0133, r30
		stdout = Stream;
    134c:	f0 93 36 01 	sts	0x0136, r31
    1350:	e0 93 35 01 	sts	0x0135, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1354:	8e e0       	ldi	r24, 0x0E	; 14
    1356:	df 01       	movw	r26, r30
    1358:	1d 92       	st	X+, r1
    135a:	8a 95       	dec	r24
    135c:	e9 f7       	brne	.-6      	; 0x1358 <Serial_CreateStream+0x1e>
    135e:	83 e0       	ldi	r24, 0x03	; 3
    1360:	83 83       	std	Z+3, r24	; 0x03
    1362:	81 e8       	ldi	r24, 0x81	; 129
    1364:	99 e0       	ldi	r25, 0x09	; 9
    1366:	91 87       	std	Z+9, r25	; 0x09
    1368:	80 87       	std	Z+8, r24	; 0x08
    136a:	8a e8       	ldi	r24, 0x8A	; 138
    136c:	99 e0       	ldi	r25, 0x09	; 9
    136e:	93 87       	std	Z+11, r25	; 0x0b
    1370:	82 87       	std	Z+10, r24	; 0x0a
}
    1372:	08 95       	ret

00001374 <printf_P>:
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	fe 01       	movw	r30, r28
    137e:	35 96       	adiw	r30, 0x05	; 5
    1380:	61 91       	ld	r22, Z+
    1382:	71 91       	ld	r23, Z+
    1384:	80 91 35 01 	lds	r24, 0x0135
    1388:	90 91 36 01 	lds	r25, 0x0136
    138c:	dc 01       	movw	r26, r24
    138e:	13 96       	adiw	r26, 0x03	; 3
    1390:	2c 91       	ld	r18, X
    1392:	13 97       	sbiw	r26, 0x03	; 3
    1394:	28 60       	ori	r18, 0x08	; 8
    1396:	13 96       	adiw	r26, 0x03	; 3
    1398:	2c 93       	st	X, r18
    139a:	af 01       	movw	r20, r30
    139c:	42 d0       	rcall	.+132    	; 0x1422 <vfprintf>
    139e:	e0 91 35 01 	lds	r30, 0x0135
    13a2:	f0 91 36 01 	lds	r31, 0x0136
    13a6:	23 81       	ldd	r18, Z+3	; 0x03
    13a8:	27 7f       	andi	r18, 0xF7	; 247
    13aa:	23 83       	std	Z+3, r18	; 0x03
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <puts_P>:
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	8c 01       	movw	r16, r24
    13c0:	e0 91 35 01 	lds	r30, 0x0135
    13c4:	f0 91 36 01 	lds	r31, 0x0136
    13c8:	83 81       	ldd	r24, Z+3	; 0x03
    13ca:	81 ff       	sbrs	r24, 1
    13cc:	20 c0       	rjmp	.+64     	; 0x140e <puts_P+0x5c>
    13ce:	c0 e0       	ldi	r28, 0x00	; 0
    13d0:	d0 e0       	ldi	r29, 0x00	; 0
    13d2:	0c c0       	rjmp	.+24     	; 0x13ec <puts_P+0x3a>
    13d4:	db 01       	movw	r26, r22
    13d6:	18 96       	adiw	r26, 0x08	; 8
    13d8:	ed 91       	ld	r30, X+
    13da:	fc 91       	ld	r31, X
    13dc:	19 97       	sbiw	r26, 0x09	; 9
    13de:	09 95       	icall
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	11 f0       	breq	.+4      	; 0x13e8 <puts_P+0x36>
    13e4:	cf ef       	ldi	r28, 0xFF	; 255
    13e6:	df ef       	ldi	r29, 0xFF	; 255
    13e8:	0f 5f       	subi	r16, 0xFF	; 255
    13ea:	1f 4f       	sbci	r17, 0xFF	; 255
    13ec:	f8 01       	movw	r30, r16
    13ee:	84 91       	lpm	r24, Z+
    13f0:	60 91 35 01 	lds	r22, 0x0135
    13f4:	70 91 36 01 	lds	r23, 0x0136
    13f8:	88 23       	and	r24, r24
    13fa:	61 f7       	brne	.-40     	; 0x13d4 <puts_P+0x22>
    13fc:	db 01       	movw	r26, r22
    13fe:	18 96       	adiw	r26, 0x08	; 8
    1400:	ed 91       	ld	r30, X+
    1402:	fc 91       	ld	r31, X
    1404:	19 97       	sbiw	r26, 0x09	; 9
    1406:	8a e0       	ldi	r24, 0x0A	; 10
    1408:	09 95       	icall
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	11 f0       	breq	.+4      	; 0x1412 <puts_P+0x60>
    140e:	cf ef       	ldi	r28, 0xFF	; 255
    1410:	df ef       	ldi	r29, 0xFF	; 255
    1412:	ce 01       	movw	r24, r28
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	08 95       	ret

00001422 <vfprintf>:
    1422:	2f 92       	push	r2
    1424:	3f 92       	push	r3
    1426:	4f 92       	push	r4
    1428:	5f 92       	push	r5
    142a:	6f 92       	push	r6
    142c:	7f 92       	push	r7
    142e:	8f 92       	push	r8
    1430:	9f 92       	push	r9
    1432:	af 92       	push	r10
    1434:	bf 92       	push	r11
    1436:	cf 92       	push	r12
    1438:	df 92       	push	r13
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	2c 97       	sbiw	r28, 0x0c	; 12
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	6c 01       	movw	r12, r24
    1458:	1b 01       	movw	r2, r22
    145a:	8a 01       	movw	r16, r20
    145c:	fc 01       	movw	r30, r24
    145e:	17 82       	std	Z+7, r1	; 0x07
    1460:	16 82       	std	Z+6, r1	; 0x06
    1462:	83 81       	ldd	r24, Z+3	; 0x03
    1464:	81 ff       	sbrs	r24, 1
    1466:	c4 c1       	rjmp	.+904    	; 0x17f0 <vfprintf+0x3ce>
    1468:	2e 01       	movw	r4, r28
    146a:	08 94       	sec
    146c:	41 1c       	adc	r4, r1
    146e:	51 1c       	adc	r5, r1
    1470:	f6 01       	movw	r30, r12
    1472:	93 81       	ldd	r25, Z+3	; 0x03
    1474:	f1 01       	movw	r30, r2
    1476:	93 fd       	sbrc	r25, 3
    1478:	85 91       	lpm	r24, Z+
    147a:	93 ff       	sbrs	r25, 3
    147c:	81 91       	ld	r24, Z+
    147e:	1f 01       	movw	r2, r30
    1480:	88 23       	and	r24, r24
    1482:	09 f4       	brne	.+2      	; 0x1486 <vfprintf+0x64>
    1484:	b1 c1       	rjmp	.+866    	; 0x17e8 <vfprintf+0x3c6>
    1486:	85 32       	cpi	r24, 0x25	; 37
    1488:	39 f4       	brne	.+14     	; 0x1498 <vfprintf+0x76>
    148a:	93 fd       	sbrc	r25, 3
    148c:	85 91       	lpm	r24, Z+
    148e:	93 ff       	sbrs	r25, 3
    1490:	81 91       	ld	r24, Z+
    1492:	1f 01       	movw	r2, r30
    1494:	85 32       	cpi	r24, 0x25	; 37
    1496:	21 f4       	brne	.+8      	; 0x14a0 <vfprintf+0x7e>
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	b6 01       	movw	r22, r12
    149c:	db d1       	rcall	.+950    	; 0x1854 <fputc>
    149e:	e8 cf       	rjmp	.-48     	; 0x1470 <vfprintf+0x4e>
    14a0:	ee 24       	eor	r14, r14
    14a2:	ff 24       	eor	r15, r15
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	20 32       	cpi	r18, 0x20	; 32
    14a8:	b0 f4       	brcc	.+44     	; 0x14d6 <vfprintf+0xb4>
    14aa:	8b 32       	cpi	r24, 0x2B	; 43
    14ac:	69 f0       	breq	.+26     	; 0x14c8 <vfprintf+0xa6>
    14ae:	8c 32       	cpi	r24, 0x2C	; 44
    14b0:	28 f4       	brcc	.+10     	; 0x14bc <vfprintf+0x9a>
    14b2:	80 32       	cpi	r24, 0x20	; 32
    14b4:	51 f0       	breq	.+20     	; 0x14ca <vfprintf+0xa8>
    14b6:	83 32       	cpi	r24, 0x23	; 35
    14b8:	71 f4       	brne	.+28     	; 0x14d6 <vfprintf+0xb4>
    14ba:	0b c0       	rjmp	.+22     	; 0x14d2 <vfprintf+0xb0>
    14bc:	8d 32       	cpi	r24, 0x2D	; 45
    14be:	39 f0       	breq	.+14     	; 0x14ce <vfprintf+0xac>
    14c0:	80 33       	cpi	r24, 0x30	; 48
    14c2:	49 f4       	brne	.+18     	; 0x14d6 <vfprintf+0xb4>
    14c4:	21 60       	ori	r18, 0x01	; 1
    14c6:	2c c0       	rjmp	.+88     	; 0x1520 <vfprintf+0xfe>
    14c8:	22 60       	ori	r18, 0x02	; 2
    14ca:	24 60       	ori	r18, 0x04	; 4
    14cc:	29 c0       	rjmp	.+82     	; 0x1520 <vfprintf+0xfe>
    14ce:	28 60       	ori	r18, 0x08	; 8
    14d0:	27 c0       	rjmp	.+78     	; 0x1520 <vfprintf+0xfe>
    14d2:	20 61       	ori	r18, 0x10	; 16
    14d4:	25 c0       	rjmp	.+74     	; 0x1520 <vfprintf+0xfe>
    14d6:	27 fd       	sbrc	r18, 7
    14d8:	2c c0       	rjmp	.+88     	; 0x1532 <vfprintf+0x110>
    14da:	38 2f       	mov	r19, r24
    14dc:	30 53       	subi	r19, 0x30	; 48
    14de:	3a 30       	cpi	r19, 0x0A	; 10
    14e0:	98 f4       	brcc	.+38     	; 0x1508 <vfprintf+0xe6>
    14e2:	26 ff       	sbrs	r18, 6
    14e4:	08 c0       	rjmp	.+16     	; 0x14f6 <vfprintf+0xd4>
    14e6:	8e 2d       	mov	r24, r14
    14e8:	88 0f       	add	r24, r24
    14ea:	e8 2e       	mov	r14, r24
    14ec:	ee 0c       	add	r14, r14
    14ee:	ee 0c       	add	r14, r14
    14f0:	e8 0e       	add	r14, r24
    14f2:	e3 0e       	add	r14, r19
    14f4:	15 c0       	rjmp	.+42     	; 0x1520 <vfprintf+0xfe>
    14f6:	8f 2d       	mov	r24, r15
    14f8:	88 0f       	add	r24, r24
    14fa:	f8 2e       	mov	r15, r24
    14fc:	ff 0c       	add	r15, r15
    14fe:	ff 0c       	add	r15, r15
    1500:	f8 0e       	add	r15, r24
    1502:	f3 0e       	add	r15, r19
    1504:	20 62       	ori	r18, 0x20	; 32
    1506:	0c c0       	rjmp	.+24     	; 0x1520 <vfprintf+0xfe>
    1508:	8e 32       	cpi	r24, 0x2E	; 46
    150a:	21 f4       	brne	.+8      	; 0x1514 <vfprintf+0xf2>
    150c:	26 fd       	sbrc	r18, 6
    150e:	6c c1       	rjmp	.+728    	; 0x17e8 <vfprintf+0x3c6>
    1510:	20 64       	ori	r18, 0x40	; 64
    1512:	06 c0       	rjmp	.+12     	; 0x1520 <vfprintf+0xfe>
    1514:	8c 36       	cpi	r24, 0x6C	; 108
    1516:	11 f4       	brne	.+4      	; 0x151c <vfprintf+0xfa>
    1518:	20 68       	ori	r18, 0x80	; 128
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <vfprintf+0xfe>
    151c:	88 36       	cpi	r24, 0x68	; 104
    151e:	49 f4       	brne	.+18     	; 0x1532 <vfprintf+0x110>
    1520:	f1 01       	movw	r30, r2
    1522:	93 fd       	sbrc	r25, 3
    1524:	85 91       	lpm	r24, Z+
    1526:	93 ff       	sbrs	r25, 3
    1528:	81 91       	ld	r24, Z+
    152a:	1f 01       	movw	r2, r30
    152c:	88 23       	and	r24, r24
    152e:	09 f0       	breq	.+2      	; 0x1532 <vfprintf+0x110>
    1530:	ba cf       	rjmp	.-140    	; 0x14a6 <vfprintf+0x84>
    1532:	98 2f       	mov	r25, r24
    1534:	95 54       	subi	r25, 0x45	; 69
    1536:	93 30       	cpi	r25, 0x03	; 3
    1538:	18 f0       	brcs	.+6      	; 0x1540 <vfprintf+0x11e>
    153a:	90 52       	subi	r25, 0x20	; 32
    153c:	93 30       	cpi	r25, 0x03	; 3
    153e:	28 f4       	brcc	.+10     	; 0x154a <vfprintf+0x128>
    1540:	0c 5f       	subi	r16, 0xFC	; 252
    1542:	1f 4f       	sbci	r17, 0xFF	; 255
    1544:	ff e3       	ldi	r31, 0x3F	; 63
    1546:	f9 83       	std	Y+1, r31	; 0x01
    1548:	0d c0       	rjmp	.+26     	; 0x1564 <vfprintf+0x142>
    154a:	83 36       	cpi	r24, 0x63	; 99
    154c:	31 f0       	breq	.+12     	; 0x155a <vfprintf+0x138>
    154e:	83 37       	cpi	r24, 0x73	; 115
    1550:	71 f0       	breq	.+28     	; 0x156e <vfprintf+0x14c>
    1552:	83 35       	cpi	r24, 0x53	; 83
    1554:	09 f0       	breq	.+2      	; 0x1558 <vfprintf+0x136>
    1556:	5c c0       	rjmp	.+184    	; 0x1610 <vfprintf+0x1ee>
    1558:	21 c0       	rjmp	.+66     	; 0x159c <vfprintf+0x17a>
    155a:	f8 01       	movw	r30, r16
    155c:	80 81       	ld	r24, Z
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	0e 5f       	subi	r16, 0xFE	; 254
    1562:	1f 4f       	sbci	r17, 0xFF	; 255
    1564:	42 01       	movw	r8, r4
    1566:	71 e0       	ldi	r23, 0x01	; 1
    1568:	a7 2e       	mov	r10, r23
    156a:	b1 2c       	mov	r11, r1
    156c:	15 c0       	rjmp	.+42     	; 0x1598 <vfprintf+0x176>
    156e:	62 e0       	ldi	r22, 0x02	; 2
    1570:	66 2e       	mov	r6, r22
    1572:	71 2c       	mov	r7, r1
    1574:	60 0e       	add	r6, r16
    1576:	71 1e       	adc	r7, r17
    1578:	f8 01       	movw	r30, r16
    157a:	80 80       	ld	r8, Z
    157c:	91 80       	ldd	r9, Z+1	; 0x01
    157e:	26 ff       	sbrs	r18, 6
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <vfprintf+0x166>
    1582:	6e 2d       	mov	r22, r14
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	02 c0       	rjmp	.+4      	; 0x158c <vfprintf+0x16a>
    1588:	6f ef       	ldi	r22, 0xFF	; 255
    158a:	7f ef       	ldi	r23, 0xFF	; 255
    158c:	c4 01       	movw	r24, r8
    158e:	2c 87       	std	Y+12, r18	; 0x0c
    1590:	56 d1       	rcall	.+684    	; 0x183e <strnlen>
    1592:	5c 01       	movw	r10, r24
    1594:	83 01       	movw	r16, r6
    1596:	2c 85       	ldd	r18, Y+12	; 0x0c
    1598:	2f 77       	andi	r18, 0x7F	; 127
    159a:	16 c0       	rjmp	.+44     	; 0x15c8 <vfprintf+0x1a6>
    159c:	52 e0       	ldi	r21, 0x02	; 2
    159e:	65 2e       	mov	r6, r21
    15a0:	71 2c       	mov	r7, r1
    15a2:	60 0e       	add	r6, r16
    15a4:	71 1e       	adc	r7, r17
    15a6:	f8 01       	movw	r30, r16
    15a8:	80 80       	ld	r8, Z
    15aa:	91 80       	ldd	r9, Z+1	; 0x01
    15ac:	26 ff       	sbrs	r18, 6
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <vfprintf+0x194>
    15b0:	6e 2d       	mov	r22, r14
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <vfprintf+0x198>
    15b6:	6f ef       	ldi	r22, 0xFF	; 255
    15b8:	7f ef       	ldi	r23, 0xFF	; 255
    15ba:	c4 01       	movw	r24, r8
    15bc:	2c 87       	std	Y+12, r18	; 0x0c
    15be:	34 d1       	rcall	.+616    	; 0x1828 <strnlen_P>
    15c0:	5c 01       	movw	r10, r24
    15c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15c4:	20 68       	ori	r18, 0x80	; 128
    15c6:	83 01       	movw	r16, r6
    15c8:	23 fd       	sbrc	r18, 3
    15ca:	1e c0       	rjmp	.+60     	; 0x1608 <vfprintf+0x1e6>
    15cc:	07 c0       	rjmp	.+14     	; 0x15dc <vfprintf+0x1ba>
    15ce:	80 e2       	ldi	r24, 0x20	; 32
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	b6 01       	movw	r22, r12
    15d4:	2c 87       	std	Y+12, r18	; 0x0c
    15d6:	3e d1       	rcall	.+636    	; 0x1854 <fputc>
    15d8:	fa 94       	dec	r15
    15da:	2c 85       	ldd	r18, Y+12	; 0x0c
    15dc:	8f 2d       	mov	r24, r15
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a8 16       	cp	r10, r24
    15e2:	b9 06       	cpc	r11, r25
    15e4:	a0 f3       	brcs	.-24     	; 0x15ce <vfprintf+0x1ac>
    15e6:	10 c0       	rjmp	.+32     	; 0x1608 <vfprintf+0x1e6>
    15e8:	f4 01       	movw	r30, r8
    15ea:	27 fd       	sbrc	r18, 7
    15ec:	85 91       	lpm	r24, Z+
    15ee:	27 ff       	sbrs	r18, 7
    15f0:	81 91       	ld	r24, Z+
    15f2:	4f 01       	movw	r8, r30
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	b6 01       	movw	r22, r12
    15f8:	2c 87       	std	Y+12, r18	; 0x0c
    15fa:	2c d1       	rcall	.+600    	; 0x1854 <fputc>
    15fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    15fe:	f1 10       	cpse	r15, r1
    1600:	fa 94       	dec	r15
    1602:	08 94       	sec
    1604:	a1 08       	sbc	r10, r1
    1606:	b1 08       	sbc	r11, r1
    1608:	a1 14       	cp	r10, r1
    160a:	b1 04       	cpc	r11, r1
    160c:	69 f7       	brne	.-38     	; 0x15e8 <vfprintf+0x1c6>
    160e:	e9 c0       	rjmp	.+466    	; 0x17e2 <vfprintf+0x3c0>
    1610:	84 36       	cpi	r24, 0x64	; 100
    1612:	11 f0       	breq	.+4      	; 0x1618 <vfprintf+0x1f6>
    1614:	89 36       	cpi	r24, 0x69	; 105
    1616:	41 f5       	brne	.+80     	; 0x1668 <vfprintf+0x246>
    1618:	27 ff       	sbrs	r18, 7
    161a:	08 c0       	rjmp	.+16     	; 0x162c <vfprintf+0x20a>
    161c:	f8 01       	movw	r30, r16
    161e:	60 81       	ld	r22, Z
    1620:	71 81       	ldd	r23, Z+1	; 0x01
    1622:	82 81       	ldd	r24, Z+2	; 0x02
    1624:	93 81       	ldd	r25, Z+3	; 0x03
    1626:	0c 5f       	subi	r16, 0xFC	; 252
    1628:	1f 4f       	sbci	r17, 0xFF	; 255
    162a:	09 c0       	rjmp	.+18     	; 0x163e <vfprintf+0x21c>
    162c:	f8 01       	movw	r30, r16
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	88 27       	eor	r24, r24
    1634:	77 fd       	sbrc	r23, 7
    1636:	80 95       	com	r24
    1638:	98 2f       	mov	r25, r24
    163a:	0e 5f       	subi	r16, 0xFE	; 254
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	4f e6       	ldi	r20, 0x6F	; 111
    1640:	b4 2e       	mov	r11, r20
    1642:	b2 22       	and	r11, r18
    1644:	97 ff       	sbrs	r25, 7
    1646:	09 c0       	rjmp	.+18     	; 0x165a <vfprintf+0x238>
    1648:	90 95       	com	r25
    164a:	80 95       	com	r24
    164c:	70 95       	com	r23
    164e:	61 95       	neg	r22
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	8f 4f       	sbci	r24, 0xFF	; 255
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	f0 e8       	ldi	r31, 0x80	; 128
    1658:	bf 2a       	or	r11, r31
    165a:	a2 01       	movw	r20, r4
    165c:	2a e0       	ldi	r18, 0x0A	; 10
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	25 d1       	rcall	.+586    	; 0x18ac <__ultoa_invert>
    1662:	78 2e       	mov	r7, r24
    1664:	74 18       	sub	r7, r4
    1666:	44 c0       	rjmp	.+136    	; 0x16f0 <vfprintf+0x2ce>
    1668:	85 37       	cpi	r24, 0x75	; 117
    166a:	31 f4       	brne	.+12     	; 0x1678 <vfprintf+0x256>
    166c:	3f ee       	ldi	r19, 0xEF	; 239
    166e:	b3 2e       	mov	r11, r19
    1670:	b2 22       	and	r11, r18
    1672:	2a e0       	ldi	r18, 0x0A	; 10
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	25 c0       	rjmp	.+74     	; 0x16c2 <vfprintf+0x2a0>
    1678:	99 ef       	ldi	r25, 0xF9	; 249
    167a:	b9 2e       	mov	r11, r25
    167c:	b2 22       	and	r11, r18
    167e:	8f 36       	cpi	r24, 0x6F	; 111
    1680:	c1 f0       	breq	.+48     	; 0x16b2 <vfprintf+0x290>
    1682:	80 37       	cpi	r24, 0x70	; 112
    1684:	20 f4       	brcc	.+8      	; 0x168e <vfprintf+0x26c>
    1686:	88 35       	cpi	r24, 0x58	; 88
    1688:	09 f0       	breq	.+2      	; 0x168c <vfprintf+0x26a>
    168a:	ae c0       	rjmp	.+348    	; 0x17e8 <vfprintf+0x3c6>
    168c:	0d c0       	rjmp	.+26     	; 0x16a8 <vfprintf+0x286>
    168e:	80 37       	cpi	r24, 0x70	; 112
    1690:	21 f0       	breq	.+8      	; 0x169a <vfprintf+0x278>
    1692:	88 37       	cpi	r24, 0x78	; 120
    1694:	09 f0       	breq	.+2      	; 0x1698 <vfprintf+0x276>
    1696:	a8 c0       	rjmp	.+336    	; 0x17e8 <vfprintf+0x3c6>
    1698:	02 c0       	rjmp	.+4      	; 0x169e <vfprintf+0x27c>
    169a:	20 e1       	ldi	r18, 0x10	; 16
    169c:	b2 2a       	or	r11, r18
    169e:	b4 fe       	sbrs	r11, 4
    16a0:	0b c0       	rjmp	.+22     	; 0x16b8 <vfprintf+0x296>
    16a2:	84 e0       	ldi	r24, 0x04	; 4
    16a4:	b8 2a       	or	r11, r24
    16a6:	08 c0       	rjmp	.+16     	; 0x16b8 <vfprintf+0x296>
    16a8:	b4 fe       	sbrs	r11, 4
    16aa:	09 c0       	rjmp	.+18     	; 0x16be <vfprintf+0x29c>
    16ac:	e6 e0       	ldi	r30, 0x06	; 6
    16ae:	be 2a       	or	r11, r30
    16b0:	06 c0       	rjmp	.+12     	; 0x16be <vfprintf+0x29c>
    16b2:	28 e0       	ldi	r18, 0x08	; 8
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <vfprintf+0x2a0>
    16b8:	20 e1       	ldi	r18, 0x10	; 16
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <vfprintf+0x2a0>
    16be:	20 e1       	ldi	r18, 0x10	; 16
    16c0:	32 e0       	ldi	r19, 0x02	; 2
    16c2:	b7 fe       	sbrs	r11, 7
    16c4:	08 c0       	rjmp	.+16     	; 0x16d6 <vfprintf+0x2b4>
    16c6:	f8 01       	movw	r30, r16
    16c8:	60 81       	ld	r22, Z
    16ca:	71 81       	ldd	r23, Z+1	; 0x01
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	0c 5f       	subi	r16, 0xFC	; 252
    16d2:	1f 4f       	sbci	r17, 0xFF	; 255
    16d4:	07 c0       	rjmp	.+14     	; 0x16e4 <vfprintf+0x2c2>
    16d6:	f8 01       	movw	r30, r16
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 5f       	subi	r16, 0xFE	; 254
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	a2 01       	movw	r20, r4
    16e6:	e2 d0       	rcall	.+452    	; 0x18ac <__ultoa_invert>
    16e8:	78 2e       	mov	r7, r24
    16ea:	74 18       	sub	r7, r4
    16ec:	ff e7       	ldi	r31, 0x7F	; 127
    16ee:	bf 22       	and	r11, r31
    16f0:	b6 fe       	sbrs	r11, 6
    16f2:	0b c0       	rjmp	.+22     	; 0x170a <vfprintf+0x2e8>
    16f4:	2e ef       	ldi	r18, 0xFE	; 254
    16f6:	b2 22       	and	r11, r18
    16f8:	7e 14       	cp	r7, r14
    16fa:	38 f4       	brcc	.+14     	; 0x170a <vfprintf+0x2e8>
    16fc:	b4 fe       	sbrs	r11, 4
    16fe:	07 c0       	rjmp	.+14     	; 0x170e <vfprintf+0x2ec>
    1700:	b2 fc       	sbrc	r11, 2
    1702:	05 c0       	rjmp	.+10     	; 0x170e <vfprintf+0x2ec>
    1704:	8f ee       	ldi	r24, 0xEF	; 239
    1706:	b8 22       	and	r11, r24
    1708:	02 c0       	rjmp	.+4      	; 0x170e <vfprintf+0x2ec>
    170a:	a7 2c       	mov	r10, r7
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <vfprintf+0x2ee>
    170e:	ae 2c       	mov	r10, r14
    1710:	8b 2d       	mov	r24, r11
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	b4 fe       	sbrs	r11, 4
    1716:	0d c0       	rjmp	.+26     	; 0x1732 <vfprintf+0x310>
    1718:	fe 01       	movw	r30, r28
    171a:	e7 0d       	add	r30, r7
    171c:	f1 1d       	adc	r31, r1
    171e:	20 81       	ld	r18, Z
    1720:	20 33       	cpi	r18, 0x30	; 48
    1722:	19 f4       	brne	.+6      	; 0x172a <vfprintf+0x308>
    1724:	e9 ee       	ldi	r30, 0xE9	; 233
    1726:	be 22       	and	r11, r30
    1728:	09 c0       	rjmp	.+18     	; 0x173c <vfprintf+0x31a>
    172a:	a3 94       	inc	r10
    172c:	b2 fe       	sbrs	r11, 2
    172e:	06 c0       	rjmp	.+12     	; 0x173c <vfprintf+0x31a>
    1730:	04 c0       	rjmp	.+8      	; 0x173a <vfprintf+0x318>
    1732:	86 78       	andi	r24, 0x86	; 134
    1734:	90 70       	andi	r25, 0x00	; 0
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	09 f0       	breq	.+2      	; 0x173c <vfprintf+0x31a>
    173a:	a3 94       	inc	r10
    173c:	8b 2c       	mov	r8, r11
    173e:	99 24       	eor	r9, r9
    1740:	b3 fc       	sbrc	r11, 3
    1742:	13 c0       	rjmp	.+38     	; 0x176a <vfprintf+0x348>
    1744:	b0 fe       	sbrs	r11, 0
    1746:	0e c0       	rjmp	.+28     	; 0x1764 <vfprintf+0x342>
    1748:	af 14       	cp	r10, r15
    174a:	28 f4       	brcc	.+10     	; 0x1756 <vfprintf+0x334>
    174c:	e7 2c       	mov	r14, r7
    174e:	ef 0c       	add	r14, r15
    1750:	ea 18       	sub	r14, r10
    1752:	af 2c       	mov	r10, r15
    1754:	07 c0       	rjmp	.+14     	; 0x1764 <vfprintf+0x342>
    1756:	e7 2c       	mov	r14, r7
    1758:	05 c0       	rjmp	.+10     	; 0x1764 <vfprintf+0x342>
    175a:	80 e2       	ldi	r24, 0x20	; 32
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	b6 01       	movw	r22, r12
    1760:	79 d0       	rcall	.+242    	; 0x1854 <fputc>
    1762:	a3 94       	inc	r10
    1764:	af 14       	cp	r10, r15
    1766:	c8 f3       	brcs	.-14     	; 0x175a <vfprintf+0x338>
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <vfprintf+0x350>
    176a:	af 14       	cp	r10, r15
    176c:	10 f4       	brcc	.+4      	; 0x1772 <vfprintf+0x350>
    176e:	fa 18       	sub	r15, r10
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <vfprintf+0x352>
    1772:	ff 24       	eor	r15, r15
    1774:	84 fe       	sbrs	r8, 4
    1776:	0e c0       	rjmp	.+28     	; 0x1794 <vfprintf+0x372>
    1778:	80 e3       	ldi	r24, 0x30	; 48
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	b6 01       	movw	r22, r12
    177e:	6a d0       	rcall	.+212    	; 0x1854 <fputc>
    1780:	82 fe       	sbrs	r8, 2
    1782:	1d c0       	rjmp	.+58     	; 0x17be <vfprintf+0x39c>
    1784:	81 fe       	sbrs	r8, 1
    1786:	03 c0       	rjmp	.+6      	; 0x178e <vfprintf+0x36c>
    1788:	88 e5       	ldi	r24, 0x58	; 88
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	10 c0       	rjmp	.+32     	; 0x17ae <vfprintf+0x38c>
    178e:	88 e7       	ldi	r24, 0x78	; 120
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0d c0       	rjmp	.+26     	; 0x17ae <vfprintf+0x38c>
    1794:	c4 01       	movw	r24, r8
    1796:	86 78       	andi	r24, 0x86	; 134
    1798:	90 70       	andi	r25, 0x00	; 0
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	81 f0       	breq	.+32     	; 0x17be <vfprintf+0x39c>
    179e:	81 fc       	sbrc	r8, 1
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <vfprintf+0x384>
    17a2:	80 e2       	ldi	r24, 0x20	; 32
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <vfprintf+0x386>
    17a6:	8b e2       	ldi	r24, 0x2B	; 43
    17a8:	b7 fc       	sbrc	r11, 7
    17aa:	8d e2       	ldi	r24, 0x2D	; 45
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	b6 01       	movw	r22, r12
    17b0:	51 d0       	rcall	.+162    	; 0x1854 <fputc>
    17b2:	05 c0       	rjmp	.+10     	; 0x17be <vfprintf+0x39c>
    17b4:	80 e3       	ldi	r24, 0x30	; 48
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	b6 01       	movw	r22, r12
    17ba:	4c d0       	rcall	.+152    	; 0x1854 <fputc>
    17bc:	ea 94       	dec	r14
    17be:	7e 14       	cp	r7, r14
    17c0:	c8 f3       	brcs	.-14     	; 0x17b4 <vfprintf+0x392>
    17c2:	7a 94       	dec	r7
    17c4:	f2 01       	movw	r30, r4
    17c6:	e7 0d       	add	r30, r7
    17c8:	f1 1d       	adc	r31, r1
    17ca:	80 81       	ld	r24, Z
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	b6 01       	movw	r22, r12
    17d0:	41 d0       	rcall	.+130    	; 0x1854 <fputc>
    17d2:	77 20       	and	r7, r7
    17d4:	b1 f7       	brne	.-20     	; 0x17c2 <vfprintf+0x3a0>
    17d6:	05 c0       	rjmp	.+10     	; 0x17e2 <vfprintf+0x3c0>
    17d8:	80 e2       	ldi	r24, 0x20	; 32
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	b6 01       	movw	r22, r12
    17de:	3a d0       	rcall	.+116    	; 0x1854 <fputc>
    17e0:	fa 94       	dec	r15
    17e2:	ff 20       	and	r15, r15
    17e4:	c9 f7       	brne	.-14     	; 0x17d8 <vfprintf+0x3b6>
    17e6:	44 ce       	rjmp	.-888    	; 0x1470 <vfprintf+0x4e>
    17e8:	f6 01       	movw	r30, r12
    17ea:	26 81       	ldd	r18, Z+6	; 0x06
    17ec:	37 81       	ldd	r19, Z+7	; 0x07
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <vfprintf+0x3d2>
    17f0:	2f ef       	ldi	r18, 0xFF	; 255
    17f2:	3f ef       	ldi	r19, 0xFF	; 255
    17f4:	c9 01       	movw	r24, r18
    17f6:	2c 96       	adiw	r28, 0x0c	; 12
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	ff 90       	pop	r15
    180c:	ef 90       	pop	r14
    180e:	df 90       	pop	r13
    1810:	cf 90       	pop	r12
    1812:	bf 90       	pop	r11
    1814:	af 90       	pop	r10
    1816:	9f 90       	pop	r9
    1818:	8f 90       	pop	r8
    181a:	7f 90       	pop	r7
    181c:	6f 90       	pop	r6
    181e:	5f 90       	pop	r5
    1820:	4f 90       	pop	r4
    1822:	3f 90       	pop	r3
    1824:	2f 90       	pop	r2
    1826:	08 95       	ret

00001828 <strnlen_P>:
    1828:	fc 01       	movw	r30, r24
    182a:	05 90       	lpm	r0, Z+
    182c:	61 50       	subi	r22, 0x01	; 1
    182e:	70 40       	sbci	r23, 0x00	; 0
    1830:	01 10       	cpse	r0, r1
    1832:	d8 f7       	brcc	.-10     	; 0x182a <strnlen_P+0x2>
    1834:	80 95       	com	r24
    1836:	90 95       	com	r25
    1838:	8e 0f       	add	r24, r30
    183a:	9f 1f       	adc	r25, r31
    183c:	08 95       	ret

0000183e <strnlen>:
    183e:	fc 01       	movw	r30, r24
    1840:	61 50       	subi	r22, 0x01	; 1
    1842:	70 40       	sbci	r23, 0x00	; 0
    1844:	01 90       	ld	r0, Z+
    1846:	01 10       	cpse	r0, r1
    1848:	d8 f7       	brcc	.-10     	; 0x1840 <strnlen+0x2>
    184a:	80 95       	com	r24
    184c:	90 95       	com	r25
    184e:	8e 0f       	add	r24, r30
    1850:	9f 1f       	adc	r25, r31
    1852:	08 95       	ret

00001854 <fputc>:
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	8c 01       	movw	r16, r24
    185e:	eb 01       	movw	r28, r22
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	81 ff       	sbrs	r24, 1
    1864:	1b c0       	rjmp	.+54     	; 0x189c <fputc+0x48>
    1866:	82 ff       	sbrs	r24, 2
    1868:	0d c0       	rjmp	.+26     	; 0x1884 <fputc+0x30>
    186a:	2e 81       	ldd	r18, Y+6	; 0x06
    186c:	3f 81       	ldd	r19, Y+7	; 0x07
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	9d 81       	ldd	r25, Y+5	; 0x05
    1872:	28 17       	cp	r18, r24
    1874:	39 07       	cpc	r19, r25
    1876:	64 f4       	brge	.+24     	; 0x1890 <fputc+0x3c>
    1878:	e8 81       	ld	r30, Y
    187a:	f9 81       	ldd	r31, Y+1	; 0x01
    187c:	01 93       	st	Z+, r16
    187e:	f9 83       	std	Y+1, r31	; 0x01
    1880:	e8 83       	st	Y, r30
    1882:	06 c0       	rjmp	.+12     	; 0x1890 <fputc+0x3c>
    1884:	e8 85       	ldd	r30, Y+8	; 0x08
    1886:	f9 85       	ldd	r31, Y+9	; 0x09
    1888:	80 2f       	mov	r24, r16
    188a:	09 95       	icall
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	31 f4       	brne	.+12     	; 0x189c <fputc+0x48>
    1890:	8e 81       	ldd	r24, Y+6	; 0x06
    1892:	9f 81       	ldd	r25, Y+7	; 0x07
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	9f 83       	std	Y+7, r25	; 0x07
    1898:	8e 83       	std	Y+6, r24	; 0x06
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <fputc+0x4c>
    189c:	0f ef       	ldi	r16, 0xFF	; 255
    189e:	1f ef       	ldi	r17, 0xFF	; 255
    18a0:	c8 01       	movw	r24, r16
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	08 95       	ret

000018ac <__ultoa_invert>:
    18ac:	fa 01       	movw	r30, r20
    18ae:	aa 27       	eor	r26, r26
    18b0:	28 30       	cpi	r18, 0x08	; 8
    18b2:	51 f1       	breq	.+84     	; 0x1908 <__ultoa_invert+0x5c>
    18b4:	20 31       	cpi	r18, 0x10	; 16
    18b6:	81 f1       	breq	.+96     	; 0x1918 <__ultoa_invert+0x6c>
    18b8:	e8 94       	clt
    18ba:	6f 93       	push	r22
    18bc:	6e 7f       	andi	r22, 0xFE	; 254
    18be:	6e 5f       	subi	r22, 0xFE	; 254
    18c0:	7f 4f       	sbci	r23, 0xFF	; 255
    18c2:	8f 4f       	sbci	r24, 0xFF	; 255
    18c4:	9f 4f       	sbci	r25, 0xFF	; 255
    18c6:	af 4f       	sbci	r26, 0xFF	; 255
    18c8:	b1 e0       	ldi	r27, 0x01	; 1
    18ca:	3e d0       	rcall	.+124    	; 0x1948 <__ultoa_invert+0x9c>
    18cc:	b4 e0       	ldi	r27, 0x04	; 4
    18ce:	3c d0       	rcall	.+120    	; 0x1948 <__ultoa_invert+0x9c>
    18d0:	67 0f       	add	r22, r23
    18d2:	78 1f       	adc	r23, r24
    18d4:	89 1f       	adc	r24, r25
    18d6:	9a 1f       	adc	r25, r26
    18d8:	a1 1d       	adc	r26, r1
    18da:	68 0f       	add	r22, r24
    18dc:	79 1f       	adc	r23, r25
    18de:	8a 1f       	adc	r24, r26
    18e0:	91 1d       	adc	r25, r1
    18e2:	a1 1d       	adc	r26, r1
    18e4:	6a 0f       	add	r22, r26
    18e6:	71 1d       	adc	r23, r1
    18e8:	81 1d       	adc	r24, r1
    18ea:	91 1d       	adc	r25, r1
    18ec:	a1 1d       	adc	r26, r1
    18ee:	20 d0       	rcall	.+64     	; 0x1930 <__ultoa_invert+0x84>
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <__ultoa_invert+0x48>
    18f2:	68 94       	set
    18f4:	3f 91       	pop	r19
    18f6:	2a e0       	ldi	r18, 0x0A	; 10
    18f8:	26 9f       	mul	r18, r22
    18fa:	11 24       	eor	r1, r1
    18fc:	30 19       	sub	r19, r0
    18fe:	30 5d       	subi	r19, 0xD0	; 208
    1900:	31 93       	st	Z+, r19
    1902:	de f6       	brtc	.-74     	; 0x18ba <__ultoa_invert+0xe>
    1904:	cf 01       	movw	r24, r30
    1906:	08 95       	ret
    1908:	46 2f       	mov	r20, r22
    190a:	47 70       	andi	r20, 0x07	; 7
    190c:	40 5d       	subi	r20, 0xD0	; 208
    190e:	41 93       	st	Z+, r20
    1910:	b3 e0       	ldi	r27, 0x03	; 3
    1912:	0f d0       	rcall	.+30     	; 0x1932 <__ultoa_invert+0x86>
    1914:	c9 f7       	brne	.-14     	; 0x1908 <__ultoa_invert+0x5c>
    1916:	f6 cf       	rjmp	.-20     	; 0x1904 <__ultoa_invert+0x58>
    1918:	46 2f       	mov	r20, r22
    191a:	4f 70       	andi	r20, 0x0F	; 15
    191c:	40 5d       	subi	r20, 0xD0	; 208
    191e:	4a 33       	cpi	r20, 0x3A	; 58
    1920:	18 f0       	brcs	.+6      	; 0x1928 <__ultoa_invert+0x7c>
    1922:	49 5d       	subi	r20, 0xD9	; 217
    1924:	31 fd       	sbrc	r19, 1
    1926:	40 52       	subi	r20, 0x20	; 32
    1928:	41 93       	st	Z+, r20
    192a:	02 d0       	rcall	.+4      	; 0x1930 <__ultoa_invert+0x84>
    192c:	a9 f7       	brne	.-22     	; 0x1918 <__ultoa_invert+0x6c>
    192e:	ea cf       	rjmp	.-44     	; 0x1904 <__ultoa_invert+0x58>
    1930:	b4 e0       	ldi	r27, 0x04	; 4
    1932:	a6 95       	lsr	r26
    1934:	97 95       	ror	r25
    1936:	87 95       	ror	r24
    1938:	77 95       	ror	r23
    193a:	67 95       	ror	r22
    193c:	ba 95       	dec	r27
    193e:	c9 f7       	brne	.-14     	; 0x1932 <__ultoa_invert+0x86>
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	61 05       	cpc	r22, r1
    1944:	71 05       	cpc	r23, r1
    1946:	08 95       	ret
    1948:	9b 01       	movw	r18, r22
    194a:	ac 01       	movw	r20, r24
    194c:	0a 2e       	mov	r0, r26
    194e:	06 94       	lsr	r0
    1950:	57 95       	ror	r21
    1952:	47 95       	ror	r20
    1954:	37 95       	ror	r19
    1956:	27 95       	ror	r18
    1958:	ba 95       	dec	r27
    195a:	c9 f7       	brne	.-14     	; 0x194e <__ultoa_invert+0xa2>
    195c:	62 0f       	add	r22, r18
    195e:	73 1f       	adc	r23, r19
    1960:	84 1f       	adc	r24, r20
    1962:	95 1f       	adc	r25, r21
    1964:	a0 1d       	adc	r26, r0
    1966:	08 95       	ret

00001968 <_exit>:
    1968:	f8 94       	cli

0000196a <__stop_program>:
    196a:	ff cf       	rjmp	.-2      	; 0x196a <__stop_program>
