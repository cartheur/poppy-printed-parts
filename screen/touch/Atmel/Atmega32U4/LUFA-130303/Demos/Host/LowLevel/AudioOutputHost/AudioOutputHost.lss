
AudioOutputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000195e  000019f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000195e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800114  00800114  00001a06  2**0
                  ALLOC
  3 .stab         000021a8  00000000  00000000  00001a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7e  00000000  00000000  00003bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000350  00000000  00000000  0000492e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008ae  00000000  00000000  00004c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005003  00000000  00000000  0000552c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000161e  00000000  00000000  0000a52f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004593  00000000  00000000  0000bb4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000500  00000000  00000000  000100e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002758  00000000  00000000  000105e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002d82  00000000  00000000  00012d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000009ee  00000000  00000000  00015aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000440  00000000  00000000  000164a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	78 c1       	rjmp	.+752    	; 0x2f2 <__ctors_end>
       2:	00 00       	nop
       4:	94 c1       	rjmp	.+808    	; 0x32e <__bad_interrupt>
       6:	00 00       	nop
       8:	92 c1       	rjmp	.+804    	; 0x32e <__bad_interrupt>
       a:	00 00       	nop
       c:	90 c1       	rjmp	.+800    	; 0x32e <__bad_interrupt>
       e:	00 00       	nop
      10:	8e c1       	rjmp	.+796    	; 0x32e <__bad_interrupt>
      12:	00 00       	nop
      14:	8c c1       	rjmp	.+792    	; 0x32e <__bad_interrupt>
      16:	00 00       	nop
      18:	8a c1       	rjmp	.+788    	; 0x32e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	88 c1       	rjmp	.+784    	; 0x32e <__bad_interrupt>
      1e:	00 00       	nop
      20:	86 c1       	rjmp	.+780    	; 0x32e <__bad_interrupt>
      22:	00 00       	nop
      24:	84 c1       	rjmp	.+776    	; 0x32e <__bad_interrupt>
      26:	00 00       	nop
      28:	c6 c6       	rjmp	.+3468   	; 0xdb6 <__vector_10>
      2a:	00 00       	nop
      2c:	80 c1       	rjmp	.+768    	; 0x32e <__bad_interrupt>
      2e:	00 00       	nop
      30:	7e c1       	rjmp	.+764    	; 0x32e <__bad_interrupt>
      32:	00 00       	nop
      34:	7c c1       	rjmp	.+760    	; 0x32e <__bad_interrupt>
      36:	00 00       	nop
      38:	7a c1       	rjmp	.+756    	; 0x32e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	78 c1       	rjmp	.+752    	; 0x32e <__bad_interrupt>
      3e:	00 00       	nop
      40:	76 c1       	rjmp	.+748    	; 0x32e <__bad_interrupt>
      42:	00 00       	nop
      44:	74 c1       	rjmp	.+744    	; 0x32e <__bad_interrupt>
      46:	00 00       	nop
      48:	72 c1       	rjmp	.+740    	; 0x32e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	70 c1       	rjmp	.+736    	; 0x32e <__bad_interrupt>
      4e:	00 00       	nop
      50:	6e c1       	rjmp	.+732    	; 0x32e <__bad_interrupt>
      52:	00 00       	nop
      54:	b2 c2       	rjmp	.+1380   	; 0x5ba <__vector_21>
      56:	00 00       	nop
      58:	6a c1       	rjmp	.+724    	; 0x32e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	68 c1       	rjmp	.+720    	; 0x32e <__bad_interrupt>
      5e:	00 00       	nop
      60:	66 c1       	rjmp	.+716    	; 0x32e <__bad_interrupt>
      62:	00 00       	nop
      64:	64 c1       	rjmp	.+712    	; 0x32e <__bad_interrupt>
      66:	00 00       	nop
      68:	62 c1       	rjmp	.+708    	; 0x32e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	60 c1       	rjmp	.+704    	; 0x32e <__bad_interrupt>
      6e:	00 00       	nop
      70:	5e c1       	rjmp	.+700    	; 0x32e <__bad_interrupt>
      72:	00 00       	nop
      74:	5c c1       	rjmp	.+696    	; 0x32e <__bad_interrupt>
      76:	00 00       	nop
      78:	5a c1       	rjmp	.+692    	; 0x32e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	58 c1       	rjmp	.+688    	; 0x32e <__bad_interrupt>
      7e:	00 00       	nop
      80:	56 c1       	rjmp	.+684    	; 0x32e <__bad_interrupt>
      82:	00 00       	nop
      84:	54 c1       	rjmp	.+680    	; 0x32e <__bad_interrupt>
      86:	00 00       	nop
      88:	52 c1       	rjmp	.+676    	; 0x32e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	50 c1       	rjmp	.+672    	; 0x32e <__bad_interrupt>
      8e:	00 00       	nop
      90:	4e c1       	rjmp	.+668    	; 0x32e <__bad_interrupt>
      92:	00 00       	nop
      94:	4c c1       	rjmp	.+664    	; 0x32e <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4352>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4345>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4340>:
     11d:	53 70 65 61 6b 65 72 20 45 6e 75 6d 65 72 61 74     Speaker Enumerat
     12d:	65 64 2e 0d 0a 00                                   ed....

00000133 <__c.4338>:
     133:	1b 5b 33 31 6d 43 6f 75 6c 64 20 6e 6f 74 20 73     .[31mCould not s
     143:	65 74 20 72 65 71 75 65 73 74 65 64 20 41 75 64     et requested Aud
     153:	69 6f 20 73 61 6d 70 6c 65 20 72 61 74 65 2e 0d     io sample rate..
     163:	0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a     . -- Error Code:
     173:	20 25 64 0d 0a 1b 5b 33 37 6d 00                     %d...[37m.

0000017e <__c.4334>:
     17e:	1b 5b 33 31 6d 43 6f 75 6c 64 20 6e 6f 74 20 73     .[31mCould not s
     18e:	65 74 20 61 6c 74 65 72 6e 61 74 69 76 65 20 73     et alternative s
     19e:	74 72 65 61 6d 69 6e 67 20 69 6e 74 65 72 66 61     treaming interfa
     1ae:	63 65 20 73 65 74 74 69 6e 67 2e 0d 0a 20 2d 2d     ce setting... --
     1be:	20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64 0d      Error Code: %d.
     1ce:	0a 1b 5b 33 37 6d 00                                ..[37m.

000001d5 <__c.4332>:
     1d5:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1e5:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1f5:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     205:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     215:	37 6d 00                                            7m.

00000218 <__c.4330>:
     218:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     228:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000232 <__c.4328>:
     232:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     242:	69 63 65 2e 0d 0a 00                                ice....

00000249 <__c.4326>:
     249:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     259:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     269:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000273 <__c.4323>:
     273:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     283:	61 74 61 2e 0d 0a 00                                ata....

0000028a <__c.4318>:
     28a:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     29a:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

000002a9 <__c.4313>:
     2a9:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     2b9:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000002c6 <__c.4304>:
     2c6:	1b 5b 33 36 6d 41 75 64 69 6f 20 4f 75 74 70 75     .[36mAudio Outpu
     2d6:	74 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     t Host Demo runn
     2e6:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00                 ing....[37m.

000002f2 <__ctors_end>:
     2f2:	11 24       	eor	r1, r1
     2f4:	1f be       	out	0x3f, r1	; 63
     2f6:	cf ef       	ldi	r28, 0xFF	; 255
     2f8:	d0 e2       	ldi	r29, 0x20	; 32
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	cd bf       	out	0x3d, r28	; 61

000002fe <__do_copy_data>:
     2fe:	11 e0       	ldi	r17, 0x01	; 1
     300:	a0 e0       	ldi	r26, 0x00	; 0
     302:	b1 e0       	ldi	r27, 0x01	; 1
     304:	ee e5       	ldi	r30, 0x5E	; 94
     306:	f9 e1       	ldi	r31, 0x19	; 25
     308:	00 e0       	ldi	r16, 0x00	; 0
     30a:	0b bf       	out	0x3b, r16	; 59
     30c:	02 c0       	rjmp	.+4      	; 0x312 <__do_copy_data+0x14>
     30e:	07 90       	elpm	r0, Z+
     310:	0d 92       	st	X+, r0
     312:	a4 31       	cpi	r26, 0x14	; 20
     314:	b1 07       	cpc	r27, r17
     316:	d9 f7       	brne	.-10     	; 0x30e <__do_copy_data+0x10>

00000318 <__do_clear_bss>:
     318:	11 e0       	ldi	r17, 0x01	; 1
     31a:	a4 e1       	ldi	r26, 0x14	; 20
     31c:	b1 e0       	ldi	r27, 0x01	; 1
     31e:	01 c0       	rjmp	.+2      	; 0x322 <.do_clear_bss_start>

00000320 <.do_clear_bss_loop>:
     320:	1d 92       	st	X+, r1

00000322 <.do_clear_bss_start>:
     322:	ac 33       	cpi	r26, 0x3C	; 60
     324:	b1 07       	cpc	r27, r17
     326:	e1 f7       	brne	.-8      	; 0x320 <.do_clear_bss_loop>
     328:	4c d0       	rcall	.+152    	; 0x3c2 <main>
     32a:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <_exit>

0000032e <__bad_interrupt>:
     32e:	68 ce       	rjmp	.-816    	; 0x0 <__vectors>

00000330 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     330:	9b b1       	in	r25, 0x0b	; 11
     332:	9f 70       	andi	r25, 0x0F	; 15
     334:	98 2b       	or	r25, r24
     336:	9b b9       	out	0x0b, r25	; 11
			}
     338:	08 95       	ret

0000033a <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     33e:	84 b7       	in	r24, 0x34	; 52
     340:	87 7f       	andi	r24, 0xF7	; 247
     342:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     344:	28 e1       	ldi	r18, 0x18	; 24
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	20 93 60 00 	sts	0x0060, r18
     34e:	10 92 60 00 	sts	0x0060, r1
     352:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	80 e8       	ldi	r24, 0x80	; 128
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	80 93 61 00 	sts	0x0061, r24
     360:	90 93 61 00 	sts	0x0061, r25
     364:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     366:	83 e3       	ldi	r24, 0x33	; 51
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	90 93 cd 00 	sts	0x00CD, r25
     36e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     372:	86 e0       	ldi	r24, 0x06	; 6
     374:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     378:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     37c:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     380:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     382:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     384:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     386:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(const uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(const uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     388:	ca e7       	ldi	r28, 0x7A	; 122
     38a:	d0 e0       	ldi	r29, 0x00	; 0
     38c:	85 ea       	ldi	r24, 0xA5	; 165
     38e:	88 83       	st	Y, r24
			 */
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__))
				DDRF  &= ~(1 << ChannelIndex);
     390:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     392:	ee e7       	ldi	r30, 0x7E	; 126
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	84 60       	ori	r24, 0x04	; 4
     39a:	80 83       	st	Z, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     39c:	8a b1       	in	r24, 0x0a	; 10
     39e:	80 6f       	ori	r24, 0xF0	; 240
     3a0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3a2:	8b b1       	in	r24, 0x0b	; 11
     3a4:	8f 70       	andi	r24, 0x0F	; 15
     3a6:	8b b9       	out	0x0b, r24	; 11
	Serial_Init(9600, false);
	Buttons_Init();
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	LEDs_Init();
	USB_Init();
     3a8:	eb d4       	rcall	.+2518   	; 0xd80 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	be d7       	rcall	.+3964   	; 0x132c <Serial_CreateStream>
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
     3b0:	82 e4       	ldi	r24, 0x42	; 66
     3b2:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
     3b6:	88 81       	ld	r24, Y
     3b8:	80 64       	ori	r24, 0x40	; 64
     3ba:	88 83       	st	Y, r24

	/* Start the ADC conversion in free running mode */
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_GET_CHANNEL_MASK(MIC_IN_ADC_CHANNEL));	
}
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	08 95       	ret

000003c2 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     3c2:	bb df       	rcall	.-138    	; 0x33a <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Audio Output Host Demo running.\r\n" ESC_FG_WHITE));
     3c4:	86 ec       	ldi	r24, 0xC6	; 198
     3c6:	92 e0       	ldi	r25, 0x02	; 2
     3c8:	ed d7       	rcall	.+4058   	; 0x13a4 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3ca:	80 e1       	ldi	r24, 0x10	; 16
     3cc:	b1 df       	rcall	.-158    	; 0x330 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     3ce:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		USB_USBTask();
     3d0:	84 d7       	rcall	.+3848   	; 0x12da <USB_USBTask>
     3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <main+0xe>

000003d4 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     3d4:	89 ea       	ldi	r24, 0xA9	; 169
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	e5 d7       	rcall	.+4042   	; 0x13a4 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3da:	80 ea       	ldi	r24, 0xA0	; 160
}
     3dc:	a9 cf       	rjmp	.-174    	; 0x330 <LEDs_SetAllLEDs>

000003de <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     3de:	8a e8       	ldi	r24, 0x8A	; 138
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	e0 d7       	rcall	.+4032   	; 0x13a4 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3e4:	80 e1       	ldi	r24, 0x10	; 16
}
     3e6:	a4 cf       	rjmp	.-184    	; 0x330 <LEDs_SetAllLEDs>

000003e8 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3e8:	1f 93       	push	r17
     3ea:	df 93       	push	r29
     3ec:	cf 93       	push	r28
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x8>
     3f0:	0f 92       	push	r0
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
	puts_P(PSTR("Getting Config Data.\r\n"));
     3f6:	83 e7       	ldi	r24, 0x73	; 115
     3f8:	92 e0       	ldi	r25, 0x02	; 2
     3fa:	d4 d7       	rcall	.+4008   	; 0x13a4 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     3fc:	6f d1       	rcall	.+734    	; 0x6dc <ProcessConfigurationDescriptor>
     3fe:	18 2f       	mov	r17, r24
     400:	88 23       	and	r24, r24
     402:	f1 f0       	breq	.+60     	; 0x440 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
	{
		if (ErrorCode == ControlError)
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	19 f4       	brne	.+6      	; 0x40e <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     408:	89 e4       	ldi	r24, 0x49	; 73
     40a:	92 e0       	ldi	r25, 0x02	; 2
     40c:	02 c0       	rjmp	.+4      	; 0x412 <EVENT_USB_Host_DeviceEnumerationComplete+0x2a>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     40e:	82 e3       	ldi	r24, 0x32	; 50
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	c8 d7       	rcall	.+3984   	; 0x13a4 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     414:	00 d0       	rcall	.+0      	; 0x416 <EVENT_USB_Host_DeviceEnumerationComplete+0x2e>
     416:	00 d0       	rcall	.+0      	; 0x418 <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
     418:	ed b7       	in	r30, 0x3d	; 61
     41a:	fe b7       	in	r31, 0x3e	; 62
     41c:	31 96       	adiw	r30, 0x01	; 1
     41e:	28 e1       	ldi	r18, 0x18	; 24
     420:	32 e0       	ldi	r19, 0x02	; 2
     422:	ad b7       	in	r26, 0x3d	; 61
     424:	be b7       	in	r27, 0x3e	; 62
     426:	12 96       	adiw	r26, 0x02	; 2
     428:	3c 93       	st	X, r19
     42a:	2e 93       	st	-X, r18
     42c:	11 97       	sbiw	r26, 0x01	; 1
     42e:	12 83       	std	Z+2, r17	; 0x02
     430:	13 82       	std	Z+3, r1	; 0x03
     432:	99 d7       	rcall	.+3890   	; 0x1366 <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	80 e9       	ldi	r24, 0x90	; 144
     43e:	6e c0       	rjmp	.+220    	; 0x51c <EVENT_USB_Host_DeviceEnumerationComplete+0x134>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0f d7       	rcall	.+3614   	; 0x1262 <USB_Host_SetDeviceConfiguration>
     444:	88 23       	and	r24, r24
     446:	79 f0       	breq	.+30     	; 0x466 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     448:	00 d0       	rcall	.+0      	; 0x44a <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
     44a:	00 d0       	rcall	.+0      	; 0x44c <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     44c:	ed b7       	in	r30, 0x3d	; 61
     44e:	fe b7       	in	r31, 0x3e	; 62
     450:	31 96       	adiw	r30, 0x01	; 1
     452:	25 ed       	ldi	r18, 0xD5	; 213
     454:	31 e0       	ldi	r19, 0x01	; 1
     456:	ad b7       	in	r26, 0x3d	; 61
     458:	be b7       	in	r27, 0x3e	; 62
     45a:	12 96       	adiw	r26, 0x02	; 2
     45c:	3c 93       	st	X, r19
     45e:	2e 93       	st	-X, r18
     460:	11 97       	sbiw	r26, 0x01	; 1
     462:	82 83       	std	Z+2, r24	; 0x02
     464:	e5 cf       	rjmp	.-54     	; 0x430 <EVENT_USB_Host_DeviceEnumerationComplete+0x48>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if ((ErrorCode = USB_Host_SetInterfaceAltSetting(StreamingInterfaceIndex,
     466:	80 91 17 01 	lds	r24, 0x0117
     46a:	60 91 18 01 	lds	r22, 0x0118
     46e:	1e d7       	rcall	.+3644   	; 0x12ac <USB_Host_SetInterfaceAltSetting>
     470:	88 23       	and	r24, r24
     472:	41 f0       	breq	.+16     	; 0x484 <EVENT_USB_Host_DeviceEnumerationComplete+0x9c>
	                                                 StreamingInterfaceAltSetting)) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Could not set alternative streaming interface setting.\r\n"
     474:	00 d0       	rcall	.+0      	; 0x476 <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
     476:	00 d0       	rcall	.+0      	; 0x478 <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
     478:	ed b7       	in	r30, 0x3d	; 61
     47a:	fe b7       	in	r31, 0x3e	; 62
     47c:	31 96       	adiw	r30, 0x01	; 1
     47e:	2e e7       	ldi	r18, 0x7E	; 126
     480:	31 e0       	ldi	r19, 0x01	; 1
     482:	2f c0       	rjmp	.+94     	; 0x4e2 <EVENT_USB_Host_DeviceEnumerationComplete+0xfa>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	USB_ControlRequest = (USB_Request_Header_t)
     484:	20 91 19 01 	lds	r18, 0x0119
     488:	82 e2       	ldi	r24, 0x22	; 34
     48a:	80 93 1f 01 	sts	0x011F, r24
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 20 01 	sts	0x0120, r24
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	90 93 22 01 	sts	0x0122, r25
     49c:	80 93 21 01 	sts	0x0121, r24
     4a0:	20 93 23 01 	sts	0x0123, r18
     4a4:	10 92 24 01 	sts	0x0124, r1
     4a8:	83 e0       	ldi	r24, 0x03	; 3
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	90 93 26 01 	sts	0x0126, r25
     4b0:	80 93 25 01 	sts	0x0125, r24
			.wValue        = (AUDIO_EPCONTROL_SamplingFreq << 8),
			.wIndex        = StreamingEndpointAddress,
			.wLength       = sizeof(USB_Audio_SampleFreq_t),
		};

	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     4b4:	de 01       	movw	r26, r28
     4b6:	11 96       	adiw	r26, 0x01	; 1
     4b8:	e0 e0       	ldi	r30, 0x00	; 0
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	01 90       	ld	r0, Z+
     4c0:	0d 92       	st	X+, r0
     4c2:	81 50       	subi	r24, 0x01	; 1
     4c4:	e1 f7       	brne	.-8      	; 0x4be <EVENT_USB_Host_DeviceEnumerationComplete+0xd6>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     4c6:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Set the sample rate on the streaming interface endpoint */
	if ((ErrorCode = USB_Host_SendControlRequest(&SampleRate)) != HOST_SENDCONTROL_Successful)
     4ca:	ce 01       	movw	r24, r28
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	ca d5       	rcall	.+2964   	; 0x1064 <USB_Host_SendControlRequest>
     4d0:	88 23       	and	r24, r24
     4d2:	c9 f0       	breq	.+50     	; 0x506 <EVENT_USB_Host_DeviceEnumerationComplete+0x11e>
	{
		printf_P(PSTR(ESC_FG_RED "Could not set requested Audio sample rate.\r\n"
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <EVENT_USB_Host_DeviceEnumerationComplete+0xee>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete+0xf0>
     4d8:	ed b7       	in	r30, 0x3d	; 61
     4da:	fe b7       	in	r31, 0x3e	; 62
     4dc:	31 96       	adiw	r30, 0x01	; 1
     4de:	23 e3       	ldi	r18, 0x33	; 51
     4e0:	31 e0       	ldi	r19, 0x01	; 1
     4e2:	ad b7       	in	r26, 0x3d	; 61
     4e4:	be b7       	in	r27, 0x3e	; 62
     4e6:	12 96       	adiw	r26, 0x02	; 2
     4e8:	3c 93       	st	X, r19
     4ea:	2e 93       	st	-X, r18
     4ec:	11 97       	sbiw	r26, 0x01	; 1
     4ee:	82 83       	std	Z+2, r24	; 0x02
     4f0:	13 82       	std	Z+3, r1	; 0x03
     4f2:	39 d7       	rcall	.+3698   	; 0x1366 <printf_P>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	80 e9       	ldi	r24, 0x90	; 144
     4fe:	18 df       	rcall	.-464    	; 0x330 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	af d6       	rcall	.+3422   	; 0x1262 <USB_Host_SetDeviceConfiguration>
		return;
     504:	0c c0       	rjmp	.+24     	; 0x51e <EVENT_USB_Host_DeviceEnumerationComplete+0x136>
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	80 93 6e 00 	sts	0x006E, r24
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     50c:	93 e1       	ldi	r25, 0x13	; 19
     50e:	97 bd       	out	0x27, r25	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
     510:	84 bd       	out	0x24, r24	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     512:	85 bd       	out	0x25, r24	; 37

	puts_P(PSTR("Speaker Enumerated.\r\n"));
     514:	8d e1       	ldi	r24, 0x1D	; 29
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	45 d7       	rcall	.+3722   	; 0x13a4 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     51a:	80 e6       	ldi	r24, 0x60	; 96
     51c:	09 df       	rcall	.-494    	; 0x330 <LEDs_SetAllLEDs>
}
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	cf 91       	pop	r28
     526:	df 91       	pop	r29
     528:	1f 91       	pop	r17
     52a:	08 95       	ret

0000052c <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	0f 92       	push	r0
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     536:	89 83       	std	Y+1, r24	; 0x01
     538:	bb d3       	rcall	.+1910   	; 0xcb0 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     53a:	00 d0       	rcall	.+0      	; 0x53c <EVENT_USB_Host_HostError+0x10>
     53c:	00 d0       	rcall	.+0      	; 0x53e <EVENT_USB_Host_HostError+0x12>
     53e:	ed b7       	in	r30, 0x3d	; 61
     540:	fe b7       	in	r31, 0x3e	; 62
     542:	31 96       	adiw	r30, 0x01	; 1
     544:	2e ee       	ldi	r18, 0xEE	; 238
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	ad b7       	in	r26, 0x3d	; 61
     54a:	be b7       	in	r27, 0x3e	; 62
     54c:	12 96       	adiw	r26, 0x02	; 2
     54e:	3c 93       	st	X, r19
     550:	2e 93       	st	-X, r18
     552:	11 97       	sbiw	r26, 0x01	; 1
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	82 83       	std	Z+2, r24	; 0x02
     558:	13 82       	std	Z+3, r1	; 0x03
     55a:	05 d7       	rcall	.+3594   	; 0x1366 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	80 e9       	ldi	r24, 0x90	; 144
     566:	e4 de       	rcall	.-568    	; 0x330 <LEDs_SetAllLEDs>
     568:	ff cf       	rjmp	.-2      	; 0x568 <EVENT_USB_Host_HostError+0x3c>

0000056a <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     56a:	90 91 27 01 	lds	r25, 0x0127
     56e:	2d b7       	in	r18, 0x3d	; 61
     570:	3e b7       	in	r19, 0x3e	; 62
     572:	28 50       	subi	r18, 0x08	; 8
     574:	30 40       	sbci	r19, 0x00	; 0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	3e bf       	out	0x3e, r19	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	2d bf       	out	0x3d, r18	; 61
     580:	ed b7       	in	r30, 0x3d	; 61
     582:	fe b7       	in	r31, 0x3e	; 62
     584:	31 96       	adiw	r30, 0x01	; 1
     586:	28 e9       	ldi	r18, 0x98	; 152
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	ad b7       	in	r26, 0x3d	; 61
     58c:	be b7       	in	r27, 0x3e	; 62
     58e:	12 96       	adiw	r26, 0x02	; 2
     590:	3c 93       	st	X, r19
     592:	2e 93       	st	-X, r18
     594:	11 97       	sbiw	r26, 0x01	; 1
     596:	82 83       	std	Z+2, r24	; 0x02
     598:	13 82       	std	Z+3, r1	; 0x03
     59a:	64 83       	std	Z+4, r22	; 0x04
     59c:	15 82       	std	Z+5, r1	; 0x05
     59e:	96 83       	std	Z+6, r25	; 0x06
     5a0:	17 82       	std	Z+7, r1	; 0x07
     5a2:	e1 d6       	rcall	.+3522   	; 0x1366 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5a4:	2d b7       	in	r18, 0x3d	; 61
     5a6:	3e b7       	in	r19, 0x3e	; 62
     5a8:	28 5f       	subi	r18, 0xF8	; 248
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	3e bf       	out	0x3e, r19	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	2d bf       	out	0x3d, r18	; 61
     5b6:	80 e9       	ldi	r24, 0x90	; 144
}
     5b8:	bb ce       	rjmp	.-650    	; 0x330 <LEDs_SetAllLEDs>

000005ba <__vector_21>:

/** ISR to handle the reloading of the endpoint with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     5ba:	1f 92       	push	r1
     5bc:	0f 92       	push	r0
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	0f 92       	push	r0
     5c2:	11 24       	eor	r1, r1
     5c4:	2f 93       	push	r18
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     5ca:	80 91 a7 00 	lds	r24, 0x00A7
     5ce:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     5d0:	90 91 aa 00 	lds	r25, 0x00AA
     5d4:	90 ff       	sbrs	r25, 0
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <__vector_21+0x22>
     5d8:	90 e8       	ldi	r25, 0x80	; 128
     5da:	01 c0       	rjmp	.+2      	; 0x5de <__vector_21+0x24>
     5dc:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     5de:	29 2f       	mov	r18, r25
     5e0:	28 2b       	or	r18, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     5e8:	80 91 a9 00 	lds	r24, 0x00A9
     5ec:	8f 7b       	andi	r24, 0xBF	; 191
     5ee:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     5f2:	80 91 a6 00 	lds	r24, 0x00A6

	Pipe_SelectPipe(AUDIO_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Check if the current pipe can be written to (device ready for more data) */
	if (Pipe_IsOUTReady())
     5f6:	82 ff       	sbrs	r24, 2
     5f8:	2d c0       	rjmp	.+90     	; 0x654 <__vector_21+0x9a>
		#if defined(USE_TEST_TONE)
			static uint8_t SquareWaveSampleCount;
			static int16_t CurrentWaveValue;

			/* In test tone mode, generate a square wave at 1/256 of the sample rate */
			if (SquareWaveSampleCount++ == 0xFF)
     5fa:	90 91 16 01 	lds	r25, 0x0116
     5fe:	89 2f       	mov	r24, r25
     600:	8f 5f       	subi	r24, 0xFF	; 255
     602:	80 93 16 01 	sts	0x0116, r24
     606:	9f 3f       	cpi	r25, 0xFF	; 255
     608:	51 f4       	brne	.+20     	; 0x61e <__vector_21+0x64>
			  CurrentWaveValue ^= 0x8000;
     60a:	80 91 14 01 	lds	r24, 0x0114
     60e:	90 91 15 01 	lds	r25, 0x0115
     612:	80 50       	subi	r24, 0x00	; 0
     614:	90 48       	sbci	r25, 0x80	; 128
     616:	90 93 15 01 	sts	0x0115, r25
     61a:	80 93 14 01 	sts	0x0114, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     61e:	8c b1       	in	r24, 0x0c	; 12

			/* Only generate audio if the board button is being pressed */
			AudioSample = (Buttons_GetStatus() & BUTTONS_BUTTON1) ? CurrentWaveValue : 0;
     620:	82 fd       	sbrc	r24, 2
     622:	05 c0       	rjmp	.+10     	; 0x62e <__vector_21+0x74>
     624:	80 91 14 01 	lds	r24, 0x0114
     628:	90 91 15 01 	lds	r25, 0x0115
     62c:	02 c0       	rjmp	.+4      	; 0x632 <__vector_21+0x78>
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     632:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     636:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     63a:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     63e:	90 93 af 00 	sts	0x00AF, r25
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     642:	80 91 a6 00 	lds	r24, 0x00A6
		#endif

		Pipe_Write_16_LE(AudioSample);
		Pipe_Write_16_LE(AudioSample);

		if (!(Pipe_IsReadWriteAllowed()))
     646:	85 fd       	sbrc	r24, 5
     648:	05 c0       	rjmp	.+10     	; 0x654 <__vector_21+0x9a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     64a:	80 91 a6 00 	lds	r24, 0x00A6
     64e:	8b 77       	andi	r24, 0x7B	; 123
     650:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     654:	80 91 a9 00 	lds	r24, 0x00A9
     658:	80 64       	ori	r24, 0x40	; 64
     65a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     65e:	82 2f       	mov	r24, r18
     660:	8f 70       	andi	r24, 0x0F	; 15
     662:	80 93 a7 00 	sts	0x00A7, r24
		  Pipe_ClearOUT();
	}

	Pipe_Freeze();
	Pipe_SelectPipe(PrevPipe);
}
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	2f 91       	pop	r18
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <DComp_NextAudioControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Audio Control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioControlInterface(void* CurrentDescriptor)
{
     676:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     678:	81 81       	ldd	r24, Z+1	; 0x01
     67a:	84 30       	cpi	r24, 0x04	; 4
     67c:	49 f4       	brne	.+18     	; 0x690 <DComp_NextAudioControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
     67e:	85 81       	ldd	r24, Z+5	; 0x05
     680:	81 30       	cpi	r24, 0x01	; 1
     682:	31 f4       	brne	.+12     	; 0x690 <DComp_NextAudioControlInterface+0x1a>
     684:	86 81       	ldd	r24, Z+6	; 0x06
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	19 f4       	brne	.+6      	; 0x690 <DComp_NextAudioControlInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
     68a:	87 81       	ldd	r24, Z+7	; 0x07
     68c:	88 23       	and	r24, r24
     68e:	11 f0       	breq	.+4      	; 0x694 <DComp_NextAudioControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_ControlProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     694:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     696:	08 95       	ret

00000698 <DComp_NextAudioStreamInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Audio Streaming Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioStreamInterface(void* CurrentDescriptor)
{
     698:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     69a:	81 81       	ldd	r24, Z+1	; 0x01
     69c:	84 30       	cpi	r24, 0x04	; 4
     69e:	49 f4       	brne	.+18     	; 0x6b2 <DComp_NextAudioStreamInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
     6a0:	85 81       	ldd	r24, Z+5	; 0x05
     6a2:	81 30       	cpi	r24, 0x01	; 1
     6a4:	31 f4       	brne	.+12     	; 0x6b2 <DComp_NextAudioStreamInterface+0x1a>
     6a6:	86 81       	ldd	r24, Z+6	; 0x06
     6a8:	82 30       	cpi	r24, 0x02	; 2
     6aa:	19 f4       	brne	.+6      	; 0x6b2 <DComp_NextAudioStreamInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
     6ac:	87 81       	ldd	r24, Z+7	; 0x07
     6ae:	88 23       	and	r24, r24
     6b0:	11 f0       	breq	.+4      	; 0x6b6 <DComp_NextAudioStreamInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     6b6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6b8:	08 95       	ret

000006ba <DComp_NextAudioInterfaceDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
     6ba:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     6bc:	81 81       	ldd	r24, Z+1	; 0x01
     6be:	85 30       	cpi	r24, 0x05	; 5
     6c0:	29 f4       	brne	.+10     	; 0x6cc <DComp_NextAudioInterfaceDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
     6c2:	83 81       	ldd	r24, Z+3	; 0x03
     6c4:	83 70       	andi	r24, 0x03	; 3
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	19 f4       	brne	.+6      	; 0x6d0 <DComp_NextAudioInterfaceDataEndpoint+0x16>
     6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <DComp_NextAudioInterfaceDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     6cc:	84 30       	cpi	r24, 0x04	; 4
     6ce:	21 f0       	breq	.+8      	; 0x6d8 <DComp_NextAudioInterfaceDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
		  return DESCRIPTOR_SEARCH_Found;
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     6d8:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6da:	08 95       	ret

000006dc <ProcessConfigurationDescriptor>:
 *  This routine searches for a Streaming Audio interface descriptor containing a valid Isochronous audio endpoint.
 *
 *  \return An error code from the \ref AudioHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     6dc:	af 92       	push	r10
     6de:	bf 92       	push	r11
     6e0:	cf 92       	push	r12
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	df 93       	push	r29
     6ee:	cf 93       	push	r28
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	c4 50       	subi	r28, 0x04	; 4
     6f6:	d2 40       	sbci	r29, 0x02	; 2
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     702:	ae 01       	movw	r20, r28
     704:	4b 5f       	subi	r20, 0xFB	; 251
     706:	5f 4f       	sbci	r21, 0xFF	; 255
     708:	5a 83       	std	Y+2, r21	; 0x02
     70a:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	e8 2e       	mov	r14, r24
     710:	f1 2c       	mov	r15, r1
     712:	ec 0e       	add	r14, r28
     714:	fd 1e       	adc	r15, r29
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	b7 01       	movw	r22, r14
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	32 e0       	ldi	r19, 0x02	; 2
     71e:	de d3       	rcall	.+1980   	; 0xedc <USB_Host_GetDeviceConfigDescriptor>
     720:	85 30       	cpi	r24, 0x05	; 5
     722:	09 f4       	brne	.+2      	; 0x726 <ProcessConfigurationDescriptor+0x4a>
     724:	53 c0       	rjmp	.+166    	; 0x7cc <ProcessConfigurationDescriptor+0xf0>
     726:	86 30       	cpi	r24, 0x06	; 6
     728:	61 f0       	breq	.+24     	; 0x742 <ProcessConfigurationDescriptor+0x66>
     72a:	88 23       	and	r24, r24
     72c:	61 f4       	brne	.+24     	; 0x746 <ProcessConfigurationDescriptor+0x6a>
     72e:	00 e0       	ldi	r16, 0x00	; 0
     730:	10 e0       	ldi	r17, 0x00	; 0
     732:	cc 24       	eor	r12, r12
     734:	dd 24       	eor	r13, r13
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
				                          DComp_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Find a new Audio Control interface if the current one doesn't contain a compatible streaming interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     736:	57 01       	movw	r10, r14
     738:	7e 01       	movw	r14, r28
     73a:	08 94       	sec
     73c:	e1 1c       	adc	r14, r1
     73e:	f1 1c       	adc	r15, r1
     740:	07 c0       	rjmp	.+14     	; 0x750 <ProcessConfigurationDescriptor+0x74>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     742:	83 e0       	ldi	r24, 0x03	; 3
     744:	46 c0       	rjmp	.+140    	; 0x7d2 <ProcessConfigurationDescriptor+0xf6>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	44 c0       	rjmp	.+136    	; 0x7d2 <ProcessConfigurationDescriptor+0xf6>
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     74a:	9c 01       	movw	r18, r24
     74c:	03 2f       	mov	r16, r19
     74e:	18 2f       	mov	r17, r24
	}

	while (!(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(AudioControlInterface) ||
     750:	c1 14       	cp	r12, r1
     752:	d1 04       	cpc	r13, r1
     754:	49 f0       	breq	.+18     	; 0x768 <ProcessConfigurationDescriptor+0x8c>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     756:	c5 01       	movw	r24, r10
     758:	b7 01       	movw	r22, r14
     75a:	4d e5       	ldi	r20, 0x5D	; 93
     75c:	53 e0       	ldi	r21, 0x03	; 3
     75e:	15 d4       	rcall	.+2090   	; 0xf8a <USB_GetNextDescriptorComp>
	}

	while (!(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(AudioControlInterface) ||
     760:	88 23       	and	r24, r24
     762:	09 f0       	breq	.+2      	; 0x766 <ProcessConfigurationDescriptor+0x8a>
     764:	48 c0       	rjmp	.+144    	; 0x7f6 <ProcessConfigurationDescriptor+0x11a>
     766:	14 c0       	rjmp	.+40     	; 0x790 <ProcessConfigurationDescriptor+0xb4>
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
				                          DComp_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Find a new Audio Control interface if the current one doesn't contain a compatible streaming interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     768:	c5 01       	movw	r24, r10
     76a:	b7 01       	movw	r22, r14
     76c:	4b e3       	ldi	r20, 0x3B	; 59
     76e:	53 e0       	ldi	r21, 0x03	; 3
     770:	0c d4       	rcall	.+2072   	; 0xf8a <USB_GetNextDescriptorComp>
     772:	88 23       	and	r24, r24
     774:	69 f5       	brne	.+90     	; 0x7d0 <ProcessConfigurationDescriptor+0xf4>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				AudioControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     776:	c9 80       	ldd	r12, Y+1	; 0x01
     778:	0a 81       	ldd	r16, Y+2	; 0x02

				/* Find the next Audio Streaming interface within that Audio Control interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     77a:	c5 01       	movw	r24, r10
     77c:	b7 01       	movw	r22, r14
     77e:	4c e4       	ldi	r20, 0x4C	; 76
     780:	53 e0       	ldi	r21, 0x03	; 3
     782:	03 d4       	rcall	.+2054   	; 0xf8a <USB_GetNextDescriptorComp>
     784:	88 23       	and	r24, r24
     786:	21 f5       	brne	.+72     	; 0x7d0 <ProcessConfigurationDescriptor+0xf4>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				AudioControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     788:	d0 2e       	mov	r13, r16
					return NoCompatibleInterfaceFound;
				}
			}

			/* Save the interface in case we need to refer back to it later */
			AudioStreamingInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     78a:	09 81       	ldd	r16, Y+1	; 0x01
     78c:	1a 81       	ldd	r17, Y+2	; 0x02

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     78e:	3c c0       	rjmp	.+120    	; 0x808 <ProcessConfigurationDescriptor+0x12c>
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     790:	e9 81       	ldd	r30, Y+1	; 0x01
     792:	fa 81       	ldd	r31, Y+2	; 0x02

		/* Save the endpoint if it is an OUT type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_OUT)
     794:	82 81       	ldd	r24, Z+2	; 0x02
     796:	87 fd       	sbrc	r24, 7
     798:	37 c0       	rjmp	.+110    	; 0x808 <ProcessConfigurationDescriptor+0x12c>
     79a:	90 2f       	mov	r25, r16
     79c:	81 2f       	mov	r24, r17
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataOUTEndpoint))
     79e:	30 97       	sbiw	r30, 0x00	; 0
     7a0:	a1 f2       	breq	.-88     	; 0x74a <ProcessConfigurationDescriptor+0x6e>
		/* Save the endpoint if it is an OUT type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_OUT)
		  DataOUTEndpoint = EndpointData;
	}

	StreamingInterfaceIndex      = AudioStreamingInterface->InterfaceNumber;
     7a2:	d8 01       	movw	r26, r16
     7a4:	12 96       	adiw	r26, 0x02	; 2
     7a6:	8c 91       	ld	r24, X
     7a8:	12 97       	sbiw	r26, 0x02	; 2
     7aa:	80 93 17 01 	sts	0x0117, r24
	StreamingInterfaceAltSetting = AudioStreamingInterface->AlternateSetting;
     7ae:	13 96       	adiw	r26, 0x03	; 3
     7b0:	8c 91       	ld	r24, X
     7b2:	80 93 18 01 	sts	0x0118, r24
	StreamingEndpointAddress     = DataOUTEndpoint->EndpointAddress;
     7b6:	42 81       	ldd	r20, Z+2	; 0x02
     7b8:	40 93 19 01 	sts	0x0119, r20

	/* Configure the Audio data OUT pipe */
	Pipe_ConfigurePipe(AUDIO_DATA_OUT_PIPE, EP_TYPE_ISOCHRONOUS, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 2);
     7bc:	24 81       	ldd	r18, Z+4	; 0x04
     7be:	35 81       	ldd	r19, Z+5	; 0x05
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	02 e0       	ldi	r16, 0x02	; 2
     7c6:	f7 d1       	rcall	.+1006   	; 0xbb6 <Pipe_ConfigurePipe>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <ProcessConfigurationDescriptor+0xf6>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <ProcessConfigurationDescriptor+0xf6>
				/* Find the next Audio Streaming interface within that Audio Control interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
				                              DComp_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
     7d0:	84 e0       	ldi	r24, 0x04	; 4
	/* Configure the Audio data OUT pipe */
	Pipe_ConfigurePipe(AUDIO_DATA_OUT_PIPE, EP_TYPE_ISOCHRONOUS, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 2);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     7d2:	cc 5f       	subi	r28, 0xFC	; 252
     7d4:	dd 4f       	sbci	r29, 0xFD	; 253
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	cf 91       	pop	r28
     7e2:	df 91       	pop	r29
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	ff 90       	pop	r15
     7ea:	ef 90       	pop	r14
     7ec:	df 90       	pop	r13
     7ee:	cf 90       	pop	r12
     7f0:	bf 90       	pop	r11
     7f2:	af 90       	pop	r10
     7f4:	08 95       	ret
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we haven't found an Audio Control interface yet, or if we have run out of related Audio Streaming interfaces */
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7f6:	c5 01       	movw	r24, r10
     7f8:	b7 01       	movw	r22, r14
     7fa:	4c e4       	ldi	r20, 0x4C	; 76
     7fc:	53 e0       	ldi	r21, 0x03	; 3
     7fe:	c5 d3       	rcall	.+1930   	; 0xf8a <USB_GetNextDescriptorComp>
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we haven't found an Audio Control interface yet, or if we have run out of related Audio Streaming interfaces */
			if (!(AudioControlInterface) ||
     800:	88 23       	and	r24, r24
     802:	09 f0       	breq	.+2      	; 0x806 <ProcessConfigurationDescriptor+0x12a>
     804:	b1 cf       	rjmp	.-158    	; 0x768 <ProcessConfigurationDescriptor+0x8c>
     806:	c1 cf       	rjmp	.-126    	; 0x78a <ProcessConfigurationDescriptor+0xae>
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     808:	90 2f       	mov	r25, r16
     80a:	81 2f       	mov	r24, r17
     80c:	9e cf       	rjmp	.-196    	; 0x74a <ProcessConfigurationDescriptor+0x6e>

0000080e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     80e:	80 91 9e 00 	lds	r24, 0x009E
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	81 70       	andi	r24, 0x01	; 1
     816:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     818:	20 91 a0 00 	lds	r18, 0x00A0
     81c:	2d 7f       	andi	r18, 0xFD	; 253
     81e:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     822:	20 91 9e 00 	lds	r18, 0x009E
     826:	22 60       	ori	r18, 0x02	; 2
     828:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     82c:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     830:	21 fd       	sbrc	r18, 1
     832:	fc cf       	rjmp	.-8      	; 0x82c <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     834:	20 91 9e 00 	lds	r18, 0x009E
     838:	21 60       	ori	r18, 0x01	; 1
     83a:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     83e:	10 92 1d 01 	sts	0x011D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     842:	20 91 a0 00 	lds	r18, 0x00A0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	20 72       	andi	r18, 0x20	; 32
     84a:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     84c:	40 91 a0 00 	lds	r20, 0x00A0
     850:	4f 7d       	andi	r20, 0xDF	; 223
     852:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     856:	40 91 9f 00 	lds	r20, 0x009F
     85a:	4f 7d       	andi	r20, 0xDF	; 223
     85c:	40 93 9f 00 	sts	0x009F, r20
     860:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     862:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     866:	55 ff       	sbrs	r21, 5
     868:	0b c0       	rjmp	.+22     	; 0x880 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     86a:	40 91 9f 00 	lds	r20, 0x009F
     86e:	4f 7d       	andi	r20, 0xDF	; 223
     870:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     874:	40 91 9f 00 	lds	r20, 0x009F
     878:	4d 7f       	andi	r20, 0xFD	; 253
     87a:	40 93 9f 00 	sts	0x009F, r20
     87e:	08 c0       	rjmp	.+16     	; 0x890 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     880:	ef ec       	ldi	r30, 0xCF	; 207
     882:	f7 e0       	ldi	r31, 0x07	; 7
     884:	31 97       	sbiw	r30, 0x01	; 1
     886:	f1 f7       	brne	.-4      	; 0x884 <USB_Host_ResetDevice+0x76>
     888:	00 c0       	rjmp	.+0      	; 0x88a <USB_Host_ResetDevice+0x7c>
     88a:	00 00       	nop
     88c:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     88e:	49 f7       	brne	.-46     	; 0x862 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     890:	21 15       	cp	r18, r1
     892:	31 05       	cpc	r19, r1
     894:	29 f0       	breq	.+10     	; 0x8a0 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     896:	20 91 a0 00 	lds	r18, 0x00A0
     89a:	20 62       	ori	r18, 0x20	; 32
     89c:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     8a0:	00 97       	sbiw	r24, 0x00	; 0
     8a2:	29 f4       	brne	.+10     	; 0x8ae <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     8a4:	80 91 9e 00 	lds	r24, 0x009E
     8a8:	8e 7f       	andi	r24, 0xFE	; 254
     8aa:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     8ae:	80 91 a0 00 	lds	r24, 0x00A0
     8b2:	82 60       	ori	r24, 0x02	; 2
     8b4:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     8b8:	08 95       	ret

000008ba <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     8ba:	40 91 9e 00 	lds	r20, 0x009E
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	41 70       	andi	r20, 0x01	; 1
     8c2:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     8c4:	20 91 a0 00 	lds	r18, 0x00A0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	20 72       	andi	r18, 0x20	; 32
     8cc:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     8ce:	90 91 a0 00 	lds	r25, 0x00A0
     8d2:	9f 7d       	andi	r25, 0xDF	; 223
     8d4:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8d8:	90 91 9f 00 	lds	r25, 0x009F
     8dc:	9f 7d       	andi	r25, 0xDF	; 223
     8de:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8e2:	90 91 9e 00 	lds	r25, 0x009E
     8e6:	91 60       	ori	r25, 0x01	; 1
     8e8:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     8ec:	26 c0       	rjmp	.+76     	; 0x93a <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     8ee:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     8f2:	95 ff       	sbrs	r25, 5
     8f4:	06 c0       	rjmp	.+12     	; 0x902 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8f6:	90 91 9f 00 	lds	r25, 0x009F
     8fa:	9f 7d       	andi	r25, 0xDF	; 223
     8fc:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     900:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     902:	90 91 27 01 	lds	r25, 0x0127
     906:	91 30       	cpi	r25, 0x01	; 1
     908:	d9 f0       	breq	.+54     	; 0x940 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     90a:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     90e:	94 ff       	sbrs	r25, 4
     910:	09 c0       	rjmp	.+18     	; 0x924 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     912:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     916:	80 91 a6 00 	lds	r24, 0x00A6
     91a:	8f 7e       	andi	r24, 0xEF	; 239
     91c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     920:	82 e0       	ldi	r24, 0x02	; 2

			break;
     922:	0f c0       	rjmp	.+30     	; 0x942 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     924:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     928:	91 ff       	sbrs	r25, 1
     92a:	07 c0       	rjmp	.+14     	; 0x93a <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     92c:	80 91 a6 00 	lds	r24, 0x00A6
     930:	8d 7f       	andi	r24, 0xFD	; 253
     932:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     936:	83 e0       	ldi	r24, 0x03	; 3

			break;
     938:	04 c0       	rjmp	.+8      	; 0x942 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     93a:	88 23       	and	r24, r24
     93c:	c1 f6       	brne	.-80     	; 0x8ee <USB_Host_WaitMS+0x34>
     93e:	01 c0       	rjmp	.+2      	; 0x942 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     940:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     942:	41 15       	cp	r20, r1
     944:	51 05       	cpc	r21, r1
     946:	29 f4       	brne	.+10     	; 0x952 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     948:	90 91 9e 00 	lds	r25, 0x009E
     94c:	9e 7f       	andi	r25, 0xFE	; 254
     94e:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     952:	21 15       	cp	r18, r1
     954:	31 05       	cpc	r19, r1
     956:	29 f0       	breq	.+10     	; 0x962 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     958:	90 91 a0 00 	lds	r25, 0x00A0
     95c:	90 62       	ori	r25, 0x20	; 32
     95e:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     962:	08 95       	ret

00000964 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	df 93       	push	r29
     96a:	cf 93       	push	r28
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	28 97       	sbiw	r28, 0x08	; 8
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     97c:	80 91 27 01 	lds	r24, 0x0127
     980:	85 30       	cpi	r24, 0x05	; 5
     982:	09 f4       	brne	.+2      	; 0x986 <USB_Host_ProcessNextHostState+0x22>
     984:	99 c0       	rjmp	.+306    	; 0xab8 <USB_Host_ProcessNextHostState+0x154>
     986:	86 30       	cpi	r24, 0x06	; 6
     988:	68 f4       	brcc	.+26     	; 0x9a4 <USB_Host_ProcessNextHostState+0x40>
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	c1 f1       	breq	.+112    	; 0x9fe <USB_Host_ProcessNextHostState+0x9a>
     98e:	83 30       	cpi	r24, 0x03	; 3
     990:	18 f4       	brcc	.+6      	; 0x998 <USB_Host_ProcessNextHostState+0x34>
     992:	88 23       	and	r24, r24
     994:	a1 f0       	breq	.+40     	; 0x9be <USB_Host_ProcessNextHostState+0x5a>
     996:	04 c1       	rjmp	.+520    	; 0xba0 <USB_Host_ProcessNextHostState+0x23c>
     998:	83 30       	cpi	r24, 0x03	; 3
     99a:	d9 f1       	breq	.+118    	; 0xa12 <USB_Host_ProcessNextHostState+0xae>
     99c:	84 30       	cpi	r24, 0x04	; 4
     99e:	09 f0       	breq	.+2      	; 0x9a2 <USB_Host_ProcessNextHostState+0x3e>
     9a0:	ff c0       	rjmp	.+510    	; 0xba0 <USB_Host_ProcessNextHostState+0x23c>
     9a2:	62 c0       	rjmp	.+196    	; 0xa68 <USB_Host_ProcessNextHostState+0x104>
     9a4:	87 30       	cpi	r24, 0x07	; 7
     9a6:	09 f4       	brne	.+2      	; 0x9aa <USB_Host_ProcessNextHostState+0x46>
     9a8:	9e c0       	rjmp	.+316    	; 0xae6 <USB_Host_ProcessNextHostState+0x182>
     9aa:	87 30       	cpi	r24, 0x07	; 7
     9ac:	08 f4       	brcc	.+2      	; 0x9b0 <USB_Host_ProcessNextHostState+0x4c>
     9ae:	8f c0       	rjmp	.+286    	; 0xace <USB_Host_ProcessNextHostState+0x16a>
     9b0:	88 30       	cpi	r24, 0x08	; 8
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <USB_Host_ProcessNextHostState+0x52>
     9b4:	b8 c0       	rjmp	.+368    	; 0xb26 <USB_Host_ProcessNextHostState+0x1c2>
     9b6:	89 30       	cpi	r24, 0x09	; 9
     9b8:	09 f0       	breq	.+2      	; 0x9bc <USB_Host_ProcessNextHostState+0x58>
     9ba:	f2 c0       	rjmp	.+484    	; 0xba0 <USB_Host_ProcessNextHostState+0x23c>
     9bc:	d9 c0       	rjmp	.+434    	; 0xb70 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     9be:	00 91 1b 01 	lds	r16, 0x011B
     9c2:	10 91 1c 01 	lds	r17, 0x011C
     9c6:	01 15       	cp	r16, r1
     9c8:	11 05       	cpc	r17, r1
     9ca:	09 f4       	brne	.+2      	; 0x9ce <USB_Host_ProcessNextHostState+0x6a>
     9cc:	e9 c0       	rjmp	.+466    	; 0xba0 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	74 df       	rcall	.-280    	; 0x8ba <USB_Host_WaitMS>
     9d2:	68 2f       	mov	r22, r24
     9d4:	88 23       	and	r24, r24
     9d6:	31 f0       	breq	.+12     	; 0x9e4 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     9d8:	80 91 1a 01 	lds	r24, 0x011A
     9dc:	80 93 27 01 	sts	0x0127, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
					break;
     9e2:	d2 c0       	rjmp	.+420    	; 0xb88 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     9e4:	01 50       	subi	r16, 0x01	; 1
     9e6:	10 40       	sbci	r17, 0x00	; 0
     9e8:	10 93 1c 01 	sts	0x011C, r17
     9ec:	00 93 1b 01 	sts	0x011B, r16
     9f0:	01 15       	cp	r16, r1
     9f2:	11 05       	cpc	r17, r1
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <USB_Host_ProcessNextHostState+0x94>
     9f6:	d4 c0       	rjmp	.+424    	; 0xba0 <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     9f8:	80 91 1a 01 	lds	r24, 0x011A
     9fc:	07 c0       	rjmp	.+14     	; 0xa0c <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     9fe:	88 ee       	ldi	r24, 0xE8	; 232
     a00:	93 e0       	ldi	r25, 0x03	; 3
     a02:	90 93 1c 01 	sts	0x011C, r25
     a06:	80 93 1b 01 	sts	0x011B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	80 93 27 01 	sts	0x0127, r24
			break;
     a10:	c7 c0       	rjmp	.+398    	; 0xba0 <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     a12:	80 91 1b 01 	lds	r24, 0x011B
     a16:	90 91 1c 01 	lds	r25, 0x011C
     a1a:	9c 01       	movw	r18, r24
     a1c:	21 50       	subi	r18, 0x01	; 1
     a1e:	30 40       	sbci	r19, 0x00	; 0
     a20:	30 93 1c 01 	sts	0x011C, r19
     a24:	20 93 1b 01 	sts	0x011B, r18
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	39 f0       	breq	.+14     	; 0xa3a <USB_Host_ProcessNextHostState+0xd6>
     a2c:	8f ec       	ldi	r24, 0xCF	; 207
     a2e:	97 e0       	ldi	r25, 0x07	; 7
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	f1 f7       	brne	.-4      	; 0xa30 <USB_Host_ProcessNextHostState+0xcc>
     a34:	00 c0       	rjmp	.+0      	; 0xa36 <USB_Host_ProcessNextHostState+0xd2>
     a36:	00 00       	nop
     a38:	b3 c0       	rjmp	.+358    	; 0xba0 <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     a3a:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     a3c:	80 91 d8 00 	lds	r24, 0x00D8
     a40:	80 61       	ori	r24, 0x10	; 16
     a42:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     a46:	80 91 dd 00 	lds	r24, 0x00DD
     a4a:	8b 7f       	andi	r24, 0xFB	; 251
     a4c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     a50:	80 91 d7 00 	lds	r24, 0x00D7
     a54:	80 61       	ori	r24, 0x10	; 16
     a56:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     a5a:	80 91 dd 00 	lds	r24, 0x00DD
     a5e:	82 60       	ori	r24, 0x02	; 2
     a60:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     a64:	84 e0       	ldi	r24, 0x04	; 4
     a66:	d2 cf       	rjmp	.-92     	; 0xa0c <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     a68:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     a6c:	80 ff       	sbrs	r24, 0
     a6e:	98 c0       	rjmp	.+304    	; 0xba0 <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     a70:	80 91 9f 00 	lds	r24, 0x009F
     a74:	8e 7f       	andi	r24, 0xFE	; 254
     a76:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a7a:	80 91 9f 00 	lds	r24, 0x009F
     a7e:	8d 7f       	andi	r24, 0xFD	; 253
     a80:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     a84:	80 91 df 00 	lds	r24, 0x00DF
     a88:	8d 7f       	andi	r24, 0xFD	; 253
     a8a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     a8e:	80 91 de 00 	lds	r24, 0x00DE
     a92:	82 60       	ori	r24, 0x02	; 2
     a94:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a98:	80 91 9e 00 	lds	r24, 0x009E
     a9c:	81 60       	ori	r24, 0x01	; 1
     a9e:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     aa2:	f0 d0       	rcall	.+480    	; 0xc84 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     aa4:	10 92 27 01 	sts	0x0127, r1
     aa8:	84 e6       	ldi	r24, 0x64	; 100
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	90 93 1c 01 	sts	0x011C, r25
     ab0:	80 93 1b 01 	sts	0x011B, r24
     ab4:	85 e0       	ldi	r24, 0x05	; 5
     ab6:	59 c0       	rjmp	.+178    	; 0xb6a <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     ab8:	aa de       	rcall	.-684    	; 0x80e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     aba:	10 92 27 01 	sts	0x0127, r1
     abe:	88 ec       	ldi	r24, 0xC8	; 200
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	90 93 1c 01 	sts	0x011C, r25
     ac6:	80 93 1b 01 	sts	0x011B, r24
     aca:	86 e0       	ldi	r24, 0x06	; 6
     acc:	4e c0       	rjmp	.+156    	; 0xb6a <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	20 e4       	ldi	r18, 0x40	; 64
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	01 e0       	ldi	r16, 0x01	; 1
     ada:	6d d0       	rcall	.+218    	; 0xbb6 <Pipe_ConfigurePipe>
     adc:	88 23       	and	r24, r24
     ade:	09 f4       	brne	.+2      	; 0xae2 <USB_Host_ProcessNextHostState+0x17e>
     ae0:	4f c0       	rjmp	.+158    	; 0xb80 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     ae2:	87 e0       	ldi	r24, 0x07	; 7
     ae4:	93 cf       	rjmp	.-218    	; 0xa0c <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     ae6:	af e1       	ldi	r26, 0x1F	; 31
     ae8:	b1 e0       	ldi	r27, 0x01	; 1
     aea:	eb e0       	ldi	r30, 0x0B	; 11
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	88 e0       	ldi	r24, 0x08	; 8
     af0:	01 90       	ld	r0, Z+
     af2:	0d 92       	st	X+, r0
     af4:	81 50       	subi	r24, 0x01	; 1
     af6:	e1 f7       	brne	.-8      	; 0xaf0 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     af8:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     afc:	ce 01       	movw	r24, r28
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	b1 d2       	rcall	.+1378   	; 0x1064 <USB_Host_SendControlRequest>
     b02:	68 2f       	mov	r22, r24
     b04:	88 23       	and	r24, r24
     b06:	09 f0       	breq	.+2      	; 0xb0a <USB_Host_ProcessNextHostState+0x1a6>
     b08:	3e c0       	rjmp	.+124    	; 0xb86 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     b0a:	88 85       	ldd	r24, Y+8	; 0x08
     b0c:	80 93 13 01 	sts	0x0113, r24

			USB_Host_ResetDevice();
     b10:	7e de       	rcall	.-772    	; 0x80e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     b12:	10 92 27 01 	sts	0x0127, r1
     b16:	88 ec       	ldi	r24, 0xC8	; 200
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	90 93 1c 01 	sts	0x011C, r25
     b1e:	80 93 1b 01 	sts	0x011B, r24
     b22:	88 e0       	ldi	r24, 0x08	; 8
     b24:	22 c0       	rjmp	.+68     	; 0xb6a <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     b26:	20 91 13 01 	lds	r18, 0x0113
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	40 e0       	ldi	r20, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 e0       	ldi	r16, 0x01	; 1
     b34:	40 d0       	rcall	.+128    	; 0xbb6 <Pipe_ConfigurePipe>
     b36:	88 23       	and	r24, r24
     b38:	19 f1       	breq	.+70     	; 0xb80 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     b3a:	af e1       	ldi	r26, 0x1F	; 31
     b3c:	b1 e0       	ldi	r27, 0x01	; 1
     b3e:	e3 e0       	ldi	r30, 0x03	; 3
     b40:	f1 e0       	ldi	r31, 0x01	; 1
     b42:	88 e0       	ldi	r24, 0x08	; 8
     b44:	01 90       	ld	r0, Z+
     b46:	0d 92       	st	X+, r0
     b48:	81 50       	subi	r24, 0x01	; 1
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	89 d2       	rcall	.+1298   	; 0x1064 <USB_Host_SendControlRequest>
     b52:	68 2f       	mov	r22, r24
     b54:	88 23       	and	r24, r24
     b56:	b9 f4       	brne	.+46     	; 0xb86 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     b58:	10 92 27 01 	sts	0x0127, r1
     b5c:	84 e6       	ldi	r24, 0x64	; 100
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	90 93 1c 01 	sts	0x011C, r25
     b64:	80 93 1b 01 	sts	0x011B, r24
     b68:	89 e0       	ldi	r24, 0x09	; 9
     b6a:	80 93 1a 01 	sts	0x011A, r24
			break;
     b6e:	18 c0       	rjmp	.+48     	; 0xba0 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     b76:	8a e0       	ldi	r24, 0x0A	; 10
     b78:	80 93 27 01 	sts	0x0127, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     b7c:	35 dc       	rcall	.-1942   	; 0x3e8 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     b7e:	10 c0       	rjmp	.+32     	; 0xba0 <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     b80:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     b82:	84 e0       	ldi	r24, 0x04	; 4
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     b86:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b88:	90 91 27 01 	lds	r25, 0x0127
     b8c:	91 30       	cpi	r25, 0x01	; 1
     b8e:	41 f0       	breq	.+16     	; 0xba0 <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     b90:	ec dc       	rcall	.-1576   	; 0x56a <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b92:	80 91 dd 00 	lds	r24, 0x00DD
     b96:	81 60       	ori	r24, 0x01	; 1
     b98:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     b9c:	20 dc       	rcall	.-1984   	; 0x3de <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     b9e:	a0 d0       	rcall	.+320    	; 0xce0 <USB_ResetInterface>
	}
}
     ba0:	28 96       	adiw	r28, 0x08	; 8
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	08 95       	ret

00000bb6 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     bb6:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     bb8:	58 2f       	mov	r21, r24
     bba:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     bbc:	87 ff       	sbrs	r24, 7
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <Pipe_ConfigurePipe+0xe>
     bc0:	80 e1       	ldi	r24, 0x10	; 16
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <Pipe_ConfigurePipe+0x10>
     bc4:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     bc6:	57 30       	cpi	r21, 0x07	; 7
     bc8:	08 f0       	brcs	.+2      	; 0xbcc <Pipe_ConfigurePipe+0x16>
     bca:	59 c0       	rjmp	.+178    	; 0xc7e <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     bcc:	66 23       	and	r22, r22
     bce:	09 f4       	brne	.+2      	; 0xbd2 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     bd0:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     bd2:	4f 70       	andi	r20, 0x0F	; 15
     bd4:	62 95       	swap	r22
     bd6:	66 0f       	add	r22, r22
     bd8:	66 0f       	add	r22, r22
     bda:	60 7c       	andi	r22, 0xC0	; 192
     bdc:	64 2b       	or	r22, r20
     bde:	68 2b       	or	r22, r24
     be0:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     be2:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     be4:	84 2f       	mov	r24, r20
     be6:	8f 70       	andi	r24, 0x0F	; 15
     be8:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     bec:	45 17       	cp	r20, r21
     bee:	a1 f4       	brne	.+40     	; 0xc18 <Pipe_ConfigurePipe+0x62>
     bf0:	88 e0       	ldi	r24, 0x08	; 8
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	03 c0       	rjmp	.+6      	; 0xbfe <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     bf8:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     bfe:	82 17       	cp	r24, r18
     c00:	93 07       	cpc	r25, r19
     c02:	10 f4       	brcc	.+4      	; 0xc08 <Pipe_ConfigurePipe+0x52>
     c04:	75 30       	cpi	r23, 0x05	; 5
     c06:	c1 f7       	brne	.-16     	; 0xbf8 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     c08:	87 2f       	mov	r24, r23
     c0a:	82 95       	swap	r24
     c0c:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c0e:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     c10:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     c12:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     c14:	e0 e0       	ldi	r30, 0x00	; 0
     c16:	08 c0       	rjmp	.+16     	; 0xc28 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     c18:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     c1c:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     c20:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     c24:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     c28:	81 ff       	sbrs	r24, 1
     c2a:	20 c0       	rjmp	.+64     	; 0xc6c <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c2c:	90 91 a9 00 	lds	r25, 0x00A9
     c30:	9e 7f       	andi	r25, 0xFE	; 254
     c32:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     c36:	90 91 ab 00 	lds	r25, 0x00AB
     c3a:	9d 7f       	andi	r25, 0xFD	; 253
     c3c:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     c40:	90 91 a9 00 	lds	r25, 0x00A9
     c44:	91 60       	ori	r25, 0x01	; 1
     c46:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     c4a:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     c4e:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     c52:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     c56:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     c5a:	80 91 a9 00 	lds	r24, 0x00A9
     c5e:	80 62       	ori	r24, 0x20	; 32
     c60:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c64:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     c68:	87 ff       	sbrs	r24, 7
     c6a:	09 c0       	rjmp	.+18     	; 0xc7e <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     c6c:	4f 5f       	subi	r20, 0xFF	; 255
     c6e:	47 30       	cpi	r20, 0x07	; 7
     c70:	09 f0       	breq	.+2      	; 0xc74 <Pipe_ConfigurePipe+0xbe>
     c72:	b8 cf       	rjmp	.-144    	; 0xbe4 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c74:	5f 70       	andi	r21, 0x0F	; 15
     c76:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     c7e:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     c80:	0f 91       	pop	r16
     c82:	08 95       	ret

00000c84 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     c84:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	98 2f       	mov	r25, r24
     c8c:	9f 70       	andi	r25, 0x0F	; 15
     c8e:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     c92:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     c96:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     c9a:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c9e:	90 91 a9 00 	lds	r25, 0x00A9
     ca2:	9e 7f       	andi	r25, 0xFE	; 254
     ca4:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ca8:	8f 5f       	subi	r24, 0xFF	; 255
     caa:	87 30       	cpi	r24, 0x07	; 7
     cac:	71 f7       	brne	.-36     	; 0xc8a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     cae:	08 95       	ret

00000cb0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     cb0:	75 d0       	rcall	.+234    	; 0xd9c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cb2:	7c d0       	rcall	.+248    	; 0xdac <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cb4:	e0 ee       	ldi	r30, 0xE0	; 224
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	81 60       	ori	r24, 0x01	; 1
     cbc:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     cbe:	e8 ed       	ldi	r30, 0xD8	; 216
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	8f 77       	andi	r24, 0x7F	; 127
     cc6:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cc8:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     cca:	a7 ed       	ldi	r26, 0xD7	; 215
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	8c 91       	ld	r24, X
     cd0:	8e 7f       	andi	r24, 0xFE	; 254
     cd2:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     cd4:	80 81       	ld	r24, Z
     cd6:	8f 7e       	andi	r24, 0xEF	; 239
     cd8:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     cda:	10 92 1e 01 	sts	0x011E, r1
}
     cde:	08 95       	ret

00000ce0 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     ce0:	5d d0       	rcall	.+186    	; 0xd9c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ce2:	64 d0       	rcall	.+200    	; 0xdac <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     ce4:	80 91 d8 00 	lds	r24, 0x00D8
     ce8:	8f 77       	andi	r24, 0x7F	; 127
     cea:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     cee:	80 91 d8 00 	lds	r24, 0x00D8
     cf2:	80 68       	ori	r24, 0x80	; 128
     cf4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     cf8:	80 91 d8 00 	lds	r24, 0x00D8
     cfc:	8f 7d       	andi	r24, 0xDF	; 223
     cfe:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     d02:	80 91 d7 00 	lds	r24, 0x00D7
     d06:	8f 77       	andi	r24, 0x7F	; 127
     d08:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d0c:	8c e0       	ldi	r24, 0x0C	; 12
     d0e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d10:	8e e0       	ldi	r24, 0x0E	; 14
     d12:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d14:	09 b4       	in	r0, 0x29	; 41
     d16:	00 fe       	sbrs	r0, 0
     d18:	fd cf       	rjmp	.-6      	; 0xd14 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	80 93 27 01 	sts	0x0127, r24
	USB_Host_ConfigurationNumber = 0;
     d20:	10 92 1d 01 	sts	0x011D, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     d24:	80 e4       	ldi	r24, 0x40	; 64
     d26:	80 93 13 01 	sts	0x0113, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     d2a:	80 91 d8 00 	lds	r24, 0x00D8
     d2e:	80 64       	ori	r24, 0x40	; 64
     d30:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d34:	80 91 dd 00 	lds	r24, 0x00DD
     d38:	81 60       	ori	r24, 0x01	; 1
     d3a:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     d3e:	80 91 dd 00 	lds	r24, 0x00DD
     d42:	84 60       	ori	r24, 0x04	; 4
     d44:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     d48:	80 91 d7 00 	lds	r24, 0x00D7
     d4c:	8f 7e       	andi	r24, 0xEF	; 239
     d4e:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     d52:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     d54:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     d56:	80 91 de 00 	lds	r24, 0x00DE
     d5a:	81 60       	ori	r24, 0x01	; 1
     d5c:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     d60:	80 91 de 00 	lds	r24, 0x00DE
     d64:	84 60       	ori	r24, 0x04	; 4
     d66:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     d6a:	80 91 e0 00 	lds	r24, 0x00E0
     d6e:	8e 7f       	andi	r24, 0xFE	; 254
     d70:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     d74:	80 91 d8 00 	lds	r24, 0x00D8
     d78:	80 61       	ori	r24, 0x10	; 16
     d7a:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     d7e:	08 95       	ret

00000d80 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d80:	e8 ed       	ldi	r30, 0xD8	; 216
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8f 7e       	andi	r24, 0xEF	; 239
     d88:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     d8a:	e7 ed       	ldi	r30, 0xD7	; 215
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	81 60       	ori	r24, 0x01	; 1
     d92:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	80 93 1e 01 	sts	0x011E, r24

	USB_ResetInterface();
}
     d9a:	a2 cf       	rjmp	.-188    	; 0xce0 <USB_ResetInterface>

00000d9c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d9c:	e8 ed       	ldi	r30, 0xD8	; 216
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8c 7f       	andi	r24, 0xFC	; 252
     da4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     da6:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     daa:	08 95       	ret

00000dac <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     dac:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     db0:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     db4:	08 95       	ret

00000db6 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	0f 92       	push	r0
     dbe:	0b b6       	in	r0, 0x3b	; 59
     dc0:	0f 92       	push	r0
     dc2:	11 24       	eor	r1, r1
     dc4:	2f 93       	push	r18
     dc6:	3f 93       	push	r19
     dc8:	4f 93       	push	r20
     dca:	5f 93       	push	r21
     dcc:	6f 93       	push	r22
     dce:	7f 93       	push	r23
     dd0:	8f 93       	push	r24
     dd2:	9f 93       	push	r25
     dd4:	af 93       	push	r26
     dd6:	bf 93       	push	r27
     dd8:	ef 93       	push	r30
     dda:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ddc:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     de0:	85 ff       	sbrs	r24, 5
     de2:	0a c0       	rjmp	.+20     	; 0xdf8 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     de4:	80 91 a0 00 	lds	r24, 0x00A0
     de8:	85 ff       	sbrs	r24, 5
     dea:	06 c0       	rjmp	.+12     	; 0xdf8 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     dec:	80 91 9f 00 	lds	r24, 0x009F
     df0:	8f 7d       	andi	r24, 0xDF	; 223
     df2:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     df6:	0c d1       	rcall	.+536    	; 0x1010 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     df8:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     dfc:	81 ff       	sbrs	r24, 1
     dfe:	15 c0       	rjmp	.+42     	; 0xe2a <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     e00:	80 91 a0 00 	lds	r24, 0x00A0
     e04:	81 ff       	sbrs	r24, 1
     e06:	11 c0       	rjmp	.+34     	; 0xe2a <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     e08:	80 91 9f 00 	lds	r24, 0x009F
     e0c:	8d 7f       	andi	r24, 0xFD	; 253
     e0e:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     e12:	80 91 9f 00 	lds	r24, 0x009F
     e16:	8e 7f       	andi	r24, 0xFE	; 254
     e18:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e1c:	80 91 a0 00 	lds	r24, 0x00A0
     e20:	8d 7f       	andi	r24, 0xFD	; 253
     e22:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     e26:	db da       	rcall	.-2634   	; 0x3de <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     e28:	5b df       	rcall	.-330    	; 0xce0 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     e2a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     e2e:	81 ff       	sbrs	r24, 1
     e30:	15 c0       	rjmp	.+42     	; 0xe5c <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     e32:	80 91 de 00 	lds	r24, 0x00DE
     e36:	81 ff       	sbrs	r24, 1
     e38:	11 c0       	rjmp	.+34     	; 0xe5c <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     e3a:	80 91 df 00 	lds	r24, 0x00DF
     e3e:	8d 7f       	andi	r24, 0xFD	; 253
     e40:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     e44:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e46:	80 91 dd 00 	lds	r24, 0x00DD
     e4a:	81 60       	ori	r24, 0x01	; 1
     e4c:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	6c db       	rcall	.-2344   	; 0x52c <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     e54:	c4 da       	rcall	.-2680   	; 0x3de <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	80 93 27 01 	sts	0x0127, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     e5c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     e60:	80 ff       	sbrs	r24, 0
     e62:	17 c0       	rjmp	.+46     	; 0xe92 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     e64:	80 91 de 00 	lds	r24, 0x00DE
     e68:	80 ff       	sbrs	r24, 0
     e6a:	13 c0       	rjmp	.+38     	; 0xe92 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     e6c:	80 91 df 00 	lds	r24, 0x00DF
     e70:	8e 7f       	andi	r24, 0xFE	; 254
     e72:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     e76:	80 91 de 00 	lds	r24, 0x00DE
     e7a:	8e 7f       	andi	r24, 0xFE	; 254
     e7c:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     e80:	a9 da       	rcall	.-2734   	; 0x3d4 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e82:	80 91 a0 00 	lds	r24, 0x00A0
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	80 93 27 01 	sts	0x0127, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     e92:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     e96:	82 ff       	sbrs	r24, 2
     e98:	0e c0       	rjmp	.+28     	; 0xeb6 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     e9a:	80 91 de 00 	lds	r24, 0x00DE
     e9e:	82 ff       	sbrs	r24, 2
     ea0:	0a c0       	rjmp	.+20     	; 0xeb6 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     ea2:	80 91 df 00 	lds	r24, 0x00DF
     ea6:	8b 7f       	andi	r24, 0xFB	; 251
     ea8:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	5c db       	rcall	.-2376   	; 0x56a <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     eb2:	95 da       	rcall	.-2774   	; 0x3de <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     eb4:	15 df       	rcall	.-470    	; 0xce0 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     eb6:	ff 91       	pop	r31
     eb8:	ef 91       	pop	r30
     eba:	bf 91       	pop	r27
     ebc:	af 91       	pop	r26
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	7f 91       	pop	r23
     ec4:	6f 91       	pop	r22
     ec6:	5f 91       	pop	r21
     ec8:	4f 91       	pop	r20
     eca:	3f 91       	pop	r19
     ecc:	2f 91       	pop	r18
     ece:	0f 90       	pop	r0
     ed0:	0b be       	out	0x3b, r0	; 59
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	0f 90       	pop	r0
     ed8:	1f 90       	pop	r1
     eda:	18 95       	reti

00000edc <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     edc:	cf 92       	push	r12
     ede:	df 92       	push	r13
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	29 97       	sbiw	r28, 0x09	; 9
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	6b 01       	movw	r12, r22
     efe:	8a 01       	movw	r16, r20
     f00:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f02:	90 e8       	ldi	r25, 0x80	; 128
     f04:	90 93 1f 01 	sts	0x011F, r25
     f08:	96 e0       	ldi	r25, 0x06	; 6
     f0a:	90 93 20 01 	sts	0x0120, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f14:	90 93 22 01 	sts	0x0122, r25
     f18:	80 93 21 01 	sts	0x0121, r24
     f1c:	10 92 24 01 	sts	0x0124, r1
     f20:	10 92 23 01 	sts	0x0123, r1
     f24:	89 e0       	ldi	r24, 0x09	; 9
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	90 93 26 01 	sts	0x0126, r25
     f2c:	80 93 25 01 	sts	0x0125, r24
     f30:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	95 d0       	rcall	.+298    	; 0x1064 <USB_Host_SendControlRequest>
     f3a:	88 23       	and	r24, r24
     f3c:	b9 f4       	brne	.+46     	; 0xf6c <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	9c 81       	ldd	r25, Y+4	; 0x04
     f42:	f6 01       	movw	r30, r12
     f44:	91 83       	std	Z+1, r25	; 0x01
     f46:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     f48:	e8 16       	cp	r14, r24
     f4a:	f9 06       	cpc	r15, r25
     f4c:	70 f0       	brcs	.+28     	; 0xf6a <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f4e:	90 93 26 01 	sts	0x0126, r25
     f52:	80 93 25 01 	sts	0x0125, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f56:	c8 01       	movw	r24, r16
     f58:	85 d0       	rcall	.+266    	; 0x1064 <USB_Host_SendControlRequest>
     f5a:	88 23       	and	r24, r24
     f5c:	39 f4       	brne	.+14     	; 0xf6c <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f5e:	f8 01       	movw	r30, r16
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	92 30       	cpi	r25, 0x02	; 2
     f64:	19 f0       	breq	.+6      	; 0xf6c <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     f66:	86 e0       	ldi	r24, 0x06	; 6
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     f6a:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f6c:	29 96       	adiw	r28, 0x09	; 9
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	df 90       	pop	r13
     f86:	cf 90       	pop	r12
     f88:	08 95       	ret

00000f8a <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     f8a:	af 92       	push	r10
     f8c:	bf 92       	push	r11
     f8e:	cf 92       	push	r12
     f90:	df 92       	push	r13
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	8c 01       	movw	r16, r24
     fa0:	eb 01       	movw	r28, r22
     fa2:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     fa4:	23 c0       	rjmp	.+70     	; 0xfec <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     fa6:	e8 81       	ld	r30, Y
     fa8:	f9 81       	ldd	r31, Y+1	; 0x01
     faa:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     fac:	20 81       	ld	r18, Z
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	c7 01       	movw	r24, r14
     fb2:	2e 15       	cp	r18, r14
     fb4:	3f 05       	cpc	r19, r15
     fb6:	08 f4       	brcc	.+2      	; 0xfba <USB_GetNextDescriptorComp+0x30>
     fb8:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     fba:	e8 0f       	add	r30, r24
     fbc:	f9 1f       	adc	r31, r25
     fbe:	f9 83       	std	Y+1, r31	; 0x01
     fc0:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     fc2:	f8 01       	movw	r30, r16
     fc4:	20 81       	ld	r18, Z
     fc6:	31 81       	ldd	r19, Z+1	; 0x01
     fc8:	28 1b       	sub	r18, r24
     fca:	39 0b       	sbc	r19, r25
     fcc:	31 83       	std	Z+1, r19	; 0x01
     fce:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     fd0:	88 81       	ld	r24, Y
     fd2:	99 81       	ldd	r25, Y+1	; 0x01
     fd4:	f6 01       	movw	r30, r12
     fd6:	09 95       	icall
     fd8:	82 30       	cpi	r24, 0x02	; 2
     fda:	41 f0       	breq	.+16     	; 0xfec <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	69 f4       	brne	.+26     	; 0xffa <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
     fe0:	a8 82       	st	Y, r10
     fe2:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
     fe4:	f8 01       	movw	r30, r16
     fe6:	f1 82       	std	Z+1, r15	; 0x01
     fe8:	e0 82       	st	Z, r14
     fea:	07 c0       	rjmp	.+14     	; 0xffa <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     fec:	f8 01       	movw	r30, r16
     fee:	e0 80       	ld	r14, Z
     ff0:	f1 80       	ldd	r15, Z+1	; 0x01
     ff2:	e1 14       	cp	r14, r1
     ff4:	f1 04       	cpc	r15, r1
     ff6:	b9 f6       	brne	.-82     	; 0xfa6 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     ff8:	82 e0       	ldi	r24, 0x02	; 2
}
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	bf 90       	pop	r11
    100c:	af 90       	pop	r10
    100e:	08 95       	ret

00001010 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1010:	08 95       	ret

00001012 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    101a:	c8 ee       	ldi	r28, 0xE8	; 232
    101c:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    101e:	07 c0       	rjmp	.+14     	; 0x102e <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	4b dc       	rcall	.-1898   	; 0x8ba <USB_Host_WaitMS>
    1024:	88 23       	and	r24, r24
    1026:	d1 f4       	brne	.+52     	; 0x105c <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1028:	20 97       	sbiw	r28, 0x00	; 0
    102a:	b9 f0       	breq	.+46     	; 0x105a <USB_Host_WaitForIOS+0x48>
    102c:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    102e:	11 23       	and	r17, r17
    1030:	29 f4       	brne	.+10     	; 0x103c <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1032:	80 91 a6 00 	lds	r24, 0x00A6
    1036:	83 ff       	sbrs	r24, 3
    1038:	f3 cf       	rjmp	.-26     	; 0x1020 <USB_Host_WaitForIOS+0xe>
    103a:	0d c0       	rjmp	.+26     	; 0x1056 <USB_Host_WaitForIOS+0x44>
    103c:	11 30       	cpi	r17, 0x01	; 1
    103e:	29 f4       	brne	.+10     	; 0x104a <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1040:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1044:	80 ff       	sbrs	r24, 0
    1046:	ec cf       	rjmp	.-40     	; 0x1020 <USB_Host_WaitForIOS+0xe>
    1048:	06 c0       	rjmp	.+12     	; 0x1056 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    104a:	12 30       	cpi	r17, 0x02	; 2
    104c:	49 f7       	brne	.-46     	; 0x1020 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    104e:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1052:	82 ff       	sbrs	r24, 2
    1054:	e5 cf       	rjmp	.-54     	; 0x1020 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	01 c0       	rjmp	.+2      	; 0x105c <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    105a:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	08 95       	ret

00001064 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1064:	ef 92       	push	r14
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1072:	e0 90 9e 00 	lds	r14, 0x009E
    1076:	ff 24       	eor	r15, r15
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	e8 22       	and	r14, r24
    107c:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    107e:	c0 91 25 01 	lds	r28, 0x0125
    1082:	d0 91 26 01 	lds	r29, 0x0126
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1086:	80 91 9e 00 	lds	r24, 0x009E
    108a:	81 60       	ori	r24, 0x01	; 1
    108c:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	13 dc       	rcall	.-2010   	; 0x8ba <USB_Host_WaitMS>
    1094:	88 23       	and	r24, r24
    1096:	09 f0       	breq	.+2      	; 0x109a <USB_Host_SendControlRequest+0x36>
    1098:	cb c0       	rjmp	.+406    	; 0x1230 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    109a:	80 91 aa 00 	lds	r24, 0x00AA
    109e:	8f 7c       	andi	r24, 0xCF	; 207
    10a0:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    10a4:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    10a8:	80 91 a6 00 	lds	r24, 0x00A6
    10ac:	8f 7e       	andi	r24, 0xEF	; 239
    10ae:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10b2:	80 91 a9 00 	lds	r24, 0x00A9
    10b6:	8f 7b       	andi	r24, 0xBF	; 191
    10b8:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    10bc:	ef e1       	ldi	r30, 0x1F	; 31
    10be:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    10c0:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10c2:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	e7 32       	cpi	r30, 0x27	; 39
    10ca:	f8 07       	cpc	r31, r24
    10cc:	c9 f7       	brne	.-14     	; 0x10c0 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    10ce:	80 91 a6 00 	lds	r24, 0x00A6
    10d2:	87 77       	andi	r24, 0x77	; 119
    10d4:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	9b df       	rcall	.-202    	; 0x1012 <USB_Host_WaitForIOS>
    10dc:	88 23       	and	r24, r24
    10de:	09 f0       	breq	.+2      	; 0x10e2 <USB_Host_SendControlRequest+0x7e>
    10e0:	a7 c0       	rjmp	.+334    	; 0x1230 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10e2:	80 91 a9 00 	lds	r24, 0x00A9
    10e6:	80 64       	ori	r24, 0x40	; 64
    10e8:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	e5 db       	rcall	.-2102   	; 0x8ba <USB_Host_WaitMS>
    10f0:	88 23       	and	r24, r24
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <USB_Host_SendControlRequest+0x92>
    10f4:	9d c0       	rjmp	.+314    	; 0x1230 <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10f6:	80 91 1f 01 	lds	r24, 0x011F
    10fa:	87 ff       	sbrs	r24, 7
    10fc:	4f c0       	rjmp	.+158    	; 0x119c <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10fe:	80 91 aa 00 	lds	r24, 0x00AA
    1102:	8f 7c       	andi	r24, 0xCF	; 207
    1104:	80 61       	ori	r24, 0x10	; 16
    1106:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    110a:	01 15       	cp	r16, r1
    110c:	11 05       	cpc	r17, r1
    110e:	61 f5       	brne	.+88     	; 0x1168 <USB_Host_SendControlRequest+0x104>
    1110:	2d c0       	rjmp	.+90     	; 0x116c <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1112:	80 91 a9 00 	lds	r24, 0x00A9
    1116:	8f 7b       	andi	r24, 0xBF	; 191
    1118:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	79 df       	rcall	.-270    	; 0x1012 <USB_Host_WaitForIOS>
    1120:	88 23       	and	r24, r24
    1122:	09 f0       	breq	.+2      	; 0x1126 <USB_Host_SendControlRequest+0xc2>
    1124:	85 c0       	rjmp	.+266    	; 0x1230 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1126:	80 91 f6 00 	lds	r24, 0x00F6
    112a:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	49 f4       	brne	.+18     	; 0x1144 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1132:	c0 e0       	ldi	r28, 0x00	; 0
    1134:	d0 e0       	ldi	r29, 0x00	; 0
    1136:	06 c0       	rjmp	.+12     	; 0x1144 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1138:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    113c:	f8 01       	movw	r30, r16
    113e:	81 93       	st	Z+, r24
    1140:	8f 01       	movw	r16, r30
					DataLen--;
    1142:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1144:	80 91 f6 00 	lds	r24, 0x00F6
    1148:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	11 f0       	breq	.+4      	; 0x1154 <USB_Host_SendControlRequest+0xf0>
    1150:	20 97       	sbiw	r28, 0x00	; 0
    1152:	91 f7       	brne	.-28     	; 0x1138 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1154:	80 91 a9 00 	lds	r24, 0x00A9
    1158:	80 64       	ori	r24, 0x40	; 64
    115a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    115e:	80 91 a6 00 	lds	r24, 0x00A6
    1162:	8e 77       	andi	r24, 0x7E	; 126
    1164:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1168:	20 97       	sbiw	r28, 0x00	; 0
    116a:	99 f6       	brne	.-90     	; 0x1112 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    116c:	80 91 aa 00 	lds	r24, 0x00AA
    1170:	8f 7c       	andi	r24, 0xCF	; 207
    1172:	80 62       	ori	r24, 0x20	; 32
    1174:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1178:	80 91 a9 00 	lds	r24, 0x00A9
    117c:	8f 7b       	andi	r24, 0xBF	; 191
    117e:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	46 df       	rcall	.-372    	; 0x1012 <USB_Host_WaitForIOS>
    1186:	88 23       	and	r24, r24
    1188:	09 f0       	breq	.+2      	; 0x118c <USB_Host_SendControlRequest+0x128>
    118a:	52 c0       	rjmp	.+164    	; 0x1230 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    118c:	80 91 a6 00 	lds	r24, 0x00A6
    1190:	8b 77       	andi	r24, 0x7B	; 123
    1192:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	3c df       	rcall	.-392    	; 0x1012 <USB_Host_WaitForIOS>
    119a:	4a c0       	rjmp	.+148    	; 0x1230 <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    119c:	01 15       	cp	r16, r1
    119e:	11 05       	cpc	r17, r1
    11a0:	99 f1       	breq	.+102    	; 0x1208 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11a2:	80 91 aa 00 	lds	r24, 0x00AA
    11a6:	8f 7c       	andi	r24, 0xCF	; 207
    11a8:	80 62       	ori	r24, 0x20	; 32
    11aa:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11ae:	80 91 a9 00 	lds	r24, 0x00A9
    11b2:	8f 7b       	andi	r24, 0xBF	; 191
    11b4:	80 93 a9 00 	sts	0x00A9, r24
    11b8:	1c c0       	rjmp	.+56     	; 0x11f2 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	2a df       	rcall	.-428    	; 0x1012 <USB_Host_WaitForIOS>
    11be:	88 23       	and	r24, r24
    11c0:	b9 f5       	brne	.+110    	; 0x1230 <USB_Host_SendControlRequest+0x1cc>
    11c2:	f8 01       	movw	r30, r16
    11c4:	06 c0       	rjmp	.+12     	; 0x11d2 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    11c6:	81 91       	ld	r24, Z+
    11c8:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11ca:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    11ce:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11d0:	59 f0       	breq	.+22     	; 0x11e8 <USB_Host_SendControlRequest+0x184>
    11d2:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11d4:	20 91 f6 00 	lds	r18, 0x00F6
    11d8:	30 91 f7 00 	lds	r19, 0x00F7
    11dc:	80 91 13 01 	lds	r24, 0x0113
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	28 17       	cp	r18, r24
    11e4:	39 07       	cpc	r19, r25
    11e6:	78 f3       	brcs	.-34     	; 0x11c6 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11e8:	80 91 a6 00 	lds	r24, 0x00A6
    11ec:	8b 77       	andi	r24, 0x7B	; 123
    11ee:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11f2:	20 97       	sbiw	r28, 0x00	; 0
    11f4:	11 f7       	brne	.-60     	; 0x11ba <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	0c df       	rcall	.-488    	; 0x1012 <USB_Host_WaitForIOS>
    11fa:	88 23       	and	r24, r24
    11fc:	c9 f4       	brne	.+50     	; 0x1230 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11fe:	80 91 a9 00 	lds	r24, 0x00A9
    1202:	80 64       	ori	r24, 0x40	; 64
    1204:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1208:	80 91 aa 00 	lds	r24, 0x00AA
    120c:	8f 7c       	andi	r24, 0xCF	; 207
    120e:	80 61       	ori	r24, 0x10	; 16
    1210:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1214:	80 91 a9 00 	lds	r24, 0x00A9
    1218:	8f 7b       	andi	r24, 0xBF	; 191
    121a:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	f8 de       	rcall	.-528    	; 0x1012 <USB_Host_WaitForIOS>
    1222:	88 23       	and	r24, r24
    1224:	29 f4       	brne	.+10     	; 0x1230 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1226:	90 91 a6 00 	lds	r25, 0x00A6
    122a:	9e 77       	andi	r25, 0x7E	; 126
    122c:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1230:	90 91 a9 00 	lds	r25, 0x00A9
    1234:	90 64       	ori	r25, 0x40	; 64
    1236:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    123a:	e1 14       	cp	r14, r1
    123c:	f1 04       	cpc	r15, r1
    123e:	29 f4       	brne	.+10     	; 0x124a <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1240:	90 91 9e 00 	lds	r25, 0x009E
    1244:	9e 7f       	andi	r25, 0xFE	; 254
    1246:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1250:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	08 95       	ret

00001262 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1262:	1f 93       	push	r17
    1264:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1266:	10 92 1f 01 	sts	0x011F, r1
    126a:	89 e0       	ldi	r24, 0x09	; 9
    126c:	80 93 20 01 	sts	0x0120, r24
    1270:	10 93 21 01 	sts	0x0121, r17
    1274:	10 92 22 01 	sts	0x0122, r1
    1278:	10 92 24 01 	sts	0x0124, r1
    127c:	10 92 23 01 	sts	0x0123, r1
    1280:	10 92 26 01 	sts	0x0126, r1
    1284:	10 92 25 01 	sts	0x0125, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1288:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	e9 de       	rcall	.-558    	; 0x1064 <USB_Host_SendControlRequest>
    1292:	88 23       	and	r24, r24
    1294:	49 f4       	brne	.+18     	; 0x12a8 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1296:	10 93 1d 01 	sts	0x011D, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    129a:	11 23       	and	r17, r17
    129c:	11 f0       	breq	.+4      	; 0x12a2 <USB_Host_SetDeviceConfiguration+0x40>
    129e:	9b e0       	ldi	r25, 0x0B	; 11
    12a0:	01 c0       	rjmp	.+2      	; 0x12a4 <USB_Host_SetDeviceConfiguration+0x42>
    12a2:	9a e0       	ldi	r25, 0x0A	; 10
    12a4:	90 93 27 01 	sts	0x0127, r25
	}

	return ErrorCode;
}
    12a8:	1f 91       	pop	r17
    12aa:	08 95       	ret

000012ac <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    12ac:	ef e1       	ldi	r30, 0x1F	; 31
    12ae:	f1 e0       	ldi	r31, 0x01	; 1
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	90 93 1f 01 	sts	0x011F, r25
    12b6:	9b e0       	ldi	r25, 0x0B	; 11
    12b8:	90 93 20 01 	sts	0x0120, r25
    12bc:	60 93 21 01 	sts	0x0121, r22
    12c0:	13 82       	std	Z+3, r1	; 0x03
    12c2:	80 93 23 01 	sts	0x0123, r24
    12c6:	15 82       	std	Z+5, r1	; 0x05
    12c8:	10 92 26 01 	sts	0x0126, r1
    12cc:	10 92 25 01 	sts	0x0125, r1
    12d0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
}
    12d8:	c5 ce       	rjmp	.-630    	; 0x1064 <USB_Host_SendControlRequest>

000012da <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12da:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    12dc:	10 91 a7 00 	lds	r17, 0x00A7
    12e0:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    12e2:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12e6:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12ea:	3c db       	rcall	.-2440   	; 0x964 <USB_Host_ProcessNextHostState>
    12ec:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    12f0:	1f 91       	pop	r17
    12f2:	08 95       	ret

000012f4 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    12f4:	90 91 c8 00 	lds	r25, 0x00C8
    12f8:	95 ff       	sbrs	r25, 5
    12fa:	fc cf       	rjmp	.-8      	; 0x12f4 <Serial_putchar>
				UDR1 = DataByte;
    12fc:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	08 95       	ret

00001306 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1306:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    130a:	87 ff       	sbrs	r24, 7
    130c:	08 c0       	rjmp	.+16     	; 0x131e <Serial_getchar+0x18>
    130e:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1312:	87 ff       	sbrs	r24, 7
    1314:	07 c0       	rjmp	.+14     	; 0x1324 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1316:	20 91 ce 00 	lds	r18, 0x00CE
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    131e:	2e ef       	ldi	r18, 0xFE	; 254
    1320:	3f ef       	ldi	r19, 0xFF	; 255
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1324:	2f ef       	ldi	r18, 0xFF	; 255
    1326:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1328:	c9 01       	movw	r24, r18
    132a:	08 95       	ret

0000132c <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    132c:	fc 01       	movw	r30, r24
	if (!(Stream))
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	51 f4       	brne	.+20     	; 0x1346 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1332:	e8 e2       	ldi	r30, 0x28	; 40
    1334:	f1 e0       	ldi	r31, 0x01	; 1
    1336:	f0 93 37 01 	sts	0x0137, r31
    133a:	e0 93 36 01 	sts	0x0136, r30
		stdout = Stream;
    133e:	f0 93 39 01 	sts	0x0139, r31
    1342:	e0 93 38 01 	sts	0x0138, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1346:	8e e0       	ldi	r24, 0x0E	; 14
    1348:	df 01       	movw	r26, r30
    134a:	1d 92       	st	X+, r1
    134c:	8a 95       	dec	r24
    134e:	e9 f7       	brne	.-6      	; 0x134a <Serial_CreateStream+0x1e>
    1350:	83 e0       	ldi	r24, 0x03	; 3
    1352:	83 83       	std	Z+3, r24	; 0x03
    1354:	8a e7       	ldi	r24, 0x7A	; 122
    1356:	99 e0       	ldi	r25, 0x09	; 9
    1358:	91 87       	std	Z+9, r25	; 0x09
    135a:	80 87       	std	Z+8, r24	; 0x08
    135c:	83 e8       	ldi	r24, 0x83	; 131
    135e:	99 e0       	ldi	r25, 0x09	; 9
    1360:	93 87       	std	Z+11, r25	; 0x0b
    1362:	82 87       	std	Z+10, r24	; 0x0a
}
    1364:	08 95       	ret

00001366 <printf_P>:
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	fe 01       	movw	r30, r28
    1370:	35 96       	adiw	r30, 0x05	; 5
    1372:	61 91       	ld	r22, Z+
    1374:	71 91       	ld	r23, Z+
    1376:	80 91 38 01 	lds	r24, 0x0138
    137a:	90 91 39 01 	lds	r25, 0x0139
    137e:	dc 01       	movw	r26, r24
    1380:	13 96       	adiw	r26, 0x03	; 3
    1382:	2c 91       	ld	r18, X
    1384:	13 97       	sbiw	r26, 0x03	; 3
    1386:	28 60       	ori	r18, 0x08	; 8
    1388:	13 96       	adiw	r26, 0x03	; 3
    138a:	2c 93       	st	X, r18
    138c:	af 01       	movw	r20, r30
    138e:	42 d0       	rcall	.+132    	; 0x1414 <vfprintf>
    1390:	e0 91 38 01 	lds	r30, 0x0138
    1394:	f0 91 39 01 	lds	r31, 0x0139
    1398:	23 81       	ldd	r18, Z+3	; 0x03
    139a:	27 7f       	andi	r18, 0xF7	; 247
    139c:	23 83       	std	Z+3, r18	; 0x03
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <puts_P>:
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	8c 01       	movw	r16, r24
    13b2:	e0 91 38 01 	lds	r30, 0x0138
    13b6:	f0 91 39 01 	lds	r31, 0x0139
    13ba:	83 81       	ldd	r24, Z+3	; 0x03
    13bc:	81 ff       	sbrs	r24, 1
    13be:	20 c0       	rjmp	.+64     	; 0x1400 <puts_P+0x5c>
    13c0:	c0 e0       	ldi	r28, 0x00	; 0
    13c2:	d0 e0       	ldi	r29, 0x00	; 0
    13c4:	0c c0       	rjmp	.+24     	; 0x13de <puts_P+0x3a>
    13c6:	db 01       	movw	r26, r22
    13c8:	18 96       	adiw	r26, 0x08	; 8
    13ca:	ed 91       	ld	r30, X+
    13cc:	fc 91       	ld	r31, X
    13ce:	19 97       	sbiw	r26, 0x09	; 9
    13d0:	09 95       	icall
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	11 f0       	breq	.+4      	; 0x13da <puts_P+0x36>
    13d6:	cf ef       	ldi	r28, 0xFF	; 255
    13d8:	df ef       	ldi	r29, 0xFF	; 255
    13da:	0f 5f       	subi	r16, 0xFF	; 255
    13dc:	1f 4f       	sbci	r17, 0xFF	; 255
    13de:	f8 01       	movw	r30, r16
    13e0:	84 91       	lpm	r24, Z+
    13e2:	60 91 38 01 	lds	r22, 0x0138
    13e6:	70 91 39 01 	lds	r23, 0x0139
    13ea:	88 23       	and	r24, r24
    13ec:	61 f7       	brne	.-40     	; 0x13c6 <puts_P+0x22>
    13ee:	db 01       	movw	r26, r22
    13f0:	18 96       	adiw	r26, 0x08	; 8
    13f2:	ed 91       	ld	r30, X+
    13f4:	fc 91       	ld	r31, X
    13f6:	19 97       	sbiw	r26, 0x09	; 9
    13f8:	8a e0       	ldi	r24, 0x0A	; 10
    13fa:	09 95       	icall
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	11 f0       	breq	.+4      	; 0x1404 <puts_P+0x60>
    1400:	cf ef       	ldi	r28, 0xFF	; 255
    1402:	df ef       	ldi	r29, 0xFF	; 255
    1404:	ce 01       	movw	r24, r28
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	08 95       	ret

00001414 <vfprintf>:
    1414:	2f 92       	push	r2
    1416:	3f 92       	push	r3
    1418:	4f 92       	push	r4
    141a:	5f 92       	push	r5
    141c:	6f 92       	push	r6
    141e:	7f 92       	push	r7
    1420:	8f 92       	push	r8
    1422:	9f 92       	push	r9
    1424:	af 92       	push	r10
    1426:	bf 92       	push	r11
    1428:	cf 92       	push	r12
    142a:	df 92       	push	r13
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	0f 93       	push	r16
    1432:	1f 93       	push	r17
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	2c 97       	sbiw	r28, 0x0c	; 12
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	6c 01       	movw	r12, r24
    144a:	1b 01       	movw	r2, r22
    144c:	8a 01       	movw	r16, r20
    144e:	fc 01       	movw	r30, r24
    1450:	17 82       	std	Z+7, r1	; 0x07
    1452:	16 82       	std	Z+6, r1	; 0x06
    1454:	83 81       	ldd	r24, Z+3	; 0x03
    1456:	81 ff       	sbrs	r24, 1
    1458:	c4 c1       	rjmp	.+904    	; 0x17e2 <vfprintf+0x3ce>
    145a:	2e 01       	movw	r4, r28
    145c:	08 94       	sec
    145e:	41 1c       	adc	r4, r1
    1460:	51 1c       	adc	r5, r1
    1462:	f6 01       	movw	r30, r12
    1464:	93 81       	ldd	r25, Z+3	; 0x03
    1466:	f1 01       	movw	r30, r2
    1468:	93 fd       	sbrc	r25, 3
    146a:	85 91       	lpm	r24, Z+
    146c:	93 ff       	sbrs	r25, 3
    146e:	81 91       	ld	r24, Z+
    1470:	1f 01       	movw	r2, r30
    1472:	88 23       	and	r24, r24
    1474:	09 f4       	brne	.+2      	; 0x1478 <vfprintf+0x64>
    1476:	b1 c1       	rjmp	.+866    	; 0x17da <vfprintf+0x3c6>
    1478:	85 32       	cpi	r24, 0x25	; 37
    147a:	39 f4       	brne	.+14     	; 0x148a <vfprintf+0x76>
    147c:	93 fd       	sbrc	r25, 3
    147e:	85 91       	lpm	r24, Z+
    1480:	93 ff       	sbrs	r25, 3
    1482:	81 91       	ld	r24, Z+
    1484:	1f 01       	movw	r2, r30
    1486:	85 32       	cpi	r24, 0x25	; 37
    1488:	21 f4       	brne	.+8      	; 0x1492 <vfprintf+0x7e>
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	b6 01       	movw	r22, r12
    148e:	db d1       	rcall	.+950    	; 0x1846 <fputc>
    1490:	e8 cf       	rjmp	.-48     	; 0x1462 <vfprintf+0x4e>
    1492:	ee 24       	eor	r14, r14
    1494:	ff 24       	eor	r15, r15
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	20 32       	cpi	r18, 0x20	; 32
    149a:	b0 f4       	brcc	.+44     	; 0x14c8 <vfprintf+0xb4>
    149c:	8b 32       	cpi	r24, 0x2B	; 43
    149e:	69 f0       	breq	.+26     	; 0x14ba <vfprintf+0xa6>
    14a0:	8c 32       	cpi	r24, 0x2C	; 44
    14a2:	28 f4       	brcc	.+10     	; 0x14ae <vfprintf+0x9a>
    14a4:	80 32       	cpi	r24, 0x20	; 32
    14a6:	51 f0       	breq	.+20     	; 0x14bc <vfprintf+0xa8>
    14a8:	83 32       	cpi	r24, 0x23	; 35
    14aa:	71 f4       	brne	.+28     	; 0x14c8 <vfprintf+0xb4>
    14ac:	0b c0       	rjmp	.+22     	; 0x14c4 <vfprintf+0xb0>
    14ae:	8d 32       	cpi	r24, 0x2D	; 45
    14b0:	39 f0       	breq	.+14     	; 0x14c0 <vfprintf+0xac>
    14b2:	80 33       	cpi	r24, 0x30	; 48
    14b4:	49 f4       	brne	.+18     	; 0x14c8 <vfprintf+0xb4>
    14b6:	21 60       	ori	r18, 0x01	; 1
    14b8:	2c c0       	rjmp	.+88     	; 0x1512 <vfprintf+0xfe>
    14ba:	22 60       	ori	r18, 0x02	; 2
    14bc:	24 60       	ori	r18, 0x04	; 4
    14be:	29 c0       	rjmp	.+82     	; 0x1512 <vfprintf+0xfe>
    14c0:	28 60       	ori	r18, 0x08	; 8
    14c2:	27 c0       	rjmp	.+78     	; 0x1512 <vfprintf+0xfe>
    14c4:	20 61       	ori	r18, 0x10	; 16
    14c6:	25 c0       	rjmp	.+74     	; 0x1512 <vfprintf+0xfe>
    14c8:	27 fd       	sbrc	r18, 7
    14ca:	2c c0       	rjmp	.+88     	; 0x1524 <vfprintf+0x110>
    14cc:	38 2f       	mov	r19, r24
    14ce:	30 53       	subi	r19, 0x30	; 48
    14d0:	3a 30       	cpi	r19, 0x0A	; 10
    14d2:	98 f4       	brcc	.+38     	; 0x14fa <vfprintf+0xe6>
    14d4:	26 ff       	sbrs	r18, 6
    14d6:	08 c0       	rjmp	.+16     	; 0x14e8 <vfprintf+0xd4>
    14d8:	8e 2d       	mov	r24, r14
    14da:	88 0f       	add	r24, r24
    14dc:	e8 2e       	mov	r14, r24
    14de:	ee 0c       	add	r14, r14
    14e0:	ee 0c       	add	r14, r14
    14e2:	e8 0e       	add	r14, r24
    14e4:	e3 0e       	add	r14, r19
    14e6:	15 c0       	rjmp	.+42     	; 0x1512 <vfprintf+0xfe>
    14e8:	8f 2d       	mov	r24, r15
    14ea:	88 0f       	add	r24, r24
    14ec:	f8 2e       	mov	r15, r24
    14ee:	ff 0c       	add	r15, r15
    14f0:	ff 0c       	add	r15, r15
    14f2:	f8 0e       	add	r15, r24
    14f4:	f3 0e       	add	r15, r19
    14f6:	20 62       	ori	r18, 0x20	; 32
    14f8:	0c c0       	rjmp	.+24     	; 0x1512 <vfprintf+0xfe>
    14fa:	8e 32       	cpi	r24, 0x2E	; 46
    14fc:	21 f4       	brne	.+8      	; 0x1506 <vfprintf+0xf2>
    14fe:	26 fd       	sbrc	r18, 6
    1500:	6c c1       	rjmp	.+728    	; 0x17da <vfprintf+0x3c6>
    1502:	20 64       	ori	r18, 0x40	; 64
    1504:	06 c0       	rjmp	.+12     	; 0x1512 <vfprintf+0xfe>
    1506:	8c 36       	cpi	r24, 0x6C	; 108
    1508:	11 f4       	brne	.+4      	; 0x150e <vfprintf+0xfa>
    150a:	20 68       	ori	r18, 0x80	; 128
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <vfprintf+0xfe>
    150e:	88 36       	cpi	r24, 0x68	; 104
    1510:	49 f4       	brne	.+18     	; 0x1524 <vfprintf+0x110>
    1512:	f1 01       	movw	r30, r2
    1514:	93 fd       	sbrc	r25, 3
    1516:	85 91       	lpm	r24, Z+
    1518:	93 ff       	sbrs	r25, 3
    151a:	81 91       	ld	r24, Z+
    151c:	1f 01       	movw	r2, r30
    151e:	88 23       	and	r24, r24
    1520:	09 f0       	breq	.+2      	; 0x1524 <vfprintf+0x110>
    1522:	ba cf       	rjmp	.-140    	; 0x1498 <vfprintf+0x84>
    1524:	98 2f       	mov	r25, r24
    1526:	95 54       	subi	r25, 0x45	; 69
    1528:	93 30       	cpi	r25, 0x03	; 3
    152a:	18 f0       	brcs	.+6      	; 0x1532 <vfprintf+0x11e>
    152c:	90 52       	subi	r25, 0x20	; 32
    152e:	93 30       	cpi	r25, 0x03	; 3
    1530:	28 f4       	brcc	.+10     	; 0x153c <vfprintf+0x128>
    1532:	0c 5f       	subi	r16, 0xFC	; 252
    1534:	1f 4f       	sbci	r17, 0xFF	; 255
    1536:	ff e3       	ldi	r31, 0x3F	; 63
    1538:	f9 83       	std	Y+1, r31	; 0x01
    153a:	0d c0       	rjmp	.+26     	; 0x1556 <vfprintf+0x142>
    153c:	83 36       	cpi	r24, 0x63	; 99
    153e:	31 f0       	breq	.+12     	; 0x154c <vfprintf+0x138>
    1540:	83 37       	cpi	r24, 0x73	; 115
    1542:	71 f0       	breq	.+28     	; 0x1560 <vfprintf+0x14c>
    1544:	83 35       	cpi	r24, 0x53	; 83
    1546:	09 f0       	breq	.+2      	; 0x154a <vfprintf+0x136>
    1548:	5c c0       	rjmp	.+184    	; 0x1602 <vfprintf+0x1ee>
    154a:	21 c0       	rjmp	.+66     	; 0x158e <vfprintf+0x17a>
    154c:	f8 01       	movw	r30, r16
    154e:	80 81       	ld	r24, Z
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	0e 5f       	subi	r16, 0xFE	; 254
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	42 01       	movw	r8, r4
    1558:	71 e0       	ldi	r23, 0x01	; 1
    155a:	a7 2e       	mov	r10, r23
    155c:	b1 2c       	mov	r11, r1
    155e:	15 c0       	rjmp	.+42     	; 0x158a <vfprintf+0x176>
    1560:	62 e0       	ldi	r22, 0x02	; 2
    1562:	66 2e       	mov	r6, r22
    1564:	71 2c       	mov	r7, r1
    1566:	60 0e       	add	r6, r16
    1568:	71 1e       	adc	r7, r17
    156a:	f8 01       	movw	r30, r16
    156c:	80 80       	ld	r8, Z
    156e:	91 80       	ldd	r9, Z+1	; 0x01
    1570:	26 ff       	sbrs	r18, 6
    1572:	03 c0       	rjmp	.+6      	; 0x157a <vfprintf+0x166>
    1574:	6e 2d       	mov	r22, r14
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	02 c0       	rjmp	.+4      	; 0x157e <vfprintf+0x16a>
    157a:	6f ef       	ldi	r22, 0xFF	; 255
    157c:	7f ef       	ldi	r23, 0xFF	; 255
    157e:	c4 01       	movw	r24, r8
    1580:	2c 87       	std	Y+12, r18	; 0x0c
    1582:	56 d1       	rcall	.+684    	; 0x1830 <strnlen>
    1584:	5c 01       	movw	r10, r24
    1586:	83 01       	movw	r16, r6
    1588:	2c 85       	ldd	r18, Y+12	; 0x0c
    158a:	2f 77       	andi	r18, 0x7F	; 127
    158c:	16 c0       	rjmp	.+44     	; 0x15ba <vfprintf+0x1a6>
    158e:	52 e0       	ldi	r21, 0x02	; 2
    1590:	65 2e       	mov	r6, r21
    1592:	71 2c       	mov	r7, r1
    1594:	60 0e       	add	r6, r16
    1596:	71 1e       	adc	r7, r17
    1598:	f8 01       	movw	r30, r16
    159a:	80 80       	ld	r8, Z
    159c:	91 80       	ldd	r9, Z+1	; 0x01
    159e:	26 ff       	sbrs	r18, 6
    15a0:	03 c0       	rjmp	.+6      	; 0x15a8 <vfprintf+0x194>
    15a2:	6e 2d       	mov	r22, r14
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <vfprintf+0x198>
    15a8:	6f ef       	ldi	r22, 0xFF	; 255
    15aa:	7f ef       	ldi	r23, 0xFF	; 255
    15ac:	c4 01       	movw	r24, r8
    15ae:	2c 87       	std	Y+12, r18	; 0x0c
    15b0:	34 d1       	rcall	.+616    	; 0x181a <strnlen_P>
    15b2:	5c 01       	movw	r10, r24
    15b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    15b6:	20 68       	ori	r18, 0x80	; 128
    15b8:	83 01       	movw	r16, r6
    15ba:	23 fd       	sbrc	r18, 3
    15bc:	1e c0       	rjmp	.+60     	; 0x15fa <vfprintf+0x1e6>
    15be:	07 c0       	rjmp	.+14     	; 0x15ce <vfprintf+0x1ba>
    15c0:	80 e2       	ldi	r24, 0x20	; 32
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	b6 01       	movw	r22, r12
    15c6:	2c 87       	std	Y+12, r18	; 0x0c
    15c8:	3e d1       	rcall	.+636    	; 0x1846 <fputc>
    15ca:	fa 94       	dec	r15
    15cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    15ce:	8f 2d       	mov	r24, r15
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a8 16       	cp	r10, r24
    15d4:	b9 06       	cpc	r11, r25
    15d6:	a0 f3       	brcs	.-24     	; 0x15c0 <vfprintf+0x1ac>
    15d8:	10 c0       	rjmp	.+32     	; 0x15fa <vfprintf+0x1e6>
    15da:	f4 01       	movw	r30, r8
    15dc:	27 fd       	sbrc	r18, 7
    15de:	85 91       	lpm	r24, Z+
    15e0:	27 ff       	sbrs	r18, 7
    15e2:	81 91       	ld	r24, Z+
    15e4:	4f 01       	movw	r8, r30
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	b6 01       	movw	r22, r12
    15ea:	2c 87       	std	Y+12, r18	; 0x0c
    15ec:	2c d1       	rcall	.+600    	; 0x1846 <fputc>
    15ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    15f0:	f1 10       	cpse	r15, r1
    15f2:	fa 94       	dec	r15
    15f4:	08 94       	sec
    15f6:	a1 08       	sbc	r10, r1
    15f8:	b1 08       	sbc	r11, r1
    15fa:	a1 14       	cp	r10, r1
    15fc:	b1 04       	cpc	r11, r1
    15fe:	69 f7       	brne	.-38     	; 0x15da <vfprintf+0x1c6>
    1600:	e9 c0       	rjmp	.+466    	; 0x17d4 <vfprintf+0x3c0>
    1602:	84 36       	cpi	r24, 0x64	; 100
    1604:	11 f0       	breq	.+4      	; 0x160a <vfprintf+0x1f6>
    1606:	89 36       	cpi	r24, 0x69	; 105
    1608:	41 f5       	brne	.+80     	; 0x165a <vfprintf+0x246>
    160a:	27 ff       	sbrs	r18, 7
    160c:	08 c0       	rjmp	.+16     	; 0x161e <vfprintf+0x20a>
    160e:	f8 01       	movw	r30, r16
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	0c 5f       	subi	r16, 0xFC	; 252
    161a:	1f 4f       	sbci	r17, 0xFF	; 255
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <vfprintf+0x21c>
    161e:	f8 01       	movw	r30, r16
    1620:	60 81       	ld	r22, Z
    1622:	71 81       	ldd	r23, Z+1	; 0x01
    1624:	88 27       	eor	r24, r24
    1626:	77 fd       	sbrc	r23, 7
    1628:	80 95       	com	r24
    162a:	98 2f       	mov	r25, r24
    162c:	0e 5f       	subi	r16, 0xFE	; 254
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	4f e6       	ldi	r20, 0x6F	; 111
    1632:	b4 2e       	mov	r11, r20
    1634:	b2 22       	and	r11, r18
    1636:	97 ff       	sbrs	r25, 7
    1638:	09 c0       	rjmp	.+18     	; 0x164c <vfprintf+0x238>
    163a:	90 95       	com	r25
    163c:	80 95       	com	r24
    163e:	70 95       	com	r23
    1640:	61 95       	neg	r22
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	8f 4f       	sbci	r24, 0xFF	; 255
    1646:	9f 4f       	sbci	r25, 0xFF	; 255
    1648:	f0 e8       	ldi	r31, 0x80	; 128
    164a:	bf 2a       	or	r11, r31
    164c:	a2 01       	movw	r20, r4
    164e:	2a e0       	ldi	r18, 0x0A	; 10
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	25 d1       	rcall	.+586    	; 0x189e <__ultoa_invert>
    1654:	78 2e       	mov	r7, r24
    1656:	74 18       	sub	r7, r4
    1658:	44 c0       	rjmp	.+136    	; 0x16e2 <vfprintf+0x2ce>
    165a:	85 37       	cpi	r24, 0x75	; 117
    165c:	31 f4       	brne	.+12     	; 0x166a <vfprintf+0x256>
    165e:	3f ee       	ldi	r19, 0xEF	; 239
    1660:	b3 2e       	mov	r11, r19
    1662:	b2 22       	and	r11, r18
    1664:	2a e0       	ldi	r18, 0x0A	; 10
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	25 c0       	rjmp	.+74     	; 0x16b4 <vfprintf+0x2a0>
    166a:	99 ef       	ldi	r25, 0xF9	; 249
    166c:	b9 2e       	mov	r11, r25
    166e:	b2 22       	and	r11, r18
    1670:	8f 36       	cpi	r24, 0x6F	; 111
    1672:	c1 f0       	breq	.+48     	; 0x16a4 <vfprintf+0x290>
    1674:	80 37       	cpi	r24, 0x70	; 112
    1676:	20 f4       	brcc	.+8      	; 0x1680 <vfprintf+0x26c>
    1678:	88 35       	cpi	r24, 0x58	; 88
    167a:	09 f0       	breq	.+2      	; 0x167e <vfprintf+0x26a>
    167c:	ae c0       	rjmp	.+348    	; 0x17da <vfprintf+0x3c6>
    167e:	0d c0       	rjmp	.+26     	; 0x169a <vfprintf+0x286>
    1680:	80 37       	cpi	r24, 0x70	; 112
    1682:	21 f0       	breq	.+8      	; 0x168c <vfprintf+0x278>
    1684:	88 37       	cpi	r24, 0x78	; 120
    1686:	09 f0       	breq	.+2      	; 0x168a <vfprintf+0x276>
    1688:	a8 c0       	rjmp	.+336    	; 0x17da <vfprintf+0x3c6>
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <vfprintf+0x27c>
    168c:	20 e1       	ldi	r18, 0x10	; 16
    168e:	b2 2a       	or	r11, r18
    1690:	b4 fe       	sbrs	r11, 4
    1692:	0b c0       	rjmp	.+22     	; 0x16aa <vfprintf+0x296>
    1694:	84 e0       	ldi	r24, 0x04	; 4
    1696:	b8 2a       	or	r11, r24
    1698:	08 c0       	rjmp	.+16     	; 0x16aa <vfprintf+0x296>
    169a:	b4 fe       	sbrs	r11, 4
    169c:	09 c0       	rjmp	.+18     	; 0x16b0 <vfprintf+0x29c>
    169e:	e6 e0       	ldi	r30, 0x06	; 6
    16a0:	be 2a       	or	r11, r30
    16a2:	06 c0       	rjmp	.+12     	; 0x16b0 <vfprintf+0x29c>
    16a4:	28 e0       	ldi	r18, 0x08	; 8
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	05 c0       	rjmp	.+10     	; 0x16b4 <vfprintf+0x2a0>
    16aa:	20 e1       	ldi	r18, 0x10	; 16
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <vfprintf+0x2a0>
    16b0:	20 e1       	ldi	r18, 0x10	; 16
    16b2:	32 e0       	ldi	r19, 0x02	; 2
    16b4:	b7 fe       	sbrs	r11, 7
    16b6:	08 c0       	rjmp	.+16     	; 0x16c8 <vfprintf+0x2b4>
    16b8:	f8 01       	movw	r30, r16
    16ba:	60 81       	ld	r22, Z
    16bc:	71 81       	ldd	r23, Z+1	; 0x01
    16be:	82 81       	ldd	r24, Z+2	; 0x02
    16c0:	93 81       	ldd	r25, Z+3	; 0x03
    16c2:	0c 5f       	subi	r16, 0xFC	; 252
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	07 c0       	rjmp	.+14     	; 0x16d6 <vfprintf+0x2c2>
    16c8:	f8 01       	movw	r30, r16
    16ca:	60 81       	ld	r22, Z
    16cc:	71 81       	ldd	r23, Z+1	; 0x01
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 5f       	subi	r16, 0xFE	; 254
    16d4:	1f 4f       	sbci	r17, 0xFF	; 255
    16d6:	a2 01       	movw	r20, r4
    16d8:	e2 d0       	rcall	.+452    	; 0x189e <__ultoa_invert>
    16da:	78 2e       	mov	r7, r24
    16dc:	74 18       	sub	r7, r4
    16de:	ff e7       	ldi	r31, 0x7F	; 127
    16e0:	bf 22       	and	r11, r31
    16e2:	b6 fe       	sbrs	r11, 6
    16e4:	0b c0       	rjmp	.+22     	; 0x16fc <vfprintf+0x2e8>
    16e6:	2e ef       	ldi	r18, 0xFE	; 254
    16e8:	b2 22       	and	r11, r18
    16ea:	7e 14       	cp	r7, r14
    16ec:	38 f4       	brcc	.+14     	; 0x16fc <vfprintf+0x2e8>
    16ee:	b4 fe       	sbrs	r11, 4
    16f0:	07 c0       	rjmp	.+14     	; 0x1700 <vfprintf+0x2ec>
    16f2:	b2 fc       	sbrc	r11, 2
    16f4:	05 c0       	rjmp	.+10     	; 0x1700 <vfprintf+0x2ec>
    16f6:	8f ee       	ldi	r24, 0xEF	; 239
    16f8:	b8 22       	and	r11, r24
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <vfprintf+0x2ec>
    16fc:	a7 2c       	mov	r10, r7
    16fe:	01 c0       	rjmp	.+2      	; 0x1702 <vfprintf+0x2ee>
    1700:	ae 2c       	mov	r10, r14
    1702:	8b 2d       	mov	r24, r11
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	b4 fe       	sbrs	r11, 4
    1708:	0d c0       	rjmp	.+26     	; 0x1724 <vfprintf+0x310>
    170a:	fe 01       	movw	r30, r28
    170c:	e7 0d       	add	r30, r7
    170e:	f1 1d       	adc	r31, r1
    1710:	20 81       	ld	r18, Z
    1712:	20 33       	cpi	r18, 0x30	; 48
    1714:	19 f4       	brne	.+6      	; 0x171c <vfprintf+0x308>
    1716:	e9 ee       	ldi	r30, 0xE9	; 233
    1718:	be 22       	and	r11, r30
    171a:	09 c0       	rjmp	.+18     	; 0x172e <vfprintf+0x31a>
    171c:	a3 94       	inc	r10
    171e:	b2 fe       	sbrs	r11, 2
    1720:	06 c0       	rjmp	.+12     	; 0x172e <vfprintf+0x31a>
    1722:	04 c0       	rjmp	.+8      	; 0x172c <vfprintf+0x318>
    1724:	86 78       	andi	r24, 0x86	; 134
    1726:	90 70       	andi	r25, 0x00	; 0
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	09 f0       	breq	.+2      	; 0x172e <vfprintf+0x31a>
    172c:	a3 94       	inc	r10
    172e:	8b 2c       	mov	r8, r11
    1730:	99 24       	eor	r9, r9
    1732:	b3 fc       	sbrc	r11, 3
    1734:	13 c0       	rjmp	.+38     	; 0x175c <vfprintf+0x348>
    1736:	b0 fe       	sbrs	r11, 0
    1738:	0e c0       	rjmp	.+28     	; 0x1756 <vfprintf+0x342>
    173a:	af 14       	cp	r10, r15
    173c:	28 f4       	brcc	.+10     	; 0x1748 <vfprintf+0x334>
    173e:	e7 2c       	mov	r14, r7
    1740:	ef 0c       	add	r14, r15
    1742:	ea 18       	sub	r14, r10
    1744:	af 2c       	mov	r10, r15
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <vfprintf+0x342>
    1748:	e7 2c       	mov	r14, r7
    174a:	05 c0       	rjmp	.+10     	; 0x1756 <vfprintf+0x342>
    174c:	80 e2       	ldi	r24, 0x20	; 32
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	b6 01       	movw	r22, r12
    1752:	79 d0       	rcall	.+242    	; 0x1846 <fputc>
    1754:	a3 94       	inc	r10
    1756:	af 14       	cp	r10, r15
    1758:	c8 f3       	brcs	.-14     	; 0x174c <vfprintf+0x338>
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <vfprintf+0x350>
    175c:	af 14       	cp	r10, r15
    175e:	10 f4       	brcc	.+4      	; 0x1764 <vfprintf+0x350>
    1760:	fa 18       	sub	r15, r10
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <vfprintf+0x352>
    1764:	ff 24       	eor	r15, r15
    1766:	84 fe       	sbrs	r8, 4
    1768:	0e c0       	rjmp	.+28     	; 0x1786 <vfprintf+0x372>
    176a:	80 e3       	ldi	r24, 0x30	; 48
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	b6 01       	movw	r22, r12
    1770:	6a d0       	rcall	.+212    	; 0x1846 <fputc>
    1772:	82 fe       	sbrs	r8, 2
    1774:	1d c0       	rjmp	.+58     	; 0x17b0 <vfprintf+0x39c>
    1776:	81 fe       	sbrs	r8, 1
    1778:	03 c0       	rjmp	.+6      	; 0x1780 <vfprintf+0x36c>
    177a:	88 e5       	ldi	r24, 0x58	; 88
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	10 c0       	rjmp	.+32     	; 0x17a0 <vfprintf+0x38c>
    1780:	88 e7       	ldi	r24, 0x78	; 120
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0d c0       	rjmp	.+26     	; 0x17a0 <vfprintf+0x38c>
    1786:	c4 01       	movw	r24, r8
    1788:	86 78       	andi	r24, 0x86	; 134
    178a:	90 70       	andi	r25, 0x00	; 0
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	81 f0       	breq	.+32     	; 0x17b0 <vfprintf+0x39c>
    1790:	81 fc       	sbrc	r8, 1
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <vfprintf+0x384>
    1794:	80 e2       	ldi	r24, 0x20	; 32
    1796:	01 c0       	rjmp	.+2      	; 0x179a <vfprintf+0x386>
    1798:	8b e2       	ldi	r24, 0x2B	; 43
    179a:	b7 fc       	sbrc	r11, 7
    179c:	8d e2       	ldi	r24, 0x2D	; 45
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	b6 01       	movw	r22, r12
    17a2:	51 d0       	rcall	.+162    	; 0x1846 <fputc>
    17a4:	05 c0       	rjmp	.+10     	; 0x17b0 <vfprintf+0x39c>
    17a6:	80 e3       	ldi	r24, 0x30	; 48
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	b6 01       	movw	r22, r12
    17ac:	4c d0       	rcall	.+152    	; 0x1846 <fputc>
    17ae:	ea 94       	dec	r14
    17b0:	7e 14       	cp	r7, r14
    17b2:	c8 f3       	brcs	.-14     	; 0x17a6 <vfprintf+0x392>
    17b4:	7a 94       	dec	r7
    17b6:	f2 01       	movw	r30, r4
    17b8:	e7 0d       	add	r30, r7
    17ba:	f1 1d       	adc	r31, r1
    17bc:	80 81       	ld	r24, Z
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	b6 01       	movw	r22, r12
    17c2:	41 d0       	rcall	.+130    	; 0x1846 <fputc>
    17c4:	77 20       	and	r7, r7
    17c6:	b1 f7       	brne	.-20     	; 0x17b4 <vfprintf+0x3a0>
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <vfprintf+0x3c0>
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	b6 01       	movw	r22, r12
    17d0:	3a d0       	rcall	.+116    	; 0x1846 <fputc>
    17d2:	fa 94       	dec	r15
    17d4:	ff 20       	and	r15, r15
    17d6:	c9 f7       	brne	.-14     	; 0x17ca <vfprintf+0x3b6>
    17d8:	44 ce       	rjmp	.-888    	; 0x1462 <vfprintf+0x4e>
    17da:	f6 01       	movw	r30, r12
    17dc:	26 81       	ldd	r18, Z+6	; 0x06
    17de:	37 81       	ldd	r19, Z+7	; 0x07
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <vfprintf+0x3d2>
    17e2:	2f ef       	ldi	r18, 0xFF	; 255
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	c9 01       	movw	r24, r18
    17e8:	2c 96       	adiw	r28, 0x0c	; 12
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	ef 90       	pop	r14
    1800:	df 90       	pop	r13
    1802:	cf 90       	pop	r12
    1804:	bf 90       	pop	r11
    1806:	af 90       	pop	r10
    1808:	9f 90       	pop	r9
    180a:	8f 90       	pop	r8
    180c:	7f 90       	pop	r7
    180e:	6f 90       	pop	r6
    1810:	5f 90       	pop	r5
    1812:	4f 90       	pop	r4
    1814:	3f 90       	pop	r3
    1816:	2f 90       	pop	r2
    1818:	08 95       	ret

0000181a <strnlen_P>:
    181a:	fc 01       	movw	r30, r24
    181c:	05 90       	lpm	r0, Z+
    181e:	61 50       	subi	r22, 0x01	; 1
    1820:	70 40       	sbci	r23, 0x00	; 0
    1822:	01 10       	cpse	r0, r1
    1824:	d8 f7       	brcc	.-10     	; 0x181c <strnlen_P+0x2>
    1826:	80 95       	com	r24
    1828:	90 95       	com	r25
    182a:	8e 0f       	add	r24, r30
    182c:	9f 1f       	adc	r25, r31
    182e:	08 95       	ret

00001830 <strnlen>:
    1830:	fc 01       	movw	r30, r24
    1832:	61 50       	subi	r22, 0x01	; 1
    1834:	70 40       	sbci	r23, 0x00	; 0
    1836:	01 90       	ld	r0, Z+
    1838:	01 10       	cpse	r0, r1
    183a:	d8 f7       	brcc	.-10     	; 0x1832 <strnlen+0x2>
    183c:	80 95       	com	r24
    183e:	90 95       	com	r25
    1840:	8e 0f       	add	r24, r30
    1842:	9f 1f       	adc	r25, r31
    1844:	08 95       	ret

00001846 <fputc>:
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	8c 01       	movw	r16, r24
    1850:	eb 01       	movw	r28, r22
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	81 ff       	sbrs	r24, 1
    1856:	1b c0       	rjmp	.+54     	; 0x188e <fputc+0x48>
    1858:	82 ff       	sbrs	r24, 2
    185a:	0d c0       	rjmp	.+26     	; 0x1876 <fputc+0x30>
    185c:	2e 81       	ldd	r18, Y+6	; 0x06
    185e:	3f 81       	ldd	r19, Y+7	; 0x07
    1860:	8c 81       	ldd	r24, Y+4	; 0x04
    1862:	9d 81       	ldd	r25, Y+5	; 0x05
    1864:	28 17       	cp	r18, r24
    1866:	39 07       	cpc	r19, r25
    1868:	64 f4       	brge	.+24     	; 0x1882 <fputc+0x3c>
    186a:	e8 81       	ld	r30, Y
    186c:	f9 81       	ldd	r31, Y+1	; 0x01
    186e:	01 93       	st	Z+, r16
    1870:	f9 83       	std	Y+1, r31	; 0x01
    1872:	e8 83       	st	Y, r30
    1874:	06 c0       	rjmp	.+12     	; 0x1882 <fputc+0x3c>
    1876:	e8 85       	ldd	r30, Y+8	; 0x08
    1878:	f9 85       	ldd	r31, Y+9	; 0x09
    187a:	80 2f       	mov	r24, r16
    187c:	09 95       	icall
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	31 f4       	brne	.+12     	; 0x188e <fputc+0x48>
    1882:	8e 81       	ldd	r24, Y+6	; 0x06
    1884:	9f 81       	ldd	r25, Y+7	; 0x07
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	9f 83       	std	Y+7, r25	; 0x07
    188a:	8e 83       	std	Y+6, r24	; 0x06
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <fputc+0x4c>
    188e:	0f ef       	ldi	r16, 0xFF	; 255
    1890:	1f ef       	ldi	r17, 0xFF	; 255
    1892:	c8 01       	movw	r24, r16
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	08 95       	ret

0000189e <__ultoa_invert>:
    189e:	fa 01       	movw	r30, r20
    18a0:	aa 27       	eor	r26, r26
    18a2:	28 30       	cpi	r18, 0x08	; 8
    18a4:	51 f1       	breq	.+84     	; 0x18fa <__ultoa_invert+0x5c>
    18a6:	20 31       	cpi	r18, 0x10	; 16
    18a8:	81 f1       	breq	.+96     	; 0x190a <__ultoa_invert+0x6c>
    18aa:	e8 94       	clt
    18ac:	6f 93       	push	r22
    18ae:	6e 7f       	andi	r22, 0xFE	; 254
    18b0:	6e 5f       	subi	r22, 0xFE	; 254
    18b2:	7f 4f       	sbci	r23, 0xFF	; 255
    18b4:	8f 4f       	sbci	r24, 0xFF	; 255
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	af 4f       	sbci	r26, 0xFF	; 255
    18ba:	b1 e0       	ldi	r27, 0x01	; 1
    18bc:	3e d0       	rcall	.+124    	; 0x193a <__ultoa_invert+0x9c>
    18be:	b4 e0       	ldi	r27, 0x04	; 4
    18c0:	3c d0       	rcall	.+120    	; 0x193a <__ultoa_invert+0x9c>
    18c2:	67 0f       	add	r22, r23
    18c4:	78 1f       	adc	r23, r24
    18c6:	89 1f       	adc	r24, r25
    18c8:	9a 1f       	adc	r25, r26
    18ca:	a1 1d       	adc	r26, r1
    18cc:	68 0f       	add	r22, r24
    18ce:	79 1f       	adc	r23, r25
    18d0:	8a 1f       	adc	r24, r26
    18d2:	91 1d       	adc	r25, r1
    18d4:	a1 1d       	adc	r26, r1
    18d6:	6a 0f       	add	r22, r26
    18d8:	71 1d       	adc	r23, r1
    18da:	81 1d       	adc	r24, r1
    18dc:	91 1d       	adc	r25, r1
    18de:	a1 1d       	adc	r26, r1
    18e0:	20 d0       	rcall	.+64     	; 0x1922 <__ultoa_invert+0x84>
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <__ultoa_invert+0x48>
    18e4:	68 94       	set
    18e6:	3f 91       	pop	r19
    18e8:	2a e0       	ldi	r18, 0x0A	; 10
    18ea:	26 9f       	mul	r18, r22
    18ec:	11 24       	eor	r1, r1
    18ee:	30 19       	sub	r19, r0
    18f0:	30 5d       	subi	r19, 0xD0	; 208
    18f2:	31 93       	st	Z+, r19
    18f4:	de f6       	brtc	.-74     	; 0x18ac <__ultoa_invert+0xe>
    18f6:	cf 01       	movw	r24, r30
    18f8:	08 95       	ret
    18fa:	46 2f       	mov	r20, r22
    18fc:	47 70       	andi	r20, 0x07	; 7
    18fe:	40 5d       	subi	r20, 0xD0	; 208
    1900:	41 93       	st	Z+, r20
    1902:	b3 e0       	ldi	r27, 0x03	; 3
    1904:	0f d0       	rcall	.+30     	; 0x1924 <__ultoa_invert+0x86>
    1906:	c9 f7       	brne	.-14     	; 0x18fa <__ultoa_invert+0x5c>
    1908:	f6 cf       	rjmp	.-20     	; 0x18f6 <__ultoa_invert+0x58>
    190a:	46 2f       	mov	r20, r22
    190c:	4f 70       	andi	r20, 0x0F	; 15
    190e:	40 5d       	subi	r20, 0xD0	; 208
    1910:	4a 33       	cpi	r20, 0x3A	; 58
    1912:	18 f0       	brcs	.+6      	; 0x191a <__ultoa_invert+0x7c>
    1914:	49 5d       	subi	r20, 0xD9	; 217
    1916:	31 fd       	sbrc	r19, 1
    1918:	40 52       	subi	r20, 0x20	; 32
    191a:	41 93       	st	Z+, r20
    191c:	02 d0       	rcall	.+4      	; 0x1922 <__ultoa_invert+0x84>
    191e:	a9 f7       	brne	.-22     	; 0x190a <__ultoa_invert+0x6c>
    1920:	ea cf       	rjmp	.-44     	; 0x18f6 <__ultoa_invert+0x58>
    1922:	b4 e0       	ldi	r27, 0x04	; 4
    1924:	a6 95       	lsr	r26
    1926:	97 95       	ror	r25
    1928:	87 95       	ror	r24
    192a:	77 95       	ror	r23
    192c:	67 95       	ror	r22
    192e:	ba 95       	dec	r27
    1930:	c9 f7       	brne	.-14     	; 0x1924 <__ultoa_invert+0x86>
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	61 05       	cpc	r22, r1
    1936:	71 05       	cpc	r23, r1
    1938:	08 95       	ret
    193a:	9b 01       	movw	r18, r22
    193c:	ac 01       	movw	r20, r24
    193e:	0a 2e       	mov	r0, r26
    1940:	06 94       	lsr	r0
    1942:	57 95       	ror	r21
    1944:	47 95       	ror	r20
    1946:	37 95       	ror	r19
    1948:	27 95       	ror	r18
    194a:	ba 95       	dec	r27
    194c:	c9 f7       	brne	.-14     	; 0x1940 <__ultoa_invert+0xa2>
    194e:	62 0f       	add	r22, r18
    1950:	73 1f       	adc	r23, r19
    1952:	84 1f       	adc	r24, r20
    1954:	95 1f       	adc	r25, r21
    1956:	a0 1d       	adc	r26, r0
    1958:	08 95       	ret

0000195a <_exit>:
    195a:	f8 94       	cli

0000195c <__stop_program>:
    195c:	ff cf       	rjmp	.-2      	; 0x195c <__stop_program>
