
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000221a  000022ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000221a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080011e  0080011e  000022cc  2**0
                  ALLOC
  3 .stab         000025b0  00000000  00000000  000022cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e07  00000000  00000000  0000487c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003a0  00000000  00000000  00005683  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000938  00000000  00000000  00005a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005727  00000000  00000000  0000635b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001831  00000000  00000000  0000ba82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004a0f  00000000  00000000  0000d2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000580  00000000  00000000  00011cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000029d8  00000000  00000000  00012244  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000308b  00000000  00000000  00014c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000b38  00000000  00000000  00017ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000478  00000000  00000000  000187df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	dc c1       	rjmp	.+952    	; 0x3ba <__ctors_end>
       2:	00 00       	nop
       4:	f8 c1       	rjmp	.+1008   	; 0x3f6 <__bad_interrupt>
       6:	00 00       	nop
       8:	f6 c1       	rjmp	.+1004   	; 0x3f6 <__bad_interrupt>
       a:	00 00       	nop
       c:	f4 c1       	rjmp	.+1000   	; 0x3f6 <__bad_interrupt>
       e:	00 00       	nop
      10:	f2 c1       	rjmp	.+996    	; 0x3f6 <__bad_interrupt>
      12:	00 00       	nop
      14:	f0 c1       	rjmp	.+992    	; 0x3f6 <__bad_interrupt>
      16:	00 00       	nop
      18:	ee c1       	rjmp	.+988    	; 0x3f6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ec c1       	rjmp	.+984    	; 0x3f6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ea c1       	rjmp	.+980    	; 0x3f6 <__bad_interrupt>
      22:	00 00       	nop
      24:	e8 c1       	rjmp	.+976    	; 0x3f6 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__vector_10>
      2c:	e4 c1       	rjmp	.+968    	; 0x3f6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e2 c1       	rjmp	.+964    	; 0x3f6 <__bad_interrupt>
      32:	00 00       	nop
      34:	e0 c1       	rjmp	.+960    	; 0x3f6 <__bad_interrupt>
      36:	00 00       	nop
      38:	de c1       	rjmp	.+956    	; 0x3f6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	dc c1       	rjmp	.+952    	; 0x3f6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	da c1       	rjmp	.+948    	; 0x3f6 <__bad_interrupt>
      42:	00 00       	nop
      44:	d8 c1       	rjmp	.+944    	; 0x3f6 <__bad_interrupt>
      46:	00 00       	nop
      48:	d6 c1       	rjmp	.+940    	; 0x3f6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d4 c1       	rjmp	.+936    	; 0x3f6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d2 c1       	rjmp	.+932    	; 0x3f6 <__bad_interrupt>
      52:	00 00       	nop
      54:	d0 c1       	rjmp	.+928    	; 0x3f6 <__bad_interrupt>
      56:	00 00       	nop
      58:	ce c1       	rjmp	.+924    	; 0x3f6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cc c1       	rjmp	.+920    	; 0x3f6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ca c1       	rjmp	.+916    	; 0x3f6 <__bad_interrupt>
      62:	00 00       	nop
      64:	c8 c1       	rjmp	.+912    	; 0x3f6 <__bad_interrupt>
      66:	00 00       	nop
      68:	c6 c1       	rjmp	.+908    	; 0x3f6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c4 c1       	rjmp	.+904    	; 0x3f6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c2 c1       	rjmp	.+900    	; 0x3f6 <__bad_interrupt>
      72:	00 00       	nop
      74:	c0 c1       	rjmp	.+896    	; 0x3f6 <__bad_interrupt>
      76:	00 00       	nop
      78:	be c1       	rjmp	.+892    	; 0x3f6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bc c1       	rjmp	.+888    	; 0x3f6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ba c1       	rjmp	.+884    	; 0x3f6 <__bad_interrupt>
      82:	00 00       	nop
      84:	b8 c1       	rjmp	.+880    	; 0x3f6 <__bad_interrupt>
      86:	00 00       	nop
      88:	b6 c1       	rjmp	.+876    	; 0x3f6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b4 c1       	rjmp	.+872    	; 0x3f6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b2 c1       	rjmp	.+868    	; 0x3f6 <__bad_interrupt>
      92:	00 00       	nop
      94:	b0 c1       	rjmp	.+864    	; 0x3f6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4337>:
      98:	1b 5b 33 31 6d 50 61 63 6b 65 74 20 74 6f 6f 20     .[31mPacket too 
      a8:	6c 61 72 67 65 2e 0d 0a 1b 5b 33 37 6d 00           large....[37m.

000000b6 <__c.4335>:
      b6:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
      c6:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

000000cf <__c.4333>:
      cf:	1b 5b 33 31 6d 50 61 63 6b 65 74 20 52 65 63 65     .[31mPacket Rece
      df:	70 74 69 6f 6e 20 45 72 72 6f 72 2e 0d 0a 20 2d     ption Error... -
      ef:	2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64     - Error Code: %d
      ff:	0d 0a 1b 5b 33 37 6d 00                             ...[37m.

00000107 <__c.4326>:
     107:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     117:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     127:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     137:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     147:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     157:	1b 5b 33 37 6d 00                                   .[37m.

0000015d <__c.4319>:
     15d:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     16d:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     17d:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000018c <__c.4314>:
     18c:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
     19c:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

000001a7 <__c.4312>:
     1a7:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
     1b7:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

000001c3 <__c.4310>:
     1c3:	1b 5b 33 31 6d 45 72 72 6f 72 20 47 65 74 74 69     .[31mError Getti
     1d3:	6e 67 20 56 65 6e 64 6f 72 20 49 44 2e 0d 0a 20     ng Vendor ID... 
     1e3:	2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25     -- Error Code: %
     1f3:	64 0d 0a 1b 5b 33 37 6d 00                          d...[37m.

000001fc <__c.4307>:
     1fc:	1b 5b 33 31 6d 45 72 72 6f 72 20 53 65 74 74 69     .[31mError Setti
     20c:	6e 67 20 44 65 76 69 63 65 20 50 61 63 6b 65 74     ng Device Packet
     21c:	20 46 69 6c 74 65 72 2e 0d 0a 20 2d 2d 20 45 72      Filter... -- Er
     22c:	72 6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b     ror Code: %d...[
     23c:	33 37 6d 00                                         37m.

00000240 <__c.4304>:
     240:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     250:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
     260:	74 65 73 2e 0d 0a 00                                tes....

00000267 <__c.4302>:
     267:	1b 5b 33 31 6d 45 72 72 6f 72 20 49 6e 69 74 69     .[31mError Initi
     277:	61 6c 69 7a 69 6e 67 20 44 65 76 69 63 65 2e 0d     alizing Device..
     287:	0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a     . -- Error Code:
     297:	20 25 64 0d 0a 1b 5b 33 37 6d 00                     %d...[37m.

000002a2 <__c.4299>:
     2a2:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     2b2:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     2c2:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     2d2:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     2e2:	37 6d 00                                            7m.

000002e5 <__c.4297>:
     2e5:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     2f5:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000002ff <__c.4295>:
     2ff:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     30f:	69 63 65 2e 0d 0a 00                                ice....

00000316 <__c.4293>:
     316:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     326:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     336:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000340 <__c.4290>:
     340:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     350:	61 74 61 2e 0d 0a 00                                ata....

00000357 <__c.4285>:
     357:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     367:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     377:	00                                                  .

00000378 <__c.4280>:
     378:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     388:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000395 <__c.4271>:
     395:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
     3a5:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     3b5:	5b 33 37 6d 00                                      [37m.

000003ba <__ctors_end>:
     3ba:	11 24       	eor	r1, r1
     3bc:	1f be       	out	0x3f, r1	; 63
     3be:	cf ef       	ldi	r28, 0xFF	; 255
     3c0:	d0 e2       	ldi	r29, 0x20	; 32
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	cd bf       	out	0x3d, r28	; 61

000003c6 <__do_copy_data>:
     3c6:	11 e0       	ldi	r17, 0x01	; 1
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b1 e0       	ldi	r27, 0x01	; 1
     3cc:	ea e1       	ldi	r30, 0x1A	; 26
     3ce:	f2 e2       	ldi	r31, 0x22	; 34
     3d0:	00 e0       	ldi	r16, 0x00	; 0
     3d2:	0b bf       	out	0x3b, r16	; 59
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <__do_copy_data+0x14>
     3d6:	07 90       	elpm	r0, Z+
     3d8:	0d 92       	st	X+, r0
     3da:	ae 31       	cpi	r26, 0x1E	; 30
     3dc:	b1 07       	cpc	r27, r17
     3de:	d9 f7       	brne	.-10     	; 0x3d6 <__do_copy_data+0x10>

000003e0 <__do_clear_bss>:
     3e0:	11 e0       	ldi	r17, 0x01	; 1
     3e2:	ae e1       	ldi	r26, 0x1E	; 30
     3e4:	b1 e0       	ldi	r27, 0x01	; 1
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <.do_clear_bss_start>

000003e8 <.do_clear_bss_loop>:
     3e8:	1d 92       	st	X+, r1

000003ea <.do_clear_bss_start>:
     3ea:	a4 34       	cpi	r26, 0x44	; 68
     3ec:	b1 07       	cpc	r27, r17
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <.do_clear_bss_loop>
     3f0:	29 d2       	rcall	.+1106   	; 0x844 <main>
     3f2:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <_exit>

000003f6 <__bad_interrupt>:
     3f6:	04 ce       	rjmp	.-1016   	; 0x0 <__vectors>

000003f8 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3f8:	9b b1       	in	r25, 0x0b	; 11
     3fa:	9f 70       	andi	r25, 0x0F	; 15
     3fc:	98 2b       	or	r25, r24
     3fe:	9b b9       	out	0x0b, r25	; 11
			}
     400:	08 95       	ret

00000402 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     402:	84 b7       	in	r24, 0x34	; 52
     404:	87 7f       	andi	r24, 0xF7	; 247
     406:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     408:	28 e1       	ldi	r18, 0x18	; 24
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	20 93 60 00 	sts	0x0060, r18
     412:	10 92 60 00 	sts	0x0060, r1
     416:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	80 e8       	ldi	r24, 0x80	; 128
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	80 93 61 00 	sts	0x0061, r24
     424:	90 93 61 00 	sts	0x0061, r25
     428:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     42a:	83 e3       	ldi	r24, 0x33	; 51
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	90 93 cd 00 	sts	0x00CD, r25
     432:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     43c:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     440:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     444:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     446:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     448:	8a b1       	in	r24, 0x0a	; 10
     44a:	80 6f       	ori	r24, 0xF0	; 240
     44c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     44e:	8b b1       	in	r24, 0x0b	; 11
     450:	8f 70       	andi	r24, 0x0F	; 15
     452:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     454:	0e 94 de 0a 	call	0x15bc	; 0x15bc <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <Serial_CreateStream>

00000460 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     460:	88 e7       	ldi	r24, 0x78	; 120
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     468:	80 ea       	ldi	r24, 0xA0	; 160
}
     46a:	c6 cf       	rjmp	.-116    	; 0x3f8 <LEDs_SetAllLEDs>

0000046c <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     46c:	87 e5       	ldi	r24, 0x57	; 87
     46e:	93 e0       	ldi	r25, 0x03	; 3
     470:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     474:	80 e1       	ldi	r24, 0x10	; 16
}
     476:	c0 cf       	rjmp	.-128    	; 0x3f8 <LEDs_SetAllLEDs>

00000478 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     478:	1f 93       	push	r17
     47a:	df 93       	push	r29
     47c:	cf 93       	push	r28
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	2a 97       	sbiw	r28, 0x0a	; 10
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
	puts_P(PSTR("Getting Config Data.\r\n"));
     48e:	80 e4       	ldi	r24, 0x40	; 64
     490:	93 e0       	ldi	r25, 0x03	; 3
     492:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     496:	19 d2       	rcall	.+1074   	; 0x8ca <ProcessConfigurationDescriptor>
     498:	18 2f       	mov	r17, r24
     49a:	88 23       	and	r24, r24
     49c:	01 f1       	breq	.+64     	; 0x4de <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
	{
		if (ErrorCode == ControlError)
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	19 f4       	brne	.+6      	; 0x4a8 <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     4a2:	86 e1       	ldi	r24, 0x16	; 22
     4a4:	93 e0       	ldi	r25, 0x03	; 3
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     4a8:	8f ef       	ldi	r24, 0xFF	; 255
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <EVENT_USB_Host_DeviceEnumerationComplete+0x3c>
     4b4:	ed b7       	in	r30, 0x3d	; 61
     4b6:	fe b7       	in	r31, 0x3e	; 62
     4b8:	31 96       	adiw	r30, 0x01	; 1
     4ba:	25 ee       	ldi	r18, 0xE5	; 229
     4bc:	32 e0       	ldi	r19, 0x02	; 2
     4be:	ad b7       	in	r26, 0x3d	; 61
     4c0:	be b7       	in	r27, 0x3e	; 62
     4c2:	12 96       	adiw	r26, 0x02	; 2
     4c4:	3c 93       	st	X, r19
     4c6:	2e 93       	st	-X, r18
     4c8:	11 97       	sbiw	r26, 0x01	; 1
     4ca:	12 83       	std	Z+2, r17	; 0x02
     4cc:	13 82       	std	Z+3, r1	; 0x03
     4ce:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	80 e9       	ldi	r24, 0x90	; 144
     4dc:	99 c0       	rjmp	.+306    	; 0x610 <EVENT_USB_Host_DeviceEnumerationComplete+0x198>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <USB_Host_SetDeviceConfiguration>
     4e4:	88 23       	and	r24, r24
     4e6:	79 f0       	breq	.+30     	; 0x506 <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
     4ec:	ed b7       	in	r30, 0x3d	; 61
     4ee:	fe b7       	in	r31, 0x3e	; 62
     4f0:	31 96       	adiw	r30, 0x01	; 1
     4f2:	22 ea       	ldi	r18, 0xA2	; 162
     4f4:	32 e0       	ldi	r19, 0x02	; 2
     4f6:	ad b7       	in	r26, 0x3d	; 61
     4f8:	be b7       	in	r27, 0x3e	; 62
     4fa:	12 96       	adiw	r26, 0x02	; 2
     4fc:	3c 93       	st	X, r19
     4fe:	2e 93       	st	-X, r18
     500:	11 97       	sbiw	r26, 0x01	; 1
     502:	82 83       	std	Z+2, r24	; 0x02
     504:	e3 cf       	rjmp	.-58     	; 0x4cc <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	uint16_t DeviceMaxPacketSize;
	if ((ErrorCode = RNDIS_InitializeDevice(1024, &DeviceMaxPacketSize)) != HOST_SENDCONTROL_Successful)
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	94 e0       	ldi	r25, 0x04	; 4
     50a:	be 01       	movw	r22, r28
     50c:	6f 5f       	subi	r22, 0xFF	; 255
     50e:	7f 4f       	sbci	r23, 0xFF	; 255
     510:	b9 d2       	rcall	.+1394   	; 0xa84 <RNDIS_InitializeDevice>
     512:	88 23       	and	r24, r24
     514:	41 f0       	breq	.+16     	; 0x526 <EVENT_USB_Host_DeviceEnumerationComplete+0xae>
	{
		printf_P(PSTR(ESC_FG_RED "Error Initializing Device.\r\n"
     516:	00 d0       	rcall	.+0      	; 0x518 <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
     518:	00 d0       	rcall	.+0      	; 0x51a <EVENT_USB_Host_DeviceEnumerationComplete+0xa2>
     51a:	ed b7       	in	r30, 0x3d	; 61
     51c:	fe b7       	in	r31, 0x3e	; 62
     51e:	31 96       	adiw	r30, 0x01	; 1
     520:	27 e6       	ldi	r18, 0x67	; 103
     522:	32 e0       	ldi	r19, 0x02	; 2
     524:	41 c0       	rjmp	.+130    	; 0x5a8 <EVENT_USB_Host_DeviceEnumerationComplete+0x130>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device Max Transfer Size: %lu bytes.\r\n"), DeviceMaxPacketSize);
     526:	00 d0       	rcall	.+0      	; 0x528 <EVENT_USB_Host_DeviceEnumerationComplete+0xb0>
     528:	00 d0       	rcall	.+0      	; 0x52a <EVENT_USB_Host_DeviceEnumerationComplete+0xb2>
     52a:	80 e4       	ldi	r24, 0x40	; 64
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	ed b7       	in	r30, 0x3d	; 61
     530:	fe b7       	in	r31, 0x3e	; 62
     532:	92 83       	std	Z+2, r25	; 0x02
     534:	81 83       	std	Z+1, r24	; 0x01
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	94 83       	std	Z+4, r25	; 0x04
     53c:	83 83       	std	Z+3, r24	; 0x03
     53e:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <printf_P>

	/* We set the default filter to only receive packets we would be interested in */
	uint32_t PacketFilter = (REMOTE_NDIS_PACKET_DIRECTED | REMOTE_NDIS_PACKET_BROADCAST | REMOTE_NDIS_PACKET_ALL_MULTICAST);
     542:	8d e0       	ldi	r24, 0x0D	; 13
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	a0 e0       	ldi	r26, 0x00	; 0
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	8b 83       	std	Y+3, r24	; 0x03
     54c:	9c 83       	std	Y+4, r25	; 0x04
     54e:	ad 83       	std	Y+5, r26	; 0x05
     550:	be 83       	std	Y+6, r27	; 0x06
	if ((ErrorCode = RNDIS_SetRNDISProperty(OID_GEN_CURRENT_PACKET_FILTER,
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	6e e0       	ldi	r22, 0x0E	; 14
     55c:	71 e0       	ldi	r23, 0x01	; 1
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	ae 01       	movw	r20, r28
     564:	4d 5f       	subi	r20, 0xFD	; 253
     566:	5f 4f       	sbci	r21, 0xFF	; 255
     568:	24 e0       	ldi	r18, 0x04	; 4
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	fd d2       	rcall	.+1530   	; 0xb68 <RNDIS_SetRNDISProperty>
     56e:	88 23       	and	r24, r24
     570:	41 f0       	breq	.+16     	; 0x582 <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
	                                        &PacketFilter, sizeof(PacketFilter))) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Error Setting Device Packet Filter.\r\n"
     572:	00 d0       	rcall	.+0      	; 0x574 <EVENT_USB_Host_DeviceEnumerationComplete+0xfc>
     574:	00 d0       	rcall	.+0      	; 0x576 <EVENT_USB_Host_DeviceEnumerationComplete+0xfe>
     576:	ed b7       	in	r30, 0x3d	; 61
     578:	fe b7       	in	r31, 0x3e	; 62
     57a:	31 96       	adiw	r30, 0x01	; 1
     57c:	2c ef       	ldi	r18, 0xFC	; 252
     57e:	31 e0       	ldi	r19, 0x01	; 1
     580:	13 c0       	rjmp	.+38     	; 0x5a8 <EVENT_USB_Host_DeviceEnumerationComplete+0x130>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	uint32_t VendorID;
	if ((ErrorCode = RNDIS_QueryRNDISProperty(OID_GEN_VENDOR_ID,
     582:	6c e0       	ldi	r22, 0x0C	; 12
     584:	71 e0       	ldi	r23, 0x01	; 1
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	ae 01       	movw	r20, r28
     58c:	49 5f       	subi	r20, 0xF9	; 249
     58e:	5f 4f       	sbci	r21, 0xFF	; 255
     590:	24 e0       	ldi	r18, 0x04	; 4
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	8c d3       	rcall	.+1816   	; 0xcae <RNDIS_QueryRNDISProperty>
     596:	88 23       	and	r24, r24
     598:	d9 f0       	breq	.+54     	; 0x5d0 <EVENT_USB_Host_DeviceEnumerationComplete+0x158>
	                                          &VendorID, sizeof(VendorID))) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Error Getting Vendor ID.\r\n"
     59a:	00 d0       	rcall	.+0      	; 0x59c <EVENT_USB_Host_DeviceEnumerationComplete+0x124>
     59c:	00 d0       	rcall	.+0      	; 0x59e <EVENT_USB_Host_DeviceEnumerationComplete+0x126>
     59e:	ed b7       	in	r30, 0x3d	; 61
     5a0:	fe b7       	in	r31, 0x3e	; 62
     5a2:	31 96       	adiw	r30, 0x01	; 1
     5a4:	23 ec       	ldi	r18, 0xC3	; 195
     5a6:	31 e0       	ldi	r19, 0x01	; 1
     5a8:	ad b7       	in	r26, 0x3d	; 61
     5aa:	be b7       	in	r27, 0x3e	; 62
     5ac:	12 96       	adiw	r26, 0x02	; 2
     5ae:	3c 93       	st	X, r19
     5b0:	2e 93       	st	-X, r18
     5b2:	11 97       	sbiw	r26, 0x01	; 1
     5b4:	82 83       	std	Z+2, r24	; 0x02
     5b6:	13 82       	std	Z+3, r1	; 0x03
     5b8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <printf_P>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	80 e9       	ldi	r24, 0x90	; 144
     5c6:	18 df       	rcall	.-464    	; 0x3f8 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <USB_Host_SetDeviceConfiguration>
		return;
     5ce:	21 c0       	rjmp	.+66     	; 0x612 <EVENT_USB_Host_DeviceEnumerationComplete+0x19a>
	}

	printf_P(PSTR("Device Vendor ID: 0x%08lX\r\n"), VendorID);
     5d0:	00 d0       	rcall	.+0      	; 0x5d2 <EVENT_USB_Host_DeviceEnumerationComplete+0x15a>
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x15c>
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <EVENT_USB_Host_DeviceEnumerationComplete+0x15e>
     5d6:	87 ea       	ldi	r24, 0xA7	; 167
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	ed b7       	in	r30, 0x3d	; 61
     5dc:	fe b7       	in	r31, 0x3e	; 62
     5de:	92 83       	std	Z+2, r25	; 0x02
     5e0:	81 83       	std	Z+1, r24	; 0x01
     5e2:	8f 81       	ldd	r24, Y+7	; 0x07
     5e4:	98 85       	ldd	r25, Y+8	; 0x08
     5e6:	a9 85       	ldd	r26, Y+9	; 0x09
     5e8:	ba 85       	ldd	r27, Y+10	; 0x0a
     5ea:	83 83       	std	Z+3, r24	; 0x03
     5ec:	94 83       	std	Z+4, r25	; 0x04
     5ee:	a5 83       	std	Z+5, r26	; 0x05
     5f0:	b6 83       	std	Z+6, r27	; 0x06
     5f2:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <printf_P>

	puts_P(PSTR("RNDIS Device Enumerated.\r\n"));
     5f6:	8d b7       	in	r24, 0x3d	; 61
     5f8:	9e b7       	in	r25, 0x3e	; 62
     5fa:	06 96       	adiw	r24, 0x06	; 6
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	9e bf       	out	0x3e, r25	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	8d bf       	out	0x3d, r24	; 61
     606:	8c e8       	ldi	r24, 0x8C	; 140
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     60e:	80 e6       	ldi	r24, 0x60	; 96
     610:	f3 de       	rcall	.-538    	; 0x3f8 <LEDs_SetAllLEDs>
}
     612:	2a 96       	adiw	r28, 0x0a	; 10
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	de bf       	out	0x3e, r29	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	cd bf       	out	0x3d, r28	; 61
     61e:	cf 91       	pop	r28
     620:	df 91       	pop	r29
     622:	1f 91       	pop	r17
     624:	08 95       	ret

00000626 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     626:	df 93       	push	r29
     628:	cf 93       	push	r28
     62a:	0f 92       	push	r0
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     630:	89 83       	std	Y+1, r24	; 0x01
     632:	5c d7       	rcall	.+3768   	; 0x14ec <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     634:	00 d0       	rcall	.+0      	; 0x636 <EVENT_USB_Host_HostError+0x10>
     636:	00 d0       	rcall	.+0      	; 0x638 <EVENT_USB_Host_HostError+0x12>
     638:	ed b7       	in	r30, 0x3d	; 61
     63a:	fe b7       	in	r31, 0x3e	; 62
     63c:	31 96       	adiw	r30, 0x01	; 1
     63e:	2d e5       	ldi	r18, 0x5D	; 93
     640:	31 e0       	ldi	r19, 0x01	; 1
     642:	ad b7       	in	r26, 0x3d	; 61
     644:	be b7       	in	r27, 0x3e	; 62
     646:	12 96       	adiw	r26, 0x02	; 2
     648:	3c 93       	st	X, r19
     64a:	2e 93       	st	-X, r18
     64c:	11 97       	sbiw	r26, 0x01	; 1
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	82 83       	std	Z+2, r24	; 0x02
     652:	13 82       	std	Z+3, r1	; 0x03
     654:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	80 e9       	ldi	r24, 0x90	; 144
     662:	ca de       	rcall	.-620    	; 0x3f8 <LEDs_SetAllLEDs>
     664:	ff cf       	rjmp	.-2      	; 0x664 <EVENT_USB_Host_HostError+0x3e>

00000666 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     666:	90 91 2f 01 	lds	r25, 0x012F
     66a:	2d b7       	in	r18, 0x3d	; 61
     66c:	3e b7       	in	r19, 0x3e	; 62
     66e:	28 50       	subi	r18, 0x08	; 8
     670:	30 40       	sbci	r19, 0x00	; 0
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	3e bf       	out	0x3e, r19	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	2d bf       	out	0x3d, r18	; 61
     67c:	ed b7       	in	r30, 0x3d	; 61
     67e:	fe b7       	in	r31, 0x3e	; 62
     680:	31 96       	adiw	r30, 0x01	; 1
     682:	27 e0       	ldi	r18, 0x07	; 7
     684:	31 e0       	ldi	r19, 0x01	; 1
     686:	ad b7       	in	r26, 0x3d	; 61
     688:	be b7       	in	r27, 0x3e	; 62
     68a:	12 96       	adiw	r26, 0x02	; 2
     68c:	3c 93       	st	X, r19
     68e:	2e 93       	st	-X, r18
     690:	11 97       	sbiw	r26, 0x01	; 1
     692:	82 83       	std	Z+2, r24	; 0x02
     694:	13 82       	std	Z+3, r1	; 0x03
     696:	64 83       	std	Z+4, r22	; 0x04
     698:	15 82       	std	Z+5, r1	; 0x05
     69a:	96 83       	std	Z+6, r25	; 0x06
     69c:	17 82       	std	Z+7, r1	; 0x07
     69e:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     6a2:	2d b7       	in	r18, 0x3d	; 61
     6a4:	3e b7       	in	r19, 0x3e	; 62
     6a6:	28 5f       	subi	r18, 0xF8	; 248
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	3e bf       	out	0x3e, r19	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	2d bf       	out	0x3d, r18	; 61
     6b4:	80 e9       	ldi	r24, 0x90	; 144
}
     6b6:	a0 ce       	rjmp	.-704    	; 0x3f8 <LEDs_SetAllLEDs>

000006b8 <RNDISHost_Task>:

/** Task to read in data received from the attached RNDIS device and print it to the serial port.
 */
void RNDISHost_Task(void)
{
     6b8:	8f 92       	push	r8
     6ba:	9f 92       	push	r9
     6bc:	af 92       	push	r10
     6be:	bf 92       	push	r11
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	df 93       	push	r29
     6ce:	cf 93       	push	r28
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <RNDISHost_Task+0x1a>
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
	Pipe_Freeze();

	printf("\r\n\r\n");

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     6d6:	ad b6       	in	r10, 0x3d	; 61
     6d8:	be b6       	in	r11, 0x3e	; 62

/** Task to read in data received from the attached RNDIS device and print it to the serial port.
 */
void RNDISHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     6da:	80 91 2f 01 	lds	r24, 0x012F
     6de:	8b 30       	cpi	r24, 0x0B	; 11
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <RNDISHost_Task+0x2c>
     6e2:	9c c0       	rjmp	.+312    	; 0x81c <RNDISHost_Task+0x164>
	  return;

	uint8_t ErrorCode;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     6e4:	80 e2       	ldi	r24, 0x20	; 32
     6e6:	88 de       	rcall	.-752    	; 0x3f8 <LEDs_SetAllLEDs>

	uint16_t PacketLength;
	if ((ErrorCode = RNDIS_GetPacketLength(&PacketLength)) != HOST_SENDCONTROL_Successful)
     6e8:	ce 01       	movw	r24, r28
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	7f d3       	rcall	.+1790   	; 0xdec <RNDIS_GetPacketLength>
     6ee:	88 23       	and	r24, r24
     6f0:	b1 f0       	breq	.+44     	; 0x71e <RNDISHost_Task+0x66>
	{
		printf_P(PSTR(ESC_FG_RED "Packet Reception Error.\r\n"
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <RNDISHost_Task+0x3c>
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <RNDISHost_Task+0x3e>
     6f6:	ed b7       	in	r30, 0x3d	; 61
     6f8:	fe b7       	in	r31, 0x3e	; 62
     6fa:	31 96       	adiw	r30, 0x01	; 1
     6fc:	2f ec       	ldi	r18, 0xCF	; 207
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	ad b7       	in	r26, 0x3d	; 61
     702:	be b7       	in	r27, 0x3e	; 62
     704:	12 96       	adiw	r26, 0x02	; 2
     706:	3c 93       	st	X, r19
     708:	2e 93       	st	-X, r18
     70a:	11 97       	sbiw	r26, 0x01	; 1
     70c:	82 83       	std	Z+2, r24	; 0x02
     70e:	13 82       	std	Z+3, r1	; 0x03
     710:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <printf_P>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
		return;
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	7f c0       	rjmp	.+254    	; 0x81c <RNDISHost_Task+0x164>
	}

	if (!(PacketLength))
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	9a 81       	ldd	r25, Y+2	; 0x02
     722:	00 97       	sbiw	r24, 0x00	; 0
     724:	09 f4       	brne	.+2      	; 0x728 <RNDISHost_Task+0x70>
     726:	7a c0       	rjmp	.+244    	; 0x81c <RNDISHost_Task+0x164>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     728:	80 91 a9 00 	lds	r24, 0x00A9
     72c:	8f 7b       	andi	r24, 0xBF	; 191
     72e:	80 93 a9 00 	sts	0x00A9, r24
	  return;

	Pipe_Unfreeze();

	printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);
     732:	00 d0       	rcall	.+0      	; 0x734 <RNDISHost_Task+0x7c>
     734:	00 d0       	rcall	.+0      	; 0x736 <RNDISHost_Task+0x7e>
     736:	86 eb       	ldi	r24, 0xB6	; 182
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	ed b7       	in	r30, 0x3d	; 61
     73c:	fe b7       	in	r31, 0x3e	; 62
     73e:	92 83       	std	Z+2, r25	; 0x02
     740:	81 83       	std	Z+1, r24	; 0x01
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	9a 81       	ldd	r25, Y+2	; 0x02
     746:	94 83       	std	Z+4, r25	; 0x04
     748:	83 83       	std	Z+3, r24	; 0x03
     74a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <printf_P>

	if (PacketLength > 1024)
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	69 81       	ldd	r22, Y+1	; 0x01
     758:	7a 81       	ldd	r23, Y+2	; 0x02
     75a:	f4 e0       	ldi	r31, 0x04	; 4
     75c:	61 30       	cpi	r22, 0x01	; 1
     75e:	7f 07       	cpc	r23, r31
     760:	50 f0       	brcs	.+20     	; 0x776 <RNDISHost_Task+0xbe>
	{
		puts_P(PSTR(ESC_FG_RED "Packet too large.\r\n" ESC_FG_WHITE));
     762:	88 e9       	ldi	r24, 0x98	; 152
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>
		Pipe_Discard_Stream(PacketLength, NULL);
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	62 d5       	rcall	.+2756   	; 0x1238 <Pipe_Discard_Stream>
     774:	43 c0       	rjmp	.+134    	; 0x7fc <RNDISHost_Task+0x144>
     776:	ed b6       	in	r14, 0x3d	; 61
     778:	fe b6       	in	r15, 0x3e	; 62
     77a:	9d b6       	in	r9, 0x3d	; 61
     77c:	8f 2c       	mov	r8, r15
	}
	else
	{
		uint8_t PacketBuffer[PacketLength];
     77e:	8d b7       	in	r24, 0x3d	; 61
     780:	9e b7       	in	r25, 0x3e	; 62
     782:	86 1b       	sub	r24, r22
     784:	97 0b       	sbc	r25, r23
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	9e bf       	out	0x3e, r25	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	8d bf       	out	0x3d, r24	; 61
     790:	0d b7       	in	r16, 0x3d	; 61
     792:	1e b7       	in	r17, 0x3e	; 62
     794:	0f 5f       	subi	r16, 0xFF	; 255
     796:	1f 4f       	sbci	r17, 0xFF	; 255

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength, NULL);
     798:	c8 01       	movw	r24, r16
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	97 d5       	rcall	.+2862   	; 0x12ce <Pipe_Read_Stream_LE>
     7a0:	e0 2e       	mov	r14, r16
     7a2:	f1 2e       	mov	r15, r17

		for (uint16_t i = 0; i < PacketLength; i++)
     7a4:	00 e0       	ldi	r16, 0x00	; 0
     7a6:	10 e0       	ldi	r17, 0x00	; 0
		  printf("0x%02x ", PacketBuffer[i]);
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	c8 2e       	mov	r12, r24
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	d8 2e       	mov	r13, r24
	{
		uint8_t PacketBuffer[PacketLength];

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength, NULL);

		for (uint16_t i = 0; i < PacketLength; i++)
     7b0:	18 c0       	rjmp	.+48     	; 0x7e2 <RNDISHost_Task+0x12a>
		  printf("0x%02x ", PacketBuffer[i]);
     7b2:	d7 01       	movw	r26, r14
     7b4:	8d 91       	ld	r24, X+
     7b6:	7d 01       	movw	r14, r26
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <RNDISHost_Task+0x102>
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <RNDISHost_Task+0x104>
     7bc:	ed b7       	in	r30, 0x3d	; 61
     7be:	fe b7       	in	r31, 0x3e	; 62
     7c0:	31 96       	adiw	r30, 0x01	; 1
     7c2:	ad b7       	in	r26, 0x3d	; 61
     7c4:	be b7       	in	r27, 0x3e	; 62
     7c6:	12 96       	adiw	r26, 0x02	; 2
     7c8:	dc 92       	st	X, r13
     7ca:	ce 92       	st	-X, r12
     7cc:	11 97       	sbiw	r26, 0x01	; 1
     7ce:	82 83       	std	Z+2, r24	; 0x02
     7d0:	13 82       	std	Z+3, r1	; 0x03
     7d2:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <printf>
	{
		uint8_t PacketBuffer[PacketLength];

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength, NULL);

		for (uint16_t i = 0; i < PacketLength; i++)
     7d6:	0f 5f       	subi	r16, 0xFF	; 255
     7d8:	1f 4f       	sbci	r17, 0xFF	; 255
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	9a 81       	ldd	r25, Y+2	; 0x02
     7e6:	08 17       	cp	r16, r24
     7e8:	19 07       	cpc	r17, r25
     7ea:	18 f3       	brcs	.-58     	; 0x7b2 <RNDISHost_Task+0xfa>
     7ec:	94 01       	movw	r18, r8
     7ee:	83 2f       	mov	r24, r19
     7f0:	98 2d       	mov	r25, r8
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	9e bf       	out	0x3e, r25	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	8d bf       	out	0x3d, r24	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     7fc:	80 91 a6 00 	lds	r24, 0x00A6
     800:	8e 77       	andi	r24, 0x7E	; 126
     802:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     806:	80 91 a9 00 	lds	r24, 0x00A9
     80a:	80 64       	ori	r24, 0x40	; 64
     80c:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	printf("\r\n\r\n");
     810:	88 e0       	ldi	r24, 0x08	; 8
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <puts>

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     818:	80 e6       	ldi	r24, 0x60	; 96
     81a:	ee dd       	rcall	.-1060   	; 0x3f8 <LEDs_SetAllLEDs>
}
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	be be       	out	0x3e, r11	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	ad be       	out	0x3d, r10	; 61
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
     82a:	cf 91       	pop	r28
     82c:	df 91       	pop	r29
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	df 90       	pop	r13
     838:	cf 90       	pop	r12
     83a:	bf 90       	pop	r11
     83c:	af 90       	pop	r10
     83e:	9f 90       	pop	r9
     840:	8f 90       	pop	r8
     842:	08 95       	ret

00000844 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     844:	de dd       	rcall	.-1092   	; 0x402 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "RNDIS Host Demo running.\r\n" ESC_FG_WHITE));
     846:	85 e9       	ldi	r24, 0x95	; 149
     848:	93 e0       	ldi	r25, 0x03	; 3
     84a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     84e:	80 e1       	ldi	r24, 0x10	; 16
     850:	d3 dd       	rcall	.-1114   	; 0x3f8 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     852:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		RNDISHost_Task();
     854:	31 df       	rcall	.-414    	; 0x6b8 <RNDISHost_Task>

		USB_USBTask();
     856:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <USB_USBTask>
     85a:	fc cf       	rjmp	.-8      	; 0x854 <main+0x10>

0000085c <DComp_NextCDCControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCControlInterface(void* CurrentDescriptor)
{
     85c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     85e:	81 81       	ldd	r24, Z+1	; 0x01
     860:	84 30       	cpi	r24, 0x04	; 4
     862:	49 f4       	brne	.+18     	; 0x876 <DComp_NextCDCControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
     864:	85 81       	ldd	r24, Z+5	; 0x05
     866:	82 30       	cpi	r24, 0x02	; 2
     868:	31 f4       	brne	.+12     	; 0x876 <DComp_NextCDCControlInterface+0x1a>
     86a:	86 81       	ldd	r24, Z+6	; 0x06
     86c:	82 30       	cpi	r24, 0x02	; 2
     86e:	19 f4       	brne	.+6      	; 0x876 <DComp_NextCDCControlInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
     870:	87 81       	ldd	r24, Z+7	; 0x07
     872:	8f 3f       	cpi	r24, 0xFF	; 255
     874:	11 f0       	breq	.+4      	; 0x87a <DComp_NextCDCControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	08 95       	ret
		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
		    (Interface->Protocol == CDC_CSCP_VendorSpecificProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     87a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     87c:	08 95       	ret

0000087e <DComp_NextCDCDataInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC data Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterface(void* CurrentDescriptor)
{
     87e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     880:	81 81       	ldd	r24, Z+1	; 0x01
     882:	84 30       	cpi	r24, 0x04	; 4
     884:	49 f4       	brne	.+18     	; 0x898 <DComp_NextCDCDataInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
     886:	85 81       	ldd	r24, Z+5	; 0x05
     888:	8a 30       	cpi	r24, 0x0A	; 10
     88a:	31 f4       	brne	.+12     	; 0x898 <DComp_NextCDCDataInterface+0x1a>
     88c:	86 81       	ldd	r24, Z+6	; 0x06
     88e:	88 23       	and	r24, r24
     890:	19 f4       	brne	.+6      	; 0x898 <DComp_NextCDCDataInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
     892:	87 81       	ldd	r24, Z+7	; 0x07
     894:	88 23       	and	r24, r24
     896:	11 f0       	breq	.+4      	; 0x89c <DComp_NextCDCDataInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	08 95       	ret
		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
		    (Interface->Protocol == CDC_CSCP_NoDataProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     89c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     89e:	08 95       	ret

000008a0 <DComp_NextCDCDataInterfaceEndpoint>:
 *  using a different comparator to determine if it is another CDC class interface).
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterfaceEndpoint(void* CurrentDescriptor)
{
     8a0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     8a2:	81 81       	ldd	r24, Z+1	; 0x01
     8a4:	85 30       	cpi	r24, 0x05	; 5
     8a6:	49 f4       	brne	.+18     	; 0x8ba <DComp_NextCDCDataInterfaceEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
     8a8:	83 81       	ldd	r24, Z+3	; 0x03
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	83 70       	andi	r24, 0x03	; 3
     8ae:	90 70       	andi	r25, 0x00	; 0
     8b0:	02 97       	sbiw	r24, 0x02	; 2
     8b2:	82 30       	cpi	r24, 0x02	; 2
     8b4:	91 05       	cpc	r25, r1
     8b6:	18 f4       	brcc	.+6      	; 0x8be <DComp_NextCDCDataInterfaceEndpoint+0x1e>
     8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <DComp_NextCDCDataInterfaceEndpoint+0x22>
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     8ba:	84 30       	cpi	r24, 0x04	; 4
     8bc:	21 f0       	breq	.+8      	; 0x8c6 <DComp_NextCDCDataInterfaceEndpoint+0x26>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	08 95       	ret

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     8c8:	08 95       	ret

000008ca <ProcessConfigurationDescriptor>:
 *  This routine searches for a RNDIS interface descriptor containing bulk data IN and OUT endpoints, and an interrupt event endpoint.
 *
 *  \return An error code from the \ref RNDISHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     8ca:	6f 92       	push	r6
     8cc:	7f 92       	push	r7
     8ce:	8f 92       	push	r8
     8d0:	9f 92       	push	r9
     8d2:	af 92       	push	r10
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	c4 50       	subi	r28, 0x04	; 4
     8ec:	d2 40       	sbci	r29, 0x02	; 2
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     8f8:	ae 01       	movw	r20, r28
     8fa:	4b 5f       	subi	r20, 0xFB	; 251
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
     8fe:	5a 83       	std	Y+2, r21	; 0x02
     900:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Endpoint_t*  DataINEndpoint         = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint   = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     902:	83 e0       	ldi	r24, 0x03	; 3
     904:	a8 2e       	mov	r10, r24
     906:	b1 2c       	mov	r11, r1
     908:	ac 0e       	add	r10, r28
     90a:	bd 1e       	adc	r11, r29
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	b5 01       	movw	r22, r10
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	32 e0       	ldi	r19, 0x02	; 2
     914:	07 d7       	rcall	.+3598   	; 0x1724 <USB_Host_GetDeviceConfigDescriptor>
     916:	85 30       	cpi	r24, 0x05	; 5
     918:	09 f4       	brne	.+2      	; 0x91c <ProcessConfigurationDescriptor+0x52>
     91a:	72 c0       	rjmp	.+228    	; 0xa00 <ProcessConfigurationDescriptor+0x136>
     91c:	86 30       	cpi	r24, 0x06	; 6
     91e:	89 f0       	breq	.+34     	; 0x942 <ProcessConfigurationDescriptor+0x78>
     920:	88 23       	and	r24, r24
     922:	89 f4       	brne	.+34     	; 0x946 <ProcessConfigurationDescriptor+0x7c>
     924:	ee 24       	eor	r14, r14
     926:	ff 24       	eor	r15, r15
     928:	cc 24       	eor	r12, r12
     92a:	dd 24       	eor	r13, r13
     92c:	00 e0       	ldi	r16, 0x00	; 0
     92e:	10 e0       	ldi	r17, 0x00	; 0
     930:	66 24       	eor	r6, r6
     932:	77 24       	eor	r7, r7

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     934:	9a 2c       	mov	r9, r10
     936:	8b 2c       	mov	r8, r11
     938:	5e 01       	movw	r10, r28
     93a:	08 94       	sec
     93c:	a1 1c       	adc	r10, r1
     93e:	b1 1c       	adc	r11, r1
     940:	04 c0       	rjmp	.+8      	; 0x94a <ProcessConfigurationDescriptor+0x80>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     942:	83 e0       	ldi	r24, 0x03	; 3
     944:	60 c0       	rjmp	.+192    	; 0xa06 <ProcessConfigurationDescriptor+0x13c>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	5e c0       	rjmp	.+188    	; 0xa06 <ProcessConfigurationDescriptor+0x13c>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     94a:	61 14       	cp	r6, r1
     94c:	71 04       	cpc	r7, r1
     94e:	41 f0       	breq	.+16     	; 0x960 <ProcessConfigurationDescriptor+0x96>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     950:	89 2d       	mov	r24, r9
     952:	98 2d       	mov	r25, r8
     954:	b5 01       	movw	r22, r10
     956:	40 e5       	ldi	r20, 0x50	; 80
     958:	54 e0       	ldi	r21, 0x04	; 4
     95a:	3b d7       	rcall	.+3702   	; 0x17d2 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     95c:	88 23       	and	r24, r24
     95e:	e1 f0       	breq	.+56     	; 0x998 <ProcessConfigurationDescriptor+0xce>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextCDCDataInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
     960:	e1 14       	cp	r14, r1
     962:	f1 04       	cpc	r15, r1
     964:	71 f0       	breq	.+28     	; 0x982 <ProcessConfigurationDescriptor+0xb8>
			{
				/* Get the next RNDIS data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     966:	89 2d       	mov	r24, r9
     968:	98 2d       	mov	r25, r8
     96a:	b5 01       	movw	r22, r10
     96c:	4f e3       	ldi	r20, 0x3F	; 63
     96e:	54 e0       	ldi	r21, 0x04	; 4
     970:	30 d7       	rcall	.+3680   	; 0x17d2 <USB_GetNextDescriptorComp>
     972:	88 23       	and	r24, r24
     974:	09 f0       	breq	.+2      	; 0x978 <ProcessConfigurationDescriptor+0xae>
     976:	46 c0       	rjmp	.+140    	; 0xa04 <ProcessConfigurationDescriptor+0x13a>
					return NoCompatibleInterfaceFound;
				}

				/* Clear any found endpoints */
				DataINEndpoint       = NULL;
				DataOUTEndpoint      = NULL;
     978:	cc 24       	eor	r12, r12
     97a:	dd 24       	eor	r13, r13
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
			{
				/* Get the next RNDIS data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     97c:	00 e0       	ldi	r16, 0x00	; 0
     97e:	10 e0       	ldi	r17, 0x00	; 0
     980:	e4 cf       	rjmp	.-56     	; 0x94a <ProcessConfigurationDescriptor+0x80>
				DataOUTEndpoint      = NULL;
			}
			else
			{
				/* Get the next RNDIS control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     982:	89 2d       	mov	r24, r9
     984:	98 2d       	mov	r25, r8
     986:	b5 01       	movw	r22, r10
     988:	4e e2       	ldi	r20, 0x2E	; 46
     98a:	54 e0       	ldi	r21, 0x04	; 4
     98c:	22 d7       	rcall	.+3652   	; 0x17d2 <USB_GetNextDescriptorComp>
     98e:	88 23       	and	r24, r24
     990:	c9 f5       	brne	.+114    	; 0xa04 <ProcessConfigurationDescriptor+0x13a>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				RNDISControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     992:	69 80       	ldd	r6, Y+1	; 0x01
     994:	7a 80       	ldd	r7, Y+2	; 0x02
     996:	0e c0       	rjmp	.+28     	; 0x9b4 <ProcessConfigurationDescriptor+0xea>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     998:	e9 81       	ldd	r30, Y+1	; 0x01
     99a:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     99c:	82 81       	ldd	r24, Z+2	; 0x02
     99e:	87 ff       	sbrs	r24, 7
     9a0:	06 c0       	rjmp	.+12     	; 0x9ae <ProcessConfigurationDescriptor+0xe4>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     9a2:	83 81       	ldd	r24, Z+3	; 0x03
     9a4:	83 70       	andi	r24, 0x03	; 3
     9a6:	83 30       	cpi	r24, 0x03	; 3
     9a8:	21 f4       	brne	.+8      	; 0x9b2 <ProcessConfigurationDescriptor+0xe8>
			  NotificationEndpoint = EndpointData;
     9aa:	7f 01       	movw	r14, r30
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <ProcessConfigurationDescriptor+0xea>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
     9ae:	6f 01       	movw	r12, r30
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <ProcessConfigurationDescriptor+0xea>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  NotificationEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
     9b2:	8f 01       	movw	r16, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     9b4:	01 15       	cp	r16, r1
     9b6:	11 05       	cpc	r17, r1
     9b8:	41 f2       	breq	.-112    	; 0x94a <ProcessConfigurationDescriptor+0x80>
     9ba:	c1 14       	cp	r12, r1
     9bc:	d1 04       	cpc	r13, r1
     9be:	29 f2       	breq	.-118    	; 0x94a <ProcessConfigurationDescriptor+0x80>
     9c0:	e1 14       	cp	r14, r1
     9c2:	f1 04       	cpc	r15, r1
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <ProcessConfigurationDescriptor+0xfe>
     9c6:	c1 cf       	rjmp	.-126    	; 0x94a <ProcessConfigurationDescriptor+0x80>
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the RNDIS data IN pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     9c8:	f8 01       	movw	r30, r16
     9ca:	24 81       	ldd	r18, Z+4	; 0x04
     9cc:	35 81       	ldd	r19, Z+5	; 0x05
     9ce:	81 e8       	ldi	r24, 0x81	; 129
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	42 81       	ldd	r20, Z+2	; 0x02
     9d4:	01 e0       	ldi	r16, 0x01	; 1
     9d6:	de d4       	rcall	.+2492   	; 0x1394 <Pipe_ConfigurePipe>

	/* Configure the RNDIS data OUT pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     9d8:	f6 01       	movw	r30, r12
     9da:	24 81       	ldd	r18, Z+4	; 0x04
     9dc:	35 81       	ldd	r19, Z+5	; 0x05
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	62 e0       	ldi	r22, 0x02	; 2
     9e2:	42 81       	ldd	r20, Z+2	; 0x02
     9e4:	d7 d4       	rcall	.+2478   	; 0x1394 <Pipe_ConfigurePipe>

	/* Configure the RNDIS notification pipe */
	Pipe_ConfigurePipe(RNDIS_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, 1);
     9e6:	f7 01       	movw	r30, r14
     9e8:	24 81       	ldd	r18, Z+4	; 0x04
     9ea:	35 81       	ldd	r19, Z+5	; 0x05
     9ec:	83 e8       	ldi	r24, 0x83	; 131
     9ee:	63 e0       	ldi	r22, 0x03	; 3
     9f0:	42 81       	ldd	r20, Z+2	; 0x02
     9f2:	d0 d4       	rcall	.+2464   	; 0x1394 <Pipe_ConfigurePipe>
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);
     9f4:	f7 01       	movw	r30, r14
     9f6:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     9f8:	80 93 ad 00 	sts	0x00AD, r24

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <ProcessConfigurationDescriptor+0x13c>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     a00:	82 e0       	ldi	r24, 0x02	; 2
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <ProcessConfigurationDescriptor+0x13c>
				/* Get the next RNDIS control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
											  DComp_NextCDCControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
     a04:	84 e0       	ldi	r24, 0x04	; 4
	Pipe_ConfigurePipe(RNDIS_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, 1);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     a06:	cc 5f       	subi	r28, 0xFC	; 252
     a08:	dd 4f       	sbci	r29, 0xFD	; 253
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
     a14:	cf 91       	pop	r28
     a16:	df 91       	pop	r29
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	bf 90       	pop	r11
     a26:	af 90       	pop	r10
     a28:	9f 90       	pop	r9
     a2a:	8f 90       	pop	r8
     a2c:	7f 90       	pop	r7
     a2e:	6f 90       	pop	r6
     a30:	08 95       	ret

00000a32 <RNDIS_SendEncapsulatedCommand>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t RNDIS_SendEncapsulatedCommand(void* const Buffer,
                                      const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
     a32:	21 e2       	ldi	r18, 0x21	; 33
     a34:	20 93 27 01 	sts	0x0127, r18
     a38:	10 92 28 01 	sts	0x0128, r1
     a3c:	10 92 2a 01 	sts	0x012A, r1
     a40:	10 92 29 01 	sts	0x0129, r1
     a44:	10 92 2c 01 	sts	0x012C, r1
     a48:	10 92 2b 01 	sts	0x012B, r1
     a4c:	70 93 2e 01 	sts	0x012E, r23
     a50:	60 93 2d 01 	sts	0x012D, r22
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a54:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
}
     a58:	29 c7       	rjmp	.+3666   	; 0x18ac <USB_Host_SendControlRequest>

00000a5a <RNDIS_GetEncapsulatedResponse>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t RNDIS_GetEncapsulatedResponse(void* const Buffer,
                                      const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
     a5a:	21 ea       	ldi	r18, 0xA1	; 161
     a5c:	20 93 27 01 	sts	0x0127, r18
     a60:	21 e0       	ldi	r18, 0x01	; 1
     a62:	20 93 28 01 	sts	0x0128, r18
     a66:	10 92 2a 01 	sts	0x012A, r1
     a6a:	10 92 29 01 	sts	0x0129, r1
     a6e:	10 92 2c 01 	sts	0x012C, r1
     a72:	10 92 2b 01 	sts	0x012B, r1
     a76:	70 93 2e 01 	sts	0x012E, r23
     a7a:	60 93 2d 01 	sts	0x012D, r22
     a7e:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
}
     a82:	14 c7       	rjmp	.+3624   	; 0x18ac <USB_Host_SendControlRequest>

00000a84 <RNDIS_InitializeDevice>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum or RNDIS_COMMAND_FAILED if the device returned a
 *          logical command failure
 */
uint8_t RNDIS_InitializeDevice(const uint16_t HostMaxPacketSize,
                               uint16_t* const DeviceMaxPacketSize)
{
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	df 93       	push	r29
     a8a:	cf 93       	push	r28
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
     a90:	cc 54       	subi	r28, 0x4C	; 76
     a92:	d0 40       	sbci	r29, 0x00	; 0
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	cd bf       	out	0x3d, r28	; 61
     a9e:	8b 01       	movw	r16, r22
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = REMOTE_NDIS_INITIALIZE_MSG;
     aa0:	22 e0       	ldi	r18, 0x02	; 2
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	29 83       	std	Y+1, r18	; 0x01
     aaa:	3a 83       	std	Y+2, r19	; 0x02
     aac:	4b 83       	std	Y+3, r20	; 0x03
     aae:	5c 83       	std	Y+4, r21	; 0x04
	InitMessage.MessageLength   = sizeof(RNDIS_Initialize_Message_t);
     ab0:	28 e1       	ldi	r18, 0x18	; 24
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	2d 83       	std	Y+5, r18	; 0x05
     aba:	3e 83       	std	Y+6, r19	; 0x06
     abc:	4f 83       	std	Y+7, r20	; 0x07
     abe:	58 87       	std	Y+8, r21	; 0x08
	InitMessage.RequestId       = RequestID++;
     ac0:	20 91 1e 01 	lds	r18, 0x011E
     ac4:	30 91 1f 01 	lds	r19, 0x011F
     ac8:	40 91 20 01 	lds	r20, 0x0120
     acc:	50 91 21 01 	lds	r21, 0x0121
     ad0:	29 87       	std	Y+9, r18	; 0x09
     ad2:	3a 87       	std	Y+10, r19	; 0x0a
     ad4:	4b 87       	std	Y+11, r20	; 0x0b
     ad6:	5c 87       	std	Y+12, r21	; 0x0c
     ad8:	2f 5f       	subi	r18, 0xFF	; 255
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	4f 4f       	sbci	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	20 93 1e 01 	sts	0x011E, r18
     ae4:	30 93 1f 01 	sts	0x011F, r19
     ae8:	40 93 20 01 	sts	0x0120, r20
     aec:	50 93 21 01 	sts	0x0121, r21

	InitMessage.MajorVersion    = REMOTE_NDIS_VERSION_MAJOR;
     af0:	21 e0       	ldi	r18, 0x01	; 1
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	2d 87       	std	Y+13, r18	; 0x0d
     afa:	3e 87       	std	Y+14, r19	; 0x0e
     afc:	4f 87       	std	Y+15, r20	; 0x0f
     afe:	58 8b       	std	Y+16, r21	; 0x10
	InitMessage.MinorVersion    = REMOTE_NDIS_VERSION_MINOR;
     b00:	19 8a       	std	Y+17, r1	; 0x11
     b02:	1a 8a       	std	Y+18, r1	; 0x12
     b04:	1b 8a       	std	Y+19, r1	; 0x13
     b06:	1c 8a       	std	Y+20, r1	; 0x14
	InitMessage.MaxTransferSize = HostMaxPacketSize;
     b08:	a0 e0       	ldi	r26, 0x00	; 0
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	8d 8b       	std	Y+21, r24	; 0x15
     b0e:	9e 8b       	std	Y+22, r25	; 0x16
     b10:	af 8b       	std	Y+23, r26	; 0x17
     b12:	b8 8f       	std	Y+24, r27	; 0x18

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&InitMessage,
     b14:	ce 01       	movw	r24, r28
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	68 e1       	ldi	r22, 0x18	; 24
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	8a df       	rcall	.-236    	; 0xa32 <RNDIS_SendEncapsulatedCommand>
     b1e:	88 23       	and	r24, r24
     b20:	b9 f4       	brne	.+46     	; 0xb50 <RNDIS_InitializeDevice+0xcc>
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&InitMessageResponse,
     b22:	ce 01       	movw	r24, r28
     b24:	49 96       	adiw	r24, 0x19	; 25
     b26:	64 e3       	ldi	r22, 0x34	; 52
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	97 df       	rcall	.-210    	; 0xa5a <RNDIS_GetEncapsulatedResponse>
     b2c:	88 23       	and	r24, r24
     b2e:	81 f4       	brne	.+32     	; 0xb50 <RNDIS_InitializeDevice+0xcc>
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     b30:	2d a1       	ldd	r18, Y+37	; 0x25
     b32:	3e a1       	ldd	r19, Y+38	; 0x26
     b34:	4f a1       	ldd	r20, Y+39	; 0x27
     b36:	58 a5       	ldd	r21, Y+40	; 0x28
     b38:	21 15       	cp	r18, r1
     b3a:	31 05       	cpc	r19, r1
     b3c:	41 05       	cpc	r20, r1
     b3e:	51 05       	cpc	r21, r1
     b40:	31 f4       	brne	.+12     	; 0xb4e <RNDIS_InitializeDevice+0xca>
	  return RNDIS_COMMAND_FAILED;

	*DeviceMaxPacketSize = InitMessageResponse.MaxTransferSize;
     b42:	2d ad       	ldd	r18, Y+61	; 0x3d
     b44:	3e ad       	ldd	r19, Y+62	; 0x3e
     b46:	f8 01       	movw	r30, r16
     b48:	31 83       	std	Z+1, r19	; 0x01
     b4a:	20 83       	st	Z, r18

	return HOST_SENDCONTROL_Successful;
     b4c:	01 c0       	rjmp	.+2      	; 0xb50 <RNDIS_InitializeDevice+0xcc>
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;
     b4e:	80 ec       	ldi	r24, 0xC0	; 192

	*DeviceMaxPacketSize = InitMessageResponse.MaxTransferSize;

	return HOST_SENDCONTROL_Successful;
}
     b50:	c4 5b       	subi	r28, 0xB4	; 180
     b52:	df 4f       	sbci	r29, 0xFF	; 255
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	cf 91       	pop	r28
     b60:	df 91       	pop	r29
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	08 95       	ret

00000b68 <RNDIS_SetRNDISProperty>:
 *          logical command failure
 */
uint8_t RNDIS_SetRNDISProperty(const uint32_t Oid,
                               void* Buffer,
                               const uint16_t Length)
{
     b68:	af 92       	push	r10
     b6a:	bf 92       	push	r11
     b6c:	cf 92       	push	r12
     b6e:	df 92       	push	r13
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	60 97       	sbiw	r28, 0x10	; 16
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	6b 01       	movw	r12, r22
     b8e:	7c 01       	movw	r14, r24

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;

	return HOST_SENDCONTROL_Successful;
}
     b90:	ad b6       	in	r10, 0x3d	; 61
     b92:	be b6       	in	r11, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
     b94:	f9 01       	movw	r30, r18
     b96:	7c 96       	adiw	r30, 0x1c	; 28
     b98:	8d b7       	in	r24, 0x3d	; 61
     b9a:	9e b7       	in	r25, 0x3e	; 62
     b9c:	8e 1b       	sub	r24, r30
     b9e:	9f 0b       	sbc	r25, r31
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	9e bf       	out	0x3e, r25	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	8d bf       	out	0x3d, r24	; 61
     baa:	0d b7       	in	r16, 0x3d	; 61
     bac:	1e b7       	in	r17, 0x3e	; 62
     bae:	0f 5f       	subi	r16, 0xFF	; 255
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = REMOTE_NDIS_SET_MSG;
     bb2:	65 e0       	ldi	r22, 0x05	; 5
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	ad b7       	in	r26, 0x3d	; 61
     bbc:	be b7       	in	r27, 0x3e	; 62
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	6d 93       	st	X+, r22
     bc2:	7d 93       	st	X+, r23
     bc4:	8d 93       	st	X+, r24
     bc6:	9c 93       	st	X, r25
     bc8:	14 97       	sbiw	r26, 0x04	; 4
	SetMessageData.SetMessage.MessageLength  = sizeof(RNDIS_Set_Message_t) + Length;
     bca:	cf 01       	movw	r24, r30
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	f8 01       	movw	r30, r16
     bd2:	84 83       	std	Z+4, r24	; 0x04
     bd4:	95 83       	std	Z+5, r25	; 0x05
     bd6:	a6 83       	std	Z+6, r26	; 0x06
     bd8:	b7 83       	std	Z+7, r27	; 0x07
	SetMessageData.SetMessage.RequestId      = RequestID++;
     bda:	80 91 1e 01 	lds	r24, 0x011E
     bde:	90 91 1f 01 	lds	r25, 0x011F
     be2:	a0 91 20 01 	lds	r26, 0x0120
     be6:	b0 91 21 01 	lds	r27, 0x0121
     bea:	80 87       	std	Z+8, r24	; 0x08
     bec:	91 87       	std	Z+9, r25	; 0x09
     bee:	a2 87       	std	Z+10, r26	; 0x0a
     bf0:	b3 87       	std	Z+11, r27	; 0x0b
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	a1 1d       	adc	r26, r1
     bf6:	b1 1d       	adc	r27, r1
     bf8:	80 93 1e 01 	sts	0x011E, r24
     bfc:	90 93 1f 01 	sts	0x011F, r25
     c00:	a0 93 20 01 	sts	0x0120, r26
     c04:	b0 93 21 01 	sts	0x0121, r27

	SetMessageData.SetMessage.Oid            = Oid;
     c08:	d8 01       	movw	r26, r16
     c0a:	1c 96       	adiw	r26, 0x0c	; 12
     c0c:	cd 92       	st	X+, r12
     c0e:	dd 92       	st	X+, r13
     c10:	ed 92       	st	X+, r14
     c12:	fc 92       	st	X, r15
     c14:	1f 97       	sbiw	r26, 0x0f	; 15
	SetMessageData.SetMessage.InformationBufferLength = Length;
     c16:	c9 01       	movw	r24, r18
     c18:	a0 e0       	ldi	r26, 0x00	; 0
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	80 8b       	std	Z+16, r24	; 0x10
     c1e:	91 8b       	std	Z+17, r25	; 0x11
     c20:	a2 8b       	std	Z+18, r26	; 0x12
     c22:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = (sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
     c24:	84 e1       	ldi	r24, 0x14	; 20
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a0 e0       	ldi	r26, 0x00	; 0
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	84 8b       	std	Z+20, r24	; 0x14
     c2e:	95 8b       	std	Z+21, r25	; 0x15
     c30:	a6 8b       	std	Z+22, r26	; 0x16
     c32:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = 0;
     c34:	d8 01       	movw	r26, r16
     c36:	58 96       	adiw	r26, 0x18	; 24
     c38:	1d 92       	st	X+, r1
     c3a:	1d 92       	st	X+, r1
     c3c:	1d 92       	st	X+, r1
     c3e:	1c 92       	st	X, r1
     c40:	5b 97       	sbiw	r26, 0x1b	; 27

	memcpy(SetMessageData.ContiguousBuffer, Buffer, Length);
     c42:	6d b7       	in	r22, 0x3d	; 61
     c44:	7e b7       	in	r23, 0x3e	; 62
     c46:	63 5e       	subi	r22, 0xE3	; 227
     c48:	7f 4f       	sbci	r23, 0xFF	; 255
     c4a:	cb 01       	movw	r24, r22
     c4c:	ba 01       	movw	r22, r20
     c4e:	a9 01       	movw	r20, r18
     c50:	97 d7       	rcall	.+3886   	; 0x1b80 <memcpy>

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&SetMessageData,
     c52:	f8 01       	movw	r30, r16
     c54:	64 81       	ldd	r22, Z+4	; 0x04
     c56:	75 81       	ldd	r23, Z+5	; 0x05
     c58:	c8 01       	movw	r24, r16
     c5a:	eb de       	rcall	.-554    	; 0xa32 <RNDIS_SendEncapsulatedCommand>
     c5c:	88 23       	and	r24, r24
     c5e:	89 f4       	brne	.+34     	; 0xc82 <RNDIS_SetRNDISProperty+0x11a>
	                                               SetMessageData.SetMessage.MessageLength)) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&SetMessageResponse,
     c60:	ce 01       	movw	r24, r28
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	60 e1       	ldi	r22, 0x10	; 16
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	f8 de       	rcall	.-528    	; 0xa5a <RNDIS_GetEncapsulatedResponse>
     c6a:	88 23       	and	r24, r24
     c6c:	51 f4       	brne	.+20     	; 0xc82 <RNDIS_SetRNDISProperty+0x11a>
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     c6e:	2d 85       	ldd	r18, Y+13	; 0x0d
     c70:	3e 85       	ldd	r19, Y+14	; 0x0e
     c72:	4f 85       	ldd	r20, Y+15	; 0x0f
     c74:	58 89       	ldd	r21, Y+16	; 0x10
     c76:	21 15       	cp	r18, r1
     c78:	31 05       	cpc	r19, r1
     c7a:	41 05       	cpc	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	09 f0       	breq	.+2      	; 0xc82 <RNDIS_SetRNDISProperty+0x11a>
	  return RNDIS_COMMAND_FAILED;
     c80:	80 ec       	ldi	r24, 0xC0	; 192

	return HOST_SENDCONTROL_Successful;
}
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	be be       	out	0x3e, r11	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	ad be       	out	0x3d, r10	; 61
     c8c:	60 96       	adiw	r28, 0x10	; 16
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	df 90       	pop	r13
     ca6:	cf 90       	pop	r12
     ca8:	bf 90       	pop	r11
     caa:	af 90       	pop	r10
     cac:	08 95       	ret

00000cae <RNDIS_QueryRNDISProperty>:
 *          logical command failure
 */
uint8_t RNDIS_QueryRNDISProperty(const uint32_t Oid,
                                 void* Buffer,
                                 const uint16_t MaxLength)
{
     cae:	7f 92       	push	r7
     cb0:	8f 92       	push	r8
     cb2:	9f 92       	push	r9
     cb4:	af 92       	push	r10
     cb6:	bf 92       	push	r11
     cb8:	cf 92       	push	r12
     cba:	df 92       	push	r13
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	6c 97       	sbiw	r28, 0x1c	; 28
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	74 2e       	mov	r7, r20
     cda:	a5 2e       	mov	r10, r21
     cdc:	79 01       	movw	r14, r18
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
     cde:	8d b6       	in	r8, 0x3d	; 61
     ce0:	9e b6       	in	r9, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
     ce2:	28 e1       	ldi	r18, 0x18	; 24
     ce4:	c2 2e       	mov	r12, r18
     ce6:	d1 2c       	mov	r13, r1
     ce8:	ce 0c       	add	r12, r14
     cea:	df 1c       	adc	r13, r15
     cec:	2d b7       	in	r18, 0x3d	; 61
     cee:	3e b7       	in	r19, 0x3e	; 62
     cf0:	2c 19       	sub	r18, r12
     cf2:	3d 09       	sbc	r19, r13
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	3e bf       	out	0x3e, r19	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	2d bf       	out	0x3d, r18	; 61
     cfe:	0d b7       	in	r16, 0x3d	; 61
     d00:	1e b7       	in	r17, 0x3e	; 62
     d02:	0f 5f       	subi	r16, 0xFF	; 255
     d04:	1f 4f       	sbci	r17, 0xFF	; 255

	QueryMessage.MessageType    = REMOTE_NDIS_QUERY_MSG;
     d06:	24 e0       	ldi	r18, 0x04	; 4
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	29 83       	std	Y+1, r18	; 0x01
     d10:	3a 83       	std	Y+2, r19	; 0x02
     d12:	4b 83       	std	Y+3, r20	; 0x03
     d14:	5c 83       	std	Y+4, r21	; 0x04
	QueryMessage.MessageLength  = sizeof(RNDIS_Query_Message_t);
     d16:	2c e1       	ldi	r18, 0x1C	; 28
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	2d 83       	std	Y+5, r18	; 0x05
     d20:	3e 83       	std	Y+6, r19	; 0x06
     d22:	4f 83       	std	Y+7, r20	; 0x07
     d24:	58 87       	std	Y+8, r21	; 0x08
	QueryMessage.RequestId      = RequestID++;
     d26:	20 91 1e 01 	lds	r18, 0x011E
     d2a:	30 91 1f 01 	lds	r19, 0x011F
     d2e:	40 91 20 01 	lds	r20, 0x0120
     d32:	50 91 21 01 	lds	r21, 0x0121
     d36:	29 87       	std	Y+9, r18	; 0x09
     d38:	3a 87       	std	Y+10, r19	; 0x0a
     d3a:	4b 87       	std	Y+11, r20	; 0x0b
     d3c:	5c 87       	std	Y+12, r21	; 0x0c
     d3e:	2f 5f       	subi	r18, 0xFF	; 255
     d40:	3f 4f       	sbci	r19, 0xFF	; 255
     d42:	4f 4f       	sbci	r20, 0xFF	; 255
     d44:	5f 4f       	sbci	r21, 0xFF	; 255
     d46:	20 93 1e 01 	sts	0x011E, r18
     d4a:	30 93 1f 01 	sts	0x011F, r19
     d4e:	40 93 20 01 	sts	0x0120, r20
     d52:	50 93 21 01 	sts	0x0121, r21

	QueryMessage.Oid            = Oid;
     d56:	6d 87       	std	Y+13, r22	; 0x0d
     d58:	7e 87       	std	Y+14, r23	; 0x0e
     d5a:	8f 87       	std	Y+15, r24	; 0x0f
     d5c:	98 8b       	std	Y+16, r25	; 0x10
	QueryMessage.InformationBufferLength = 0;
     d5e:	19 8a       	std	Y+17, r1	; 0x11
     d60:	1a 8a       	std	Y+18, r1	; 0x12
     d62:	1b 8a       	std	Y+19, r1	; 0x13
     d64:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = 0;
     d66:	1d 8a       	std	Y+21, r1	; 0x15
     d68:	1e 8a       	std	Y+22, r1	; 0x16
     d6a:	1f 8a       	std	Y+23, r1	; 0x17
     d6c:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = 0;
     d6e:	19 8e       	std	Y+25, r1	; 0x19
     d70:	1a 8e       	std	Y+26, r1	; 0x1a
     d72:	1b 8e       	std	Y+27, r1	; 0x1b
     d74:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&QueryMessage,
     d76:	ce 01       	movw	r24, r28
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	6c e1       	ldi	r22, 0x1C	; 28
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	59 de       	rcall	.-846    	; 0xa32 <RNDIS_SendEncapsulatedCommand>
     d80:	b8 2e       	mov	r11, r24
     d82:	88 23       	and	r24, r24
     d84:	c9 f4       	brne	.+50     	; 0xdb8 <RNDIS_QueryRNDISProperty+0x10a>
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&QueryMessageResponseData,
     d86:	c8 01       	movw	r24, r16
     d88:	b6 01       	movw	r22, r12
     d8a:	67 de       	rcall	.-818    	; 0xa5a <RNDIS_GetEncapsulatedResponse>
     d8c:	b8 2e       	mov	r11, r24
     d8e:	88 23       	and	r24, r24
     d90:	99 f4       	brne	.+38     	; 0xdb8 <RNDIS_QueryRNDISProperty+0x10a>
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     d92:	f8 01       	movw	r30, r16
     d94:	84 85       	ldd	r24, Z+12	; 0x0c
     d96:	95 85       	ldd	r25, Z+13	; 0x0d
     d98:	a6 85       	ldd	r26, Z+14	; 0x0e
     d9a:	b7 85       	ldd	r27, Z+15	; 0x0f
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	a1 05       	cpc	r26, r1
     da0:	b1 05       	cpc	r27, r1
     da2:	41 f4       	brne	.+16     	; 0xdb4 <RNDIS_QueryRNDISProperty+0x106>
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
     da4:	08 5e       	subi	r16, 0xE8	; 232
     da6:	1f 4f       	sbci	r17, 0xFF	; 255
     da8:	87 2d       	mov	r24, r7
     daa:	9a 2d       	mov	r25, r10
     dac:	b8 01       	movw	r22, r16
     dae:	a7 01       	movw	r20, r14
     db0:	e7 d6       	rcall	.+3534   	; 0x1b80 <memcpy>
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <RNDIS_QueryRNDISProperty+0x10a>
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;
     db4:	80 ec       	ldi	r24, 0xC0	; 192
     db6:	b8 2e       	mov	r11, r24

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
     db8:	8b 2d       	mov	r24, r11
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	9e be       	out	0x3e, r9	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	8d be       	out	0x3d, r8	; 61
     dc4:	6c 96       	adiw	r28, 0x1c	; 28
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	df 90       	pop	r13
     dde:	cf 90       	pop	r12
     de0:	bf 90       	pop	r11
     de2:	af 90       	pop	r10
     de4:	9f 90       	pop	r9
     de6:	8f 90       	pop	r8
     de8:	7f 90       	pop	r7
     dea:	08 95       	ret

00000dec <RNDIS_GetPacketLength>:
 *  \param[out] PacketLength  Size of the packet currently in the pipe
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t RNDIS_GetPacketLength(uint16_t* const PacketLength)
{
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	ac 97       	sbiw	r28, 0x2c	; 44
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	8c 01       	movw	r16, r24
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e0e:	80 91 aa 00 	lds	r24, 0x00AA
     e12:	8f 7c       	andi	r24, 0xCF	; 207
     e14:	80 61       	ori	r24, 0x10	; 16
     e16:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e1a:	80 91 a9 00 	lds	r24, 0x00A9
     e1e:	8f 7b       	andi	r24, 0xBF	; 191
     e20:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e24:	80 91 a6 00 	lds	r24, 0x00A6

	Pipe_SelectPipe(RNDIS_DATA_IN_PIPE);
	Pipe_SetPipeToken(PIPE_TOKEN_IN);
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
     e28:	85 fd       	sbrc	r24, 5
     e2a:	0a c0       	rjmp	.+20     	; 0xe40 <RNDIS_GetPacketLength+0x54>
	{
		*PacketLength = 0;
     e2c:	f8 01       	movw	r30, r16
     e2e:	11 82       	std	Z+1, r1	; 0x01
     e30:	10 82       	st	Z, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e32:	80 91 a9 00 	lds	r24, 0x00A9
     e36:	80 64       	ori	r24, 0x40	; 64
     e38:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return PIPE_RWSTREAM_NoError;
     e3c:	ff 24       	eor	r15, r15
     e3e:	1b c0       	rjmp	.+54     	; 0xe76 <RNDIS_GetPacketLength+0x8a>
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t), NULL)) != PIPE_RWSTREAM_NoError)
     e40:	ce 01       	movw	r24, r28
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	6c e2       	ldi	r22, 0x2C	; 44
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	40 d2       	rcall	.+1152   	; 0x12ce <Pipe_Read_Stream_LE>
     e4e:	f8 2e       	mov	r15, r24
     e50:	88 23       	and	r24, r24
     e52:	89 f4       	brne	.+34     	; 0xe76 <RNDIS_GetPacketLength+0x8a>
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)DeviceMessage.DataLength;
     e54:	2d 85       	ldd	r18, Y+13	; 0x0d
     e56:	3e 85       	ldd	r19, Y+14	; 0x0e
     e58:	f8 01       	movw	r30, r16
     e5a:	31 83       	std	Z+1, r19	; 0x01
     e5c:	20 83       	st	Z, r18

	Pipe_Discard_Stream(DeviceMessage.DataOffset - (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)),
     e5e:	29 85       	ldd	r18, Y+9	; 0x09
     e60:	3a 85       	ldd	r19, Y+10	; 0x0a
     e62:	c9 01       	movw	r24, r18
     e64:	84 97       	sbiw	r24, 0x24	; 36
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	e6 d1       	rcall	.+972    	; 0x1238 <Pipe_Discard_Stream>
     e6c:	80 91 a9 00 	lds	r24, 0x00A9
     e70:	80 64       	ori	r24, 0x40	; 64
     e72:	80 93 a9 00 	sts	0x00A9, r24
	                    NULL);

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     e76:	8f 2d       	mov	r24, r15
     e78:	ac 96       	adiw	r28, 0x2c	; 44
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	08 95       	ret

00000e90 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e90:	80 91 9e 00 	lds	r24, 0x009E
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	81 70       	andi	r24, 0x01	; 1
     e98:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e9a:	20 91 a0 00 	lds	r18, 0x00A0
     e9e:	2d 7f       	andi	r18, 0xFD	; 253
     ea0:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     ea4:	20 91 9e 00 	lds	r18, 0x009E
     ea8:	22 60       	ori	r18, 0x02	; 2
     eaa:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     eae:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     eb2:	21 fd       	sbrc	r18, 1
     eb4:	fc cf       	rjmp	.-8      	; 0xeae <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     eb6:	20 91 9e 00 	lds	r18, 0x009E
     eba:	21 60       	ori	r18, 0x01	; 1
     ebc:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     ec0:	10 92 25 01 	sts	0x0125, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ec4:	20 91 a0 00 	lds	r18, 0x00A0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	20 72       	andi	r18, 0x20	; 32
     ecc:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     ece:	40 91 a0 00 	lds	r20, 0x00A0
     ed2:	4f 7d       	andi	r20, 0xDF	; 223
     ed4:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ed8:	40 91 9f 00 	lds	r20, 0x009F
     edc:	4f 7d       	andi	r20, 0xDF	; 223
     ede:	40 93 9f 00 	sts	0x009F, r20
     ee2:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ee4:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     ee8:	55 ff       	sbrs	r21, 5
     eea:	0b c0       	rjmp	.+22     	; 0xf02 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     eec:	40 91 9f 00 	lds	r20, 0x009F
     ef0:	4f 7d       	andi	r20, 0xDF	; 223
     ef2:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ef6:	40 91 9f 00 	lds	r20, 0x009F
     efa:	4d 7f       	andi	r20, 0xFD	; 253
     efc:	40 93 9f 00 	sts	0x009F, r20
     f00:	08 c0       	rjmp	.+16     	; 0xf12 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f02:	ef ec       	ldi	r30, 0xCF	; 207
     f04:	f7 e0       	ldi	r31, 0x07	; 7
     f06:	31 97       	sbiw	r30, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <USB_Host_ResetDevice+0x76>
     f0a:	00 c0       	rjmp	.+0      	; 0xf0c <USB_Host_ResetDevice+0x7c>
     f0c:	00 00       	nop
     f0e:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     f10:	49 f7       	brne	.-46     	; 0xee4 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     f12:	21 15       	cp	r18, r1
     f14:	31 05       	cpc	r19, r1
     f16:	29 f0       	breq	.+10     	; 0xf22 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     f18:	20 91 a0 00 	lds	r18, 0x00A0
     f1c:	20 62       	ori	r18, 0x20	; 32
     f1e:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	29 f4       	brne	.+10     	; 0xf30 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f26:	80 91 9e 00 	lds	r24, 0x009E
     f2a:	8e 7f       	andi	r24, 0xFE	; 254
     f2c:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     f30:	80 91 a0 00 	lds	r24, 0x00A0
     f34:	82 60       	ori	r24, 0x02	; 2
     f36:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     f3a:	08 95       	ret

00000f3c <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f3c:	40 91 9e 00 	lds	r20, 0x009E
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	41 70       	andi	r20, 0x01	; 1
     f44:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f46:	20 91 a0 00 	lds	r18, 0x00A0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	20 72       	andi	r18, 0x20	; 32
     f4e:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     f50:	90 91 a0 00 	lds	r25, 0x00A0
     f54:	9f 7d       	andi	r25, 0xDF	; 223
     f56:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f5a:	90 91 9f 00 	lds	r25, 0x009F
     f5e:	9f 7d       	andi	r25, 0xDF	; 223
     f60:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f64:	90 91 9e 00 	lds	r25, 0x009E
     f68:	91 60       	ori	r25, 0x01	; 1
     f6a:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     f6e:	26 c0       	rjmp	.+76     	; 0xfbc <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f70:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     f74:	95 ff       	sbrs	r25, 5
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f78:	90 91 9f 00 	lds	r25, 0x009F
     f7c:	9f 7d       	andi	r25, 0xDF	; 223
     f7e:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     f82:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     f84:	90 91 2f 01 	lds	r25, 0x012F
     f88:	91 30       	cpi	r25, 0x01	; 1
     f8a:	d9 f0       	breq	.+54     	; 0xfc2 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     f8c:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     f90:	94 ff       	sbrs	r25, 4
     f92:	09 c0       	rjmp	.+18     	; 0xfa6 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f94:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     f98:	80 91 a6 00 	lds	r24, 0x00A6
     f9c:	8f 7e       	andi	r24, 0xEF	; 239
     f9e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     fa2:	82 e0       	ldi	r24, 0x02	; 2

			break;
     fa4:	0f c0       	rjmp	.+30     	; 0xfc4 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     fa6:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     faa:	91 ff       	sbrs	r25, 1
     fac:	07 c0       	rjmp	.+14     	; 0xfbc <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     fae:	80 91 a6 00 	lds	r24, 0x00A6
     fb2:	8d 7f       	andi	r24, 0xFD	; 253
     fb4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     fb8:	83 e0       	ldi	r24, 0x03	; 3

			break;
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     fbc:	88 23       	and	r24, r24
     fbe:	c1 f6       	brne	.-80     	; 0xf70 <USB_Host_WaitMS+0x34>
     fc0:	01 c0       	rjmp	.+2      	; 0xfc4 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     fc2:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     fc4:	41 15       	cp	r20, r1
     fc6:	51 05       	cpc	r21, r1
     fc8:	29 f4       	brne	.+10     	; 0xfd4 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     fca:	90 91 9e 00 	lds	r25, 0x009E
     fce:	9e 7f       	andi	r25, 0xFE	; 254
     fd0:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     fd4:	21 15       	cp	r18, r1
     fd6:	31 05       	cpc	r19, r1
     fd8:	29 f0       	breq	.+10     	; 0xfe4 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     fda:	90 91 a0 00 	lds	r25, 0x00A0
     fde:	90 62       	ori	r25, 0x20	; 32
     fe0:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     fe4:	08 95       	ret

00000fe6 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	28 97       	sbiw	r28, 0x08	; 8
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     ffe:	80 91 2f 01 	lds	r24, 0x012F
    1002:	85 30       	cpi	r24, 0x05	; 5
    1004:	09 f4       	brne	.+2      	; 0x1008 <USB_Host_ProcessNextHostState+0x22>
    1006:	99 c0       	rjmp	.+306    	; 0x113a <USB_Host_ProcessNextHostState+0x154>
    1008:	86 30       	cpi	r24, 0x06	; 6
    100a:	68 f4       	brcc	.+26     	; 0x1026 <USB_Host_ProcessNextHostState+0x40>
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	c1 f1       	breq	.+112    	; 0x1080 <USB_Host_ProcessNextHostState+0x9a>
    1010:	83 30       	cpi	r24, 0x03	; 3
    1012:	18 f4       	brcc	.+6      	; 0x101a <USB_Host_ProcessNextHostState+0x34>
    1014:	88 23       	and	r24, r24
    1016:	a1 f0       	breq	.+40     	; 0x1040 <USB_Host_ProcessNextHostState+0x5a>
    1018:	04 c1       	rjmp	.+520    	; 0x1222 <USB_Host_ProcessNextHostState+0x23c>
    101a:	83 30       	cpi	r24, 0x03	; 3
    101c:	d9 f1       	breq	.+118    	; 0x1094 <USB_Host_ProcessNextHostState+0xae>
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	09 f0       	breq	.+2      	; 0x1024 <USB_Host_ProcessNextHostState+0x3e>
    1022:	ff c0       	rjmp	.+510    	; 0x1222 <USB_Host_ProcessNextHostState+0x23c>
    1024:	62 c0       	rjmp	.+196    	; 0x10ea <USB_Host_ProcessNextHostState+0x104>
    1026:	87 30       	cpi	r24, 0x07	; 7
    1028:	09 f4       	brne	.+2      	; 0x102c <USB_Host_ProcessNextHostState+0x46>
    102a:	9e c0       	rjmp	.+316    	; 0x1168 <USB_Host_ProcessNextHostState+0x182>
    102c:	87 30       	cpi	r24, 0x07	; 7
    102e:	08 f4       	brcc	.+2      	; 0x1032 <USB_Host_ProcessNextHostState+0x4c>
    1030:	8f c0       	rjmp	.+286    	; 0x1150 <USB_Host_ProcessNextHostState+0x16a>
    1032:	88 30       	cpi	r24, 0x08	; 8
    1034:	09 f4       	brne	.+2      	; 0x1038 <USB_Host_ProcessNextHostState+0x52>
    1036:	b8 c0       	rjmp	.+368    	; 0x11a8 <USB_Host_ProcessNextHostState+0x1c2>
    1038:	89 30       	cpi	r24, 0x09	; 9
    103a:	09 f0       	breq	.+2      	; 0x103e <USB_Host_ProcessNextHostState+0x58>
    103c:	f2 c0       	rjmp	.+484    	; 0x1222 <USB_Host_ProcessNextHostState+0x23c>
    103e:	d9 c0       	rjmp	.+434    	; 0x11f2 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1040:	00 91 23 01 	lds	r16, 0x0123
    1044:	10 91 24 01 	lds	r17, 0x0124
    1048:	01 15       	cp	r16, r1
    104a:	11 05       	cpc	r17, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <USB_Host_ProcessNextHostState+0x6a>
    104e:	e9 c0       	rjmp	.+466    	; 0x1222 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	74 df       	rcall	.-280    	; 0xf3c <USB_Host_WaitMS>
    1054:	68 2f       	mov	r22, r24
    1056:	88 23       	and	r24, r24
    1058:	31 f0       	breq	.+12     	; 0x1066 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
    105a:	80 91 22 01 	lds	r24, 0x0122
    105e:	80 93 2f 01 	sts	0x012F, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    1062:	81 e0       	ldi	r24, 0x01	; 1
					break;
    1064:	d2 c0       	rjmp	.+420    	; 0x120a <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
    1066:	01 50       	subi	r16, 0x01	; 1
    1068:	10 40       	sbci	r17, 0x00	; 0
    106a:	10 93 24 01 	sts	0x0124, r17
    106e:	00 93 23 01 	sts	0x0123, r16
    1072:	01 15       	cp	r16, r1
    1074:	11 05       	cpc	r17, r1
    1076:	09 f0       	breq	.+2      	; 0x107a <USB_Host_ProcessNextHostState+0x94>
    1078:	d4 c0       	rjmp	.+424    	; 0x1222 <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
    107a:	80 91 22 01 	lds	r24, 0x0122
    107e:	07 c0       	rjmp	.+14     	; 0x108e <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    1080:	88 ee       	ldi	r24, 0xE8	; 232
    1082:	93 e0       	ldi	r25, 0x03	; 3
    1084:	90 93 24 01 	sts	0x0124, r25
    1088:	80 93 23 01 	sts	0x0123, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	80 93 2f 01 	sts	0x012F, r24
			break;
    1092:	c7 c0       	rjmp	.+398    	; 0x1222 <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    1094:	80 91 23 01 	lds	r24, 0x0123
    1098:	90 91 24 01 	lds	r25, 0x0124
    109c:	9c 01       	movw	r18, r24
    109e:	21 50       	subi	r18, 0x01	; 1
    10a0:	30 40       	sbci	r19, 0x00	; 0
    10a2:	30 93 24 01 	sts	0x0124, r19
    10a6:	20 93 23 01 	sts	0x0123, r18
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	39 f0       	breq	.+14     	; 0x10bc <USB_Host_ProcessNextHostState+0xd6>
    10ae:	8f ec       	ldi	r24, 0xCF	; 207
    10b0:	97 e0       	ldi	r25, 0x07	; 7
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <USB_Host_ProcessNextHostState+0xcc>
    10b6:	00 c0       	rjmp	.+0      	; 0x10b8 <USB_Host_ProcessNextHostState+0xd2>
    10b8:	00 00       	nop
    10ba:	b3 c0       	rjmp	.+358    	; 0x1222 <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    10bc:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    10be:	80 91 d8 00 	lds	r24, 0x00D8
    10c2:	80 61       	ori	r24, 0x10	; 16
    10c4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    10c8:	80 91 dd 00 	lds	r24, 0x00DD
    10cc:	8b 7f       	andi	r24, 0xFB	; 251
    10ce:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    10d2:	80 91 d7 00 	lds	r24, 0x00D7
    10d6:	80 61       	ori	r24, 0x10	; 16
    10d8:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    10dc:	80 91 dd 00 	lds	r24, 0x00DD
    10e0:	82 60       	ori	r24, 0x02	; 2
    10e2:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    10e6:	84 e0       	ldi	r24, 0x04	; 4
    10e8:	d2 cf       	rjmp	.-92     	; 0x108e <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    10ea:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    10ee:	80 ff       	sbrs	r24, 0
    10f0:	98 c0       	rjmp	.+304    	; 0x1222 <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    10f2:	80 91 9f 00 	lds	r24, 0x009F
    10f6:	8e 7f       	andi	r24, 0xFE	; 254
    10f8:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    10fc:	80 91 9f 00 	lds	r24, 0x009F
    1100:	8d 7f       	andi	r24, 0xFD	; 253
    1102:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1106:	80 91 df 00 	lds	r24, 0x00DF
    110a:	8d 7f       	andi	r24, 0xFD	; 253
    110c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1110:	80 91 de 00 	lds	r24, 0x00DE
    1114:	82 60       	ori	r24, 0x02	; 2
    1116:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    111a:	80 91 9e 00 	lds	r24, 0x009E
    111e:	81 60       	ori	r24, 0x01	; 1
    1120:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    1124:	9e d1       	rcall	.+828    	; 0x1462 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    1126:	10 92 2f 01 	sts	0x012F, r1
    112a:	84 e6       	ldi	r24, 0x64	; 100
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	90 93 24 01 	sts	0x0124, r25
    1132:	80 93 23 01 	sts	0x0123, r24
    1136:	85 e0       	ldi	r24, 0x05	; 5
    1138:	59 c0       	rjmp	.+178    	; 0x11ec <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    113a:	aa de       	rcall	.-684    	; 0xe90 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    113c:	10 92 2f 01 	sts	0x012F, r1
    1140:	88 ec       	ldi	r24, 0xC8	; 200
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	90 93 24 01 	sts	0x0124, r25
    1148:	80 93 23 01 	sts	0x0123, r24
    114c:	86 e0       	ldi	r24, 0x06	; 6
    114e:	4e c0       	rjmp	.+156    	; 0x11ec <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	20 e4       	ldi	r18, 0x40	; 64
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	01 e0       	ldi	r16, 0x01	; 1
    115c:	1b d1       	rcall	.+566    	; 0x1394 <Pipe_ConfigurePipe>
    115e:	88 23       	and	r24, r24
    1160:	09 f4       	brne	.+2      	; 0x1164 <USB_Host_ProcessNextHostState+0x17e>
    1162:	4f c0       	rjmp	.+158    	; 0x1202 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    1164:	87 e0       	ldi	r24, 0x07	; 7
    1166:	93 cf       	rjmp	.-218    	; 0x108e <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1168:	a7 e2       	ldi	r26, 0x27	; 39
    116a:	b1 e0       	ldi	r27, 0x01	; 1
    116c:	e4 e1       	ldi	r30, 0x14	; 20
    116e:	f1 e0       	ldi	r31, 0x01	; 1
    1170:	88 e0       	ldi	r24, 0x08	; 8
    1172:	01 90       	ld	r0, Z+
    1174:	0d 92       	st	X+, r0
    1176:	81 50       	subi	r24, 0x01	; 1
    1178:	e1 f7       	brne	.-8      	; 0x1172 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    117a:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    117e:	ce 01       	movw	r24, r28
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	94 d3       	rcall	.+1832   	; 0x18ac <USB_Host_SendControlRequest>
    1184:	68 2f       	mov	r22, r24
    1186:	88 23       	and	r24, r24
    1188:	09 f0       	breq	.+2      	; 0x118c <USB_Host_ProcessNextHostState+0x1a6>
    118a:	3e c0       	rjmp	.+124    	; 0x1208 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    118c:	88 85       	ldd	r24, Y+8	; 0x08
    118e:	80 93 1c 01 	sts	0x011C, r24

			USB_Host_ResetDevice();
    1192:	7e de       	rcall	.-772    	; 0xe90 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    1194:	10 92 2f 01 	sts	0x012F, r1
    1198:	88 ec       	ldi	r24, 0xC8	; 200
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	90 93 24 01 	sts	0x0124, r25
    11a0:	80 93 23 01 	sts	0x0123, r24
    11a4:	88 e0       	ldi	r24, 0x08	; 8
    11a6:	22 c0       	rjmp	.+68     	; 0x11ec <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    11a8:	20 91 1c 01 	lds	r18, 0x011C
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	01 e0       	ldi	r16, 0x01	; 1
    11b6:	ee d0       	rcall	.+476    	; 0x1394 <Pipe_ConfigurePipe>
    11b8:	88 23       	and	r24, r24
    11ba:	19 f1       	breq	.+70     	; 0x1202 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    11bc:	a7 e2       	ldi	r26, 0x27	; 39
    11be:	b1 e0       	ldi	r27, 0x01	; 1
    11c0:	ec e0       	ldi	r30, 0x0C	; 12
    11c2:	f1 e0       	ldi	r31, 0x01	; 1
    11c4:	88 e0       	ldi	r24, 0x08	; 8
    11c6:	01 90       	ld	r0, Z+
    11c8:	0d 92       	st	X+, r0
    11ca:	81 50       	subi	r24, 0x01	; 1
    11cc:	e1 f7       	brne	.-8      	; 0x11c6 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	6c d3       	rcall	.+1752   	; 0x18ac <USB_Host_SendControlRequest>
    11d4:	68 2f       	mov	r22, r24
    11d6:	88 23       	and	r24, r24
    11d8:	b9 f4       	brne	.+46     	; 0x1208 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    11da:	10 92 2f 01 	sts	0x012F, r1
    11de:	84 e6       	ldi	r24, 0x64	; 100
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	90 93 24 01 	sts	0x0124, r25
    11e6:	80 93 23 01 	sts	0x0123, r24
    11ea:	89 e0       	ldi	r24, 0x09	; 9
    11ec:	80 93 22 01 	sts	0x0122, r24
			break;
    11f0:	18 c0       	rjmp	.+48     	; 0x1222 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    11f8:	8a e0       	ldi	r24, 0x0A	; 10
    11fa:	80 93 2f 01 	sts	0x012F, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    11fe:	3c d9       	rcall	.-3464   	; 0x478 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    1200:	10 c0       	rjmp	.+32     	; 0x1222 <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    1202:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    1204:	84 e0       	ldi	r24, 0x04	; 4
    1206:	01 c0       	rjmp	.+2      	; 0x120a <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    1208:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    120a:	90 91 2f 01 	lds	r25, 0x012F
    120e:	91 30       	cpi	r25, 0x01	; 1
    1210:	41 f0       	breq	.+16     	; 0x1222 <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1212:	29 da       	rcall	.-2990   	; 0x666 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1214:	80 91 dd 00 	lds	r24, 0x00DD
    1218:	81 60       	ori	r24, 0x01	; 1
    121a:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    121e:	26 d9       	rcall	.-3508   	; 0x46c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1220:	7d d1       	rcall	.+762    	; 0x151c <USB_ResetInterface>
	}
}
    1222:	28 96       	adiw	r28, 0x08	; 8
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	08 95       	ret

00001238 <Pipe_Discard_Stream>:

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	ec 01       	movw	r28, r24
    1248:	8b 01       	movw	r16, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    124a:	80 91 aa 00 	lds	r24, 0x00AA
    124e:	8f 7c       	andi	r24, 0xCF	; 207
    1250:	80 61       	ori	r24, 0x10	; 16
    1252:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	Pipe_SetPipeToken(PIPE_TOKEN_IN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1256:	1b d1       	rcall	.+566    	; 0x148e <Pipe_WaitUntilReady>
    1258:	d8 2e       	mov	r13, r24
    125a:	88 23       	and	r24, r24
    125c:	79 f5       	brne	.+94     	; 0x12bc <Pipe_Discard_Stream+0x84>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    125e:	01 15       	cp	r16, r1
    1260:	11 05       	cpc	r17, r1
    1262:	29 f0       	breq	.+10     	; 0x126e <Pipe_Discard_Stream+0x36>
	  Length -= *BytesProcessed;
    1264:	f8 01       	movw	r30, r16
    1266:	20 81       	ld	r18, Z
    1268:	31 81       	ldd	r19, Z+1	; 0x01
    126a:	c2 1b       	sub	r28, r18
    126c:	d3 0b       	sbc	r29, r19

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    126e:	ee 24       	eor	r14, r14
    1270:	ff 24       	eor	r15, r15
    1272:	20 c0       	rjmp	.+64     	; 0x12b4 <Pipe_Discard_Stream+0x7c>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1274:	80 91 a6 00 	lds	r24, 0x00A6
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1278:	85 fd       	sbrc	r24, 5
    127a:	16 c0       	rjmp	.+44     	; 0x12a8 <Pipe_Discard_Stream+0x70>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    127c:	80 91 a6 00 	lds	r24, 0x00A6
    1280:	8e 77       	andi	r24, 0x7E	; 126
    1282:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearIN();
				
			if (BytesProcessed != NULL)
    1286:	01 15       	cp	r16, r1
    1288:	11 05       	cpc	r17, r1
    128a:	51 f0       	breq	.+20     	; 0x12a0 <Pipe_Discard_Stream+0x68>
			{
				*BytesProcessed += BytesInTransfer;
    128c:	f8 01       	movw	r30, r16
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	8e 0d       	add	r24, r14
    1294:	9f 1d       	adc	r25, r15
    1296:	91 83       	std	Z+1, r25	; 0x01
    1298:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    129a:	84 e0       	ldi	r24, 0x04	; 4
    129c:	d8 2e       	mov	r13, r24
    129e:	0e c0       	rjmp	.+28     	; 0x12bc <Pipe_Discard_Stream+0x84>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    12a0:	f6 d0       	rcall	.+492    	; 0x148e <Pipe_WaitUntilReady>
    12a2:	88 23       	and	r24, r24
    12a4:	39 f0       	breq	.+14     	; 0x12b4 <Pipe_Discard_Stream+0x7c>
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <Pipe_Discard_Stream+0x82>
			static inline void Pipe_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UPDATX;
    12a8:	80 91 af 00 	lds	r24, 0x00AF
		}
		else
		{
			Pipe_Discard_8();
			
			Length--;
    12ac:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    12ae:	08 94       	sec
    12b0:	e1 1c       	adc	r14, r1
    12b2:	f1 1c       	adc	r15, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    12b4:	20 97       	sbiw	r28, 0x00	; 0
    12b6:	f1 f6       	brne	.-68     	; 0x1274 <Pipe_Discard_Stream+0x3c>
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <Pipe_Discard_Stream+0x84>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    12ba:	d8 2e       	mov	r13, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    12bc:	8d 2d       	mov	r24, r13
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	df 90       	pop	r13
    12cc:	08 95       	ret

000012ce <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    12ce:	8f 92       	push	r8
    12d0:	9f 92       	push	r9
    12d2:	bf 92       	push	r11
    12d4:	cf 92       	push	r12
    12d6:	df 92       	push	r13
    12d8:	ef 92       	push	r14
    12da:	ff 92       	push	r15
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	e8 2e       	mov	r14, r24
    12ec:	4b 01       	movw	r8, r22
    12ee:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12f0:	80 91 aa 00 	lds	r24, 0x00AA
    12f4:	8f 7c       	andi	r24, 0xCF	; 207
    12f6:	80 61       	ori	r24, 0x10	; 16
    12f8:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    12fc:	99 83       	std	Y+1, r25	; 0x01
    12fe:	c7 d0       	rcall	.+398    	; 0x148e <Pipe_WaitUntilReady>
    1300:	b8 2e       	mov	r11, r24
    1302:	99 81       	ldd	r25, Y+1	; 0x01
    1304:	88 23       	and	r24, r24
    1306:	c1 f5       	brne	.+112    	; 0x1378 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1308:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    130a:	01 15       	cp	r16, r1
    130c:	11 05       	cpc	r17, r1
    130e:	39 f0       	breq	.+14     	; 0x131e <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    1310:	f8 01       	movw	r30, r16
    1312:	20 81       	ld	r18, Z
    1314:	31 81       	ldd	r19, Z+1	; 0x01
    1316:	82 1a       	sub	r8, r18
    1318:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    131a:	e2 0e       	add	r14, r18
    131c:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    131e:	cc 24       	eor	r12, r12
    1320:	dd 24       	eor	r13, r13
    1322:	25 c0       	rjmp	.+74     	; 0x136e <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1324:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1328:	85 fd       	sbrc	r24, 5
    132a:	16 c0       	rjmp	.+44     	; 0x1358 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    132c:	80 91 a6 00 	lds	r24, 0x00A6
    1330:	8e 77       	andi	r24, 0x7E	; 126
    1332:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1336:	01 15       	cp	r16, r1
    1338:	11 05       	cpc	r17, r1
    133a:	51 f0       	breq	.+20     	; 0x1350 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    133c:	f8 01       	movw	r30, r16
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	8c 0d       	add	r24, r12
    1344:	9d 1d       	adc	r25, r13
    1346:	91 83       	std	Z+1, r25	; 0x01
    1348:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    134a:	44 e0       	ldi	r20, 0x04	; 4
    134c:	b4 2e       	mov	r11, r20
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1350:	9e d0       	rcall	.+316    	; 0x148e <Pipe_WaitUntilReady>
    1352:	88 23       	and	r24, r24
    1354:	61 f0       	breq	.+24     	; 0x136e <Pipe_Read_Stream_LE+0xa0>
    1356:	0f c0       	rjmp	.+30     	; 0x1376 <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1358:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    135c:	f7 01       	movw	r30, r14
    135e:	81 93       	st	Z+, r24
    1360:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1362:	08 94       	sec
    1364:	81 08       	sbc	r8, r1
    1366:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    1368:	08 94       	sec
    136a:	c1 1c       	adc	r12, r1
    136c:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    136e:	81 14       	cp	r8, r1
    1370:	91 04       	cpc	r9, r1
    1372:	c1 f6       	brne	.-80     	; 0x1324 <Pipe_Read_Stream_LE+0x56>
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1376:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1378:	8b 2d       	mov	r24, r11
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	bf 90       	pop	r11
    138e:	9f 90       	pop	r9
    1390:	8f 90       	pop	r8
    1392:	08 95       	ret

00001394 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1394:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1396:	58 2f       	mov	r21, r24
    1398:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    139a:	87 ff       	sbrs	r24, 7
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <Pipe_ConfigurePipe+0xe>
    139e:	80 e1       	ldi	r24, 0x10	; 16
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <Pipe_ConfigurePipe+0x10>
    13a2:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    13a4:	57 30       	cpi	r21, 0x07	; 7
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <Pipe_ConfigurePipe+0x16>
    13a8:	59 c0       	rjmp	.+178    	; 0x145c <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    13aa:	66 23       	and	r22, r22
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    13ae:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    13b0:	4f 70       	andi	r20, 0x0F	; 15
    13b2:	62 95       	swap	r22
    13b4:	66 0f       	add	r22, r22
    13b6:	66 0f       	add	r22, r22
    13b8:	60 7c       	andi	r22, 0xC0	; 192
    13ba:	64 2b       	or	r22, r20
    13bc:	68 2b       	or	r22, r24
    13be:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    13c0:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13c2:	84 2f       	mov	r24, r20
    13c4:	8f 70       	andi	r24, 0x0F	; 15
    13c6:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    13ca:	45 17       	cp	r20, r21
    13cc:	a1 f4       	brne	.+40     	; 0x13f6 <Pipe_ConfigurePipe+0x62>
    13ce:	88 e0       	ldi	r24, 0x08	; 8
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	03 c0       	rjmp	.+6      	; 0x13dc <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    13d6:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    13dc:	82 17       	cp	r24, r18
    13de:	93 07       	cpc	r25, r19
    13e0:	10 f4       	brcc	.+4      	; 0x13e6 <Pipe_ConfigurePipe+0x52>
    13e2:	75 30       	cpi	r23, 0x05	; 5
    13e4:	c1 f7       	brne	.-16     	; 0x13d6 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    13e6:	87 2f       	mov	r24, r23
    13e8:	82 95       	swap	r24
    13ea:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    13ec:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    13ee:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    13f0:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    13f2:	e0 e0       	ldi	r30, 0x00	; 0
    13f4:	08 c0       	rjmp	.+16     	; 0x1406 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    13f6:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    13fa:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    13fe:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    1402:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    1406:	81 ff       	sbrs	r24, 1
    1408:	20 c0       	rjmp	.+64     	; 0x144a <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    140a:	90 91 a9 00 	lds	r25, 0x00A9
    140e:	9e 7f       	andi	r25, 0xFE	; 254
    1410:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1414:	90 91 ab 00 	lds	r25, 0x00AB
    1418:	9d 7f       	andi	r25, 0xFD	; 253
    141a:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    141e:	90 91 a9 00 	lds	r25, 0x00A9
    1422:	91 60       	ori	r25, 0x01	; 1
    1424:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    1428:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    142c:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    1430:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    1434:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    1438:	80 91 a9 00 	lds	r24, 0x00A9
    143c:	80 62       	ori	r24, 0x20	; 32
    143e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1442:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    1446:	87 ff       	sbrs	r24, 7
    1448:	09 c0       	rjmp	.+18     	; 0x145c <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    144a:	4f 5f       	subi	r20, 0xFF	; 255
    144c:	47 30       	cpi	r20, 0x07	; 7
    144e:	09 f0       	breq	.+2      	; 0x1452 <Pipe_ConfigurePipe+0xbe>
    1450:	b8 cf       	rjmp	.-144    	; 0x13c2 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1452:	5f 70       	andi	r21, 0x0F	; 15
    1454:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	01 c0       	rjmp	.+2      	; 0x145e <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    145c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    145e:	0f 91       	pop	r16
    1460:	08 95       	ret

00001462 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    1462:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	98 2f       	mov	r25, r24
    146a:	9f 70       	andi	r25, 0x0F	; 15
    146c:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1470:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1474:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1478:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    147c:	90 91 a9 00 	lds	r25, 0x00A9
    1480:	9e 7f       	andi	r25, 0xFE	; 254
    1482:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1486:	8f 5f       	subi	r24, 0xFF	; 255
    1488:	87 30       	cpi	r24, 0x07	; 7
    148a:	71 f7       	brne	.-36     	; 0x1468 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    148c:	08 95       	ret

0000148e <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    148e:	80 91 a2 00 	lds	r24, 0x00A2
    1492:	90 91 a3 00 	lds	r25, 0x00A3
}

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    1496:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1498:	20 91 aa 00 	lds	r18, 0x00AA
    149c:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    149e:	20 31       	cpi	r18, 0x10	; 16
    14a0:	29 f4       	brne	.+10     	; 0x14ac <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    14a2:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    14a6:	20 ff       	sbrs	r18, 0
    14a8:	05 c0       	rjmp	.+10     	; 0x14b4 <Pipe_WaitUntilReady+0x26>
    14aa:	18 c0       	rjmp	.+48     	; 0x14dc <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    14ac:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    14b0:	22 fd       	sbrc	r18, 2
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    14b4:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    14b8:	21 fd       	sbrc	r18, 1
    14ba:	12 c0       	rjmp	.+36     	; 0x14e0 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    14bc:	20 91 2f 01 	lds	r18, 0x012F
    14c0:	21 30       	cpi	r18, 0x01	; 1
    14c2:	81 f0       	breq	.+32     	; 0x14e4 <Pipe_WaitUntilReady+0x56>
    14c4:	20 91 a2 00 	lds	r18, 0x00A2
    14c8:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    14cc:	28 17       	cp	r18, r24
    14ce:	39 07       	cpc	r19, r25
    14d0:	19 f3       	breq	.-58     	; 0x1498 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    14d2:	44 23       	and	r20, r20
    14d4:	49 f0       	breq	.+18     	; 0x14e8 <Pipe_WaitUntilReady+0x5a>
    14d6:	41 50       	subi	r20, 0x01	; 1
    14d8:	c9 01       	movw	r24, r18
    14da:	de cf       	rjmp	.-68     	; 0x1498 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    14e4:	82 e0       	ldi	r24, 0x02	; 2
    14e6:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    14e8:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    14ea:	08 95       	ret

000014ec <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    14ec:	75 d0       	rcall	.+234    	; 0x15d8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    14ee:	7c d0       	rcall	.+248    	; 0x15e8 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    14f0:	e0 ee       	ldi	r30, 0xE0	; 224
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	81 60       	ori	r24, 0x01	; 1
    14f8:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    14fa:	e8 ed       	ldi	r30, 0xD8	; 216
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	8f 77       	andi	r24, 0x7F	; 127
    1502:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1504:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1506:	a7 ed       	ldi	r26, 0xD7	; 215
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	8c 91       	ld	r24, X
    150c:	8e 7f       	andi	r24, 0xFE	; 254
    150e:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1510:	80 81       	ld	r24, Z
    1512:	8f 7e       	andi	r24, 0xEF	; 239
    1514:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1516:	10 92 26 01 	sts	0x0126, r1
}
    151a:	08 95       	ret

0000151c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    151c:	5d d0       	rcall	.+186    	; 0x15d8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    151e:	64 d0       	rcall	.+200    	; 0x15e8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1520:	80 91 d8 00 	lds	r24, 0x00D8
    1524:	8f 77       	andi	r24, 0x7F	; 127
    1526:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    152a:	80 91 d8 00 	lds	r24, 0x00D8
    152e:	80 68       	ori	r24, 0x80	; 128
    1530:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1534:	80 91 d8 00 	lds	r24, 0x00D8
    1538:	8f 7d       	andi	r24, 0xDF	; 223
    153a:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    153e:	80 91 d7 00 	lds	r24, 0x00D7
    1542:	8f 77       	andi	r24, 0x7F	; 127
    1544:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1548:	8c e0       	ldi	r24, 0x0C	; 12
    154a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    154c:	8e e0       	ldi	r24, 0x0E	; 14
    154e:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1550:	09 b4       	in	r0, 0x29	; 41
    1552:	00 fe       	sbrs	r0, 0
    1554:	fd cf       	rjmp	.-6      	; 0x1550 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	80 93 2f 01 	sts	0x012F, r24
	USB_Host_ConfigurationNumber = 0;
    155c:	10 92 25 01 	sts	0x0125, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1560:	80 e4       	ldi	r24, 0x40	; 64
    1562:	80 93 1c 01 	sts	0x011C, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1566:	80 91 d8 00 	lds	r24, 0x00D8
    156a:	80 64       	ori	r24, 0x40	; 64
    156c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1570:	80 91 dd 00 	lds	r24, 0x00DD
    1574:	81 60       	ori	r24, 0x01	; 1
    1576:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    157a:	80 91 dd 00 	lds	r24, 0x00DD
    157e:	84 60       	ori	r24, 0x04	; 4
    1580:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    1584:	80 91 d7 00 	lds	r24, 0x00D7
    1588:	8f 7e       	andi	r24, 0xEF	; 239
    158a:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    158e:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    1590:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1592:	80 91 de 00 	lds	r24, 0x00DE
    1596:	81 60       	ori	r24, 0x01	; 1
    1598:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    159c:	80 91 de 00 	lds	r24, 0x00DE
    15a0:	84 60       	ori	r24, 0x04	; 4
    15a2:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    15a6:	80 91 e0 00 	lds	r24, 0x00E0
    15aa:	8e 7f       	andi	r24, 0xFE	; 254
    15ac:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    15b0:	80 91 d8 00 	lds	r24, 0x00D8
    15b4:	80 61       	ori	r24, 0x10	; 16
    15b6:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    15ba:	08 95       	ret

000015bc <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    15bc:	e8 ed       	ldi	r30, 0xD8	; 216
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	8f 7e       	andi	r24, 0xEF	; 239
    15c4:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    15c6:	e7 ed       	ldi	r30, 0xD7	; 215
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	81 60       	ori	r24, 0x01	; 1
    15ce:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	80 93 26 01 	sts	0x0126, r24

	USB_ResetInterface();
}
    15d6:	a2 cf       	rjmp	.-188    	; 0x151c <USB_ResetInterface>

000015d8 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    15d8:	e8 ed       	ldi	r30, 0xD8	; 216
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	8c 7f       	andi	r24, 0xFC	; 252
    15e0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    15e2:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    15e6:	08 95       	ret

000015e8 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    15e8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    15ec:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    15f0:	08 95       	ret

000015f2 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    15f2:	1f 92       	push	r1
    15f4:	0f 92       	push	r0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	0f 92       	push	r0
    15fa:	0b b6       	in	r0, 0x3b	; 59
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	ef 93       	push	r30
    1616:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1618:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    161c:	85 ff       	sbrs	r24, 5
    161e:	0a c0       	rjmp	.+20     	; 0x1634 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1620:	80 91 a0 00 	lds	r24, 0x00A0
    1624:	85 ff       	sbrs	r24, 5
    1626:	06 c0       	rjmp	.+12     	; 0x1634 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1628:	80 91 9f 00 	lds	r24, 0x009F
    162c:	8f 7d       	andi	r24, 0xDF	; 223
    162e:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1632:	12 d1       	rcall	.+548    	; 0x1858 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1634:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1638:	81 ff       	sbrs	r24, 1
    163a:	16 c0       	rjmp	.+44     	; 0x1668 <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    163c:	80 91 a0 00 	lds	r24, 0x00A0
    1640:	81 ff       	sbrs	r24, 1
    1642:	12 c0       	rjmp	.+36     	; 0x1668 <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1644:	80 91 9f 00 	lds	r24, 0x009F
    1648:	8d 7f       	andi	r24, 0xFD	; 253
    164a:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    164e:	80 91 9f 00 	lds	r24, 0x009F
    1652:	8e 7f       	andi	r24, 0xFE	; 254
    1654:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1658:	80 91 a0 00 	lds	r24, 0x00A0
    165c:	8d 7f       	andi	r24, 0xFD	; 253
    165e:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1662:	0e 94 36 02 	call	0x46c	; 0x46c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1666:	5a df       	rcall	.-332    	; 0x151c <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1668:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    166c:	81 ff       	sbrs	r24, 1
    166e:	17 c0       	rjmp	.+46     	; 0x169e <__vector_10+0xac>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1670:	80 91 de 00 	lds	r24, 0x00DE
    1674:	81 ff       	sbrs	r24, 1
    1676:	13 c0       	rjmp	.+38     	; 0x169e <__vector_10+0xac>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1678:	80 91 df 00 	lds	r24, 0x00DF
    167c:	8d 7f       	andi	r24, 0xFD	; 253
    167e:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    1682:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1684:	80 91 dd 00 	lds	r24, 0x00DD
    1688:	81 60       	ori	r24, 0x01	; 1
    168a:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	0e 94 13 03 	call	0x626	; 0x626 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    1694:	0e 94 36 02 	call	0x46c	; 0x46c <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 2f 01 	sts	0x012F, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    169e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    16a2:	80 ff       	sbrs	r24, 0
    16a4:	18 c0       	rjmp	.+48     	; 0x16d6 <__vector_10+0xe4>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    16a6:	80 91 de 00 	lds	r24, 0x00DE
    16aa:	80 ff       	sbrs	r24, 0
    16ac:	14 c0       	rjmp	.+40     	; 0x16d6 <__vector_10+0xe4>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    16ae:	80 91 df 00 	lds	r24, 0x00DF
    16b2:	8e 7f       	andi	r24, 0xFE	; 254
    16b4:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    16b8:	80 91 de 00 	lds	r24, 0x00DE
    16bc:	8e 7f       	andi	r24, 0xFE	; 254
    16be:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    16c2:	0e 94 30 02 	call	0x460	; 0x460 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    16c6:	80 91 a0 00 	lds	r24, 0x00A0
    16ca:	82 60       	ori	r24, 0x02	; 2
    16cc:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	80 93 2f 01 	sts	0x012F, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    16d6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    16da:	82 ff       	sbrs	r24, 2
    16dc:	10 c0       	rjmp	.+32     	; 0x16fe <__vector_10+0x10c>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    16de:	80 91 de 00 	lds	r24, 0x00DE
    16e2:	82 ff       	sbrs	r24, 2
    16e4:	0c c0       	rjmp	.+24     	; 0x16fe <__vector_10+0x10c>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    16e6:	80 91 df 00 	lds	r24, 0x00DF
    16ea:	8b 7f       	andi	r24, 0xFB	; 251
    16ec:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	0e 94 33 03 	call	0x666	; 0x666 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    16f8:	0e 94 36 02 	call	0x46c	; 0x46c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    16fc:	0f df       	rcall	.-482    	; 0x151c <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    16fe:	ff 91       	pop	r31
    1700:	ef 91       	pop	r30
    1702:	bf 91       	pop	r27
    1704:	af 91       	pop	r26
    1706:	9f 91       	pop	r25
    1708:	8f 91       	pop	r24
    170a:	7f 91       	pop	r23
    170c:	6f 91       	pop	r22
    170e:	5f 91       	pop	r21
    1710:	4f 91       	pop	r20
    1712:	3f 91       	pop	r19
    1714:	2f 91       	pop	r18
    1716:	0f 90       	pop	r0
    1718:	0b be       	out	0x3b, r0	; 59
    171a:	0f 90       	pop	r0
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	0f 90       	pop	r0
    1720:	1f 90       	pop	r1
    1722:	18 95       	reti

00001724 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	29 97       	sbiw	r28, 0x09	; 9
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	6b 01       	movw	r12, r22
    1746:	8a 01       	movw	r16, r20
    1748:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    174a:	90 e8       	ldi	r25, 0x80	; 128
    174c:	90 93 27 01 	sts	0x0127, r25
    1750:	96 e0       	ldi	r25, 0x06	; 6
    1752:	90 93 28 01 	sts	0x0128, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    175c:	90 93 2a 01 	sts	0x012A, r25
    1760:	80 93 29 01 	sts	0x0129, r24
    1764:	10 92 2c 01 	sts	0x012C, r1
    1768:	10 92 2b 01 	sts	0x012B, r1
    176c:	89 e0       	ldi	r24, 0x09	; 9
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	90 93 2e 01 	sts	0x012E, r25
    1774:	80 93 2d 01 	sts	0x012D, r24
    1778:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    177c:	ce 01       	movw	r24, r28
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	95 d0       	rcall	.+298    	; 0x18ac <USB_Host_SendControlRequest>
    1782:	88 23       	and	r24, r24
    1784:	b9 f4       	brne	.+46     	; 0x17b4 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	f6 01       	movw	r30, r12
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1790:	e8 16       	cp	r14, r24
    1792:	f9 06       	cpc	r15, r25
    1794:	70 f0       	brcs	.+28     	; 0x17b2 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1796:	90 93 2e 01 	sts	0x012E, r25
    179a:	80 93 2d 01 	sts	0x012D, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    179e:	c8 01       	movw	r24, r16
    17a0:	85 d0       	rcall	.+266    	; 0x18ac <USB_Host_SendControlRequest>
    17a2:	88 23       	and	r24, r24
    17a4:	39 f4       	brne	.+14     	; 0x17b4 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    17a6:	f8 01       	movw	r30, r16
    17a8:	91 81       	ldd	r25, Z+1	; 0x01
    17aa:	92 30       	cpi	r25, 0x02	; 2
    17ac:	19 f0       	breq	.+6      	; 0x17b4 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    17ae:	86 e0       	ldi	r24, 0x06	; 6
    17b0:	01 c0       	rjmp	.+2      	; 0x17b4 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    17b2:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    17b4:	29 96       	adiw	r28, 0x09	; 9
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
    17cc:	df 90       	pop	r13
    17ce:	cf 90       	pop	r12
    17d0:	08 95       	ret

000017d2 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    17d2:	af 92       	push	r10
    17d4:	bf 92       	push	r11
    17d6:	cf 92       	push	r12
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	8c 01       	movw	r16, r24
    17e8:	eb 01       	movw	r28, r22
    17ea:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    17ec:	23 c0       	rjmp	.+70     	; 0x1834 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    17ee:	e8 81       	ld	r30, Y
    17f0:	f9 81       	ldd	r31, Y+1	; 0x01
    17f2:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    17f4:	20 81       	ld	r18, Z
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	c7 01       	movw	r24, r14
    17fa:	2e 15       	cp	r18, r14
    17fc:	3f 05       	cpc	r19, r15
    17fe:	08 f4       	brcc	.+2      	; 0x1802 <USB_GetNextDescriptorComp+0x30>
    1800:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1802:	e8 0f       	add	r30, r24
    1804:	f9 1f       	adc	r31, r25
    1806:	f9 83       	std	Y+1, r31	; 0x01
    1808:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    180a:	f8 01       	movw	r30, r16
    180c:	20 81       	ld	r18, Z
    180e:	31 81       	ldd	r19, Z+1	; 0x01
    1810:	28 1b       	sub	r18, r24
    1812:	39 0b       	sbc	r19, r25
    1814:	31 83       	std	Z+1, r19	; 0x01
    1816:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1818:	88 81       	ld	r24, Y
    181a:	99 81       	ldd	r25, Y+1	; 0x01
    181c:	f6 01       	movw	r30, r12
    181e:	09 95       	icall
    1820:	82 30       	cpi	r24, 0x02	; 2
    1822:	41 f0       	breq	.+16     	; 0x1834 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	69 f4       	brne	.+26     	; 0x1842 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    1828:	a8 82       	st	Y, r10
    182a:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    182c:	f8 01       	movw	r30, r16
    182e:	f1 82       	std	Z+1, r15	; 0x01
    1830:	e0 82       	st	Z, r14
    1832:	07 c0       	rjmp	.+14     	; 0x1842 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1834:	f8 01       	movw	r30, r16
    1836:	e0 80       	ld	r14, Z
    1838:	f1 80       	ldd	r15, Z+1	; 0x01
    183a:	e1 14       	cp	r14, r1
    183c:	f1 04       	cpc	r15, r1
    183e:	b9 f6       	brne	.-82     	; 0x17ee <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1840:	82 e0       	ldi	r24, 0x02	; 2
}
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	bf 90       	pop	r11
    1854:	af 90       	pop	r10
    1856:	08 95       	ret

00001858 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1858:	08 95       	ret

0000185a <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1862:	c8 ee       	ldi	r28, 0xE8	; 232
    1864:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1866:	07 c0       	rjmp	.+14     	; 0x1876 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	68 db       	rcall	.-2352   	; 0xf3c <USB_Host_WaitMS>
    186c:	88 23       	and	r24, r24
    186e:	d1 f4       	brne	.+52     	; 0x18a4 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1870:	20 97       	sbiw	r28, 0x00	; 0
    1872:	b9 f0       	breq	.+46     	; 0x18a2 <USB_Host_WaitForIOS+0x48>
    1874:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1876:	11 23       	and	r17, r17
    1878:	29 f4       	brne	.+10     	; 0x1884 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    187a:	80 91 a6 00 	lds	r24, 0x00A6
    187e:	83 ff       	sbrs	r24, 3
    1880:	f3 cf       	rjmp	.-26     	; 0x1868 <USB_Host_WaitForIOS+0xe>
    1882:	0d c0       	rjmp	.+26     	; 0x189e <USB_Host_WaitForIOS+0x44>
    1884:	11 30       	cpi	r17, 0x01	; 1
    1886:	29 f4       	brne	.+10     	; 0x1892 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1888:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    188c:	80 ff       	sbrs	r24, 0
    188e:	ec cf       	rjmp	.-40     	; 0x1868 <USB_Host_WaitForIOS+0xe>
    1890:	06 c0       	rjmp	.+12     	; 0x189e <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1892:	12 30       	cpi	r17, 0x02	; 2
    1894:	49 f7       	brne	.-46     	; 0x1868 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1896:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    189a:	82 ff       	sbrs	r24, 2
    189c:	e5 cf       	rjmp	.-54     	; 0x1868 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    18a2:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	1f 91       	pop	r17
    18aa:	08 95       	ret

000018ac <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    18ac:	ef 92       	push	r14
    18ae:	ff 92       	push	r15
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    18ba:	e0 90 9e 00 	lds	r14, 0x009E
    18be:	ff 24       	eor	r15, r15
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	e8 22       	and	r14, r24
    18c4:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    18c6:	c0 91 2d 01 	lds	r28, 0x012D
    18ca:	d0 91 2e 01 	lds	r29, 0x012E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    18ce:	80 91 9e 00 	lds	r24, 0x009E
    18d2:	81 60       	ori	r24, 0x01	; 1
    18d4:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	30 db       	rcall	.-2464   	; 0xf3c <USB_Host_WaitMS>
    18dc:	88 23       	and	r24, r24
    18de:	09 f0       	breq	.+2      	; 0x18e2 <USB_Host_SendControlRequest+0x36>
    18e0:	cb c0       	rjmp	.+406    	; 0x1a78 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18e2:	80 91 aa 00 	lds	r24, 0x00AA
    18e6:	8f 7c       	andi	r24, 0xCF	; 207
    18e8:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    18ec:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    18f0:	80 91 a6 00 	lds	r24, 0x00A6
    18f4:	8f 7e       	andi	r24, 0xEF	; 239
    18f6:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18fa:	80 91 a9 00 	lds	r24, 0x00A9
    18fe:	8f 7b       	andi	r24, 0xBF	; 191
    1900:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1904:	e7 e2       	ldi	r30, 0x27	; 39
    1906:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1908:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    190a:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	ef 32       	cpi	r30, 0x2F	; 47
    1912:	f8 07       	cpc	r31, r24
    1914:	c9 f7       	brne	.-14     	; 0x1908 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1916:	80 91 a6 00 	lds	r24, 0x00A6
    191a:	87 77       	andi	r24, 0x77	; 119
    191c:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	9b df       	rcall	.-202    	; 0x185a <USB_Host_WaitForIOS>
    1924:	88 23       	and	r24, r24
    1926:	09 f0       	breq	.+2      	; 0x192a <USB_Host_SendControlRequest+0x7e>
    1928:	a7 c0       	rjmp	.+334    	; 0x1a78 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    192a:	80 91 a9 00 	lds	r24, 0x00A9
    192e:	80 64       	ori	r24, 0x40	; 64
    1930:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	02 db       	rcall	.-2556   	; 0xf3c <USB_Host_WaitMS>
    1938:	88 23       	and	r24, r24
    193a:	09 f0       	breq	.+2      	; 0x193e <USB_Host_SendControlRequest+0x92>
    193c:	9d c0       	rjmp	.+314    	; 0x1a78 <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    193e:	80 91 27 01 	lds	r24, 0x0127
    1942:	87 ff       	sbrs	r24, 7
    1944:	4f c0       	rjmp	.+158    	; 0x19e4 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1946:	80 91 aa 00 	lds	r24, 0x00AA
    194a:	8f 7c       	andi	r24, 0xCF	; 207
    194c:	80 61       	ori	r24, 0x10	; 16
    194e:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1952:	01 15       	cp	r16, r1
    1954:	11 05       	cpc	r17, r1
    1956:	61 f5       	brne	.+88     	; 0x19b0 <USB_Host_SendControlRequest+0x104>
    1958:	2d c0       	rjmp	.+90     	; 0x19b4 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    195a:	80 91 a9 00 	lds	r24, 0x00A9
    195e:	8f 7b       	andi	r24, 0xBF	; 191
    1960:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	79 df       	rcall	.-270    	; 0x185a <USB_Host_WaitForIOS>
    1968:	88 23       	and	r24, r24
    196a:	09 f0       	breq	.+2      	; 0x196e <USB_Host_SendControlRequest+0xc2>
    196c:	85 c0       	rjmp	.+266    	; 0x1a78 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    196e:	80 91 f6 00 	lds	r24, 0x00F6
    1972:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	49 f4       	brne	.+18     	; 0x198c <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    197a:	c0 e0       	ldi	r28, 0x00	; 0
    197c:	d0 e0       	ldi	r29, 0x00	; 0
    197e:	06 c0       	rjmp	.+12     	; 0x198c <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1980:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1984:	f8 01       	movw	r30, r16
    1986:	81 93       	st	Z+, r24
    1988:	8f 01       	movw	r16, r30
					DataLen--;
    198a:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    198c:	80 91 f6 00 	lds	r24, 0x00F6
    1990:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	11 f0       	breq	.+4      	; 0x199c <USB_Host_SendControlRequest+0xf0>
    1998:	20 97       	sbiw	r28, 0x00	; 0
    199a:	91 f7       	brne	.-28     	; 0x1980 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    199c:	80 91 a9 00 	lds	r24, 0x00A9
    19a0:	80 64       	ori	r24, 0x40	; 64
    19a2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19a6:	80 91 a6 00 	lds	r24, 0x00A6
    19aa:	8e 77       	andi	r24, 0x7E	; 126
    19ac:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    19b0:	20 97       	sbiw	r28, 0x00	; 0
    19b2:	99 f6       	brne	.-90     	; 0x195a <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19b4:	80 91 aa 00 	lds	r24, 0x00AA
    19b8:	8f 7c       	andi	r24, 0xCF	; 207
    19ba:	80 62       	ori	r24, 0x20	; 32
    19bc:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19c0:	80 91 a9 00 	lds	r24, 0x00A9
    19c4:	8f 7b       	andi	r24, 0xBF	; 191
    19c6:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19ca:	82 e0       	ldi	r24, 0x02	; 2
    19cc:	46 df       	rcall	.-372    	; 0x185a <USB_Host_WaitForIOS>
    19ce:	88 23       	and	r24, r24
    19d0:	09 f0       	breq	.+2      	; 0x19d4 <USB_Host_SendControlRequest+0x128>
    19d2:	52 c0       	rjmp	.+164    	; 0x1a78 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    19d4:	80 91 a6 00 	lds	r24, 0x00A6
    19d8:	8b 77       	andi	r24, 0x7B	; 123
    19da:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19de:	82 e0       	ldi	r24, 0x02	; 2
    19e0:	3c df       	rcall	.-392    	; 0x185a <USB_Host_WaitForIOS>
    19e2:	4a c0       	rjmp	.+148    	; 0x1a78 <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    19e4:	01 15       	cp	r16, r1
    19e6:	11 05       	cpc	r17, r1
    19e8:	99 f1       	breq	.+102    	; 0x1a50 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19ea:	80 91 aa 00 	lds	r24, 0x00AA
    19ee:	8f 7c       	andi	r24, 0xCF	; 207
    19f0:	80 62       	ori	r24, 0x20	; 32
    19f2:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19f6:	80 91 a9 00 	lds	r24, 0x00A9
    19fa:	8f 7b       	andi	r24, 0xBF	; 191
    19fc:	80 93 a9 00 	sts	0x00A9, r24
    1a00:	1c c0       	rjmp	.+56     	; 0x1a3a <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	2a df       	rcall	.-428    	; 0x185a <USB_Host_WaitForIOS>
    1a06:	88 23       	and	r24, r24
    1a08:	b9 f5       	brne	.+110    	; 0x1a78 <USB_Host_SendControlRequest+0x1cc>
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	06 c0       	rjmp	.+12     	; 0x1a1a <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1a0e:	81 91       	ld	r24, Z+
    1a10:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1a12:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1a16:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1a18:	59 f0       	breq	.+22     	; 0x1a30 <USB_Host_SendControlRequest+0x184>
    1a1a:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1a1c:	20 91 f6 00 	lds	r18, 0x00F6
    1a20:	30 91 f7 00 	lds	r19, 0x00F7
    1a24:	80 91 1c 01 	lds	r24, 0x011C
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	28 17       	cp	r18, r24
    1a2c:	39 07       	cpc	r19, r25
    1a2e:	78 f3       	brcs	.-34     	; 0x1a0e <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a30:	80 91 a6 00 	lds	r24, 0x00A6
    1a34:	8b 77       	andi	r24, 0x7B	; 123
    1a36:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1a3a:	20 97       	sbiw	r28, 0x00	; 0
    1a3c:	11 f7       	brne	.-60     	; 0x1a02 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a3e:	82 e0       	ldi	r24, 0x02	; 2
    1a40:	0c df       	rcall	.-488    	; 0x185a <USB_Host_WaitForIOS>
    1a42:	88 23       	and	r24, r24
    1a44:	c9 f4       	brne	.+50     	; 0x1a78 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a46:	80 91 a9 00 	lds	r24, 0x00A9
    1a4a:	80 64       	ori	r24, 0x40	; 64
    1a4c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a50:	80 91 aa 00 	lds	r24, 0x00AA
    1a54:	8f 7c       	andi	r24, 0xCF	; 207
    1a56:	80 61       	ori	r24, 0x10	; 16
    1a58:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a5c:	80 91 a9 00 	lds	r24, 0x00A9
    1a60:	8f 7b       	andi	r24, 0xBF	; 191
    1a62:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	f8 de       	rcall	.-528    	; 0x185a <USB_Host_WaitForIOS>
    1a6a:	88 23       	and	r24, r24
    1a6c:	29 f4       	brne	.+10     	; 0x1a78 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1a6e:	90 91 a6 00 	lds	r25, 0x00A6
    1a72:	9e 77       	andi	r25, 0x7E	; 126
    1a74:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a78:	90 91 a9 00 	lds	r25, 0x00A9
    1a7c:	90 64       	ori	r25, 0x40	; 64
    1a7e:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1a82:	e1 14       	cp	r14, r1
    1a84:	f1 04       	cpc	r15, r1
    1a86:	29 f4       	brne	.+10     	; 0x1a92 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1a88:	90 91 9e 00 	lds	r25, 0x009E
    1a8c:	9e 7f       	andi	r25, 0xFE	; 254
    1a8e:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1a92:	91 e0       	ldi	r25, 0x01	; 1
    1a94:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1a98:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	ff 90       	pop	r15
    1aa6:	ef 90       	pop	r14
    1aa8:	08 95       	ret

00001aaa <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1aaa:	1f 93       	push	r17
    1aac:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1aae:	10 92 27 01 	sts	0x0127, r1
    1ab2:	89 e0       	ldi	r24, 0x09	; 9
    1ab4:	80 93 28 01 	sts	0x0128, r24
    1ab8:	10 93 29 01 	sts	0x0129, r17
    1abc:	10 92 2a 01 	sts	0x012A, r1
    1ac0:	10 92 2c 01 	sts	0x012C, r1
    1ac4:	10 92 2b 01 	sts	0x012B, r1
    1ac8:	10 92 2e 01 	sts	0x012E, r1
    1acc:	10 92 2d 01 	sts	0x012D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1ad0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	e9 de       	rcall	.-558    	; 0x18ac <USB_Host_SendControlRequest>
    1ada:	88 23       	and	r24, r24
    1adc:	49 f4       	brne	.+18     	; 0x1af0 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1ade:	10 93 25 01 	sts	0x0125, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1ae2:	11 23       	and	r17, r17
    1ae4:	11 f0       	breq	.+4      	; 0x1aea <USB_Host_SetDeviceConfiguration+0x40>
    1ae6:	9b e0       	ldi	r25, 0x0B	; 11
    1ae8:	01 c0       	rjmp	.+2      	; 0x1aec <USB_Host_SetDeviceConfiguration+0x42>
    1aea:	9a e0       	ldi	r25, 0x0A	; 10
    1aec:	90 93 2f 01 	sts	0x012F, r25
	}

	return ErrorCode;
}
    1af0:	1f 91       	pop	r17
    1af2:	08 95       	ret

00001af4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1af4:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1af6:	10 91 a7 00 	lds	r17, 0x00A7
    1afa:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1afc:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1b00:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1b04:	70 da       	rcall	.-2848   	; 0xfe6 <USB_Host_ProcessNextHostState>
    1b06:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1b0a:	1f 91       	pop	r17
    1b0c:	08 95       	ret

00001b0e <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1b0e:	90 91 c8 00 	lds	r25, 0x00C8
    1b12:	95 ff       	sbrs	r25, 5
    1b14:	fc cf       	rjmp	.-8      	; 0x1b0e <Serial_putchar>
				UDR1 = DataByte;
    1b16:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	08 95       	ret

00001b20 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1b20:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1b24:	87 ff       	sbrs	r24, 7
    1b26:	08 c0       	rjmp	.+16     	; 0x1b38 <Serial_getchar+0x18>
    1b28:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1b2c:	87 ff       	sbrs	r24, 7
    1b2e:	07 c0       	rjmp	.+14     	; 0x1b3e <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1b30:	20 91 ce 00 	lds	r18, 0x00CE
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    1b38:	2e ef       	ldi	r18, 0xFE	; 254
    1b3a:	3f ef       	ldi	r19, 0xFF	; 255
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1b3e:	2f ef       	ldi	r18, 0xFF	; 255
    1b40:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1b42:	c9 01       	movw	r24, r18
    1b44:	08 95       	ret

00001b46 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1b46:	fc 01       	movw	r30, r24
	if (!(Stream))
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	51 f4       	brne	.+20     	; 0x1b60 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1b4c:	e0 e3       	ldi	r30, 0x30	; 48
    1b4e:	f1 e0       	ldi	r31, 0x01	; 1
    1b50:	f0 93 3f 01 	sts	0x013F, r31
    1b54:	e0 93 3e 01 	sts	0x013E, r30
		stdout = Stream;
    1b58:	f0 93 41 01 	sts	0x0141, r31
    1b5c:	e0 93 40 01 	sts	0x0140, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1b60:	8e e0       	ldi	r24, 0x0E	; 14
    1b62:	df 01       	movw	r26, r30
    1b64:	1d 92       	st	X+, r1
    1b66:	8a 95       	dec	r24
    1b68:	e9 f7       	brne	.-6      	; 0x1b64 <Serial_CreateStream+0x1e>
    1b6a:	83 e0       	ldi	r24, 0x03	; 3
    1b6c:	83 83       	std	Z+3, r24	; 0x03
    1b6e:	87 e8       	ldi	r24, 0x87	; 135
    1b70:	9d e0       	ldi	r25, 0x0D	; 13
    1b72:	91 87       	std	Z+9, r25	; 0x09
    1b74:	80 87       	std	Z+8, r24	; 0x08
    1b76:	80 e9       	ldi	r24, 0x90	; 144
    1b78:	9d e0       	ldi	r25, 0x0D	; 13
    1b7a:	93 87       	std	Z+11, r25	; 0x0b
    1b7c:	82 87       	std	Z+10, r24	; 0x0a
}
    1b7e:	08 95       	ret

00001b80 <memcpy>:
    1b80:	fb 01       	movw	r30, r22
    1b82:	dc 01       	movw	r26, r24
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <memcpy+0xa>
    1b86:	01 90       	ld	r0, Z+
    1b88:	0d 92       	st	X+, r0
    1b8a:	41 50       	subi	r20, 0x01	; 1
    1b8c:	50 40       	sbci	r21, 0x00	; 0
    1b8e:	d8 f7       	brcc	.-10     	; 0x1b86 <memcpy+0x6>
    1b90:	08 95       	ret

00001b92 <printf>:
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	35 96       	adiw	r30, 0x05	; 5
    1b9e:	61 91       	ld	r22, Z+
    1ba0:	71 91       	ld	r23, Z+
    1ba2:	80 91 40 01 	lds	r24, 0x0140
    1ba6:	90 91 41 01 	lds	r25, 0x0141
    1baa:	af 01       	movw	r20, r30
    1bac:	91 d0       	rcall	.+290    	; 0x1cd0 <vfprintf>
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <printf_P>:
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	35 96       	adiw	r30, 0x05	; 5
    1bc0:	61 91       	ld	r22, Z+
    1bc2:	71 91       	ld	r23, Z+
    1bc4:	80 91 40 01 	lds	r24, 0x0140
    1bc8:	90 91 41 01 	lds	r25, 0x0141
    1bcc:	dc 01       	movw	r26, r24
    1bce:	13 96       	adiw	r26, 0x03	; 3
    1bd0:	2c 91       	ld	r18, X
    1bd2:	13 97       	sbiw	r26, 0x03	; 3
    1bd4:	28 60       	ori	r18, 0x08	; 8
    1bd6:	13 96       	adiw	r26, 0x03	; 3
    1bd8:	2c 93       	st	X, r18
    1bda:	af 01       	movw	r20, r30
    1bdc:	79 d0       	rcall	.+242    	; 0x1cd0 <vfprintf>
    1bde:	e0 91 40 01 	lds	r30, 0x0140
    1be2:	f0 91 41 01 	lds	r31, 0x0141
    1be6:	23 81       	ldd	r18, Z+3	; 0x03
    1be8:	27 7f       	andi	r18, 0xF7	; 247
    1bea:	23 83       	std	Z+3, r18	; 0x03
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <puts>:
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	8c 01       	movw	r16, r24
    1c00:	e0 91 40 01 	lds	r30, 0x0140
    1c04:	f0 91 41 01 	lds	r31, 0x0141
    1c08:	83 81       	ldd	r24, Z+3	; 0x03
    1c0a:	81 ff       	sbrs	r24, 1
    1c0c:	1f c0       	rjmp	.+62     	; 0x1c4c <puts+0x5a>
    1c0e:	c0 e0       	ldi	r28, 0x00	; 0
    1c10:	d0 e0       	ldi	r29, 0x00	; 0
    1c12:	0a c0       	rjmp	.+20     	; 0x1c28 <puts+0x36>
    1c14:	db 01       	movw	r26, r22
    1c16:	18 96       	adiw	r26, 0x08	; 8
    1c18:	ed 91       	ld	r30, X+
    1c1a:	fc 91       	ld	r31, X
    1c1c:	19 97       	sbiw	r26, 0x09	; 9
    1c1e:	09 95       	icall
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	11 f0       	breq	.+4      	; 0x1c28 <puts+0x36>
    1c24:	cf ef       	ldi	r28, 0xFF	; 255
    1c26:	df ef       	ldi	r29, 0xFF	; 255
    1c28:	f8 01       	movw	r30, r16
    1c2a:	81 91       	ld	r24, Z+
    1c2c:	8f 01       	movw	r16, r30
    1c2e:	60 91 40 01 	lds	r22, 0x0140
    1c32:	70 91 41 01 	lds	r23, 0x0141
    1c36:	88 23       	and	r24, r24
    1c38:	69 f7       	brne	.-38     	; 0x1c14 <puts+0x22>
    1c3a:	db 01       	movw	r26, r22
    1c3c:	18 96       	adiw	r26, 0x08	; 8
    1c3e:	ed 91       	ld	r30, X+
    1c40:	fc 91       	ld	r31, X
    1c42:	19 97       	sbiw	r26, 0x09	; 9
    1c44:	8a e0       	ldi	r24, 0x0A	; 10
    1c46:	09 95       	icall
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	11 f0       	breq	.+4      	; 0x1c50 <puts+0x5e>
    1c4c:	cf ef       	ldi	r28, 0xFF	; 255
    1c4e:	df ef       	ldi	r29, 0xFF	; 255
    1c50:	ce 01       	movw	r24, r28
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	ff 90       	pop	r15
    1c5c:	ef 90       	pop	r14
    1c5e:	08 95       	ret

00001c60 <puts_P>:
    1c60:	ef 92       	push	r14
    1c62:	ff 92       	push	r15
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	8c 01       	movw	r16, r24
    1c6e:	e0 91 40 01 	lds	r30, 0x0140
    1c72:	f0 91 41 01 	lds	r31, 0x0141
    1c76:	83 81       	ldd	r24, Z+3	; 0x03
    1c78:	81 ff       	sbrs	r24, 1
    1c7a:	20 c0       	rjmp	.+64     	; 0x1cbc <puts_P+0x5c>
    1c7c:	c0 e0       	ldi	r28, 0x00	; 0
    1c7e:	d0 e0       	ldi	r29, 0x00	; 0
    1c80:	0c c0       	rjmp	.+24     	; 0x1c9a <puts_P+0x3a>
    1c82:	db 01       	movw	r26, r22
    1c84:	18 96       	adiw	r26, 0x08	; 8
    1c86:	ed 91       	ld	r30, X+
    1c88:	fc 91       	ld	r31, X
    1c8a:	19 97       	sbiw	r26, 0x09	; 9
    1c8c:	09 95       	icall
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	11 f0       	breq	.+4      	; 0x1c96 <puts_P+0x36>
    1c92:	cf ef       	ldi	r28, 0xFF	; 255
    1c94:	df ef       	ldi	r29, 0xFF	; 255
    1c96:	0f 5f       	subi	r16, 0xFF	; 255
    1c98:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9a:	f8 01       	movw	r30, r16
    1c9c:	84 91       	lpm	r24, Z+
    1c9e:	60 91 40 01 	lds	r22, 0x0140
    1ca2:	70 91 41 01 	lds	r23, 0x0141
    1ca6:	88 23       	and	r24, r24
    1ca8:	61 f7       	brne	.-40     	; 0x1c82 <puts_P+0x22>
    1caa:	db 01       	movw	r26, r22
    1cac:	18 96       	adiw	r26, 0x08	; 8
    1cae:	ed 91       	ld	r30, X+
    1cb0:	fc 91       	ld	r31, X
    1cb2:	19 97       	sbiw	r26, 0x09	; 9
    1cb4:	8a e0       	ldi	r24, 0x0A	; 10
    1cb6:	09 95       	icall
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	11 f0       	breq	.+4      	; 0x1cc0 <puts_P+0x60>
    1cbc:	cf ef       	ldi	r28, 0xFF	; 255
    1cbe:	df ef       	ldi	r29, 0xFF	; 255
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	ff 90       	pop	r15
    1ccc:	ef 90       	pop	r14
    1cce:	08 95       	ret

00001cd0 <vfprintf>:
    1cd0:	2f 92       	push	r2
    1cd2:	3f 92       	push	r3
    1cd4:	4f 92       	push	r4
    1cd6:	5f 92       	push	r5
    1cd8:	6f 92       	push	r6
    1cda:	7f 92       	push	r7
    1cdc:	8f 92       	push	r8
    1cde:	9f 92       	push	r9
    1ce0:	af 92       	push	r10
    1ce2:	bf 92       	push	r11
    1ce4:	cf 92       	push	r12
    1ce6:	df 92       	push	r13
    1ce8:	ef 92       	push	r14
    1cea:	ff 92       	push	r15
    1cec:	0f 93       	push	r16
    1cee:	1f 93       	push	r17
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	2c 97       	sbiw	r28, 0x0c	; 12
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	6c 01       	movw	r12, r24
    1d06:	1b 01       	movw	r2, r22
    1d08:	8a 01       	movw	r16, r20
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	17 82       	std	Z+7, r1	; 0x07
    1d0e:	16 82       	std	Z+6, r1	; 0x06
    1d10:	83 81       	ldd	r24, Z+3	; 0x03
    1d12:	81 ff       	sbrs	r24, 1
    1d14:	c4 c1       	rjmp	.+904    	; 0x209e <vfprintf+0x3ce>
    1d16:	2e 01       	movw	r4, r28
    1d18:	08 94       	sec
    1d1a:	41 1c       	adc	r4, r1
    1d1c:	51 1c       	adc	r5, r1
    1d1e:	f6 01       	movw	r30, r12
    1d20:	93 81       	ldd	r25, Z+3	; 0x03
    1d22:	f1 01       	movw	r30, r2
    1d24:	93 fd       	sbrc	r25, 3
    1d26:	85 91       	lpm	r24, Z+
    1d28:	93 ff       	sbrs	r25, 3
    1d2a:	81 91       	ld	r24, Z+
    1d2c:	1f 01       	movw	r2, r30
    1d2e:	88 23       	and	r24, r24
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <vfprintf+0x64>
    1d32:	b1 c1       	rjmp	.+866    	; 0x2096 <vfprintf+0x3c6>
    1d34:	85 32       	cpi	r24, 0x25	; 37
    1d36:	39 f4       	brne	.+14     	; 0x1d46 <vfprintf+0x76>
    1d38:	93 fd       	sbrc	r25, 3
    1d3a:	85 91       	lpm	r24, Z+
    1d3c:	93 ff       	sbrs	r25, 3
    1d3e:	81 91       	ld	r24, Z+
    1d40:	1f 01       	movw	r2, r30
    1d42:	85 32       	cpi	r24, 0x25	; 37
    1d44:	21 f4       	brne	.+8      	; 0x1d4e <vfprintf+0x7e>
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	b6 01       	movw	r22, r12
    1d4a:	db d1       	rcall	.+950    	; 0x2102 <fputc>
    1d4c:	e8 cf       	rjmp	.-48     	; 0x1d1e <vfprintf+0x4e>
    1d4e:	ee 24       	eor	r14, r14
    1d50:	ff 24       	eor	r15, r15
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	20 32       	cpi	r18, 0x20	; 32
    1d56:	b0 f4       	brcc	.+44     	; 0x1d84 <vfprintf+0xb4>
    1d58:	8b 32       	cpi	r24, 0x2B	; 43
    1d5a:	69 f0       	breq	.+26     	; 0x1d76 <vfprintf+0xa6>
    1d5c:	8c 32       	cpi	r24, 0x2C	; 44
    1d5e:	28 f4       	brcc	.+10     	; 0x1d6a <vfprintf+0x9a>
    1d60:	80 32       	cpi	r24, 0x20	; 32
    1d62:	51 f0       	breq	.+20     	; 0x1d78 <vfprintf+0xa8>
    1d64:	83 32       	cpi	r24, 0x23	; 35
    1d66:	71 f4       	brne	.+28     	; 0x1d84 <vfprintf+0xb4>
    1d68:	0b c0       	rjmp	.+22     	; 0x1d80 <vfprintf+0xb0>
    1d6a:	8d 32       	cpi	r24, 0x2D	; 45
    1d6c:	39 f0       	breq	.+14     	; 0x1d7c <vfprintf+0xac>
    1d6e:	80 33       	cpi	r24, 0x30	; 48
    1d70:	49 f4       	brne	.+18     	; 0x1d84 <vfprintf+0xb4>
    1d72:	21 60       	ori	r18, 0x01	; 1
    1d74:	2c c0       	rjmp	.+88     	; 0x1dce <vfprintf+0xfe>
    1d76:	22 60       	ori	r18, 0x02	; 2
    1d78:	24 60       	ori	r18, 0x04	; 4
    1d7a:	29 c0       	rjmp	.+82     	; 0x1dce <vfprintf+0xfe>
    1d7c:	28 60       	ori	r18, 0x08	; 8
    1d7e:	27 c0       	rjmp	.+78     	; 0x1dce <vfprintf+0xfe>
    1d80:	20 61       	ori	r18, 0x10	; 16
    1d82:	25 c0       	rjmp	.+74     	; 0x1dce <vfprintf+0xfe>
    1d84:	27 fd       	sbrc	r18, 7
    1d86:	2c c0       	rjmp	.+88     	; 0x1de0 <vfprintf+0x110>
    1d88:	38 2f       	mov	r19, r24
    1d8a:	30 53       	subi	r19, 0x30	; 48
    1d8c:	3a 30       	cpi	r19, 0x0A	; 10
    1d8e:	98 f4       	brcc	.+38     	; 0x1db6 <vfprintf+0xe6>
    1d90:	26 ff       	sbrs	r18, 6
    1d92:	08 c0       	rjmp	.+16     	; 0x1da4 <vfprintf+0xd4>
    1d94:	8e 2d       	mov	r24, r14
    1d96:	88 0f       	add	r24, r24
    1d98:	e8 2e       	mov	r14, r24
    1d9a:	ee 0c       	add	r14, r14
    1d9c:	ee 0c       	add	r14, r14
    1d9e:	e8 0e       	add	r14, r24
    1da0:	e3 0e       	add	r14, r19
    1da2:	15 c0       	rjmp	.+42     	; 0x1dce <vfprintf+0xfe>
    1da4:	8f 2d       	mov	r24, r15
    1da6:	88 0f       	add	r24, r24
    1da8:	f8 2e       	mov	r15, r24
    1daa:	ff 0c       	add	r15, r15
    1dac:	ff 0c       	add	r15, r15
    1dae:	f8 0e       	add	r15, r24
    1db0:	f3 0e       	add	r15, r19
    1db2:	20 62       	ori	r18, 0x20	; 32
    1db4:	0c c0       	rjmp	.+24     	; 0x1dce <vfprintf+0xfe>
    1db6:	8e 32       	cpi	r24, 0x2E	; 46
    1db8:	21 f4       	brne	.+8      	; 0x1dc2 <vfprintf+0xf2>
    1dba:	26 fd       	sbrc	r18, 6
    1dbc:	6c c1       	rjmp	.+728    	; 0x2096 <vfprintf+0x3c6>
    1dbe:	20 64       	ori	r18, 0x40	; 64
    1dc0:	06 c0       	rjmp	.+12     	; 0x1dce <vfprintf+0xfe>
    1dc2:	8c 36       	cpi	r24, 0x6C	; 108
    1dc4:	11 f4       	brne	.+4      	; 0x1dca <vfprintf+0xfa>
    1dc6:	20 68       	ori	r18, 0x80	; 128
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <vfprintf+0xfe>
    1dca:	88 36       	cpi	r24, 0x68	; 104
    1dcc:	49 f4       	brne	.+18     	; 0x1de0 <vfprintf+0x110>
    1dce:	f1 01       	movw	r30, r2
    1dd0:	93 fd       	sbrc	r25, 3
    1dd2:	85 91       	lpm	r24, Z+
    1dd4:	93 ff       	sbrs	r25, 3
    1dd6:	81 91       	ld	r24, Z+
    1dd8:	1f 01       	movw	r2, r30
    1dda:	88 23       	and	r24, r24
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <vfprintf+0x110>
    1dde:	ba cf       	rjmp	.-140    	; 0x1d54 <vfprintf+0x84>
    1de0:	98 2f       	mov	r25, r24
    1de2:	95 54       	subi	r25, 0x45	; 69
    1de4:	93 30       	cpi	r25, 0x03	; 3
    1de6:	18 f0       	brcs	.+6      	; 0x1dee <vfprintf+0x11e>
    1de8:	90 52       	subi	r25, 0x20	; 32
    1dea:	93 30       	cpi	r25, 0x03	; 3
    1dec:	28 f4       	brcc	.+10     	; 0x1df8 <vfprintf+0x128>
    1dee:	0c 5f       	subi	r16, 0xFC	; 252
    1df0:	1f 4f       	sbci	r17, 0xFF	; 255
    1df2:	ff e3       	ldi	r31, 0x3F	; 63
    1df4:	f9 83       	std	Y+1, r31	; 0x01
    1df6:	0d c0       	rjmp	.+26     	; 0x1e12 <vfprintf+0x142>
    1df8:	83 36       	cpi	r24, 0x63	; 99
    1dfa:	31 f0       	breq	.+12     	; 0x1e08 <vfprintf+0x138>
    1dfc:	83 37       	cpi	r24, 0x73	; 115
    1dfe:	71 f0       	breq	.+28     	; 0x1e1c <vfprintf+0x14c>
    1e00:	83 35       	cpi	r24, 0x53	; 83
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <vfprintf+0x136>
    1e04:	5c c0       	rjmp	.+184    	; 0x1ebe <vfprintf+0x1ee>
    1e06:	21 c0       	rjmp	.+66     	; 0x1e4a <vfprintf+0x17a>
    1e08:	f8 01       	movw	r30, r16
    1e0a:	80 81       	ld	r24, Z
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	0e 5f       	subi	r16, 0xFE	; 254
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	42 01       	movw	r8, r4
    1e14:	71 e0       	ldi	r23, 0x01	; 1
    1e16:	a7 2e       	mov	r10, r23
    1e18:	b1 2c       	mov	r11, r1
    1e1a:	15 c0       	rjmp	.+42     	; 0x1e46 <vfprintf+0x176>
    1e1c:	62 e0       	ldi	r22, 0x02	; 2
    1e1e:	66 2e       	mov	r6, r22
    1e20:	71 2c       	mov	r7, r1
    1e22:	60 0e       	add	r6, r16
    1e24:	71 1e       	adc	r7, r17
    1e26:	f8 01       	movw	r30, r16
    1e28:	80 80       	ld	r8, Z
    1e2a:	91 80       	ldd	r9, Z+1	; 0x01
    1e2c:	26 ff       	sbrs	r18, 6
    1e2e:	03 c0       	rjmp	.+6      	; 0x1e36 <vfprintf+0x166>
    1e30:	6e 2d       	mov	r22, r14
    1e32:	70 e0       	ldi	r23, 0x00	; 0
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <vfprintf+0x16a>
    1e36:	6f ef       	ldi	r22, 0xFF	; 255
    1e38:	7f ef       	ldi	r23, 0xFF	; 255
    1e3a:	c4 01       	movw	r24, r8
    1e3c:	2c 87       	std	Y+12, r18	; 0x0c
    1e3e:	56 d1       	rcall	.+684    	; 0x20ec <strnlen>
    1e40:	5c 01       	movw	r10, r24
    1e42:	83 01       	movw	r16, r6
    1e44:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e46:	2f 77       	andi	r18, 0x7F	; 127
    1e48:	16 c0       	rjmp	.+44     	; 0x1e76 <vfprintf+0x1a6>
    1e4a:	52 e0       	ldi	r21, 0x02	; 2
    1e4c:	65 2e       	mov	r6, r21
    1e4e:	71 2c       	mov	r7, r1
    1e50:	60 0e       	add	r6, r16
    1e52:	71 1e       	adc	r7, r17
    1e54:	f8 01       	movw	r30, r16
    1e56:	80 80       	ld	r8, Z
    1e58:	91 80       	ldd	r9, Z+1	; 0x01
    1e5a:	26 ff       	sbrs	r18, 6
    1e5c:	03 c0       	rjmp	.+6      	; 0x1e64 <vfprintf+0x194>
    1e5e:	6e 2d       	mov	r22, r14
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <vfprintf+0x198>
    1e64:	6f ef       	ldi	r22, 0xFF	; 255
    1e66:	7f ef       	ldi	r23, 0xFF	; 255
    1e68:	c4 01       	movw	r24, r8
    1e6a:	2c 87       	std	Y+12, r18	; 0x0c
    1e6c:	34 d1       	rcall	.+616    	; 0x20d6 <strnlen_P>
    1e6e:	5c 01       	movw	r10, r24
    1e70:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e72:	20 68       	ori	r18, 0x80	; 128
    1e74:	83 01       	movw	r16, r6
    1e76:	23 fd       	sbrc	r18, 3
    1e78:	1e c0       	rjmp	.+60     	; 0x1eb6 <vfprintf+0x1e6>
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <vfprintf+0x1ba>
    1e7c:	80 e2       	ldi	r24, 0x20	; 32
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	b6 01       	movw	r22, r12
    1e82:	2c 87       	std	Y+12, r18	; 0x0c
    1e84:	3e d1       	rcall	.+636    	; 0x2102 <fputc>
    1e86:	fa 94       	dec	r15
    1e88:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e8a:	8f 2d       	mov	r24, r15
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a8 16       	cp	r10, r24
    1e90:	b9 06       	cpc	r11, r25
    1e92:	a0 f3       	brcs	.-24     	; 0x1e7c <vfprintf+0x1ac>
    1e94:	10 c0       	rjmp	.+32     	; 0x1eb6 <vfprintf+0x1e6>
    1e96:	f4 01       	movw	r30, r8
    1e98:	27 fd       	sbrc	r18, 7
    1e9a:	85 91       	lpm	r24, Z+
    1e9c:	27 ff       	sbrs	r18, 7
    1e9e:	81 91       	ld	r24, Z+
    1ea0:	4f 01       	movw	r8, r30
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	b6 01       	movw	r22, r12
    1ea6:	2c 87       	std	Y+12, r18	; 0x0c
    1ea8:	2c d1       	rcall	.+600    	; 0x2102 <fputc>
    1eaa:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eac:	f1 10       	cpse	r15, r1
    1eae:	fa 94       	dec	r15
    1eb0:	08 94       	sec
    1eb2:	a1 08       	sbc	r10, r1
    1eb4:	b1 08       	sbc	r11, r1
    1eb6:	a1 14       	cp	r10, r1
    1eb8:	b1 04       	cpc	r11, r1
    1eba:	69 f7       	brne	.-38     	; 0x1e96 <vfprintf+0x1c6>
    1ebc:	e9 c0       	rjmp	.+466    	; 0x2090 <vfprintf+0x3c0>
    1ebe:	84 36       	cpi	r24, 0x64	; 100
    1ec0:	11 f0       	breq	.+4      	; 0x1ec6 <vfprintf+0x1f6>
    1ec2:	89 36       	cpi	r24, 0x69	; 105
    1ec4:	41 f5       	brne	.+80     	; 0x1f16 <vfprintf+0x246>
    1ec6:	27 ff       	sbrs	r18, 7
    1ec8:	08 c0       	rjmp	.+16     	; 0x1eda <vfprintf+0x20a>
    1eca:	f8 01       	movw	r30, r16
    1ecc:	60 81       	ld	r22, Z
    1ece:	71 81       	ldd	r23, Z+1	; 0x01
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	0c 5f       	subi	r16, 0xFC	; 252
    1ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed8:	09 c0       	rjmp	.+18     	; 0x1eec <vfprintf+0x21c>
    1eda:	f8 01       	movw	r30, r16
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	88 27       	eor	r24, r24
    1ee2:	77 fd       	sbrc	r23, 7
    1ee4:	80 95       	com	r24
    1ee6:	98 2f       	mov	r25, r24
    1ee8:	0e 5f       	subi	r16, 0xFE	; 254
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	4f e6       	ldi	r20, 0x6F	; 111
    1eee:	b4 2e       	mov	r11, r20
    1ef0:	b2 22       	and	r11, r18
    1ef2:	97 ff       	sbrs	r25, 7
    1ef4:	09 c0       	rjmp	.+18     	; 0x1f08 <vfprintf+0x238>
    1ef6:	90 95       	com	r25
    1ef8:	80 95       	com	r24
    1efa:	70 95       	com	r23
    1efc:	61 95       	neg	r22
    1efe:	7f 4f       	sbci	r23, 0xFF	; 255
    1f00:	8f 4f       	sbci	r24, 0xFF	; 255
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	f0 e8       	ldi	r31, 0x80	; 128
    1f06:	bf 2a       	or	r11, r31
    1f08:	a2 01       	movw	r20, r4
    1f0a:	2a e0       	ldi	r18, 0x0A	; 10
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	25 d1       	rcall	.+586    	; 0x215a <__ultoa_invert>
    1f10:	78 2e       	mov	r7, r24
    1f12:	74 18       	sub	r7, r4
    1f14:	44 c0       	rjmp	.+136    	; 0x1f9e <vfprintf+0x2ce>
    1f16:	85 37       	cpi	r24, 0x75	; 117
    1f18:	31 f4       	brne	.+12     	; 0x1f26 <vfprintf+0x256>
    1f1a:	3f ee       	ldi	r19, 0xEF	; 239
    1f1c:	b3 2e       	mov	r11, r19
    1f1e:	b2 22       	and	r11, r18
    1f20:	2a e0       	ldi	r18, 0x0A	; 10
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	25 c0       	rjmp	.+74     	; 0x1f70 <vfprintf+0x2a0>
    1f26:	99 ef       	ldi	r25, 0xF9	; 249
    1f28:	b9 2e       	mov	r11, r25
    1f2a:	b2 22       	and	r11, r18
    1f2c:	8f 36       	cpi	r24, 0x6F	; 111
    1f2e:	c1 f0       	breq	.+48     	; 0x1f60 <vfprintf+0x290>
    1f30:	80 37       	cpi	r24, 0x70	; 112
    1f32:	20 f4       	brcc	.+8      	; 0x1f3c <vfprintf+0x26c>
    1f34:	88 35       	cpi	r24, 0x58	; 88
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <vfprintf+0x26a>
    1f38:	ae c0       	rjmp	.+348    	; 0x2096 <vfprintf+0x3c6>
    1f3a:	0d c0       	rjmp	.+26     	; 0x1f56 <vfprintf+0x286>
    1f3c:	80 37       	cpi	r24, 0x70	; 112
    1f3e:	21 f0       	breq	.+8      	; 0x1f48 <vfprintf+0x278>
    1f40:	88 37       	cpi	r24, 0x78	; 120
    1f42:	09 f0       	breq	.+2      	; 0x1f46 <vfprintf+0x276>
    1f44:	a8 c0       	rjmp	.+336    	; 0x2096 <vfprintf+0x3c6>
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <vfprintf+0x27c>
    1f48:	20 e1       	ldi	r18, 0x10	; 16
    1f4a:	b2 2a       	or	r11, r18
    1f4c:	b4 fe       	sbrs	r11, 4
    1f4e:	0b c0       	rjmp	.+22     	; 0x1f66 <vfprintf+0x296>
    1f50:	84 e0       	ldi	r24, 0x04	; 4
    1f52:	b8 2a       	or	r11, r24
    1f54:	08 c0       	rjmp	.+16     	; 0x1f66 <vfprintf+0x296>
    1f56:	b4 fe       	sbrs	r11, 4
    1f58:	09 c0       	rjmp	.+18     	; 0x1f6c <vfprintf+0x29c>
    1f5a:	e6 e0       	ldi	r30, 0x06	; 6
    1f5c:	be 2a       	or	r11, r30
    1f5e:	06 c0       	rjmp	.+12     	; 0x1f6c <vfprintf+0x29c>
    1f60:	28 e0       	ldi	r18, 0x08	; 8
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	05 c0       	rjmp	.+10     	; 0x1f70 <vfprintf+0x2a0>
    1f66:	20 e1       	ldi	r18, 0x10	; 16
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <vfprintf+0x2a0>
    1f6c:	20 e1       	ldi	r18, 0x10	; 16
    1f6e:	32 e0       	ldi	r19, 0x02	; 2
    1f70:	b7 fe       	sbrs	r11, 7
    1f72:	08 c0       	rjmp	.+16     	; 0x1f84 <vfprintf+0x2b4>
    1f74:	f8 01       	movw	r30, r16
    1f76:	60 81       	ld	r22, Z
    1f78:	71 81       	ldd	r23, Z+1	; 0x01
    1f7a:	82 81       	ldd	r24, Z+2	; 0x02
    1f7c:	93 81       	ldd	r25, Z+3	; 0x03
    1f7e:	0c 5f       	subi	r16, 0xFC	; 252
    1f80:	1f 4f       	sbci	r17, 0xFF	; 255
    1f82:	07 c0       	rjmp	.+14     	; 0x1f92 <vfprintf+0x2c2>
    1f84:	f8 01       	movw	r30, r16
    1f86:	60 81       	ld	r22, Z
    1f88:	71 81       	ldd	r23, Z+1	; 0x01
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	0e 5f       	subi	r16, 0xFE	; 254
    1f90:	1f 4f       	sbci	r17, 0xFF	; 255
    1f92:	a2 01       	movw	r20, r4
    1f94:	e2 d0       	rcall	.+452    	; 0x215a <__ultoa_invert>
    1f96:	78 2e       	mov	r7, r24
    1f98:	74 18       	sub	r7, r4
    1f9a:	ff e7       	ldi	r31, 0x7F	; 127
    1f9c:	bf 22       	and	r11, r31
    1f9e:	b6 fe       	sbrs	r11, 6
    1fa0:	0b c0       	rjmp	.+22     	; 0x1fb8 <vfprintf+0x2e8>
    1fa2:	2e ef       	ldi	r18, 0xFE	; 254
    1fa4:	b2 22       	and	r11, r18
    1fa6:	7e 14       	cp	r7, r14
    1fa8:	38 f4       	brcc	.+14     	; 0x1fb8 <vfprintf+0x2e8>
    1faa:	b4 fe       	sbrs	r11, 4
    1fac:	07 c0       	rjmp	.+14     	; 0x1fbc <vfprintf+0x2ec>
    1fae:	b2 fc       	sbrc	r11, 2
    1fb0:	05 c0       	rjmp	.+10     	; 0x1fbc <vfprintf+0x2ec>
    1fb2:	8f ee       	ldi	r24, 0xEF	; 239
    1fb4:	b8 22       	and	r11, r24
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <vfprintf+0x2ec>
    1fb8:	a7 2c       	mov	r10, r7
    1fba:	01 c0       	rjmp	.+2      	; 0x1fbe <vfprintf+0x2ee>
    1fbc:	ae 2c       	mov	r10, r14
    1fbe:	8b 2d       	mov	r24, r11
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	b4 fe       	sbrs	r11, 4
    1fc4:	0d c0       	rjmp	.+26     	; 0x1fe0 <vfprintf+0x310>
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e7 0d       	add	r30, r7
    1fca:	f1 1d       	adc	r31, r1
    1fcc:	20 81       	ld	r18, Z
    1fce:	20 33       	cpi	r18, 0x30	; 48
    1fd0:	19 f4       	brne	.+6      	; 0x1fd8 <vfprintf+0x308>
    1fd2:	e9 ee       	ldi	r30, 0xE9	; 233
    1fd4:	be 22       	and	r11, r30
    1fd6:	09 c0       	rjmp	.+18     	; 0x1fea <vfprintf+0x31a>
    1fd8:	a3 94       	inc	r10
    1fda:	b2 fe       	sbrs	r11, 2
    1fdc:	06 c0       	rjmp	.+12     	; 0x1fea <vfprintf+0x31a>
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <vfprintf+0x318>
    1fe0:	86 78       	andi	r24, 0x86	; 134
    1fe2:	90 70       	andi	r25, 0x00	; 0
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <vfprintf+0x31a>
    1fe8:	a3 94       	inc	r10
    1fea:	8b 2c       	mov	r8, r11
    1fec:	99 24       	eor	r9, r9
    1fee:	b3 fc       	sbrc	r11, 3
    1ff0:	13 c0       	rjmp	.+38     	; 0x2018 <vfprintf+0x348>
    1ff2:	b0 fe       	sbrs	r11, 0
    1ff4:	0e c0       	rjmp	.+28     	; 0x2012 <vfprintf+0x342>
    1ff6:	af 14       	cp	r10, r15
    1ff8:	28 f4       	brcc	.+10     	; 0x2004 <vfprintf+0x334>
    1ffa:	e7 2c       	mov	r14, r7
    1ffc:	ef 0c       	add	r14, r15
    1ffe:	ea 18       	sub	r14, r10
    2000:	af 2c       	mov	r10, r15
    2002:	07 c0       	rjmp	.+14     	; 0x2012 <vfprintf+0x342>
    2004:	e7 2c       	mov	r14, r7
    2006:	05 c0       	rjmp	.+10     	; 0x2012 <vfprintf+0x342>
    2008:	80 e2       	ldi	r24, 0x20	; 32
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	b6 01       	movw	r22, r12
    200e:	79 d0       	rcall	.+242    	; 0x2102 <fputc>
    2010:	a3 94       	inc	r10
    2012:	af 14       	cp	r10, r15
    2014:	c8 f3       	brcs	.-14     	; 0x2008 <vfprintf+0x338>
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <vfprintf+0x350>
    2018:	af 14       	cp	r10, r15
    201a:	10 f4       	brcc	.+4      	; 0x2020 <vfprintf+0x350>
    201c:	fa 18       	sub	r15, r10
    201e:	01 c0       	rjmp	.+2      	; 0x2022 <vfprintf+0x352>
    2020:	ff 24       	eor	r15, r15
    2022:	84 fe       	sbrs	r8, 4
    2024:	0e c0       	rjmp	.+28     	; 0x2042 <vfprintf+0x372>
    2026:	80 e3       	ldi	r24, 0x30	; 48
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	b6 01       	movw	r22, r12
    202c:	6a d0       	rcall	.+212    	; 0x2102 <fputc>
    202e:	82 fe       	sbrs	r8, 2
    2030:	1d c0       	rjmp	.+58     	; 0x206c <vfprintf+0x39c>
    2032:	81 fe       	sbrs	r8, 1
    2034:	03 c0       	rjmp	.+6      	; 0x203c <vfprintf+0x36c>
    2036:	88 e5       	ldi	r24, 0x58	; 88
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	10 c0       	rjmp	.+32     	; 0x205c <vfprintf+0x38c>
    203c:	88 e7       	ldi	r24, 0x78	; 120
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0d c0       	rjmp	.+26     	; 0x205c <vfprintf+0x38c>
    2042:	c4 01       	movw	r24, r8
    2044:	86 78       	andi	r24, 0x86	; 134
    2046:	90 70       	andi	r25, 0x00	; 0
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	81 f0       	breq	.+32     	; 0x206c <vfprintf+0x39c>
    204c:	81 fc       	sbrc	r8, 1
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <vfprintf+0x384>
    2050:	80 e2       	ldi	r24, 0x20	; 32
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <vfprintf+0x386>
    2054:	8b e2       	ldi	r24, 0x2B	; 43
    2056:	b7 fc       	sbrc	r11, 7
    2058:	8d e2       	ldi	r24, 0x2D	; 45
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	b6 01       	movw	r22, r12
    205e:	51 d0       	rcall	.+162    	; 0x2102 <fputc>
    2060:	05 c0       	rjmp	.+10     	; 0x206c <vfprintf+0x39c>
    2062:	80 e3       	ldi	r24, 0x30	; 48
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	b6 01       	movw	r22, r12
    2068:	4c d0       	rcall	.+152    	; 0x2102 <fputc>
    206a:	ea 94       	dec	r14
    206c:	7e 14       	cp	r7, r14
    206e:	c8 f3       	brcs	.-14     	; 0x2062 <vfprintf+0x392>
    2070:	7a 94       	dec	r7
    2072:	f2 01       	movw	r30, r4
    2074:	e7 0d       	add	r30, r7
    2076:	f1 1d       	adc	r31, r1
    2078:	80 81       	ld	r24, Z
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	b6 01       	movw	r22, r12
    207e:	41 d0       	rcall	.+130    	; 0x2102 <fputc>
    2080:	77 20       	and	r7, r7
    2082:	b1 f7       	brne	.-20     	; 0x2070 <vfprintf+0x3a0>
    2084:	05 c0       	rjmp	.+10     	; 0x2090 <vfprintf+0x3c0>
    2086:	80 e2       	ldi	r24, 0x20	; 32
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	b6 01       	movw	r22, r12
    208c:	3a d0       	rcall	.+116    	; 0x2102 <fputc>
    208e:	fa 94       	dec	r15
    2090:	ff 20       	and	r15, r15
    2092:	c9 f7       	brne	.-14     	; 0x2086 <vfprintf+0x3b6>
    2094:	44 ce       	rjmp	.-888    	; 0x1d1e <vfprintf+0x4e>
    2096:	f6 01       	movw	r30, r12
    2098:	26 81       	ldd	r18, Z+6	; 0x06
    209a:	37 81       	ldd	r19, Z+7	; 0x07
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <vfprintf+0x3d2>
    209e:	2f ef       	ldi	r18, 0xFF	; 255
    20a0:	3f ef       	ldi	r19, 0xFF	; 255
    20a2:	c9 01       	movw	r24, r18
    20a4:	2c 96       	adiw	r28, 0x0c	; 12
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	ff 90       	pop	r15
    20ba:	ef 90       	pop	r14
    20bc:	df 90       	pop	r13
    20be:	cf 90       	pop	r12
    20c0:	bf 90       	pop	r11
    20c2:	af 90       	pop	r10
    20c4:	9f 90       	pop	r9
    20c6:	8f 90       	pop	r8
    20c8:	7f 90       	pop	r7
    20ca:	6f 90       	pop	r6
    20cc:	5f 90       	pop	r5
    20ce:	4f 90       	pop	r4
    20d0:	3f 90       	pop	r3
    20d2:	2f 90       	pop	r2
    20d4:	08 95       	ret

000020d6 <strnlen_P>:
    20d6:	fc 01       	movw	r30, r24
    20d8:	05 90       	lpm	r0, Z+
    20da:	61 50       	subi	r22, 0x01	; 1
    20dc:	70 40       	sbci	r23, 0x00	; 0
    20de:	01 10       	cpse	r0, r1
    20e0:	d8 f7       	brcc	.-10     	; 0x20d8 <strnlen_P+0x2>
    20e2:	80 95       	com	r24
    20e4:	90 95       	com	r25
    20e6:	8e 0f       	add	r24, r30
    20e8:	9f 1f       	adc	r25, r31
    20ea:	08 95       	ret

000020ec <strnlen>:
    20ec:	fc 01       	movw	r30, r24
    20ee:	61 50       	subi	r22, 0x01	; 1
    20f0:	70 40       	sbci	r23, 0x00	; 0
    20f2:	01 90       	ld	r0, Z+
    20f4:	01 10       	cpse	r0, r1
    20f6:	d8 f7       	brcc	.-10     	; 0x20ee <strnlen+0x2>
    20f8:	80 95       	com	r24
    20fa:	90 95       	com	r25
    20fc:	8e 0f       	add	r24, r30
    20fe:	9f 1f       	adc	r25, r31
    2100:	08 95       	ret

00002102 <fputc>:
    2102:	0f 93       	push	r16
    2104:	1f 93       	push	r17
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	8c 01       	movw	r16, r24
    210c:	eb 01       	movw	r28, r22
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	81 ff       	sbrs	r24, 1
    2112:	1b c0       	rjmp	.+54     	; 0x214a <fputc+0x48>
    2114:	82 ff       	sbrs	r24, 2
    2116:	0d c0       	rjmp	.+26     	; 0x2132 <fputc+0x30>
    2118:	2e 81       	ldd	r18, Y+6	; 0x06
    211a:	3f 81       	ldd	r19, Y+7	; 0x07
    211c:	8c 81       	ldd	r24, Y+4	; 0x04
    211e:	9d 81       	ldd	r25, Y+5	; 0x05
    2120:	28 17       	cp	r18, r24
    2122:	39 07       	cpc	r19, r25
    2124:	64 f4       	brge	.+24     	; 0x213e <fputc+0x3c>
    2126:	e8 81       	ld	r30, Y
    2128:	f9 81       	ldd	r31, Y+1	; 0x01
    212a:	01 93       	st	Z+, r16
    212c:	f9 83       	std	Y+1, r31	; 0x01
    212e:	e8 83       	st	Y, r30
    2130:	06 c0       	rjmp	.+12     	; 0x213e <fputc+0x3c>
    2132:	e8 85       	ldd	r30, Y+8	; 0x08
    2134:	f9 85       	ldd	r31, Y+9	; 0x09
    2136:	80 2f       	mov	r24, r16
    2138:	09 95       	icall
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	31 f4       	brne	.+12     	; 0x214a <fputc+0x48>
    213e:	8e 81       	ldd	r24, Y+6	; 0x06
    2140:	9f 81       	ldd	r25, Y+7	; 0x07
    2142:	01 96       	adiw	r24, 0x01	; 1
    2144:	9f 83       	std	Y+7, r25	; 0x07
    2146:	8e 83       	std	Y+6, r24	; 0x06
    2148:	02 c0       	rjmp	.+4      	; 0x214e <fputc+0x4c>
    214a:	0f ef       	ldi	r16, 0xFF	; 255
    214c:	1f ef       	ldi	r17, 0xFF	; 255
    214e:	c8 01       	movw	r24, r16
    2150:	df 91       	pop	r29
    2152:	cf 91       	pop	r28
    2154:	1f 91       	pop	r17
    2156:	0f 91       	pop	r16
    2158:	08 95       	ret

0000215a <__ultoa_invert>:
    215a:	fa 01       	movw	r30, r20
    215c:	aa 27       	eor	r26, r26
    215e:	28 30       	cpi	r18, 0x08	; 8
    2160:	51 f1       	breq	.+84     	; 0x21b6 <__ultoa_invert+0x5c>
    2162:	20 31       	cpi	r18, 0x10	; 16
    2164:	81 f1       	breq	.+96     	; 0x21c6 <__ultoa_invert+0x6c>
    2166:	e8 94       	clt
    2168:	6f 93       	push	r22
    216a:	6e 7f       	andi	r22, 0xFE	; 254
    216c:	6e 5f       	subi	r22, 0xFE	; 254
    216e:	7f 4f       	sbci	r23, 0xFF	; 255
    2170:	8f 4f       	sbci	r24, 0xFF	; 255
    2172:	9f 4f       	sbci	r25, 0xFF	; 255
    2174:	af 4f       	sbci	r26, 0xFF	; 255
    2176:	b1 e0       	ldi	r27, 0x01	; 1
    2178:	3e d0       	rcall	.+124    	; 0x21f6 <__ultoa_invert+0x9c>
    217a:	b4 e0       	ldi	r27, 0x04	; 4
    217c:	3c d0       	rcall	.+120    	; 0x21f6 <__ultoa_invert+0x9c>
    217e:	67 0f       	add	r22, r23
    2180:	78 1f       	adc	r23, r24
    2182:	89 1f       	adc	r24, r25
    2184:	9a 1f       	adc	r25, r26
    2186:	a1 1d       	adc	r26, r1
    2188:	68 0f       	add	r22, r24
    218a:	79 1f       	adc	r23, r25
    218c:	8a 1f       	adc	r24, r26
    218e:	91 1d       	adc	r25, r1
    2190:	a1 1d       	adc	r26, r1
    2192:	6a 0f       	add	r22, r26
    2194:	71 1d       	adc	r23, r1
    2196:	81 1d       	adc	r24, r1
    2198:	91 1d       	adc	r25, r1
    219a:	a1 1d       	adc	r26, r1
    219c:	20 d0       	rcall	.+64     	; 0x21de <__ultoa_invert+0x84>
    219e:	09 f4       	brne	.+2      	; 0x21a2 <__ultoa_invert+0x48>
    21a0:	68 94       	set
    21a2:	3f 91       	pop	r19
    21a4:	2a e0       	ldi	r18, 0x0A	; 10
    21a6:	26 9f       	mul	r18, r22
    21a8:	11 24       	eor	r1, r1
    21aa:	30 19       	sub	r19, r0
    21ac:	30 5d       	subi	r19, 0xD0	; 208
    21ae:	31 93       	st	Z+, r19
    21b0:	de f6       	brtc	.-74     	; 0x2168 <__ultoa_invert+0xe>
    21b2:	cf 01       	movw	r24, r30
    21b4:	08 95       	ret
    21b6:	46 2f       	mov	r20, r22
    21b8:	47 70       	andi	r20, 0x07	; 7
    21ba:	40 5d       	subi	r20, 0xD0	; 208
    21bc:	41 93       	st	Z+, r20
    21be:	b3 e0       	ldi	r27, 0x03	; 3
    21c0:	0f d0       	rcall	.+30     	; 0x21e0 <__ultoa_invert+0x86>
    21c2:	c9 f7       	brne	.-14     	; 0x21b6 <__ultoa_invert+0x5c>
    21c4:	f6 cf       	rjmp	.-20     	; 0x21b2 <__ultoa_invert+0x58>
    21c6:	46 2f       	mov	r20, r22
    21c8:	4f 70       	andi	r20, 0x0F	; 15
    21ca:	40 5d       	subi	r20, 0xD0	; 208
    21cc:	4a 33       	cpi	r20, 0x3A	; 58
    21ce:	18 f0       	brcs	.+6      	; 0x21d6 <__ultoa_invert+0x7c>
    21d0:	49 5d       	subi	r20, 0xD9	; 217
    21d2:	31 fd       	sbrc	r19, 1
    21d4:	40 52       	subi	r20, 0x20	; 32
    21d6:	41 93       	st	Z+, r20
    21d8:	02 d0       	rcall	.+4      	; 0x21de <__ultoa_invert+0x84>
    21da:	a9 f7       	brne	.-22     	; 0x21c6 <__ultoa_invert+0x6c>
    21dc:	ea cf       	rjmp	.-44     	; 0x21b2 <__ultoa_invert+0x58>
    21de:	b4 e0       	ldi	r27, 0x04	; 4
    21e0:	a6 95       	lsr	r26
    21e2:	97 95       	ror	r25
    21e4:	87 95       	ror	r24
    21e6:	77 95       	ror	r23
    21e8:	67 95       	ror	r22
    21ea:	ba 95       	dec	r27
    21ec:	c9 f7       	brne	.-14     	; 0x21e0 <__ultoa_invert+0x86>
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	61 05       	cpc	r22, r1
    21f2:	71 05       	cpc	r23, r1
    21f4:	08 95       	ret
    21f6:	9b 01       	movw	r18, r22
    21f8:	ac 01       	movw	r20, r24
    21fa:	0a 2e       	mov	r0, r26
    21fc:	06 94       	lsr	r0
    21fe:	57 95       	ror	r21
    2200:	47 95       	ror	r20
    2202:	37 95       	ror	r19
    2204:	27 95       	ror	r18
    2206:	ba 95       	dec	r27
    2208:	c9 f7       	brne	.-14     	; 0x21fc <__ultoa_invert+0xa2>
    220a:	62 0f       	add	r22, r18
    220c:	73 1f       	adc	r23, r19
    220e:	84 1f       	adc	r24, r20
    2210:	95 1f       	adc	r25, r21
    2212:	a0 1d       	adc	r26, r0
    2214:	08 95       	ret

00002216 <_exit>:
    2216:	f8 94       	cli

00002218 <__stop_program>:
    2218:	ff cf       	rjmp	.-2      	; 0x2218 <__stop_program>
