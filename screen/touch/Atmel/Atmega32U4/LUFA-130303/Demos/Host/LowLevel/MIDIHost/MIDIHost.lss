
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00001aa6  00001b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800118  00800118  00001b52  2**0
                  ALLOC
  3 .stab         000021a8  00000000  00000000  00001b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7e  00000000  00000000  00003cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000348  00000000  00000000  00004a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000833  00000000  00000000  00004dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004deb  00000000  00000000  000055f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015db  00000000  00000000  0000a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000458f  00000000  00000000  0000b9bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004f0  00000000  00000000  0000ff4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000251b  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002df8  00000000  00000000  00012957  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000990  00000000  00000000  0001574f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000430  00000000  00000000  000160df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	40 c1       	rjmp	.+640    	; 0x282 <__ctors_end>
       2:	00 00       	nop
       4:	5c c1       	rjmp	.+696    	; 0x2be <__bad_interrupt>
       6:	00 00       	nop
       8:	5a c1       	rjmp	.+692    	; 0x2be <__bad_interrupt>
       a:	00 00       	nop
       c:	58 c1       	rjmp	.+688    	; 0x2be <__bad_interrupt>
       e:	00 00       	nop
      10:	56 c1       	rjmp	.+684    	; 0x2be <__bad_interrupt>
      12:	00 00       	nop
      14:	54 c1       	rjmp	.+680    	; 0x2be <__bad_interrupt>
      16:	00 00       	nop
      18:	52 c1       	rjmp	.+676    	; 0x2be <__bad_interrupt>
      1a:	00 00       	nop
      1c:	50 c1       	rjmp	.+672    	; 0x2be <__bad_interrupt>
      1e:	00 00       	nop
      20:	4e c1       	rjmp	.+668    	; 0x2be <__bad_interrupt>
      22:	00 00       	nop
      24:	4c c1       	rjmp	.+664    	; 0x2be <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c7       	rjmp	.+3842   	; 0xf2c <__vector_10>
      2a:	00 00       	nop
      2c:	48 c1       	rjmp	.+656    	; 0x2be <__bad_interrupt>
      2e:	00 00       	nop
      30:	46 c1       	rjmp	.+652    	; 0x2be <__bad_interrupt>
      32:	00 00       	nop
      34:	44 c1       	rjmp	.+648    	; 0x2be <__bad_interrupt>
      36:	00 00       	nop
      38:	42 c1       	rjmp	.+644    	; 0x2be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	40 c1       	rjmp	.+640    	; 0x2be <__bad_interrupt>
      3e:	00 00       	nop
      40:	3e c1       	rjmp	.+636    	; 0x2be <__bad_interrupt>
      42:	00 00       	nop
      44:	3c c1       	rjmp	.+632    	; 0x2be <__bad_interrupt>
      46:	00 00       	nop
      48:	3a c1       	rjmp	.+628    	; 0x2be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	38 c1       	rjmp	.+624    	; 0x2be <__bad_interrupt>
      4e:	00 00       	nop
      50:	36 c1       	rjmp	.+620    	; 0x2be <__bad_interrupt>
      52:	00 00       	nop
      54:	34 c1       	rjmp	.+616    	; 0x2be <__bad_interrupt>
      56:	00 00       	nop
      58:	32 c1       	rjmp	.+612    	; 0x2be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	30 c1       	rjmp	.+608    	; 0x2be <__bad_interrupt>
      5e:	00 00       	nop
      60:	2e c1       	rjmp	.+604    	; 0x2be <__bad_interrupt>
      62:	00 00       	nop
      64:	2c c1       	rjmp	.+600    	; 0x2be <__bad_interrupt>
      66:	00 00       	nop
      68:	2a c1       	rjmp	.+596    	; 0x2be <__bad_interrupt>
      6a:	00 00       	nop
      6c:	28 c1       	rjmp	.+592    	; 0x2be <__bad_interrupt>
      6e:	00 00       	nop
      70:	26 c1       	rjmp	.+588    	; 0x2be <__bad_interrupt>
      72:	00 00       	nop
      74:	24 c1       	rjmp	.+584    	; 0x2be <__bad_interrupt>
      76:	00 00       	nop
      78:	22 c1       	rjmp	.+580    	; 0x2be <__bad_interrupt>
      7a:	00 00       	nop
      7c:	20 c1       	rjmp	.+576    	; 0x2be <__bad_interrupt>
      7e:	00 00       	nop
      80:	1e c1       	rjmp	.+572    	; 0x2be <__bad_interrupt>
      82:	00 00       	nop
      84:	1c c1       	rjmp	.+568    	; 0x2be <__bad_interrupt>
      86:	00 00       	nop
      88:	1a c1       	rjmp	.+564    	; 0x2be <__bad_interrupt>
      8a:	00 00       	nop
      8c:	18 c1       	rjmp	.+560    	; 0x2be <__bad_interrupt>
      8e:	00 00       	nop
      90:	16 c1       	rjmp	.+556    	; 0x2be <__bad_interrupt>
      92:	00 00       	nop
      94:	14 c1       	rjmp	.+552    	; 0x2be <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4320>:
      98:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C
      a8:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch
      b8:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
      c8:	0d 0a 00                                            ...

000000cb <__c.4312>:
      cb:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      db:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      eb:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      fb:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     10b:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     11b:	1b 5b 33 37 6d 00                                   .[37m.

00000121 <__c.4305>:
     121:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     131:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     141:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000150 <__c.4300>:
     150:	4d 49 44 49 20 44 65 76 69 63 65 20 45 6e 75 6d     MIDI Device Enum
     160:	65 72 61 74 65 64 2e 0d 0a 00                       erated....

0000016a <__c.4298>:
     16a:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     17a:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     18a:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     19a:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1aa:	37 6d 00                                            7m.

000001ad <__c.4296>:
     1ad:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1bd:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001c7 <__c.4294>:
     1c7:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1d7:	69 63 65 2e 0d 0a 00                                ice....

000001de <__c.4292>:
     1de:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1ee:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     1fe:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000208 <__c.4289>:
     208:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     218:	61 74 61 2e 0d 0a 00                                ata....

0000021f <__c.4284>:
     21f:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     22f:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     23f:	00                                                  .

00000240 <__c.4279>:
     240:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     250:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000025d <__c.4270>:
     25d:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
     26d:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
     27d:	33 37 6d 00 00                                      37m..

00000282 <__ctors_end>:
     282:	11 24       	eor	r1, r1
     284:	1f be       	out	0x3f, r1	; 63
     286:	cf ef       	ldi	r28, 0xFF	; 255
     288:	d0 e2       	ldi	r29, 0x20	; 32
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	cd bf       	out	0x3d, r28	; 61

0000028e <__do_copy_data>:
     28e:	11 e0       	ldi	r17, 0x01	; 1
     290:	a0 e0       	ldi	r26, 0x00	; 0
     292:	b1 e0       	ldi	r27, 0x01	; 1
     294:	e6 ea       	ldi	r30, 0xA6	; 166
     296:	fa e1       	ldi	r31, 0x1A	; 26
     298:	00 e0       	ldi	r16, 0x00	; 0
     29a:	0b bf       	out	0x3b, r16	; 59
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <__do_copy_data+0x14>
     29e:	07 90       	elpm	r0, Z+
     2a0:	0d 92       	st	X+, r0
     2a2:	a8 31       	cpi	r26, 0x18	; 24
     2a4:	b1 07       	cpc	r27, r17
     2a6:	d9 f7       	brne	.-10     	; 0x29e <__do_copy_data+0x10>

000002a8 <__do_clear_bss>:
     2a8:	11 e0       	ldi	r17, 0x01	; 1
     2aa:	a8 e1       	ldi	r26, 0x18	; 24
     2ac:	b1 e0       	ldi	r27, 0x01	; 1
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <.do_clear_bss_start>

000002b0 <.do_clear_bss_loop>:
     2b0:	1d 92       	st	X+, r1

000002b2 <.do_clear_bss_start>:
     2b2:	ab 33       	cpi	r26, 0x3B	; 59
     2b4:	b1 07       	cpc	r27, r17
     2b6:	e1 f7       	brne	.-8      	; 0x2b0 <.do_clear_bss_loop>
     2b8:	bb d1       	rcall	.+886    	; 0x630 <main>
     2ba:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <_exit>

000002be <__bad_interrupt>:
     2be:	a0 ce       	rjmp	.-704    	; 0x0 <__vectors>

000002c0 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2c0:	9b b1       	in	r25, 0x0b	; 11
     2c2:	9f 70       	andi	r25, 0x0F	; 15
     2c4:	98 2b       	or	r25, r24
     2c6:	9b b9       	out	0x0b, r25	; 11
			}
     2c8:	08 95       	ret

000002ca <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2ca:	84 b7       	in	r24, 0x34	; 52
     2cc:	87 7f       	andi	r24, 0xF7	; 247
     2ce:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2d0:	28 e1       	ldi	r18, 0x18	; 24
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	f8 94       	cli
     2d6:	20 93 60 00 	sts	0x0060, r18
     2da:	10 92 60 00 	sts	0x0060, r1
     2de:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	80 e8       	ldi	r24, 0x80	; 128
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	80 93 61 00 	sts	0x0061, r24
     2ec:	90 93 61 00 	sts	0x0061, r25
     2f0:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2f2:	83 e3       	ldi	r24, 0x33	; 51
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	90 93 cd 00 	sts	0x00CD, r25
     2fa:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2fe:	86 e0       	ldi	r24, 0x06	; 6
     300:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     304:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     308:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     30c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     30e:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     310:	8a b1       	in	r24, 0x0a	; 10
     312:	80 6f       	ori	r24, 0xF0	; 240
     314:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     316:	8b b1       	in	r24, 0x0b	; 11
     318:	8f 70       	andi	r24, 0x0F	; 15
     31a:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     31c:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     31e:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     320:	84 b1       	in	r24, 0x04	; 4
     322:	8f 71       	andi	r24, 0x1F	; 31
     324:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     326:	8d b1       	in	r24, 0x0d	; 13
     328:	8f 7c       	andi	r24, 0xCF	; 207
     32a:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     32c:	85 b1       	in	r24, 0x05	; 5
     32e:	80 6e       	ori	r24, 0xE0	; 224
     330:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     332:	8e b1       	in	r24, 0x0e	; 14
     334:	80 63       	ori	r24, 0x30	; 48
     336:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	Joystick_Init();
	USB_Init();
     338:	de d5       	rcall	.+3004   	; 0xef6 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <Serial_CreateStream>

00000342 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     342:	80 e4       	ldi	r24, 0x40	; 64
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	0e 94 76 0a 	call	0x14ec	; 0x14ec <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     34a:	80 ea       	ldi	r24, 0xA0	; 160
}
     34c:	b9 cf       	rjmp	.-142    	; 0x2c0 <LEDs_SetAllLEDs>

0000034e <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     34e:	8f e1       	ldi	r24, 0x1F	; 31
     350:	92 e0       	ldi	r25, 0x02	; 2
     352:	0e 94 76 0a 	call	0x14ec	; 0x14ec <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     356:	80 e1       	ldi	r24, 0x10	; 16
}
     358:	b3 cf       	rjmp	.-154    	; 0x2c0 <LEDs_SetAllLEDs>

0000035a <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     35a:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     35c:	88 e0       	ldi	r24, 0x08	; 8
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	0e 94 76 0a 	call	0x14ec	; 0x14ec <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     364:	91 d1       	rcall	.+802    	; 0x688 <ProcessConfigurationDescriptor>
     366:	18 2f       	mov	r17, r24
     368:	88 23       	and	r24, r24
     36a:	01 f1       	breq	.+64     	; 0x3ac <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
	{
		if (ErrorCode == ControlError)
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	19 f4       	brne	.+6      	; 0x376 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     370:	8e ed       	ldi	r24, 0xDE	; 222
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	02 c0       	rjmp	.+4      	; 0x37a <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     376:	87 ec       	ldi	r24, 0xC7	; 199
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     37e:	00 d0       	rcall	.+0      	; 0x380 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     380:	00 d0       	rcall	.+0      	; 0x382 <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     382:	ed b7       	in	r30, 0x3d	; 61
     384:	fe b7       	in	r31, 0x3e	; 62
     386:	31 96       	adiw	r30, 0x01	; 1
     388:	2d ea       	ldi	r18, 0xAD	; 173
     38a:	31 e0       	ldi	r19, 0x01	; 1
     38c:	ad b7       	in	r26, 0x3d	; 61
     38e:	be b7       	in	r27, 0x3e	; 62
     390:	12 96       	adiw	r26, 0x02	; 2
     392:	3c 93       	st	X, r19
     394:	2e 93       	st	-X, r18
     396:	11 97       	sbiw	r26, 0x01	; 1
     398:	12 83       	std	Z+2, r17	; 0x02
     39a:	13 82       	std	Z+3, r1	; 0x03
     39c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	80 e9       	ldi	r24, 0x90	; 144
     3aa:	19 c0       	rjmp	.+50     	; 0x3de <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <USB_Host_SetDeviceConfiguration>
     3b2:	88 23       	and	r24, r24
     3b4:	79 f0       	breq	.+30     	; 0x3d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
     3ba:	ed b7       	in	r30, 0x3d	; 61
     3bc:	fe b7       	in	r31, 0x3e	; 62
     3be:	31 96       	adiw	r30, 0x01	; 1
     3c0:	2a e6       	ldi	r18, 0x6A	; 106
     3c2:	31 e0       	ldi	r19, 0x01	; 1
     3c4:	ad b7       	in	r26, 0x3d	; 61
     3c6:	be b7       	in	r27, 0x3e	; 62
     3c8:	12 96       	adiw	r26, 0x02	; 2
     3ca:	3c 93       	st	X, r19
     3cc:	2e 93       	st	-X, r18
     3ce:	11 97       	sbiw	r26, 0x01	; 1
     3d0:	82 83       	std	Z+2, r24	; 0x02
     3d2:	e3 cf       	rjmp	.-58     	; 0x39a <EVENT_USB_Host_DeviceEnumerationComplete+0x40>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("MIDI Device Enumerated.\r\n"));
     3d4:	80 e5       	ldi	r24, 0x50	; 80
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	0e 94 76 0a 	call	0x14ec	; 0x14ec <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3dc:	80 e6       	ldi	r24, 0x60	; 96
     3de:	70 df       	rcall	.-288    	; 0x2c0 <LEDs_SetAllLEDs>
}
     3e0:	1f 91       	pop	r17
     3e2:	08 95       	ret

000003e4 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     3e4:	df 93       	push	r29
     3e6:	cf 93       	push	r28
     3e8:	0f 92       	push	r0
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     3ee:	89 83       	std	Y+1, r24	; 0x01
     3f0:	1a d5       	rcall	.+2612   	; 0xe26 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <EVENT_USB_Host_HostError+0x10>
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <EVENT_USB_Host_HostError+0x12>
     3f6:	ed b7       	in	r30, 0x3d	; 61
     3f8:	fe b7       	in	r31, 0x3e	; 62
     3fa:	31 96       	adiw	r30, 0x01	; 1
     3fc:	21 e2       	ldi	r18, 0x21	; 33
     3fe:	31 e0       	ldi	r19, 0x01	; 1
     400:	ad b7       	in	r26, 0x3d	; 61
     402:	be b7       	in	r27, 0x3e	; 62
     404:	12 96       	adiw	r26, 0x02	; 2
     406:	3c 93       	st	X, r19
     408:	2e 93       	st	-X, r18
     40a:	11 97       	sbiw	r26, 0x01	; 1
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	82 83       	std	Z+2, r24	; 0x02
     410:	13 82       	std	Z+3, r1	; 0x03
     412:	0e 94 57 0a 	call	0x14ae	; 0x14ae <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	80 e9       	ldi	r24, 0x90	; 144
     420:	4f df       	rcall	.-354    	; 0x2c0 <LEDs_SetAllLEDs>
     422:	ff cf       	rjmp	.-2      	; 0x422 <EVENT_USB_Host_HostError+0x3e>

00000424 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     424:	90 91 26 01 	lds	r25, 0x0126
     428:	2d b7       	in	r18, 0x3d	; 61
     42a:	3e b7       	in	r19, 0x3e	; 62
     42c:	28 50       	subi	r18, 0x08	; 8
     42e:	30 40       	sbci	r19, 0x00	; 0
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	3e bf       	out	0x3e, r19	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	2d bf       	out	0x3d, r18	; 61
     43a:	ed b7       	in	r30, 0x3d	; 61
     43c:	fe b7       	in	r31, 0x3e	; 62
     43e:	31 96       	adiw	r30, 0x01	; 1
     440:	2b ec       	ldi	r18, 0xCB	; 203
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	ad b7       	in	r26, 0x3d	; 61
     446:	be b7       	in	r27, 0x3e	; 62
     448:	12 96       	adiw	r26, 0x02	; 2
     44a:	3c 93       	st	X, r19
     44c:	2e 93       	st	-X, r18
     44e:	11 97       	sbiw	r26, 0x01	; 1
     450:	82 83       	std	Z+2, r24	; 0x02
     452:	13 82       	std	Z+3, r1	; 0x03
     454:	64 83       	std	Z+4, r22	; 0x04
     456:	15 82       	std	Z+5, r1	; 0x05
     458:	96 83       	std	Z+6, r25	; 0x06
     45a:	17 82       	std	Z+7, r1	; 0x07
     45c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     460:	2d b7       	in	r18, 0x3d	; 61
     462:	3e b7       	in	r19, 0x3e	; 62
     464:	28 5f       	subi	r18, 0xF8	; 248
     466:	3f 4f       	sbci	r19, 0xFF	; 255
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	3e bf       	out	0x3e, r19	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	2d bf       	out	0x3d, r18	; 61
     472:	80 e9       	ldi	r24, 0x90	; 144
}
     474:	25 cf       	rjmp	.-438    	; 0x2c0 <LEDs_SetAllLEDs>

00000476 <MIDIHost_Task>:

/** Task to read in note on/off messages from the attached MIDI device and print it to the serial port.
 *  When the board joystick or buttons are pressed, note on/off messages are sent to the attached device.
 */
void MIDIHost_Task(void)
{
     476:	1f 93       	push	r17
     478:	df 93       	push	r29
     47a:	cf 93       	push	r28
     47c:	00 d0       	rcall	.+0      	; 0x47e <MIDIHost_Task+0x8>
     47e:	00 d0       	rcall	.+0      	; 0x480 <MIDIHost_Task+0xa>
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     484:	80 91 26 01 	lds	r24, 0x0126
     488:	8b 30       	cpi	r24, 0x0B	; 11
     48a:	09 f0       	breq	.+2      	; 0x48e <MIDIHost_Task+0x18>
     48c:	c9 c0       	rjmp	.+402    	; 0x620 <MIDIHost_Task+0x1aa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     494:	80 91 a9 00 	lds	r24, 0x00A9
     498:	8f 7b       	andi	r24, 0xBF	; 191
     49a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     49e:	80 91 a6 00 	lds	r24, 0x00A6
	  return;

	Pipe_SelectPipe(MIDI_DATA_IN_PIPE);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
     4a2:	80 ff       	sbrs	r24, 0
     4a4:	49 c0       	rjmp	.+146    	; 0x538 <MIDIHost_Task+0xc2>
	{
		MIDI_EventPacket_t MIDIEvent;

		Pipe_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
     4a6:	ce 01       	movw	r24, r28
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	64 e0       	ldi	r22, 0x04	; 4
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	aa d3       	rcall	.+1876   	; 0xc08 <Pipe_Read_Stream_LE>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     4b4:	80 91 f6 00 	lds	r24, 0x00F6
     4b8:	90 91 f7 00 	lds	r25, 0x00F7

		if (!(Pipe_BytesInPipe()))
     4bc:	00 97       	sbiw	r24, 0x00	; 0
     4be:	29 f4       	brne	.+10     	; 0x4ca <MIDIHost_Task+0x54>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     4c0:	80 91 a6 00 	lds	r24, 0x00A6
     4c4:	8e 77       	andi	r24, 0x7E	; 126
     4c6:	80 93 a6 00 	sts	0x00A6, r24
		  Pipe_ClearIN();

		bool NoteOnEvent  = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_ON));
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
		bool NoteOffEvent = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_OFF));

		if (NoteOnEvent || NoteOffEvent)
     4cc:	89 30       	cpi	r24, 0x09	; 9
     4ce:	29 f0       	breq	.+10     	; 0x4da <MIDIHost_Task+0x64>
     4d0:	88 30       	cpi	r24, 0x08	; 8
     4d2:	91 f5       	brne	.+100    	; 0x538 <MIDIHost_Task+0xc2>
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <MIDIHost_Task+0x68>
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	2d b7       	in	r18, 0x3d	; 61
     4e0:	3e b7       	in	r19, 0x3e	; 62
     4e2:	2a 50       	subi	r18, 0x0A	; 10
     4e4:	30 40       	sbci	r19, 0x00	; 0
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	3e bf       	out	0x3e, r19	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	2d bf       	out	0x3d, r18	; 61
     4f0:	ed b7       	in	r30, 0x3d	; 61
     4f2:	fe b7       	in	r31, 0x3e	; 62
     4f4:	31 96       	adiw	r30, 0x01	; 1
     4f6:	28 e9       	ldi	r18, 0x98	; 152
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	ad b7       	in	r26, 0x3d	; 61
     4fc:	be b7       	in	r27, 0x3e	; 62
     4fe:	12 96       	adiw	r26, 0x02	; 2
     500:	3c 93       	st	X, r19
     502:	2e 93       	st	-X, r18
     504:	11 97       	sbiw	r26, 0x01	; 1
     506:	93 83       	std	Z+3, r25	; 0x03
     508:	82 83       	std	Z+2, r24	; 0x02
																				   ((MIDIEvent.Data1 & 0x0F) + 1),
     50a:	8a 81       	ldd	r24, Y+2	; 0x02
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	8f 70       	andi	r24, 0x0F	; 15
     510:	90 70       	andi	r25, 0x00	; 0
		bool NoteOnEvent  = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_ON));
		bool NoteOffEvent = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_OFF));

		if (NoteOnEvent || NoteOffEvent)
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	95 83       	std	Z+5, r25	; 0x05
     516:	84 83       	std	Z+4, r24	; 0x04
     518:	8b 81       	ldd	r24, Y+3	; 0x03
     51a:	86 83       	std	Z+6, r24	; 0x06
     51c:	17 82       	std	Z+7, r1	; 0x07
     51e:	8c 81       	ldd	r24, Y+4	; 0x04
     520:	80 87       	std	Z+8, r24	; 0x08
     522:	11 86       	std	Z+9, r1	; 0x09
     524:	c4 d7       	rcall	.+3976   	; 0x14ae <printf_P>
     526:	2d b7       	in	r18, 0x3d	; 61
     528:	3e b7       	in	r19, 0x3e	; 62
     52a:	26 5f       	subi	r18, 0xF6	; 246
     52c:	3f 4f       	sbci	r19, 0xFF	; 255
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	3e bf       	out	0x3e, r19	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	2d bf       	out	0x3d, r18	; 61

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     538:	80 91 a9 00 	lds	r24, 0x00A9
     53c:	80 64       	ori	r24, 0x40	; 64
     53e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     548:	80 91 a9 00 	lds	r24, 0x00A9
     54c:	8f 7b       	andi	r24, 0xBF	; 191
     54e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     552:	80 91 a6 00 	lds	r24, 0x00A6
	Pipe_Freeze();

	Pipe_SelectPipe(MIDI_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	if (Pipe_IsOUTReady())
     556:	82 ff       	sbrs	r24, 2
     558:	63 c0       	rjmp	.+198    	; 0x620 <MIDIHost_Task+0x1aa>
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     55a:	13 b1       	in	r17, 0x03	; 3
     55c:	8c b1       	in	r24, 0x0c	; 12
     55e:	80 95       	com	r24
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	80 73       	andi	r24, 0x30	; 48
     564:	90 70       	andi	r25, 0x00	; 0
     566:	95 95       	asr	r25
     568:	87 95       	ror	r24
     56a:	10 95       	com	r17
     56c:	10 7e       	andi	r17, 0xE0	; 224
     56e:	18 2b       	or	r17, r24
		uint8_t MIDICommand = 0;
		uint8_t MIDIPitch;

		static uint8_t PrevJoystickStatus;
		uint8_t JoystickStatus  = Joystick_GetStatus();
		uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
     570:	90 91 18 01 	lds	r25, 0x0118
     574:	91 27       	eor	r25, r17
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     576:	8c b1       	in	r24, 0x0c	; 12

		/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
		uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
     578:	82 fd       	sbrc	r24, 2
     57a:	02 c0       	rjmp	.+4      	; 0x580 <MIDIHost_Task+0x10a>
     57c:	39 e0       	ldi	r19, 0x09	; 9
     57e:	01 c0       	rjmp	.+2      	; 0x582 <MIDIHost_Task+0x10c>
     580:	30 e0       	ldi	r19, 0x00	; 0

		if (JoystickChanges & JOY_LEFT)
     582:	29 2f       	mov	r18, r25
     584:	96 ff       	sbrs	r25, 6
     586:	04 c0       	rjmp	.+8      	; 0x590 <MIDIHost_Task+0x11a>
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     588:	16 ff       	sbrs	r17, 6
     58a:	04 c0       	rjmp	.+8      	; 0x594 <MIDIHost_Task+0x11e>
     58c:	80 e9       	ldi	r24, 0x90	; 144
     58e:	03 c0       	rjmp	.+6      	; 0x596 <MIDIHost_Task+0x120>
	Pipe_SelectPipe(MIDI_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	if (Pipe_IsOUTReady())
	{
		uint8_t MIDICommand = 0;
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	01 c0       	rjmp	.+2      	; 0x596 <MIDIHost_Task+0x120>
		/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
		uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));

		if (JoystickChanges & JOY_LEFT)
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     594:	80 e8       	ldi	r24, 0x80	; 128
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
     596:	97 ff       	sbrs	r25, 7
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <MIDIHost_Task+0x12e>
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     59a:	17 ff       	sbrs	r17, 7
     59c:	05 c0       	rjmp	.+10     	; 0x5a8 <MIDIHost_Task+0x132>
			MIDIPitch   = 0x3D;
     59e:	9d e3       	ldi	r25, 0x3D	; 61
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5a0:	80 e9       	ldi	r24, 0x90	; 144
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <MIDIHost_Task+0x136>
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
     5a4:	9c e3       	ldi	r25, 0x3C	; 60
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <MIDIHost_Task+0x136>
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3D;
     5a8:	9d e3       	ldi	r25, 0x3D	; 61
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5aa:	80 e8       	ldi	r24, 0x80	; 128
			MIDIPitch   = 0x3D;
		}

		if (JoystickChanges & JOY_RIGHT)
     5ac:	23 ff       	sbrs	r18, 3
     5ae:	07 c0       	rjmp	.+14     	; 0x5be <MIDIHost_Task+0x148>
		{
			MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5b0:	13 ff       	sbrs	r17, 3
     5b2:	03 c0       	rjmp	.+6      	; 0x5ba <MIDIHost_Task+0x144>
			MIDIPitch   = 0x3E;
     5b4:	9e e3       	ldi	r25, 0x3E	; 62
			MIDIPitch   = 0x3D;
		}

		if (JoystickChanges & JOY_RIGHT)
		{
			MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5b6:	80 e9       	ldi	r24, 0x90	; 144
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <MIDIHost_Task+0x148>
			MIDIPitch   = 0x3E;
     5ba:	9e e3       	ldi	r25, 0x3E	; 62
			MIDIPitch   = 0x3D;
		}

		if (JoystickChanges & JOY_RIGHT)
		{
			MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5bc:	80 e8       	ldi	r24, 0x80	; 128
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
     5be:	24 ff       	sbrs	r18, 4
     5c0:	07 c0       	rjmp	.+14     	; 0x5d0 <MIDIHost_Task+0x15a>
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5c2:	14 ff       	sbrs	r17, 4
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <MIDIHost_Task+0x156>
			MIDIPitch   = 0x3F;
     5c6:	9f e3       	ldi	r25, 0x3F	; 63
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5c8:	80 e9       	ldi	r24, 0x90	; 144
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <MIDIHost_Task+0x15a>
			MIDIPitch   = 0x3F;
     5cc:	9f e3       	ldi	r25, 0x3F	; 63
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5ce:	80 e8       	ldi	r24, 0x80	; 128
			MIDIPitch   = 0x3F;
		}

		if (JoystickChanges & JOY_PRESS)
     5d0:	25 ff       	sbrs	r18, 5
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <MIDIHost_Task+0x166>
		{
			MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5d4:	15 ff       	sbrs	r17, 5
     5d6:	21 c0       	rjmp	.+66     	; 0x61a <MIDIHost_Task+0x1a4>
     5d8:	80 e9       	ldi	r24, 0x90	; 144
     5da:	20 c0       	rjmp	.+64     	; 0x61c <MIDIHost_Task+0x1a6>
			MIDIPitch   = 0x3B;
		}

		/* Check if a MIDI command is to be sent */
		if (MIDICommand)
     5dc:	88 23       	and	r24, r24
     5de:	a9 f0       	breq	.+42     	; 0x60a <MIDIHost_Task+0x194>
		{
			MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
     5e0:	28 2f       	mov	r18, r24
     5e2:	22 95       	swap	r18
     5e4:	2f 70       	andi	r18, 0x0F	; 15
     5e6:	29 83       	std	Y+1, r18	; 0x01
     5e8:	83 2b       	or	r24, r19
     5ea:	8a 83       	std	Y+2, r24	; 0x02
     5ec:	9b 83       	std	Y+3, r25	; 0x03
     5ee:	80 e4       	ldi	r24, 0x40	; 64
     5f0:	8c 83       	std	Y+4, r24	; 0x04
					.Data2       = MIDIPitch,
					.Data3       = MIDI_STANDARD_VELOCITY,
				};

			/* Write the MIDI event packet to the pipe */
			Pipe_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
     5f2:	ce 01       	movw	r24, r28
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	64 e0       	ldi	r22, 0x04	; 4
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	a1 d2       	rcall	.+1346   	; 0xb42 <Pipe_Write_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     600:	80 91 a6 00 	lds	r24, 0x00A6
     604:	8b 77       	andi	r24, 0x7B	; 123
     606:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     60a:	80 91 a9 00 	lds	r24, 0x00A9
     60e:	80 64       	ori	r24, 0x40	; 64
     610:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_Freeze();

		/* Save previous joystick value for next joystick change detection */
		PrevJoystickStatus = JoystickStatus;
     614:	10 93 18 01 	sts	0x0118, r17
     618:	03 c0       	rjmp	.+6      	; 0x620 <MIDIHost_Task+0x1aa>
			MIDIPitch   = 0x3F;
		}

		if (JoystickChanges & JOY_PRESS)
		{
			MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     61a:	80 e8       	ldi	r24, 0x80	; 128
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     61c:	9b e3       	ldi	r25, 0x3B	; 59
     61e:	e0 cf       	rjmp	.-64     	; 0x5e0 <MIDIHost_Task+0x16a>
		Pipe_Freeze();

		/* Save previous joystick value for next joystick change detection */
		PrevJoystickStatus = JoystickStatus;
	}
}
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	cf 91       	pop	r28
     62a:	df 91       	pop	r29
     62c:	1f 91       	pop	r17
     62e:	08 95       	ret

00000630 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     630:	4c de       	rcall	.-872    	; 0x2ca <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "MIDI Host Demo running.\r\n" ESC_FG_WHITE));
     632:	8d e5       	ldi	r24, 0x5D	; 93
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	5a d7       	rcall	.+3764   	; 0x14ec <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     638:	80 e1       	ldi	r24, 0x10	; 16
     63a:	42 de       	rcall	.-892    	; 0x2c0 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     63c:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		MIDIHost_Task();
     63e:	1b df       	rcall	.-458    	; 0x476 <MIDIHost_Task>

		USB_USBTask();
     640:	f0 d6       	rcall	.+3552   	; 0x1422 <USB_USBTask>
     642:	fd cf       	rjmp	.-6      	; 0x63e <main+0xe>

00000644 <DComp_NextMIDIStreamingInterface>:
 *  This comparator searches for the next Interface descriptor of the correct MIDI Streaming Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMIDIStreamingInterface(void* CurrentDescriptor)
{
     644:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     646:	81 81       	ldd	r24, Z+1	; 0x01
     648:	84 30       	cpi	r24, 0x04	; 4
     64a:	49 f4       	brne	.+18     	; 0x65e <DComp_NextMIDIStreamingInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the MIDI descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
     64c:	85 81       	ldd	r24, Z+5	; 0x05
     64e:	81 30       	cpi	r24, 0x01	; 1
     650:	31 f4       	brne	.+12     	; 0x65e <DComp_NextMIDIStreamingInterface+0x1a>
     652:	86 81       	ldd	r24, Z+6	; 0x06
     654:	83 30       	cpi	r24, 0x03	; 3
     656:	19 f4       	brne	.+6      	; 0x65e <DComp_NextMIDIStreamingInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
     658:	87 81       	ldd	r24, Z+7	; 0x07
     65a:	88 23       	and	r24, r24
     65c:	11 f0       	breq	.+4      	; 0x662 <DComp_NextMIDIStreamingInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	08 95       	ret
		/* Check the MIDI descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     662:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     664:	08 95       	ret

00000666 <DComp_NextMIDIStreamingDataEndpoint>:
 *  another interface descriptor is found before the required endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMIDIStreamingDataEndpoint(void* CurrentDescriptor)
{
     666:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     668:	81 81       	ldd	r24, Z+1	; 0x01
     66a:	85 30       	cpi	r24, 0x05	; 5
     66c:	29 f4       	brne	.+10     	; 0x678 <DComp_NextMIDIStreamingDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     66e:	83 81       	ldd	r24, Z+3	; 0x03
     670:	83 70       	andi	r24, 0x03	; 3
     672:	82 30       	cpi	r24, 0x02	; 2
     674:	19 f4       	brne	.+6      	; 0x67c <DComp_NextMIDIStreamingDataEndpoint+0x16>
     676:	04 c0       	rjmp	.+8      	; 0x680 <DComp_NextMIDIStreamingDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     678:	84 30       	cpi	r24, 0x04	; 4
     67a:	21 f0       	breq	.+8      	; 0x684 <DComp_NextMIDIStreamingDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	08 95       	ret
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
		  return DESCRIPTOR_SEARCH_Found;
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     684:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     686:	08 95       	ret

00000688 <ProcessConfigurationDescriptor>:
 *  This routine searches for a MIDI interface descriptor pair containing bulk data IN and OUT endpoints.
 *
 *  \return An error code from the \ref MIDIHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     688:	8f 92       	push	r8
     68a:	9f 92       	push	r9
     68c:	af 92       	push	r10
     68e:	bf 92       	push	r11
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	df 93       	push	r29
     69e:	cf 93       	push	r28
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	c4 50       	subi	r28, 0x04	; 4
     6a6:	d2 40       	sbci	r29, 0x02	; 2
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     6b2:	ae 01       	movw	r20, r28
     6b4:	4b 5f       	subi	r20, 0xFB	; 251
     6b6:	5f 4f       	sbci	r21, 0xFF	; 255
     6b8:	5a 83       	std	Y+2, r21	; 0x02
     6ba:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	c8 2e       	mov	r12, r24
     6c0:	d1 2c       	mov	r13, r1
     6c2:	cc 0e       	add	r12, r28
     6c4:	dd 1e       	adc	r13, r29
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	b6 01       	movw	r22, r12
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	32 e0       	ldi	r19, 0x02	; 2
     6ce:	c1 d4       	rcall	.+2434   	; 0x1052 <USB_Host_GetDeviceConfigDescriptor>
     6d0:	85 30       	cpi	r24, 0x05	; 5
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <ProcessConfigurationDescriptor+0x4e>
     6d4:	4b c0       	rjmp	.+150    	; 0x76c <ProcessConfigurationDescriptor+0xe4>
     6d6:	86 30       	cpi	r24, 0x06	; 6
     6d8:	71 f0       	breq	.+28     	; 0x6f6 <ProcessConfigurationDescriptor+0x6e>
     6da:	88 23       	and	r24, r24
     6dc:	71 f4       	brne	.+28     	; 0x6fa <ProcessConfigurationDescriptor+0x72>
     6de:	ee 24       	eor	r14, r14
     6e0:	ff 24       	eor	r15, r15
     6e2:	00 e0       	ldi	r16, 0x00	; 0
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	88 24       	eor	r8, r8
     6e8:	99 24       	eor	r9, r9

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MIDIInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6ea:	56 01       	movw	r10, r12
     6ec:	6e 01       	movw	r12, r28
     6ee:	08 94       	sec
     6f0:	c1 1c       	adc	r12, r1
     6f2:	d1 1c       	adc	r13, r1
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <ProcessConfigurationDescriptor+0x76>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	3c c0       	rjmp	.+120    	; 0x772 <ProcessConfigurationDescriptor+0xea>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	3a c0       	rjmp	.+116    	; 0x772 <ProcessConfigurationDescriptor+0xea>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MIDIInterface) ||
     6fe:	81 14       	cp	r8, r1
     700:	91 04       	cpc	r9, r1
     702:	39 f0       	breq	.+14     	; 0x712 <ProcessConfigurationDescriptor+0x8a>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     704:	c5 01       	movw	r24, r10
     706:	b6 01       	movw	r22, r12
     708:	43 e3       	ldi	r20, 0x33	; 51
     70a:	53 e0       	ldi	r21, 0x03	; 3
     70c:	f9 d4       	rcall	.+2546   	; 0x1100 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MIDIInterface) ||
     70e:	88 23       	and	r24, r24
     710:	71 f0       	breq	.+28     	; 0x72e <ProcessConfigurationDescriptor+0xa6>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     712:	c5 01       	movw	r24, r10
     714:	b6 01       	movw	r22, r12
     716:	42 e2       	ldi	r20, 0x22	; 34
     718:	53 e0       	ldi	r21, 0x03	; 3
     71a:	f2 d4       	rcall	.+2532   	; 0x1100 <USB_GetNextDescriptorComp>
     71c:	88 23       	and	r24, r24
     71e:	41 f5       	brne	.+80     	; 0x770 <ProcessConfigurationDescriptor+0xe8>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MIDIInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     720:	89 80       	ldd	r8, Y+1	; 0x01
     722:	9a 80       	ldd	r9, Y+2	; 0x02

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
     724:	ee 24       	eor	r14, r14
     726:	ff 24       	eor	r15, r15
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MIDIInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     728:	00 e0       	ldi	r16, 0x00	; 0
     72a:	10 e0       	ldi	r17, 0x00	; 0
     72c:	e8 cf       	rjmp	.-48     	; 0x6fe <ProcessConfigurationDescriptor+0x76>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     72e:	e9 81       	ldd	r30, Y+1	; 0x01
     730:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     732:	82 81       	ldd	r24, Z+2	; 0x02
     734:	87 ff       	sbrs	r24, 7
     736:	02 c0       	rjmp	.+4      	; 0x73c <ProcessConfigurationDescriptor+0xb4>
		  DataINEndpoint  = EndpointData;
     738:	8f 01       	movw	r16, r30
     73a:	01 c0       	rjmp	.+2      	; 0x73e <ProcessConfigurationDescriptor+0xb6>
		else
		  DataOUTEndpoint = EndpointData;
     73c:	7f 01       	movw	r14, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     73e:	01 15       	cp	r16, r1
     740:	11 05       	cpc	r17, r1
     742:	e9 f2       	breq	.-70     	; 0x6fe <ProcessConfigurationDescriptor+0x76>
     744:	e1 14       	cp	r14, r1
     746:	f1 04       	cpc	r15, r1
     748:	d1 f2       	breq	.-76     	; 0x6fe <ProcessConfigurationDescriptor+0x76>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the MIDI data IN pipe */
	Pipe_ConfigurePipe(MIDI_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     74a:	f8 01       	movw	r30, r16
     74c:	24 81       	ldd	r18, Z+4	; 0x04
     74e:	35 81       	ldd	r19, Z+5	; 0x05
     750:	81 e8       	ldi	r24, 0x81	; 129
     752:	62 e0       	ldi	r22, 0x02	; 2
     754:	42 81       	ldd	r20, Z+2	; 0x02
     756:	01 e0       	ldi	r16, 0x01	; 1
     758:	ba d2       	rcall	.+1396   	; 0xcce <Pipe_ConfigurePipe>

	/* Configure the MIDI data OUT pipe */
	Pipe_ConfigurePipe(MIDI_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     75a:	f7 01       	movw	r30, r14
     75c:	24 81       	ldd	r18, Z+4	; 0x04
     75e:	35 81       	ldd	r19, Z+5	; 0x05
     760:	82 e0       	ldi	r24, 0x02	; 2
     762:	62 e0       	ldi	r22, 0x02	; 2
     764:	42 81       	ldd	r20, Z+2	; 0x02
     766:	b3 d2       	rcall	.+1382   	; 0xcce <Pipe_ConfigurePipe>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	03 c0       	rjmp	.+6      	; 0x772 <ProcessConfigurationDescriptor+0xea>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	01 c0       	rjmp	.+2      	; 0x772 <ProcessConfigurationDescriptor+0xea>
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     770:	84 e0       	ldi	r24, 0x04	; 4
	/* Configure the MIDI data OUT pipe */
	Pipe_ConfigurePipe(MIDI_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     772:	cc 5f       	subi	r28, 0xFC	; 252
     774:	dd 4f       	sbci	r29, 0xFD	; 253
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	cf 91       	pop	r28
     782:	df 91       	pop	r29
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	ff 90       	pop	r15
     78a:	ef 90       	pop	r14
     78c:	df 90       	pop	r13
     78e:	cf 90       	pop	r12
     790:	bf 90       	pop	r11
     792:	af 90       	pop	r10
     794:	9f 90       	pop	r9
     796:	8f 90       	pop	r8
     798:	08 95       	ret

0000079a <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     79a:	80 91 9e 00 	lds	r24, 0x009E
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	81 70       	andi	r24, 0x01	; 1
     7a2:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     7a4:	20 91 a0 00 	lds	r18, 0x00A0
     7a8:	2d 7f       	andi	r18, 0xFD	; 253
     7aa:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     7ae:	20 91 9e 00 	lds	r18, 0x009E
     7b2:	22 60       	ori	r18, 0x02	; 2
     7b4:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     7b8:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     7bc:	21 fd       	sbrc	r18, 1
     7be:	fc cf       	rjmp	.-8      	; 0x7b8 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7c0:	20 91 9e 00 	lds	r18, 0x009E
     7c4:	21 60       	ori	r18, 0x01	; 1
     7c6:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     7ca:	10 92 1c 01 	sts	0x011C, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7ce:	20 91 a0 00 	lds	r18, 0x00A0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	20 72       	andi	r18, 0x20	; 32
     7d6:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7d8:	40 91 a0 00 	lds	r20, 0x00A0
     7dc:	4f 7d       	andi	r20, 0xDF	; 223
     7de:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7e2:	40 91 9f 00 	lds	r20, 0x009F
     7e6:	4f 7d       	andi	r20, 0xDF	; 223
     7e8:	40 93 9f 00 	sts	0x009F, r20
     7ec:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7ee:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7f2:	55 ff       	sbrs	r21, 5
     7f4:	0b c0       	rjmp	.+22     	; 0x80c <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7f6:	40 91 9f 00 	lds	r20, 0x009F
     7fa:	4f 7d       	andi	r20, 0xDF	; 223
     7fc:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     800:	40 91 9f 00 	lds	r20, 0x009F
     804:	4d 7f       	andi	r20, 0xFD	; 253
     806:	40 93 9f 00 	sts	0x009F, r20
     80a:	08 c0       	rjmp	.+16     	; 0x81c <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     80c:	ef ec       	ldi	r30, 0xCF	; 207
     80e:	f7 e0       	ldi	r31, 0x07	; 7
     810:	31 97       	sbiw	r30, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <USB_Host_ResetDevice+0x76>
     814:	00 c0       	rjmp	.+0      	; 0x816 <USB_Host_ResetDevice+0x7c>
     816:	00 00       	nop
     818:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     81a:	49 f7       	brne	.-46     	; 0x7ee <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     81c:	21 15       	cp	r18, r1
     81e:	31 05       	cpc	r19, r1
     820:	29 f0       	breq	.+10     	; 0x82c <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     822:	20 91 a0 00 	lds	r18, 0x00A0
     826:	20 62       	ori	r18, 0x20	; 32
     828:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	29 f4       	brne	.+10     	; 0x83a <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     830:	80 91 9e 00 	lds	r24, 0x009E
     834:	8e 7f       	andi	r24, 0xFE	; 254
     836:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     83a:	80 91 a0 00 	lds	r24, 0x00A0
     83e:	82 60       	ori	r24, 0x02	; 2
     840:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     844:	08 95       	ret

00000846 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     846:	40 91 9e 00 	lds	r20, 0x009E
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	41 70       	andi	r20, 0x01	; 1
     84e:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     850:	20 91 a0 00 	lds	r18, 0x00A0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	20 72       	andi	r18, 0x20	; 32
     858:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     85a:	90 91 a0 00 	lds	r25, 0x00A0
     85e:	9f 7d       	andi	r25, 0xDF	; 223
     860:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     864:	90 91 9f 00 	lds	r25, 0x009F
     868:	9f 7d       	andi	r25, 0xDF	; 223
     86a:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     86e:	90 91 9e 00 	lds	r25, 0x009E
     872:	91 60       	ori	r25, 0x01	; 1
     874:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     878:	26 c0       	rjmp	.+76     	; 0x8c6 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     87a:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     87e:	95 ff       	sbrs	r25, 5
     880:	06 c0       	rjmp	.+12     	; 0x88e <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     882:	90 91 9f 00 	lds	r25, 0x009F
     886:	9f 7d       	andi	r25, 0xDF	; 223
     888:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     88c:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     88e:	90 91 26 01 	lds	r25, 0x0126
     892:	91 30       	cpi	r25, 0x01	; 1
     894:	d9 f0       	breq	.+54     	; 0x8cc <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     896:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     89a:	94 ff       	sbrs	r25, 4
     89c:	09 c0       	rjmp	.+18     	; 0x8b0 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     89e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     8a2:	80 91 a6 00 	lds	r24, 0x00A6
     8a6:	8f 7e       	andi	r24, 0xEF	; 239
     8a8:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     8ac:	82 e0       	ldi	r24, 0x02	; 2

			break;
     8ae:	0f c0       	rjmp	.+30     	; 0x8ce <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     8b0:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     8b4:	91 ff       	sbrs	r25, 1
     8b6:	07 c0       	rjmp	.+14     	; 0x8c6 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     8b8:	80 91 a6 00 	lds	r24, 0x00A6
     8bc:	8d 7f       	andi	r24, 0xFD	; 253
     8be:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     8c2:	83 e0       	ldi	r24, 0x03	; 3

			break;
     8c4:	04 c0       	rjmp	.+8      	; 0x8ce <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     8c6:	88 23       	and	r24, r24
     8c8:	c1 f6       	brne	.-80     	; 0x87a <USB_Host_WaitMS+0x34>
     8ca:	01 c0       	rjmp	.+2      	; 0x8ce <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     8cc:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     8ce:	41 15       	cp	r20, r1
     8d0:	51 05       	cpc	r21, r1
     8d2:	29 f4       	brne	.+10     	; 0x8de <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     8d4:	90 91 9e 00 	lds	r25, 0x009E
     8d8:	9e 7f       	andi	r25, 0xFE	; 254
     8da:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     8de:	21 15       	cp	r18, r1
     8e0:	31 05       	cpc	r19, r1
     8e2:	29 f0       	breq	.+10     	; 0x8ee <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     8e4:	90 91 a0 00 	lds	r25, 0x00A0
     8e8:	90 62       	ori	r25, 0x20	; 32
     8ea:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     8ee:	08 95       	ret

000008f0 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	df 93       	push	r29
     8f6:	cf 93       	push	r28
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	28 97       	sbiw	r28, 0x08	; 8
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     908:	80 91 26 01 	lds	r24, 0x0126
     90c:	85 30       	cpi	r24, 0x05	; 5
     90e:	09 f4       	brne	.+2      	; 0x912 <USB_Host_ProcessNextHostState+0x22>
     910:	99 c0       	rjmp	.+306    	; 0xa44 <USB_Host_ProcessNextHostState+0x154>
     912:	86 30       	cpi	r24, 0x06	; 6
     914:	68 f4       	brcc	.+26     	; 0x930 <USB_Host_ProcessNextHostState+0x40>
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	c1 f1       	breq	.+112    	; 0x98a <USB_Host_ProcessNextHostState+0x9a>
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	18 f4       	brcc	.+6      	; 0x924 <USB_Host_ProcessNextHostState+0x34>
     91e:	88 23       	and	r24, r24
     920:	a1 f0       	breq	.+40     	; 0x94a <USB_Host_ProcessNextHostState+0x5a>
     922:	04 c1       	rjmp	.+520    	; 0xb2c <USB_Host_ProcessNextHostState+0x23c>
     924:	83 30       	cpi	r24, 0x03	; 3
     926:	d9 f1       	breq	.+118    	; 0x99e <USB_Host_ProcessNextHostState+0xae>
     928:	84 30       	cpi	r24, 0x04	; 4
     92a:	09 f0       	breq	.+2      	; 0x92e <USB_Host_ProcessNextHostState+0x3e>
     92c:	ff c0       	rjmp	.+510    	; 0xb2c <USB_Host_ProcessNextHostState+0x23c>
     92e:	62 c0       	rjmp	.+196    	; 0x9f4 <USB_Host_ProcessNextHostState+0x104>
     930:	87 30       	cpi	r24, 0x07	; 7
     932:	09 f4       	brne	.+2      	; 0x936 <USB_Host_ProcessNextHostState+0x46>
     934:	9e c0       	rjmp	.+316    	; 0xa72 <USB_Host_ProcessNextHostState+0x182>
     936:	87 30       	cpi	r24, 0x07	; 7
     938:	08 f4       	brcc	.+2      	; 0x93c <USB_Host_ProcessNextHostState+0x4c>
     93a:	8f c0       	rjmp	.+286    	; 0xa5a <USB_Host_ProcessNextHostState+0x16a>
     93c:	88 30       	cpi	r24, 0x08	; 8
     93e:	09 f4       	brne	.+2      	; 0x942 <USB_Host_ProcessNextHostState+0x52>
     940:	b8 c0       	rjmp	.+368    	; 0xab2 <USB_Host_ProcessNextHostState+0x1c2>
     942:	89 30       	cpi	r24, 0x09	; 9
     944:	09 f0       	breq	.+2      	; 0x948 <USB_Host_ProcessNextHostState+0x58>
     946:	f2 c0       	rjmp	.+484    	; 0xb2c <USB_Host_ProcessNextHostState+0x23c>
     948:	d9 c0       	rjmp	.+434    	; 0xafc <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     94a:	00 91 1a 01 	lds	r16, 0x011A
     94e:	10 91 1b 01 	lds	r17, 0x011B
     952:	01 15       	cp	r16, r1
     954:	11 05       	cpc	r17, r1
     956:	09 f4       	brne	.+2      	; 0x95a <USB_Host_ProcessNextHostState+0x6a>
     958:	e9 c0       	rjmp	.+466    	; 0xb2c <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	74 df       	rcall	.-280    	; 0x846 <USB_Host_WaitMS>
     95e:	68 2f       	mov	r22, r24
     960:	88 23       	and	r24, r24
     962:	31 f0       	breq	.+12     	; 0x970 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     964:	80 91 19 01 	lds	r24, 0x0119
     968:	80 93 26 01 	sts	0x0126, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     96c:	81 e0       	ldi	r24, 0x01	; 1
					break;
     96e:	d2 c0       	rjmp	.+420    	; 0xb14 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     970:	01 50       	subi	r16, 0x01	; 1
     972:	10 40       	sbci	r17, 0x00	; 0
     974:	10 93 1b 01 	sts	0x011B, r17
     978:	00 93 1a 01 	sts	0x011A, r16
     97c:	01 15       	cp	r16, r1
     97e:	11 05       	cpc	r17, r1
     980:	09 f0       	breq	.+2      	; 0x984 <USB_Host_ProcessNextHostState+0x94>
     982:	d4 c0       	rjmp	.+424    	; 0xb2c <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     984:	80 91 19 01 	lds	r24, 0x0119
     988:	07 c0       	rjmp	.+14     	; 0x998 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     98a:	88 ee       	ldi	r24, 0xE8	; 232
     98c:	93 e0       	ldi	r25, 0x03	; 3
     98e:	90 93 1b 01 	sts	0x011B, r25
     992:	80 93 1a 01 	sts	0x011A, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     996:	83 e0       	ldi	r24, 0x03	; 3
     998:	80 93 26 01 	sts	0x0126, r24
			break;
     99c:	c7 c0       	rjmp	.+398    	; 0xb2c <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     99e:	80 91 1a 01 	lds	r24, 0x011A
     9a2:	90 91 1b 01 	lds	r25, 0x011B
     9a6:	9c 01       	movw	r18, r24
     9a8:	21 50       	subi	r18, 0x01	; 1
     9aa:	30 40       	sbci	r19, 0x00	; 0
     9ac:	30 93 1b 01 	sts	0x011B, r19
     9b0:	20 93 1a 01 	sts	0x011A, r18
     9b4:	00 97       	sbiw	r24, 0x00	; 0
     9b6:	39 f0       	breq	.+14     	; 0x9c6 <USB_Host_ProcessNextHostState+0xd6>
     9b8:	8f ec       	ldi	r24, 0xCF	; 207
     9ba:	97 e0       	ldi	r25, 0x07	; 7
     9bc:	01 97       	sbiw	r24, 0x01	; 1
     9be:	f1 f7       	brne	.-4      	; 0x9bc <USB_Host_ProcessNextHostState+0xcc>
     9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <USB_Host_ProcessNextHostState+0xd2>
     9c2:	00 00       	nop
     9c4:	b3 c0       	rjmp	.+358    	; 0xb2c <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     9c6:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     9c8:	80 91 d8 00 	lds	r24, 0x00D8
     9cc:	80 61       	ori	r24, 0x10	; 16
     9ce:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     9d2:	80 91 dd 00 	lds	r24, 0x00DD
     9d6:	8b 7f       	andi	r24, 0xFB	; 251
     9d8:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     9dc:	80 91 d7 00 	lds	r24, 0x00D7
     9e0:	80 61       	ori	r24, 0x10	; 16
     9e2:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     9e6:	80 91 dd 00 	lds	r24, 0x00DD
     9ea:	82 60       	ori	r24, 0x02	; 2
     9ec:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     9f0:	84 e0       	ldi	r24, 0x04	; 4
     9f2:	d2 cf       	rjmp	.-92     	; 0x998 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     9f4:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     9f8:	80 ff       	sbrs	r24, 0
     9fa:	98 c0       	rjmp	.+304    	; 0xb2c <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     9fc:	80 91 9f 00 	lds	r24, 0x009F
     a00:	8e 7f       	andi	r24, 0xFE	; 254
     a02:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a06:	80 91 9f 00 	lds	r24, 0x009F
     a0a:	8d 7f       	andi	r24, 0xFD	; 253
     a0c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     a10:	80 91 df 00 	lds	r24, 0x00DF
     a14:	8d 7f       	andi	r24, 0xFD	; 253
     a16:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     a1a:	80 91 de 00 	lds	r24, 0x00DE
     a1e:	82 60       	ori	r24, 0x02	; 2
     a20:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a24:	80 91 9e 00 	lds	r24, 0x009E
     a28:	81 60       	ori	r24, 0x01	; 1
     a2a:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     a2e:	b6 d1       	rcall	.+876    	; 0xd9c <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     a30:	10 92 26 01 	sts	0x0126, r1
     a34:	84 e6       	ldi	r24, 0x64	; 100
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	90 93 1b 01 	sts	0x011B, r25
     a3c:	80 93 1a 01 	sts	0x011A, r24
     a40:	85 e0       	ldi	r24, 0x05	; 5
     a42:	59 c0       	rjmp	.+178    	; 0xaf6 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     a44:	aa de       	rcall	.-684    	; 0x79a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     a46:	10 92 26 01 	sts	0x0126, r1
     a4a:	88 ec       	ldi	r24, 0xC8	; 200
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	90 93 1b 01 	sts	0x011B, r25
     a52:	80 93 1a 01 	sts	0x011A, r24
     a56:	86 e0       	ldi	r24, 0x06	; 6
     a58:	4e c0       	rjmp	.+156    	; 0xaf6 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	20 e4       	ldi	r18, 0x40	; 64
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	01 e0       	ldi	r16, 0x01	; 1
     a66:	33 d1       	rcall	.+614    	; 0xcce <Pipe_ConfigurePipe>
     a68:	88 23       	and	r24, r24
     a6a:	09 f4       	brne	.+2      	; 0xa6e <USB_Host_ProcessNextHostState+0x17e>
     a6c:	4f c0       	rjmp	.+158    	; 0xb0c <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     a6e:	87 e0       	ldi	r24, 0x07	; 7
     a70:	93 cf       	rjmp	.-218    	; 0x998 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     a72:	ae e1       	ldi	r26, 0x1E	; 30
     a74:	b1 e0       	ldi	r27, 0x01	; 1
     a76:	ef e0       	ldi	r30, 0x0F	; 15
     a78:	f1 e0       	ldi	r31, 0x01	; 1
     a7a:	88 e0       	ldi	r24, 0x08	; 8
     a7c:	01 90       	ld	r0, Z+
     a7e:	0d 92       	st	X+, r0
     a80:	81 50       	subi	r24, 0x01	; 1
     a82:	e1 f7       	brne	.-8      	; 0xa7c <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a84:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     a88:	ce 01       	movw	r24, r28
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	a6 d3       	rcall	.+1868   	; 0x11da <USB_Host_SendControlRequest>
     a8e:	68 2f       	mov	r22, r24
     a90:	88 23       	and	r24, r24
     a92:	09 f0       	breq	.+2      	; 0xa96 <USB_Host_ProcessNextHostState+0x1a6>
     a94:	3e c0       	rjmp	.+124    	; 0xb12 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     a96:	88 85       	ldd	r24, Y+8	; 0x08
     a98:	80 93 17 01 	sts	0x0117, r24

			USB_Host_ResetDevice();
     a9c:	7e de       	rcall	.-772    	; 0x79a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     a9e:	10 92 26 01 	sts	0x0126, r1
     aa2:	88 ec       	ldi	r24, 0xC8	; 200
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	90 93 1b 01 	sts	0x011B, r25
     aaa:	80 93 1a 01 	sts	0x011A, r24
     aae:	88 e0       	ldi	r24, 0x08	; 8
     ab0:	22 c0       	rjmp	.+68     	; 0xaf6 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     ab2:	20 91 17 01 	lds	r18, 0x0117
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	01 e0       	ldi	r16, 0x01	; 1
     ac0:	06 d1       	rcall	.+524    	; 0xcce <Pipe_ConfigurePipe>
     ac2:	88 23       	and	r24, r24
     ac4:	19 f1       	breq	.+70     	; 0xb0c <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     ac6:	ae e1       	ldi	r26, 0x1E	; 30
     ac8:	b1 e0       	ldi	r27, 0x01	; 1
     aca:	e7 e0       	ldi	r30, 0x07	; 7
     acc:	f1 e0       	ldi	r31, 0x01	; 1
     ace:	88 e0       	ldi	r24, 0x08	; 8
     ad0:	01 90       	ld	r0, Z+
     ad2:	0d 92       	st	X+, r0
     ad4:	81 50       	subi	r24, 0x01	; 1
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	7e d3       	rcall	.+1788   	; 0x11da <USB_Host_SendControlRequest>
     ade:	68 2f       	mov	r22, r24
     ae0:	88 23       	and	r24, r24
     ae2:	b9 f4       	brne	.+46     	; 0xb12 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     ae4:	10 92 26 01 	sts	0x0126, r1
     ae8:	84 e6       	ldi	r24, 0x64	; 100
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	90 93 1b 01 	sts	0x011B, r25
     af0:	80 93 1a 01 	sts	0x011A, r24
     af4:	89 e0       	ldi	r24, 0x09	; 9
     af6:	80 93 19 01 	sts	0x0119, r24
			break;
     afa:	18 c0       	rjmp	.+48     	; 0xb2c <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     b02:	8a e0       	ldi	r24, 0x0A	; 10
     b04:	80 93 26 01 	sts	0x0126, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     b08:	28 dc       	rcall	.-1968   	; 0x35a <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     b0a:	10 c0       	rjmp	.+32     	; 0xb2c <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     b0c:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	01 c0       	rjmp	.+2      	; 0xb14 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     b12:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b14:	90 91 26 01 	lds	r25, 0x0126
     b18:	91 30       	cpi	r25, 0x01	; 1
     b1a:	41 f0       	breq	.+16     	; 0xb2c <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     b1c:	83 dc       	rcall	.-1786   	; 0x424 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b1e:	80 91 dd 00 	lds	r24, 0x00DD
     b22:	81 60       	ori	r24, 0x01	; 1
     b24:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     b28:	12 dc       	rcall	.-2012   	; 0x34e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     b2a:	95 d1       	rcall	.+810    	; 0xe56 <USB_ResetInterface>
	}
}
     b2c:	28 96       	adiw	r28, 0x08	; 8
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	cf 91       	pop	r28
     b3a:	df 91       	pop	r29
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	08 95       	ret

00000b42 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     b42:	8f 92       	push	r8
     b44:	9f 92       	push	r9
     b46:	bf 92       	push	r11
     b48:	cf 92       	push	r12
     b4a:	df 92       	push	r13
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	0f 92       	push	r0
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	e8 2e       	mov	r14, r24
     b60:	4b 01       	movw	r8, r22
     b62:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     b64:	80 91 aa 00 	lds	r24, 0x00AA
     b68:	8f 7c       	andi	r24, 0xCF	; 207
     b6a:	80 62       	ori	r24, 0x20	; 32
     b6c:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     b70:	99 83       	std	Y+1, r25	; 0x01
     b72:	2a d1       	rcall	.+596    	; 0xdc8 <Pipe_WaitUntilReady>
     b74:	b8 2e       	mov	r11, r24
     b76:	99 81       	ldd	r25, Y+1	; 0x01
     b78:	88 23       	and	r24, r24
     b7a:	c1 f5       	brne	.+112    	; 0xbec <Pipe_Write_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     b7c:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     b7e:	01 15       	cp	r16, r1
     b80:	11 05       	cpc	r17, r1
     b82:	39 f0       	breq	.+14     	; 0xb92 <Pipe_Write_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     b84:	f8 01       	movw	r30, r16
     b86:	20 81       	ld	r18, Z
     b88:	31 81       	ldd	r19, Z+1	; 0x01
     b8a:	82 1a       	sub	r8, r18
     b8c:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     b8e:	e2 0e       	add	r14, r18
     b90:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     b92:	cc 24       	eor	r12, r12
     b94:	dd 24       	eor	r13, r13
     b96:	25 c0       	rjmp	.+74     	; 0xbe2 <Pipe_Write_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     b98:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     b9c:	85 fd       	sbrc	r24, 5
     b9e:	16 c0       	rjmp	.+44     	; 0xbcc <Pipe_Write_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     ba0:	80 91 a6 00 	lds	r24, 0x00A6
     ba4:	8b 77       	andi	r24, 0x7B	; 123
     ba6:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     baa:	01 15       	cp	r16, r1
     bac:	11 05       	cpc	r17, r1
     bae:	51 f0       	breq	.+20     	; 0xbc4 <Pipe_Write_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     bb0:	f8 01       	movw	r30, r16
     bb2:	80 81       	ld	r24, Z
     bb4:	91 81       	ldd	r25, Z+1	; 0x01
     bb6:	8c 0d       	add	r24, r12
     bb8:	9d 1d       	adc	r25, r13
     bba:	91 83       	std	Z+1, r25	; 0x01
     bbc:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     bbe:	24 e0       	ldi	r18, 0x04	; 4
     bc0:	b2 2e       	mov	r11, r18
     bc2:	14 c0       	rjmp	.+40     	; 0xbec <Pipe_Write_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     bc4:	01 d1       	rcall	.+514    	; 0xdc8 <Pipe_WaitUntilReady>
     bc6:	88 23       	and	r24, r24
     bc8:	61 f0       	breq	.+24     	; 0xbe2 <Pipe_Write_Stream_LE+0xa0>
     bca:	0f c0       	rjmp	.+30     	; 0xbea <Pipe_Write_Stream_LE+0xa8>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     bcc:	f7 01       	movw	r30, r14
     bce:	81 91       	ld	r24, Z+
     bd0:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     bd2:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     bd6:	08 94       	sec
     bd8:	81 08       	sbc	r8, r1
     bda:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     bdc:	08 94       	sec
     bde:	c1 1c       	adc	r12, r1
     be0:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     be2:	81 14       	cp	r8, r1
     be4:	91 04       	cpc	r9, r1
     be6:	c1 f6       	brne	.-80     	; 0xb98 <Pipe_Write_Stream_LE+0x56>
     be8:	01 c0       	rjmp	.+2      	; 0xbec <Pipe_Write_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     bea:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     bec:	8b 2d       	mov	r24, r11
     bee:	0f 90       	pop	r0
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	bf 90       	pop	r11
     c02:	9f 90       	pop	r9
     c04:	8f 90       	pop	r8
     c06:	08 95       	ret

00000c08 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     c08:	8f 92       	push	r8
     c0a:	9f 92       	push	r9
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	0f 92       	push	r0
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	e8 2e       	mov	r14, r24
     c26:	4b 01       	movw	r8, r22
     c28:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     c2a:	80 91 aa 00 	lds	r24, 0x00AA
     c2e:	8f 7c       	andi	r24, 0xCF	; 207
     c30:	80 61       	ori	r24, 0x10	; 16
     c32:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     c36:	99 83       	std	Y+1, r25	; 0x01
     c38:	c7 d0       	rcall	.+398    	; 0xdc8 <Pipe_WaitUntilReady>
     c3a:	b8 2e       	mov	r11, r24
     c3c:	99 81       	ldd	r25, Y+1	; 0x01
     c3e:	88 23       	and	r24, r24
     c40:	c1 f5       	brne	.+112    	; 0xcb2 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c42:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c44:	01 15       	cp	r16, r1
     c46:	11 05       	cpc	r17, r1
     c48:	39 f0       	breq	.+14     	; 0xc58 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     c4a:	f8 01       	movw	r30, r16
     c4c:	20 81       	ld	r18, Z
     c4e:	31 81       	ldd	r19, Z+1	; 0x01
     c50:	82 1a       	sub	r8, r18
     c52:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     c54:	e2 0e       	add	r14, r18
     c56:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     c58:	cc 24       	eor	r12, r12
     c5a:	dd 24       	eor	r13, r13
     c5c:	25 c0       	rjmp	.+74     	; 0xca8 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     c5e:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     c62:	85 fd       	sbrc	r24, 5
     c64:	16 c0       	rjmp	.+44     	; 0xc92 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     c66:	80 91 a6 00 	lds	r24, 0x00A6
     c6a:	8e 77       	andi	r24, 0x7E	; 126
     c6c:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     c70:	01 15       	cp	r16, r1
     c72:	11 05       	cpc	r17, r1
     c74:	51 f0       	breq	.+20     	; 0xc8a <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     c76:	f8 01       	movw	r30, r16
     c78:	80 81       	ld	r24, Z
     c7a:	91 81       	ldd	r25, Z+1	; 0x01
     c7c:	8c 0d       	add	r24, r12
     c7e:	9d 1d       	adc	r25, r13
     c80:	91 83       	std	Z+1, r25	; 0x01
     c82:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     c84:	44 e0       	ldi	r20, 0x04	; 4
     c86:	b4 2e       	mov	r11, r20
     c88:	14 c0       	rjmp	.+40     	; 0xcb2 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     c8a:	9e d0       	rcall	.+316    	; 0xdc8 <Pipe_WaitUntilReady>
     c8c:	88 23       	and	r24, r24
     c8e:	61 f0       	breq	.+24     	; 0xca8 <Pipe_Read_Stream_LE+0xa0>
     c90:	0f c0       	rjmp	.+30     	; 0xcb0 <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     c92:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     c96:	f7 01       	movw	r30, r14
     c98:	81 93       	st	Z+, r24
     c9a:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     c9c:	08 94       	sec
     c9e:	81 08       	sbc	r8, r1
     ca0:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     ca2:	08 94       	sec
     ca4:	c1 1c       	adc	r12, r1
     ca6:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     ca8:	81 14       	cp	r8, r1
     caa:	91 04       	cpc	r9, r1
     cac:	c1 f6       	brne	.-80     	; 0xc5e <Pipe_Read_Stream_LE+0x56>
     cae:	01 c0       	rjmp	.+2      	; 0xcb2 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     cb0:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     cb2:	8b 2d       	mov	r24, r11
     cb4:	0f 90       	pop	r0
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	cf 90       	pop	r12
     cc6:	bf 90       	pop	r11
     cc8:	9f 90       	pop	r9
     cca:	8f 90       	pop	r8
     ccc:	08 95       	ret

00000cce <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     cce:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     cd0:	58 2f       	mov	r21, r24
     cd2:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     cd4:	87 ff       	sbrs	r24, 7
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <Pipe_ConfigurePipe+0xe>
     cd8:	80 e1       	ldi	r24, 0x10	; 16
     cda:	01 c0       	rjmp	.+2      	; 0xcde <Pipe_ConfigurePipe+0x10>
     cdc:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     cde:	57 30       	cpi	r21, 0x07	; 7
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <Pipe_ConfigurePipe+0x16>
     ce2:	59 c0       	rjmp	.+178    	; 0xd96 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     ce4:	66 23       	and	r22, r22
     ce6:	09 f4       	brne	.+2      	; 0xcea <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     ce8:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     cea:	4f 70       	andi	r20, 0x0F	; 15
     cec:	62 95       	swap	r22
     cee:	66 0f       	add	r22, r22
     cf0:	66 0f       	add	r22, r22
     cf2:	60 7c       	andi	r22, 0xC0	; 192
     cf4:	64 2b       	or	r22, r20
     cf6:	68 2b       	or	r22, r24
     cf8:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     cfa:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     cfc:	84 2f       	mov	r24, r20
     cfe:	8f 70       	andi	r24, 0x0F	; 15
     d00:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     d04:	45 17       	cp	r20, r21
     d06:	a1 f4       	brne	.+40     	; 0xd30 <Pipe_ConfigurePipe+0x62>
     d08:	88 e0       	ldi	r24, 0x08	; 8
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	03 c0       	rjmp	.+6      	; 0xd16 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     d10:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     d16:	82 17       	cp	r24, r18
     d18:	93 07       	cpc	r25, r19
     d1a:	10 f4       	brcc	.+4      	; 0xd20 <Pipe_ConfigurePipe+0x52>
     d1c:	75 30       	cpi	r23, 0x05	; 5
     d1e:	c1 f7       	brne	.-16     	; 0xd10 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     d20:	87 2f       	mov	r24, r23
     d22:	82 95       	swap	r24
     d24:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     d26:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     d28:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     d2a:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     d2c:	e0 e0       	ldi	r30, 0x00	; 0
     d2e:	08 c0       	rjmp	.+16     	; 0xd40 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     d30:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     d34:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     d38:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     d3c:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     d40:	81 ff       	sbrs	r24, 1
     d42:	20 c0       	rjmp	.+64     	; 0xd84 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     d44:	90 91 a9 00 	lds	r25, 0x00A9
     d48:	9e 7f       	andi	r25, 0xFE	; 254
     d4a:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     d4e:	90 91 ab 00 	lds	r25, 0x00AB
     d52:	9d 7f       	andi	r25, 0xFD	; 253
     d54:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     d58:	90 91 a9 00 	lds	r25, 0x00A9
     d5c:	91 60       	ori	r25, 0x01	; 1
     d5e:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     d62:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     d66:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     d6a:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     d6e:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     d72:	80 91 a9 00 	lds	r24, 0x00A9
     d76:	80 62       	ori	r24, 0x20	; 32
     d78:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     d7c:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     d80:	87 ff       	sbrs	r24, 7
     d82:	09 c0       	rjmp	.+18     	; 0xd96 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     d84:	4f 5f       	subi	r20, 0xFF	; 255
     d86:	47 30       	cpi	r20, 0x07	; 7
     d88:	09 f0       	breq	.+2      	; 0xd8c <Pipe_ConfigurePipe+0xbe>
     d8a:	b8 cf       	rjmp	.-144    	; 0xcfc <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d8c:	5f 70       	andi	r21, 0x0F	; 15
     d8e:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	01 c0       	rjmp	.+2      	; 0xd98 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     d96:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     d98:	0f 91       	pop	r16
     d9a:	08 95       	ret

00000d9c <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     d9c:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	98 2f       	mov	r25, r24
     da4:	9f 70       	andi	r25, 0x0F	; 15
     da6:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     daa:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     dae:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     db2:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     db6:	90 91 a9 00 	lds	r25, 0x00A9
     dba:	9e 7f       	andi	r25, 0xFE	; 254
     dbc:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     dc0:	8f 5f       	subi	r24, 0xFF	; 255
     dc2:	87 30       	cpi	r24, 0x07	; 7
     dc4:	71 f7       	brne	.-36     	; 0xda2 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     dc6:	08 95       	ret

00000dc8 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     dc8:	80 91 a2 00 	lds	r24, 0x00A2
     dcc:	90 91 a3 00 	lds	r25, 0x00A3
}

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     dd0:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     dd2:	20 91 aa 00 	lds	r18, 0x00AA
     dd6:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     dd8:	20 31       	cpi	r18, 0x10	; 16
     dda:	29 f4       	brne	.+10     	; 0xde6 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ddc:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     de0:	20 ff       	sbrs	r18, 0
     de2:	05 c0       	rjmp	.+10     	; 0xdee <Pipe_WaitUntilReady+0x26>
     de4:	18 c0       	rjmp	.+48     	; 0xe16 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     de6:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     dea:	22 fd       	sbrc	r18, 2
     dec:	14 c0       	rjmp	.+40     	; 0xe16 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     dee:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     df2:	21 fd       	sbrc	r18, 1
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     df6:	20 91 26 01 	lds	r18, 0x0126
     dfa:	21 30       	cpi	r18, 0x01	; 1
     dfc:	81 f0       	breq	.+32     	; 0xe1e <Pipe_WaitUntilReady+0x56>
     dfe:	20 91 a2 00 	lds	r18, 0x00A2
     e02:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     e06:	28 17       	cp	r18, r24
     e08:	39 07       	cpc	r19, r25
     e0a:	19 f3       	breq	.-58     	; 0xdd2 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     e0c:	44 23       	and	r20, r20
     e0e:	49 f0       	breq	.+18     	; 0xe22 <Pipe_WaitUntilReady+0x5a>
     e10:	41 50       	subi	r20, 0x01	; 1
     e12:	c9 01       	movw	r24, r18
     e14:	de cf       	rjmp	.-68     	; 0xdd2 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     e22:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     e24:	08 95       	ret

00000e26 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     e26:	75 d0       	rcall	.+234    	; 0xf12 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e28:	7c d0       	rcall	.+248    	; 0xf22 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     e2a:	e0 ee       	ldi	r30, 0xE0	; 224
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	81 60       	ori	r24, 0x01	; 1
     e32:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     e34:	e8 ed       	ldi	r30, 0xD8	; 216
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8f 77       	andi	r24, 0x7F	; 127
     e3c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e3e:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     e40:	a7 ed       	ldi	r26, 0xD7	; 215
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	8c 91       	ld	r24, X
     e46:	8e 7f       	andi	r24, 0xFE	; 254
     e48:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 7e       	andi	r24, 0xEF	; 239
     e4e:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     e50:	10 92 1d 01 	sts	0x011D, r1
}
     e54:	08 95       	ret

00000e56 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     e56:	5d d0       	rcall	.+186    	; 0xf12 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e58:	64 d0       	rcall	.+200    	; 0xf22 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e5a:	80 91 d8 00 	lds	r24, 0x00D8
     e5e:	8f 77       	andi	r24, 0x7F	; 127
     e60:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     e64:	80 91 d8 00 	lds	r24, 0x00D8
     e68:	80 68       	ori	r24, 0x80	; 128
     e6a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     e6e:	80 91 d8 00 	lds	r24, 0x00D8
     e72:	8f 7d       	andi	r24, 0xDF	; 223
     e74:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     e78:	80 91 d7 00 	lds	r24, 0x00D7
     e7c:	8f 77       	andi	r24, 0x7F	; 127
     e7e:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e82:	8c e0       	ldi	r24, 0x0C	; 12
     e84:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e86:	8e e0       	ldi	r24, 0x0E	; 14
     e88:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     e8a:	09 b4       	in	r0, 0x29	; 41
     e8c:	00 fe       	sbrs	r0, 0
     e8e:	fd cf       	rjmp	.-6      	; 0xe8a <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	80 93 26 01 	sts	0x0126, r24
	USB_Host_ConfigurationNumber = 0;
     e96:	10 92 1c 01 	sts	0x011C, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     e9a:	80 e4       	ldi	r24, 0x40	; 64
     e9c:	80 93 17 01 	sts	0x0117, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     ea0:	80 91 d8 00 	lds	r24, 0x00D8
     ea4:	80 64       	ori	r24, 0x40	; 64
     ea6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     eaa:	80 91 dd 00 	lds	r24, 0x00DD
     eae:	81 60       	ori	r24, 0x01	; 1
     eb0:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     eb4:	80 91 dd 00 	lds	r24, 0x00DD
     eb8:	84 60       	ori	r24, 0x04	; 4
     eba:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     ebe:	80 91 d7 00 	lds	r24, 0x00D7
     ec2:	8f 7e       	andi	r24, 0xEF	; 239
     ec4:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     ec8:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     eca:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     ecc:	80 91 de 00 	lds	r24, 0x00DE
     ed0:	81 60       	ori	r24, 0x01	; 1
     ed2:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     ed6:	80 91 de 00 	lds	r24, 0x00DE
     eda:	84 60       	ori	r24, 0x04	; 4
     edc:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     ee0:	80 91 e0 00 	lds	r24, 0x00E0
     ee4:	8e 7f       	andi	r24, 0xFE	; 254
     ee6:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     eea:	80 91 d8 00 	lds	r24, 0x00D8
     eee:	80 61       	ori	r24, 0x10	; 16
     ef0:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     ef4:	08 95       	ret

00000ef6 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     ef6:	e8 ed       	ldi	r30, 0xD8	; 216
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8f 7e       	andi	r24, 0xEF	; 239
     efe:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     f00:	e7 ed       	ldi	r30, 0xD7	; 215
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	81 60       	ori	r24, 0x01	; 1
     f08:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	80 93 1d 01 	sts	0x011D, r24

	USB_ResetInterface();
}
     f10:	a2 cf       	rjmp	.-188    	; 0xe56 <USB_ResetInterface>

00000f12 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     f12:	e8 ed       	ldi	r30, 0xD8	; 216
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8c 7f       	andi	r24, 0xFC	; 252
     f1a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     f1c:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     f20:	08 95       	ret

00000f22 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     f22:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     f26:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     f2a:	08 95       	ret

00000f2c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	11 24       	eor	r1, r1
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f52:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     f56:	85 ff       	sbrs	r24, 5
     f58:	0a c0       	rjmp	.+20     	; 0xf6e <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f5a:	80 91 a0 00 	lds	r24, 0x00A0
     f5e:	85 ff       	sbrs	r24, 5
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f62:	80 91 9f 00 	lds	r24, 0x009F
     f66:	8f 7d       	andi	r24, 0xDF	; 223
     f68:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     f6c:	0c d1       	rcall	.+536    	; 0x1186 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     f6e:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     f72:	81 ff       	sbrs	r24, 1
     f74:	15 c0       	rjmp	.+42     	; 0xfa0 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     f76:	80 91 a0 00 	lds	r24, 0x00A0
     f7a:	81 ff       	sbrs	r24, 1
     f7c:	11 c0       	rjmp	.+34     	; 0xfa0 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     f7e:	80 91 9f 00 	lds	r24, 0x009F
     f82:	8d 7f       	andi	r24, 0xFD	; 253
     f84:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     f88:	80 91 9f 00 	lds	r24, 0x009F
     f8c:	8e 7f       	andi	r24, 0xFE	; 254
     f8e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     f92:	80 91 a0 00 	lds	r24, 0x00A0
     f96:	8d 7f       	andi	r24, 0xFD	; 253
     f98:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     f9c:	d8 d9       	rcall	.-3152   	; 0x34e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     f9e:	5b df       	rcall	.-330    	; 0xe56 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     fa0:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     fa4:	81 ff       	sbrs	r24, 1
     fa6:	15 c0       	rjmp	.+42     	; 0xfd2 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     fa8:	80 91 de 00 	lds	r24, 0x00DE
     fac:	81 ff       	sbrs	r24, 1
     fae:	11 c0       	rjmp	.+34     	; 0xfd2 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     fb0:	80 91 df 00 	lds	r24, 0x00DF
     fb4:	8d 7f       	andi	r24, 0xFD	; 253
     fb6:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     fba:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     fbc:	80 91 dd 00 	lds	r24, 0x00DD
     fc0:	81 60       	ori	r24, 0x01	; 1
     fc2:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	0d da       	rcall	.-3046   	; 0x3e4 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     fca:	c1 d9       	rcall	.-3198   	; 0x34e <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	80 93 26 01 	sts	0x0126, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     fd2:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     fd6:	80 ff       	sbrs	r24, 0
     fd8:	17 c0       	rjmp	.+46     	; 0x1008 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     fda:	80 91 de 00 	lds	r24, 0x00DE
     fde:	80 ff       	sbrs	r24, 0
     fe0:	13 c0       	rjmp	.+38     	; 0x1008 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     fe2:	80 91 df 00 	lds	r24, 0x00DF
     fe6:	8e 7f       	andi	r24, 0xFE	; 254
     fe8:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     fec:	80 91 de 00 	lds	r24, 0x00DE
     ff0:	8e 7f       	andi	r24, 0xFE	; 254
     ff2:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     ff6:	a5 d9       	rcall	.-3254   	; 0x342 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     ff8:	80 91 a0 00 	lds	r24, 0x00A0
     ffc:	82 60       	ori	r24, 0x02	; 2
     ffe:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	80 93 26 01 	sts	0x0126, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1008:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    100c:	82 ff       	sbrs	r24, 2
    100e:	0e c0       	rjmp	.+28     	; 0x102c <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1010:	80 91 de 00 	lds	r24, 0x00DE
    1014:	82 ff       	sbrs	r24, 2
    1016:	0a c0       	rjmp	.+20     	; 0x102c <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1018:	80 91 df 00 	lds	r24, 0x00DF
    101c:	8b 7f       	andi	r24, 0xFB	; 251
    101e:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	fe d9       	rcall	.-3076   	; 0x424 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1028:	92 d9       	rcall	.-3292   	; 0x34e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    102a:	15 df       	rcall	.-470    	; 0xe56 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    102c:	ff 91       	pop	r31
    102e:	ef 91       	pop	r30
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0b be       	out	0x3b, r0	; 59
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti

00001052 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	29 97       	sbiw	r28, 0x09	; 9
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	6b 01       	movw	r12, r22
    1074:	8a 01       	movw	r16, r20
    1076:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1078:	90 e8       	ldi	r25, 0x80	; 128
    107a:	90 93 1e 01 	sts	0x011E, r25
    107e:	96 e0       	ldi	r25, 0x06	; 6
    1080:	90 93 1f 01 	sts	0x011F, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    108a:	90 93 21 01 	sts	0x0121, r25
    108e:	80 93 20 01 	sts	0x0120, r24
    1092:	10 92 23 01 	sts	0x0123, r1
    1096:	10 92 22 01 	sts	0x0122, r1
    109a:	89 e0       	ldi	r24, 0x09	; 9
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	90 93 25 01 	sts	0x0125, r25
    10a2:	80 93 24 01 	sts	0x0124, r24
    10a6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    10aa:	ce 01       	movw	r24, r28
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	95 d0       	rcall	.+298    	; 0x11da <USB_Host_SendControlRequest>
    10b0:	88 23       	and	r24, r24
    10b2:	b9 f4       	brne	.+46     	; 0x10e2 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	f6 01       	movw	r30, r12
    10ba:	91 83       	std	Z+1, r25	; 0x01
    10bc:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    10be:	e8 16       	cp	r14, r24
    10c0:	f9 06       	cpc	r15, r25
    10c2:	70 f0       	brcs	.+28     	; 0x10e0 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    10c4:	90 93 25 01 	sts	0x0125, r25
    10c8:	80 93 24 01 	sts	0x0124, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    10cc:	c8 01       	movw	r24, r16
    10ce:	85 d0       	rcall	.+266    	; 0x11da <USB_Host_SendControlRequest>
    10d0:	88 23       	and	r24, r24
    10d2:	39 f4       	brne	.+14     	; 0x10e2 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    10d4:	f8 01       	movw	r30, r16
    10d6:	91 81       	ldd	r25, Z+1	; 0x01
    10d8:	92 30       	cpi	r25, 0x02	; 2
    10da:	19 f0       	breq	.+6      	; 0x10e2 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    10dc:	86 e0       	ldi	r24, 0x06	; 6
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    10e0:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    10e2:	29 96       	adiw	r28, 0x09	; 9
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	08 95       	ret

00001100 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1100:	af 92       	push	r10
    1102:	bf 92       	push	r11
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	8c 01       	movw	r16, r24
    1116:	eb 01       	movw	r28, r22
    1118:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    111a:	23 c0       	rjmp	.+70     	; 0x1162 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    111c:	e8 81       	ld	r30, Y
    111e:	f9 81       	ldd	r31, Y+1	; 0x01
    1120:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1122:	20 81       	ld	r18, Z
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	c7 01       	movw	r24, r14
    1128:	2e 15       	cp	r18, r14
    112a:	3f 05       	cpc	r19, r15
    112c:	08 f4       	brcc	.+2      	; 0x1130 <USB_GetNextDescriptorComp+0x30>
    112e:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1130:	e8 0f       	add	r30, r24
    1132:	f9 1f       	adc	r31, r25
    1134:	f9 83       	std	Y+1, r31	; 0x01
    1136:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1138:	f8 01       	movw	r30, r16
    113a:	20 81       	ld	r18, Z
    113c:	31 81       	ldd	r19, Z+1	; 0x01
    113e:	28 1b       	sub	r18, r24
    1140:	39 0b       	sbc	r19, r25
    1142:	31 83       	std	Z+1, r19	; 0x01
    1144:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1146:	88 81       	ld	r24, Y
    1148:	99 81       	ldd	r25, Y+1	; 0x01
    114a:	f6 01       	movw	r30, r12
    114c:	09 95       	icall
    114e:	82 30       	cpi	r24, 0x02	; 2
    1150:	41 f0       	breq	.+16     	; 0x1162 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	69 f4       	brne	.+26     	; 0x1170 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    1156:	a8 82       	st	Y, r10
    1158:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    115a:	f8 01       	movw	r30, r16
    115c:	f1 82       	std	Z+1, r15	; 0x01
    115e:	e0 82       	st	Z, r14
    1160:	07 c0       	rjmp	.+14     	; 0x1170 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1162:	f8 01       	movw	r30, r16
    1164:	e0 80       	ld	r14, Z
    1166:	f1 80       	ldd	r15, Z+1	; 0x01
    1168:	e1 14       	cp	r14, r1
    116a:	f1 04       	cpc	r15, r1
    116c:	b9 f6       	brne	.-82     	; 0x111c <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    116e:	82 e0       	ldi	r24, 0x02	; 2
}
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	cf 90       	pop	r12
    1180:	bf 90       	pop	r11
    1182:	af 90       	pop	r10
    1184:	08 95       	ret

00001186 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1186:	08 95       	ret

00001188 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1190:	c8 ee       	ldi	r28, 0xE8	; 232
    1192:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1194:	07 c0       	rjmp	.+14     	; 0x11a4 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	56 db       	rcall	.-2388   	; 0x846 <USB_Host_WaitMS>
    119a:	88 23       	and	r24, r24
    119c:	d1 f4       	brne	.+52     	; 0x11d2 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    119e:	20 97       	sbiw	r28, 0x00	; 0
    11a0:	b9 f0       	breq	.+46     	; 0x11d0 <USB_Host_WaitForIOS+0x48>
    11a2:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    11a4:	11 23       	and	r17, r17
    11a6:	29 f4       	brne	.+10     	; 0x11b2 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    11a8:	80 91 a6 00 	lds	r24, 0x00A6
    11ac:	83 ff       	sbrs	r24, 3
    11ae:	f3 cf       	rjmp	.-26     	; 0x1196 <USB_Host_WaitForIOS+0xe>
    11b0:	0d c0       	rjmp	.+26     	; 0x11cc <USB_Host_WaitForIOS+0x44>
    11b2:	11 30       	cpi	r17, 0x01	; 1
    11b4:	29 f4       	brne	.+10     	; 0x11c0 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    11b6:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    11ba:	80 ff       	sbrs	r24, 0
    11bc:	ec cf       	rjmp	.-40     	; 0x1196 <USB_Host_WaitForIOS+0xe>
    11be:	06 c0       	rjmp	.+12     	; 0x11cc <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    11c0:	12 30       	cpi	r17, 0x02	; 2
    11c2:	49 f7       	brne	.-46     	; 0x1196 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    11c4:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    11c8:	82 ff       	sbrs	r24, 2
    11ca:	e5 cf       	rjmp	.-54     	; 0x1196 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    11d0:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	08 95       	ret

000011da <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    11da:	ef 92       	push	r14
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    11e8:	e0 90 9e 00 	lds	r14, 0x009E
    11ec:	ff 24       	eor	r15, r15
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	e8 22       	and	r14, r24
    11f2:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    11f4:	c0 91 24 01 	lds	r28, 0x0124
    11f8:	d0 91 25 01 	lds	r29, 0x0125
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    11fc:	80 91 9e 00 	lds	r24, 0x009E
    1200:	81 60       	ori	r24, 0x01	; 1
    1202:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	1e db       	rcall	.-2500   	; 0x846 <USB_Host_WaitMS>
    120a:	88 23       	and	r24, r24
    120c:	09 f0       	breq	.+2      	; 0x1210 <USB_Host_SendControlRequest+0x36>
    120e:	cb c0       	rjmp	.+406    	; 0x13a6 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1210:	80 91 aa 00 	lds	r24, 0x00AA
    1214:	8f 7c       	andi	r24, 0xCF	; 207
    1216:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    121a:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    121e:	80 91 a6 00 	lds	r24, 0x00A6
    1222:	8f 7e       	andi	r24, 0xEF	; 239
    1224:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1228:	80 91 a9 00 	lds	r24, 0x00A9
    122c:	8f 7b       	andi	r24, 0xBF	; 191
    122e:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1232:	ee e1       	ldi	r30, 0x1E	; 30
    1234:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1236:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1238:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	e6 32       	cpi	r30, 0x26	; 38
    1240:	f8 07       	cpc	r31, r24
    1242:	c9 f7       	brne	.-14     	; 0x1236 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1244:	80 91 a6 00 	lds	r24, 0x00A6
    1248:	87 77       	andi	r24, 0x77	; 119
    124a:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	9b df       	rcall	.-202    	; 0x1188 <USB_Host_WaitForIOS>
    1252:	88 23       	and	r24, r24
    1254:	09 f0       	breq	.+2      	; 0x1258 <USB_Host_SendControlRequest+0x7e>
    1256:	a7 c0       	rjmp	.+334    	; 0x13a6 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1258:	80 91 a9 00 	lds	r24, 0x00A9
    125c:	80 64       	ori	r24, 0x40	; 64
    125e:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	f0 da       	rcall	.-2592   	; 0x846 <USB_Host_WaitMS>
    1266:	88 23       	and	r24, r24
    1268:	09 f0       	breq	.+2      	; 0x126c <USB_Host_SendControlRequest+0x92>
    126a:	9d c0       	rjmp	.+314    	; 0x13a6 <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    126c:	80 91 1e 01 	lds	r24, 0x011E
    1270:	87 ff       	sbrs	r24, 7
    1272:	4f c0       	rjmp	.+158    	; 0x1312 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1274:	80 91 aa 00 	lds	r24, 0x00AA
    1278:	8f 7c       	andi	r24, 0xCF	; 207
    127a:	80 61       	ori	r24, 0x10	; 16
    127c:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1280:	01 15       	cp	r16, r1
    1282:	11 05       	cpc	r17, r1
    1284:	61 f5       	brne	.+88     	; 0x12de <USB_Host_SendControlRequest+0x104>
    1286:	2d c0       	rjmp	.+90     	; 0x12e2 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1288:	80 91 a9 00 	lds	r24, 0x00A9
    128c:	8f 7b       	andi	r24, 0xBF	; 191
    128e:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	79 df       	rcall	.-270    	; 0x1188 <USB_Host_WaitForIOS>
    1296:	88 23       	and	r24, r24
    1298:	09 f0       	breq	.+2      	; 0x129c <USB_Host_SendControlRequest+0xc2>
    129a:	85 c0       	rjmp	.+266    	; 0x13a6 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    129c:	80 91 f6 00 	lds	r24, 0x00F6
    12a0:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	49 f4       	brne	.+18     	; 0x12ba <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    12a8:	c0 e0       	ldi	r28, 0x00	; 0
    12aa:	d0 e0       	ldi	r29, 0x00	; 0
    12ac:	06 c0       	rjmp	.+12     	; 0x12ba <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    12ae:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    12b2:	f8 01       	movw	r30, r16
    12b4:	81 93       	st	Z+, r24
    12b6:	8f 01       	movw	r16, r30
					DataLen--;
    12b8:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    12ba:	80 91 f6 00 	lds	r24, 0x00F6
    12be:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	11 f0       	breq	.+4      	; 0x12ca <USB_Host_SendControlRequest+0xf0>
    12c6:	20 97       	sbiw	r28, 0x00	; 0
    12c8:	91 f7       	brne	.-28     	; 0x12ae <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12ca:	80 91 a9 00 	lds	r24, 0x00A9
    12ce:	80 64       	ori	r24, 0x40	; 64
    12d0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12d4:	80 91 a6 00 	lds	r24, 0x00A6
    12d8:	8e 77       	andi	r24, 0x7E	; 126
    12da:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    12de:	20 97       	sbiw	r28, 0x00	; 0
    12e0:	99 f6       	brne	.-90     	; 0x1288 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12e2:	80 91 aa 00 	lds	r24, 0x00AA
    12e6:	8f 7c       	andi	r24, 0xCF	; 207
    12e8:	80 62       	ori	r24, 0x20	; 32
    12ea:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12ee:	80 91 a9 00 	lds	r24, 0x00A9
    12f2:	8f 7b       	andi	r24, 0xBF	; 191
    12f4:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12f8:	82 e0       	ldi	r24, 0x02	; 2
    12fa:	46 df       	rcall	.-372    	; 0x1188 <USB_Host_WaitForIOS>
    12fc:	88 23       	and	r24, r24
    12fe:	09 f0       	breq	.+2      	; 0x1302 <USB_Host_SendControlRequest+0x128>
    1300:	52 c0       	rjmp	.+164    	; 0x13a6 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1302:	80 91 a6 00 	lds	r24, 0x00A6
    1306:	8b 77       	andi	r24, 0x7B	; 123
    1308:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	3c df       	rcall	.-392    	; 0x1188 <USB_Host_WaitForIOS>
    1310:	4a c0       	rjmp	.+148    	; 0x13a6 <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1312:	01 15       	cp	r16, r1
    1314:	11 05       	cpc	r17, r1
    1316:	99 f1       	breq	.+102    	; 0x137e <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1318:	80 91 aa 00 	lds	r24, 0x00AA
    131c:	8f 7c       	andi	r24, 0xCF	; 207
    131e:	80 62       	ori	r24, 0x20	; 32
    1320:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1324:	80 91 a9 00 	lds	r24, 0x00A9
    1328:	8f 7b       	andi	r24, 0xBF	; 191
    132a:	80 93 a9 00 	sts	0x00A9, r24
    132e:	1c c0       	rjmp	.+56     	; 0x1368 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1330:	82 e0       	ldi	r24, 0x02	; 2
    1332:	2a df       	rcall	.-428    	; 0x1188 <USB_Host_WaitForIOS>
    1334:	88 23       	and	r24, r24
    1336:	b9 f5       	brne	.+110    	; 0x13a6 <USB_Host_SendControlRequest+0x1cc>
    1338:	f8 01       	movw	r30, r16
    133a:	06 c0       	rjmp	.+12     	; 0x1348 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    133c:	81 91       	ld	r24, Z+
    133e:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1340:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1344:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1346:	59 f0       	breq	.+22     	; 0x135e <USB_Host_SendControlRequest+0x184>
    1348:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    134a:	20 91 f6 00 	lds	r18, 0x00F6
    134e:	30 91 f7 00 	lds	r19, 0x00F7
    1352:	80 91 17 01 	lds	r24, 0x0117
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	28 17       	cp	r18, r24
    135a:	39 07       	cpc	r19, r25
    135c:	78 f3       	brcs	.-34     	; 0x133c <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    135e:	80 91 a6 00 	lds	r24, 0x00A6
    1362:	8b 77       	andi	r24, 0x7B	; 123
    1364:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1368:	20 97       	sbiw	r28, 0x00	; 0
    136a:	11 f7       	brne	.-60     	; 0x1330 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	0c df       	rcall	.-488    	; 0x1188 <USB_Host_WaitForIOS>
    1370:	88 23       	and	r24, r24
    1372:	c9 f4       	brne	.+50     	; 0x13a6 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1374:	80 91 a9 00 	lds	r24, 0x00A9
    1378:	80 64       	ori	r24, 0x40	; 64
    137a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    137e:	80 91 aa 00 	lds	r24, 0x00AA
    1382:	8f 7c       	andi	r24, 0xCF	; 207
    1384:	80 61       	ori	r24, 0x10	; 16
    1386:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    138a:	80 91 a9 00 	lds	r24, 0x00A9
    138e:	8f 7b       	andi	r24, 0xBF	; 191
    1390:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	f8 de       	rcall	.-528    	; 0x1188 <USB_Host_WaitForIOS>
    1398:	88 23       	and	r24, r24
    139a:	29 f4       	brne	.+10     	; 0x13a6 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    139c:	90 91 a6 00 	lds	r25, 0x00A6
    13a0:	9e 77       	andi	r25, 0x7E	; 126
    13a2:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13a6:	90 91 a9 00 	lds	r25, 0x00A9
    13aa:	90 64       	ori	r25, 0x40	; 64
    13ac:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    13b0:	e1 14       	cp	r14, r1
    13b2:	f1 04       	cpc	r15, r1
    13b4:	29 f4       	brne	.+10     	; 0x13c0 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    13b6:	90 91 9e 00 	lds	r25, 0x009E
    13ba:	9e 7f       	andi	r25, 0xFE	; 254
    13bc:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    13c6:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	08 95       	ret

000013d8 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    13d8:	1f 93       	push	r17
    13da:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    13dc:	10 92 1e 01 	sts	0x011E, r1
    13e0:	89 e0       	ldi	r24, 0x09	; 9
    13e2:	80 93 1f 01 	sts	0x011F, r24
    13e6:	10 93 20 01 	sts	0x0120, r17
    13ea:	10 92 21 01 	sts	0x0121, r1
    13ee:	10 92 23 01 	sts	0x0123, r1
    13f2:	10 92 22 01 	sts	0x0122, r1
    13f6:	10 92 25 01 	sts	0x0125, r1
    13fa:	10 92 24 01 	sts	0x0124, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13fe:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	e9 de       	rcall	.-558    	; 0x11da <USB_Host_SendControlRequest>
    1408:	88 23       	and	r24, r24
    140a:	49 f4       	brne	.+18     	; 0x141e <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    140c:	10 93 1c 01 	sts	0x011C, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1410:	11 23       	and	r17, r17
    1412:	11 f0       	breq	.+4      	; 0x1418 <USB_Host_SetDeviceConfiguration+0x40>
    1414:	9b e0       	ldi	r25, 0x0B	; 11
    1416:	01 c0       	rjmp	.+2      	; 0x141a <USB_Host_SetDeviceConfiguration+0x42>
    1418:	9a e0       	ldi	r25, 0x0A	; 10
    141a:	90 93 26 01 	sts	0x0126, r25
	}

	return ErrorCode;
}
    141e:	1f 91       	pop	r17
    1420:	08 95       	ret

00001422 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1422:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1424:	10 91 a7 00 	lds	r17, 0x00A7
    1428:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    142a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    142e:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1432:	5e da       	rcall	.-2884   	; 0x8f0 <USB_Host_ProcessNextHostState>
    1434:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1438:	1f 91       	pop	r17
    143a:	08 95       	ret

0000143c <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    143c:	90 91 c8 00 	lds	r25, 0x00C8
    1440:	95 ff       	sbrs	r25, 5
    1442:	fc cf       	rjmp	.-8      	; 0x143c <Serial_putchar>
				UDR1 = DataByte;
    1444:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	08 95       	ret

0000144e <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    144e:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1452:	87 ff       	sbrs	r24, 7
    1454:	08 c0       	rjmp	.+16     	; 0x1466 <Serial_getchar+0x18>
    1456:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    145a:	87 ff       	sbrs	r24, 7
    145c:	07 c0       	rjmp	.+14     	; 0x146c <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    145e:	20 91 ce 00 	lds	r18, 0x00CE
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	05 c0       	rjmp	.+10     	; 0x1470 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    1466:	2e ef       	ldi	r18, 0xFE	; 254
    1468:	3f ef       	ldi	r19, 0xFF	; 255
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    146c:	2f ef       	ldi	r18, 0xFF	; 255
    146e:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1470:	c9 01       	movw	r24, r18
    1472:	08 95       	ret

00001474 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1474:	fc 01       	movw	r30, r24
	if (!(Stream))
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	51 f4       	brne	.+20     	; 0x148e <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    147a:	e7 e2       	ldi	r30, 0x27	; 39
    147c:	f1 e0       	ldi	r31, 0x01	; 1
    147e:	f0 93 36 01 	sts	0x0136, r31
    1482:	e0 93 35 01 	sts	0x0135, r30
		stdout = Stream;
    1486:	f0 93 38 01 	sts	0x0138, r31
    148a:	e0 93 37 01 	sts	0x0137, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    148e:	8e e0       	ldi	r24, 0x0E	; 14
    1490:	df 01       	movw	r26, r30
    1492:	1d 92       	st	X+, r1
    1494:	8a 95       	dec	r24
    1496:	e9 f7       	brne	.-6      	; 0x1492 <Serial_CreateStream+0x1e>
    1498:	83 e0       	ldi	r24, 0x03	; 3
    149a:	83 83       	std	Z+3, r24	; 0x03
    149c:	8e e1       	ldi	r24, 0x1E	; 30
    149e:	9a e0       	ldi	r25, 0x0A	; 10
    14a0:	91 87       	std	Z+9, r25	; 0x09
    14a2:	80 87       	std	Z+8, r24	; 0x08
    14a4:	87 e2       	ldi	r24, 0x27	; 39
    14a6:	9a e0       	ldi	r25, 0x0A	; 10
    14a8:	93 87       	std	Z+11, r25	; 0x0b
    14aa:	82 87       	std	Z+10, r24	; 0x0a
}
    14ac:	08 95       	ret

000014ae <printf_P>:
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	fe 01       	movw	r30, r28
    14b8:	35 96       	adiw	r30, 0x05	; 5
    14ba:	61 91       	ld	r22, Z+
    14bc:	71 91       	ld	r23, Z+
    14be:	80 91 37 01 	lds	r24, 0x0137
    14c2:	90 91 38 01 	lds	r25, 0x0138
    14c6:	dc 01       	movw	r26, r24
    14c8:	13 96       	adiw	r26, 0x03	; 3
    14ca:	2c 91       	ld	r18, X
    14cc:	13 97       	sbiw	r26, 0x03	; 3
    14ce:	28 60       	ori	r18, 0x08	; 8
    14d0:	13 96       	adiw	r26, 0x03	; 3
    14d2:	2c 93       	st	X, r18
    14d4:	af 01       	movw	r20, r30
    14d6:	42 d0       	rcall	.+132    	; 0x155c <vfprintf>
    14d8:	e0 91 37 01 	lds	r30, 0x0137
    14dc:	f0 91 38 01 	lds	r31, 0x0138
    14e0:	23 81       	ldd	r18, Z+3	; 0x03
    14e2:	27 7f       	andi	r18, 0xF7	; 247
    14e4:	23 83       	std	Z+3, r18	; 0x03
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <puts_P>:
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	8c 01       	movw	r16, r24
    14fa:	e0 91 37 01 	lds	r30, 0x0137
    14fe:	f0 91 38 01 	lds	r31, 0x0138
    1502:	83 81       	ldd	r24, Z+3	; 0x03
    1504:	81 ff       	sbrs	r24, 1
    1506:	20 c0       	rjmp	.+64     	; 0x1548 <puts_P+0x5c>
    1508:	c0 e0       	ldi	r28, 0x00	; 0
    150a:	d0 e0       	ldi	r29, 0x00	; 0
    150c:	0c c0       	rjmp	.+24     	; 0x1526 <puts_P+0x3a>
    150e:	db 01       	movw	r26, r22
    1510:	18 96       	adiw	r26, 0x08	; 8
    1512:	ed 91       	ld	r30, X+
    1514:	fc 91       	ld	r31, X
    1516:	19 97       	sbiw	r26, 0x09	; 9
    1518:	09 95       	icall
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	11 f0       	breq	.+4      	; 0x1522 <puts_P+0x36>
    151e:	cf ef       	ldi	r28, 0xFF	; 255
    1520:	df ef       	ldi	r29, 0xFF	; 255
    1522:	0f 5f       	subi	r16, 0xFF	; 255
    1524:	1f 4f       	sbci	r17, 0xFF	; 255
    1526:	f8 01       	movw	r30, r16
    1528:	84 91       	lpm	r24, Z+
    152a:	60 91 37 01 	lds	r22, 0x0137
    152e:	70 91 38 01 	lds	r23, 0x0138
    1532:	88 23       	and	r24, r24
    1534:	61 f7       	brne	.-40     	; 0x150e <puts_P+0x22>
    1536:	db 01       	movw	r26, r22
    1538:	18 96       	adiw	r26, 0x08	; 8
    153a:	ed 91       	ld	r30, X+
    153c:	fc 91       	ld	r31, X
    153e:	19 97       	sbiw	r26, 0x09	; 9
    1540:	8a e0       	ldi	r24, 0x0A	; 10
    1542:	09 95       	icall
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	11 f0       	breq	.+4      	; 0x154c <puts_P+0x60>
    1548:	cf ef       	ldi	r28, 0xFF	; 255
    154a:	df ef       	ldi	r29, 0xFF	; 255
    154c:	ce 01       	movw	r24, r28
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	ff 90       	pop	r15
    1558:	ef 90       	pop	r14
    155a:	08 95       	ret

0000155c <vfprintf>:
    155c:	2f 92       	push	r2
    155e:	3f 92       	push	r3
    1560:	4f 92       	push	r4
    1562:	5f 92       	push	r5
    1564:	6f 92       	push	r6
    1566:	7f 92       	push	r7
    1568:	8f 92       	push	r8
    156a:	9f 92       	push	r9
    156c:	af 92       	push	r10
    156e:	bf 92       	push	r11
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	2c 97       	sbiw	r28, 0x0c	; 12
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	6c 01       	movw	r12, r24
    1592:	1b 01       	movw	r2, r22
    1594:	8a 01       	movw	r16, r20
    1596:	fc 01       	movw	r30, r24
    1598:	17 82       	std	Z+7, r1	; 0x07
    159a:	16 82       	std	Z+6, r1	; 0x06
    159c:	83 81       	ldd	r24, Z+3	; 0x03
    159e:	81 ff       	sbrs	r24, 1
    15a0:	c4 c1       	rjmp	.+904    	; 0x192a <vfprintf+0x3ce>
    15a2:	2e 01       	movw	r4, r28
    15a4:	08 94       	sec
    15a6:	41 1c       	adc	r4, r1
    15a8:	51 1c       	adc	r5, r1
    15aa:	f6 01       	movw	r30, r12
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	f1 01       	movw	r30, r2
    15b0:	93 fd       	sbrc	r25, 3
    15b2:	85 91       	lpm	r24, Z+
    15b4:	93 ff       	sbrs	r25, 3
    15b6:	81 91       	ld	r24, Z+
    15b8:	1f 01       	movw	r2, r30
    15ba:	88 23       	and	r24, r24
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <vfprintf+0x64>
    15be:	b1 c1       	rjmp	.+866    	; 0x1922 <vfprintf+0x3c6>
    15c0:	85 32       	cpi	r24, 0x25	; 37
    15c2:	39 f4       	brne	.+14     	; 0x15d2 <vfprintf+0x76>
    15c4:	93 fd       	sbrc	r25, 3
    15c6:	85 91       	lpm	r24, Z+
    15c8:	93 ff       	sbrs	r25, 3
    15ca:	81 91       	ld	r24, Z+
    15cc:	1f 01       	movw	r2, r30
    15ce:	85 32       	cpi	r24, 0x25	; 37
    15d0:	21 f4       	brne	.+8      	; 0x15da <vfprintf+0x7e>
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	b6 01       	movw	r22, r12
    15d6:	db d1       	rcall	.+950    	; 0x198e <fputc>
    15d8:	e8 cf       	rjmp	.-48     	; 0x15aa <vfprintf+0x4e>
    15da:	ee 24       	eor	r14, r14
    15dc:	ff 24       	eor	r15, r15
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	20 32       	cpi	r18, 0x20	; 32
    15e2:	b0 f4       	brcc	.+44     	; 0x1610 <vfprintf+0xb4>
    15e4:	8b 32       	cpi	r24, 0x2B	; 43
    15e6:	69 f0       	breq	.+26     	; 0x1602 <vfprintf+0xa6>
    15e8:	8c 32       	cpi	r24, 0x2C	; 44
    15ea:	28 f4       	brcc	.+10     	; 0x15f6 <vfprintf+0x9a>
    15ec:	80 32       	cpi	r24, 0x20	; 32
    15ee:	51 f0       	breq	.+20     	; 0x1604 <vfprintf+0xa8>
    15f0:	83 32       	cpi	r24, 0x23	; 35
    15f2:	71 f4       	brne	.+28     	; 0x1610 <vfprintf+0xb4>
    15f4:	0b c0       	rjmp	.+22     	; 0x160c <vfprintf+0xb0>
    15f6:	8d 32       	cpi	r24, 0x2D	; 45
    15f8:	39 f0       	breq	.+14     	; 0x1608 <vfprintf+0xac>
    15fa:	80 33       	cpi	r24, 0x30	; 48
    15fc:	49 f4       	brne	.+18     	; 0x1610 <vfprintf+0xb4>
    15fe:	21 60       	ori	r18, 0x01	; 1
    1600:	2c c0       	rjmp	.+88     	; 0x165a <vfprintf+0xfe>
    1602:	22 60       	ori	r18, 0x02	; 2
    1604:	24 60       	ori	r18, 0x04	; 4
    1606:	29 c0       	rjmp	.+82     	; 0x165a <vfprintf+0xfe>
    1608:	28 60       	ori	r18, 0x08	; 8
    160a:	27 c0       	rjmp	.+78     	; 0x165a <vfprintf+0xfe>
    160c:	20 61       	ori	r18, 0x10	; 16
    160e:	25 c0       	rjmp	.+74     	; 0x165a <vfprintf+0xfe>
    1610:	27 fd       	sbrc	r18, 7
    1612:	2c c0       	rjmp	.+88     	; 0x166c <vfprintf+0x110>
    1614:	38 2f       	mov	r19, r24
    1616:	30 53       	subi	r19, 0x30	; 48
    1618:	3a 30       	cpi	r19, 0x0A	; 10
    161a:	98 f4       	brcc	.+38     	; 0x1642 <vfprintf+0xe6>
    161c:	26 ff       	sbrs	r18, 6
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <vfprintf+0xd4>
    1620:	8e 2d       	mov	r24, r14
    1622:	88 0f       	add	r24, r24
    1624:	e8 2e       	mov	r14, r24
    1626:	ee 0c       	add	r14, r14
    1628:	ee 0c       	add	r14, r14
    162a:	e8 0e       	add	r14, r24
    162c:	e3 0e       	add	r14, r19
    162e:	15 c0       	rjmp	.+42     	; 0x165a <vfprintf+0xfe>
    1630:	8f 2d       	mov	r24, r15
    1632:	88 0f       	add	r24, r24
    1634:	f8 2e       	mov	r15, r24
    1636:	ff 0c       	add	r15, r15
    1638:	ff 0c       	add	r15, r15
    163a:	f8 0e       	add	r15, r24
    163c:	f3 0e       	add	r15, r19
    163e:	20 62       	ori	r18, 0x20	; 32
    1640:	0c c0       	rjmp	.+24     	; 0x165a <vfprintf+0xfe>
    1642:	8e 32       	cpi	r24, 0x2E	; 46
    1644:	21 f4       	brne	.+8      	; 0x164e <vfprintf+0xf2>
    1646:	26 fd       	sbrc	r18, 6
    1648:	6c c1       	rjmp	.+728    	; 0x1922 <vfprintf+0x3c6>
    164a:	20 64       	ori	r18, 0x40	; 64
    164c:	06 c0       	rjmp	.+12     	; 0x165a <vfprintf+0xfe>
    164e:	8c 36       	cpi	r24, 0x6C	; 108
    1650:	11 f4       	brne	.+4      	; 0x1656 <vfprintf+0xfa>
    1652:	20 68       	ori	r18, 0x80	; 128
    1654:	02 c0       	rjmp	.+4      	; 0x165a <vfprintf+0xfe>
    1656:	88 36       	cpi	r24, 0x68	; 104
    1658:	49 f4       	brne	.+18     	; 0x166c <vfprintf+0x110>
    165a:	f1 01       	movw	r30, r2
    165c:	93 fd       	sbrc	r25, 3
    165e:	85 91       	lpm	r24, Z+
    1660:	93 ff       	sbrs	r25, 3
    1662:	81 91       	ld	r24, Z+
    1664:	1f 01       	movw	r2, r30
    1666:	88 23       	and	r24, r24
    1668:	09 f0       	breq	.+2      	; 0x166c <vfprintf+0x110>
    166a:	ba cf       	rjmp	.-140    	; 0x15e0 <vfprintf+0x84>
    166c:	98 2f       	mov	r25, r24
    166e:	95 54       	subi	r25, 0x45	; 69
    1670:	93 30       	cpi	r25, 0x03	; 3
    1672:	18 f0       	brcs	.+6      	; 0x167a <vfprintf+0x11e>
    1674:	90 52       	subi	r25, 0x20	; 32
    1676:	93 30       	cpi	r25, 0x03	; 3
    1678:	28 f4       	brcc	.+10     	; 0x1684 <vfprintf+0x128>
    167a:	0c 5f       	subi	r16, 0xFC	; 252
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	ff e3       	ldi	r31, 0x3F	; 63
    1680:	f9 83       	std	Y+1, r31	; 0x01
    1682:	0d c0       	rjmp	.+26     	; 0x169e <vfprintf+0x142>
    1684:	83 36       	cpi	r24, 0x63	; 99
    1686:	31 f0       	breq	.+12     	; 0x1694 <vfprintf+0x138>
    1688:	83 37       	cpi	r24, 0x73	; 115
    168a:	71 f0       	breq	.+28     	; 0x16a8 <vfprintf+0x14c>
    168c:	83 35       	cpi	r24, 0x53	; 83
    168e:	09 f0       	breq	.+2      	; 0x1692 <vfprintf+0x136>
    1690:	5c c0       	rjmp	.+184    	; 0x174a <vfprintf+0x1ee>
    1692:	21 c0       	rjmp	.+66     	; 0x16d6 <vfprintf+0x17a>
    1694:	f8 01       	movw	r30, r16
    1696:	80 81       	ld	r24, Z
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	0e 5f       	subi	r16, 0xFE	; 254
    169c:	1f 4f       	sbci	r17, 0xFF	; 255
    169e:	42 01       	movw	r8, r4
    16a0:	71 e0       	ldi	r23, 0x01	; 1
    16a2:	a7 2e       	mov	r10, r23
    16a4:	b1 2c       	mov	r11, r1
    16a6:	15 c0       	rjmp	.+42     	; 0x16d2 <vfprintf+0x176>
    16a8:	62 e0       	ldi	r22, 0x02	; 2
    16aa:	66 2e       	mov	r6, r22
    16ac:	71 2c       	mov	r7, r1
    16ae:	60 0e       	add	r6, r16
    16b0:	71 1e       	adc	r7, r17
    16b2:	f8 01       	movw	r30, r16
    16b4:	80 80       	ld	r8, Z
    16b6:	91 80       	ldd	r9, Z+1	; 0x01
    16b8:	26 ff       	sbrs	r18, 6
    16ba:	03 c0       	rjmp	.+6      	; 0x16c2 <vfprintf+0x166>
    16bc:	6e 2d       	mov	r22, r14
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <vfprintf+0x16a>
    16c2:	6f ef       	ldi	r22, 0xFF	; 255
    16c4:	7f ef       	ldi	r23, 0xFF	; 255
    16c6:	c4 01       	movw	r24, r8
    16c8:	2c 87       	std	Y+12, r18	; 0x0c
    16ca:	56 d1       	rcall	.+684    	; 0x1978 <strnlen>
    16cc:	5c 01       	movw	r10, r24
    16ce:	83 01       	movw	r16, r6
    16d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    16d2:	2f 77       	andi	r18, 0x7F	; 127
    16d4:	16 c0       	rjmp	.+44     	; 0x1702 <vfprintf+0x1a6>
    16d6:	52 e0       	ldi	r21, 0x02	; 2
    16d8:	65 2e       	mov	r6, r21
    16da:	71 2c       	mov	r7, r1
    16dc:	60 0e       	add	r6, r16
    16de:	71 1e       	adc	r7, r17
    16e0:	f8 01       	movw	r30, r16
    16e2:	80 80       	ld	r8, Z
    16e4:	91 80       	ldd	r9, Z+1	; 0x01
    16e6:	26 ff       	sbrs	r18, 6
    16e8:	03 c0       	rjmp	.+6      	; 0x16f0 <vfprintf+0x194>
    16ea:	6e 2d       	mov	r22, r14
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <vfprintf+0x198>
    16f0:	6f ef       	ldi	r22, 0xFF	; 255
    16f2:	7f ef       	ldi	r23, 0xFF	; 255
    16f4:	c4 01       	movw	r24, r8
    16f6:	2c 87       	std	Y+12, r18	; 0x0c
    16f8:	34 d1       	rcall	.+616    	; 0x1962 <strnlen_P>
    16fa:	5c 01       	movw	r10, r24
    16fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    16fe:	20 68       	ori	r18, 0x80	; 128
    1700:	83 01       	movw	r16, r6
    1702:	23 fd       	sbrc	r18, 3
    1704:	1e c0       	rjmp	.+60     	; 0x1742 <vfprintf+0x1e6>
    1706:	07 c0       	rjmp	.+14     	; 0x1716 <vfprintf+0x1ba>
    1708:	80 e2       	ldi	r24, 0x20	; 32
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	b6 01       	movw	r22, r12
    170e:	2c 87       	std	Y+12, r18	; 0x0c
    1710:	3e d1       	rcall	.+636    	; 0x198e <fputc>
    1712:	fa 94       	dec	r15
    1714:	2c 85       	ldd	r18, Y+12	; 0x0c
    1716:	8f 2d       	mov	r24, r15
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a8 16       	cp	r10, r24
    171c:	b9 06       	cpc	r11, r25
    171e:	a0 f3       	brcs	.-24     	; 0x1708 <vfprintf+0x1ac>
    1720:	10 c0       	rjmp	.+32     	; 0x1742 <vfprintf+0x1e6>
    1722:	f4 01       	movw	r30, r8
    1724:	27 fd       	sbrc	r18, 7
    1726:	85 91       	lpm	r24, Z+
    1728:	27 ff       	sbrs	r18, 7
    172a:	81 91       	ld	r24, Z+
    172c:	4f 01       	movw	r8, r30
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	b6 01       	movw	r22, r12
    1732:	2c 87       	std	Y+12, r18	; 0x0c
    1734:	2c d1       	rcall	.+600    	; 0x198e <fputc>
    1736:	2c 85       	ldd	r18, Y+12	; 0x0c
    1738:	f1 10       	cpse	r15, r1
    173a:	fa 94       	dec	r15
    173c:	08 94       	sec
    173e:	a1 08       	sbc	r10, r1
    1740:	b1 08       	sbc	r11, r1
    1742:	a1 14       	cp	r10, r1
    1744:	b1 04       	cpc	r11, r1
    1746:	69 f7       	brne	.-38     	; 0x1722 <vfprintf+0x1c6>
    1748:	e9 c0       	rjmp	.+466    	; 0x191c <vfprintf+0x3c0>
    174a:	84 36       	cpi	r24, 0x64	; 100
    174c:	11 f0       	breq	.+4      	; 0x1752 <vfprintf+0x1f6>
    174e:	89 36       	cpi	r24, 0x69	; 105
    1750:	41 f5       	brne	.+80     	; 0x17a2 <vfprintf+0x246>
    1752:	27 ff       	sbrs	r18, 7
    1754:	08 c0       	rjmp	.+16     	; 0x1766 <vfprintf+0x20a>
    1756:	f8 01       	movw	r30, r16
    1758:	60 81       	ld	r22, Z
    175a:	71 81       	ldd	r23, Z+1	; 0x01
    175c:	82 81       	ldd	r24, Z+2	; 0x02
    175e:	93 81       	ldd	r25, Z+3	; 0x03
    1760:	0c 5f       	subi	r16, 0xFC	; 252
    1762:	1f 4f       	sbci	r17, 0xFF	; 255
    1764:	09 c0       	rjmp	.+18     	; 0x1778 <vfprintf+0x21c>
    1766:	f8 01       	movw	r30, r16
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	88 27       	eor	r24, r24
    176e:	77 fd       	sbrc	r23, 7
    1770:	80 95       	com	r24
    1772:	98 2f       	mov	r25, r24
    1774:	0e 5f       	subi	r16, 0xFE	; 254
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	4f e6       	ldi	r20, 0x6F	; 111
    177a:	b4 2e       	mov	r11, r20
    177c:	b2 22       	and	r11, r18
    177e:	97 ff       	sbrs	r25, 7
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <vfprintf+0x238>
    1782:	90 95       	com	r25
    1784:	80 95       	com	r24
    1786:	70 95       	com	r23
    1788:	61 95       	neg	r22
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	8f 4f       	sbci	r24, 0xFF	; 255
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
    1790:	f0 e8       	ldi	r31, 0x80	; 128
    1792:	bf 2a       	or	r11, r31
    1794:	a2 01       	movw	r20, r4
    1796:	2a e0       	ldi	r18, 0x0A	; 10
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	25 d1       	rcall	.+586    	; 0x19e6 <__ultoa_invert>
    179c:	78 2e       	mov	r7, r24
    179e:	74 18       	sub	r7, r4
    17a0:	44 c0       	rjmp	.+136    	; 0x182a <vfprintf+0x2ce>
    17a2:	85 37       	cpi	r24, 0x75	; 117
    17a4:	31 f4       	brne	.+12     	; 0x17b2 <vfprintf+0x256>
    17a6:	3f ee       	ldi	r19, 0xEF	; 239
    17a8:	b3 2e       	mov	r11, r19
    17aa:	b2 22       	and	r11, r18
    17ac:	2a e0       	ldi	r18, 0x0A	; 10
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	25 c0       	rjmp	.+74     	; 0x17fc <vfprintf+0x2a0>
    17b2:	99 ef       	ldi	r25, 0xF9	; 249
    17b4:	b9 2e       	mov	r11, r25
    17b6:	b2 22       	and	r11, r18
    17b8:	8f 36       	cpi	r24, 0x6F	; 111
    17ba:	c1 f0       	breq	.+48     	; 0x17ec <vfprintf+0x290>
    17bc:	80 37       	cpi	r24, 0x70	; 112
    17be:	20 f4       	brcc	.+8      	; 0x17c8 <vfprintf+0x26c>
    17c0:	88 35       	cpi	r24, 0x58	; 88
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <vfprintf+0x26a>
    17c4:	ae c0       	rjmp	.+348    	; 0x1922 <vfprintf+0x3c6>
    17c6:	0d c0       	rjmp	.+26     	; 0x17e2 <vfprintf+0x286>
    17c8:	80 37       	cpi	r24, 0x70	; 112
    17ca:	21 f0       	breq	.+8      	; 0x17d4 <vfprintf+0x278>
    17cc:	88 37       	cpi	r24, 0x78	; 120
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <vfprintf+0x276>
    17d0:	a8 c0       	rjmp	.+336    	; 0x1922 <vfprintf+0x3c6>
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <vfprintf+0x27c>
    17d4:	20 e1       	ldi	r18, 0x10	; 16
    17d6:	b2 2a       	or	r11, r18
    17d8:	b4 fe       	sbrs	r11, 4
    17da:	0b c0       	rjmp	.+22     	; 0x17f2 <vfprintf+0x296>
    17dc:	84 e0       	ldi	r24, 0x04	; 4
    17de:	b8 2a       	or	r11, r24
    17e0:	08 c0       	rjmp	.+16     	; 0x17f2 <vfprintf+0x296>
    17e2:	b4 fe       	sbrs	r11, 4
    17e4:	09 c0       	rjmp	.+18     	; 0x17f8 <vfprintf+0x29c>
    17e6:	e6 e0       	ldi	r30, 0x06	; 6
    17e8:	be 2a       	or	r11, r30
    17ea:	06 c0       	rjmp	.+12     	; 0x17f8 <vfprintf+0x29c>
    17ec:	28 e0       	ldi	r18, 0x08	; 8
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	05 c0       	rjmp	.+10     	; 0x17fc <vfprintf+0x2a0>
    17f2:	20 e1       	ldi	r18, 0x10	; 16
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <vfprintf+0x2a0>
    17f8:	20 e1       	ldi	r18, 0x10	; 16
    17fa:	32 e0       	ldi	r19, 0x02	; 2
    17fc:	b7 fe       	sbrs	r11, 7
    17fe:	08 c0       	rjmp	.+16     	; 0x1810 <vfprintf+0x2b4>
    1800:	f8 01       	movw	r30, r16
    1802:	60 81       	ld	r22, Z
    1804:	71 81       	ldd	r23, Z+1	; 0x01
    1806:	82 81       	ldd	r24, Z+2	; 0x02
    1808:	93 81       	ldd	r25, Z+3	; 0x03
    180a:	0c 5f       	subi	r16, 0xFC	; 252
    180c:	1f 4f       	sbci	r17, 0xFF	; 255
    180e:	07 c0       	rjmp	.+14     	; 0x181e <vfprintf+0x2c2>
    1810:	f8 01       	movw	r30, r16
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 5f       	subi	r16, 0xFE	; 254
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	a2 01       	movw	r20, r4
    1820:	e2 d0       	rcall	.+452    	; 0x19e6 <__ultoa_invert>
    1822:	78 2e       	mov	r7, r24
    1824:	74 18       	sub	r7, r4
    1826:	ff e7       	ldi	r31, 0x7F	; 127
    1828:	bf 22       	and	r11, r31
    182a:	b6 fe       	sbrs	r11, 6
    182c:	0b c0       	rjmp	.+22     	; 0x1844 <vfprintf+0x2e8>
    182e:	2e ef       	ldi	r18, 0xFE	; 254
    1830:	b2 22       	and	r11, r18
    1832:	7e 14       	cp	r7, r14
    1834:	38 f4       	brcc	.+14     	; 0x1844 <vfprintf+0x2e8>
    1836:	b4 fe       	sbrs	r11, 4
    1838:	07 c0       	rjmp	.+14     	; 0x1848 <vfprintf+0x2ec>
    183a:	b2 fc       	sbrc	r11, 2
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <vfprintf+0x2ec>
    183e:	8f ee       	ldi	r24, 0xEF	; 239
    1840:	b8 22       	and	r11, r24
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <vfprintf+0x2ec>
    1844:	a7 2c       	mov	r10, r7
    1846:	01 c0       	rjmp	.+2      	; 0x184a <vfprintf+0x2ee>
    1848:	ae 2c       	mov	r10, r14
    184a:	8b 2d       	mov	r24, r11
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	b4 fe       	sbrs	r11, 4
    1850:	0d c0       	rjmp	.+26     	; 0x186c <vfprintf+0x310>
    1852:	fe 01       	movw	r30, r28
    1854:	e7 0d       	add	r30, r7
    1856:	f1 1d       	adc	r31, r1
    1858:	20 81       	ld	r18, Z
    185a:	20 33       	cpi	r18, 0x30	; 48
    185c:	19 f4       	brne	.+6      	; 0x1864 <vfprintf+0x308>
    185e:	e9 ee       	ldi	r30, 0xE9	; 233
    1860:	be 22       	and	r11, r30
    1862:	09 c0       	rjmp	.+18     	; 0x1876 <vfprintf+0x31a>
    1864:	a3 94       	inc	r10
    1866:	b2 fe       	sbrs	r11, 2
    1868:	06 c0       	rjmp	.+12     	; 0x1876 <vfprintf+0x31a>
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <vfprintf+0x318>
    186c:	86 78       	andi	r24, 0x86	; 134
    186e:	90 70       	andi	r25, 0x00	; 0
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	09 f0       	breq	.+2      	; 0x1876 <vfprintf+0x31a>
    1874:	a3 94       	inc	r10
    1876:	8b 2c       	mov	r8, r11
    1878:	99 24       	eor	r9, r9
    187a:	b3 fc       	sbrc	r11, 3
    187c:	13 c0       	rjmp	.+38     	; 0x18a4 <vfprintf+0x348>
    187e:	b0 fe       	sbrs	r11, 0
    1880:	0e c0       	rjmp	.+28     	; 0x189e <vfprintf+0x342>
    1882:	af 14       	cp	r10, r15
    1884:	28 f4       	brcc	.+10     	; 0x1890 <vfprintf+0x334>
    1886:	e7 2c       	mov	r14, r7
    1888:	ef 0c       	add	r14, r15
    188a:	ea 18       	sub	r14, r10
    188c:	af 2c       	mov	r10, r15
    188e:	07 c0       	rjmp	.+14     	; 0x189e <vfprintf+0x342>
    1890:	e7 2c       	mov	r14, r7
    1892:	05 c0       	rjmp	.+10     	; 0x189e <vfprintf+0x342>
    1894:	80 e2       	ldi	r24, 0x20	; 32
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	b6 01       	movw	r22, r12
    189a:	79 d0       	rcall	.+242    	; 0x198e <fputc>
    189c:	a3 94       	inc	r10
    189e:	af 14       	cp	r10, r15
    18a0:	c8 f3       	brcs	.-14     	; 0x1894 <vfprintf+0x338>
    18a2:	04 c0       	rjmp	.+8      	; 0x18ac <vfprintf+0x350>
    18a4:	af 14       	cp	r10, r15
    18a6:	10 f4       	brcc	.+4      	; 0x18ac <vfprintf+0x350>
    18a8:	fa 18       	sub	r15, r10
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <vfprintf+0x352>
    18ac:	ff 24       	eor	r15, r15
    18ae:	84 fe       	sbrs	r8, 4
    18b0:	0e c0       	rjmp	.+28     	; 0x18ce <vfprintf+0x372>
    18b2:	80 e3       	ldi	r24, 0x30	; 48
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	b6 01       	movw	r22, r12
    18b8:	6a d0       	rcall	.+212    	; 0x198e <fputc>
    18ba:	82 fe       	sbrs	r8, 2
    18bc:	1d c0       	rjmp	.+58     	; 0x18f8 <vfprintf+0x39c>
    18be:	81 fe       	sbrs	r8, 1
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <vfprintf+0x36c>
    18c2:	88 e5       	ldi	r24, 0x58	; 88
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	10 c0       	rjmp	.+32     	; 0x18e8 <vfprintf+0x38c>
    18c8:	88 e7       	ldi	r24, 0x78	; 120
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0d c0       	rjmp	.+26     	; 0x18e8 <vfprintf+0x38c>
    18ce:	c4 01       	movw	r24, r8
    18d0:	86 78       	andi	r24, 0x86	; 134
    18d2:	90 70       	andi	r25, 0x00	; 0
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	81 f0       	breq	.+32     	; 0x18f8 <vfprintf+0x39c>
    18d8:	81 fc       	sbrc	r8, 1
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <vfprintf+0x384>
    18dc:	80 e2       	ldi	r24, 0x20	; 32
    18de:	01 c0       	rjmp	.+2      	; 0x18e2 <vfprintf+0x386>
    18e0:	8b e2       	ldi	r24, 0x2B	; 43
    18e2:	b7 fc       	sbrc	r11, 7
    18e4:	8d e2       	ldi	r24, 0x2D	; 45
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	b6 01       	movw	r22, r12
    18ea:	51 d0       	rcall	.+162    	; 0x198e <fputc>
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <vfprintf+0x39c>
    18ee:	80 e3       	ldi	r24, 0x30	; 48
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	b6 01       	movw	r22, r12
    18f4:	4c d0       	rcall	.+152    	; 0x198e <fputc>
    18f6:	ea 94       	dec	r14
    18f8:	7e 14       	cp	r7, r14
    18fa:	c8 f3       	brcs	.-14     	; 0x18ee <vfprintf+0x392>
    18fc:	7a 94       	dec	r7
    18fe:	f2 01       	movw	r30, r4
    1900:	e7 0d       	add	r30, r7
    1902:	f1 1d       	adc	r31, r1
    1904:	80 81       	ld	r24, Z
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	b6 01       	movw	r22, r12
    190a:	41 d0       	rcall	.+130    	; 0x198e <fputc>
    190c:	77 20       	and	r7, r7
    190e:	b1 f7       	brne	.-20     	; 0x18fc <vfprintf+0x3a0>
    1910:	05 c0       	rjmp	.+10     	; 0x191c <vfprintf+0x3c0>
    1912:	80 e2       	ldi	r24, 0x20	; 32
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	b6 01       	movw	r22, r12
    1918:	3a d0       	rcall	.+116    	; 0x198e <fputc>
    191a:	fa 94       	dec	r15
    191c:	ff 20       	and	r15, r15
    191e:	c9 f7       	brne	.-14     	; 0x1912 <vfprintf+0x3b6>
    1920:	44 ce       	rjmp	.-888    	; 0x15aa <vfprintf+0x4e>
    1922:	f6 01       	movw	r30, r12
    1924:	26 81       	ldd	r18, Z+6	; 0x06
    1926:	37 81       	ldd	r19, Z+7	; 0x07
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x3d2>
    192a:	2f ef       	ldi	r18, 0xFF	; 255
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	c9 01       	movw	r24, r18
    1930:	2c 96       	adiw	r28, 0x0c	; 12
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	bf 90       	pop	r11
    194e:	af 90       	pop	r10
    1950:	9f 90       	pop	r9
    1952:	8f 90       	pop	r8
    1954:	7f 90       	pop	r7
    1956:	6f 90       	pop	r6
    1958:	5f 90       	pop	r5
    195a:	4f 90       	pop	r4
    195c:	3f 90       	pop	r3
    195e:	2f 90       	pop	r2
    1960:	08 95       	ret

00001962 <strnlen_P>:
    1962:	fc 01       	movw	r30, r24
    1964:	05 90       	lpm	r0, Z+
    1966:	61 50       	subi	r22, 0x01	; 1
    1968:	70 40       	sbci	r23, 0x00	; 0
    196a:	01 10       	cpse	r0, r1
    196c:	d8 f7       	brcc	.-10     	; 0x1964 <strnlen_P+0x2>
    196e:	80 95       	com	r24
    1970:	90 95       	com	r25
    1972:	8e 0f       	add	r24, r30
    1974:	9f 1f       	adc	r25, r31
    1976:	08 95       	ret

00001978 <strnlen>:
    1978:	fc 01       	movw	r30, r24
    197a:	61 50       	subi	r22, 0x01	; 1
    197c:	70 40       	sbci	r23, 0x00	; 0
    197e:	01 90       	ld	r0, Z+
    1980:	01 10       	cpse	r0, r1
    1982:	d8 f7       	brcc	.-10     	; 0x197a <strnlen+0x2>
    1984:	80 95       	com	r24
    1986:	90 95       	com	r25
    1988:	8e 0f       	add	r24, r30
    198a:	9f 1f       	adc	r25, r31
    198c:	08 95       	ret

0000198e <fputc>:
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	8c 01       	movw	r16, r24
    1998:	eb 01       	movw	r28, r22
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	81 ff       	sbrs	r24, 1
    199e:	1b c0       	rjmp	.+54     	; 0x19d6 <fputc+0x48>
    19a0:	82 ff       	sbrs	r24, 2
    19a2:	0d c0       	rjmp	.+26     	; 0x19be <fputc+0x30>
    19a4:	2e 81       	ldd	r18, Y+6	; 0x06
    19a6:	3f 81       	ldd	r19, Y+7	; 0x07
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	9d 81       	ldd	r25, Y+5	; 0x05
    19ac:	28 17       	cp	r18, r24
    19ae:	39 07       	cpc	r19, r25
    19b0:	64 f4       	brge	.+24     	; 0x19ca <fputc+0x3c>
    19b2:	e8 81       	ld	r30, Y
    19b4:	f9 81       	ldd	r31, Y+1	; 0x01
    19b6:	01 93       	st	Z+, r16
    19b8:	f9 83       	std	Y+1, r31	; 0x01
    19ba:	e8 83       	st	Y, r30
    19bc:	06 c0       	rjmp	.+12     	; 0x19ca <fputc+0x3c>
    19be:	e8 85       	ldd	r30, Y+8	; 0x08
    19c0:	f9 85       	ldd	r31, Y+9	; 0x09
    19c2:	80 2f       	mov	r24, r16
    19c4:	09 95       	icall
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	31 f4       	brne	.+12     	; 0x19d6 <fputc+0x48>
    19ca:	8e 81       	ldd	r24, Y+6	; 0x06
    19cc:	9f 81       	ldd	r25, Y+7	; 0x07
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	9f 83       	std	Y+7, r25	; 0x07
    19d2:	8e 83       	std	Y+6, r24	; 0x06
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <fputc+0x4c>
    19d6:	0f ef       	ldi	r16, 0xFF	; 255
    19d8:	1f ef       	ldi	r17, 0xFF	; 255
    19da:	c8 01       	movw	r24, r16
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	08 95       	ret

000019e6 <__ultoa_invert>:
    19e6:	fa 01       	movw	r30, r20
    19e8:	aa 27       	eor	r26, r26
    19ea:	28 30       	cpi	r18, 0x08	; 8
    19ec:	51 f1       	breq	.+84     	; 0x1a42 <__ultoa_invert+0x5c>
    19ee:	20 31       	cpi	r18, 0x10	; 16
    19f0:	81 f1       	breq	.+96     	; 0x1a52 <__ultoa_invert+0x6c>
    19f2:	e8 94       	clt
    19f4:	6f 93       	push	r22
    19f6:	6e 7f       	andi	r22, 0xFE	; 254
    19f8:	6e 5f       	subi	r22, 0xFE	; 254
    19fa:	7f 4f       	sbci	r23, 0xFF	; 255
    19fc:	8f 4f       	sbci	r24, 0xFF	; 255
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	af 4f       	sbci	r26, 0xFF	; 255
    1a02:	b1 e0       	ldi	r27, 0x01	; 1
    1a04:	3e d0       	rcall	.+124    	; 0x1a82 <__ultoa_invert+0x9c>
    1a06:	b4 e0       	ldi	r27, 0x04	; 4
    1a08:	3c d0       	rcall	.+120    	; 0x1a82 <__ultoa_invert+0x9c>
    1a0a:	67 0f       	add	r22, r23
    1a0c:	78 1f       	adc	r23, r24
    1a0e:	89 1f       	adc	r24, r25
    1a10:	9a 1f       	adc	r25, r26
    1a12:	a1 1d       	adc	r26, r1
    1a14:	68 0f       	add	r22, r24
    1a16:	79 1f       	adc	r23, r25
    1a18:	8a 1f       	adc	r24, r26
    1a1a:	91 1d       	adc	r25, r1
    1a1c:	a1 1d       	adc	r26, r1
    1a1e:	6a 0f       	add	r22, r26
    1a20:	71 1d       	adc	r23, r1
    1a22:	81 1d       	adc	r24, r1
    1a24:	91 1d       	adc	r25, r1
    1a26:	a1 1d       	adc	r26, r1
    1a28:	20 d0       	rcall	.+64     	; 0x1a6a <__ultoa_invert+0x84>
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <__ultoa_invert+0x48>
    1a2c:	68 94       	set
    1a2e:	3f 91       	pop	r19
    1a30:	2a e0       	ldi	r18, 0x0A	; 10
    1a32:	26 9f       	mul	r18, r22
    1a34:	11 24       	eor	r1, r1
    1a36:	30 19       	sub	r19, r0
    1a38:	30 5d       	subi	r19, 0xD0	; 208
    1a3a:	31 93       	st	Z+, r19
    1a3c:	de f6       	brtc	.-74     	; 0x19f4 <__ultoa_invert+0xe>
    1a3e:	cf 01       	movw	r24, r30
    1a40:	08 95       	ret
    1a42:	46 2f       	mov	r20, r22
    1a44:	47 70       	andi	r20, 0x07	; 7
    1a46:	40 5d       	subi	r20, 0xD0	; 208
    1a48:	41 93       	st	Z+, r20
    1a4a:	b3 e0       	ldi	r27, 0x03	; 3
    1a4c:	0f d0       	rcall	.+30     	; 0x1a6c <__ultoa_invert+0x86>
    1a4e:	c9 f7       	brne	.-14     	; 0x1a42 <__ultoa_invert+0x5c>
    1a50:	f6 cf       	rjmp	.-20     	; 0x1a3e <__ultoa_invert+0x58>
    1a52:	46 2f       	mov	r20, r22
    1a54:	4f 70       	andi	r20, 0x0F	; 15
    1a56:	40 5d       	subi	r20, 0xD0	; 208
    1a58:	4a 33       	cpi	r20, 0x3A	; 58
    1a5a:	18 f0       	brcs	.+6      	; 0x1a62 <__ultoa_invert+0x7c>
    1a5c:	49 5d       	subi	r20, 0xD9	; 217
    1a5e:	31 fd       	sbrc	r19, 1
    1a60:	40 52       	subi	r20, 0x20	; 32
    1a62:	41 93       	st	Z+, r20
    1a64:	02 d0       	rcall	.+4      	; 0x1a6a <__ultoa_invert+0x84>
    1a66:	a9 f7       	brne	.-22     	; 0x1a52 <__ultoa_invert+0x6c>
    1a68:	ea cf       	rjmp	.-44     	; 0x1a3e <__ultoa_invert+0x58>
    1a6a:	b4 e0       	ldi	r27, 0x04	; 4
    1a6c:	a6 95       	lsr	r26
    1a6e:	97 95       	ror	r25
    1a70:	87 95       	ror	r24
    1a72:	77 95       	ror	r23
    1a74:	67 95       	ror	r22
    1a76:	ba 95       	dec	r27
    1a78:	c9 f7       	brne	.-14     	; 0x1a6c <__ultoa_invert+0x86>
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	61 05       	cpc	r22, r1
    1a7e:	71 05       	cpc	r23, r1
    1a80:	08 95       	ret
    1a82:	9b 01       	movw	r18, r22
    1a84:	ac 01       	movw	r20, r24
    1a86:	0a 2e       	mov	r0, r26
    1a88:	06 94       	lsr	r0
    1a8a:	57 95       	ror	r21
    1a8c:	47 95       	ror	r20
    1a8e:	37 95       	ror	r19
    1a90:	27 95       	ror	r18
    1a92:	ba 95       	dec	r27
    1a94:	c9 f7       	brne	.-14     	; 0x1a88 <__ultoa_invert+0xa2>
    1a96:	62 0f       	add	r22, r18
    1a98:	73 1f       	adc	r23, r19
    1a9a:	84 1f       	adc	r24, r20
    1a9c:	95 1f       	adc	r25, r21
    1a9e:	a0 1d       	adc	r26, r0
    1aa0:	08 95       	ret

00001aa2 <_exit>:
    1aa2:	f8 94       	cli

00001aa4 <__stop_program>:
    1aa4:	ff cf       	rjmp	.-2      	; 0x1aa4 <__stop_program>
