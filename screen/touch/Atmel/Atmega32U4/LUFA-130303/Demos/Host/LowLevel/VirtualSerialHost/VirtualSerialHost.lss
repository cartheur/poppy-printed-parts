
VirtualSerialHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001a1e  00001ab2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800120  00800120  00001ad2  2**0
                  ALLOC
  3 .stab         000021a8  00000000  00000000  00001ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7e  00000000  00000000  00003c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000350  00000000  00000000  000049fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000084d  00000000  00000000  00004d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004ff6  00000000  00000000  00005597  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016bf  00000000  00000000  0000a58d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000457c  00000000  00000000  0000bc4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000500  00000000  00000000  000101c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000026a6  00000000  00000000  000106c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002d8e  00000000  00000000  00012d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000a03  00000000  00000000  00015afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000438  00000000  00000000  000164ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	47 c1       	rjmp	.+654    	; 0x290 <__ctors_end>
       2:	00 00       	nop
       4:	63 c1       	rjmp	.+710    	; 0x2cc <__bad_interrupt>
       6:	00 00       	nop
       8:	61 c1       	rjmp	.+706    	; 0x2cc <__bad_interrupt>
       a:	00 00       	nop
       c:	5f c1       	rjmp	.+702    	; 0x2cc <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c1       	rjmp	.+698    	; 0x2cc <__bad_interrupt>
      12:	00 00       	nop
      14:	5b c1       	rjmp	.+694    	; 0x2cc <__bad_interrupt>
      16:	00 00       	nop
      18:	59 c1       	rjmp	.+690    	; 0x2cc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	57 c1       	rjmp	.+686    	; 0x2cc <__bad_interrupt>
      1e:	00 00       	nop
      20:	55 c1       	rjmp	.+682    	; 0x2cc <__bad_interrupt>
      22:	00 00       	nop
      24:	53 c1       	rjmp	.+678    	; 0x2cc <__bad_interrupt>
      26:	00 00       	nop
      28:	3d c7       	rjmp	.+3706   	; 0xea4 <__vector_10>
      2a:	00 00       	nop
      2c:	4f c1       	rjmp	.+670    	; 0x2cc <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c1       	rjmp	.+666    	; 0x2cc <__bad_interrupt>
      32:	00 00       	nop
      34:	4b c1       	rjmp	.+662    	; 0x2cc <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c1       	rjmp	.+658    	; 0x2cc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	47 c1       	rjmp	.+654    	; 0x2cc <__bad_interrupt>
      3e:	00 00       	nop
      40:	45 c1       	rjmp	.+650    	; 0x2cc <__bad_interrupt>
      42:	00 00       	nop
      44:	43 c1       	rjmp	.+646    	; 0x2cc <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c1       	rjmp	.+642    	; 0x2cc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3f c1       	rjmp	.+638    	; 0x2cc <__bad_interrupt>
      4e:	00 00       	nop
      50:	3d c1       	rjmp	.+634    	; 0x2cc <__bad_interrupt>
      52:	00 00       	nop
      54:	3b c1       	rjmp	.+630    	; 0x2cc <__bad_interrupt>
      56:	00 00       	nop
      58:	39 c1       	rjmp	.+626    	; 0x2cc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	37 c1       	rjmp	.+622    	; 0x2cc <__bad_interrupt>
      5e:	00 00       	nop
      60:	35 c1       	rjmp	.+618    	; 0x2cc <__bad_interrupt>
      62:	00 00       	nop
      64:	33 c1       	rjmp	.+614    	; 0x2cc <__bad_interrupt>
      66:	00 00       	nop
      68:	31 c1       	rjmp	.+610    	; 0x2cc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2f c1       	rjmp	.+606    	; 0x2cc <__bad_interrupt>
      6e:	00 00       	nop
      70:	2d c1       	rjmp	.+602    	; 0x2cc <__bad_interrupt>
      72:	00 00       	nop
      74:	2b c1       	rjmp	.+598    	; 0x2cc <__bad_interrupt>
      76:	00 00       	nop
      78:	29 c1       	rjmp	.+594    	; 0x2cc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	27 c1       	rjmp	.+590    	; 0x2cc <__bad_interrupt>
      7e:	00 00       	nop
      80:	25 c1       	rjmp	.+586    	; 0x2cc <__bad_interrupt>
      82:	00 00       	nop
      84:	23 c1       	rjmp	.+582    	; 0x2cc <__bad_interrupt>
      86:	00 00       	nop
      88:	21 c1       	rjmp	.+578    	; 0x2cc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1f c1       	rjmp	.+574    	; 0x2cc <__bad_interrupt>
      8e:	00 00       	nop
      90:	1d c1       	rjmp	.+570    	; 0x2cc <__bad_interrupt>
      92:	00 00       	nop
      94:	1b c1       	rjmp	.+566    	; 0x2cc <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4296>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4289>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4284>:
     11d:	43 44 43 20 44 65 76 69 63 65 20 45 6e 75 6d 65     CDC Device Enume
     12d:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000136 <__c.4282>:
     136:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     146:	6f 72 20 28 53 65 74 20 4c 69 6e 65 20 45 6e 63     or (Set Line Enc
     156:	6f 64 69 6e 67 29 2e 0d 0a 20 2d 2d 20 45 72 72     oding)... -- Err
     166:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     176:	37 6d 00                                            7m.

00000179 <__c.4278>:
     179:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     189:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     199:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1a9:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1b9:	37 6d 00                                            7m.

000001bc <__c.4276>:
     1bc:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1cc:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001d6 <__c.4274>:
     1d6:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1e6:	69 63 65 2e 0d 0a 00                                ice....

000001ed <__c.4272>:
     1ed:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1fd:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     20d:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000217 <__c.4269>:
     217:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     227:	61 74 61 2e 0d 0a 00                                ata....

0000022e <__c.4264>:
     22e:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     23e:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     24e:	00                                                  .

0000024f <__c.4259>:
     24f:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     25f:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000026c <__c.4250>:
     26c:	1b 5b 33 36 6d 43 44 43 20 48 6f 73 74 20 44 65     .[36mCDC Host De
     27c:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     28c:	37 6d 00 00                                         7m..

00000290 <__ctors_end>:
     290:	11 24       	eor	r1, r1
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	d0 e2       	ldi	r29, 0x20	; 32
     298:	de bf       	out	0x3e, r29	; 62
     29a:	cd bf       	out	0x3d, r28	; 61

0000029c <__do_copy_data>:
     29c:	11 e0       	ldi	r17, 0x01	; 1
     29e:	a0 e0       	ldi	r26, 0x00	; 0
     2a0:	b1 e0       	ldi	r27, 0x01	; 1
     2a2:	ee e1       	ldi	r30, 0x1E	; 30
     2a4:	fa e1       	ldi	r31, 0x1A	; 26
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	0b bf       	out	0x3b, r16	; 59
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__do_copy_data+0x14>
     2ac:	07 90       	elpm	r0, Z+
     2ae:	0d 92       	st	X+, r0
     2b0:	a0 32       	cpi	r26, 0x20	; 32
     2b2:	b1 07       	cpc	r27, r17
     2b4:	d9 f7       	brne	.-10     	; 0x2ac <__do_copy_data+0x10>

000002b6 <__do_clear_bss>:
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	a0 e2       	ldi	r26, 0x20	; 32
     2ba:	b1 e0       	ldi	r27, 0x01	; 1
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <.do_clear_bss_start>

000002be <.do_clear_bss_loop>:
     2be:	1d 92       	st	X+, r1

000002c0 <.do_clear_bss_start>:
     2c0:	a2 34       	cpi	r26, 0x42	; 66
     2c2:	b1 07       	cpc	r27, r17
     2c4:	e1 f7       	brne	.-8      	; 0x2be <.do_clear_bss_loop>
     2c6:	93 d1       	rcall	.+806    	; 0x5ee <main>
     2c8:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <_exit>

000002cc <__bad_interrupt>:
     2cc:	99 ce       	rjmp	.-718    	; 0x0 <__vectors>

000002ce <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2ce:	9b b1       	in	r25, 0x0b	; 11
     2d0:	9f 70       	andi	r25, 0x0F	; 15
     2d2:	98 2b       	or	r25, r24
     2d4:	9b b9       	out	0x0b, r25	; 11
			}
     2d6:	08 95       	ret

000002d8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2d8:	84 b7       	in	r24, 0x34	; 52
     2da:	87 7f       	andi	r24, 0xF7	; 247
     2dc:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2de:	28 e1       	ldi	r18, 0x18	; 24
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	20 93 60 00 	sts	0x0060, r18
     2e8:	10 92 60 00 	sts	0x0060, r1
     2ec:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	80 e8       	ldi	r24, 0x80	; 128
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	80 93 61 00 	sts	0x0061, r24
     2fa:	90 93 61 00 	sts	0x0061, r25
     2fe:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     300:	83 e3       	ldi	r24, 0x33	; 51
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	90 93 cd 00 	sts	0x00CD, r25
     308:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     30c:	86 e0       	ldi	r24, 0x06	; 6
     30e:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     312:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     316:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     31a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     31c:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     31e:	8a b1       	in	r24, 0x0a	; 10
     320:	80 6f       	ori	r24, 0xF0	; 240
     322:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     324:	8b b1       	in	r24, 0x0b	; 11
     326:	8f 70       	andi	r24, 0x0F	; 15
     328:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     32a:	a1 d5       	rcall	.+2882   	; 0xe6e <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <Serial_CreateStream>

00000334 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     334:	8f e4       	ldi	r24, 0x4F	; 79
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     33c:	80 ea       	ldi	r24, 0xA0	; 160
}
     33e:	c7 cf       	rjmp	.-114    	; 0x2ce <LEDs_SetAllLEDs>

00000340 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     340:	8e e2       	ldi	r24, 0x2E	; 46
     342:	92 e0       	ldi	r25, 0x02	; 2
     344:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     348:	80 e1       	ldi	r24, 0x10	; 16
}
     34a:	c1 cf       	rjmp	.-126    	; 0x2ce <LEDs_SetAllLEDs>

0000034c <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     34c:	1f 93       	push	r17
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	27 97       	sbiw	r28, 0x07	; 7
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
	puts_P(PSTR("Getting Config Data.\r\n"));
     362:	87 e1       	ldi	r24, 0x17	; 23
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     36a:	82 d1       	rcall	.+772    	; 0x670 <ProcessConfigurationDescriptor>
     36c:	18 2f       	mov	r17, r24
     36e:	88 23       	and	r24, r24
     370:	c9 f0       	breq	.+50     	; 0x3a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
	{
		if (ErrorCode == ControlError)
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	19 f4       	brne	.+6      	; 0x37c <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     376:	8d ee       	ldi	r24, 0xED	; 237
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	02 c0       	rjmp	.+4      	; 0x380 <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     37c:	86 ed       	ldi	r24, 0xD6	; 214
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     384:	00 d0       	rcall	.+0      	; 0x386 <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     386:	00 d0       	rcall	.+0      	; 0x388 <EVENT_USB_Host_DeviceEnumerationComplete+0x3c>
     388:	ed b7       	in	r30, 0x3d	; 61
     38a:	fe b7       	in	r31, 0x3e	; 62
     38c:	31 96       	adiw	r30, 0x01	; 1
     38e:	2c eb       	ldi	r18, 0xBC	; 188
     390:	31 e0       	ldi	r19, 0x01	; 1
     392:	ad b7       	in	r26, 0x3d	; 61
     394:	be b7       	in	r27, 0x3e	; 62
     396:	12 96       	adiw	r26, 0x02	; 2
     398:	3c 93       	st	X, r19
     39a:	2e 93       	st	-X, r18
     39c:	11 97       	sbiw	r26, 0x01	; 1
     39e:	12 83       	std	Z+2, r17	; 0x02
     3a0:	13 82       	std	Z+3, r1	; 0x03
     3a2:	36 c0       	rjmp	.+108    	; 0x410 <EVENT_USB_Host_DeviceEnumerationComplete+0xc4>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	d4 d7       	rcall	.+4008   	; 0x1350 <USB_Host_SetDeviceConfiguration>
     3a8:	88 23       	and	r24, r24
     3aa:	79 f0       	breq	.+30     	; 0x3ca <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     3b0:	ed b7       	in	r30, 0x3d	; 61
     3b2:	fe b7       	in	r31, 0x3e	; 62
     3b4:	31 96       	adiw	r30, 0x01	; 1
     3b6:	29 e7       	ldi	r18, 0x79	; 121
     3b8:	31 e0       	ldi	r19, 0x01	; 1
     3ba:	ad b7       	in	r26, 0x3d	; 61
     3bc:	be b7       	in	r27, 0x3e	; 62
     3be:	12 96       	adiw	r26, 0x02	; 2
     3c0:	3c 93       	st	X, r19
     3c2:	2e 93       	st	-X, r18
     3c4:	11 97       	sbiw	r26, 0x01	; 1
     3c6:	82 83       	std	Z+2, r24	; 0x02
     3c8:	eb cf       	rjmp	.-42     	; 0x3a0 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	CDC_LineEncoding_t LineEncoding = { .BaudRateBPS = 9600,
     3ca:	de 01       	movw	r26, r28
     3cc:	11 96       	adiw	r26, 0x01	; 1
     3ce:	e8 e0       	ldi	r30, 0x08	; 8
     3d0:	f1 e0       	ldi	r31, 0x01	; 1
     3d2:	87 e0       	ldi	r24, 0x07	; 7
     3d4:	01 90       	ld	r0, Z+
     3d6:	0d 92       	st	X+, r0
     3d8:	81 50       	subi	r24, 0x01	; 1
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x88>
	                                    .CharFormat  = CDC_LINEENCODING_OneStopBit,
	                                    .ParityType  = CDC_PARITY_None,
	                                    .DataBits    = 8                            };

	USB_ControlRequest = (USB_Request_Header_t)
     3dc:	a5 e2       	ldi	r26, 0x25	; 37
     3de:	b1 e0       	ldi	r27, 0x01	; 1
     3e0:	e0 e0       	ldi	r30, 0x00	; 0
     3e2:	f1 e0       	ldi	r31, 0x01	; 1
     3e4:	88 e0       	ldi	r24, 0x08	; 8
     3e6:	01 90       	ld	r0, Z+
     3e8:	0d 92       	st	X+, r0
     3ea:	81 50       	subi	r24, 0x01	; 1
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x9a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     3ee:	10 92 a7 00 	sts	0x00A7, r1
		.wLength       = sizeof(LineEncoding),
	};

	/* Set the Line Encoding of the CDC interface within the device, so that it is ready to accept data */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	if (USB_Host_SendControlRequest(&LineEncoding) != HOST_SENDCONTROL_Successful)
     3f2:	ce 01       	movw	r24, r28
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	ad d6       	rcall	.+3418   	; 0x1152 <USB_Host_SendControlRequest>
     3f8:	88 23       	and	r24, r24
     3fa:	91 f0       	breq	.+36     	; 0x420 <EVENT_USB_Host_DeviceEnumerationComplete+0xd4>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Line Encoding).\r\n"
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <EVENT_USB_Host_DeviceEnumerationComplete+0xb2>
     3fe:	00 d0       	rcall	.+0      	; 0x400 <EVENT_USB_Host_DeviceEnumerationComplete+0xb4>
     400:	86 e3       	ldi	r24, 0x36	; 54
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	ed b7       	in	r30, 0x3d	; 61
     406:	fe b7       	in	r31, 0x3e	; 62
     408:	92 83       	std	Z+2, r25	; 0x02
     40a:	81 83       	std	Z+1, r24	; 0x01
     40c:	14 82       	std	Z+4, r1	; 0x04
     40e:	13 82       	std	Z+3, r1	; 0x03
     410:	0e 94 3f 0a 	call	0x147e	; 0x147e <printf_P>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	80 e9       	ldi	r24, 0x90	; 144
     41e:	05 c0       	rjmp	.+10     	; 0x42a <EVENT_USB_Host_DeviceEnumerationComplete+0xde>
		return;
	}

	puts_P(PSTR("CDC Device Enumerated.\r\n"));
     420:	8d e1       	ldi	r24, 0x1D	; 29
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     428:	80 e6       	ldi	r24, 0x60	; 96
     42a:	51 df       	rcall	.-350    	; 0x2ce <LEDs_SetAllLEDs>
}
     42c:	27 96       	adiw	r28, 0x07	; 7
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	cf 91       	pop	r28
     43a:	df 91       	pop	r29
     43c:	1f 91       	pop	r17
     43e:	08 95       	ret

00000440 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     440:	df 93       	push	r29
     442:	cf 93       	push	r28
     444:	0f 92       	push	r0
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     44a:	89 83       	std	Y+1, r24	; 0x01
     44c:	a8 d4       	rcall	.+2384   	; 0xd9e <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     44e:	00 d0       	rcall	.+0      	; 0x450 <EVENT_USB_Host_HostError+0x10>
     450:	00 d0       	rcall	.+0      	; 0x452 <EVENT_USB_Host_HostError+0x12>
     452:	ed b7       	in	r30, 0x3d	; 61
     454:	fe b7       	in	r31, 0x3e	; 62
     456:	31 96       	adiw	r30, 0x01	; 1
     458:	2e ee       	ldi	r18, 0xEE	; 238
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	ad b7       	in	r26, 0x3d	; 61
     45e:	be b7       	in	r27, 0x3e	; 62
     460:	12 96       	adiw	r26, 0x02	; 2
     462:	3c 93       	st	X, r19
     464:	2e 93       	st	-X, r18
     466:	11 97       	sbiw	r26, 0x01	; 1
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	82 83       	std	Z+2, r24	; 0x02
     46c:	13 82       	std	Z+3, r1	; 0x03
     46e:	0e 94 3f 0a 	call	0x147e	; 0x147e <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	80 e9       	ldi	r24, 0x90	; 144
     47c:	28 df       	rcall	.-432    	; 0x2ce <LEDs_SetAllLEDs>
     47e:	ff cf       	rjmp	.-2      	; 0x47e <EVENT_USB_Host_HostError+0x3e>

00000480 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     480:	90 91 2d 01 	lds	r25, 0x012D
     484:	2d b7       	in	r18, 0x3d	; 61
     486:	3e b7       	in	r19, 0x3e	; 62
     488:	28 50       	subi	r18, 0x08	; 8
     48a:	30 40       	sbci	r19, 0x00	; 0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	3e bf       	out	0x3e, r19	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	2d bf       	out	0x3d, r18	; 61
     496:	ed b7       	in	r30, 0x3d	; 61
     498:	fe b7       	in	r31, 0x3e	; 62
     49a:	31 96       	adiw	r30, 0x01	; 1
     49c:	28 e9       	ldi	r18, 0x98	; 152
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	ad b7       	in	r26, 0x3d	; 61
     4a2:	be b7       	in	r27, 0x3e	; 62
     4a4:	12 96       	adiw	r26, 0x02	; 2
     4a6:	3c 93       	st	X, r19
     4a8:	2e 93       	st	-X, r18
     4aa:	11 97       	sbiw	r26, 0x01	; 1
     4ac:	82 83       	std	Z+2, r24	; 0x02
     4ae:	13 82       	std	Z+3, r1	; 0x03
     4b0:	64 83       	std	Z+4, r22	; 0x04
     4b2:	15 82       	std	Z+5, r1	; 0x05
     4b4:	96 83       	std	Z+6, r25	; 0x06
     4b6:	17 82       	std	Z+7, r1	; 0x07
     4b8:	e2 d7       	rcall	.+4036   	; 0x147e <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4ba:	2d b7       	in	r18, 0x3d	; 61
     4bc:	3e b7       	in	r19, 0x3e	; 62
     4be:	28 5f       	subi	r18, 0xF8	; 248
     4c0:	3f 4f       	sbci	r19, 0xFF	; 255
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	3e bf       	out	0x3e, r19	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	2d bf       	out	0x3d, r18	; 61
     4cc:	80 e9       	ldi	r24, 0x90	; 144
}
     4ce:	ff ce       	rjmp	.-514    	; 0x2ce <LEDs_SetAllLEDs>

000004d0 <CDCHost_Task>:

/** Task to read in data received from the attached CDC device and print it to the serial port.
 */
void CDCHost_Task(void)
{
     4d0:	8f 92       	push	r8
     4d2:	9f 92       	push	r9
     4d4:	af 92       	push	r10
     4d6:	bf 92       	push	r11
     4d8:	cf 92       	push	r12
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	df 93       	push	r29
     4e6:	cf 93       	push	r28
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze notification IN pipe after use */
	Pipe_Freeze();
}
     4ec:	ad b6       	in	r10, 0x3d	; 61
     4ee:	be b6       	in	r11, 0x3e	; 62

/** Task to read in data received from the attached CDC device and print it to the serial port.
 */
void CDCHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     4f0:	80 91 2d 01 	lds	r24, 0x012D
     4f4:	8b 30       	cpi	r24, 0x0B	; 11
     4f6:	09 f0       	breq	.+2      	; 0x4fa <CDCHost_Task+0x2a>
     4f8:	68 c0       	rjmp	.+208    	; 0x5ca <CDCHost_Task+0xfa>
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     500:	80 91 a9 00 	lds	r24, 0x00A9
     504:	8f 7b       	andi	r24, 0xBF	; 191
     506:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     50a:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select the data IN pipe */
	Pipe_SelectPipe(CDC_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     50e:	80 ff       	sbrs	r24, 0
     510:	41 c0       	rjmp	.+130    	; 0x594 <CDCHost_Task+0xc4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     512:	80 91 a9 00 	lds	r24, 0x00A9
     516:	80 64       	ori	r24, 0x40	; 64
     518:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     51c:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Re-freeze IN pipe after the packet has been received */
		Pipe_Freeze();

		/* Check if data is in the pipe */
		if (Pipe_IsReadWriteAllowed())
     520:	85 ff       	sbrs	r24, 5
     522:	33 c0       	rjmp	.+102    	; 0x58a <CDCHost_Task+0xba>
     524:	9d b6       	in	r9, 0x3d	; 61
     526:	8b 2c       	mov	r8, r11
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     528:	c0 90 f6 00 	lds	r12, 0x00F6
     52c:	d0 90 f7 00 	lds	r13, 0x00F7
		{
			/* Get the length of the pipe data, and create a new buffer to hold it */
			uint16_t BufferLength = Pipe_BytesInPipe();
			uint8_t  Buffer[BufferLength];
     530:	ed b6       	in	r14, 0x3d	; 61
     532:	fe b6       	in	r15, 0x3e	; 62
     534:	ec 18       	sub	r14, r12
     536:	fd 08       	sbc	r15, r13
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	fe be       	out	0x3e, r15	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	ed be       	out	0x3d, r14	; 61
     542:	0d b7       	in	r16, 0x3d	; 61
     544:	1e b7       	in	r17, 0x3e	; 62
     546:	0f 5f       	subi	r16, 0xFF	; 255
     548:	1f 4f       	sbci	r17, 0xFF	; 255

			/* Read in the pipe data to the temporary buffer */
			Pipe_Read_Stream_LE(Buffer, BufferLength, NULL);
     54a:	c8 01       	movw	r24, r16
     54c:	b6 01       	movw	r22, r12
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	16 d3       	rcall	.+1580   	; 0xb80 <Pipe_Read_Stream_LE>
     554:	e0 2e       	mov	r14, r16
     556:	f1 2e       	mov	r15, r17

			/* Print out the buffer contents to the USART */
			for (uint16_t BufferByte = 0; BufferByte < BufferLength; BufferByte++)
     558:	00 e0       	ldi	r16, 0x00	; 0
     55a:	10 e0       	ldi	r17, 0x00	; 0
     55c:	0b c0       	rjmp	.+22     	; 0x574 <CDCHost_Task+0xa4>
			  putchar(Buffer[BufferByte]);
     55e:	60 91 3e 01 	lds	r22, 0x013E
     562:	70 91 3f 01 	lds	r23, 0x013F
     566:	f7 01       	movw	r30, r14
     568:	81 91       	ld	r24, Z+
     56a:	7f 01       	movw	r14, r30
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	5b d7       	rcall	.+3766   	; 0x1426 <fputc>

			/* Read in the pipe data to the temporary buffer */
			Pipe_Read_Stream_LE(Buffer, BufferLength, NULL);

			/* Print out the buffer contents to the USART */
			for (uint16_t BufferByte = 0; BufferByte < BufferLength; BufferByte++)
     570:	0f 5f       	subi	r16, 0xFF	; 255
     572:	1f 4f       	sbci	r17, 0xFF	; 255
     574:	0c 15       	cp	r16, r12
     576:	1d 05       	cpc	r17, r13
     578:	90 f3       	brcs	.-28     	; 0x55e <CDCHost_Task+0x8e>
     57a:	94 01       	movw	r18, r8
     57c:	83 2f       	mov	r24, r19
     57e:	98 2d       	mov	r25, r8
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	9e bf       	out	0x3e, r25	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	8d bf       	out	0x3d, r24	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     58a:	80 91 a6 00 	lds	r24, 0x00A6
     58e:	8e 77       	andi	r24, 0x7E	; 126
     590:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     594:	80 91 a9 00 	lds	r24, 0x00A9
     598:	80 64       	ori	r24, 0x40	; 64
     59a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     59e:	83 e0       	ldi	r24, 0x03	; 3
     5a0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     5a4:	80 91 a9 00 	lds	r24, 0x00A9
     5a8:	8f 7b       	andi	r24, 0xBF	; 191
     5aa:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     5ae:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze the notification pipe */
	Pipe_SelectPipe(CDC_NOTIFICATION_PIPE);
	Pipe_Unfreeze();

	/* Check if a packet has been received */
	if (Pipe_IsINReceived())
     5b2:	80 ff       	sbrs	r24, 0
     5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <CDCHost_Task+0xf0>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     5b6:	80 91 a6 00 	lds	r24, 0x00A6
     5ba:	8e 77       	andi	r24, 0x7E	; 126
     5bc:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     5c0:	80 91 a9 00 	lds	r24, 0x00A9
     5c4:	80 64       	ori	r24, 0x40	; 64
     5c6:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearIN();
	}

	/* Freeze notification IN pipe after use */
	Pipe_Freeze();
}
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	be be       	out	0x3e, r11	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	ad be       	out	0x3d, r10	; 61
     5d4:	cf 91       	pop	r28
     5d6:	df 91       	pop	r29
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	df 90       	pop	r13
     5e2:	cf 90       	pop	r12
     5e4:	bf 90       	pop	r11
     5e6:	af 90       	pop	r10
     5e8:	9f 90       	pop	r9
     5ea:	8f 90       	pop	r8
     5ec:	08 95       	ret

000005ee <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     5ee:	74 de       	rcall	.-792    	; 0x2d8 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "CDC Host Demo running.\r\n" ESC_FG_WHITE));
     5f0:	8c e6       	ldi	r24, 0x6C	; 108
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	63 d7       	rcall	.+3782   	; 0x14bc <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     5f6:	80 e1       	ldi	r24, 0x10	; 16
     5f8:	6a de       	rcall	.-812    	; 0x2ce <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     5fa:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		CDCHost_Task();
     5fc:	69 df       	rcall	.-302    	; 0x4d0 <CDCHost_Task>

		USB_USBTask();
     5fe:	cd d6       	rcall	.+3482   	; 0x139a <USB_USBTask>
     600:	fd cf       	rjmp	.-6      	; 0x5fc <main+0xe>

00000602 <DComp_NextCDCControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCControlInterface(void* CurrentDescriptor)
{
     602:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     604:	81 81       	ldd	r24, Z+1	; 0x01
     606:	84 30       	cpi	r24, 0x04	; 4
     608:	49 f4       	brne	.+18     	; 0x61c <DComp_NextCDCControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
     60a:	85 81       	ldd	r24, Z+5	; 0x05
     60c:	82 30       	cpi	r24, 0x02	; 2
     60e:	31 f4       	brne	.+12     	; 0x61c <DComp_NextCDCControlInterface+0x1a>
     610:	86 81       	ldd	r24, Z+6	; 0x06
     612:	82 30       	cpi	r24, 0x02	; 2
     614:	19 f4       	brne	.+6      	; 0x61c <DComp_NextCDCControlInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
     616:	87 81       	ldd	r24, Z+7	; 0x07
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	11 f0       	breq	.+4      	; 0x620 <DComp_NextCDCControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	08 95       	ret
		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
		    (Interface->Protocol == CDC_CSCP_ATCommandProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     620:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     622:	08 95       	ret

00000624 <DComp_NextCDCDataInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC data Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterface(void* CurrentDescriptor)
{
     624:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     626:	81 81       	ldd	r24, Z+1	; 0x01
     628:	84 30       	cpi	r24, 0x04	; 4
     62a:	49 f4       	brne	.+18     	; 0x63e <DComp_NextCDCDataInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
     62c:	85 81       	ldd	r24, Z+5	; 0x05
     62e:	8a 30       	cpi	r24, 0x0A	; 10
     630:	31 f4       	brne	.+12     	; 0x63e <DComp_NextCDCDataInterface+0x1a>
     632:	86 81       	ldd	r24, Z+6	; 0x06
     634:	88 23       	and	r24, r24
     636:	19 f4       	brne	.+6      	; 0x63e <DComp_NextCDCDataInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
     638:	87 81       	ldd	r24, Z+7	; 0x07
     63a:	88 23       	and	r24, r24
     63c:	11 f0       	breq	.+4      	; 0x642 <DComp_NextCDCDataInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	08 95       	ret
		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
		    (Interface->Protocol == CDC_CSCP_NoDataProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     642:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     644:	08 95       	ret

00000646 <DComp_NextCDCDataInterfaceEndpoint>:
 *  using a different comparator to determine if it is another CDC class interface).
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterfaceEndpoint(void* CurrentDescriptor)
{
     646:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     648:	81 81       	ldd	r24, Z+1	; 0x01
     64a:	85 30       	cpi	r24, 0x05	; 5
     64c:	49 f4       	brne	.+18     	; 0x660 <DComp_NextCDCDataInterfaceEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
     64e:	83 81       	ldd	r24, Z+3	; 0x03
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	83 70       	andi	r24, 0x03	; 3
     654:	90 70       	andi	r25, 0x00	; 0
     656:	02 97       	sbiw	r24, 0x02	; 2
     658:	82 30       	cpi	r24, 0x02	; 2
     65a:	91 05       	cpc	r25, r1
     65c:	18 f4       	brcc	.+6      	; 0x664 <DComp_NextCDCDataInterfaceEndpoint+0x1e>
     65e:	04 c0       	rjmp	.+8      	; 0x668 <DComp_NextCDCDataInterfaceEndpoint+0x22>
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     660:	84 30       	cpi	r24, 0x04	; 4
     662:	21 f0       	breq	.+8      	; 0x66c <DComp_NextCDCDataInterfaceEndpoint+0x26>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	08 95       	ret
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     66c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     66e:	08 95       	ret

00000670 <ProcessConfigurationDescriptor>:
 *  This routine searches for a CDC interface descriptor containing bulk data IN and OUT endpoints, and an interrupt event endpoint.
 *
 *  \return An error code from the \ref CDCHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     670:	6f 92       	push	r6
     672:	7f 92       	push	r7
     674:	8f 92       	push	r8
     676:	9f 92       	push	r9
     678:	af 92       	push	r10
     67a:	bf 92       	push	r11
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	c4 50       	subi	r28, 0x04	; 4
     692:	d2 40       	sbci	r29, 0x02	; 2
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     69e:	ae 01       	movw	r20, r28
     6a0:	4b 5f       	subi	r20, 0xFB	; 251
     6a2:	5f 4f       	sbci	r21, 0xFF	; 255
     6a4:	5a 83       	std	Y+2, r21	; 0x02
     6a6:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	a8 2e       	mov	r10, r24
     6ac:	b1 2c       	mov	r11, r1
     6ae:	ac 0e       	add	r10, r28
     6b0:	bd 1e       	adc	r11, r29
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	b5 01       	movw	r22, r10
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	32 e0       	ldi	r19, 0x02	; 2
     6ba:	87 d4       	rcall	.+2318   	; 0xfca <USB_Host_GetDeviceConfigDescriptor>
     6bc:	85 30       	cpi	r24, 0x05	; 5
     6be:	09 f4       	brne	.+2      	; 0x6c2 <ProcessConfigurationDescriptor+0x52>
     6c0:	72 c0       	rjmp	.+228    	; 0x7a6 <ProcessConfigurationDescriptor+0x136>
     6c2:	86 30       	cpi	r24, 0x06	; 6
     6c4:	89 f0       	breq	.+34     	; 0x6e8 <ProcessConfigurationDescriptor+0x78>
     6c6:	88 23       	and	r24, r24
     6c8:	89 f4       	brne	.+34     	; 0x6ec <ProcessConfigurationDescriptor+0x7c>
     6ca:	ee 24       	eor	r14, r14
     6cc:	ff 24       	eor	r15, r15
     6ce:	cc 24       	eor	r12, r12
     6d0:	dd 24       	eor	r13, r13
     6d2:	00 e0       	ldi	r16, 0x00	; 0
     6d4:	10 e0       	ldi	r17, 0x00	; 0
     6d6:	66 24       	eor	r6, r6
     6d8:	77 24       	eor	r7, r7

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(CDCControlInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6da:	9a 2c       	mov	r9, r10
     6dc:	8b 2c       	mov	r8, r11
     6de:	5e 01       	movw	r10, r28
     6e0:	08 94       	sec
     6e2:	a1 1c       	adc	r10, r1
     6e4:	b1 1c       	adc	r11, r1
     6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <ProcessConfigurationDescriptor+0x80>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     6e8:	83 e0       	ldi	r24, 0x03	; 3
     6ea:	60 c0       	rjmp	.+192    	; 0x7ac <ProcessConfigurationDescriptor+0x13c>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	5e c0       	rjmp	.+188    	; 0x7ac <ProcessConfigurationDescriptor+0x13c>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(CDCControlInterface) ||
     6f0:	61 14       	cp	r6, r1
     6f2:	71 04       	cpc	r7, r1
     6f4:	41 f0       	breq	.+16     	; 0x706 <ProcessConfigurationDescriptor+0x96>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6f6:	89 2d       	mov	r24, r9
     6f8:	98 2d       	mov	r25, r8
     6fa:	b5 01       	movw	r22, r10
     6fc:	43 e2       	ldi	r20, 0x23	; 35
     6fe:	53 e0       	ldi	r21, 0x03	; 3
     700:	bb d4       	rcall	.+2422   	; 0x1078 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(CDCControlInterface) ||
     702:	88 23       	and	r24, r24
     704:	e1 f0       	breq	.+56     	; 0x73e <ProcessConfigurationDescriptor+0xce>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextCDCDataInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
     706:	e1 14       	cp	r14, r1
     708:	f1 04       	cpc	r15, r1
     70a:	71 f0       	breq	.+28     	; 0x728 <ProcessConfigurationDescriptor+0xb8>
			{
				/* Get the next CDC data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     70c:	89 2d       	mov	r24, r9
     70e:	98 2d       	mov	r25, r8
     710:	b5 01       	movw	r22, r10
     712:	42 e1       	ldi	r20, 0x12	; 18
     714:	53 e0       	ldi	r21, 0x03	; 3
     716:	b0 d4       	rcall	.+2400   	; 0x1078 <USB_GetNextDescriptorComp>
     718:	88 23       	and	r24, r24
     71a:	09 f0       	breq	.+2      	; 0x71e <ProcessConfigurationDescriptor+0xae>
     71c:	46 c0       	rjmp	.+140    	; 0x7aa <ProcessConfigurationDescriptor+0x13a>
					return NoCompatibleInterfaceFound;
				}

				/* Clear any found endpoints */
				DataINEndpoint       = NULL;
				DataOUTEndpoint      = NULL;
     71e:	cc 24       	eor	r12, r12
     720:	dd 24       	eor	r13, r13
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
			{
				/* Get the next CDC data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     722:	00 e0       	ldi	r16, 0x00	; 0
     724:	10 e0       	ldi	r17, 0x00	; 0
     726:	e4 cf       	rjmp	.-56     	; 0x6f0 <ProcessConfigurationDescriptor+0x80>
				DataOUTEndpoint      = NULL;
			}
			else
			{
				/* Get the next CDC control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     728:	89 2d       	mov	r24, r9
     72a:	98 2d       	mov	r25, r8
     72c:	b5 01       	movw	r22, r10
     72e:	41 e0       	ldi	r20, 0x01	; 1
     730:	53 e0       	ldi	r21, 0x03	; 3
     732:	a2 d4       	rcall	.+2372   	; 0x1078 <USB_GetNextDescriptorComp>
     734:	88 23       	and	r24, r24
     736:	c9 f5       	brne	.+114    	; 0x7aa <ProcessConfigurationDescriptor+0x13a>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				CDCControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     738:	69 80       	ldd	r6, Y+1	; 0x01
     73a:	7a 80       	ldd	r7, Y+2	; 0x02
     73c:	0e c0       	rjmp	.+28     	; 0x75a <ProcessConfigurationDescriptor+0xea>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     73e:	e9 81       	ldd	r30, Y+1	; 0x01
     740:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     742:	82 81       	ldd	r24, Z+2	; 0x02
     744:	87 ff       	sbrs	r24, 7
     746:	06 c0       	rjmp	.+12     	; 0x754 <ProcessConfigurationDescriptor+0xe4>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     748:	83 81       	ldd	r24, Z+3	; 0x03
     74a:	83 70       	andi	r24, 0x03	; 3
     74c:	83 30       	cpi	r24, 0x03	; 3
     74e:	21 f4       	brne	.+8      	; 0x758 <ProcessConfigurationDescriptor+0xe8>
			  NotificationEndpoint = EndpointData;
     750:	7f 01       	movw	r14, r30
     752:	03 c0       	rjmp	.+6      	; 0x75a <ProcessConfigurationDescriptor+0xea>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
     754:	6f 01       	movw	r12, r30
     756:	01 c0       	rjmp	.+2      	; 0x75a <ProcessConfigurationDescriptor+0xea>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  NotificationEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
     758:	8f 01       	movw	r16, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     75a:	01 15       	cp	r16, r1
     75c:	11 05       	cpc	r17, r1
     75e:	41 f2       	breq	.-112    	; 0x6f0 <ProcessConfigurationDescriptor+0x80>
     760:	c1 14       	cp	r12, r1
     762:	d1 04       	cpc	r13, r1
     764:	29 f2       	breq	.-118    	; 0x6f0 <ProcessConfigurationDescriptor+0x80>
     766:	e1 14       	cp	r14, r1
     768:	f1 04       	cpc	r15, r1
     76a:	09 f4       	brne	.+2      	; 0x76e <ProcessConfigurationDescriptor+0xfe>
     76c:	c1 cf       	rjmp	.-126    	; 0x6f0 <ProcessConfigurationDescriptor+0x80>
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the CDC data IN pipe */
	Pipe_ConfigurePipe(CDC_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     76e:	f8 01       	movw	r30, r16
     770:	24 81       	ldd	r18, Z+4	; 0x04
     772:	35 81       	ldd	r19, Z+5	; 0x05
     774:	81 e8       	ldi	r24, 0x81	; 129
     776:	62 e0       	ldi	r22, 0x02	; 2
     778:	42 81       	ldd	r20, Z+2	; 0x02
     77a:	01 e0       	ldi	r16, 0x01	; 1
     77c:	64 d2       	rcall	.+1224   	; 0xc46 <Pipe_ConfigurePipe>

	/* Configure the CDC data OUT pipe */
	Pipe_ConfigurePipe(CDC_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     77e:	f6 01       	movw	r30, r12
     780:	24 81       	ldd	r18, Z+4	; 0x04
     782:	35 81       	ldd	r19, Z+5	; 0x05
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	62 e0       	ldi	r22, 0x02	; 2
     788:	42 81       	ldd	r20, Z+2	; 0x02
     78a:	5d d2       	rcall	.+1210   	; 0xc46 <Pipe_ConfigurePipe>

	/* Configure the CDC notification pipe */
	Pipe_ConfigurePipe(CDC_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, 1);
     78c:	f7 01       	movw	r30, r14
     78e:	24 81       	ldd	r18, Z+4	; 0x04
     790:	35 81       	ldd	r19, Z+5	; 0x05
     792:	83 e8       	ldi	r24, 0x83	; 131
     794:	63 e0       	ldi	r22, 0x03	; 3
     796:	42 81       	ldd	r20, Z+2	; 0x02
     798:	56 d2       	rcall	.+1196   	; 0xc46 <Pipe_ConfigurePipe>
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);
     79a:	f7 01       	movw	r30, r14
     79c:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     79e:	80 93 ad 00 	sts	0x00AD, r24

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	03 c0       	rjmp	.+6      	; 0x7ac <ProcessConfigurationDescriptor+0x13c>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <ProcessConfigurationDescriptor+0x13c>
				/* Get the next CDC control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
											  DComp_NextCDCControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
     7aa:	84 e0       	ldi	r24, 0x04	; 4
	Pipe_ConfigurePipe(CDC_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, 1);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     7ac:	cc 5f       	subi	r28, 0xFC	; 252
     7ae:	dd 4f       	sbci	r29, 0xFD	; 253
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	cf 91       	pop	r28
     7bc:	df 91       	pop	r29
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	9f 90       	pop	r9
     7d0:	8f 90       	pop	r8
     7d2:	7f 90       	pop	r7
     7d4:	6f 90       	pop	r6
     7d6:	08 95       	ret

000007d8 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     7d8:	80 91 9e 00 	lds	r24, 0x009E
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	81 70       	andi	r24, 0x01	; 1
     7e0:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     7e2:	20 91 a0 00 	lds	r18, 0x00A0
     7e6:	2d 7f       	andi	r18, 0xFD	; 253
     7e8:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     7ec:	20 91 9e 00 	lds	r18, 0x009E
     7f0:	22 60       	ori	r18, 0x02	; 2
     7f2:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     7f6:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     7fa:	21 fd       	sbrc	r18, 1
     7fc:	fc cf       	rjmp	.-8      	; 0x7f6 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7fe:	20 91 9e 00 	lds	r18, 0x009E
     802:	21 60       	ori	r18, 0x01	; 1
     804:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     808:	10 92 23 01 	sts	0x0123, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     80c:	20 91 a0 00 	lds	r18, 0x00A0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	20 72       	andi	r18, 0x20	; 32
     814:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     816:	40 91 a0 00 	lds	r20, 0x00A0
     81a:	4f 7d       	andi	r20, 0xDF	; 223
     81c:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     820:	40 91 9f 00 	lds	r20, 0x009F
     824:	4f 7d       	andi	r20, 0xDF	; 223
     826:	40 93 9f 00 	sts	0x009F, r20
     82a:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     82c:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     830:	55 ff       	sbrs	r21, 5
     832:	0b c0       	rjmp	.+22     	; 0x84a <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     834:	40 91 9f 00 	lds	r20, 0x009F
     838:	4f 7d       	andi	r20, 0xDF	; 223
     83a:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     83e:	40 91 9f 00 	lds	r20, 0x009F
     842:	4d 7f       	andi	r20, 0xFD	; 253
     844:	40 93 9f 00 	sts	0x009F, r20
     848:	08 c0       	rjmp	.+16     	; 0x85a <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     84a:	ef ec       	ldi	r30, 0xCF	; 207
     84c:	f7 e0       	ldi	r31, 0x07	; 7
     84e:	31 97       	sbiw	r30, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <USB_Host_ResetDevice+0x76>
     852:	00 c0       	rjmp	.+0      	; 0x854 <USB_Host_ResetDevice+0x7c>
     854:	00 00       	nop
     856:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     858:	49 f7       	brne	.-46     	; 0x82c <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     85a:	21 15       	cp	r18, r1
     85c:	31 05       	cpc	r19, r1
     85e:	29 f0       	breq	.+10     	; 0x86a <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     860:	20 91 a0 00 	lds	r18, 0x00A0
     864:	20 62       	ori	r18, 0x20	; 32
     866:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     86a:	00 97       	sbiw	r24, 0x00	; 0
     86c:	29 f4       	brne	.+10     	; 0x878 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     86e:	80 91 9e 00 	lds	r24, 0x009E
     872:	8e 7f       	andi	r24, 0xFE	; 254
     874:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     878:	80 91 a0 00 	lds	r24, 0x00A0
     87c:	82 60       	ori	r24, 0x02	; 2
     87e:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     882:	08 95       	ret

00000884 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     884:	40 91 9e 00 	lds	r20, 0x009E
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	41 70       	andi	r20, 0x01	; 1
     88c:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     88e:	20 91 a0 00 	lds	r18, 0x00A0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	20 72       	andi	r18, 0x20	; 32
     896:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     898:	90 91 a0 00 	lds	r25, 0x00A0
     89c:	9f 7d       	andi	r25, 0xDF	; 223
     89e:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8a2:	90 91 9f 00 	lds	r25, 0x009F
     8a6:	9f 7d       	andi	r25, 0xDF	; 223
     8a8:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8ac:	90 91 9e 00 	lds	r25, 0x009E
     8b0:	91 60       	ori	r25, 0x01	; 1
     8b2:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     8b6:	26 c0       	rjmp	.+76     	; 0x904 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     8b8:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     8bc:	95 ff       	sbrs	r25, 5
     8be:	06 c0       	rjmp	.+12     	; 0x8cc <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8c0:	90 91 9f 00 	lds	r25, 0x009F
     8c4:	9f 7d       	andi	r25, 0xDF	; 223
     8c6:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     8ca:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     8cc:	90 91 2d 01 	lds	r25, 0x012D
     8d0:	91 30       	cpi	r25, 0x01	; 1
     8d2:	d9 f0       	breq	.+54     	; 0x90a <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     8d4:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     8d8:	94 ff       	sbrs	r25, 4
     8da:	09 c0       	rjmp	.+18     	; 0x8ee <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     8dc:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     8e0:	80 91 a6 00 	lds	r24, 0x00A6
     8e4:	8f 7e       	andi	r24, 0xEF	; 239
     8e6:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     8ea:	82 e0       	ldi	r24, 0x02	; 2

			break;
     8ec:	0f c0       	rjmp	.+30     	; 0x90c <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     8ee:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     8f2:	91 ff       	sbrs	r25, 1
     8f4:	07 c0       	rjmp	.+14     	; 0x904 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     8f6:	80 91 a6 00 	lds	r24, 0x00A6
     8fa:	8d 7f       	andi	r24, 0xFD	; 253
     8fc:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     900:	83 e0       	ldi	r24, 0x03	; 3

			break;
     902:	04 c0       	rjmp	.+8      	; 0x90c <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     904:	88 23       	and	r24, r24
     906:	c1 f6       	brne	.-80     	; 0x8b8 <USB_Host_WaitMS+0x34>
     908:	01 c0       	rjmp	.+2      	; 0x90c <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     90a:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     90c:	41 15       	cp	r20, r1
     90e:	51 05       	cpc	r21, r1
     910:	29 f4       	brne	.+10     	; 0x91c <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     912:	90 91 9e 00 	lds	r25, 0x009E
     916:	9e 7f       	andi	r25, 0xFE	; 254
     918:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     91c:	21 15       	cp	r18, r1
     91e:	31 05       	cpc	r19, r1
     920:	29 f0       	breq	.+10     	; 0x92c <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     922:	90 91 a0 00 	lds	r25, 0x00A0
     926:	90 62       	ori	r25, 0x20	; 32
     928:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     92c:	08 95       	ret

0000092e <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	df 93       	push	r29
     934:	cf 93       	push	r28
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	28 97       	sbiw	r28, 0x08	; 8
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     946:	80 91 2d 01 	lds	r24, 0x012D
     94a:	85 30       	cpi	r24, 0x05	; 5
     94c:	09 f4       	brne	.+2      	; 0x950 <USB_Host_ProcessNextHostState+0x22>
     94e:	99 c0       	rjmp	.+306    	; 0xa82 <USB_Host_ProcessNextHostState+0x154>
     950:	86 30       	cpi	r24, 0x06	; 6
     952:	68 f4       	brcc	.+26     	; 0x96e <USB_Host_ProcessNextHostState+0x40>
     954:	82 30       	cpi	r24, 0x02	; 2
     956:	c1 f1       	breq	.+112    	; 0x9c8 <USB_Host_ProcessNextHostState+0x9a>
     958:	83 30       	cpi	r24, 0x03	; 3
     95a:	18 f4       	brcc	.+6      	; 0x962 <USB_Host_ProcessNextHostState+0x34>
     95c:	88 23       	and	r24, r24
     95e:	a1 f0       	breq	.+40     	; 0x988 <USB_Host_ProcessNextHostState+0x5a>
     960:	04 c1       	rjmp	.+520    	; 0xb6a <USB_Host_ProcessNextHostState+0x23c>
     962:	83 30       	cpi	r24, 0x03	; 3
     964:	d9 f1       	breq	.+118    	; 0x9dc <USB_Host_ProcessNextHostState+0xae>
     966:	84 30       	cpi	r24, 0x04	; 4
     968:	09 f0       	breq	.+2      	; 0x96c <USB_Host_ProcessNextHostState+0x3e>
     96a:	ff c0       	rjmp	.+510    	; 0xb6a <USB_Host_ProcessNextHostState+0x23c>
     96c:	62 c0       	rjmp	.+196    	; 0xa32 <USB_Host_ProcessNextHostState+0x104>
     96e:	87 30       	cpi	r24, 0x07	; 7
     970:	09 f4       	brne	.+2      	; 0x974 <USB_Host_ProcessNextHostState+0x46>
     972:	9e c0       	rjmp	.+316    	; 0xab0 <USB_Host_ProcessNextHostState+0x182>
     974:	87 30       	cpi	r24, 0x07	; 7
     976:	08 f4       	brcc	.+2      	; 0x97a <USB_Host_ProcessNextHostState+0x4c>
     978:	8f c0       	rjmp	.+286    	; 0xa98 <USB_Host_ProcessNextHostState+0x16a>
     97a:	88 30       	cpi	r24, 0x08	; 8
     97c:	09 f4       	brne	.+2      	; 0x980 <USB_Host_ProcessNextHostState+0x52>
     97e:	b8 c0       	rjmp	.+368    	; 0xaf0 <USB_Host_ProcessNextHostState+0x1c2>
     980:	89 30       	cpi	r24, 0x09	; 9
     982:	09 f0       	breq	.+2      	; 0x986 <USB_Host_ProcessNextHostState+0x58>
     984:	f2 c0       	rjmp	.+484    	; 0xb6a <USB_Host_ProcessNextHostState+0x23c>
     986:	d9 c0       	rjmp	.+434    	; 0xb3a <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     988:	00 91 21 01 	lds	r16, 0x0121
     98c:	10 91 22 01 	lds	r17, 0x0122
     990:	01 15       	cp	r16, r1
     992:	11 05       	cpc	r17, r1
     994:	09 f4       	brne	.+2      	; 0x998 <USB_Host_ProcessNextHostState+0x6a>
     996:	e9 c0       	rjmp	.+466    	; 0xb6a <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	74 df       	rcall	.-280    	; 0x884 <USB_Host_WaitMS>
     99c:	68 2f       	mov	r22, r24
     99e:	88 23       	and	r24, r24
     9a0:	31 f0       	breq	.+12     	; 0x9ae <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     9a2:	80 91 20 01 	lds	r24, 0x0120
     9a6:	80 93 2d 01 	sts	0x012D, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
					break;
     9ac:	d2 c0       	rjmp	.+420    	; 0xb52 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     9ae:	01 50       	subi	r16, 0x01	; 1
     9b0:	10 40       	sbci	r17, 0x00	; 0
     9b2:	10 93 22 01 	sts	0x0122, r17
     9b6:	00 93 21 01 	sts	0x0121, r16
     9ba:	01 15       	cp	r16, r1
     9bc:	11 05       	cpc	r17, r1
     9be:	09 f0       	breq	.+2      	; 0x9c2 <USB_Host_ProcessNextHostState+0x94>
     9c0:	d4 c0       	rjmp	.+424    	; 0xb6a <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     9c2:	80 91 20 01 	lds	r24, 0x0120
     9c6:	07 c0       	rjmp	.+14     	; 0x9d6 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     9c8:	88 ee       	ldi	r24, 0xE8	; 232
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	90 93 22 01 	sts	0x0122, r25
     9d0:	80 93 21 01 	sts	0x0121, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     9d4:	83 e0       	ldi	r24, 0x03	; 3
     9d6:	80 93 2d 01 	sts	0x012D, r24
			break;
     9da:	c7 c0       	rjmp	.+398    	; 0xb6a <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     9dc:	80 91 21 01 	lds	r24, 0x0121
     9e0:	90 91 22 01 	lds	r25, 0x0122
     9e4:	9c 01       	movw	r18, r24
     9e6:	21 50       	subi	r18, 0x01	; 1
     9e8:	30 40       	sbci	r19, 0x00	; 0
     9ea:	30 93 22 01 	sts	0x0122, r19
     9ee:	20 93 21 01 	sts	0x0121, r18
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	39 f0       	breq	.+14     	; 0xa04 <USB_Host_ProcessNextHostState+0xd6>
     9f6:	8f ec       	ldi	r24, 0xCF	; 207
     9f8:	97 e0       	ldi	r25, 0x07	; 7
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	f1 f7       	brne	.-4      	; 0x9fa <USB_Host_ProcessNextHostState+0xcc>
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <USB_Host_ProcessNextHostState+0xd2>
     a00:	00 00       	nop
     a02:	b3 c0       	rjmp	.+358    	; 0xb6a <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     a04:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     a06:	80 91 d8 00 	lds	r24, 0x00D8
     a0a:	80 61       	ori	r24, 0x10	; 16
     a0c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     a10:	80 91 dd 00 	lds	r24, 0x00DD
     a14:	8b 7f       	andi	r24, 0xFB	; 251
     a16:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     a1a:	80 91 d7 00 	lds	r24, 0x00D7
     a1e:	80 61       	ori	r24, 0x10	; 16
     a20:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     a24:	80 91 dd 00 	lds	r24, 0x00DD
     a28:	82 60       	ori	r24, 0x02	; 2
     a2a:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     a2e:	84 e0       	ldi	r24, 0x04	; 4
     a30:	d2 cf       	rjmp	.-92     	; 0x9d6 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     a32:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     a36:	80 ff       	sbrs	r24, 0
     a38:	98 c0       	rjmp	.+304    	; 0xb6a <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     a3a:	80 91 9f 00 	lds	r24, 0x009F
     a3e:	8e 7f       	andi	r24, 0xFE	; 254
     a40:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a44:	80 91 9f 00 	lds	r24, 0x009F
     a48:	8d 7f       	andi	r24, 0xFD	; 253
     a4a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     a4e:	80 91 df 00 	lds	r24, 0x00DF
     a52:	8d 7f       	andi	r24, 0xFD	; 253
     a54:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     a58:	80 91 de 00 	lds	r24, 0x00DE
     a5c:	82 60       	ori	r24, 0x02	; 2
     a5e:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a62:	80 91 9e 00 	lds	r24, 0x009E
     a66:	81 60       	ori	r24, 0x01	; 1
     a68:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     a6c:	53 d1       	rcall	.+678    	; 0xd14 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     a6e:	10 92 2d 01 	sts	0x012D, r1
     a72:	84 e6       	ldi	r24, 0x64	; 100
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	90 93 22 01 	sts	0x0122, r25
     a7a:	80 93 21 01 	sts	0x0121, r24
     a7e:	85 e0       	ldi	r24, 0x05	; 5
     a80:	59 c0       	rjmp	.+178    	; 0xb34 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     a82:	aa de       	rcall	.-684    	; 0x7d8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     a84:	10 92 2d 01 	sts	0x012D, r1
     a88:	88 ec       	ldi	r24, 0xC8	; 200
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	90 93 22 01 	sts	0x0122, r25
     a90:	80 93 21 01 	sts	0x0121, r24
     a94:	86 e0       	ldi	r24, 0x06	; 6
     a96:	4e c0       	rjmp	.+156    	; 0xb34 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	20 e4       	ldi	r18, 0x40	; 64
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	01 e0       	ldi	r16, 0x01	; 1
     aa4:	d0 d0       	rcall	.+416    	; 0xc46 <Pipe_ConfigurePipe>
     aa6:	88 23       	and	r24, r24
     aa8:	09 f4       	brne	.+2      	; 0xaac <USB_Host_ProcessNextHostState+0x17e>
     aaa:	4f c0       	rjmp	.+158    	; 0xb4a <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     aac:	87 e0       	ldi	r24, 0x07	; 7
     aae:	93 cf       	rjmp	.-218    	; 0x9d6 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     ab0:	a5 e2       	ldi	r26, 0x25	; 37
     ab2:	b1 e0       	ldi	r27, 0x01	; 1
     ab4:	e7 e1       	ldi	r30, 0x17	; 23
     ab6:	f1 e0       	ldi	r31, 0x01	; 1
     ab8:	88 e0       	ldi	r24, 0x08	; 8
     aba:	01 90       	ld	r0, Z+
     abc:	0d 92       	st	X+, r0
     abe:	81 50       	subi	r24, 0x01	; 1
     ac0:	e1 f7       	brne	.-8      	; 0xaba <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ac2:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     ac6:	ce 01       	movw	r24, r28
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	43 d3       	rcall	.+1670   	; 0x1152 <USB_Host_SendControlRequest>
     acc:	68 2f       	mov	r22, r24
     ace:	88 23       	and	r24, r24
     ad0:	09 f0       	breq	.+2      	; 0xad4 <USB_Host_ProcessNextHostState+0x1a6>
     ad2:	3e c0       	rjmp	.+124    	; 0xb50 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     ad4:	88 85       	ldd	r24, Y+8	; 0x08
     ad6:	80 93 1f 01 	sts	0x011F, r24

			USB_Host_ResetDevice();
     ada:	7e de       	rcall	.-772    	; 0x7d8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     adc:	10 92 2d 01 	sts	0x012D, r1
     ae0:	88 ec       	ldi	r24, 0xC8	; 200
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	90 93 22 01 	sts	0x0122, r25
     ae8:	80 93 21 01 	sts	0x0121, r24
     aec:	88 e0       	ldi	r24, 0x08	; 8
     aee:	22 c0       	rjmp	.+68     	; 0xb34 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     af0:	20 91 1f 01 	lds	r18, 0x011F
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	01 e0       	ldi	r16, 0x01	; 1
     afe:	a3 d0       	rcall	.+326    	; 0xc46 <Pipe_ConfigurePipe>
     b00:	88 23       	and	r24, r24
     b02:	19 f1       	breq	.+70     	; 0xb4a <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     b04:	a5 e2       	ldi	r26, 0x25	; 37
     b06:	b1 e0       	ldi	r27, 0x01	; 1
     b08:	ef e0       	ldi	r30, 0x0F	; 15
     b0a:	f1 e0       	ldi	r31, 0x01	; 1
     b0c:	88 e0       	ldi	r24, 0x08	; 8
     b0e:	01 90       	ld	r0, Z+
     b10:	0d 92       	st	X+, r0
     b12:	81 50       	subi	r24, 0x01	; 1
     b14:	e1 f7       	brne	.-8      	; 0xb0e <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	1b d3       	rcall	.+1590   	; 0x1152 <USB_Host_SendControlRequest>
     b1c:	68 2f       	mov	r22, r24
     b1e:	88 23       	and	r24, r24
     b20:	b9 f4       	brne	.+46     	; 0xb50 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     b22:	10 92 2d 01 	sts	0x012D, r1
     b26:	84 e6       	ldi	r24, 0x64	; 100
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	90 93 22 01 	sts	0x0122, r25
     b2e:	80 93 21 01 	sts	0x0121, r24
     b32:	89 e0       	ldi	r24, 0x09	; 9
     b34:	80 93 20 01 	sts	0x0120, r24
			break;
     b38:	18 c0       	rjmp	.+48     	; 0xb6a <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     b40:	8a e0       	ldi	r24, 0x0A	; 10
     b42:	80 93 2d 01 	sts	0x012D, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     b46:	02 dc       	rcall	.-2044   	; 0x34c <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     b48:	10 c0       	rjmp	.+32     	; 0xb6a <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     b4a:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     b4c:	84 e0       	ldi	r24, 0x04	; 4
     b4e:	01 c0       	rjmp	.+2      	; 0xb52 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     b50:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b52:	90 91 2d 01 	lds	r25, 0x012D
     b56:	91 30       	cpi	r25, 0x01	; 1
     b58:	41 f0       	breq	.+16     	; 0xb6a <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     b5a:	92 dc       	rcall	.-1756   	; 0x480 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b5c:	80 91 dd 00 	lds	r24, 0x00DD
     b60:	81 60       	ori	r24, 0x01	; 1
     b62:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     b66:	ec db       	rcall	.-2088   	; 0x340 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     b68:	32 d1       	rcall	.+612    	; 0xdce <USB_ResetInterface>
	}
}
     b6a:	28 96       	adiw	r28, 0x08	; 8
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	08 95       	ret

00000b80 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     b80:	8f 92       	push	r8
     b82:	9f 92       	push	r9
     b84:	bf 92       	push	r11
     b86:	cf 92       	push	r12
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	0f 92       	push	r0
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	e8 2e       	mov	r14, r24
     b9e:	4b 01       	movw	r8, r22
     ba0:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ba2:	80 91 aa 00 	lds	r24, 0x00AA
     ba6:	8f 7c       	andi	r24, 0xCF	; 207
     ba8:	80 61       	ori	r24, 0x10	; 16
     baa:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     bae:	99 83       	std	Y+1, r25	; 0x01
     bb0:	c7 d0       	rcall	.+398    	; 0xd40 <Pipe_WaitUntilReady>
     bb2:	b8 2e       	mov	r11, r24
     bb4:	99 81       	ldd	r25, Y+1	; 0x01
     bb6:	88 23       	and	r24, r24
     bb8:	c1 f5       	brne	.+112    	; 0xc2a <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     bba:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     bbc:	01 15       	cp	r16, r1
     bbe:	11 05       	cpc	r17, r1
     bc0:	39 f0       	breq	.+14     	; 0xbd0 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     bc2:	f8 01       	movw	r30, r16
     bc4:	20 81       	ld	r18, Z
     bc6:	31 81       	ldd	r19, Z+1	; 0x01
     bc8:	82 1a       	sub	r8, r18
     bca:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     bcc:	e2 0e       	add	r14, r18
     bce:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     bd0:	cc 24       	eor	r12, r12
     bd2:	dd 24       	eor	r13, r13
     bd4:	25 c0       	rjmp	.+74     	; 0xc20 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     bd6:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     bda:	85 fd       	sbrc	r24, 5
     bdc:	16 c0       	rjmp	.+44     	; 0xc0a <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     bde:	80 91 a6 00 	lds	r24, 0x00A6
     be2:	8e 77       	andi	r24, 0x7E	; 126
     be4:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     be8:	01 15       	cp	r16, r1
     bea:	11 05       	cpc	r17, r1
     bec:	51 f0       	breq	.+20     	; 0xc02 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     bee:	f8 01       	movw	r30, r16
     bf0:	80 81       	ld	r24, Z
     bf2:	91 81       	ldd	r25, Z+1	; 0x01
     bf4:	8c 0d       	add	r24, r12
     bf6:	9d 1d       	adc	r25, r13
     bf8:	91 83       	std	Z+1, r25	; 0x01
     bfa:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     bfc:	44 e0       	ldi	r20, 0x04	; 4
     bfe:	b4 2e       	mov	r11, r20
     c00:	14 c0       	rjmp	.+40     	; 0xc2a <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     c02:	9e d0       	rcall	.+316    	; 0xd40 <Pipe_WaitUntilReady>
     c04:	88 23       	and	r24, r24
     c06:	61 f0       	breq	.+24     	; 0xc20 <Pipe_Read_Stream_LE+0xa0>
     c08:	0f c0       	rjmp	.+30     	; 0xc28 <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     c0a:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     c0e:	f7 01       	movw	r30, r14
     c10:	81 93       	st	Z+, r24
     c12:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     c14:	08 94       	sec
     c16:	81 08       	sbc	r8, r1
     c18:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     c1a:	08 94       	sec
     c1c:	c1 1c       	adc	r12, r1
     c1e:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     c20:	81 14       	cp	r8, r1
     c22:	91 04       	cpc	r9, r1
     c24:	c1 f6       	brne	.-80     	; 0xbd6 <Pipe_Read_Stream_LE+0x56>
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     c28:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     c2a:	8b 2d       	mov	r24, r11
     c2c:	0f 90       	pop	r0
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12
     c3e:	bf 90       	pop	r11
     c40:	9f 90       	pop	r9
     c42:	8f 90       	pop	r8
     c44:	08 95       	ret

00000c46 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     c46:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     c48:	58 2f       	mov	r21, r24
     c4a:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     c4c:	87 ff       	sbrs	r24, 7
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <Pipe_ConfigurePipe+0xe>
     c50:	80 e1       	ldi	r24, 0x10	; 16
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <Pipe_ConfigurePipe+0x10>
     c54:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     c56:	57 30       	cpi	r21, 0x07	; 7
     c58:	08 f0       	brcs	.+2      	; 0xc5c <Pipe_ConfigurePipe+0x16>
     c5a:	59 c0       	rjmp	.+178    	; 0xd0e <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     c5c:	66 23       	and	r22, r22
     c5e:	09 f4       	brne	.+2      	; 0xc62 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     c60:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     c62:	4f 70       	andi	r20, 0x0F	; 15
     c64:	62 95       	swap	r22
     c66:	66 0f       	add	r22, r22
     c68:	66 0f       	add	r22, r22
     c6a:	60 7c       	andi	r22, 0xC0	; 192
     c6c:	64 2b       	or	r22, r20
     c6e:	68 2b       	or	r22, r24
     c70:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c72:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c74:	84 2f       	mov	r24, r20
     c76:	8f 70       	andi	r24, 0x0F	; 15
     c78:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     c7c:	45 17       	cp	r20, r21
     c7e:	a1 f4       	brne	.+40     	; 0xca8 <Pipe_ConfigurePipe+0x62>
     c80:	88 e0       	ldi	r24, 0x08	; 8
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     c88:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     c8e:	82 17       	cp	r24, r18
     c90:	93 07       	cpc	r25, r19
     c92:	10 f4       	brcc	.+4      	; 0xc98 <Pipe_ConfigurePipe+0x52>
     c94:	75 30       	cpi	r23, 0x05	; 5
     c96:	c1 f7       	brne	.-16     	; 0xc88 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     c98:	87 2f       	mov	r24, r23
     c9a:	82 95       	swap	r24
     c9c:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c9e:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     ca0:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     ca2:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     ca4:	e0 e0       	ldi	r30, 0x00	; 0
     ca6:	08 c0       	rjmp	.+16     	; 0xcb8 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     ca8:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     cac:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     cb0:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     cb4:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     cb8:	81 ff       	sbrs	r24, 1
     cba:	20 c0       	rjmp	.+64     	; 0xcfc <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     cbc:	90 91 a9 00 	lds	r25, 0x00A9
     cc0:	9e 7f       	andi	r25, 0xFE	; 254
     cc2:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     cc6:	90 91 ab 00 	lds	r25, 0x00AB
     cca:	9d 7f       	andi	r25, 0xFD	; 253
     ccc:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     cd0:	90 91 a9 00 	lds	r25, 0x00A9
     cd4:	91 60       	ori	r25, 0x01	; 1
     cd6:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     cda:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     cde:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     ce2:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     ce6:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     cea:	80 91 a9 00 	lds	r24, 0x00A9
     cee:	80 62       	ori	r24, 0x20	; 32
     cf0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     cf4:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     cf8:	87 ff       	sbrs	r24, 7
     cfa:	09 c0       	rjmp	.+18     	; 0xd0e <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     cfc:	4f 5f       	subi	r20, 0xFF	; 255
     cfe:	47 30       	cpi	r20, 0x07	; 7
     d00:	09 f0       	breq	.+2      	; 0xd04 <Pipe_ConfigurePipe+0xbe>
     d02:	b8 cf       	rjmp	.-144    	; 0xc74 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d04:	5f 70       	andi	r21, 0x0F	; 15
     d06:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     d0e:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     d14:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	98 2f       	mov	r25, r24
     d1c:	9f 70       	andi	r25, 0x0F	; 15
     d1e:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     d22:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     d26:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     d2a:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     d2e:	90 91 a9 00 	lds	r25, 0x00A9
     d32:	9e 7f       	andi	r25, 0xFE	; 254
     d34:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d38:	8f 5f       	subi	r24, 0xFF	; 255
     d3a:	87 30       	cpi	r24, 0x07	; 7
     d3c:	71 f7       	brne	.-36     	; 0xd1a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     d3e:	08 95       	ret

00000d40 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     d40:	80 91 a2 00 	lds	r24, 0x00A2
     d44:	90 91 a3 00 	lds	r25, 0x00A3
}

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     d48:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     d4a:	20 91 aa 00 	lds	r18, 0x00AA
     d4e:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     d50:	20 31       	cpi	r18, 0x10	; 16
     d52:	29 f4       	brne	.+10     	; 0xd5e <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d54:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     d58:	20 ff       	sbrs	r18, 0
     d5a:	05 c0       	rjmp	.+10     	; 0xd66 <Pipe_WaitUntilReady+0x26>
     d5c:	18 c0       	rjmp	.+48     	; 0xd8e <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     d5e:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     d62:	22 fd       	sbrc	r18, 2
     d64:	14 c0       	rjmp	.+40     	; 0xd8e <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     d66:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     d6a:	21 fd       	sbrc	r18, 1
     d6c:	12 c0       	rjmp	.+36     	; 0xd92 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     d6e:	20 91 2d 01 	lds	r18, 0x012D
     d72:	21 30       	cpi	r18, 0x01	; 1
     d74:	81 f0       	breq	.+32     	; 0xd96 <Pipe_WaitUntilReady+0x56>
     d76:	20 91 a2 00 	lds	r18, 0x00A2
     d7a:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d7e:	28 17       	cp	r18, r24
     d80:	39 07       	cpc	r19, r25
     d82:	19 f3       	breq	.-58     	; 0xd4a <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d84:	44 23       	and	r20, r20
     d86:	49 f0       	breq	.+18     	; 0xd9a <Pipe_WaitUntilReady+0x5a>
     d88:	41 50       	subi	r20, 0x01	; 1
     d8a:	c9 01       	movw	r24, r18
     d8c:	de cf       	rjmp	.-68     	; 0xd4a <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     d9a:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     d9c:	08 95       	ret

00000d9e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     d9e:	75 d0       	rcall	.+234    	; 0xe8a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     da0:	7c d0       	rcall	.+248    	; 0xe9a <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     da2:	e0 ee       	ldi	r30, 0xE0	; 224
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	81 60       	ori	r24, 0x01	; 1
     daa:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     dac:	e8 ed       	ldi	r30, 0xD8	; 216
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8f 77       	andi	r24, 0x7F	; 127
     db4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     db6:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     db8:	a7 ed       	ldi	r26, 0xD7	; 215
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	8c 91       	ld	r24, X
     dbe:	8e 7f       	andi	r24, 0xFE	; 254
     dc0:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     dc2:	80 81       	ld	r24, Z
     dc4:	8f 7e       	andi	r24, 0xEF	; 239
     dc6:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     dc8:	10 92 24 01 	sts	0x0124, r1
}
     dcc:	08 95       	ret

00000dce <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     dce:	5d d0       	rcall	.+186    	; 0xe8a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     dd0:	64 d0       	rcall	.+200    	; 0xe9a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     dd2:	80 91 d8 00 	lds	r24, 0x00D8
     dd6:	8f 77       	andi	r24, 0x7F	; 127
     dd8:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     ddc:	80 91 d8 00 	lds	r24, 0x00D8
     de0:	80 68       	ori	r24, 0x80	; 128
     de2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     de6:	80 91 d8 00 	lds	r24, 0x00D8
     dea:	8f 7d       	andi	r24, 0xDF	; 223
     dec:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     df0:	80 91 d7 00 	lds	r24, 0x00D7
     df4:	8f 77       	andi	r24, 0x7F	; 127
     df6:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dfa:	8c e0       	ldi	r24, 0x0C	; 12
     dfc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     dfe:	8e e0       	ldi	r24, 0x0E	; 14
     e00:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     e02:	09 b4       	in	r0, 0x29	; 41
     e04:	00 fe       	sbrs	r0, 0
     e06:	fd cf       	rjmp	.-6      	; 0xe02 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	80 93 2d 01 	sts	0x012D, r24
	USB_Host_ConfigurationNumber = 0;
     e0e:	10 92 23 01 	sts	0x0123, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     e12:	80 e4       	ldi	r24, 0x40	; 64
     e14:	80 93 1f 01 	sts	0x011F, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     e18:	80 91 d8 00 	lds	r24, 0x00D8
     e1c:	80 64       	ori	r24, 0x40	; 64
     e1e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e22:	80 91 dd 00 	lds	r24, 0x00DD
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     e2c:	80 91 dd 00 	lds	r24, 0x00DD
     e30:	84 60       	ori	r24, 0x04	; 4
     e32:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     e36:	80 91 d7 00 	lds	r24, 0x00D7
     e3a:	8f 7e       	andi	r24, 0xEF	; 239
     e3c:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     e40:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     e42:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     e44:	80 91 de 00 	lds	r24, 0x00DE
     e48:	81 60       	ori	r24, 0x01	; 1
     e4a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     e4e:	80 91 de 00 	lds	r24, 0x00DE
     e52:	84 60       	ori	r24, 0x04	; 4
     e54:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e58:	80 91 e0 00 	lds	r24, 0x00E0
     e5c:	8e 7f       	andi	r24, 0xFE	; 254
     e5e:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     e62:	80 91 d8 00 	lds	r24, 0x00D8
     e66:	80 61       	ori	r24, 0x10	; 16
     e68:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e6c:	08 95       	ret

00000e6e <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     e6e:	e8 ed       	ldi	r30, 0xD8	; 216
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	8f 7e       	andi	r24, 0xEF	; 239
     e76:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     e78:	e7 ed       	ldi	r30, 0xD7	; 215
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	81 60       	ori	r24, 0x01	; 1
     e80:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 93 24 01 	sts	0x0124, r24

	USB_ResetInterface();
}
     e88:	a2 cf       	rjmp	.-188    	; 0xdce <USB_ResetInterface>

00000e8a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e8a:	e8 ed       	ldi	r30, 0xD8	; 216
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	8c 7f       	andi	r24, 0xFC	; 252
     e92:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     e94:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     e98:	08 95       	ret

00000e9a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e9a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     e9e:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     ea2:	08 95       	ret

00000ea4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	0b b6       	in	r0, 0x3b	; 59
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
     eb2:	2f 93       	push	r18
     eb4:	3f 93       	push	r19
     eb6:	4f 93       	push	r20
     eb8:	5f 93       	push	r21
     eba:	6f 93       	push	r22
     ebc:	7f 93       	push	r23
     ebe:	8f 93       	push	r24
     ec0:	9f 93       	push	r25
     ec2:	af 93       	push	r26
     ec4:	bf 93       	push	r27
     ec6:	ef 93       	push	r30
     ec8:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     eca:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     ece:	85 ff       	sbrs	r24, 5
     ed0:	0a c0       	rjmp	.+20     	; 0xee6 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ed2:	80 91 a0 00 	lds	r24, 0x00A0
     ed6:	85 ff       	sbrs	r24, 5
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     eda:	80 91 9f 00 	lds	r24, 0x009F
     ede:	8f 7d       	andi	r24, 0xDF	; 223
     ee0:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     ee4:	0c d1       	rcall	.+536    	; 0x10fe <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     ee6:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     eea:	81 ff       	sbrs	r24, 1
     eec:	15 c0       	rjmp	.+42     	; 0xf18 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     eee:	80 91 a0 00 	lds	r24, 0x00A0
     ef2:	81 ff       	sbrs	r24, 1
     ef4:	11 c0       	rjmp	.+34     	; 0xf18 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ef6:	80 91 9f 00 	lds	r24, 0x009F
     efa:	8d 7f       	andi	r24, 0xFD	; 253
     efc:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     f00:	80 91 9f 00 	lds	r24, 0x009F
     f04:	8e 7f       	andi	r24, 0xFE	; 254
     f06:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     f0a:	80 91 a0 00 	lds	r24, 0x00A0
     f0e:	8d 7f       	andi	r24, 0xFD	; 253
     f10:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     f14:	15 da       	rcall	.-3030   	; 0x340 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     f16:	5b df       	rcall	.-330    	; 0xdce <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     f18:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     f1c:	81 ff       	sbrs	r24, 1
     f1e:	15 c0       	rjmp	.+42     	; 0xf4a <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     f20:	80 91 de 00 	lds	r24, 0x00DE
     f24:	81 ff       	sbrs	r24, 1
     f26:	11 c0       	rjmp	.+34     	; 0xf4a <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     f28:	80 91 df 00 	lds	r24, 0x00DF
     f2c:	8d 7f       	andi	r24, 0xFD	; 253
     f2e:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     f32:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f34:	80 91 dd 00 	lds	r24, 0x00DD
     f38:	81 60       	ori	r24, 0x01	; 1
     f3a:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	7f da       	rcall	.-2818   	; 0x440 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     f42:	fe d9       	rcall	.-3076   	; 0x340 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	80 93 2d 01 	sts	0x012D, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     f4a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     f4e:	80 ff       	sbrs	r24, 0
     f50:	17 c0       	rjmp	.+46     	; 0xf80 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     f52:	80 91 de 00 	lds	r24, 0x00DE
     f56:	80 ff       	sbrs	r24, 0
     f58:	13 c0       	rjmp	.+38     	; 0xf80 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     f5a:	80 91 df 00 	lds	r24, 0x00DF
     f5e:	8e 7f       	andi	r24, 0xFE	; 254
     f60:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     f64:	80 91 de 00 	lds	r24, 0x00DE
     f68:	8e 7f       	andi	r24, 0xFE	; 254
     f6a:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     f6e:	e2 d9       	rcall	.-3132   	; 0x334 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     f70:	80 91 a0 00 	lds	r24, 0x00A0
     f74:	82 60       	ori	r24, 0x02	; 2
     f76:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	80 93 2d 01 	sts	0x012D, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     f80:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     f84:	82 ff       	sbrs	r24, 2
     f86:	0e c0       	rjmp	.+28     	; 0xfa4 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     f88:	80 91 de 00 	lds	r24, 0x00DE
     f8c:	82 ff       	sbrs	r24, 2
     f8e:	0a c0       	rjmp	.+20     	; 0xfa4 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     f90:	80 91 df 00 	lds	r24, 0x00DF
     f94:	8b 7f       	andi	r24, 0xFB	; 251
     f96:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     f9a:	82 e0       	ldi	r24, 0x02	; 2
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 da       	rcall	.-2848   	; 0x480 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     fa0:	cf d9       	rcall	.-3170   	; 0x340 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     fa2:	15 df       	rcall	.-470    	; 0xdce <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0b be       	out	0x3b, r0	; 59
     fc0:	0f 90       	pop	r0
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	0f 90       	pop	r0
     fc6:	1f 90       	pop	r1
     fc8:	18 95       	reti

00000fca <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     fca:	cf 92       	push	r12
     fcc:	df 92       	push	r13
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	29 97       	sbiw	r28, 0x09	; 9
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	6b 01       	movw	r12, r22
     fec:	8a 01       	movw	r16, r20
     fee:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ff0:	90 e8       	ldi	r25, 0x80	; 128
     ff2:	90 93 25 01 	sts	0x0125, r25
     ff6:	96 e0       	ldi	r25, 0x06	; 6
     ff8:	90 93 26 01 	sts	0x0126, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1002:	90 93 28 01 	sts	0x0128, r25
    1006:	80 93 27 01 	sts	0x0127, r24
    100a:	10 92 2a 01 	sts	0x012A, r1
    100e:	10 92 29 01 	sts	0x0129, r1
    1012:	89 e0       	ldi	r24, 0x09	; 9
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	90 93 2c 01 	sts	0x012C, r25
    101a:	80 93 2b 01 	sts	0x012B, r24
    101e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1022:	ce 01       	movw	r24, r28
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	95 d0       	rcall	.+298    	; 0x1152 <USB_Host_SendControlRequest>
    1028:	88 23       	and	r24, r24
    102a:	b9 f4       	brne	.+46     	; 0x105a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	f6 01       	movw	r30, r12
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1036:	e8 16       	cp	r14, r24
    1038:	f9 06       	cpc	r15, r25
    103a:	70 f0       	brcs	.+28     	; 0x1058 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    103c:	90 93 2c 01 	sts	0x012C, r25
    1040:	80 93 2b 01 	sts	0x012B, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1044:	c8 01       	movw	r24, r16
    1046:	85 d0       	rcall	.+266    	; 0x1152 <USB_Host_SendControlRequest>
    1048:	88 23       	and	r24, r24
    104a:	39 f4       	brne	.+14     	; 0x105a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    104c:	f8 01       	movw	r30, r16
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	92 30       	cpi	r25, 0x02	; 2
    1052:	19 f0       	breq	.+6      	; 0x105a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1054:	86 e0       	ldi	r24, 0x06	; 6
    1056:	01 c0       	rjmp	.+2      	; 0x105a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1058:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    105a:	29 96       	adiw	r28, 0x09	; 9
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	08 95       	ret

00001078 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1078:	af 92       	push	r10
    107a:	bf 92       	push	r11
    107c:	cf 92       	push	r12
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	8c 01       	movw	r16, r24
    108e:	eb 01       	movw	r28, r22
    1090:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1092:	23 c0       	rjmp	.+70     	; 0x10da <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1094:	e8 81       	ld	r30, Y
    1096:	f9 81       	ldd	r31, Y+1	; 0x01
    1098:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    109a:	20 81       	ld	r18, Z
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	c7 01       	movw	r24, r14
    10a0:	2e 15       	cp	r18, r14
    10a2:	3f 05       	cpc	r19, r15
    10a4:	08 f4       	brcc	.+2      	; 0x10a8 <USB_GetNextDescriptorComp+0x30>
    10a6:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    10a8:	e8 0f       	add	r30, r24
    10aa:	f9 1f       	adc	r31, r25
    10ac:	f9 83       	std	Y+1, r31	; 0x01
    10ae:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    10b0:	f8 01       	movw	r30, r16
    10b2:	20 81       	ld	r18, Z
    10b4:	31 81       	ldd	r19, Z+1	; 0x01
    10b6:	28 1b       	sub	r18, r24
    10b8:	39 0b       	sbc	r19, r25
    10ba:	31 83       	std	Z+1, r19	; 0x01
    10bc:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    10be:	88 81       	ld	r24, Y
    10c0:	99 81       	ldd	r25, Y+1	; 0x01
    10c2:	f6 01       	movw	r30, r12
    10c4:	09 95       	icall
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	41 f0       	breq	.+16     	; 0x10da <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	69 f4       	brne	.+26     	; 0x10e8 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    10ce:	a8 82       	st	Y, r10
    10d0:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    10d2:	f8 01       	movw	r30, r16
    10d4:	f1 82       	std	Z+1, r15	; 0x01
    10d6:	e0 82       	st	Z, r14
    10d8:	07 c0       	rjmp	.+14     	; 0x10e8 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    10da:	f8 01       	movw	r30, r16
    10dc:	e0 80       	ld	r14, Z
    10de:	f1 80       	ldd	r15, Z+1	; 0x01
    10e0:	e1 14       	cp	r14, r1
    10e2:	f1 04       	cpc	r15, r1
    10e4:	b9 f6       	brne	.-82     	; 0x1094 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    10e6:	82 e0       	ldi	r24, 0x02	; 2
}
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	bf 90       	pop	r11
    10fa:	af 90       	pop	r10
    10fc:	08 95       	ret

000010fe <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    10fe:	08 95       	ret

00001100 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1108:	c8 ee       	ldi	r28, 0xE8	; 232
    110a:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    110c:	07 c0       	rjmp	.+14     	; 0x111c <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	b9 db       	rcall	.-2190   	; 0x884 <USB_Host_WaitMS>
    1112:	88 23       	and	r24, r24
    1114:	d1 f4       	brne	.+52     	; 0x114a <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1116:	20 97       	sbiw	r28, 0x00	; 0
    1118:	b9 f0       	breq	.+46     	; 0x1148 <USB_Host_WaitForIOS+0x48>
    111a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    111c:	11 23       	and	r17, r17
    111e:	29 f4       	brne	.+10     	; 0x112a <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1120:	80 91 a6 00 	lds	r24, 0x00A6
    1124:	83 ff       	sbrs	r24, 3
    1126:	f3 cf       	rjmp	.-26     	; 0x110e <USB_Host_WaitForIOS+0xe>
    1128:	0d c0       	rjmp	.+26     	; 0x1144 <USB_Host_WaitForIOS+0x44>
    112a:	11 30       	cpi	r17, 0x01	; 1
    112c:	29 f4       	brne	.+10     	; 0x1138 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    112e:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1132:	80 ff       	sbrs	r24, 0
    1134:	ec cf       	rjmp	.-40     	; 0x110e <USB_Host_WaitForIOS+0xe>
    1136:	06 c0       	rjmp	.+12     	; 0x1144 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1138:	12 30       	cpi	r17, 0x02	; 2
    113a:	49 f7       	brne	.-46     	; 0x110e <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    113c:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1140:	82 ff       	sbrs	r24, 2
    1142:	e5 cf       	rjmp	.-54     	; 0x110e <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	01 c0       	rjmp	.+2      	; 0x114a <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1148:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	08 95       	ret

00001152 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1160:	e0 90 9e 00 	lds	r14, 0x009E
    1164:	ff 24       	eor	r15, r15
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	e8 22       	and	r14, r24
    116a:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    116c:	c0 91 2b 01 	lds	r28, 0x012B
    1170:	d0 91 2c 01 	lds	r29, 0x012C
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1174:	80 91 9e 00 	lds	r24, 0x009E
    1178:	81 60       	ori	r24, 0x01	; 1
    117a:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	81 db       	rcall	.-2302   	; 0x884 <USB_Host_WaitMS>
    1182:	88 23       	and	r24, r24
    1184:	09 f0       	breq	.+2      	; 0x1188 <USB_Host_SendControlRequest+0x36>
    1186:	cb c0       	rjmp	.+406    	; 0x131e <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1188:	80 91 aa 00 	lds	r24, 0x00AA
    118c:	8f 7c       	andi	r24, 0xCF	; 207
    118e:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1192:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1196:	80 91 a6 00 	lds	r24, 0x00A6
    119a:	8f 7e       	andi	r24, 0xEF	; 239
    119c:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11a0:	80 91 a9 00 	lds	r24, 0x00A9
    11a4:	8f 7b       	andi	r24, 0xBF	; 191
    11a6:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    11aa:	e5 e2       	ldi	r30, 0x25	; 37
    11ac:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    11ae:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11b0:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	ed 32       	cpi	r30, 0x2D	; 45
    11b8:	f8 07       	cpc	r31, r24
    11ba:	c9 f7       	brne	.-14     	; 0x11ae <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    11bc:	80 91 a6 00 	lds	r24, 0x00A6
    11c0:	87 77       	andi	r24, 0x77	; 119
    11c2:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	9b df       	rcall	.-202    	; 0x1100 <USB_Host_WaitForIOS>
    11ca:	88 23       	and	r24, r24
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <USB_Host_SendControlRequest+0x7e>
    11ce:	a7 c0       	rjmp	.+334    	; 0x131e <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11d0:	80 91 a9 00 	lds	r24, 0x00A9
    11d4:	80 64       	ori	r24, 0x40	; 64
    11d6:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	53 db       	rcall	.-2394   	; 0x884 <USB_Host_WaitMS>
    11de:	88 23       	and	r24, r24
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <USB_Host_SendControlRequest+0x92>
    11e2:	9d c0       	rjmp	.+314    	; 0x131e <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    11e4:	80 91 25 01 	lds	r24, 0x0125
    11e8:	87 ff       	sbrs	r24, 7
    11ea:	4f c0       	rjmp	.+158    	; 0x128a <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11ec:	80 91 aa 00 	lds	r24, 0x00AA
    11f0:	8f 7c       	andi	r24, 0xCF	; 207
    11f2:	80 61       	ori	r24, 0x10	; 16
    11f4:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    11f8:	01 15       	cp	r16, r1
    11fa:	11 05       	cpc	r17, r1
    11fc:	61 f5       	brne	.+88     	; 0x1256 <USB_Host_SendControlRequest+0x104>
    11fe:	2d c0       	rjmp	.+90     	; 0x125a <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1200:	80 91 a9 00 	lds	r24, 0x00A9
    1204:	8f 7b       	andi	r24, 0xBF	; 191
    1206:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	79 df       	rcall	.-270    	; 0x1100 <USB_Host_WaitForIOS>
    120e:	88 23       	and	r24, r24
    1210:	09 f0       	breq	.+2      	; 0x1214 <USB_Host_SendControlRequest+0xc2>
    1212:	85 c0       	rjmp	.+266    	; 0x131e <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1214:	80 91 f6 00 	lds	r24, 0x00F6
    1218:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	49 f4       	brne	.+18     	; 0x1232 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1220:	c0 e0       	ldi	r28, 0x00	; 0
    1222:	d0 e0       	ldi	r29, 0x00	; 0
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1226:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    122a:	f8 01       	movw	r30, r16
    122c:	81 93       	st	Z+, r24
    122e:	8f 01       	movw	r16, r30
					DataLen--;
    1230:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1232:	80 91 f6 00 	lds	r24, 0x00F6
    1236:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	11 f0       	breq	.+4      	; 0x1242 <USB_Host_SendControlRequest+0xf0>
    123e:	20 97       	sbiw	r28, 0x00	; 0
    1240:	91 f7       	brne	.-28     	; 0x1226 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1242:	80 91 a9 00 	lds	r24, 0x00A9
    1246:	80 64       	ori	r24, 0x40	; 64
    1248:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    124c:	80 91 a6 00 	lds	r24, 0x00A6
    1250:	8e 77       	andi	r24, 0x7E	; 126
    1252:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1256:	20 97       	sbiw	r28, 0x00	; 0
    1258:	99 f6       	brne	.-90     	; 0x1200 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    125a:	80 91 aa 00 	lds	r24, 0x00AA
    125e:	8f 7c       	andi	r24, 0xCF	; 207
    1260:	80 62       	ori	r24, 0x20	; 32
    1262:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1266:	80 91 a9 00 	lds	r24, 0x00A9
    126a:	8f 7b       	andi	r24, 0xBF	; 191
    126c:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	46 df       	rcall	.-372    	; 0x1100 <USB_Host_WaitForIOS>
    1274:	88 23       	and	r24, r24
    1276:	09 f0       	breq	.+2      	; 0x127a <USB_Host_SendControlRequest+0x128>
    1278:	52 c0       	rjmp	.+164    	; 0x131e <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    127a:	80 91 a6 00 	lds	r24, 0x00A6
    127e:	8b 77       	andi	r24, 0x7B	; 123
    1280:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	3c df       	rcall	.-392    	; 0x1100 <USB_Host_WaitForIOS>
    1288:	4a c0       	rjmp	.+148    	; 0x131e <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    128a:	01 15       	cp	r16, r1
    128c:	11 05       	cpc	r17, r1
    128e:	99 f1       	breq	.+102    	; 0x12f6 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1290:	80 91 aa 00 	lds	r24, 0x00AA
    1294:	8f 7c       	andi	r24, 0xCF	; 207
    1296:	80 62       	ori	r24, 0x20	; 32
    1298:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    129c:	80 91 a9 00 	lds	r24, 0x00A9
    12a0:	8f 7b       	andi	r24, 0xBF	; 191
    12a2:	80 93 a9 00 	sts	0x00A9, r24
    12a6:	1c c0       	rjmp	.+56     	; 0x12e0 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	2a df       	rcall	.-428    	; 0x1100 <USB_Host_WaitForIOS>
    12ac:	88 23       	and	r24, r24
    12ae:	b9 f5       	brne	.+110    	; 0x131e <USB_Host_SendControlRequest+0x1cc>
    12b0:	f8 01       	movw	r30, r16
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    12b4:	81 91       	ld	r24, Z+
    12b6:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    12b8:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    12bc:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    12be:	59 f0       	breq	.+22     	; 0x12d6 <USB_Host_SendControlRequest+0x184>
    12c0:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    12c2:	20 91 f6 00 	lds	r18, 0x00F6
    12c6:	30 91 f7 00 	lds	r19, 0x00F7
    12ca:	80 91 1f 01 	lds	r24, 0x011F
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	28 17       	cp	r18, r24
    12d2:	39 07       	cpc	r19, r25
    12d4:	78 f3       	brcs	.-34     	; 0x12b4 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    12d6:	80 91 a6 00 	lds	r24, 0x00A6
    12da:	8b 77       	andi	r24, 0x7B	; 123
    12dc:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    12e0:	20 97       	sbiw	r28, 0x00	; 0
    12e2:	11 f7       	brne	.-60     	; 0x12a8 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	0c df       	rcall	.-488    	; 0x1100 <USB_Host_WaitForIOS>
    12e8:	88 23       	and	r24, r24
    12ea:	c9 f4       	brne	.+50     	; 0x131e <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12ec:	80 91 a9 00 	lds	r24, 0x00A9
    12f0:	80 64       	ori	r24, 0x40	; 64
    12f2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12f6:	80 91 aa 00 	lds	r24, 0x00AA
    12fa:	8f 7c       	andi	r24, 0xCF	; 207
    12fc:	80 61       	ori	r24, 0x10	; 16
    12fe:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1302:	80 91 a9 00 	lds	r24, 0x00A9
    1306:	8f 7b       	andi	r24, 0xBF	; 191
    1308:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	f8 de       	rcall	.-528    	; 0x1100 <USB_Host_WaitForIOS>
    1310:	88 23       	and	r24, r24
    1312:	29 f4       	brne	.+10     	; 0x131e <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1314:	90 91 a6 00 	lds	r25, 0x00A6
    1318:	9e 77       	andi	r25, 0x7E	; 126
    131a:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    131e:	90 91 a9 00 	lds	r25, 0x00A9
    1322:	90 64       	ori	r25, 0x40	; 64
    1324:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1328:	e1 14       	cp	r14, r1
    132a:	f1 04       	cpc	r15, r1
    132c:	29 f4       	brne	.+10     	; 0x1338 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    132e:	90 91 9e 00 	lds	r25, 0x009E
    1332:	9e 7f       	andi	r25, 0xFE	; 254
    1334:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    133e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	08 95       	ret

00001350 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1350:	1f 93       	push	r17
    1352:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1354:	10 92 25 01 	sts	0x0125, r1
    1358:	89 e0       	ldi	r24, 0x09	; 9
    135a:	80 93 26 01 	sts	0x0126, r24
    135e:	10 93 27 01 	sts	0x0127, r17
    1362:	10 92 28 01 	sts	0x0128, r1
    1366:	10 92 2a 01 	sts	0x012A, r1
    136a:	10 92 29 01 	sts	0x0129, r1
    136e:	10 92 2c 01 	sts	0x012C, r1
    1372:	10 92 2b 01 	sts	0x012B, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1376:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	e9 de       	rcall	.-558    	; 0x1152 <USB_Host_SendControlRequest>
    1380:	88 23       	and	r24, r24
    1382:	49 f4       	brne	.+18     	; 0x1396 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1384:	10 93 23 01 	sts	0x0123, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1388:	11 23       	and	r17, r17
    138a:	11 f0       	breq	.+4      	; 0x1390 <USB_Host_SetDeviceConfiguration+0x40>
    138c:	9b e0       	ldi	r25, 0x0B	; 11
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <USB_Host_SetDeviceConfiguration+0x42>
    1390:	9a e0       	ldi	r25, 0x0A	; 10
    1392:	90 93 2d 01 	sts	0x012D, r25
	}

	return ErrorCode;
}
    1396:	1f 91       	pop	r17
    1398:	08 95       	ret

0000139a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    139a:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    139c:	10 91 a7 00 	lds	r17, 0x00A7
    13a0:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    13a2:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13a6:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    13aa:	c1 da       	rcall	.-2686   	; 0x92e <USB_Host_ProcessNextHostState>
    13ac:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    13b0:	1f 91       	pop	r17
    13b2:	08 95       	ret

000013b4 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    13b4:	90 91 c8 00 	lds	r25, 0x00C8
    13b8:	95 ff       	sbrs	r25, 5
    13ba:	fc cf       	rjmp	.-8      	; 0x13b4 <Serial_putchar>
				UDR1 = DataByte;
    13bc:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	08 95       	ret

000013c6 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    13c6:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    13ca:	87 ff       	sbrs	r24, 7
    13cc:	08 c0       	rjmp	.+16     	; 0x13de <Serial_getchar+0x18>
    13ce:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    13d2:	87 ff       	sbrs	r24, 7
    13d4:	07 c0       	rjmp	.+14     	; 0x13e4 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    13d6:	20 91 ce 00 	lds	r18, 0x00CE
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	05 c0       	rjmp	.+10     	; 0x13e8 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    13de:	2e ef       	ldi	r18, 0xFE	; 254
    13e0:	3f ef       	ldi	r19, 0xFF	; 255
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    13e4:	2f ef       	ldi	r18, 0xFF	; 255
    13e6:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    13e8:	c9 01       	movw	r24, r18
    13ea:	08 95       	ret

000013ec <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    13ec:	fc 01       	movw	r30, r24
	if (!(Stream))
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	51 f4       	brne	.+20     	; 0x1406 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    13f2:	ee e2       	ldi	r30, 0x2E	; 46
    13f4:	f1 e0       	ldi	r31, 0x01	; 1
    13f6:	f0 93 3d 01 	sts	0x013D, r31
    13fa:	e0 93 3c 01 	sts	0x013C, r30
		stdout = Stream;
    13fe:	f0 93 3f 01 	sts	0x013F, r31
    1402:	e0 93 3e 01 	sts	0x013E, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1406:	8e e0       	ldi	r24, 0x0E	; 14
    1408:	df 01       	movw	r26, r30
    140a:	1d 92       	st	X+, r1
    140c:	8a 95       	dec	r24
    140e:	e9 f7       	brne	.-6      	; 0x140a <Serial_CreateStream+0x1e>
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	83 83       	std	Z+3, r24	; 0x03
    1414:	8a ed       	ldi	r24, 0xDA	; 218
    1416:	99 e0       	ldi	r25, 0x09	; 9
    1418:	91 87       	std	Z+9, r25	; 0x09
    141a:	80 87       	std	Z+8, r24	; 0x08
    141c:	83 ee       	ldi	r24, 0xE3	; 227
    141e:	99 e0       	ldi	r25, 0x09	; 9
    1420:	93 87       	std	Z+11, r25	; 0x0b
    1422:	82 87       	std	Z+10, r24	; 0x0a
}
    1424:	08 95       	ret

00001426 <fputc>:
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	8c 01       	movw	r16, r24
    1430:	eb 01       	movw	r28, r22
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	81 ff       	sbrs	r24, 1
    1436:	1b c0       	rjmp	.+54     	; 0x146e <fputc+0x48>
    1438:	82 ff       	sbrs	r24, 2
    143a:	0d c0       	rjmp	.+26     	; 0x1456 <fputc+0x30>
    143c:	2e 81       	ldd	r18, Y+6	; 0x06
    143e:	3f 81       	ldd	r19, Y+7	; 0x07
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	9d 81       	ldd	r25, Y+5	; 0x05
    1444:	28 17       	cp	r18, r24
    1446:	39 07       	cpc	r19, r25
    1448:	64 f4       	brge	.+24     	; 0x1462 <fputc+0x3c>
    144a:	e8 81       	ld	r30, Y
    144c:	f9 81       	ldd	r31, Y+1	; 0x01
    144e:	01 93       	st	Z+, r16
    1450:	f9 83       	std	Y+1, r31	; 0x01
    1452:	e8 83       	st	Y, r30
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <fputc+0x3c>
    1456:	e8 85       	ldd	r30, Y+8	; 0x08
    1458:	f9 85       	ldd	r31, Y+9	; 0x09
    145a:	80 2f       	mov	r24, r16
    145c:	09 95       	icall
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	31 f4       	brne	.+12     	; 0x146e <fputc+0x48>
    1462:	8e 81       	ldd	r24, Y+6	; 0x06
    1464:	9f 81       	ldd	r25, Y+7	; 0x07
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	9f 83       	std	Y+7, r25	; 0x07
    146a:	8e 83       	std	Y+6, r24	; 0x06
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <fputc+0x4c>
    146e:	0f ef       	ldi	r16, 0xFF	; 255
    1470:	1f ef       	ldi	r17, 0xFF	; 255
    1472:	c8 01       	movw	r24, r16
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	08 95       	ret

0000147e <printf_P>:
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	fe 01       	movw	r30, r28
    1488:	35 96       	adiw	r30, 0x05	; 5
    148a:	61 91       	ld	r22, Z+
    148c:	71 91       	ld	r23, Z+
    148e:	80 91 3e 01 	lds	r24, 0x013E
    1492:	90 91 3f 01 	lds	r25, 0x013F
    1496:	dc 01       	movw	r26, r24
    1498:	13 96       	adiw	r26, 0x03	; 3
    149a:	2c 91       	ld	r18, X
    149c:	13 97       	sbiw	r26, 0x03	; 3
    149e:	28 60       	ori	r18, 0x08	; 8
    14a0:	13 96       	adiw	r26, 0x03	; 3
    14a2:	2c 93       	st	X, r18
    14a4:	af 01       	movw	r20, r30
    14a6:	42 d0       	rcall	.+132    	; 0x152c <vfprintf>
    14a8:	e0 91 3e 01 	lds	r30, 0x013E
    14ac:	f0 91 3f 01 	lds	r31, 0x013F
    14b0:	23 81       	ldd	r18, Z+3	; 0x03
    14b2:	27 7f       	andi	r18, 0xF7	; 247
    14b4:	23 83       	std	Z+3, r18	; 0x03
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <puts_P>:
    14bc:	ef 92       	push	r14
    14be:	ff 92       	push	r15
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	8c 01       	movw	r16, r24
    14ca:	e0 91 3e 01 	lds	r30, 0x013E
    14ce:	f0 91 3f 01 	lds	r31, 0x013F
    14d2:	83 81       	ldd	r24, Z+3	; 0x03
    14d4:	81 ff       	sbrs	r24, 1
    14d6:	20 c0       	rjmp	.+64     	; 0x1518 <puts_P+0x5c>
    14d8:	c0 e0       	ldi	r28, 0x00	; 0
    14da:	d0 e0       	ldi	r29, 0x00	; 0
    14dc:	0c c0       	rjmp	.+24     	; 0x14f6 <puts_P+0x3a>
    14de:	db 01       	movw	r26, r22
    14e0:	18 96       	adiw	r26, 0x08	; 8
    14e2:	ed 91       	ld	r30, X+
    14e4:	fc 91       	ld	r31, X
    14e6:	19 97       	sbiw	r26, 0x09	; 9
    14e8:	09 95       	icall
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	11 f0       	breq	.+4      	; 0x14f2 <puts_P+0x36>
    14ee:	cf ef       	ldi	r28, 0xFF	; 255
    14f0:	df ef       	ldi	r29, 0xFF	; 255
    14f2:	0f 5f       	subi	r16, 0xFF	; 255
    14f4:	1f 4f       	sbci	r17, 0xFF	; 255
    14f6:	f8 01       	movw	r30, r16
    14f8:	84 91       	lpm	r24, Z+
    14fa:	60 91 3e 01 	lds	r22, 0x013E
    14fe:	70 91 3f 01 	lds	r23, 0x013F
    1502:	88 23       	and	r24, r24
    1504:	61 f7       	brne	.-40     	; 0x14de <puts_P+0x22>
    1506:	db 01       	movw	r26, r22
    1508:	18 96       	adiw	r26, 0x08	; 8
    150a:	ed 91       	ld	r30, X+
    150c:	fc 91       	ld	r31, X
    150e:	19 97       	sbiw	r26, 0x09	; 9
    1510:	8a e0       	ldi	r24, 0x0A	; 10
    1512:	09 95       	icall
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	11 f0       	breq	.+4      	; 0x151c <puts_P+0x60>
    1518:	cf ef       	ldi	r28, 0xFF	; 255
    151a:	df ef       	ldi	r29, 0xFF	; 255
    151c:	ce 01       	movw	r24, r28
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	ff 90       	pop	r15
    1528:	ef 90       	pop	r14
    152a:	08 95       	ret

0000152c <vfprintf>:
    152c:	2f 92       	push	r2
    152e:	3f 92       	push	r3
    1530:	4f 92       	push	r4
    1532:	5f 92       	push	r5
    1534:	6f 92       	push	r6
    1536:	7f 92       	push	r7
    1538:	8f 92       	push	r8
    153a:	9f 92       	push	r9
    153c:	af 92       	push	r10
    153e:	bf 92       	push	r11
    1540:	cf 92       	push	r12
    1542:	df 92       	push	r13
    1544:	ef 92       	push	r14
    1546:	ff 92       	push	r15
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	2c 97       	sbiw	r28, 0x0c	; 12
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	6c 01       	movw	r12, r24
    1562:	1b 01       	movw	r2, r22
    1564:	8a 01       	movw	r16, r20
    1566:	fc 01       	movw	r30, r24
    1568:	17 82       	std	Z+7, r1	; 0x07
    156a:	16 82       	std	Z+6, r1	; 0x06
    156c:	83 81       	ldd	r24, Z+3	; 0x03
    156e:	81 ff       	sbrs	r24, 1
    1570:	c4 c1       	rjmp	.+904    	; 0x18fa <vfprintf+0x3ce>
    1572:	2e 01       	movw	r4, r28
    1574:	08 94       	sec
    1576:	41 1c       	adc	r4, r1
    1578:	51 1c       	adc	r5, r1
    157a:	f6 01       	movw	r30, r12
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	f1 01       	movw	r30, r2
    1580:	93 fd       	sbrc	r25, 3
    1582:	85 91       	lpm	r24, Z+
    1584:	93 ff       	sbrs	r25, 3
    1586:	81 91       	ld	r24, Z+
    1588:	1f 01       	movw	r2, r30
    158a:	88 23       	and	r24, r24
    158c:	09 f4       	brne	.+2      	; 0x1590 <vfprintf+0x64>
    158e:	b1 c1       	rjmp	.+866    	; 0x18f2 <vfprintf+0x3c6>
    1590:	85 32       	cpi	r24, 0x25	; 37
    1592:	39 f4       	brne	.+14     	; 0x15a2 <vfprintf+0x76>
    1594:	93 fd       	sbrc	r25, 3
    1596:	85 91       	lpm	r24, Z+
    1598:	93 ff       	sbrs	r25, 3
    159a:	81 91       	ld	r24, Z+
    159c:	1f 01       	movw	r2, r30
    159e:	85 32       	cpi	r24, 0x25	; 37
    15a0:	21 f4       	brne	.+8      	; 0x15aa <vfprintf+0x7e>
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	b6 01       	movw	r22, r12
    15a6:	3f df       	rcall	.-386    	; 0x1426 <fputc>
    15a8:	e8 cf       	rjmp	.-48     	; 0x157a <vfprintf+0x4e>
    15aa:	ee 24       	eor	r14, r14
    15ac:	ff 24       	eor	r15, r15
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	20 32       	cpi	r18, 0x20	; 32
    15b2:	b0 f4       	brcc	.+44     	; 0x15e0 <vfprintf+0xb4>
    15b4:	8b 32       	cpi	r24, 0x2B	; 43
    15b6:	69 f0       	breq	.+26     	; 0x15d2 <vfprintf+0xa6>
    15b8:	8c 32       	cpi	r24, 0x2C	; 44
    15ba:	28 f4       	brcc	.+10     	; 0x15c6 <vfprintf+0x9a>
    15bc:	80 32       	cpi	r24, 0x20	; 32
    15be:	51 f0       	breq	.+20     	; 0x15d4 <vfprintf+0xa8>
    15c0:	83 32       	cpi	r24, 0x23	; 35
    15c2:	71 f4       	brne	.+28     	; 0x15e0 <vfprintf+0xb4>
    15c4:	0b c0       	rjmp	.+22     	; 0x15dc <vfprintf+0xb0>
    15c6:	8d 32       	cpi	r24, 0x2D	; 45
    15c8:	39 f0       	breq	.+14     	; 0x15d8 <vfprintf+0xac>
    15ca:	80 33       	cpi	r24, 0x30	; 48
    15cc:	49 f4       	brne	.+18     	; 0x15e0 <vfprintf+0xb4>
    15ce:	21 60       	ori	r18, 0x01	; 1
    15d0:	2c c0       	rjmp	.+88     	; 0x162a <vfprintf+0xfe>
    15d2:	22 60       	ori	r18, 0x02	; 2
    15d4:	24 60       	ori	r18, 0x04	; 4
    15d6:	29 c0       	rjmp	.+82     	; 0x162a <vfprintf+0xfe>
    15d8:	28 60       	ori	r18, 0x08	; 8
    15da:	27 c0       	rjmp	.+78     	; 0x162a <vfprintf+0xfe>
    15dc:	20 61       	ori	r18, 0x10	; 16
    15de:	25 c0       	rjmp	.+74     	; 0x162a <vfprintf+0xfe>
    15e0:	27 fd       	sbrc	r18, 7
    15e2:	2c c0       	rjmp	.+88     	; 0x163c <vfprintf+0x110>
    15e4:	38 2f       	mov	r19, r24
    15e6:	30 53       	subi	r19, 0x30	; 48
    15e8:	3a 30       	cpi	r19, 0x0A	; 10
    15ea:	98 f4       	brcc	.+38     	; 0x1612 <vfprintf+0xe6>
    15ec:	26 ff       	sbrs	r18, 6
    15ee:	08 c0       	rjmp	.+16     	; 0x1600 <vfprintf+0xd4>
    15f0:	8e 2d       	mov	r24, r14
    15f2:	88 0f       	add	r24, r24
    15f4:	e8 2e       	mov	r14, r24
    15f6:	ee 0c       	add	r14, r14
    15f8:	ee 0c       	add	r14, r14
    15fa:	e8 0e       	add	r14, r24
    15fc:	e3 0e       	add	r14, r19
    15fe:	15 c0       	rjmp	.+42     	; 0x162a <vfprintf+0xfe>
    1600:	8f 2d       	mov	r24, r15
    1602:	88 0f       	add	r24, r24
    1604:	f8 2e       	mov	r15, r24
    1606:	ff 0c       	add	r15, r15
    1608:	ff 0c       	add	r15, r15
    160a:	f8 0e       	add	r15, r24
    160c:	f3 0e       	add	r15, r19
    160e:	20 62       	ori	r18, 0x20	; 32
    1610:	0c c0       	rjmp	.+24     	; 0x162a <vfprintf+0xfe>
    1612:	8e 32       	cpi	r24, 0x2E	; 46
    1614:	21 f4       	brne	.+8      	; 0x161e <vfprintf+0xf2>
    1616:	26 fd       	sbrc	r18, 6
    1618:	6c c1       	rjmp	.+728    	; 0x18f2 <vfprintf+0x3c6>
    161a:	20 64       	ori	r18, 0x40	; 64
    161c:	06 c0       	rjmp	.+12     	; 0x162a <vfprintf+0xfe>
    161e:	8c 36       	cpi	r24, 0x6C	; 108
    1620:	11 f4       	brne	.+4      	; 0x1626 <vfprintf+0xfa>
    1622:	20 68       	ori	r18, 0x80	; 128
    1624:	02 c0       	rjmp	.+4      	; 0x162a <vfprintf+0xfe>
    1626:	88 36       	cpi	r24, 0x68	; 104
    1628:	49 f4       	brne	.+18     	; 0x163c <vfprintf+0x110>
    162a:	f1 01       	movw	r30, r2
    162c:	93 fd       	sbrc	r25, 3
    162e:	85 91       	lpm	r24, Z+
    1630:	93 ff       	sbrs	r25, 3
    1632:	81 91       	ld	r24, Z+
    1634:	1f 01       	movw	r2, r30
    1636:	88 23       	and	r24, r24
    1638:	09 f0       	breq	.+2      	; 0x163c <vfprintf+0x110>
    163a:	ba cf       	rjmp	.-140    	; 0x15b0 <vfprintf+0x84>
    163c:	98 2f       	mov	r25, r24
    163e:	95 54       	subi	r25, 0x45	; 69
    1640:	93 30       	cpi	r25, 0x03	; 3
    1642:	18 f0       	brcs	.+6      	; 0x164a <vfprintf+0x11e>
    1644:	90 52       	subi	r25, 0x20	; 32
    1646:	93 30       	cpi	r25, 0x03	; 3
    1648:	28 f4       	brcc	.+10     	; 0x1654 <vfprintf+0x128>
    164a:	0c 5f       	subi	r16, 0xFC	; 252
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	ff e3       	ldi	r31, 0x3F	; 63
    1650:	f9 83       	std	Y+1, r31	; 0x01
    1652:	0d c0       	rjmp	.+26     	; 0x166e <vfprintf+0x142>
    1654:	83 36       	cpi	r24, 0x63	; 99
    1656:	31 f0       	breq	.+12     	; 0x1664 <vfprintf+0x138>
    1658:	83 37       	cpi	r24, 0x73	; 115
    165a:	71 f0       	breq	.+28     	; 0x1678 <vfprintf+0x14c>
    165c:	83 35       	cpi	r24, 0x53	; 83
    165e:	09 f0       	breq	.+2      	; 0x1662 <vfprintf+0x136>
    1660:	5c c0       	rjmp	.+184    	; 0x171a <vfprintf+0x1ee>
    1662:	21 c0       	rjmp	.+66     	; 0x16a6 <vfprintf+0x17a>
    1664:	f8 01       	movw	r30, r16
    1666:	80 81       	ld	r24, Z
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	0e 5f       	subi	r16, 0xFE	; 254
    166c:	1f 4f       	sbci	r17, 0xFF	; 255
    166e:	42 01       	movw	r8, r4
    1670:	71 e0       	ldi	r23, 0x01	; 1
    1672:	a7 2e       	mov	r10, r23
    1674:	b1 2c       	mov	r11, r1
    1676:	15 c0       	rjmp	.+42     	; 0x16a2 <vfprintf+0x176>
    1678:	62 e0       	ldi	r22, 0x02	; 2
    167a:	66 2e       	mov	r6, r22
    167c:	71 2c       	mov	r7, r1
    167e:	60 0e       	add	r6, r16
    1680:	71 1e       	adc	r7, r17
    1682:	f8 01       	movw	r30, r16
    1684:	80 80       	ld	r8, Z
    1686:	91 80       	ldd	r9, Z+1	; 0x01
    1688:	26 ff       	sbrs	r18, 6
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <vfprintf+0x166>
    168c:	6e 2d       	mov	r22, r14
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <vfprintf+0x16a>
    1692:	6f ef       	ldi	r22, 0xFF	; 255
    1694:	7f ef       	ldi	r23, 0xFF	; 255
    1696:	c4 01       	movw	r24, r8
    1698:	2c 87       	std	Y+12, r18	; 0x0c
    169a:	56 d1       	rcall	.+684    	; 0x1948 <strnlen>
    169c:	5c 01       	movw	r10, r24
    169e:	83 01       	movw	r16, r6
    16a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    16a2:	2f 77       	andi	r18, 0x7F	; 127
    16a4:	16 c0       	rjmp	.+44     	; 0x16d2 <vfprintf+0x1a6>
    16a6:	52 e0       	ldi	r21, 0x02	; 2
    16a8:	65 2e       	mov	r6, r21
    16aa:	71 2c       	mov	r7, r1
    16ac:	60 0e       	add	r6, r16
    16ae:	71 1e       	adc	r7, r17
    16b0:	f8 01       	movw	r30, r16
    16b2:	80 80       	ld	r8, Z
    16b4:	91 80       	ldd	r9, Z+1	; 0x01
    16b6:	26 ff       	sbrs	r18, 6
    16b8:	03 c0       	rjmp	.+6      	; 0x16c0 <vfprintf+0x194>
    16ba:	6e 2d       	mov	r22, r14
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <vfprintf+0x198>
    16c0:	6f ef       	ldi	r22, 0xFF	; 255
    16c2:	7f ef       	ldi	r23, 0xFF	; 255
    16c4:	c4 01       	movw	r24, r8
    16c6:	2c 87       	std	Y+12, r18	; 0x0c
    16c8:	34 d1       	rcall	.+616    	; 0x1932 <strnlen_P>
    16ca:	5c 01       	movw	r10, r24
    16cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ce:	20 68       	ori	r18, 0x80	; 128
    16d0:	83 01       	movw	r16, r6
    16d2:	23 fd       	sbrc	r18, 3
    16d4:	1e c0       	rjmp	.+60     	; 0x1712 <vfprintf+0x1e6>
    16d6:	07 c0       	rjmp	.+14     	; 0x16e6 <vfprintf+0x1ba>
    16d8:	80 e2       	ldi	r24, 0x20	; 32
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	b6 01       	movw	r22, r12
    16de:	2c 87       	std	Y+12, r18	; 0x0c
    16e0:	a2 de       	rcall	.-700    	; 0x1426 <fputc>
    16e2:	fa 94       	dec	r15
    16e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    16e6:	8f 2d       	mov	r24, r15
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	a8 16       	cp	r10, r24
    16ec:	b9 06       	cpc	r11, r25
    16ee:	a0 f3       	brcs	.-24     	; 0x16d8 <vfprintf+0x1ac>
    16f0:	10 c0       	rjmp	.+32     	; 0x1712 <vfprintf+0x1e6>
    16f2:	f4 01       	movw	r30, r8
    16f4:	27 fd       	sbrc	r18, 7
    16f6:	85 91       	lpm	r24, Z+
    16f8:	27 ff       	sbrs	r18, 7
    16fa:	81 91       	ld	r24, Z+
    16fc:	4f 01       	movw	r8, r30
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	b6 01       	movw	r22, r12
    1702:	2c 87       	std	Y+12, r18	; 0x0c
    1704:	90 de       	rcall	.-736    	; 0x1426 <fputc>
    1706:	2c 85       	ldd	r18, Y+12	; 0x0c
    1708:	f1 10       	cpse	r15, r1
    170a:	fa 94       	dec	r15
    170c:	08 94       	sec
    170e:	a1 08       	sbc	r10, r1
    1710:	b1 08       	sbc	r11, r1
    1712:	a1 14       	cp	r10, r1
    1714:	b1 04       	cpc	r11, r1
    1716:	69 f7       	brne	.-38     	; 0x16f2 <vfprintf+0x1c6>
    1718:	e9 c0       	rjmp	.+466    	; 0x18ec <vfprintf+0x3c0>
    171a:	84 36       	cpi	r24, 0x64	; 100
    171c:	11 f0       	breq	.+4      	; 0x1722 <vfprintf+0x1f6>
    171e:	89 36       	cpi	r24, 0x69	; 105
    1720:	41 f5       	brne	.+80     	; 0x1772 <vfprintf+0x246>
    1722:	27 ff       	sbrs	r18, 7
    1724:	08 c0       	rjmp	.+16     	; 0x1736 <vfprintf+0x20a>
    1726:	f8 01       	movw	r30, r16
    1728:	60 81       	ld	r22, Z
    172a:	71 81       	ldd	r23, Z+1	; 0x01
    172c:	82 81       	ldd	r24, Z+2	; 0x02
    172e:	93 81       	ldd	r25, Z+3	; 0x03
    1730:	0c 5f       	subi	r16, 0xFC	; 252
    1732:	1f 4f       	sbci	r17, 0xFF	; 255
    1734:	09 c0       	rjmp	.+18     	; 0x1748 <vfprintf+0x21c>
    1736:	f8 01       	movw	r30, r16
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	88 27       	eor	r24, r24
    173e:	77 fd       	sbrc	r23, 7
    1740:	80 95       	com	r24
    1742:	98 2f       	mov	r25, r24
    1744:	0e 5f       	subi	r16, 0xFE	; 254
    1746:	1f 4f       	sbci	r17, 0xFF	; 255
    1748:	4f e6       	ldi	r20, 0x6F	; 111
    174a:	b4 2e       	mov	r11, r20
    174c:	b2 22       	and	r11, r18
    174e:	97 ff       	sbrs	r25, 7
    1750:	09 c0       	rjmp	.+18     	; 0x1764 <vfprintf+0x238>
    1752:	90 95       	com	r25
    1754:	80 95       	com	r24
    1756:	70 95       	com	r23
    1758:	61 95       	neg	r22
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	8f 4f       	sbci	r24, 0xFF	; 255
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	f0 e8       	ldi	r31, 0x80	; 128
    1762:	bf 2a       	or	r11, r31
    1764:	a2 01       	movw	r20, r4
    1766:	2a e0       	ldi	r18, 0x0A	; 10
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	f9 d0       	rcall	.+498    	; 0x195e <__ultoa_invert>
    176c:	78 2e       	mov	r7, r24
    176e:	74 18       	sub	r7, r4
    1770:	44 c0       	rjmp	.+136    	; 0x17fa <vfprintf+0x2ce>
    1772:	85 37       	cpi	r24, 0x75	; 117
    1774:	31 f4       	brne	.+12     	; 0x1782 <vfprintf+0x256>
    1776:	3f ee       	ldi	r19, 0xEF	; 239
    1778:	b3 2e       	mov	r11, r19
    177a:	b2 22       	and	r11, r18
    177c:	2a e0       	ldi	r18, 0x0A	; 10
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	25 c0       	rjmp	.+74     	; 0x17cc <vfprintf+0x2a0>
    1782:	99 ef       	ldi	r25, 0xF9	; 249
    1784:	b9 2e       	mov	r11, r25
    1786:	b2 22       	and	r11, r18
    1788:	8f 36       	cpi	r24, 0x6F	; 111
    178a:	c1 f0       	breq	.+48     	; 0x17bc <vfprintf+0x290>
    178c:	80 37       	cpi	r24, 0x70	; 112
    178e:	20 f4       	brcc	.+8      	; 0x1798 <vfprintf+0x26c>
    1790:	88 35       	cpi	r24, 0x58	; 88
    1792:	09 f0       	breq	.+2      	; 0x1796 <vfprintf+0x26a>
    1794:	ae c0       	rjmp	.+348    	; 0x18f2 <vfprintf+0x3c6>
    1796:	0d c0       	rjmp	.+26     	; 0x17b2 <vfprintf+0x286>
    1798:	80 37       	cpi	r24, 0x70	; 112
    179a:	21 f0       	breq	.+8      	; 0x17a4 <vfprintf+0x278>
    179c:	88 37       	cpi	r24, 0x78	; 120
    179e:	09 f0       	breq	.+2      	; 0x17a2 <vfprintf+0x276>
    17a0:	a8 c0       	rjmp	.+336    	; 0x18f2 <vfprintf+0x3c6>
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <vfprintf+0x27c>
    17a4:	20 e1       	ldi	r18, 0x10	; 16
    17a6:	b2 2a       	or	r11, r18
    17a8:	b4 fe       	sbrs	r11, 4
    17aa:	0b c0       	rjmp	.+22     	; 0x17c2 <vfprintf+0x296>
    17ac:	84 e0       	ldi	r24, 0x04	; 4
    17ae:	b8 2a       	or	r11, r24
    17b0:	08 c0       	rjmp	.+16     	; 0x17c2 <vfprintf+0x296>
    17b2:	b4 fe       	sbrs	r11, 4
    17b4:	09 c0       	rjmp	.+18     	; 0x17c8 <vfprintf+0x29c>
    17b6:	e6 e0       	ldi	r30, 0x06	; 6
    17b8:	be 2a       	or	r11, r30
    17ba:	06 c0       	rjmp	.+12     	; 0x17c8 <vfprintf+0x29c>
    17bc:	28 e0       	ldi	r18, 0x08	; 8
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	05 c0       	rjmp	.+10     	; 0x17cc <vfprintf+0x2a0>
    17c2:	20 e1       	ldi	r18, 0x10	; 16
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <vfprintf+0x2a0>
    17c8:	20 e1       	ldi	r18, 0x10	; 16
    17ca:	32 e0       	ldi	r19, 0x02	; 2
    17cc:	b7 fe       	sbrs	r11, 7
    17ce:	08 c0       	rjmp	.+16     	; 0x17e0 <vfprintf+0x2b4>
    17d0:	f8 01       	movw	r30, r16
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	0c 5f       	subi	r16, 0xFC	; 252
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	07 c0       	rjmp	.+14     	; 0x17ee <vfprintf+0x2c2>
    17e0:	f8 01       	movw	r30, r16
    17e2:	60 81       	ld	r22, Z
    17e4:	71 81       	ldd	r23, Z+1	; 0x01
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	0e 5f       	subi	r16, 0xFE	; 254
    17ec:	1f 4f       	sbci	r17, 0xFF	; 255
    17ee:	a2 01       	movw	r20, r4
    17f0:	b6 d0       	rcall	.+364    	; 0x195e <__ultoa_invert>
    17f2:	78 2e       	mov	r7, r24
    17f4:	74 18       	sub	r7, r4
    17f6:	ff e7       	ldi	r31, 0x7F	; 127
    17f8:	bf 22       	and	r11, r31
    17fa:	b6 fe       	sbrs	r11, 6
    17fc:	0b c0       	rjmp	.+22     	; 0x1814 <vfprintf+0x2e8>
    17fe:	2e ef       	ldi	r18, 0xFE	; 254
    1800:	b2 22       	and	r11, r18
    1802:	7e 14       	cp	r7, r14
    1804:	38 f4       	brcc	.+14     	; 0x1814 <vfprintf+0x2e8>
    1806:	b4 fe       	sbrs	r11, 4
    1808:	07 c0       	rjmp	.+14     	; 0x1818 <vfprintf+0x2ec>
    180a:	b2 fc       	sbrc	r11, 2
    180c:	05 c0       	rjmp	.+10     	; 0x1818 <vfprintf+0x2ec>
    180e:	8f ee       	ldi	r24, 0xEF	; 239
    1810:	b8 22       	and	r11, r24
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <vfprintf+0x2ec>
    1814:	a7 2c       	mov	r10, r7
    1816:	01 c0       	rjmp	.+2      	; 0x181a <vfprintf+0x2ee>
    1818:	ae 2c       	mov	r10, r14
    181a:	8b 2d       	mov	r24, r11
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	b4 fe       	sbrs	r11, 4
    1820:	0d c0       	rjmp	.+26     	; 0x183c <vfprintf+0x310>
    1822:	fe 01       	movw	r30, r28
    1824:	e7 0d       	add	r30, r7
    1826:	f1 1d       	adc	r31, r1
    1828:	20 81       	ld	r18, Z
    182a:	20 33       	cpi	r18, 0x30	; 48
    182c:	19 f4       	brne	.+6      	; 0x1834 <vfprintf+0x308>
    182e:	e9 ee       	ldi	r30, 0xE9	; 233
    1830:	be 22       	and	r11, r30
    1832:	09 c0       	rjmp	.+18     	; 0x1846 <vfprintf+0x31a>
    1834:	a3 94       	inc	r10
    1836:	b2 fe       	sbrs	r11, 2
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <vfprintf+0x31a>
    183a:	04 c0       	rjmp	.+8      	; 0x1844 <vfprintf+0x318>
    183c:	86 78       	andi	r24, 0x86	; 134
    183e:	90 70       	andi	r25, 0x00	; 0
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	09 f0       	breq	.+2      	; 0x1846 <vfprintf+0x31a>
    1844:	a3 94       	inc	r10
    1846:	8b 2c       	mov	r8, r11
    1848:	99 24       	eor	r9, r9
    184a:	b3 fc       	sbrc	r11, 3
    184c:	13 c0       	rjmp	.+38     	; 0x1874 <vfprintf+0x348>
    184e:	b0 fe       	sbrs	r11, 0
    1850:	0e c0       	rjmp	.+28     	; 0x186e <vfprintf+0x342>
    1852:	af 14       	cp	r10, r15
    1854:	28 f4       	brcc	.+10     	; 0x1860 <vfprintf+0x334>
    1856:	e7 2c       	mov	r14, r7
    1858:	ef 0c       	add	r14, r15
    185a:	ea 18       	sub	r14, r10
    185c:	af 2c       	mov	r10, r15
    185e:	07 c0       	rjmp	.+14     	; 0x186e <vfprintf+0x342>
    1860:	e7 2c       	mov	r14, r7
    1862:	05 c0       	rjmp	.+10     	; 0x186e <vfprintf+0x342>
    1864:	80 e2       	ldi	r24, 0x20	; 32
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	b6 01       	movw	r22, r12
    186a:	dd dd       	rcall	.-1094   	; 0x1426 <fputc>
    186c:	a3 94       	inc	r10
    186e:	af 14       	cp	r10, r15
    1870:	c8 f3       	brcs	.-14     	; 0x1864 <vfprintf+0x338>
    1872:	04 c0       	rjmp	.+8      	; 0x187c <vfprintf+0x350>
    1874:	af 14       	cp	r10, r15
    1876:	10 f4       	brcc	.+4      	; 0x187c <vfprintf+0x350>
    1878:	fa 18       	sub	r15, r10
    187a:	01 c0       	rjmp	.+2      	; 0x187e <vfprintf+0x352>
    187c:	ff 24       	eor	r15, r15
    187e:	84 fe       	sbrs	r8, 4
    1880:	0e c0       	rjmp	.+28     	; 0x189e <vfprintf+0x372>
    1882:	80 e3       	ldi	r24, 0x30	; 48
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	b6 01       	movw	r22, r12
    1888:	ce dd       	rcall	.-1124   	; 0x1426 <fputc>
    188a:	82 fe       	sbrs	r8, 2
    188c:	1d c0       	rjmp	.+58     	; 0x18c8 <vfprintf+0x39c>
    188e:	81 fe       	sbrs	r8, 1
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <vfprintf+0x36c>
    1892:	88 e5       	ldi	r24, 0x58	; 88
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	10 c0       	rjmp	.+32     	; 0x18b8 <vfprintf+0x38c>
    1898:	88 e7       	ldi	r24, 0x78	; 120
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0d c0       	rjmp	.+26     	; 0x18b8 <vfprintf+0x38c>
    189e:	c4 01       	movw	r24, r8
    18a0:	86 78       	andi	r24, 0x86	; 134
    18a2:	90 70       	andi	r25, 0x00	; 0
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	81 f0       	breq	.+32     	; 0x18c8 <vfprintf+0x39c>
    18a8:	81 fc       	sbrc	r8, 1
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <vfprintf+0x384>
    18ac:	80 e2       	ldi	r24, 0x20	; 32
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <vfprintf+0x386>
    18b0:	8b e2       	ldi	r24, 0x2B	; 43
    18b2:	b7 fc       	sbrc	r11, 7
    18b4:	8d e2       	ldi	r24, 0x2D	; 45
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	b6 01       	movw	r22, r12
    18ba:	b5 dd       	rcall	.-1174   	; 0x1426 <fputc>
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <vfprintf+0x39c>
    18be:	80 e3       	ldi	r24, 0x30	; 48
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	b6 01       	movw	r22, r12
    18c4:	b0 dd       	rcall	.-1184   	; 0x1426 <fputc>
    18c6:	ea 94       	dec	r14
    18c8:	7e 14       	cp	r7, r14
    18ca:	c8 f3       	brcs	.-14     	; 0x18be <vfprintf+0x392>
    18cc:	7a 94       	dec	r7
    18ce:	f2 01       	movw	r30, r4
    18d0:	e7 0d       	add	r30, r7
    18d2:	f1 1d       	adc	r31, r1
    18d4:	80 81       	ld	r24, Z
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	b6 01       	movw	r22, r12
    18da:	a5 dd       	rcall	.-1206   	; 0x1426 <fputc>
    18dc:	77 20       	and	r7, r7
    18de:	b1 f7       	brne	.-20     	; 0x18cc <vfprintf+0x3a0>
    18e0:	05 c0       	rjmp	.+10     	; 0x18ec <vfprintf+0x3c0>
    18e2:	80 e2       	ldi	r24, 0x20	; 32
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	b6 01       	movw	r22, r12
    18e8:	9e dd       	rcall	.-1220   	; 0x1426 <fputc>
    18ea:	fa 94       	dec	r15
    18ec:	ff 20       	and	r15, r15
    18ee:	c9 f7       	brne	.-14     	; 0x18e2 <vfprintf+0x3b6>
    18f0:	44 ce       	rjmp	.-888    	; 0x157a <vfprintf+0x4e>
    18f2:	f6 01       	movw	r30, r12
    18f4:	26 81       	ldd	r18, Z+6	; 0x06
    18f6:	37 81       	ldd	r19, Z+7	; 0x07
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <vfprintf+0x3d2>
    18fa:	2f ef       	ldi	r18, 0xFF	; 255
    18fc:	3f ef       	ldi	r19, 0xFF	; 255
    18fe:	c9 01       	movw	r24, r18
    1900:	2c 96       	adiw	r28, 0x0c	; 12
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	ff 90       	pop	r15
    1916:	ef 90       	pop	r14
    1918:	df 90       	pop	r13
    191a:	cf 90       	pop	r12
    191c:	bf 90       	pop	r11
    191e:	af 90       	pop	r10
    1920:	9f 90       	pop	r9
    1922:	8f 90       	pop	r8
    1924:	7f 90       	pop	r7
    1926:	6f 90       	pop	r6
    1928:	5f 90       	pop	r5
    192a:	4f 90       	pop	r4
    192c:	3f 90       	pop	r3
    192e:	2f 90       	pop	r2
    1930:	08 95       	ret

00001932 <strnlen_P>:
    1932:	fc 01       	movw	r30, r24
    1934:	05 90       	lpm	r0, Z+
    1936:	61 50       	subi	r22, 0x01	; 1
    1938:	70 40       	sbci	r23, 0x00	; 0
    193a:	01 10       	cpse	r0, r1
    193c:	d8 f7       	brcc	.-10     	; 0x1934 <strnlen_P+0x2>
    193e:	80 95       	com	r24
    1940:	90 95       	com	r25
    1942:	8e 0f       	add	r24, r30
    1944:	9f 1f       	adc	r25, r31
    1946:	08 95       	ret

00001948 <strnlen>:
    1948:	fc 01       	movw	r30, r24
    194a:	61 50       	subi	r22, 0x01	; 1
    194c:	70 40       	sbci	r23, 0x00	; 0
    194e:	01 90       	ld	r0, Z+
    1950:	01 10       	cpse	r0, r1
    1952:	d8 f7       	brcc	.-10     	; 0x194a <strnlen+0x2>
    1954:	80 95       	com	r24
    1956:	90 95       	com	r25
    1958:	8e 0f       	add	r24, r30
    195a:	9f 1f       	adc	r25, r31
    195c:	08 95       	ret

0000195e <__ultoa_invert>:
    195e:	fa 01       	movw	r30, r20
    1960:	aa 27       	eor	r26, r26
    1962:	28 30       	cpi	r18, 0x08	; 8
    1964:	51 f1       	breq	.+84     	; 0x19ba <__ultoa_invert+0x5c>
    1966:	20 31       	cpi	r18, 0x10	; 16
    1968:	81 f1       	breq	.+96     	; 0x19ca <__ultoa_invert+0x6c>
    196a:	e8 94       	clt
    196c:	6f 93       	push	r22
    196e:	6e 7f       	andi	r22, 0xFE	; 254
    1970:	6e 5f       	subi	r22, 0xFE	; 254
    1972:	7f 4f       	sbci	r23, 0xFF	; 255
    1974:	8f 4f       	sbci	r24, 0xFF	; 255
    1976:	9f 4f       	sbci	r25, 0xFF	; 255
    1978:	af 4f       	sbci	r26, 0xFF	; 255
    197a:	b1 e0       	ldi	r27, 0x01	; 1
    197c:	3e d0       	rcall	.+124    	; 0x19fa <__ultoa_invert+0x9c>
    197e:	b4 e0       	ldi	r27, 0x04	; 4
    1980:	3c d0       	rcall	.+120    	; 0x19fa <__ultoa_invert+0x9c>
    1982:	67 0f       	add	r22, r23
    1984:	78 1f       	adc	r23, r24
    1986:	89 1f       	adc	r24, r25
    1988:	9a 1f       	adc	r25, r26
    198a:	a1 1d       	adc	r26, r1
    198c:	68 0f       	add	r22, r24
    198e:	79 1f       	adc	r23, r25
    1990:	8a 1f       	adc	r24, r26
    1992:	91 1d       	adc	r25, r1
    1994:	a1 1d       	adc	r26, r1
    1996:	6a 0f       	add	r22, r26
    1998:	71 1d       	adc	r23, r1
    199a:	81 1d       	adc	r24, r1
    199c:	91 1d       	adc	r25, r1
    199e:	a1 1d       	adc	r26, r1
    19a0:	20 d0       	rcall	.+64     	; 0x19e2 <__ultoa_invert+0x84>
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <__ultoa_invert+0x48>
    19a4:	68 94       	set
    19a6:	3f 91       	pop	r19
    19a8:	2a e0       	ldi	r18, 0x0A	; 10
    19aa:	26 9f       	mul	r18, r22
    19ac:	11 24       	eor	r1, r1
    19ae:	30 19       	sub	r19, r0
    19b0:	30 5d       	subi	r19, 0xD0	; 208
    19b2:	31 93       	st	Z+, r19
    19b4:	de f6       	brtc	.-74     	; 0x196c <__ultoa_invert+0xe>
    19b6:	cf 01       	movw	r24, r30
    19b8:	08 95       	ret
    19ba:	46 2f       	mov	r20, r22
    19bc:	47 70       	andi	r20, 0x07	; 7
    19be:	40 5d       	subi	r20, 0xD0	; 208
    19c0:	41 93       	st	Z+, r20
    19c2:	b3 e0       	ldi	r27, 0x03	; 3
    19c4:	0f d0       	rcall	.+30     	; 0x19e4 <__ultoa_invert+0x86>
    19c6:	c9 f7       	brne	.-14     	; 0x19ba <__ultoa_invert+0x5c>
    19c8:	f6 cf       	rjmp	.-20     	; 0x19b6 <__ultoa_invert+0x58>
    19ca:	46 2f       	mov	r20, r22
    19cc:	4f 70       	andi	r20, 0x0F	; 15
    19ce:	40 5d       	subi	r20, 0xD0	; 208
    19d0:	4a 33       	cpi	r20, 0x3A	; 58
    19d2:	18 f0       	brcs	.+6      	; 0x19da <__ultoa_invert+0x7c>
    19d4:	49 5d       	subi	r20, 0xD9	; 217
    19d6:	31 fd       	sbrc	r19, 1
    19d8:	40 52       	subi	r20, 0x20	; 32
    19da:	41 93       	st	Z+, r20
    19dc:	02 d0       	rcall	.+4      	; 0x19e2 <__ultoa_invert+0x84>
    19de:	a9 f7       	brne	.-22     	; 0x19ca <__ultoa_invert+0x6c>
    19e0:	ea cf       	rjmp	.-44     	; 0x19b6 <__ultoa_invert+0x58>
    19e2:	b4 e0       	ldi	r27, 0x04	; 4
    19e4:	a6 95       	lsr	r26
    19e6:	97 95       	ror	r25
    19e8:	87 95       	ror	r24
    19ea:	77 95       	ror	r23
    19ec:	67 95       	ror	r22
    19ee:	ba 95       	dec	r27
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__ultoa_invert+0x86>
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	61 05       	cpc	r22, r1
    19f6:	71 05       	cpc	r23, r1
    19f8:	08 95       	ret
    19fa:	9b 01       	movw	r18, r22
    19fc:	ac 01       	movw	r20, r24
    19fe:	0a 2e       	mov	r0, r26
    1a00:	06 94       	lsr	r0
    1a02:	57 95       	ror	r21
    1a04:	47 95       	ror	r20
    1a06:	37 95       	ror	r19
    1a08:	27 95       	ror	r18
    1a0a:	ba 95       	dec	r27
    1a0c:	c9 f7       	brne	.-14     	; 0x1a00 <__ultoa_invert+0xa2>
    1a0e:	62 0f       	add	r22, r18
    1a10:	73 1f       	adc	r23, r19
    1a12:	84 1f       	adc	r24, r20
    1a14:	95 1f       	adc	r25, r21
    1a16:	a0 1d       	adc	r26, r0
    1a18:	08 95       	ret

00001a1a <_exit>:
    1a1a:	f8 94       	cli

00001a1c <__stop_program>:
    1a1c:	ff cf       	rjmp	.-2      	; 0x1a1c <__stop_program>
