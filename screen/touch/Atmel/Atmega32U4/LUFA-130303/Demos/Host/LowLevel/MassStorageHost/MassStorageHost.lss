
MassStorageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000025b0  00002644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800126  00800126  0000266a  2**0
                  ALLOC
  3 .stab         000022a4  00000000  00000000  0000266c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dd9  00000000  00000000  00004910  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003c8  00000000  00000000  000056e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000977  00000000  00000000  00005ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006111  00000000  00000000  00006428  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a0d  00000000  00000000  0000c539  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004eba  00000000  00000000  0000df46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005d0  00000000  00000000  00012e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000029b1  00000000  00000000  000133d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000353d  00000000  00000000  00015d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000b47  00000000  00000000  000192be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000568  00000000  00000000  00019e05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	26 c2       	rjmp	.+1100   	; 0x44e <__ctors_end>
       2:	00 00       	nop
       4:	42 c2       	rjmp	.+1156   	; 0x48a <__bad_interrupt>
       6:	00 00       	nop
       8:	40 c2       	rjmp	.+1152   	; 0x48a <__bad_interrupt>
       a:	00 00       	nop
       c:	3e c2       	rjmp	.+1148   	; 0x48a <__bad_interrupt>
       e:	00 00       	nop
      10:	3c c2       	rjmp	.+1144   	; 0x48a <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c2       	rjmp	.+1140   	; 0x48a <__bad_interrupt>
      16:	00 00       	nop
      18:	38 c2       	rjmp	.+1136   	; 0x48a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	36 c2       	rjmp	.+1132   	; 0x48a <__bad_interrupt>
      1e:	00 00       	nop
      20:	34 c2       	rjmp	.+1128   	; 0x48a <__bad_interrupt>
      22:	00 00       	nop
      24:	32 c2       	rjmp	.+1124   	; 0x48a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__vector_10>
      2c:	2e c2       	rjmp	.+1116   	; 0x48a <__bad_interrupt>
      2e:	00 00       	nop
      30:	2c c2       	rjmp	.+1112   	; 0x48a <__bad_interrupt>
      32:	00 00       	nop
      34:	2a c2       	rjmp	.+1108   	; 0x48a <__bad_interrupt>
      36:	00 00       	nop
      38:	28 c2       	rjmp	.+1104   	; 0x48a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	26 c2       	rjmp	.+1100   	; 0x48a <__bad_interrupt>
      3e:	00 00       	nop
      40:	24 c2       	rjmp	.+1096   	; 0x48a <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c2       	rjmp	.+1092   	; 0x48a <__bad_interrupt>
      46:	00 00       	nop
      48:	20 c2       	rjmp	.+1088   	; 0x48a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1e c2       	rjmp	.+1084   	; 0x48a <__bad_interrupt>
      4e:	00 00       	nop
      50:	1c c2       	rjmp	.+1080   	; 0x48a <__bad_interrupt>
      52:	00 00       	nop
      54:	1a c2       	rjmp	.+1076   	; 0x48a <__bad_interrupt>
      56:	00 00       	nop
      58:	18 c2       	rjmp	.+1072   	; 0x48a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	16 c2       	rjmp	.+1068   	; 0x48a <__bad_interrupt>
      5e:	00 00       	nop
      60:	14 c2       	rjmp	.+1064   	; 0x48a <__bad_interrupt>
      62:	00 00       	nop
      64:	12 c2       	rjmp	.+1060   	; 0x48a <__bad_interrupt>
      66:	00 00       	nop
      68:	10 c2       	rjmp	.+1056   	; 0x48a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0e c2       	rjmp	.+1052   	; 0x48a <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c c2       	rjmp	.+1048   	; 0x48a <__bad_interrupt>
      72:	00 00       	nop
      74:	0a c2       	rjmp	.+1044   	; 0x48a <__bad_interrupt>
      76:	00 00       	nop
      78:	08 c2       	rjmp	.+1040   	; 0x48a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	06 c2       	rjmp	.+1036   	; 0x48a <__bad_interrupt>
      7e:	00 00       	nop
      80:	04 c2       	rjmp	.+1032   	; 0x48a <__bad_interrupt>
      82:	00 00       	nop
      84:	02 c2       	rjmp	.+1028   	; 0x48a <__bad_interrupt>
      86:	00 00       	nop
      88:	00 c2       	rjmp	.+1024   	; 0x48a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fe c1       	rjmp	.+1020   	; 0x48a <__bad_interrupt>
      8e:	00 00       	nop
      90:	fc c1       	rjmp	.+1016   	; 0x48a <__bad_interrupt>
      92:	00 00       	nop
      94:	fa c1       	rjmp	.+1012   	; 0x48a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4452>:
      98:	20 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a       -- Error Code:
      a8:	20 25 64 1b 5b 33 37 6d 00                           %d.[37m.

000000b1 <__c.4450>:
      b1:	1b 5b 33 31 6d 43 6f 6d 6d 61 6e 64 20 65 72 72     .[31mCommand err
      c1:	6f 72 20 28 25 53 29 2e 0d 0a 00                    or (%S)....

000000cc <__c.4448>:
      cc:	1b 5b 33 31 6d 53 43 53 49 20 63 6f 6d 6d 61 6e     .[31mSCSI comman
      dc:	64 20 65 72 72 6f 72 20 28 25 53 29 2e 0d 0a 00     d error (%S)....

000000ec <__c.4434>:
      ec:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc
      fc:	6b 00                                               k.

000000fe <__c.4428>:
      fe:	0d 0a 0d 0a 50 72 65 73 73 20 62 6f 61 72 64 20     ....Press board 
     10e:	62 75 74 74 6f 6e 20 74 6f 20 72 65 61 64 20 65     button to read e
     11e:	6e 74 69 72 65 20 41 53 43 49 49 20 63 6f 6e 74     ntire ASCII cont
     12e:	65 6e 74 73 20 6f 66 20 64 69 73 6b 2e 2e 2e 0d     ents of disk....
     13e:	0a 0d 0a 00                                         ....

00000142 <__c.4423>:
     142:	0d 0a 00                                            ...

00000145 <__c.4416>:
     145:	20 20 20 20 00                                          .

0000014a <__c.4411>:
     14a:	25 2e 32 58 20 00                                   %.2X .

00000150 <__c.4405>:
     150:	0d 0a 43 6f 6e 74 65 6e 74 73 20 6f 66 20 66 69     ..Contents of fi
     160:	72 73 74 20 62 6c 6f 63 6b 3a 0d 0a 00              rst block:...

0000016d <__c.4403>:
     16d:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc
     17d:	6b 00                                               k.

0000017f <__c.4400>:
     17f:	25 6c 75 20 62 6c 6f 63 6b 73 20 6f 66 20 25 6c     %lu blocks of %l
     18f:	75 20 62 79 74 65 73 2e 0d 0a 00                    u bytes....

0000019a <__c.4398>:
     19a:	52 65 61 64 20 43 61 70 61 63 69 74 79 00           Read Capacity.

000001a8 <__c.4395>:
     1a8:	0d 0a 52 65 74 72 69 65 76 69 6e 67 20 43 61 70     ..Retrieving Cap
     1b8:	61 63 69 74 79 2e 2e 2e 20 00                       acity... .

000001c2 <__c.4392>:
     1c2:	54 65 73 74 20 55 6e 69 74 20 52 65 61 64 79 00     Test Unit Ready.

000001d2 <__c.4389>:
     1d2:	57 61 69 74 69 6e 67 20 75 6e 74 69 6c 20 72 65     Waiting until re
     1e2:	61 64 79 2e 2e 00                                   ady...

000001e8 <__c.4387>:
     1e8:	56 65 6e 64 6f 72 20 22 25 2e 38 73 22 2c 20 50     Vendor "%.8s", P
     1f8:	72 6f 64 75 63 74 20 22 25 2e 31 36 73 22 0d 0a     roduct "%.16s"..
     208:	00                                                  .

00000209 <__c.4385>:
     209:	49 6e 71 75 69 72 79 00                             Inquiry.

00000211 <__c.4382>:
     211:	50 72 65 76 65 6e 74 2f 41 6c 6c 6f 77 20 4d 65     Prevent/Allow Me
     221:	64 69 75 6d 20 52 65 6d 6f 76 61 6c 00              dium Removal.

0000022e <__c.4380>:
     22e:	52 65 71 75 65 73 74 20 53 65 6e 73 65 00           Request Sense.

0000023c <__c.4377>:
     23c:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 52 65 73     Mass Storage Res
     24c:	65 74 00                                            et.

0000024f <__c.4375>:
     24f:	54 6f 74 61 6c 20 4c 55 4e 73 3a 20 25 64 20 2d     Total LUNs: %d -
     25f:	20 55 73 69 6e 67 20 66 69 72 73 74 20 4c 55 4e      Using first LUN
     26f:	20 69 6e 20 64 65 76 69 63 65 2e 0d 0a 00            in device....

0000027d <__c.4373>:
     27d:	47 65 74 20 4d 61 78 20 4c 55 4e 00                 Get Max LUN.

00000289 <__c.4367>:
     289:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     299:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     2a9:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     2b9:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     2c9:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2d9:	1b 5b 33 37 6d 00                                   .[37m.

000002df <__c.4360>:
     2df:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     2ef:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     2ff:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000030e <__c.4355>:
     30e:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 44 69 73     Mass Storage Dis
     31e:	6b 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00     k Enumerated....

0000032e <__c.4353>:
     32e:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     33e:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     34e:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     35e:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     36e:	37 6d 00                                            7m.

00000371 <__c.4351>:
     371:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     381:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000038b <__c.4349>:
     38b:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     39b:	69 63 65 2e 0d 0a 00                                ice....

000003a2 <__c.4347>:
     3a2:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     3b2:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     3c2:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000003cc <__c.4344>:
     3cc:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     3dc:	61 74 61 2e 0d 0a 00                                ata....

000003e3 <__c.4339>:
     3e3:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     3f3:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     403:	00                                                  .

00000404 <__c.4334>:
     404:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     414:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000421 <__c.4325>:
     421:	1b 5b 33 36 6d 4d 61 73 73 20 53 74 6f 72 61 67     .[36mMass Storag
     431:	65 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     e Host Demo runn
     441:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

0000044e <__ctors_end>:
     44e:	11 24       	eor	r1, r1
     450:	1f be       	out	0x3f, r1	; 63
     452:	cf ef       	ldi	r28, 0xFF	; 255
     454:	d0 e2       	ldi	r29, 0x20	; 32
     456:	de bf       	out	0x3e, r29	; 62
     458:	cd bf       	out	0x3d, r28	; 61

0000045a <__do_copy_data>:
     45a:	11 e0       	ldi	r17, 0x01	; 1
     45c:	a0 e0       	ldi	r26, 0x00	; 0
     45e:	b1 e0       	ldi	r27, 0x01	; 1
     460:	e0 eb       	ldi	r30, 0xB0	; 176
     462:	f5 e2       	ldi	r31, 0x25	; 37
     464:	00 e0       	ldi	r16, 0x00	; 0
     466:	0b bf       	out	0x3b, r16	; 59
     468:	02 c0       	rjmp	.+4      	; 0x46e <__do_copy_data+0x14>
     46a:	07 90       	elpm	r0, Z+
     46c:	0d 92       	st	X+, r0
     46e:	a6 32       	cpi	r26, 0x26	; 38
     470:	b1 07       	cpc	r27, r17
     472:	d9 f7       	brne	.-10     	; 0x46a <__do_copy_data+0x10>

00000474 <__do_clear_bss>:
     474:	11 e0       	ldi	r17, 0x01	; 1
     476:	a6 e2       	ldi	r26, 0x26	; 38
     478:	b1 e0       	ldi	r27, 0x01	; 1
     47a:	01 c0       	rjmp	.+2      	; 0x47e <.do_clear_bss_start>

0000047c <.do_clear_bss_loop>:
     47c:	1d 92       	st	X+, r1

0000047e <.do_clear_bss_start>:
     47e:	a9 34       	cpi	r26, 0x49	; 73
     480:	b1 07       	cpc	r27, r17
     482:	e1 f7       	brne	.-8      	; 0x47c <.do_clear_bss_loop>
     484:	00 d3       	rcall	.+1536   	; 0xa86 <main>
     486:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <_exit>

0000048a <__bad_interrupt>:
     48a:	ba cd       	rjmp	.-1164   	; 0x0 <__vectors>

0000048c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     48c:	9b b1       	in	r25, 0x0b	; 11
     48e:	9f 70       	andi	r25, 0x0F	; 15
     490:	98 2b       	or	r25, r24
     492:	9b b9       	out	0x0b, r25	; 11
			}
     494:	08 95       	ret

00000496 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     496:	84 b7       	in	r24, 0x34	; 52
     498:	87 7f       	andi	r24, 0xF7	; 247
     49a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     49c:	28 e1       	ldi	r18, 0x18	; 24
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	20 93 60 00 	sts	0x0060, r18
     4a6:	10 92 60 00 	sts	0x0060, r1
     4aa:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	80 e8       	ldi	r24, 0x80	; 128
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	80 93 61 00 	sts	0x0061, r24
     4b8:	90 93 61 00 	sts	0x0061, r25
     4bc:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     4be:	83 e3       	ldi	r24, 0x33	; 51
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	90 93 cd 00 	sts	0x00CD, r25
     4c6:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     4ca:	86 e0       	ldi	r24, 0x06	; 6
     4cc:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     4d0:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     4d4:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     4d8:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     4da:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     4dc:	8a b1       	in	r24, 0x0a	; 10
     4de:	80 6f       	ori	r24, 0xF0	; 240
     4e0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     4e2:	8b b1       	in	r24, 0x0b	; 11
     4e4:	8f 70       	andi	r24, 0x0F	; 15
     4e6:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     4e8:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     4ea:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	USB_Init();
     4ec:	0e 94 b9 0c 	call	0x1972	; 0x1972 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <Serial_CreateStream>

000004f8 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     4f8:	84 e0       	ldi	r24, 0x04	; 4
     4fa:	94 e0       	ldi	r25, 0x04	; 4
     4fc:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     500:	80 ea       	ldi	r24, 0xA0	; 160
}
     502:	c4 cf       	rjmp	.-120    	; 0x48c <LEDs_SetAllLEDs>

00000504 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     504:	83 ee       	ldi	r24, 0xE3	; 227
     506:	93 e0       	ldi	r25, 0x03	; 3
     508:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     50c:	80 e1       	ldi	r24, 0x10	; 16
}
     50e:	be cf       	rjmp	.-132    	; 0x48c <LEDs_SetAllLEDs>

00000510 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     510:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     512:	8c ec       	ldi	r24, 0xCC	; 204
     514:	93 e0       	ldi	r25, 0x03	; 3
     516:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     51a:	e3 d2       	rcall	.+1478   	; 0xae2 <ProcessConfigurationDescriptor>
     51c:	18 2f       	mov	r17, r24
     51e:	88 23       	and	r24, r24
     520:	01 f1       	breq	.+64     	; 0x562 <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
	{
		if (ErrorCode == ControlError)
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	19 f4       	brne	.+6      	; 0x52c <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     526:	82 ea       	ldi	r24, 0xA2	; 162
     528:	93 e0       	ldi	r25, 0x03	; 3
     52a:	02 c0       	rjmp	.+4      	; 0x530 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     52c:	8b e8       	ldi	r24, 0x8B	; 139
     52e:	93 e0       	ldi	r25, 0x03	; 3
     530:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     534:	00 d0       	rcall	.+0      	; 0x536 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     536:	00 d0       	rcall	.+0      	; 0x538 <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     538:	ed b7       	in	r30, 0x3d	; 61
     53a:	fe b7       	in	r31, 0x3e	; 62
     53c:	31 96       	adiw	r30, 0x01	; 1
     53e:	21 e7       	ldi	r18, 0x71	; 113
     540:	33 e0       	ldi	r19, 0x03	; 3
     542:	ad b7       	in	r26, 0x3d	; 61
     544:	be b7       	in	r27, 0x3e	; 62
     546:	12 96       	adiw	r26, 0x02	; 2
     548:	3c 93       	st	X, r19
     54a:	2e 93       	st	-X, r18
     54c:	11 97       	sbiw	r26, 0x01	; 1
     54e:	12 83       	std	Z+2, r17	; 0x02
     550:	13 82       	std	Z+3, r1	; 0x03
     552:	0e 94 05 10 	call	0x200a	; 0x200a <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	80 e9       	ldi	r24, 0x90	; 144
     560:	19 c0       	rjmp	.+50     	; 0x594 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <USB_Host_SetDeviceConfiguration>
     568:	88 23       	and	r24, r24
     56a:	79 f0       	breq	.+30     	; 0x58a <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     56c:	00 d0       	rcall	.+0      	; 0x56e <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     56e:	00 d0       	rcall	.+0      	; 0x570 <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
     570:	ed b7       	in	r30, 0x3d	; 61
     572:	fe b7       	in	r31, 0x3e	; 62
     574:	31 96       	adiw	r30, 0x01	; 1
     576:	2e e2       	ldi	r18, 0x2E	; 46
     578:	33 e0       	ldi	r19, 0x03	; 3
     57a:	ad b7       	in	r26, 0x3d	; 61
     57c:	be b7       	in	r27, 0x3e	; 62
     57e:	12 96       	adiw	r26, 0x02	; 2
     580:	3c 93       	st	X, r19
     582:	2e 93       	st	-X, r18
     584:	11 97       	sbiw	r26, 0x01	; 1
     586:	82 83       	std	Z+2, r24	; 0x02
     588:	e3 cf       	rjmp	.-58     	; 0x550 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Mass Storage Disk Enumerated.\r\n"));
     58a:	8e e0       	ldi	r24, 0x0E	; 14
     58c:	93 e0       	ldi	r25, 0x03	; 3
     58e:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     592:	80 e6       	ldi	r24, 0x60	; 96
     594:	7b df       	rcall	.-266    	; 0x48c <LEDs_SetAllLEDs>
}
     596:	1f 91       	pop	r17
     598:	08 95       	ret

0000059a <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     59a:	df 93       	push	r29
     59c:	cf 93       	push	r28
     59e:	0f 92       	push	r0
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     5a4:	89 83       	std	Y+1, r24	; 0x01
     5a6:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <EVENT_USB_Host_HostError+0x12>
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <EVENT_USB_Host_HostError+0x14>
     5ae:	ed b7       	in	r30, 0x3d	; 61
     5b0:	fe b7       	in	r31, 0x3e	; 62
     5b2:	31 96       	adiw	r30, 0x01	; 1
     5b4:	2f ed       	ldi	r18, 0xDF	; 223
     5b6:	32 e0       	ldi	r19, 0x02	; 2
     5b8:	ad b7       	in	r26, 0x3d	; 61
     5ba:	be b7       	in	r27, 0x3e	; 62
     5bc:	12 96       	adiw	r26, 0x02	; 2
     5be:	3c 93       	st	X, r19
     5c0:	2e 93       	st	-X, r18
     5c2:	11 97       	sbiw	r26, 0x01	; 1
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
     5c6:	82 83       	std	Z+2, r24	; 0x02
     5c8:	13 82       	std	Z+3, r1	; 0x03
     5ca:	0e 94 05 10 	call	0x200a	; 0x200a <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	80 e9       	ldi	r24, 0x90	; 144
     5d8:	59 df       	rcall	.-334    	; 0x48c <LEDs_SetAllLEDs>
     5da:	ff cf       	rjmp	.-2      	; 0x5da <EVENT_USB_Host_HostError+0x40>

000005dc <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5dc:	90 91 34 01 	lds	r25, 0x0134
     5e0:	2d b7       	in	r18, 0x3d	; 61
     5e2:	3e b7       	in	r19, 0x3e	; 62
     5e4:	28 50       	subi	r18, 0x08	; 8
     5e6:	30 40       	sbci	r19, 0x00	; 0
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	3e bf       	out	0x3e, r19	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	2d bf       	out	0x3d, r18	; 61
     5f2:	ed b7       	in	r30, 0x3d	; 61
     5f4:	fe b7       	in	r31, 0x3e	; 62
     5f6:	31 96       	adiw	r30, 0x01	; 1
     5f8:	29 e8       	ldi	r18, 0x89	; 137
     5fa:	32 e0       	ldi	r19, 0x02	; 2
     5fc:	ad b7       	in	r26, 0x3d	; 61
     5fe:	be b7       	in	r27, 0x3e	; 62
     600:	12 96       	adiw	r26, 0x02	; 2
     602:	3c 93       	st	X, r19
     604:	2e 93       	st	-X, r18
     606:	11 97       	sbiw	r26, 0x01	; 1
     608:	82 83       	std	Z+2, r24	; 0x02
     60a:	13 82       	std	Z+3, r1	; 0x03
     60c:	64 83       	std	Z+4, r22	; 0x04
     60e:	15 82       	std	Z+5, r1	; 0x05
     610:	96 83       	std	Z+6, r25	; 0x06
     612:	17 82       	std	Z+7, r1	; 0x07
     614:	0e 94 05 10 	call	0x200a	; 0x200a <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     618:	2d b7       	in	r18, 0x3d	; 61
     61a:	3e b7       	in	r19, 0x3e	; 62
     61c:	28 5f       	subi	r18, 0xF8	; 248
     61e:	3f 4f       	sbci	r19, 0xFF	; 255
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	3e bf       	out	0x3e, r19	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	2d bf       	out	0x3d, r18	; 61
     62a:	80 e9       	ldi	r24, 0x90	; 144
}
     62c:	2f cf       	rjmp	.-418    	; 0x48c <LEDs_SetAllLEDs>

0000062e <ShowDiskReadError>:
 *  \param[in] CommandString  ASCII string located in PROGMEM space indicating what operation failed
 *  \param[in] ErrorCode      Error code of the function which failed to complete successfully
 */
void ShowDiskReadError(const char* CommandString,
                       const uint8_t ErrorCode)
{
     62e:	df 93       	push	r29
     630:	cf 93       	push	r28
     632:	0f 92       	push	r0
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
	if (ErrorCode == MASS_STORE_SCSI_COMMAND_FAILED)
     638:	60 3c       	cpi	r22, 0xC0	; 192
     63a:	79 f4       	brne	.+30     	; 0x65a <ShowDiskReadError+0x2c>
	{
		/* Display the error code */
		printf_P(PSTR(ESC_FG_RED "SCSI command error (%S).\r\n"), CommandString);
     63c:	00 d0       	rcall	.+0      	; 0x63e <ShowDiskReadError+0x10>
     63e:	00 d0       	rcall	.+0      	; 0x640 <ShowDiskReadError+0x12>
     640:	2c ec       	ldi	r18, 0xCC	; 204
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	ad b7       	in	r26, 0x3d	; 61
     646:	be b7       	in	r27, 0x3e	; 62
     648:	12 96       	adiw	r26, 0x02	; 2
     64a:	3c 93       	st	X, r19
     64c:	2e 93       	st	-X, r18
     64e:	11 97       	sbiw	r26, 0x01	; 1
     650:	14 96       	adiw	r26, 0x04	; 4
     652:	9c 93       	st	X, r25
     654:	8e 93       	st	-X, r24
     656:	13 97       	sbiw	r26, 0x03	; 3
     658:	1b c0       	rjmp	.+54     	; 0x690 <ShowDiskReadError+0x62>
	}
	else
	{
		/* Display the error code */
		printf_P(PSTR(ESC_FG_RED "Command error (%S).\r\n"), CommandString);
     65a:	00 d0       	rcall	.+0      	; 0x65c <ShowDiskReadError+0x2e>
     65c:	00 d0       	rcall	.+0      	; 0x65e <ShowDiskReadError+0x30>
     65e:	21 eb       	ldi	r18, 0xB1	; 177
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	ed b7       	in	r30, 0x3d	; 61
     664:	fe b7       	in	r31, 0x3e	; 62
     666:	32 83       	std	Z+2, r19	; 0x02
     668:	21 83       	std	Z+1, r18	; 0x01
     66a:	94 83       	std	Z+4, r25	; 0x04
     66c:	83 83       	std	Z+3, r24	; 0x03
     66e:	69 83       	std	Y+1, r22	; 0x01
     670:	0e 94 05 10 	call	0x200a	; 0x200a <printf_P>
		printf_P(PSTR("  -- Error Code: %d" ESC_FG_WHITE), ErrorCode);
     674:	ed b7       	in	r30, 0x3d	; 61
     676:	fe b7       	in	r31, 0x3e	; 62
     678:	31 96       	adiw	r30, 0x01	; 1
     67a:	88 e9       	ldi	r24, 0x98	; 152
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	ad b7       	in	r26, 0x3d	; 61
     680:	be b7       	in	r27, 0x3e	; 62
     682:	12 96       	adiw	r26, 0x02	; 2
     684:	9c 93       	st	X, r25
     686:	8e 93       	st	-X, r24
     688:	11 97       	sbiw	r26, 0x01	; 1
     68a:	69 81       	ldd	r22, Y+1	; 0x01
     68c:	62 83       	std	Z+2, r22	; 0x02
     68e:	13 82       	std	Z+3, r1	; 0x03
     690:	0e 94 05 10 	call	0x200a	; 0x200a <printf_P>
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     69c:	80 91 a9 00 	lds	r24, 0x00A9
     6a0:	80 64       	ori	r24, 0x40	; 64
     6a2:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_Freeze();

	/* Indicate device error via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     6a6:	80 e9       	ldi	r24, 0x90	; 144
     6a8:	f1 de       	rcall	.-542    	; 0x48c <LEDs_SetAllLEDs>
}
     6aa:	0f 90       	pop	r0
     6ac:	cf 91       	pop	r28
     6ae:	df 91       	pop	r29
     6b0:	08 95       	ret

000006b2 <MassStorageHost_Task>:

/** Task to set the configuration of the attached device after it has been enumerated, and to read in blocks from
 *  the device and print them to the serial port.
 */
void MassStorageHost_Task(void)
{
     6b2:	2f 92       	push	r2
     6b4:	3f 92       	push	r3
     6b6:	4f 92       	push	r4
     6b8:	5f 92       	push	r5
     6ba:	6f 92       	push	r6
     6bc:	7f 92       	push	r7
     6be:	8f 92       	push	r8
     6c0:	9f 92       	push	r9
     6c2:	af 92       	push	r10
     6c4:	bf 92       	push	r11
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	df 93       	push	r29
     6d4:	cf 93       	push	r28
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	ee 97       	sbiw	r28, 0x3e	; 62
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
	}

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     6e6:	2d b6       	in	r2, 0x3d	; 61
     6e8:	3e b6       	in	r3, 0x3e	; 62
/** Task to set the configuration of the attached device after it has been enumerated, and to read in blocks from
 *  the device and print them to the serial port.
 */
void MassStorageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     6ea:	80 91 34 01 	lds	r24, 0x0134
     6ee:	8b 30       	cpi	r24, 0x0B	; 11
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <MassStorageHost_Task+0x42>
     6f2:	ab c1       	rjmp	.+854    	; 0xa4a <MassStorageHost_Task+0x398>
	  return;

	/* Indicate device busy via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     6f4:	80 e2       	ldi	r24, 0x20	; 32
     6f6:	ca de       	rcall	.-620    	; 0x48c <LEDs_SetAllLEDs>

	uint8_t ErrorCode;

	/* Send the request, display error and wait for device detach if request fails */
	if ((ErrorCode = MassStore_GetMaxLUN(&MassStore_MaxLUNIndex)) != HOST_SENDCONTROL_Successful)
     6f8:	89 e2       	ldi	r24, 0x29	; 41
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	fb d3       	rcall	.+2038   	; 0xef4 <MassStore_GetMaxLUN>
     6fe:	68 2f       	mov	r22, r24
     700:	88 23       	and	r24, r24
     702:	19 f0       	breq	.+6      	; 0x70a <MassStorageHost_Task+0x58>
	{
		ShowDiskReadError(PSTR("Get Max LUN"), ErrorCode);
     704:	8d e7       	ldi	r24, 0x7D	; 125
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	85 c0       	rjmp	.+266    	; 0x814 <MassStorageHost_Task+0x162>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Print number of LUNs detected in the attached device */
	printf_P(PSTR("Total LUNs: %d - Using first LUN in device.\r\n"), (MassStore_MaxLUNIndex + 1));
     70a:	00 d0       	rcall	.+0      	; 0x70c <MassStorageHost_Task+0x5a>
     70c:	00 d0       	rcall	.+0      	; 0x70e <MassStorageHost_Task+0x5c>
     70e:	8f e4       	ldi	r24, 0x4F	; 79
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	ad b7       	in	r26, 0x3d	; 61
     714:	be b7       	in	r27, 0x3e	; 62
     716:	12 96       	adiw	r26, 0x02	; 2
     718:	9c 93       	st	X, r25
     71a:	8e 93       	st	-X, r24
     71c:	11 97       	sbiw	r26, 0x01	; 1
     71e:	80 91 29 01 	lds	r24, 0x0129
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	14 96       	adiw	r26, 0x04	; 4
     728:	9c 93       	st	X, r25
     72a:	8e 93       	st	-X, r24
     72c:	13 97       	sbiw	r26, 0x03	; 3
     72e:	0e 94 05 10 	call	0x200a	; 0x200a <printf_P>

	/* Reset the Mass Storage device interface, ready for use */
	if ((ErrorCode = MassStore_MassStorageReset()) != HOST_SENDCONTROL_Successful)
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	ad d3       	rcall	.+1882   	; 0xe96 <MassStore_MassStorageReset>
     73c:	68 2f       	mov	r22, r24
     73e:	88 23       	and	r24, r24
     740:	19 f0       	breq	.+6      	; 0x748 <MassStorageHost_Task+0x96>
	{
		ShowDiskReadError(PSTR("Mass Storage Reset"), ErrorCode);
     742:	8c e3       	ldi	r24, 0x3C	; 60
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	66 c0       	rjmp	.+204    	; 0x814 <MassStorageHost_Task+0x162>
	}

	/* Get sense data from the device - many devices will not accept any other commands until the sense data
	 * is read - both on start-up and after a failed command */
	SCSI_Request_Sense_Response_t SenseData;
	if ((ErrorCode = MassStore_RequestSense(0, &SenseData)) != 0)
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	be 01       	movw	r22, r28
     74c:	67 5f       	subi	r22, 0xF7	; 247
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	22 d4       	rcall	.+2116   	; 0xf96 <MassStore_RequestSense>
     752:	68 2f       	mov	r22, r24
     754:	88 23       	and	r24, r24
     756:	19 f0       	breq	.+6      	; 0x75e <MassStorageHost_Task+0xac>
	{
		ShowDiskReadError(PSTR("Request Sense"), ErrorCode);
     758:	8e e2       	ldi	r24, 0x2E	; 46
     75a:	92 e0       	ldi	r25, 0x02	; 2
     75c:	5b c0       	rjmp	.+182    	; 0x814 <MassStorageHost_Task+0x162>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Set the prevent removal flag for the device, allowing it to be accessed */
	if ((ErrorCode = MassStore_PreventAllowMediumRemoval(0, true)) != 0)
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	2a d5       	rcall	.+2644   	; 0x11b8 <MassStore_PreventAllowMediumRemoval>
     764:	68 2f       	mov	r22, r24
     766:	88 23       	and	r24, r24
     768:	19 f0       	breq	.+6      	; 0x770 <MassStorageHost_Task+0xbe>
	{
		ShowDiskReadError(PSTR("Prevent/Allow Medium Removal"), ErrorCode);
     76a:	81 e1       	ldi	r24, 0x11	; 17
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	52 c0       	rjmp	.+164    	; 0x814 <MassStorageHost_Task+0x162>
		return;
	}

	/* Get inquiry data from the device */
	SCSI_Inquiry_Response_t InquiryData;
	if ((ErrorCode = MassStore_Inquiry(0, &InquiryData)) != 0)
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	be 01       	movw	r22, r28
     774:	65 5e       	subi	r22, 0xE5	; 229
     776:	7f 4f       	sbci	r23, 0xFF	; 255
     778:	d9 d3       	rcall	.+1970   	; 0xf2c <MassStore_Inquiry>
     77a:	68 2f       	mov	r22, r24
     77c:	88 23       	and	r24, r24
     77e:	19 f0       	breq	.+6      	; 0x786 <MassStorageHost_Task+0xd4>
	{
		ShowDiskReadError(PSTR("Inquiry"), ErrorCode);
     780:	89 e0       	ldi	r24, 0x09	; 9
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	47 c0       	rjmp	.+142    	; 0x814 <MassStorageHost_Task+0x162>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Print vendor and product names of attached device */
	printf_P(PSTR("Vendor \"%.8s\", Product \"%.16s\"\r\n"), InquiryData.VendorID, InquiryData.ProductID);
     786:	00 d0       	rcall	.+0      	; 0x788 <MassStorageHost_Task+0xd6>
     788:	00 d0       	rcall	.+0      	; 0x78a <MassStorageHost_Task+0xd8>
     78a:	00 d0       	rcall	.+0      	; 0x78c <MassStorageHost_Task+0xda>
     78c:	ed b7       	in	r30, 0x3d	; 61
     78e:	fe b7       	in	r31, 0x3e	; 62
     790:	31 96       	adiw	r30, 0x01	; 1
     792:	88 ee       	ldi	r24, 0xE8	; 232
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	ad b7       	in	r26, 0x3d	; 61
     798:	be b7       	in	r27, 0x3e	; 62
     79a:	12 96       	adiw	r26, 0x02	; 2
     79c:	9c 93       	st	X, r25
     79e:	8e 93       	st	-X, r24
     7a0:	11 97       	sbiw	r26, 0x01	; 1
     7a2:	ce 01       	movw	r24, r28
     7a4:	83 96       	adiw	r24, 0x23	; 35
     7a6:	93 83       	std	Z+3, r25	; 0x03
     7a8:	82 83       	std	Z+2, r24	; 0x02
     7aa:	ce 01       	movw	r24, r28
     7ac:	8b 96       	adiw	r24, 0x2b	; 43
     7ae:	95 83       	std	Z+5, r25	; 0x05
     7b0:	84 83       	std	Z+4, r24	; 0x04
     7b2:	0e 94 05 10 	call	0x200a	; 0x200a <printf_P>

	/* Wait until disk ready */
	puts_P(PSTR("Waiting until ready.."));
     7b6:	ed b7       	in	r30, 0x3d	; 61
     7b8:	fe b7       	in	r31, 0x3e	; 62
     7ba:	36 96       	adiw	r30, 0x06	; 6
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	fe bf       	out	0x3e, r31	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	ed bf       	out	0x3d, r30	; 61
     7c6:	82 ed       	ldi	r24, 0xD2	; 210
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
				UDR1 = DataByte;
     7ce:	0e e2       	ldi	r16, 0x2E	; 46
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     7d0:	80 91 c8 00 	lds	r24, 0x00C8
     7d4:	85 ff       	sbrs	r24, 5
     7d6:	fc cf       	rjmp	.-8      	; 0x7d0 <MassStorageHost_Task+0x11e>
				UDR1 = DataByte;
     7d8:	00 93 ce 00 	sts	0x00CE, r16
	for (;;)
	{
		Serial_SendByte('.');

		/* Abort if device removed */
		if (USB_HostState == HOST_STATE_Unattached)
     7dc:	80 91 34 01 	lds	r24, 0x0134
     7e0:	81 30       	cpi	r24, 0x01	; 1
     7e2:	51 f0       	breq	.+20     	; 0x7f8 <MassStorageHost_Task+0x146>
		  break;

		/* Check to see if the attached device is ready for new commands */
		ErrorCode = MassStore_TestUnitReady(0);
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	67 d4       	rcall	.+2254   	; 0x10b6 <MassStore_TestUnitReady>
     7e8:	68 2f       	mov	r22, r24

		/* If attached device is ready, abort the loop */
		if (!(ErrorCode))
     7ea:	88 23       	and	r24, r24
     7ec:	29 f0       	breq	.+10     	; 0x7f8 <MassStorageHost_Task+0x146>
		  break;

		/* If an error other than a logical command failure (indicating device busy) returned, abort */
		if (ErrorCode != MASS_STORE_SCSI_COMMAND_FAILED)
     7ee:	80 3c       	cpi	r24, 0xC0	; 192
     7f0:	79 f3       	breq	.-34     	; 0x7d0 <MassStorageHost_Task+0x11e>
		{
			ShowDiskReadError(PSTR("Test Unit Ready"), ErrorCode);
     7f2:	82 ec       	ldi	r24, 0xC2	; 194
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0e c0       	rjmp	.+28     	; 0x814 <MassStorageHost_Task+0x162>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("\r\nRetrieving Capacity... "));
     7f8:	88 ea       	ldi	r24, 0xA8	; 168
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>

	/* Create new structure for the disk's capacity in blocks and block size */
	SCSI_Capacity_t DiskCapacity;

	/* Retrieve disk capacity */
	if ((ErrorCode = MassStore_ReadCapacity(0, &DiskCapacity)) != 0)
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	be 01       	movw	r22, r28
     804:	6f 5f       	subi	r22, 0xFF	; 255
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	81 d4       	rcall	.+2306   	; 0x110c <MassStore_ReadCapacity>
     80a:	68 2f       	mov	r22, r24
     80c:	88 23       	and	r24, r24
     80e:	39 f0       	breq	.+14     	; 0x81e <MassStorageHost_Task+0x16c>
	{
		ShowDiskReadError(PSTR("Read Capacity"), ErrorCode);
     810:	8a e9       	ldi	r24, 0x9A	; 154
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	0c df       	rcall	.-488    	; 0x62e <ShowDiskReadError>
		USB_Host_SetDeviceConfiguration(0);
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <USB_Host_SetDeviceConfiguration>
		return;
     81c:	16 c1       	rjmp	.+556    	; 0xa4a <MassStorageHost_Task+0x398>
	}

	/* Display the disk capacity in blocks * block size bytes */
	printf_P(PSTR("%lu blocks of %lu bytes.\r\n"), DiskCapacity.Blocks, DiskCapacity.BlockSize);
     81e:	2d b7       	in	r18, 0x3d	; 61
     820:	3e b7       	in	r19, 0x3e	; 62
     822:	2a 50       	subi	r18, 0x0A	; 10
     824:	30 40       	sbci	r19, 0x00	; 0
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	3e bf       	out	0x3e, r19	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	2d bf       	out	0x3d, r18	; 61
     830:	ed b7       	in	r30, 0x3d	; 61
     832:	fe b7       	in	r31, 0x3e	; 62
     834:	31 96       	adiw	r30, 0x01	; 1
     836:	8f e7       	ldi	r24, 0x7F	; 127
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	ad b7       	in	r26, 0x3d	; 61
     83c:	be b7       	in	r27, 0x3e	; 62
     83e:	12 96       	adiw	r26, 0x02	; 2
     840:	9c 93       	st	X, r25
     842:	8e 93       	st	-X, r24
     844:	11 97       	sbiw	r26, 0x01	; 1
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	9a 81       	ldd	r25, Y+2	; 0x02
     84a:	ab 81       	ldd	r26, Y+3	; 0x03
     84c:	bc 81       	ldd	r27, Y+4	; 0x04
     84e:	82 83       	std	Z+2, r24	; 0x02
     850:	93 83       	std	Z+3, r25	; 0x03
     852:	a4 83       	std	Z+4, r26	; 0x04
     854:	b5 83       	std	Z+5, r27	; 0x05
     856:	8d 81       	ldd	r24, Y+5	; 0x05
     858:	9e 81       	ldd	r25, Y+6	; 0x06
     85a:	af 81       	ldd	r26, Y+7	; 0x07
     85c:	b8 85       	ldd	r27, Y+8	; 0x08
     85e:	86 83       	std	Z+6, r24	; 0x06
     860:	97 83       	std	Z+7, r25	; 0x07
     862:	a0 87       	std	Z+8, r26	; 0x08
     864:	b1 87       	std	Z+9, r27	; 0x09
     866:	0e 94 05 10 	call	0x200a	; 0x200a <printf_P>

	/* Create a new buffer capable of holding a single block from the device */
	uint8_t BlockBuffer[DiskCapacity.BlockSize];
     86a:	8d 81       	ldd	r24, Y+5	; 0x05
     86c:	9e 81       	ldd	r25, Y+6	; 0x06
     86e:	af 81       	ldd	r26, Y+7	; 0x07
     870:	b8 85       	ldd	r27, Y+8	; 0x08
     872:	ed b7       	in	r30, 0x3d	; 61
     874:	fe b7       	in	r31, 0x3e	; 62
     876:	3a 96       	adiw	r30, 0x0a	; 10
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	fe bf       	out	0x3e, r31	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	ed bf       	out	0x3d, r30	; 61
     882:	5e 2e       	mov	r5, r30
     884:	4f 2e       	mov	r4, r31
     886:	2d b7       	in	r18, 0x3d	; 61
     888:	3e b7       	in	r19, 0x3e	; 62
     88a:	28 1b       	sub	r18, r24
     88c:	39 0b       	sbc	r19, r25
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	3e bf       	out	0x3e, r19	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	2d bf       	out	0x3d, r18	; 61
     898:	8d b6       	in	r8, 0x3d	; 61
     89a:	9e b6       	in	r9, 0x3e	; 62
     89c:	08 94       	sec
     89e:	81 1c       	adc	r8, r1
     8a0:	91 1c       	adc	r9, r1

	/* Read in the first 512 byte block from the device */
	if ((ErrorCode = MassStore_ReadDeviceBlock(0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     8a2:	0d 81       	ldd	r16, Y+5	; 0x05
     8a4:	1e 81       	ldd	r17, Y+6	; 0x06
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	ba 01       	movw	r22, r20
     8ae:	21 e0       	ldi	r18, 0x01	; 1
     8b0:	74 01       	movw	r14, r8
     8b2:	a6 d3       	rcall	.+1868   	; 0x1000 <MassStore_ReadDeviceBlock>
     8b4:	68 2f       	mov	r22, r24
     8b6:	88 23       	and	r24, r24
     8b8:	19 f0       	breq	.+6      	; 0x8c0 <MassStorageHost_Task+0x20e>
	{
		ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     8ba:	8d e6       	ldi	r24, 0x6D	; 109
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	86 c0       	rjmp	.+268    	; 0x9cc <MassStorageHost_Task+0x31a>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));
     8c0:	80 e5       	ldi	r24, 0x50	; 80
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     8c8:	ee 24       	eor	r14, r14
     8ca:	ff 24       	eor	r15, r15
		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);

			printf_P(PSTR("%.2X "), CurrByte);
     8cc:	ba e4       	ldi	r27, 0x4A	; 74
     8ce:	6b 2e       	mov	r6, r27
     8d0:	b1 e0       	ldi	r27, 0x01	; 1
     8d2:	7b 2e       	mov	r7, r27
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     8d4:	45 c0       	rjmp	.+138    	; 0x960 <MassStorageHost_Task+0x2ae>
	{
		/* Pointer to the start of the current 16-byte chunk in the read block of data */
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];
     8d6:	87 01       	movw	r16, r14
     8d8:	a4 e0       	ldi	r26, 0x04	; 4
     8da:	00 0f       	add	r16, r16
     8dc:	11 1f       	adc	r17, r17
     8de:	aa 95       	dec	r26
     8e0:	e1 f7       	brne	.-8      	; 0x8da <MassStorageHost_Task+0x228>
     8e2:	08 0d       	add	r16, r8
     8e4:	19 1d       	adc	r17, r9
     8e6:	68 01       	movw	r12, r16
     8e8:	f0 e1       	ldi	r31, 0x10	; 16
     8ea:	af 2e       	mov	r10, r31

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     8ec:	d6 01       	movw	r26, r12
     8ee:	8d 91       	ld	r24, X+
     8f0:	6d 01       	movw	r12, r26

			printf_P(PSTR("%.2X "), CurrByte);
     8f2:	00 d0       	rcall	.+0      	; 0x8f4 <MassStorageHost_Task+0x242>
     8f4:	00 d0       	rcall	.+0      	; 0x8f6 <MassStorageHost_Task+0x244>
     8f6:	ed b7       	in	r30, 0x3d	; 61
     8f8:	fe b7       	in	r31, 0x3e	; 62
     8fa:	31 96       	adiw	r30, 0x01	; 1
     8fc:	ad b7       	in	r26, 0x3d	; 61
     8fe:	be b7       	in	r27, 0x3e	; 62
     900:	12 96       	adiw	r26, 0x02	; 2
     902:	7c 92       	st	X, r7
     904:	6e 92       	st	-X, r6
     906:	11 97       	sbiw	r26, 0x01	; 1
     908:	82 83       	std	Z+2, r24	; 0x02
     90a:	13 82       	std	Z+3, r1	; 0x03
     90c:	0e 94 05 10 	call	0x200a	; 0x200a <printf_P>
     910:	aa 94       	dec	r10
	{
		/* Pointer to the start of the current 16-byte chunk in the read block of data */
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	41 f7       	brne	.-48     	; 0x8ec <MassStorageHost_Task+0x23a>
			char CurrByte = *(ChunkPtr + ByteOffset);

			printf_P(PSTR("%.2X "), CurrByte);
		}

		puts_P(PSTR("    "));
     91c:	85 e4       	ldi	r24, 0x45	; 69
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>
     924:	e0 e1       	ldi	r30, 0x10	; 16
     926:	ae 2e       	mov	r10, r30

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     928:	f8 01       	movw	r30, r16
     92a:	c1 90       	ld	r12, Z+
     92c:	8f 01       	movw	r16, r30

			putchar(isprint(CurrByte) ? CurrByte : '.');
     92e:	dd 24       	eor	r13, r13
     930:	c6 01       	movw	r24, r12
     932:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <isprint>
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	19 f4       	brne	.+6      	; 0x940 <MassStorageHost_Task+0x28e>
     93a:	7e e2       	ldi	r23, 0x2E	; 46
     93c:	c7 2e       	mov	r12, r23
     93e:	d1 2c       	mov	r13, r1
     940:	60 91 45 01 	lds	r22, 0x0145
     944:	70 91 46 01 	lds	r23, 0x0146
     948:	c6 01       	movw	r24, r12
     94a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
     94e:	aa 94       	dec	r10
		}

		puts_P(PSTR("    "));

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     950:	59 f7       	brne	.-42     	; 0x928 <MassStorageHost_Task+0x276>
			char CurrByte = *(ChunkPtr + ByteOffset);

			putchar(isprint(CurrByte) ? CurrByte : '.');
		}

		puts_P(PSTR("\r\n"));
     952:	82 e4       	ldi	r24, 0x42	; 66
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     95a:	08 94       	sec
     95c:	e1 1c       	adc	r14, r1
     95e:	f1 1c       	adc	r15, r1
     960:	97 01       	movw	r18, r14
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	8d 81       	ldd	r24, Y+5	; 0x05
     968:	9e 81       	ldd	r25, Y+6	; 0x06
     96a:	af 81       	ldd	r26, Y+7	; 0x07
     96c:	b8 85       	ldd	r27, Y+8	; 0x08
     96e:	64 e0       	ldi	r22, 0x04	; 4
     970:	b6 95       	lsr	r27
     972:	a7 95       	ror	r26
     974:	97 95       	ror	r25
     976:	87 95       	ror	r24
     978:	6a 95       	dec	r22
     97a:	d1 f7       	brne	.-12     	; 0x970 <MassStorageHost_Task+0x2be>
     97c:	28 17       	cp	r18, r24
     97e:	39 07       	cpc	r19, r25
     980:	4a 07       	cpc	r20, r26
     982:	5b 07       	cpc	r21, r27
     984:	08 f4       	brcc	.+2      	; 0x988 <MassStorageHost_Task+0x2d6>
     986:	a7 cf       	rjmp	.-178    	; 0x8d6 <MassStorageHost_Task+0x224>
		}

		puts_P(PSTR("\r\n"));
	}

	puts_P(PSTR("\r\n\r\nPress board button to read entire ASCII contents of disk...\r\n\r\n"));
     988:	8e ef       	ldi	r24, 0xFE	; 254
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>

	/* Wait for the board button to be pressed */
	while (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
     990:	05 c0       	rjmp	.+10     	; 0x99c <MassStorageHost_Task+0x2ea>
	{
		/* Abort if device removed */
		if (USB_HostState == HOST_STATE_Unattached)
     992:	80 91 34 01 	lds	r24, 0x0134
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	09 f4       	brne	.+2      	; 0x99c <MassStorageHost_Task+0x2ea>
     99a:	4f c0       	rjmp	.+158    	; 0xa3a <MassStorageHost_Task+0x388>
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     99c:	8c b1       	in	r24, 0x0c	; 12
	}

	puts_P(PSTR("\r\n\r\nPress board button to read entire ASCII contents of disk...\r\n\r\n"));

	/* Wait for the board button to be pressed */
	while (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
     99e:	82 fd       	sbrc	r24, 2
     9a0:	f8 cf       	rjmp	.-16     	; 0x992 <MassStorageHost_Task+0x2e0>
     9a2:	aa 24       	eor	r10, r10
     9a4:	bb 24       	eor	r11, r11
     9a6:	65 01       	movw	r12, r10
     9a8:	39 c0       	rjmp	.+114    	; 0xa1c <MassStorageHost_Task+0x36a>

	/* Print out the entire disk contents in ASCII format */
	for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
	{
		/* Read in the next block of data from the device */
		if ((ErrorCode = MassStore_ReadDeviceBlock(0, CurrBlockAddress, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     9aa:	0d 81       	ldd	r16, Y+5	; 0x05
     9ac:	1e 81       	ldd	r17, Y+6	; 0x06
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	b6 01       	movw	r22, r12
     9b2:	a5 01       	movw	r20, r10
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	74 01       	movw	r14, r8
     9b8:	23 d3       	rcall	.+1606   	; 0x1000 <MassStore_ReadDeviceBlock>
     9ba:	68 2f       	mov	r22, r24
     9bc:	88 23       	and	r24, r24
     9be:	21 f4       	brne	.+8      	; 0x9c8 <MassStorageHost_Task+0x316>
     9c0:	34 01       	movw	r6, r8
     9c2:	00 e0       	ldi	r16, 0x00	; 0
     9c4:	10 e0       	ldi	r17, 0x00	; 0
     9c6:	19 c0       	rjmp	.+50     	; 0x9fa <MassStorageHost_Task+0x348>
		{
			ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     9c8:	8c ee       	ldi	r24, 0xEC	; 236
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	30 de       	rcall	.-928    	; 0x62e <ShowDiskReadError>
     9ce:	32 c0       	rjmp	.+100    	; 0xa34 <MassStorageHost_Task+0x382>
		}

		/* Send the ASCII data in the read in block to the serial port */
		for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
		{
			char CurrByte = BlockBuffer[Byte];
     9d0:	d3 01       	movw	r26, r6
     9d2:	ed 90       	ld	r14, X+
     9d4:	3d 01       	movw	r6, r26

			putchar(isprint(CurrByte) ? CurrByte : '.');
     9d6:	ff 24       	eor	r15, r15
     9d8:	c7 01       	movw	r24, r14
     9da:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <isprint>
     9de:	00 97       	sbiw	r24, 0x00	; 0
     9e0:	19 f4       	brne	.+6      	; 0x9e8 <MassStorageHost_Task+0x336>
     9e2:	8e e2       	ldi	r24, 0x2E	; 46
     9e4:	e8 2e       	mov	r14, r24
     9e6:	f1 2c       	mov	r15, r1
     9e8:	60 91 45 01 	lds	r22, 0x0145
     9ec:	70 91 46 01 	lds	r23, 0x0146
     9f0:	c7 01       	movw	r24, r14
     9f2:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}

		/* Send the ASCII data in the read in block to the serial port */
		for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
     9f6:	0f 5f       	subi	r16, 0xFF	; 255
     9f8:	1f 4f       	sbci	r17, 0xFF	; 255
     9fa:	98 01       	movw	r18, r16
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	8d 81       	ldd	r24, Y+5	; 0x05
     a02:	9e 81       	ldd	r25, Y+6	; 0x06
     a04:	af 81       	ldd	r26, Y+7	; 0x07
     a06:	b8 85       	ldd	r27, Y+8	; 0x08
     a08:	28 17       	cp	r18, r24
     a0a:	39 07       	cpc	r19, r25
     a0c:	4a 07       	cpc	r20, r26
     a0e:	5b 07       	cpc	r21, r27
     a10:	f8 f2       	brcs	.-66     	; 0x9d0 <MassStorageHost_Task+0x31e>
		if (USB_HostState == HOST_STATE_Unattached)
		  return;
	}

	/* Print out the entire disk contents in ASCII format */
	for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
     a12:	08 94       	sec
     a14:	a1 1c       	adc	r10, r1
     a16:	b1 1c       	adc	r11, r1
     a18:	c1 1c       	adc	r12, r1
     a1a:	d1 1c       	adc	r13, r1
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	9a 81       	ldd	r25, Y+2	; 0x02
     a20:	ab 81       	ldd	r26, Y+3	; 0x03
     a22:	bc 81       	ldd	r27, Y+4	; 0x04
     a24:	a8 16       	cp	r10, r24
     a26:	b9 06       	cpc	r11, r25
     a28:	ca 06       	cpc	r12, r26
     a2a:	db 06       	cpc	r13, r27
     a2c:	08 f4       	brcc	.+2      	; 0xa30 <MassStorageHost_Task+0x37e>
     a2e:	bd cf       	rjmp	.-134    	; 0x9aa <MassStorageHost_Task+0x2f8>
			putchar(isprint(CurrByte) ? CurrByte : '.');
		}
	}

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     a30:	80 e6       	ldi	r24, 0x60	; 96
     a32:	2c dd       	rcall	.-1448   	; 0x48c <LEDs_SetAllLEDs>
	USB_Host_SetDeviceConfiguration(0);
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <USB_Host_SetDeviceConfiguration>
     a3a:	92 01       	movw	r18, r4
     a3c:	83 2f       	mov	r24, r19
     a3e:	94 2d       	mov	r25, r4
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	9e bf       	out	0x3e, r25	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	8d bf       	out	0x3d, r24	; 61
}
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	3e be       	out	0x3e, r3	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	2d be       	out	0x3d, r2	; 61
     a54:	ee 96       	adiw	r28, 0x3e	; 62
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	cf 91       	pop	r28
     a62:	df 91       	pop	r29
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	7f 90       	pop	r7
     a7a:	6f 90       	pop	r6
     a7c:	5f 90       	pop	r5
     a7e:	4f 90       	pop	r4
     a80:	3f 90       	pop	r3
     a82:	2f 90       	pop	r2
     a84:	08 95       	ret

00000a86 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     a86:	07 dd       	rcall	.-1522   	; 0x496 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mass Storage Host Demo running.\r\n" ESC_FG_WHITE));
     a88:	81 e2       	ldi	r24, 0x21	; 33
     a8a:	94 e0       	ldi	r25, 0x04	; 4
     a8c:	0e 94 24 10 	call	0x2048	; 0x2048 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	fc dc       	rcall	.-1544   	; 0x48c <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a94:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		MassStorageHost_Task();
     a96:	0d de       	rcall	.-998    	; 0x6b2 <MassStorageHost_Task>

		USB_USBTask();
     a98:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <USB_USBTask>
     a9c:	fc cf       	rjmp	.-8      	; 0xa96 <main+0x10>

00000a9e <DComp_NextMSInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mass Storage Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMSInterface(void* CurrentDescriptor)
{
     a9e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     aa0:	81 81       	ldd	r24, Z+1	; 0x01
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	49 f4       	brne	.+18     	; 0xab8 <DComp_NextMSInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == MASS_STORE_CLASS)    &&
     aa6:	85 81       	ldd	r24, Z+5	; 0x05
     aa8:	88 30       	cpi	r24, 0x08	; 8
     aaa:	31 f4       	brne	.+12     	; 0xab8 <DComp_NextMSInterface+0x1a>
     aac:	86 81       	ldd	r24, Z+6	; 0x06
     aae:	86 30       	cpi	r24, 0x06	; 6
     ab0:	19 f4       	brne	.+6      	; 0xab8 <DComp_NextMSInterface+0x1a>
		    (Interface->SubClass == MASS_STORE_SUBCLASS) &&
     ab2:	87 81       	ldd	r24, Z+7	; 0x07
     ab4:	80 35       	cpi	r24, 0x50	; 80
     ab6:	11 f0       	breq	.+4      	; 0xabc <DComp_NextMSInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	08 95       	ret
		/* Check the descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == MASS_STORE_CLASS)    &&
		    (Interface->SubClass == MASS_STORE_SUBCLASS) &&
		    (Interface->Protocol == MASS_STORE_PROTOCOL))
		{
			return DESCRIPTOR_SEARCH_Found;
     abc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     abe:	08 95       	ret

00000ac0 <DComp_NextMSInterfaceBulkDataEndpoint>:
 *  another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMSInterfaceBulkDataEndpoint(void* CurrentDescriptor)
{
     ac0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     ac2:	81 81       	ldd	r24, Z+1	; 0x01
     ac4:	85 30       	cpi	r24, 0x05	; 5
     ac6:	29 f4       	brne	.+10     	; 0xad2 <DComp_NextMSInterfaceBulkDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     ac8:	83 81       	ldd	r24, Z+3	; 0x03
     aca:	83 70       	andi	r24, 0x03	; 3
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	19 f4       	brne	.+6      	; 0xad6 <DComp_NextMSInterfaceBulkDataEndpoint+0x16>
     ad0:	04 c0       	rjmp	.+8      	; 0xada <DComp_NextMSInterfaceBulkDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     ad2:	84 30       	cpi	r24, 0x04	; 4
     ad4:	21 f0       	breq	.+8      	; 0xade <DComp_NextMSInterfaceBulkDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	08 95       	ret
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
		  return DESCRIPTOR_SEARCH_Found;
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     ade:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     ae0:	08 95       	ret

00000ae2 <ProcessConfigurationDescriptor>:
 *  This routine searches for a MSD interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref MassStorageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     ae2:	8f 92       	push	r8
     ae4:	9f 92       	push	r9
     ae6:	af 92       	push	r10
     ae8:	bf 92       	push	r11
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	df 93       	push	r29
     af8:	cf 93       	push	r28
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	c4 50       	subi	r28, 0x04	; 4
     b00:	d2 40       	sbci	r29, 0x02	; 2
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     b0c:	ae 01       	movw	r20, r28
     b0e:	4b 5f       	subi	r20, 0xFB	; 251
     b10:	5f 4f       	sbci	r21, 0xFF	; 255
     b12:	5a 83       	std	Y+2, r21	; 0x02
     b14:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* MSInterface     = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	c8 2e       	mov	r12, r24
     b1a:	d1 2c       	mov	r13, r1
     b1c:	cc 0e       	add	r12, r28
     b1e:	dd 1e       	adc	r13, r29
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	b6 01       	movw	r22, r12
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	32 e0       	ldi	r19, 0x02	; 2
     b28:	d8 d7       	rcall	.+4016   	; 0x1ada <USB_Host_GetDeviceConfigDescriptor>
     b2a:	85 30       	cpi	r24, 0x05	; 5
     b2c:	09 f4       	brne	.+2      	; 0xb30 <ProcessConfigurationDescriptor+0x4e>
     b2e:	4d c0       	rjmp	.+154    	; 0xbca <ProcessConfigurationDescriptor+0xe8>
     b30:	86 30       	cpi	r24, 0x06	; 6
     b32:	71 f0       	breq	.+28     	; 0xb50 <ProcessConfigurationDescriptor+0x6e>
     b34:	88 23       	and	r24, r24
     b36:	71 f4       	brne	.+28     	; 0xb54 <ProcessConfigurationDescriptor+0x72>
     b38:	ee 24       	eor	r14, r14
     b3a:	ff 24       	eor	r15, r15
     b3c:	00 e0       	ldi	r16, 0x00	; 0
     b3e:	10 e0       	ldi	r17, 0x00	; 0
     b40:	88 24       	eor	r8, r8
     b42:	99 24       	eor	r9, r9

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     b44:	56 01       	movw	r10, r12
     b46:	6e 01       	movw	r12, r28
     b48:	08 94       	sec
     b4a:	c1 1c       	adc	r12, r1
     b4c:	d1 1c       	adc	r13, r1
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <ProcessConfigurationDescriptor+0x76>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	3e c0       	rjmp	.+124    	; 0xbd0 <ProcessConfigurationDescriptor+0xee>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	3c c0       	rjmp	.+120    	; 0xbd0 <ProcessConfigurationDescriptor+0xee>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     b58:	81 14       	cp	r8, r1
     b5a:	91 04       	cpc	r9, r1
     b5c:	41 f0       	breq	.+16     	; 0xb6e <ProcessConfigurationDescriptor+0x8c>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     b5e:	c5 01       	movw	r24, r10
     b60:	b6 01       	movw	r22, r12
     b62:	40 e6       	ldi	r20, 0x60	; 96
     b64:	55 e0       	ldi	r21, 0x05	; 5
     b66:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     b6a:	88 23       	and	r24, r24
     b6c:	79 f0       	breq	.+30     	; 0xb8c <ProcessConfigurationDescriptor+0xaa>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMSInterfaceBulkDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     b6e:	c5 01       	movw	r24, r10
     b70:	b6 01       	movw	r22, r12
     b72:	4f e4       	ldi	r20, 0x4F	; 79
     b74:	55 e0       	ldi	r21, 0x05	; 5
     b76:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <USB_GetNextDescriptorComp>
     b7a:	88 23       	and	r24, r24
     b7c:	41 f5       	brne	.+80     	; 0xbce <ProcessConfigurationDescriptor+0xec>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MSInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     b7e:	89 80       	ldd	r8, Y+1	; 0x01
     b80:	9a 80       	ldd	r9, Y+2	; 0x02

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
     b82:	ee 24       	eor	r14, r14
     b84:	ff 24       	eor	r15, r15
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MSInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     b86:	00 e0       	ldi	r16, 0x00	; 0
     b88:	10 e0       	ldi	r17, 0x00	; 0
     b8a:	e6 cf       	rjmp	.-52     	; 0xb58 <ProcessConfigurationDescriptor+0x76>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     b8c:	e9 81       	ldd	r30, Y+1	; 0x01
     b8e:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     b90:	82 81       	ldd	r24, Z+2	; 0x02
     b92:	87 ff       	sbrs	r24, 7
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <ProcessConfigurationDescriptor+0xb8>
		  DataINEndpoint  = EndpointData;
     b96:	8f 01       	movw	r16, r30
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <ProcessConfigurationDescriptor+0xba>
		else
		  DataOUTEndpoint = EndpointData;
     b9a:	7f 01       	movw	r14, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     b9c:	01 15       	cp	r16, r1
     b9e:	11 05       	cpc	r17, r1
     ba0:	d9 f2       	breq	.-74     	; 0xb58 <ProcessConfigurationDescriptor+0x76>
     ba2:	e1 14       	cp	r14, r1
     ba4:	f1 04       	cpc	r15, r1
     ba6:	c1 f2       	breq	.-80     	; 0xb58 <ProcessConfigurationDescriptor+0x76>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the Mass Storage data IN pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     ba8:	f8 01       	movw	r30, r16
     baa:	24 81       	ldd	r18, Z+4	; 0x04
     bac:	35 81       	ldd	r19, Z+5	; 0x05
     bae:	81 e8       	ldi	r24, 0x81	; 129
     bb0:	62 e0       	ldi	r22, 0x02	; 2
     bb2:	42 81       	ldd	r20, Z+2	; 0x02
     bb4:	01 e0       	ldi	r16, 0x01	; 1
     bb6:	c8 d5       	rcall	.+2960   	; 0x1748 <Pipe_ConfigurePipe>

	/* Configure the Mass Storage data OUT pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     bb8:	f7 01       	movw	r30, r14
     bba:	24 81       	ldd	r18, Z+4	; 0x04
     bbc:	35 81       	ldd	r19, Z+5	; 0x05
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	62 e0       	ldi	r22, 0x02	; 2
     bc2:	42 81       	ldd	r20, Z+2	; 0x02
     bc4:	c1 d5       	rcall	.+2946   	; 0x1748 <Pipe_ConfigurePipe>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <ProcessConfigurationDescriptor+0xee>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	01 c0       	rjmp	.+2      	; 0xbd0 <ProcessConfigurationDescriptor+0xee>
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     bce:	84 e0       	ldi	r24, 0x04	; 4
	/* Configure the Mass Storage data OUT pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     bd0:	cc 5f       	subi	r28, 0xFC	; 252
     bd2:	dd 4f       	sbci	r29, 0xFD	; 253
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	bf 90       	pop	r11
     bf0:	af 90       	pop	r10
     bf2:	9f 90       	pop	r9
     bf4:	8f 90       	pop	r8
     bf6:	08 95       	ret

00000bf8 <MassStore_WaitForDataReceived>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     bf8:	20 91 a2 00 	lds	r18, 0x00A2
     bfc:	30 91 a3 00 	lds	r19, 0x00A3
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c06:	80 91 a9 00 	lds	r24, 0x00A9
     c0a:	8f 7b       	andi	r24, 0xBF	; 191
     c0c:	80 93 a9 00 	sts	0x00A9, r24
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
static uint8_t MassStore_WaitForDataReceived(void)
{
	uint16_t TimeoutMSRem        = COMMAND_DATA_TIMEOUT_MS;
     c10:	80 e1       	ldi	r24, 0x10	; 16
     c12:	97 e2       	ldi	r25, 0x27	; 39
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c14:	72 e0       	ldi	r23, 0x02	; 2
     c16:	61 e0       	ldi	r22, 0x01	; 1
	/* Select the IN data pipe for data reception */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received in the IN pipe */
	while (!(Pipe_IsINReceived()))
     c18:	3d c0       	rjmp	.+122    	; 0xc94 <MassStore_WaitForDataReceived+0x9c>
     c1a:	40 91 a2 00 	lds	r20, 0x00A2
     c1e:	50 91 a3 00 	lds	r21, 0x00A3
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		/* Check to see if a new frame has been issued (1ms elapsed) */
		if (CurrentFrameNumber != PreviousFrameNumber)
     c22:	42 17       	cp	r20, r18
     c24:	53 07       	cpc	r21, r19
     c26:	21 f0       	breq	.+8      	; 0xc30 <MassStore_WaitForDataReceived+0x38>
		{
			/* Save the new frame number and decrement the timeout period */
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;
     c28:	01 97       	sbiw	r24, 0x01	; 1

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
     c2a:	09 f4       	brne	.+2      	; 0xc2e <MassStore_WaitForDataReceived+0x36>
     c2c:	49 c0       	rjmp	.+146    	; 0xcc0 <MassStore_WaitForDataReceived+0xc8>
     c2e:	9a 01       	movw	r18, r20

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c30:	40 91 a9 00 	lds	r20, 0x00A9
     c34:	40 64       	ori	r20, 0x40	; 64
     c36:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c3a:	70 93 a7 00 	sts	0x00A7, r23

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c3e:	40 91 a9 00 	lds	r20, 0x00A9
     c42:	4f 7b       	andi	r20, 0xBF	; 191
     c44:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c48:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     c4c:	41 fd       	sbrc	r20, 1
     c4e:	10 c0       	rjmp	.+32     	; 0xc70 <MassStore_WaitForDataReceived+0x78>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c50:	40 91 a9 00 	lds	r20, 0x00A9
     c54:	40 64       	ori	r20, 0x40	; 64
     c56:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c5a:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c5e:	40 91 a9 00 	lds	r20, 0x00A9
     c62:	4f 7b       	andi	r20, 0xBF	; 191
     c64:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c68:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     c6c:	41 ff       	sbrs	r20, 1
     c6e:	0e c0       	rjmp	.+28     	; 0xc8c <MassStore_WaitForDataReceived+0x94>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     c70:	90 91 aa 00 	lds	r25, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     c74:	29 2f       	mov	r18, r25
     c76:	2f 70       	andi	r18, 0x0F	; 15
     c78:	90 ff       	sbrs	r25, 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <MassStore_WaitForDataReceived+0x88>
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <MassStore_WaitForDataReceived+0x8a>
     c80:	80 e8       	ldi	r24, 0x80	; 128
		{
			/* Clear the stall condition on the IN pipe */
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
     c82:	82 2b       	or	r24, r18
     c84:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <USB_Host_ClearEndpointStall>

			return PIPE_RWSTREAM_PipeStalled;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	08 95       	ret
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
     c8c:	40 91 34 01 	lds	r20, 0x0134
     c90:	41 30       	cpi	r20, 0x01	; 1
     c92:	c1 f0       	breq	.+48     	; 0xcc4 <MassStore_WaitForDataReceived+0xcc>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c94:	40 91 a6 00 	lds	r20, 0x00A6
	/* Select the IN data pipe for data reception */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received in the IN pipe */
	while (!(Pipe_IsINReceived()))
     c98:	40 ff       	sbrs	r20, 0
     c9a:	bf cf       	rjmp	.-130    	; 0xc1a <MassStore_WaitForDataReceived+0x22>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ca2:	80 91 a9 00 	lds	r24, 0x00A9
     ca6:	80 64       	ori	r24, 0x40	; 64
     ca8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     cb2:	80 91 a9 00 	lds	r24, 0x00A9
     cb6:	80 64       	ori	r24, 0x40	; 64
     cb8:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Freeze();

	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	08 95       	ret
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
			  return PIPE_RWSTREAM_Timeout;
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	08 95       	ret
			return PIPE_RWSTREAM_PipeStalled;
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
     cc4:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     cc6:	08 95       	ret

00000cc8 <MassStore_SendCommand>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
static uint8_t MassStore_SendCommand(MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                     void* BufferPtr)
{
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	2f 97       	sbiw	r28, 0x0f	; 15
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	8c 01       	movw	r16, r24
     ce8:	7b 01       	movw	r14, r22
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* Wrap Tag value when invalid - MS class defines tag values of 0 and 0xFFFFFFFF to be invalid */
	if (++MassStore_Tag == 0xFFFFFFFF)
     cea:	80 91 00 01 	lds	r24, 0x0100
     cee:	90 91 01 01 	lds	r25, 0x0101
     cf2:	a0 91 02 01 	lds	r26, 0x0102
     cf6:	b0 91 03 01 	lds	r27, 0x0103
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	a1 1d       	adc	r26, r1
     cfe:	b1 1d       	adc	r27, r1
     d00:	80 93 00 01 	sts	0x0100, r24
     d04:	90 93 01 01 	sts	0x0101, r25
     d08:	a0 93 02 01 	sts	0x0102, r26
     d0c:	b0 93 03 01 	sts	0x0103, r27
     d10:	8f 3f       	cpi	r24, 0xFF	; 255
     d12:	2f ef       	ldi	r18, 0xFF	; 255
     d14:	92 07       	cpc	r25, r18
     d16:	2f ef       	ldi	r18, 0xFF	; 255
     d18:	a2 07       	cpc	r26, r18
     d1a:	2f ef       	ldi	r18, 0xFF	; 255
     d1c:	b2 07       	cpc	r27, r18
     d1e:	61 f4       	brne	.+24     	; 0xd38 <MassStore_SendCommand+0x70>
	  MassStore_Tag = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	80 93 00 01 	sts	0x0100, r24
     d2c:	90 93 01 01 	sts	0x0101, r25
     d30:	a0 93 02 01 	sts	0x0102, r26
     d34:	b0 93 03 01 	sts	0x0103, r27

	/* Each transmission should have a unique tag value, increment before use */
	SCSICommandBlock->Tag = MassStore_Tag;
     d38:	80 91 00 01 	lds	r24, 0x0100
     d3c:	90 91 01 01 	lds	r25, 0x0101
     d40:	a0 91 02 01 	lds	r26, 0x0102
     d44:	b0 91 03 01 	lds	r27, 0x0103
     d48:	f8 01       	movw	r30, r16
     d4a:	84 83       	std	Z+4, r24	; 0x04
     d4c:	95 83       	std	Z+5, r25	; 0x05
     d4e:	a6 83       	std	Z+6, r26	; 0x06
     d50:	b7 83       	std	Z+7, r27	; 0x07
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	d8 2e       	mov	r13, r24
     d56:	d0 92 a7 00 	sts	0x00A7, r13

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     d5a:	80 91 a9 00 	lds	r24, 0x00A9
     d5e:	8f 7b       	andi	r24, 0xBF	; 191
     d60:	80 93 a9 00 	sts	0x00A9, r24
	/* Select the OUT data pipe for CBW transmission */
	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Write the CBW command to the OUT pipe */
	if ((ErrorCode = Pipe_Write_Stream_LE(SCSICommandBlock, sizeof(MS_CommandBlockWrapper_t), NULL)) !=
     d64:	c8 01       	movw	r24, r16
     d66:	6f e1       	ldi	r22, 0x1F	; 31
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	26 d4       	rcall	.+2124   	; 0x15bc <Pipe_Write_Stream_LE>
     d70:	88 23       	and	r24, r24
     d72:	09 f0       	breq	.+2      	; 0xd76 <MassStore_SendCommand+0xae>
     d74:	55 c0       	rjmp	.+170    	; 0xe20 <MassStore_SendCommand+0x158>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     d76:	80 91 a6 00 	lds	r24, 0x00A6
     d7a:	8b 77       	andi	r24, 0x7B	; 123
     d7c:	80 93 a6 00 	sts	0x00A6, r24

	/* Send the data in the OUT pipe to the attached device */
	Pipe_ClearOUT();

	/* Wait until command has been sent */
	Pipe_WaitUntilReady();
     d80:	60 d5       	rcall	.+2752   	; 0x1842 <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     d82:	80 91 a9 00 	lds	r24, 0x00A9
     d86:	80 64       	ori	r24, 0x40	; 64
     d88:	80 93 a9 00 	sts	0x00A9, r24

	/* Freeze pipe after use */
	Pipe_Freeze();

	if (BufferPtr != NULL)
     d8c:	e1 14       	cp	r14, r1
     d8e:	f1 04       	cpc	r15, r1
     d90:	09 f4       	brne	.+2      	; 0xd94 <MassStore_SendCommand+0xcc>
     d92:	4c c0       	rjmp	.+152    	; 0xe2c <MassStore_SendCommand+0x164>
 */
static uint8_t MassStore_SendReceiveData(MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                         void* BufferPtr)
{
	uint8_t  ErrorCode = PIPE_RWSTREAM_NoError;
	uint16_t BytesRem  = SCSICommandBlock->DataTransferLength;
     d94:	f8 01       	movw	r30, r16
     d96:	60 85       	ldd	r22, Z+8	; 0x08
     d98:	71 85       	ldd	r23, Z+9	; 0x09

	/* Check the direction of the SCSI command data stage */
	if (SCSICommandBlock->Flags & MS_COMMAND_DIR_DATA_IN)
     d9a:	84 85       	ldd	r24, Z+12	; 0x0c
     d9c:	87 ff       	sbrs	r24, 7
     d9e:	1b c0       	rjmp	.+54     	; 0xdd6 <MassStore_SendCommand+0x10e>
	{
		/* Wait until the device has replied with some data */
		if ((ErrorCode = MassStore_WaitForDataReceived()) != PIPE_RWSTREAM_NoError)
     da0:	6e 87       	std	Y+14, r22	; 0x0e
     da2:	7f 87       	std	Y+15, r23	; 0x0f
     da4:	29 df       	rcall	.-430    	; 0xbf8 <MassStore_WaitForDataReceived>
     da6:	6e 85       	ldd	r22, Y+14	; 0x0e
     da8:	7f 85       	ldd	r23, Y+15	; 0x0f
     daa:	88 23       	and	r24, r24
     dac:	a9 f5       	brne	.+106    	; 0xe18 <MassStore_SendCommand+0x150>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     db4:	80 91 a9 00 	lds	r24, 0x00A9
     db8:	8f 7b       	andi	r24, 0xBF	; 191
     dba:	80 93 a9 00 	sts	0x00A9, r24
		/* Select the IN data pipe for data reception */
		Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Read in the block data from the pipe */
		if ((ErrorCode = Pipe_Read_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
     dbe:	c7 01       	movw	r24, r14
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	5e d4       	rcall	.+2236   	; 0x1682 <Pipe_Read_Stream_LE>
     dc6:	88 23       	and	r24, r24
     dc8:	39 f5       	brne	.+78     	; 0xe18 <MassStore_SendCommand+0x150>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     dca:	80 91 a6 00 	lds	r24, 0x00A6
     dce:	8e 77       	andi	r24, 0x7E	; 126
     dd0:	80 93 a6 00 	sts	0x00A6, r24
     dd4:	1b c0       	rjmp	.+54     	; 0xe0c <MassStore_SendCommand+0x144>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     dd6:	d0 92 a7 00 	sts	0x00A7, r13

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     dda:	80 91 a9 00 	lds	r24, 0x00A9
     dde:	8f 7b       	andi	r24, 0xBF	; 191
     de0:	80 93 a9 00 	sts	0x00A9, r24
		/* Select the OUT data pipe for data transmission */
		Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Write the block data to the pipe */
		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
     de4:	c7 01       	movw	r24, r14
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	e8 d3       	rcall	.+2000   	; 0x15bc <Pipe_Write_Stream_LE>
     dec:	88 23       	and	r24, r24
     dee:	a1 f4       	brne	.+40     	; 0xe18 <MassStore_SendCommand+0x150>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     df0:	80 91 a6 00 	lds	r24, 0x00A6
     df4:	8b 77       	andi	r24, 0x7B	; 123
     df6:	80 93 a6 00 	sts	0x00A6, r24
     dfa:	04 c0       	rjmp	.+8      	; 0xe04 <MassStore_SendCommand+0x13c>
		/* Acknowledge the packet */
		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
		{
			if (USB_HostState == HOST_STATE_Unattached)
     dfc:	80 91 34 01 	lds	r24, 0x0134
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	69 f0       	breq	.+26     	; 0xe1e <MassStore_SendCommand+0x156>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e04:	80 91 a6 00 	lds	r24, 0x00A6
		  return ErrorCode;

		/* Acknowledge the packet */
		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
     e08:	82 ff       	sbrs	r24, 2
     e0a:	f8 cf       	rjmp	.-16     	; 0xdfc <MassStore_SendCommand+0x134>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e0c:	80 91 a9 00 	lds	r24, 0x00A9
     e10:	80 64       	ori	r24, 0x40	; 64
     e12:	80 93 a9 00 	sts	0x00A9, r24
     e16:	0a c0       	rjmp	.+20     	; 0xe2c <MassStore_SendCommand+0x164>
	{
		/* Transfer the requested data (if any) to or from the device */
		ErrorCode = MassStore_SendReceiveData(SCSICommandBlock, (void*)BufferPtr);

		/* Only fail completely if the transfer fails without a STALL, as a logical STALL can be recovered from */
		if ((ErrorCode != PIPE_RWSTREAM_NoError) && (ErrorCode != PIPE_RWSTREAM_PipeStalled))
     e18:	82 30       	cpi	r24, 0x02	; 2
     e1a:	10 f4       	brcc	.+4      	; 0xe20 <MassStore_SendCommand+0x158>
     e1c:	07 c0       	rjmp	.+14     	; 0xe2c <MassStore_SendCommand+0x164>
		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
		{
			if (USB_HostState == HOST_STATE_Unattached)
			  return PIPE_RWSTREAM_DeviceDisconnected;
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	90 91 a9 00 	lds	r25, 0x00A9
     e24:	90 64       	ori	r25, 0x40	; 64
     e26:	90 93 a9 00 	sts	0x00A9, r25

		/* Only fail completely if the transfer fails without a STALL, as a logical STALL can be recovered from */
		if ((ErrorCode != PIPE_RWSTREAM_NoError) && (ErrorCode != PIPE_RWSTREAM_PipeStalled))
		{
			Pipe_Freeze();
			return ErrorCode;
     e2a:	21 c0       	rjmp	.+66     	; 0xe6e <MassStore_SendCommand+0x1a6>
static uint8_t MassStore_GetReturnedStatus(MS_CommandStatusWrapper_t* const SCSICommandStatus)
{
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* If an error in the command occurred, abort */
	if ((ErrorCode = MassStore_WaitForDataReceived()) != PIPE_RWSTREAM_NoError)
     e2c:	e5 de       	rcall	.-566    	; 0xbf8 <MassStore_WaitForDataReceived>
     e2e:	88 23       	and	r24, r24
     e30:	f1 f4       	brne	.+60     	; 0xe6e <MassStore_SendCommand+0x1a6>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e38:	80 91 a9 00 	lds	r24, 0x00A9
     e3c:	8f 7b       	andi	r24, 0xBF	; 191
     e3e:	80 93 a9 00 	sts	0x00A9, r24
	/* Select the IN data pipe for data reception */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Load in the CSW from the attached device */
	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t), NULL)) !=
     e42:	ce 01       	movw	r24, r28
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	6d e0       	ldi	r22, 0x0D	; 13
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	19 d4       	rcall	.+2098   	; 0x1682 <Pipe_Read_Stream_LE>
     e50:	88 23       	and	r24, r24
     e52:	69 f4       	brne	.+26     	; 0xe6e <MassStore_SendCommand+0x1a6>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e54:	90 91 a6 00 	lds	r25, 0x00A6
     e58:	9e 77       	andi	r25, 0x7E	; 126
     e5a:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e5e:	90 91 a9 00 	lds	r25, 0x00A9
     e62:	90 64       	ori	r25, 0x40	; 64
     e64:	90 93 a9 00 	sts	0x00A9, r25

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	/* Check to see if command failed */
	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
     e68:	9d 85       	ldd	r25, Y+13	; 0x0d
     e6a:	91 11       	cpse	r25, r1
	  ErrorCode = MASS_STORE_SCSI_COMMAND_FAILED;
     e6c:	80 ec       	ldi	r24, 0xC0	; 192
	}

	/* Retrieve the returned SCSI status from the device */
	MS_CommandStatusWrapper_t SCSIStatusBlock;
	return MassStore_GetReturnedStatus(&SCSIStatusBlock);
}
     e6e:	2f 96       	adiw	r28, 0x0f	; 15
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	08 95       	ret

00000e8a <SwapEndian_32>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint32_t SwapEndian_32(const uint32_t DWord) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint32_t SwapEndian_32(const uint32_t DWord)
			{
     e8a:	9b 01       	movw	r18, r22
				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
			}
     e8c:	69 2f       	mov	r22, r25
     e8e:	78 2f       	mov	r23, r24
     e90:	83 2f       	mov	r24, r19
     e92:	92 2f       	mov	r25, r18
     e94:	08 95       	ret

00000e96 <MassStore_MassStorageReset>:
 */
uint8_t MassStore_MassStorageReset(void)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
     e96:	ac e2       	ldi	r26, 0x2C	; 44
     e98:	b1 e0       	ldi	r27, 0x01	; 1
     e9a:	ec e0       	ldi	r30, 0x0C	; 12
     e9c:	f1 e0       	ldi	r31, 0x01	; 1
     e9e:	88 e0       	ldi	r24, 0x08	; 8
     ea0:	01 90       	ld	r0, Z+
     ea2:	0d 92       	st	X+, r0
     ea4:	81 50       	subi	r24, 0x01	; 1
     ea6:	e1 f7       	brne	.-8      	; 0xea0 <MassStore_MassStorageReset+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ea8:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	d8 d6       	rcall	.+3504   	; 0x1c62 <USB_Host_SendControlRequest>
     eb2:	88 23       	and	r24, r24
     eb4:	f1 f4       	brne	.+60     	; 0xef2 <MassStore_MassStorageReset+0x5c>
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     ebc:	90 91 aa 00 	lds	r25, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     ec0:	29 2f       	mov	r18, r25
     ec2:	2f 70       	andi	r18, 0x0F	; 15
     ec4:	90 ff       	sbrs	r25, 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <MassStore_MassStorageReset+0x36>
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	01 c0       	rjmp	.+2      	; 0xece <MassStore_MassStorageReset+0x38>
     ecc:	80 e8       	ldi	r24, 0x80	; 128
	  return ErrorCode;

	/* Select first data pipe to clear STALL condition if one exists */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
     ece:	82 2b       	or	r24, r18
     ed0:	ec d7       	rcall	.+4056   	; 0x1eaa <USB_Host_ClearEndpointStall>
     ed2:	88 23       	and	r24, r24
     ed4:	71 f4       	brne	.+28     	; 0xef2 <MassStore_MassStorageReset+0x5c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ed6:	82 e0       	ldi	r24, 0x02	; 2
     ed8:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     edc:	90 91 aa 00 	lds	r25, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     ee0:	29 2f       	mov	r18, r25
     ee2:	2f 70       	andi	r18, 0x0F	; 15
     ee4:	90 ff       	sbrs	r25, 0
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <MassStore_MassStorageReset+0x56>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	01 c0       	rjmp	.+2      	; 0xeee <MassStore_MassStorageReset+0x58>
     eec:	80 e8       	ldi	r24, 0x80	; 128
	  return ErrorCode;

	/* Select second data pipe to clear STALL condition if one exists */
	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
     eee:	82 2b       	or	r24, r18
     ef0:	dc c7       	rjmp	.+4024   	; 0x1eaa <USB_Host_ClearEndpointStall>
	  return ErrorCode;

	return HOST_SENDCONTROL_Successful;
}
     ef2:	08 95       	ret

00000ef4 <MassStore_GetMaxLUN>:
 *  \param[out] MaxLUNIndex  Pointer to the location that the maximum LUN index value should be stored
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_GetMaxLUN(uint8_t* const MaxLUNIndex)
{
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
     efa:	ac e2       	ldi	r26, 0x2C	; 44
     efc:	b1 e0       	ldi	r27, 0x01	; 1
     efe:	e4 e0       	ldi	r30, 0x04	; 4
     f00:	f1 e0       	ldi	r31, 0x01	; 1
     f02:	88 e0       	ldi	r24, 0x08	; 8
     f04:	01 90       	ld	r0, Z+
     f06:	0d 92       	st	X+, r0
     f08:	81 50       	subi	r24, 0x01	; 1
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <MassStore_GetMaxLUN+0x10>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     f0c:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(MaxLUNIndex)) == HOST_SENDCONTROL_SetupStalled)
     f10:	ce 01       	movw	r24, r28
     f12:	a7 d6       	rcall	.+3406   	; 0x1c62 <USB_Host_SendControlRequest>
     f14:	83 30       	cpi	r24, 0x03	; 3
     f16:	39 f4       	brne	.+14     	; 0xf26 <MassStore_GetMaxLUN+0x32>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     f18:	80 91 a6 00 	lds	r24, 0x00A6
     f1c:	8d 7f       	andi	r24, 0xFD	; 253
     f1e:	80 93 a6 00 	sts	0x00A6, r24
	{
		/* Clear the pipe stall */
		Pipe_ClearStall();

		/* Some faulty Mass Storage devices don't implement the GET_MAX_LUN request, so assume a single LUN */
		*MaxLUNIndex = 0;
     f22:	18 82       	st	Y, r1

		/* Clear the error, and pretend the request executed correctly if the device STALLed it */
		ErrorCode = HOST_SENDCONTROL_Successful;
     f24:	80 e0       	ldi	r24, 0x00	; 0
	}

	return ErrorCode;
}
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <MassStore_Inquiry>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_Inquiry(const uint8_t LUNIndex,
                          SCSI_Inquiry_Response_t* const InquiryPtr)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	6f 97       	sbiw	r28, 0x1f	; 31
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
	/* Create a CBW with a SCSI command to issue INQUIRY command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
     f40:	fe 01       	movw	r30, r28
     f42:	31 96       	adiw	r30, 0x01	; 1
     f44:	9f e1       	ldi	r25, 0x1F	; 31
     f46:	df 01       	movw	r26, r30
     f48:	1d 92       	st	X+, r1
     f4a:	9a 95       	dec	r25
     f4c:	e9 f7       	brne	.-6      	; 0xf48 <MassStore_Inquiry+0x1c>
     f4e:	25 e5       	ldi	r18, 0x55	; 85
     f50:	33 e5       	ldi	r19, 0x53	; 83
     f52:	42 e4       	ldi	r20, 0x42	; 66
     f54:	53 e4       	ldi	r21, 0x43	; 67
     f56:	29 83       	std	Y+1, r18	; 0x01
     f58:	3a 83       	std	Y+2, r19	; 0x02
     f5a:	4b 83       	std	Y+3, r20	; 0x03
     f5c:	5c 83       	std	Y+4, r21	; 0x04
     f5e:	24 e2       	ldi	r18, 0x24	; 36
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	29 87       	std	Y+9, r18	; 0x09
     f68:	3a 87       	std	Y+10, r19	; 0x0a
     f6a:	4b 87       	std	Y+11, r20	; 0x0b
     f6c:	5c 87       	std	Y+12, r21	; 0x0c
     f6e:	90 e8       	ldi	r25, 0x80	; 128
     f70:	9d 87       	std	Y+13, r25	; 0x0d
     f72:	8e 87       	std	Y+14, r24	; 0x0e
     f74:	86 e0       	ldi	r24, 0x06	; 6
     f76:	8f 87       	std	Y+15, r24	; 0x0f
     f78:	82 e1       	ldi	r24, 0x12	; 18
     f7a:	88 8b       	std	Y+16, r24	; 0x10
     f7c:	84 e2       	ldi	r24, 0x24	; 36
     f7e:	8c 8b       	std	Y+20, r24	; 0x14
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, InquiryPtr);
     f80:	cf 01       	movw	r24, r30
     f82:	a2 de       	rcall	.-700    	; 0xcc8 <MassStore_SendCommand>
}
     f84:	6f 96       	adiw	r28, 0x1f	; 31
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <MassStore_RequestSense>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_RequestSense(const uint8_t LUNIndex,
                               SCSI_Request_Sense_Response_t* const SensePtr)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	6f 97       	sbiw	r28, 0x1f	; 31
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
	/* Create a CBW with a SCSI command to issue REQUEST SENSE command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
     faa:	fe 01       	movw	r30, r28
     fac:	31 96       	adiw	r30, 0x01	; 1
     fae:	9f e1       	ldi	r25, 0x1F	; 31
     fb0:	df 01       	movw	r26, r30
     fb2:	1d 92       	st	X+, r1
     fb4:	9a 95       	dec	r25
     fb6:	e9 f7       	brne	.-6      	; 0xfb2 <MassStore_RequestSense+0x1c>
     fb8:	25 e5       	ldi	r18, 0x55	; 85
     fba:	33 e5       	ldi	r19, 0x53	; 83
     fbc:	42 e4       	ldi	r20, 0x42	; 66
     fbe:	53 e4       	ldi	r21, 0x43	; 67
     fc0:	29 83       	std	Y+1, r18	; 0x01
     fc2:	3a 83       	std	Y+2, r19	; 0x02
     fc4:	4b 83       	std	Y+3, r20	; 0x03
     fc6:	5c 83       	std	Y+4, r21	; 0x04
     fc8:	22 e1       	ldi	r18, 0x12	; 18
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	29 87       	std	Y+9, r18	; 0x09
     fd2:	3a 87       	std	Y+10, r19	; 0x0a
     fd4:	4b 87       	std	Y+11, r20	; 0x0b
     fd6:	5c 87       	std	Y+12, r21	; 0x0c
     fd8:	90 e8       	ldi	r25, 0x80	; 128
     fda:	9d 87       	std	Y+13, r25	; 0x0d
     fdc:	8e 87       	std	Y+14, r24	; 0x0e
     fde:	86 e0       	ldi	r24, 0x06	; 6
     fe0:	8f 87       	std	Y+15, r24	; 0x0f
     fe2:	83 e0       	ldi	r24, 0x03	; 3
     fe4:	88 8b       	std	Y+16, r24	; 0x10
     fe6:	82 e1       	ldi	r24, 0x12	; 18
     fe8:	8c 8b       	std	Y+20, r24	; 0x14
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, SensePtr);
     fea:	cf 01       	movw	r24, r30
     fec:	6d de       	rcall	.-806    	; 0xcc8 <MassStore_SendCommand>
}
     fee:	6f 96       	adiw	r28, 0x1f	; 31
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <MassStore_ReadDeviceBlock>:
uint8_t MassStore_ReadDeviceBlock(const uint8_t LUNIndex,
                                  const uint32_t BlockAddress,
                                  const uint8_t Blocks,
                                  const uint16_t BlockSize,
                                  void* BufferPtr)
{
    1000:	6f 92       	push	r6
    1002:	7f 92       	push	r7
    1004:	8f 92       	push	r8
    1006:	9f 92       	push	r9
    1008:	af 92       	push	r10
    100a:	bf 92       	push	r11
    100c:	cf 92       	push	r12
    100e:	df 92       	push	r13
    1010:	ef 92       	push	r14
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	6f 97       	sbiw	r28, 0x1f	; 31
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	c8 2e       	mov	r12, r24
    102e:	4a 01       	movw	r8, r20
    1030:	5b 01       	movw	r10, r22
    1032:	d2 2e       	mov	r13, r18
    1034:	37 01       	movw	r6, r14
	/* Create a CBW with a SCSI command to read in the given blocks from the device */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1036:	7e 01       	movw	r14, r28
    1038:	08 94       	sec
    103a:	e1 1c       	adc	r14, r1
    103c:	f1 1c       	adc	r15, r1
    103e:	8f e1       	ldi	r24, 0x1F	; 31
    1040:	f7 01       	movw	r30, r14
    1042:	11 92       	st	Z+, r1
    1044:	8a 95       	dec	r24
    1046:	e9 f7       	brne	.-6      	; 0x1042 <MassStore_ReadDeviceBlock+0x42>
    1048:	85 e5       	ldi	r24, 0x55	; 85
    104a:	93 e5       	ldi	r25, 0x53	; 83
    104c:	a2 e4       	ldi	r26, 0x42	; 66
    104e:	b3 e4       	ldi	r27, 0x43	; 67
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	ab 83       	std	Y+3, r26	; 0x03
    1056:	bc 83       	std	Y+4, r27	; 0x04
		{
			.Signature          = MS_CBW_SIGNATURE,
			.DataTransferLength = ((uint32_t)Blocks * BlockSize),
    1058:	b8 01       	movw	r22, r16
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e0       	ldi	r20, 0x00	; 0
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	7f d7       	rcall	.+3838   	; 0x1f64 <__mulsi3>
                                  const uint8_t Blocks,
                                  const uint16_t BlockSize,
                                  void* BufferPtr)
{
	/* Create a CBW with a SCSI command to read in the given blocks from the device */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1066:	69 87       	std	Y+9, r22	; 0x09
    1068:	7a 87       	std	Y+10, r23	; 0x0a
    106a:	8b 87       	std	Y+11, r24	; 0x0b
    106c:	9c 87       	std	Y+12, r25	; 0x0c
    106e:	80 e8       	ldi	r24, 0x80	; 128
    1070:	8d 87       	std	Y+13, r24	; 0x0d
    1072:	ce 86       	std	Y+14, r12	; 0x0e
    1074:	8a e0       	ldi	r24, 0x0A	; 10
    1076:	8f 87       	std	Y+15, r24	; 0x0f
    1078:	88 e2       	ldi	r24, 0x28	; 40
    107a:	88 8b       	std	Y+16, r24	; 0x10
    107c:	ba 8a       	std	Y+18, r11	; 0x12
    107e:	ab 8a       	std	Y+19, r10	; 0x13
    1080:	9c 8a       	std	Y+20, r9	; 0x14
    1082:	8d 8a       	std	Y+21, r8	; 0x15
    1084:	d8 8e       	std	Y+24, r13	; 0x18
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, BufferPtr);
    1086:	c7 01       	movw	r24, r14
    1088:	b3 01       	movw	r22, r6
    108a:	1e de       	rcall	.-964    	; 0xcc8 <MassStore_SendCommand>
}
    108c:	6f 96       	adiw	r28, 0x1f	; 31
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	bf 90       	pop	r11
    10aa:	af 90       	pop	r10
    10ac:	9f 90       	pop	r9
    10ae:	8f 90       	pop	r8
    10b0:	7f 90       	pop	r7
    10b2:	6f 90       	pop	r6
    10b4:	08 95       	ret

000010b6 <MassStore_TestUnitReady>:
 *  \param[in] LUNIndex      Index of the LUN inside the device the command is being addressed to
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_TestUnitReady(const uint8_t LUNIndex)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	6f 97       	sbiw	r28, 0x1f	; 31
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
	/* Create a CBW with a SCSI command to issue TEST UNIT READY command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    10ca:	fe 01       	movw	r30, r28
    10cc:	31 96       	adiw	r30, 0x01	; 1
    10ce:	9f e1       	ldi	r25, 0x1F	; 31
    10d0:	df 01       	movw	r26, r30
    10d2:	1d 92       	st	X+, r1
    10d4:	9a 95       	dec	r25
    10d6:	e9 f7       	brne	.-6      	; 0x10d2 <MassStore_TestUnitReady+0x1c>
    10d8:	25 e5       	ldi	r18, 0x55	; 85
    10da:	33 e5       	ldi	r19, 0x53	; 83
    10dc:	42 e4       	ldi	r20, 0x42	; 66
    10de:	53 e4       	ldi	r21, 0x43	; 67
    10e0:	29 83       	std	Y+1, r18	; 0x01
    10e2:	3a 83       	std	Y+2, r19	; 0x02
    10e4:	4b 83       	std	Y+3, r20	; 0x03
    10e6:	5c 83       	std	Y+4, r21	; 0x04
    10e8:	90 e8       	ldi	r25, 0x80	; 128
    10ea:	9d 87       	std	Y+13, r25	; 0x0d
    10ec:	8e 87       	std	Y+14, r24	; 0x0e
    10ee:	86 e0       	ldi	r24, 0x06	; 6
    10f0:	8f 87       	std	Y+15, r24	; 0x0f
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, NULL);
    10f2:	cf 01       	movw	r24, r30
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	e7 dd       	rcall	.-1074   	; 0xcc8 <MassStore_SendCommand>
}
    10fa:	6f 96       	adiw	r28, 0x1f	; 31
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <MassStore_ReadCapacity>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_ReadCapacity(const uint8_t LUNIndex,
                               SCSI_Capacity_t* const CapacityPtr)
{
    110c:	ff 92       	push	r15
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	6f 97       	sbiw	r28, 0x1f	; 31
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	8b 01       	movw	r16, r22
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* Create a CBW with a SCSI command to issue READ CAPACITY command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1128:	fe 01       	movw	r30, r28
    112a:	31 96       	adiw	r30, 0x01	; 1
    112c:	9f e1       	ldi	r25, 0x1F	; 31
    112e:	df 01       	movw	r26, r30
    1130:	1d 92       	st	X+, r1
    1132:	9a 95       	dec	r25
    1134:	e9 f7       	brne	.-6      	; 0x1130 <MassStore_ReadCapacity+0x24>
    1136:	25 e5       	ldi	r18, 0x55	; 85
    1138:	33 e5       	ldi	r19, 0x53	; 83
    113a:	42 e4       	ldi	r20, 0x42	; 66
    113c:	53 e4       	ldi	r21, 0x43	; 67
    113e:	29 83       	std	Y+1, r18	; 0x01
    1140:	3a 83       	std	Y+2, r19	; 0x02
    1142:	4b 83       	std	Y+3, r20	; 0x03
    1144:	5c 83       	std	Y+4, r21	; 0x04
    1146:	28 e0       	ldi	r18, 0x08	; 8
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	29 87       	std	Y+9, r18	; 0x09
    1150:	3a 87       	std	Y+10, r19	; 0x0a
    1152:	4b 87       	std	Y+11, r20	; 0x0b
    1154:	5c 87       	std	Y+12, r21	; 0x0c
    1156:	90 e8       	ldi	r25, 0x80	; 128
    1158:	9d 87       	std	Y+13, r25	; 0x0d
    115a:	8e 87       	std	Y+14, r24	; 0x0e
    115c:	8a e0       	ldi	r24, 0x0A	; 10
    115e:	8f 87       	std	Y+15, r24	; 0x0f
    1160:	85 e2       	ldi	r24, 0x25	; 37
    1162:	88 8b       	std	Y+16, r24	; 0x10
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, CapacityPtr)) != PIPE_RWSTREAM_NoError)
    1164:	cf 01       	movw	r24, r30
    1166:	b0 dd       	rcall	.-1184   	; 0xcc8 <MassStore_SendCommand>
    1168:	f8 2e       	mov	r15, r24
    116a:	88 23       	and	r24, r24
    116c:	c1 f4       	brne	.+48     	; 0x119e <MassStore_ReadCapacity+0x92>
	  return ErrorCode;

	/* Endian-correct the read data */
	CapacityPtr->Blocks    = SwapEndian_32(CapacityPtr->Blocks);
    116e:	f8 01       	movw	r30, r16
    1170:	60 81       	ld	r22, Z
    1172:	71 81       	ldd	r23, Z+1	; 0x01
    1174:	82 81       	ldd	r24, Z+2	; 0x02
    1176:	93 81       	ldd	r25, Z+3	; 0x03
    1178:	88 de       	rcall	.-752    	; 0xe8a <SwapEndian_32>
    117a:	d8 01       	movw	r26, r16
    117c:	6d 93       	st	X+, r22
    117e:	7d 93       	st	X+, r23
    1180:	8d 93       	st	X+, r24
    1182:	9c 93       	st	X, r25
    1184:	13 97       	sbiw	r26, 0x03	; 3
	CapacityPtr->BlockSize = SwapEndian_32(CapacityPtr->BlockSize);
    1186:	14 96       	adiw	r26, 0x04	; 4
    1188:	6d 91       	ld	r22, X+
    118a:	7d 91       	ld	r23, X+
    118c:	8d 91       	ld	r24, X+
    118e:	9c 91       	ld	r25, X
    1190:	17 97       	sbiw	r26, 0x07	; 7
    1192:	7b de       	rcall	.-778    	; 0xe8a <SwapEndian_32>
    1194:	f8 01       	movw	r30, r16
    1196:	64 83       	std	Z+4, r22	; 0x04
    1198:	75 83       	std	Z+5, r23	; 0x05
    119a:	86 83       	std	Z+6, r24	; 0x06
    119c:	97 83       	std	Z+7, r25	; 0x07

	return ErrorCode;
}
    119e:	8f 2d       	mov	r24, r15
    11a0:	6f 96       	adiw	r28, 0x1f	; 31
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	08 95       	ret

000011b8 <MassStore_PreventAllowMediumRemoval>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_PreventAllowMediumRemoval(const uint8_t LUNIndex,
                                            const bool PreventRemoval)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	6f 97       	sbiw	r28, 0x1f	; 31
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
	/* Create a CBW with a SCSI command to issue PREVENT ALLOW MEDIUM REMOVAL command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    11cc:	fe 01       	movw	r30, r28
    11ce:	31 96       	adiw	r30, 0x01	; 1
    11d0:	9f e1       	ldi	r25, 0x1F	; 31
    11d2:	df 01       	movw	r26, r30
    11d4:	1d 92       	st	X+, r1
    11d6:	9a 95       	dec	r25
    11d8:	e9 f7       	brne	.-6      	; 0x11d4 <MassStore_PreventAllowMediumRemoval+0x1c>
    11da:	25 e5       	ldi	r18, 0x55	; 85
    11dc:	33 e5       	ldi	r19, 0x53	; 83
    11de:	42 e4       	ldi	r20, 0x42	; 66
    11e0:	53 e4       	ldi	r21, 0x43	; 67
    11e2:	29 83       	std	Y+1, r18	; 0x01
    11e4:	3a 83       	std	Y+2, r19	; 0x02
    11e6:	4b 83       	std	Y+3, r20	; 0x03
    11e8:	5c 83       	std	Y+4, r21	; 0x04
    11ea:	8e 87       	std	Y+14, r24	; 0x0e
    11ec:	86 e0       	ldi	r24, 0x06	; 6
    11ee:	8f 87       	std	Y+15, r24	; 0x0f
    11f0:	8e e1       	ldi	r24, 0x1E	; 30
    11f2:	88 8b       	std	Y+16, r24	; 0x10
    11f4:	6b 8b       	std	Y+19, r22	; 0x13
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, NULL);
    11f6:	cf 01       	movw	r24, r30
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	65 dd       	rcall	.-1334   	; 0xcc8 <MassStore_SendCommand>
}
    11fe:	6f 96       	adiw	r28, 0x1f	; 31
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1210:	80 91 9e 00 	lds	r24, 0x009E
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	81 70       	andi	r24, 0x01	; 1
    1218:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    121a:	20 91 a0 00 	lds	r18, 0x00A0
    121e:	2d 7f       	andi	r18, 0xFD	; 253
    1220:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    1224:	20 91 9e 00 	lds	r18, 0x009E
    1228:	22 60       	ori	r18, 0x02	; 2
    122a:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    122e:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    1232:	21 fd       	sbrc	r18, 1
    1234:	fc cf       	rjmp	.-8      	; 0x122e <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1236:	20 91 9e 00 	lds	r18, 0x009E
    123a:	21 60       	ori	r18, 0x01	; 1
    123c:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
    1240:	10 92 2a 01 	sts	0x012A, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1244:	20 91 a0 00 	lds	r18, 0x00A0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	20 72       	andi	r18, 0x20	; 32
    124c:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    124e:	40 91 a0 00 	lds	r20, 0x00A0
    1252:	4f 7d       	andi	r20, 0xDF	; 223
    1254:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1258:	40 91 9f 00 	lds	r20, 0x009F
    125c:	4f 7d       	andi	r20, 0xDF	; 223
    125e:	40 93 9f 00 	sts	0x009F, r20
    1262:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1264:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    1268:	55 ff       	sbrs	r21, 5
    126a:	0b c0       	rjmp	.+22     	; 0x1282 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    126c:	40 91 9f 00 	lds	r20, 0x009F
    1270:	4f 7d       	andi	r20, 0xDF	; 223
    1272:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1276:	40 91 9f 00 	lds	r20, 0x009F
    127a:	4d 7f       	andi	r20, 0xFD	; 253
    127c:	40 93 9f 00 	sts	0x009F, r20
    1280:	08 c0       	rjmp	.+16     	; 0x1292 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1282:	ef ec       	ldi	r30, 0xCF	; 207
    1284:	f7 e0       	ldi	r31, 0x07	; 7
    1286:	31 97       	sbiw	r30, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <USB_Host_ResetDevice+0x76>
    128a:	00 c0       	rjmp	.+0      	; 0x128c <USB_Host_ResetDevice+0x7c>
    128c:	00 00       	nop
    128e:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    1290:	49 f7       	brne	.-46     	; 0x1264 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    1292:	21 15       	cp	r18, r1
    1294:	31 05       	cpc	r19, r1
    1296:	29 f0       	breq	.+10     	; 0x12a2 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    1298:	20 91 a0 00 	lds	r18, 0x00A0
    129c:	20 62       	ori	r18, 0x20	; 32
    129e:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	29 f4       	brne	.+10     	; 0x12b0 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    12a6:	80 91 9e 00 	lds	r24, 0x009E
    12aa:	8e 7f       	andi	r24, 0xFE	; 254
    12ac:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    12b0:	80 91 a0 00 	lds	r24, 0x00A0
    12b4:	82 60       	ori	r24, 0x02	; 2
    12b6:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    12ba:	08 95       	ret

000012bc <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    12bc:	40 91 9e 00 	lds	r20, 0x009E
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	41 70       	andi	r20, 0x01	; 1
    12c4:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    12c6:	20 91 a0 00 	lds	r18, 0x00A0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	20 72       	andi	r18, 0x20	; 32
    12ce:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    12d0:	90 91 a0 00 	lds	r25, 0x00A0
    12d4:	9f 7d       	andi	r25, 0xDF	; 223
    12d6:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12da:	90 91 9f 00 	lds	r25, 0x009F
    12de:	9f 7d       	andi	r25, 0xDF	; 223
    12e0:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12e4:	90 91 9e 00 	lds	r25, 0x009E
    12e8:	91 60       	ori	r25, 0x01	; 1
    12ea:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    12ee:	26 c0       	rjmp	.+76     	; 0x133c <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    12f0:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    12f4:	95 ff       	sbrs	r25, 5
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12f8:	90 91 9f 00 	lds	r25, 0x009F
    12fc:	9f 7d       	andi	r25, 0xDF	; 223
    12fe:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    1302:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    1304:	90 91 34 01 	lds	r25, 0x0134
    1308:	91 30       	cpi	r25, 0x01	; 1
    130a:	d9 f0       	breq	.+54     	; 0x1342 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    130c:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    1310:	94 ff       	sbrs	r25, 4
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1314:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1318:	80 91 a6 00 	lds	r24, 0x00A6
    131c:	8f 7e       	andi	r24, 0xEF	; 239
    131e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    1322:	82 e0       	ldi	r24, 0x02	; 2

			break;
    1324:	0f c0       	rjmp	.+30     	; 0x1344 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1326:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
    132a:	91 ff       	sbrs	r25, 1
    132c:	07 c0       	rjmp	.+14     	; 0x133c <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    132e:	80 91 a6 00 	lds	r24, 0x00A6
    1332:	8d 7f       	andi	r24, 0xFD	; 253
    1334:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    1338:	83 e0       	ldi	r24, 0x03	; 3

			break;
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    133c:	88 23       	and	r24, r24
    133e:	c1 f6       	brne	.-80     	; 0x12f0 <USB_Host_WaitMS+0x34>
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    1342:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    1344:	41 15       	cp	r20, r1
    1346:	51 05       	cpc	r21, r1
    1348:	29 f4       	brne	.+10     	; 0x1354 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    134a:	90 91 9e 00 	lds	r25, 0x009E
    134e:	9e 7f       	andi	r25, 0xFE	; 254
    1350:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    1354:	21 15       	cp	r18, r1
    1356:	31 05       	cpc	r19, r1
    1358:	29 f0       	breq	.+10     	; 0x1364 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    135a:	90 91 a0 00 	lds	r25, 0x00A0
    135e:	90 62       	ori	r25, 0x20	; 32
    1360:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    1364:	08 95       	ret

00001366 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	28 97       	sbiw	r28, 0x08	; 8
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    137e:	80 91 34 01 	lds	r24, 0x0134
    1382:	85 30       	cpi	r24, 0x05	; 5
    1384:	09 f4       	brne	.+2      	; 0x1388 <USB_Host_ProcessNextHostState+0x22>
    1386:	99 c0       	rjmp	.+306    	; 0x14ba <USB_Host_ProcessNextHostState+0x154>
    1388:	86 30       	cpi	r24, 0x06	; 6
    138a:	68 f4       	brcc	.+26     	; 0x13a6 <USB_Host_ProcessNextHostState+0x40>
    138c:	82 30       	cpi	r24, 0x02	; 2
    138e:	c1 f1       	breq	.+112    	; 0x1400 <USB_Host_ProcessNextHostState+0x9a>
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	18 f4       	brcc	.+6      	; 0x139a <USB_Host_ProcessNextHostState+0x34>
    1394:	88 23       	and	r24, r24
    1396:	a1 f0       	breq	.+40     	; 0x13c0 <USB_Host_ProcessNextHostState+0x5a>
    1398:	06 c1       	rjmp	.+524    	; 0x15a6 <USB_Host_ProcessNextHostState+0x240>
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	d9 f1       	breq	.+118    	; 0x1414 <USB_Host_ProcessNextHostState+0xae>
    139e:	84 30       	cpi	r24, 0x04	; 4
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <USB_Host_ProcessNextHostState+0x3e>
    13a2:	01 c1       	rjmp	.+514    	; 0x15a6 <USB_Host_ProcessNextHostState+0x240>
    13a4:	62 c0       	rjmp	.+196    	; 0x146a <USB_Host_ProcessNextHostState+0x104>
    13a6:	87 30       	cpi	r24, 0x07	; 7
    13a8:	09 f4       	brne	.+2      	; 0x13ac <USB_Host_ProcessNextHostState+0x46>
    13aa:	9e c0       	rjmp	.+316    	; 0x14e8 <USB_Host_ProcessNextHostState+0x182>
    13ac:	87 30       	cpi	r24, 0x07	; 7
    13ae:	08 f4       	brcc	.+2      	; 0x13b2 <USB_Host_ProcessNextHostState+0x4c>
    13b0:	8f c0       	rjmp	.+286    	; 0x14d0 <USB_Host_ProcessNextHostState+0x16a>
    13b2:	88 30       	cpi	r24, 0x08	; 8
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <USB_Host_ProcessNextHostState+0x52>
    13b6:	b8 c0       	rjmp	.+368    	; 0x1528 <USB_Host_ProcessNextHostState+0x1c2>
    13b8:	89 30       	cpi	r24, 0x09	; 9
    13ba:	09 f0       	breq	.+2      	; 0x13be <USB_Host_ProcessNextHostState+0x58>
    13bc:	f4 c0       	rjmp	.+488    	; 0x15a6 <USB_Host_ProcessNextHostState+0x240>
    13be:	d9 c0       	rjmp	.+434    	; 0x1572 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    13c0:	00 91 27 01 	lds	r16, 0x0127
    13c4:	10 91 28 01 	lds	r17, 0x0128
    13c8:	01 15       	cp	r16, r1
    13ca:	11 05       	cpc	r17, r1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <USB_Host_ProcessNextHostState+0x6a>
    13ce:	eb c0       	rjmp	.+470    	; 0x15a6 <USB_Host_ProcessNextHostState+0x240>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	74 df       	rcall	.-280    	; 0x12bc <USB_Host_WaitMS>
    13d4:	68 2f       	mov	r22, r24
    13d6:	88 23       	and	r24, r24
    13d8:	31 f0       	breq	.+12     	; 0x13e6 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
    13da:	80 91 26 01 	lds	r24, 0x0126
    13de:	80 93 34 01 	sts	0x0134, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
					break;
    13e4:	d3 c0       	rjmp	.+422    	; 0x158c <USB_Host_ProcessNextHostState+0x226>
				}

				if (!(--WaitMSRemaining))
    13e6:	01 50       	subi	r16, 0x01	; 1
    13e8:	10 40       	sbci	r17, 0x00	; 0
    13ea:	10 93 28 01 	sts	0x0128, r17
    13ee:	00 93 27 01 	sts	0x0127, r16
    13f2:	01 15       	cp	r16, r1
    13f4:	11 05       	cpc	r17, r1
    13f6:	09 f0       	breq	.+2      	; 0x13fa <USB_Host_ProcessNextHostState+0x94>
    13f8:	d6 c0       	rjmp	.+428    	; 0x15a6 <USB_Host_ProcessNextHostState+0x240>
				  USB_HostState = PostWaitState;
    13fa:	80 91 26 01 	lds	r24, 0x0126
    13fe:	07 c0       	rjmp	.+14     	; 0x140e <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    1400:	88 ee       	ldi	r24, 0xE8	; 232
    1402:	93 e0       	ldi	r25, 0x03	; 3
    1404:	90 93 28 01 	sts	0x0128, r25
    1408:	80 93 27 01 	sts	0x0127, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	80 93 34 01 	sts	0x0134, r24
			break;
    1412:	c9 c0       	rjmp	.+402    	; 0x15a6 <USB_Host_ProcessNextHostState+0x240>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    1414:	80 91 27 01 	lds	r24, 0x0127
    1418:	90 91 28 01 	lds	r25, 0x0128
    141c:	9c 01       	movw	r18, r24
    141e:	21 50       	subi	r18, 0x01	; 1
    1420:	30 40       	sbci	r19, 0x00	; 0
    1422:	30 93 28 01 	sts	0x0128, r19
    1426:	20 93 27 01 	sts	0x0127, r18
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	39 f0       	breq	.+14     	; 0x143c <USB_Host_ProcessNextHostState+0xd6>
    142e:	8f ec       	ldi	r24, 0xCF	; 207
    1430:	97 e0       	ldi	r25, 0x07	; 7
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	f1 f7       	brne	.-4      	; 0x1432 <USB_Host_ProcessNextHostState+0xcc>
    1436:	00 c0       	rjmp	.+0      	; 0x1438 <USB_Host_ProcessNextHostState+0xd2>
    1438:	00 00       	nop
    143a:	b5 c0       	rjmp	.+362    	; 0x15a6 <USB_Host_ProcessNextHostState+0x240>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    143c:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    143e:	80 91 d8 00 	lds	r24, 0x00D8
    1442:	80 61       	ori	r24, 0x10	; 16
    1444:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    1448:	80 91 dd 00 	lds	r24, 0x00DD
    144c:	8b 7f       	andi	r24, 0xFB	; 251
    144e:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    1452:	80 91 d7 00 	lds	r24, 0x00D7
    1456:	80 61       	ori	r24, 0x10	; 16
    1458:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    145c:	80 91 dd 00 	lds	r24, 0x00DD
    1460:	82 60       	ori	r24, 0x02	; 2
    1462:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1466:	84 e0       	ldi	r24, 0x04	; 4
    1468:	d2 cf       	rjmp	.-92     	; 0x140e <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    146a:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    146e:	80 ff       	sbrs	r24, 0
    1470:	9a c0       	rjmp	.+308    	; 0x15a6 <USB_Host_ProcessNextHostState+0x240>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1472:	80 91 9f 00 	lds	r24, 0x009F
    1476:	8e 7f       	andi	r24, 0xFE	; 254
    1478:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    147c:	80 91 9f 00 	lds	r24, 0x009F
    1480:	8d 7f       	andi	r24, 0xFD	; 253
    1482:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1486:	80 91 df 00 	lds	r24, 0x00DF
    148a:	8d 7f       	andi	r24, 0xFD	; 253
    148c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1490:	80 91 de 00 	lds	r24, 0x00DE
    1494:	82 60       	ori	r24, 0x02	; 2
    1496:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    149a:	80 91 9e 00 	lds	r24, 0x009E
    149e:	81 60       	ori	r24, 0x01	; 1
    14a0:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    14a4:	b8 d1       	rcall	.+880    	; 0x1816 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    14a6:	10 92 34 01 	sts	0x0134, r1
    14aa:	84 e6       	ldi	r24, 0x64	; 100
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	90 93 28 01 	sts	0x0128, r25
    14b2:	80 93 27 01 	sts	0x0127, r24
    14b6:	85 e0       	ldi	r24, 0x05	; 5
    14b8:	59 c0       	rjmp	.+178    	; 0x156c <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    14ba:	aa de       	rcall	.-684    	; 0x1210 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    14bc:	10 92 34 01 	sts	0x0134, r1
    14c0:	88 ec       	ldi	r24, 0xC8	; 200
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	90 93 28 01 	sts	0x0128, r25
    14c8:	80 93 27 01 	sts	0x0127, r24
    14cc:	86 e0       	ldi	r24, 0x06	; 6
    14ce:	4e c0       	rjmp	.+156    	; 0x156c <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	20 e4       	ldi	r18, 0x40	; 64
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	01 e0       	ldi	r16, 0x01	; 1
    14dc:	35 d1       	rcall	.+618    	; 0x1748 <Pipe_ConfigurePipe>
    14de:	88 23       	and	r24, r24
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <USB_Host_ProcessNextHostState+0x17e>
    14e2:	50 c0       	rjmp	.+160    	; 0x1584 <USB_Host_ProcessNextHostState+0x21e>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    14e4:	87 e0       	ldi	r24, 0x07	; 7
    14e6:	93 cf       	rjmp	.-218    	; 0x140e <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    14e8:	ac e2       	ldi	r26, 0x2C	; 44
    14ea:	b1 e0       	ldi	r27, 0x01	; 1
    14ec:	ec e1       	ldi	r30, 0x1C	; 28
    14ee:	f1 e0       	ldi	r31, 0x01	; 1
    14f0:	88 e0       	ldi	r24, 0x08	; 8
    14f2:	01 90       	ld	r0, Z+
    14f4:	0d 92       	st	X+, r0
    14f6:	81 50       	subi	r24, 0x01	; 1
    14f8:	e1 f7       	brne	.-8      	; 0x14f2 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14fa:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    14fe:	ce 01       	movw	r24, r28
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	af d3       	rcall	.+1886   	; 0x1c62 <USB_Host_SendControlRequest>
    1504:	68 2f       	mov	r22, r24
    1506:	88 23       	and	r24, r24
    1508:	09 f0       	breq	.+2      	; 0x150c <USB_Host_ProcessNextHostState+0x1a6>
    150a:	3f c0       	rjmp	.+126    	; 0x158a <USB_Host_ProcessNextHostState+0x224>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    150c:	88 85       	ldd	r24, Y+8	; 0x08
    150e:	80 93 24 01 	sts	0x0124, r24

			USB_Host_ResetDevice();
    1512:	7e de       	rcall	.-772    	; 0x1210 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    1514:	10 92 34 01 	sts	0x0134, r1
    1518:	88 ec       	ldi	r24, 0xC8	; 200
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	90 93 28 01 	sts	0x0128, r25
    1520:	80 93 27 01 	sts	0x0127, r24
    1524:	88 e0       	ldi	r24, 0x08	; 8
    1526:	22 c0       	rjmp	.+68     	; 0x156c <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    1528:	20 91 24 01 	lds	r18, 0x0124
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	01 e0       	ldi	r16, 0x01	; 1
    1536:	08 d1       	rcall	.+528    	; 0x1748 <Pipe_ConfigurePipe>
    1538:	88 23       	and	r24, r24
    153a:	21 f1       	breq	.+72     	; 0x1584 <USB_Host_ProcessNextHostState+0x21e>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    153c:	ac e2       	ldi	r26, 0x2C	; 44
    153e:	b1 e0       	ldi	r27, 0x01	; 1
    1540:	e4 e1       	ldi	r30, 0x14	; 20
    1542:	f1 e0       	ldi	r31, 0x01	; 1
    1544:	88 e0       	ldi	r24, 0x08	; 8
    1546:	01 90       	ld	r0, Z+
    1548:	0d 92       	st	X+, r0
    154a:	81 50       	subi	r24, 0x01	; 1
    154c:	e1 f7       	brne	.-8      	; 0x1546 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	87 d3       	rcall	.+1806   	; 0x1c62 <USB_Host_SendControlRequest>
    1554:	68 2f       	mov	r22, r24
    1556:	88 23       	and	r24, r24
    1558:	c1 f4       	brne	.+48     	; 0x158a <USB_Host_ProcessNextHostState+0x224>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    155a:	10 92 34 01 	sts	0x0134, r1
    155e:	84 e6       	ldi	r24, 0x64	; 100
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	90 93 28 01 	sts	0x0128, r25
    1566:	80 93 27 01 	sts	0x0127, r24
    156a:	89 e0       	ldi	r24, 0x09	; 9
    156c:	80 93 26 01 	sts	0x0126, r24
			break;
    1570:	1a c0       	rjmp	.+52     	; 0x15a6 <USB_Host_ProcessNextHostState+0x240>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    1578:	8a e0       	ldi	r24, 0x0A	; 10
    157a:	80 93 34 01 	sts	0x0134, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    157e:	0e 94 88 02 	call	0x510	; 0x510 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    1582:	11 c0       	rjmp	.+34     	; 0x15a6 <USB_Host_ProcessNextHostState+0x240>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    1584:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    1586:	84 e0       	ldi	r24, 0x04	; 4
    1588:	01 c0       	rjmp	.+2      	; 0x158c <USB_Host_ProcessNextHostState+0x226>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    158a:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    158c:	90 91 34 01 	lds	r25, 0x0134
    1590:	91 30       	cpi	r25, 0x01	; 1
    1592:	49 f0       	breq	.+18     	; 0x15a6 <USB_Host_ProcessNextHostState+0x240>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1594:	23 d8       	rcall	.-4026   	; 0x5dc <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1596:	80 91 dd 00 	lds	r24, 0x00DD
    159a:	81 60       	ori	r24, 0x01	; 1
    159c:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    15a0:	0e 94 82 02 	call	0x504	; 0x504 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    15a4:	96 d1       	rcall	.+812    	; 0x18d2 <USB_ResetInterface>
	}
}
    15a6:	28 96       	adiw	r28, 0x08	; 8
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	08 95       	ret

000015bc <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    15bc:	8f 92       	push	r8
    15be:	9f 92       	push	r9
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	0f 92       	push	r0
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	e8 2e       	mov	r14, r24
    15da:	4b 01       	movw	r8, r22
    15dc:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    15de:	80 91 aa 00 	lds	r24, 0x00AA
    15e2:	8f 7c       	andi	r24, 0xCF	; 207
    15e4:	80 62       	ori	r24, 0x20	; 32
    15e6:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    15ea:	99 83       	std	Y+1, r25	; 0x01
    15ec:	2a d1       	rcall	.+596    	; 0x1842 <Pipe_WaitUntilReady>
    15ee:	b8 2e       	mov	r11, r24
    15f0:	99 81       	ldd	r25, Y+1	; 0x01
    15f2:	88 23       	and	r24, r24
    15f4:	c1 f5       	brne	.+112    	; 0x1666 <Pipe_Write_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    15f6:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    15f8:	01 15       	cp	r16, r1
    15fa:	11 05       	cpc	r17, r1
    15fc:	39 f0       	breq	.+14     	; 0x160c <Pipe_Write_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    15fe:	f8 01       	movw	r30, r16
    1600:	20 81       	ld	r18, Z
    1602:	31 81       	ldd	r19, Z+1	; 0x01
    1604:	82 1a       	sub	r8, r18
    1606:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1608:	e2 0e       	add	r14, r18
    160a:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    160c:	cc 24       	eor	r12, r12
    160e:	dd 24       	eor	r13, r13
    1610:	25 c0       	rjmp	.+74     	; 0x165c <Pipe_Write_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1612:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1616:	85 fd       	sbrc	r24, 5
    1618:	16 c0       	rjmp	.+44     	; 0x1646 <Pipe_Write_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    161a:	80 91 a6 00 	lds	r24, 0x00A6
    161e:	8b 77       	andi	r24, 0x7B	; 123
    1620:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1624:	01 15       	cp	r16, r1
    1626:	11 05       	cpc	r17, r1
    1628:	51 f0       	breq	.+20     	; 0x163e <Pipe_Write_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    162a:	f8 01       	movw	r30, r16
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	8c 0d       	add	r24, r12
    1632:	9d 1d       	adc	r25, r13
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    1638:	24 e0       	ldi	r18, 0x04	; 4
    163a:	b2 2e       	mov	r11, r18
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <Pipe_Write_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    163e:	01 d1       	rcall	.+514    	; 0x1842 <Pipe_WaitUntilReady>
    1640:	88 23       	and	r24, r24
    1642:	61 f0       	breq	.+24     	; 0x165c <Pipe_Write_Stream_LE+0xa0>
    1644:	0f c0       	rjmp	.+30     	; 0x1664 <Pipe_Write_Stream_LE+0xa8>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1646:	f7 01       	movw	r30, r14
    1648:	81 91       	ld	r24, Z+
    164a:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    164c:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1650:	08 94       	sec
    1652:	81 08       	sbc	r8, r1
    1654:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    1656:	08 94       	sec
    1658:	c1 1c       	adc	r12, r1
    165a:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    165c:	81 14       	cp	r8, r1
    165e:	91 04       	cpc	r9, r1
    1660:	c1 f6       	brne	.-80     	; 0x1612 <Pipe_Write_Stream_LE+0x56>
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <Pipe_Write_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1664:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1666:	8b 2d       	mov	r24, r11
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	df 90       	pop	r13
    1678:	cf 90       	pop	r12
    167a:	bf 90       	pop	r11
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	08 95       	ret

00001682 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1682:	8f 92       	push	r8
    1684:	9f 92       	push	r9
    1686:	bf 92       	push	r11
    1688:	cf 92       	push	r12
    168a:	df 92       	push	r13
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	0f 92       	push	r0
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	e8 2e       	mov	r14, r24
    16a0:	4b 01       	movw	r8, r22
    16a2:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    16a4:	80 91 aa 00 	lds	r24, 0x00AA
    16a8:	8f 7c       	andi	r24, 0xCF	; 207
    16aa:	80 61       	ori	r24, 0x10	; 16
    16ac:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    16b0:	99 83       	std	Y+1, r25	; 0x01
    16b2:	c7 d0       	rcall	.+398    	; 0x1842 <Pipe_WaitUntilReady>
    16b4:	b8 2e       	mov	r11, r24
    16b6:	99 81       	ldd	r25, Y+1	; 0x01
    16b8:	88 23       	and	r24, r24
    16ba:	c1 f5       	brne	.+112    	; 0x172c <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    16bc:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    16be:	01 15       	cp	r16, r1
    16c0:	11 05       	cpc	r17, r1
    16c2:	39 f0       	breq	.+14     	; 0x16d2 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    16c4:	f8 01       	movw	r30, r16
    16c6:	20 81       	ld	r18, Z
    16c8:	31 81       	ldd	r19, Z+1	; 0x01
    16ca:	82 1a       	sub	r8, r18
    16cc:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    16ce:	e2 0e       	add	r14, r18
    16d0:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    16d2:	cc 24       	eor	r12, r12
    16d4:	dd 24       	eor	r13, r13
    16d6:	25 c0       	rjmp	.+74     	; 0x1722 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    16d8:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    16dc:	85 fd       	sbrc	r24, 5
    16de:	16 c0       	rjmp	.+44     	; 0x170c <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    16e0:	80 91 a6 00 	lds	r24, 0x00A6
    16e4:	8e 77       	andi	r24, 0x7E	; 126
    16e6:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    16ea:	01 15       	cp	r16, r1
    16ec:	11 05       	cpc	r17, r1
    16ee:	51 f0       	breq	.+20     	; 0x1704 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    16f0:	f8 01       	movw	r30, r16
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	8c 0d       	add	r24, r12
    16f8:	9d 1d       	adc	r25, r13
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    16fe:	44 e0       	ldi	r20, 0x04	; 4
    1700:	b4 2e       	mov	r11, r20
    1702:	14 c0       	rjmp	.+40     	; 0x172c <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1704:	9e d0       	rcall	.+316    	; 0x1842 <Pipe_WaitUntilReady>
    1706:	88 23       	and	r24, r24
    1708:	61 f0       	breq	.+24     	; 0x1722 <Pipe_Read_Stream_LE+0xa0>
    170a:	0f c0       	rjmp	.+30     	; 0x172a <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    170c:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1710:	f7 01       	movw	r30, r14
    1712:	81 93       	st	Z+, r24
    1714:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1716:	08 94       	sec
    1718:	81 08       	sbc	r8, r1
    171a:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    171c:	08 94       	sec
    171e:	c1 1c       	adc	r12, r1
    1720:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1722:	81 14       	cp	r8, r1
    1724:	91 04       	cpc	r9, r1
    1726:	c1 f6       	brne	.-80     	; 0x16d8 <Pipe_Read_Stream_LE+0x56>
    1728:	01 c0       	rjmp	.+2      	; 0x172c <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    172a:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    172c:	8b 2d       	mov	r24, r11
    172e:	0f 90       	pop	r0
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	ff 90       	pop	r15
    173a:	ef 90       	pop	r14
    173c:	df 90       	pop	r13
    173e:	cf 90       	pop	r12
    1740:	bf 90       	pop	r11
    1742:	9f 90       	pop	r9
    1744:	8f 90       	pop	r8
    1746:	08 95       	ret

00001748 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1748:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    174a:	58 2f       	mov	r21, r24
    174c:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    174e:	87 ff       	sbrs	r24, 7
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <Pipe_ConfigurePipe+0xe>
    1752:	80 e1       	ldi	r24, 0x10	; 16
    1754:	01 c0       	rjmp	.+2      	; 0x1758 <Pipe_ConfigurePipe+0x10>
    1756:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    1758:	57 30       	cpi	r21, 0x07	; 7
    175a:	08 f0       	brcs	.+2      	; 0x175e <Pipe_ConfigurePipe+0x16>
    175c:	59 c0       	rjmp	.+178    	; 0x1810 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    175e:	66 23       	and	r22, r22
    1760:	09 f4       	brne	.+2      	; 0x1764 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    1762:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1764:	4f 70       	andi	r20, 0x0F	; 15
    1766:	62 95       	swap	r22
    1768:	66 0f       	add	r22, r22
    176a:	66 0f       	add	r22, r22
    176c:	60 7c       	andi	r22, 0xC0	; 192
    176e:	64 2b       	or	r22, r20
    1770:	68 2b       	or	r22, r24
    1772:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1774:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1776:	84 2f       	mov	r24, r20
    1778:	8f 70       	andi	r24, 0x0F	; 15
    177a:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    177e:	45 17       	cp	r20, r21
    1780:	a1 f4       	brne	.+40     	; 0x17aa <Pipe_ConfigurePipe+0x62>
    1782:	88 e0       	ldi	r24, 0x08	; 8
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	03 c0       	rjmp	.+6      	; 0x1790 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    178a:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1790:	82 17       	cp	r24, r18
    1792:	93 07       	cpc	r25, r19
    1794:	10 f4       	brcc	.+4      	; 0x179a <Pipe_ConfigurePipe+0x52>
    1796:	75 30       	cpi	r23, 0x05	; 5
    1798:	c1 f7       	brne	.-16     	; 0x178a <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    179a:	87 2f       	mov	r24, r23
    179c:	82 95       	swap	r24
    179e:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    17a0:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    17a2:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    17a4:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    17a6:	e0 e0       	ldi	r30, 0x00	; 0
    17a8:	08 c0       	rjmp	.+16     	; 0x17ba <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    17aa:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    17ae:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    17b2:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    17b6:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    17ba:	81 ff       	sbrs	r24, 1
    17bc:	20 c0       	rjmp	.+64     	; 0x17fe <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    17be:	90 91 a9 00 	lds	r25, 0x00A9
    17c2:	9e 7f       	andi	r25, 0xFE	; 254
    17c4:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    17c8:	90 91 ab 00 	lds	r25, 0x00AB
    17cc:	9d 7f       	andi	r25, 0xFD	; 253
    17ce:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    17d2:	90 91 a9 00 	lds	r25, 0x00A9
    17d6:	91 60       	ori	r25, 0x01	; 1
    17d8:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    17dc:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    17e0:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    17e4:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    17e8:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    17ec:	80 91 a9 00 	lds	r24, 0x00A9
    17f0:	80 62       	ori	r24, 0x20	; 32
    17f2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    17f6:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    17fa:	87 ff       	sbrs	r24, 7
    17fc:	09 c0       	rjmp	.+18     	; 0x1810 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    17fe:	4f 5f       	subi	r20, 0xFF	; 255
    1800:	47 30       	cpi	r20, 0x07	; 7
    1802:	09 f0       	breq	.+2      	; 0x1806 <Pipe_ConfigurePipe+0xbe>
    1804:	b8 cf       	rjmp	.-144    	; 0x1776 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1806:	5f 70       	andi	r21, 0x0F	; 15
    1808:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    1810:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1812:	0f 91       	pop	r16
    1814:	08 95       	ret

00001816 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    1816:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	98 2f       	mov	r25, r24
    181e:	9f 70       	andi	r25, 0x0F	; 15
    1820:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1824:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1828:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    182c:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1830:	90 91 a9 00 	lds	r25, 0x00A9
    1834:	9e 7f       	andi	r25, 0xFE	; 254
    1836:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    183a:	8f 5f       	subi	r24, 0xFF	; 255
    183c:	87 30       	cpi	r24, 0x07	; 7
    183e:	71 f7       	brne	.-36     	; 0x181c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1840:	08 95       	ret

00001842 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1842:	20 91 a2 00 	lds	r18, 0x00A2
    1846:	30 91 a3 00 	lds	r19, 0x00A3
uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    184a:	88 e8       	ldi	r24, 0x88	; 136
    184c:	93 e1       	ldi	r25, 0x13	; 19
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    184e:	40 91 aa 00 	lds	r20, 0x00AA
    1852:	40 73       	andi	r20, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1854:	40 31       	cpi	r20, 0x10	; 16
    1856:	29 f4       	brne	.+10     	; 0x1862 <Pipe_WaitUntilReady+0x20>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1858:	40 91 a6 00 	lds	r20, 0x00A6
		{
			if (Pipe_IsINReceived())
    185c:	40 ff       	sbrs	r20, 0
    185e:	05 c0       	rjmp	.+10     	; 0x186a <Pipe_WaitUntilReady+0x28>
    1860:	18 c0       	rjmp	.+48     	; 0x1892 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1862:	40 91 a6 00 	lds	r20, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1866:	42 fd       	sbrc	r20, 2
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    186a:	40 91 a6 00 	lds	r20, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    186e:	41 fd       	sbrc	r20, 1
    1870:	12 c0       	rjmp	.+36     	; 0x1896 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1872:	40 91 34 01 	lds	r20, 0x0134
    1876:	41 30       	cpi	r20, 0x01	; 1
    1878:	81 f0       	breq	.+32     	; 0x189a <Pipe_WaitUntilReady+0x58>
    187a:	40 91 a2 00 	lds	r20, 0x00A2
    187e:	50 91 a3 00 	lds	r21, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1882:	42 17       	cp	r20, r18
    1884:	53 07       	cpc	r21, r19
    1886:	19 f3       	breq	.-58     	; 0x184e <Pipe_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	49 f0       	breq	.+18     	; 0x189e <Pipe_WaitUntilReady+0x5c>
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	9a 01       	movw	r18, r20
    1890:	de cf       	rjmp	.-68     	; 0x184e <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    189a:	82 e0       	ldi	r24, 0x02	; 2
    189c:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    189e:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    18a0:	08 95       	ret

000018a2 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    18a2:	75 d0       	rcall	.+234    	; 0x198e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    18a4:	7c d0       	rcall	.+248    	; 0x199e <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    18a6:	e0 ee       	ldi	r30, 0xE0	; 224
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	81 60       	ori	r24, 0x01	; 1
    18ae:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    18b0:	e8 ed       	ldi	r30, 0xD8	; 216
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	8f 77       	andi	r24, 0x7F	; 127
    18b8:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    18ba:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    18bc:	a7 ed       	ldi	r26, 0xD7	; 215
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	8c 91       	ld	r24, X
    18c2:	8e 7f       	andi	r24, 0xFE	; 254
    18c4:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    18c6:	80 81       	ld	r24, Z
    18c8:	8f 7e       	andi	r24, 0xEF	; 239
    18ca:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    18cc:	10 92 2b 01 	sts	0x012B, r1
}
    18d0:	08 95       	ret

000018d2 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    18d2:	5d d0       	rcall	.+186    	; 0x198e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    18d4:	64 d0       	rcall	.+200    	; 0x199e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    18d6:	80 91 d8 00 	lds	r24, 0x00D8
    18da:	8f 77       	andi	r24, 0x7F	; 127
    18dc:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    18e0:	80 91 d8 00 	lds	r24, 0x00D8
    18e4:	80 68       	ori	r24, 0x80	; 128
    18e6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    18ea:	80 91 d8 00 	lds	r24, 0x00D8
    18ee:	8f 7d       	andi	r24, 0xDF	; 223
    18f0:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    18f4:	80 91 d7 00 	lds	r24, 0x00D7
    18f8:	8f 77       	andi	r24, 0x7F	; 127
    18fa:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    18fe:	8c e0       	ldi	r24, 0x0C	; 12
    1900:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1902:	8e e0       	ldi	r24, 0x0E	; 14
    1904:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1906:	09 b4       	in	r0, 0x29	; 41
    1908:	00 fe       	sbrs	r0, 0
    190a:	fd cf       	rjmp	.-6      	; 0x1906 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	80 93 34 01 	sts	0x0134, r24
	USB_Host_ConfigurationNumber = 0;
    1912:	10 92 2a 01 	sts	0x012A, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1916:	80 e4       	ldi	r24, 0x40	; 64
    1918:	80 93 24 01 	sts	0x0124, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    191c:	80 91 d8 00 	lds	r24, 0x00D8
    1920:	80 64       	ori	r24, 0x40	; 64
    1922:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1926:	80 91 dd 00 	lds	r24, 0x00DD
    192a:	81 60       	ori	r24, 0x01	; 1
    192c:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1930:	80 91 dd 00 	lds	r24, 0x00DD
    1934:	84 60       	ori	r24, 0x04	; 4
    1936:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    193a:	80 91 d7 00 	lds	r24, 0x00D7
    193e:	8f 7e       	andi	r24, 0xEF	; 239
    1940:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1944:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    1946:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1948:	80 91 de 00 	lds	r24, 0x00DE
    194c:	81 60       	ori	r24, 0x01	; 1
    194e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1952:	80 91 de 00 	lds	r24, 0x00DE
    1956:	84 60       	ori	r24, 0x04	; 4
    1958:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    195c:	80 91 e0 00 	lds	r24, 0x00E0
    1960:	8e 7f       	andi	r24, 0xFE	; 254
    1962:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1966:	80 91 d8 00 	lds	r24, 0x00D8
    196a:	80 61       	ori	r24, 0x10	; 16
    196c:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1970:	08 95       	ret

00001972 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1972:	e8 ed       	ldi	r30, 0xD8	; 216
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8f 7e       	andi	r24, 0xEF	; 239
    197a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    197c:	e7 ed       	ldi	r30, 0xD7	; 215
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	81 60       	ori	r24, 0x01	; 1
    1984:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	80 93 2b 01 	sts	0x012B, r24

	USB_ResetInterface();
}
    198c:	a2 cf       	rjmp	.-188    	; 0x18d2 <USB_ResetInterface>

0000198e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    198e:	e8 ed       	ldi	r30, 0xD8	; 216
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8c 7f       	andi	r24, 0xFC	; 252
    1996:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1998:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    199c:	08 95       	ret

0000199e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    199e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    19a2:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    19a6:	08 95       	ret

000019a8 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    19a8:	1f 92       	push	r1
    19aa:	0f 92       	push	r0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	0f 92       	push	r0
    19b0:	0b b6       	in	r0, 0x3b	; 59
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	2f 93       	push	r18
    19b8:	3f 93       	push	r19
    19ba:	4f 93       	push	r20
    19bc:	5f 93       	push	r21
    19be:	6f 93       	push	r22
    19c0:	7f 93       	push	r23
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
    19c6:	af 93       	push	r26
    19c8:	bf 93       	push	r27
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    19ce:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    19d2:	85 ff       	sbrs	r24, 5
    19d4:	0a c0       	rjmp	.+20     	; 0x19ea <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    19d6:	80 91 a0 00 	lds	r24, 0x00A0
    19da:	85 ff       	sbrs	r24, 5
    19dc:	06 c0       	rjmp	.+12     	; 0x19ea <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    19de:	80 91 9f 00 	lds	r24, 0x009F
    19e2:	8f 7d       	andi	r24, 0xDF	; 223
    19e4:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    19e8:	12 d1       	rcall	.+548    	; 0x1c0e <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    19ea:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    19ee:	81 ff       	sbrs	r24, 1
    19f0:	16 c0       	rjmp	.+44     	; 0x1a1e <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    19f2:	80 91 a0 00 	lds	r24, 0x00A0
    19f6:	81 ff       	sbrs	r24, 1
    19f8:	12 c0       	rjmp	.+36     	; 0x1a1e <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    19fa:	80 91 9f 00 	lds	r24, 0x009F
    19fe:	8d 7f       	andi	r24, 0xFD	; 253
    1a00:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1a04:	80 91 9f 00 	lds	r24, 0x009F
    1a08:	8e 7f       	andi	r24, 0xFE	; 254
    1a0a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1a0e:	80 91 a0 00 	lds	r24, 0x00A0
    1a12:	8d 7f       	andi	r24, 0xFD	; 253
    1a14:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1a18:	0e 94 82 02 	call	0x504	; 0x504 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1a1c:	5a df       	rcall	.-332    	; 0x18d2 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1a1e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1a22:	81 ff       	sbrs	r24, 1
    1a24:	17 c0       	rjmp	.+46     	; 0x1a54 <__vector_10+0xac>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1a26:	80 91 de 00 	lds	r24, 0x00DE
    1a2a:	81 ff       	sbrs	r24, 1
    1a2c:	13 c0       	rjmp	.+38     	; 0x1a54 <__vector_10+0xac>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1a2e:	80 91 df 00 	lds	r24, 0x00DF
    1a32:	8d 7f       	andi	r24, 0xFD	; 253
    1a34:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    1a38:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1a3a:	80 91 dd 00 	lds	r24, 0x00DD
    1a3e:	81 60       	ori	r24, 0x01	; 1
    1a40:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	0e 94 cd 02 	call	0x59a	; 0x59a <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    1a4a:	0e 94 82 02 	call	0x504	; 0x504 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	80 93 34 01 	sts	0x0134, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1a54:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1a58:	80 ff       	sbrs	r24, 0
    1a5a:	18 c0       	rjmp	.+48     	; 0x1a8c <__vector_10+0xe4>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1a5c:	80 91 de 00 	lds	r24, 0x00DE
    1a60:	80 ff       	sbrs	r24, 0
    1a62:	14 c0       	rjmp	.+40     	; 0x1a8c <__vector_10+0xe4>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1a64:	80 91 df 00 	lds	r24, 0x00DF
    1a68:	8e 7f       	andi	r24, 0xFE	; 254
    1a6a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    1a6e:	80 91 de 00 	lds	r24, 0x00DE
    1a72:	8e 7f       	andi	r24, 0xFE	; 254
    1a74:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1a78:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1a7c:	80 91 a0 00 	lds	r24, 0x00A0
    1a80:	82 60       	ori	r24, 0x02	; 2
    1a82:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	80 93 34 01 	sts	0x0134, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1a8c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1a90:	82 ff       	sbrs	r24, 2
    1a92:	10 c0       	rjmp	.+32     	; 0x1ab4 <__vector_10+0x10c>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1a94:	80 91 de 00 	lds	r24, 0x00DE
    1a98:	82 ff       	sbrs	r24, 2
    1a9a:	0c c0       	rjmp	.+24     	; 0x1ab4 <__vector_10+0x10c>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1a9c:	80 91 df 00 	lds	r24, 0x00DF
    1aa0:	8b 7f       	andi	r24, 0xFB	; 251
    1aa2:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	0e 94 ee 02 	call	0x5dc	; 0x5dc <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1aae:	0e 94 82 02 	call	0x504	; 0x504 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1ab2:	0f df       	rcall	.-482    	; 0x18d2 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1ab4:	ff 91       	pop	r31
    1ab6:	ef 91       	pop	r30
    1ab8:	bf 91       	pop	r27
    1aba:	af 91       	pop	r26
    1abc:	9f 91       	pop	r25
    1abe:	8f 91       	pop	r24
    1ac0:	7f 91       	pop	r23
    1ac2:	6f 91       	pop	r22
    1ac4:	5f 91       	pop	r21
    1ac6:	4f 91       	pop	r20
    1ac8:	3f 91       	pop	r19
    1aca:	2f 91       	pop	r18
    1acc:	0f 90       	pop	r0
    1ace:	0b be       	out	0x3b, r0	; 59
    1ad0:	0f 90       	pop	r0
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	0f 90       	pop	r0
    1ad6:	1f 90       	pop	r1
    1ad8:	18 95       	reti

00001ada <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1ada:	cf 92       	push	r12
    1adc:	df 92       	push	r13
    1ade:	ef 92       	push	r14
    1ae0:	ff 92       	push	r15
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	29 97       	sbiw	r28, 0x09	; 9
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	6b 01       	movw	r12, r22
    1afc:	8a 01       	movw	r16, r20
    1afe:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1b00:	90 e8       	ldi	r25, 0x80	; 128
    1b02:	90 93 2c 01 	sts	0x012C, r25
    1b06:	96 e0       	ldi	r25, 0x06	; 6
    1b08:	90 93 2d 01 	sts	0x012D, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1b12:	90 93 2f 01 	sts	0x012F, r25
    1b16:	80 93 2e 01 	sts	0x012E, r24
    1b1a:	10 92 31 01 	sts	0x0131, r1
    1b1e:	10 92 30 01 	sts	0x0130, r1
    1b22:	89 e0       	ldi	r24, 0x09	; 9
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	90 93 33 01 	sts	0x0133, r25
    1b2a:	80 93 32 01 	sts	0x0132, r24
    1b2e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1b32:	ce 01       	movw	r24, r28
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	95 d0       	rcall	.+298    	; 0x1c62 <USB_Host_SendControlRequest>
    1b38:	88 23       	and	r24, r24
    1b3a:	b9 f4       	brne	.+46     	; 0x1b6a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	f6 01       	movw	r30, r12
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1b46:	e8 16       	cp	r14, r24
    1b48:	f9 06       	cpc	r15, r25
    1b4a:	70 f0       	brcs	.+28     	; 0x1b68 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1b4c:	90 93 33 01 	sts	0x0133, r25
    1b50:	80 93 32 01 	sts	0x0132, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1b54:	c8 01       	movw	r24, r16
    1b56:	85 d0       	rcall	.+266    	; 0x1c62 <USB_Host_SendControlRequest>
    1b58:	88 23       	and	r24, r24
    1b5a:	39 f4       	brne	.+14     	; 0x1b6a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	92 30       	cpi	r25, 0x02	; 2
    1b62:	19 f0       	breq	.+6      	; 0x1b6a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1b64:	86 e0       	ldi	r24, 0x06	; 6
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1b68:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1b6a:	29 96       	adiw	r28, 0x09	; 9
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	df 90       	pop	r13
    1b84:	cf 90       	pop	r12
    1b86:	08 95       	ret

00001b88 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1b88:	af 92       	push	r10
    1b8a:	bf 92       	push	r11
    1b8c:	cf 92       	push	r12
    1b8e:	df 92       	push	r13
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	8c 01       	movw	r16, r24
    1b9e:	eb 01       	movw	r28, r22
    1ba0:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1ba2:	23 c0       	rjmp	.+70     	; 0x1bea <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1ba4:	e8 81       	ld	r30, Y
    1ba6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ba8:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1baa:	20 81       	ld	r18, Z
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	c7 01       	movw	r24, r14
    1bb0:	2e 15       	cp	r18, r14
    1bb2:	3f 05       	cpc	r19, r15
    1bb4:	08 f4       	brcc	.+2      	; 0x1bb8 <USB_GetNextDescriptorComp+0x30>
    1bb6:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1bb8:	e8 0f       	add	r30, r24
    1bba:	f9 1f       	adc	r31, r25
    1bbc:	f9 83       	std	Y+1, r31	; 0x01
    1bbe:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	20 81       	ld	r18, Z
    1bc4:	31 81       	ldd	r19, Z+1	; 0x01
    1bc6:	28 1b       	sub	r18, r24
    1bc8:	39 0b       	sbc	r19, r25
    1bca:	31 83       	std	Z+1, r19	; 0x01
    1bcc:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1bce:	88 81       	ld	r24, Y
    1bd0:	99 81       	ldd	r25, Y+1	; 0x01
    1bd2:	f6 01       	movw	r30, r12
    1bd4:	09 95       	icall
    1bd6:	82 30       	cpi	r24, 0x02	; 2
    1bd8:	41 f0       	breq	.+16     	; 0x1bea <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	69 f4       	brne	.+26     	; 0x1bf8 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    1bde:	a8 82       	st	Y, r10
    1be0:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    1be2:	f8 01       	movw	r30, r16
    1be4:	f1 82       	std	Z+1, r15	; 0x01
    1be6:	e0 82       	st	Z, r14
    1be8:	07 c0       	rjmp	.+14     	; 0x1bf8 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1bea:	f8 01       	movw	r30, r16
    1bec:	e0 80       	ld	r14, Z
    1bee:	f1 80       	ldd	r15, Z+1	; 0x01
    1bf0:	e1 14       	cp	r14, r1
    1bf2:	f1 04       	cpc	r15, r1
    1bf4:	b9 f6       	brne	.-82     	; 0x1ba4 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1bf6:	82 e0       	ldi	r24, 0x02	; 2
}
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	df 90       	pop	r13
    1c06:	cf 90       	pop	r12
    1c08:	bf 90       	pop	r11
    1c0a:	af 90       	pop	r10
    1c0c:	08 95       	ret

00001c0e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1c0e:	08 95       	ret

00001c10 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1c10:	1f 93       	push	r17
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1c18:	c8 ee       	ldi	r28, 0xE8	; 232
    1c1a:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1c1c:	07 c0       	rjmp	.+14     	; 0x1c2c <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	4d db       	rcall	.-2406   	; 0x12bc <USB_Host_WaitMS>
    1c22:	88 23       	and	r24, r24
    1c24:	d1 f4       	brne	.+52     	; 0x1c5a <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1c26:	20 97       	sbiw	r28, 0x00	; 0
    1c28:	b9 f0       	breq	.+46     	; 0x1c58 <USB_Host_WaitForIOS+0x48>
    1c2a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1c2c:	11 23       	and	r17, r17
    1c2e:	29 f4       	brne	.+10     	; 0x1c3a <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1c30:	80 91 a6 00 	lds	r24, 0x00A6
    1c34:	83 ff       	sbrs	r24, 3
    1c36:	f3 cf       	rjmp	.-26     	; 0x1c1e <USB_Host_WaitForIOS+0xe>
    1c38:	0d c0       	rjmp	.+26     	; 0x1c54 <USB_Host_WaitForIOS+0x44>
    1c3a:	11 30       	cpi	r17, 0x01	; 1
    1c3c:	29 f4       	brne	.+10     	; 0x1c48 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1c3e:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1c42:	80 ff       	sbrs	r24, 0
    1c44:	ec cf       	rjmp	.-40     	; 0x1c1e <USB_Host_WaitForIOS+0xe>
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1c48:	12 30       	cpi	r17, 0x02	; 2
    1c4a:	49 f7       	brne	.-46     	; 0x1c1e <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1c4c:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1c50:	82 ff       	sbrs	r24, 2
    1c52:	e5 cf       	rjmp	.-54     	; 0x1c1e <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1c58:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	1f 91       	pop	r17
    1c60:	08 95       	ret

00001c62 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1c62:	ef 92       	push	r14
    1c64:	ff 92       	push	r15
    1c66:	0f 93       	push	r16
    1c68:	1f 93       	push	r17
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1c70:	e0 90 9e 00 	lds	r14, 0x009E
    1c74:	ff 24       	eor	r15, r15
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	e8 22       	and	r14, r24
    1c7a:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1c7c:	c0 91 32 01 	lds	r28, 0x0132
    1c80:	d0 91 33 01 	lds	r29, 0x0133
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1c84:	80 91 9e 00 	lds	r24, 0x009E
    1c88:	81 60       	ori	r24, 0x01	; 1
    1c8a:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	15 db       	rcall	.-2518   	; 0x12bc <USB_Host_WaitMS>
    1c92:	88 23       	and	r24, r24
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <USB_Host_SendControlRequest+0x36>
    1c96:	cb c0       	rjmp	.+406    	; 0x1e2e <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c98:	80 91 aa 00 	lds	r24, 0x00AA
    1c9c:	8f 7c       	andi	r24, 0xCF	; 207
    1c9e:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1ca2:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1ca6:	80 91 a6 00 	lds	r24, 0x00A6
    1caa:	8f 7e       	andi	r24, 0xEF	; 239
    1cac:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1cb0:	80 91 a9 00 	lds	r24, 0x00A9
    1cb4:	8f 7b       	andi	r24, 0xBF	; 191
    1cb6:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1cba:	ec e2       	ldi	r30, 0x2C	; 44
    1cbc:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1cbe:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1cc0:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	e4 33       	cpi	r30, 0x34	; 52
    1cc8:	f8 07       	cpc	r31, r24
    1cca:	c9 f7       	brne	.-14     	; 0x1cbe <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1ccc:	80 91 a6 00 	lds	r24, 0x00A6
    1cd0:	87 77       	andi	r24, 0x77	; 119
    1cd2:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	9b df       	rcall	.-202    	; 0x1c10 <USB_Host_WaitForIOS>
    1cda:	88 23       	and	r24, r24
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <USB_Host_SendControlRequest+0x7e>
    1cde:	a7 c0       	rjmp	.+334    	; 0x1e2e <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1ce0:	80 91 a9 00 	lds	r24, 0x00A9
    1ce4:	80 64       	ori	r24, 0x40	; 64
    1ce6:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	e7 da       	rcall	.-2610   	; 0x12bc <USB_Host_WaitMS>
    1cee:	88 23       	and	r24, r24
    1cf0:	09 f0       	breq	.+2      	; 0x1cf4 <USB_Host_SendControlRequest+0x92>
    1cf2:	9d c0       	rjmp	.+314    	; 0x1e2e <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1cf4:	80 91 2c 01 	lds	r24, 0x012C
    1cf8:	87 ff       	sbrs	r24, 7
    1cfa:	4f c0       	rjmp	.+158    	; 0x1d9a <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1cfc:	80 91 aa 00 	lds	r24, 0x00AA
    1d00:	8f 7c       	andi	r24, 0xCF	; 207
    1d02:	80 61       	ori	r24, 0x10	; 16
    1d04:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1d08:	01 15       	cp	r16, r1
    1d0a:	11 05       	cpc	r17, r1
    1d0c:	61 f5       	brne	.+88     	; 0x1d66 <USB_Host_SendControlRequest+0x104>
    1d0e:	2d c0       	rjmp	.+90     	; 0x1d6a <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d10:	80 91 a9 00 	lds	r24, 0x00A9
    1d14:	8f 7b       	andi	r24, 0xBF	; 191
    1d16:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	79 df       	rcall	.-270    	; 0x1c10 <USB_Host_WaitForIOS>
    1d1e:	88 23       	and	r24, r24
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <USB_Host_SendControlRequest+0xc2>
    1d22:	85 c0       	rjmp	.+266    	; 0x1e2e <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1d24:	80 91 f6 00 	lds	r24, 0x00F6
    1d28:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	49 f4       	brne	.+18     	; 0x1d42 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1d30:	c0 e0       	ldi	r28, 0x00	; 0
    1d32:	d0 e0       	ldi	r29, 0x00	; 0
    1d34:	06 c0       	rjmp	.+12     	; 0x1d42 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1d36:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	81 93       	st	Z+, r24
    1d3e:	8f 01       	movw	r16, r30
					DataLen--;
    1d40:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1d42:	80 91 f6 00 	lds	r24, 0x00F6
    1d46:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	11 f0       	breq	.+4      	; 0x1d52 <USB_Host_SendControlRequest+0xf0>
    1d4e:	20 97       	sbiw	r28, 0x00	; 0
    1d50:	91 f7       	brne	.-28     	; 0x1d36 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d52:	80 91 a9 00 	lds	r24, 0x00A9
    1d56:	80 64       	ori	r24, 0x40	; 64
    1d58:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1d5c:	80 91 a6 00 	lds	r24, 0x00A6
    1d60:	8e 77       	andi	r24, 0x7E	; 126
    1d62:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1d66:	20 97       	sbiw	r28, 0x00	; 0
    1d68:	99 f6       	brne	.-90     	; 0x1d10 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1d6a:	80 91 aa 00 	lds	r24, 0x00AA
    1d6e:	8f 7c       	andi	r24, 0xCF	; 207
    1d70:	80 62       	ori	r24, 0x20	; 32
    1d72:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d76:	80 91 a9 00 	lds	r24, 0x00A9
    1d7a:	8f 7b       	andi	r24, 0xBF	; 191
    1d7c:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	46 df       	rcall	.-372    	; 0x1c10 <USB_Host_WaitForIOS>
    1d84:	88 23       	and	r24, r24
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <USB_Host_SendControlRequest+0x128>
    1d88:	52 c0       	rjmp	.+164    	; 0x1e2e <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1d8a:	80 91 a6 00 	lds	r24, 0x00A6
    1d8e:	8b 77       	andi	r24, 0x7B	; 123
    1d90:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1d94:	82 e0       	ldi	r24, 0x02	; 2
    1d96:	3c df       	rcall	.-392    	; 0x1c10 <USB_Host_WaitForIOS>
    1d98:	4a c0       	rjmp	.+148    	; 0x1e2e <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1d9a:	01 15       	cp	r16, r1
    1d9c:	11 05       	cpc	r17, r1
    1d9e:	99 f1       	breq	.+102    	; 0x1e06 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1da0:	80 91 aa 00 	lds	r24, 0x00AA
    1da4:	8f 7c       	andi	r24, 0xCF	; 207
    1da6:	80 62       	ori	r24, 0x20	; 32
    1da8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1dac:	80 91 a9 00 	lds	r24, 0x00A9
    1db0:	8f 7b       	andi	r24, 0xBF	; 191
    1db2:	80 93 a9 00 	sts	0x00A9, r24
    1db6:	1c c0       	rjmp	.+56     	; 0x1df0 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	2a df       	rcall	.-428    	; 0x1c10 <USB_Host_WaitForIOS>
    1dbc:	88 23       	and	r24, r24
    1dbe:	b9 f5       	brne	.+110    	; 0x1e2e <USB_Host_SendControlRequest+0x1cc>
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	06 c0       	rjmp	.+12     	; 0x1dd0 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1dc4:	81 91       	ld	r24, Z+
    1dc6:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1dc8:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1dcc:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1dce:	59 f0       	breq	.+22     	; 0x1de6 <USB_Host_SendControlRequest+0x184>
    1dd0:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1dd2:	20 91 f6 00 	lds	r18, 0x00F6
    1dd6:	30 91 f7 00 	lds	r19, 0x00F7
    1dda:	80 91 24 01 	lds	r24, 0x0124
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	28 17       	cp	r18, r24
    1de2:	39 07       	cpc	r19, r25
    1de4:	78 f3       	brcs	.-34     	; 0x1dc4 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1de6:	80 91 a6 00 	lds	r24, 0x00A6
    1dea:	8b 77       	andi	r24, 0x7B	; 123
    1dec:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1df0:	20 97       	sbiw	r28, 0x00	; 0
    1df2:	11 f7       	brne	.-60     	; 0x1db8 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1df4:	82 e0       	ldi	r24, 0x02	; 2
    1df6:	0c df       	rcall	.-488    	; 0x1c10 <USB_Host_WaitForIOS>
    1df8:	88 23       	and	r24, r24
    1dfa:	c9 f4       	brne	.+50     	; 0x1e2e <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1dfc:	80 91 a9 00 	lds	r24, 0x00A9
    1e00:	80 64       	ori	r24, 0x40	; 64
    1e02:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1e06:	80 91 aa 00 	lds	r24, 0x00AA
    1e0a:	8f 7c       	andi	r24, 0xCF	; 207
    1e0c:	80 61       	ori	r24, 0x10	; 16
    1e0e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1e12:	80 91 a9 00 	lds	r24, 0x00A9
    1e16:	8f 7b       	andi	r24, 0xBF	; 191
    1e18:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	f8 de       	rcall	.-528    	; 0x1c10 <USB_Host_WaitForIOS>
    1e20:	88 23       	and	r24, r24
    1e22:	29 f4       	brne	.+10     	; 0x1e2e <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1e24:	90 91 a6 00 	lds	r25, 0x00A6
    1e28:	9e 77       	andi	r25, 0x7E	; 126
    1e2a:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1e2e:	90 91 a9 00 	lds	r25, 0x00A9
    1e32:	90 64       	ori	r25, 0x40	; 64
    1e34:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1e38:	e1 14       	cp	r14, r1
    1e3a:	f1 04       	cpc	r15, r1
    1e3c:	29 f4       	brne	.+10     	; 0x1e48 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1e3e:	90 91 9e 00 	lds	r25, 0x009E
    1e42:	9e 7f       	andi	r25, 0xFE	; 254
    1e44:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1e48:	91 e0       	ldi	r25, 0x01	; 1
    1e4a:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1e4e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	ff 90       	pop	r15
    1e5c:	ef 90       	pop	r14
    1e5e:	08 95       	ret

00001e60 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1e60:	1f 93       	push	r17
    1e62:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1e64:	10 92 2c 01 	sts	0x012C, r1
    1e68:	89 e0       	ldi	r24, 0x09	; 9
    1e6a:	80 93 2d 01 	sts	0x012D, r24
    1e6e:	10 93 2e 01 	sts	0x012E, r17
    1e72:	10 92 2f 01 	sts	0x012F, r1
    1e76:	10 92 31 01 	sts	0x0131, r1
    1e7a:	10 92 30 01 	sts	0x0130, r1
    1e7e:	10 92 33 01 	sts	0x0133, r1
    1e82:	10 92 32 01 	sts	0x0132, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1e86:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	e9 de       	rcall	.-558    	; 0x1c62 <USB_Host_SendControlRequest>
    1e90:	88 23       	and	r24, r24
    1e92:	49 f4       	brne	.+18     	; 0x1ea6 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1e94:	10 93 2a 01 	sts	0x012A, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1e98:	11 23       	and	r17, r17
    1e9a:	11 f0       	breq	.+4      	; 0x1ea0 <USB_Host_SetDeviceConfiguration+0x40>
    1e9c:	9b e0       	ldi	r25, 0x0B	; 11
    1e9e:	01 c0       	rjmp	.+2      	; 0x1ea2 <USB_Host_SetDeviceConfiguration+0x42>
    1ea0:	9a e0       	ldi	r25, 0x0A	; 10
    1ea2:	90 93 34 01 	sts	0x0134, r25
	}

	return ErrorCode;
}
    1ea6:	1f 91       	pop	r17
    1ea8:	08 95       	ret

00001eaa <USB_Host_ClearEndpointStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1eaa:	92 e0       	ldi	r25, 0x02	; 2
    1eac:	90 93 2c 01 	sts	0x012C, r25
    1eb0:	91 e0       	ldi	r25, 0x01	; 1
    1eb2:	90 93 2d 01 	sts	0x012D, r25
    1eb6:	10 92 2f 01 	sts	0x012F, r1
    1eba:	10 92 2e 01 	sts	0x012E, r1
    1ebe:	80 93 30 01 	sts	0x0130, r24
    1ec2:	10 92 31 01 	sts	0x0131, r1
    1ec6:	10 92 33 01 	sts	0x0133, r1
    1eca:	10 92 32 01 	sts	0x0132, r1
    1ece:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
}
    1ed6:	c5 ce       	rjmp	.-630    	; 0x1c62 <USB_Host_SendControlRequest>

00001ed8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1ed8:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1eda:	10 91 a7 00 	lds	r17, 0x00A7
    1ede:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1ee0:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1ee4:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1ee8:	3e da       	rcall	.-2948   	; 0x1366 <USB_Host_ProcessNextHostState>
    1eea:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1eee:	1f 91       	pop	r17
    1ef0:	08 95       	ret

00001ef2 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1ef2:	90 91 c8 00 	lds	r25, 0x00C8
    1ef6:	95 ff       	sbrs	r25, 5
    1ef8:	fc cf       	rjmp	.-8      	; 0x1ef2 <Serial_putchar>
				UDR1 = DataByte;
    1efa:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	08 95       	ret

00001f04 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1f04:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1f08:	87 ff       	sbrs	r24, 7
    1f0a:	08 c0       	rjmp	.+16     	; 0x1f1c <Serial_getchar+0x18>
    1f0c:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1f10:	87 ff       	sbrs	r24, 7
    1f12:	07 c0       	rjmp	.+14     	; 0x1f22 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1f14:	20 91 ce 00 	lds	r18, 0x00CE
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	05 c0       	rjmp	.+10     	; 0x1f26 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    1f1c:	2e ef       	ldi	r18, 0xFE	; 254
    1f1e:	3f ef       	ldi	r19, 0xFF	; 255
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1f22:	2f ef       	ldi	r18, 0xFF	; 255
    1f24:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1f26:	c9 01       	movw	r24, r18
    1f28:	08 95       	ret

00001f2a <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1f2a:	fc 01       	movw	r30, r24
	if (!(Stream))
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	51 f4       	brne	.+20     	; 0x1f44 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1f30:	e5 e3       	ldi	r30, 0x35	; 53
    1f32:	f1 e0       	ldi	r31, 0x01	; 1
    1f34:	f0 93 44 01 	sts	0x0144, r31
    1f38:	e0 93 43 01 	sts	0x0143, r30
		stdout = Stream;
    1f3c:	f0 93 46 01 	sts	0x0146, r31
    1f40:	e0 93 45 01 	sts	0x0145, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1f44:	8e e0       	ldi	r24, 0x0E	; 14
    1f46:	df 01       	movw	r26, r30
    1f48:	1d 92       	st	X+, r1
    1f4a:	8a 95       	dec	r24
    1f4c:	e9 f7       	brne	.-6      	; 0x1f48 <Serial_CreateStream+0x1e>
    1f4e:	83 e0       	ldi	r24, 0x03	; 3
    1f50:	83 83       	std	Z+3, r24	; 0x03
    1f52:	89 e7       	ldi	r24, 0x79	; 121
    1f54:	9f e0       	ldi	r25, 0x0F	; 15
    1f56:	91 87       	std	Z+9, r25	; 0x09
    1f58:	80 87       	std	Z+8, r24	; 0x08
    1f5a:	82 e8       	ldi	r24, 0x82	; 130
    1f5c:	9f e0       	ldi	r25, 0x0F	; 15
    1f5e:	93 87       	std	Z+11, r25	; 0x0b
    1f60:	82 87       	std	Z+10, r24	; 0x0a
}
    1f62:	08 95       	ret

00001f64 <__mulsi3>:
    1f64:	62 9f       	mul	r22, r18
    1f66:	d0 01       	movw	r26, r0
    1f68:	73 9f       	mul	r23, r19
    1f6a:	f0 01       	movw	r30, r0
    1f6c:	82 9f       	mul	r24, r18
    1f6e:	e0 0d       	add	r30, r0
    1f70:	f1 1d       	adc	r31, r1
    1f72:	64 9f       	mul	r22, r20
    1f74:	e0 0d       	add	r30, r0
    1f76:	f1 1d       	adc	r31, r1
    1f78:	92 9f       	mul	r25, r18
    1f7a:	f0 0d       	add	r31, r0
    1f7c:	83 9f       	mul	r24, r19
    1f7e:	f0 0d       	add	r31, r0
    1f80:	74 9f       	mul	r23, r20
    1f82:	f0 0d       	add	r31, r0
    1f84:	65 9f       	mul	r22, r21
    1f86:	f0 0d       	add	r31, r0
    1f88:	99 27       	eor	r25, r25
    1f8a:	72 9f       	mul	r23, r18
    1f8c:	b0 0d       	add	r27, r0
    1f8e:	e1 1d       	adc	r30, r1
    1f90:	f9 1f       	adc	r31, r25
    1f92:	63 9f       	mul	r22, r19
    1f94:	b0 0d       	add	r27, r0
    1f96:	e1 1d       	adc	r30, r1
    1f98:	f9 1f       	adc	r31, r25
    1f9a:	bd 01       	movw	r22, r26
    1f9c:	cf 01       	movw	r24, r30
    1f9e:	11 24       	eor	r1, r1
    1fa0:	08 95       	ret

00001fa2 <isgraph>:
    1fa2:	80 32       	cpi	r24, 0x20	; 32
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <isprint+0x2>

00001fa6 <isprint>:
    1fa6:	91 11       	cpse	r25, r1
    1fa8:	8a c2       	rjmp	.+1300   	; 0x24be <__ctype_isfalse>
    1faa:	80 52       	subi	r24, 0x20	; 32
    1fac:	8f 55       	subi	r24, 0x5F	; 95
    1fae:	e0 f7       	brcc	.-8      	; 0x1fa8 <isprint+0x2>
    1fb0:	08 95       	ret

00001fb2 <fputc>:
    1fb2:	0f 93       	push	r16
    1fb4:	1f 93       	push	r17
    1fb6:	cf 93       	push	r28
    1fb8:	df 93       	push	r29
    1fba:	8c 01       	movw	r16, r24
    1fbc:	eb 01       	movw	r28, r22
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	81 ff       	sbrs	r24, 1
    1fc2:	1b c0       	rjmp	.+54     	; 0x1ffa <fputc+0x48>
    1fc4:	82 ff       	sbrs	r24, 2
    1fc6:	0d c0       	rjmp	.+26     	; 0x1fe2 <fputc+0x30>
    1fc8:	2e 81       	ldd	r18, Y+6	; 0x06
    1fca:	3f 81       	ldd	r19, Y+7	; 0x07
    1fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fce:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd0:	28 17       	cp	r18, r24
    1fd2:	39 07       	cpc	r19, r25
    1fd4:	64 f4       	brge	.+24     	; 0x1fee <fputc+0x3c>
    1fd6:	e8 81       	ld	r30, Y
    1fd8:	f9 81       	ldd	r31, Y+1	; 0x01
    1fda:	01 93       	st	Z+, r16
    1fdc:	f9 83       	std	Y+1, r31	; 0x01
    1fde:	e8 83       	st	Y, r30
    1fe0:	06 c0       	rjmp	.+12     	; 0x1fee <fputc+0x3c>
    1fe2:	e8 85       	ldd	r30, Y+8	; 0x08
    1fe4:	f9 85       	ldd	r31, Y+9	; 0x09
    1fe6:	80 2f       	mov	r24, r16
    1fe8:	09 95       	icall
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	31 f4       	brne	.+12     	; 0x1ffa <fputc+0x48>
    1fee:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	9f 83       	std	Y+7, r25	; 0x07
    1ff6:	8e 83       	std	Y+6, r24	; 0x06
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <fputc+0x4c>
    1ffa:	0f ef       	ldi	r16, 0xFF	; 255
    1ffc:	1f ef       	ldi	r17, 0xFF	; 255
    1ffe:	c8 01       	movw	r24, r16
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	08 95       	ret

0000200a <printf_P>:
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	fe 01       	movw	r30, r28
    2014:	35 96       	adiw	r30, 0x05	; 5
    2016:	61 91       	ld	r22, Z+
    2018:	71 91       	ld	r23, Z+
    201a:	80 91 45 01 	lds	r24, 0x0145
    201e:	90 91 46 01 	lds	r25, 0x0146
    2022:	dc 01       	movw	r26, r24
    2024:	13 96       	adiw	r26, 0x03	; 3
    2026:	2c 91       	ld	r18, X
    2028:	13 97       	sbiw	r26, 0x03	; 3
    202a:	28 60       	ori	r18, 0x08	; 8
    202c:	13 96       	adiw	r26, 0x03	; 3
    202e:	2c 93       	st	X, r18
    2030:	af 01       	movw	r20, r30
    2032:	42 d0       	rcall	.+132    	; 0x20b8 <vfprintf>
    2034:	e0 91 45 01 	lds	r30, 0x0145
    2038:	f0 91 46 01 	lds	r31, 0x0146
    203c:	23 81       	ldd	r18, Z+3	; 0x03
    203e:	27 7f       	andi	r18, 0xF7	; 247
    2040:	23 83       	std	Z+3, r18	; 0x03
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <puts_P>:
    2048:	ef 92       	push	r14
    204a:	ff 92       	push	r15
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	8c 01       	movw	r16, r24
    2056:	e0 91 45 01 	lds	r30, 0x0145
    205a:	f0 91 46 01 	lds	r31, 0x0146
    205e:	83 81       	ldd	r24, Z+3	; 0x03
    2060:	81 ff       	sbrs	r24, 1
    2062:	20 c0       	rjmp	.+64     	; 0x20a4 <puts_P+0x5c>
    2064:	c0 e0       	ldi	r28, 0x00	; 0
    2066:	d0 e0       	ldi	r29, 0x00	; 0
    2068:	0c c0       	rjmp	.+24     	; 0x2082 <puts_P+0x3a>
    206a:	db 01       	movw	r26, r22
    206c:	18 96       	adiw	r26, 0x08	; 8
    206e:	ed 91       	ld	r30, X+
    2070:	fc 91       	ld	r31, X
    2072:	19 97       	sbiw	r26, 0x09	; 9
    2074:	09 95       	icall
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	11 f0       	breq	.+4      	; 0x207e <puts_P+0x36>
    207a:	cf ef       	ldi	r28, 0xFF	; 255
    207c:	df ef       	ldi	r29, 0xFF	; 255
    207e:	0f 5f       	subi	r16, 0xFF	; 255
    2080:	1f 4f       	sbci	r17, 0xFF	; 255
    2082:	f8 01       	movw	r30, r16
    2084:	84 91       	lpm	r24, Z+
    2086:	60 91 45 01 	lds	r22, 0x0145
    208a:	70 91 46 01 	lds	r23, 0x0146
    208e:	88 23       	and	r24, r24
    2090:	61 f7       	brne	.-40     	; 0x206a <puts_P+0x22>
    2092:	db 01       	movw	r26, r22
    2094:	18 96       	adiw	r26, 0x08	; 8
    2096:	ed 91       	ld	r30, X+
    2098:	fc 91       	ld	r31, X
    209a:	19 97       	sbiw	r26, 0x09	; 9
    209c:	8a e0       	ldi	r24, 0x0A	; 10
    209e:	09 95       	icall
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	11 f0       	breq	.+4      	; 0x20a8 <puts_P+0x60>
    20a4:	cf ef       	ldi	r28, 0xFF	; 255
    20a6:	df ef       	ldi	r29, 0xFF	; 255
    20a8:	ce 01       	movw	r24, r28
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	ff 90       	pop	r15
    20b4:	ef 90       	pop	r14
    20b6:	08 95       	ret

000020b8 <vfprintf>:
    20b8:	2f 92       	push	r2
    20ba:	3f 92       	push	r3
    20bc:	4f 92       	push	r4
    20be:	5f 92       	push	r5
    20c0:	6f 92       	push	r6
    20c2:	7f 92       	push	r7
    20c4:	8f 92       	push	r8
    20c6:	9f 92       	push	r9
    20c8:	af 92       	push	r10
    20ca:	bf 92       	push	r11
    20cc:	cf 92       	push	r12
    20ce:	df 92       	push	r13
    20d0:	ef 92       	push	r14
    20d2:	ff 92       	push	r15
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	2c 97       	sbiw	r28, 0x0c	; 12
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	6c 01       	movw	r12, r24
    20ee:	1b 01       	movw	r2, r22
    20f0:	8a 01       	movw	r16, r20
    20f2:	fc 01       	movw	r30, r24
    20f4:	17 82       	std	Z+7, r1	; 0x07
    20f6:	16 82       	std	Z+6, r1	; 0x06
    20f8:	83 81       	ldd	r24, Z+3	; 0x03
    20fa:	81 ff       	sbrs	r24, 1
    20fc:	c4 c1       	rjmp	.+904    	; 0x2486 <__stack+0x387>
    20fe:	2e 01       	movw	r4, r28
    2100:	08 94       	sec
    2102:	41 1c       	adc	r4, r1
    2104:	51 1c       	adc	r5, r1
    2106:	f6 01       	movw	r30, r12
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	f1 01       	movw	r30, r2
    210c:	93 fd       	sbrc	r25, 3
    210e:	85 91       	lpm	r24, Z+
    2110:	93 ff       	sbrs	r25, 3
    2112:	81 91       	ld	r24, Z+
    2114:	1f 01       	movw	r2, r30
    2116:	88 23       	and	r24, r24
    2118:	09 f4       	brne	.+2      	; 0x211c <__stack+0x1d>
    211a:	b1 c1       	rjmp	.+866    	; 0x247e <__stack+0x37f>
    211c:	85 32       	cpi	r24, 0x25	; 37
    211e:	39 f4       	brne	.+14     	; 0x212e <__stack+0x2f>
    2120:	93 fd       	sbrc	r25, 3
    2122:	85 91       	lpm	r24, Z+
    2124:	93 ff       	sbrs	r25, 3
    2126:	81 91       	ld	r24, Z+
    2128:	1f 01       	movw	r2, r30
    212a:	85 32       	cpi	r24, 0x25	; 37
    212c:	21 f4       	brne	.+8      	; 0x2136 <__stack+0x37>
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	b6 01       	movw	r22, r12
    2132:	3f df       	rcall	.-386    	; 0x1fb2 <fputc>
    2134:	e8 cf       	rjmp	.-48     	; 0x2106 <__stack+0x7>
    2136:	ee 24       	eor	r14, r14
    2138:	ff 24       	eor	r15, r15
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	20 32       	cpi	r18, 0x20	; 32
    213e:	b0 f4       	brcc	.+44     	; 0x216c <__stack+0x6d>
    2140:	8b 32       	cpi	r24, 0x2B	; 43
    2142:	69 f0       	breq	.+26     	; 0x215e <__stack+0x5f>
    2144:	8c 32       	cpi	r24, 0x2C	; 44
    2146:	28 f4       	brcc	.+10     	; 0x2152 <__stack+0x53>
    2148:	80 32       	cpi	r24, 0x20	; 32
    214a:	51 f0       	breq	.+20     	; 0x2160 <__stack+0x61>
    214c:	83 32       	cpi	r24, 0x23	; 35
    214e:	71 f4       	brne	.+28     	; 0x216c <__stack+0x6d>
    2150:	0b c0       	rjmp	.+22     	; 0x2168 <__stack+0x69>
    2152:	8d 32       	cpi	r24, 0x2D	; 45
    2154:	39 f0       	breq	.+14     	; 0x2164 <__stack+0x65>
    2156:	80 33       	cpi	r24, 0x30	; 48
    2158:	49 f4       	brne	.+18     	; 0x216c <__stack+0x6d>
    215a:	21 60       	ori	r18, 0x01	; 1
    215c:	2c c0       	rjmp	.+88     	; 0x21b6 <__stack+0xb7>
    215e:	22 60       	ori	r18, 0x02	; 2
    2160:	24 60       	ori	r18, 0x04	; 4
    2162:	29 c0       	rjmp	.+82     	; 0x21b6 <__stack+0xb7>
    2164:	28 60       	ori	r18, 0x08	; 8
    2166:	27 c0       	rjmp	.+78     	; 0x21b6 <__stack+0xb7>
    2168:	20 61       	ori	r18, 0x10	; 16
    216a:	25 c0       	rjmp	.+74     	; 0x21b6 <__stack+0xb7>
    216c:	27 fd       	sbrc	r18, 7
    216e:	2c c0       	rjmp	.+88     	; 0x21c8 <__stack+0xc9>
    2170:	38 2f       	mov	r19, r24
    2172:	30 53       	subi	r19, 0x30	; 48
    2174:	3a 30       	cpi	r19, 0x0A	; 10
    2176:	98 f4       	brcc	.+38     	; 0x219e <__stack+0x9f>
    2178:	26 ff       	sbrs	r18, 6
    217a:	08 c0       	rjmp	.+16     	; 0x218c <__stack+0x8d>
    217c:	8e 2d       	mov	r24, r14
    217e:	88 0f       	add	r24, r24
    2180:	e8 2e       	mov	r14, r24
    2182:	ee 0c       	add	r14, r14
    2184:	ee 0c       	add	r14, r14
    2186:	e8 0e       	add	r14, r24
    2188:	e3 0e       	add	r14, r19
    218a:	15 c0       	rjmp	.+42     	; 0x21b6 <__stack+0xb7>
    218c:	8f 2d       	mov	r24, r15
    218e:	88 0f       	add	r24, r24
    2190:	f8 2e       	mov	r15, r24
    2192:	ff 0c       	add	r15, r15
    2194:	ff 0c       	add	r15, r15
    2196:	f8 0e       	add	r15, r24
    2198:	f3 0e       	add	r15, r19
    219a:	20 62       	ori	r18, 0x20	; 32
    219c:	0c c0       	rjmp	.+24     	; 0x21b6 <__stack+0xb7>
    219e:	8e 32       	cpi	r24, 0x2E	; 46
    21a0:	21 f4       	brne	.+8      	; 0x21aa <__stack+0xab>
    21a2:	26 fd       	sbrc	r18, 6
    21a4:	6c c1       	rjmp	.+728    	; 0x247e <__stack+0x37f>
    21a6:	20 64       	ori	r18, 0x40	; 64
    21a8:	06 c0       	rjmp	.+12     	; 0x21b6 <__stack+0xb7>
    21aa:	8c 36       	cpi	r24, 0x6C	; 108
    21ac:	11 f4       	brne	.+4      	; 0x21b2 <__stack+0xb3>
    21ae:	20 68       	ori	r18, 0x80	; 128
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <__stack+0xb7>
    21b2:	88 36       	cpi	r24, 0x68	; 104
    21b4:	49 f4       	brne	.+18     	; 0x21c8 <__stack+0xc9>
    21b6:	f1 01       	movw	r30, r2
    21b8:	93 fd       	sbrc	r25, 3
    21ba:	85 91       	lpm	r24, Z+
    21bc:	93 ff       	sbrs	r25, 3
    21be:	81 91       	ld	r24, Z+
    21c0:	1f 01       	movw	r2, r30
    21c2:	88 23       	and	r24, r24
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <__stack+0xc9>
    21c6:	ba cf       	rjmp	.-140    	; 0x213c <__stack+0x3d>
    21c8:	98 2f       	mov	r25, r24
    21ca:	95 54       	subi	r25, 0x45	; 69
    21cc:	93 30       	cpi	r25, 0x03	; 3
    21ce:	18 f0       	brcs	.+6      	; 0x21d6 <__stack+0xd7>
    21d0:	90 52       	subi	r25, 0x20	; 32
    21d2:	93 30       	cpi	r25, 0x03	; 3
    21d4:	28 f4       	brcc	.+10     	; 0x21e0 <__stack+0xe1>
    21d6:	0c 5f       	subi	r16, 0xFC	; 252
    21d8:	1f 4f       	sbci	r17, 0xFF	; 255
    21da:	ff e3       	ldi	r31, 0x3F	; 63
    21dc:	f9 83       	std	Y+1, r31	; 0x01
    21de:	0d c0       	rjmp	.+26     	; 0x21fa <__stack+0xfb>
    21e0:	83 36       	cpi	r24, 0x63	; 99
    21e2:	31 f0       	breq	.+12     	; 0x21f0 <__stack+0xf1>
    21e4:	83 37       	cpi	r24, 0x73	; 115
    21e6:	71 f0       	breq	.+28     	; 0x2204 <__stack+0x105>
    21e8:	83 35       	cpi	r24, 0x53	; 83
    21ea:	09 f0       	breq	.+2      	; 0x21ee <__stack+0xef>
    21ec:	5c c0       	rjmp	.+184    	; 0x22a6 <__stack+0x1a7>
    21ee:	21 c0       	rjmp	.+66     	; 0x2232 <__stack+0x133>
    21f0:	f8 01       	movw	r30, r16
    21f2:	80 81       	ld	r24, Z
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	0e 5f       	subi	r16, 0xFE	; 254
    21f8:	1f 4f       	sbci	r17, 0xFF	; 255
    21fa:	42 01       	movw	r8, r4
    21fc:	71 e0       	ldi	r23, 0x01	; 1
    21fe:	a7 2e       	mov	r10, r23
    2200:	b1 2c       	mov	r11, r1
    2202:	15 c0       	rjmp	.+42     	; 0x222e <__stack+0x12f>
    2204:	62 e0       	ldi	r22, 0x02	; 2
    2206:	66 2e       	mov	r6, r22
    2208:	71 2c       	mov	r7, r1
    220a:	60 0e       	add	r6, r16
    220c:	71 1e       	adc	r7, r17
    220e:	f8 01       	movw	r30, r16
    2210:	80 80       	ld	r8, Z
    2212:	91 80       	ldd	r9, Z+1	; 0x01
    2214:	26 ff       	sbrs	r18, 6
    2216:	03 c0       	rjmp	.+6      	; 0x221e <__stack+0x11f>
    2218:	6e 2d       	mov	r22, r14
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <__stack+0x123>
    221e:	6f ef       	ldi	r22, 0xFF	; 255
    2220:	7f ef       	ldi	r23, 0xFF	; 255
    2222:	c4 01       	movw	r24, r8
    2224:	2c 87       	std	Y+12, r18	; 0x0c
    2226:	59 d1       	rcall	.+690    	; 0x24da <strnlen>
    2228:	5c 01       	movw	r10, r24
    222a:	83 01       	movw	r16, r6
    222c:	2c 85       	ldd	r18, Y+12	; 0x0c
    222e:	2f 77       	andi	r18, 0x7F	; 127
    2230:	16 c0       	rjmp	.+44     	; 0x225e <__stack+0x15f>
    2232:	52 e0       	ldi	r21, 0x02	; 2
    2234:	65 2e       	mov	r6, r21
    2236:	71 2c       	mov	r7, r1
    2238:	60 0e       	add	r6, r16
    223a:	71 1e       	adc	r7, r17
    223c:	f8 01       	movw	r30, r16
    223e:	80 80       	ld	r8, Z
    2240:	91 80       	ldd	r9, Z+1	; 0x01
    2242:	26 ff       	sbrs	r18, 6
    2244:	03 c0       	rjmp	.+6      	; 0x224c <__stack+0x14d>
    2246:	6e 2d       	mov	r22, r14
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <__stack+0x151>
    224c:	6f ef       	ldi	r22, 0xFF	; 255
    224e:	7f ef       	ldi	r23, 0xFF	; 255
    2250:	c4 01       	movw	r24, r8
    2252:	2c 87       	std	Y+12, r18	; 0x0c
    2254:	37 d1       	rcall	.+622    	; 0x24c4 <strnlen_P>
    2256:	5c 01       	movw	r10, r24
    2258:	2c 85       	ldd	r18, Y+12	; 0x0c
    225a:	20 68       	ori	r18, 0x80	; 128
    225c:	83 01       	movw	r16, r6
    225e:	23 fd       	sbrc	r18, 3
    2260:	1e c0       	rjmp	.+60     	; 0x229e <__stack+0x19f>
    2262:	07 c0       	rjmp	.+14     	; 0x2272 <__stack+0x173>
    2264:	80 e2       	ldi	r24, 0x20	; 32
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	b6 01       	movw	r22, r12
    226a:	2c 87       	std	Y+12, r18	; 0x0c
    226c:	a2 de       	rcall	.-700    	; 0x1fb2 <fputc>
    226e:	fa 94       	dec	r15
    2270:	2c 85       	ldd	r18, Y+12	; 0x0c
    2272:	8f 2d       	mov	r24, r15
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	a8 16       	cp	r10, r24
    2278:	b9 06       	cpc	r11, r25
    227a:	a0 f3       	brcs	.-24     	; 0x2264 <__stack+0x165>
    227c:	10 c0       	rjmp	.+32     	; 0x229e <__stack+0x19f>
    227e:	f4 01       	movw	r30, r8
    2280:	27 fd       	sbrc	r18, 7
    2282:	85 91       	lpm	r24, Z+
    2284:	27 ff       	sbrs	r18, 7
    2286:	81 91       	ld	r24, Z+
    2288:	4f 01       	movw	r8, r30
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	b6 01       	movw	r22, r12
    228e:	2c 87       	std	Y+12, r18	; 0x0c
    2290:	90 de       	rcall	.-736    	; 0x1fb2 <fputc>
    2292:	2c 85       	ldd	r18, Y+12	; 0x0c
    2294:	f1 10       	cpse	r15, r1
    2296:	fa 94       	dec	r15
    2298:	08 94       	sec
    229a:	a1 08       	sbc	r10, r1
    229c:	b1 08       	sbc	r11, r1
    229e:	a1 14       	cp	r10, r1
    22a0:	b1 04       	cpc	r11, r1
    22a2:	69 f7       	brne	.-38     	; 0x227e <__stack+0x17f>
    22a4:	e9 c0       	rjmp	.+466    	; 0x2478 <__stack+0x379>
    22a6:	84 36       	cpi	r24, 0x64	; 100
    22a8:	11 f0       	breq	.+4      	; 0x22ae <__stack+0x1af>
    22aa:	89 36       	cpi	r24, 0x69	; 105
    22ac:	41 f5       	brne	.+80     	; 0x22fe <__stack+0x1ff>
    22ae:	27 ff       	sbrs	r18, 7
    22b0:	08 c0       	rjmp	.+16     	; 0x22c2 <__stack+0x1c3>
    22b2:	f8 01       	movw	r30, r16
    22b4:	60 81       	ld	r22, Z
    22b6:	71 81       	ldd	r23, Z+1	; 0x01
    22b8:	82 81       	ldd	r24, Z+2	; 0x02
    22ba:	93 81       	ldd	r25, Z+3	; 0x03
    22bc:	0c 5f       	subi	r16, 0xFC	; 252
    22be:	1f 4f       	sbci	r17, 0xFF	; 255
    22c0:	09 c0       	rjmp	.+18     	; 0x22d4 <__stack+0x1d5>
    22c2:	f8 01       	movw	r30, r16
    22c4:	60 81       	ld	r22, Z
    22c6:	71 81       	ldd	r23, Z+1	; 0x01
    22c8:	88 27       	eor	r24, r24
    22ca:	77 fd       	sbrc	r23, 7
    22cc:	80 95       	com	r24
    22ce:	98 2f       	mov	r25, r24
    22d0:	0e 5f       	subi	r16, 0xFE	; 254
    22d2:	1f 4f       	sbci	r17, 0xFF	; 255
    22d4:	4f e6       	ldi	r20, 0x6F	; 111
    22d6:	b4 2e       	mov	r11, r20
    22d8:	b2 22       	and	r11, r18
    22da:	97 ff       	sbrs	r25, 7
    22dc:	09 c0       	rjmp	.+18     	; 0x22f0 <__stack+0x1f1>
    22de:	90 95       	com	r25
    22e0:	80 95       	com	r24
    22e2:	70 95       	com	r23
    22e4:	61 95       	neg	r22
    22e6:	7f 4f       	sbci	r23, 0xFF	; 255
    22e8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ea:	9f 4f       	sbci	r25, 0xFF	; 255
    22ec:	f0 e8       	ldi	r31, 0x80	; 128
    22ee:	bf 2a       	or	r11, r31
    22f0:	a2 01       	movw	r20, r4
    22f2:	2a e0       	ldi	r18, 0x0A	; 10
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	fc d0       	rcall	.+504    	; 0x24f0 <__ultoa_invert>
    22f8:	78 2e       	mov	r7, r24
    22fa:	74 18       	sub	r7, r4
    22fc:	44 c0       	rjmp	.+136    	; 0x2386 <__stack+0x287>
    22fe:	85 37       	cpi	r24, 0x75	; 117
    2300:	31 f4       	brne	.+12     	; 0x230e <__stack+0x20f>
    2302:	3f ee       	ldi	r19, 0xEF	; 239
    2304:	b3 2e       	mov	r11, r19
    2306:	b2 22       	and	r11, r18
    2308:	2a e0       	ldi	r18, 0x0A	; 10
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	25 c0       	rjmp	.+74     	; 0x2358 <__stack+0x259>
    230e:	99 ef       	ldi	r25, 0xF9	; 249
    2310:	b9 2e       	mov	r11, r25
    2312:	b2 22       	and	r11, r18
    2314:	8f 36       	cpi	r24, 0x6F	; 111
    2316:	c1 f0       	breq	.+48     	; 0x2348 <__stack+0x249>
    2318:	80 37       	cpi	r24, 0x70	; 112
    231a:	20 f4       	brcc	.+8      	; 0x2324 <__stack+0x225>
    231c:	88 35       	cpi	r24, 0x58	; 88
    231e:	09 f0       	breq	.+2      	; 0x2322 <__stack+0x223>
    2320:	ae c0       	rjmp	.+348    	; 0x247e <__stack+0x37f>
    2322:	0d c0       	rjmp	.+26     	; 0x233e <__stack+0x23f>
    2324:	80 37       	cpi	r24, 0x70	; 112
    2326:	21 f0       	breq	.+8      	; 0x2330 <__stack+0x231>
    2328:	88 37       	cpi	r24, 0x78	; 120
    232a:	09 f0       	breq	.+2      	; 0x232e <__stack+0x22f>
    232c:	a8 c0       	rjmp	.+336    	; 0x247e <__stack+0x37f>
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <__stack+0x235>
    2330:	20 e1       	ldi	r18, 0x10	; 16
    2332:	b2 2a       	or	r11, r18
    2334:	b4 fe       	sbrs	r11, 4
    2336:	0b c0       	rjmp	.+22     	; 0x234e <__stack+0x24f>
    2338:	84 e0       	ldi	r24, 0x04	; 4
    233a:	b8 2a       	or	r11, r24
    233c:	08 c0       	rjmp	.+16     	; 0x234e <__stack+0x24f>
    233e:	b4 fe       	sbrs	r11, 4
    2340:	09 c0       	rjmp	.+18     	; 0x2354 <__stack+0x255>
    2342:	e6 e0       	ldi	r30, 0x06	; 6
    2344:	be 2a       	or	r11, r30
    2346:	06 c0       	rjmp	.+12     	; 0x2354 <__stack+0x255>
    2348:	28 e0       	ldi	r18, 0x08	; 8
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	05 c0       	rjmp	.+10     	; 0x2358 <__stack+0x259>
    234e:	20 e1       	ldi	r18, 0x10	; 16
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <__stack+0x259>
    2354:	20 e1       	ldi	r18, 0x10	; 16
    2356:	32 e0       	ldi	r19, 0x02	; 2
    2358:	b7 fe       	sbrs	r11, 7
    235a:	08 c0       	rjmp	.+16     	; 0x236c <__stack+0x26d>
    235c:	f8 01       	movw	r30, r16
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	93 81       	ldd	r25, Z+3	; 0x03
    2366:	0c 5f       	subi	r16, 0xFC	; 252
    2368:	1f 4f       	sbci	r17, 0xFF	; 255
    236a:	07 c0       	rjmp	.+14     	; 0x237a <__stack+0x27b>
    236c:	f8 01       	movw	r30, r16
    236e:	60 81       	ld	r22, Z
    2370:	71 81       	ldd	r23, Z+1	; 0x01
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	0e 5f       	subi	r16, 0xFE	; 254
    2378:	1f 4f       	sbci	r17, 0xFF	; 255
    237a:	a2 01       	movw	r20, r4
    237c:	b9 d0       	rcall	.+370    	; 0x24f0 <__ultoa_invert>
    237e:	78 2e       	mov	r7, r24
    2380:	74 18       	sub	r7, r4
    2382:	ff e7       	ldi	r31, 0x7F	; 127
    2384:	bf 22       	and	r11, r31
    2386:	b6 fe       	sbrs	r11, 6
    2388:	0b c0       	rjmp	.+22     	; 0x23a0 <__stack+0x2a1>
    238a:	2e ef       	ldi	r18, 0xFE	; 254
    238c:	b2 22       	and	r11, r18
    238e:	7e 14       	cp	r7, r14
    2390:	38 f4       	brcc	.+14     	; 0x23a0 <__stack+0x2a1>
    2392:	b4 fe       	sbrs	r11, 4
    2394:	07 c0       	rjmp	.+14     	; 0x23a4 <__stack+0x2a5>
    2396:	b2 fc       	sbrc	r11, 2
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <__stack+0x2a5>
    239a:	8f ee       	ldi	r24, 0xEF	; 239
    239c:	b8 22       	and	r11, r24
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <__stack+0x2a5>
    23a0:	a7 2c       	mov	r10, r7
    23a2:	01 c0       	rjmp	.+2      	; 0x23a6 <__stack+0x2a7>
    23a4:	ae 2c       	mov	r10, r14
    23a6:	8b 2d       	mov	r24, r11
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	b4 fe       	sbrs	r11, 4
    23ac:	0d c0       	rjmp	.+26     	; 0x23c8 <__stack+0x2c9>
    23ae:	fe 01       	movw	r30, r28
    23b0:	e7 0d       	add	r30, r7
    23b2:	f1 1d       	adc	r31, r1
    23b4:	20 81       	ld	r18, Z
    23b6:	20 33       	cpi	r18, 0x30	; 48
    23b8:	19 f4       	brne	.+6      	; 0x23c0 <__stack+0x2c1>
    23ba:	e9 ee       	ldi	r30, 0xE9	; 233
    23bc:	be 22       	and	r11, r30
    23be:	09 c0       	rjmp	.+18     	; 0x23d2 <__stack+0x2d3>
    23c0:	a3 94       	inc	r10
    23c2:	b2 fe       	sbrs	r11, 2
    23c4:	06 c0       	rjmp	.+12     	; 0x23d2 <__stack+0x2d3>
    23c6:	04 c0       	rjmp	.+8      	; 0x23d0 <__stack+0x2d1>
    23c8:	86 78       	andi	r24, 0x86	; 134
    23ca:	90 70       	andi	r25, 0x00	; 0
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <__stack+0x2d3>
    23d0:	a3 94       	inc	r10
    23d2:	8b 2c       	mov	r8, r11
    23d4:	99 24       	eor	r9, r9
    23d6:	b3 fc       	sbrc	r11, 3
    23d8:	13 c0       	rjmp	.+38     	; 0x2400 <__stack+0x301>
    23da:	b0 fe       	sbrs	r11, 0
    23dc:	0e c0       	rjmp	.+28     	; 0x23fa <__stack+0x2fb>
    23de:	af 14       	cp	r10, r15
    23e0:	28 f4       	brcc	.+10     	; 0x23ec <__stack+0x2ed>
    23e2:	e7 2c       	mov	r14, r7
    23e4:	ef 0c       	add	r14, r15
    23e6:	ea 18       	sub	r14, r10
    23e8:	af 2c       	mov	r10, r15
    23ea:	07 c0       	rjmp	.+14     	; 0x23fa <__stack+0x2fb>
    23ec:	e7 2c       	mov	r14, r7
    23ee:	05 c0       	rjmp	.+10     	; 0x23fa <__stack+0x2fb>
    23f0:	80 e2       	ldi	r24, 0x20	; 32
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	b6 01       	movw	r22, r12
    23f6:	dd dd       	rcall	.-1094   	; 0x1fb2 <fputc>
    23f8:	a3 94       	inc	r10
    23fa:	af 14       	cp	r10, r15
    23fc:	c8 f3       	brcs	.-14     	; 0x23f0 <__stack+0x2f1>
    23fe:	04 c0       	rjmp	.+8      	; 0x2408 <__stack+0x309>
    2400:	af 14       	cp	r10, r15
    2402:	10 f4       	brcc	.+4      	; 0x2408 <__stack+0x309>
    2404:	fa 18       	sub	r15, r10
    2406:	01 c0       	rjmp	.+2      	; 0x240a <__stack+0x30b>
    2408:	ff 24       	eor	r15, r15
    240a:	84 fe       	sbrs	r8, 4
    240c:	0e c0       	rjmp	.+28     	; 0x242a <__stack+0x32b>
    240e:	80 e3       	ldi	r24, 0x30	; 48
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	b6 01       	movw	r22, r12
    2414:	ce dd       	rcall	.-1124   	; 0x1fb2 <fputc>
    2416:	82 fe       	sbrs	r8, 2
    2418:	1d c0       	rjmp	.+58     	; 0x2454 <__stack+0x355>
    241a:	81 fe       	sbrs	r8, 1
    241c:	03 c0       	rjmp	.+6      	; 0x2424 <__stack+0x325>
    241e:	88 e5       	ldi	r24, 0x58	; 88
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	10 c0       	rjmp	.+32     	; 0x2444 <__stack+0x345>
    2424:	88 e7       	ldi	r24, 0x78	; 120
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	0d c0       	rjmp	.+26     	; 0x2444 <__stack+0x345>
    242a:	c4 01       	movw	r24, r8
    242c:	86 78       	andi	r24, 0x86	; 134
    242e:	90 70       	andi	r25, 0x00	; 0
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	81 f0       	breq	.+32     	; 0x2454 <__stack+0x355>
    2434:	81 fc       	sbrc	r8, 1
    2436:	02 c0       	rjmp	.+4      	; 0x243c <__stack+0x33d>
    2438:	80 e2       	ldi	r24, 0x20	; 32
    243a:	01 c0       	rjmp	.+2      	; 0x243e <__stack+0x33f>
    243c:	8b e2       	ldi	r24, 0x2B	; 43
    243e:	b7 fc       	sbrc	r11, 7
    2440:	8d e2       	ldi	r24, 0x2D	; 45
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	b6 01       	movw	r22, r12
    2446:	b5 dd       	rcall	.-1174   	; 0x1fb2 <fputc>
    2448:	05 c0       	rjmp	.+10     	; 0x2454 <__stack+0x355>
    244a:	80 e3       	ldi	r24, 0x30	; 48
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	b6 01       	movw	r22, r12
    2450:	b0 dd       	rcall	.-1184   	; 0x1fb2 <fputc>
    2452:	ea 94       	dec	r14
    2454:	7e 14       	cp	r7, r14
    2456:	c8 f3       	brcs	.-14     	; 0x244a <__stack+0x34b>
    2458:	7a 94       	dec	r7
    245a:	f2 01       	movw	r30, r4
    245c:	e7 0d       	add	r30, r7
    245e:	f1 1d       	adc	r31, r1
    2460:	80 81       	ld	r24, Z
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	b6 01       	movw	r22, r12
    2466:	a5 dd       	rcall	.-1206   	; 0x1fb2 <fputc>
    2468:	77 20       	and	r7, r7
    246a:	b1 f7       	brne	.-20     	; 0x2458 <__stack+0x359>
    246c:	05 c0       	rjmp	.+10     	; 0x2478 <__stack+0x379>
    246e:	80 e2       	ldi	r24, 0x20	; 32
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	b6 01       	movw	r22, r12
    2474:	9e dd       	rcall	.-1220   	; 0x1fb2 <fputc>
    2476:	fa 94       	dec	r15
    2478:	ff 20       	and	r15, r15
    247a:	c9 f7       	brne	.-14     	; 0x246e <__stack+0x36f>
    247c:	44 ce       	rjmp	.-888    	; 0x2106 <__stack+0x7>
    247e:	f6 01       	movw	r30, r12
    2480:	26 81       	ldd	r18, Z+6	; 0x06
    2482:	37 81       	ldd	r19, Z+7	; 0x07
    2484:	02 c0       	rjmp	.+4      	; 0x248a <__stack+0x38b>
    2486:	2f ef       	ldi	r18, 0xFF	; 255
    2488:	3f ef       	ldi	r19, 0xFF	; 255
    248a:	c9 01       	movw	r24, r18
    248c:	2c 96       	adiw	r28, 0x0c	; 12
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	1f 91       	pop	r17
    249e:	0f 91       	pop	r16
    24a0:	ff 90       	pop	r15
    24a2:	ef 90       	pop	r14
    24a4:	df 90       	pop	r13
    24a6:	cf 90       	pop	r12
    24a8:	bf 90       	pop	r11
    24aa:	af 90       	pop	r10
    24ac:	9f 90       	pop	r9
    24ae:	8f 90       	pop	r8
    24b0:	7f 90       	pop	r7
    24b2:	6f 90       	pop	r6
    24b4:	5f 90       	pop	r5
    24b6:	4f 90       	pop	r4
    24b8:	3f 90       	pop	r3
    24ba:	2f 90       	pop	r2
    24bc:	08 95       	ret

000024be <__ctype_isfalse>:
    24be:	99 27       	eor	r25, r25
    24c0:	88 27       	eor	r24, r24

000024c2 <__ctype_istrue>:
    24c2:	08 95       	ret

000024c4 <strnlen_P>:
    24c4:	fc 01       	movw	r30, r24
    24c6:	05 90       	lpm	r0, Z+
    24c8:	61 50       	subi	r22, 0x01	; 1
    24ca:	70 40       	sbci	r23, 0x00	; 0
    24cc:	01 10       	cpse	r0, r1
    24ce:	d8 f7       	brcc	.-10     	; 0x24c6 <strnlen_P+0x2>
    24d0:	80 95       	com	r24
    24d2:	90 95       	com	r25
    24d4:	8e 0f       	add	r24, r30
    24d6:	9f 1f       	adc	r25, r31
    24d8:	08 95       	ret

000024da <strnlen>:
    24da:	fc 01       	movw	r30, r24
    24dc:	61 50       	subi	r22, 0x01	; 1
    24de:	70 40       	sbci	r23, 0x00	; 0
    24e0:	01 90       	ld	r0, Z+
    24e2:	01 10       	cpse	r0, r1
    24e4:	d8 f7       	brcc	.-10     	; 0x24dc <strnlen+0x2>
    24e6:	80 95       	com	r24
    24e8:	90 95       	com	r25
    24ea:	8e 0f       	add	r24, r30
    24ec:	9f 1f       	adc	r25, r31
    24ee:	08 95       	ret

000024f0 <__ultoa_invert>:
    24f0:	fa 01       	movw	r30, r20
    24f2:	aa 27       	eor	r26, r26
    24f4:	28 30       	cpi	r18, 0x08	; 8
    24f6:	51 f1       	breq	.+84     	; 0x254c <__ultoa_invert+0x5c>
    24f8:	20 31       	cpi	r18, 0x10	; 16
    24fa:	81 f1       	breq	.+96     	; 0x255c <__ultoa_invert+0x6c>
    24fc:	e8 94       	clt
    24fe:	6f 93       	push	r22
    2500:	6e 7f       	andi	r22, 0xFE	; 254
    2502:	6e 5f       	subi	r22, 0xFE	; 254
    2504:	7f 4f       	sbci	r23, 0xFF	; 255
    2506:	8f 4f       	sbci	r24, 0xFF	; 255
    2508:	9f 4f       	sbci	r25, 0xFF	; 255
    250a:	af 4f       	sbci	r26, 0xFF	; 255
    250c:	b1 e0       	ldi	r27, 0x01	; 1
    250e:	3e d0       	rcall	.+124    	; 0x258c <__ultoa_invert+0x9c>
    2510:	b4 e0       	ldi	r27, 0x04	; 4
    2512:	3c d0       	rcall	.+120    	; 0x258c <__ultoa_invert+0x9c>
    2514:	67 0f       	add	r22, r23
    2516:	78 1f       	adc	r23, r24
    2518:	89 1f       	adc	r24, r25
    251a:	9a 1f       	adc	r25, r26
    251c:	a1 1d       	adc	r26, r1
    251e:	68 0f       	add	r22, r24
    2520:	79 1f       	adc	r23, r25
    2522:	8a 1f       	adc	r24, r26
    2524:	91 1d       	adc	r25, r1
    2526:	a1 1d       	adc	r26, r1
    2528:	6a 0f       	add	r22, r26
    252a:	71 1d       	adc	r23, r1
    252c:	81 1d       	adc	r24, r1
    252e:	91 1d       	adc	r25, r1
    2530:	a1 1d       	adc	r26, r1
    2532:	20 d0       	rcall	.+64     	; 0x2574 <__ultoa_invert+0x84>
    2534:	09 f4       	brne	.+2      	; 0x2538 <__ultoa_invert+0x48>
    2536:	68 94       	set
    2538:	3f 91       	pop	r19
    253a:	2a e0       	ldi	r18, 0x0A	; 10
    253c:	26 9f       	mul	r18, r22
    253e:	11 24       	eor	r1, r1
    2540:	30 19       	sub	r19, r0
    2542:	30 5d       	subi	r19, 0xD0	; 208
    2544:	31 93       	st	Z+, r19
    2546:	de f6       	brtc	.-74     	; 0x24fe <__ultoa_invert+0xe>
    2548:	cf 01       	movw	r24, r30
    254a:	08 95       	ret
    254c:	46 2f       	mov	r20, r22
    254e:	47 70       	andi	r20, 0x07	; 7
    2550:	40 5d       	subi	r20, 0xD0	; 208
    2552:	41 93       	st	Z+, r20
    2554:	b3 e0       	ldi	r27, 0x03	; 3
    2556:	0f d0       	rcall	.+30     	; 0x2576 <__ultoa_invert+0x86>
    2558:	c9 f7       	brne	.-14     	; 0x254c <__ultoa_invert+0x5c>
    255a:	f6 cf       	rjmp	.-20     	; 0x2548 <__ultoa_invert+0x58>
    255c:	46 2f       	mov	r20, r22
    255e:	4f 70       	andi	r20, 0x0F	; 15
    2560:	40 5d       	subi	r20, 0xD0	; 208
    2562:	4a 33       	cpi	r20, 0x3A	; 58
    2564:	18 f0       	brcs	.+6      	; 0x256c <__ultoa_invert+0x7c>
    2566:	49 5d       	subi	r20, 0xD9	; 217
    2568:	31 fd       	sbrc	r19, 1
    256a:	40 52       	subi	r20, 0x20	; 32
    256c:	41 93       	st	Z+, r20
    256e:	02 d0       	rcall	.+4      	; 0x2574 <__ultoa_invert+0x84>
    2570:	a9 f7       	brne	.-22     	; 0x255c <__ultoa_invert+0x6c>
    2572:	ea cf       	rjmp	.-44     	; 0x2548 <__ultoa_invert+0x58>
    2574:	b4 e0       	ldi	r27, 0x04	; 4
    2576:	a6 95       	lsr	r26
    2578:	97 95       	ror	r25
    257a:	87 95       	ror	r24
    257c:	77 95       	ror	r23
    257e:	67 95       	ror	r22
    2580:	ba 95       	dec	r27
    2582:	c9 f7       	brne	.-14     	; 0x2576 <__ultoa_invert+0x86>
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	61 05       	cpc	r22, r1
    2588:	71 05       	cpc	r23, r1
    258a:	08 95       	ret
    258c:	9b 01       	movw	r18, r22
    258e:	ac 01       	movw	r20, r24
    2590:	0a 2e       	mov	r0, r26
    2592:	06 94       	lsr	r0
    2594:	57 95       	ror	r21
    2596:	47 95       	ror	r20
    2598:	37 95       	ror	r19
    259a:	27 95       	ror	r18
    259c:	ba 95       	dec	r27
    259e:	c9 f7       	brne	.-14     	; 0x2592 <__ultoa_invert+0xa2>
    25a0:	62 0f       	add	r22, r18
    25a2:	73 1f       	adc	r23, r19
    25a4:	84 1f       	adc	r24, r20
    25a6:	95 1f       	adc	r25, r21
    25a8:	a0 1d       	adc	r26, r0
    25aa:	08 95       	ret

000025ac <_exit>:
    25ac:	f8 94       	cli

000025ae <__stop_program>:
    25ae:	ff cf       	rjmp	.-2      	; 0x25ae <__stop_program>
