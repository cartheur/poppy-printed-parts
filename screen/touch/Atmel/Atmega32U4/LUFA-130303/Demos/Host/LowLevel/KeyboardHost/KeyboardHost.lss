
KeyboardHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000018ea  0000197e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080011a  0080011a  00001998  2**0
                  ALLOC
  3 .stab         000021a8  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7e  00000000  00000000  00003b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000348  00000000  00000000  000048be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000836  00000000  00000000  00004c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004ede  00000000  00000000  0000543c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016bc  00000000  00000000  0000a31a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000044d5  00000000  00000000  0000b9d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004f0  00000000  00000000  0000feac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002546  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002cd8  00000000  00000000  000128e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000009d9  00000000  00000000  000155ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000418  00000000  00000000  00015f93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	47 c1       	rjmp	.+654    	; 0x290 <__ctors_end>
       2:	00 00       	nop
       4:	63 c1       	rjmp	.+710    	; 0x2cc <__bad_interrupt>
       6:	00 00       	nop
       8:	61 c1       	rjmp	.+706    	; 0x2cc <__bad_interrupt>
       a:	00 00       	nop
       c:	5f c1       	rjmp	.+702    	; 0x2cc <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c1       	rjmp	.+698    	; 0x2cc <__bad_interrupt>
      12:	00 00       	nop
      14:	5b c1       	rjmp	.+694    	; 0x2cc <__bad_interrupt>
      16:	00 00       	nop
      18:	59 c1       	rjmp	.+690    	; 0x2cc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	57 c1       	rjmp	.+686    	; 0x2cc <__bad_interrupt>
      1e:	00 00       	nop
      20:	55 c1       	rjmp	.+682    	; 0x2cc <__bad_interrupt>
      22:	00 00       	nop
      24:	53 c1       	rjmp	.+678    	; 0x2cc <__bad_interrupt>
      26:	00 00       	nop
      28:	a3 c6       	rjmp	.+3398   	; 0xd70 <__vector_10>
      2a:	00 00       	nop
      2c:	4f c1       	rjmp	.+670    	; 0x2cc <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c1       	rjmp	.+666    	; 0x2cc <__bad_interrupt>
      32:	00 00       	nop
      34:	4b c1       	rjmp	.+662    	; 0x2cc <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c1       	rjmp	.+658    	; 0x2cc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	47 c1       	rjmp	.+654    	; 0x2cc <__bad_interrupt>
      3e:	00 00       	nop
      40:	45 c1       	rjmp	.+650    	; 0x2cc <__bad_interrupt>
      42:	00 00       	nop
      44:	43 c1       	rjmp	.+646    	; 0x2cc <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c1       	rjmp	.+642    	; 0x2cc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3f c1       	rjmp	.+638    	; 0x2cc <__bad_interrupt>
      4e:	00 00       	nop
      50:	3d c1       	rjmp	.+634    	; 0x2cc <__bad_interrupt>
      52:	00 00       	nop
      54:	3b c1       	rjmp	.+630    	; 0x2cc <__bad_interrupt>
      56:	00 00       	nop
      58:	39 c1       	rjmp	.+626    	; 0x2cc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	37 c1       	rjmp	.+622    	; 0x2cc <__bad_interrupt>
      5e:	00 00       	nop
      60:	35 c1       	rjmp	.+618    	; 0x2cc <__bad_interrupt>
      62:	00 00       	nop
      64:	33 c1       	rjmp	.+614    	; 0x2cc <__bad_interrupt>
      66:	00 00       	nop
      68:	31 c1       	rjmp	.+610    	; 0x2cc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2f c1       	rjmp	.+606    	; 0x2cc <__bad_interrupt>
      6e:	00 00       	nop
      70:	2d c1       	rjmp	.+602    	; 0x2cc <__bad_interrupt>
      72:	00 00       	nop
      74:	2b c1       	rjmp	.+598    	; 0x2cc <__bad_interrupt>
      76:	00 00       	nop
      78:	29 c1       	rjmp	.+594    	; 0x2cc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	27 c1       	rjmp	.+590    	; 0x2cc <__bad_interrupt>
      7e:	00 00       	nop
      80:	25 c1       	rjmp	.+586    	; 0x2cc <__bad_interrupt>
      82:	00 00       	nop
      84:	23 c1       	rjmp	.+582    	; 0x2cc <__bad_interrupt>
      86:	00 00       	nop
      88:	21 c1       	rjmp	.+578    	; 0x2cc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1f c1       	rjmp	.+574    	; 0x2cc <__bad_interrupt>
      8e:	00 00       	nop
      90:	1d c1       	rjmp	.+570    	; 0x2cc <__bad_interrupt>
      92:	00 00       	nop
      94:	1b c1       	rjmp	.+566    	; 0x2cc <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4293>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4286>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4281>:
     11d:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4279>:
     134:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     144:	6f 72 20 28 53 65 74 20 50 72 6f 74 6f 63 6f 6c     or (Set Protocol
     154:	29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f     )... -- Error Co
     164:	64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00           de: %d...[37m.

00000172 <__c.4276>:
     172:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     182:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     192:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1a2:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1b2:	37 6d 00                                            7m.

000001b5 <__c.4274>:
     1b5:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1c5:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001cf <__c.4272>:
     1cf:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1df:	69 63 65 2e 0d 0a 00                                ice....

000001e6 <__c.4270>:
     1e6:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1f6:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     206:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000210 <__c.4267>:
     210:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     220:	61 74 61 2e 0d 0a 00                                ata....

00000227 <__c.4262>:
     227:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     237:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000246 <__c.4257>:
     246:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     256:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000263 <__c.4248>:
     263:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 49     .[36mKeyboard HI
     273:	44 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     D Host Demo runn
     283:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

00000290 <__ctors_end>:
     290:	11 24       	eor	r1, r1
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	d0 e2       	ldi	r29, 0x20	; 32
     298:	de bf       	out	0x3e, r29	; 62
     29a:	cd bf       	out	0x3d, r28	; 61

0000029c <__do_copy_data>:
     29c:	11 e0       	ldi	r17, 0x01	; 1
     29e:	a0 e0       	ldi	r26, 0x00	; 0
     2a0:	b1 e0       	ldi	r27, 0x01	; 1
     2a2:	ea ee       	ldi	r30, 0xEA	; 234
     2a4:	f8 e1       	ldi	r31, 0x18	; 24
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	0b bf       	out	0x3b, r16	; 59
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__do_copy_data+0x14>
     2ac:	07 90       	elpm	r0, Z+
     2ae:	0d 92       	st	X+, r0
     2b0:	aa 31       	cpi	r26, 0x1A	; 26
     2b2:	b1 07       	cpc	r27, r17
     2b4:	d9 f7       	brne	.-10     	; 0x2ac <__do_copy_data+0x10>

000002b6 <__do_clear_bss>:
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	aa e1       	ldi	r26, 0x1A	; 26
     2ba:	b1 e0       	ldi	r27, 0x01	; 1
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <.do_clear_bss_start>

000002be <.do_clear_bss_loop>:
     2be:	1d 92       	st	X+, r1

000002c0 <.do_clear_bss_start>:
     2c0:	ac 33       	cpi	r26, 0x3C	; 60
     2c2:	b1 07       	cpc	r27, r17
     2c4:	e1 f7       	brne	.-8      	; 0x2be <.do_clear_bss_loop>
     2c6:	58 d1       	rcall	.+688    	; 0x578 <main>
     2c8:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <_exit>

000002cc <__bad_interrupt>:
     2cc:	99 ce       	rjmp	.-718    	; 0x0 <__vectors>

000002ce <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2ce:	9b b1       	in	r25, 0x0b	; 11
     2d0:	9f 70       	andi	r25, 0x0F	; 15
     2d2:	98 2b       	or	r25, r24
     2d4:	9b b9       	out	0x0b, r25	; 11
			}
     2d6:	08 95       	ret

000002d8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2d8:	84 b7       	in	r24, 0x34	; 52
     2da:	87 7f       	andi	r24, 0xF7	; 247
     2dc:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2de:	28 e1       	ldi	r18, 0x18	; 24
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	20 93 60 00 	sts	0x0060, r18
     2e8:	10 92 60 00 	sts	0x0060, r1
     2ec:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	80 e8       	ldi	r24, 0x80	; 128
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	80 93 61 00 	sts	0x0061, r24
     2fa:	90 93 61 00 	sts	0x0061, r25
     2fe:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     300:	83 e3       	ldi	r24, 0x33	; 51
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	90 93 cd 00 	sts	0x00CD, r25
     308:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     30c:	86 e0       	ldi	r24, 0x06	; 6
     30e:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     312:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     316:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     31a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     31c:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     31e:	8a b1       	in	r24, 0x0a	; 10
     320:	80 6f       	ori	r24, 0xF0	; 240
     322:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     324:	8b b1       	in	r24, 0x0b	; 11
     326:	8f 70       	andi	r24, 0x0F	; 15
     328:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     32a:	07 d5       	rcall	.+2574   	; 0xd3a <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
}
     330:	c3 c7       	rjmp	.+3974   	; 0x12b8 <Serial_CreateStream>

00000332 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     332:	86 e4       	ldi	r24, 0x46	; 70
     334:	92 e0       	ldi	r25, 0x02	; 2
     336:	0e 94 c4 09 	call	0x1388	; 0x1388 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     33a:	80 ea       	ldi	r24, 0xA0	; 160
}
     33c:	c8 cf       	rjmp	.-112    	; 0x2ce <LEDs_SetAllLEDs>

0000033e <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     33e:	87 e2       	ldi	r24, 0x27	; 39
     340:	92 e0       	ldi	r25, 0x02	; 2
     342:	0e 94 c4 09 	call	0x1388	; 0x1388 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     346:	80 e1       	ldi	r24, 0x10	; 16
}
     348:	c2 cf       	rjmp	.-124    	; 0x2ce <LEDs_SetAllLEDs>

0000034a <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     34a:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     34c:	80 e1       	ldi	r24, 0x10	; 16
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	0e 94 c4 09 	call	0x1388	; 0x1388 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     354:	35 d1       	rcall	.+618    	; 0x5c0 <ProcessConfigurationDescriptor>
     356:	18 2f       	mov	r17, r24
     358:	88 23       	and	r24, r24
     35a:	f9 f0       	breq	.+62     	; 0x39a <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
	{
		if (ErrorCode == ControlError)
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	19 f4       	brne	.+6      	; 0x366 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     360:	86 ee       	ldi	r24, 0xE6	; 230
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	02 c0       	rjmp	.+4      	; 0x36a <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     366:	8f ec       	ldi	r24, 0xCF	; 207
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	0e 94 c4 09 	call	0x1388	; 0x1388 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     36e:	00 d0       	rcall	.+0      	; 0x370 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     370:	00 d0       	rcall	.+0      	; 0x372 <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     372:	ed b7       	in	r30, 0x3d	; 61
     374:	fe b7       	in	r31, 0x3e	; 62
     376:	31 96       	adiw	r30, 0x01	; 1
     378:	25 eb       	ldi	r18, 0xB5	; 181
     37a:	31 e0       	ldi	r19, 0x01	; 1
     37c:	ad b7       	in	r26, 0x3d	; 61
     37e:	be b7       	in	r27, 0x3e	; 62
     380:	12 96       	adiw	r26, 0x02	; 2
     382:	3c 93       	st	X, r19
     384:	2e 93       	st	-X, r18
     386:	11 97       	sbiw	r26, 0x01	; 1
     388:	12 83       	std	Z+2, r17	; 0x02
     38a:	13 82       	std	Z+3, r1	; 0x03
     38c:	de d7       	rcall	.+4028   	; 0x134a <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	80 e9       	ldi	r24, 0x90	; 144
     398:	40 c0       	rjmp	.+128    	; 0x41a <EVENT_USB_Host_DeviceEnumerationComplete+0xd0>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	3f d7       	rcall	.+3710   	; 0x121c <USB_Host_SetDeviceConfiguration>
     39e:	88 23       	and	r24, r24
     3a0:	79 f0       	breq	.+30     	; 0x3c0 <EVENT_USB_Host_DeviceEnumerationComplete+0x76>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
     3a6:	ed b7       	in	r30, 0x3d	; 61
     3a8:	fe b7       	in	r31, 0x3e	; 62
     3aa:	31 96       	adiw	r30, 0x01	; 1
     3ac:	22 e7       	ldi	r18, 0x72	; 114
     3ae:	31 e0       	ldi	r19, 0x01	; 1
     3b0:	ad b7       	in	r26, 0x3d	; 61
     3b2:	be b7       	in	r27, 0x3e	; 62
     3b4:	12 96       	adiw	r26, 0x02	; 2
     3b6:	3c 93       	st	X, r19
     3b8:	2e 93       	st	-X, r18
     3ba:	11 97       	sbiw	r26, 0x01	; 1
     3bc:	82 83       	std	Z+2, r24	; 0x02
     3be:	e5 cf       	rjmp	.-54     	; 0x38a <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* HID class request to set the keyboard protocol to the Boot Protocol */
	USB_ControlRequest = (USB_Request_Header_t)
     3c0:	af e1       	ldi	r26, 0x1F	; 31
     3c2:	b1 e0       	ldi	r27, 0x01	; 1
     3c4:	e0 e0       	ldi	r30, 0x00	; 0
     3c6:	f1 e0       	ldi	r31, 0x01	; 1
     3c8:	88 e0       	ldi	r24, 0x08	; 8
     3ca:	01 90       	ld	r0, Z+
     3cc:	0d 92       	st	X+, r0
     3ce:	81 50       	subi	r24, 0x01	; 1
     3d0:	e1 f7       	brne	.-8      	; 0x3ca <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     3d2:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send the request, display error and wait for device detach if request fails */
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	21 d6       	rcall	.+3138   	; 0x101e <USB_Host_SendControlRequest>
     3dc:	88 23       	and	r24, r24
     3de:	c9 f0       	breq	.+50     	; 0x412 <EVENT_USB_Host_DeviceEnumerationComplete+0xc8>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Protocol).\r\n"
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <EVENT_USB_Host_DeviceEnumerationComplete+0x98>
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x9a>
     3e4:	ed b7       	in	r30, 0x3d	; 61
     3e6:	fe b7       	in	r31, 0x3e	; 62
     3e8:	31 96       	adiw	r30, 0x01	; 1
     3ea:	24 e3       	ldi	r18, 0x34	; 52
     3ec:	31 e0       	ldi	r19, 0x01	; 1
     3ee:	ad b7       	in	r26, 0x3d	; 61
     3f0:	be b7       	in	r27, 0x3e	; 62
     3f2:	12 96       	adiw	r26, 0x02	; 2
     3f4:	3c 93       	st	X, r19
     3f6:	2e 93       	st	-X, r18
     3f8:	11 97       	sbiw	r26, 0x01	; 1
     3fa:	82 83       	std	Z+2, r24	; 0x02
     3fc:	13 82       	std	Z+3, r1	; 0x03
     3fe:	a5 d7       	rcall	.+3914   	; 0x134a <printf_P>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	80 e9       	ldi	r24, 0x90	; 144
     40a:	61 df       	rcall	.-318    	; 0x2ce <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	06 d7       	rcall	.+3596   	; 0x121c <USB_Host_SetDeviceConfiguration>
		return;
     410:	05 c0       	rjmp	.+10     	; 0x41c <EVENT_USB_Host_DeviceEnumerationComplete+0xd2>
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     412:	8d e1       	ldi	r24, 0x1D	; 29
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	b8 d7       	rcall	.+3952   	; 0x1388 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     418:	80 e6       	ldi	r24, 0x60	; 96
     41a:	59 df       	rcall	.-334    	; 0x2ce <LEDs_SetAllLEDs>
}
     41c:	1f 91       	pop	r17
     41e:	08 95       	ret

00000420 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     420:	df 93       	push	r29
     422:	cf 93       	push	r28
     424:	0f 92       	push	r0
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	1e d4       	rcall	.+2108   	; 0xc6a <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     42e:	00 d0       	rcall	.+0      	; 0x430 <EVENT_USB_Host_HostError+0x10>
     430:	00 d0       	rcall	.+0      	; 0x432 <EVENT_USB_Host_HostError+0x12>
     432:	ed b7       	in	r30, 0x3d	; 61
     434:	fe b7       	in	r31, 0x3e	; 62
     436:	31 96       	adiw	r30, 0x01	; 1
     438:	2e ee       	ldi	r18, 0xEE	; 238
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	ad b7       	in	r26, 0x3d	; 61
     43e:	be b7       	in	r27, 0x3e	; 62
     440:	12 96       	adiw	r26, 0x02	; 2
     442:	3c 93       	st	X, r19
     444:	2e 93       	st	-X, r18
     446:	11 97       	sbiw	r26, 0x01	; 1
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	82 83       	std	Z+2, r24	; 0x02
     44c:	13 82       	std	Z+3, r1	; 0x03
     44e:	7d d7       	rcall	.+3834   	; 0x134a <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	80 e9       	ldi	r24, 0x90	; 144
     45a:	39 df       	rcall	.-398    	; 0x2ce <LEDs_SetAllLEDs>
     45c:	ff cf       	rjmp	.-2      	; 0x45c <EVENT_USB_Host_HostError+0x3c>

0000045e <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     45e:	90 91 27 01 	lds	r25, 0x0127
     462:	2d b7       	in	r18, 0x3d	; 61
     464:	3e b7       	in	r19, 0x3e	; 62
     466:	28 50       	subi	r18, 0x08	; 8
     468:	30 40       	sbci	r19, 0x00	; 0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	3e bf       	out	0x3e, r19	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	2d bf       	out	0x3d, r18	; 61
     474:	ed b7       	in	r30, 0x3d	; 61
     476:	fe b7       	in	r31, 0x3e	; 62
     478:	31 96       	adiw	r30, 0x01	; 1
     47a:	28 e9       	ldi	r18, 0x98	; 152
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	ad b7       	in	r26, 0x3d	; 61
     480:	be b7       	in	r27, 0x3e	; 62
     482:	12 96       	adiw	r26, 0x02	; 2
     484:	3c 93       	st	X, r19
     486:	2e 93       	st	-X, r18
     488:	11 97       	sbiw	r26, 0x01	; 1
     48a:	82 83       	std	Z+2, r24	; 0x02
     48c:	13 82       	std	Z+3, r1	; 0x03
     48e:	64 83       	std	Z+4, r22	; 0x04
     490:	15 82       	std	Z+5, r1	; 0x05
     492:	96 83       	std	Z+6, r25	; 0x06
     494:	17 82       	std	Z+7, r1	; 0x07
     496:	59 d7       	rcall	.+3762   	; 0x134a <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     498:	2d b7       	in	r18, 0x3d	; 61
     49a:	3e b7       	in	r19, 0x3e	; 62
     49c:	28 5f       	subi	r18, 0xF8	; 248
     49e:	3f 4f       	sbci	r19, 0xFF	; 255
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	3e bf       	out	0x3e, r19	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	2d bf       	out	0x3d, r18	; 61
     4aa:	80 e9       	ldi	r24, 0x90	; 144
}
     4ac:	10 cf       	rjmp	.-480    	; 0x2ce <LEDs_SetAllLEDs>

000004ae <KeyboardHost_Task>:

/** Task to read in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void KeyboardHost_Task(void)
{
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	28 97       	sbiw	r28, 0x08	; 8
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     4c2:	80 91 27 01 	lds	r24, 0x0127
     4c6:	8b 30       	cpi	r24, 0x0B	; 11
     4c8:	09 f0       	breq	.+2      	; 0x4cc <KeyboardHost_Task+0x1e>
     4ca:	4d c0       	rjmp	.+154    	; 0x566 <KeyboardHost_Task+0xb8>
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     4d2:	80 91 a9 00 	lds	r24, 0x00A9
     4d6:	8f 7b       	andi	r24, 0xBF	; 191
     4d8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     4dc:	80 91 a6 00 	lds	r24, 0x00A6

	/* Unfreeze keyboard data pipe */
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (!(Pipe_IsINReceived()))
     4e0:	80 ff       	sbrs	r24, 0
     4e2:	3c c0       	rjmp	.+120    	; 0x55c <KeyboardHost_Task+0xae>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     4e4:	80 91 a6 00 	lds	r24, 0x00A6

		return;
	}

	/* Ensure pipe contains data before trying to read from it */
	if (Pipe_IsReadWriteAllowed())
     4e8:	85 ff       	sbrs	r24, 5
     4ea:	33 c0       	rjmp	.+102    	; 0x552 <KeyboardHost_Task+0xa4>
	{
		USB_KeyboardReport_Data_t KeyboardReport;

		/* Read in keyboard report data */
		Pipe_Read_Stream_LE(&KeyboardReport, sizeof(KeyboardReport), NULL);
     4ec:	ce 01       	movw	r24, r28
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	68 e0       	ldi	r22, 0x08	; 8
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	a9 d2       	rcall	.+1362   	; 0xa4c <Pipe_Read_Stream_LE>

		/* Indicate if the modifier byte is non-zero (special key such as shift is being pressed) */
		LEDs_ChangeLEDs(LEDS_LED1, (KeyboardReport.Modifier) ? LEDS_LED1 : 0);
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	88 23       	and	r24, r24
     4fe:	11 f0       	breq	.+4      	; 0x504 <KeyboardHost_Task+0x56>
     500:	90 e1       	ldi	r25, 0x10	; 16
     502:	01 c0       	rjmp	.+2      	; 0x506 <KeyboardHost_Task+0x58>
     504:	90 e0       	ldi	r25, 0x00	; 0
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LEDMask,
			                                   const uint8_t ActiveMask)
			{
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
     506:	8b b1       	in	r24, 0x0b	; 11
     508:	8f 7e       	andi	r24, 0xEF	; 239
     50a:	89 2b       	or	r24, r25
     50c:	8b b9       	out	0x0b, r24	; 11

		uint8_t KeyCode = KeyboardReport.KeyCode[0];
     50e:	8b 81       	ldd	r24, Y+3	; 0x03

		/* Check if a key has been pressed */
		if (KeyCode)
     510:	88 23       	and	r24, r24
     512:	f9 f0       	breq	.+62     	; 0x552 <KeyboardHost_Task+0xa4>
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
     514:	90 e2       	ldi	r25, 0x20	; 32
     516:	99 b9       	out	0x09, r25	; 9
			LEDs_ToggleLEDs(LEDS_LED2);

			char PressedKey = 0;

			/* Retrieve pressed key character if alphanumeric */
			if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     518:	98 2f       	mov	r25, r24
     51a:	94 50       	subi	r25, 0x04	; 4
     51c:	9a 31       	cpi	r25, 0x1A	; 26
     51e:	10 f4       	brcc	.+4      	; 0x524 <KeyboardHost_Task+0x76>
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     520:	83 5c       	subi	r24, 0xC3	; 195
     522:	11 c0       	rjmp	.+34     	; 0x546 <KeyboardHost_Task+0x98>
			}
			else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     524:	98 2f       	mov	r25, r24
     526:	9e 51       	subi	r25, 0x1E	; 30
     528:	99 30       	cpi	r25, 0x09	; 9
     52a:	10 f4       	brcc	.+4      	; 0x530 <KeyboardHost_Task+0x82>
					 (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     52c:	8d 5e       	subi	r24, 0xED	; 237
     52e:	0b c0       	rjmp	.+22     	; 0x546 <KeyboardHost_Task+0x98>
			}
			else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     530:	87 32       	cpi	r24, 0x27	; 39
     532:	31 f0       	breq	.+12     	; 0x540 <KeyboardHost_Task+0x92>
			{
				PressedKey = '0';
			}
			else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     534:	8c 32       	cpi	r24, 0x2C	; 44
     536:	31 f0       	breq	.+12     	; 0x544 <KeyboardHost_Task+0x96>
			{
				PressedKey = ' ';
			}
			else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     538:	88 32       	cpi	r24, 0x28	; 40
     53a:	59 f4       	brne	.+22     	; 0x552 <KeyboardHost_Task+0xa4>
			{
				PressedKey = '\n';
     53c:	8a e0       	ldi	r24, 0x0A	; 10
     53e:	03 c0       	rjmp	.+6      	; 0x546 <KeyboardHost_Task+0x98>
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
			}
			else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
			{
				PressedKey = '0';
     540:	80 e3       	ldi	r24, 0x30	; 48
     542:	01 c0       	rjmp	.+2      	; 0x546 <KeyboardHost_Task+0x98>
			}
			else if (KeyCode == HID_KEYBOARD_SC_SPACE)
			{
				PressedKey = ' ';
     544:	80 e2       	ldi	r24, 0x20	; 32
				PressedKey = '\n';
			}

			/* Print the pressed key character out through the serial port if valid */
			if (PressedKey)
			  putchar(PressedKey);
     546:	60 91 38 01 	lds	r22, 0x0138
     54a:	70 91 39 01 	lds	r23, 0x0139
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	d0 d6       	rcall	.+3488   	; 0x12f2 <fputc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     552:	80 91 a6 00 	lds	r24, 0x00A6
     556:	8e 77       	andi	r24, 0x7E	; 126
     558:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     55c:	80 91 a9 00 	lds	r24, 0x00A9
     560:	80 64       	ori	r24, 0x40	; 64
     562:	80 93 a9 00 	sts	0x00A9, r24
	/* Clear the IN endpoint, ready for next data packet */
	Pipe_ClearIN();

	/* Refreeze keyboard data pipe */
	Pipe_Freeze();
}
     566:	28 96       	adiw	r28, 0x08	; 8
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
     572:	cf 91       	pop	r28
     574:	df 91       	pop	r29
     576:	08 95       	ret

00000578 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     578:	af de       	rcall	.-674    	; 0x2d8 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Keyboard HID Host Demo running.\r\n" ESC_FG_WHITE));
     57a:	83 e6       	ldi	r24, 0x63	; 99
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	04 d7       	rcall	.+3592   	; 0x1388 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     580:	80 e1       	ldi	r24, 0x10	; 16
     582:	a5 de       	rcall	.-694    	; 0x2ce <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     584:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		KeyboardHost_Task();
     586:	93 df       	rcall	.-218    	; 0x4ae <KeyboardHost_Task>

		USB_USBTask();
     588:	6e d6       	rcall	.+3292   	; 0x1266 <USB_USBTask>
     58a:	fd cf       	rjmp	.-6      	; 0x586 <main+0xe>

0000058c <DComp_NextKeyboardInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Keyboard HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextKeyboardInterface(void* CurrentDescriptor)
{
     58c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     58e:	81 81       	ldd	r24, Z+1	; 0x01
     590:	84 30       	cpi	r24, 0x04	; 4
     592:	31 f4       	brne	.+12     	; 0x5a0 <DComp_NextKeyboardInterface+0x14>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == HID_CSCP_HIDClass) &&
     594:	85 81       	ldd	r24, Z+5	; 0x05
     596:	83 30       	cpi	r24, 0x03	; 3
     598:	19 f4       	brne	.+6      	; 0x5a0 <DComp_NextKeyboardInterface+0x14>
     59a:	87 81       	ldd	r24, Z+7	; 0x07
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	11 f0       	breq	.+4      	; 0x5a4 <DComp_NextKeyboardInterface+0x18>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	08 95       	ret

		/* Check the HID descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == HID_CSCP_HIDClass) &&
		    (Interface->Protocol == HID_CSCP_KeyboardBootProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     5a4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     5a6:	08 95       	ret

000005a8 <DComp_NextKeyboardInterfaceDataEndpoint>:
 */
uint8_t DComp_NextKeyboardInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     5a8:	fc 01       	movw	r30, r24
     5aa:	81 81       	ldd	r24, Z+1	; 0x01
     5ac:	85 30       	cpi	r24, 0x05	; 5
     5ae:	21 f0       	breq	.+8      	; 0x5b8 <DComp_NextKeyboardInterfaceDataEndpoint+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     5b0:	84 30       	cpi	r24, 0x04	; 4
     5b2:	21 f4       	brne	.+8      	; 0x5bc <DComp_NextKeyboardInterfaceDataEndpoint+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	08 95       	ret
uint8_t DComp_NextKeyboardInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
	  return DESCRIPTOR_SEARCH_Found;
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     5bc:	82 e0       	ldi	r24, 0x02	; 2
}
     5be:	08 95       	ret

000005c0 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint.
 *
 *  \return An error code from the \ref KeyboardHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     5c0:	af 92       	push	r10
     5c2:	bf 92       	push	r11
     5c4:	cf 92       	push	r12
     5c6:	df 92       	push	r13
     5c8:	ef 92       	push	r14
     5ca:	ff 92       	push	r15
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	df 93       	push	r29
     5d2:	cf 93       	push	r28
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	c4 50       	subi	r28, 0x04	; 4
     5da:	d2 40       	sbci	r29, 0x02	; 2
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     5e6:	ae 01       	movw	r20, r28
     5e8:	4b 5f       	subi	r20, 0xFB	; 251
     5ea:	5f 4f       	sbci	r21, 0xFF	; 255
     5ec:	5a 83       	std	Y+2, r21	; 0x02
     5ee:	49 83       	std	Y+1, r20	; 0x01

	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     5f0:	8e 01       	movw	r16, r28
     5f2:	0d 5f       	subi	r16, 0xFD	; 253
     5f4:	1f 4f       	sbci	r17, 0xFF	; 255
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	b8 01       	movw	r22, r16
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	32 e0       	ldi	r19, 0x02	; 2
     5fe:	4b d4       	rcall	.+2198   	; 0xe96 <USB_Host_GetDeviceConfigDescriptor>
     600:	85 30       	cpi	r24, 0x05	; 5
     602:	d9 f1       	breq	.+118    	; 0x67a <ProcessConfigurationDescriptor+0xba>
     604:	86 30       	cpi	r24, 0x06	; 6
     606:	51 f0       	breq	.+20     	; 0x61c <ProcessConfigurationDescriptor+0x5c>
     608:	88 23       	and	r24, r24
     60a:	51 f4       	brne	.+20     	; 0x620 <ProcessConfigurationDescriptor+0x60>
     60c:	cc 24       	eor	r12, r12
     60e:	dd 24       	eor	r13, r13

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     610:	b0 2e       	mov	r11, r16
     612:	a1 2e       	mov	r10, r17
     614:	8e 01       	movw	r16, r28
     616:	0f 5f       	subi	r16, 0xFF	; 255
     618:	1f 4f       	sbci	r17, 0xFF	; 255
     61a:	04 c0       	rjmp	.+8      	; 0x624 <ProcessConfigurationDescriptor+0x64>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     61c:	83 e0       	ldi	r24, 0x03	; 3
     61e:	30 c0       	rjmp	.+96     	; 0x680 <ProcessConfigurationDescriptor+0xc0>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	2e c0       	rjmp	.+92     	; 0x680 <ProcessConfigurationDescriptor+0xc0>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     624:	c1 14       	cp	r12, r1
     626:	d1 04       	cpc	r13, r1
     628:	41 f0       	breq	.+16     	; 0x63a <ProcessConfigurationDescriptor+0x7a>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     62a:	8b 2d       	mov	r24, r11
     62c:	9a 2d       	mov	r25, r10
     62e:	b8 01       	movw	r22, r16
     630:	44 ed       	ldi	r20, 0xD4	; 212
     632:	52 e0       	ldi	r21, 0x02	; 2
     634:	87 d4       	rcall	.+2318   	; 0xf44 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     636:	88 23       	and	r24, r24
     638:	59 f0       	breq	.+22     	; 0x650 <ProcessConfigurationDescriptor+0x90>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextKeyboardInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     63a:	8b 2d       	mov	r24, r11
     63c:	9a 2d       	mov	r25, r10
     63e:	b8 01       	movw	r22, r16
     640:	46 ec       	ldi	r20, 0xC6	; 198
     642:	52 e0       	ldi	r21, 0x02	; 2
     644:	7f d4       	rcall	.+2302   	; 0xf44 <USB_GetNextDescriptorComp>
     646:	88 23       	and	r24, r24
     648:	d1 f4       	brne	.+52     	; 0x67e <ProcessConfigurationDescriptor+0xbe>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     64a:	c9 80       	ldd	r12, Y+1	; 0x01
     64c:	da 80       	ldd	r13, Y+2	; 0x02

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     64e:	ea cf       	rjmp	.-44     	; 0x624 <ProcessConfigurationDescriptor+0x64>
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     650:	e9 80       	ldd	r14, Y+1	; 0x01
     652:	fa 80       	ldd	r15, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     654:	f7 01       	movw	r30, r14
     656:	42 81       	ldd	r20, Z+2	; 0x02
     658:	47 ff       	sbrs	r20, 7
     65a:	e4 cf       	rjmp	.-56     	; 0x624 <ProcessConfigurationDescriptor+0x64>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     65c:	e1 14       	cp	r14, r1
     65e:	f1 04       	cpc	r15, r1
     660:	09 f3       	breq	.-62     	; 0x624 <ProcessConfigurationDescriptor+0x64>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(KEYBOARD_DATA_IN_PIPE, EP_TYPE_INTERRUPT, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     662:	24 81       	ldd	r18, Z+4	; 0x04
     664:	35 81       	ldd	r19, Z+5	; 0x05
     666:	81 e8       	ldi	r24, 0x81	; 129
     668:	63 e0       	ldi	r22, 0x03	; 3
     66a:	01 e0       	ldi	r16, 0x01	; 1
     66c:	52 d2       	rcall	.+1188   	; 0xb12 <Pipe_ConfigurePipe>
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     66e:	f7 01       	movw	r30, r14
     670:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     672:	80 93 ad 00 	sts	0x00AD, r24

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	03 c0       	rjmp	.+6      	; 0x680 <ProcessConfigurationDescriptor+0xc0>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	01 c0       	rjmp	.+2      	; 0x680 <ProcessConfigurationDescriptor+0xc0>
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextKeyboardInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     67e:	84 e0       	ldi	r24, 0x04	; 4
	Pipe_ConfigurePipe(KEYBOARD_DATA_IN_PIPE, EP_TYPE_INTERRUPT, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     680:	cc 5f       	subi	r28, 0xFC	; 252
     682:	dd 4f       	sbci	r29, 0xFD	; 253
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	cf 91       	pop	r28
     690:	df 91       	pop	r29
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	bf 90       	pop	r11
     6a0:	af 90       	pop	r10
     6a2:	08 95       	ret

000006a4 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6a4:	80 91 9e 00 	lds	r24, 0x009E
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	81 70       	andi	r24, 0x01	; 1
     6ac:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     6ae:	20 91 a0 00 	lds	r18, 0x00A0
     6b2:	2d 7f       	andi	r18, 0xFD	; 253
     6b4:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     6b8:	20 91 9e 00 	lds	r18, 0x009E
     6bc:	22 60       	ori	r18, 0x02	; 2
     6be:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6c2:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6c6:	21 fd       	sbrc	r18, 1
     6c8:	fc cf       	rjmp	.-8      	; 0x6c2 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6ca:	20 91 9e 00 	lds	r18, 0x009E
     6ce:	21 60       	ori	r18, 0x01	; 1
     6d0:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     6d4:	10 92 1d 01 	sts	0x011D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6d8:	20 91 a0 00 	lds	r18, 0x00A0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	20 72       	andi	r18, 0x20	; 32
     6e0:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6e2:	40 91 a0 00 	lds	r20, 0x00A0
     6e6:	4f 7d       	andi	r20, 0xDF	; 223
     6e8:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6ec:	40 91 9f 00 	lds	r20, 0x009F
     6f0:	4f 7d       	andi	r20, 0xDF	; 223
     6f2:	40 93 9f 00 	sts	0x009F, r20
     6f6:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6f8:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6fc:	55 ff       	sbrs	r21, 5
     6fe:	0b c0       	rjmp	.+22     	; 0x716 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     700:	40 91 9f 00 	lds	r20, 0x009F
     704:	4f 7d       	andi	r20, 0xDF	; 223
     706:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     70a:	40 91 9f 00 	lds	r20, 0x009F
     70e:	4d 7f       	andi	r20, 0xFD	; 253
     710:	40 93 9f 00 	sts	0x009F, r20
     714:	08 c0       	rjmp	.+16     	; 0x726 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     716:	ef ec       	ldi	r30, 0xCF	; 207
     718:	f7 e0       	ldi	r31, 0x07	; 7
     71a:	31 97       	sbiw	r30, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <USB_Host_ResetDevice+0x76>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <USB_Host_ResetDevice+0x7c>
     720:	00 00       	nop
     722:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     724:	49 f7       	brne	.-46     	; 0x6f8 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     726:	21 15       	cp	r18, r1
     728:	31 05       	cpc	r19, r1
     72a:	29 f0       	breq	.+10     	; 0x736 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     72c:	20 91 a0 00 	lds	r18, 0x00A0
     730:	20 62       	ori	r18, 0x20	; 32
     732:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     736:	00 97       	sbiw	r24, 0x00	; 0
     738:	29 f4       	brne	.+10     	; 0x744 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     73a:	80 91 9e 00 	lds	r24, 0x009E
     73e:	8e 7f       	andi	r24, 0xFE	; 254
     740:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     744:	80 91 a0 00 	lds	r24, 0x00A0
     748:	82 60       	ori	r24, 0x02	; 2
     74a:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     74e:	08 95       	ret

00000750 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     750:	40 91 9e 00 	lds	r20, 0x009E
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	41 70       	andi	r20, 0x01	; 1
     758:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     75a:	20 91 a0 00 	lds	r18, 0x00A0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	20 72       	andi	r18, 0x20	; 32
     762:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     764:	90 91 a0 00 	lds	r25, 0x00A0
     768:	9f 7d       	andi	r25, 0xDF	; 223
     76a:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     76e:	90 91 9f 00 	lds	r25, 0x009F
     772:	9f 7d       	andi	r25, 0xDF	; 223
     774:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     778:	90 91 9e 00 	lds	r25, 0x009E
     77c:	91 60       	ori	r25, 0x01	; 1
     77e:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     782:	26 c0       	rjmp	.+76     	; 0x7d0 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     784:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     788:	95 ff       	sbrs	r25, 5
     78a:	06 c0       	rjmp	.+12     	; 0x798 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     78c:	90 91 9f 00 	lds	r25, 0x009F
     790:	9f 7d       	andi	r25, 0xDF	; 223
     792:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     796:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     798:	90 91 27 01 	lds	r25, 0x0127
     79c:	91 30       	cpi	r25, 0x01	; 1
     79e:	d9 f0       	breq	.+54     	; 0x7d6 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     7a0:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     7a4:	94 ff       	sbrs	r25, 4
     7a6:	09 c0       	rjmp	.+18     	; 0x7ba <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     7a8:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     7ac:	80 91 a6 00 	lds	r24, 0x00A6
     7b0:	8f 7e       	andi	r24, 0xEF	; 239
     7b2:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     7b6:	82 e0       	ldi	r24, 0x02	; 2

			break;
     7b8:	0f c0       	rjmp	.+30     	; 0x7d8 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     7ba:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     7be:	91 ff       	sbrs	r25, 1
     7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     7c2:	80 91 a6 00 	lds	r24, 0x00A6
     7c6:	8d 7f       	andi	r24, 0xFD	; 253
     7c8:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     7cc:	83 e0       	ldi	r24, 0x03	; 3

			break;
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     7d0:	88 23       	and	r24, r24
     7d2:	c1 f6       	brne	.-80     	; 0x784 <USB_Host_WaitMS+0x34>
     7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     7d6:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     7d8:	41 15       	cp	r20, r1
     7da:	51 05       	cpc	r21, r1
     7dc:	29 f4       	brne	.+10     	; 0x7e8 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7de:	90 91 9e 00 	lds	r25, 0x009E
     7e2:	9e 7f       	andi	r25, 0xFE	; 254
     7e4:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     7e8:	21 15       	cp	r18, r1
     7ea:	31 05       	cpc	r19, r1
     7ec:	29 f0       	breq	.+10     	; 0x7f8 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     7ee:	90 91 a0 00 	lds	r25, 0x00A0
     7f2:	90 62       	ori	r25, 0x20	; 32
     7f4:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     7f8:	08 95       	ret

000007fa <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	df 93       	push	r29
     800:	cf 93       	push	r28
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	28 97       	sbiw	r28, 0x08	; 8
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	0f be       	out	0x3f, r0	; 63
     810:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     812:	80 91 27 01 	lds	r24, 0x0127
     816:	85 30       	cpi	r24, 0x05	; 5
     818:	09 f4       	brne	.+2      	; 0x81c <USB_Host_ProcessNextHostState+0x22>
     81a:	99 c0       	rjmp	.+306    	; 0x94e <USB_Host_ProcessNextHostState+0x154>
     81c:	86 30       	cpi	r24, 0x06	; 6
     81e:	68 f4       	brcc	.+26     	; 0x83a <USB_Host_ProcessNextHostState+0x40>
     820:	82 30       	cpi	r24, 0x02	; 2
     822:	c1 f1       	breq	.+112    	; 0x894 <USB_Host_ProcessNextHostState+0x9a>
     824:	83 30       	cpi	r24, 0x03	; 3
     826:	18 f4       	brcc	.+6      	; 0x82e <USB_Host_ProcessNextHostState+0x34>
     828:	88 23       	and	r24, r24
     82a:	a1 f0       	breq	.+40     	; 0x854 <USB_Host_ProcessNextHostState+0x5a>
     82c:	04 c1       	rjmp	.+520    	; 0xa36 <USB_Host_ProcessNextHostState+0x23c>
     82e:	83 30       	cpi	r24, 0x03	; 3
     830:	d9 f1       	breq	.+118    	; 0x8a8 <USB_Host_ProcessNextHostState+0xae>
     832:	84 30       	cpi	r24, 0x04	; 4
     834:	09 f0       	breq	.+2      	; 0x838 <USB_Host_ProcessNextHostState+0x3e>
     836:	ff c0       	rjmp	.+510    	; 0xa36 <USB_Host_ProcessNextHostState+0x23c>
     838:	62 c0       	rjmp	.+196    	; 0x8fe <USB_Host_ProcessNextHostState+0x104>
     83a:	87 30       	cpi	r24, 0x07	; 7
     83c:	09 f4       	brne	.+2      	; 0x840 <USB_Host_ProcessNextHostState+0x46>
     83e:	9e c0       	rjmp	.+316    	; 0x97c <USB_Host_ProcessNextHostState+0x182>
     840:	87 30       	cpi	r24, 0x07	; 7
     842:	08 f4       	brcc	.+2      	; 0x846 <USB_Host_ProcessNextHostState+0x4c>
     844:	8f c0       	rjmp	.+286    	; 0x964 <USB_Host_ProcessNextHostState+0x16a>
     846:	88 30       	cpi	r24, 0x08	; 8
     848:	09 f4       	brne	.+2      	; 0x84c <USB_Host_ProcessNextHostState+0x52>
     84a:	b8 c0       	rjmp	.+368    	; 0x9bc <USB_Host_ProcessNextHostState+0x1c2>
     84c:	89 30       	cpi	r24, 0x09	; 9
     84e:	09 f0       	breq	.+2      	; 0x852 <USB_Host_ProcessNextHostState+0x58>
     850:	f2 c0       	rjmp	.+484    	; 0xa36 <USB_Host_ProcessNextHostState+0x23c>
     852:	d9 c0       	rjmp	.+434    	; 0xa06 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     854:	00 91 1b 01 	lds	r16, 0x011B
     858:	10 91 1c 01 	lds	r17, 0x011C
     85c:	01 15       	cp	r16, r1
     85e:	11 05       	cpc	r17, r1
     860:	09 f4       	brne	.+2      	; 0x864 <USB_Host_ProcessNextHostState+0x6a>
     862:	e9 c0       	rjmp	.+466    	; 0xa36 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	74 df       	rcall	.-280    	; 0x750 <USB_Host_WaitMS>
     868:	68 2f       	mov	r22, r24
     86a:	88 23       	and	r24, r24
     86c:	31 f0       	breq	.+12     	; 0x87a <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     86e:	80 91 1a 01 	lds	r24, 0x011A
     872:	80 93 27 01 	sts	0x0127, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     876:	81 e0       	ldi	r24, 0x01	; 1
					break;
     878:	d2 c0       	rjmp	.+420    	; 0xa1e <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     87a:	01 50       	subi	r16, 0x01	; 1
     87c:	10 40       	sbci	r17, 0x00	; 0
     87e:	10 93 1c 01 	sts	0x011C, r17
     882:	00 93 1b 01 	sts	0x011B, r16
     886:	01 15       	cp	r16, r1
     888:	11 05       	cpc	r17, r1
     88a:	09 f0       	breq	.+2      	; 0x88e <USB_Host_ProcessNextHostState+0x94>
     88c:	d4 c0       	rjmp	.+424    	; 0xa36 <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     88e:	80 91 1a 01 	lds	r24, 0x011A
     892:	07 c0       	rjmp	.+14     	; 0x8a2 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     894:	88 ee       	ldi	r24, 0xE8	; 232
     896:	93 e0       	ldi	r25, 0x03	; 3
     898:	90 93 1c 01 	sts	0x011C, r25
     89c:	80 93 1b 01 	sts	0x011B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	80 93 27 01 	sts	0x0127, r24
			break;
     8a6:	c7 c0       	rjmp	.+398    	; 0xa36 <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     8a8:	80 91 1b 01 	lds	r24, 0x011B
     8ac:	90 91 1c 01 	lds	r25, 0x011C
     8b0:	9c 01       	movw	r18, r24
     8b2:	21 50       	subi	r18, 0x01	; 1
     8b4:	30 40       	sbci	r19, 0x00	; 0
     8b6:	30 93 1c 01 	sts	0x011C, r19
     8ba:	20 93 1b 01 	sts	0x011B, r18
     8be:	00 97       	sbiw	r24, 0x00	; 0
     8c0:	39 f0       	breq	.+14     	; 0x8d0 <USB_Host_ProcessNextHostState+0xd6>
     8c2:	8f ec       	ldi	r24, 0xCF	; 207
     8c4:	97 e0       	ldi	r25, 0x07	; 7
     8c6:	01 97       	sbiw	r24, 0x01	; 1
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <USB_Host_ProcessNextHostState+0xcc>
     8ca:	00 c0       	rjmp	.+0      	; 0x8cc <USB_Host_ProcessNextHostState+0xd2>
     8cc:	00 00       	nop
     8ce:	b3 c0       	rjmp	.+358    	; 0xa36 <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     8d0:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     8d2:	80 91 d8 00 	lds	r24, 0x00D8
     8d6:	80 61       	ori	r24, 0x10	; 16
     8d8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     8dc:	80 91 dd 00 	lds	r24, 0x00DD
     8e0:	8b 7f       	andi	r24, 0xFB	; 251
     8e2:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     8e6:	80 91 d7 00 	lds	r24, 0x00D7
     8ea:	80 61       	ori	r24, 0x10	; 16
     8ec:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     8f0:	80 91 dd 00 	lds	r24, 0x00DD
     8f4:	82 60       	ori	r24, 0x02	; 2
     8f6:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     8fa:	84 e0       	ldi	r24, 0x04	; 4
     8fc:	d2 cf       	rjmp	.-92     	; 0x8a2 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     8fe:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     902:	80 ff       	sbrs	r24, 0
     904:	98 c0       	rjmp	.+304    	; 0xa36 <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     906:	80 91 9f 00 	lds	r24, 0x009F
     90a:	8e 7f       	andi	r24, 0xFE	; 254
     90c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     910:	80 91 9f 00 	lds	r24, 0x009F
     914:	8d 7f       	andi	r24, 0xFD	; 253
     916:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     91a:	80 91 df 00 	lds	r24, 0x00DF
     91e:	8d 7f       	andi	r24, 0xFD	; 253
     920:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     924:	80 91 de 00 	lds	r24, 0x00DE
     928:	82 60       	ori	r24, 0x02	; 2
     92a:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     92e:	80 91 9e 00 	lds	r24, 0x009E
     932:	81 60       	ori	r24, 0x01	; 1
     934:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     938:	53 d1       	rcall	.+678    	; 0xbe0 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     93a:	10 92 27 01 	sts	0x0127, r1
     93e:	84 e6       	ldi	r24, 0x64	; 100
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	90 93 1c 01 	sts	0x011C, r25
     946:	80 93 1b 01 	sts	0x011B, r24
     94a:	85 e0       	ldi	r24, 0x05	; 5
     94c:	59 c0       	rjmp	.+178    	; 0xa00 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     94e:	aa de       	rcall	.-684    	; 0x6a4 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     950:	10 92 27 01 	sts	0x0127, r1
     954:	88 ec       	ldi	r24, 0xC8	; 200
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	90 93 1c 01 	sts	0x011C, r25
     95c:	80 93 1b 01 	sts	0x011B, r24
     960:	86 e0       	ldi	r24, 0x06	; 6
     962:	4e c0       	rjmp	.+156    	; 0xa00 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	20 e4       	ldi	r18, 0x40	; 64
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	01 e0       	ldi	r16, 0x01	; 1
     970:	d0 d0       	rcall	.+416    	; 0xb12 <Pipe_ConfigurePipe>
     972:	88 23       	and	r24, r24
     974:	09 f4       	brne	.+2      	; 0x978 <USB_Host_ProcessNextHostState+0x17e>
     976:	4f c0       	rjmp	.+158    	; 0xa16 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     978:	87 e0       	ldi	r24, 0x07	; 7
     97a:	93 cf       	rjmp	.-218    	; 0x8a2 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     97c:	af e1       	ldi	r26, 0x1F	; 31
     97e:	b1 e0       	ldi	r27, 0x01	; 1
     980:	e0 e1       	ldi	r30, 0x10	; 16
     982:	f1 e0       	ldi	r31, 0x01	; 1
     984:	88 e0       	ldi	r24, 0x08	; 8
     986:	01 90       	ld	r0, Z+
     988:	0d 92       	st	X+, r0
     98a:	81 50       	subi	r24, 0x01	; 1
     98c:	e1 f7       	brne	.-8      	; 0x986 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     98e:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     992:	ce 01       	movw	r24, r28
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	43 d3       	rcall	.+1670   	; 0x101e <USB_Host_SendControlRequest>
     998:	68 2f       	mov	r22, r24
     99a:	88 23       	and	r24, r24
     99c:	09 f0       	breq	.+2      	; 0x9a0 <USB_Host_ProcessNextHostState+0x1a6>
     99e:	3e c0       	rjmp	.+124    	; 0xa1c <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     9a0:	88 85       	ldd	r24, Y+8	; 0x08
     9a2:	80 93 18 01 	sts	0x0118, r24

			USB_Host_ResetDevice();
     9a6:	7e de       	rcall	.-772    	; 0x6a4 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     9a8:	10 92 27 01 	sts	0x0127, r1
     9ac:	88 ec       	ldi	r24, 0xC8	; 200
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	90 93 1c 01 	sts	0x011C, r25
     9b4:	80 93 1b 01 	sts	0x011B, r24
     9b8:	88 e0       	ldi	r24, 0x08	; 8
     9ba:	22 c0       	rjmp	.+68     	; 0xa00 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     9bc:	20 91 18 01 	lds	r18, 0x0118
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	01 e0       	ldi	r16, 0x01	; 1
     9ca:	a3 d0       	rcall	.+326    	; 0xb12 <Pipe_ConfigurePipe>
     9cc:	88 23       	and	r24, r24
     9ce:	19 f1       	breq	.+70     	; 0xa16 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     9d0:	af e1       	ldi	r26, 0x1F	; 31
     9d2:	b1 e0       	ldi	r27, 0x01	; 1
     9d4:	e8 e0       	ldi	r30, 0x08	; 8
     9d6:	f1 e0       	ldi	r31, 0x01	; 1
     9d8:	88 e0       	ldi	r24, 0x08	; 8
     9da:	01 90       	ld	r0, Z+
     9dc:	0d 92       	st	X+, r0
     9de:	81 50       	subi	r24, 0x01	; 1
     9e0:	e1 f7       	brne	.-8      	; 0x9da <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	1b d3       	rcall	.+1590   	; 0x101e <USB_Host_SendControlRequest>
     9e8:	68 2f       	mov	r22, r24
     9ea:	88 23       	and	r24, r24
     9ec:	b9 f4       	brne	.+46     	; 0xa1c <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     9ee:	10 92 27 01 	sts	0x0127, r1
     9f2:	84 e6       	ldi	r24, 0x64	; 100
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	90 93 1c 01 	sts	0x011C, r25
     9fa:	80 93 1b 01 	sts	0x011B, r24
     9fe:	89 e0       	ldi	r24, 0x09	; 9
     a00:	80 93 1a 01 	sts	0x011A, r24
			break;
     a04:	18 c0       	rjmp	.+48     	; 0xa36 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a0c:	8a e0       	ldi	r24, 0x0A	; 10
     a0e:	80 93 27 01 	sts	0x0127, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     a12:	9b dc       	rcall	.-1738   	; 0x34a <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     a14:	10 c0       	rjmp	.+32     	; 0xa36 <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     a16:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	01 c0       	rjmp	.+2      	; 0xa1e <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     a1c:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a1e:	90 91 27 01 	lds	r25, 0x0127
     a22:	91 30       	cpi	r25, 0x01	; 1
     a24:	41 f0       	breq	.+16     	; 0xa36 <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a26:	1b dd       	rcall	.-1482   	; 0x45e <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a28:	80 91 dd 00 	lds	r24, 0x00DD
     a2c:	81 60       	ori	r24, 0x01	; 1
     a2e:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a32:	85 dc       	rcall	.-1782   	; 0x33e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a34:	32 d1       	rcall	.+612    	; 0xc9a <USB_ResetInterface>
	}
}
     a36:	28 96       	adiw	r28, 0x08	; 8
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	cf 91       	pop	r28
     a44:	df 91       	pop	r29
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	08 95       	ret

00000a4c <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     a4c:	8f 92       	push	r8
     a4e:	9f 92       	push	r9
     a50:	bf 92       	push	r11
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	df 93       	push	r29
     a60:	cf 93       	push	r28
     a62:	0f 92       	push	r0
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	e8 2e       	mov	r14, r24
     a6a:	4b 01       	movw	r8, r22
     a6c:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     a6e:	80 91 aa 00 	lds	r24, 0x00AA
     a72:	8f 7c       	andi	r24, 0xCF	; 207
     a74:	80 61       	ori	r24, 0x10	; 16
     a76:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     a7a:	99 83       	std	Y+1, r25	; 0x01
     a7c:	c7 d0       	rcall	.+398    	; 0xc0c <Pipe_WaitUntilReady>
     a7e:	b8 2e       	mov	r11, r24
     a80:	99 81       	ldd	r25, Y+1	; 0x01
     a82:	88 23       	and	r24, r24
     a84:	c1 f5       	brne	.+112    	; 0xaf6 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     a86:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     a88:	01 15       	cp	r16, r1
     a8a:	11 05       	cpc	r17, r1
     a8c:	39 f0       	breq	.+14     	; 0xa9c <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     a8e:	f8 01       	movw	r30, r16
     a90:	20 81       	ld	r18, Z
     a92:	31 81       	ldd	r19, Z+1	; 0x01
     a94:	82 1a       	sub	r8, r18
     a96:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     a98:	e2 0e       	add	r14, r18
     a9a:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     a9c:	cc 24       	eor	r12, r12
     a9e:	dd 24       	eor	r13, r13
     aa0:	25 c0       	rjmp	.+74     	; 0xaec <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     aa2:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     aa6:	85 fd       	sbrc	r24, 5
     aa8:	16 c0       	rjmp	.+44     	; 0xad6 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     aaa:	80 91 a6 00 	lds	r24, 0x00A6
     aae:	8e 77       	andi	r24, 0x7E	; 126
     ab0:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     ab4:	01 15       	cp	r16, r1
     ab6:	11 05       	cpc	r17, r1
     ab8:	51 f0       	breq	.+20     	; 0xace <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     aba:	f8 01       	movw	r30, r16
     abc:	80 81       	ld	r24, Z
     abe:	91 81       	ldd	r25, Z+1	; 0x01
     ac0:	8c 0d       	add	r24, r12
     ac2:	9d 1d       	adc	r25, r13
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     ac8:	44 e0       	ldi	r20, 0x04	; 4
     aca:	b4 2e       	mov	r11, r20
     acc:	14 c0       	rjmp	.+40     	; 0xaf6 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     ace:	9e d0       	rcall	.+316    	; 0xc0c <Pipe_WaitUntilReady>
     ad0:	88 23       	and	r24, r24
     ad2:	61 f0       	breq	.+24     	; 0xaec <Pipe_Read_Stream_LE+0xa0>
     ad4:	0f c0       	rjmp	.+30     	; 0xaf4 <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     ad6:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     ada:	f7 01       	movw	r30, r14
     adc:	81 93       	st	Z+, r24
     ade:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     ae0:	08 94       	sec
     ae2:	81 08       	sbc	r8, r1
     ae4:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     ae6:	08 94       	sec
     ae8:	c1 1c       	adc	r12, r1
     aea:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     aec:	81 14       	cp	r8, r1
     aee:	91 04       	cpc	r9, r1
     af0:	c1 f6       	brne	.-80     	; 0xaa2 <Pipe_Read_Stream_LE+0x56>
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     af4:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     af6:	8b 2d       	mov	r24, r11
     af8:	0f 90       	pop	r0
     afa:	cf 91       	pop	r28
     afc:	df 91       	pop	r29
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	bf 90       	pop	r11
     b0c:	9f 90       	pop	r9
     b0e:	8f 90       	pop	r8
     b10:	08 95       	ret

00000b12 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     b12:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     b14:	58 2f       	mov	r21, r24
     b16:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     b18:	87 ff       	sbrs	r24, 7
     b1a:	02 c0       	rjmp	.+4      	; 0xb20 <Pipe_ConfigurePipe+0xe>
     b1c:	80 e1       	ldi	r24, 0x10	; 16
     b1e:	01 c0       	rjmp	.+2      	; 0xb22 <Pipe_ConfigurePipe+0x10>
     b20:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     b22:	57 30       	cpi	r21, 0x07	; 7
     b24:	08 f0       	brcs	.+2      	; 0xb28 <Pipe_ConfigurePipe+0x16>
     b26:	59 c0       	rjmp	.+178    	; 0xbda <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     b28:	66 23       	and	r22, r22
     b2a:	09 f4       	brne	.+2      	; 0xb2e <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     b2c:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     b2e:	4f 70       	andi	r20, 0x0F	; 15
     b30:	62 95       	swap	r22
     b32:	66 0f       	add	r22, r22
     b34:	66 0f       	add	r22, r22
     b36:	60 7c       	andi	r22, 0xC0	; 192
     b38:	64 2b       	or	r22, r20
     b3a:	68 2b       	or	r22, r24
     b3c:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b3e:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b40:	84 2f       	mov	r24, r20
     b42:	8f 70       	andi	r24, 0x0F	; 15
     b44:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     b48:	45 17       	cp	r20, r21
     b4a:	a1 f4       	brne	.+40     	; 0xb74 <Pipe_ConfigurePipe+0x62>
     b4c:	88 e0       	ldi	r24, 0x08	; 8
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     b54:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     b5a:	82 17       	cp	r24, r18
     b5c:	93 07       	cpc	r25, r19
     b5e:	10 f4       	brcc	.+4      	; 0xb64 <Pipe_ConfigurePipe+0x52>
     b60:	75 30       	cpi	r23, 0x05	; 5
     b62:	c1 f7       	brne	.-16     	; 0xb54 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     b64:	87 2f       	mov	r24, r23
     b66:	82 95       	swap	r24
     b68:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b6a:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     b6c:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     b6e:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     b70:	e0 e0       	ldi	r30, 0x00	; 0
     b72:	08 c0       	rjmp	.+16     	; 0xb84 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     b74:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     b78:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     b7c:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     b80:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     b84:	81 ff       	sbrs	r24, 1
     b86:	20 c0       	rjmp	.+64     	; 0xbc8 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b88:	90 91 a9 00 	lds	r25, 0x00A9
     b8c:	9e 7f       	andi	r25, 0xFE	; 254
     b8e:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     b92:	90 91 ab 00 	lds	r25, 0x00AB
     b96:	9d 7f       	andi	r25, 0xFD	; 253
     b98:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     b9c:	90 91 a9 00 	lds	r25, 0x00A9
     ba0:	91 60       	ori	r25, 0x01	; 1
     ba2:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     ba6:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     baa:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     bae:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     bb2:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     bb6:	80 91 a9 00 	lds	r24, 0x00A9
     bba:	80 62       	ori	r24, 0x20	; 32
     bbc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     bc0:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     bc4:	87 ff       	sbrs	r24, 7
     bc6:	09 c0       	rjmp	.+18     	; 0xbda <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     bc8:	4f 5f       	subi	r20, 0xFF	; 255
     bca:	47 30       	cpi	r20, 0x07	; 7
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <Pipe_ConfigurePipe+0xbe>
     bce:	b8 cf       	rjmp	.-144    	; 0xb40 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bd0:	5f 70       	andi	r21, 0x0F	; 15
     bd2:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     bda:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     bdc:	0f 91       	pop	r16
     bde:	08 95       	ret

00000be0 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     be0:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	98 2f       	mov	r25, r24
     be8:	9f 70       	andi	r25, 0x0F	; 15
     bea:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     bee:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     bf2:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     bf6:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     bfa:	90 91 a9 00 	lds	r25, 0x00A9
     bfe:	9e 7f       	andi	r25, 0xFE	; 254
     c00:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c04:	8f 5f       	subi	r24, 0xFF	; 255
     c06:	87 30       	cpi	r24, 0x07	; 7
     c08:	71 f7       	brne	.-36     	; 0xbe6 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     c0a:	08 95       	ret

00000c0c <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     c0c:	80 91 a2 00 	lds	r24, 0x00A2
     c10:	90 91 a3 00 	lds	r25, 0x00A3
}

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     c14:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     c16:	20 91 aa 00 	lds	r18, 0x00AA
     c1a:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     c1c:	20 31       	cpi	r18, 0x10	; 16
     c1e:	29 f4       	brne	.+10     	; 0xc2a <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c20:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     c24:	20 ff       	sbrs	r18, 0
     c26:	05 c0       	rjmp	.+10     	; 0xc32 <Pipe_WaitUntilReady+0x26>
     c28:	18 c0       	rjmp	.+48     	; 0xc5a <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     c2a:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     c2e:	22 fd       	sbrc	r18, 2
     c30:	14 c0       	rjmp	.+40     	; 0xc5a <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c32:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     c36:	21 fd       	sbrc	r18, 1
     c38:	12 c0       	rjmp	.+36     	; 0xc5e <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     c3a:	20 91 27 01 	lds	r18, 0x0127
     c3e:	21 30       	cpi	r18, 0x01	; 1
     c40:	81 f0       	breq	.+32     	; 0xc62 <Pipe_WaitUntilReady+0x56>
     c42:	20 91 a2 00 	lds	r18, 0x00A2
     c46:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c4a:	28 17       	cp	r18, r24
     c4c:	39 07       	cpc	r19, r25
     c4e:	19 f3       	breq	.-58     	; 0xc16 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c50:	44 23       	and	r20, r20
     c52:	49 f0       	breq	.+18     	; 0xc66 <Pipe_WaitUntilReady+0x5a>
     c54:	41 50       	subi	r20, 0x01	; 1
     c56:	c9 01       	movw	r24, r18
     c58:	de cf       	rjmp	.-68     	; 0xc16 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     c66:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     c68:	08 95       	ret

00000c6a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     c6a:	75 d0       	rcall	.+234    	; 0xd56 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c6c:	7c d0       	rcall	.+248    	; 0xd66 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c6e:	e0 ee       	ldi	r30, 0xE0	; 224
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	81 60       	ori	r24, 0x01	; 1
     c76:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     c78:	e8 ed       	ldi	r30, 0xD8	; 216
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8f 77       	andi	r24, 0x7F	; 127
     c80:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c82:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     c84:	a7 ed       	ldi	r26, 0xD7	; 215
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	8c 91       	ld	r24, X
     c8a:	8e 7f       	andi	r24, 0xFE	; 254
     c8c:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c8e:	80 81       	ld	r24, Z
     c90:	8f 7e       	andi	r24, 0xEF	; 239
     c92:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c94:	10 92 1e 01 	sts	0x011E, r1
}
     c98:	08 95       	ret

00000c9a <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c9a:	5d d0       	rcall	.+186    	; 0xd56 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c9c:	64 d0       	rcall	.+200    	; 0xd66 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c9e:	80 91 d8 00 	lds	r24, 0x00D8
     ca2:	8f 77       	andi	r24, 0x7F	; 127
     ca4:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     ca8:	80 91 d8 00 	lds	r24, 0x00D8
     cac:	80 68       	ori	r24, 0x80	; 128
     cae:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     cb2:	80 91 d8 00 	lds	r24, 0x00D8
     cb6:	8f 7d       	andi	r24, 0xDF	; 223
     cb8:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     cbc:	80 91 d7 00 	lds	r24, 0x00D7
     cc0:	8f 77       	andi	r24, 0x7F	; 127
     cc2:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     cc6:	8c e0       	ldi	r24, 0x0C	; 12
     cc8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     cca:	8e e0       	ldi	r24, 0x0E	; 14
     ccc:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     cce:	09 b4       	in	r0, 0x29	; 41
     cd0:	00 fe       	sbrs	r0, 0
     cd2:	fd cf       	rjmp	.-6      	; 0xcce <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	80 93 27 01 	sts	0x0127, r24
	USB_Host_ConfigurationNumber = 0;
     cda:	10 92 1d 01 	sts	0x011D, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     cde:	80 e4       	ldi	r24, 0x40	; 64
     ce0:	80 93 18 01 	sts	0x0118, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     ce4:	80 91 d8 00 	lds	r24, 0x00D8
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cee:	80 91 dd 00 	lds	r24, 0x00DD
     cf2:	81 60       	ori	r24, 0x01	; 1
     cf4:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     cf8:	80 91 dd 00 	lds	r24, 0x00DD
     cfc:	84 60       	ori	r24, 0x04	; 4
     cfe:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     d02:	80 91 d7 00 	lds	r24, 0x00D7
     d06:	8f 7e       	andi	r24, 0xEF	; 239
     d08:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     d0c:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     d0e:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     d10:	80 91 de 00 	lds	r24, 0x00DE
     d14:	81 60       	ori	r24, 0x01	; 1
     d16:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     d1a:	80 91 de 00 	lds	r24, 0x00DE
     d1e:	84 60       	ori	r24, 0x04	; 4
     d20:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     d24:	80 91 e0 00 	lds	r24, 0x00E0
     d28:	8e 7f       	andi	r24, 0xFE	; 254
     d2a:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     d2e:	80 91 d8 00 	lds	r24, 0x00D8
     d32:	80 61       	ori	r24, 0x10	; 16
     d34:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     d38:	08 95       	ret

00000d3a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d3a:	e8 ed       	ldi	r30, 0xD8	; 216
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8f 7e       	andi	r24, 0xEF	; 239
     d42:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     d44:	e7 ed       	ldi	r30, 0xD7	; 215
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	81 60       	ori	r24, 0x01	; 1
     d4c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	80 93 1e 01 	sts	0x011E, r24

	USB_ResetInterface();
}
     d54:	a2 cf       	rjmp	.-188    	; 0xc9a <USB_ResetInterface>

00000d56 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d56:	e8 ed       	ldi	r30, 0xD8	; 216
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	8c 7f       	andi	r24, 0xFC	; 252
     d5e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     d60:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     d64:	08 95       	ret

00000d66 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d66:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     d6a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     d6e:	08 95       	ret

00000d70 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d70:	1f 92       	push	r1
     d72:	0f 92       	push	r0
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	0f 92       	push	r0
     d78:	0b b6       	in	r0, 0x3b	; 59
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	2f 93       	push	r18
     d80:	3f 93       	push	r19
     d82:	4f 93       	push	r20
     d84:	5f 93       	push	r21
     d86:	6f 93       	push	r22
     d88:	7f 93       	push	r23
     d8a:	8f 93       	push	r24
     d8c:	9f 93       	push	r25
     d8e:	af 93       	push	r26
     d90:	bf 93       	push	r27
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d96:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d9a:	85 ff       	sbrs	r24, 5
     d9c:	0a c0       	rjmp	.+20     	; 0xdb2 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d9e:	80 91 a0 00 	lds	r24, 0x00A0
     da2:	85 ff       	sbrs	r24, 5
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     da6:	80 91 9f 00 	lds	r24, 0x009F
     daa:	8f 7d       	andi	r24, 0xDF	; 223
     dac:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     db0:	0c d1       	rcall	.+536    	; 0xfca <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     db2:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     db6:	81 ff       	sbrs	r24, 1
     db8:	15 c0       	rjmp	.+42     	; 0xde4 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     dba:	80 91 a0 00 	lds	r24, 0x00A0
     dbe:	81 ff       	sbrs	r24, 1
     dc0:	11 c0       	rjmp	.+34     	; 0xde4 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     dc2:	80 91 9f 00 	lds	r24, 0x009F
     dc6:	8d 7f       	andi	r24, 0xFD	; 253
     dc8:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     dcc:	80 91 9f 00 	lds	r24, 0x009F
     dd0:	8e 7f       	andi	r24, 0xFE	; 254
     dd2:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     dd6:	80 91 a0 00 	lds	r24, 0x00A0
     dda:	8d 7f       	andi	r24, 0xFD	; 253
     ddc:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     de0:	ae da       	rcall	.-2724   	; 0x33e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     de2:	5b df       	rcall	.-330    	; 0xc9a <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     de4:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     de8:	81 ff       	sbrs	r24, 1
     dea:	15 c0       	rjmp	.+42     	; 0xe16 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     dec:	80 91 de 00 	lds	r24, 0x00DE
     df0:	81 ff       	sbrs	r24, 1
     df2:	11 c0       	rjmp	.+34     	; 0xe16 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     df4:	80 91 df 00 	lds	r24, 0x00DF
     df8:	8d 7f       	andi	r24, 0xFD	; 253
     dfa:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     dfe:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e00:	80 91 dd 00 	lds	r24, 0x00DD
     e04:	81 60       	ori	r24, 0x01	; 1
     e06:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	09 db       	rcall	.-2542   	; 0x420 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     e0e:	97 da       	rcall	.-2770   	; 0x33e <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	80 93 27 01 	sts	0x0127, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     e16:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     e1a:	80 ff       	sbrs	r24, 0
     e1c:	17 c0       	rjmp	.+46     	; 0xe4c <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     e1e:	80 91 de 00 	lds	r24, 0x00DE
     e22:	80 ff       	sbrs	r24, 0
     e24:	13 c0       	rjmp	.+38     	; 0xe4c <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     e26:	80 91 df 00 	lds	r24, 0x00DF
     e2a:	8e 7f       	andi	r24, 0xFE	; 254
     e2c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     e30:	80 91 de 00 	lds	r24, 0x00DE
     e34:	8e 7f       	andi	r24, 0xFE	; 254
     e36:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     e3a:	7b da       	rcall	.-2826   	; 0x332 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e3c:	80 91 a0 00 	lds	r24, 0x00A0
     e40:	82 60       	ori	r24, 0x02	; 2
     e42:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	80 93 27 01 	sts	0x0127, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     e4c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     e50:	82 ff       	sbrs	r24, 2
     e52:	0e c0       	rjmp	.+28     	; 0xe70 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     e54:	80 91 de 00 	lds	r24, 0x00DE
     e58:	82 ff       	sbrs	r24, 2
     e5a:	0a c0       	rjmp	.+20     	; 0xe70 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     e5c:	80 91 df 00 	lds	r24, 0x00DF
     e60:	8b 7f       	andi	r24, 0xFB	; 251
     e62:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	f9 da       	rcall	.-2574   	; 0x45e <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     e6c:	68 da       	rcall	.-2864   	; 0x33e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     e6e:	15 df       	rcall	.-470    	; 0xc9a <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e70:	ff 91       	pop	r31
     e72:	ef 91       	pop	r30
     e74:	bf 91       	pop	r27
     e76:	af 91       	pop	r26
     e78:	9f 91       	pop	r25
     e7a:	8f 91       	pop	r24
     e7c:	7f 91       	pop	r23
     e7e:	6f 91       	pop	r22
     e80:	5f 91       	pop	r21
     e82:	4f 91       	pop	r20
     e84:	3f 91       	pop	r19
     e86:	2f 91       	pop	r18
     e88:	0f 90       	pop	r0
     e8a:	0b be       	out	0x3b, r0	; 59
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e96:	cf 92       	push	r12
     e98:	df 92       	push	r13
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	29 97       	sbiw	r28, 0x09	; 9
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	6b 01       	movw	r12, r22
     eb8:	8a 01       	movw	r16, r20
     eba:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ebc:	90 e8       	ldi	r25, 0x80	; 128
     ebe:	90 93 1f 01 	sts	0x011F, r25
     ec2:	96 e0       	ldi	r25, 0x06	; 6
     ec4:	90 93 20 01 	sts	0x0120, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ece:	90 93 22 01 	sts	0x0122, r25
     ed2:	80 93 21 01 	sts	0x0121, r24
     ed6:	10 92 24 01 	sts	0x0124, r1
     eda:	10 92 23 01 	sts	0x0123, r1
     ede:	89 e0       	ldi	r24, 0x09	; 9
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	90 93 26 01 	sts	0x0126, r25
     ee6:	80 93 25 01 	sts	0x0125, r24
     eea:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     eee:	ce 01       	movw	r24, r28
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	95 d0       	rcall	.+298    	; 0x101e <USB_Host_SendControlRequest>
     ef4:	88 23       	and	r24, r24
     ef6:	b9 f4       	brne	.+46     	; 0xf26 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	9c 81       	ldd	r25, Y+4	; 0x04
     efc:	f6 01       	movw	r30, r12
     efe:	91 83       	std	Z+1, r25	; 0x01
     f00:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     f02:	e8 16       	cp	r14, r24
     f04:	f9 06       	cpc	r15, r25
     f06:	70 f0       	brcs	.+28     	; 0xf24 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f08:	90 93 26 01 	sts	0x0126, r25
     f0c:	80 93 25 01 	sts	0x0125, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f10:	c8 01       	movw	r24, r16
     f12:	85 d0       	rcall	.+266    	; 0x101e <USB_Host_SendControlRequest>
     f14:	88 23       	and	r24, r24
     f16:	39 f4       	brne	.+14     	; 0xf26 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f18:	f8 01       	movw	r30, r16
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	92 30       	cpi	r25, 0x02	; 2
     f1e:	19 f0       	breq	.+6      	; 0xf26 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     f20:	86 e0       	ldi	r24, 0x06	; 6
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     f24:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f26:	29 96       	adiw	r28, 0x09	; 9
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	df 90       	pop	r13
     f40:	cf 90       	pop	r12
     f42:	08 95       	ret

00000f44 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     f44:	af 92       	push	r10
     f46:	bf 92       	push	r11
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	8c 01       	movw	r16, r24
     f5a:	eb 01       	movw	r28, r22
     f5c:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     f5e:	23 c0       	rjmp	.+70     	; 0xfa6 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f60:	e8 81       	ld	r30, Y
     f62:	f9 81       	ldd	r31, Y+1	; 0x01
     f64:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     f66:	20 81       	ld	r18, Z
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	c7 01       	movw	r24, r14
     f6c:	2e 15       	cp	r18, r14
     f6e:	3f 05       	cpc	r19, r15
     f70:	08 f4       	brcc	.+2      	; 0xf74 <USB_GetNextDescriptorComp+0x30>
     f72:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     f74:	e8 0f       	add	r30, r24
     f76:	f9 1f       	adc	r31, r25
     f78:	f9 83       	std	Y+1, r31	; 0x01
     f7a:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     f7c:	f8 01       	movw	r30, r16
     f7e:	20 81       	ld	r18, Z
     f80:	31 81       	ldd	r19, Z+1	; 0x01
     f82:	28 1b       	sub	r18, r24
     f84:	39 0b       	sbc	r19, r25
     f86:	31 83       	std	Z+1, r19	; 0x01
     f88:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f8a:	88 81       	ld	r24, Y
     f8c:	99 81       	ldd	r25, Y+1	; 0x01
     f8e:	f6 01       	movw	r30, r12
     f90:	09 95       	icall
     f92:	82 30       	cpi	r24, 0x02	; 2
     f94:	41 f0       	breq	.+16     	; 0xfa6 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	69 f4       	brne	.+26     	; 0xfb4 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
     f9a:	a8 82       	st	Y, r10
     f9c:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
     f9e:	f8 01       	movw	r30, r16
     fa0:	f1 82       	std	Z+1, r15	; 0x01
     fa2:	e0 82       	st	Z, r14
     fa4:	07 c0       	rjmp	.+14     	; 0xfb4 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     fa6:	f8 01       	movw	r30, r16
     fa8:	e0 80       	ld	r14, Z
     faa:	f1 80       	ldd	r15, Z+1	; 0x01
     fac:	e1 14       	cp	r14, r1
     fae:	f1 04       	cpc	r15, r1
     fb0:	b9 f6       	brne	.-82     	; 0xf60 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     fb2:	82 e0       	ldi	r24, 0x02	; 2
}
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	df 90       	pop	r13
     fc2:	cf 90       	pop	r12
     fc4:	bf 90       	pop	r11
     fc6:	af 90       	pop	r10
     fc8:	08 95       	ret

00000fca <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     fca:	08 95       	ret

00000fcc <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
     fd4:	c8 ee       	ldi	r28, 0xE8	; 232
     fd6:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     fd8:	07 c0       	rjmp	.+14     	; 0xfe8 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	b9 db       	rcall	.-2190   	; 0x750 <USB_Host_WaitMS>
     fde:	88 23       	and	r24, r24
     fe0:	d1 f4       	brne	.+52     	; 0x1016 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     fe2:	20 97       	sbiw	r28, 0x00	; 0
     fe4:	b9 f0       	breq	.+46     	; 0x1014 <USB_Host_WaitForIOS+0x48>
     fe6:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     fe8:	11 23       	and	r17, r17
     fea:	29 f4       	brne	.+10     	; 0xff6 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     fec:	80 91 a6 00 	lds	r24, 0x00A6
     ff0:	83 ff       	sbrs	r24, 3
     ff2:	f3 cf       	rjmp	.-26     	; 0xfda <USB_Host_WaitForIOS+0xe>
     ff4:	0d c0       	rjmp	.+26     	; 0x1010 <USB_Host_WaitForIOS+0x44>
     ff6:	11 30       	cpi	r17, 0x01	; 1
     ff8:	29 f4       	brne	.+10     	; 0x1004 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ffa:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     ffe:	80 ff       	sbrs	r24, 0
    1000:	ec cf       	rjmp	.-40     	; 0xfda <USB_Host_WaitForIOS+0xe>
    1002:	06 c0       	rjmp	.+12     	; 0x1010 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1004:	12 30       	cpi	r17, 0x02	; 2
    1006:	49 f7       	brne	.-46     	; 0xfda <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1008:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    100c:	82 ff       	sbrs	r24, 2
    100e:	e5 cf       	rjmp	.-54     	; 0xfda <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1014:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	08 95       	ret

0000101e <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    101e:	ef 92       	push	r14
    1020:	ff 92       	push	r15
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    102c:	e0 90 9e 00 	lds	r14, 0x009E
    1030:	ff 24       	eor	r15, r15
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	e8 22       	and	r14, r24
    1036:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1038:	c0 91 25 01 	lds	r28, 0x0125
    103c:	d0 91 26 01 	lds	r29, 0x0126
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1040:	80 91 9e 00 	lds	r24, 0x009E
    1044:	81 60       	ori	r24, 0x01	; 1
    1046:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	81 db       	rcall	.-2302   	; 0x750 <USB_Host_WaitMS>
    104e:	88 23       	and	r24, r24
    1050:	09 f0       	breq	.+2      	; 0x1054 <USB_Host_SendControlRequest+0x36>
    1052:	cb c0       	rjmp	.+406    	; 0x11ea <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1054:	80 91 aa 00 	lds	r24, 0x00AA
    1058:	8f 7c       	andi	r24, 0xCF	; 207
    105a:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    105e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1062:	80 91 a6 00 	lds	r24, 0x00A6
    1066:	8f 7e       	andi	r24, 0xEF	; 239
    1068:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    106c:	80 91 a9 00 	lds	r24, 0x00A9
    1070:	8f 7b       	andi	r24, 0xBF	; 191
    1072:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1076:	ef e1       	ldi	r30, 0x1F	; 31
    1078:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    107a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    107c:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	e7 32       	cpi	r30, 0x27	; 39
    1084:	f8 07       	cpc	r31, r24
    1086:	c9 f7       	brne	.-14     	; 0x107a <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1088:	80 91 a6 00 	lds	r24, 0x00A6
    108c:	87 77       	andi	r24, 0x77	; 119
    108e:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	9b df       	rcall	.-202    	; 0xfcc <USB_Host_WaitForIOS>
    1096:	88 23       	and	r24, r24
    1098:	09 f0       	breq	.+2      	; 0x109c <USB_Host_SendControlRequest+0x7e>
    109a:	a7 c0       	rjmp	.+334    	; 0x11ea <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    109c:	80 91 a9 00 	lds	r24, 0x00A9
    10a0:	80 64       	ori	r24, 0x40	; 64
    10a2:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	53 db       	rcall	.-2394   	; 0x750 <USB_Host_WaitMS>
    10aa:	88 23       	and	r24, r24
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <USB_Host_SendControlRequest+0x92>
    10ae:	9d c0       	rjmp	.+314    	; 0x11ea <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10b0:	80 91 1f 01 	lds	r24, 0x011F
    10b4:	87 ff       	sbrs	r24, 7
    10b6:	4f c0       	rjmp	.+158    	; 0x1156 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10b8:	80 91 aa 00 	lds	r24, 0x00AA
    10bc:	8f 7c       	andi	r24, 0xCF	; 207
    10be:	80 61       	ori	r24, 0x10	; 16
    10c0:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    10c4:	01 15       	cp	r16, r1
    10c6:	11 05       	cpc	r17, r1
    10c8:	61 f5       	brne	.+88     	; 0x1122 <USB_Host_SendControlRequest+0x104>
    10ca:	2d c0       	rjmp	.+90     	; 0x1126 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10cc:	80 91 a9 00 	lds	r24, 0x00A9
    10d0:	8f 7b       	andi	r24, 0xBF	; 191
    10d2:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	79 df       	rcall	.-270    	; 0xfcc <USB_Host_WaitForIOS>
    10da:	88 23       	and	r24, r24
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <USB_Host_SendControlRequest+0xc2>
    10de:	85 c0       	rjmp	.+266    	; 0x11ea <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10e0:	80 91 f6 00 	lds	r24, 0x00F6
    10e4:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	49 f4       	brne	.+18     	; 0x10fe <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    10ec:	c0 e0       	ldi	r28, 0x00	; 0
    10ee:	d0 e0       	ldi	r29, 0x00	; 0
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    10f2:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    10f6:	f8 01       	movw	r30, r16
    10f8:	81 93       	st	Z+, r24
    10fa:	8f 01       	movw	r16, r30
					DataLen--;
    10fc:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10fe:	80 91 f6 00 	lds	r24, 0x00F6
    1102:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	11 f0       	breq	.+4      	; 0x110e <USB_Host_SendControlRequest+0xf0>
    110a:	20 97       	sbiw	r28, 0x00	; 0
    110c:	91 f7       	brne	.-28     	; 0x10f2 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    110e:	80 91 a9 00 	lds	r24, 0x00A9
    1112:	80 64       	ori	r24, 0x40	; 64
    1114:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1118:	80 91 a6 00 	lds	r24, 0x00A6
    111c:	8e 77       	andi	r24, 0x7E	; 126
    111e:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1122:	20 97       	sbiw	r28, 0x00	; 0
    1124:	99 f6       	brne	.-90     	; 0x10cc <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1126:	80 91 aa 00 	lds	r24, 0x00AA
    112a:	8f 7c       	andi	r24, 0xCF	; 207
    112c:	80 62       	ori	r24, 0x20	; 32
    112e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1132:	80 91 a9 00 	lds	r24, 0x00A9
    1136:	8f 7b       	andi	r24, 0xBF	; 191
    1138:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	46 df       	rcall	.-372    	; 0xfcc <USB_Host_WaitForIOS>
    1140:	88 23       	and	r24, r24
    1142:	09 f0       	breq	.+2      	; 0x1146 <USB_Host_SendControlRequest+0x128>
    1144:	52 c0       	rjmp	.+164    	; 0x11ea <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1146:	80 91 a6 00 	lds	r24, 0x00A6
    114a:	8b 77       	andi	r24, 0x7B	; 123
    114c:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	3c df       	rcall	.-392    	; 0xfcc <USB_Host_WaitForIOS>
    1154:	4a c0       	rjmp	.+148    	; 0x11ea <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1156:	01 15       	cp	r16, r1
    1158:	11 05       	cpc	r17, r1
    115a:	99 f1       	breq	.+102    	; 0x11c2 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    115c:	80 91 aa 00 	lds	r24, 0x00AA
    1160:	8f 7c       	andi	r24, 0xCF	; 207
    1162:	80 62       	ori	r24, 0x20	; 32
    1164:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1168:	80 91 a9 00 	lds	r24, 0x00A9
    116c:	8f 7b       	andi	r24, 0xBF	; 191
    116e:	80 93 a9 00 	sts	0x00A9, r24
    1172:	1c c0       	rjmp	.+56     	; 0x11ac <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	2a df       	rcall	.-428    	; 0xfcc <USB_Host_WaitForIOS>
    1178:	88 23       	and	r24, r24
    117a:	b9 f5       	brne	.+110    	; 0x11ea <USB_Host_SendControlRequest+0x1cc>
    117c:	f8 01       	movw	r30, r16
    117e:	06 c0       	rjmp	.+12     	; 0x118c <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1180:	81 91       	ld	r24, Z+
    1182:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1184:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1188:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    118a:	59 f0       	breq	.+22     	; 0x11a2 <USB_Host_SendControlRequest+0x184>
    118c:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    118e:	20 91 f6 00 	lds	r18, 0x00F6
    1192:	30 91 f7 00 	lds	r19, 0x00F7
    1196:	80 91 18 01 	lds	r24, 0x0118
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	28 17       	cp	r18, r24
    119e:	39 07       	cpc	r19, r25
    11a0:	78 f3       	brcs	.-34     	; 0x1180 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11a2:	80 91 a6 00 	lds	r24, 0x00A6
    11a6:	8b 77       	andi	r24, 0x7B	; 123
    11a8:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11ac:	20 97       	sbiw	r28, 0x00	; 0
    11ae:	11 f7       	brne	.-60     	; 0x1174 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	0c df       	rcall	.-488    	; 0xfcc <USB_Host_WaitForIOS>
    11b4:	88 23       	and	r24, r24
    11b6:	c9 f4       	brne	.+50     	; 0x11ea <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11b8:	80 91 a9 00 	lds	r24, 0x00A9
    11bc:	80 64       	ori	r24, 0x40	; 64
    11be:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11c2:	80 91 aa 00 	lds	r24, 0x00AA
    11c6:	8f 7c       	andi	r24, 0xCF	; 207
    11c8:	80 61       	ori	r24, 0x10	; 16
    11ca:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11ce:	80 91 a9 00 	lds	r24, 0x00A9
    11d2:	8f 7b       	andi	r24, 0xBF	; 191
    11d4:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	f8 de       	rcall	.-528    	; 0xfcc <USB_Host_WaitForIOS>
    11dc:	88 23       	and	r24, r24
    11de:	29 f4       	brne	.+10     	; 0x11ea <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11e0:	90 91 a6 00 	lds	r25, 0x00A6
    11e4:	9e 77       	andi	r25, 0x7E	; 126
    11e6:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11ea:	90 91 a9 00 	lds	r25, 0x00A9
    11ee:	90 64       	ori	r25, 0x40	; 64
    11f0:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    11f4:	e1 14       	cp	r14, r1
    11f6:	f1 04       	cpc	r15, r1
    11f8:	29 f4       	brne	.+10     	; 0x1204 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    11fa:	90 91 9e 00 	lds	r25, 0x009E
    11fe:	9e 7f       	andi	r25, 0xFE	; 254
    1200:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    120a:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	ff 90       	pop	r15
    1218:	ef 90       	pop	r14
    121a:	08 95       	ret

0000121c <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    121c:	1f 93       	push	r17
    121e:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1220:	10 92 1f 01 	sts	0x011F, r1
    1224:	89 e0       	ldi	r24, 0x09	; 9
    1226:	80 93 20 01 	sts	0x0120, r24
    122a:	10 93 21 01 	sts	0x0121, r17
    122e:	10 92 22 01 	sts	0x0122, r1
    1232:	10 92 24 01 	sts	0x0124, r1
    1236:	10 92 23 01 	sts	0x0123, r1
    123a:	10 92 26 01 	sts	0x0126, r1
    123e:	10 92 25 01 	sts	0x0125, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1242:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	e9 de       	rcall	.-558    	; 0x101e <USB_Host_SendControlRequest>
    124c:	88 23       	and	r24, r24
    124e:	49 f4       	brne	.+18     	; 0x1262 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1250:	10 93 1d 01 	sts	0x011D, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1254:	11 23       	and	r17, r17
    1256:	11 f0       	breq	.+4      	; 0x125c <USB_Host_SetDeviceConfiguration+0x40>
    1258:	9b e0       	ldi	r25, 0x0B	; 11
    125a:	01 c0       	rjmp	.+2      	; 0x125e <USB_Host_SetDeviceConfiguration+0x42>
    125c:	9a e0       	ldi	r25, 0x0A	; 10
    125e:	90 93 27 01 	sts	0x0127, r25
	}

	return ErrorCode;
}
    1262:	1f 91       	pop	r17
    1264:	08 95       	ret

00001266 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1266:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1268:	10 91 a7 00 	lds	r17, 0x00A7
    126c:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    126e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1272:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1276:	c1 da       	rcall	.-2686   	; 0x7fa <USB_Host_ProcessNextHostState>
    1278:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    127c:	1f 91       	pop	r17
    127e:	08 95       	ret

00001280 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1280:	90 91 c8 00 	lds	r25, 0x00C8
    1284:	95 ff       	sbrs	r25, 5
    1286:	fc cf       	rjmp	.-8      	; 0x1280 <Serial_putchar>
				UDR1 = DataByte;
    1288:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	08 95       	ret

00001292 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1292:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1296:	87 ff       	sbrs	r24, 7
    1298:	08 c0       	rjmp	.+16     	; 0x12aa <Serial_getchar+0x18>
    129a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    129e:	87 ff       	sbrs	r24, 7
    12a0:	07 c0       	rjmp	.+14     	; 0x12b0 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    12a2:	20 91 ce 00 	lds	r18, 0x00CE
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    12aa:	2e ef       	ldi	r18, 0xFE	; 254
    12ac:	3f ef       	ldi	r19, 0xFF	; 255
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    12b0:	2f ef       	ldi	r18, 0xFF	; 255
    12b2:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    12b4:	c9 01       	movw	r24, r18
    12b6:	08 95       	ret

000012b8 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    12b8:	fc 01       	movw	r30, r24
	if (!(Stream))
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	51 f4       	brne	.+20     	; 0x12d2 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    12be:	e8 e2       	ldi	r30, 0x28	; 40
    12c0:	f1 e0       	ldi	r31, 0x01	; 1
    12c2:	f0 93 37 01 	sts	0x0137, r31
    12c6:	e0 93 36 01 	sts	0x0136, r30
		stdout = Stream;
    12ca:	f0 93 39 01 	sts	0x0139, r31
    12ce:	e0 93 38 01 	sts	0x0138, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    12d2:	8e e0       	ldi	r24, 0x0E	; 14
    12d4:	df 01       	movw	r26, r30
    12d6:	1d 92       	st	X+, r1
    12d8:	8a 95       	dec	r24
    12da:	e9 f7       	brne	.-6      	; 0x12d6 <Serial_CreateStream+0x1e>
    12dc:	83 e0       	ldi	r24, 0x03	; 3
    12de:	83 83       	std	Z+3, r24	; 0x03
    12e0:	80 e4       	ldi	r24, 0x40	; 64
    12e2:	99 e0       	ldi	r25, 0x09	; 9
    12e4:	91 87       	std	Z+9, r25	; 0x09
    12e6:	80 87       	std	Z+8, r24	; 0x08
    12e8:	89 e4       	ldi	r24, 0x49	; 73
    12ea:	99 e0       	ldi	r25, 0x09	; 9
    12ec:	93 87       	std	Z+11, r25	; 0x0b
    12ee:	82 87       	std	Z+10, r24	; 0x0a
}
    12f0:	08 95       	ret

000012f2 <fputc>:
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	8c 01       	movw	r16, r24
    12fc:	eb 01       	movw	r28, r22
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	81 ff       	sbrs	r24, 1
    1302:	1b c0       	rjmp	.+54     	; 0x133a <fputc+0x48>
    1304:	82 ff       	sbrs	r24, 2
    1306:	0d c0       	rjmp	.+26     	; 0x1322 <fputc+0x30>
    1308:	2e 81       	ldd	r18, Y+6	; 0x06
    130a:	3f 81       	ldd	r19, Y+7	; 0x07
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	9d 81       	ldd	r25, Y+5	; 0x05
    1310:	28 17       	cp	r18, r24
    1312:	39 07       	cpc	r19, r25
    1314:	64 f4       	brge	.+24     	; 0x132e <fputc+0x3c>
    1316:	e8 81       	ld	r30, Y
    1318:	f9 81       	ldd	r31, Y+1	; 0x01
    131a:	01 93       	st	Z+, r16
    131c:	f9 83       	std	Y+1, r31	; 0x01
    131e:	e8 83       	st	Y, r30
    1320:	06 c0       	rjmp	.+12     	; 0x132e <fputc+0x3c>
    1322:	e8 85       	ldd	r30, Y+8	; 0x08
    1324:	f9 85       	ldd	r31, Y+9	; 0x09
    1326:	80 2f       	mov	r24, r16
    1328:	09 95       	icall
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	31 f4       	brne	.+12     	; 0x133a <fputc+0x48>
    132e:	8e 81       	ldd	r24, Y+6	; 0x06
    1330:	9f 81       	ldd	r25, Y+7	; 0x07
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	9f 83       	std	Y+7, r25	; 0x07
    1336:	8e 83       	std	Y+6, r24	; 0x06
    1338:	02 c0       	rjmp	.+4      	; 0x133e <fputc+0x4c>
    133a:	0f ef       	ldi	r16, 0xFF	; 255
    133c:	1f ef       	ldi	r17, 0xFF	; 255
    133e:	c8 01       	movw	r24, r16
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	08 95       	ret

0000134a <printf_P>:
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	fe 01       	movw	r30, r28
    1354:	35 96       	adiw	r30, 0x05	; 5
    1356:	61 91       	ld	r22, Z+
    1358:	71 91       	ld	r23, Z+
    135a:	80 91 38 01 	lds	r24, 0x0138
    135e:	90 91 39 01 	lds	r25, 0x0139
    1362:	dc 01       	movw	r26, r24
    1364:	13 96       	adiw	r26, 0x03	; 3
    1366:	2c 91       	ld	r18, X
    1368:	13 97       	sbiw	r26, 0x03	; 3
    136a:	28 60       	ori	r18, 0x08	; 8
    136c:	13 96       	adiw	r26, 0x03	; 3
    136e:	2c 93       	st	X, r18
    1370:	af 01       	movw	r20, r30
    1372:	42 d0       	rcall	.+132    	; 0x13f8 <vfprintf>
    1374:	e0 91 38 01 	lds	r30, 0x0138
    1378:	f0 91 39 01 	lds	r31, 0x0139
    137c:	23 81       	ldd	r18, Z+3	; 0x03
    137e:	27 7f       	andi	r18, 0xF7	; 247
    1380:	23 83       	std	Z+3, r18	; 0x03
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <puts_P>:
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	8c 01       	movw	r16, r24
    1396:	e0 91 38 01 	lds	r30, 0x0138
    139a:	f0 91 39 01 	lds	r31, 0x0139
    139e:	83 81       	ldd	r24, Z+3	; 0x03
    13a0:	81 ff       	sbrs	r24, 1
    13a2:	20 c0       	rjmp	.+64     	; 0x13e4 <puts_P+0x5c>
    13a4:	c0 e0       	ldi	r28, 0x00	; 0
    13a6:	d0 e0       	ldi	r29, 0x00	; 0
    13a8:	0c c0       	rjmp	.+24     	; 0x13c2 <puts_P+0x3a>
    13aa:	db 01       	movw	r26, r22
    13ac:	18 96       	adiw	r26, 0x08	; 8
    13ae:	ed 91       	ld	r30, X+
    13b0:	fc 91       	ld	r31, X
    13b2:	19 97       	sbiw	r26, 0x09	; 9
    13b4:	09 95       	icall
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	11 f0       	breq	.+4      	; 0x13be <puts_P+0x36>
    13ba:	cf ef       	ldi	r28, 0xFF	; 255
    13bc:	df ef       	ldi	r29, 0xFF	; 255
    13be:	0f 5f       	subi	r16, 0xFF	; 255
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
    13c2:	f8 01       	movw	r30, r16
    13c4:	84 91       	lpm	r24, Z+
    13c6:	60 91 38 01 	lds	r22, 0x0138
    13ca:	70 91 39 01 	lds	r23, 0x0139
    13ce:	88 23       	and	r24, r24
    13d0:	61 f7       	brne	.-40     	; 0x13aa <puts_P+0x22>
    13d2:	db 01       	movw	r26, r22
    13d4:	18 96       	adiw	r26, 0x08	; 8
    13d6:	ed 91       	ld	r30, X+
    13d8:	fc 91       	ld	r31, X
    13da:	19 97       	sbiw	r26, 0x09	; 9
    13dc:	8a e0       	ldi	r24, 0x0A	; 10
    13de:	09 95       	icall
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	11 f0       	breq	.+4      	; 0x13e8 <puts_P+0x60>
    13e4:	cf ef       	ldi	r28, 0xFF	; 255
    13e6:	df ef       	ldi	r29, 0xFF	; 255
    13e8:	ce 01       	movw	r24, r28
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	08 95       	ret

000013f8 <vfprintf>:
    13f8:	2f 92       	push	r2
    13fa:	3f 92       	push	r3
    13fc:	4f 92       	push	r4
    13fe:	5f 92       	push	r5
    1400:	6f 92       	push	r6
    1402:	7f 92       	push	r7
    1404:	8f 92       	push	r8
    1406:	9f 92       	push	r9
    1408:	af 92       	push	r10
    140a:	bf 92       	push	r11
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	2c 97       	sbiw	r28, 0x0c	; 12
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	6c 01       	movw	r12, r24
    142e:	1b 01       	movw	r2, r22
    1430:	8a 01       	movw	r16, r20
    1432:	fc 01       	movw	r30, r24
    1434:	17 82       	std	Z+7, r1	; 0x07
    1436:	16 82       	std	Z+6, r1	; 0x06
    1438:	83 81       	ldd	r24, Z+3	; 0x03
    143a:	81 ff       	sbrs	r24, 1
    143c:	c4 c1       	rjmp	.+904    	; 0x17c6 <vfprintf+0x3ce>
    143e:	2e 01       	movw	r4, r28
    1440:	08 94       	sec
    1442:	41 1c       	adc	r4, r1
    1444:	51 1c       	adc	r5, r1
    1446:	f6 01       	movw	r30, r12
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	f1 01       	movw	r30, r2
    144c:	93 fd       	sbrc	r25, 3
    144e:	85 91       	lpm	r24, Z+
    1450:	93 ff       	sbrs	r25, 3
    1452:	81 91       	ld	r24, Z+
    1454:	1f 01       	movw	r2, r30
    1456:	88 23       	and	r24, r24
    1458:	09 f4       	brne	.+2      	; 0x145c <vfprintf+0x64>
    145a:	b1 c1       	rjmp	.+866    	; 0x17be <vfprintf+0x3c6>
    145c:	85 32       	cpi	r24, 0x25	; 37
    145e:	39 f4       	brne	.+14     	; 0x146e <vfprintf+0x76>
    1460:	93 fd       	sbrc	r25, 3
    1462:	85 91       	lpm	r24, Z+
    1464:	93 ff       	sbrs	r25, 3
    1466:	81 91       	ld	r24, Z+
    1468:	1f 01       	movw	r2, r30
    146a:	85 32       	cpi	r24, 0x25	; 37
    146c:	21 f4       	brne	.+8      	; 0x1476 <vfprintf+0x7e>
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	b6 01       	movw	r22, r12
    1472:	3f df       	rcall	.-386    	; 0x12f2 <fputc>
    1474:	e8 cf       	rjmp	.-48     	; 0x1446 <vfprintf+0x4e>
    1476:	ee 24       	eor	r14, r14
    1478:	ff 24       	eor	r15, r15
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	20 32       	cpi	r18, 0x20	; 32
    147e:	b0 f4       	brcc	.+44     	; 0x14ac <vfprintf+0xb4>
    1480:	8b 32       	cpi	r24, 0x2B	; 43
    1482:	69 f0       	breq	.+26     	; 0x149e <vfprintf+0xa6>
    1484:	8c 32       	cpi	r24, 0x2C	; 44
    1486:	28 f4       	brcc	.+10     	; 0x1492 <vfprintf+0x9a>
    1488:	80 32       	cpi	r24, 0x20	; 32
    148a:	51 f0       	breq	.+20     	; 0x14a0 <vfprintf+0xa8>
    148c:	83 32       	cpi	r24, 0x23	; 35
    148e:	71 f4       	brne	.+28     	; 0x14ac <vfprintf+0xb4>
    1490:	0b c0       	rjmp	.+22     	; 0x14a8 <vfprintf+0xb0>
    1492:	8d 32       	cpi	r24, 0x2D	; 45
    1494:	39 f0       	breq	.+14     	; 0x14a4 <vfprintf+0xac>
    1496:	80 33       	cpi	r24, 0x30	; 48
    1498:	49 f4       	brne	.+18     	; 0x14ac <vfprintf+0xb4>
    149a:	21 60       	ori	r18, 0x01	; 1
    149c:	2c c0       	rjmp	.+88     	; 0x14f6 <vfprintf+0xfe>
    149e:	22 60       	ori	r18, 0x02	; 2
    14a0:	24 60       	ori	r18, 0x04	; 4
    14a2:	29 c0       	rjmp	.+82     	; 0x14f6 <vfprintf+0xfe>
    14a4:	28 60       	ori	r18, 0x08	; 8
    14a6:	27 c0       	rjmp	.+78     	; 0x14f6 <vfprintf+0xfe>
    14a8:	20 61       	ori	r18, 0x10	; 16
    14aa:	25 c0       	rjmp	.+74     	; 0x14f6 <vfprintf+0xfe>
    14ac:	27 fd       	sbrc	r18, 7
    14ae:	2c c0       	rjmp	.+88     	; 0x1508 <vfprintf+0x110>
    14b0:	38 2f       	mov	r19, r24
    14b2:	30 53       	subi	r19, 0x30	; 48
    14b4:	3a 30       	cpi	r19, 0x0A	; 10
    14b6:	98 f4       	brcc	.+38     	; 0x14de <vfprintf+0xe6>
    14b8:	26 ff       	sbrs	r18, 6
    14ba:	08 c0       	rjmp	.+16     	; 0x14cc <vfprintf+0xd4>
    14bc:	8e 2d       	mov	r24, r14
    14be:	88 0f       	add	r24, r24
    14c0:	e8 2e       	mov	r14, r24
    14c2:	ee 0c       	add	r14, r14
    14c4:	ee 0c       	add	r14, r14
    14c6:	e8 0e       	add	r14, r24
    14c8:	e3 0e       	add	r14, r19
    14ca:	15 c0       	rjmp	.+42     	; 0x14f6 <vfprintf+0xfe>
    14cc:	8f 2d       	mov	r24, r15
    14ce:	88 0f       	add	r24, r24
    14d0:	f8 2e       	mov	r15, r24
    14d2:	ff 0c       	add	r15, r15
    14d4:	ff 0c       	add	r15, r15
    14d6:	f8 0e       	add	r15, r24
    14d8:	f3 0e       	add	r15, r19
    14da:	20 62       	ori	r18, 0x20	; 32
    14dc:	0c c0       	rjmp	.+24     	; 0x14f6 <vfprintf+0xfe>
    14de:	8e 32       	cpi	r24, 0x2E	; 46
    14e0:	21 f4       	brne	.+8      	; 0x14ea <vfprintf+0xf2>
    14e2:	26 fd       	sbrc	r18, 6
    14e4:	6c c1       	rjmp	.+728    	; 0x17be <vfprintf+0x3c6>
    14e6:	20 64       	ori	r18, 0x40	; 64
    14e8:	06 c0       	rjmp	.+12     	; 0x14f6 <vfprintf+0xfe>
    14ea:	8c 36       	cpi	r24, 0x6C	; 108
    14ec:	11 f4       	brne	.+4      	; 0x14f2 <vfprintf+0xfa>
    14ee:	20 68       	ori	r18, 0x80	; 128
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <vfprintf+0xfe>
    14f2:	88 36       	cpi	r24, 0x68	; 104
    14f4:	49 f4       	brne	.+18     	; 0x1508 <vfprintf+0x110>
    14f6:	f1 01       	movw	r30, r2
    14f8:	93 fd       	sbrc	r25, 3
    14fa:	85 91       	lpm	r24, Z+
    14fc:	93 ff       	sbrs	r25, 3
    14fe:	81 91       	ld	r24, Z+
    1500:	1f 01       	movw	r2, r30
    1502:	88 23       	and	r24, r24
    1504:	09 f0       	breq	.+2      	; 0x1508 <vfprintf+0x110>
    1506:	ba cf       	rjmp	.-140    	; 0x147c <vfprintf+0x84>
    1508:	98 2f       	mov	r25, r24
    150a:	95 54       	subi	r25, 0x45	; 69
    150c:	93 30       	cpi	r25, 0x03	; 3
    150e:	18 f0       	brcs	.+6      	; 0x1516 <vfprintf+0x11e>
    1510:	90 52       	subi	r25, 0x20	; 32
    1512:	93 30       	cpi	r25, 0x03	; 3
    1514:	28 f4       	brcc	.+10     	; 0x1520 <vfprintf+0x128>
    1516:	0c 5f       	subi	r16, 0xFC	; 252
    1518:	1f 4f       	sbci	r17, 0xFF	; 255
    151a:	ff e3       	ldi	r31, 0x3F	; 63
    151c:	f9 83       	std	Y+1, r31	; 0x01
    151e:	0d c0       	rjmp	.+26     	; 0x153a <vfprintf+0x142>
    1520:	83 36       	cpi	r24, 0x63	; 99
    1522:	31 f0       	breq	.+12     	; 0x1530 <vfprintf+0x138>
    1524:	83 37       	cpi	r24, 0x73	; 115
    1526:	71 f0       	breq	.+28     	; 0x1544 <vfprintf+0x14c>
    1528:	83 35       	cpi	r24, 0x53	; 83
    152a:	09 f0       	breq	.+2      	; 0x152e <vfprintf+0x136>
    152c:	5c c0       	rjmp	.+184    	; 0x15e6 <vfprintf+0x1ee>
    152e:	21 c0       	rjmp	.+66     	; 0x1572 <vfprintf+0x17a>
    1530:	f8 01       	movw	r30, r16
    1532:	80 81       	ld	r24, Z
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	0e 5f       	subi	r16, 0xFE	; 254
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	42 01       	movw	r8, r4
    153c:	71 e0       	ldi	r23, 0x01	; 1
    153e:	a7 2e       	mov	r10, r23
    1540:	b1 2c       	mov	r11, r1
    1542:	15 c0       	rjmp	.+42     	; 0x156e <vfprintf+0x176>
    1544:	62 e0       	ldi	r22, 0x02	; 2
    1546:	66 2e       	mov	r6, r22
    1548:	71 2c       	mov	r7, r1
    154a:	60 0e       	add	r6, r16
    154c:	71 1e       	adc	r7, r17
    154e:	f8 01       	movw	r30, r16
    1550:	80 80       	ld	r8, Z
    1552:	91 80       	ldd	r9, Z+1	; 0x01
    1554:	26 ff       	sbrs	r18, 6
    1556:	03 c0       	rjmp	.+6      	; 0x155e <vfprintf+0x166>
    1558:	6e 2d       	mov	r22, r14
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <vfprintf+0x16a>
    155e:	6f ef       	ldi	r22, 0xFF	; 255
    1560:	7f ef       	ldi	r23, 0xFF	; 255
    1562:	c4 01       	movw	r24, r8
    1564:	2c 87       	std	Y+12, r18	; 0x0c
    1566:	56 d1       	rcall	.+684    	; 0x1814 <strnlen>
    1568:	5c 01       	movw	r10, r24
    156a:	83 01       	movw	r16, r6
    156c:	2c 85       	ldd	r18, Y+12	; 0x0c
    156e:	2f 77       	andi	r18, 0x7F	; 127
    1570:	16 c0       	rjmp	.+44     	; 0x159e <vfprintf+0x1a6>
    1572:	52 e0       	ldi	r21, 0x02	; 2
    1574:	65 2e       	mov	r6, r21
    1576:	71 2c       	mov	r7, r1
    1578:	60 0e       	add	r6, r16
    157a:	71 1e       	adc	r7, r17
    157c:	f8 01       	movw	r30, r16
    157e:	80 80       	ld	r8, Z
    1580:	91 80       	ldd	r9, Z+1	; 0x01
    1582:	26 ff       	sbrs	r18, 6
    1584:	03 c0       	rjmp	.+6      	; 0x158c <vfprintf+0x194>
    1586:	6e 2d       	mov	r22, r14
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <vfprintf+0x198>
    158c:	6f ef       	ldi	r22, 0xFF	; 255
    158e:	7f ef       	ldi	r23, 0xFF	; 255
    1590:	c4 01       	movw	r24, r8
    1592:	2c 87       	std	Y+12, r18	; 0x0c
    1594:	34 d1       	rcall	.+616    	; 0x17fe <strnlen_P>
    1596:	5c 01       	movw	r10, r24
    1598:	2c 85       	ldd	r18, Y+12	; 0x0c
    159a:	20 68       	ori	r18, 0x80	; 128
    159c:	83 01       	movw	r16, r6
    159e:	23 fd       	sbrc	r18, 3
    15a0:	1e c0       	rjmp	.+60     	; 0x15de <vfprintf+0x1e6>
    15a2:	07 c0       	rjmp	.+14     	; 0x15b2 <vfprintf+0x1ba>
    15a4:	80 e2       	ldi	r24, 0x20	; 32
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	b6 01       	movw	r22, r12
    15aa:	2c 87       	std	Y+12, r18	; 0x0c
    15ac:	a2 de       	rcall	.-700    	; 0x12f2 <fputc>
    15ae:	fa 94       	dec	r15
    15b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    15b2:	8f 2d       	mov	r24, r15
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a8 16       	cp	r10, r24
    15b8:	b9 06       	cpc	r11, r25
    15ba:	a0 f3       	brcs	.-24     	; 0x15a4 <vfprintf+0x1ac>
    15bc:	10 c0       	rjmp	.+32     	; 0x15de <vfprintf+0x1e6>
    15be:	f4 01       	movw	r30, r8
    15c0:	27 fd       	sbrc	r18, 7
    15c2:	85 91       	lpm	r24, Z+
    15c4:	27 ff       	sbrs	r18, 7
    15c6:	81 91       	ld	r24, Z+
    15c8:	4f 01       	movw	r8, r30
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	b6 01       	movw	r22, r12
    15ce:	2c 87       	std	Y+12, r18	; 0x0c
    15d0:	90 de       	rcall	.-736    	; 0x12f2 <fputc>
    15d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15d4:	f1 10       	cpse	r15, r1
    15d6:	fa 94       	dec	r15
    15d8:	08 94       	sec
    15da:	a1 08       	sbc	r10, r1
    15dc:	b1 08       	sbc	r11, r1
    15de:	a1 14       	cp	r10, r1
    15e0:	b1 04       	cpc	r11, r1
    15e2:	69 f7       	brne	.-38     	; 0x15be <vfprintf+0x1c6>
    15e4:	e9 c0       	rjmp	.+466    	; 0x17b8 <vfprintf+0x3c0>
    15e6:	84 36       	cpi	r24, 0x64	; 100
    15e8:	11 f0       	breq	.+4      	; 0x15ee <vfprintf+0x1f6>
    15ea:	89 36       	cpi	r24, 0x69	; 105
    15ec:	41 f5       	brne	.+80     	; 0x163e <vfprintf+0x246>
    15ee:	27 ff       	sbrs	r18, 7
    15f0:	08 c0       	rjmp	.+16     	; 0x1602 <vfprintf+0x20a>
    15f2:	f8 01       	movw	r30, r16
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	0c 5f       	subi	r16, 0xFC	; 252
    15fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1600:	09 c0       	rjmp	.+18     	; 0x1614 <vfprintf+0x21c>
    1602:	f8 01       	movw	r30, r16
    1604:	60 81       	ld	r22, Z
    1606:	71 81       	ldd	r23, Z+1	; 0x01
    1608:	88 27       	eor	r24, r24
    160a:	77 fd       	sbrc	r23, 7
    160c:	80 95       	com	r24
    160e:	98 2f       	mov	r25, r24
    1610:	0e 5f       	subi	r16, 0xFE	; 254
    1612:	1f 4f       	sbci	r17, 0xFF	; 255
    1614:	4f e6       	ldi	r20, 0x6F	; 111
    1616:	b4 2e       	mov	r11, r20
    1618:	b2 22       	and	r11, r18
    161a:	97 ff       	sbrs	r25, 7
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <vfprintf+0x238>
    161e:	90 95       	com	r25
    1620:	80 95       	com	r24
    1622:	70 95       	com	r23
    1624:	61 95       	neg	r22
    1626:	7f 4f       	sbci	r23, 0xFF	; 255
    1628:	8f 4f       	sbci	r24, 0xFF	; 255
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	f0 e8       	ldi	r31, 0x80	; 128
    162e:	bf 2a       	or	r11, r31
    1630:	a2 01       	movw	r20, r4
    1632:	2a e0       	ldi	r18, 0x0A	; 10
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	f9 d0       	rcall	.+498    	; 0x182a <__ultoa_invert>
    1638:	78 2e       	mov	r7, r24
    163a:	74 18       	sub	r7, r4
    163c:	44 c0       	rjmp	.+136    	; 0x16c6 <vfprintf+0x2ce>
    163e:	85 37       	cpi	r24, 0x75	; 117
    1640:	31 f4       	brne	.+12     	; 0x164e <vfprintf+0x256>
    1642:	3f ee       	ldi	r19, 0xEF	; 239
    1644:	b3 2e       	mov	r11, r19
    1646:	b2 22       	and	r11, r18
    1648:	2a e0       	ldi	r18, 0x0A	; 10
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	25 c0       	rjmp	.+74     	; 0x1698 <vfprintf+0x2a0>
    164e:	99 ef       	ldi	r25, 0xF9	; 249
    1650:	b9 2e       	mov	r11, r25
    1652:	b2 22       	and	r11, r18
    1654:	8f 36       	cpi	r24, 0x6F	; 111
    1656:	c1 f0       	breq	.+48     	; 0x1688 <vfprintf+0x290>
    1658:	80 37       	cpi	r24, 0x70	; 112
    165a:	20 f4       	brcc	.+8      	; 0x1664 <vfprintf+0x26c>
    165c:	88 35       	cpi	r24, 0x58	; 88
    165e:	09 f0       	breq	.+2      	; 0x1662 <vfprintf+0x26a>
    1660:	ae c0       	rjmp	.+348    	; 0x17be <vfprintf+0x3c6>
    1662:	0d c0       	rjmp	.+26     	; 0x167e <vfprintf+0x286>
    1664:	80 37       	cpi	r24, 0x70	; 112
    1666:	21 f0       	breq	.+8      	; 0x1670 <vfprintf+0x278>
    1668:	88 37       	cpi	r24, 0x78	; 120
    166a:	09 f0       	breq	.+2      	; 0x166e <vfprintf+0x276>
    166c:	a8 c0       	rjmp	.+336    	; 0x17be <vfprintf+0x3c6>
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <vfprintf+0x27c>
    1670:	20 e1       	ldi	r18, 0x10	; 16
    1672:	b2 2a       	or	r11, r18
    1674:	b4 fe       	sbrs	r11, 4
    1676:	0b c0       	rjmp	.+22     	; 0x168e <vfprintf+0x296>
    1678:	84 e0       	ldi	r24, 0x04	; 4
    167a:	b8 2a       	or	r11, r24
    167c:	08 c0       	rjmp	.+16     	; 0x168e <vfprintf+0x296>
    167e:	b4 fe       	sbrs	r11, 4
    1680:	09 c0       	rjmp	.+18     	; 0x1694 <vfprintf+0x29c>
    1682:	e6 e0       	ldi	r30, 0x06	; 6
    1684:	be 2a       	or	r11, r30
    1686:	06 c0       	rjmp	.+12     	; 0x1694 <vfprintf+0x29c>
    1688:	28 e0       	ldi	r18, 0x08	; 8
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	05 c0       	rjmp	.+10     	; 0x1698 <vfprintf+0x2a0>
    168e:	20 e1       	ldi	r18, 0x10	; 16
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <vfprintf+0x2a0>
    1694:	20 e1       	ldi	r18, 0x10	; 16
    1696:	32 e0       	ldi	r19, 0x02	; 2
    1698:	b7 fe       	sbrs	r11, 7
    169a:	08 c0       	rjmp	.+16     	; 0x16ac <vfprintf+0x2b4>
    169c:	f8 01       	movw	r30, r16
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	0c 5f       	subi	r16, 0xFC	; 252
    16a8:	1f 4f       	sbci	r17, 0xFF	; 255
    16aa:	07 c0       	rjmp	.+14     	; 0x16ba <vfprintf+0x2c2>
    16ac:	f8 01       	movw	r30, r16
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 5f       	subi	r16, 0xFE	; 254
    16b8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ba:	a2 01       	movw	r20, r4
    16bc:	b6 d0       	rcall	.+364    	; 0x182a <__ultoa_invert>
    16be:	78 2e       	mov	r7, r24
    16c0:	74 18       	sub	r7, r4
    16c2:	ff e7       	ldi	r31, 0x7F	; 127
    16c4:	bf 22       	and	r11, r31
    16c6:	b6 fe       	sbrs	r11, 6
    16c8:	0b c0       	rjmp	.+22     	; 0x16e0 <vfprintf+0x2e8>
    16ca:	2e ef       	ldi	r18, 0xFE	; 254
    16cc:	b2 22       	and	r11, r18
    16ce:	7e 14       	cp	r7, r14
    16d0:	38 f4       	brcc	.+14     	; 0x16e0 <vfprintf+0x2e8>
    16d2:	b4 fe       	sbrs	r11, 4
    16d4:	07 c0       	rjmp	.+14     	; 0x16e4 <vfprintf+0x2ec>
    16d6:	b2 fc       	sbrc	r11, 2
    16d8:	05 c0       	rjmp	.+10     	; 0x16e4 <vfprintf+0x2ec>
    16da:	8f ee       	ldi	r24, 0xEF	; 239
    16dc:	b8 22       	and	r11, r24
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <vfprintf+0x2ec>
    16e0:	a7 2c       	mov	r10, r7
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <vfprintf+0x2ee>
    16e4:	ae 2c       	mov	r10, r14
    16e6:	8b 2d       	mov	r24, r11
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	b4 fe       	sbrs	r11, 4
    16ec:	0d c0       	rjmp	.+26     	; 0x1708 <vfprintf+0x310>
    16ee:	fe 01       	movw	r30, r28
    16f0:	e7 0d       	add	r30, r7
    16f2:	f1 1d       	adc	r31, r1
    16f4:	20 81       	ld	r18, Z
    16f6:	20 33       	cpi	r18, 0x30	; 48
    16f8:	19 f4       	brne	.+6      	; 0x1700 <vfprintf+0x308>
    16fa:	e9 ee       	ldi	r30, 0xE9	; 233
    16fc:	be 22       	and	r11, r30
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <vfprintf+0x31a>
    1700:	a3 94       	inc	r10
    1702:	b2 fe       	sbrs	r11, 2
    1704:	06 c0       	rjmp	.+12     	; 0x1712 <vfprintf+0x31a>
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <vfprintf+0x318>
    1708:	86 78       	andi	r24, 0x86	; 134
    170a:	90 70       	andi	r25, 0x00	; 0
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	09 f0       	breq	.+2      	; 0x1712 <vfprintf+0x31a>
    1710:	a3 94       	inc	r10
    1712:	8b 2c       	mov	r8, r11
    1714:	99 24       	eor	r9, r9
    1716:	b3 fc       	sbrc	r11, 3
    1718:	13 c0       	rjmp	.+38     	; 0x1740 <vfprintf+0x348>
    171a:	b0 fe       	sbrs	r11, 0
    171c:	0e c0       	rjmp	.+28     	; 0x173a <vfprintf+0x342>
    171e:	af 14       	cp	r10, r15
    1720:	28 f4       	brcc	.+10     	; 0x172c <vfprintf+0x334>
    1722:	e7 2c       	mov	r14, r7
    1724:	ef 0c       	add	r14, r15
    1726:	ea 18       	sub	r14, r10
    1728:	af 2c       	mov	r10, r15
    172a:	07 c0       	rjmp	.+14     	; 0x173a <vfprintf+0x342>
    172c:	e7 2c       	mov	r14, r7
    172e:	05 c0       	rjmp	.+10     	; 0x173a <vfprintf+0x342>
    1730:	80 e2       	ldi	r24, 0x20	; 32
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	b6 01       	movw	r22, r12
    1736:	dd dd       	rcall	.-1094   	; 0x12f2 <fputc>
    1738:	a3 94       	inc	r10
    173a:	af 14       	cp	r10, r15
    173c:	c8 f3       	brcs	.-14     	; 0x1730 <vfprintf+0x338>
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <vfprintf+0x350>
    1740:	af 14       	cp	r10, r15
    1742:	10 f4       	brcc	.+4      	; 0x1748 <vfprintf+0x350>
    1744:	fa 18       	sub	r15, r10
    1746:	01 c0       	rjmp	.+2      	; 0x174a <vfprintf+0x352>
    1748:	ff 24       	eor	r15, r15
    174a:	84 fe       	sbrs	r8, 4
    174c:	0e c0       	rjmp	.+28     	; 0x176a <vfprintf+0x372>
    174e:	80 e3       	ldi	r24, 0x30	; 48
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	b6 01       	movw	r22, r12
    1754:	ce dd       	rcall	.-1124   	; 0x12f2 <fputc>
    1756:	82 fe       	sbrs	r8, 2
    1758:	1d c0       	rjmp	.+58     	; 0x1794 <vfprintf+0x39c>
    175a:	81 fe       	sbrs	r8, 1
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <vfprintf+0x36c>
    175e:	88 e5       	ldi	r24, 0x58	; 88
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	10 c0       	rjmp	.+32     	; 0x1784 <vfprintf+0x38c>
    1764:	88 e7       	ldi	r24, 0x78	; 120
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0d c0       	rjmp	.+26     	; 0x1784 <vfprintf+0x38c>
    176a:	c4 01       	movw	r24, r8
    176c:	86 78       	andi	r24, 0x86	; 134
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	81 f0       	breq	.+32     	; 0x1794 <vfprintf+0x39c>
    1774:	81 fc       	sbrc	r8, 1
    1776:	02 c0       	rjmp	.+4      	; 0x177c <vfprintf+0x384>
    1778:	80 e2       	ldi	r24, 0x20	; 32
    177a:	01 c0       	rjmp	.+2      	; 0x177e <vfprintf+0x386>
    177c:	8b e2       	ldi	r24, 0x2B	; 43
    177e:	b7 fc       	sbrc	r11, 7
    1780:	8d e2       	ldi	r24, 0x2D	; 45
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	b6 01       	movw	r22, r12
    1786:	b5 dd       	rcall	.-1174   	; 0x12f2 <fputc>
    1788:	05 c0       	rjmp	.+10     	; 0x1794 <vfprintf+0x39c>
    178a:	80 e3       	ldi	r24, 0x30	; 48
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	b6 01       	movw	r22, r12
    1790:	b0 dd       	rcall	.-1184   	; 0x12f2 <fputc>
    1792:	ea 94       	dec	r14
    1794:	7e 14       	cp	r7, r14
    1796:	c8 f3       	brcs	.-14     	; 0x178a <vfprintf+0x392>
    1798:	7a 94       	dec	r7
    179a:	f2 01       	movw	r30, r4
    179c:	e7 0d       	add	r30, r7
    179e:	f1 1d       	adc	r31, r1
    17a0:	80 81       	ld	r24, Z
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	b6 01       	movw	r22, r12
    17a6:	a5 dd       	rcall	.-1206   	; 0x12f2 <fputc>
    17a8:	77 20       	and	r7, r7
    17aa:	b1 f7       	brne	.-20     	; 0x1798 <vfprintf+0x3a0>
    17ac:	05 c0       	rjmp	.+10     	; 0x17b8 <vfprintf+0x3c0>
    17ae:	80 e2       	ldi	r24, 0x20	; 32
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	b6 01       	movw	r22, r12
    17b4:	9e dd       	rcall	.-1220   	; 0x12f2 <fputc>
    17b6:	fa 94       	dec	r15
    17b8:	ff 20       	and	r15, r15
    17ba:	c9 f7       	brne	.-14     	; 0x17ae <vfprintf+0x3b6>
    17bc:	44 ce       	rjmp	.-888    	; 0x1446 <vfprintf+0x4e>
    17be:	f6 01       	movw	r30, r12
    17c0:	26 81       	ldd	r18, Z+6	; 0x06
    17c2:	37 81       	ldd	r19, Z+7	; 0x07
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <vfprintf+0x3d2>
    17c6:	2f ef       	ldi	r18, 0xFF	; 255
    17c8:	3f ef       	ldi	r19, 0xFF	; 255
    17ca:	c9 01       	movw	r24, r18
    17cc:	2c 96       	adiw	r28, 0x0c	; 12
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	bf 90       	pop	r11
    17ea:	af 90       	pop	r10
    17ec:	9f 90       	pop	r9
    17ee:	8f 90       	pop	r8
    17f0:	7f 90       	pop	r7
    17f2:	6f 90       	pop	r6
    17f4:	5f 90       	pop	r5
    17f6:	4f 90       	pop	r4
    17f8:	3f 90       	pop	r3
    17fa:	2f 90       	pop	r2
    17fc:	08 95       	ret

000017fe <strnlen_P>:
    17fe:	fc 01       	movw	r30, r24
    1800:	05 90       	lpm	r0, Z+
    1802:	61 50       	subi	r22, 0x01	; 1
    1804:	70 40       	sbci	r23, 0x00	; 0
    1806:	01 10       	cpse	r0, r1
    1808:	d8 f7       	brcc	.-10     	; 0x1800 <strnlen_P+0x2>
    180a:	80 95       	com	r24
    180c:	90 95       	com	r25
    180e:	8e 0f       	add	r24, r30
    1810:	9f 1f       	adc	r25, r31
    1812:	08 95       	ret

00001814 <strnlen>:
    1814:	fc 01       	movw	r30, r24
    1816:	61 50       	subi	r22, 0x01	; 1
    1818:	70 40       	sbci	r23, 0x00	; 0
    181a:	01 90       	ld	r0, Z+
    181c:	01 10       	cpse	r0, r1
    181e:	d8 f7       	brcc	.-10     	; 0x1816 <strnlen+0x2>
    1820:	80 95       	com	r24
    1822:	90 95       	com	r25
    1824:	8e 0f       	add	r24, r30
    1826:	9f 1f       	adc	r25, r31
    1828:	08 95       	ret

0000182a <__ultoa_invert>:
    182a:	fa 01       	movw	r30, r20
    182c:	aa 27       	eor	r26, r26
    182e:	28 30       	cpi	r18, 0x08	; 8
    1830:	51 f1       	breq	.+84     	; 0x1886 <__ultoa_invert+0x5c>
    1832:	20 31       	cpi	r18, 0x10	; 16
    1834:	81 f1       	breq	.+96     	; 0x1896 <__ultoa_invert+0x6c>
    1836:	e8 94       	clt
    1838:	6f 93       	push	r22
    183a:	6e 7f       	andi	r22, 0xFE	; 254
    183c:	6e 5f       	subi	r22, 0xFE	; 254
    183e:	7f 4f       	sbci	r23, 0xFF	; 255
    1840:	8f 4f       	sbci	r24, 0xFF	; 255
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
    1844:	af 4f       	sbci	r26, 0xFF	; 255
    1846:	b1 e0       	ldi	r27, 0x01	; 1
    1848:	3e d0       	rcall	.+124    	; 0x18c6 <__ultoa_invert+0x9c>
    184a:	b4 e0       	ldi	r27, 0x04	; 4
    184c:	3c d0       	rcall	.+120    	; 0x18c6 <__ultoa_invert+0x9c>
    184e:	67 0f       	add	r22, r23
    1850:	78 1f       	adc	r23, r24
    1852:	89 1f       	adc	r24, r25
    1854:	9a 1f       	adc	r25, r26
    1856:	a1 1d       	adc	r26, r1
    1858:	68 0f       	add	r22, r24
    185a:	79 1f       	adc	r23, r25
    185c:	8a 1f       	adc	r24, r26
    185e:	91 1d       	adc	r25, r1
    1860:	a1 1d       	adc	r26, r1
    1862:	6a 0f       	add	r22, r26
    1864:	71 1d       	adc	r23, r1
    1866:	81 1d       	adc	r24, r1
    1868:	91 1d       	adc	r25, r1
    186a:	a1 1d       	adc	r26, r1
    186c:	20 d0       	rcall	.+64     	; 0x18ae <__ultoa_invert+0x84>
    186e:	09 f4       	brne	.+2      	; 0x1872 <__ultoa_invert+0x48>
    1870:	68 94       	set
    1872:	3f 91       	pop	r19
    1874:	2a e0       	ldi	r18, 0x0A	; 10
    1876:	26 9f       	mul	r18, r22
    1878:	11 24       	eor	r1, r1
    187a:	30 19       	sub	r19, r0
    187c:	30 5d       	subi	r19, 0xD0	; 208
    187e:	31 93       	st	Z+, r19
    1880:	de f6       	brtc	.-74     	; 0x1838 <__ultoa_invert+0xe>
    1882:	cf 01       	movw	r24, r30
    1884:	08 95       	ret
    1886:	46 2f       	mov	r20, r22
    1888:	47 70       	andi	r20, 0x07	; 7
    188a:	40 5d       	subi	r20, 0xD0	; 208
    188c:	41 93       	st	Z+, r20
    188e:	b3 e0       	ldi	r27, 0x03	; 3
    1890:	0f d0       	rcall	.+30     	; 0x18b0 <__ultoa_invert+0x86>
    1892:	c9 f7       	brne	.-14     	; 0x1886 <__ultoa_invert+0x5c>
    1894:	f6 cf       	rjmp	.-20     	; 0x1882 <__ultoa_invert+0x58>
    1896:	46 2f       	mov	r20, r22
    1898:	4f 70       	andi	r20, 0x0F	; 15
    189a:	40 5d       	subi	r20, 0xD0	; 208
    189c:	4a 33       	cpi	r20, 0x3A	; 58
    189e:	18 f0       	brcs	.+6      	; 0x18a6 <__ultoa_invert+0x7c>
    18a0:	49 5d       	subi	r20, 0xD9	; 217
    18a2:	31 fd       	sbrc	r19, 1
    18a4:	40 52       	subi	r20, 0x20	; 32
    18a6:	41 93       	st	Z+, r20
    18a8:	02 d0       	rcall	.+4      	; 0x18ae <__ultoa_invert+0x84>
    18aa:	a9 f7       	brne	.-22     	; 0x1896 <__ultoa_invert+0x6c>
    18ac:	ea cf       	rjmp	.-44     	; 0x1882 <__ultoa_invert+0x58>
    18ae:	b4 e0       	ldi	r27, 0x04	; 4
    18b0:	a6 95       	lsr	r26
    18b2:	97 95       	ror	r25
    18b4:	87 95       	ror	r24
    18b6:	77 95       	ror	r23
    18b8:	67 95       	ror	r22
    18ba:	ba 95       	dec	r27
    18bc:	c9 f7       	brne	.-14     	; 0x18b0 <__ultoa_invert+0x86>
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	61 05       	cpc	r22, r1
    18c2:	71 05       	cpc	r23, r1
    18c4:	08 95       	ret
    18c6:	9b 01       	movw	r18, r22
    18c8:	ac 01       	movw	r20, r24
    18ca:	0a 2e       	mov	r0, r26
    18cc:	06 94       	lsr	r0
    18ce:	57 95       	ror	r21
    18d0:	47 95       	ror	r20
    18d2:	37 95       	ror	r19
    18d4:	27 95       	ror	r18
    18d6:	ba 95       	dec	r27
    18d8:	c9 f7       	brne	.-14     	; 0x18cc <__ultoa_invert+0xa2>
    18da:	62 0f       	add	r22, r18
    18dc:	73 1f       	adc	r23, r19
    18de:	84 1f       	adc	r24, r20
    18e0:	95 1f       	adc	r25, r21
    18e2:	a0 1d       	adc	r26, r0
    18e4:	08 95       	ret

000018e6 <_exit>:
    18e6:	f8 94       	cli

000018e8 <__stop_program>:
    18e8:	ff cf       	rjmp	.-2      	; 0x18e8 <__stop_program>
