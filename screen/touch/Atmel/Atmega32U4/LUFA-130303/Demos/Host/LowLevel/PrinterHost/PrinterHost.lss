
PrinterHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00001bea  00001c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080013a  0080013a  00001cb8  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00001cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ddb  00000000  00000000  00003fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000380  00000000  00000000  00004da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008e4  00000000  00000000  00005123  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005090  00000000  00000000  00005a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001750  00000000  00000000  0000aa97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004773  00000000  00000000  0000c1e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000540  00000000  00000000  0001095c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000025dc  00000000  00000000  00010e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002db8  00000000  00000000  00013478  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000a52  00000000  00000000  00016230  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000458  00000000  00000000  00016c82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	b2 c1       	rjmp	.+868    	; 0x366 <__ctors_end>
       2:	00 00       	nop
       4:	ce c1       	rjmp	.+924    	; 0x3a2 <__bad_interrupt>
       6:	00 00       	nop
       8:	cc c1       	rjmp	.+920    	; 0x3a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ca c1       	rjmp	.+916    	; 0x3a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c1       	rjmp	.+912    	; 0x3a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c1       	rjmp	.+908    	; 0x3a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c1       	rjmp	.+904    	; 0x3a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c1       	rjmp	.+900    	; 0x3a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c1       	rjmp	.+896    	; 0x3a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c1       	rjmp	.+892    	; 0x3a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c7       	rjmp	.+4068   	; 0x100e <__vector_10>
      2a:	00 00       	nop
      2c:	ba c1       	rjmp	.+884    	; 0x3a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c1       	rjmp	.+880    	; 0x3a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c1       	rjmp	.+876    	; 0x3a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	b4 c1       	rjmp	.+872    	; 0x3a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c1       	rjmp	.+868    	; 0x3a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c1       	rjmp	.+864    	; 0x3a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c1       	rjmp	.+860    	; 0x3a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	ac c1       	rjmp	.+856    	; 0x3a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c1       	rjmp	.+848    	; 0x3a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	a6 c1       	rjmp	.+844    	; 0x3a2 <__bad_interrupt>
      56:	00 00       	nop
      58:	a4 c1       	rjmp	.+840    	; 0x3a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a2 c1       	rjmp	.+836    	; 0x3a2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a0 c1       	rjmp	.+832    	; 0x3a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	9e c1       	rjmp	.+828    	; 0x3a2 <__bad_interrupt>
      66:	00 00       	nop
      68:	9c c1       	rjmp	.+824    	; 0x3a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9a c1       	rjmp	.+820    	; 0x3a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c1       	rjmp	.+816    	; 0x3a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c1       	rjmp	.+812    	; 0x3a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c1       	rjmp	.+808    	; 0x3a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c1       	rjmp	.+804    	; 0x3a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	90 c1       	rjmp	.+800    	; 0x3a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c1       	rjmp	.+796    	; 0x3a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c1       	rjmp	.+792    	; 0x3a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8a c1       	rjmp	.+788    	; 0x3a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c1       	rjmp	.+784    	; 0x3a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	86 c1       	rjmp	.+780    	; 0x3a2 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4324>:
      98:	54 65 73 74 20 50 61 67 65 20 53 65 6e 74 2e 0d     Test Page Sent..
      a8:	0a 00                                               ..

000000aa <__c.4322>:
      aa:	1b 5b 33 31 6d 45 72 72 6f 72 20 53 65 6e 64 69     .[31mError Sendi
      ba:	6e 67 20 54 65 73 74 20 50 61 67 65 2e 0d 0a 20     ng Test Page... 
      ca:	2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25     -- Error Code: %
      da:	64 0d 0a 1b 5b 33 37 6d 00                          d...[37m.

000000e3 <__c.4320>:
      e3:	53 65 6e 64 69 6e 67 20 54 65 73 74 20 50 61 67     Sending Test Pag
      f3:	65 20 28 25 64 20 62 79 74 65 73 29 2e 2e 2e 0d     e (%d bytes)....
     103:	0a 00                                               ..

00000105 <__c.4312>:
     105:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     115:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     125:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     135:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     145:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     155:	1b 5b 33 37 6d 00                                   .[37m.

0000015b <__c.4305>:
     15b:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     16b:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     17b:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000018a <__c.4300>:
     18a:	50 72 69 6e 74 65 72 20 45 6e 75 6d 65 72 61 74     Printer Enumerat
     19a:	65 64 2e 0d 0a 00                                   ed....

000001a0 <__c.4298>:
     1a0:	50 72 69 6e 74 65 72 20 44 65 76 69 63 65 20 49     Printer Device I
     1b0:	44 3a 20 25 73 0d 0a 00                             D: %s...

000001b8 <__c.4296>:
     1b8:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1c8:	6f 72 20 28 47 65 74 20 44 65 76 69 63 65 20 49     or (Get Device I
     1d8:	44 29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     D)... -- Error C
     1e8:	6f 64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00        ode: %d...[37m.

000001f7 <__c.4293>:
     1f7:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     207:	65 20 49 44 2e 2e 2e 0d 0a 00                       e ID......

00000211 <__c.4291>:
     211:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     221:	6f 72 20 28 53 65 74 20 49 6e 74 65 72 66 61 63     or (Set Interfac
     231:	65 29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     e)... -- Error C
     241:	6f 64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00        ode: %d...[37m.

00000250 <__c.4289>:
     250:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     260:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     270:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     280:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     290:	37 6d 00                                            7m.

00000293 <__c.4287>:
     293:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     2a3:	25 64 0d 0a 00                                      %d...

000002a8 <__c.4285>:
     2a8:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     2b8:	69 63 65 2e 0d 0a 00                                ice....

000002bf <__c.4283>:
     2bf:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     2cf:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     2df:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000002e9 <__c.4280>:
     2e9:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     2f9:	61 74 61 2e 0d 0a 00                                ata....

00000300 <__c.4275>:
     300:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     310:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     320:	00                                                  .

00000321 <__c.4270>:
     321:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     331:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000033e <__c.4261>:
     33e:	1b 5b 33 36 6d 50 72 69 6e 74 65 72 20 48 6f 73     .[36mPrinter Hos
     34e:	74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d     t Demo running..
     35e:	0a 1b 5b 33 37 6d 00 00                             ..[37m..

00000366 <__ctors_end>:
     366:	11 24       	eor	r1, r1
     368:	1f be       	out	0x3f, r1	; 63
     36a:	cf ef       	ldi	r28, 0xFF	; 255
     36c:	d0 e2       	ldi	r29, 0x20	; 32
     36e:	de bf       	out	0x3e, r29	; 62
     370:	cd bf       	out	0x3d, r28	; 61

00000372 <__do_copy_data>:
     372:	11 e0       	ldi	r17, 0x01	; 1
     374:	a0 e0       	ldi	r26, 0x00	; 0
     376:	b1 e0       	ldi	r27, 0x01	; 1
     378:	ea ee       	ldi	r30, 0xEA	; 234
     37a:	fb e1       	ldi	r31, 0x1B	; 27
     37c:	00 e0       	ldi	r16, 0x00	; 0
     37e:	0b bf       	out	0x3b, r16	; 59
     380:	02 c0       	rjmp	.+4      	; 0x386 <__do_copy_data+0x14>
     382:	07 90       	elpm	r0, Z+
     384:	0d 92       	st	X+, r0
     386:	aa 33       	cpi	r26, 0x3A	; 58
     388:	b1 07       	cpc	r27, r17
     38a:	d9 f7       	brne	.-10     	; 0x382 <__do_copy_data+0x10>

0000038c <__do_clear_bss>:
     38c:	11 e0       	ldi	r17, 0x01	; 1
     38e:	aa e3       	ldi	r26, 0x3A	; 58
     390:	b1 e0       	ldi	r27, 0x01	; 1
     392:	01 c0       	rjmp	.+2      	; 0x396 <.do_clear_bss_start>

00000394 <.do_clear_bss_loop>:
     394:	1d 92       	st	X+, r1

00000396 <.do_clear_bss_start>:
     396:	ae 35       	cpi	r26, 0x5E	; 94
     398:	b1 07       	cpc	r27, r17
     39a:	e1 f7       	brne	.-8      	; 0x394 <.do_clear_bss_loop>
     39c:	97 d1       	rcall	.+814    	; 0x6cc <main>
     39e:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	2e ce       	rjmp	.-932    	; 0x0 <__vectors>

000003a4 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3a4:	9b b1       	in	r25, 0x0b	; 11
     3a6:	9f 70       	andi	r25, 0x0F	; 15
     3a8:	98 2b       	or	r25, r24
     3aa:	9b b9       	out	0x0b, r25	; 11
			}
     3ac:	08 95       	ret

000003ae <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3ae:	84 b7       	in	r24, 0x34	; 52
     3b0:	87 7f       	andi	r24, 0xF7	; 247
     3b2:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3b4:	28 e1       	ldi	r18, 0x18	; 24
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	20 93 60 00 	sts	0x0060, r18
     3be:	10 92 60 00 	sts	0x0060, r1
     3c2:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	80 e8       	ldi	r24, 0x80	; 128
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	80 93 61 00 	sts	0x0061, r24
     3d0:	90 93 61 00 	sts	0x0061, r25
     3d4:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3d6:	83 e3       	ldi	r24, 0x33	; 51
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	90 93 cd 00 	sts	0x00CD, r25
     3de:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3e2:	86 e0       	ldi	r24, 0x06	; 6
     3e4:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3e8:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3ec:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     3f0:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     3f2:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     3f4:	8a b1       	in	r24, 0x0a	; 10
     3f6:	80 6f       	ori	r24, 0xF0	; 240
     3f8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3fa:	8b b1       	in	r24, 0x0b	; 11
     3fc:	8f 70       	andi	r24, 0x0F	; 15
     3fe:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     400:	eb d5       	rcall	.+3030   	; 0xfd8 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <Serial_CreateStream>

0000040a <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     40a:	81 e2       	ldi	r24, 0x21	; 33
     40c:	93 e0       	ldi	r25, 0x03	; 3
     40e:	0e 94 0f 0b 	call	0x161e	; 0x161e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     412:	80 ea       	ldi	r24, 0xA0	; 160
}
     414:	c7 cf       	rjmp	.-114    	; 0x3a4 <LEDs_SetAllLEDs>

00000416 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	0e 94 0f 0b 	call	0x161e	; 0x161e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     41e:	80 e1       	ldi	r24, 0x10	; 16
}
     420:	c1 cf       	rjmp	.-126    	; 0x3a4 <LEDs_SetAllLEDs>

00000422 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	df 93       	push	r29
     428:	cf 93       	push	r28
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	cc 52       	subi	r28, 0x2C	; 44
     430:	d1 40       	sbci	r29, 0x01	; 1
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
	puts_P(PSTR("Getting Config Data.\r\n"));
     43c:	89 ee       	ldi	r24, 0xE9	; 233
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	0e 94 0f 0b 	call	0x161e	; 0x161e <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     444:	6f d1       	rcall	.+734    	; 0x724 <ProcessConfigurationDescriptor>
     446:	08 2f       	mov	r16, r24
     448:	88 23       	and	r24, r24
     44a:	01 f1       	breq	.+64     	; 0x48c <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
	{
		if (ErrorCode == ControlError)
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	19 f4       	brne	.+6      	; 0x456 <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     450:	8f eb       	ldi	r24, 0xBF	; 191
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	02 c0       	rjmp	.+4      	; 0x45a <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     456:	88 ea       	ldi	r24, 0xA8	; 168
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	0e 94 0f 0b 	call	0x161e	; 0x161e <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n"), ErrorCode);
     45e:	00 d0       	rcall	.+0      	; 0x460 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
     460:	00 d0       	rcall	.+0      	; 0x462 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     462:	ed b7       	in	r30, 0x3d	; 61
     464:	fe b7       	in	r31, 0x3e	; 62
     466:	31 96       	adiw	r30, 0x01	; 1
     468:	23 e9       	ldi	r18, 0x93	; 147
     46a:	32 e0       	ldi	r19, 0x02	; 2
     46c:	ad b7       	in	r26, 0x3d	; 61
     46e:	be b7       	in	r27, 0x3e	; 62
     470:	12 96       	adiw	r26, 0x02	; 2
     472:	3c 93       	st	X, r19
     474:	2e 93       	st	-X, r18
     476:	11 97       	sbiw	r26, 0x01	; 1
     478:	02 83       	std	Z+2, r16	; 0x02
     47a:	13 82       	std	Z+3, r1	; 0x03
     47c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	80 e9       	ldi	r24, 0x90	; 144
     48a:	62 c0       	rjmp	.+196    	; 0x550 <EVENT_USB_Host_DeviceEnumerationComplete+0x12e>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <USB_Host_SetDeviceConfiguration>
     492:	88 23       	and	r24, r24
     494:	79 f0       	breq	.+30     	; 0x4b4 <EVENT_USB_Host_DeviceEnumerationComplete+0x92>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     496:	00 d0       	rcall	.+0      	; 0x498 <EVENT_USB_Host_DeviceEnumerationComplete+0x76>
     498:	00 d0       	rcall	.+0      	; 0x49a <EVENT_USB_Host_DeviceEnumerationComplete+0x78>
     49a:	ed b7       	in	r30, 0x3d	; 61
     49c:	fe b7       	in	r31, 0x3e	; 62
     49e:	31 96       	adiw	r30, 0x01	; 1
     4a0:	20 e5       	ldi	r18, 0x50	; 80
     4a2:	32 e0       	ldi	r19, 0x02	; 2
     4a4:	ad b7       	in	r26, 0x3d	; 61
     4a6:	be b7       	in	r27, 0x3e	; 62
     4a8:	12 96       	adiw	r26, 0x02	; 2
     4aa:	3c 93       	st	X, r19
     4ac:	2e 93       	st	-X, r18
     4ae:	11 97       	sbiw	r26, 0x01	; 1
     4b0:	82 83       	std	Z+2, r24	; 0x02
     4b2:	e3 cf       	rjmp	.-58     	; 0x47a <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
		return;
	}

	/* Some printers use alternate settings to determine the communication protocol used - if so, send a SetInterface
	 * request to switch to the interface alternate setting with the Bidirectional protocol */
	if (PrinterAltSetting)
     4b4:	60 91 3d 01 	lds	r22, 0x013D
     4b8:	66 23       	and	r22, r22
     4ba:	71 f0       	breq	.+28     	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete+0xb6>
	{
		if ((ErrorCode = USB_Host_SetInterfaceAltSetting(PrinterInterfaceNumber, PrinterAltSetting)) != HOST_SENDCONTROL_Successful)
     4bc:	80 91 3e 01 	lds	r24, 0x013E
     4c0:	0e 94 82 0a 	call	0x1504	; 0x1504 <USB_Host_SetInterfaceAltSetting>
     4c4:	88 23       	and	r24, r24
     4c6:	41 f0       	breq	.+16     	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete+0xb6>
		{
			printf_P(PSTR(ESC_FG_RED "Control Error (Set Interface).\r\n"
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <EVENT_USB_Host_DeviceEnumerationComplete+0xa8>
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <EVENT_USB_Host_DeviceEnumerationComplete+0xaa>
     4cc:	ed b7       	in	r30, 0x3d	; 61
     4ce:	fe b7       	in	r31, 0x3e	; 62
     4d0:	31 96       	adiw	r30, 0x01	; 1
     4d2:	21 e1       	ldi	r18, 0x11	; 17
     4d4:	32 e0       	ldi	r19, 0x02	; 2
     4d6:	14 c0       	rjmp	.+40     	; 0x500 <EVENT_USB_Host_DeviceEnumerationComplete+0xde>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("Retrieving Device ID...\r\n"));
     4d8:	87 ef       	ldi	r24, 0xF7	; 247
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 0f 0b 	call	0x161e	; 0x161e <puts_P>

	char DeviceIDString[300];
	if ((ErrorCode = Printer_GetDeviceID(DeviceIDString, sizeof(DeviceIDString))) != HOST_SENDCONTROL_Successful)
     4e0:	8e 01       	movw	r16, r28
     4e2:	0f 5f       	subi	r16, 0xFF	; 255
     4e4:	1f 4f       	sbci	r17, 0xFF	; 255
     4e6:	c8 01       	movw	r24, r16
     4e8:	6c e2       	ldi	r22, 0x2C	; 44
     4ea:	71 e0       	ldi	r23, 0x01	; 1
     4ec:	cb d1       	rcall	.+918    	; 0x884 <Printer_GetDeviceID>
     4ee:	88 23       	and	r24, r24
     4f0:	d1 f0       	breq	.+52     	; 0x526 <EVENT_USB_Host_DeviceEnumerationComplete+0x104>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Get Device ID).\r\n"
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <EVENT_USB_Host_DeviceEnumerationComplete+0xd2>
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <EVENT_USB_Host_DeviceEnumerationComplete+0xd4>
     4f6:	ed b7       	in	r30, 0x3d	; 61
     4f8:	fe b7       	in	r31, 0x3e	; 62
     4fa:	31 96       	adiw	r30, 0x01	; 1
     4fc:	28 eb       	ldi	r18, 0xB8	; 184
     4fe:	31 e0       	ldi	r19, 0x01	; 1
     500:	ad b7       	in	r26, 0x3d	; 61
     502:	be b7       	in	r27, 0x3e	; 62
     504:	12 96       	adiw	r26, 0x02	; 2
     506:	3c 93       	st	X, r19
     508:	2e 93       	st	-X, r18
     50a:	11 97       	sbiw	r26, 0x01	; 1
     50c:	82 83       	std	Z+2, r24	; 0x02
     50e:	13 82       	std	Z+3, r1	; 0x03
     510:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <printf_P>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	80 e9       	ldi	r24, 0x90	; 144
     51e:	42 df       	rcall	.-380    	; 0x3a4 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	cb d7       	rcall	.+3990   	; 0x14ba <USB_Host_SetDeviceConfiguration>
		return;
     524:	16 c0       	rjmp	.+44     	; 0x552 <EVENT_USB_Host_DeviceEnumerationComplete+0x130>
	}

	printf_P(PSTR("Printer Device ID: %s\r\n"), DeviceIDString);
     526:	00 d0       	rcall	.+0      	; 0x528 <EVENT_USB_Host_DeviceEnumerationComplete+0x106>
     528:	00 d0       	rcall	.+0      	; 0x52a <EVENT_USB_Host_DeviceEnumerationComplete+0x108>
     52a:	80 ea       	ldi	r24, 0xA0	; 160
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	ed b7       	in	r30, 0x3d	; 61
     530:	fe b7       	in	r31, 0x3e	; 62
     532:	92 83       	std	Z+2, r25	; 0x02
     534:	81 83       	std	Z+1, r24	; 0x01
     536:	14 83       	std	Z+4, r17	; 0x04
     538:	03 83       	std	Z+3, r16	; 0x03
     53a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <printf_P>

	puts_P(PSTR("Printer Enumerated.\r\n"));
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	8a e8       	ldi	r24, 0x8A	; 138
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 0f 0b 	call	0x161e	; 0x161e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     54e:	80 e6       	ldi	r24, 0x60	; 96
     550:	29 df       	rcall	.-430    	; 0x3a4 <LEDs_SetAllLEDs>
}
     552:	c4 5d       	subi	r28, 0xD4	; 212
     554:	de 4f       	sbci	r29, 0xFE	; 254
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	cf 91       	pop	r28
     562:	df 91       	pop	r29
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	08 95       	ret

0000056a <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	0f 92       	push	r0
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     574:	89 83       	std	Y+1, r24	; 0x01
     576:	c8 d4       	rcall	.+2448   	; 0xf08 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     578:	00 d0       	rcall	.+0      	; 0x57a <EVENT_USB_Host_HostError+0x10>
     57a:	00 d0       	rcall	.+0      	; 0x57c <EVENT_USB_Host_HostError+0x12>
     57c:	ed b7       	in	r30, 0x3d	; 61
     57e:	fe b7       	in	r31, 0x3e	; 62
     580:	31 96       	adiw	r30, 0x01	; 1
     582:	2b e5       	ldi	r18, 0x5B	; 91
     584:	31 e0       	ldi	r19, 0x01	; 1
     586:	ad b7       	in	r26, 0x3d	; 61
     588:	be b7       	in	r27, 0x3e	; 62
     58a:	12 96       	adiw	r26, 0x02	; 2
     58c:	3c 93       	st	X, r19
     58e:	2e 93       	st	-X, r18
     590:	11 97       	sbiw	r26, 0x01	; 1
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	82 83       	std	Z+2, r24	; 0x02
     596:	13 82       	std	Z+3, r1	; 0x03
     598:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	80 e9       	ldi	r24, 0x90	; 144
     5a6:	fe de       	rcall	.-516    	; 0x3a4 <LEDs_SetAllLEDs>
     5a8:	ff cf       	rjmp	.-2      	; 0x5a8 <EVENT_USB_Host_HostError+0x3e>

000005aa <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5aa:	90 91 49 01 	lds	r25, 0x0149
     5ae:	2d b7       	in	r18, 0x3d	; 61
     5b0:	3e b7       	in	r19, 0x3e	; 62
     5b2:	28 50       	subi	r18, 0x08	; 8
     5b4:	30 40       	sbci	r19, 0x00	; 0
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	f8 94       	cli
     5ba:	3e bf       	out	0x3e, r19	; 62
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	2d bf       	out	0x3d, r18	; 61
     5c0:	ed b7       	in	r30, 0x3d	; 61
     5c2:	fe b7       	in	r31, 0x3e	; 62
     5c4:	31 96       	adiw	r30, 0x01	; 1
     5c6:	25 e0       	ldi	r18, 0x05	; 5
     5c8:	31 e0       	ldi	r19, 0x01	; 1
     5ca:	ad b7       	in	r26, 0x3d	; 61
     5cc:	be b7       	in	r27, 0x3e	; 62
     5ce:	12 96       	adiw	r26, 0x02	; 2
     5d0:	3c 93       	st	X, r19
     5d2:	2e 93       	st	-X, r18
     5d4:	11 97       	sbiw	r26, 0x01	; 1
     5d6:	82 83       	std	Z+2, r24	; 0x02
     5d8:	13 82       	std	Z+3, r1	; 0x03
     5da:	64 83       	std	Z+4, r22	; 0x04
     5dc:	15 82       	std	Z+5, r1	; 0x05
     5de:	96 83       	std	Z+6, r25	; 0x06
     5e0:	17 82       	std	Z+7, r1	; 0x07
     5e2:	fe d7       	rcall	.+4092   	; 0x15e0 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5e4:	2d b7       	in	r18, 0x3d	; 61
     5e6:	3e b7       	in	r19, 0x3e	; 62
     5e8:	28 5f       	subi	r18, 0xF8	; 248
     5ea:	3f 4f       	sbci	r19, 0xFF	; 255
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	3e bf       	out	0x3e, r19	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	2d bf       	out	0x3d, r18	; 61
     5f6:	80 e9       	ldi	r24, 0x90	; 144
}
     5f8:	d5 ce       	rjmp	.-598    	; 0x3a4 <LEDs_SetAllLEDs>

000005fa <PrinterHost_Task>:

/** Task to manage an enumerated USB printer once connected, to display device
 *  information and print a test PCL page.
 */
void PrinterHost_Task(void)
{
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	df 93       	push	r29
     604:	cf 93       	push	r28
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	a9 97       	sbiw	r28, 0x29	; 41
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     616:	80 91 49 01 	lds	r24, 0x0149
     61a:	8b 30       	cpi	r24, 0x0B	; 11
     61c:	09 f0       	breq	.+2      	; 0x620 <PrinterHost_Task+0x26>
     61e:	49 c0       	rjmp	.+146    	; 0x6b2 <PrinterHost_Task+0xb8>
	  return;

	uint8_t ErrorCode;

	/* Indicate device busy via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     620:	80 e2       	ldi	r24, 0x20	; 32
     622:	c0 de       	rcall	.-640    	; 0x3a4 <LEDs_SetAllLEDs>

	char  TestPageData[]    = "\033%-12345X\033E" "LUFA PCL Test Page" "\033E\033%-12345X";
     624:	de 01       	movw	r26, r28
     626:	11 96       	adiw	r26, 0x01	; 1
     628:	e0 e0       	ldi	r30, 0x00	; 0
     62a:	f1 e0       	ldi	r31, 0x01	; 1
     62c:	89 e2       	ldi	r24, 0x29	; 41
     62e:	01 90       	ld	r0, Z+
     630:	0d 92       	st	X+, r0
     632:	81 50       	subi	r24, 0x01	; 1
     634:	e1 f7       	brne	.-8      	; 0x62e <PrinterHost_Task+0x34>
	uint16_t TestPageLength = strlen(TestPageData);
     636:	7e 01       	movw	r14, r28
     638:	08 94       	sec
     63a:	e1 1c       	adc	r14, r1
     63c:	f1 1c       	adc	r15, r1
     63e:	d7 01       	movw	r26, r14
     640:	0d 90       	ld	r0, X+
     642:	00 20       	and	r0, r0
     644:	e9 f7       	brne	.-6      	; 0x640 <PrinterHost_Task+0x46>
     646:	8d 01       	movw	r16, r26
     648:	01 50       	subi	r16, 0x01	; 1
     64a:	10 40       	sbci	r17, 0x00	; 0
     64c:	0e 19       	sub	r16, r14
     64e:	1f 09       	sbc	r17, r15

	printf_P(PSTR("Sending Test Page (%d bytes)...\r\n"), TestPageLength);
     650:	00 d0       	rcall	.+0      	; 0x652 <PrinterHost_Task+0x58>
     652:	00 d0       	rcall	.+0      	; 0x654 <PrinterHost_Task+0x5a>
     654:	83 ee       	ldi	r24, 0xE3	; 227
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	ed b7       	in	r30, 0x3d	; 61
     65a:	fe b7       	in	r31, 0x3e	; 62
     65c:	92 83       	std	Z+2, r25	; 0x02
     65e:	81 83       	std	Z+1, r24	; 0x01
     660:	14 83       	std	Z+4, r17	; 0x04
     662:	03 83       	std	Z+3, r16	; 0x03
     664:	bd d7       	rcall	.+3962   	; 0x15e0 <printf_P>

	/* Send the test page to the attached printer */
	if ((ErrorCode = Printer_SendData(&TestPageData, TestPageLength)) != PIPE_RWSTREAM_NoError)
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	eb d0       	rcall	.+470    	; 0x84a <Printer_SendData>
     674:	88 23       	and	r24, r24
     676:	b1 f0       	breq	.+44     	; 0x6a4 <PrinterHost_Task+0xaa>
	{
		printf_P(PSTR(ESC_FG_RED "Error Sending Test Page.\r\n"
     678:	00 d0       	rcall	.+0      	; 0x67a <PrinterHost_Task+0x80>
     67a:	00 d0       	rcall	.+0      	; 0x67c <PrinterHost_Task+0x82>
     67c:	ed b7       	in	r30, 0x3d	; 61
     67e:	fe b7       	in	r31, 0x3e	; 62
     680:	31 96       	adiw	r30, 0x01	; 1
     682:	2a ea       	ldi	r18, 0xAA	; 170
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	ad b7       	in	r26, 0x3d	; 61
     688:	be b7       	in	r27, 0x3e	; 62
     68a:	12 96       	adiw	r26, 0x02	; 2
     68c:	3c 93       	st	X, r19
     68e:	2e 93       	st	-X, r18
     690:	11 97       	sbiw	r26, 0x01	; 1
     692:	82 83       	std	Z+2, r24	; 0x02
     694:	13 82       	std	Z+3, r1	; 0x03
     696:	a4 d7       	rcall	.+3912   	; 0x15e0 <printf_P>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	80 e9       	ldi	r24, 0x90	; 144
     6a2:	04 c0       	rjmp	.+8      	; 0x6ac <PrinterHost_Task+0xb2>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Test Page Sent.\r\n"));
     6a4:	88 e9       	ldi	r24, 0x98	; 152
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	ba d7       	rcall	.+3956   	; 0x161e <puts_P>

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     6aa:	80 e6       	ldi	r24, 0x60	; 96
     6ac:	7b de       	rcall	.-778    	; 0x3a4 <LEDs_SetAllLEDs>
	USB_Host_SetDeviceConfiguration(0);
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	04 d7       	rcall	.+3592   	; 0x14ba <USB_Host_SetDeviceConfiguration>
}
     6b2:	a9 96       	adiw	r28, 0x29	; 41
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	cf 91       	pop	r28
     6c0:	df 91       	pop	r29
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	08 95       	ret

000006cc <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     6cc:	70 de       	rcall	.-800    	; 0x3ae <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Printer Host Demo running.\r\n" ESC_FG_WHITE));
     6ce:	8e e3       	ldi	r24, 0x3E	; 62
     6d0:	93 e0       	ldi	r25, 0x03	; 3
     6d2:	a5 d7       	rcall	.+3914   	; 0x161e <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     6d4:	80 e1       	ldi	r24, 0x10	; 16
     6d6:	66 de       	rcall	.-820    	; 0x3a4 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     6d8:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		PrinterHost_Task();
     6da:	8f df       	rcall	.-226    	; 0x5fa <PrinterHost_Task>

		USB_USBTask();
     6dc:	2a d7       	rcall	.+3668   	; 0x1532 <USB_USBTask>
     6de:	fd cf       	rjmp	.-6      	; 0x6da <main+0xe>

000006e0 <DComp_NextBidirectionalPrinterInterface>:
 *  aborting the search if the end of the descriptors is found.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextBidirectionalPrinterInterface(void* CurrentDescriptor)
{
     6e0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
     6e4:	84 30       	cpi	r24, 0x04	; 4
     6e6:	49 f4       	brne	.+18     	; 0x6fa <DComp_NextBidirectionalPrinterInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class, subclass and protocol, break out if correct value interface found */
		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
     6e8:	85 81       	ldd	r24, Z+5	; 0x05
     6ea:	87 30       	cpi	r24, 0x07	; 7
     6ec:	31 f4       	brne	.+12     	; 0x6fa <DComp_NextBidirectionalPrinterInterface+0x1a>
     6ee:	86 81       	ldd	r24, Z+6	; 0x06
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	19 f4       	brne	.+6      	; 0x6fa <DComp_NextBidirectionalPrinterInterface+0x1a>
		    (Interface->SubClass == PRNT_CSCP_PrinterSubclass) &&
     6f4:	87 81       	ldd	r24, Z+7	; 0x07
     6f6:	82 30       	cpi	r24, 0x02	; 2
     6f8:	11 f0       	breq	.+4      	; 0x6fe <DComp_NextBidirectionalPrinterInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	08 95       	ret
		/* Check the descriptor class, subclass and protocol, break out if correct value interface found */
		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
		    (Interface->SubClass == PRNT_CSCP_PrinterSubclass) &&
			(Interface->Protocol == PRNT_CSCP_BidirectionalProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     6fe:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     700:	08 95       	ret

00000702 <DComp_NextPrinterInterfaceBulkDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextPrinterInterfaceBulkDataEndpoint(void* CurrentDescriptor)
{
     702:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     704:	81 81       	ldd	r24, Z+1	; 0x01
     706:	85 30       	cpi	r24, 0x05	; 5
     708:	29 f4       	brne	.+10     	; 0x714 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     70a:	83 81       	ldd	r24, Z+3	; 0x03
     70c:	83 70       	andi	r24, 0x03	; 3
     70e:	82 30       	cpi	r24, 0x02	; 2
     710:	19 f4       	brne	.+6      	; 0x718 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x16>
     712:	04 c0       	rjmp	.+8      	; 0x71c <DComp_NextPrinterInterfaceBulkDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     714:	84 30       	cpi	r24, 0x04	; 4
     716:	21 f0       	breq	.+8      	; 0x720 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	08 95       	ret
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
		  return DESCRIPTOR_SEARCH_Found;
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     720:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     722:	08 95       	ret

00000724 <ProcessConfigurationDescriptor>:
 *  This routine searches for a bidirectional Printer interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref PrinterHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     724:	8f 92       	push	r8
     726:	9f 92       	push	r9
     728:	af 92       	push	r10
     72a:	bf 92       	push	r11
     72c:	cf 92       	push	r12
     72e:	df 92       	push	r13
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	df 93       	push	r29
     73a:	cf 93       	push	r28
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	c4 50       	subi	r28, 0x04	; 4
     742:	d2 40       	sbci	r29, 0x02	; 2
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	de bf       	out	0x3e, r29	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     74e:	ae 01       	movw	r20, r28
     750:	4b 5f       	subi	r20, 0xFB	; 251
     752:	5f 4f       	sbci	r21, 0xFF	; 255
     754:	5a 83       	std	Y+2, r21	; 0x02
     756:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* PrinterInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     758:	83 e0       	ldi	r24, 0x03	; 3
     75a:	a8 2e       	mov	r10, r24
     75c:	b1 2c       	mov	r11, r1
     75e:	ac 0e       	add	r10, r28
     760:	bd 1e       	adc	r11, r29
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	b5 01       	movw	r22, r10
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	32 e0       	ldi	r19, 0x02	; 2
     76a:	e4 d4       	rcall	.+2504   	; 0x1134 <USB_Host_GetDeviceConfigDescriptor>
     76c:	85 30       	cpi	r24, 0x05	; 5
     76e:	09 f4       	brne	.+2      	; 0x772 <ProcessConfigurationDescriptor+0x4e>
     770:	55 c0       	rjmp	.+170    	; 0x81c <ProcessConfigurationDescriptor+0xf8>
     772:	86 30       	cpi	r24, 0x06	; 6
     774:	79 f0       	breq	.+30     	; 0x794 <ProcessConfigurationDescriptor+0x70>
     776:	88 23       	and	r24, r24
     778:	79 f4       	brne	.+30     	; 0x798 <ProcessConfigurationDescriptor+0x74>
     77a:	cc 24       	eor	r12, r12
     77c:	dd 24       	eor	r13, r13
     77e:	00 e0       	ldi	r16, 0x00	; 0
     780:	10 e0       	ldi	r17, 0x00	; 0
     782:	ee 24       	eor	r14, r14
     784:	ff 24       	eor	r15, r15

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     786:	9a 2c       	mov	r9, r10
     788:	8b 2c       	mov	r8, r11
     78a:	5e 01       	movw	r10, r28
     78c:	08 94       	sec
     78e:	a1 1c       	adc	r10, r1
     790:	b1 1c       	adc	r11, r1
     792:	04 c0       	rjmp	.+8      	; 0x79c <ProcessConfigurationDescriptor+0x78>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	45 c0       	rjmp	.+138    	; 0x822 <ProcessConfigurationDescriptor+0xfe>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	43 c0       	rjmp	.+134    	; 0x822 <ProcessConfigurationDescriptor+0xfe>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
     79c:	e1 14       	cp	r14, r1
     79e:	f1 04       	cpc	r15, r1
     7a0:	41 f0       	breq	.+16     	; 0x7b2 <ProcessConfigurationDescriptor+0x8e>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7a2:	89 2d       	mov	r24, r9
     7a4:	98 2d       	mov	r25, r8
     7a6:	b5 01       	movw	r22, r10
     7a8:	41 e8       	ldi	r20, 0x81	; 129
     7aa:	53 e0       	ldi	r21, 0x03	; 3
     7ac:	1a d5       	rcall	.+2612   	; 0x11e2 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
     7ae:	88 23       	and	r24, r24
     7b0:	79 f0       	breq	.+30     	; 0x7d0 <ProcessConfigurationDescriptor+0xac>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextPrinterInterfaceBulkDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Printer interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7b2:	89 2d       	mov	r24, r9
     7b4:	98 2d       	mov	r25, r8
     7b6:	b5 01       	movw	r22, r10
     7b8:	40 e7       	ldi	r20, 0x70	; 112
     7ba:	53 e0       	ldi	r21, 0x03	; 3
     7bc:	12 d5       	rcall	.+2596   	; 0x11e2 <USB_GetNextDescriptorComp>
     7be:	88 23       	and	r24, r24
     7c0:	79 f5       	brne	.+94     	; 0x820 <ProcessConfigurationDescriptor+0xfc>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			PrinterInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     7c2:	e9 80       	ldd	r14, Y+1	; 0x01
     7c4:	fa 80       	ldd	r15, Y+2	; 0x02

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
     7c6:	cc 24       	eor	r12, r12
     7c8:	dd 24       	eor	r13, r13
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			PrinterInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     7ca:	00 e0       	ldi	r16, 0x00	; 0
     7cc:	10 e0       	ldi	r17, 0x00	; 0
     7ce:	e6 cf       	rjmp	.-52     	; 0x79c <ProcessConfigurationDescriptor+0x78>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     7d0:	e9 81       	ldd	r30, Y+1	; 0x01
     7d2:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     7d4:	82 81       	ldd	r24, Z+2	; 0x02
     7d6:	87 ff       	sbrs	r24, 7
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <ProcessConfigurationDescriptor+0xba>
		  DataINEndpoint  = EndpointData;
     7da:	8f 01       	movw	r16, r30
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <ProcessConfigurationDescriptor+0xbc>
		else
		  DataOUTEndpoint = EndpointData;
     7de:	6f 01       	movw	r12, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     7e0:	01 15       	cp	r16, r1
     7e2:	11 05       	cpc	r17, r1
     7e4:	d9 f2       	breq	.-74     	; 0x79c <ProcessConfigurationDescriptor+0x78>
     7e6:	c1 14       	cp	r12, r1
     7e8:	d1 04       	cpc	r13, r1
     7ea:	c1 f2       	breq	.-80     	; 0x79c <ProcessConfigurationDescriptor+0x78>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Save Printer interface details for later use */
	PrinterInterfaceNumber = PrinterInterface->InterfaceNumber;
     7ec:	f7 01       	movw	r30, r14
     7ee:	82 81       	ldd	r24, Z+2	; 0x02
     7f0:	80 93 3e 01 	sts	0x013E, r24
	PrinterAltSetting      = PrinterInterface->AlternateSetting;
     7f4:	83 81       	ldd	r24, Z+3	; 0x03
     7f6:	80 93 3d 01 	sts	0x013D, r24

	/* Configure the Printer data IN pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     7fa:	f8 01       	movw	r30, r16
     7fc:	24 81       	ldd	r18, Z+4	; 0x04
     7fe:	35 81       	ldd	r19, Z+5	; 0x05
     800:	81 e8       	ldi	r24, 0x81	; 129
     802:	62 e0       	ldi	r22, 0x02	; 2
     804:	42 81       	ldd	r20, Z+2	; 0x02
     806:	01 e0       	ldi	r16, 0x01	; 1
     808:	d3 d2       	rcall	.+1446   	; 0xdb0 <Pipe_ConfigurePipe>

	/* Configure the Printer data OUT pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     80a:	f6 01       	movw	r30, r12
     80c:	24 81       	ldd	r18, Z+4	; 0x04
     80e:	35 81       	ldd	r19, Z+5	; 0x05
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	62 e0       	ldi	r22, 0x02	; 2
     814:	42 81       	ldd	r20, Z+2	; 0x02
     816:	cc d2       	rcall	.+1432   	; 0xdb0 <Pipe_ConfigurePipe>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	03 c0       	rjmp	.+6      	; 0x822 <ProcessConfigurationDescriptor+0xfe>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     81c:	82 e0       	ldi	r24, 0x02	; 2
     81e:	01 c0       	rjmp	.+2      	; 0x822 <ProcessConfigurationDescriptor+0xfe>
			/* Get the next Printer interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextBidirectionalPrinterInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     820:	84 e0       	ldi	r24, 0x04	; 4
	/* Configure the Printer data OUT pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     822:	cc 5f       	subi	r28, 0xFC	; 252
     824:	dd 4f       	sbci	r29, 0xFD	; 253
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	cf 91       	pop	r28
     832:	df 91       	pop	r29
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	df 90       	pop	r13
     83e:	cf 90       	pop	r12
     840:	bf 90       	pop	r11
     842:	af 90       	pop	r10
     844:	9f 90       	pop	r9
     846:	8f 90       	pop	r8
     848:	08 95       	ret

0000084a <Printer_SendData>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t Printer_SendData(const void* const PrinterCommands,
                         const uint16_t CommandSize)
{
     84a:	1f 93       	push	r17
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     84c:	22 e0       	ldi	r18, 0x02	; 2
     84e:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     852:	20 91 a9 00 	lds	r18, 0x00A9
     856:	2f 7b       	andi	r18, 0xBF	; 191
     858:	20 93 a9 00 	sts	0x00A9, r18
	uint8_t ErrorCode;

	Pipe_SelectPipe(PRINTER_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PrinterCommands, CommandSize, NULL)) != PIPE_RWSTREAM_NoError)
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	44 d2       	rcall	.+1160   	; 0xcea <Pipe_Write_Stream_LE>
     862:	18 2f       	mov	r17, r24
     864:	88 23       	and	r24, r24
     866:	59 f4       	brne	.+22     	; 0x87e <Printer_SendData+0x34>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     868:	80 91 a6 00 	lds	r24, 0x00A6
     86c:	8b 77       	andi	r24, 0x7B	; 123
     86e:	80 93 a6 00 	sts	0x00A6, r24
	  return ErrorCode;

	Pipe_ClearOUT();

	Pipe_WaitUntilReady();
     872:	1b d3       	rcall	.+1590   	; 0xeaa <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     874:	80 91 a9 00 	lds	r24, 0x00A9
     878:	80 64       	ori	r24, 0x40	; 64
     87a:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     87e:	81 2f       	mov	r24, r17
     880:	1f 91       	pop	r17
     882:	08 95       	ret

00000884 <Printer_GetDeviceID>:
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t Printer_GetDeviceID(char* DeviceIDString,
                            const uint16_t BufferSize)
{
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	df 93       	push	r29
     890:	cf 93       	push	r28
     892:	00 d0       	rcall	.+0      	; 0x894 <Printer_GetDeviceID+0x10>
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	8c 01       	movw	r16, r24
     89a:	7b 01       	movw	r14, r22
	uint8_t  ErrorCode;
	uint16_t DeviceIDStringLength = 0;
     89c:	1a 82       	std	Y+2, r1	; 0x02
     89e:	19 82       	std	Y+1, r1	; 0x01

	USB_ControlRequest = (USB_Request_Header_t)
     8a0:	80 91 3e 01 	lds	r24, 0x013E
     8a4:	91 ea       	ldi	r25, 0xA1	; 161
     8a6:	90 93 41 01 	sts	0x0141, r25
     8aa:	10 92 42 01 	sts	0x0142, r1
     8ae:	10 92 44 01 	sts	0x0144, r1
     8b2:	10 92 43 01 	sts	0x0143, r1
     8b6:	80 93 45 01 	sts	0x0145, r24
     8ba:	10 92 46 01 	sts	0x0146, r1
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	90 93 48 01 	sts	0x0148, r25
     8c6:	80 93 47 01 	sts	0x0147, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8ca:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(DeviceIDStringLength),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(&DeviceIDStringLength)) != HOST_SENDCONTROL_Successful)
     8ce:	ce 01       	movw	r24, r28
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	f4 d4       	rcall	.+2536   	; 0x12bc <USB_Host_SendControlRequest>
     8d4:	d8 2e       	mov	r13, r24
     8d6:	88 23       	and	r24, r24
     8d8:	49 f5       	brne	.+82     	; 0x92c <Printer_GetDeviceID+0xa8>
	  return ErrorCode;

	if (!(DeviceIDStringLength))
     8da:	29 81       	ldd	r18, Y+1	; 0x01
     8dc:	3a 81       	ldd	r19, Y+2	; 0x02
     8de:	21 15       	cp	r18, r1
     8e0:	31 05       	cpc	r19, r1
     8e2:	11 f1       	breq	.+68     	; 0x928 <Printer_GetDeviceID+0xa4>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     8e4:	83 2f       	mov	r24, r19
     8e6:	92 2f       	mov	r25, r18
	{
		DeviceIDString[0] = 0x00;
		return HOST_SENDCONTROL_Successful;
	}

	DeviceIDStringLength = SwapEndian_16(DeviceIDStringLength);
     8e8:	9a 83       	std	Y+2, r25	; 0x02
     8ea:	89 83       	std	Y+1, r24	; 0x01

	if (DeviceIDStringLength > BufferSize)
     8ec:	e8 16       	cp	r14, r24
     8ee:	f9 06       	cpc	r15, r25
     8f0:	10 f4       	brcc	.+4      	; 0x8f6 <Printer_GetDeviceID+0x72>
	  DeviceIDStringLength = BufferSize;
     8f2:	fa 82       	std	Y+2, r15	; 0x02
     8f4:	e9 82       	std	Y+1, r14	; 0x01

	USB_ControlRequest.wLength = DeviceIDStringLength;
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	9a 81       	ldd	r25, Y+2	; 0x02
     8fa:	90 93 48 01 	sts	0x0148, r25
     8fe:	80 93 47 01 	sts	0x0147, r24

	if ((ErrorCode = USB_Host_SendControlRequest(DeviceIDString)) != HOST_SENDCONTROL_Successful)
     902:	c8 01       	movw	r24, r16
     904:	db d4       	rcall	.+2486   	; 0x12bc <USB_Host_SendControlRequest>
     906:	d8 2e       	mov	r13, r24
     908:	88 23       	and	r24, r24
     90a:	81 f4       	brne	.+32     	; 0x92c <Printer_GetDeviceID+0xa8>
	  return ErrorCode;

	/* Move string back two characters to remove the string length value from the start of the array */
	memmove(&DeviceIDString[0], &DeviceIDString[2], DeviceIDStringLength - 2);
     90c:	e9 80       	ldd	r14, Y+1	; 0x01
     90e:	fa 80       	ldd	r15, Y+2	; 0x02
     910:	b8 01       	movw	r22, r16
     912:	6e 5f       	subi	r22, 0xFE	; 254
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	a7 01       	movw	r20, r14
     918:	42 50       	subi	r20, 0x02	; 2
     91a:	50 40       	sbci	r21, 0x00	; 0
     91c:	c8 01       	movw	r24, r16
     91e:	4f d6       	rcall	.+3230   	; 0x15be <memmove>

	DeviceIDString[DeviceIDStringLength - 2] = 0x00;
     920:	0e 0d       	add	r16, r14
     922:	1f 1d       	adc	r17, r15
     924:	02 50       	subi	r16, 0x02	; 2
     926:	10 40       	sbci	r17, 0x00	; 0
     928:	f8 01       	movw	r30, r16
     92a:	10 82       	st	Z, r1

	return HOST_SENDCONTROL_Successful;
}
     92c:	8d 2d       	mov	r24, r13
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	cf 91       	pop	r28
     934:	df 91       	pop	r29
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	08 95       	ret

00000942 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     942:	80 91 9e 00 	lds	r24, 0x009E
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	81 70       	andi	r24, 0x01	; 1
     94a:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     94c:	20 91 a0 00 	lds	r18, 0x00A0
     950:	2d 7f       	andi	r18, 0xFD	; 253
     952:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     956:	20 91 9e 00 	lds	r18, 0x009E
     95a:	22 60       	ori	r18, 0x02	; 2
     95c:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     960:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     964:	21 fd       	sbrc	r18, 1
     966:	fc cf       	rjmp	.-8      	; 0x960 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     968:	20 91 9e 00 	lds	r18, 0x009E
     96c:	21 60       	ori	r18, 0x01	; 1
     96e:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     972:	10 92 3f 01 	sts	0x013F, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     976:	20 91 a0 00 	lds	r18, 0x00A0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	20 72       	andi	r18, 0x20	; 32
     97e:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     980:	40 91 a0 00 	lds	r20, 0x00A0
     984:	4f 7d       	andi	r20, 0xDF	; 223
     986:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     98a:	40 91 9f 00 	lds	r20, 0x009F
     98e:	4f 7d       	andi	r20, 0xDF	; 223
     990:	40 93 9f 00 	sts	0x009F, r20
     994:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     996:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     99a:	55 ff       	sbrs	r21, 5
     99c:	0b c0       	rjmp	.+22     	; 0x9b4 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     99e:	40 91 9f 00 	lds	r20, 0x009F
     9a2:	4f 7d       	andi	r20, 0xDF	; 223
     9a4:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     9a8:	40 91 9f 00 	lds	r20, 0x009F
     9ac:	4d 7f       	andi	r20, 0xFD	; 253
     9ae:	40 93 9f 00 	sts	0x009F, r20
     9b2:	08 c0       	rjmp	.+16     	; 0x9c4 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b4:	ef ec       	ldi	r30, 0xCF	; 207
     9b6:	f7 e0       	ldi	r31, 0x07	; 7
     9b8:	31 97       	sbiw	r30, 0x01	; 1
     9ba:	f1 f7       	brne	.-4      	; 0x9b8 <USB_Host_ResetDevice+0x76>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <USB_Host_ResetDevice+0x7c>
     9be:	00 00       	nop
     9c0:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     9c2:	49 f7       	brne	.-46     	; 0x996 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     9c4:	21 15       	cp	r18, r1
     9c6:	31 05       	cpc	r19, r1
     9c8:	29 f0       	breq	.+10     	; 0x9d4 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     9ca:	20 91 a0 00 	lds	r18, 0x00A0
     9ce:	20 62       	ori	r18, 0x20	; 32
     9d0:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     9d4:	00 97       	sbiw	r24, 0x00	; 0
     9d6:	29 f4       	brne	.+10     	; 0x9e2 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     9d8:	80 91 9e 00 	lds	r24, 0x009E
     9dc:	8e 7f       	andi	r24, 0xFE	; 254
     9de:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     9e2:	80 91 a0 00 	lds	r24, 0x00A0
     9e6:	82 60       	ori	r24, 0x02	; 2
     9e8:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     9ec:	08 95       	ret

000009ee <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     9ee:	40 91 9e 00 	lds	r20, 0x009E
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	41 70       	andi	r20, 0x01	; 1
     9f6:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     9f8:	20 91 a0 00 	lds	r18, 0x00A0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	20 72       	andi	r18, 0x20	; 32
     a00:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     a02:	90 91 a0 00 	lds	r25, 0x00A0
     a06:	9f 7d       	andi	r25, 0xDF	; 223
     a08:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a0c:	90 91 9f 00 	lds	r25, 0x009F
     a10:	9f 7d       	andi	r25, 0xDF	; 223
     a12:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a16:	90 91 9e 00 	lds	r25, 0x009E
     a1a:	91 60       	ori	r25, 0x01	; 1
     a1c:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     a20:	26 c0       	rjmp	.+76     	; 0xa6e <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     a22:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     a26:	95 ff       	sbrs	r25, 5
     a28:	06 c0       	rjmp	.+12     	; 0xa36 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a2a:	90 91 9f 00 	lds	r25, 0x009F
     a2e:	9f 7d       	andi	r25, 0xDF	; 223
     a30:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     a34:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     a36:	90 91 49 01 	lds	r25, 0x0149
     a3a:	91 30       	cpi	r25, 0x01	; 1
     a3c:	d9 f0       	breq	.+54     	; 0xa74 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     a3e:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     a42:	94 ff       	sbrs	r25, 4
     a44:	09 c0       	rjmp	.+18     	; 0xa58 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     a46:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     a4a:	80 91 a6 00 	lds	r24, 0x00A6
     a4e:	8f 7e       	andi	r24, 0xEF	; 239
     a50:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     a54:	82 e0       	ldi	r24, 0x02	; 2

			break;
     a56:	0f c0       	rjmp	.+30     	; 0xa76 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a58:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     a5c:	91 ff       	sbrs	r25, 1
     a5e:	07 c0       	rjmp	.+14     	; 0xa6e <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     a60:	80 91 a6 00 	lds	r24, 0x00A6
     a64:	8d 7f       	andi	r24, 0xFD	; 253
     a66:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     a6a:	83 e0       	ldi	r24, 0x03	; 3

			break;
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     a6e:	88 23       	and	r24, r24
     a70:	c1 f6       	brne	.-80     	; 0xa22 <USB_Host_WaitMS+0x34>
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     a74:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     a76:	41 15       	cp	r20, r1
     a78:	51 05       	cpc	r21, r1
     a7a:	29 f4       	brne	.+10     	; 0xa86 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a7c:	90 91 9e 00 	lds	r25, 0x009E
     a80:	9e 7f       	andi	r25, 0xFE	; 254
     a82:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     a86:	21 15       	cp	r18, r1
     a88:	31 05       	cpc	r19, r1
     a8a:	29 f0       	breq	.+10     	; 0xa96 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a8c:	90 91 a0 00 	lds	r25, 0x00A0
     a90:	90 62       	ori	r25, 0x20	; 32
     a92:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     a96:	08 95       	ret

00000a98 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	df 93       	push	r29
     a9e:	cf 93       	push	r28
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	28 97       	sbiw	r28, 0x08	; 8
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     ab0:	80 91 49 01 	lds	r24, 0x0149
     ab4:	85 30       	cpi	r24, 0x05	; 5
     ab6:	09 f4       	brne	.+2      	; 0xaba <USB_Host_ProcessNextHostState+0x22>
     ab8:	99 c0       	rjmp	.+306    	; 0xbec <USB_Host_ProcessNextHostState+0x154>
     aba:	86 30       	cpi	r24, 0x06	; 6
     abc:	68 f4       	brcc	.+26     	; 0xad8 <USB_Host_ProcessNextHostState+0x40>
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	c1 f1       	breq	.+112    	; 0xb32 <USB_Host_ProcessNextHostState+0x9a>
     ac2:	83 30       	cpi	r24, 0x03	; 3
     ac4:	18 f4       	brcc	.+6      	; 0xacc <USB_Host_ProcessNextHostState+0x34>
     ac6:	88 23       	and	r24, r24
     ac8:	a1 f0       	breq	.+40     	; 0xaf2 <USB_Host_ProcessNextHostState+0x5a>
     aca:	04 c1       	rjmp	.+520    	; 0xcd4 <USB_Host_ProcessNextHostState+0x23c>
     acc:	83 30       	cpi	r24, 0x03	; 3
     ace:	d9 f1       	breq	.+118    	; 0xb46 <USB_Host_ProcessNextHostState+0xae>
     ad0:	84 30       	cpi	r24, 0x04	; 4
     ad2:	09 f0       	breq	.+2      	; 0xad6 <USB_Host_ProcessNextHostState+0x3e>
     ad4:	ff c0       	rjmp	.+510    	; 0xcd4 <USB_Host_ProcessNextHostState+0x23c>
     ad6:	62 c0       	rjmp	.+196    	; 0xb9c <USB_Host_ProcessNextHostState+0x104>
     ad8:	87 30       	cpi	r24, 0x07	; 7
     ada:	09 f4       	brne	.+2      	; 0xade <USB_Host_ProcessNextHostState+0x46>
     adc:	9e c0       	rjmp	.+316    	; 0xc1a <USB_Host_ProcessNextHostState+0x182>
     ade:	87 30       	cpi	r24, 0x07	; 7
     ae0:	08 f4       	brcc	.+2      	; 0xae4 <USB_Host_ProcessNextHostState+0x4c>
     ae2:	8f c0       	rjmp	.+286    	; 0xc02 <USB_Host_ProcessNextHostState+0x16a>
     ae4:	88 30       	cpi	r24, 0x08	; 8
     ae6:	09 f4       	brne	.+2      	; 0xaea <USB_Host_ProcessNextHostState+0x52>
     ae8:	b8 c0       	rjmp	.+368    	; 0xc5a <USB_Host_ProcessNextHostState+0x1c2>
     aea:	89 30       	cpi	r24, 0x09	; 9
     aec:	09 f0       	breq	.+2      	; 0xaf0 <USB_Host_ProcessNextHostState+0x58>
     aee:	f2 c0       	rjmp	.+484    	; 0xcd4 <USB_Host_ProcessNextHostState+0x23c>
     af0:	d9 c0       	rjmp	.+434    	; 0xca4 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     af2:	00 91 3b 01 	lds	r16, 0x013B
     af6:	10 91 3c 01 	lds	r17, 0x013C
     afa:	01 15       	cp	r16, r1
     afc:	11 05       	cpc	r17, r1
     afe:	09 f4       	brne	.+2      	; 0xb02 <USB_Host_ProcessNextHostState+0x6a>
     b00:	e9 c0       	rjmp	.+466    	; 0xcd4 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	74 df       	rcall	.-280    	; 0x9ee <USB_Host_WaitMS>
     b06:	68 2f       	mov	r22, r24
     b08:	88 23       	and	r24, r24
     b0a:	31 f0       	breq	.+12     	; 0xb18 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     b0c:	80 91 3a 01 	lds	r24, 0x013A
     b10:	80 93 49 01 	sts	0x0149, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     b14:	81 e0       	ldi	r24, 0x01	; 1
					break;
     b16:	d2 c0       	rjmp	.+420    	; 0xcbc <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     b18:	01 50       	subi	r16, 0x01	; 1
     b1a:	10 40       	sbci	r17, 0x00	; 0
     b1c:	10 93 3c 01 	sts	0x013C, r17
     b20:	00 93 3b 01 	sts	0x013B, r16
     b24:	01 15       	cp	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	09 f0       	breq	.+2      	; 0xb2c <USB_Host_ProcessNextHostState+0x94>
     b2a:	d4 c0       	rjmp	.+424    	; 0xcd4 <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     b2c:	80 91 3a 01 	lds	r24, 0x013A
     b30:	07 c0       	rjmp	.+14     	; 0xb40 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     b32:	88 ee       	ldi	r24, 0xE8	; 232
     b34:	93 e0       	ldi	r25, 0x03	; 3
     b36:	90 93 3c 01 	sts	0x013C, r25
     b3a:	80 93 3b 01 	sts	0x013B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	80 93 49 01 	sts	0x0149, r24
			break;
     b44:	c7 c0       	rjmp	.+398    	; 0xcd4 <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     b46:	80 91 3b 01 	lds	r24, 0x013B
     b4a:	90 91 3c 01 	lds	r25, 0x013C
     b4e:	9c 01       	movw	r18, r24
     b50:	21 50       	subi	r18, 0x01	; 1
     b52:	30 40       	sbci	r19, 0x00	; 0
     b54:	30 93 3c 01 	sts	0x013C, r19
     b58:	20 93 3b 01 	sts	0x013B, r18
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	39 f0       	breq	.+14     	; 0xb6e <USB_Host_ProcessNextHostState+0xd6>
     b60:	8f ec       	ldi	r24, 0xCF	; 207
     b62:	97 e0       	ldi	r25, 0x07	; 7
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <USB_Host_ProcessNextHostState+0xcc>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <USB_Host_ProcessNextHostState+0xd2>
     b6a:	00 00       	nop
     b6c:	b3 c0       	rjmp	.+358    	; 0xcd4 <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     b6e:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b70:	80 91 d8 00 	lds	r24, 0x00D8
     b74:	80 61       	ori	r24, 0x10	; 16
     b76:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     b7a:	80 91 dd 00 	lds	r24, 0x00DD
     b7e:	8b 7f       	andi	r24, 0xFB	; 251
     b80:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     b84:	80 91 d7 00 	lds	r24, 0x00D7
     b88:	80 61       	ori	r24, 0x10	; 16
     b8a:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     b8e:	80 91 dd 00 	lds	r24, 0x00DD
     b92:	82 60       	ori	r24, 0x02	; 2
     b94:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     b98:	84 e0       	ldi	r24, 0x04	; 4
     b9a:	d2 cf       	rjmp	.-92     	; 0xb40 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     b9c:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     ba0:	80 ff       	sbrs	r24, 0
     ba2:	98 c0       	rjmp	.+304    	; 0xcd4 <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     ba4:	80 91 9f 00 	lds	r24, 0x009F
     ba8:	8e 7f       	andi	r24, 0xFE	; 254
     baa:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bae:	80 91 9f 00 	lds	r24, 0x009F
     bb2:	8d 7f       	andi	r24, 0xFD	; 253
     bb4:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     bb8:	80 91 df 00 	lds	r24, 0x00DF
     bbc:	8d 7f       	andi	r24, 0xFD	; 253
     bbe:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     bc2:	80 91 de 00 	lds	r24, 0x00DE
     bc6:	82 60       	ori	r24, 0x02	; 2
     bc8:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     bcc:	80 91 9e 00 	lds	r24, 0x009E
     bd0:	81 60       	ori	r24, 0x01	; 1
     bd2:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     bd6:	53 d1       	rcall	.+678    	; 0xe7e <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     bd8:	10 92 49 01 	sts	0x0149, r1
     bdc:	84 e6       	ldi	r24, 0x64	; 100
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	90 93 3c 01 	sts	0x013C, r25
     be4:	80 93 3b 01 	sts	0x013B, r24
     be8:	85 e0       	ldi	r24, 0x05	; 5
     bea:	59 c0       	rjmp	.+178    	; 0xc9e <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     bec:	aa de       	rcall	.-684    	; 0x942 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     bee:	10 92 49 01 	sts	0x0149, r1
     bf2:	88 ec       	ldi	r24, 0xC8	; 200
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	90 93 3c 01 	sts	0x013C, r25
     bfa:	80 93 3b 01 	sts	0x013B, r24
     bfe:	86 e0       	ldi	r24, 0x06	; 6
     c00:	4e c0       	rjmp	.+156    	; 0xc9e <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	20 e4       	ldi	r18, 0x40	; 64
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	01 e0       	ldi	r16, 0x01	; 1
     c0e:	d0 d0       	rcall	.+416    	; 0xdb0 <Pipe_ConfigurePipe>
     c10:	88 23       	and	r24, r24
     c12:	09 f4       	brne	.+2      	; 0xc16 <USB_Host_ProcessNextHostState+0x17e>
     c14:	4f c0       	rjmp	.+158    	; 0xcb4 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     c16:	87 e0       	ldi	r24, 0x07	; 7
     c18:	93 cf       	rjmp	.-218    	; 0xb40 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     c1a:	a1 e4       	ldi	r26, 0x41	; 65
     c1c:	b1 e0       	ldi	r27, 0x01	; 1
     c1e:	e1 e3       	ldi	r30, 0x31	; 49
     c20:	f1 e0       	ldi	r31, 0x01	; 1
     c22:	88 e0       	ldi	r24, 0x08	; 8
     c24:	01 90       	ld	r0, Z+
     c26:	0d 92       	st	X+, r0
     c28:	81 50       	subi	r24, 0x01	; 1
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c2c:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	43 d3       	rcall	.+1670   	; 0x12bc <USB_Host_SendControlRequest>
     c36:	68 2f       	mov	r22, r24
     c38:	88 23       	and	r24, r24
     c3a:	09 f0       	breq	.+2      	; 0xc3e <USB_Host_ProcessNextHostState+0x1a6>
     c3c:	3e c0       	rjmp	.+124    	; 0xcba <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     c3e:	88 85       	ldd	r24, Y+8	; 0x08
     c40:	80 93 39 01 	sts	0x0139, r24

			USB_Host_ResetDevice();
     c44:	7e de       	rcall	.-772    	; 0x942 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     c46:	10 92 49 01 	sts	0x0149, r1
     c4a:	88 ec       	ldi	r24, 0xC8	; 200
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	90 93 3c 01 	sts	0x013C, r25
     c52:	80 93 3b 01 	sts	0x013B, r24
     c56:	88 e0       	ldi	r24, 0x08	; 8
     c58:	22 c0       	rjmp	.+68     	; 0xc9e <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     c5a:	20 91 39 01 	lds	r18, 0x0139
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	01 e0       	ldi	r16, 0x01	; 1
     c68:	a3 d0       	rcall	.+326    	; 0xdb0 <Pipe_ConfigurePipe>
     c6a:	88 23       	and	r24, r24
     c6c:	19 f1       	breq	.+70     	; 0xcb4 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     c6e:	a1 e4       	ldi	r26, 0x41	; 65
     c70:	b1 e0       	ldi	r27, 0x01	; 1
     c72:	e9 e2       	ldi	r30, 0x29	; 41
     c74:	f1 e0       	ldi	r31, 0x01	; 1
     c76:	88 e0       	ldi	r24, 0x08	; 8
     c78:	01 90       	ld	r0, Z+
     c7a:	0d 92       	st	X+, r0
     c7c:	81 50       	subi	r24, 0x01	; 1
     c7e:	e1 f7       	brne	.-8      	; 0xc78 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	1b d3       	rcall	.+1590   	; 0x12bc <USB_Host_SendControlRequest>
     c86:	68 2f       	mov	r22, r24
     c88:	88 23       	and	r24, r24
     c8a:	b9 f4       	brne	.+46     	; 0xcba <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     c8c:	10 92 49 01 	sts	0x0149, r1
     c90:	84 e6       	ldi	r24, 0x64	; 100
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	90 93 3c 01 	sts	0x013C, r25
     c98:	80 93 3b 01 	sts	0x013B, r24
     c9c:	89 e0       	ldi	r24, 0x09	; 9
     c9e:	80 93 3a 01 	sts	0x013A, r24
			break;
     ca2:	18 c0       	rjmp	.+48     	; 0xcd4 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     caa:	8a e0       	ldi	r24, 0x0A	; 10
     cac:	80 93 49 01 	sts	0x0149, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     cb0:	b8 db       	rcall	.-2192   	; 0x422 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     cb2:	10 c0       	rjmp	.+32     	; 0xcd4 <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     cb4:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     cb6:	84 e0       	ldi	r24, 0x04	; 4
     cb8:	01 c0       	rjmp	.+2      	; 0xcbc <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     cba:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     cbc:	90 91 49 01 	lds	r25, 0x0149
     cc0:	91 30       	cpi	r25, 0x01	; 1
     cc2:	41 f0       	breq	.+16     	; 0xcd4 <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     cc4:	72 dc       	rcall	.-1820   	; 0x5aa <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cc6:	80 91 dd 00 	lds	r24, 0x00DD
     cca:	81 60       	ori	r24, 0x01	; 1
     ccc:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     cd0:	a2 db       	rcall	.-2236   	; 0x416 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     cd2:	32 d1       	rcall	.+612    	; 0xf38 <USB_ResetInterface>
	}
}
     cd4:	28 96       	adiw	r28, 0x08	; 8
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	08 95       	ret

00000cea <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     cea:	8f 92       	push	r8
     cec:	9f 92       	push	r9
     cee:	bf 92       	push	r11
     cf0:	cf 92       	push	r12
     cf2:	df 92       	push	r13
     cf4:	ef 92       	push	r14
     cf6:	ff 92       	push	r15
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	0f 92       	push	r0
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	e8 2e       	mov	r14, r24
     d08:	4b 01       	movw	r8, r22
     d0a:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d0c:	80 91 aa 00 	lds	r24, 0x00AA
     d10:	8f 7c       	andi	r24, 0xCF	; 207
     d12:	80 62       	ori	r24, 0x20	; 32
     d14:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d18:	99 83       	std	Y+1, r25	; 0x01
     d1a:	c7 d0       	rcall	.+398    	; 0xeaa <Pipe_WaitUntilReady>
     d1c:	b8 2e       	mov	r11, r24
     d1e:	99 81       	ldd	r25, Y+1	; 0x01
     d20:	88 23       	and	r24, r24
     d22:	c1 f5       	brne	.+112    	; 0xd94 <Pipe_Write_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d24:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d26:	01 15       	cp	r16, r1
     d28:	11 05       	cpc	r17, r1
     d2a:	39 f0       	breq	.+14     	; 0xd3a <Pipe_Write_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     d2c:	f8 01       	movw	r30, r16
     d2e:	20 81       	ld	r18, Z
     d30:	31 81       	ldd	r19, Z+1	; 0x01
     d32:	82 1a       	sub	r8, r18
     d34:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d36:	e2 0e       	add	r14, r18
     d38:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d3a:	cc 24       	eor	r12, r12
     d3c:	dd 24       	eor	r13, r13
     d3e:	25 c0       	rjmp	.+74     	; 0xd8a <Pipe_Write_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d40:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d44:	85 fd       	sbrc	r24, 5
     d46:	16 c0       	rjmp	.+44     	; 0xd74 <Pipe_Write_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     d48:	80 91 a6 00 	lds	r24, 0x00A6
     d4c:	8b 77       	andi	r24, 0x7B	; 123
     d4e:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d52:	01 15       	cp	r16, r1
     d54:	11 05       	cpc	r17, r1
     d56:	51 f0       	breq	.+20     	; 0xd6c <Pipe_Write_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     d58:	f8 01       	movw	r30, r16
     d5a:	80 81       	ld	r24, Z
     d5c:	91 81       	ldd	r25, Z+1	; 0x01
     d5e:	8c 0d       	add	r24, r12
     d60:	9d 1d       	adc	r25, r13
     d62:	91 83       	std	Z+1, r25	; 0x01
     d64:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     d66:	24 e0       	ldi	r18, 0x04	; 4
     d68:	b2 2e       	mov	r11, r18
     d6a:	14 c0       	rjmp	.+40     	; 0xd94 <Pipe_Write_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d6c:	9e d0       	rcall	.+316    	; 0xeaa <Pipe_WaitUntilReady>
     d6e:	88 23       	and	r24, r24
     d70:	61 f0       	breq	.+24     	; 0xd8a <Pipe_Write_Stream_LE+0xa0>
     d72:	0f c0       	rjmp	.+30     	; 0xd92 <Pipe_Write_Stream_LE+0xa8>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d74:	f7 01       	movw	r30, r14
     d76:	81 91       	ld	r24, Z+
     d78:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     d7a:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     d7e:	08 94       	sec
     d80:	81 08       	sbc	r8, r1
     d82:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     d84:	08 94       	sec
     d86:	c1 1c       	adc	r12, r1
     d88:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     d8a:	81 14       	cp	r8, r1
     d8c:	91 04       	cpc	r9, r1
     d8e:	c1 f6       	brne	.-80     	; 0xd40 <Pipe_Write_Stream_LE+0x56>
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <Pipe_Write_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d92:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     d94:	8b 2d       	mov	r24, r11
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	cf 90       	pop	r12
     da8:	bf 90       	pop	r11
     daa:	9f 90       	pop	r9
     dac:	8f 90       	pop	r8
     dae:	08 95       	ret

00000db0 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     db0:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     db2:	58 2f       	mov	r21, r24
     db4:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     db6:	87 ff       	sbrs	r24, 7
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <Pipe_ConfigurePipe+0xe>
     dba:	80 e1       	ldi	r24, 0x10	; 16
     dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <Pipe_ConfigurePipe+0x10>
     dbe:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     dc0:	57 30       	cpi	r21, 0x07	; 7
     dc2:	08 f0       	brcs	.+2      	; 0xdc6 <Pipe_ConfigurePipe+0x16>
     dc4:	59 c0       	rjmp	.+178    	; 0xe78 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     dc6:	66 23       	and	r22, r22
     dc8:	09 f4       	brne	.+2      	; 0xdcc <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     dca:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     dcc:	4f 70       	andi	r20, 0x0F	; 15
     dce:	62 95       	swap	r22
     dd0:	66 0f       	add	r22, r22
     dd2:	66 0f       	add	r22, r22
     dd4:	60 7c       	andi	r22, 0xC0	; 192
     dd6:	64 2b       	or	r22, r20
     dd8:	68 2b       	or	r22, r24
     dda:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ddc:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     dde:	84 2f       	mov	r24, r20
     de0:	8f 70       	andi	r24, 0x0F	; 15
     de2:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     de6:	45 17       	cp	r20, r21
     de8:	a1 f4       	brne	.+40     	; 0xe12 <Pipe_ConfigurePipe+0x62>
     dea:	88 e0       	ldi	r24, 0x08	; 8
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	03 c0       	rjmp	.+6      	; 0xdf8 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     df2:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     df8:	82 17       	cp	r24, r18
     dfa:	93 07       	cpc	r25, r19
     dfc:	10 f4       	brcc	.+4      	; 0xe02 <Pipe_ConfigurePipe+0x52>
     dfe:	75 30       	cpi	r23, 0x05	; 5
     e00:	c1 f7       	brne	.-16     	; 0xdf2 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     e02:	87 2f       	mov	r24, r23
     e04:	82 95       	swap	r24
     e06:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     e08:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     e0a:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     e0c:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     e0e:	e0 e0       	ldi	r30, 0x00	; 0
     e10:	08 c0       	rjmp	.+16     	; 0xe22 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     e12:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     e16:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     e1a:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     e1e:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     e22:	81 ff       	sbrs	r24, 1
     e24:	20 c0       	rjmp	.+64     	; 0xe66 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     e26:	90 91 a9 00 	lds	r25, 0x00A9
     e2a:	9e 7f       	andi	r25, 0xFE	; 254
     e2c:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     e30:	90 91 ab 00 	lds	r25, 0x00AB
     e34:	9d 7f       	andi	r25, 0xFD	; 253
     e36:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     e3a:	90 91 a9 00 	lds	r25, 0x00A9
     e3e:	91 60       	ori	r25, 0x01	; 1
     e40:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     e44:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     e48:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     e4c:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     e50:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     e54:	80 91 a9 00 	lds	r24, 0x00A9
     e58:	80 62       	ori	r24, 0x20	; 32
     e5a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     e5e:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     e62:	87 ff       	sbrs	r24, 7
     e64:	09 c0       	rjmp	.+18     	; 0xe78 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     e66:	4f 5f       	subi	r20, 0xFF	; 255
     e68:	47 30       	cpi	r20, 0x07	; 7
     e6a:	09 f0       	breq	.+2      	; 0xe6e <Pipe_ConfigurePipe+0xbe>
     e6c:	b8 cf       	rjmp	.-144    	; 0xdde <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     e6e:	5f 70       	andi	r21, 0x0F	; 15
     e70:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     e78:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     e7a:	0f 91       	pop	r16
     e7c:	08 95       	ret

00000e7e <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     e7e:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	98 2f       	mov	r25, r24
     e86:	9f 70       	andi	r25, 0x0F	; 15
     e88:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     e8c:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     e90:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     e94:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     e98:	90 91 a9 00 	lds	r25, 0x00A9
     e9c:	9e 7f       	andi	r25, 0xFE	; 254
     e9e:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	87 30       	cpi	r24, 0x07	; 7
     ea6:	71 f7       	brne	.-36     	; 0xe84 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     ea8:	08 95       	ret

00000eaa <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     eaa:	80 91 a2 00 	lds	r24, 0x00A2
     eae:	90 91 a3 00 	lds	r25, 0x00A3
}

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     eb2:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     eb4:	20 91 aa 00 	lds	r18, 0x00AA
     eb8:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     eba:	20 31       	cpi	r18, 0x10	; 16
     ebc:	29 f4       	brne	.+10     	; 0xec8 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ebe:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     ec2:	20 ff       	sbrs	r18, 0
     ec4:	05 c0       	rjmp	.+10     	; 0xed0 <Pipe_WaitUntilReady+0x26>
     ec6:	18 c0       	rjmp	.+48     	; 0xef8 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ec8:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     ecc:	22 fd       	sbrc	r18, 2
     ece:	14 c0       	rjmp	.+40     	; 0xef8 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ed0:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ed4:	21 fd       	sbrc	r18, 1
     ed6:	12 c0       	rjmp	.+36     	; 0xefc <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     ed8:	20 91 49 01 	lds	r18, 0x0149
     edc:	21 30       	cpi	r18, 0x01	; 1
     ede:	81 f0       	breq	.+32     	; 0xf00 <Pipe_WaitUntilReady+0x56>
     ee0:	20 91 a2 00 	lds	r18, 0x00A2
     ee4:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ee8:	28 17       	cp	r18, r24
     eea:	39 07       	cpc	r19, r25
     eec:	19 f3       	breq	.-58     	; 0xeb4 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     eee:	44 23       	and	r20, r20
     ef0:	49 f0       	breq	.+18     	; 0xf04 <Pipe_WaitUntilReady+0x5a>
     ef2:	41 50       	subi	r20, 0x01	; 1
     ef4:	c9 01       	movw	r24, r18
     ef6:	de cf       	rjmp	.-68     	; 0xeb4 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     f00:	82 e0       	ldi	r24, 0x02	; 2
     f02:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     f04:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     f06:	08 95       	ret

00000f08 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     f08:	75 d0       	rcall	.+234    	; 0xff4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f0a:	7c d0       	rcall	.+248    	; 0x1004 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     f0c:	e0 ee       	ldi	r30, 0xE0	; 224
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	81 60       	ori	r24, 0x01	; 1
     f14:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     f16:	e8 ed       	ldi	r30, 0xD8	; 216
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8f 77       	andi	r24, 0x7F	; 127
     f1e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f20:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     f22:	a7 ed       	ldi	r26, 0xD7	; 215
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	8c 91       	ld	r24, X
     f28:	8e 7f       	andi	r24, 0xFE	; 254
     f2a:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 7e       	andi	r24, 0xEF	; 239
     f30:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     f32:	10 92 40 01 	sts	0x0140, r1
}
     f36:	08 95       	ret

00000f38 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     f38:	5d d0       	rcall	.+186    	; 0xff4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f3a:	64 d0       	rcall	.+200    	; 0x1004 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     f3c:	80 91 d8 00 	lds	r24, 0x00D8
     f40:	8f 77       	andi	r24, 0x7F	; 127
     f42:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     f46:	80 91 d8 00 	lds	r24, 0x00D8
     f4a:	80 68       	ori	r24, 0x80	; 128
     f4c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     f50:	80 91 d8 00 	lds	r24, 0x00D8
     f54:	8f 7d       	andi	r24, 0xDF	; 223
     f56:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     f5a:	80 91 d7 00 	lds	r24, 0x00D7
     f5e:	8f 77       	andi	r24, 0x7F	; 127
     f60:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f64:	8c e0       	ldi	r24, 0x0C	; 12
     f66:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f68:	8e e0       	ldi	r24, 0x0E	; 14
     f6a:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f6c:	09 b4       	in	r0, 0x29	; 41
     f6e:	00 fe       	sbrs	r0, 0
     f70:	fd cf       	rjmp	.-6      	; 0xf6c <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	80 93 49 01 	sts	0x0149, r24
	USB_Host_ConfigurationNumber = 0;
     f78:	10 92 3f 01 	sts	0x013F, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     f7c:	80 e4       	ldi	r24, 0x40	; 64
     f7e:	80 93 39 01 	sts	0x0139, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     f82:	80 91 d8 00 	lds	r24, 0x00D8
     f86:	80 64       	ori	r24, 0x40	; 64
     f88:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f8c:	80 91 dd 00 	lds	r24, 0x00DD
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     f96:	80 91 dd 00 	lds	r24, 0x00DD
     f9a:	84 60       	ori	r24, 0x04	; 4
     f9c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     fa0:	80 91 d7 00 	lds	r24, 0x00D7
     fa4:	8f 7e       	andi	r24, 0xEF	; 239
     fa6:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     faa:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     fac:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     fae:	80 91 de 00 	lds	r24, 0x00DE
     fb2:	81 60       	ori	r24, 0x01	; 1
     fb4:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     fb8:	80 91 de 00 	lds	r24, 0x00DE
     fbc:	84 60       	ori	r24, 0x04	; 4
     fbe:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     fc2:	80 91 e0 00 	lds	r24, 0x00E0
     fc6:	8e 7f       	andi	r24, 0xFE	; 254
     fc8:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     fcc:	80 91 d8 00 	lds	r24, 0x00D8
     fd0:	80 61       	ori	r24, 0x10	; 16
     fd2:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     fd6:	08 95       	ret

00000fd8 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     fd8:	e8 ed       	ldi	r30, 0xD8	; 216
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8f 7e       	andi	r24, 0xEF	; 239
     fe0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     fe2:	e7 ed       	ldi	r30, 0xD7	; 215
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	81 60       	ori	r24, 0x01	; 1
     fea:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	80 93 40 01 	sts	0x0140, r24

	USB_ResetInterface();
}
     ff2:	a2 cf       	rjmp	.-188    	; 0xf38 <USB_ResetInterface>

00000ff4 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ff4:	e8 ed       	ldi	r30, 0xD8	; 216
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8c 7f       	andi	r24, 0xFC	; 252
     ffc:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ffe:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1002:	08 95       	ret

00001004 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1004:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1008:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    100c:	08 95       	ret

0000100e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    100e:	1f 92       	push	r1
    1010:	0f 92       	push	r0
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	0f 92       	push	r0
    1016:	0b b6       	in	r0, 0x3b	; 59
    1018:	0f 92       	push	r0
    101a:	11 24       	eor	r1, r1
    101c:	2f 93       	push	r18
    101e:	3f 93       	push	r19
    1020:	4f 93       	push	r20
    1022:	5f 93       	push	r21
    1024:	6f 93       	push	r22
    1026:	7f 93       	push	r23
    1028:	8f 93       	push	r24
    102a:	9f 93       	push	r25
    102c:	af 93       	push	r26
    102e:	bf 93       	push	r27
    1030:	ef 93       	push	r30
    1032:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1034:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1038:	85 ff       	sbrs	r24, 5
    103a:	0a c0       	rjmp	.+20     	; 0x1050 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    103c:	80 91 a0 00 	lds	r24, 0x00A0
    1040:	85 ff       	sbrs	r24, 5
    1042:	06 c0       	rjmp	.+12     	; 0x1050 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1044:	80 91 9f 00 	lds	r24, 0x009F
    1048:	8f 7d       	andi	r24, 0xDF	; 223
    104a:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    104e:	0c d1       	rcall	.+536    	; 0x1268 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1050:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1054:	81 ff       	sbrs	r24, 1
    1056:	15 c0       	rjmp	.+42     	; 0x1082 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1058:	80 91 a0 00 	lds	r24, 0x00A0
    105c:	81 ff       	sbrs	r24, 1
    105e:	11 c0       	rjmp	.+34     	; 0x1082 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1060:	80 91 9f 00 	lds	r24, 0x009F
    1064:	8d 7f       	andi	r24, 0xFD	; 253
    1066:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    106a:	80 91 9f 00 	lds	r24, 0x009F
    106e:	8e 7f       	andi	r24, 0xFE	; 254
    1070:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1074:	80 91 a0 00 	lds	r24, 0x00A0
    1078:	8d 7f       	andi	r24, 0xFD	; 253
    107a:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    107e:	cb d9       	rcall	.-3178   	; 0x416 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1080:	5b df       	rcall	.-330    	; 0xf38 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1082:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1086:	81 ff       	sbrs	r24, 1
    1088:	15 c0       	rjmp	.+42     	; 0x10b4 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    108a:	80 91 de 00 	lds	r24, 0x00DE
    108e:	81 ff       	sbrs	r24, 1
    1090:	11 c0       	rjmp	.+34     	; 0x10b4 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1092:	80 91 df 00 	lds	r24, 0x00DF
    1096:	8d 7f       	andi	r24, 0xFD	; 253
    1098:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    109c:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    109e:	80 91 dd 00 	lds	r24, 0x00DD
    10a2:	81 60       	ori	r24, 0x01	; 1
    10a4:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	5f da       	rcall	.-2882   	; 0x56a <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    10ac:	b4 d9       	rcall	.-3224   	; 0x416 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	80 93 49 01 	sts	0x0149, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    10b4:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    10b8:	80 ff       	sbrs	r24, 0
    10ba:	17 c0       	rjmp	.+46     	; 0x10ea <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    10bc:	80 91 de 00 	lds	r24, 0x00DE
    10c0:	80 ff       	sbrs	r24, 0
    10c2:	13 c0       	rjmp	.+38     	; 0x10ea <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    10c4:	80 91 df 00 	lds	r24, 0x00DF
    10c8:	8e 7f       	andi	r24, 0xFE	; 254
    10ca:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    10ce:	80 91 de 00 	lds	r24, 0x00DE
    10d2:	8e 7f       	andi	r24, 0xFE	; 254
    10d4:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    10d8:	98 d9       	rcall	.-3280   	; 0x40a <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    10da:	80 91 a0 00 	lds	r24, 0x00A0
    10de:	82 60       	ori	r24, 0x02	; 2
    10e0:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	80 93 49 01 	sts	0x0149, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    10ea:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    10ee:	82 ff       	sbrs	r24, 2
    10f0:	0e c0       	rjmp	.+28     	; 0x110e <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    10f2:	80 91 de 00 	lds	r24, 0x00DE
    10f6:	82 ff       	sbrs	r24, 2
    10f8:	0a c0       	rjmp	.+20     	; 0x110e <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    10fa:	80 91 df 00 	lds	r24, 0x00DF
    10fe:	8b 7f       	andi	r24, 0xFB	; 251
    1100:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	50 da       	rcall	.-2912   	; 0x5aa <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    110a:	85 d9       	rcall	.-3318   	; 0x416 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    110c:	15 df       	rcall	.-470    	; 0xf38 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    110e:	ff 91       	pop	r31
    1110:	ef 91       	pop	r30
    1112:	bf 91       	pop	r27
    1114:	af 91       	pop	r26
    1116:	9f 91       	pop	r25
    1118:	8f 91       	pop	r24
    111a:	7f 91       	pop	r23
    111c:	6f 91       	pop	r22
    111e:	5f 91       	pop	r21
    1120:	4f 91       	pop	r20
    1122:	3f 91       	pop	r19
    1124:	2f 91       	pop	r18
    1126:	0f 90       	pop	r0
    1128:	0b be       	out	0x3b, r0	; 59
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	0f 90       	pop	r0
    1130:	1f 90       	pop	r1
    1132:	18 95       	reti

00001134 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1134:	cf 92       	push	r12
    1136:	df 92       	push	r13
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	29 97       	sbiw	r28, 0x09	; 9
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	6b 01       	movw	r12, r22
    1156:	8a 01       	movw	r16, r20
    1158:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    115a:	90 e8       	ldi	r25, 0x80	; 128
    115c:	90 93 41 01 	sts	0x0141, r25
    1160:	96 e0       	ldi	r25, 0x06	; 6
    1162:	90 93 42 01 	sts	0x0142, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    116c:	90 93 44 01 	sts	0x0144, r25
    1170:	80 93 43 01 	sts	0x0143, r24
    1174:	10 92 46 01 	sts	0x0146, r1
    1178:	10 92 45 01 	sts	0x0145, r1
    117c:	89 e0       	ldi	r24, 0x09	; 9
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	90 93 48 01 	sts	0x0148, r25
    1184:	80 93 47 01 	sts	0x0147, r24
    1188:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    118c:	ce 01       	movw	r24, r28
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	95 d0       	rcall	.+298    	; 0x12bc <USB_Host_SendControlRequest>
    1192:	88 23       	and	r24, r24
    1194:	b9 f4       	brne	.+46     	; 0x11c4 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	f6 01       	movw	r30, r12
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    11a0:	e8 16       	cp	r14, r24
    11a2:	f9 06       	cpc	r15, r25
    11a4:	70 f0       	brcs	.+28     	; 0x11c2 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    11a6:	90 93 48 01 	sts	0x0148, r25
    11aa:	80 93 47 01 	sts	0x0147, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    11ae:	c8 01       	movw	r24, r16
    11b0:	85 d0       	rcall	.+266    	; 0x12bc <USB_Host_SendControlRequest>
    11b2:	88 23       	and	r24, r24
    11b4:	39 f4       	brne	.+14     	; 0x11c4 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    11b6:	f8 01       	movw	r30, r16
    11b8:	91 81       	ldd	r25, Z+1	; 0x01
    11ba:	92 30       	cpi	r25, 0x02	; 2
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    11be:	86 e0       	ldi	r24, 0x06	; 6
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    11c2:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    11c4:	29 96       	adiw	r28, 0x09	; 9
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	df 90       	pop	r13
    11de:	cf 90       	pop	r12
    11e0:	08 95       	ret

000011e2 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	8c 01       	movw	r16, r24
    11f8:	eb 01       	movw	r28, r22
    11fa:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    11fc:	23 c0       	rjmp	.+70     	; 0x1244 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    11fe:	e8 81       	ld	r30, Y
    1200:	f9 81       	ldd	r31, Y+1	; 0x01
    1202:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1204:	20 81       	ld	r18, Z
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	c7 01       	movw	r24, r14
    120a:	2e 15       	cp	r18, r14
    120c:	3f 05       	cpc	r19, r15
    120e:	08 f4       	brcc	.+2      	; 0x1212 <USB_GetNextDescriptorComp+0x30>
    1210:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1212:	e8 0f       	add	r30, r24
    1214:	f9 1f       	adc	r31, r25
    1216:	f9 83       	std	Y+1, r31	; 0x01
    1218:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    121a:	f8 01       	movw	r30, r16
    121c:	20 81       	ld	r18, Z
    121e:	31 81       	ldd	r19, Z+1	; 0x01
    1220:	28 1b       	sub	r18, r24
    1222:	39 0b       	sbc	r19, r25
    1224:	31 83       	std	Z+1, r19	; 0x01
    1226:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1228:	88 81       	ld	r24, Y
    122a:	99 81       	ldd	r25, Y+1	; 0x01
    122c:	f6 01       	movw	r30, r12
    122e:	09 95       	icall
    1230:	82 30       	cpi	r24, 0x02	; 2
    1232:	41 f0       	breq	.+16     	; 0x1244 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	69 f4       	brne	.+26     	; 0x1252 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    1238:	a8 82       	st	Y, r10
    123a:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    123c:	f8 01       	movw	r30, r16
    123e:	f1 82       	std	Z+1, r15	; 0x01
    1240:	e0 82       	st	Z, r14
    1242:	07 c0       	rjmp	.+14     	; 0x1252 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1244:	f8 01       	movw	r30, r16
    1246:	e0 80       	ld	r14, Z
    1248:	f1 80       	ldd	r15, Z+1	; 0x01
    124a:	e1 14       	cp	r14, r1
    124c:	f1 04       	cpc	r15, r1
    124e:	b9 f6       	brne	.-82     	; 0x11fe <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1250:	82 e0       	ldi	r24, 0x02	; 2
}
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	cf 90       	pop	r12
    1262:	bf 90       	pop	r11
    1264:	af 90       	pop	r10
    1266:	08 95       	ret

00001268 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1268:	08 95       	ret

0000126a <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1272:	c8 ee       	ldi	r28, 0xE8	; 232
    1274:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1276:	07 c0       	rjmp	.+14     	; 0x1286 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	b9 db       	rcall	.-2190   	; 0x9ee <USB_Host_WaitMS>
    127c:	88 23       	and	r24, r24
    127e:	d1 f4       	brne	.+52     	; 0x12b4 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1280:	20 97       	sbiw	r28, 0x00	; 0
    1282:	b9 f0       	breq	.+46     	; 0x12b2 <USB_Host_WaitForIOS+0x48>
    1284:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1286:	11 23       	and	r17, r17
    1288:	29 f4       	brne	.+10     	; 0x1294 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    128a:	80 91 a6 00 	lds	r24, 0x00A6
    128e:	83 ff       	sbrs	r24, 3
    1290:	f3 cf       	rjmp	.-26     	; 0x1278 <USB_Host_WaitForIOS+0xe>
    1292:	0d c0       	rjmp	.+26     	; 0x12ae <USB_Host_WaitForIOS+0x44>
    1294:	11 30       	cpi	r17, 0x01	; 1
    1296:	29 f4       	brne	.+10     	; 0x12a2 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1298:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    129c:	80 ff       	sbrs	r24, 0
    129e:	ec cf       	rjmp	.-40     	; 0x1278 <USB_Host_WaitForIOS+0xe>
    12a0:	06 c0       	rjmp	.+12     	; 0x12ae <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    12a2:	12 30       	cpi	r17, 0x02	; 2
    12a4:	49 f7       	brne	.-46     	; 0x1278 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    12a6:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    12aa:	82 ff       	sbrs	r24, 2
    12ac:	e5 cf       	rjmp	.-54     	; 0x1278 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    12b2:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	08 95       	ret

000012bc <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    12ca:	e0 90 9e 00 	lds	r14, 0x009E
    12ce:	ff 24       	eor	r15, r15
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	e8 22       	and	r14, r24
    12d4:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    12d6:	c0 91 47 01 	lds	r28, 0x0147
    12da:	d0 91 48 01 	lds	r29, 0x0148
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12de:	80 91 9e 00 	lds	r24, 0x009E
    12e2:	81 60       	ori	r24, 0x01	; 1
    12e4:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	81 db       	rcall	.-2302   	; 0x9ee <USB_Host_WaitMS>
    12ec:	88 23       	and	r24, r24
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <USB_Host_SendControlRequest+0x36>
    12f0:	cb c0       	rjmp	.+406    	; 0x1488 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12f2:	80 91 aa 00 	lds	r24, 0x00AA
    12f6:	8f 7c       	andi	r24, 0xCF	; 207
    12f8:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    12fc:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1300:	80 91 a6 00 	lds	r24, 0x00A6
    1304:	8f 7e       	andi	r24, 0xEF	; 239
    1306:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    130a:	80 91 a9 00 	lds	r24, 0x00A9
    130e:	8f 7b       	andi	r24, 0xBF	; 191
    1310:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1314:	e1 e4       	ldi	r30, 0x41	; 65
    1316:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1318:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    131a:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	e9 34       	cpi	r30, 0x49	; 73
    1322:	f8 07       	cpc	r31, r24
    1324:	c9 f7       	brne	.-14     	; 0x1318 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1326:	80 91 a6 00 	lds	r24, 0x00A6
    132a:	87 77       	andi	r24, 0x77	; 119
    132c:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	9b df       	rcall	.-202    	; 0x126a <USB_Host_WaitForIOS>
    1334:	88 23       	and	r24, r24
    1336:	09 f0       	breq	.+2      	; 0x133a <USB_Host_SendControlRequest+0x7e>
    1338:	a7 c0       	rjmp	.+334    	; 0x1488 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    133a:	80 91 a9 00 	lds	r24, 0x00A9
    133e:	80 64       	ori	r24, 0x40	; 64
    1340:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	53 db       	rcall	.-2394   	; 0x9ee <USB_Host_WaitMS>
    1348:	88 23       	and	r24, r24
    134a:	09 f0       	breq	.+2      	; 0x134e <USB_Host_SendControlRequest+0x92>
    134c:	9d c0       	rjmp	.+314    	; 0x1488 <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    134e:	80 91 41 01 	lds	r24, 0x0141
    1352:	87 ff       	sbrs	r24, 7
    1354:	4f c0       	rjmp	.+158    	; 0x13f4 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1356:	80 91 aa 00 	lds	r24, 0x00AA
    135a:	8f 7c       	andi	r24, 0xCF	; 207
    135c:	80 61       	ori	r24, 0x10	; 16
    135e:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1362:	01 15       	cp	r16, r1
    1364:	11 05       	cpc	r17, r1
    1366:	61 f5       	brne	.+88     	; 0x13c0 <USB_Host_SendControlRequest+0x104>
    1368:	2d c0       	rjmp	.+90     	; 0x13c4 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    136a:	80 91 a9 00 	lds	r24, 0x00A9
    136e:	8f 7b       	andi	r24, 0xBF	; 191
    1370:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	79 df       	rcall	.-270    	; 0x126a <USB_Host_WaitForIOS>
    1378:	88 23       	and	r24, r24
    137a:	09 f0       	breq	.+2      	; 0x137e <USB_Host_SendControlRequest+0xc2>
    137c:	85 c0       	rjmp	.+266    	; 0x1488 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    137e:	80 91 f6 00 	lds	r24, 0x00F6
    1382:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	49 f4       	brne	.+18     	; 0x139c <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    138a:	c0 e0       	ldi	r28, 0x00	; 0
    138c:	d0 e0       	ldi	r29, 0x00	; 0
    138e:	06 c0       	rjmp	.+12     	; 0x139c <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1390:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1394:	f8 01       	movw	r30, r16
    1396:	81 93       	st	Z+, r24
    1398:	8f 01       	movw	r16, r30
					DataLen--;
    139a:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    139c:	80 91 f6 00 	lds	r24, 0x00F6
    13a0:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	11 f0       	breq	.+4      	; 0x13ac <USB_Host_SendControlRequest+0xf0>
    13a8:	20 97       	sbiw	r28, 0x00	; 0
    13aa:	91 f7       	brne	.-28     	; 0x1390 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13ac:	80 91 a9 00 	lds	r24, 0x00A9
    13b0:	80 64       	ori	r24, 0x40	; 64
    13b2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13b6:	80 91 a6 00 	lds	r24, 0x00A6
    13ba:	8e 77       	andi	r24, 0x7E	; 126
    13bc:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    13c0:	20 97       	sbiw	r28, 0x00	; 0
    13c2:	99 f6       	brne	.-90     	; 0x136a <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13c4:	80 91 aa 00 	lds	r24, 0x00AA
    13c8:	8f 7c       	andi	r24, 0xCF	; 207
    13ca:	80 62       	ori	r24, 0x20	; 32
    13cc:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13d0:	80 91 a9 00 	lds	r24, 0x00A9
    13d4:	8f 7b       	andi	r24, 0xBF	; 191
    13d6:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	46 df       	rcall	.-372    	; 0x126a <USB_Host_WaitForIOS>
    13de:	88 23       	and	r24, r24
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <USB_Host_SendControlRequest+0x128>
    13e2:	52 c0       	rjmp	.+164    	; 0x1488 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13e4:	80 91 a6 00 	lds	r24, 0x00A6
    13e8:	8b 77       	andi	r24, 0x7B	; 123
    13ea:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    13ee:	82 e0       	ldi	r24, 0x02	; 2
    13f0:	3c df       	rcall	.-392    	; 0x126a <USB_Host_WaitForIOS>
    13f2:	4a c0       	rjmp	.+148    	; 0x1488 <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    13f4:	01 15       	cp	r16, r1
    13f6:	11 05       	cpc	r17, r1
    13f8:	99 f1       	breq	.+102    	; 0x1460 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13fa:	80 91 aa 00 	lds	r24, 0x00AA
    13fe:	8f 7c       	andi	r24, 0xCF	; 207
    1400:	80 62       	ori	r24, 0x20	; 32
    1402:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1406:	80 91 a9 00 	lds	r24, 0x00A9
    140a:	8f 7b       	andi	r24, 0xBF	; 191
    140c:	80 93 a9 00 	sts	0x00A9, r24
    1410:	1c c0       	rjmp	.+56     	; 0x144a <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	2a df       	rcall	.-428    	; 0x126a <USB_Host_WaitForIOS>
    1416:	88 23       	and	r24, r24
    1418:	b9 f5       	brne	.+110    	; 0x1488 <USB_Host_SendControlRequest+0x1cc>
    141a:	f8 01       	movw	r30, r16
    141c:	06 c0       	rjmp	.+12     	; 0x142a <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    141e:	81 91       	ld	r24, Z+
    1420:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1422:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1426:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1428:	59 f0       	breq	.+22     	; 0x1440 <USB_Host_SendControlRequest+0x184>
    142a:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    142c:	20 91 f6 00 	lds	r18, 0x00F6
    1430:	30 91 f7 00 	lds	r19, 0x00F7
    1434:	80 91 39 01 	lds	r24, 0x0139
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	28 17       	cp	r18, r24
    143c:	39 07       	cpc	r19, r25
    143e:	78 f3       	brcs	.-34     	; 0x141e <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1440:	80 91 a6 00 	lds	r24, 0x00A6
    1444:	8b 77       	andi	r24, 0x7B	; 123
    1446:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    144a:	20 97       	sbiw	r28, 0x00	; 0
    144c:	11 f7       	brne	.-60     	; 0x1412 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    144e:	82 e0       	ldi	r24, 0x02	; 2
    1450:	0c df       	rcall	.-488    	; 0x126a <USB_Host_WaitForIOS>
    1452:	88 23       	and	r24, r24
    1454:	c9 f4       	brne	.+50     	; 0x1488 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1456:	80 91 a9 00 	lds	r24, 0x00A9
    145a:	80 64       	ori	r24, 0x40	; 64
    145c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1460:	80 91 aa 00 	lds	r24, 0x00AA
    1464:	8f 7c       	andi	r24, 0xCF	; 207
    1466:	80 61       	ori	r24, 0x10	; 16
    1468:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    146c:	80 91 a9 00 	lds	r24, 0x00A9
    1470:	8f 7b       	andi	r24, 0xBF	; 191
    1472:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	f8 de       	rcall	.-528    	; 0x126a <USB_Host_WaitForIOS>
    147a:	88 23       	and	r24, r24
    147c:	29 f4       	brne	.+10     	; 0x1488 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    147e:	90 91 a6 00 	lds	r25, 0x00A6
    1482:	9e 77       	andi	r25, 0x7E	; 126
    1484:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1488:	90 91 a9 00 	lds	r25, 0x00A9
    148c:	90 64       	ori	r25, 0x40	; 64
    148e:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1492:	e1 14       	cp	r14, r1
    1494:	f1 04       	cpc	r15, r1
    1496:	29 f4       	brne	.+10     	; 0x14a2 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1498:	90 91 9e 00 	lds	r25, 0x009E
    149c:	9e 7f       	andi	r25, 0xFE	; 254
    149e:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    14a8:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	ff 90       	pop	r15
    14b6:	ef 90       	pop	r14
    14b8:	08 95       	ret

000014ba <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    14ba:	1f 93       	push	r17
    14bc:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    14be:	10 92 41 01 	sts	0x0141, r1
    14c2:	89 e0       	ldi	r24, 0x09	; 9
    14c4:	80 93 42 01 	sts	0x0142, r24
    14c8:	10 93 43 01 	sts	0x0143, r17
    14cc:	10 92 44 01 	sts	0x0144, r1
    14d0:	10 92 46 01 	sts	0x0146, r1
    14d4:	10 92 45 01 	sts	0x0145, r1
    14d8:	10 92 48 01 	sts	0x0148, r1
    14dc:	10 92 47 01 	sts	0x0147, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14e0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	e9 de       	rcall	.-558    	; 0x12bc <USB_Host_SendControlRequest>
    14ea:	88 23       	and	r24, r24
    14ec:	49 f4       	brne	.+18     	; 0x1500 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    14ee:	10 93 3f 01 	sts	0x013F, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    14f2:	11 23       	and	r17, r17
    14f4:	11 f0       	breq	.+4      	; 0x14fa <USB_Host_SetDeviceConfiguration+0x40>
    14f6:	9b e0       	ldi	r25, 0x0B	; 11
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <USB_Host_SetDeviceConfiguration+0x42>
    14fa:	9a e0       	ldi	r25, 0x0A	; 10
    14fc:	90 93 49 01 	sts	0x0149, r25
	}

	return ErrorCode;
}
    1500:	1f 91       	pop	r17
    1502:	08 95       	ret

00001504 <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1504:	e1 e4       	ldi	r30, 0x41	; 65
    1506:	f1 e0       	ldi	r31, 0x01	; 1
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	90 93 41 01 	sts	0x0141, r25
    150e:	9b e0       	ldi	r25, 0x0B	; 11
    1510:	90 93 42 01 	sts	0x0142, r25
    1514:	60 93 43 01 	sts	0x0143, r22
    1518:	13 82       	std	Z+3, r1	; 0x03
    151a:	80 93 45 01 	sts	0x0145, r24
    151e:	15 82       	std	Z+5, r1	; 0x05
    1520:	10 92 48 01 	sts	0x0148, r1
    1524:	10 92 47 01 	sts	0x0147, r1
    1528:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
}
    1530:	c5 ce       	rjmp	.-630    	; 0x12bc <USB_Host_SendControlRequest>

00001532 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1532:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1534:	10 91 a7 00 	lds	r17, 0x00A7
    1538:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    153a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    153e:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1542:	aa da       	rcall	.-2732   	; 0xa98 <USB_Host_ProcessNextHostState>
    1544:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1548:	1f 91       	pop	r17
    154a:	08 95       	ret

0000154c <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    154c:	90 91 c8 00 	lds	r25, 0x00C8
    1550:	95 ff       	sbrs	r25, 5
    1552:	fc cf       	rjmp	.-8      	; 0x154c <Serial_putchar>
				UDR1 = DataByte;
    1554:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	08 95       	ret

0000155e <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    155e:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1562:	87 ff       	sbrs	r24, 7
    1564:	08 c0       	rjmp	.+16     	; 0x1576 <Serial_getchar+0x18>
    1566:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    156a:	87 ff       	sbrs	r24, 7
    156c:	07 c0       	rjmp	.+14     	; 0x157c <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    156e:	20 91 ce 00 	lds	r18, 0x00CE
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	05 c0       	rjmp	.+10     	; 0x1580 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    1576:	2e ef       	ldi	r18, 0xFE	; 254
    1578:	3f ef       	ldi	r19, 0xFF	; 255
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    157c:	2f ef       	ldi	r18, 0xFF	; 255
    157e:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1580:	c9 01       	movw	r24, r18
    1582:	08 95       	ret

00001584 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1584:	fc 01       	movw	r30, r24
	if (!(Stream))
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	51 f4       	brne	.+20     	; 0x159e <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    158a:	ea e4       	ldi	r30, 0x4A	; 74
    158c:	f1 e0       	ldi	r31, 0x01	; 1
    158e:	f0 93 59 01 	sts	0x0159, r31
    1592:	e0 93 58 01 	sts	0x0158, r30
		stdout = Stream;
    1596:	f0 93 5b 01 	sts	0x015B, r31
    159a:	e0 93 5a 01 	sts	0x015A, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    159e:	8e e0       	ldi	r24, 0x0E	; 14
    15a0:	df 01       	movw	r26, r30
    15a2:	1d 92       	st	X+, r1
    15a4:	8a 95       	dec	r24
    15a6:	e9 f7       	brne	.-6      	; 0x15a2 <Serial_CreateStream+0x1e>
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	83 83       	std	Z+3, r24	; 0x03
    15ac:	86 ea       	ldi	r24, 0xA6	; 166
    15ae:	9a e0       	ldi	r25, 0x0A	; 10
    15b0:	91 87       	std	Z+9, r25	; 0x09
    15b2:	80 87       	std	Z+8, r24	; 0x08
    15b4:	8f ea       	ldi	r24, 0xAF	; 175
    15b6:	9a e0       	ldi	r25, 0x0A	; 10
    15b8:	93 87       	std	Z+11, r25	; 0x0b
    15ba:	82 87       	std	Z+10, r24	; 0x0a
}
    15bc:	08 95       	ret

000015be <memmove>:
    15be:	68 17       	cp	r22, r24
    15c0:	79 07       	cpc	r23, r25
    15c2:	68 f4       	brcc	.+26     	; 0x15de <memmove+0x20>
    15c4:	fb 01       	movw	r30, r22
    15c6:	dc 01       	movw	r26, r24
    15c8:	e4 0f       	add	r30, r20
    15ca:	f5 1f       	adc	r31, r21
    15cc:	a4 0f       	add	r26, r20
    15ce:	b5 1f       	adc	r27, r21
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <memmove+0x18>
    15d2:	02 90       	ld	r0, -Z
    15d4:	0e 92       	st	-X, r0
    15d6:	41 50       	subi	r20, 0x01	; 1
    15d8:	50 40       	sbci	r21, 0x00	; 0
    15da:	d8 f7       	brcc	.-10     	; 0x15d2 <memmove+0x14>
    15dc:	08 95       	ret
    15de:	65 c2       	rjmp	.+1226   	; 0x1aaa <memcpy>

000015e0 <printf_P>:
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	fe 01       	movw	r30, r28
    15ea:	35 96       	adiw	r30, 0x05	; 5
    15ec:	61 91       	ld	r22, Z+
    15ee:	71 91       	ld	r23, Z+
    15f0:	80 91 5a 01 	lds	r24, 0x015A
    15f4:	90 91 5b 01 	lds	r25, 0x015B
    15f8:	dc 01       	movw	r26, r24
    15fa:	13 96       	adiw	r26, 0x03	; 3
    15fc:	2c 91       	ld	r18, X
    15fe:	13 97       	sbiw	r26, 0x03	; 3
    1600:	28 60       	ori	r18, 0x08	; 8
    1602:	13 96       	adiw	r26, 0x03	; 3
    1604:	2c 93       	st	X, r18
    1606:	af 01       	movw	r20, r30
    1608:	42 d0       	rcall	.+132    	; 0x168e <vfprintf>
    160a:	e0 91 5a 01 	lds	r30, 0x015A
    160e:	f0 91 5b 01 	lds	r31, 0x015B
    1612:	23 81       	ldd	r18, Z+3	; 0x03
    1614:	27 7f       	andi	r18, 0xF7	; 247
    1616:	23 83       	std	Z+3, r18	; 0x03
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <puts_P>:
    161e:	ef 92       	push	r14
    1620:	ff 92       	push	r15
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	8c 01       	movw	r16, r24
    162c:	e0 91 5a 01 	lds	r30, 0x015A
    1630:	f0 91 5b 01 	lds	r31, 0x015B
    1634:	83 81       	ldd	r24, Z+3	; 0x03
    1636:	81 ff       	sbrs	r24, 1
    1638:	20 c0       	rjmp	.+64     	; 0x167a <puts_P+0x5c>
    163a:	c0 e0       	ldi	r28, 0x00	; 0
    163c:	d0 e0       	ldi	r29, 0x00	; 0
    163e:	0c c0       	rjmp	.+24     	; 0x1658 <puts_P+0x3a>
    1640:	db 01       	movw	r26, r22
    1642:	18 96       	adiw	r26, 0x08	; 8
    1644:	ed 91       	ld	r30, X+
    1646:	fc 91       	ld	r31, X
    1648:	19 97       	sbiw	r26, 0x09	; 9
    164a:	09 95       	icall
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	11 f0       	breq	.+4      	; 0x1654 <puts_P+0x36>
    1650:	cf ef       	ldi	r28, 0xFF	; 255
    1652:	df ef       	ldi	r29, 0xFF	; 255
    1654:	0f 5f       	subi	r16, 0xFF	; 255
    1656:	1f 4f       	sbci	r17, 0xFF	; 255
    1658:	f8 01       	movw	r30, r16
    165a:	84 91       	lpm	r24, Z+
    165c:	60 91 5a 01 	lds	r22, 0x015A
    1660:	70 91 5b 01 	lds	r23, 0x015B
    1664:	88 23       	and	r24, r24
    1666:	61 f7       	brne	.-40     	; 0x1640 <puts_P+0x22>
    1668:	db 01       	movw	r26, r22
    166a:	18 96       	adiw	r26, 0x08	; 8
    166c:	ed 91       	ld	r30, X+
    166e:	fc 91       	ld	r31, X
    1670:	19 97       	sbiw	r26, 0x09	; 9
    1672:	8a e0       	ldi	r24, 0x0A	; 10
    1674:	09 95       	icall
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	11 f0       	breq	.+4      	; 0x167e <puts_P+0x60>
    167a:	cf ef       	ldi	r28, 0xFF	; 255
    167c:	df ef       	ldi	r29, 0xFF	; 255
    167e:	ce 01       	movw	r24, r28
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	08 95       	ret

0000168e <vfprintf>:
    168e:	2f 92       	push	r2
    1690:	3f 92       	push	r3
    1692:	4f 92       	push	r4
    1694:	5f 92       	push	r5
    1696:	6f 92       	push	r6
    1698:	7f 92       	push	r7
    169a:	8f 92       	push	r8
    169c:	9f 92       	push	r9
    169e:	af 92       	push	r10
    16a0:	bf 92       	push	r11
    16a2:	cf 92       	push	r12
    16a4:	df 92       	push	r13
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	2c 97       	sbiw	r28, 0x0c	; 12
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	6c 01       	movw	r12, r24
    16c4:	1b 01       	movw	r2, r22
    16c6:	8a 01       	movw	r16, r20
    16c8:	fc 01       	movw	r30, r24
    16ca:	17 82       	std	Z+7, r1	; 0x07
    16cc:	16 82       	std	Z+6, r1	; 0x06
    16ce:	83 81       	ldd	r24, Z+3	; 0x03
    16d0:	81 ff       	sbrs	r24, 1
    16d2:	c4 c1       	rjmp	.+904    	; 0x1a5c <vfprintf+0x3ce>
    16d4:	2e 01       	movw	r4, r28
    16d6:	08 94       	sec
    16d8:	41 1c       	adc	r4, r1
    16da:	51 1c       	adc	r5, r1
    16dc:	f6 01       	movw	r30, r12
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	f1 01       	movw	r30, r2
    16e2:	93 fd       	sbrc	r25, 3
    16e4:	85 91       	lpm	r24, Z+
    16e6:	93 ff       	sbrs	r25, 3
    16e8:	81 91       	ld	r24, Z+
    16ea:	1f 01       	movw	r2, r30
    16ec:	88 23       	and	r24, r24
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <vfprintf+0x64>
    16f0:	b1 c1       	rjmp	.+866    	; 0x1a54 <vfprintf+0x3c6>
    16f2:	85 32       	cpi	r24, 0x25	; 37
    16f4:	39 f4       	brne	.+14     	; 0x1704 <vfprintf+0x76>
    16f6:	93 fd       	sbrc	r25, 3
    16f8:	85 91       	lpm	r24, Z+
    16fa:	93 ff       	sbrs	r25, 3
    16fc:	81 91       	ld	r24, Z+
    16fe:	1f 01       	movw	r2, r30
    1700:	85 32       	cpi	r24, 0x25	; 37
    1702:	21 f4       	brne	.+8      	; 0x170c <vfprintf+0x7e>
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	b6 01       	movw	r22, r12
    1708:	e4 d1       	rcall	.+968    	; 0x1ad2 <fputc>
    170a:	e8 cf       	rjmp	.-48     	; 0x16dc <vfprintf+0x4e>
    170c:	ee 24       	eor	r14, r14
    170e:	ff 24       	eor	r15, r15
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	20 32       	cpi	r18, 0x20	; 32
    1714:	b0 f4       	brcc	.+44     	; 0x1742 <vfprintf+0xb4>
    1716:	8b 32       	cpi	r24, 0x2B	; 43
    1718:	69 f0       	breq	.+26     	; 0x1734 <vfprintf+0xa6>
    171a:	8c 32       	cpi	r24, 0x2C	; 44
    171c:	28 f4       	brcc	.+10     	; 0x1728 <vfprintf+0x9a>
    171e:	80 32       	cpi	r24, 0x20	; 32
    1720:	51 f0       	breq	.+20     	; 0x1736 <vfprintf+0xa8>
    1722:	83 32       	cpi	r24, 0x23	; 35
    1724:	71 f4       	brne	.+28     	; 0x1742 <vfprintf+0xb4>
    1726:	0b c0       	rjmp	.+22     	; 0x173e <vfprintf+0xb0>
    1728:	8d 32       	cpi	r24, 0x2D	; 45
    172a:	39 f0       	breq	.+14     	; 0x173a <vfprintf+0xac>
    172c:	80 33       	cpi	r24, 0x30	; 48
    172e:	49 f4       	brne	.+18     	; 0x1742 <vfprintf+0xb4>
    1730:	21 60       	ori	r18, 0x01	; 1
    1732:	2c c0       	rjmp	.+88     	; 0x178c <vfprintf+0xfe>
    1734:	22 60       	ori	r18, 0x02	; 2
    1736:	24 60       	ori	r18, 0x04	; 4
    1738:	29 c0       	rjmp	.+82     	; 0x178c <vfprintf+0xfe>
    173a:	28 60       	ori	r18, 0x08	; 8
    173c:	27 c0       	rjmp	.+78     	; 0x178c <vfprintf+0xfe>
    173e:	20 61       	ori	r18, 0x10	; 16
    1740:	25 c0       	rjmp	.+74     	; 0x178c <vfprintf+0xfe>
    1742:	27 fd       	sbrc	r18, 7
    1744:	2c c0       	rjmp	.+88     	; 0x179e <vfprintf+0x110>
    1746:	38 2f       	mov	r19, r24
    1748:	30 53       	subi	r19, 0x30	; 48
    174a:	3a 30       	cpi	r19, 0x0A	; 10
    174c:	98 f4       	brcc	.+38     	; 0x1774 <vfprintf+0xe6>
    174e:	26 ff       	sbrs	r18, 6
    1750:	08 c0       	rjmp	.+16     	; 0x1762 <vfprintf+0xd4>
    1752:	8e 2d       	mov	r24, r14
    1754:	88 0f       	add	r24, r24
    1756:	e8 2e       	mov	r14, r24
    1758:	ee 0c       	add	r14, r14
    175a:	ee 0c       	add	r14, r14
    175c:	e8 0e       	add	r14, r24
    175e:	e3 0e       	add	r14, r19
    1760:	15 c0       	rjmp	.+42     	; 0x178c <vfprintf+0xfe>
    1762:	8f 2d       	mov	r24, r15
    1764:	88 0f       	add	r24, r24
    1766:	f8 2e       	mov	r15, r24
    1768:	ff 0c       	add	r15, r15
    176a:	ff 0c       	add	r15, r15
    176c:	f8 0e       	add	r15, r24
    176e:	f3 0e       	add	r15, r19
    1770:	20 62       	ori	r18, 0x20	; 32
    1772:	0c c0       	rjmp	.+24     	; 0x178c <vfprintf+0xfe>
    1774:	8e 32       	cpi	r24, 0x2E	; 46
    1776:	21 f4       	brne	.+8      	; 0x1780 <vfprintf+0xf2>
    1778:	26 fd       	sbrc	r18, 6
    177a:	6c c1       	rjmp	.+728    	; 0x1a54 <vfprintf+0x3c6>
    177c:	20 64       	ori	r18, 0x40	; 64
    177e:	06 c0       	rjmp	.+12     	; 0x178c <vfprintf+0xfe>
    1780:	8c 36       	cpi	r24, 0x6C	; 108
    1782:	11 f4       	brne	.+4      	; 0x1788 <vfprintf+0xfa>
    1784:	20 68       	ori	r18, 0x80	; 128
    1786:	02 c0       	rjmp	.+4      	; 0x178c <vfprintf+0xfe>
    1788:	88 36       	cpi	r24, 0x68	; 104
    178a:	49 f4       	brne	.+18     	; 0x179e <vfprintf+0x110>
    178c:	f1 01       	movw	r30, r2
    178e:	93 fd       	sbrc	r25, 3
    1790:	85 91       	lpm	r24, Z+
    1792:	93 ff       	sbrs	r25, 3
    1794:	81 91       	ld	r24, Z+
    1796:	1f 01       	movw	r2, r30
    1798:	88 23       	and	r24, r24
    179a:	09 f0       	breq	.+2      	; 0x179e <vfprintf+0x110>
    179c:	ba cf       	rjmp	.-140    	; 0x1712 <vfprintf+0x84>
    179e:	98 2f       	mov	r25, r24
    17a0:	95 54       	subi	r25, 0x45	; 69
    17a2:	93 30       	cpi	r25, 0x03	; 3
    17a4:	18 f0       	brcs	.+6      	; 0x17ac <vfprintf+0x11e>
    17a6:	90 52       	subi	r25, 0x20	; 32
    17a8:	93 30       	cpi	r25, 0x03	; 3
    17aa:	28 f4       	brcc	.+10     	; 0x17b6 <vfprintf+0x128>
    17ac:	0c 5f       	subi	r16, 0xFC	; 252
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	ff e3       	ldi	r31, 0x3F	; 63
    17b2:	f9 83       	std	Y+1, r31	; 0x01
    17b4:	0d c0       	rjmp	.+26     	; 0x17d0 <vfprintf+0x142>
    17b6:	83 36       	cpi	r24, 0x63	; 99
    17b8:	31 f0       	breq	.+12     	; 0x17c6 <vfprintf+0x138>
    17ba:	83 37       	cpi	r24, 0x73	; 115
    17bc:	71 f0       	breq	.+28     	; 0x17da <vfprintf+0x14c>
    17be:	83 35       	cpi	r24, 0x53	; 83
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <vfprintf+0x136>
    17c2:	5c c0       	rjmp	.+184    	; 0x187c <vfprintf+0x1ee>
    17c4:	21 c0       	rjmp	.+66     	; 0x1808 <vfprintf+0x17a>
    17c6:	f8 01       	movw	r30, r16
    17c8:	80 81       	ld	r24, Z
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	0e 5f       	subi	r16, 0xFE	; 254
    17ce:	1f 4f       	sbci	r17, 0xFF	; 255
    17d0:	42 01       	movw	r8, r4
    17d2:	71 e0       	ldi	r23, 0x01	; 1
    17d4:	a7 2e       	mov	r10, r23
    17d6:	b1 2c       	mov	r11, r1
    17d8:	15 c0       	rjmp	.+42     	; 0x1804 <vfprintf+0x176>
    17da:	62 e0       	ldi	r22, 0x02	; 2
    17dc:	66 2e       	mov	r6, r22
    17de:	71 2c       	mov	r7, r1
    17e0:	60 0e       	add	r6, r16
    17e2:	71 1e       	adc	r7, r17
    17e4:	f8 01       	movw	r30, r16
    17e6:	80 80       	ld	r8, Z
    17e8:	91 80       	ldd	r9, Z+1	; 0x01
    17ea:	26 ff       	sbrs	r18, 6
    17ec:	03 c0       	rjmp	.+6      	; 0x17f4 <vfprintf+0x166>
    17ee:	6e 2d       	mov	r22, r14
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <vfprintf+0x16a>
    17f4:	6f ef       	ldi	r22, 0xFF	; 255
    17f6:	7f ef       	ldi	r23, 0xFF	; 255
    17f8:	c4 01       	movw	r24, r8
    17fa:	2c 87       	std	Y+12, r18	; 0x0c
    17fc:	5f d1       	rcall	.+702    	; 0x1abc <strnlen>
    17fe:	5c 01       	movw	r10, r24
    1800:	83 01       	movw	r16, r6
    1802:	2c 85       	ldd	r18, Y+12	; 0x0c
    1804:	2f 77       	andi	r18, 0x7F	; 127
    1806:	16 c0       	rjmp	.+44     	; 0x1834 <vfprintf+0x1a6>
    1808:	52 e0       	ldi	r21, 0x02	; 2
    180a:	65 2e       	mov	r6, r21
    180c:	71 2c       	mov	r7, r1
    180e:	60 0e       	add	r6, r16
    1810:	71 1e       	adc	r7, r17
    1812:	f8 01       	movw	r30, r16
    1814:	80 80       	ld	r8, Z
    1816:	91 80       	ldd	r9, Z+1	; 0x01
    1818:	26 ff       	sbrs	r18, 6
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <vfprintf+0x194>
    181c:	6e 2d       	mov	r22, r14
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <vfprintf+0x198>
    1822:	6f ef       	ldi	r22, 0xFF	; 255
    1824:	7f ef       	ldi	r23, 0xFF	; 255
    1826:	c4 01       	movw	r24, r8
    1828:	2c 87       	std	Y+12, r18	; 0x0c
    182a:	34 d1       	rcall	.+616    	; 0x1a94 <strnlen_P>
    182c:	5c 01       	movw	r10, r24
    182e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1830:	20 68       	ori	r18, 0x80	; 128
    1832:	83 01       	movw	r16, r6
    1834:	23 fd       	sbrc	r18, 3
    1836:	1e c0       	rjmp	.+60     	; 0x1874 <vfprintf+0x1e6>
    1838:	07 c0       	rjmp	.+14     	; 0x1848 <vfprintf+0x1ba>
    183a:	80 e2       	ldi	r24, 0x20	; 32
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	b6 01       	movw	r22, r12
    1840:	2c 87       	std	Y+12, r18	; 0x0c
    1842:	47 d1       	rcall	.+654    	; 0x1ad2 <fputc>
    1844:	fa 94       	dec	r15
    1846:	2c 85       	ldd	r18, Y+12	; 0x0c
    1848:	8f 2d       	mov	r24, r15
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a8 16       	cp	r10, r24
    184e:	b9 06       	cpc	r11, r25
    1850:	a0 f3       	brcs	.-24     	; 0x183a <vfprintf+0x1ac>
    1852:	10 c0       	rjmp	.+32     	; 0x1874 <vfprintf+0x1e6>
    1854:	f4 01       	movw	r30, r8
    1856:	27 fd       	sbrc	r18, 7
    1858:	85 91       	lpm	r24, Z+
    185a:	27 ff       	sbrs	r18, 7
    185c:	81 91       	ld	r24, Z+
    185e:	4f 01       	movw	r8, r30
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	b6 01       	movw	r22, r12
    1864:	2c 87       	std	Y+12, r18	; 0x0c
    1866:	35 d1       	rcall	.+618    	; 0x1ad2 <fputc>
    1868:	2c 85       	ldd	r18, Y+12	; 0x0c
    186a:	f1 10       	cpse	r15, r1
    186c:	fa 94       	dec	r15
    186e:	08 94       	sec
    1870:	a1 08       	sbc	r10, r1
    1872:	b1 08       	sbc	r11, r1
    1874:	a1 14       	cp	r10, r1
    1876:	b1 04       	cpc	r11, r1
    1878:	69 f7       	brne	.-38     	; 0x1854 <vfprintf+0x1c6>
    187a:	e9 c0       	rjmp	.+466    	; 0x1a4e <vfprintf+0x3c0>
    187c:	84 36       	cpi	r24, 0x64	; 100
    187e:	11 f0       	breq	.+4      	; 0x1884 <vfprintf+0x1f6>
    1880:	89 36       	cpi	r24, 0x69	; 105
    1882:	41 f5       	brne	.+80     	; 0x18d4 <vfprintf+0x246>
    1884:	27 ff       	sbrs	r18, 7
    1886:	08 c0       	rjmp	.+16     	; 0x1898 <vfprintf+0x20a>
    1888:	f8 01       	movw	r30, r16
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	0c 5f       	subi	r16, 0xFC	; 252
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	09 c0       	rjmp	.+18     	; 0x18aa <vfprintf+0x21c>
    1898:	f8 01       	movw	r30, r16
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	88 27       	eor	r24, r24
    18a0:	77 fd       	sbrc	r23, 7
    18a2:	80 95       	com	r24
    18a4:	98 2f       	mov	r25, r24
    18a6:	0e 5f       	subi	r16, 0xFE	; 254
    18a8:	1f 4f       	sbci	r17, 0xFF	; 255
    18aa:	4f e6       	ldi	r20, 0x6F	; 111
    18ac:	b4 2e       	mov	r11, r20
    18ae:	b2 22       	and	r11, r18
    18b0:	97 ff       	sbrs	r25, 7
    18b2:	09 c0       	rjmp	.+18     	; 0x18c6 <vfprintf+0x238>
    18b4:	90 95       	com	r25
    18b6:	80 95       	com	r24
    18b8:	70 95       	com	r23
    18ba:	61 95       	neg	r22
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	8f 4f       	sbci	r24, 0xFF	; 255
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	f0 e8       	ldi	r31, 0x80	; 128
    18c4:	bf 2a       	or	r11, r31
    18c6:	a2 01       	movw	r20, r4
    18c8:	2a e0       	ldi	r18, 0x0A	; 10
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	2e d1       	rcall	.+604    	; 0x1b2a <__ultoa_invert>
    18ce:	78 2e       	mov	r7, r24
    18d0:	74 18       	sub	r7, r4
    18d2:	44 c0       	rjmp	.+136    	; 0x195c <vfprintf+0x2ce>
    18d4:	85 37       	cpi	r24, 0x75	; 117
    18d6:	31 f4       	brne	.+12     	; 0x18e4 <vfprintf+0x256>
    18d8:	3f ee       	ldi	r19, 0xEF	; 239
    18da:	b3 2e       	mov	r11, r19
    18dc:	b2 22       	and	r11, r18
    18de:	2a e0       	ldi	r18, 0x0A	; 10
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	25 c0       	rjmp	.+74     	; 0x192e <vfprintf+0x2a0>
    18e4:	99 ef       	ldi	r25, 0xF9	; 249
    18e6:	b9 2e       	mov	r11, r25
    18e8:	b2 22       	and	r11, r18
    18ea:	8f 36       	cpi	r24, 0x6F	; 111
    18ec:	c1 f0       	breq	.+48     	; 0x191e <vfprintf+0x290>
    18ee:	80 37       	cpi	r24, 0x70	; 112
    18f0:	20 f4       	brcc	.+8      	; 0x18fa <vfprintf+0x26c>
    18f2:	88 35       	cpi	r24, 0x58	; 88
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <vfprintf+0x26a>
    18f6:	ae c0       	rjmp	.+348    	; 0x1a54 <vfprintf+0x3c6>
    18f8:	0d c0       	rjmp	.+26     	; 0x1914 <vfprintf+0x286>
    18fa:	80 37       	cpi	r24, 0x70	; 112
    18fc:	21 f0       	breq	.+8      	; 0x1906 <vfprintf+0x278>
    18fe:	88 37       	cpi	r24, 0x78	; 120
    1900:	09 f0       	breq	.+2      	; 0x1904 <vfprintf+0x276>
    1902:	a8 c0       	rjmp	.+336    	; 0x1a54 <vfprintf+0x3c6>
    1904:	02 c0       	rjmp	.+4      	; 0x190a <vfprintf+0x27c>
    1906:	20 e1       	ldi	r18, 0x10	; 16
    1908:	b2 2a       	or	r11, r18
    190a:	b4 fe       	sbrs	r11, 4
    190c:	0b c0       	rjmp	.+22     	; 0x1924 <vfprintf+0x296>
    190e:	84 e0       	ldi	r24, 0x04	; 4
    1910:	b8 2a       	or	r11, r24
    1912:	08 c0       	rjmp	.+16     	; 0x1924 <vfprintf+0x296>
    1914:	b4 fe       	sbrs	r11, 4
    1916:	09 c0       	rjmp	.+18     	; 0x192a <vfprintf+0x29c>
    1918:	e6 e0       	ldi	r30, 0x06	; 6
    191a:	be 2a       	or	r11, r30
    191c:	06 c0       	rjmp	.+12     	; 0x192a <vfprintf+0x29c>
    191e:	28 e0       	ldi	r18, 0x08	; 8
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	05 c0       	rjmp	.+10     	; 0x192e <vfprintf+0x2a0>
    1924:	20 e1       	ldi	r18, 0x10	; 16
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x2a0>
    192a:	20 e1       	ldi	r18, 0x10	; 16
    192c:	32 e0       	ldi	r19, 0x02	; 2
    192e:	b7 fe       	sbrs	r11, 7
    1930:	08 c0       	rjmp	.+16     	; 0x1942 <vfprintf+0x2b4>
    1932:	f8 01       	movw	r30, r16
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	0c 5f       	subi	r16, 0xFC	; 252
    193e:	1f 4f       	sbci	r17, 0xFF	; 255
    1940:	07 c0       	rjmp	.+14     	; 0x1950 <vfprintf+0x2c2>
    1942:	f8 01       	movw	r30, r16
    1944:	60 81       	ld	r22, Z
    1946:	71 81       	ldd	r23, Z+1	; 0x01
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 5f       	subi	r16, 0xFE	; 254
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	a2 01       	movw	r20, r4
    1952:	eb d0       	rcall	.+470    	; 0x1b2a <__ultoa_invert>
    1954:	78 2e       	mov	r7, r24
    1956:	74 18       	sub	r7, r4
    1958:	ff e7       	ldi	r31, 0x7F	; 127
    195a:	bf 22       	and	r11, r31
    195c:	b6 fe       	sbrs	r11, 6
    195e:	0b c0       	rjmp	.+22     	; 0x1976 <vfprintf+0x2e8>
    1960:	2e ef       	ldi	r18, 0xFE	; 254
    1962:	b2 22       	and	r11, r18
    1964:	7e 14       	cp	r7, r14
    1966:	38 f4       	brcc	.+14     	; 0x1976 <vfprintf+0x2e8>
    1968:	b4 fe       	sbrs	r11, 4
    196a:	07 c0       	rjmp	.+14     	; 0x197a <vfprintf+0x2ec>
    196c:	b2 fc       	sbrc	r11, 2
    196e:	05 c0       	rjmp	.+10     	; 0x197a <vfprintf+0x2ec>
    1970:	8f ee       	ldi	r24, 0xEF	; 239
    1972:	b8 22       	and	r11, r24
    1974:	02 c0       	rjmp	.+4      	; 0x197a <vfprintf+0x2ec>
    1976:	a7 2c       	mov	r10, r7
    1978:	01 c0       	rjmp	.+2      	; 0x197c <vfprintf+0x2ee>
    197a:	ae 2c       	mov	r10, r14
    197c:	8b 2d       	mov	r24, r11
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	b4 fe       	sbrs	r11, 4
    1982:	0d c0       	rjmp	.+26     	; 0x199e <vfprintf+0x310>
    1984:	fe 01       	movw	r30, r28
    1986:	e7 0d       	add	r30, r7
    1988:	f1 1d       	adc	r31, r1
    198a:	20 81       	ld	r18, Z
    198c:	20 33       	cpi	r18, 0x30	; 48
    198e:	19 f4       	brne	.+6      	; 0x1996 <vfprintf+0x308>
    1990:	e9 ee       	ldi	r30, 0xE9	; 233
    1992:	be 22       	and	r11, r30
    1994:	09 c0       	rjmp	.+18     	; 0x19a8 <vfprintf+0x31a>
    1996:	a3 94       	inc	r10
    1998:	b2 fe       	sbrs	r11, 2
    199a:	06 c0       	rjmp	.+12     	; 0x19a8 <vfprintf+0x31a>
    199c:	04 c0       	rjmp	.+8      	; 0x19a6 <vfprintf+0x318>
    199e:	86 78       	andi	r24, 0x86	; 134
    19a0:	90 70       	andi	r25, 0x00	; 0
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <vfprintf+0x31a>
    19a6:	a3 94       	inc	r10
    19a8:	8b 2c       	mov	r8, r11
    19aa:	99 24       	eor	r9, r9
    19ac:	b3 fc       	sbrc	r11, 3
    19ae:	13 c0       	rjmp	.+38     	; 0x19d6 <vfprintf+0x348>
    19b0:	b0 fe       	sbrs	r11, 0
    19b2:	0e c0       	rjmp	.+28     	; 0x19d0 <vfprintf+0x342>
    19b4:	af 14       	cp	r10, r15
    19b6:	28 f4       	brcc	.+10     	; 0x19c2 <vfprintf+0x334>
    19b8:	e7 2c       	mov	r14, r7
    19ba:	ef 0c       	add	r14, r15
    19bc:	ea 18       	sub	r14, r10
    19be:	af 2c       	mov	r10, r15
    19c0:	07 c0       	rjmp	.+14     	; 0x19d0 <vfprintf+0x342>
    19c2:	e7 2c       	mov	r14, r7
    19c4:	05 c0       	rjmp	.+10     	; 0x19d0 <vfprintf+0x342>
    19c6:	80 e2       	ldi	r24, 0x20	; 32
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	b6 01       	movw	r22, r12
    19cc:	82 d0       	rcall	.+260    	; 0x1ad2 <fputc>
    19ce:	a3 94       	inc	r10
    19d0:	af 14       	cp	r10, r15
    19d2:	c8 f3       	brcs	.-14     	; 0x19c6 <vfprintf+0x338>
    19d4:	04 c0       	rjmp	.+8      	; 0x19de <vfprintf+0x350>
    19d6:	af 14       	cp	r10, r15
    19d8:	10 f4       	brcc	.+4      	; 0x19de <vfprintf+0x350>
    19da:	fa 18       	sub	r15, r10
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <vfprintf+0x352>
    19de:	ff 24       	eor	r15, r15
    19e0:	84 fe       	sbrs	r8, 4
    19e2:	0e c0       	rjmp	.+28     	; 0x1a00 <vfprintf+0x372>
    19e4:	80 e3       	ldi	r24, 0x30	; 48
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	b6 01       	movw	r22, r12
    19ea:	73 d0       	rcall	.+230    	; 0x1ad2 <fputc>
    19ec:	82 fe       	sbrs	r8, 2
    19ee:	1d c0       	rjmp	.+58     	; 0x1a2a <vfprintf+0x39c>
    19f0:	81 fe       	sbrs	r8, 1
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <vfprintf+0x36c>
    19f4:	88 e5       	ldi	r24, 0x58	; 88
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	10 c0       	rjmp	.+32     	; 0x1a1a <vfprintf+0x38c>
    19fa:	88 e7       	ldi	r24, 0x78	; 120
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	0d c0       	rjmp	.+26     	; 0x1a1a <vfprintf+0x38c>
    1a00:	c4 01       	movw	r24, r8
    1a02:	86 78       	andi	r24, 0x86	; 134
    1a04:	90 70       	andi	r25, 0x00	; 0
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	81 f0       	breq	.+32     	; 0x1a2a <vfprintf+0x39c>
    1a0a:	81 fc       	sbrc	r8, 1
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <vfprintf+0x384>
    1a0e:	80 e2       	ldi	r24, 0x20	; 32
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <vfprintf+0x386>
    1a12:	8b e2       	ldi	r24, 0x2B	; 43
    1a14:	b7 fc       	sbrc	r11, 7
    1a16:	8d e2       	ldi	r24, 0x2D	; 45
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	b6 01       	movw	r22, r12
    1a1c:	5a d0       	rcall	.+180    	; 0x1ad2 <fputc>
    1a1e:	05 c0       	rjmp	.+10     	; 0x1a2a <vfprintf+0x39c>
    1a20:	80 e3       	ldi	r24, 0x30	; 48
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	b6 01       	movw	r22, r12
    1a26:	55 d0       	rcall	.+170    	; 0x1ad2 <fputc>
    1a28:	ea 94       	dec	r14
    1a2a:	7e 14       	cp	r7, r14
    1a2c:	c8 f3       	brcs	.-14     	; 0x1a20 <vfprintf+0x392>
    1a2e:	7a 94       	dec	r7
    1a30:	f2 01       	movw	r30, r4
    1a32:	e7 0d       	add	r30, r7
    1a34:	f1 1d       	adc	r31, r1
    1a36:	80 81       	ld	r24, Z
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	b6 01       	movw	r22, r12
    1a3c:	4a d0       	rcall	.+148    	; 0x1ad2 <fputc>
    1a3e:	77 20       	and	r7, r7
    1a40:	b1 f7       	brne	.-20     	; 0x1a2e <vfprintf+0x3a0>
    1a42:	05 c0       	rjmp	.+10     	; 0x1a4e <vfprintf+0x3c0>
    1a44:	80 e2       	ldi	r24, 0x20	; 32
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	b6 01       	movw	r22, r12
    1a4a:	43 d0       	rcall	.+134    	; 0x1ad2 <fputc>
    1a4c:	fa 94       	dec	r15
    1a4e:	ff 20       	and	r15, r15
    1a50:	c9 f7       	brne	.-14     	; 0x1a44 <vfprintf+0x3b6>
    1a52:	44 ce       	rjmp	.-888    	; 0x16dc <vfprintf+0x4e>
    1a54:	f6 01       	movw	r30, r12
    1a56:	26 81       	ldd	r18, Z+6	; 0x06
    1a58:	37 81       	ldd	r19, Z+7	; 0x07
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <vfprintf+0x3d2>
    1a5c:	2f ef       	ldi	r18, 0xFF	; 255
    1a5e:	3f ef       	ldi	r19, 0xFF	; 255
    1a60:	c9 01       	movw	r24, r18
    1a62:	2c 96       	adiw	r28, 0x0c	; 12
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	1f 91       	pop	r17
    1a74:	0f 91       	pop	r16
    1a76:	ff 90       	pop	r15
    1a78:	ef 90       	pop	r14
    1a7a:	df 90       	pop	r13
    1a7c:	cf 90       	pop	r12
    1a7e:	bf 90       	pop	r11
    1a80:	af 90       	pop	r10
    1a82:	9f 90       	pop	r9
    1a84:	8f 90       	pop	r8
    1a86:	7f 90       	pop	r7
    1a88:	6f 90       	pop	r6
    1a8a:	5f 90       	pop	r5
    1a8c:	4f 90       	pop	r4
    1a8e:	3f 90       	pop	r3
    1a90:	2f 90       	pop	r2
    1a92:	08 95       	ret

00001a94 <strnlen_P>:
    1a94:	fc 01       	movw	r30, r24
    1a96:	05 90       	lpm	r0, Z+
    1a98:	61 50       	subi	r22, 0x01	; 1
    1a9a:	70 40       	sbci	r23, 0x00	; 0
    1a9c:	01 10       	cpse	r0, r1
    1a9e:	d8 f7       	brcc	.-10     	; 0x1a96 <strnlen_P+0x2>
    1aa0:	80 95       	com	r24
    1aa2:	90 95       	com	r25
    1aa4:	8e 0f       	add	r24, r30
    1aa6:	9f 1f       	adc	r25, r31
    1aa8:	08 95       	ret

00001aaa <memcpy>:
    1aaa:	fb 01       	movw	r30, r22
    1aac:	dc 01       	movw	r26, r24
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <memcpy+0xa>
    1ab0:	01 90       	ld	r0, Z+
    1ab2:	0d 92       	st	X+, r0
    1ab4:	41 50       	subi	r20, 0x01	; 1
    1ab6:	50 40       	sbci	r21, 0x00	; 0
    1ab8:	d8 f7       	brcc	.-10     	; 0x1ab0 <memcpy+0x6>
    1aba:	08 95       	ret

00001abc <strnlen>:
    1abc:	fc 01       	movw	r30, r24
    1abe:	61 50       	subi	r22, 0x01	; 1
    1ac0:	70 40       	sbci	r23, 0x00	; 0
    1ac2:	01 90       	ld	r0, Z+
    1ac4:	01 10       	cpse	r0, r1
    1ac6:	d8 f7       	brcc	.-10     	; 0x1abe <strnlen+0x2>
    1ac8:	80 95       	com	r24
    1aca:	90 95       	com	r25
    1acc:	8e 0f       	add	r24, r30
    1ace:	9f 1f       	adc	r25, r31
    1ad0:	08 95       	ret

00001ad2 <fputc>:
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	8c 01       	movw	r16, r24
    1adc:	eb 01       	movw	r28, r22
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	81 ff       	sbrs	r24, 1
    1ae2:	1b c0       	rjmp	.+54     	; 0x1b1a <fputc+0x48>
    1ae4:	82 ff       	sbrs	r24, 2
    1ae6:	0d c0       	rjmp	.+26     	; 0x1b02 <fputc+0x30>
    1ae8:	2e 81       	ldd	r18, Y+6	; 0x06
    1aea:	3f 81       	ldd	r19, Y+7	; 0x07
    1aec:	8c 81       	ldd	r24, Y+4	; 0x04
    1aee:	9d 81       	ldd	r25, Y+5	; 0x05
    1af0:	28 17       	cp	r18, r24
    1af2:	39 07       	cpc	r19, r25
    1af4:	64 f4       	brge	.+24     	; 0x1b0e <fputc+0x3c>
    1af6:	e8 81       	ld	r30, Y
    1af8:	f9 81       	ldd	r31, Y+1	; 0x01
    1afa:	01 93       	st	Z+, r16
    1afc:	f9 83       	std	Y+1, r31	; 0x01
    1afe:	e8 83       	st	Y, r30
    1b00:	06 c0       	rjmp	.+12     	; 0x1b0e <fputc+0x3c>
    1b02:	e8 85       	ldd	r30, Y+8	; 0x08
    1b04:	f9 85       	ldd	r31, Y+9	; 0x09
    1b06:	80 2f       	mov	r24, r16
    1b08:	09 95       	icall
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	31 f4       	brne	.+12     	; 0x1b1a <fputc+0x48>
    1b0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b10:	9f 81       	ldd	r25, Y+7	; 0x07
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	9f 83       	std	Y+7, r25	; 0x07
    1b16:	8e 83       	std	Y+6, r24	; 0x06
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <fputc+0x4c>
    1b1a:	0f ef       	ldi	r16, 0xFF	; 255
    1b1c:	1f ef       	ldi	r17, 0xFF	; 255
    1b1e:	c8 01       	movw	r24, r16
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	08 95       	ret

00001b2a <__ultoa_invert>:
    1b2a:	fa 01       	movw	r30, r20
    1b2c:	aa 27       	eor	r26, r26
    1b2e:	28 30       	cpi	r18, 0x08	; 8
    1b30:	51 f1       	breq	.+84     	; 0x1b86 <__ultoa_invert+0x5c>
    1b32:	20 31       	cpi	r18, 0x10	; 16
    1b34:	81 f1       	breq	.+96     	; 0x1b96 <__ultoa_invert+0x6c>
    1b36:	e8 94       	clt
    1b38:	6f 93       	push	r22
    1b3a:	6e 7f       	andi	r22, 0xFE	; 254
    1b3c:	6e 5f       	subi	r22, 0xFE	; 254
    1b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b40:	8f 4f       	sbci	r24, 0xFF	; 255
    1b42:	9f 4f       	sbci	r25, 0xFF	; 255
    1b44:	af 4f       	sbci	r26, 0xFF	; 255
    1b46:	b1 e0       	ldi	r27, 0x01	; 1
    1b48:	3e d0       	rcall	.+124    	; 0x1bc6 <__ultoa_invert+0x9c>
    1b4a:	b4 e0       	ldi	r27, 0x04	; 4
    1b4c:	3c d0       	rcall	.+120    	; 0x1bc6 <__ultoa_invert+0x9c>
    1b4e:	67 0f       	add	r22, r23
    1b50:	78 1f       	adc	r23, r24
    1b52:	89 1f       	adc	r24, r25
    1b54:	9a 1f       	adc	r25, r26
    1b56:	a1 1d       	adc	r26, r1
    1b58:	68 0f       	add	r22, r24
    1b5a:	79 1f       	adc	r23, r25
    1b5c:	8a 1f       	adc	r24, r26
    1b5e:	91 1d       	adc	r25, r1
    1b60:	a1 1d       	adc	r26, r1
    1b62:	6a 0f       	add	r22, r26
    1b64:	71 1d       	adc	r23, r1
    1b66:	81 1d       	adc	r24, r1
    1b68:	91 1d       	adc	r25, r1
    1b6a:	a1 1d       	adc	r26, r1
    1b6c:	20 d0       	rcall	.+64     	; 0x1bae <__ultoa_invert+0x84>
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <__ultoa_invert+0x48>
    1b70:	68 94       	set
    1b72:	3f 91       	pop	r19
    1b74:	2a e0       	ldi	r18, 0x0A	; 10
    1b76:	26 9f       	mul	r18, r22
    1b78:	11 24       	eor	r1, r1
    1b7a:	30 19       	sub	r19, r0
    1b7c:	30 5d       	subi	r19, 0xD0	; 208
    1b7e:	31 93       	st	Z+, r19
    1b80:	de f6       	brtc	.-74     	; 0x1b38 <__ultoa_invert+0xe>
    1b82:	cf 01       	movw	r24, r30
    1b84:	08 95       	ret
    1b86:	46 2f       	mov	r20, r22
    1b88:	47 70       	andi	r20, 0x07	; 7
    1b8a:	40 5d       	subi	r20, 0xD0	; 208
    1b8c:	41 93       	st	Z+, r20
    1b8e:	b3 e0       	ldi	r27, 0x03	; 3
    1b90:	0f d0       	rcall	.+30     	; 0x1bb0 <__ultoa_invert+0x86>
    1b92:	c9 f7       	brne	.-14     	; 0x1b86 <__ultoa_invert+0x5c>
    1b94:	f6 cf       	rjmp	.-20     	; 0x1b82 <__ultoa_invert+0x58>
    1b96:	46 2f       	mov	r20, r22
    1b98:	4f 70       	andi	r20, 0x0F	; 15
    1b9a:	40 5d       	subi	r20, 0xD0	; 208
    1b9c:	4a 33       	cpi	r20, 0x3A	; 58
    1b9e:	18 f0       	brcs	.+6      	; 0x1ba6 <__ultoa_invert+0x7c>
    1ba0:	49 5d       	subi	r20, 0xD9	; 217
    1ba2:	31 fd       	sbrc	r19, 1
    1ba4:	40 52       	subi	r20, 0x20	; 32
    1ba6:	41 93       	st	Z+, r20
    1ba8:	02 d0       	rcall	.+4      	; 0x1bae <__ultoa_invert+0x84>
    1baa:	a9 f7       	brne	.-22     	; 0x1b96 <__ultoa_invert+0x6c>
    1bac:	ea cf       	rjmp	.-44     	; 0x1b82 <__ultoa_invert+0x58>
    1bae:	b4 e0       	ldi	r27, 0x04	; 4
    1bb0:	a6 95       	lsr	r26
    1bb2:	97 95       	ror	r25
    1bb4:	87 95       	ror	r24
    1bb6:	77 95       	ror	r23
    1bb8:	67 95       	ror	r22
    1bba:	ba 95       	dec	r27
    1bbc:	c9 f7       	brne	.-14     	; 0x1bb0 <__ultoa_invert+0x86>
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	61 05       	cpc	r22, r1
    1bc2:	71 05       	cpc	r23, r1
    1bc4:	08 95       	ret
    1bc6:	9b 01       	movw	r18, r22
    1bc8:	ac 01       	movw	r20, r24
    1bca:	0a 2e       	mov	r0, r26
    1bcc:	06 94       	lsr	r0
    1bce:	57 95       	ror	r21
    1bd0:	47 95       	ror	r20
    1bd2:	37 95       	ror	r19
    1bd4:	27 95       	ror	r18
    1bd6:	ba 95       	dec	r27
    1bd8:	c9 f7       	brne	.-14     	; 0x1bcc <__ultoa_invert+0xa2>
    1bda:	62 0f       	add	r22, r18
    1bdc:	73 1f       	adc	r23, r19
    1bde:	84 1f       	adc	r24, r20
    1be0:	95 1f       	adc	r25, r21
    1be2:	a0 1d       	adc	r26, r0
    1be4:	08 95       	ret

00001be6 <_exit>:
    1be6:	f8 94       	cli

00001be8 <__stop_program>:
    1be8:	ff cf       	rjmp	.-2      	; 0x1be8 <__stop_program>
