
JoystickHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00002496  0000252a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002496  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fd  00800112  00800112  0000253c  2**0
                  ALLOC
  3 .stab         000021a8  00000000  00000000  0000253c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7e  00000000  00000000  000046e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000380  00000000  00000000  00005462  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008d8  00000000  00000000  000057e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000577f  00000000  00000000  000060ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000180f  00000000  00000000  0000b839  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000048db  00000000  00000000  0000d048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000540  00000000  00000000  00011924  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000026c7  00000000  00000000  00011e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002ea1  00000000  00000000  0001452b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000cb3  00000000  00000000  000173cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000488  00000000  00000000  0001807f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	68 c1       	rjmp	.+720    	; 0x2d2 <__ctors_end>
       2:	00 00       	nop
       4:	84 c1       	rjmp	.+776    	; 0x30e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c1       	rjmp	.+772    	; 0x30e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c1       	rjmp	.+768    	; 0x30e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c1       	rjmp	.+764    	; 0x30e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c1       	rjmp	.+760    	; 0x30e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c1       	rjmp	.+756    	; 0x30e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c1       	rjmp	.+752    	; 0x30e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c1       	rjmp	.+748    	; 0x30e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c1       	rjmp	.+744    	; 0x30e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__vector_10>
      2c:	70 c1       	rjmp	.+736    	; 0x30e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6e c1       	rjmp	.+732    	; 0x30e <__bad_interrupt>
      32:	00 00       	nop
      34:	6c c1       	rjmp	.+728    	; 0x30e <__bad_interrupt>
      36:	00 00       	nop
      38:	6a c1       	rjmp	.+724    	; 0x30e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	68 c1       	rjmp	.+720    	; 0x30e <__bad_interrupt>
      3e:	00 00       	nop
      40:	66 c1       	rjmp	.+716    	; 0x30e <__bad_interrupt>
      42:	00 00       	nop
      44:	64 c1       	rjmp	.+712    	; 0x30e <__bad_interrupt>
      46:	00 00       	nop
      48:	62 c1       	rjmp	.+708    	; 0x30e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	60 c1       	rjmp	.+704    	; 0x30e <__bad_interrupt>
      4e:	00 00       	nop
      50:	5e c1       	rjmp	.+700    	; 0x30e <__bad_interrupt>
      52:	00 00       	nop
      54:	5c c1       	rjmp	.+696    	; 0x30e <__bad_interrupt>
      56:	00 00       	nop
      58:	5a c1       	rjmp	.+692    	; 0x30e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c1       	rjmp	.+688    	; 0x30e <__bad_interrupt>
      5e:	00 00       	nop
      60:	56 c1       	rjmp	.+684    	; 0x30e <__bad_interrupt>
      62:	00 00       	nop
      64:	54 c1       	rjmp	.+680    	; 0x30e <__bad_interrupt>
      66:	00 00       	nop
      68:	52 c1       	rjmp	.+676    	; 0x30e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	50 c1       	rjmp	.+672    	; 0x30e <__bad_interrupt>
      6e:	00 00       	nop
      70:	4e c1       	rjmp	.+668    	; 0x30e <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c1       	rjmp	.+664    	; 0x30e <__bad_interrupt>
      76:	00 00       	nop
      78:	4a c1       	rjmp	.+660    	; 0x30e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	48 c1       	rjmp	.+656    	; 0x30e <__bad_interrupt>
      7e:	00 00       	nop
      80:	46 c1       	rjmp	.+652    	; 0x30e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c1       	rjmp	.+648    	; 0x30e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c1       	rjmp	.+644    	; 0x30e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	40 c1       	rjmp	.+640    	; 0x30e <__bad_interrupt>
      8e:	00 00       	nop
      90:	3e c1       	rjmp	.+636    	; 0x30e <__bad_interrupt>
      92:	00 00       	nop
      94:	3c c1       	rjmp	.+632    	; 0x30e <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4314>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4307>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4302>:
     11d:	4a 6f 79 73 74 69 63 6b 20 45 6e 75 6d 65 72 61     Joystick Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4300>:
     134:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     144:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000014e <__c.4298>:
     14e:	4e 6f 74 20 61 20 76 61 6c 69 64 20 4a 6f 79 73     Not a valid Joys
     15e:	74 69 63 6b 2e 1b 5b 33 37 6d 00                    tick..[37m.

00000169 <__c.4296>:
     169:	1b 5b 33 31 6d 52 65 70 6f 72 74 20 50 61 72 73     .[31mReport Pars
     179:	65 20 45 72 72 6f 72 2e 0d 0a 00                    e Error....

00000184 <__c.4294>:
     184:	50 72 6f 63 65 73 73 69 6e 67 20 48 49 44 20 52     Processing HID R
     194:	65 70 6f 72 74 20 28 53 69 7a 65 20 25 64 20 42     eport (Size %d B
     1a4:	79 74 65 73 29 2e 0d 0a 00                          ytes)....

000001ad <__c.4292>:
     1ad:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1bd:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1cd:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1dd:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1ed:	37 6d 00                                            7m.

000001f0 <__c.4290>:
     1f0:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     200:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000020a <__c.4288>:
     20a:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     21a:	69 63 65 2e 0d 0a 00                                ice....

00000221 <__c.4286>:
     221:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     231:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     241:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000024b <__c.4283>:
     24b:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     25b:	61 74 61 2e 0d 0a 00                                ata....

00000262 <__c.4278>:
     262:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     272:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000281 <__c.4273>:
     281:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     291:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000029e <__c.4264>:
     29e:	1b 5b 33 36 6d 4a 6f 79 73 74 69 63 6b 20 48 49     .[36mJoystick HI
     2ae:	44 20 50 61 72 73 65 72 20 48 6f 73 74 20 44 65     D Parser Host De
     2be:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     2ce:	37 6d 00 00                                         7m..

000002d2 <__ctors_end>:
     2d2:	11 24       	eor	r1, r1
     2d4:	1f be       	out	0x3f, r1	; 63
     2d6:	cf ef       	ldi	r28, 0xFF	; 255
     2d8:	d0 e2       	ldi	r29, 0x20	; 32
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	cd bf       	out	0x3d, r28	; 61

000002de <__do_copy_data>:
     2de:	11 e0       	ldi	r17, 0x01	; 1
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b1 e0       	ldi	r27, 0x01	; 1
     2e4:	e6 e9       	ldi	r30, 0x96	; 150
     2e6:	f4 e2       	ldi	r31, 0x24	; 36
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a2 31       	cpi	r26, 0x12	; 18
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	15 e0       	ldi	r17, 0x05	; 5
     2fa:	a2 e1       	ldi	r26, 0x12	; 18
     2fc:	b1 e0       	ldi	r27, 0x01	; 1
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	af 30       	cpi	r26, 0x0F	; 15
     304:	b1 07       	cpc	r27, r17
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	f8 d1       	rcall	.+1008   	; 0x6fa <main>
     30a:	0c 94 49 12 	jmp	0x2492	; 0x2492 <_exit>

0000030e <__bad_interrupt>:
     30e:	78 ce       	rjmp	.-784    	; 0x0 <__vectors>

00000310 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     310:	9b b1       	in	r25, 0x0b	; 11
     312:	9f 70       	andi	r25, 0x0F	; 15
     314:	98 2b       	or	r25, r24
     316:	9b b9       	out	0x0b, r25	; 11
			}
     318:	08 95       	ret

0000031a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     31a:	84 b7       	in	r24, 0x34	; 52
     31c:	87 7f       	andi	r24, 0xF7	; 247
     31e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     320:	28 e1       	ldi	r18, 0x18	; 24
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	20 93 60 00 	sts	0x0060, r18
     32a:	10 92 60 00 	sts	0x0060, r1
     32e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	80 e8       	ldi	r24, 0x80	; 128
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	80 93 61 00 	sts	0x0061, r24
     33c:	90 93 61 00 	sts	0x0061, r25
     340:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     342:	83 e3       	ldi	r24, 0x33	; 51
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	90 93 cd 00 	sts	0x00CD, r25
     34a:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     34e:	86 e0       	ldi	r24, 0x06	; 6
     350:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     354:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     358:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     35c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     35e:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     360:	8a b1       	in	r24, 0x0a	; 10
     362:	80 6f       	ori	r24, 0xF0	; 240
     364:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     366:	8b b1       	in	r24, 0x0b	; 11
     368:	8f 70       	andi	r24, 0x0F	; 15
     36a:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     36c:	0e 94 6d 0c 	call	0x18da	; 0x18da <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <Serial_CreateStream>

00000378 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     378:	81 e8       	ldi	r24, 0x81	; 129
     37a:	92 e0       	ldi	r25, 0x02	; 2
     37c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     380:	80 ea       	ldi	r24, 0xA0	; 160
}
     382:	c6 cf       	rjmp	.-116    	; 0x310 <LEDs_SetAllLEDs>

00000384 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     384:	82 e6       	ldi	r24, 0x62	; 98
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     38c:	80 e1       	ldi	r24, 0x10	; 16
}
     38e:	c0 cf       	rjmp	.-128    	; 0x310 <LEDs_SetAllLEDs>

00000390 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     390:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     392:	8b e4       	ldi	r24, 0x4B	; 75
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     39a:	da d1       	rcall	.+948    	; 0x750 <ProcessConfigurationDescriptor>
     39c:	18 2f       	mov	r17, r24
     39e:	88 23       	and	r24, r24
     3a0:	01 f1       	breq	.+64     	; 0x3e2 <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
	{
		if (ErrorCode == ControlError)
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	19 f4       	brne	.+6      	; 0x3ac <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     3a6:	81 e2       	ldi	r24, 0x21	; 33
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     3ac:	8a e0       	ldi	r24, 0x0A	; 10
     3ae:	92 e0       	ldi	r25, 0x02	; 2
     3b0:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3b4:	00 d0       	rcall	.+0      	; 0x3b6 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     3b8:	ed b7       	in	r30, 0x3d	; 61
     3ba:	fe b7       	in	r31, 0x3e	; 62
     3bc:	31 96       	adiw	r30, 0x01	; 1
     3be:	20 ef       	ldi	r18, 0xF0	; 240
     3c0:	31 e0       	ldi	r19, 0x01	; 1
     3c2:	ad b7       	in	r26, 0x3d	; 61
     3c4:	be b7       	in	r27, 0x3e	; 62
     3c6:	12 96       	adiw	r26, 0x02	; 2
     3c8:	3c 93       	st	X, r19
     3ca:	2e 93       	st	-X, r18
     3cc:	11 97       	sbiw	r26, 0x01	; 1
     3ce:	12 83       	std	Z+2, r17	; 0x02
     3d0:	13 82       	std	Z+3, r1	; 0x03
     3d2:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	80 e9       	ldi	r24, 0x90	; 144
     3e0:	59 c0       	rjmp	.+178    	; 0x494 <EVENT_USB_Host_DeviceEnumerationComplete+0x104>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <USB_Host_SetDeviceConfiguration>
     3e8:	88 23       	and	r24, r24
     3ea:	79 f0       	breq	.+30     	; 0x40a <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     3ec:	00 d0       	rcall	.+0      	; 0x3ee <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
     3f0:	ed b7       	in	r30, 0x3d	; 61
     3f2:	fe b7       	in	r31, 0x3e	; 62
     3f4:	31 96       	adiw	r30, 0x01	; 1
     3f6:	2d ea       	ldi	r18, 0xAD	; 173
     3f8:	31 e0       	ldi	r19, 0x01	; 1
     3fa:	ad b7       	in	r26, 0x3d	; 61
     3fc:	be b7       	in	r27, 0x3e	; 62
     3fe:	12 96       	adiw	r26, 0x02	; 2
     400:	3c 93       	st	X, r19
     402:	2e 93       	st	-X, r18
     404:	11 97       	sbiw	r26, 0x01	; 1
     406:	82 83       	std	Z+2, r24	; 0x02
     408:	e3 cf       	rjmp	.-58     	; 0x3d0 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Processing HID Report (Size %d Bytes).\r\n"), HIDReportSize);
     40a:	00 d0       	rcall	.+0      	; 0x40c <EVENT_USB_Host_DeviceEnumerationComplete+0x7c>
     40c:	00 d0       	rcall	.+0      	; 0x40e <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     40e:	84 e8       	ldi	r24, 0x84	; 132
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	ed b7       	in	r30, 0x3d	; 61
     414:	fe b7       	in	r31, 0x3e	; 62
     416:	92 83       	std	Z+2, r25	; 0x02
     418:	81 83       	std	Z+1, r24	; 0x01
     41a:	80 91 ee 04 	lds	r24, 0x04EE
     41e:	90 91 ef 04 	lds	r25, 0x04EF
     422:	94 83       	std	Z+4, r25	; 0x04
     424:	83 83       	std	Z+3, r24	; 0x03
     426:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <printf_P>

	/* Get and process the device's first HID report descriptor */
	if ((ErrorCode = GetHIDReportData()) != ParseSuccessful)
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	22 d2       	rcall	.+1092   	; 0x878 <GetHIDReportData>
     434:	18 2f       	mov	r17, r24
     436:	88 23       	and	r24, r24
     438:	41 f1       	breq	.+80     	; 0x48a <EVENT_USB_Host_DeviceEnumerationComplete+0xfa>
	{
		puts_P(PSTR(ESC_FG_RED "Report Parse Error.\r\n"));
     43a:	89 e6       	ldi	r24, 0x69	; 105
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <puts_P>

		if (!(HIDReportInfo.TotalReportItems))
     442:	80 91 15 01 	lds	r24, 0x0115
     446:	88 23       	and	r24, r24
     448:	29 f4       	brne	.+10     	; 0x454 <EVENT_USB_Host_DeviceEnumerationComplete+0xc4>
			puts_P(PSTR("Not a valid Joystick." ESC_FG_WHITE));
     44a:	8e e4       	ldi	r24, 0x4E	; 78
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <puts_P>
     452:	15 c0       	rjmp	.+42     	; 0x47e <EVENT_USB_Host_DeviceEnumerationComplete+0xee>
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     454:	00 d0       	rcall	.+0      	; 0x456 <EVENT_USB_Host_DeviceEnumerationComplete+0xc6>
     456:	00 d0       	rcall	.+0      	; 0x458 <EVENT_USB_Host_DeviceEnumerationComplete+0xc8>
     458:	ed b7       	in	r30, 0x3d	; 61
     45a:	fe b7       	in	r31, 0x3e	; 62
     45c:	31 96       	adiw	r30, 0x01	; 1
     45e:	24 e3       	ldi	r18, 0x34	; 52
     460:	31 e0       	ldi	r19, 0x01	; 1
     462:	ad b7       	in	r26, 0x3d	; 61
     464:	be b7       	in	r27, 0x3e	; 62
     466:	12 96       	adiw	r26, 0x02	; 2
     468:	3c 93       	st	X, r19
     46a:	2e 93       	st	-X, r18
     46c:	11 97       	sbiw	r26, 0x01	; 1
     46e:	12 83       	std	Z+2, r17	; 0x02
     470:	13 82       	std	Z+3, r1	; 0x03
     472:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <printf_P>
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     47e:	80 e9       	ldi	r24, 0x90	; 144
     480:	47 df       	rcall	.-370    	; 0x310 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <USB_Host_SetDeviceConfiguration>
		return;
     488:	06 c0       	rjmp	.+12     	; 0x496 <EVENT_USB_Host_DeviceEnumerationComplete+0x106>
	}

	puts_P(PSTR("Joystick Enumerated.\r\n"));
     48a:	8d e1       	ldi	r24, 0x1D	; 29
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     492:	80 e6       	ldi	r24, 0x60	; 96
     494:	3d df       	rcall	.-390    	; 0x310 <LEDs_SetAllLEDs>
}
     496:	1f 91       	pop	r17
     498:	08 95       	ret

0000049a <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     49a:	df 93       	push	r29
     49c:	cf 93       	push	r28
     49e:	0f 92       	push	r0
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     4a4:	89 83       	std	Y+1, r24	; 0x01
     4a6:	0e 94 05 0c 	call	0x180a	; 0x180a <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <EVENT_USB_Host_HostError+0x12>
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <EVENT_USB_Host_HostError+0x14>
     4ae:	ed b7       	in	r30, 0x3d	; 61
     4b0:	fe b7       	in	r31, 0x3e	; 62
     4b2:	31 96       	adiw	r30, 0x01	; 1
     4b4:	2e ee       	ldi	r18, 0xEE	; 238
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	ad b7       	in	r26, 0x3d	; 61
     4ba:	be b7       	in	r27, 0x3e	; 62
     4bc:	12 96       	adiw	r26, 0x02	; 2
     4be:	3c 93       	st	X, r19
     4c0:	2e 93       	st	-X, r18
     4c2:	11 97       	sbiw	r26, 0x01	; 1
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	82 83       	std	Z+2, r24	; 0x02
     4c8:	13 82       	std	Z+3, r1	; 0x03
     4ca:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	80 e9       	ldi	r24, 0x90	; 144
     4d8:	1b df       	rcall	.-458    	; 0x310 <LEDs_SetAllLEDs>
     4da:	ff cf       	rjmp	.-2      	; 0x4da <EVENT_USB_Host_HostError+0x40>

000004dc <EVENT_USB_Host_DeviceEnumerationFailed>:
/** Event handler for the USB_DeviceEnumerationFailed event. This indicates that a problem occurred while
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode, const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4dc:	90 91 fa 04 	lds	r25, 0x04FA
     4e0:	2d b7       	in	r18, 0x3d	; 61
     4e2:	3e b7       	in	r19, 0x3e	; 62
     4e4:	28 50       	subi	r18, 0x08	; 8
     4e6:	30 40       	sbci	r19, 0x00	; 0
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	3e bf       	out	0x3e, r19	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	2d bf       	out	0x3d, r18	; 61
     4f2:	ed b7       	in	r30, 0x3d	; 61
     4f4:	fe b7       	in	r31, 0x3e	; 62
     4f6:	31 96       	adiw	r30, 0x01	; 1
     4f8:	28 e9       	ldi	r18, 0x98	; 152
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	ad b7       	in	r26, 0x3d	; 61
     4fe:	be b7       	in	r27, 0x3e	; 62
     500:	12 96       	adiw	r26, 0x02	; 2
     502:	3c 93       	st	X, r19
     504:	2e 93       	st	-X, r18
     506:	11 97       	sbiw	r26, 0x01	; 1
     508:	82 83       	std	Z+2, r24	; 0x02
     50a:	13 82       	std	Z+3, r1	; 0x03
     50c:	64 83       	std	Z+4, r22	; 0x04
     50e:	15 82       	std	Z+5, r1	; 0x05
     510:	96 83       	std	Z+6, r25	; 0x06
     512:	17 82       	std	Z+7, r1	; 0x07
     514:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     518:	2d b7       	in	r18, 0x3d	; 61
     51a:	3e b7       	in	r19, 0x3e	; 62
     51c:	28 5f       	subi	r18, 0xF8	; 248
     51e:	3f 4f       	sbci	r19, 0xFF	; 255
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	3e bf       	out	0x3e, r19	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	2d bf       	out	0x3d, r18	; 61
     52a:	80 e9       	ldi	r24, 0x90	; 144
}
     52c:	f1 ce       	rjmp	.-542    	; 0x310 <LEDs_SetAllLEDs>

0000052e <ProcessJoystickReport>:
 *  as required and displays movement and button presses on the board LEDs.
 *
 *  \param[in] JoystickReport  Pointer to a HID report from an attached joystick device
 */
void ProcessJoystickReport(uint8_t* JoystickReport)
{
     52e:	af 92       	push	r10
     530:	bf 92       	push	r11
     532:	cf 92       	push	r12
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	8c 01       	movw	r16, r24
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     544:	cc 24       	eor	r12, r12
 *
 *  \param[in] JoystickReport  Pointer to a HID report from an attached joystick device
 */
void ProcessJoystickReport(uint8_t* JoystickReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;
     546:	dd 24       	eor	r13, r13

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     548:	2a e2       	ldi	r18, 0x2A	; 42
     54a:	a2 2e       	mov	r10, r18
     54c:	b1 2c       	mov	r11, r1

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     54e:	90 e1       	ldi	r25, 0x10	; 16
     550:	e9 2e       	mov	r14, r25
     552:	f1 2c       	mov	r15, r1
void ProcessJoystickReport(uint8_t* JoystickReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     554:	5f c0       	rjmp	.+190    	; 0x614 <ProcessJoystickReport+0xe6>
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     556:	8c 2d       	mov	r24, r12
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	8a 9d       	mul	r24, r10
     55c:	e0 01       	movw	r28, r0
     55e:	8b 9d       	mul	r24, r11
     560:	d0 0d       	add	r29, r0
     562:	9a 9d       	mul	r25, r10
     564:	d0 0d       	add	r29, r0
     566:	11 24       	eor	r1, r1
     568:	be 01       	movw	r22, r28
     56a:	6a 5e       	subi	r22, 0xEA	; 234
     56c:	7e 4f       	sbci	r23, 0xFE	; 254

		bool FoundData;

		if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     56e:	cb 5e       	subi	r28, 0xEB	; 235
     570:	de 4f       	sbci	r29, 0xFE	; 254
     572:	8a 85       	ldd	r24, Y+10	; 0x0a
     574:	9b 85       	ldd	r25, Y+11	; 0x0b
     576:	89 30       	cpi	r24, 0x09	; 9
     578:	91 05       	cpc	r25, r1
     57a:	91 f4       	brne	.+36     	; 0x5a0 <ProcessJoystickReport+0x72>
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	88 23       	and	r24, r24
     580:	09 f0       	breq	.+2      	; 0x584 <ProcessJoystickReport+0x56>
     582:	47 c0       	rjmp	.+142    	; 0x612 <ProcessJoystickReport+0xe4>
			(ReportItem->ItemType                     == HID_REPORT_ITEM_In))
		{
			/* Get the joystick button value */
			FoundData = USB_GetHIDReportItemInfo(JoystickReport, ReportItem);
     584:	c8 01       	movw	r24, r16
     586:	fd d5       	rcall	.+3066   	; 0x1182 <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     588:	88 23       	and	r24, r24
     58a:	09 f4       	brne	.+2      	; 0x58e <ProcessJoystickReport+0x60>
     58c:	42 c0       	rjmp	.+132    	; 0x612 <ProcessJoystickReport+0xe4>
			  continue;

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
     58e:	8b a1       	ldd	r24, Y+35	; 0x23
     590:	9c a1       	ldd	r25, Y+36	; 0x24
     592:	ad a1       	ldd	r26, Y+37	; 0x25
     594:	be a1       	ldd	r27, Y+38	; 0x26
     596:	00 97       	sbiw	r24, 0x00	; 0
     598:	a1 05       	cpc	r26, r1
     59a:	b1 05       	cpc	r27, r1
     59c:	c1 f5       	brne	.+112    	; 0x60e <ProcessJoystickReport+0xe0>
     59e:	39 c0       	rjmp	.+114    	; 0x612 <ProcessJoystickReport+0xe4>
			  LEDMask = LEDS_ALL_LEDS;
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     5a0:	81 30       	cpi	r24, 0x01	; 1
     5a2:	91 05       	cpc	r25, r1
     5a4:	b1 f5       	brne	.+108    	; 0x612 <ProcessJoystickReport+0xe4>
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
     5a6:	8c 85       	ldd	r24, Y+12	; 0x0c
     5a8:	9d 85       	ldd	r25, Y+13	; 0x0d
     5aa:	c0 97       	sbiw	r24, 0x30	; 48

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
			  LEDMask = LEDS_ALL_LEDS;
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     5ac:	82 30       	cpi	r24, 0x02	; 2
     5ae:	91 05       	cpc	r25, r1
     5b0:	80 f5       	brcc	.+96     	; 0x612 <ProcessJoystickReport+0xe4>
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
				  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
     5b2:	8b 81       	ldd	r24, Y+3	; 0x03
     5b4:	88 23       	and	r24, r24
     5b6:	69 f5       	brne	.+90     	; 0x612 <ProcessJoystickReport+0xe4>
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the joystick relative position value */
			FoundData = USB_GetHIDReportItemInfo(JoystickReport, ReportItem);
     5b8:	c8 01       	movw	r24, r16
     5ba:	e3 d5       	rcall	.+3014   	; 0x1182 <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     5bc:	88 23       	and	r24, r24
     5be:	49 f1       	breq	.+82     	; 0x612 <ProcessJoystickReport+0xe4>
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     5c0:	89 85       	ldd	r24, Y+9	; 0x09
     5c2:	97 01       	movw	r18, r14
     5c4:	28 1b       	sub	r18, r24
     5c6:	31 09       	sbc	r19, r1
     5c8:	c9 01       	movw	r24, r18
     5ca:	2b a1       	ldd	r18, Y+35	; 0x23
     5cc:	3c a1       	ldd	r19, Y+36	; 0x24
     5ce:	4d a1       	ldd	r20, Y+37	; 0x25
     5d0:	5e a1       	ldd	r21, Y+38	; 0x26
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <ProcessJoystickReport+0xae>
     5d4:	22 0f       	add	r18, r18
     5d6:	33 1f       	adc	r19, r19
     5d8:	44 1f       	adc	r20, r20
     5da:	55 1f       	adc	r21, r21
     5dc:	8a 95       	dec	r24
     5de:	d2 f7       	brpl	.-12     	; 0x5d4 <ProcessJoystickReport+0xa6>

			/* Check to see if a (non-zero) delta movement has been indicated */
			if (DeltaMovement)
     5e0:	21 15       	cp	r18, r1
     5e2:	31 05       	cpc	r19, r1
     5e4:	b1 f0       	breq	.+44     	; 0x612 <ProcessJoystickReport+0xe4>
			{
				/* Determine if the report is for the X or Y delta movement, light LEDs as appropriate */
				if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     5e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     5e8:	9d 85       	ldd	r25, Y+13	; 0x0d
     5ea:	80 33       	cpi	r24, 0x30	; 48
     5ec:	91 05       	cpc	r25, r1
     5ee:	39 f4       	brne	.+14     	; 0x5fe <ProcessJoystickReport+0xd0>
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     5f0:	12 16       	cp	r1, r18
     5f2:	13 06       	cpc	r1, r19
     5f4:	14 f4       	brge	.+4      	; 0x5fa <ProcessJoystickReport+0xcc>
     5f6:	80 e1       	ldi	r24, 0x10	; 16
     5f8:	08 c0       	rjmp	.+16     	; 0x60a <ProcessJoystickReport+0xdc>
     5fa:	80 e2       	ldi	r24, 0x20	; 32
     5fc:	06 c0       	rjmp	.+12     	; 0x60a <ProcessJoystickReport+0xdc>
				else
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     5fe:	12 16       	cp	r1, r18
     600:	13 06       	cpc	r1, r19
     602:	14 f4       	brge	.+4      	; 0x608 <ProcessJoystickReport+0xda>
     604:	80 e8       	ldi	r24, 0x80	; 128
     606:	01 c0       	rjmp	.+2      	; 0x60a <ProcessJoystickReport+0xdc>
     608:	80 e4       	ldi	r24, 0x40	; 64
     60a:	d8 2a       	or	r13, r24
     60c:	02 c0       	rjmp	.+4      	; 0x612 <ProcessJoystickReport+0xe4>
			if (!(FoundData))
			  continue;

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
			  LEDMask = LEDS_ALL_LEDS;
     60e:	80 ef       	ldi	r24, 0xF0	; 240
     610:	d8 2e       	mov	r13, r24
void ProcessJoystickReport(uint8_t* JoystickReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     612:	c3 94       	inc	r12
     614:	80 91 15 01 	lds	r24, 0x0115
     618:	c8 16       	cp	r12, r24
     61a:	08 f4       	brcc	.+2      	; 0x61e <ProcessJoystickReport+0xf0>
     61c:	9c cf       	rjmp	.-200    	; 0x556 <ProcessJoystickReport+0x28>
			}
		}
	}

	/* Display the button information on the board LEDs */
	LEDs_SetAllLEDs(LEDMask);
     61e:	8d 2d       	mov	r24, r13
     620:	77 de       	rcall	.-786    	; 0x310 <LEDs_SetAllLEDs>
}
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	ff 90       	pop	r15
     62c:	ef 90       	pop	r14
     62e:	df 90       	pop	r13
     630:	cf 90       	pop	r12
     632:	bf 90       	pop	r11
     634:	af 90       	pop	r10
     636:	08 95       	ret

00000638 <JoystickHost_Task>:

/** Task to read and process the HID report descriptor and HID reports from the device
 *  and display the results onto the board LEDs.
 */
void JoystickHost_Task(void)
{
     638:	af 92       	push	r10
     63a:	bf 92       	push	r11
     63c:	cf 92       	push	r12
     63e:	df 92       	push	r13
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	df 93       	push	r29
     64a:	cf 93       	push	r28
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze joystick data pipe */
	Pipe_Freeze();
}
     650:	ed b6       	in	r14, 0x3d	; 61
     652:	fe b6       	in	r15, 0x3e	; 62
/** Task to read and process the HID report descriptor and HID reports from the device
 *  and display the results onto the board LEDs.
 */
void JoystickHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     654:	80 91 fa 04 	lds	r24, 0x04FA
     658:	8b 30       	cpi	r24, 0x0B	; 11
     65a:	09 f0       	breq	.+2      	; 0x65e <JoystickHost_Task+0x26>
     65c:	3e c0       	rjmp	.+124    	; 0x6da <JoystickHost_Task+0xa2>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     664:	80 91 a9 00 	lds	r24, 0x00A9
     668:	8f 7b       	andi	r24, 0xBF	; 191
     66a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     66e:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze joystick data pipe */
	Pipe_SelectPipe(JOYSTICK_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     672:	80 ff       	sbrs	r24, 0
     674:	2d c0       	rjmp	.+90     	; 0x6d0 <JoystickHost_Task+0x98>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     676:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Check if data has been received from the attached joystick */
		if (Pipe_IsReadWriteAllowed())
     67a:	85 ff       	sbrs	r24, 5
     67c:	24 c0       	rjmp	.+72     	; 0x6c6 <JoystickHost_Task+0x8e>
     67e:	cd b6       	in	r12, 0x3d	; 61
     680:	de b6       	in	r13, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     682:	80 91 f6 00 	lds	r24, 0x00F6
     686:	90 91 f7 00 	lds	r25, 0x00F7
		{
			/* Create buffer big enough for the report */
			uint8_t JoystickReport[Pipe_BytesInPipe()];
     68a:	ad b6       	in	r10, 0x3d	; 61
     68c:	be b6       	in	r11, 0x3e	; 62
     68e:	a8 1a       	sub	r10, r24
     690:	b9 0a       	sbc	r11, r25
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	be be       	out	0x3e, r11	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	ad be       	out	0x3d, r10	; 61
     69c:	0d b7       	in	r16, 0x3d	; 61
     69e:	1e b7       	in	r17, 0x3e	; 62
     6a0:	0f 5f       	subi	r16, 0xFF	; 255
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	60 91 f6 00 	lds	r22, 0x00F6
     6a8:	70 91 f7 00 	lds	r23, 0x00F7

			/* Load in the joystick report */
			Pipe_Read_Stream_LE(JoystickReport, Pipe_BytesInPipe(), NULL);
     6ac:	c8 01       	movw	r24, r16
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	9c d7       	rcall	.+3896   	; 0x15ec <Pipe_Read_Stream_LE>

			/* Process the read in joystick report from the device */
			ProcessJoystickReport(JoystickReport);
     6b4:	c8 01       	movw	r24, r16
     6b6:	3b df       	rcall	.-394    	; 0x52e <ProcessJoystickReport>
     6b8:	8e 2d       	mov	r24, r14
     6ba:	9d 2d       	mov	r25, r13
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	9e bf       	out	0x3e, r25	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	8d bf       	out	0x3d, r24	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     6c6:	80 91 a6 00 	lds	r24, 0x00A6
     6ca:	8e 77       	andi	r24, 0x7E	; 126
     6cc:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     6d0:	80 91 a9 00 	lds	r24, 0x00A9
     6d4:	80 64       	ori	r24, 0x40	; 64
     6d6:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearIN();
	}

	/* Freeze joystick data pipe */
	Pipe_Freeze();
}
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	fe be       	out	0x3e, r15	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	ed be       	out	0x3d, r14	; 61
     6e4:	cf 91       	pop	r28
     6e6:	df 91       	pop	r29
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	ff 90       	pop	r15
     6ee:	ef 90       	pop	r14
     6f0:	df 90       	pop	r13
     6f2:	cf 90       	pop	r12
     6f4:	bf 90       	pop	r11
     6f6:	af 90       	pop	r10
     6f8:	08 95       	ret

000006fa <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     6fa:	0f de       	rcall	.-994    	; 0x31a <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Joystick HID Parser Host Demo running.\r\n" ESC_FG_WHITE));
     6fc:	8e e9       	ldi	r24, 0x9E	; 158
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     704:	80 e1       	ldi	r24, 0x10	; 16
     706:	04 de       	rcall	.-1016   	; 0x310 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     708:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		JoystickHost_Task();
     70a:	96 df       	rcall	.-212    	; 0x638 <JoystickHost_Task>

		USB_USBTask();
     70c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <USB_USBTask>
     710:	fc cf       	rjmp	.-8      	; 0x70a <main+0x10>

00000712 <DComp_NextJoystickInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Joystick HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextJoystickInterface(void* CurrentDescriptor)
{
     712:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     714:	81 81       	ldd	r24, Z+1	; 0x01
     716:	84 30       	cpi	r24, 0x04	; 4
     718:	19 f4       	brne	.+6      	; 0x720 <DComp_NextJoystickInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if ((Interface->Class == HID_CSCP_HIDClass))
     71a:	85 81       	ldd	r24, Z+5	; 0x05
     71c:	83 30       	cpi	r24, 0x03	; 3
     71e:	11 f0       	breq	.+4      	; 0x724 <DComp_NextJoystickInterface+0x12>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	08 95       	ret
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if ((Interface->Class == HID_CSCP_HIDClass))
		{
			return DESCRIPTOR_SEARCH_Found;
     724:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     726:	08 95       	ret

00000728 <DComp_NextJoystickInterfaceDataEndpoint>:
 */
uint8_t DComp_NextJoystickInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     728:	fc 01       	movw	r30, r24
     72a:	81 81       	ldd	r24, Z+1	; 0x01
     72c:	85 30       	cpi	r24, 0x05	; 5
     72e:	21 f0       	breq	.+8      	; 0x738 <DComp_NextJoystickInterfaceDataEndpoint+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     730:	84 30       	cpi	r24, 0x04	; 4
     732:	21 f4       	brne	.+8      	; 0x73c <DComp_NextJoystickInterfaceDataEndpoint+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	08 95       	ret
uint8_t DComp_NextJoystickInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
	  return DESCRIPTOR_SEARCH_Found;
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     73c:	82 e0       	ldi	r24, 0x02	; 2
}
     73e:	08 95       	ret

00000740 <DComp_NextHID>:
 */
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
     740:	fc 01       	movw	r30, r24
     742:	81 81       	ldd	r24, Z+1	; 0x01
     744:	81 32       	cpi	r24, 0x21	; 33
     746:	11 f4       	brne	.+4      	; 0x74c <DComp_NextHID+0xc>
	  return DESCRIPTOR_SEARCH_Found;
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	08 95       	ret
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     74c:	82 e0       	ldi	r24, 0x02	; 2
}
     74e:	08 95       	ret

00000750 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref JoystickHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     750:	8f 92       	push	r8
     752:	9f 92       	push	r9
     754:	af 92       	push	r10
     756:	bf 92       	push	r11
     758:	cf 92       	push	r12
     75a:	df 92       	push	r13
     75c:	ef 92       	push	r14
     75e:	ff 92       	push	r15
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	df 93       	push	r29
     766:	cf 93       	push	r28
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	c4 50       	subi	r28, 0x04	; 4
     76e:	d2 40       	sbci	r29, 0x02	; 2
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     77a:	ae 01       	movw	r20, r28
     77c:	4b 5f       	subi	r20, 0xFB	; 251
     77e:	5f 4f       	sbci	r21, 0xFF	; 255
     780:	5a 83       	std	Y+2, r21	; 0x02
     782:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     784:	8e 01       	movw	r16, r28
     786:	0d 5f       	subi	r16, 0xFD	; 253
     788:	1f 4f       	sbci	r17, 0xFF	; 255
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	b8 01       	movw	r22, r16
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	32 e0       	ldi	r19, 0x02	; 2
     792:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <USB_Host_GetDeviceConfigDescriptor>
     796:	85 30       	cpi	r24, 0x05	; 5
     798:	09 f4       	brne	.+2      	; 0x79c <ProcessConfigurationDescriptor+0x4c>
     79a:	54 c0       	rjmp	.+168    	; 0x844 <ProcessConfigurationDescriptor+0xf4>
     79c:	86 30       	cpi	r24, 0x06	; 6
     79e:	59 f0       	breq	.+22     	; 0x7b6 <ProcessConfigurationDescriptor+0x66>
     7a0:	88 23       	and	r24, r24
     7a2:	59 f4       	brne	.+22     	; 0x7ba <ProcessConfigurationDescriptor+0x6a>
     7a4:	cc 24       	eor	r12, r12
     7a6:	dd 24       	eor	r13, r13
     7a8:	88 24       	eor	r8, r8
     7aa:	99 24       	eor	r9, r9
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextJoystickInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7ac:	58 01       	movw	r10, r16
     7ae:	8e 01       	movw	r16, r28
     7b0:	0f 5f       	subi	r16, 0xFF	; 255
     7b2:	1f 4f       	sbci	r17, 0xFF	; 255
     7b4:	07 c0       	rjmp	.+14     	; 0x7c4 <ProcessConfigurationDescriptor+0x74>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     7b6:	83 e0       	ldi	r24, 0x03	; 3
     7b8:	48 c0       	rjmp	.+144    	; 0x84a <ProcessConfigurationDescriptor+0xfa>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	46 c0       	rjmp	.+140    	; 0x84a <ProcessConfigurationDescriptor+0xfa>
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     7be:	9c 01       	movw	r18, r24
     7c0:	c3 2e       	mov	r12, r19
     7c2:	d8 2e       	mov	r13, r24
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     7c4:	81 14       	cp	r8, r1
     7c6:	91 04       	cpc	r9, r1
     7c8:	41 f0       	breq	.+16     	; 0x7da <ProcessConfigurationDescriptor+0x8a>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7ca:	c5 01       	movw	r24, r10
     7cc:	b8 01       	movw	r22, r16
     7ce:	44 e9       	ldi	r20, 0x94	; 148
     7d0:	53 e0       	ldi	r21, 0x03	; 3
     7d2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     7d6:	88 23       	and	r24, r24
     7d8:	b9 f0       	breq	.+46     	; 0x808 <ProcessConfigurationDescriptor+0xb8>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextJoystickInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7da:	c5 01       	movw	r24, r10
     7dc:	b8 01       	movw	r22, r16
     7de:	49 e8       	ldi	r20, 0x89	; 137
     7e0:	53 e0       	ldi	r21, 0x03	; 3
     7e2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <USB_GetNextDescriptorComp>
     7e6:	88 23       	and	r24, r24
     7e8:	79 f5       	brne	.+94     	; 0x848 <ProcessConfigurationDescriptor+0xf8>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     7ea:	c9 80       	ldd	r12, Y+1	; 0x01
     7ec:	ea 80       	ldd	r14, Y+2	; 0x02

			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7ee:	c5 01       	movw	r24, r10
     7f0:	b8 01       	movw	r22, r16
     7f2:	40 ea       	ldi	r20, 0xA0	; 160
     7f4:	53 e0       	ldi	r21, 0x03	; 3
     7f6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <USB_GetNextDescriptorComp>
     7fa:	88 23       	and	r24, r24
     7fc:	29 f5       	brne	.+74     	; 0x848 <ProcessConfigurationDescriptor+0xf8>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     7fe:	8c 2c       	mov	r8, r12
     800:	9e 2c       	mov	r9, r14
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the HID descriptor for later use */
			HIDDescriptor = DESCRIPTOR_PCAST(CurrConfigLocation, USB_HID_Descriptor_HID_t);
     802:	c9 80       	ldd	r12, Y+1	; 0x01
     804:	da 80       	ldd	r13, Y+2	; 0x02

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     806:	35 c0       	rjmp	.+106    	; 0x872 <ProcessConfigurationDescriptor+0x122>
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     808:	e9 80       	ldd	r14, Y+1	; 0x01
     80a:	fa 80       	ldd	r15, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     80c:	f7 01       	movw	r30, r14
     80e:	42 81       	ldd	r20, Z+2	; 0x02
     810:	47 ff       	sbrs	r20, 7
     812:	2f c0       	rjmp	.+94     	; 0x872 <ProcessConfigurationDescriptor+0x122>
     814:	9c 2d       	mov	r25, r12
     816:	8d 2d       	mov	r24, r13
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     818:	e1 14       	cp	r14, r1
     81a:	f1 04       	cpc	r15, r1
     81c:	81 f2       	breq	.-96     	; 0x7be <ProcessConfigurationDescriptor+0x6e>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(JOYSTICK_DATA_IN_PIPE, EP_TYPE_INTERRUPT, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     81e:	24 81       	ldd	r18, Z+4	; 0x04
     820:	35 81       	ldd	r19, Z+5	; 0x05
     822:	81 e8       	ldi	r24, 0x81	; 129
     824:	63 e0       	ldi	r22, 0x03	; 3
     826:	01 e0       	ldi	r16, 0x01	; 1
     828:	44 d7       	rcall	.+3720   	; 0x16b2 <Pipe_ConfigurePipe>
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     82a:	f7 01       	movw	r30, r14
     82c:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     82e:	80 93 ad 00 	sts	0x00AD, r24

	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;
     832:	f6 01       	movw	r30, r12
     834:	87 81       	ldd	r24, Z+7	; 0x07
     836:	90 85       	ldd	r25, Z+8	; 0x08
     838:	90 93 ef 04 	sts	0x04EF, r25
     83c:	80 93 ee 04 	sts	0x04EE, r24

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	03 c0       	rjmp	.+6      	; 0x84a <ProcessConfigurationDescriptor+0xfa>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	01 c0       	rjmp	.+2      	; 0x84a <ProcessConfigurationDescriptor+0xfa>
			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextHID) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     848:	84 e0       	ldi	r24, 0x04	; 4
	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     84a:	cc 5f       	subi	r28, 0xFC	; 252
     84c:	dd 4f       	sbci	r29, 0xFD	; 253
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	de bf       	out	0x3e, r29	; 62
     854:	0f be       	out	0x3f, r0	; 63
     856:	cd bf       	out	0x3d, r28	; 61
     858:	cf 91       	pop	r28
     85a:	df 91       	pop	r29
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	bf 90       	pop	r11
     86a:	af 90       	pop	r10
     86c:	9f 90       	pop	r9
     86e:	8f 90       	pop	r8
     870:	08 95       	ret
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     872:	9c 2d       	mov	r25, r12
     874:	8d 2d       	mov	r24, r13
     876:	a3 cf       	rjmp	.-186    	; 0x7be <ProcessConfigurationDescriptor+0x6e>

00000878 <GetHIDReportData>:
 *  structures via the HID parser routines in the LUFA library.
 *
 *  \return  A value from the \ref JoystickHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
     878:	ef 92       	push	r14
     87a:	ff 92       	push	r15
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	df 93       	push	r29
     882:	cf 93       	push	r28
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     888:	0d b7       	in	r16, 0x3d	; 61
     88a:	1e b7       	in	r17, 0x3e	; 62
 *  \return  A value from the \ref JoystickHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
	/* Create a buffer big enough to hold the entire returned HID report */
	uint8_t HIDReportData[HIDReportSize];
     88c:	80 91 ee 04 	lds	r24, 0x04EE
     890:	90 91 ef 04 	lds	r25, 0x04EF
     894:	2d b7       	in	r18, 0x3d	; 61
     896:	3e b7       	in	r19, 0x3e	; 62
     898:	28 1b       	sub	r18, r24
     89a:	39 0b       	sbc	r19, r25
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	3e bf       	out	0x3e, r19	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	2d bf       	out	0x3d, r18	; 61
     8a6:	ed b6       	in	r14, 0x3d	; 61
     8a8:	fe b6       	in	r15, 0x3e	; 62
     8aa:	08 94       	sec
     8ac:	e1 1c       	adc	r14, r1
     8ae:	f1 1c       	adc	r15, r1

	USB_ControlRequest = (USB_Request_Header_t)
     8b0:	21 e8       	ldi	r18, 0x81	; 129
     8b2:	20 93 f2 04 	sts	0x04F2, r18
     8b6:	26 e0       	ldi	r18, 0x06	; 6
     8b8:	20 93 f3 04 	sts	0x04F3, r18
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	32 e2       	ldi	r19, 0x22	; 34
     8c0:	30 93 f5 04 	sts	0x04F5, r19
     8c4:	20 93 f4 04 	sts	0x04F4, r18
     8c8:	10 92 f7 04 	sts	0x04F7, r1
     8cc:	10 92 f6 04 	sts	0x04F6, r1
     8d0:	90 93 f9 04 	sts	0x04F9, r25
     8d4:	80 93 f8 04 	sts	0x04F8, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8d8:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
     8dc:	c7 01       	movw	r24, r14
     8de:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <USB_Host_SendControlRequest>
     8e2:	88 23       	and	r24, r24
     8e4:	61 f4       	brne	.+24     	; 0x8fe <GetHIDReportData+0x86>
	  return ParseControlError;

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
     8e6:	60 91 ee 04 	lds	r22, 0x04EE
     8ea:	70 91 ef 04 	lds	r23, 0x04EF
     8ee:	c7 01       	movw	r24, r14
     8f0:	45 e1       	ldi	r20, 0x15	; 21
     8f2:	51 e0       	ldi	r21, 0x01	; 1
     8f4:	3c d0       	rcall	.+120    	; 0x96e <USB_ProcessHIDReport>
     8f6:	88 23       	and	r24, r24
     8f8:	21 f0       	breq	.+8      	; 0x902 <GetHIDReportData+0x8a>
	  return ParseError;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	03 c0       	rjmp	.+6      	; 0x904 <GetHIDReportData+0x8c>
	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
	  return ParseControlError;
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	01 c0       	rjmp	.+2      	; 0x904 <GetHIDReportData+0x8c>

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
     902:	80 e0       	ldi	r24, 0x00	; 0
}
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	1e bf       	out	0x3e, r17	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	0d bf       	out	0x3d, r16	; 61
     90e:	cf 91       	pop	r28
     910:	df 91       	pop	r29
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	ef 90       	pop	r14
     91a:	08 95       	ret

0000091c <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \param[in] CurrentItem  Pointer to the item the HID report parser is currently working with
 *
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
     91c:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Mouse usage
	 * parent node, from being erroneously treated as a joystick
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     91e:	16 96       	adiw	r26, 0x06	; 6
     920:	ed 91       	ld	r30, X+
     922:	fc 91       	ld	r31, X
     924:	17 97       	sbiw	r26, 0x07	; 7
     926:	0d c0       	rjmp	.+26     	; 0x942 <CALLBACK_HIDParser_FilterHIDReportItem+0x26>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     928:	81 81       	ldd	r24, Z+1	; 0x01
     92a:	92 81       	ldd	r25, Z+2	; 0x02
     92c:	81 30       	cpi	r24, 0x01	; 1
     92e:	91 05       	cpc	r25, r1
     930:	29 f4       	brne	.+10     	; 0x93c <CALLBACK_HIDParser_FilterHIDReportItem+0x20>
     932:	83 81       	ldd	r24, Z+3	; 0x03
     934:	94 81       	ldd	r25, Z+4	; 0x04
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	91 05       	cpc	r25, r1
     93a:	39 f0       	breq	.+14     	; 0x94a <CALLBACK_HIDParser_FilterHIDReportItem+0x2e>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Mouse usage
	 * parent node, from being erroneously treated as a joystick
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     93c:	05 80       	ldd	r0, Z+5	; 0x05
     93e:	f6 81       	ldd	r31, Z+6	; 0x06
     940:	e0 2d       	mov	r30, r0
     942:	30 97       	sbiw	r30, 0x00	; 0
     944:	89 f7       	brne	.-30     	; 0x928 <CALLBACK_HIDParser_FilterHIDReportItem+0xc>
		}
	}

	/* If a collection with the joystick usage was not found, indicate that we are not interested in this item */
	if (!IsJoystick)
	  return false;
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	08 95       	ret

	/* Check the attributes of the current joystick item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     94a:	19 96       	adiw	r26, 0x09	; 9
     94c:	2d 91       	ld	r18, X+
     94e:	3c 91       	ld	r19, X
     950:	1a 97       	sbiw	r26, 0x0a	; 10
     952:	29 30       	cpi	r18, 0x09	; 9
     954:	31 05       	cpc	r19, r1
     956:	41 f0       	breq	.+16     	; 0x968 <CALLBACK_HIDParser_FilterHIDReportItem+0x4c>
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	21 30       	cpi	r18, 0x01	; 1
     95e:	31 05       	cpc	r19, r1
     960:	29 f0       	breq	.+10     	; 0x96c <CALLBACK_HIDParser_FilterHIDReportItem+0x50>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	08 95       	ret
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     96c:	08 95       	ret

0000096e <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     96e:	2f 92       	push	r2
     970:	3f 92       	push	r3
     972:	4f 92       	push	r4
     974:	5f 92       	push	r5
     976:	6f 92       	push	r6
     978:	7f 92       	push	r7
     97a:	8f 92       	push	r8
     97c:	9f 92       	push	r9
     97e:	af 92       	push	r10
     980:	bf 92       	push	r11
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	df 93       	push	r29
     990:	cf 93       	push	r28
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	c9 59       	subi	r28, 0x99	; 153
     998:	d0 40       	sbci	r29, 0x00	; 0
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	6c 01       	movw	r12, r24
     9a6:	1b 01       	movw	r2, r22
     9a8:	ba 01       	movw	r22, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
     9aa:	40 57       	subi	r20, 0x70	; 112
     9ac:	5c 4f       	sbci	r21, 0xFC	; 252
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     9ae:	89 ed       	ldi	r24, 0xD9	; 217
     9b0:	93 e0       	ldi	r25, 0x03	; 3
     9b2:	db 01       	movw	r26, r22
     9b4:	9c 01       	movw	r18, r24
     9b6:	1d 92       	st	X+, r1
     9b8:	21 50       	subi	r18, 0x01	; 1
     9ba:	30 40       	sbci	r19, 0x00	; 0
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <USB_ProcessHIDReport+0x48>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     9be:	9e 01       	movw	r18, r28
     9c0:	25 5c       	subi	r18, 0xC5	; 197
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     9c4:	8c e1       	ldi	r24, 0x1C	; 28
     9c6:	d9 01       	movw	r26, r18
     9c8:	1d 92       	st	X+, r1
     9ca:	8a 95       	dec	r24
     9cc:	e9 f7       	brne	.-6      	; 0x9c8 <USB_ProcessHIDReport+0x5a>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     9ce:	87 e0       	ldi	r24, 0x07	; 7
     9d0:	da 01       	movw	r26, r20
     9d2:	1d 92       	st	X+, r1
     9d4:	8a 95       	dec	r24
     9d6:	e9 f7       	brne	.-6      	; 0x9d2 <USB_ProcessHIDReport+0x64>

	ParserData->TotalDeviceReports = 1;
     9d8:	fb 01       	movw	r30, r22
     9da:	e1 57       	subi	r30, 0x71	; 113
     9dc:	fc 4f       	sbci	r31, 0xFC	; 252
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 83       	st	Z, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
     9e2:	e9 96       	adiw	r28, 0x39	; 57
     9e4:	1c ae       	std	Y+60, r1	; 0x3c
     9e6:	1d ae       	std	Y+61, r1	; 0x3d
     9e8:	1e ae       	std	Y+62, r1	; 0x3e
     9ea:	1f ae       	std	Y+63, r1	; 0x3f
     9ec:	e9 97       	sbiw	r28, 0x39	; 57
     9ee:	44 24       	eor	r4, r4
     9f0:	55 24       	eor	r5, r5
     9f2:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
     9f4:	bb 24       	eor	r11, r11
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
     9f6:	88 24       	eor	r8, r8
     9f8:	99 24       	eor	r9, r9

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     9fa:	cb 01       	movw	r24, r22
     9fc:	8a 52       	subi	r24, 0x2A	; 42
     9fe:	9c 4f       	sbci	r25, 0xFC	; 252
     a00:	c0 58       	subi	r28, 0x80	; 128
     a02:	df 4f       	sbci	r29, 0xFF	; 255
     a04:	99 83       	std	Y+1, r25	; 0x01
     a06:	88 83       	st	Y, r24
     a08:	c0 58       	subi	r28, 0x80	; 128
     a0a:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     a0c:	c8 56       	subi	r28, 0x68	; 104
     a0e:	df 4f       	sbci	r29, 0xFF	; 255
     a10:	39 83       	std	Y+1, r19	; 0x01
     a12:	28 83       	st	Y, r18
     a14:	c8 59       	subi	r28, 0x98	; 152
     a16:	d0 40       	sbci	r29, 0x00	; 0
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     a18:	db 01       	movw	r26, r22
     a1a:	a0 5b       	subi	r26, 0xB0	; 176
     a1c:	bc 4f       	sbci	r27, 0xFC	; 252
     a1e:	c6 57       	subi	r28, 0x76	; 118
     a20:	df 4f       	sbci	r29, 0xFF	; 255
     a22:	b9 83       	std	Y+1, r27	; 0x01
     a24:	a8 83       	st	Y, r26
     a26:	ca 58       	subi	r28, 0x8A	; 138
     a28:	d0 40       	sbci	r29, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     a2a:	cb 01       	movw	r24, r22
     a2c:	88 57       	subi	r24, 0x78	; 120
     a2e:	9c 4f       	sbci	r25, 0xFC	; 252
     a30:	c4 57       	subi	r28, 0x74	; 116
     a32:	df 4f       	sbci	r29, 0xFF	; 255
     a34:	99 83       	std	Y+1, r25	; 0x01
     a36:	88 83       	st	Y, r24
     a38:	cc 58       	subi	r28, 0x8C	; 140
     a3a:	d0 40       	sbci	r29, 0x00	; 0
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     a3c:	db 01       	movw	r26, r22
     a3e:	a7 5b       	subi	r26, 0xB7	; 183
     a40:	bc 4f       	sbci	r27, 0xFC	; 252
     a42:	c2 57       	subi	r28, 0x72	; 114
     a44:	df 4f       	sbci	r29, 0xFF	; 255
     a46:	b9 83       	std	Y+1, r27	; 0x01
     a48:	a8 83       	st	Y, r26
     a4a:	ce 58       	subi	r28, 0x8E	; 142
     a4c:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     a4e:	c9 01       	movw	r24, r18
     a50:	4c 96       	adiw	r24, 0x1c	; 28
     a52:	c0 57       	subi	r28, 0x70	; 112
     a54:	df 4f       	sbci	r29, 0xFF	; 255
     a56:	99 83       	std	Y+1, r25	; 0x01
     a58:	88 83       	st	Y, r24
     a5a:	c0 59       	subi	r28, 0x90	; 144
     a5c:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     a5e:	db 01       	movw	r26, r22
     a60:	a8 52       	subi	r26, 0x28	; 40
     a62:	bc 4f       	sbci	r27, 0xFC	; 252
     a64:	ce 57       	subi	r28, 0x7E	; 126
     a66:	df 4f       	sbci	r29, 0xFF	; 255
     a68:	b9 83       	std	Y+1, r27	; 0x01
     a6a:	a8 83       	st	Y, r26
     a6c:	c2 58       	subi	r28, 0x82	; 130
     a6e:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     a70:	cc 57       	subi	r28, 0x7C	; 124
     a72:	df 4f       	sbci	r29, 0xFF	; 255
     a74:	f9 83       	std	Y+1, r31	; 0x01
     a76:	e8 83       	st	Y, r30
     a78:	c4 58       	subi	r28, 0x84	; 132
     a7a:	d0 40       	sbci	r29, 0x00	; 0

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     a7c:	ca 01       	movw	r24, r20
     a7e:	ce 56       	subi	r28, 0x6E	; 110
     a80:	df 4f       	sbci	r29, 0xFF	; 255
     a82:	48 83       	st	Y, r20
     a84:	c2 59       	subi	r28, 0x92	; 146
     a86:	d0 40       	sbci	r29, 0x00	; 0
     a88:	cd 56       	subi	r28, 0x6D	; 109
     a8a:	df 4f       	sbci	r29, 0xFF	; 255
     a8c:	98 83       	st	Y, r25
     a8e:	c3 59       	subi	r28, 0x93	; 147
     a90:	d0 40       	sbci	r29, 0x00	; 0
     a92:	e5 96       	adiw	r28, 0x35	; 53
     a94:	7f af       	std	Y+63, r23	; 0x3f
     a96:	6e af       	std	Y+62, r22	; 0x3e
     a98:	e5 97       	sbiw	r28, 0x35	; 53
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     a9a:	38 c3       	rjmp	.+1648   	; 0x110c <USB_ProcessHIDReport+0x79e>
	{
		uint8_t  HIDReportItem  = *ReportData;
     a9c:	f6 01       	movw	r30, r12
     a9e:	61 91       	ld	r22, Z+
     aa0:	6f 01       	movw	r12, r30
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     aa2:	08 94       	sec
     aa4:	21 08       	sbc	r2, r1
     aa6:	31 08       	sbc	r3, r1

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     aa8:	86 2f       	mov	r24, r22
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	eb 96       	adiw	r28, 0x3b	; 59
     aae:	9f af       	std	Y+63, r25	; 0x3f
     ab0:	8e af       	std	Y+62, r24	; 0x3e
     ab2:	eb 97       	sbiw	r28, 0x3b	; 59
     ab4:	83 70       	andi	r24, 0x03	; 3
     ab6:	90 70       	andi	r25, 0x00	; 0
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	91 05       	cpc	r25, r1
     abc:	09 f4       	brne	.+2      	; 0xac0 <USB_ProcessHIDReport+0x152>
     abe:	3f c0       	rjmp	.+126    	; 0xb3e <USB_ProcessHIDReport+0x1d0>
     ac0:	83 30       	cpi	r24, 0x03	; 3
     ac2:	91 05       	cpc	r25, r1
     ac4:	29 f0       	breq	.+10     	; 0xad0 <USB_ProcessHIDReport+0x162>
     ac6:	81 30       	cpi	r24, 0x01	; 1
     ac8:	91 05       	cpc	r25, r1
     aca:	09 f0       	breq	.+2      	; 0xace <USB_ProcessHIDReport+0x160>
     acc:	5c c0       	rjmp	.+184    	; 0xb86 <USB_ProcessHIDReport+0x218>
     ace:	52 c0       	rjmp	.+164    	; 0xb74 <USB_ProcessHIDReport+0x206>
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     ad0:	df 01       	movw	r26, r30
     ad2:	e3 80       	ldd	r14, Z+3	; 0x03
     ad4:	ff 24       	eor	r15, r15
     ad6:	00 e0       	ldi	r16, 0x00	; 0
     ad8:	10 e0       	ldi	r17, 0x00	; 0
     ada:	1e 2d       	mov	r17, r14
     adc:	00 27       	eor	r16, r16
     ade:	ff 24       	eor	r15, r15
     ae0:	ee 24       	eor	r14, r14
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	8c 91       	ld	r24, X
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	a0 e0       	ldi	r26, 0x00	; 0
     aea:	b0 e0       	ldi	r27, 0x00	; 0
     aec:	dc 01       	movw	r26, r24
     aee:	99 27       	eor	r25, r25
     af0:	88 27       	eor	r24, r24
     af2:	e8 2a       	or	r14, r24
     af4:	f9 2a       	or	r15, r25
     af6:	0a 2b       	or	r16, r26
     af8:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     afa:	f6 01       	movw	r30, r12
     afc:	80 81       	ld	r24, Z
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     b04:	e8 2a       	or	r14, r24
     b06:	f9 2a       	or	r15, r25
     b08:	0a 2b       	or	r16, r26
     b0a:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     b0c:	f1 81       	ldd	r31, Z+1	; 0x01
     b0e:	ed 96       	adiw	r28, 0x3d	; 61
     b10:	ff af       	std	Y+63, r31	; 0x3f
     b12:	ed 97       	sbiw	r28, 0x3d	; 61
     b14:	ec 96       	adiw	r28, 0x3c	; 60
     b16:	1f ae       	std	Y+63, r1	; 0x3f
     b18:	ec 97       	sbiw	r28, 0x3c	; 60
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     b1a:	ed 96       	adiw	r28, 0x3d	; 61
     b1c:	ee ad       	ldd	r30, Y+62	; 0x3e
     b1e:	ff ad       	ldd	r31, Y+63	; 0x3f
     b20:	ed 97       	sbiw	r28, 0x3d	; 61
     b22:	cf 01       	movw	r24, r30
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	e8 2a       	or	r14, r24
     b2a:	f9 2a       	or	r15, r25
     b2c:	0a 2b       	or	r16, r26
     b2e:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     b30:	8c ef       	ldi	r24, 0xFC	; 252
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	28 0e       	add	r2, r24
     b36:	39 1e       	adc	r3, r25
				ReportData     += 4;
     b38:	a4 e0       	ldi	r26, 0x04	; 4
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	18 c0       	rjmp	.+48     	; 0xb6e <USB_ProcessHIDReport+0x200>
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     b3e:	f1 81       	ldd	r31, Z+1	; 0x01
     b40:	ef 96       	adiw	r28, 0x3f	; 63
     b42:	ff af       	std	Y+63, r31	; 0x3f
     b44:	ef 97       	sbiw	r28, 0x3f	; 63
     b46:	ee 96       	adiw	r28, 0x3e	; 62
     b48:	1f ae       	std	Y+63, r1	; 0x3f
     b4a:	ee 97       	sbiw	r28, 0x3e	; 62
     b4c:	d6 01       	movw	r26, r12
     b4e:	ec 90       	ld	r14, X
     b50:	ff 24       	eor	r15, r15
     b52:	ef 96       	adiw	r28, 0x3f	; 63
     b54:	ee ad       	ldd	r30, Y+62	; 0x3e
     b56:	ff ad       	ldd	r31, Y+63	; 0x3f
     b58:	ef 97       	sbiw	r28, 0x3f	; 63
     b5a:	ee 2a       	or	r14, r30
     b5c:	ff 2a       	or	r15, r31
     b5e:	00 e0       	ldi	r16, 0x00	; 0
     b60:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
     b62:	8e ef       	ldi	r24, 0xFE	; 254
     b64:	9f ef       	ldi	r25, 0xFF	; 255
     b66:	28 0e       	add	r2, r24
     b68:	39 1e       	adc	r3, r25
				ReportData     += 2;
     b6a:	a2 e0       	ldi	r26, 0x02	; 2
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ca 0e       	add	r12, r26
     b70:	db 1e       	adc	r13, r27
				break;
     b72:	0c c0       	rjmp	.+24     	; 0xb8c <USB_ProcessHIDReport+0x21e>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     b74:	e1 90       	ld	r14, Z+
     b76:	6f 01       	movw	r12, r30
     b78:	ff 24       	eor	r15, r15
     b7a:	00 e0       	ldi	r16, 0x00	; 0
     b7c:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
     b7e:	08 94       	sec
     b80:	21 08       	sbc	r2, r1
     b82:	31 08       	sbc	r3, r1
				ReportData     += 1;
				break;
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <USB_ProcessHIDReport+0x21e>

			default:
				ReportItemData  = 0;
     b86:	ee 24       	eor	r14, r14
     b88:	ff 24       	eor	r15, r15
     b8a:	87 01       	movw	r16, r14
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     b8c:	eb 96       	adiw	r28, 0x3b	; 59
     b8e:	8e ad       	ldd	r24, Y+62	; 0x3e
     b90:	9f ad       	ldd	r25, Y+63	; 0x3f
     b92:	eb 97       	sbiw	r28, 0x3b	; 59
     b94:	8c 7f       	andi	r24, 0xFC	; 252
     b96:	90 70       	andi	r25, 0x00	; 0
     b98:	84 36       	cpi	r24, 0x64	; 100
     b9a:	91 05       	cpc	r25, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <USB_ProcessHIDReport+0x232>
     b9e:	c9 c0       	rjmp	.+402    	; 0xd32 <USB_ProcessHIDReport+0x3c4>
     ba0:	85 36       	cpi	r24, 0x65	; 101
     ba2:	91 05       	cpc	r25, r1
     ba4:	8c f5       	brge	.+98     	; 0xc08 <USB_ProcessHIDReport+0x29a>
     ba6:	84 32       	cpi	r24, 0x24	; 36
     ba8:	91 05       	cpc	r25, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <USB_ProcessHIDReport+0x240>
     bac:	a9 c0       	rjmp	.+338    	; 0xd00 <USB_ProcessHIDReport+0x392>
     bae:	85 32       	cpi	r24, 0x25	; 37
     bb0:	91 05       	cpc	r25, r1
     bb2:	ac f4       	brge	.+42     	; 0xbde <USB_ProcessHIDReport+0x270>
     bb4:	88 30       	cpi	r24, 0x08	; 8
     bb6:	91 05       	cpc	r25, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <USB_ProcessHIDReport+0x24e>
     bba:	31 c1       	rjmp	.+610    	; 0xe1e <USB_ProcessHIDReport+0x4b0>
     bbc:	89 30       	cpi	r24, 0x09	; 9
     bbe:	91 05       	cpc	r25, r1
     bc0:	2c f4       	brge	.+10     	; 0xbcc <USB_ProcessHIDReport+0x25e>
     bc2:	84 30       	cpi	r24, 0x04	; 4
     bc4:	91 05       	cpc	r25, r1
     bc6:	09 f0       	breq	.+2      	; 0xbca <USB_ProcessHIDReport+0x25c>
     bc8:	8f c2       	rjmp	.+1310   	; 0x10e8 <USB_ProcessHIDReport+0x77a>
     bca:	8e c0       	rjmp	.+284    	; 0xce8 <USB_ProcessHIDReport+0x37a>
     bcc:	84 31       	cpi	r24, 0x14	; 20
     bce:	91 05       	cpc	r25, r1
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <USB_ProcessHIDReport+0x266>
     bd2:	8e c0       	rjmp	.+284    	; 0xcf0 <USB_ProcessHIDReport+0x382>
     bd4:	88 31       	cpi	r24, 0x18	; 24
     bd6:	91 05       	cpc	r25, r1
     bd8:	09 f0       	breq	.+2      	; 0xbdc <USB_ProcessHIDReport+0x26e>
     bda:	86 c2       	rjmp	.+1292   	; 0x10e8 <USB_ProcessHIDReport+0x77a>
     bdc:	83 c2       	rjmp	.+1286   	; 0x10e4 <USB_ProcessHIDReport+0x776>
     bde:	84 33       	cpi	r24, 0x34	; 52
     be0:	91 05       	cpc	r25, r1
     be2:	09 f4       	brne	.+2      	; 0xbe6 <USB_ProcessHIDReport+0x278>
     be4:	93 c0       	rjmp	.+294    	; 0xd0c <USB_ProcessHIDReport+0x39e>
     be6:	85 33       	cpi	r24, 0x35	; 53
     be8:	91 05       	cpc	r25, r1
     bea:	2c f4       	brge	.+10     	; 0xbf6 <USB_ProcessHIDReport+0x288>
     bec:	88 32       	cpi	r24, 0x28	; 40
     bee:	91 05       	cpc	r25, r1
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <USB_ProcessHIDReport+0x286>
     bf2:	7a c2       	rjmp	.+1268   	; 0x10e8 <USB_ProcessHIDReport+0x77a>
     bf4:	26 c1       	rjmp	.+588    	; 0xe42 <USB_ProcessHIDReport+0x4d4>
     bf6:	84 34       	cpi	r24, 0x44	; 68
     bf8:	91 05       	cpc	r25, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <USB_ProcessHIDReport+0x290>
     bfc:	8f c0       	rjmp	.+286    	; 0xd1c <USB_ProcessHIDReport+0x3ae>
     bfe:	84 35       	cpi	r24, 0x54	; 84
     c00:	91 05       	cpc	r25, r1
     c02:	09 f0       	breq	.+2      	; 0xc06 <USB_ProcessHIDReport+0x298>
     c04:	71 c2       	rjmp	.+1250   	; 0x10e8 <USB_ProcessHIDReport+0x77a>
     c06:	90 c0       	rjmp	.+288    	; 0xd28 <USB_ProcessHIDReport+0x3ba>
     c08:	84 39       	cpi	r24, 0x94	; 148
     c0a:	91 05       	cpc	r25, r1
     c0c:	09 f4       	brne	.+2      	; 0xc10 <USB_ProcessHIDReport+0x2a2>
     c0e:	9a c0       	rjmp	.+308    	; 0xd44 <USB_ProcessHIDReport+0x3d6>
     c10:	85 39       	cpi	r24, 0x95	; 149
     c12:	91 05       	cpc	r25, r1
     c14:	a4 f4       	brge	.+40     	; 0xc3e <USB_ProcessHIDReport+0x2d0>
     c16:	80 38       	cpi	r24, 0x80	; 128
     c18:	91 05       	cpc	r25, r1
     c1a:	41 f1       	breq	.+80     	; 0xc6c <USB_ProcessHIDReport+0x2fe>
     c1c:	81 38       	cpi	r24, 0x81	; 129
     c1e:	91 05       	cpc	r25, r1
     c20:	2c f4       	brge	.+10     	; 0xc2c <USB_ProcessHIDReport+0x2be>
     c22:	84 37       	cpi	r24, 0x74	; 116
     c24:	91 05       	cpc	r25, r1
     c26:	09 f0       	breq	.+2      	; 0xc2a <USB_ProcessHIDReport+0x2bc>
     c28:	5f c2       	rjmp	.+1214   	; 0x10e8 <USB_ProcessHIDReport+0x77a>
     c2a:	89 c0       	rjmp	.+274    	; 0xd3e <USB_ProcessHIDReport+0x3d0>
     c2c:	84 38       	cpi	r24, 0x84	; 132
     c2e:	91 05       	cpc	r25, r1
     c30:	09 f4       	brne	.+2      	; 0xc34 <USB_ProcessHIDReport+0x2c6>
     c32:	8b c0       	rjmp	.+278    	; 0xd4a <USB_ProcessHIDReport+0x3dc>
     c34:	80 39       	cpi	r24, 0x90	; 144
     c36:	91 05       	cpc	r25, r1
     c38:	09 f0       	breq	.+2      	; 0xc3c <USB_ProcessHIDReport+0x2ce>
     c3a:	56 c2       	rjmp	.+1196   	; 0x10e8 <USB_ProcessHIDReport+0x77a>
     c3c:	17 c0       	rjmp	.+46     	; 0xc6c <USB_ProcessHIDReport+0x2fe>
     c3e:	80 3b       	cpi	r24, 0xB0	; 176
     c40:	91 05       	cpc	r25, r1
     c42:	a1 f0       	breq	.+40     	; 0xc6c <USB_ProcessHIDReport+0x2fe>
     c44:	81 3b       	cpi	r24, 0xB1	; 177
     c46:	91 05       	cpc	r25, r1
     c48:	4c f4       	brge	.+18     	; 0xc5c <USB_ProcessHIDReport+0x2ee>
     c4a:	80 3a       	cpi	r24, 0xA0	; 160
     c4c:	91 05       	cpc	r25, r1
     c4e:	09 f4       	brne	.+2      	; 0xc52 <USB_ProcessHIDReport+0x2e4>
     c50:	ff c0       	rjmp	.+510    	; 0xe50 <USB_ProcessHIDReport+0x4e2>
     c52:	84 3a       	cpi	r24, 0xA4	; 164
     c54:	91 05       	cpc	r25, r1
     c56:	09 f0       	breq	.+2      	; 0xc5a <USB_ProcessHIDReport+0x2ec>
     c58:	47 c2       	rjmp	.+1166   	; 0x10e8 <USB_ProcessHIDReport+0x77a>
     c5a:	24 c0       	rjmp	.+72     	; 0xca4 <USB_ProcessHIDReport+0x336>
     c5c:	84 3b       	cpi	r24, 0xB4	; 180
     c5e:	91 05       	cpc	r25, r1
     c60:	b1 f1       	breq	.+108    	; 0xcce <USB_ProcessHIDReport+0x360>
     c62:	80 3c       	cpi	r24, 0xC0	; 192
     c64:	91 05       	cpc	r25, r1
     c66:	09 f0       	breq	.+2      	; 0xc6a <USB_ProcessHIDReport+0x2fc>
     c68:	3f c2       	rjmp	.+1150   	; 0x10e8 <USB_ProcessHIDReport+0x77a>
     c6a:	4f c1       	rjmp	.+670    	; 0xf0a <USB_ProcessHIDReport+0x59c>
     c6c:	aa 24       	eor	r10, r10
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
     c6e:	6c 7f       	andi	r22, 0xFC	; 252
     c70:	c1 58       	subi	r28, 0x81	; 129
     c72:	df 4f       	sbci	r29, 0xFF	; 255
     c74:	68 83       	st	Y, r22
     c76:	cf 57       	subi	r28, 0x7F	; 127
     c78:	d0 40       	sbci	r29, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     c7a:	c8 01       	movw	r24, r16
     c7c:	b7 01       	movw	r22, r14
     c7e:	61 70       	andi	r22, 0x01	; 1
     c80:	70 70       	andi	r23, 0x00	; 0
     c82:	80 70       	andi	r24, 0x00	; 0
     c84:	90 70       	andi	r25, 0x00	; 0
     c86:	ca 57       	subi	r28, 0x7A	; 122
     c88:	df 4f       	sbci	r29, 0xFF	; 255
     c8a:	68 83       	st	Y, r22
     c8c:	79 83       	std	Y+1, r23	; 0x01
     c8e:	8a 83       	std	Y+2, r24	; 0x02
     c90:	9b 83       	std	Y+3, r25	; 0x03
     c92:	c6 58       	subi	r28, 0x86	; 134
     c94:	d0 40       	sbci	r29, 0x00	; 0
     c96:	c6 01       	movw	r24, r12
     c98:	6a 01       	movw	r12, r20
     c9a:	b8 01       	movw	r22, r16
     c9c:	a7 01       	movw	r20, r14
     c9e:	79 01       	movw	r14, r18
     ca0:	8c 01       	movw	r16, r24
     ca2:	17 c2       	rjmp	.+1070   	; 0x10d2 <USB_ProcessHIDReport+0x764>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     ca4:	c0 57       	subi	r28, 0x70	; 112
     ca6:	df 4f       	sbci	r29, 0xFF	; 255
     ca8:	88 81       	ld	r24, Y
     caa:	99 81       	ldd	r25, Y+1	; 0x01
     cac:	c0 59       	subi	r28, 0x90	; 144
     cae:	d0 40       	sbci	r29, 0x00	; 0
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <USB_ProcessHIDReport+0x34a>
     cb6:	38 c2       	rjmp	.+1136   	; 0x1128 <USB_ProcessHIDReport+0x7ba>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     cb8:	c9 01       	movw	r24, r18
     cba:	4c 96       	adiw	r24, 0x1c	; 28
     cbc:	fc 01       	movw	r30, r24
     cbe:	d9 01       	movw	r26, r18
     cc0:	2a e2       	ldi	r18, 0x2A	; 42
     cc2:	0d 90       	ld	r0, X+
     cc4:	01 92       	st	Z+, r0
     cc6:	21 50       	subi	r18, 0x01	; 1
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <USB_ProcessHIDReport+0x354>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     cca:	9c 01       	movw	r18, r24
				break;
     ccc:	0d c2       	rjmp	.+1050   	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     cce:	c8 56       	subi	r28, 0x68	; 104
     cd0:	df 4f       	sbci	r29, 0xFF	; 255
     cd2:	a8 81       	ld	r26, Y
     cd4:	b9 81       	ldd	r27, Y+1	; 0x01
     cd6:	c8 59       	subi	r28, 0x98	; 152
     cd8:	d0 40       	sbci	r29, 0x00	; 0
     cda:	2a 17       	cp	r18, r26
     cdc:	3b 07       	cpc	r19, r27
     cde:	09 f4       	brne	.+2      	; 0xce2 <USB_ProcessHIDReport+0x374>
     ce0:	25 c2       	rjmp	.+1098   	; 0x112c <USB_ProcessHIDReport+0x7be>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     ce2:	2c 51       	subi	r18, 0x1C	; 28
     ce4:	30 40       	sbci	r19, 0x00	; 0
				break;
     ce6:	00 c2       	rjmp	.+1024   	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     ce8:	f9 01       	movw	r30, r18
     cea:	f2 82       	std	Z+2, r15	; 0x02
     cec:	e1 82       	std	Z+1, r14	; 0x01
				break;
     cee:	fc c1       	rjmp	.+1016   	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     cf0:	d9 01       	movw	r26, r18
     cf2:	1a 96       	adiw	r26, 0x0a	; 10
     cf4:	ed 92       	st	X+, r14
     cf6:	fd 92       	st	X+, r15
     cf8:	0d 93       	st	X+, r16
     cfa:	1c 93       	st	X, r17
     cfc:	1d 97       	sbiw	r26, 0x0d	; 13
				break;
     cfe:	f4 c1       	rjmp	.+1000   	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     d00:	f9 01       	movw	r30, r18
     d02:	e6 86       	std	Z+14, r14	; 0x0e
     d04:	f7 86       	std	Z+15, r15	; 0x0f
     d06:	00 8b       	std	Z+16, r16	; 0x10
     d08:	11 8b       	std	Z+17, r17	; 0x11
				break;
     d0a:	ee c1       	rjmp	.+988    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     d0c:	d9 01       	movw	r26, r18
     d0e:	52 96       	adiw	r26, 0x12	; 18
     d10:	ed 92       	st	X+, r14
     d12:	fd 92       	st	X+, r15
     d14:	0d 93       	st	X+, r16
     d16:	1c 93       	st	X, r17
     d18:	55 97       	sbiw	r26, 0x15	; 21
				break;
     d1a:	e6 c1       	rjmp	.+972    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     d1c:	f9 01       	movw	r30, r18
     d1e:	e6 8a       	std	Z+22, r14	; 0x16
     d20:	f7 8a       	std	Z+23, r15	; 0x17
     d22:	00 8f       	std	Z+24, r16	; 0x18
     d24:	11 8f       	std	Z+25, r17	; 0x19
				break;
     d26:	e0 c1       	rjmp	.+960    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     d28:	d9 01       	movw	r26, r18
     d2a:	19 96       	adiw	r26, 0x09	; 9
     d2c:	ec 92       	st	X, r14
     d2e:	19 97       	sbiw	r26, 0x09	; 9
				break;
     d30:	db c1       	rjmp	.+950    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     d32:	f9 01       	movw	r30, r18
     d34:	e5 82       	std	Z+5, r14	; 0x05
     d36:	f6 82       	std	Z+6, r15	; 0x06
     d38:	07 83       	std	Z+7, r16	; 0x07
     d3a:	10 87       	std	Z+8, r17	; 0x08
				break;
     d3c:	d5 c1       	rjmp	.+938    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     d3e:	d9 01       	movw	r26, r18
     d40:	ec 92       	st	X, r14
				break;
     d42:	d2 c1       	rjmp	.+932    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     d44:	f9 01       	movw	r30, r18
     d46:	e2 8e       	std	Z+26, r14	; 0x1a
				break;
     d48:	cf c1       	rjmp	.+926    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     d4a:	9e 2d       	mov	r25, r14
     d4c:	d9 01       	movw	r26, r18
     d4e:	5b 96       	adiw	r26, 0x1b	; 27
     d50:	ec 92       	st	X, r14
     d52:	5b 97       	sbiw	r26, 0x1b	; 27

				if (ParserData->UsingReportIDs)
     d54:	ce 57       	subi	r28, 0x7E	; 126
     d56:	df 4f       	sbci	r29, 0xFF	; 255
     d58:	e8 81       	ld	r30, Y
     d5a:	f9 81       	ldd	r31, Y+1	; 0x01
     d5c:	c2 58       	subi	r28, 0x82	; 130
     d5e:	d0 40       	sbci	r29, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 23       	and	r24, r24
     d64:	09 f4       	brne	.+2      	; 0xd68 <USB_ProcessHIDReport+0x3fa>
     d66:	4c c0       	rjmp	.+152    	; 0xe00 <USB_ProcessHIDReport+0x492>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     d68:	cc 57       	subi	r28, 0x7C	; 124
     d6a:	df 4f       	sbci	r29, 0xFF	; 255
     d6c:	a8 81       	ld	r26, Y
     d6e:	b9 81       	ldd	r27, Y+1	; 0x01
     d70:	c4 58       	subi	r28, 0x84	; 132
     d72:	d0 40       	sbci	r29, 0x00	; 0
     d74:	6c 91       	ld	r22, X

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     d76:	ce 56       	subi	r28, 0x6E	; 110
     d78:	df 4f       	sbci	r29, 0xFF	; 255
     d7a:	e8 81       	ld	r30, Y
     d7c:	c2 59       	subi	r28, 0x92	; 146
     d7e:	d0 40       	sbci	r29, 0x00	; 0
     d80:	cd 56       	subi	r28, 0x6D	; 109
     d82:	df 4f       	sbci	r29, 0xFF	; 255
     d84:	f8 81       	ld	r31, Y
     d86:	c3 59       	subi	r28, 0x93	; 147
     d88:	d0 40       	sbci	r29, 0x00	; 0
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	17 c0       	rjmp	.+46     	; 0xdbc <USB_ProcessHIDReport+0x44e>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     d8e:	40 81       	ld	r20, Z
     d90:	37 96       	adiw	r30, 0x07	; 7
     d92:	49 17       	cp	r20, r25
     d94:	91 f4       	brne	.+36     	; 0xdba <USB_ProcessHIDReport+0x44c>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	ac 01       	movw	r20, r24
     d9a:	f3 e0       	ldi	r31, 0x03	; 3
     d9c:	44 0f       	add	r20, r20
     d9e:	55 1f       	adc	r21, r21
     da0:	fa 95       	dec	r31
     da2:	e1 f7       	brne	.-8      	; 0xd9c <USB_ProcessHIDReport+0x42e>
     da4:	48 1b       	sub	r20, r24
     da6:	59 0b       	sbc	r21, r25
     da8:	40 57       	subi	r20, 0x70	; 112
     daa:	5c 4f       	sbci	r21, 0xFC	; 252
     dac:	e5 96       	adiw	r28, 0x35	; 53
     dae:	ee ad       	ldd	r30, Y+62	; 0x3e
     db0:	ff ad       	ldd	r31, Y+63	; 0x3f
     db2:	e5 97       	sbiw	r28, 0x35	; 53
     db4:	4e 0f       	add	r20, r30
     db6:	5f 1f       	adc	r21, r31
     db8:	23 c0       	rjmp	.+70     	; 0xe00 <USB_ProcessHIDReport+0x492>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     dba:	8f 5f       	subi	r24, 0xFF	; 255
     dbc:	86 17       	cp	r24, r22
     dbe:	38 f3       	brcs	.-50     	; 0xd8e <USB_ProcessHIDReport+0x420>
     dc0:	dc c1       	rjmp	.+952    	; 0x117a <USB_ProcessHIDReport+0x80c>
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     dc2:	86 2f       	mov	r24, r22
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	ac 01       	movw	r20, r24
     dc8:	e3 e0       	ldi	r30, 0x03	; 3
     dca:	44 0f       	add	r20, r20
     dcc:	55 1f       	adc	r21, r21
     dce:	ea 95       	dec	r30
     dd0:	e1 f7       	brne	.-8      	; 0xdca <USB_ProcessHIDReport+0x45c>
     dd2:	48 1b       	sub	r20, r24
     dd4:	59 0b       	sbc	r21, r25
     dd6:	40 57       	subi	r20, 0x70	; 112
     dd8:	5c 4f       	sbci	r21, 0xFC	; 252
     dda:	e5 96       	adiw	r28, 0x35	; 53
     ddc:	8e ad       	ldd	r24, Y+62	; 0x3e
     dde:	9f ad       	ldd	r25, Y+63	; 0x3f
     de0:	e5 97       	sbiw	r28, 0x35	; 53
     de2:	48 0f       	add	r20, r24
     de4:	59 1f       	adc	r21, r25
     de6:	6f 5f       	subi	r22, 0xFF	; 255
     de8:	cc 57       	subi	r28, 0x7C	; 124
     dea:	df 4f       	sbci	r29, 0xFF	; 255
     dec:	a8 81       	ld	r26, Y
     dee:	b9 81       	ldd	r27, Y+1	; 0x01
     df0:	c4 58       	subi	r28, 0x84	; 132
     df2:	d0 40       	sbci	r29, 0x00	; 0
     df4:	6c 93       	st	X, r22
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     df6:	87 e0       	ldi	r24, 0x07	; 7
     df8:	da 01       	movw	r26, r20
     dfa:	1d 92       	st	X+, r1
     dfc:	8a 95       	dec	r24
     dfe:	e9 f7       	brne	.-6      	; 0xdfa <USB_ProcessHIDReport+0x48c>
					}
				}

				ParserData->UsingReportIDs = true;
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	ce 57       	subi	r28, 0x7E	; 126
     e04:	df 4f       	sbci	r29, 0xFF	; 255
     e06:	e8 81       	ld	r30, Y
     e08:	f9 81       	ldd	r31, Y+1	; 0x01
     e0a:	c2 58       	subi	r28, 0x82	; 130
     e0c:	d0 40       	sbci	r29, 0x00	; 0
     e0e:	60 83       	st	Z, r22

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     e10:	d9 01       	movw	r26, r18
     e12:	5b 96       	adiw	r26, 0x1b	; 27
     e14:	8c 91       	ld	r24, X
     e16:	5b 97       	sbiw	r26, 0x1b	; 27
     e18:	fa 01       	movw	r30, r20
     e1a:	80 83       	st	Z, r24
				break;
     e1c:	65 c1       	rjmp	.+714    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     e1e:	fb 2d       	mov	r31, r11
     e20:	f8 30       	cpi	r31, 0x08	; 8
     e22:	09 f4       	brne	.+2      	; 0xe26 <USB_ProcessHIDReport+0x4b8>
     e24:	85 c1       	rjmp	.+778    	; 0x1130 <USB_ProcessHIDReport+0x7c2>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     e26:	eb 2d       	mov	r30, r11
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	6c 0f       	add	r22, r28
     e34:	7d 1f       	adc	r23, r29
     e36:	e6 0f       	add	r30, r22
     e38:	f7 1f       	adc	r31, r23
     e3a:	f1 82       	std	Z+1, r15	; 0x01
     e3c:	e0 82       	st	Z, r14
     e3e:	b3 94       	inc	r11
				break;
     e40:	53 c1       	rjmp	.+678    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     e42:	e9 96       	adiw	r28, 0x39	; 57
     e44:	ec ae       	std	Y+60, r14	; 0x3c
     e46:	fd ae       	std	Y+61, r15	; 0x3d
     e48:	0e af       	std	Y+62, r16	; 0x3e
     e4a:	1f af       	std	Y+63, r17	; 0x3f
     e4c:	e9 97       	sbiw	r28, 0x39	; 57
     e4e:	4c c1       	rjmp	.+664    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     e50:	81 14       	cp	r8, r1
     e52:	91 04       	cpc	r9, r1
     e54:	39 f4       	brne	.+14     	; 0xe64 <USB_ProcessHIDReport+0x4f6>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     e56:	c2 57       	subi	r28, 0x72	; 114
     e58:	df 4f       	sbci	r29, 0xFF	; 255
     e5a:	88 80       	ld	r8, Y
     e5c:	99 80       	ldd	r9, Y+1	; 0x01
     e5e:	ce 58       	subi	r28, 0x8E	; 142
     e60:	d0 40       	sbci	r29, 0x00	; 0
     e62:	19 c0       	rjmp	.+50     	; 0xe96 <USB_ProcessHIDReport+0x528>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     e64:	c6 57       	subi	r28, 0x76	; 118
     e66:	df 4f       	sbci	r29, 0xFF	; 255
     e68:	e8 81       	ld	r30, Y
     e6a:	f9 81       	ldd	r31, Y+1	; 0x01
     e6c:	ca 58       	subi	r28, 0x8A	; 138
     e6e:	d0 40       	sbci	r29, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
     e70:	0b c0       	rjmp	.+22     	; 0xe88 <USB_ProcessHIDReport+0x51a>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     e72:	c4 57       	subi	r28, 0x74	; 116
     e74:	df 4f       	sbci	r29, 0xFF	; 255
     e76:	88 81       	ld	r24, Y
     e78:	99 81       	ldd	r25, Y+1	; 0x01
     e7a:	cc 58       	subi	r28, 0x8C	; 140
     e7c:	d0 40       	sbci	r29, 0x00	; 0
     e7e:	e8 17       	cp	r30, r24
     e80:	f9 07       	cpc	r31, r25
     e82:	09 f4       	brne	.+2      	; 0xe86 <USB_ProcessHIDReport+0x518>
     e84:	57 c1       	rjmp	.+686    	; 0x1134 <USB_ProcessHIDReport+0x7c6>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     e86:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     e88:	85 81       	ldd	r24, Z+5	; 0x05
     e8a:	96 81       	ldd	r25, Z+6	; 0x06
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	89 f7       	brne	.-30     	; 0xe72 <USB_ProcessHIDReport+0x504>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     e90:	96 82       	std	Z+6, r9	; 0x06
     e92:	85 82       	std	Z+5, r8	; 0x05
     e94:	4f 01       	movw	r8, r30
				}

				CurrCollectionPath->Type       = ReportItemData;
     e96:	d4 01       	movw	r26, r8
     e98:	ec 92       	st	X, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     e9a:	f9 01       	movw	r30, r18
     e9c:	81 81       	ldd	r24, Z+1	; 0x01
     e9e:	92 81       	ldd	r25, Z+2	; 0x02
     ea0:	12 96       	adiw	r26, 0x02	; 2
     ea2:	9c 93       	st	X, r25
     ea4:	8e 93       	st	-X, r24
     ea6:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
     ea8:	bb 20       	and	r11, r11
     eaa:	c1 f0       	breq	.+48     	; 0xedc <USB_ProcessHIDReport+0x56e>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	14 96       	adiw	r26, 0x04	; 4
     eb2:	9c 93       	st	X, r25
     eb4:	8e 93       	st	-X, r24
     eb6:	13 97       	sbiw	r26, 0x03	; 3
     eb8:	fe 01       	movw	r30, r28
     eba:	31 96       	adiw	r30, 0x01	; 1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     ebc:	8b 2d       	mov	r24, r11
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	8e 0f       	add	r24, r30
     ec6:	9f 1f       	adc	r25, r31

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     ec8:	04 c0       	rjmp	.+8      	; 0xed2 <USB_ProcessHIDReport+0x564>
					  UsageList[i] = UsageList[i + 1];
     eca:	62 81       	ldd	r22, Z+2	; 0x02
     ecc:	73 81       	ldd	r23, Z+3	; 0x03
     ece:	61 93       	st	Z+, r22
     ed0:	71 93       	st	Z+, r23

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     ed2:	e8 17       	cp	r30, r24
     ed4:	f9 07       	cpc	r31, r25
     ed6:	c9 f7       	brne	.-14     	; 0xeca <USB_ProcessHIDReport+0x55c>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     ed8:	ba 94       	dec	r11
     eda:	06 c1       	rjmp	.+524    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     edc:	e9 96       	adiw	r28, 0x39	; 57
     ede:	8c ad       	ldd	r24, Y+60	; 0x3c
     ee0:	9d ad       	ldd	r25, Y+61	; 0x3d
     ee2:	ae ad       	ldd	r26, Y+62	; 0x3e
     ee4:	bf ad       	ldd	r27, Y+63	; 0x3f
     ee6:	e9 97       	sbiw	r28, 0x39	; 57
     ee8:	84 15       	cp	r24, r4
     eea:	95 05       	cpc	r25, r5
     eec:	a6 05       	cpc	r26, r6
     eee:	b7 05       	cpc	r27, r7
     ef0:	08 f4       	brcc	.+2      	; 0xef4 <USB_ProcessHIDReport+0x586>
     ef2:	fa c0       	rjmp	.+500    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     ef4:	d4 01       	movw	r26, r8
     ef6:	14 96       	adiw	r26, 0x04	; 4
     ef8:	5c 92       	st	X, r5
     efa:	4e 92       	st	-X, r4
     efc:	13 97       	sbiw	r26, 0x03	; 3
     efe:	08 94       	sec
     f00:	41 1c       	adc	r4, r1
     f02:	51 1c       	adc	r5, r1
     f04:	61 1c       	adc	r6, r1
     f06:	71 1c       	adc	r7, r1
     f08:	ef c0       	rjmp	.+478    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     f0a:	81 14       	cp	r8, r1
     f0c:	91 04       	cpc	r9, r1
     f0e:	09 f4       	brne	.+2      	; 0xf12 <USB_ProcessHIDReport+0x5a4>
     f10:	13 c1       	rjmp	.+550    	; 0x1138 <USB_ProcessHIDReport+0x7ca>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     f12:	f4 01       	movw	r30, r8
     f14:	85 80       	ldd	r8, Z+5	; 0x05
     f16:	96 80       	ldd	r9, Z+6	; 0x06
				break;
     f18:	e7 c0       	rjmp	.+462    	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     f1a:	de 01       	movw	r26, r28
     f1c:	59 96       	adiw	r26, 0x19	; 25
     f1e:	f7 01       	movw	r30, r14
     f20:	8a e1       	ldi	r24, 0x1A	; 26
     f22:	01 90       	ld	r0, Z+
     f24:	0d 92       	st	X+, r0
     f26:	81 50       	subi	r24, 0x01	; 1
     f28:	e1 f7       	brne	.-8      	; 0xf22 <USB_ProcessHIDReport+0x5b4>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     f2a:	5d 8b       	std	Y+21, r21	; 0x15
     f2c:	4c 8b       	std	Y+20, r20	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
     f2e:	98 8e       	std	Y+24, r9	; 0x18
     f30:	8f 8a       	std	Y+23, r8	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     f32:	d7 01       	movw	r26, r14
     f34:	5b 96       	adiw	r26, 0x1b	; 27
     f36:	8c 91       	ld	r24, X
     f38:	5b 97       	sbiw	r26, 0x1b	; 27
     f3a:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
     f3c:	bb 20       	and	r11, r11
     f3e:	b1 f0       	breq	.+44     	; 0xf6c <USB_ProcessHIDReport+0x5fe>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	9a 81       	ldd	r25, Y+2	; 0x02
     f44:	9d 8f       	std	Y+29, r25	; 0x1d
     f46:	8c 8f       	std	Y+28, r24	; 0x1c
     f48:	fe 01       	movw	r30, r28
     f4a:	31 96       	adiw	r30, 0x01	; 1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     f4c:	8b 2d       	mov	r24, r11
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	8e 0f       	add	r24, r30
     f56:	9f 1f       	adc	r25, r31

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     f58:	04 c0       	rjmp	.+8      	; 0xf62 <USB_ProcessHIDReport+0x5f4>
						  UsageList[i] = UsageList[i + 1];
     f5a:	22 81       	ldd	r18, Z+2	; 0x02
     f5c:	33 81       	ldd	r19, Z+3	; 0x03
     f5e:	21 93       	st	Z+, r18
     f60:	31 93       	st	Z+, r19

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     f62:	e8 17       	cp	r30, r24
     f64:	f9 07       	cpc	r31, r25
     f66:	c9 f7       	brne	.-14     	; 0xf5a <USB_ProcessHIDReport+0x5ec>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     f68:	ba 94       	dec	r11
     f6a:	12 c0       	rjmp	.+36     	; 0xf90 <USB_ProcessHIDReport+0x622>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     f6c:	e9 96       	adiw	r28, 0x39	; 57
     f6e:	8c ad       	ldd	r24, Y+60	; 0x3c
     f70:	9d ad       	ldd	r25, Y+61	; 0x3d
     f72:	ae ad       	ldd	r26, Y+62	; 0x3e
     f74:	bf ad       	ldd	r27, Y+63	; 0x3f
     f76:	e9 97       	sbiw	r28, 0x39	; 57
     f78:	84 15       	cp	r24, r4
     f7a:	95 05       	cpc	r25, r5
     f7c:	a6 05       	cpc	r26, r6
     f7e:	b7 05       	cpc	r27, r7
     f80:	38 f0       	brcs	.+14     	; 0xf90 <USB_ProcessHIDReport+0x622>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     f82:	5d 8e       	std	Y+29, r5	; 0x1d
     f84:	4c 8e       	std	Y+28, r4	; 0x1c
     f86:	08 94       	sec
     f88:	41 1c       	adc	r4, r1
     f8a:	51 1c       	adc	r5, r1
     f8c:	61 1c       	adc	r6, r1
     f8e:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     f90:	c1 58       	subi	r28, 0x81	; 129
     f92:	df 4f       	sbci	r29, 0xFF	; 255
     f94:	98 81       	ld	r25, Y
     f96:	cf 57       	subi	r28, 0x7F	; 127
     f98:	d0 40       	sbci	r29, 0x00	; 0
     f9a:	90 38       	cpi	r25, 0x80	; 128
     f9c:	11 f4       	brne	.+4      	; 0xfa2 <USB_ProcessHIDReport+0x634>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     f9e:	1b 8a       	std	Y+19, r1	; 0x13
     fa0:	0c c0       	rjmp	.+24     	; 0xfba <USB_ProcessHIDReport+0x64c>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     fa2:	c1 58       	subi	r28, 0x81	; 129
     fa4:	df 4f       	sbci	r29, 0xFF	; 255
     fa6:	a8 81       	ld	r26, Y
     fa8:	cf 57       	subi	r28, 0x7F	; 127
     faa:	d0 40       	sbci	r29, 0x00	; 0
     fac:	a0 39       	cpi	r26, 0x90	; 144
     fae:	19 f4       	brne	.+6      	; 0xfb6 <USB_ProcessHIDReport+0x648>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     fb0:	b1 e0       	ldi	r27, 0x01	; 1
     fb2:	bb 8b       	std	Y+19, r27	; 0x13
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <USB_ProcessHIDReport+0x64c>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     fb6:	e2 e0       	ldi	r30, 0x02	; 2
     fb8:	eb 8b       	std	Y+19, r30	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     fba:	eb 89       	ldd	r30, Y+19	; 0x13
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	ec 0d       	add	r30, r12
     fc4:	fd 1d       	adc	r31, r13
     fc6:	81 81       	ldd	r24, Z+1	; 0x01
     fc8:	92 81       	ldd	r25, Z+2	; 0x02
     fca:	9a 8b       	std	Y+18, r25	; 0x12
     fcc:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     fce:	d7 01       	movw	r26, r14
     fd0:	2c 91       	ld	r18, X
     fd2:	81 81       	ldd	r24, Z+1	; 0x01
     fd4:	92 81       	ldd	r25, Z+2	; 0x02
     fd6:	82 0f       	add	r24, r18
     fd8:	91 1d       	adc	r25, r1
     fda:	92 83       	std	Z+2, r25	; 0x02
     fdc:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     fde:	eb 89       	ldd	r30, Y+19	; 0x13
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	ec 0d       	add	r30, r12
     fe8:	fd 1d       	adc	r31, r13
     fea:	c0 58       	subi	r28, 0x80	; 128
     fec:	df 4f       	sbci	r29, 0xFF	; 255
     fee:	a8 81       	ld	r26, Y
     ff0:	b9 81       	ldd	r27, Y+1	; 0x01
     ff2:	c0 58       	subi	r28, 0x80	; 128
     ff4:	d0 40       	sbci	r29, 0x00	; 0
     ff6:	8d 91       	ld	r24, X+
     ff8:	9c 91       	ld	r25, X
     ffa:	11 97       	sbiw	r26, 0x01	; 1
     ffc:	21 81       	ldd	r18, Z+1	; 0x01
     ffe:	32 81       	ldd	r19, Z+2	; 0x02
    1000:	28 17       	cp	r18, r24
    1002:	39 07       	cpc	r19, r25
    1004:	08 f4       	brcc	.+2      	; 0x1008 <USB_ProcessHIDReport+0x69a>
    1006:	9c 01       	movw	r18, r24
    1008:	c0 58       	subi	r28, 0x80	; 128
    100a:	df 4f       	sbci	r29, 0xFF	; 255
    100c:	e8 81       	ld	r30, Y
    100e:	f9 81       	ldd	r31, Y+1	; 0x01
    1010:	c0 58       	subi	r28, 0x80	; 128
    1012:	d0 40       	sbci	r29, 0x00	; 0
    1014:	31 83       	std	Z+1, r19	; 0x01
    1016:	20 83       	st	Z, r18

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1018:	e5 96       	adiw	r28, 0x35	; 53
    101a:	ae ad       	ldd	r26, Y+62	; 0x3e
    101c:	bf ad       	ldd	r27, Y+63	; 0x3f
    101e:	e5 97       	sbiw	r28, 0x35	; 53
    1020:	8c 91       	ld	r24, X
    1022:	84 31       	cpi	r24, 0x14	; 20
    1024:	09 f4       	brne	.+2      	; 0x1028 <USB_ProcessHIDReport+0x6ba>
    1026:	8a c0       	rjmp	.+276    	; 0x113c <USB_ProcessHIDReport+0x7ce>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	2a e2       	ldi	r18, 0x2A	; 42
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	82 9f       	mul	r24, r18
    1030:	f0 01       	movw	r30, r0
    1032:	83 9f       	mul	r24, r19
    1034:	f0 0d       	add	r31, r0
    1036:	92 9f       	mul	r25, r18
    1038:	f0 0d       	add	r31, r0
    103a:	11 24       	eor	r1, r1
    103c:	ea 0f       	add	r30, r26
    103e:	fb 1f       	adc	r31, r27
    1040:	31 96       	adiw	r30, 0x01	; 1
    1042:	de 01       	movw	r26, r28
    1044:	51 96       	adiw	r26, 0x11	; 17
    1046:	8a e2       	ldi	r24, 0x2A	; 42
    1048:	0d 90       	ld	r0, X+
    104a:	01 92       	st	Z+, r0
    104c:	81 50       	subi	r24, 0x01	; 1
    104e:	e1 f7       	brne	.-8      	; 0x1048 <USB_ProcessHIDReport+0x6da>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1050:	ca 57       	subi	r28, 0x7A	; 122
    1052:	df 4f       	sbci	r29, 0xFF	; 255
    1054:	88 81       	ld	r24, Y
    1056:	99 81       	ldd	r25, Y+1	; 0x01
    1058:	aa 81       	ldd	r26, Y+2	; 0x02
    105a:	bb 81       	ldd	r27, Y+3	; 0x03
    105c:	c6 58       	subi	r28, 0x86	; 134
    105e:	d0 40       	sbci	r29, 0x00	; 0
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	a1 05       	cpc	r26, r1
    1064:	b1 05       	cpc	r27, r1
    1066:	a1 f5       	brne	.+104    	; 0x10d0 <USB_ProcessHIDReport+0x762>
    1068:	ce 01       	movw	r24, r28
    106a:	41 96       	adiw	r24, 0x11	; 17
    106c:	cc 56       	subi	r28, 0x6C	; 108
    106e:	df 4f       	sbci	r29, 0xFF	; 255
    1070:	48 83       	st	Y, r20
    1072:	c4 59       	subi	r28, 0x94	; 148
    1074:	d0 40       	sbci	r29, 0x00	; 0
    1076:	cb 56       	subi	r28, 0x6B	; 107
    1078:	df 4f       	sbci	r29, 0xFF	; 255
    107a:	58 83       	st	Y, r21
    107c:	c5 59       	subi	r28, 0x95	; 149
    107e:	d0 40       	sbci	r29, 0x00	; 0
    1080:	ca 56       	subi	r28, 0x6A	; 106
    1082:	df 4f       	sbci	r29, 0xFF	; 255
    1084:	68 83       	st	Y, r22
    1086:	c6 59       	subi	r28, 0x96	; 150
    1088:	d0 40       	sbci	r29, 0x00	; 0
    108a:	c9 56       	subi	r28, 0x69	; 105
    108c:	df 4f       	sbci	r29, 0xFF	; 255
    108e:	78 83       	st	Y, r23
    1090:	c7 59       	subi	r28, 0x97	; 151
    1092:	d0 40       	sbci	r29, 0x00	; 0
    1094:	43 dc       	rcall	.-1914   	; 0x91c <CALLBACK_HIDParser_FilterHIDReportItem>
    1096:	cc 56       	subi	r28, 0x6C	; 108
    1098:	df 4f       	sbci	r29, 0xFF	; 255
    109a:	48 81       	ld	r20, Y
    109c:	c4 59       	subi	r28, 0x94	; 148
    109e:	d0 40       	sbci	r29, 0x00	; 0
    10a0:	cb 56       	subi	r28, 0x6B	; 107
    10a2:	df 4f       	sbci	r29, 0xFF	; 255
    10a4:	58 81       	ld	r21, Y
    10a6:	c5 59       	subi	r28, 0x95	; 149
    10a8:	d0 40       	sbci	r29, 0x00	; 0
    10aa:	ca 56       	subi	r28, 0x6A	; 106
    10ac:	df 4f       	sbci	r29, 0xFF	; 255
    10ae:	68 81       	ld	r22, Y
    10b0:	c6 59       	subi	r28, 0x96	; 150
    10b2:	d0 40       	sbci	r29, 0x00	; 0
    10b4:	c9 56       	subi	r28, 0x69	; 105
    10b6:	df 4f       	sbci	r29, 0xFF	; 255
    10b8:	78 81       	ld	r23, Y
    10ba:	c7 59       	subi	r28, 0x97	; 151
    10bc:	d0 40       	sbci	r29, 0x00	; 0
    10be:	88 23       	and	r24, r24
    10c0:	39 f0       	breq	.+14     	; 0x10d0 <USB_ProcessHIDReport+0x762>
					  ParserData->TotalReportItems++;
    10c2:	e5 96       	adiw	r28, 0x35	; 53
    10c4:	ae ad       	ldd	r26, Y+62	; 0x3e
    10c6:	bf ad       	ldd	r27, Y+63	; 0x3f
    10c8:	e5 97       	sbiw	r28, 0x35	; 53
    10ca:	8c 91       	ld	r24, X
    10cc:	8f 5f       	subi	r24, 0xFF	; 255
    10ce:	8c 93       	st	X, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    10d0:	a3 94       	inc	r10
    10d2:	f7 01       	movw	r30, r14
    10d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    10d6:	a8 16       	cp	r10, r24
    10d8:	08 f4       	brcc	.+2      	; 0x10dc <USB_ProcessHIDReport+0x76e>
    10da:	1f cf       	rjmp	.-450    	; 0xf1a <USB_ProcessHIDReport+0x5ac>
    10dc:	97 01       	movw	r18, r14
    10de:	a6 01       	movw	r20, r12
    10e0:	68 01       	movw	r12, r16
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <USB_ProcessHIDReport+0x77a>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    10e4:	27 01       	movw	r4, r14
    10e6:	38 01       	movw	r6, r16
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    10e8:	eb 96       	adiw	r28, 0x3b	; 59
    10ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    10ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    10ee:	eb 97       	sbiw	r28, 0x3b	; 59
    10f0:	8c 70       	andi	r24, 0x0C	; 12
    10f2:	90 70       	andi	r25, 0x00	; 0
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	51 f4       	brne	.+20     	; 0x110c <USB_ProcessHIDReport+0x79e>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
    10f8:	e9 96       	adiw	r28, 0x39	; 57
    10fa:	1c ae       	std	Y+60, r1	; 0x3c
    10fc:	1d ae       	std	Y+61, r1	; 0x3d
    10fe:	1e ae       	std	Y+62, r1	; 0x3e
    1100:	1f ae       	std	Y+63, r1	; 0x3f
    1102:	e9 97       	sbiw	r28, 0x39	; 57
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
    1104:	44 24       	eor	r4, r4
    1106:	55 24       	eor	r5, r5
    1108:	32 01       	movw	r6, r4
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
    110a:	bb 24       	eor	r11, r11
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    110c:	21 14       	cp	r2, r1
    110e:	31 04       	cpc	r3, r1
    1110:	09 f0       	breq	.+2      	; 0x1114 <USB_ProcessHIDReport+0x7a6>
    1112:	c4 cc       	rjmp	.-1656   	; 0xa9c <USB_ProcessHIDReport+0x12e>
    1114:	e5 96       	adiw	r28, 0x35	; 53
    1116:	6e ad       	ldd	r22, Y+62	; 0x3e
    1118:	7f ad       	ldd	r23, Y+63	; 0x3f
    111a:	e5 97       	sbiw	r28, 0x35	; 53
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    111c:	db 01       	movw	r26, r22
    111e:	8c 91       	ld	r24, X
    1120:	88 23       	and	r24, r24
    1122:	71 f4       	brne	.+28     	; 0x1140 <USB_ProcessHIDReport+0x7d2>
	  return HID_PARSE_NoUnfilteredReportItems;
    1124:	88 e0       	ldi	r24, 0x08	; 8
    1126:	0f c0       	rjmp	.+30     	; 0x1146 <USB_ProcessHIDReport+0x7d8>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	0d c0       	rjmp	.+26     	; 0x1146 <USB_ProcessHIDReport+0x7d8>

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	0b c0       	rjmp	.+22     	; 0x1146 <USB_ProcessHIDReport+0x7d8>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
    1130:	86 e0       	ldi	r24, 0x06	; 6
    1132:	09 c0       	rjmp	.+18     	; 0x1146 <USB_ProcessHIDReport+0x7d8>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
    1134:	85 e0       	ldi	r24, 0x05	; 5
    1136:	07 c0       	rjmp	.+14     	; 0x1146 <USB_ProcessHIDReport+0x7d8>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
    1138:	84 e0       	ldi	r24, 0x04	; 4
    113a:	05 c0       	rjmp	.+10     	; 0x1146 <USB_ProcessHIDReport+0x7d8>
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
    113c:	83 e0       	ldi	r24, 0x03	; 3
    113e:	03 c0       	rjmp	.+6      	; 0x1146 <USB_ProcessHIDReport+0x7d8>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <USB_ProcessHIDReport+0x7d8>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
    1144:	87 e0       	ldi	r24, 0x07	; 7

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1146:	c7 56       	subi	r28, 0x67	; 103
    1148:	df 4f       	sbci	r29, 0xFF	; 255
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	bf 90       	pop	r11
    1166:	af 90       	pop	r10
    1168:	9f 90       	pop	r9
    116a:	8f 90       	pop	r8
    116c:	7f 90       	pop	r7
    116e:	6f 90       	pop	r6
    1170:	5f 90       	pop	r5
    1172:	4f 90       	pop	r4
    1174:	3f 90       	pop	r3
    1176:	2f 90       	pop	r2
    1178:	08 95       	ret
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    117a:	6a 30       	cpi	r22, 0x0A	; 10
    117c:	09 f0       	breq	.+2      	; 0x1180 <USB_ProcessHIDReport+0x812>
    117e:	21 ce       	rjmp	.-958    	; 0xdc2 <USB_ProcessHIDReport+0x454>
    1180:	e1 cf       	rjmp	.-62     	; 0x1144 <USB_ProcessHIDReport+0x7d6>

00001182 <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	fb 01       	movw	r30, r22
	if (ReportItem == NULL)
    1190:	30 97       	sbiw	r30, 0x00	; 0
    1192:	09 f4       	brne	.+2      	; 0x1196 <USB_GetHIDReportItemInfo+0x14>
    1194:	4c c0       	rjmp	.+152    	; 0x122e <USB_GetHIDReportItemInfo+0xac>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1196:	30 85       	ldd	r19, Z+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    1198:	60 81       	ld	r22, Z
    119a:	71 81       	ldd	r23, Z+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    119c:	25 81       	ldd	r18, Z+5	; 0x05
    119e:	22 23       	and	r18, r18
    11a0:	31 f0       	breq	.+12     	; 0x11ae <USB_GetHIDReportItemInfo+0x2c>
	{
		if (ReportItem->ReportID != ReportData[0])
    11a2:	dc 01       	movw	r26, r24
    11a4:	4c 91       	ld	r20, X
    11a6:	24 17       	cp	r18, r20
    11a8:	09 f0       	breq	.+2      	; 0x11ac <USB_GetHIDReportItemInfo+0x2a>
    11aa:	41 c0       	rjmp	.+130    	; 0x122e <USB_GetHIDReportItemInfo+0xac>
		  return false;

		ReportData++;
    11ac:	01 96       	adiw	r24, 0x01	; 1
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    11ae:	c3 2f       	mov	r28, r19
    11b0:	d0 e0       	ldi	r29, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    11b2:	22 a1       	ldd	r18, Z+34	; 0x22
    11b4:	33 a1       	ldd	r19, Z+35	; 0x23
    11b6:	44 a1       	ldd	r20, Z+36	; 0x24
    11b8:	55 a1       	ldd	r21, Z+37	; 0x25
    11ba:	26 a3       	std	Z+38, r18	; 0x26
    11bc:	37 a3       	std	Z+39, r19	; 0x27
    11be:	40 a7       	std	Z+40, r20	; 0x28
    11c0:	51 a7       	std	Z+41, r21	; 0x29
	ReportItem->Value = 0;
    11c2:	12 a2       	std	Z+34, r1	; 0x22
    11c4:	13 a2       	std	Z+35, r1	; 0x23
    11c6:	14 a2       	std	Z+36, r1	; 0x24
    11c8:	15 a2       	std	Z+37, r1	; 0x25
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
    11ca:	21 e0       	ldi	r18, 0x01	; 1
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	50 e0       	ldi	r21, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    11d2:	29 c0       	rjmp	.+82     	; 0x1226 <USB_GetHIDReportItemInfo+0xa4>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    11d4:	db 01       	movw	r26, r22
    11d6:	03 e0       	ldi	r16, 0x03	; 3
    11d8:	b6 95       	lsr	r27
    11da:	a7 95       	ror	r26
    11dc:	0a 95       	dec	r16
    11de:	e1 f7       	brne	.-8      	; 0x11d8 <USB_GetHIDReportItemInfo+0x56>
    11e0:	a8 0f       	add	r26, r24
    11e2:	b9 1f       	adc	r27, r25
    11e4:	ac 91       	ld	r26, X
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	17 e0       	ldi	r17, 0x07	; 7
    11ea:	e1 2e       	mov	r14, r17
    11ec:	f1 2c       	mov	r15, r1
    11ee:	e6 22       	and	r14, r22
    11f0:	f7 22       	and	r15, r23
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <USB_GetHIDReportItemInfo+0x76>
    11f4:	b5 95       	asr	r27
    11f6:	a7 95       	ror	r26
    11f8:	ea 94       	dec	r14
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <USB_GetHIDReportItemInfo+0x72>
    11fc:	a0 ff       	sbrs	r26, 0
    11fe:	0c c0       	rjmp	.+24     	; 0x1218 <USB_GetHIDReportItemInfo+0x96>
		  ReportItem->Value |= BitMask;
    1200:	e2 a0       	ldd	r14, Z+34	; 0x22
    1202:	f3 a0       	ldd	r15, Z+35	; 0x23
    1204:	04 a1       	ldd	r16, Z+36	; 0x24
    1206:	15 a1       	ldd	r17, Z+37	; 0x25
    1208:	e2 2a       	or	r14, r18
    120a:	f3 2a       	or	r15, r19
    120c:	04 2b       	or	r16, r20
    120e:	15 2b       	or	r17, r21
    1210:	e2 a2       	std	Z+34, r14	; 0x22
    1212:	f3 a2       	std	Z+35, r15	; 0x23
    1214:	04 a3       	std	Z+36, r16	; 0x24
    1216:	15 a3       	std	Z+37, r17	; 0x25

		CurrentBit++;
    1218:	6f 5f       	subi	r22, 0xFF	; 255
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
		BitMask <<= 1;
    121c:	22 0f       	add	r18, r18
    121e:	33 1f       	adc	r19, r19
    1220:	44 1f       	adc	r20, r20
    1222:	55 1f       	adc	r21, r21
    1224:	21 97       	sbiw	r28, 0x01	; 1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    1226:	20 97       	sbiw	r28, 0x00	; 0
    1228:	a9 f6       	brne	.-86     	; 0x11d4 <USB_GetHIDReportItemInfo+0x52>

		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <USB_GetHIDReportItemInfo+0xae>
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;
    122e:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	08 95       	ret

0000123e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    123e:	80 91 9e 00 	lds	r24, 0x009E
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	81 70       	andi	r24, 0x01	; 1
    1246:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1248:	20 91 a0 00 	lds	r18, 0x00A0
    124c:	2d 7f       	andi	r18, 0xFD	; 253
    124e:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    1252:	20 91 9e 00 	lds	r18, 0x009E
    1256:	22 60       	ori	r18, 0x02	; 2
    1258:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    125c:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    1260:	21 fd       	sbrc	r18, 1
    1262:	fc cf       	rjmp	.-8      	; 0x125c <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1264:	20 91 9e 00 	lds	r18, 0x009E
    1268:	21 60       	ori	r18, 0x01	; 1
    126a:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
    126e:	10 92 f0 04 	sts	0x04F0, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1272:	20 91 a0 00 	lds	r18, 0x00A0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	20 72       	andi	r18, 0x20	; 32
    127a:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    127c:	40 91 a0 00 	lds	r20, 0x00A0
    1280:	4f 7d       	andi	r20, 0xDF	; 223
    1282:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1286:	40 91 9f 00 	lds	r20, 0x009F
    128a:	4f 7d       	andi	r20, 0xDF	; 223
    128c:	40 93 9f 00 	sts	0x009F, r20
    1290:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1292:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    1296:	55 ff       	sbrs	r21, 5
    1298:	0b c0       	rjmp	.+22     	; 0x12b0 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    129a:	40 91 9f 00 	lds	r20, 0x009F
    129e:	4f 7d       	andi	r20, 0xDF	; 223
    12a0:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    12a4:	40 91 9f 00 	lds	r20, 0x009F
    12a8:	4d 7f       	andi	r20, 0xFD	; 253
    12aa:	40 93 9f 00 	sts	0x009F, r20
    12ae:	08 c0       	rjmp	.+16     	; 0x12c0 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12b0:	ef ec       	ldi	r30, 0xCF	; 207
    12b2:	f7 e0       	ldi	r31, 0x07	; 7
    12b4:	31 97       	sbiw	r30, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <USB_Host_ResetDevice+0x76>
    12b8:	00 c0       	rjmp	.+0      	; 0x12ba <USB_Host_ResetDevice+0x7c>
    12ba:	00 00       	nop
    12bc:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    12be:	49 f7       	brne	.-46     	; 0x1292 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    12c0:	21 15       	cp	r18, r1
    12c2:	31 05       	cpc	r19, r1
    12c4:	29 f0       	breq	.+10     	; 0x12d0 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    12c6:	20 91 a0 00 	lds	r18, 0x00A0
    12ca:	20 62       	ori	r18, 0x20	; 32
    12cc:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	29 f4       	brne	.+10     	; 0x12de <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    12d4:	80 91 9e 00 	lds	r24, 0x009E
    12d8:	8e 7f       	andi	r24, 0xFE	; 254
    12da:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    12de:	80 91 a0 00 	lds	r24, 0x00A0
    12e2:	82 60       	ori	r24, 0x02	; 2
    12e4:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    12e8:	08 95       	ret

000012ea <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    12ea:	40 91 9e 00 	lds	r20, 0x009E
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	41 70       	andi	r20, 0x01	; 1
    12f2:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    12f4:	20 91 a0 00 	lds	r18, 0x00A0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	20 72       	andi	r18, 0x20	; 32
    12fc:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    12fe:	90 91 a0 00 	lds	r25, 0x00A0
    1302:	9f 7d       	andi	r25, 0xDF	; 223
    1304:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1308:	90 91 9f 00 	lds	r25, 0x009F
    130c:	9f 7d       	andi	r25, 0xDF	; 223
    130e:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1312:	90 91 9e 00 	lds	r25, 0x009E
    1316:	91 60       	ori	r25, 0x01	; 1
    1318:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    131c:	26 c0       	rjmp	.+76     	; 0x136a <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    131e:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    1322:	95 ff       	sbrs	r25, 5
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1326:	90 91 9f 00 	lds	r25, 0x009F
    132a:	9f 7d       	andi	r25, 0xDF	; 223
    132c:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    1330:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    1332:	90 91 fa 04 	lds	r25, 0x04FA
    1336:	91 30       	cpi	r25, 0x01	; 1
    1338:	d9 f0       	breq	.+54     	; 0x1370 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    133a:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    133e:	94 ff       	sbrs	r25, 4
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1342:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1346:	80 91 a6 00 	lds	r24, 0x00A6
    134a:	8f 7e       	andi	r24, 0xEF	; 239
    134c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    1350:	82 e0       	ldi	r24, 0x02	; 2

			break;
    1352:	0f c0       	rjmp	.+30     	; 0x1372 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1354:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
    1358:	91 ff       	sbrs	r25, 1
    135a:	07 c0       	rjmp	.+14     	; 0x136a <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    135c:	80 91 a6 00 	lds	r24, 0x00A6
    1360:	8d 7f       	andi	r24, 0xFD	; 253
    1362:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    1366:	83 e0       	ldi	r24, 0x03	; 3

			break;
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    136a:	88 23       	and	r24, r24
    136c:	c1 f6       	brne	.-80     	; 0x131e <USB_Host_WaitMS+0x34>
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    1370:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    1372:	41 15       	cp	r20, r1
    1374:	51 05       	cpc	r21, r1
    1376:	29 f4       	brne	.+10     	; 0x1382 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1378:	90 91 9e 00 	lds	r25, 0x009E
    137c:	9e 7f       	andi	r25, 0xFE	; 254
    137e:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    1382:	21 15       	cp	r18, r1
    1384:	31 05       	cpc	r19, r1
    1386:	29 f0       	breq	.+10     	; 0x1392 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    1388:	90 91 a0 00 	lds	r25, 0x00A0
    138c:	90 62       	ori	r25, 0x20	; 32
    138e:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    1392:	08 95       	ret

00001394 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	28 97       	sbiw	r28, 0x08	; 8
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    13ac:	80 91 fa 04 	lds	r24, 0x04FA
    13b0:	85 30       	cpi	r24, 0x05	; 5
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <USB_Host_ProcessNextHostState+0x22>
    13b4:	99 c0       	rjmp	.+306    	; 0x14e8 <USB_Host_ProcessNextHostState+0x154>
    13b6:	86 30       	cpi	r24, 0x06	; 6
    13b8:	68 f4       	brcc	.+26     	; 0x13d4 <USB_Host_ProcessNextHostState+0x40>
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	c1 f1       	breq	.+112    	; 0x142e <USB_Host_ProcessNextHostState+0x9a>
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	18 f4       	brcc	.+6      	; 0x13c8 <USB_Host_ProcessNextHostState+0x34>
    13c2:	88 23       	and	r24, r24
    13c4:	a1 f0       	breq	.+40     	; 0x13ee <USB_Host_ProcessNextHostState+0x5a>
    13c6:	07 c1       	rjmp	.+526    	; 0x15d6 <USB_Host_ProcessNextHostState+0x242>
    13c8:	83 30       	cpi	r24, 0x03	; 3
    13ca:	d9 f1       	breq	.+118    	; 0x1442 <USB_Host_ProcessNextHostState+0xae>
    13cc:	84 30       	cpi	r24, 0x04	; 4
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <USB_Host_ProcessNextHostState+0x3e>
    13d0:	02 c1       	rjmp	.+516    	; 0x15d6 <USB_Host_ProcessNextHostState+0x242>
    13d2:	62 c0       	rjmp	.+196    	; 0x1498 <USB_Host_ProcessNextHostState+0x104>
    13d4:	87 30       	cpi	r24, 0x07	; 7
    13d6:	09 f4       	brne	.+2      	; 0x13da <USB_Host_ProcessNextHostState+0x46>
    13d8:	9e c0       	rjmp	.+316    	; 0x1516 <USB_Host_ProcessNextHostState+0x182>
    13da:	87 30       	cpi	r24, 0x07	; 7
    13dc:	08 f4       	brcc	.+2      	; 0x13e0 <USB_Host_ProcessNextHostState+0x4c>
    13de:	8f c0       	rjmp	.+286    	; 0x14fe <USB_Host_ProcessNextHostState+0x16a>
    13e0:	88 30       	cpi	r24, 0x08	; 8
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <USB_Host_ProcessNextHostState+0x52>
    13e4:	b8 c0       	rjmp	.+368    	; 0x1556 <USB_Host_ProcessNextHostState+0x1c2>
    13e6:	89 30       	cpi	r24, 0x09	; 9
    13e8:	09 f0       	breq	.+2      	; 0x13ec <USB_Host_ProcessNextHostState+0x58>
    13ea:	f5 c0       	rjmp	.+490    	; 0x15d6 <USB_Host_ProcessNextHostState+0x242>
    13ec:	d9 c0       	rjmp	.+434    	; 0x15a0 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    13ee:	00 91 13 01 	lds	r16, 0x0113
    13f2:	10 91 14 01 	lds	r17, 0x0114
    13f6:	01 15       	cp	r16, r1
    13f8:	11 05       	cpc	r17, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <USB_Host_ProcessNextHostState+0x6a>
    13fc:	ec c0       	rjmp	.+472    	; 0x15d6 <USB_Host_ProcessNextHostState+0x242>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	74 df       	rcall	.-280    	; 0x12ea <USB_Host_WaitMS>
    1402:	68 2f       	mov	r22, r24
    1404:	88 23       	and	r24, r24
    1406:	31 f0       	breq	.+12     	; 0x1414 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
    1408:	80 91 12 01 	lds	r24, 0x0112
    140c:	80 93 fa 04 	sts	0x04FA, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    1410:	81 e0       	ldi	r24, 0x01	; 1
					break;
    1412:	d3 c0       	rjmp	.+422    	; 0x15ba <USB_Host_ProcessNextHostState+0x226>
				}

				if (!(--WaitMSRemaining))
    1414:	01 50       	subi	r16, 0x01	; 1
    1416:	10 40       	sbci	r17, 0x00	; 0
    1418:	10 93 14 01 	sts	0x0114, r17
    141c:	00 93 13 01 	sts	0x0113, r16
    1420:	01 15       	cp	r16, r1
    1422:	11 05       	cpc	r17, r1
    1424:	09 f0       	breq	.+2      	; 0x1428 <USB_Host_ProcessNextHostState+0x94>
    1426:	d7 c0       	rjmp	.+430    	; 0x15d6 <USB_Host_ProcessNextHostState+0x242>
				  USB_HostState = PostWaitState;
    1428:	80 91 12 01 	lds	r24, 0x0112
    142c:	07 c0       	rjmp	.+14     	; 0x143c <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    142e:	88 ee       	ldi	r24, 0xE8	; 232
    1430:	93 e0       	ldi	r25, 0x03	; 3
    1432:	90 93 14 01 	sts	0x0114, r25
    1436:	80 93 13 01 	sts	0x0113, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    143a:	83 e0       	ldi	r24, 0x03	; 3
    143c:	80 93 fa 04 	sts	0x04FA, r24
			break;
    1440:	ca c0       	rjmp	.+404    	; 0x15d6 <USB_Host_ProcessNextHostState+0x242>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    1442:	80 91 13 01 	lds	r24, 0x0113
    1446:	90 91 14 01 	lds	r25, 0x0114
    144a:	9c 01       	movw	r18, r24
    144c:	21 50       	subi	r18, 0x01	; 1
    144e:	30 40       	sbci	r19, 0x00	; 0
    1450:	30 93 14 01 	sts	0x0114, r19
    1454:	20 93 13 01 	sts	0x0113, r18
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	39 f0       	breq	.+14     	; 0x146a <USB_Host_ProcessNextHostState+0xd6>
    145c:	8f ec       	ldi	r24, 0xCF	; 207
    145e:	97 e0       	ldi	r25, 0x07	; 7
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <USB_Host_ProcessNextHostState+0xcc>
    1464:	00 c0       	rjmp	.+0      	; 0x1466 <USB_Host_ProcessNextHostState+0xd2>
    1466:	00 00       	nop
    1468:	b6 c0       	rjmp	.+364    	; 0x15d6 <USB_Host_ProcessNextHostState+0x242>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    146a:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    146c:	80 91 d8 00 	lds	r24, 0x00D8
    1470:	80 61       	ori	r24, 0x10	; 16
    1472:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    1476:	80 91 dd 00 	lds	r24, 0x00DD
    147a:	8b 7f       	andi	r24, 0xFB	; 251
    147c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    1480:	80 91 d7 00 	lds	r24, 0x00D7
    1484:	80 61       	ori	r24, 0x10	; 16
    1486:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    148a:	80 91 dd 00 	lds	r24, 0x00DD
    148e:	82 60       	ori	r24, 0x02	; 2
    1490:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1494:	84 e0       	ldi	r24, 0x04	; 4
    1496:	d2 cf       	rjmp	.-92     	; 0x143c <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1498:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    149c:	80 ff       	sbrs	r24, 0
    149e:	9b c0       	rjmp	.+310    	; 0x15d6 <USB_Host_ProcessNextHostState+0x242>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    14a0:	80 91 9f 00 	lds	r24, 0x009F
    14a4:	8e 7f       	andi	r24, 0xFE	; 254
    14a6:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    14aa:	80 91 9f 00 	lds	r24, 0x009F
    14ae:	8d 7f       	andi	r24, 0xFD	; 253
    14b0:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    14b4:	80 91 df 00 	lds	r24, 0x00DF
    14b8:	8d 7f       	andi	r24, 0xFD	; 253
    14ba:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    14be:	80 91 de 00 	lds	r24, 0x00DE
    14c2:	82 60       	ori	r24, 0x02	; 2
    14c4:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    14c8:	80 91 9e 00 	lds	r24, 0x009E
    14cc:	81 60       	ori	r24, 0x01	; 1
    14ce:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    14d2:	56 d1       	rcall	.+684    	; 0x1780 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    14d4:	10 92 fa 04 	sts	0x04FA, r1
    14d8:	84 e6       	ldi	r24, 0x64	; 100
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	90 93 14 01 	sts	0x0114, r25
    14e0:	80 93 13 01 	sts	0x0113, r24
    14e4:	85 e0       	ldi	r24, 0x05	; 5
    14e6:	59 c0       	rjmp	.+178    	; 0x159a <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    14e8:	aa de       	rcall	.-684    	; 0x123e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    14ea:	10 92 fa 04 	sts	0x04FA, r1
    14ee:	88 ec       	ldi	r24, 0xC8	; 200
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	90 93 14 01 	sts	0x0114, r25
    14f6:	80 93 13 01 	sts	0x0113, r24
    14fa:	86 e0       	ldi	r24, 0x06	; 6
    14fc:	4e c0       	rjmp	.+156    	; 0x159a <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	20 e4       	ldi	r18, 0x40	; 64
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	01 e0       	ldi	r16, 0x01	; 1
    150a:	d3 d0       	rcall	.+422    	; 0x16b2 <Pipe_ConfigurePipe>
    150c:	88 23       	and	r24, r24
    150e:	09 f4       	brne	.+2      	; 0x1512 <USB_Host_ProcessNextHostState+0x17e>
    1510:	50 c0       	rjmp	.+160    	; 0x15b2 <USB_Host_ProcessNextHostState+0x21e>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    1512:	87 e0       	ldi	r24, 0x07	; 7
    1514:	93 cf       	rjmp	.-218    	; 0x143c <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1516:	a2 ef       	ldi	r26, 0xF2	; 242
    1518:	b4 e0       	ldi	r27, 0x04	; 4
    151a:	e8 e0       	ldi	r30, 0x08	; 8
    151c:	f1 e0       	ldi	r31, 0x01	; 1
    151e:	88 e0       	ldi	r24, 0x08	; 8
    1520:	01 90       	ld	r0, Z+
    1522:	0d 92       	st	X+, r0
    1524:	81 50       	subi	r24, 0x01	; 1
    1526:	e1 f7       	brne	.-8      	; 0x1520 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1528:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    152c:	ce 01       	movw	r24, r28
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	4c d3       	rcall	.+1688   	; 0x1bca <USB_Host_SendControlRequest>
    1532:	68 2f       	mov	r22, r24
    1534:	88 23       	and	r24, r24
    1536:	09 f0       	breq	.+2      	; 0x153a <USB_Host_ProcessNextHostState+0x1a6>
    1538:	3f c0       	rjmp	.+126    	; 0x15b8 <USB_Host_ProcessNextHostState+0x224>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    153a:	88 85       	ldd	r24, Y+8	; 0x08
    153c:	80 93 10 01 	sts	0x0110, r24

			USB_Host_ResetDevice();
    1540:	7e de       	rcall	.-772    	; 0x123e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    1542:	10 92 fa 04 	sts	0x04FA, r1
    1546:	88 ec       	ldi	r24, 0xC8	; 200
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	90 93 14 01 	sts	0x0114, r25
    154e:	80 93 13 01 	sts	0x0113, r24
    1552:	88 e0       	ldi	r24, 0x08	; 8
    1554:	22 c0       	rjmp	.+68     	; 0x159a <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    1556:	20 91 10 01 	lds	r18, 0x0110
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	01 e0       	ldi	r16, 0x01	; 1
    1564:	a6 d0       	rcall	.+332    	; 0x16b2 <Pipe_ConfigurePipe>
    1566:	88 23       	and	r24, r24
    1568:	21 f1       	breq	.+72     	; 0x15b2 <USB_Host_ProcessNextHostState+0x21e>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    156a:	a2 ef       	ldi	r26, 0xF2	; 242
    156c:	b4 e0       	ldi	r27, 0x04	; 4
    156e:	e0 e0       	ldi	r30, 0x00	; 0
    1570:	f1 e0       	ldi	r31, 0x01	; 1
    1572:	88 e0       	ldi	r24, 0x08	; 8
    1574:	01 90       	ld	r0, Z+
    1576:	0d 92       	st	X+, r0
    1578:	81 50       	subi	r24, 0x01	; 1
    157a:	e1 f7       	brne	.-8      	; 0x1574 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	24 d3       	rcall	.+1608   	; 0x1bca <USB_Host_SendControlRequest>
    1582:	68 2f       	mov	r22, r24
    1584:	88 23       	and	r24, r24
    1586:	c1 f4       	brne	.+48     	; 0x15b8 <USB_Host_ProcessNextHostState+0x224>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1588:	10 92 fa 04 	sts	0x04FA, r1
    158c:	84 e6       	ldi	r24, 0x64	; 100
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	90 93 14 01 	sts	0x0114, r25
    1594:	80 93 13 01 	sts	0x0113, r24
    1598:	89 e0       	ldi	r24, 0x09	; 9
    159a:	80 93 12 01 	sts	0x0112, r24
			break;
    159e:	1b c0       	rjmp	.+54     	; 0x15d6 <USB_Host_ProcessNextHostState+0x242>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    15a6:	8a e0       	ldi	r24, 0x0A	; 10
    15a8:	80 93 fa 04 	sts	0x04FA, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    15ac:	0e 94 c8 01 	call	0x390	; 0x390 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    15b0:	12 c0       	rjmp	.+36     	; 0x15d6 <USB_Host_ProcessNextHostState+0x242>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    15b2:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    15b4:	84 e0       	ldi	r24, 0x04	; 4
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <USB_Host_ProcessNextHostState+0x226>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    15b8:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    15ba:	90 91 fa 04 	lds	r25, 0x04FA
    15be:	91 30       	cpi	r25, 0x01	; 1
    15c0:	51 f0       	breq	.+20     	; 0x15d6 <USB_Host_ProcessNextHostState+0x242>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    15c2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    15c6:	80 91 dd 00 	lds	r24, 0x00DD
    15ca:	81 60       	ori	r24, 0x01	; 1
    15cc:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    15d0:	0e 94 c2 01 	call	0x384	; 0x384 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    15d4:	32 d1       	rcall	.+612    	; 0x183a <USB_ResetInterface>
	}
}
    15d6:	28 96       	adiw	r28, 0x08	; 8
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	08 95       	ret

000015ec <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    15ec:	8f 92       	push	r8
    15ee:	9f 92       	push	r9
    15f0:	bf 92       	push	r11
    15f2:	cf 92       	push	r12
    15f4:	df 92       	push	r13
    15f6:	ef 92       	push	r14
    15f8:	ff 92       	push	r15
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	0f 92       	push	r0
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	e8 2e       	mov	r14, r24
    160a:	4b 01       	movw	r8, r22
    160c:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    160e:	80 91 aa 00 	lds	r24, 0x00AA
    1612:	8f 7c       	andi	r24, 0xCF	; 207
    1614:	80 61       	ori	r24, 0x10	; 16
    1616:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    161a:	99 83       	std	Y+1, r25	; 0x01
    161c:	c7 d0       	rcall	.+398    	; 0x17ac <Pipe_WaitUntilReady>
    161e:	b8 2e       	mov	r11, r24
    1620:	99 81       	ldd	r25, Y+1	; 0x01
    1622:	88 23       	and	r24, r24
    1624:	c1 f5       	brne	.+112    	; 0x1696 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1626:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1628:	01 15       	cp	r16, r1
    162a:	11 05       	cpc	r17, r1
    162c:	39 f0       	breq	.+14     	; 0x163c <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    162e:	f8 01       	movw	r30, r16
    1630:	20 81       	ld	r18, Z
    1632:	31 81       	ldd	r19, Z+1	; 0x01
    1634:	82 1a       	sub	r8, r18
    1636:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1638:	e2 0e       	add	r14, r18
    163a:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    163c:	cc 24       	eor	r12, r12
    163e:	dd 24       	eor	r13, r13
    1640:	25 c0       	rjmp	.+74     	; 0x168c <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1642:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1646:	85 fd       	sbrc	r24, 5
    1648:	16 c0       	rjmp	.+44     	; 0x1676 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    164a:	80 91 a6 00 	lds	r24, 0x00A6
    164e:	8e 77       	andi	r24, 0x7E	; 126
    1650:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1654:	01 15       	cp	r16, r1
    1656:	11 05       	cpc	r17, r1
    1658:	51 f0       	breq	.+20     	; 0x166e <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    165a:	f8 01       	movw	r30, r16
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	8c 0d       	add	r24, r12
    1662:	9d 1d       	adc	r25, r13
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    1668:	44 e0       	ldi	r20, 0x04	; 4
    166a:	b4 2e       	mov	r11, r20
    166c:	14 c0       	rjmp	.+40     	; 0x1696 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    166e:	9e d0       	rcall	.+316    	; 0x17ac <Pipe_WaitUntilReady>
    1670:	88 23       	and	r24, r24
    1672:	61 f0       	breq	.+24     	; 0x168c <Pipe_Read_Stream_LE+0xa0>
    1674:	0f c0       	rjmp	.+30     	; 0x1694 <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1676:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    167a:	f7 01       	movw	r30, r14
    167c:	81 93       	st	Z+, r24
    167e:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1680:	08 94       	sec
    1682:	81 08       	sbc	r8, r1
    1684:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    1686:	08 94       	sec
    1688:	c1 1c       	adc	r12, r1
    168a:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    168c:	81 14       	cp	r8, r1
    168e:	91 04       	cpc	r9, r1
    1690:	c1 f6       	brne	.-80     	; 0x1642 <Pipe_Read_Stream_LE+0x56>
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1694:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1696:	8b 2d       	mov	r24, r11
    1698:	0f 90       	pop	r0
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	df 90       	pop	r13
    16a8:	cf 90       	pop	r12
    16aa:	bf 90       	pop	r11
    16ac:	9f 90       	pop	r9
    16ae:	8f 90       	pop	r8
    16b0:	08 95       	ret

000016b2 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    16b2:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    16b4:	58 2f       	mov	r21, r24
    16b6:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    16b8:	87 ff       	sbrs	r24, 7
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <Pipe_ConfigurePipe+0xe>
    16bc:	80 e1       	ldi	r24, 0x10	; 16
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <Pipe_ConfigurePipe+0x10>
    16c0:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    16c2:	57 30       	cpi	r21, 0x07	; 7
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <Pipe_ConfigurePipe+0x16>
    16c6:	59 c0       	rjmp	.+178    	; 0x177a <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    16c8:	66 23       	and	r22, r22
    16ca:	09 f4       	brne	.+2      	; 0x16ce <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    16cc:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    16ce:	4f 70       	andi	r20, 0x0F	; 15
    16d0:	62 95       	swap	r22
    16d2:	66 0f       	add	r22, r22
    16d4:	66 0f       	add	r22, r22
    16d6:	60 7c       	andi	r22, 0xC0	; 192
    16d8:	64 2b       	or	r22, r20
    16da:	68 2b       	or	r22, r24
    16dc:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    16de:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    16e0:	84 2f       	mov	r24, r20
    16e2:	8f 70       	andi	r24, 0x0F	; 15
    16e4:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    16e8:	45 17       	cp	r20, r21
    16ea:	a1 f4       	brne	.+40     	; 0x1714 <Pipe_ConfigurePipe+0x62>
    16ec:	88 e0       	ldi	r24, 0x08	; 8
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    16f4:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    16fa:	82 17       	cp	r24, r18
    16fc:	93 07       	cpc	r25, r19
    16fe:	10 f4       	brcc	.+4      	; 0x1704 <Pipe_ConfigurePipe+0x52>
    1700:	75 30       	cpi	r23, 0x05	; 5
    1702:	c1 f7       	brne	.-16     	; 0x16f4 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1704:	87 2f       	mov	r24, r23
    1706:	82 95       	swap	r24
    1708:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    170a:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    170c:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    170e:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    1710:	e0 e0       	ldi	r30, 0x00	; 0
    1712:	08 c0       	rjmp	.+16     	; 0x1724 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    1714:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    1718:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    171c:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    1720:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    1724:	81 ff       	sbrs	r24, 1
    1726:	20 c0       	rjmp	.+64     	; 0x1768 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1728:	90 91 a9 00 	lds	r25, 0x00A9
    172c:	9e 7f       	andi	r25, 0xFE	; 254
    172e:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1732:	90 91 ab 00 	lds	r25, 0x00AB
    1736:	9d 7f       	andi	r25, 0xFD	; 253
    1738:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    173c:	90 91 a9 00 	lds	r25, 0x00A9
    1740:	91 60       	ori	r25, 0x01	; 1
    1742:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    1746:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    174a:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    174e:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    1752:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    1756:	80 91 a9 00 	lds	r24, 0x00A9
    175a:	80 62       	ori	r24, 0x20	; 32
    175c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1760:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    1764:	87 ff       	sbrs	r24, 7
    1766:	09 c0       	rjmp	.+18     	; 0x177a <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1768:	4f 5f       	subi	r20, 0xFF	; 255
    176a:	47 30       	cpi	r20, 0x07	; 7
    176c:	09 f0       	breq	.+2      	; 0x1770 <Pipe_ConfigurePipe+0xbe>
    176e:	b8 cf       	rjmp	.-144    	; 0x16e0 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1770:	5f 70       	andi	r21, 0x0F	; 15
    1772:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	01 c0       	rjmp	.+2      	; 0x177c <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    177a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    177c:	0f 91       	pop	r16
    177e:	08 95       	ret

00001780 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    1780:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	98 2f       	mov	r25, r24
    1788:	9f 70       	andi	r25, 0x0F	; 15
    178a:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    178e:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1792:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1796:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    179a:	90 91 a9 00 	lds	r25, 0x00A9
    179e:	9e 7f       	andi	r25, 0xFE	; 254
    17a0:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    17a4:	8f 5f       	subi	r24, 0xFF	; 255
    17a6:	87 30       	cpi	r24, 0x07	; 7
    17a8:	71 f7       	brne	.-36     	; 0x1786 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    17aa:	08 95       	ret

000017ac <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    17ac:	80 91 a2 00 	lds	r24, 0x00A2
    17b0:	90 91 a3 00 	lds	r25, 0x00A3
}

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    17b4:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    17b6:	20 91 aa 00 	lds	r18, 0x00AA
    17ba:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    17bc:	20 31       	cpi	r18, 0x10	; 16
    17be:	29 f4       	brne	.+10     	; 0x17ca <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    17c0:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    17c4:	20 ff       	sbrs	r18, 0
    17c6:	05 c0       	rjmp	.+10     	; 0x17d2 <Pipe_WaitUntilReady+0x26>
    17c8:	18 c0       	rjmp	.+48     	; 0x17fa <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    17ca:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    17ce:	22 fd       	sbrc	r18, 2
    17d0:	14 c0       	rjmp	.+40     	; 0x17fa <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    17d2:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    17d6:	21 fd       	sbrc	r18, 1
    17d8:	12 c0       	rjmp	.+36     	; 0x17fe <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    17da:	20 91 fa 04 	lds	r18, 0x04FA
    17de:	21 30       	cpi	r18, 0x01	; 1
    17e0:	81 f0       	breq	.+32     	; 0x1802 <Pipe_WaitUntilReady+0x56>
    17e2:	20 91 a2 00 	lds	r18, 0x00A2
    17e6:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    17ea:	28 17       	cp	r18, r24
    17ec:	39 07       	cpc	r19, r25
    17ee:	19 f3       	breq	.-58     	; 0x17b6 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    17f0:	44 23       	and	r20, r20
    17f2:	49 f0       	breq	.+18     	; 0x1806 <Pipe_WaitUntilReady+0x5a>
    17f4:	41 50       	subi	r20, 0x01	; 1
    17f6:	c9 01       	movw	r24, r18
    17f8:	de cf       	rjmp	.-68     	; 0x17b6 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    1802:	82 e0       	ldi	r24, 0x02	; 2
    1804:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    1806:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    1808:	08 95       	ret

0000180a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    180a:	75 d0       	rcall	.+234    	; 0x18f6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    180c:	7c d0       	rcall	.+248    	; 0x1906 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    180e:	e0 ee       	ldi	r30, 0xE0	; 224
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	81 60       	ori	r24, 0x01	; 1
    1816:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1818:	e8 ed       	ldi	r30, 0xD8	; 216
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8f 77       	andi	r24, 0x7F	; 127
    1820:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1822:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1824:	a7 ed       	ldi	r26, 0xD7	; 215
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	8c 91       	ld	r24, X
    182a:	8e 7f       	andi	r24, 0xFE	; 254
    182c:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    182e:	80 81       	ld	r24, Z
    1830:	8f 7e       	andi	r24, 0xEF	; 239
    1832:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1834:	10 92 f1 04 	sts	0x04F1, r1
}
    1838:	08 95       	ret

0000183a <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    183a:	5d d0       	rcall	.+186    	; 0x18f6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    183c:	64 d0       	rcall	.+200    	; 0x1906 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    183e:	80 91 d8 00 	lds	r24, 0x00D8
    1842:	8f 77       	andi	r24, 0x7F	; 127
    1844:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    1848:	80 91 d8 00 	lds	r24, 0x00D8
    184c:	80 68       	ori	r24, 0x80	; 128
    184e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1852:	80 91 d8 00 	lds	r24, 0x00D8
    1856:	8f 7d       	andi	r24, 0xDF	; 223
    1858:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    185c:	80 91 d7 00 	lds	r24, 0x00D7
    1860:	8f 77       	andi	r24, 0x7F	; 127
    1862:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1866:	8c e0       	ldi	r24, 0x0C	; 12
    1868:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    186a:	8e e0       	ldi	r24, 0x0E	; 14
    186c:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    186e:	09 b4       	in	r0, 0x29	; 41
    1870:	00 fe       	sbrs	r0, 0
    1872:	fd cf       	rjmp	.-6      	; 0x186e <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	80 93 fa 04 	sts	0x04FA, r24
	USB_Host_ConfigurationNumber = 0;
    187a:	10 92 f0 04 	sts	0x04F0, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    187e:	80 e4       	ldi	r24, 0x40	; 64
    1880:	80 93 10 01 	sts	0x0110, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1884:	80 91 d8 00 	lds	r24, 0x00D8
    1888:	80 64       	ori	r24, 0x40	; 64
    188a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    188e:	80 91 dd 00 	lds	r24, 0x00DD
    1892:	81 60       	ori	r24, 0x01	; 1
    1894:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1898:	80 91 dd 00 	lds	r24, 0x00DD
    189c:	84 60       	ori	r24, 0x04	; 4
    189e:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    18a2:	80 91 d7 00 	lds	r24, 0x00D7
    18a6:	8f 7e       	andi	r24, 0xEF	; 239
    18a8:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    18ac:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    18ae:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    18b0:	80 91 de 00 	lds	r24, 0x00DE
    18b4:	81 60       	ori	r24, 0x01	; 1
    18b6:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    18ba:	80 91 de 00 	lds	r24, 0x00DE
    18be:	84 60       	ori	r24, 0x04	; 4
    18c0:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    18c4:	80 91 e0 00 	lds	r24, 0x00E0
    18c8:	8e 7f       	andi	r24, 0xFE	; 254
    18ca:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    18ce:	80 91 d8 00 	lds	r24, 0x00D8
    18d2:	80 61       	ori	r24, 0x10	; 16
    18d4:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    18d8:	08 95       	ret

000018da <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    18da:	e8 ed       	ldi	r30, 0xD8	; 216
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	8f 7e       	andi	r24, 0xEF	; 239
    18e2:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    18e4:	e7 ed       	ldi	r30, 0xD7	; 215
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	81 60       	ori	r24, 0x01	; 1
    18ec:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	80 93 f1 04 	sts	0x04F1, r24

	USB_ResetInterface();
}
    18f4:	a2 cf       	rjmp	.-188    	; 0x183a <USB_ResetInterface>

000018f6 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    18f6:	e8 ed       	ldi	r30, 0xD8	; 216
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	8c 7f       	andi	r24, 0xFC	; 252
    18fe:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1900:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1904:	08 95       	ret

00001906 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1906:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    190a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    190e:	08 95       	ret

00001910 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1910:	1f 92       	push	r1
    1912:	0f 92       	push	r0
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	0f 92       	push	r0
    1918:	0b b6       	in	r0, 0x3b	; 59
    191a:	0f 92       	push	r0
    191c:	11 24       	eor	r1, r1
    191e:	2f 93       	push	r18
    1920:	3f 93       	push	r19
    1922:	4f 93       	push	r20
    1924:	5f 93       	push	r21
    1926:	6f 93       	push	r22
    1928:	7f 93       	push	r23
    192a:	8f 93       	push	r24
    192c:	9f 93       	push	r25
    192e:	af 93       	push	r26
    1930:	bf 93       	push	r27
    1932:	ef 93       	push	r30
    1934:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1936:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    193a:	85 ff       	sbrs	r24, 5
    193c:	0a c0       	rjmp	.+20     	; 0x1952 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    193e:	80 91 a0 00 	lds	r24, 0x00A0
    1942:	85 ff       	sbrs	r24, 5
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1946:	80 91 9f 00 	lds	r24, 0x009F
    194a:	8f 7d       	andi	r24, 0xDF	; 223
    194c:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1950:	12 d1       	rcall	.+548    	; 0x1b76 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1952:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1956:	81 ff       	sbrs	r24, 1
    1958:	16 c0       	rjmp	.+44     	; 0x1986 <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    195a:	80 91 a0 00 	lds	r24, 0x00A0
    195e:	81 ff       	sbrs	r24, 1
    1960:	12 c0       	rjmp	.+36     	; 0x1986 <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1962:	80 91 9f 00 	lds	r24, 0x009F
    1966:	8d 7f       	andi	r24, 0xFD	; 253
    1968:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    196c:	80 91 9f 00 	lds	r24, 0x009F
    1970:	8e 7f       	andi	r24, 0xFE	; 254
    1972:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1976:	80 91 a0 00 	lds	r24, 0x00A0
    197a:	8d 7f       	andi	r24, 0xFD	; 253
    197c:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1980:	0e 94 c2 01 	call	0x384	; 0x384 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1984:	5a df       	rcall	.-332    	; 0x183a <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1986:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    198a:	81 ff       	sbrs	r24, 1
    198c:	17 c0       	rjmp	.+46     	; 0x19bc <__vector_10+0xac>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    198e:	80 91 de 00 	lds	r24, 0x00DE
    1992:	81 ff       	sbrs	r24, 1
    1994:	13 c0       	rjmp	.+38     	; 0x19bc <__vector_10+0xac>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1996:	80 91 df 00 	lds	r24, 0x00DF
    199a:	8d 7f       	andi	r24, 0xFD	; 253
    199c:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    19a0:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    19a2:	80 91 dd 00 	lds	r24, 0x00DD
    19a6:	81 60       	ori	r24, 0x01	; 1
    19a8:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	0e 94 4d 02 	call	0x49a	; 0x49a <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    19b2:	0e 94 c2 01 	call	0x384	; 0x384 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	80 93 fa 04 	sts	0x04FA, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    19bc:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    19c0:	80 ff       	sbrs	r24, 0
    19c2:	18 c0       	rjmp	.+48     	; 0x19f4 <__vector_10+0xe4>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    19c4:	80 91 de 00 	lds	r24, 0x00DE
    19c8:	80 ff       	sbrs	r24, 0
    19ca:	14 c0       	rjmp	.+40     	; 0x19f4 <__vector_10+0xe4>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    19cc:	80 91 df 00 	lds	r24, 0x00DF
    19d0:	8e 7f       	andi	r24, 0xFE	; 254
    19d2:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    19d6:	80 91 de 00 	lds	r24, 0x00DE
    19da:	8e 7f       	andi	r24, 0xFE	; 254
    19dc:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    19e0:	0e 94 bc 01 	call	0x378	; 0x378 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    19e4:	80 91 a0 00 	lds	r24, 0x00A0
    19e8:	82 60       	ori	r24, 0x02	; 2
    19ea:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	80 93 fa 04 	sts	0x04FA, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    19f4:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    19f8:	82 ff       	sbrs	r24, 2
    19fa:	10 c0       	rjmp	.+32     	; 0x1a1c <__vector_10+0x10c>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    19fc:	80 91 de 00 	lds	r24, 0x00DE
    1a00:	82 ff       	sbrs	r24, 2
    1a02:	0c c0       	rjmp	.+24     	; 0x1a1c <__vector_10+0x10c>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1a04:	80 91 df 00 	lds	r24, 0x00DF
    1a08:	8b 7f       	andi	r24, 0xFB	; 251
    1a0a:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	0e 94 6e 02 	call	0x4dc	; 0x4dc <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1a16:	0e 94 c2 01 	call	0x384	; 0x384 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1a1a:	0f df       	rcall	.-482    	; 0x183a <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25
    1a26:	8f 91       	pop	r24
    1a28:	7f 91       	pop	r23
    1a2a:	6f 91       	pop	r22
    1a2c:	5f 91       	pop	r21
    1a2e:	4f 91       	pop	r20
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	0f 90       	pop	r0
    1a36:	0b be       	out	0x3b, r0	; 59
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	0f 90       	pop	r0
    1a3e:	1f 90       	pop	r1
    1a40:	18 95       	reti

00001a42 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1a42:	cf 92       	push	r12
    1a44:	df 92       	push	r13
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	29 97       	sbiw	r28, 0x09	; 9
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	6b 01       	movw	r12, r22
    1a64:	8a 01       	movw	r16, r20
    1a66:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1a68:	90 e8       	ldi	r25, 0x80	; 128
    1a6a:	90 93 f2 04 	sts	0x04F2, r25
    1a6e:	96 e0       	ldi	r25, 0x06	; 6
    1a70:	90 93 f3 04 	sts	0x04F3, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1a7a:	90 93 f5 04 	sts	0x04F5, r25
    1a7e:	80 93 f4 04 	sts	0x04F4, r24
    1a82:	10 92 f7 04 	sts	0x04F7, r1
    1a86:	10 92 f6 04 	sts	0x04F6, r1
    1a8a:	89 e0       	ldi	r24, 0x09	; 9
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	90 93 f9 04 	sts	0x04F9, r25
    1a92:	80 93 f8 04 	sts	0x04F8, r24
    1a96:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	95 d0       	rcall	.+298    	; 0x1bca <USB_Host_SendControlRequest>
    1aa0:	88 23       	and	r24, r24
    1aa2:	b9 f4       	brne	.+46     	; 0x1ad2 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	f6 01       	movw	r30, r12
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1aae:	e8 16       	cp	r14, r24
    1ab0:	f9 06       	cpc	r15, r25
    1ab2:	70 f0       	brcs	.+28     	; 0x1ad0 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1ab4:	90 93 f9 04 	sts	0x04F9, r25
    1ab8:	80 93 f8 04 	sts	0x04F8, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1abc:	c8 01       	movw	r24, r16
    1abe:	85 d0       	rcall	.+266    	; 0x1bca <USB_Host_SendControlRequest>
    1ac0:	88 23       	and	r24, r24
    1ac2:	39 f4       	brne	.+14     	; 0x1ad2 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1ac4:	f8 01       	movw	r30, r16
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	92 30       	cpi	r25, 0x02	; 2
    1aca:	19 f0       	breq	.+6      	; 0x1ad2 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1acc:	86 e0       	ldi	r24, 0x06	; 6
    1ace:	01 c0       	rjmp	.+2      	; 0x1ad2 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1ad0:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1ad2:	29 96       	adiw	r28, 0x09	; 9
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	ff 90       	pop	r15
    1ae8:	ef 90       	pop	r14
    1aea:	df 90       	pop	r13
    1aec:	cf 90       	pop	r12
    1aee:	08 95       	ret

00001af0 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1af0:	af 92       	push	r10
    1af2:	bf 92       	push	r11
    1af4:	cf 92       	push	r12
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	8c 01       	movw	r16, r24
    1b06:	eb 01       	movw	r28, r22
    1b08:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1b0a:	23 c0       	rjmp	.+70     	; 0x1b52 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1b0c:	e8 81       	ld	r30, Y
    1b0e:	f9 81       	ldd	r31, Y+1	; 0x01
    1b10:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1b12:	20 81       	ld	r18, Z
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	c7 01       	movw	r24, r14
    1b18:	2e 15       	cp	r18, r14
    1b1a:	3f 05       	cpc	r19, r15
    1b1c:	08 f4       	brcc	.+2      	; 0x1b20 <USB_GetNextDescriptorComp+0x30>
    1b1e:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1b20:	e8 0f       	add	r30, r24
    1b22:	f9 1f       	adc	r31, r25
    1b24:	f9 83       	std	Y+1, r31	; 0x01
    1b26:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1b28:	f8 01       	movw	r30, r16
    1b2a:	20 81       	ld	r18, Z
    1b2c:	31 81       	ldd	r19, Z+1	; 0x01
    1b2e:	28 1b       	sub	r18, r24
    1b30:	39 0b       	sbc	r19, r25
    1b32:	31 83       	std	Z+1, r19	; 0x01
    1b34:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1b36:	88 81       	ld	r24, Y
    1b38:	99 81       	ldd	r25, Y+1	; 0x01
    1b3a:	f6 01       	movw	r30, r12
    1b3c:	09 95       	icall
    1b3e:	82 30       	cpi	r24, 0x02	; 2
    1b40:	41 f0       	breq	.+16     	; 0x1b52 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	69 f4       	brne	.+26     	; 0x1b60 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    1b46:	a8 82       	st	Y, r10
    1b48:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	f1 82       	std	Z+1, r15	; 0x01
    1b4e:	e0 82       	st	Z, r14
    1b50:	07 c0       	rjmp	.+14     	; 0x1b60 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1b52:	f8 01       	movw	r30, r16
    1b54:	e0 80       	ld	r14, Z
    1b56:	f1 80       	ldd	r15, Z+1	; 0x01
    1b58:	e1 14       	cp	r14, r1
    1b5a:	f1 04       	cpc	r15, r1
    1b5c:	b9 f6       	brne	.-82     	; 0x1b0c <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
}
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	df 90       	pop	r13
    1b6e:	cf 90       	pop	r12
    1b70:	bf 90       	pop	r11
    1b72:	af 90       	pop	r10
    1b74:	08 95       	ret

00001b76 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1b76:	08 95       	ret

00001b78 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1b80:	c8 ee       	ldi	r28, 0xE8	; 232
    1b82:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1b84:	07 c0       	rjmp	.+14     	; 0x1b94 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	b0 db       	rcall	.-2208   	; 0x12ea <USB_Host_WaitMS>
    1b8a:	88 23       	and	r24, r24
    1b8c:	d1 f4       	brne	.+52     	; 0x1bc2 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1b8e:	20 97       	sbiw	r28, 0x00	; 0
    1b90:	b9 f0       	breq	.+46     	; 0x1bc0 <USB_Host_WaitForIOS+0x48>
    1b92:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1b94:	11 23       	and	r17, r17
    1b96:	29 f4       	brne	.+10     	; 0x1ba2 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1b98:	80 91 a6 00 	lds	r24, 0x00A6
    1b9c:	83 ff       	sbrs	r24, 3
    1b9e:	f3 cf       	rjmp	.-26     	; 0x1b86 <USB_Host_WaitForIOS+0xe>
    1ba0:	0d c0       	rjmp	.+26     	; 0x1bbc <USB_Host_WaitForIOS+0x44>
    1ba2:	11 30       	cpi	r17, 0x01	; 1
    1ba4:	29 f4       	brne	.+10     	; 0x1bb0 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1ba6:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1baa:	80 ff       	sbrs	r24, 0
    1bac:	ec cf       	rjmp	.-40     	; 0x1b86 <USB_Host_WaitForIOS+0xe>
    1bae:	06 c0       	rjmp	.+12     	; 0x1bbc <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1bb0:	12 30       	cpi	r17, 0x02	; 2
    1bb2:	49 f7       	brne	.-46     	; 0x1b86 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1bb4:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1bb8:	82 ff       	sbrs	r24, 2
    1bba:	e5 cf       	rjmp	.-54     	; 0x1b86 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	01 c0       	rjmp	.+2      	; 0x1bc2 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1bc0:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	08 95       	ret

00001bca <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1bca:	ef 92       	push	r14
    1bcc:	ff 92       	push	r15
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1bd8:	e0 90 9e 00 	lds	r14, 0x009E
    1bdc:	ff 24       	eor	r15, r15
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	e8 22       	and	r14, r24
    1be2:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1be4:	c0 91 f8 04 	lds	r28, 0x04F8
    1be8:	d0 91 f9 04 	lds	r29, 0x04F9
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1bec:	80 91 9e 00 	lds	r24, 0x009E
    1bf0:	81 60       	ori	r24, 0x01	; 1
    1bf2:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	78 db       	rcall	.-2320   	; 0x12ea <USB_Host_WaitMS>
    1bfa:	88 23       	and	r24, r24
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <USB_Host_SendControlRequest+0x36>
    1bfe:	cb c0       	rjmp	.+406    	; 0x1d96 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c00:	80 91 aa 00 	lds	r24, 0x00AA
    1c04:	8f 7c       	andi	r24, 0xCF	; 207
    1c06:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1c0a:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1c0e:	80 91 a6 00 	lds	r24, 0x00A6
    1c12:	8f 7e       	andi	r24, 0xEF	; 239
    1c14:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c18:	80 91 a9 00 	lds	r24, 0x00A9
    1c1c:	8f 7b       	andi	r24, 0xBF	; 191
    1c1e:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1c22:	e2 ef       	ldi	r30, 0xF2	; 242
    1c24:	f4 e0       	ldi	r31, 0x04	; 4

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1c26:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1c28:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1c2c:	84 e0       	ldi	r24, 0x04	; 4
    1c2e:	ea 3f       	cpi	r30, 0xFA	; 250
    1c30:	f8 07       	cpc	r31, r24
    1c32:	c9 f7       	brne	.-14     	; 0x1c26 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1c34:	80 91 a6 00 	lds	r24, 0x00A6
    1c38:	87 77       	andi	r24, 0x77	; 119
    1c3a:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	9b df       	rcall	.-202    	; 0x1b78 <USB_Host_WaitForIOS>
    1c42:	88 23       	and	r24, r24
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <USB_Host_SendControlRequest+0x7e>
    1c46:	a7 c0       	rjmp	.+334    	; 0x1d96 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c48:	80 91 a9 00 	lds	r24, 0x00A9
    1c4c:	80 64       	ori	r24, 0x40	; 64
    1c4e:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	4a db       	rcall	.-2412   	; 0x12ea <USB_Host_WaitMS>
    1c56:	88 23       	and	r24, r24
    1c58:	09 f0       	breq	.+2      	; 0x1c5c <USB_Host_SendControlRequest+0x92>
    1c5a:	9d c0       	rjmp	.+314    	; 0x1d96 <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1c5c:	80 91 f2 04 	lds	r24, 0x04F2
    1c60:	87 ff       	sbrs	r24, 7
    1c62:	4f c0       	rjmp	.+158    	; 0x1d02 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c64:	80 91 aa 00 	lds	r24, 0x00AA
    1c68:	8f 7c       	andi	r24, 0xCF	; 207
    1c6a:	80 61       	ori	r24, 0x10	; 16
    1c6c:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1c70:	01 15       	cp	r16, r1
    1c72:	11 05       	cpc	r17, r1
    1c74:	61 f5       	brne	.+88     	; 0x1cce <USB_Host_SendControlRequest+0x104>
    1c76:	2d c0       	rjmp	.+90     	; 0x1cd2 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c78:	80 91 a9 00 	lds	r24, 0x00A9
    1c7c:	8f 7b       	andi	r24, 0xBF	; 191
    1c7e:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	79 df       	rcall	.-270    	; 0x1b78 <USB_Host_WaitForIOS>
    1c86:	88 23       	and	r24, r24
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <USB_Host_SendControlRequest+0xc2>
    1c8a:	85 c0       	rjmp	.+266    	; 0x1d96 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c8c:	80 91 f6 00 	lds	r24, 0x00F6
    1c90:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	49 f4       	brne	.+18     	; 0x1caa <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1c98:	c0 e0       	ldi	r28, 0x00	; 0
    1c9a:	d0 e0       	ldi	r29, 0x00	; 0
    1c9c:	06 c0       	rjmp	.+12     	; 0x1caa <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1c9e:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1ca2:	f8 01       	movw	r30, r16
    1ca4:	81 93       	st	Z+, r24
    1ca6:	8f 01       	movw	r16, r30
					DataLen--;
    1ca8:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1caa:	80 91 f6 00 	lds	r24, 0x00F6
    1cae:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	11 f0       	breq	.+4      	; 0x1cba <USB_Host_SendControlRequest+0xf0>
    1cb6:	20 97       	sbiw	r28, 0x00	; 0
    1cb8:	91 f7       	brne	.-28     	; 0x1c9e <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1cba:	80 91 a9 00 	lds	r24, 0x00A9
    1cbe:	80 64       	ori	r24, 0x40	; 64
    1cc0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1cc4:	80 91 a6 00 	lds	r24, 0x00A6
    1cc8:	8e 77       	andi	r24, 0x7E	; 126
    1cca:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1cce:	20 97       	sbiw	r28, 0x00	; 0
    1cd0:	99 f6       	brne	.-90     	; 0x1c78 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1cd2:	80 91 aa 00 	lds	r24, 0x00AA
    1cd6:	8f 7c       	andi	r24, 0xCF	; 207
    1cd8:	80 62       	ori	r24, 0x20	; 32
    1cda:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1cde:	80 91 a9 00 	lds	r24, 0x00A9
    1ce2:	8f 7b       	andi	r24, 0xBF	; 191
    1ce4:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1ce8:	82 e0       	ldi	r24, 0x02	; 2
    1cea:	46 df       	rcall	.-372    	; 0x1b78 <USB_Host_WaitForIOS>
    1cec:	88 23       	and	r24, r24
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <USB_Host_SendControlRequest+0x128>
    1cf0:	52 c0       	rjmp	.+164    	; 0x1d96 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1cf2:	80 91 a6 00 	lds	r24, 0x00A6
    1cf6:	8b 77       	andi	r24, 0x7B	; 123
    1cf8:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	3c df       	rcall	.-392    	; 0x1b78 <USB_Host_WaitForIOS>
    1d00:	4a c0       	rjmp	.+148    	; 0x1d96 <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1d02:	01 15       	cp	r16, r1
    1d04:	11 05       	cpc	r17, r1
    1d06:	99 f1       	breq	.+102    	; 0x1d6e <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1d08:	80 91 aa 00 	lds	r24, 0x00AA
    1d0c:	8f 7c       	andi	r24, 0xCF	; 207
    1d0e:	80 62       	ori	r24, 0x20	; 32
    1d10:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d14:	80 91 a9 00 	lds	r24, 0x00A9
    1d18:	8f 7b       	andi	r24, 0xBF	; 191
    1d1a:	80 93 a9 00 	sts	0x00A9, r24
    1d1e:	1c c0       	rjmp	.+56     	; 0x1d58 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1d20:	82 e0       	ldi	r24, 0x02	; 2
    1d22:	2a df       	rcall	.-428    	; 0x1b78 <USB_Host_WaitForIOS>
    1d24:	88 23       	and	r24, r24
    1d26:	b9 f5       	brne	.+110    	; 0x1d96 <USB_Host_SendControlRequest+0x1cc>
    1d28:	f8 01       	movw	r30, r16
    1d2a:	06 c0       	rjmp	.+12     	; 0x1d38 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1d2c:	81 91       	ld	r24, Z+
    1d2e:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1d30:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1d34:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1d36:	59 f0       	breq	.+22     	; 0x1d4e <USB_Host_SendControlRequest+0x184>
    1d38:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1d3a:	20 91 f6 00 	lds	r18, 0x00F6
    1d3e:	30 91 f7 00 	lds	r19, 0x00F7
    1d42:	80 91 10 01 	lds	r24, 0x0110
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	28 17       	cp	r18, r24
    1d4a:	39 07       	cpc	r19, r25
    1d4c:	78 f3       	brcs	.-34     	; 0x1d2c <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1d4e:	80 91 a6 00 	lds	r24, 0x00A6
    1d52:	8b 77       	andi	r24, 0x7B	; 123
    1d54:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1d58:	20 97       	sbiw	r28, 0x00	; 0
    1d5a:	11 f7       	brne	.-60     	; 0x1d20 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	0c df       	rcall	.-488    	; 0x1b78 <USB_Host_WaitForIOS>
    1d60:	88 23       	and	r24, r24
    1d62:	c9 f4       	brne	.+50     	; 0x1d96 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d64:	80 91 a9 00 	lds	r24, 0x00A9
    1d68:	80 64       	ori	r24, 0x40	; 64
    1d6a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1d6e:	80 91 aa 00 	lds	r24, 0x00AA
    1d72:	8f 7c       	andi	r24, 0xCF	; 207
    1d74:	80 61       	ori	r24, 0x10	; 16
    1d76:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d7a:	80 91 a9 00 	lds	r24, 0x00A9
    1d7e:	8f 7b       	andi	r24, 0xBF	; 191
    1d80:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	f8 de       	rcall	.-528    	; 0x1b78 <USB_Host_WaitForIOS>
    1d88:	88 23       	and	r24, r24
    1d8a:	29 f4       	brne	.+10     	; 0x1d96 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1d8c:	90 91 a6 00 	lds	r25, 0x00A6
    1d90:	9e 77       	andi	r25, 0x7E	; 126
    1d92:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d96:	90 91 a9 00 	lds	r25, 0x00A9
    1d9a:	90 64       	ori	r25, 0x40	; 64
    1d9c:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1da0:	e1 14       	cp	r14, r1
    1da2:	f1 04       	cpc	r15, r1
    1da4:	29 f4       	brne	.+10     	; 0x1db0 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1da6:	90 91 9e 00 	lds	r25, 0x009E
    1daa:	9e 7f       	andi	r25, 0xFE	; 254
    1dac:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1db0:	91 e0       	ldi	r25, 0x01	; 1
    1db2:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1db6:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	08 95       	ret

00001dc8 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1dc8:	1f 93       	push	r17
    1dca:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1dcc:	10 92 f2 04 	sts	0x04F2, r1
    1dd0:	89 e0       	ldi	r24, 0x09	; 9
    1dd2:	80 93 f3 04 	sts	0x04F3, r24
    1dd6:	10 93 f4 04 	sts	0x04F4, r17
    1dda:	10 92 f5 04 	sts	0x04F5, r1
    1dde:	10 92 f7 04 	sts	0x04F7, r1
    1de2:	10 92 f6 04 	sts	0x04F6, r1
    1de6:	10 92 f9 04 	sts	0x04F9, r1
    1dea:	10 92 f8 04 	sts	0x04F8, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1dee:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	e9 de       	rcall	.-558    	; 0x1bca <USB_Host_SendControlRequest>
    1df8:	88 23       	and	r24, r24
    1dfa:	49 f4       	brne	.+18     	; 0x1e0e <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1dfc:	10 93 f0 04 	sts	0x04F0, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1e00:	11 23       	and	r17, r17
    1e02:	11 f0       	breq	.+4      	; 0x1e08 <USB_Host_SetDeviceConfiguration+0x40>
    1e04:	9b e0       	ldi	r25, 0x0B	; 11
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <USB_Host_SetDeviceConfiguration+0x42>
    1e08:	9a e0       	ldi	r25, 0x0A	; 10
    1e0a:	90 93 fa 04 	sts	0x04FA, r25
	}

	return ErrorCode;
}
    1e0e:	1f 91       	pop	r17
    1e10:	08 95       	ret

00001e12 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1e12:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1e14:	10 91 a7 00 	lds	r17, 0x00A7
    1e18:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1e1a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1e1e:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1e22:	b8 da       	rcall	.-2704   	; 0x1394 <USB_Host_ProcessNextHostState>
    1e24:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1e28:	1f 91       	pop	r17
    1e2a:	08 95       	ret

00001e2c <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1e2c:	90 91 c8 00 	lds	r25, 0x00C8
    1e30:	95 ff       	sbrs	r25, 5
    1e32:	fc cf       	rjmp	.-8      	; 0x1e2c <Serial_putchar>
				UDR1 = DataByte;
    1e34:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	08 95       	ret

00001e3e <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e3e:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e42:	87 ff       	sbrs	r24, 7
    1e44:	08 c0       	rjmp	.+16     	; 0x1e56 <Serial_getchar+0x18>
    1e46:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1e4a:	87 ff       	sbrs	r24, 7
    1e4c:	07 c0       	rjmp	.+14     	; 0x1e5c <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1e4e:	20 91 ce 00 	lds	r18, 0x00CE
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	05 c0       	rjmp	.+10     	; 0x1e60 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    1e56:	2e ef       	ldi	r18, 0xFE	; 254
    1e58:	3f ef       	ldi	r19, 0xFF	; 255
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1e5c:	2f ef       	ldi	r18, 0xFF	; 255
    1e5e:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1e60:	c9 01       	movw	r24, r18
    1e62:	08 95       	ret

00001e64 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1e64:	fc 01       	movw	r30, r24
	if (!(Stream))
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	51 f4       	brne	.+20     	; 0x1e7e <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1e6a:	eb ef       	ldi	r30, 0xFB	; 251
    1e6c:	f4 e0       	ldi	r31, 0x04	; 4
    1e6e:	f0 93 0a 05 	sts	0x050A, r31
    1e72:	e0 93 09 05 	sts	0x0509, r30
		stdout = Stream;
    1e76:	f0 93 0c 05 	sts	0x050C, r31
    1e7a:	e0 93 0b 05 	sts	0x050B, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1e7e:	8e e0       	ldi	r24, 0x0E	; 14
    1e80:	df 01       	movw	r26, r30
    1e82:	1d 92       	st	X+, r1
    1e84:	8a 95       	dec	r24
    1e86:	e9 f7       	brne	.-6      	; 0x1e82 <Serial_CreateStream+0x1e>
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	83 83       	std	Z+3, r24	; 0x03
    1e8c:	86 e1       	ldi	r24, 0x16	; 22
    1e8e:	9f e0       	ldi	r25, 0x0F	; 15
    1e90:	91 87       	std	Z+9, r25	; 0x09
    1e92:	80 87       	std	Z+8, r24	; 0x08
    1e94:	8f e1       	ldi	r24, 0x1F	; 31
    1e96:	9f e0       	ldi	r25, 0x0F	; 15
    1e98:	93 87       	std	Z+11, r25	; 0x0b
    1e9a:	82 87       	std	Z+10, r24	; 0x0a
}
    1e9c:	08 95       	ret

00001e9e <printf_P>:
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	35 96       	adiw	r30, 0x05	; 5
    1eaa:	61 91       	ld	r22, Z+
    1eac:	71 91       	ld	r23, Z+
    1eae:	80 91 0b 05 	lds	r24, 0x050B
    1eb2:	90 91 0c 05 	lds	r25, 0x050C
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	13 96       	adiw	r26, 0x03	; 3
    1eba:	2c 91       	ld	r18, X
    1ebc:	13 97       	sbiw	r26, 0x03	; 3
    1ebe:	28 60       	ori	r18, 0x08	; 8
    1ec0:	13 96       	adiw	r26, 0x03	; 3
    1ec2:	2c 93       	st	X, r18
    1ec4:	af 01       	movw	r20, r30
    1ec6:	42 d0       	rcall	.+132    	; 0x1f4c <vfprintf>
    1ec8:	e0 91 0b 05 	lds	r30, 0x050B
    1ecc:	f0 91 0c 05 	lds	r31, 0x050C
    1ed0:	23 81       	ldd	r18, Z+3	; 0x03
    1ed2:	27 7f       	andi	r18, 0xF7	; 247
    1ed4:	23 83       	std	Z+3, r18	; 0x03
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <puts_P>:
    1edc:	ef 92       	push	r14
    1ede:	ff 92       	push	r15
    1ee0:	0f 93       	push	r16
    1ee2:	1f 93       	push	r17
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	8c 01       	movw	r16, r24
    1eea:	e0 91 0b 05 	lds	r30, 0x050B
    1eee:	f0 91 0c 05 	lds	r31, 0x050C
    1ef2:	83 81       	ldd	r24, Z+3	; 0x03
    1ef4:	81 ff       	sbrs	r24, 1
    1ef6:	20 c0       	rjmp	.+64     	; 0x1f38 <puts_P+0x5c>
    1ef8:	c0 e0       	ldi	r28, 0x00	; 0
    1efa:	d0 e0       	ldi	r29, 0x00	; 0
    1efc:	0c c0       	rjmp	.+24     	; 0x1f16 <puts_P+0x3a>
    1efe:	db 01       	movw	r26, r22
    1f00:	18 96       	adiw	r26, 0x08	; 8
    1f02:	ed 91       	ld	r30, X+
    1f04:	fc 91       	ld	r31, X
    1f06:	19 97       	sbiw	r26, 0x09	; 9
    1f08:	09 95       	icall
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	11 f0       	breq	.+4      	; 0x1f12 <puts_P+0x36>
    1f0e:	cf ef       	ldi	r28, 0xFF	; 255
    1f10:	df ef       	ldi	r29, 0xFF	; 255
    1f12:	0f 5f       	subi	r16, 0xFF	; 255
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	f8 01       	movw	r30, r16
    1f18:	84 91       	lpm	r24, Z+
    1f1a:	60 91 0b 05 	lds	r22, 0x050B
    1f1e:	70 91 0c 05 	lds	r23, 0x050C
    1f22:	88 23       	and	r24, r24
    1f24:	61 f7       	brne	.-40     	; 0x1efe <puts_P+0x22>
    1f26:	db 01       	movw	r26, r22
    1f28:	18 96       	adiw	r26, 0x08	; 8
    1f2a:	ed 91       	ld	r30, X+
    1f2c:	fc 91       	ld	r31, X
    1f2e:	19 97       	sbiw	r26, 0x09	; 9
    1f30:	8a e0       	ldi	r24, 0x0A	; 10
    1f32:	09 95       	icall
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	11 f0       	breq	.+4      	; 0x1f3c <puts_P+0x60>
    1f38:	cf ef       	ldi	r28, 0xFF	; 255
    1f3a:	df ef       	ldi	r29, 0xFF	; 255
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	ff 90       	pop	r15
    1f48:	ef 90       	pop	r14
    1f4a:	08 95       	ret

00001f4c <vfprintf>:
    1f4c:	2f 92       	push	r2
    1f4e:	3f 92       	push	r3
    1f50:	4f 92       	push	r4
    1f52:	5f 92       	push	r5
    1f54:	6f 92       	push	r6
    1f56:	7f 92       	push	r7
    1f58:	8f 92       	push	r8
    1f5a:	9f 92       	push	r9
    1f5c:	af 92       	push	r10
    1f5e:	bf 92       	push	r11
    1f60:	cf 92       	push	r12
    1f62:	df 92       	push	r13
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	2c 97       	sbiw	r28, 0x0c	; 12
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	6c 01       	movw	r12, r24
    1f82:	1b 01       	movw	r2, r22
    1f84:	8a 01       	movw	r16, r20
    1f86:	fc 01       	movw	r30, r24
    1f88:	17 82       	std	Z+7, r1	; 0x07
    1f8a:	16 82       	std	Z+6, r1	; 0x06
    1f8c:	83 81       	ldd	r24, Z+3	; 0x03
    1f8e:	81 ff       	sbrs	r24, 1
    1f90:	c4 c1       	rjmp	.+904    	; 0x231a <__stack+0x21b>
    1f92:	2e 01       	movw	r4, r28
    1f94:	08 94       	sec
    1f96:	41 1c       	adc	r4, r1
    1f98:	51 1c       	adc	r5, r1
    1f9a:	f6 01       	movw	r30, r12
    1f9c:	93 81       	ldd	r25, Z+3	; 0x03
    1f9e:	f1 01       	movw	r30, r2
    1fa0:	93 fd       	sbrc	r25, 3
    1fa2:	85 91       	lpm	r24, Z+
    1fa4:	93 ff       	sbrs	r25, 3
    1fa6:	81 91       	ld	r24, Z+
    1fa8:	1f 01       	movw	r2, r30
    1faa:	88 23       	and	r24, r24
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <vfprintf+0x64>
    1fae:	b1 c1       	rjmp	.+866    	; 0x2312 <__stack+0x213>
    1fb0:	85 32       	cpi	r24, 0x25	; 37
    1fb2:	39 f4       	brne	.+14     	; 0x1fc2 <vfprintf+0x76>
    1fb4:	93 fd       	sbrc	r25, 3
    1fb6:	85 91       	lpm	r24, Z+
    1fb8:	93 ff       	sbrs	r25, 3
    1fba:	81 91       	ld	r24, Z+
    1fbc:	1f 01       	movw	r2, r30
    1fbe:	85 32       	cpi	r24, 0x25	; 37
    1fc0:	21 f4       	brne	.+8      	; 0x1fca <vfprintf+0x7e>
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	b6 01       	movw	r22, r12
    1fc6:	db d1       	rcall	.+950    	; 0x237e <fputc>
    1fc8:	e8 cf       	rjmp	.-48     	; 0x1f9a <vfprintf+0x4e>
    1fca:	ee 24       	eor	r14, r14
    1fcc:	ff 24       	eor	r15, r15
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	20 32       	cpi	r18, 0x20	; 32
    1fd2:	b0 f4       	brcc	.+44     	; 0x2000 <vfprintf+0xb4>
    1fd4:	8b 32       	cpi	r24, 0x2B	; 43
    1fd6:	69 f0       	breq	.+26     	; 0x1ff2 <vfprintf+0xa6>
    1fd8:	8c 32       	cpi	r24, 0x2C	; 44
    1fda:	28 f4       	brcc	.+10     	; 0x1fe6 <vfprintf+0x9a>
    1fdc:	80 32       	cpi	r24, 0x20	; 32
    1fde:	51 f0       	breq	.+20     	; 0x1ff4 <vfprintf+0xa8>
    1fe0:	83 32       	cpi	r24, 0x23	; 35
    1fe2:	71 f4       	brne	.+28     	; 0x2000 <vfprintf+0xb4>
    1fe4:	0b c0       	rjmp	.+22     	; 0x1ffc <vfprintf+0xb0>
    1fe6:	8d 32       	cpi	r24, 0x2D	; 45
    1fe8:	39 f0       	breq	.+14     	; 0x1ff8 <vfprintf+0xac>
    1fea:	80 33       	cpi	r24, 0x30	; 48
    1fec:	49 f4       	brne	.+18     	; 0x2000 <vfprintf+0xb4>
    1fee:	21 60       	ori	r18, 0x01	; 1
    1ff0:	2c c0       	rjmp	.+88     	; 0x204a <vfprintf+0xfe>
    1ff2:	22 60       	ori	r18, 0x02	; 2
    1ff4:	24 60       	ori	r18, 0x04	; 4
    1ff6:	29 c0       	rjmp	.+82     	; 0x204a <vfprintf+0xfe>
    1ff8:	28 60       	ori	r18, 0x08	; 8
    1ffa:	27 c0       	rjmp	.+78     	; 0x204a <vfprintf+0xfe>
    1ffc:	20 61       	ori	r18, 0x10	; 16
    1ffe:	25 c0       	rjmp	.+74     	; 0x204a <vfprintf+0xfe>
    2000:	27 fd       	sbrc	r18, 7
    2002:	2c c0       	rjmp	.+88     	; 0x205c <vfprintf+0x110>
    2004:	38 2f       	mov	r19, r24
    2006:	30 53       	subi	r19, 0x30	; 48
    2008:	3a 30       	cpi	r19, 0x0A	; 10
    200a:	98 f4       	brcc	.+38     	; 0x2032 <vfprintf+0xe6>
    200c:	26 ff       	sbrs	r18, 6
    200e:	08 c0       	rjmp	.+16     	; 0x2020 <vfprintf+0xd4>
    2010:	8e 2d       	mov	r24, r14
    2012:	88 0f       	add	r24, r24
    2014:	e8 2e       	mov	r14, r24
    2016:	ee 0c       	add	r14, r14
    2018:	ee 0c       	add	r14, r14
    201a:	e8 0e       	add	r14, r24
    201c:	e3 0e       	add	r14, r19
    201e:	15 c0       	rjmp	.+42     	; 0x204a <vfprintf+0xfe>
    2020:	8f 2d       	mov	r24, r15
    2022:	88 0f       	add	r24, r24
    2024:	f8 2e       	mov	r15, r24
    2026:	ff 0c       	add	r15, r15
    2028:	ff 0c       	add	r15, r15
    202a:	f8 0e       	add	r15, r24
    202c:	f3 0e       	add	r15, r19
    202e:	20 62       	ori	r18, 0x20	; 32
    2030:	0c c0       	rjmp	.+24     	; 0x204a <vfprintf+0xfe>
    2032:	8e 32       	cpi	r24, 0x2E	; 46
    2034:	21 f4       	brne	.+8      	; 0x203e <vfprintf+0xf2>
    2036:	26 fd       	sbrc	r18, 6
    2038:	6c c1       	rjmp	.+728    	; 0x2312 <__stack+0x213>
    203a:	20 64       	ori	r18, 0x40	; 64
    203c:	06 c0       	rjmp	.+12     	; 0x204a <vfprintf+0xfe>
    203e:	8c 36       	cpi	r24, 0x6C	; 108
    2040:	11 f4       	brne	.+4      	; 0x2046 <vfprintf+0xfa>
    2042:	20 68       	ori	r18, 0x80	; 128
    2044:	02 c0       	rjmp	.+4      	; 0x204a <vfprintf+0xfe>
    2046:	88 36       	cpi	r24, 0x68	; 104
    2048:	49 f4       	brne	.+18     	; 0x205c <vfprintf+0x110>
    204a:	f1 01       	movw	r30, r2
    204c:	93 fd       	sbrc	r25, 3
    204e:	85 91       	lpm	r24, Z+
    2050:	93 ff       	sbrs	r25, 3
    2052:	81 91       	ld	r24, Z+
    2054:	1f 01       	movw	r2, r30
    2056:	88 23       	and	r24, r24
    2058:	09 f0       	breq	.+2      	; 0x205c <vfprintf+0x110>
    205a:	ba cf       	rjmp	.-140    	; 0x1fd0 <vfprintf+0x84>
    205c:	98 2f       	mov	r25, r24
    205e:	95 54       	subi	r25, 0x45	; 69
    2060:	93 30       	cpi	r25, 0x03	; 3
    2062:	18 f0       	brcs	.+6      	; 0x206a <vfprintf+0x11e>
    2064:	90 52       	subi	r25, 0x20	; 32
    2066:	93 30       	cpi	r25, 0x03	; 3
    2068:	28 f4       	brcc	.+10     	; 0x2074 <vfprintf+0x128>
    206a:	0c 5f       	subi	r16, 0xFC	; 252
    206c:	1f 4f       	sbci	r17, 0xFF	; 255
    206e:	ff e3       	ldi	r31, 0x3F	; 63
    2070:	f9 83       	std	Y+1, r31	; 0x01
    2072:	0d c0       	rjmp	.+26     	; 0x208e <vfprintf+0x142>
    2074:	83 36       	cpi	r24, 0x63	; 99
    2076:	31 f0       	breq	.+12     	; 0x2084 <vfprintf+0x138>
    2078:	83 37       	cpi	r24, 0x73	; 115
    207a:	71 f0       	breq	.+28     	; 0x2098 <vfprintf+0x14c>
    207c:	83 35       	cpi	r24, 0x53	; 83
    207e:	09 f0       	breq	.+2      	; 0x2082 <vfprintf+0x136>
    2080:	5c c0       	rjmp	.+184    	; 0x213a <__stack+0x3b>
    2082:	21 c0       	rjmp	.+66     	; 0x20c6 <vfprintf+0x17a>
    2084:	f8 01       	movw	r30, r16
    2086:	80 81       	ld	r24, Z
    2088:	89 83       	std	Y+1, r24	; 0x01
    208a:	0e 5f       	subi	r16, 0xFE	; 254
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	42 01       	movw	r8, r4
    2090:	71 e0       	ldi	r23, 0x01	; 1
    2092:	a7 2e       	mov	r10, r23
    2094:	b1 2c       	mov	r11, r1
    2096:	15 c0       	rjmp	.+42     	; 0x20c2 <vfprintf+0x176>
    2098:	62 e0       	ldi	r22, 0x02	; 2
    209a:	66 2e       	mov	r6, r22
    209c:	71 2c       	mov	r7, r1
    209e:	60 0e       	add	r6, r16
    20a0:	71 1e       	adc	r7, r17
    20a2:	f8 01       	movw	r30, r16
    20a4:	80 80       	ld	r8, Z
    20a6:	91 80       	ldd	r9, Z+1	; 0x01
    20a8:	26 ff       	sbrs	r18, 6
    20aa:	03 c0       	rjmp	.+6      	; 0x20b2 <vfprintf+0x166>
    20ac:	6e 2d       	mov	r22, r14
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <vfprintf+0x16a>
    20b2:	6f ef       	ldi	r22, 0xFF	; 255
    20b4:	7f ef       	ldi	r23, 0xFF	; 255
    20b6:	c4 01       	movw	r24, r8
    20b8:	2c 87       	std	Y+12, r18	; 0x0c
    20ba:	56 d1       	rcall	.+684    	; 0x2368 <strnlen>
    20bc:	5c 01       	movw	r10, r24
    20be:	83 01       	movw	r16, r6
    20c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    20c2:	2f 77       	andi	r18, 0x7F	; 127
    20c4:	16 c0       	rjmp	.+44     	; 0x20f2 <vfprintf+0x1a6>
    20c6:	52 e0       	ldi	r21, 0x02	; 2
    20c8:	65 2e       	mov	r6, r21
    20ca:	71 2c       	mov	r7, r1
    20cc:	60 0e       	add	r6, r16
    20ce:	71 1e       	adc	r7, r17
    20d0:	f8 01       	movw	r30, r16
    20d2:	80 80       	ld	r8, Z
    20d4:	91 80       	ldd	r9, Z+1	; 0x01
    20d6:	26 ff       	sbrs	r18, 6
    20d8:	03 c0       	rjmp	.+6      	; 0x20e0 <vfprintf+0x194>
    20da:	6e 2d       	mov	r22, r14
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <vfprintf+0x198>
    20e0:	6f ef       	ldi	r22, 0xFF	; 255
    20e2:	7f ef       	ldi	r23, 0xFF	; 255
    20e4:	c4 01       	movw	r24, r8
    20e6:	2c 87       	std	Y+12, r18	; 0x0c
    20e8:	34 d1       	rcall	.+616    	; 0x2352 <strnlen_P>
    20ea:	5c 01       	movw	r10, r24
    20ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    20ee:	20 68       	ori	r18, 0x80	; 128
    20f0:	83 01       	movw	r16, r6
    20f2:	23 fd       	sbrc	r18, 3
    20f4:	1e c0       	rjmp	.+60     	; 0x2132 <__stack+0x33>
    20f6:	07 c0       	rjmp	.+14     	; 0x2106 <__stack+0x7>
    20f8:	80 e2       	ldi	r24, 0x20	; 32
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	b6 01       	movw	r22, r12
    20fe:	2c 87       	std	Y+12, r18	; 0x0c
    2100:	3e d1       	rcall	.+636    	; 0x237e <fputc>
    2102:	fa 94       	dec	r15
    2104:	2c 85       	ldd	r18, Y+12	; 0x0c
    2106:	8f 2d       	mov	r24, r15
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a8 16       	cp	r10, r24
    210c:	b9 06       	cpc	r11, r25
    210e:	a0 f3       	brcs	.-24     	; 0x20f8 <vfprintf+0x1ac>
    2110:	10 c0       	rjmp	.+32     	; 0x2132 <__stack+0x33>
    2112:	f4 01       	movw	r30, r8
    2114:	27 fd       	sbrc	r18, 7
    2116:	85 91       	lpm	r24, Z+
    2118:	27 ff       	sbrs	r18, 7
    211a:	81 91       	ld	r24, Z+
    211c:	4f 01       	movw	r8, r30
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	b6 01       	movw	r22, r12
    2122:	2c 87       	std	Y+12, r18	; 0x0c
    2124:	2c d1       	rcall	.+600    	; 0x237e <fputc>
    2126:	2c 85       	ldd	r18, Y+12	; 0x0c
    2128:	f1 10       	cpse	r15, r1
    212a:	fa 94       	dec	r15
    212c:	08 94       	sec
    212e:	a1 08       	sbc	r10, r1
    2130:	b1 08       	sbc	r11, r1
    2132:	a1 14       	cp	r10, r1
    2134:	b1 04       	cpc	r11, r1
    2136:	69 f7       	brne	.-38     	; 0x2112 <__stack+0x13>
    2138:	e9 c0       	rjmp	.+466    	; 0x230c <__stack+0x20d>
    213a:	84 36       	cpi	r24, 0x64	; 100
    213c:	11 f0       	breq	.+4      	; 0x2142 <__stack+0x43>
    213e:	89 36       	cpi	r24, 0x69	; 105
    2140:	41 f5       	brne	.+80     	; 0x2192 <__stack+0x93>
    2142:	27 ff       	sbrs	r18, 7
    2144:	08 c0       	rjmp	.+16     	; 0x2156 <__stack+0x57>
    2146:	f8 01       	movw	r30, r16
    2148:	60 81       	ld	r22, Z
    214a:	71 81       	ldd	r23, Z+1	; 0x01
    214c:	82 81       	ldd	r24, Z+2	; 0x02
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	0c 5f       	subi	r16, 0xFC	; 252
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    2154:	09 c0       	rjmp	.+18     	; 0x2168 <__stack+0x69>
    2156:	f8 01       	movw	r30, r16
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	88 27       	eor	r24, r24
    215e:	77 fd       	sbrc	r23, 7
    2160:	80 95       	com	r24
    2162:	98 2f       	mov	r25, r24
    2164:	0e 5f       	subi	r16, 0xFE	; 254
    2166:	1f 4f       	sbci	r17, 0xFF	; 255
    2168:	4f e6       	ldi	r20, 0x6F	; 111
    216a:	b4 2e       	mov	r11, r20
    216c:	b2 22       	and	r11, r18
    216e:	97 ff       	sbrs	r25, 7
    2170:	09 c0       	rjmp	.+18     	; 0x2184 <__stack+0x85>
    2172:	90 95       	com	r25
    2174:	80 95       	com	r24
    2176:	70 95       	com	r23
    2178:	61 95       	neg	r22
    217a:	7f 4f       	sbci	r23, 0xFF	; 255
    217c:	8f 4f       	sbci	r24, 0xFF	; 255
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	f0 e8       	ldi	r31, 0x80	; 128
    2182:	bf 2a       	or	r11, r31
    2184:	a2 01       	movw	r20, r4
    2186:	2a e0       	ldi	r18, 0x0A	; 10
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	25 d1       	rcall	.+586    	; 0x23d6 <__ultoa_invert>
    218c:	78 2e       	mov	r7, r24
    218e:	74 18       	sub	r7, r4
    2190:	44 c0       	rjmp	.+136    	; 0x221a <__stack+0x11b>
    2192:	85 37       	cpi	r24, 0x75	; 117
    2194:	31 f4       	brne	.+12     	; 0x21a2 <__stack+0xa3>
    2196:	3f ee       	ldi	r19, 0xEF	; 239
    2198:	b3 2e       	mov	r11, r19
    219a:	b2 22       	and	r11, r18
    219c:	2a e0       	ldi	r18, 0x0A	; 10
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	25 c0       	rjmp	.+74     	; 0x21ec <__stack+0xed>
    21a2:	99 ef       	ldi	r25, 0xF9	; 249
    21a4:	b9 2e       	mov	r11, r25
    21a6:	b2 22       	and	r11, r18
    21a8:	8f 36       	cpi	r24, 0x6F	; 111
    21aa:	c1 f0       	breq	.+48     	; 0x21dc <__stack+0xdd>
    21ac:	80 37       	cpi	r24, 0x70	; 112
    21ae:	20 f4       	brcc	.+8      	; 0x21b8 <__stack+0xb9>
    21b0:	88 35       	cpi	r24, 0x58	; 88
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <__stack+0xb7>
    21b4:	ae c0       	rjmp	.+348    	; 0x2312 <__stack+0x213>
    21b6:	0d c0       	rjmp	.+26     	; 0x21d2 <__stack+0xd3>
    21b8:	80 37       	cpi	r24, 0x70	; 112
    21ba:	21 f0       	breq	.+8      	; 0x21c4 <__stack+0xc5>
    21bc:	88 37       	cpi	r24, 0x78	; 120
    21be:	09 f0       	breq	.+2      	; 0x21c2 <__stack+0xc3>
    21c0:	a8 c0       	rjmp	.+336    	; 0x2312 <__stack+0x213>
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <__stack+0xc9>
    21c4:	20 e1       	ldi	r18, 0x10	; 16
    21c6:	b2 2a       	or	r11, r18
    21c8:	b4 fe       	sbrs	r11, 4
    21ca:	0b c0       	rjmp	.+22     	; 0x21e2 <__stack+0xe3>
    21cc:	84 e0       	ldi	r24, 0x04	; 4
    21ce:	b8 2a       	or	r11, r24
    21d0:	08 c0       	rjmp	.+16     	; 0x21e2 <__stack+0xe3>
    21d2:	b4 fe       	sbrs	r11, 4
    21d4:	09 c0       	rjmp	.+18     	; 0x21e8 <__stack+0xe9>
    21d6:	e6 e0       	ldi	r30, 0x06	; 6
    21d8:	be 2a       	or	r11, r30
    21da:	06 c0       	rjmp	.+12     	; 0x21e8 <__stack+0xe9>
    21dc:	28 e0       	ldi	r18, 0x08	; 8
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	05 c0       	rjmp	.+10     	; 0x21ec <__stack+0xed>
    21e2:	20 e1       	ldi	r18, 0x10	; 16
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <__stack+0xed>
    21e8:	20 e1       	ldi	r18, 0x10	; 16
    21ea:	32 e0       	ldi	r19, 0x02	; 2
    21ec:	b7 fe       	sbrs	r11, 7
    21ee:	08 c0       	rjmp	.+16     	; 0x2200 <__stack+0x101>
    21f0:	f8 01       	movw	r30, r16
    21f2:	60 81       	ld	r22, Z
    21f4:	71 81       	ldd	r23, Z+1	; 0x01
    21f6:	82 81       	ldd	r24, Z+2	; 0x02
    21f8:	93 81       	ldd	r25, Z+3	; 0x03
    21fa:	0c 5f       	subi	r16, 0xFC	; 252
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255
    21fe:	07 c0       	rjmp	.+14     	; 0x220e <__stack+0x10f>
    2200:	f8 01       	movw	r30, r16
    2202:	60 81       	ld	r22, Z
    2204:	71 81       	ldd	r23, Z+1	; 0x01
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0e 5f       	subi	r16, 0xFE	; 254
    220c:	1f 4f       	sbci	r17, 0xFF	; 255
    220e:	a2 01       	movw	r20, r4
    2210:	e2 d0       	rcall	.+452    	; 0x23d6 <__ultoa_invert>
    2212:	78 2e       	mov	r7, r24
    2214:	74 18       	sub	r7, r4
    2216:	ff e7       	ldi	r31, 0x7F	; 127
    2218:	bf 22       	and	r11, r31
    221a:	b6 fe       	sbrs	r11, 6
    221c:	0b c0       	rjmp	.+22     	; 0x2234 <__stack+0x135>
    221e:	2e ef       	ldi	r18, 0xFE	; 254
    2220:	b2 22       	and	r11, r18
    2222:	7e 14       	cp	r7, r14
    2224:	38 f4       	brcc	.+14     	; 0x2234 <__stack+0x135>
    2226:	b4 fe       	sbrs	r11, 4
    2228:	07 c0       	rjmp	.+14     	; 0x2238 <__stack+0x139>
    222a:	b2 fc       	sbrc	r11, 2
    222c:	05 c0       	rjmp	.+10     	; 0x2238 <__stack+0x139>
    222e:	8f ee       	ldi	r24, 0xEF	; 239
    2230:	b8 22       	and	r11, r24
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <__stack+0x139>
    2234:	a7 2c       	mov	r10, r7
    2236:	01 c0       	rjmp	.+2      	; 0x223a <__stack+0x13b>
    2238:	ae 2c       	mov	r10, r14
    223a:	8b 2d       	mov	r24, r11
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	b4 fe       	sbrs	r11, 4
    2240:	0d c0       	rjmp	.+26     	; 0x225c <__stack+0x15d>
    2242:	fe 01       	movw	r30, r28
    2244:	e7 0d       	add	r30, r7
    2246:	f1 1d       	adc	r31, r1
    2248:	20 81       	ld	r18, Z
    224a:	20 33       	cpi	r18, 0x30	; 48
    224c:	19 f4       	brne	.+6      	; 0x2254 <__stack+0x155>
    224e:	e9 ee       	ldi	r30, 0xE9	; 233
    2250:	be 22       	and	r11, r30
    2252:	09 c0       	rjmp	.+18     	; 0x2266 <__stack+0x167>
    2254:	a3 94       	inc	r10
    2256:	b2 fe       	sbrs	r11, 2
    2258:	06 c0       	rjmp	.+12     	; 0x2266 <__stack+0x167>
    225a:	04 c0       	rjmp	.+8      	; 0x2264 <__stack+0x165>
    225c:	86 78       	andi	r24, 0x86	; 134
    225e:	90 70       	andi	r25, 0x00	; 0
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	09 f0       	breq	.+2      	; 0x2266 <__stack+0x167>
    2264:	a3 94       	inc	r10
    2266:	8b 2c       	mov	r8, r11
    2268:	99 24       	eor	r9, r9
    226a:	b3 fc       	sbrc	r11, 3
    226c:	13 c0       	rjmp	.+38     	; 0x2294 <__stack+0x195>
    226e:	b0 fe       	sbrs	r11, 0
    2270:	0e c0       	rjmp	.+28     	; 0x228e <__stack+0x18f>
    2272:	af 14       	cp	r10, r15
    2274:	28 f4       	brcc	.+10     	; 0x2280 <__stack+0x181>
    2276:	e7 2c       	mov	r14, r7
    2278:	ef 0c       	add	r14, r15
    227a:	ea 18       	sub	r14, r10
    227c:	af 2c       	mov	r10, r15
    227e:	07 c0       	rjmp	.+14     	; 0x228e <__stack+0x18f>
    2280:	e7 2c       	mov	r14, r7
    2282:	05 c0       	rjmp	.+10     	; 0x228e <__stack+0x18f>
    2284:	80 e2       	ldi	r24, 0x20	; 32
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	b6 01       	movw	r22, r12
    228a:	79 d0       	rcall	.+242    	; 0x237e <fputc>
    228c:	a3 94       	inc	r10
    228e:	af 14       	cp	r10, r15
    2290:	c8 f3       	brcs	.-14     	; 0x2284 <__stack+0x185>
    2292:	04 c0       	rjmp	.+8      	; 0x229c <__stack+0x19d>
    2294:	af 14       	cp	r10, r15
    2296:	10 f4       	brcc	.+4      	; 0x229c <__stack+0x19d>
    2298:	fa 18       	sub	r15, r10
    229a:	01 c0       	rjmp	.+2      	; 0x229e <__stack+0x19f>
    229c:	ff 24       	eor	r15, r15
    229e:	84 fe       	sbrs	r8, 4
    22a0:	0e c0       	rjmp	.+28     	; 0x22be <__stack+0x1bf>
    22a2:	80 e3       	ldi	r24, 0x30	; 48
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	b6 01       	movw	r22, r12
    22a8:	6a d0       	rcall	.+212    	; 0x237e <fputc>
    22aa:	82 fe       	sbrs	r8, 2
    22ac:	1d c0       	rjmp	.+58     	; 0x22e8 <__stack+0x1e9>
    22ae:	81 fe       	sbrs	r8, 1
    22b0:	03 c0       	rjmp	.+6      	; 0x22b8 <__stack+0x1b9>
    22b2:	88 e5       	ldi	r24, 0x58	; 88
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	10 c0       	rjmp	.+32     	; 0x22d8 <__stack+0x1d9>
    22b8:	88 e7       	ldi	r24, 0x78	; 120
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0d c0       	rjmp	.+26     	; 0x22d8 <__stack+0x1d9>
    22be:	c4 01       	movw	r24, r8
    22c0:	86 78       	andi	r24, 0x86	; 134
    22c2:	90 70       	andi	r25, 0x00	; 0
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	81 f0       	breq	.+32     	; 0x22e8 <__stack+0x1e9>
    22c8:	81 fc       	sbrc	r8, 1
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <__stack+0x1d1>
    22cc:	80 e2       	ldi	r24, 0x20	; 32
    22ce:	01 c0       	rjmp	.+2      	; 0x22d2 <__stack+0x1d3>
    22d0:	8b e2       	ldi	r24, 0x2B	; 43
    22d2:	b7 fc       	sbrc	r11, 7
    22d4:	8d e2       	ldi	r24, 0x2D	; 45
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	b6 01       	movw	r22, r12
    22da:	51 d0       	rcall	.+162    	; 0x237e <fputc>
    22dc:	05 c0       	rjmp	.+10     	; 0x22e8 <__stack+0x1e9>
    22de:	80 e3       	ldi	r24, 0x30	; 48
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	b6 01       	movw	r22, r12
    22e4:	4c d0       	rcall	.+152    	; 0x237e <fputc>
    22e6:	ea 94       	dec	r14
    22e8:	7e 14       	cp	r7, r14
    22ea:	c8 f3       	brcs	.-14     	; 0x22de <__stack+0x1df>
    22ec:	7a 94       	dec	r7
    22ee:	f2 01       	movw	r30, r4
    22f0:	e7 0d       	add	r30, r7
    22f2:	f1 1d       	adc	r31, r1
    22f4:	80 81       	ld	r24, Z
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	b6 01       	movw	r22, r12
    22fa:	41 d0       	rcall	.+130    	; 0x237e <fputc>
    22fc:	77 20       	and	r7, r7
    22fe:	b1 f7       	brne	.-20     	; 0x22ec <__stack+0x1ed>
    2300:	05 c0       	rjmp	.+10     	; 0x230c <__stack+0x20d>
    2302:	80 e2       	ldi	r24, 0x20	; 32
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	b6 01       	movw	r22, r12
    2308:	3a d0       	rcall	.+116    	; 0x237e <fputc>
    230a:	fa 94       	dec	r15
    230c:	ff 20       	and	r15, r15
    230e:	c9 f7       	brne	.-14     	; 0x2302 <__stack+0x203>
    2310:	44 ce       	rjmp	.-888    	; 0x1f9a <vfprintf+0x4e>
    2312:	f6 01       	movw	r30, r12
    2314:	26 81       	ldd	r18, Z+6	; 0x06
    2316:	37 81       	ldd	r19, Z+7	; 0x07
    2318:	02 c0       	rjmp	.+4      	; 0x231e <__stack+0x21f>
    231a:	2f ef       	ldi	r18, 0xFF	; 255
    231c:	3f ef       	ldi	r19, 0xFF	; 255
    231e:	c9 01       	movw	r24, r18
    2320:	2c 96       	adiw	r28, 0x0c	; 12
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	ff 90       	pop	r15
    2336:	ef 90       	pop	r14
    2338:	df 90       	pop	r13
    233a:	cf 90       	pop	r12
    233c:	bf 90       	pop	r11
    233e:	af 90       	pop	r10
    2340:	9f 90       	pop	r9
    2342:	8f 90       	pop	r8
    2344:	7f 90       	pop	r7
    2346:	6f 90       	pop	r6
    2348:	5f 90       	pop	r5
    234a:	4f 90       	pop	r4
    234c:	3f 90       	pop	r3
    234e:	2f 90       	pop	r2
    2350:	08 95       	ret

00002352 <strnlen_P>:
    2352:	fc 01       	movw	r30, r24
    2354:	05 90       	lpm	r0, Z+
    2356:	61 50       	subi	r22, 0x01	; 1
    2358:	70 40       	sbci	r23, 0x00	; 0
    235a:	01 10       	cpse	r0, r1
    235c:	d8 f7       	brcc	.-10     	; 0x2354 <strnlen_P+0x2>
    235e:	80 95       	com	r24
    2360:	90 95       	com	r25
    2362:	8e 0f       	add	r24, r30
    2364:	9f 1f       	adc	r25, r31
    2366:	08 95       	ret

00002368 <strnlen>:
    2368:	fc 01       	movw	r30, r24
    236a:	61 50       	subi	r22, 0x01	; 1
    236c:	70 40       	sbci	r23, 0x00	; 0
    236e:	01 90       	ld	r0, Z+
    2370:	01 10       	cpse	r0, r1
    2372:	d8 f7       	brcc	.-10     	; 0x236a <strnlen+0x2>
    2374:	80 95       	com	r24
    2376:	90 95       	com	r25
    2378:	8e 0f       	add	r24, r30
    237a:	9f 1f       	adc	r25, r31
    237c:	08 95       	ret

0000237e <fputc>:
    237e:	0f 93       	push	r16
    2380:	1f 93       	push	r17
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	8c 01       	movw	r16, r24
    2388:	eb 01       	movw	r28, r22
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	81 ff       	sbrs	r24, 1
    238e:	1b c0       	rjmp	.+54     	; 0x23c6 <fputc+0x48>
    2390:	82 ff       	sbrs	r24, 2
    2392:	0d c0       	rjmp	.+26     	; 0x23ae <fputc+0x30>
    2394:	2e 81       	ldd	r18, Y+6	; 0x06
    2396:	3f 81       	ldd	r19, Y+7	; 0x07
    2398:	8c 81       	ldd	r24, Y+4	; 0x04
    239a:	9d 81       	ldd	r25, Y+5	; 0x05
    239c:	28 17       	cp	r18, r24
    239e:	39 07       	cpc	r19, r25
    23a0:	64 f4       	brge	.+24     	; 0x23ba <fputc+0x3c>
    23a2:	e8 81       	ld	r30, Y
    23a4:	f9 81       	ldd	r31, Y+1	; 0x01
    23a6:	01 93       	st	Z+, r16
    23a8:	f9 83       	std	Y+1, r31	; 0x01
    23aa:	e8 83       	st	Y, r30
    23ac:	06 c0       	rjmp	.+12     	; 0x23ba <fputc+0x3c>
    23ae:	e8 85       	ldd	r30, Y+8	; 0x08
    23b0:	f9 85       	ldd	r31, Y+9	; 0x09
    23b2:	80 2f       	mov	r24, r16
    23b4:	09 95       	icall
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	31 f4       	brne	.+12     	; 0x23c6 <fputc+0x48>
    23ba:	8e 81       	ldd	r24, Y+6	; 0x06
    23bc:	9f 81       	ldd	r25, Y+7	; 0x07
    23be:	01 96       	adiw	r24, 0x01	; 1
    23c0:	9f 83       	std	Y+7, r25	; 0x07
    23c2:	8e 83       	std	Y+6, r24	; 0x06
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <fputc+0x4c>
    23c6:	0f ef       	ldi	r16, 0xFF	; 255
    23c8:	1f ef       	ldi	r17, 0xFF	; 255
    23ca:	c8 01       	movw	r24, r16
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	1f 91       	pop	r17
    23d2:	0f 91       	pop	r16
    23d4:	08 95       	ret

000023d6 <__ultoa_invert>:
    23d6:	fa 01       	movw	r30, r20
    23d8:	aa 27       	eor	r26, r26
    23da:	28 30       	cpi	r18, 0x08	; 8
    23dc:	51 f1       	breq	.+84     	; 0x2432 <__ultoa_invert+0x5c>
    23de:	20 31       	cpi	r18, 0x10	; 16
    23e0:	81 f1       	breq	.+96     	; 0x2442 <__ultoa_invert+0x6c>
    23e2:	e8 94       	clt
    23e4:	6f 93       	push	r22
    23e6:	6e 7f       	andi	r22, 0xFE	; 254
    23e8:	6e 5f       	subi	r22, 0xFE	; 254
    23ea:	7f 4f       	sbci	r23, 0xFF	; 255
    23ec:	8f 4f       	sbci	r24, 0xFF	; 255
    23ee:	9f 4f       	sbci	r25, 0xFF	; 255
    23f0:	af 4f       	sbci	r26, 0xFF	; 255
    23f2:	b1 e0       	ldi	r27, 0x01	; 1
    23f4:	3e d0       	rcall	.+124    	; 0x2472 <__ultoa_invert+0x9c>
    23f6:	b4 e0       	ldi	r27, 0x04	; 4
    23f8:	3c d0       	rcall	.+120    	; 0x2472 <__ultoa_invert+0x9c>
    23fa:	67 0f       	add	r22, r23
    23fc:	78 1f       	adc	r23, r24
    23fe:	89 1f       	adc	r24, r25
    2400:	9a 1f       	adc	r25, r26
    2402:	a1 1d       	adc	r26, r1
    2404:	68 0f       	add	r22, r24
    2406:	79 1f       	adc	r23, r25
    2408:	8a 1f       	adc	r24, r26
    240a:	91 1d       	adc	r25, r1
    240c:	a1 1d       	adc	r26, r1
    240e:	6a 0f       	add	r22, r26
    2410:	71 1d       	adc	r23, r1
    2412:	81 1d       	adc	r24, r1
    2414:	91 1d       	adc	r25, r1
    2416:	a1 1d       	adc	r26, r1
    2418:	20 d0       	rcall	.+64     	; 0x245a <__ultoa_invert+0x84>
    241a:	09 f4       	brne	.+2      	; 0x241e <__ultoa_invert+0x48>
    241c:	68 94       	set
    241e:	3f 91       	pop	r19
    2420:	2a e0       	ldi	r18, 0x0A	; 10
    2422:	26 9f       	mul	r18, r22
    2424:	11 24       	eor	r1, r1
    2426:	30 19       	sub	r19, r0
    2428:	30 5d       	subi	r19, 0xD0	; 208
    242a:	31 93       	st	Z+, r19
    242c:	de f6       	brtc	.-74     	; 0x23e4 <__ultoa_invert+0xe>
    242e:	cf 01       	movw	r24, r30
    2430:	08 95       	ret
    2432:	46 2f       	mov	r20, r22
    2434:	47 70       	andi	r20, 0x07	; 7
    2436:	40 5d       	subi	r20, 0xD0	; 208
    2438:	41 93       	st	Z+, r20
    243a:	b3 e0       	ldi	r27, 0x03	; 3
    243c:	0f d0       	rcall	.+30     	; 0x245c <__ultoa_invert+0x86>
    243e:	c9 f7       	brne	.-14     	; 0x2432 <__ultoa_invert+0x5c>
    2440:	f6 cf       	rjmp	.-20     	; 0x242e <__ultoa_invert+0x58>
    2442:	46 2f       	mov	r20, r22
    2444:	4f 70       	andi	r20, 0x0F	; 15
    2446:	40 5d       	subi	r20, 0xD0	; 208
    2448:	4a 33       	cpi	r20, 0x3A	; 58
    244a:	18 f0       	brcs	.+6      	; 0x2452 <__ultoa_invert+0x7c>
    244c:	49 5d       	subi	r20, 0xD9	; 217
    244e:	31 fd       	sbrc	r19, 1
    2450:	40 52       	subi	r20, 0x20	; 32
    2452:	41 93       	st	Z+, r20
    2454:	02 d0       	rcall	.+4      	; 0x245a <__ultoa_invert+0x84>
    2456:	a9 f7       	brne	.-22     	; 0x2442 <__ultoa_invert+0x6c>
    2458:	ea cf       	rjmp	.-44     	; 0x242e <__ultoa_invert+0x58>
    245a:	b4 e0       	ldi	r27, 0x04	; 4
    245c:	a6 95       	lsr	r26
    245e:	97 95       	ror	r25
    2460:	87 95       	ror	r24
    2462:	77 95       	ror	r23
    2464:	67 95       	ror	r22
    2466:	ba 95       	dec	r27
    2468:	c9 f7       	brne	.-14     	; 0x245c <__ultoa_invert+0x86>
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	61 05       	cpc	r22, r1
    246e:	71 05       	cpc	r23, r1
    2470:	08 95       	ret
    2472:	9b 01       	movw	r18, r22
    2474:	ac 01       	movw	r20, r24
    2476:	0a 2e       	mov	r0, r26
    2478:	06 94       	lsr	r0
    247a:	57 95       	ror	r21
    247c:	47 95       	ror	r20
    247e:	37 95       	ror	r19
    2480:	27 95       	ror	r18
    2482:	ba 95       	dec	r27
    2484:	c9 f7       	brne	.-14     	; 0x2478 <__ultoa_invert+0xa2>
    2486:	62 0f       	add	r22, r18
    2488:	73 1f       	adc	r23, r19
    248a:	84 1f       	adc	r24, r20
    248c:	95 1f       	adc	r25, r21
    248e:	a0 1d       	adc	r26, r0
    2490:	08 95       	ret

00002492 <_exit>:
    2492:	f8 94       	cli

00002494 <__stop_program>:
    2494:	ff cf       	rjmp	.-2      	; 0x2494 <__stop_program>
