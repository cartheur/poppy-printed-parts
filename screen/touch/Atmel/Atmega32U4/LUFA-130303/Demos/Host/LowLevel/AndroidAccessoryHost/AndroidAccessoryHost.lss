
AndroidAccessoryHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00001a2e  00001ac2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800172  00800172  00001b34  2**0
                  ALLOC
  3 .stab         000021a8  00000000  00000000  00001b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7e  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000398  00000000  00000000  00004a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008cc  00000000  00000000  00004df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000523d  00000000  00000000  000056be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000017aa  00000000  00000000  0000a8fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004963  00000000  00000000  0000c0a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000550  00000000  00000000  00010a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002776  00000000  00000000  00010f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002d93  00000000  00000000  000136ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000b2e  00000000  00000000  00016461  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000458  00000000  00000000  00016f8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	af c1       	rjmp	.+862    	; 0x360 <__ctors_end>
       2:	00 00       	nop
       4:	cb c1       	rjmp	.+918    	; 0x39c <__bad_interrupt>
       6:	00 00       	nop
       8:	c9 c1       	rjmp	.+914    	; 0x39c <__bad_interrupt>
       a:	00 00       	nop
       c:	c7 c1       	rjmp	.+910    	; 0x39c <__bad_interrupt>
       e:	00 00       	nop
      10:	c5 c1       	rjmp	.+906    	; 0x39c <__bad_interrupt>
      12:	00 00       	nop
      14:	c3 c1       	rjmp	.+902    	; 0x39c <__bad_interrupt>
      16:	00 00       	nop
      18:	c1 c1       	rjmp	.+898    	; 0x39c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bf c1       	rjmp	.+894    	; 0x39c <__bad_interrupt>
      1e:	00 00       	nop
      20:	bd c1       	rjmp	.+890    	; 0x39c <__bad_interrupt>
      22:	00 00       	nop
      24:	bb c1       	rjmp	.+886    	; 0x39c <__bad_interrupt>
      26:	00 00       	nop
      28:	2a c7       	rjmp	.+3668   	; 0xe7e <__vector_10>
      2a:	00 00       	nop
      2c:	b7 c1       	rjmp	.+878    	; 0x39c <__bad_interrupt>
      2e:	00 00       	nop
      30:	b5 c1       	rjmp	.+874    	; 0x39c <__bad_interrupt>
      32:	00 00       	nop
      34:	b3 c1       	rjmp	.+870    	; 0x39c <__bad_interrupt>
      36:	00 00       	nop
      38:	b1 c1       	rjmp	.+866    	; 0x39c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	af c1       	rjmp	.+862    	; 0x39c <__bad_interrupt>
      3e:	00 00       	nop
      40:	ad c1       	rjmp	.+858    	; 0x39c <__bad_interrupt>
      42:	00 00       	nop
      44:	ab c1       	rjmp	.+854    	; 0x39c <__bad_interrupt>
      46:	00 00       	nop
      48:	a9 c1       	rjmp	.+850    	; 0x39c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a7 c1       	rjmp	.+846    	; 0x39c <__bad_interrupt>
      4e:	00 00       	nop
      50:	a5 c1       	rjmp	.+842    	; 0x39c <__bad_interrupt>
      52:	00 00       	nop
      54:	a3 c1       	rjmp	.+838    	; 0x39c <__bad_interrupt>
      56:	00 00       	nop
      58:	a1 c1       	rjmp	.+834    	; 0x39c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9f c1       	rjmp	.+830    	; 0x39c <__bad_interrupt>
      5e:	00 00       	nop
      60:	9d c1       	rjmp	.+826    	; 0x39c <__bad_interrupt>
      62:	00 00       	nop
      64:	9b c1       	rjmp	.+822    	; 0x39c <__bad_interrupt>
      66:	00 00       	nop
      68:	99 c1       	rjmp	.+818    	; 0x39c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	97 c1       	rjmp	.+814    	; 0x39c <__bad_interrupt>
      6e:	00 00       	nop
      70:	95 c1       	rjmp	.+810    	; 0x39c <__bad_interrupt>
      72:	00 00       	nop
      74:	93 c1       	rjmp	.+806    	; 0x39c <__bad_interrupt>
      76:	00 00       	nop
      78:	91 c1       	rjmp	.+802    	; 0x39c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8f c1       	rjmp	.+798    	; 0x39c <__bad_interrupt>
      7e:	00 00       	nop
      80:	8d c1       	rjmp	.+794    	; 0x39c <__bad_interrupt>
      82:	00 00       	nop
      84:	8b c1       	rjmp	.+790    	; 0x39c <__bad_interrupt>
      86:	00 00       	nop
      88:	89 c1       	rjmp	.+786    	; 0x39c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	87 c1       	rjmp	.+782    	; 0x39c <__bad_interrupt>
      8e:	00 00       	nop
      90:	85 c1       	rjmp	.+778    	; 0x39c <__bad_interrupt>
      92:	00 00       	nop
      94:	83 c1       	rjmp	.+774    	; 0x39c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4327>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4320>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4315>:
     11d:	41 63 63 65 73 73 6f 72 79 20 4d 6f 64 65 20 41     Accessory Mode A
     12d:	6e 64 72 6f 69 64 20 45 6e 75 6d 65 72 61 74 65     ndroid Enumerate
     13d:	64 2e 0d 0a 00                                      d....

00000142 <__c.4313>:
     142:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     152:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     162:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     172:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     182:	37 6d 00                                            7m.

00000185 <__c.4311>:
     185:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     195:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000019f <__c.4309>:
     19f:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1af:	69 63 65 2e 0d 0a 00                                ice....

000001b6 <__c.4307>:
     1b6:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1c6:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     1d6:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000001e0 <__c.4305>:
     1e0:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     1f0:	61 74 61 2e 0d 0a 00                                ata....

000001f7 <__c.4303>:
     1f7:	1b 5b 33 31 6d 41 63 63 65 73 73 6f 72 79 20 4d     .[31mAccessory M
     207:	6f 64 65 20 4e 6f 74 20 53 75 70 70 6f 72 74 65     ode Not Supporte
     217:	64 2e 00                                            d..

0000021a <__c.4301>:
     21a:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     22a:	6f 72 20 28 47 65 74 20 50 72 6f 74 6f 63 6f 6c     or (Get Protocol
     23a:	29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f     )... -- Error Co
     24a:	64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00           de: %d...[37m.

00000258 <__c.4298>:
     258:	41 6e 64 72 6f 69 64 20 44 65 76 69 63 65 20 44     Android Device D
     268:	65 74 65 63 74 65 64 20 2d 20 25 73 41 63 63 65     etected - %sAcce
     278:	73 73 6f 72 79 20 6d 6f 64 65 2e 0d 0a 00           ssory mode....

00000286 <__c.4296>:
     286:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     296:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000002a0 <__c.4294>:
     2a0:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     2b0:	69 63 65 2e 0d 0a 00                                ice....

000002b7 <__c.4292>:
     2b7:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     2c7:	6f 72 20 28 47 65 74 20 44 65 76 69 63 65 29 2e     or (Get Device).
     2d7:	0d 0a 00                                            ...

000002da <__c.4288>:
     2da:	47 65 74 74 69 6e 67 20 44 65 76 69 63 65 20 44     Getting Device D
     2ea:	61 74 61 2e 0d 0a 00                                ata....

000002f1 <__c.4283>:
     2f1:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     301:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     311:	00                                                  .

00000312 <__c.4278>:
     312:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     322:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000032f <__c.4264>:
     32f:	1b 5b 33 36 6d 41 6e 64 72 6f 69 64 20 41 63 63     .[36mAndroid Acc
     33f:	65 73 73 6f 72 79 20 48 6f 73 74 20 44 65 6d 6f     essory Host Demo
     34f:	20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d      running....[37m
     35f:	00                                                  .

00000360 <__ctors_end>:
     360:	11 24       	eor	r1, r1
     362:	1f be       	out	0x3f, r1	; 63
     364:	cf ef       	ldi	r28, 0xFF	; 255
     366:	d0 e2       	ldi	r29, 0x20	; 32
     368:	de bf       	out	0x3e, r29	; 62
     36a:	cd bf       	out	0x3d, r28	; 61

0000036c <__do_copy_data>:
     36c:	11 e0       	ldi	r17, 0x01	; 1
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b1 e0       	ldi	r27, 0x01	; 1
     372:	ee e2       	ldi	r30, 0x2E	; 46
     374:	fa e1       	ldi	r31, 0x1A	; 26
     376:	00 e0       	ldi	r16, 0x00	; 0
     378:	0b bf       	out	0x3b, r16	; 59
     37a:	02 c0       	rjmp	.+4      	; 0x380 <__do_copy_data+0x14>
     37c:	07 90       	elpm	r0, Z+
     37e:	0d 92       	st	X+, r0
     380:	a2 37       	cpi	r26, 0x72	; 114
     382:	b1 07       	cpc	r27, r17
     384:	d9 f7       	brne	.-10     	; 0x37c <__do_copy_data+0x10>

00000386 <__do_clear_bss>:
     386:	11 e0       	ldi	r17, 0x01	; 1
     388:	a2 e7       	ldi	r26, 0x72	; 114
     38a:	b1 e0       	ldi	r27, 0x01	; 1
     38c:	01 c0       	rjmp	.+2      	; 0x390 <.do_clear_bss_start>

0000038e <.do_clear_bss_loop>:
     38e:	1d 92       	st	X+, r1

00000390 <.do_clear_bss_start>:
     390:	a4 39       	cpi	r26, 0x94	; 148
     392:	b1 07       	cpc	r27, r17
     394:	e1 f7       	brne	.-8      	; 0x38e <.do_clear_bss_loop>
     396:	68 d0       	rcall	.+208    	; 0x468 <main>
     398:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <_exit>

0000039c <__bad_interrupt>:
     39c:	31 ce       	rjmp	.-926    	; 0x0 <__vectors>

0000039e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     39e:	9b b1       	in	r25, 0x0b	; 11
     3a0:	9f 70       	andi	r25, 0x0F	; 15
     3a2:	98 2b       	or	r25, r24
     3a4:	9b b9       	out	0x0b, r25	; 11
			}
     3a6:	08 95       	ret

000003a8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3a8:	84 b7       	in	r24, 0x34	; 52
     3aa:	87 7f       	andi	r24, 0xF7	; 247
     3ac:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3ae:	28 e1       	ldi	r18, 0x18	; 24
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	20 93 60 00 	sts	0x0060, r18
     3b8:	10 92 60 00 	sts	0x0060, r1
     3bc:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	80 e8       	ldi	r24, 0x80	; 128
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	80 93 61 00 	sts	0x0061, r24
     3ca:	90 93 61 00 	sts	0x0061, r25
     3ce:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3d0:	83 e3       	ldi	r24, 0x33	; 51
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	90 93 cd 00 	sts	0x00CD, r25
     3d8:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3dc:	86 e0       	ldi	r24, 0x06	; 6
     3de:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3e2:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3e6:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     3ea:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     3ec:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     3ee:	8a b1       	in	r24, 0x0a	; 10
     3f0:	80 6f       	ori	r24, 0xF0	; 240
     3f2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3f4:	8b b1       	in	r24, 0x0b	; 11
     3f6:	8f 70       	andi	r24, 0x0F	; 15
     3f8:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     3fa:	26 d5       	rcall	.+2636   	; 0xe48 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
}
     400:	fd c7       	rjmp	.+4090   	; 0x13fc <Serial_CreateStream>

00000402 <AndroidHost_Task>:

/** Task to set the configuration of the attached device after it has been enumerated. */
void AndroidHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     402:	80 91 7f 01 	lds	r24, 0x017F
     406:	8b 30       	cpi	r24, 0x0B	; 11
     408:	71 f5       	brne	.+92     	; 0x466 <AndroidHost_Task+0x64>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     410:	80 91 a9 00 	lds	r24, 0x00A9
     414:	8f 7b       	andi	r24, 0xBF	; 191
     416:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     41a:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select the data IN pipe */
	Pipe_SelectPipe(ANDROID_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     41e:	80 ff       	sbrs	r24, 0
     420:	1d c0       	rjmp	.+58     	; 0x45c <AndroidHost_Task+0x5a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     422:	80 91 a9 00 	lds	r24, 0x00A9
     426:	80 64       	ori	r24, 0x40	; 64
     428:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     42c:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Re-freeze IN pipe after the packet has been received */
		Pipe_Freeze();

		/* Check if data is in the pipe */
		if (Pipe_IsReadWriteAllowed())
     430:	85 ff       	sbrs	r24, 5
     432:	0f c0       	rjmp	.+30     	; 0x452 <AndroidHost_Task+0x50>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     434:	90 91 af 00 	lds	r25, 0x00AF
		{
			uint8_t NextReceivedByte = Pipe_Read_8();
			uint8_t LEDMask          = LEDS_NO_LEDS;

			if (NextReceivedByte & 0x01)
     438:	90 ff       	sbrs	r25, 0
     43a:	02 c0       	rjmp	.+4      	; 0x440 <AndroidHost_Task+0x3e>
			  LEDMask |= LEDS_LED1;
     43c:	80 e1       	ldi	r24, 0x10	; 16
     43e:	01 c0       	rjmp	.+2      	; 0x442 <AndroidHost_Task+0x40>

		/* Check if data is in the pipe */
		if (Pipe_IsReadWriteAllowed())
		{
			uint8_t NextReceivedByte = Pipe_Read_8();
			uint8_t LEDMask          = LEDS_NO_LEDS;
     440:	80 e0       	ldi	r24, 0x00	; 0

			if (NextReceivedByte & 0x01)
			  LEDMask |= LEDS_LED1;

			if (NextReceivedByte & 0x02)
     442:	91 fd       	sbrc	r25, 1
			  LEDMask |= LEDS_LED2;
     444:	80 62       	ori	r24, 0x20	; 32

			if (NextReceivedByte & 0x04)
     446:	92 fd       	sbrc	r25, 2
			  LEDMask |= LEDS_LED3;
     448:	80 68       	ori	r24, 0x80	; 128

			if (NextReceivedByte & 0x08)
     44a:	93 fd       	sbrc	r25, 3
			  LEDMask |= LEDS_LED4;
     44c:	80 64       	ori	r24, 0x40	; 64

			LEDs_SetAllLEDs(LEDMask);
     44e:	a7 df       	rcall	.-178    	; 0x39e <LEDs_SetAllLEDs>
     450:	05 c0       	rjmp	.+10     	; 0x45c <AndroidHost_Task+0x5a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     452:	80 91 a6 00 	lds	r24, 0x00A6
     456:	8e 77       	andi	r24, 0x7E	; 126
     458:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     45c:	80 91 a9 00 	lds	r24, 0x00A9
     460:	80 64       	ori	r24, 0x40	; 64
     462:	80 93 a9 00 	sts	0x00A9, r24
     466:	08 95       	ret

00000468 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     468:	9f df       	rcall	.-194    	; 0x3a8 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Android Accessory Host Demo running.\r\n" ESC_FG_WHITE));
     46a:	8f e2       	ldi	r24, 0x2F	; 47
     46c:	93 e0       	ldi	r25, 0x03	; 3
     46e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     472:	80 e1       	ldi	r24, 0x10	; 16
     474:	94 df       	rcall	.-216    	; 0x39e <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     476:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		AndroidHost_Task();
     478:	c4 df       	rcall	.-120    	; 0x402 <AndroidHost_Task>
		USB_USBTask();
     47a:	97 d7       	rcall	.+3886   	; 0x13aa <USB_USBTask>
     47c:	fd cf       	rjmp	.-6      	; 0x478 <main+0x10>

0000047e <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     47e:	82 e1       	ldi	r24, 0x12	; 18
     480:	93 e0       	ldi	r25, 0x03	; 3
     482:	f8 d7       	rcall	.+4080   	; 0x1474 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     484:	80 ea       	ldi	r24, 0xA0	; 160
}
     486:	8b cf       	rjmp	.-234    	; 0x39e <LEDs_SetAllLEDs>

00000488 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     488:	81 ef       	ldi	r24, 0xF1	; 241
     48a:	92 e0       	ldi	r25, 0x02	; 2
     48c:	f3 d7       	rcall	.+4070   	; 0x1474 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     48e:	80 e1       	ldi	r24, 0x10	; 16
}
     490:	86 cf       	rjmp	.-244    	; 0x39e <LEDs_SetAllLEDs>

00000492 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	df 93       	push	r29
     498:	cf 93       	push	r28
     49a:	00 d0       	rcall	.+0      	; 0x49c <EVENT_USB_Host_DeviceEnumerationComplete+0xa>
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
	puts_P(PSTR("Getting Device Data.\r\n"));
     4a0:	8a ed       	ldi	r24, 0xDA	; 218
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	e7 d7       	rcall	.+4046   	; 0x1474 <puts_P>

	/* Get and process the configuration descriptor data */
	uint8_t ErrorCode = ProcessDeviceDescriptor();
     4a6:	8f d1       	rcall	.+798    	; 0x7c6 <ProcessDeviceDescriptor>
     4a8:	18 2f       	mov	r17, r24

	bool RequiresModeSwitch = (ErrorCode == NonAccessoryModeAndroidDevice);

	/* Error out if the device is not an Android device or an error occurred */
	if ((ErrorCode != AccessoryModeAndroidDevice) && (ErrorCode != NonAccessoryModeAndroidDevice))
     4aa:	84 50       	subi	r24, 0x04	; 4
     4ac:	82 30       	cpi	r24, 0x02	; 2
     4ae:	80 f0       	brcs	.+32     	; 0x4d0 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	{
		if (ErrorCode == ControlError)
     4b0:	11 30       	cpi	r17, 0x01	; 1
     4b2:	19 f4       	brne	.+6      	; 0x4ba <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Device).\r\n"));
     4b4:	87 eb       	ldi	r24, 0xB7	; 183
     4b6:	92 e0       	ldi	r25, 0x02	; 2
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <EVENT_USB_Host_DeviceEnumerationComplete+0x2c>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     4ba:	80 ea       	ldi	r24, 0xA0	; 160
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	da d7       	rcall	.+4020   	; 0x1474 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
     4c2:	00 d0       	rcall	.+0      	; 0x4c4 <EVENT_USB_Host_DeviceEnumerationComplete+0x32>
     4c4:	ed b7       	in	r30, 0x3d	; 61
     4c6:	fe b7       	in	r31, 0x3e	; 62
     4c8:	31 96       	adiw	r30, 0x01	; 1
     4ca:	26 e8       	ldi	r18, 0x86	; 134
     4cc:	32 e0       	ldi	r19, 0x02	; 2
     4ce:	60 c0       	rjmp	.+192    	; 0x590 <EVENT_USB_Host_DeviceEnumerationComplete+0xfe>
	puts_P(PSTR("Getting Device Data.\r\n"));

	/* Get and process the configuration descriptor data */
	uint8_t ErrorCode = ProcessDeviceDescriptor();

	bool RequiresModeSwitch = (ErrorCode == NonAccessoryModeAndroidDevice);
     4d0:	01 e0       	ldi	r16, 0x01	; 1
     4d2:	14 30       	cpi	r17, 0x04	; 4
     4d4:	21 f0       	breq	.+8      	; 0x4de <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
     4d6:	00 e0       	ldi	r16, 0x00	; 0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Android Device Detected - %sAccessory mode.\r\n"), (RequiresModeSwitch ? "Non-" : ""));
     4d8:	85 e0       	ldi	r24, 0x05	; 5
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
     4e6:	28 e5       	ldi	r18, 0x58	; 88
     4e8:	32 e0       	ldi	r19, 0x02	; 2
     4ea:	ed b7       	in	r30, 0x3d	; 61
     4ec:	fe b7       	in	r31, 0x3e	; 62
     4ee:	32 83       	std	Z+2, r19	; 0x02
     4f0:	21 83       	std	Z+1, r18	; 0x01
     4f2:	94 83       	std	Z+4, r25	; 0x04
     4f4:	83 83       	std	Z+3, r24	; 0x03
     4f6:	9f d7       	rcall	.+3902   	; 0x1436 <printf_P>

	/* Check if a valid Android device was attached, but it is not current in Accessory mode */
	if (RequiresModeSwitch)
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	00 23       	and	r16, r16
     502:	81 f1       	breq	.+96     	; 0x564 <EVENT_USB_Host_DeviceEnumerationComplete+0xd2>
	{
		uint16_t AndroidProtocol;

		/* Fetch the version of the Android Accessory Protocol supported by the device */
		if ((ErrorCode = Android_GetAccessoryProtocol(&AndroidProtocol)) != HOST_SENDCONTROL_Successful)
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	8b d1       	rcall	.+790    	; 0x820 <Android_GetAccessoryProtocol>
     50a:	88 23       	and	r24, r24
     50c:	41 f0       	breq	.+16     	; 0x51e <EVENT_USB_Host_DeviceEnumerationComplete+0x8c>
		{
			printf_P(PSTR(ESC_FG_RED "Control Error (Get Protocol).\r\n"
     50e:	00 d0       	rcall	.+0      	; 0x510 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     510:	00 d0       	rcall	.+0      	; 0x512 <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
     512:	ed b7       	in	r30, 0x3d	; 61
     514:	fe b7       	in	r31, 0x3e	; 62
     516:	31 96       	adiw	r30, 0x01	; 1
     518:	2a e1       	ldi	r18, 0x1A	; 26
     51a:	32 e0       	ldi	r19, 0x02	; 2
     51c:	53 c0       	rjmp	.+166    	; 0x5c4 <EVENT_USB_Host_DeviceEnumerationComplete+0x132>
			LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
			return;
		}

		/* Validate the returned protocol version */
		if (AndroidProtocol != AOA_PROTOCOL_AccessoryV1)
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	9a 81       	ldd	r25, Y+2	; 0x02
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	91 05       	cpc	r25, r1
     526:	21 f0       	breq	.+8      	; 0x530 <EVENT_USB_Host_DeviceEnumerationComplete+0x9e>
		{
			puts_P(PSTR(ESC_FG_RED "Accessory Mode Not Supported."));
     528:	87 ef       	ldi	r24, 0xF7	; 247
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	a3 d7       	rcall	.+3910   	; 0x1474 <puts_P>
     52e:	3d c0       	rjmp	.+122    	; 0x5aa <EVENT_USB_Host_DeviceEnumerationComplete+0x118>
			LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
			return;
		}

		/* Send the device strings and start the Android Accessory Mode */
		Android_SendString(AOA_STRING_Manufacturer, "Dean Camera");
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	66 e0       	ldi	r22, 0x06	; 6
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	80 d1       	rcall	.+768    	; 0x838 <Android_SendString>
		Android_SendString(AOA_STRING_Model,        "LUFA Android Demo");
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	62 e1       	ldi	r22, 0x12	; 18
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	7c d1       	rcall	.+760    	; 0x838 <Android_SendString>
		Android_SendString(AOA_STRING_Description,  "LUFA Android Demo");
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	62 e1       	ldi	r22, 0x12	; 18
     544:	71 e0       	ldi	r23, 0x01	; 1
     546:	78 d1       	rcall	.+752    	; 0x838 <Android_SendString>
		Android_SendString(AOA_STRING_Version,      "1.0");
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	64 e2       	ldi	r22, 0x24	; 36
     54c:	71 e0       	ldi	r23, 0x01	; 1
     54e:	74 d1       	rcall	.+744    	; 0x838 <Android_SendString>
		Android_SendString(AOA_STRING_URI,          "http://www.lufa-lib.org");
     550:	84 e0       	ldi	r24, 0x04	; 4
     552:	68 e2       	ldi	r22, 0x28	; 40
     554:	71 e0       	ldi	r23, 0x01	; 1
     556:	70 d1       	rcall	.+736    	; 0x838 <Android_SendString>
		Android_SendString(AOA_STRING_Serial,       "0000000012345678");
     558:	85 e0       	ldi	r24, 0x05	; 5
     55a:	60 e4       	ldi	r22, 0x40	; 64
     55c:	71 e0       	ldi	r23, 0x01	; 1
     55e:	6c d1       	rcall	.+728    	; 0x838 <Android_SendString>

		Android_StartAccessoryMode();
     560:	8a d1       	rcall	.+788    	; 0x876 <Android_StartAccessoryMode>
		return;
     562:	3d c0       	rjmp	.+122    	; 0x5de <EVENT_USB_Host_DeviceEnumerationComplete+0x14c>
	}

	puts_P(PSTR("Getting Config Data.\r\n"));
     564:	80 ee       	ldi	r24, 0xE0	; 224
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	85 d7       	rcall	.+3850   	; 0x1474 <puts_P>

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     56a:	ad d0       	rcall	.+346    	; 0x6c6 <ProcessConfigurationDescriptor>
     56c:	18 2f       	mov	r17, r24
     56e:	88 23       	and	r24, r24
     570:	f1 f0       	breq	.+60     	; 0x5ae <EVENT_USB_Host_DeviceEnumerationComplete+0x11c>
	{
		if (ErrorCode == ControlError)
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	19 f4       	brne	.+6      	; 0x57c <EVENT_USB_Host_DeviceEnumerationComplete+0xea>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     576:	86 eb       	ldi	r24, 0xB6	; 182
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	02 c0       	rjmp	.+4      	; 0x580 <EVENT_USB_Host_DeviceEnumerationComplete+0xee>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     57c:	8f e9       	ldi	r24, 0x9F	; 159
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	79 d7       	rcall	.+3826   	; 0x1474 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     582:	00 d0       	rcall	.+0      	; 0x584 <EVENT_USB_Host_DeviceEnumerationComplete+0xf2>
     584:	00 d0       	rcall	.+0      	; 0x586 <EVENT_USB_Host_DeviceEnumerationComplete+0xf4>
     586:	ed b7       	in	r30, 0x3d	; 61
     588:	fe b7       	in	r31, 0x3e	; 62
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	25 e8       	ldi	r18, 0x85	; 133
     58e:	31 e0       	ldi	r19, 0x01	; 1
     590:	ad b7       	in	r26, 0x3d	; 61
     592:	be b7       	in	r27, 0x3e	; 62
     594:	12 96       	adiw	r26, 0x02	; 2
     596:	3c 93       	st	X, r19
     598:	2e 93       	st	-X, r18
     59a:	11 97       	sbiw	r26, 0x01	; 1
     59c:	12 83       	std	Z+2, r17	; 0x02
     59e:	13 82       	std	Z+3, r1	; 0x03
     5a0:	4a d7       	rcall	.+3732   	; 0x1436 <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	80 e9       	ldi	r24, 0x90	; 144
     5ac:	17 c0       	rjmp	.+46     	; 0x5dc <EVENT_USB_Host_DeviceEnumerationComplete+0x14a>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	bc d6       	rcall	.+3448   	; 0x132a <USB_Host_SetDeviceConfiguration>
     5b2:	88 23       	and	r24, r24
     5b4:	79 f0       	breq	.+30     	; 0x5d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x142>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x126>
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <EVENT_USB_Host_DeviceEnumerationComplete+0x128>
     5ba:	ed b7       	in	r30, 0x3d	; 61
     5bc:	fe b7       	in	r31, 0x3e	; 62
     5be:	31 96       	adiw	r30, 0x01	; 1
     5c0:	22 e4       	ldi	r18, 0x42	; 66
     5c2:	31 e0       	ldi	r19, 0x01	; 1
     5c4:	ad b7       	in	r26, 0x3d	; 61
     5c6:	be b7       	in	r27, 0x3e	; 62
     5c8:	12 96       	adiw	r26, 0x02	; 2
     5ca:	3c 93       	st	X, r19
     5cc:	2e 93       	st	-X, r18
     5ce:	11 97       	sbiw	r26, 0x01	; 1
     5d0:	82 83       	std	Z+2, r24	; 0x02
     5d2:	e5 cf       	rjmp	.-54     	; 0x59e <EVENT_USB_Host_DeviceEnumerationComplete+0x10c>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Accessory Mode Android Enumerated.\r\n"));
     5d4:	8d e1       	ldi	r24, 0x1D	; 29
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	4d d7       	rcall	.+3738   	; 0x1474 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     5da:	80 e6       	ldi	r24, 0x60	; 96
     5dc:	e0 de       	rcall	.-576    	; 0x39e <LEDs_SetAllLEDs>
}
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	cf 91       	pop	r28
     5e4:	df 91       	pop	r29
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	08 95       	ret

000005ec <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     5ec:	df 93       	push	r29
     5ee:	cf 93       	push	r28
     5f0:	0f 92       	push	r0
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     5f6:	89 83       	std	Y+1, r24	; 0x01
     5f8:	bf d3       	rcall	.+1918   	; 0xd78 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <EVENT_USB_Host_HostError+0x10>
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <EVENT_USB_Host_HostError+0x12>
     5fe:	ed b7       	in	r30, 0x3d	; 61
     600:	fe b7       	in	r31, 0x3e	; 62
     602:	31 96       	adiw	r30, 0x01	; 1
     604:	2e ee       	ldi	r18, 0xEE	; 238
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	ad b7       	in	r26, 0x3d	; 61
     60a:	be b7       	in	r27, 0x3e	; 62
     60c:	12 96       	adiw	r26, 0x02	; 2
     60e:	3c 93       	st	X, r19
     610:	2e 93       	st	-X, r18
     612:	11 97       	sbiw	r26, 0x01	; 1
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	82 83       	std	Z+2, r24	; 0x02
     618:	13 82       	std	Z+3, r1	; 0x03
     61a:	0d d7       	rcall	.+3610   	; 0x1436 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	80 e9       	ldi	r24, 0x90	; 144
     626:	bb de       	rcall	.-650    	; 0x39e <LEDs_SetAllLEDs>
     628:	ff cf       	rjmp	.-2      	; 0x628 <EVENT_USB_Host_HostError+0x3c>

0000062a <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     62a:	90 91 7f 01 	lds	r25, 0x017F
     62e:	2d b7       	in	r18, 0x3d	; 61
     630:	3e b7       	in	r19, 0x3e	; 62
     632:	28 50       	subi	r18, 0x08	; 8
     634:	30 40       	sbci	r19, 0x00	; 0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	3e bf       	out	0x3e, r19	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	2d bf       	out	0x3d, r18	; 61
     640:	ed b7       	in	r30, 0x3d	; 61
     642:	fe b7       	in	r31, 0x3e	; 62
     644:	31 96       	adiw	r30, 0x01	; 1
     646:	28 e9       	ldi	r18, 0x98	; 152
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	ad b7       	in	r26, 0x3d	; 61
     64c:	be b7       	in	r27, 0x3e	; 62
     64e:	12 96       	adiw	r26, 0x02	; 2
     650:	3c 93       	st	X, r19
     652:	2e 93       	st	-X, r18
     654:	11 97       	sbiw	r26, 0x01	; 1
     656:	82 83       	std	Z+2, r24	; 0x02
     658:	13 82       	std	Z+3, r1	; 0x03
     65a:	64 83       	std	Z+4, r22	; 0x04
     65c:	15 82       	std	Z+5, r1	; 0x05
     65e:	96 83       	std	Z+6, r25	; 0x06
     660:	17 82       	std	Z+7, r1	; 0x07
     662:	e9 d6       	rcall	.+3538   	; 0x1436 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     664:	2d b7       	in	r18, 0x3d	; 61
     666:	3e b7       	in	r19, 0x3e	; 62
     668:	28 5f       	subi	r18, 0xF8	; 248
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	3e bf       	out	0x3e, r19	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	2d bf       	out	0x3d, r18	; 61
     676:	80 e9       	ldi	r24, 0x90	; 144
}
     678:	92 ce       	rjmp	.-732    	; 0x39e <LEDs_SetAllLEDs>

0000067a <DCOMP_NextAndroidAccessoryInterface>:
 *  and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DCOMP_NextAndroidAccessoryInterface(void* const CurrentDescriptor)
{
     67a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     67c:	81 81       	ldd	r24, Z+1	; 0x01
     67e:	84 30       	cpi	r24, 0x04	; 4
     680:	49 f4       	brne	.+18     	; 0x694 <DCOMP_NextAndroidAccessoryInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AOA_CSCP_AOADataClass)    &&
     682:	85 81       	ldd	r24, Z+5	; 0x05
     684:	8f 3f       	cpi	r24, 0xFF	; 255
     686:	31 f4       	brne	.+12     	; 0x694 <DCOMP_NextAndroidAccessoryInterface+0x1a>
     688:	86 81       	ldd	r24, Z+6	; 0x06
     68a:	8f 3f       	cpi	r24, 0xFF	; 255
     68c:	19 f4       	brne	.+6      	; 0x694 <DCOMP_NextAndroidAccessoryInterface+0x1a>
		    (Interface->SubClass == AOA_CSCP_AOADataSubclass) &&
     68e:	87 81       	ldd	r24, Z+7	; 0x07
     690:	88 23       	and	r24, r24
     692:	11 f0       	breq	.+4      	; 0x698 <DCOMP_NextAndroidAccessoryInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	08 95       	ret

		if ((Interface->Class    == AOA_CSCP_AOADataClass)    &&
		    (Interface->SubClass == AOA_CSCP_AOADataSubclass) &&
		    (Interface->Protocol == AOA_CSCP_AOADataProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     698:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     69a:	08 95       	ret

0000069c <DCOMP_NextInterfaceBulkEndpoint>:
 *  search if another interface descriptor is found before the required endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DCOMP_NextInterfaceBulkEndpoint(void* const CurrentDescriptor)
{
     69c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     69e:	81 81       	ldd	r24, Z+1	; 0x01
     6a0:	85 30       	cpi	r24, 0x05	; 5
     6a2:	49 f4       	brne	.+18     	; 0x6b6 <DCOMP_NextInterfaceBulkEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
     6a4:	83 81       	ldd	r24, Z+3	; 0x03
     6a6:	83 70       	andi	r24, 0x03	; 3

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
     6a8:	82 30       	cpi	r24, 0x02	; 2
     6aa:	39 f4       	brne	.+14     	; 0x6ba <DCOMP_NextInterfaceBulkEndpoint+0x1e>
     6ac:	82 81       	ldd	r24, Z+2	; 0x02
     6ae:	40 d3       	rcall	.+1664   	; 0xd30 <Pipe_IsEndpointBound>
     6b0:	88 23       	and	r24, r24
     6b2:	19 f4       	brne	.+6      	; 0x6ba <DCOMP_NextInterfaceBulkEndpoint+0x1e>
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <DCOMP_NextInterfaceBulkEndpoint+0x22>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     6b6:	84 30       	cpi	r24, 0x04	; 4
     6b8:	21 f0       	breq	.+8      	; 0x6c2 <DCOMP_NextInterfaceBulkEndpoint+0x26>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	08 95       	ret
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		  return DESCRIPTOR_SEARCH_Found;
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     6c2:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6c4:	08 95       	ret

000006c6 <ProcessConfigurationDescriptor>:
 *  This routine searches for the first interface containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref AndroidHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     6c6:	af 92       	push	r10
     6c8:	bf 92       	push	r11
     6ca:	cf 92       	push	r12
     6cc:	df 92       	push	r13
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	df 93       	push	r29
     6d8:	cf 93       	push	r28
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	c4 50       	subi	r28, 0x04	; 4
     6e0:	d2 40       	sbci	r29, 0x02	; 2
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     6ec:	ae 01       	movw	r20, r28
     6ee:	4b 5f       	subi	r20, 0xFB	; 251
     6f0:	5f 4f       	sbci	r21, 0xFF	; 255
     6f2:	5a 83       	std	Y+2, r21	; 0x02
     6f4:	49 83       	std	Y+1, r20	; 0x01

	USB_Descriptor_Endpoint_t* DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t* DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	c8 2e       	mov	r12, r24
     6fa:	d1 2c       	mov	r13, r1
     6fc:	cc 0e       	add	r12, r28
     6fe:	dd 1e       	adc	r13, r29
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	b6 01       	movw	r22, r12
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	32 e0       	ldi	r19, 0x02	; 2
     708:	4d d4       	rcall	.+2202   	; 0xfa4 <USB_Host_GetDeviceConfigDescriptor>
     70a:	85 30       	cpi	r24, 0x05	; 5
     70c:	09 f4       	brne	.+2      	; 0x710 <ProcessConfigurationDescriptor+0x4a>
     70e:	46 c0       	rjmp	.+140    	; 0x79c <ProcessConfigurationDescriptor+0xd6>
     710:	86 30       	cpi	r24, 0x06	; 6
     712:	19 f0       	breq	.+6      	; 0x71a <ProcessConfigurationDescriptor+0x54>
     714:	88 23       	and	r24, r24
     716:	29 f0       	breq	.+10     	; 0x722 <ProcessConfigurationDescriptor+0x5c>
     718:	02 c0       	rjmp	.+4      	; 0x71e <ProcessConfigurationDescriptor+0x58>
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	42 c0       	rjmp	.+132    	; 0x7a2 <ProcessConfigurationDescriptor+0xdc>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return DevControlError;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	40 c0       	rjmp	.+128    	; 0x7a2 <ProcessConfigurationDescriptor+0xdc>
	}

	/* There should be only one compatible Android Accessory Mode interface in the device, attempt to find it */
	if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     722:	c6 01       	movw	r24, r12
     724:	5e 01       	movw	r10, r28
     726:	08 94       	sec
     728:	a1 1c       	adc	r10, r1
     72a:	b1 1c       	adc	r11, r1
     72c:	b5 01       	movw	r22, r10
     72e:	4d e3       	ldi	r20, 0x3D	; 61
     730:	53 e0       	ldi	r21, 0x03	; 3
     732:	8f d4       	rcall	.+2334   	; 0x1052 <USB_GetNextDescriptorComp>
     734:	88 23       	and	r24, r24
     736:	a1 f5       	brne	.+104    	; 0x7a0 <ProcessConfigurationDescriptor+0xda>
     738:	ee 24       	eor	r14, r14
     73a:	ff 24       	eor	r15, r15
     73c:	00 e0       	ldi	r16, 0x00	; 0
     73e:	10 e0       	ldi	r17, 0x00	; 0
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* Get the next Android Accessory Mode interface's data endpoint descriptor */
		if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     740:	c6 01       	movw	r24, r12
     742:	dc 2c       	mov	r13, r12
     744:	c9 2e       	mov	r12, r25
     746:	c5 01       	movw	r24, r10
     748:	ba 2c       	mov	r11, r10
     74a:	a9 2e       	mov	r10, r25
     74c:	8d 2d       	mov	r24, r13
     74e:	9c 2d       	mov	r25, r12
     750:	6b 2d       	mov	r22, r11
     752:	7a 2d       	mov	r23, r10
     754:	4e e4       	ldi	r20, 0x4E	; 78
     756:	53 e0       	ldi	r21, 0x03	; 3
     758:	7c d4       	rcall	.+2296   	; 0x1052 <USB_GetNextDescriptorComp>
     75a:	88 23       	and	r24, r24
     75c:	09 f5       	brne	.+66     	; 0x7a0 <ProcessConfigurationDescriptor+0xda>
			/* Data endpoints not found within the first Android Accessory device interface, error out */
			return NoCompatibleInterfaceFound;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     75e:	e9 81       	ldd	r30, Y+1	; 0x01
     760:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     762:	82 81       	ldd	r24, Z+2	; 0x02
     764:	87 ff       	sbrs	r24, 7
     766:	02 c0       	rjmp	.+4      	; 0x76c <ProcessConfigurationDescriptor+0xa6>
		  DataINEndpoint  = EndpointData;
     768:	8f 01       	movw	r16, r30
     76a:	01 c0       	rjmp	.+2      	; 0x76e <ProcessConfigurationDescriptor+0xa8>
		else
		  DataOUTEndpoint = EndpointData;
     76c:	7f 01       	movw	r14, r30
	                              DCOMP_NextAndroidAccessoryInterface) != DESCRIPTOR_SEARCH_COMP_Found)
	{
		return NoCompatibleInterfaceFound;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     76e:	01 15       	cp	r16, r1
     770:	11 05       	cpc	r17, r1
     772:	61 f3       	breq	.-40     	; 0x74c <ProcessConfigurationDescriptor+0x86>
     774:	e1 14       	cp	r14, r1
     776:	f1 04       	cpc	r15, r1
     778:	49 f3       	breq	.-46     	; 0x74c <ProcessConfigurationDescriptor+0x86>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the Android Accessory data IN pipe */
	Pipe_ConfigurePipe(ANDROID_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     77a:	f8 01       	movw	r30, r16
     77c:	24 81       	ldd	r18, Z+4	; 0x04
     77e:	35 81       	ldd	r19, Z+5	; 0x05
     780:	81 e8       	ldi	r24, 0x81	; 129
     782:	62 e0       	ldi	r22, 0x02	; 2
     784:	42 81       	ldd	r20, Z+2	; 0x02
     786:	01 e0       	ldi	r16, 0x01	; 1
     788:	56 d2       	rcall	.+1196   	; 0xc36 <Pipe_ConfigurePipe>

	/* Configure the Android Accessory data OUT pipe */
	Pipe_ConfigurePipe(ANDROID_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     78a:	f7 01       	movw	r30, r14
     78c:	24 81       	ldd	r18, Z+4	; 0x04
     78e:	35 81       	ldd	r19, Z+5	; 0x05
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	62 e0       	ldi	r22, 0x02	; 2
     794:	42 81       	ldd	r20, Z+2	; 0x02
     796:	4f d2       	rcall	.+1182   	; 0xc36 <Pipe_ConfigurePipe>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	03 c0       	rjmp	.+6      	; 0x7a2 <ProcessConfigurationDescriptor+0xdc>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <ProcessConfigurationDescriptor+0xdc>
		/* Get the next Android Accessory Mode interface's data endpoint descriptor */
		if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DCOMP_NextInterfaceBulkEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Data endpoints not found within the first Android Accessory device interface, error out */
			return NoCompatibleInterfaceFound;
     7a0:	84 e0       	ldi	r24, 0x04	; 4
	/* Configure the Android Accessory data OUT pipe */
	Pipe_ConfigurePipe(ANDROID_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     7a2:	cc 5f       	subi	r28, 0xFC	; 252
     7a4:	dd 4f       	sbci	r29, 0xFD	; 253
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	cf 91       	pop	r28
     7b2:	df 91       	pop	r29
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	ff 90       	pop	r15
     7ba:	ef 90       	pop	r14
     7bc:	df 90       	pop	r13
     7be:	cf 90       	pop	r12
     7c0:	bf 90       	pop	r11
     7c2:	af 90       	pop	r10
     7c4:	08 95       	ret

000007c6 <ProcessDeviceDescriptor>:
 *  This routine checks to ensure that the attached device's VID and PID matches Google's for Android devices.
 *
 *  \return An error code from the \ref AndroidHost_GetDeviceDescriptorDataCodes_t enum.
 */
uint8_t ProcessDeviceDescriptor(void)
{
     7c6:	df 93       	push	r29
     7c8:	cf 93       	push	r28
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	62 97       	sbiw	r28, 0x12	; 18
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
			 *  \return A value from the \ref USB_Host_SendControlErrorCodes_t enum to indicate the result.
			 */
			static inline uint8_t USB_Host_GetDeviceDescriptor(USB_Descriptor_Device_t* const DeviceDescriptorPtr) ATTR_NON_NULL_PTR_ARG(1);
			static inline uint8_t USB_Host_GetDeviceDescriptor(USB_Descriptor_Device_t* const DeviceDescriptorPtr)
			{
				return USB_Host_GetDescriptor(DTYPE_Device, 0, DeviceDescriptorPtr, sizeof(USB_Descriptor_Device_t));
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	ae 01       	movw	r20, r28
     7e0:	4f 5f       	subi	r20, 0xFF	; 255
     7e2:	5f 4f       	sbci	r21, 0xFF	; 255
     7e4:	22 e1       	ldi	r18, 0x12	; 18
     7e6:	c6 d5       	rcall	.+2956   	; 0x1374 <USB_Host_GetDescriptor>
	USB_Descriptor_Device_t DeviceDescriptor;

	/* Send the request to retrieve the device descriptor */
	if (USB_Host_GetDeviceDescriptor(&DeviceDescriptor) != HOST_SENDCONTROL_Successful)
     7e8:	88 23       	and	r24, r24
     7ea:	61 f4       	brne	.+24     	; 0x804 <ProcessDeviceDescriptor+0x3e>
	  return DevControlError;

	/* Validate returned data - ensure the returned data is a device descriptor */
	if (DeviceDescriptor.Header.Type != DTYPE_Device)
     7ec:	8a 81       	ldd	r24, Y+2	; 0x02
     7ee:	81 30       	cpi	r24, 0x01	; 1
     7f0:	59 f4       	brne	.+22     	; 0x808 <ProcessDeviceDescriptor+0x42>
	  return InvalidDeviceDataReturned;

	/* Check the product ID to determine if the Android device is in accessory mode */
	if ((DeviceDescriptor.ProductID != ANDROID_ACCESSORY_PRODUCT_ID) &&
     7f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     7f4:	9c 85       	ldd	r25, Y+12	; 0x0c
     7f6:	80 50       	subi	r24, 0x00	; 0
     7f8:	9d 42       	sbci	r25, 0x2D	; 45
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	91 05       	cpc	r25, r1
     7fe:	30 f0       	brcs	.+12     	; 0x80c <ProcessDeviceDescriptor+0x46>
	    (DeviceDescriptor.ProductID != ANDROID_ACCESSORY_ADB_PRODUCT_ID))
	{
		return NonAccessoryModeAndroidDevice;
     800:	84 e0       	ldi	r24, 0x04	; 4
     802:	05 c0       	rjmp	.+10     	; 0x80e <ProcessDeviceDescriptor+0x48>
{
	USB_Descriptor_Device_t DeviceDescriptor;

	/* Send the request to retrieve the device descriptor */
	if (USB_Host_GetDeviceDescriptor(&DeviceDescriptor) != HOST_SENDCONTROL_Successful)
	  return DevControlError;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	03 c0       	rjmp	.+6      	; 0x80e <ProcessDeviceDescriptor+0x48>

	/* Validate returned data - ensure the returned data is a device descriptor */
	if (DeviceDescriptor.Header.Type != DTYPE_Device)
	  return InvalidDeviceDataReturned;
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	01 c0       	rjmp	.+2      	; 0x80e <ProcessDeviceDescriptor+0x48>
	    (DeviceDescriptor.ProductID != ANDROID_ACCESSORY_ADB_PRODUCT_ID))
	{
		return NonAccessoryModeAndroidDevice;
	}

	return AccessoryModeAndroidDevice;
     80c:	85 e0       	ldi	r24, 0x05	; 5
}
     80e:	62 96       	adiw	r28, 0x12	; 18
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	cf 91       	pop	r28
     81c:	df 91       	pop	r29
     81e:	08 95       	ret

00000820 <Android_GetAccessoryProtocol>:

#include "AndroidAccessoryCommands.h"

uint8_t Android_GetAccessoryProtocol(uint16_t* const Protocol)
{
	USB_ControlRequest = (USB_Request_Header_t)
     820:	a7 e7       	ldi	r26, 0x77	; 119
     822:	b1 e0       	ldi	r27, 0x01	; 1
     824:	e9 e5       	ldi	r30, 0x59	; 89
     826:	f1 e0       	ldi	r31, 0x01	; 1
     828:	28 e0       	ldi	r18, 0x08	; 8
     82a:	01 90       	ld	r0, Z+
     82c:	0d 92       	st	X+, r0
     82e:	21 50       	subi	r18, 0x01	; 1
     830:	e1 f7       	brne	.-8      	; 0x82a <Android_GetAccessoryProtocol+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     832:	10 92 a7 00 	sts	0x00A7, r1
		.wLength       = sizeof(uint16_t),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(Protocol);
}
     836:	7a c4       	rjmp	.+2292   	; 0x112c <USB_Host_SendControlRequest>

00000838 <Android_SendString>:

uint8_t Android_SendString(const uint8_t StringIndex,
                           const char* const String)
{
     838:	97 2f       	mov	r25, r23
	{
		.bmRequestType = (REQDIR_HOSTTODEVICE | REQTYPE_VENDOR | REQREC_DEVICE),
		.bRequest      = AOA_REQ_SendString,
		.wValue        = 0,
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
     83a:	e6 2f       	mov	r30, r22
     83c:	f7 2f       	mov	r31, r23
     83e:	df 01       	movw	r26, r30
     840:	0d 90       	ld	r0, X+
     842:	00 20       	and	r0, r0
     844:	e9 f7       	brne	.-6      	; 0x840 <Android_SendString+0x8>
}

uint8_t Android_SendString(const uint8_t StringIndex,
                           const char* const String)
{
	USB_ControlRequest = (USB_Request_Header_t)
     846:	20 e4       	ldi	r18, 0x40	; 64
     848:	20 93 77 01 	sts	0x0177, r18
     84c:	24 e3       	ldi	r18, 0x34	; 52
     84e:	20 93 78 01 	sts	0x0178, r18
     852:	10 92 7a 01 	sts	0x017A, r1
     856:	10 92 79 01 	sts	0x0179, r1
     85a:	80 93 7b 01 	sts	0x017B, r24
     85e:	10 92 7c 01 	sts	0x017C, r1
	{
		.bmRequestType = (REQDIR_HOSTTODEVICE | REQTYPE_VENDOR | REQREC_DEVICE),
		.bRequest      = AOA_REQ_SendString,
		.wValue        = 0,
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
     862:	ae 1b       	sub	r26, r30
     864:	bf 0b       	sbc	r27, r31
}

uint8_t Android_SendString(const uint8_t StringIndex,
                           const char* const String)
{
	USB_ControlRequest = (USB_Request_Header_t)
     866:	b0 93 7e 01 	sts	0x017E, r27
     86a:	a0 93 7d 01 	sts	0x017D, r26
     86e:	10 92 a7 00 	sts	0x00A7, r1
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest((char*)String);
     872:	86 2f       	mov	r24, r22
}
     874:	5b c4       	rjmp	.+2230   	; 0x112c <USB_Host_SendControlRequest>

00000876 <Android_StartAccessoryMode>:

uint8_t Android_StartAccessoryMode(void)
{
	USB_ControlRequest = (USB_Request_Header_t)
     876:	a7 e7       	ldi	r26, 0x77	; 119
     878:	b1 e0       	ldi	r27, 0x01	; 1
     87a:	e1 e5       	ldi	r30, 0x51	; 81
     87c:	f1 e0       	ldi	r31, 0x01	; 1
     87e:	88 e0       	ldi	r24, 0x08	; 8
     880:	01 90       	ld	r0, Z+
     882:	0d 92       	st	X+, r0
     884:	81 50       	subi	r24, 0x01	; 1
     886:	e1 f7       	brne	.-8      	; 0x880 <Android_StartAccessoryMode+0xa>
     888:	10 92 a7 00 	sts	0x00A7, r1
		.wIndex        = 0,
		.wLength       = 0,
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(NULL);
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
}
     890:	4d c4       	rjmp	.+2202   	; 0x112c <USB_Host_SendControlRequest>

00000892 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     892:	80 91 9e 00 	lds	r24, 0x009E
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	81 70       	andi	r24, 0x01	; 1
     89a:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     89c:	20 91 a0 00 	lds	r18, 0x00A0
     8a0:	2d 7f       	andi	r18, 0xFD	; 253
     8a2:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     8a6:	20 91 9e 00 	lds	r18, 0x009E
     8aa:	22 60       	ori	r18, 0x02	; 2
     8ac:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     8b0:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     8b4:	21 fd       	sbrc	r18, 1
     8b6:	fc cf       	rjmp	.-8      	; 0x8b0 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8b8:	20 91 9e 00 	lds	r18, 0x009E
     8bc:	21 60       	ori	r18, 0x01	; 1
     8be:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     8c2:	10 92 75 01 	sts	0x0175, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     8c6:	20 91 a0 00 	lds	r18, 0x00A0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	20 72       	andi	r18, 0x20	; 32
     8ce:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     8d0:	40 91 a0 00 	lds	r20, 0x00A0
     8d4:	4f 7d       	andi	r20, 0xDF	; 223
     8d6:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8da:	40 91 9f 00 	lds	r20, 0x009F
     8de:	4f 7d       	andi	r20, 0xDF	; 223
     8e0:	40 93 9f 00 	sts	0x009F, r20
     8e4:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     8e6:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     8ea:	55 ff       	sbrs	r21, 5
     8ec:	0b c0       	rjmp	.+22     	; 0x904 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8ee:	40 91 9f 00 	lds	r20, 0x009F
     8f2:	4f 7d       	andi	r20, 0xDF	; 223
     8f4:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     8f8:	40 91 9f 00 	lds	r20, 0x009F
     8fc:	4d 7f       	andi	r20, 0xFD	; 253
     8fe:	40 93 9f 00 	sts	0x009F, r20
     902:	08 c0       	rjmp	.+16     	; 0x914 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     904:	ef ec       	ldi	r30, 0xCF	; 207
     906:	f7 e0       	ldi	r31, 0x07	; 7
     908:	31 97       	sbiw	r30, 0x01	; 1
     90a:	f1 f7       	brne	.-4      	; 0x908 <USB_Host_ResetDevice+0x76>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <USB_Host_ResetDevice+0x7c>
     90e:	00 00       	nop
     910:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     912:	49 f7       	brne	.-46     	; 0x8e6 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     914:	21 15       	cp	r18, r1
     916:	31 05       	cpc	r19, r1
     918:	29 f0       	breq	.+10     	; 0x924 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     91a:	20 91 a0 00 	lds	r18, 0x00A0
     91e:	20 62       	ori	r18, 0x20	; 32
     920:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     924:	00 97       	sbiw	r24, 0x00	; 0
     926:	29 f4       	brne	.+10     	; 0x932 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     928:	80 91 9e 00 	lds	r24, 0x009E
     92c:	8e 7f       	andi	r24, 0xFE	; 254
     92e:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     932:	80 91 a0 00 	lds	r24, 0x00A0
     936:	82 60       	ori	r24, 0x02	; 2
     938:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     93c:	08 95       	ret

0000093e <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     93e:	40 91 9e 00 	lds	r20, 0x009E
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	41 70       	andi	r20, 0x01	; 1
     946:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     948:	20 91 a0 00 	lds	r18, 0x00A0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	20 72       	andi	r18, 0x20	; 32
     950:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     952:	90 91 a0 00 	lds	r25, 0x00A0
     956:	9f 7d       	andi	r25, 0xDF	; 223
     958:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     95c:	90 91 9f 00 	lds	r25, 0x009F
     960:	9f 7d       	andi	r25, 0xDF	; 223
     962:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     966:	90 91 9e 00 	lds	r25, 0x009E
     96a:	91 60       	ori	r25, 0x01	; 1
     96c:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     970:	26 c0       	rjmp	.+76     	; 0x9be <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     972:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     976:	95 ff       	sbrs	r25, 5
     978:	06 c0       	rjmp	.+12     	; 0x986 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     97a:	90 91 9f 00 	lds	r25, 0x009F
     97e:	9f 7d       	andi	r25, 0xDF	; 223
     980:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     984:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     986:	90 91 7f 01 	lds	r25, 0x017F
     98a:	91 30       	cpi	r25, 0x01	; 1
     98c:	d9 f0       	breq	.+54     	; 0x9c4 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     98e:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     992:	94 ff       	sbrs	r25, 4
     994:	09 c0       	rjmp	.+18     	; 0x9a8 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     996:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     99a:	80 91 a6 00 	lds	r24, 0x00A6
     99e:	8f 7e       	andi	r24, 0xEF	; 239
     9a0:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     9a4:	82 e0       	ldi	r24, 0x02	; 2

			break;
     9a6:	0f c0       	rjmp	.+30     	; 0x9c6 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     9a8:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     9ac:	91 ff       	sbrs	r25, 1
     9ae:	07 c0       	rjmp	.+14     	; 0x9be <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     9b0:	80 91 a6 00 	lds	r24, 0x00A6
     9b4:	8d 7f       	andi	r24, 0xFD	; 253
     9b6:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     9ba:	83 e0       	ldi	r24, 0x03	; 3

			break;
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     9be:	88 23       	and	r24, r24
     9c0:	c1 f6       	brne	.-80     	; 0x972 <USB_Host_WaitMS+0x34>
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     9c4:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     9c6:	41 15       	cp	r20, r1
     9c8:	51 05       	cpc	r21, r1
     9ca:	29 f4       	brne	.+10     	; 0x9d6 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     9cc:	90 91 9e 00 	lds	r25, 0x009E
     9d0:	9e 7f       	andi	r25, 0xFE	; 254
     9d2:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     9d6:	21 15       	cp	r18, r1
     9d8:	31 05       	cpc	r19, r1
     9da:	29 f0       	breq	.+10     	; 0x9e6 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     9dc:	90 91 a0 00 	lds	r25, 0x00A0
     9e0:	90 62       	ori	r25, 0x20	; 32
     9e2:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     9e6:	08 95       	ret

000009e8 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	df 93       	push	r29
     9ee:	cf 93       	push	r28
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	28 97       	sbiw	r28, 0x08	; 8
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     a00:	80 91 7f 01 	lds	r24, 0x017F
     a04:	85 30       	cpi	r24, 0x05	; 5
     a06:	09 f4       	brne	.+2      	; 0xa0a <USB_Host_ProcessNextHostState+0x22>
     a08:	97 c0       	rjmp	.+302    	; 0xb38 <USB_Host_ProcessNextHostState+0x150>
     a0a:	86 30       	cpi	r24, 0x06	; 6
     a0c:	68 f4       	brcc	.+26     	; 0xa28 <USB_Host_ProcessNextHostState+0x40>
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	c1 f1       	breq	.+112    	; 0xa82 <USB_Host_ProcessNextHostState+0x9a>
     a12:	83 30       	cpi	r24, 0x03	; 3
     a14:	18 f4       	brcc	.+6      	; 0xa1c <USB_Host_ProcessNextHostState+0x34>
     a16:	88 23       	and	r24, r24
     a18:	a1 f0       	breq	.+40     	; 0xa42 <USB_Host_ProcessNextHostState+0x5a>
     a1a:	02 c1       	rjmp	.+516    	; 0xc20 <USB_Host_ProcessNextHostState+0x238>
     a1c:	83 30       	cpi	r24, 0x03	; 3
     a1e:	c9 f1       	breq	.+114    	; 0xa92 <USB_Host_ProcessNextHostState+0xaa>
     a20:	84 30       	cpi	r24, 0x04	; 4
     a22:	09 f0       	breq	.+2      	; 0xa26 <USB_Host_ProcessNextHostState+0x3e>
     a24:	fd c0       	rjmp	.+506    	; 0xc20 <USB_Host_ProcessNextHostState+0x238>
     a26:	60 c0       	rjmp	.+192    	; 0xae8 <USB_Host_ProcessNextHostState+0x100>
     a28:	87 30       	cpi	r24, 0x07	; 7
     a2a:	09 f4       	brne	.+2      	; 0xa2e <USB_Host_ProcessNextHostState+0x46>
     a2c:	9c c0       	rjmp	.+312    	; 0xb66 <USB_Host_ProcessNextHostState+0x17e>
     a2e:	87 30       	cpi	r24, 0x07	; 7
     a30:	08 f4       	brcc	.+2      	; 0xa34 <USB_Host_ProcessNextHostState+0x4c>
     a32:	8d c0       	rjmp	.+282    	; 0xb4e <USB_Host_ProcessNextHostState+0x166>
     a34:	88 30       	cpi	r24, 0x08	; 8
     a36:	09 f4       	brne	.+2      	; 0xa3a <USB_Host_ProcessNextHostState+0x52>
     a38:	b6 c0       	rjmp	.+364    	; 0xba6 <USB_Host_ProcessNextHostState+0x1be>
     a3a:	89 30       	cpi	r24, 0x09	; 9
     a3c:	09 f0       	breq	.+2      	; 0xa40 <USB_Host_ProcessNextHostState+0x58>
     a3e:	f0 c0       	rjmp	.+480    	; 0xc20 <USB_Host_ProcessNextHostState+0x238>
     a40:	d7 c0       	rjmp	.+430    	; 0xbf0 <USB_Host_ProcessNextHostState+0x208>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     a42:	00 91 73 01 	lds	r16, 0x0173
     a46:	10 91 74 01 	lds	r17, 0x0174
     a4a:	01 15       	cp	r16, r1
     a4c:	11 05       	cpc	r17, r1
     a4e:	09 f4       	brne	.+2      	; 0xa52 <USB_Host_ProcessNextHostState+0x6a>
     a50:	e7 c0       	rjmp	.+462    	; 0xc20 <USB_Host_ProcessNextHostState+0x238>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	74 df       	rcall	.-280    	; 0x93e <USB_Host_WaitMS>
     a56:	68 2f       	mov	r22, r24
     a58:	88 23       	and	r24, r24
     a5a:	31 f0       	breq	.+12     	; 0xa68 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     a5c:	80 91 72 01 	lds	r24, 0x0172
     a60:	80 93 7f 01 	sts	0x017F, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     a64:	81 e0       	ldi	r24, 0x01	; 1
					break;
     a66:	d0 c0       	rjmp	.+416    	; 0xc08 <USB_Host_ProcessNextHostState+0x220>
				}

				if (!(--WaitMSRemaining))
     a68:	01 50       	subi	r16, 0x01	; 1
     a6a:	10 40       	sbci	r17, 0x00	; 0
     a6c:	10 93 74 01 	sts	0x0174, r17
     a70:	00 93 73 01 	sts	0x0173, r16
     a74:	01 15       	cp	r16, r1
     a76:	11 05       	cpc	r17, r1
     a78:	09 f0       	breq	.+2      	; 0xa7c <USB_Host_ProcessNextHostState+0x94>
     a7a:	d2 c0       	rjmp	.+420    	; 0xc20 <USB_Host_ProcessNextHostState+0x238>
				  USB_HostState = PostWaitState;
     a7c:	80 91 72 01 	lds	r24, 0x0172
     a80:	05 c0       	rjmp	.+10     	; 0xa8c <USB_Host_ProcessNextHostState+0xa4>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     a82:	10 92 74 01 	sts	0x0174, r1
     a86:	10 92 73 01 	sts	0x0173, r1

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	80 93 7f 01 	sts	0x017F, r24
			break;
     a90:	c7 c0       	rjmp	.+398    	; 0xc20 <USB_Host_ProcessNextHostState+0x238>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     a92:	80 91 73 01 	lds	r24, 0x0173
     a96:	90 91 74 01 	lds	r25, 0x0174
     a9a:	9c 01       	movw	r18, r24
     a9c:	21 50       	subi	r18, 0x01	; 1
     a9e:	30 40       	sbci	r19, 0x00	; 0
     aa0:	30 93 74 01 	sts	0x0174, r19
     aa4:	20 93 73 01 	sts	0x0173, r18
     aa8:	00 97       	sbiw	r24, 0x00	; 0
     aaa:	39 f0       	breq	.+14     	; 0xaba <USB_Host_ProcessNextHostState+0xd2>
     aac:	8f ec       	ldi	r24, 0xCF	; 207
     aae:	97 e0       	ldi	r25, 0x07	; 7
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <USB_Host_ProcessNextHostState+0xc8>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <USB_Host_ProcessNextHostState+0xce>
     ab6:	00 00       	nop
     ab8:	b3 c0       	rjmp	.+358    	; 0xc20 <USB_Host_ProcessNextHostState+0x238>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     aba:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     abc:	80 91 d8 00 	lds	r24, 0x00D8
     ac0:	80 61       	ori	r24, 0x10	; 16
     ac2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     ac6:	80 91 dd 00 	lds	r24, 0x00DD
     aca:	8b 7f       	andi	r24, 0xFB	; 251
     acc:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     ad0:	80 91 d7 00 	lds	r24, 0x00D7
     ad4:	80 61       	ori	r24, 0x10	; 16
     ad6:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     ada:	80 91 dd 00 	lds	r24, 0x00DD
     ade:	82 60       	ori	r24, 0x02	; 2
     ae0:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     ae4:	84 e0       	ldi	r24, 0x04	; 4
     ae6:	d2 cf       	rjmp	.-92     	; 0xa8c <USB_Host_ProcessNextHostState+0xa4>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     ae8:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     aec:	80 ff       	sbrs	r24, 0
     aee:	98 c0       	rjmp	.+304    	; 0xc20 <USB_Host_ProcessNextHostState+0x238>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     af0:	80 91 9f 00 	lds	r24, 0x009F
     af4:	8e 7f       	andi	r24, 0xFE	; 254
     af6:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     afa:	80 91 9f 00 	lds	r24, 0x009F
     afe:	8d 7f       	andi	r24, 0xFD	; 253
     b00:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b04:	80 91 df 00 	lds	r24, 0x00DF
     b08:	8d 7f       	andi	r24, 0xFD	; 253
     b0a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     b0e:	80 91 de 00 	lds	r24, 0x00DE
     b12:	82 60       	ori	r24, 0x02	; 2
     b14:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b18:	80 91 9e 00 	lds	r24, 0x009E
     b1c:	81 60       	ori	r24, 0x01	; 1
     b1e:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     b22:	f0 d0       	rcall	.+480    	; 0xd04 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     b24:	10 92 7f 01 	sts	0x017F, r1
     b28:	84 e6       	ldi	r24, 0x64	; 100
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	90 93 74 01 	sts	0x0174, r25
     b30:	80 93 73 01 	sts	0x0173, r24
     b34:	85 e0       	ldi	r24, 0x05	; 5
     b36:	59 c0       	rjmp	.+178    	; 0xbea <USB_Host_ProcessNextHostState+0x202>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     b38:	ac de       	rcall	.-680    	; 0x892 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     b3a:	10 92 7f 01 	sts	0x017F, r1
     b3e:	88 ec       	ldi	r24, 0xC8	; 200
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	90 93 74 01 	sts	0x0174, r25
     b46:	80 93 73 01 	sts	0x0173, r24
     b4a:	86 e0       	ldi	r24, 0x06	; 6
     b4c:	4e c0       	rjmp	.+156    	; 0xbea <USB_Host_ProcessNextHostState+0x202>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	20 e4       	ldi	r18, 0x40	; 64
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	01 e0       	ldi	r16, 0x01	; 1
     b5a:	6d d0       	rcall	.+218    	; 0xc36 <Pipe_ConfigurePipe>
     b5c:	88 23       	and	r24, r24
     b5e:	09 f4       	brne	.+2      	; 0xb62 <USB_Host_ProcessNextHostState+0x17a>
     b60:	4f c0       	rjmp	.+158    	; 0xc00 <USB_Host_ProcessNextHostState+0x218>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     b62:	87 e0       	ldi	r24, 0x07	; 7
     b64:	93 cf       	rjmp	.-218    	; 0xa8c <USB_Host_ProcessNextHostState+0xa4>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     b66:	a7 e7       	ldi	r26, 0x77	; 119
     b68:	b1 e0       	ldi	r27, 0x01	; 1
     b6a:	e9 e6       	ldi	r30, 0x69	; 105
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
     b6e:	88 e0       	ldi	r24, 0x08	; 8
     b70:	01 90       	ld	r0, Z+
     b72:	0d 92       	st	X+, r0
     b74:	81 50       	subi	r24, 0x01	; 1
     b76:	e1 f7       	brne	.-8      	; 0xb70 <USB_Host_ProcessNextHostState+0x188>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b78:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	d5 d2       	rcall	.+1450   	; 0x112c <USB_Host_SendControlRequest>
     b82:	68 2f       	mov	r22, r24
     b84:	88 23       	and	r24, r24
     b86:	09 f0       	breq	.+2      	; 0xb8a <USB_Host_ProcessNextHostState+0x1a2>
     b88:	3e c0       	rjmp	.+124    	; 0xc06 <USB_Host_ProcessNextHostState+0x21e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     b8a:	88 85       	ldd	r24, Y+8	; 0x08
     b8c:	80 93 71 01 	sts	0x0171, r24

			USB_Host_ResetDevice();
     b90:	80 de       	rcall	.-768    	; 0x892 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     b92:	10 92 7f 01 	sts	0x017F, r1
     b96:	88 ec       	ldi	r24, 0xC8	; 200
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	90 93 74 01 	sts	0x0174, r25
     b9e:	80 93 73 01 	sts	0x0173, r24
     ba2:	88 e0       	ldi	r24, 0x08	; 8
     ba4:	22 c0       	rjmp	.+68     	; 0xbea <USB_Host_ProcessNextHostState+0x202>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     ba6:	20 91 71 01 	lds	r18, 0x0171
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	01 e0       	ldi	r16, 0x01	; 1
     bb4:	40 d0       	rcall	.+128    	; 0xc36 <Pipe_ConfigurePipe>
     bb6:	88 23       	and	r24, r24
     bb8:	19 f1       	breq	.+70     	; 0xc00 <USB_Host_ProcessNextHostState+0x218>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     bba:	a7 e7       	ldi	r26, 0x77	; 119
     bbc:	b1 e0       	ldi	r27, 0x01	; 1
     bbe:	e1 e6       	ldi	r30, 0x61	; 97
     bc0:	f1 e0       	ldi	r31, 0x01	; 1
     bc2:	88 e0       	ldi	r24, 0x08	; 8
     bc4:	01 90       	ld	r0, Z+
     bc6:	0d 92       	st	X+, r0
     bc8:	81 50       	subi	r24, 0x01	; 1
     bca:	e1 f7       	brne	.-8      	; 0xbc4 <USB_Host_ProcessNextHostState+0x1dc>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	ad d2       	rcall	.+1370   	; 0x112c <USB_Host_SendControlRequest>
     bd2:	68 2f       	mov	r22, r24
     bd4:	88 23       	and	r24, r24
     bd6:	b9 f4       	brne	.+46     	; 0xc06 <USB_Host_ProcessNextHostState+0x21e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     bd8:	10 92 7f 01 	sts	0x017F, r1
     bdc:	84 e6       	ldi	r24, 0x64	; 100
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	90 93 74 01 	sts	0x0174, r25
     be4:	80 93 73 01 	sts	0x0173, r24
     be8:	89 e0       	ldi	r24, 0x09	; 9
     bea:	80 93 72 01 	sts	0x0172, r24
			break;
     bee:	18 c0       	rjmp	.+48     	; 0xc20 <USB_Host_ProcessNextHostState+0x238>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     bf6:	8a e0       	ldi	r24, 0x0A	; 10
     bf8:	80 93 7f 01 	sts	0x017F, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     bfc:	4a dc       	rcall	.-1900   	; 0x492 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     bfe:	10 c0       	rjmp	.+32     	; 0xc20 <USB_Host_ProcessNextHostState+0x238>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     c00:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     c02:	84 e0       	ldi	r24, 0x04	; 4
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <USB_Host_ProcessNextHostState+0x220>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     c06:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     c08:	90 91 7f 01 	lds	r25, 0x017F
     c0c:	91 30       	cpi	r25, 0x01	; 1
     c0e:	41 f0       	breq	.+16     	; 0xc20 <USB_Host_ProcessNextHostState+0x238>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     c10:	0c dd       	rcall	.-1512   	; 0x62a <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c12:	80 91 dd 00 	lds	r24, 0x00DD
     c16:	81 60       	ori	r24, 0x01	; 1
     c18:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     c1c:	35 dc       	rcall	.-1942   	; 0x488 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c1e:	c4 d0       	rcall	.+392    	; 0xda8 <USB_ResetInterface>
	}
}
     c20:	28 96       	adiw	r28, 0x08	; 8
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	08 95       	ret

00000c36 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     c36:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     c38:	58 2f       	mov	r21, r24
     c3a:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     c3c:	87 ff       	sbrs	r24, 7
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <Pipe_ConfigurePipe+0xe>
     c40:	80 e1       	ldi	r24, 0x10	; 16
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <Pipe_ConfigurePipe+0x10>
     c44:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     c46:	57 30       	cpi	r21, 0x07	; 7
     c48:	08 f0       	brcs	.+2      	; 0xc4c <Pipe_ConfigurePipe+0x16>
     c4a:	59 c0       	rjmp	.+178    	; 0xcfe <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     c4c:	66 23       	and	r22, r22
     c4e:	09 f4       	brne	.+2      	; 0xc52 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     c50:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     c52:	4f 70       	andi	r20, 0x0F	; 15
     c54:	62 95       	swap	r22
     c56:	66 0f       	add	r22, r22
     c58:	66 0f       	add	r22, r22
     c5a:	60 7c       	andi	r22, 0xC0	; 192
     c5c:	64 2b       	or	r22, r20
     c5e:	68 2b       	or	r22, r24
     c60:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c62:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c64:	84 2f       	mov	r24, r20
     c66:	8f 70       	andi	r24, 0x0F	; 15
     c68:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     c6c:	45 17       	cp	r20, r21
     c6e:	a1 f4       	brne	.+40     	; 0xc98 <Pipe_ConfigurePipe+0x62>
     c70:	88 e0       	ldi	r24, 0x08	; 8
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     c78:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     c7e:	82 17       	cp	r24, r18
     c80:	93 07       	cpc	r25, r19
     c82:	10 f4       	brcc	.+4      	; 0xc88 <Pipe_ConfigurePipe+0x52>
     c84:	75 30       	cpi	r23, 0x05	; 5
     c86:	c1 f7       	brne	.-16     	; 0xc78 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     c88:	87 2f       	mov	r24, r23
     c8a:	82 95       	swap	r24
     c8c:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c8e:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     c90:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     c92:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	08 c0       	rjmp	.+16     	; 0xca8 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     c98:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     c9c:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     ca0:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     ca4:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     ca8:	81 ff       	sbrs	r24, 1
     caa:	20 c0       	rjmp	.+64     	; 0xcec <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     cac:	90 91 a9 00 	lds	r25, 0x00A9
     cb0:	9e 7f       	andi	r25, 0xFE	; 254
     cb2:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     cb6:	90 91 ab 00 	lds	r25, 0x00AB
     cba:	9d 7f       	andi	r25, 0xFD	; 253
     cbc:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     cc0:	90 91 a9 00 	lds	r25, 0x00A9
     cc4:	91 60       	ori	r25, 0x01	; 1
     cc6:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     cca:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     cce:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     cd2:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     cd6:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     cda:	80 91 a9 00 	lds	r24, 0x00A9
     cde:	80 62       	ori	r24, 0x20	; 32
     ce0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     ce4:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     ce8:	87 ff       	sbrs	r24, 7
     cea:	09 c0       	rjmp	.+18     	; 0xcfe <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     cec:	4f 5f       	subi	r20, 0xFF	; 255
     cee:	47 30       	cpi	r20, 0x07	; 7
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <Pipe_ConfigurePipe+0xbe>
     cf2:	b8 cf       	rjmp	.-144    	; 0xc64 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     cf4:	5f 70       	andi	r21, 0x0F	; 15
     cf6:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     cfe:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     d00:	0f 91       	pop	r16
     d02:	08 95       	ret

00000d04 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     d04:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	98 2f       	mov	r25, r24
     d0c:	9f 70       	andi	r25, 0x0F	; 15
     d0e:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     d12:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     d16:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     d1a:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     d1e:	90 91 a9 00 	lds	r25, 0x00A9
     d22:	9e 7f       	andi	r25, 0xFE	; 254
     d24:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d28:	8f 5f       	subi	r24, 0xFF	; 255
     d2a:	87 30       	cpi	r24, 0x07	; 7
     d2c:	71 f7       	brne	.-36     	; 0xd0a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     d2e:	08 95       	ret

00000d30 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     d30:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     d34:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d38:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d3a:	29 2f       	mov	r18, r25
     d3c:	2f 70       	andi	r18, 0x0F	; 15
     d3e:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     d42:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     d46:	27 ff       	sbrs	r18, 7
     d48:	0c c0       	rjmp	.+24     	; 0xd62 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     d4a:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     d4e:	53 2f       	mov	r21, r19
     d50:	5f 70       	andi	r21, 0x0F	; 15
     d52:	30 ff       	sbrs	r19, 0
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <Pipe_IsEndpointBound+0x2a>
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <Pipe_IsEndpointBound+0x2c>
     d5a:	20 e8       	ldi	r18, 0x80	; 128
     d5c:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     d5e:	28 17       	cp	r18, r24
     d60:	49 f0       	breq	.+18     	; 0xd74 <Pipe_IsEndpointBound+0x44>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d62:	9f 5f       	subi	r25, 0xFF	; 255
     d64:	97 30       	cpi	r25, 0x07	; 7
     d66:	49 f7       	brne	.-46     	; 0xd3a <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d68:	84 2f       	mov	r24, r20
     d6a:	8f 70       	andi	r24, 0x0F	; 15
     d6c:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     d74:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     d76:	08 95       	ret

00000d78 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     d78:	75 d0       	rcall	.+234    	; 0xe64 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d7a:	7c d0       	rcall	.+248    	; 0xe74 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     d7c:	e0 ee       	ldi	r30, 0xE0	; 224
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	81 60       	ori	r24, 0x01	; 1
     d84:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     d86:	e8 ed       	ldi	r30, 0xD8	; 216
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8f 77       	andi	r24, 0x7F	; 127
     d8e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d90:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     d92:	a7 ed       	ldi	r26, 0xD7	; 215
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	8c 91       	ld	r24, X
     d98:	8e 7f       	andi	r24, 0xFE	; 254
     d9a:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d9c:	80 81       	ld	r24, Z
     d9e:	8f 7e       	andi	r24, 0xEF	; 239
     da0:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     da2:	10 92 76 01 	sts	0x0176, r1
}
     da6:	08 95       	ret

00000da8 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     da8:	5d d0       	rcall	.+186    	; 0xe64 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     daa:	64 d0       	rcall	.+200    	; 0xe74 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     dac:	80 91 d8 00 	lds	r24, 0x00D8
     db0:	8f 77       	andi	r24, 0x7F	; 127
     db2:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     db6:	80 91 d8 00 	lds	r24, 0x00D8
     dba:	80 68       	ori	r24, 0x80	; 128
     dbc:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     dc0:	80 91 d8 00 	lds	r24, 0x00D8
     dc4:	8f 7d       	andi	r24, 0xDF	; 223
     dc6:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     dca:	80 91 d7 00 	lds	r24, 0x00D7
     dce:	8f 77       	andi	r24, 0x7F	; 127
     dd0:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dd4:	8c e0       	ldi	r24, 0x0C	; 12
     dd6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     dd8:	8e e0       	ldi	r24, 0x0E	; 14
     dda:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     ddc:	09 b4       	in	r0, 0x29	; 41
     dde:	00 fe       	sbrs	r0, 0
     de0:	fd cf       	rjmp	.-6      	; 0xddc <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	80 93 7f 01 	sts	0x017F, r24
	USB_Host_ConfigurationNumber = 0;
     de8:	10 92 75 01 	sts	0x0175, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     dec:	80 e4       	ldi	r24, 0x40	; 64
     dee:	80 93 71 01 	sts	0x0171, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     df2:	80 91 d8 00 	lds	r24, 0x00D8
     df6:	80 64       	ori	r24, 0x40	; 64
     df8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     dfc:	80 91 dd 00 	lds	r24, 0x00DD
     e00:	81 60       	ori	r24, 0x01	; 1
     e02:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     e06:	80 91 dd 00 	lds	r24, 0x00DD
     e0a:	84 60       	ori	r24, 0x04	; 4
     e0c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     e10:	80 91 d7 00 	lds	r24, 0x00D7
     e14:	8f 7e       	andi	r24, 0xEF	; 239
     e16:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     e1a:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     e1c:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     e1e:	80 91 de 00 	lds	r24, 0x00DE
     e22:	81 60       	ori	r24, 0x01	; 1
     e24:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     e28:	80 91 de 00 	lds	r24, 0x00DE
     e2c:	84 60       	ori	r24, 0x04	; 4
     e2e:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e32:	80 91 e0 00 	lds	r24, 0x00E0
     e36:	8e 7f       	andi	r24, 0xFE	; 254
     e38:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     e3c:	80 91 d8 00 	lds	r24, 0x00D8
     e40:	80 61       	ori	r24, 0x10	; 16
     e42:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e46:	08 95       	ret

00000e48 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     e48:	e8 ed       	ldi	r30, 0xD8	; 216
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7e       	andi	r24, 0xEF	; 239
     e50:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     e52:	e7 ed       	ldi	r30, 0xD7	; 215
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	81 60       	ori	r24, 0x01	; 1
     e5a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	80 93 76 01 	sts	0x0176, r24

	USB_ResetInterface();
}
     e62:	a2 cf       	rjmp	.-188    	; 0xda8 <USB_ResetInterface>

00000e64 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e64:	e8 ed       	ldi	r30, 0xD8	; 216
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8c 7f       	andi	r24, 0xFC	; 252
     e6c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     e6e:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     e72:	08 95       	ret

00000e74 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e74:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     e78:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     e7c:	08 95       	ret

00000e7e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	0b b6       	in	r0, 0x3b	; 59
     e88:	0f 92       	push	r0
     e8a:	11 24       	eor	r1, r1
     e8c:	2f 93       	push	r18
     e8e:	3f 93       	push	r19
     e90:	4f 93       	push	r20
     e92:	5f 93       	push	r21
     e94:	6f 93       	push	r22
     e96:	7f 93       	push	r23
     e98:	8f 93       	push	r24
     e9a:	9f 93       	push	r25
     e9c:	af 93       	push	r26
     e9e:	bf 93       	push	r27
     ea0:	ef 93       	push	r30
     ea2:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ea4:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     ea8:	85 ff       	sbrs	r24, 5
     eaa:	0a c0       	rjmp	.+20     	; 0xec0 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     eac:	80 91 a0 00 	lds	r24, 0x00A0
     eb0:	85 ff       	sbrs	r24, 5
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     eb4:	80 91 9f 00 	lds	r24, 0x009F
     eb8:	8f 7d       	andi	r24, 0xDF	; 223
     eba:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     ebe:	0c d1       	rcall	.+536    	; 0x10d8 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     ec0:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     ec4:	81 ff       	sbrs	r24, 1
     ec6:	15 c0       	rjmp	.+42     	; 0xef2 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     ec8:	80 91 a0 00 	lds	r24, 0x00A0
     ecc:	81 ff       	sbrs	r24, 1
     ece:	11 c0       	rjmp	.+34     	; 0xef2 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ed0:	80 91 9f 00 	lds	r24, 0x009F
     ed4:	8d 7f       	andi	r24, 0xFD	; 253
     ed6:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     eda:	80 91 9f 00 	lds	r24, 0x009F
     ede:	8e 7f       	andi	r24, 0xFE	; 254
     ee0:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     ee4:	80 91 a0 00 	lds	r24, 0x00A0
     ee8:	8d 7f       	andi	r24, 0xFD	; 253
     eea:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     eee:	cc da       	rcall	.-2664   	; 0x488 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     ef0:	5b df       	rcall	.-330    	; 0xda8 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     ef2:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     ef6:	81 ff       	sbrs	r24, 1
     ef8:	15 c0       	rjmp	.+42     	; 0xf24 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     efa:	80 91 de 00 	lds	r24, 0x00DE
     efe:	81 ff       	sbrs	r24, 1
     f00:	11 c0       	rjmp	.+34     	; 0xf24 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     f02:	80 91 df 00 	lds	r24, 0x00DF
     f06:	8d 7f       	andi	r24, 0xFD	; 253
     f08:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     f0c:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f0e:	80 91 dd 00 	lds	r24, 0x00DD
     f12:	81 60       	ori	r24, 0x01	; 1
     f14:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	68 db       	rcall	.-2352   	; 0x5ec <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     f1c:	b5 da       	rcall	.-2710   	; 0x488 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 7f 01 	sts	0x017F, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     f24:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     f28:	80 ff       	sbrs	r24, 0
     f2a:	17 c0       	rjmp	.+46     	; 0xf5a <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     f2c:	80 91 de 00 	lds	r24, 0x00DE
     f30:	80 ff       	sbrs	r24, 0
     f32:	13 c0       	rjmp	.+38     	; 0xf5a <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     f34:	80 91 df 00 	lds	r24, 0x00DF
     f38:	8e 7f       	andi	r24, 0xFE	; 254
     f3a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     f3e:	80 91 de 00 	lds	r24, 0x00DE
     f42:	8e 7f       	andi	r24, 0xFE	; 254
     f44:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     f48:	9a da       	rcall	.-2764   	; 0x47e <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     f4a:	80 91 a0 00 	lds	r24, 0x00A0
     f4e:	82 60       	ori	r24, 0x02	; 2
     f50:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	80 93 7f 01 	sts	0x017F, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     f5a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     f5e:	82 ff       	sbrs	r24, 2
     f60:	0e c0       	rjmp	.+28     	; 0xf7e <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     f62:	80 91 de 00 	lds	r24, 0x00DE
     f66:	82 ff       	sbrs	r24, 2
     f68:	0a c0       	rjmp	.+20     	; 0xf7e <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     f6a:	80 91 df 00 	lds	r24, 0x00DF
     f6e:	8b 7f       	andi	r24, 0xFB	; 251
     f70:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	58 db       	rcall	.-2384   	; 0x62a <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     f7a:	86 da       	rcall	.-2804   	; 0x488 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     f7c:	15 df       	rcall	.-470    	; 0xda8 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f7e:	ff 91       	pop	r31
     f80:	ef 91       	pop	r30
     f82:	bf 91       	pop	r27
     f84:	af 91       	pop	r26
     f86:	9f 91       	pop	r25
     f88:	8f 91       	pop	r24
     f8a:	7f 91       	pop	r23
     f8c:	6f 91       	pop	r22
     f8e:	5f 91       	pop	r21
     f90:	4f 91       	pop	r20
     f92:	3f 91       	pop	r19
     f94:	2f 91       	pop	r18
     f96:	0f 90       	pop	r0
     f98:	0b be       	out	0x3b, r0	; 59
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	0f 90       	pop	r0
     fa0:	1f 90       	pop	r1
     fa2:	18 95       	reti

00000fa4 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	29 97       	sbiw	r28, 0x09	; 9
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	6b 01       	movw	r12, r22
     fc6:	8a 01       	movw	r16, r20
     fc8:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     fca:	90 e8       	ldi	r25, 0x80	; 128
     fcc:	90 93 77 01 	sts	0x0177, r25
     fd0:	96 e0       	ldi	r25, 0x06	; 6
     fd2:	90 93 78 01 	sts	0x0178, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     fdc:	90 93 7a 01 	sts	0x017A, r25
     fe0:	80 93 79 01 	sts	0x0179, r24
     fe4:	10 92 7c 01 	sts	0x017C, r1
     fe8:	10 92 7b 01 	sts	0x017B, r1
     fec:	89 e0       	ldi	r24, 0x09	; 9
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	90 93 7e 01 	sts	0x017E, r25
     ff4:	80 93 7d 01 	sts	0x017D, r24
     ff8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     ffc:	ce 01       	movw	r24, r28
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	95 d0       	rcall	.+298    	; 0x112c <USB_Host_SendControlRequest>
    1002:	88 23       	and	r24, r24
    1004:	b9 f4       	brne	.+46     	; 0x1034 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	f6 01       	movw	r30, r12
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1010:	e8 16       	cp	r14, r24
    1012:	f9 06       	cpc	r15, r25
    1014:	70 f0       	brcs	.+28     	; 0x1032 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1016:	90 93 7e 01 	sts	0x017E, r25
    101a:	80 93 7d 01 	sts	0x017D, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    101e:	c8 01       	movw	r24, r16
    1020:	85 d0       	rcall	.+266    	; 0x112c <USB_Host_SendControlRequest>
    1022:	88 23       	and	r24, r24
    1024:	39 f4       	brne	.+14     	; 0x1034 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1026:	f8 01       	movw	r30, r16
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	92 30       	cpi	r25, 0x02	; 2
    102c:	19 f0       	breq	.+6      	; 0x1034 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    102e:	86 e0       	ldi	r24, 0x06	; 6
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1032:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1034:	29 96       	adiw	r28, 0x09	; 9
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	08 95       	ret

00001052 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1052:	af 92       	push	r10
    1054:	bf 92       	push	r11
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	8c 01       	movw	r16, r24
    1068:	eb 01       	movw	r28, r22
    106a:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    106c:	23 c0       	rjmp	.+70     	; 0x10b4 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    106e:	e8 81       	ld	r30, Y
    1070:	f9 81       	ldd	r31, Y+1	; 0x01
    1072:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1074:	20 81       	ld	r18, Z
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	c7 01       	movw	r24, r14
    107a:	2e 15       	cp	r18, r14
    107c:	3f 05       	cpc	r19, r15
    107e:	08 f4       	brcc	.+2      	; 0x1082 <USB_GetNextDescriptorComp+0x30>
    1080:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1082:	e8 0f       	add	r30, r24
    1084:	f9 1f       	adc	r31, r25
    1086:	f9 83       	std	Y+1, r31	; 0x01
    1088:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    108a:	f8 01       	movw	r30, r16
    108c:	20 81       	ld	r18, Z
    108e:	31 81       	ldd	r19, Z+1	; 0x01
    1090:	28 1b       	sub	r18, r24
    1092:	39 0b       	sbc	r19, r25
    1094:	31 83       	std	Z+1, r19	; 0x01
    1096:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1098:	88 81       	ld	r24, Y
    109a:	99 81       	ldd	r25, Y+1	; 0x01
    109c:	f6 01       	movw	r30, r12
    109e:	09 95       	icall
    10a0:	82 30       	cpi	r24, 0x02	; 2
    10a2:	41 f0       	breq	.+16     	; 0x10b4 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	69 f4       	brne	.+26     	; 0x10c2 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    10a8:	a8 82       	st	Y, r10
    10aa:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    10ac:	f8 01       	movw	r30, r16
    10ae:	f1 82       	std	Z+1, r15	; 0x01
    10b0:	e0 82       	st	Z, r14
    10b2:	07 c0       	rjmp	.+14     	; 0x10c2 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    10b4:	f8 01       	movw	r30, r16
    10b6:	e0 80       	ld	r14, Z
    10b8:	f1 80       	ldd	r15, Z+1	; 0x01
    10ba:	e1 14       	cp	r14, r1
    10bc:	f1 04       	cpc	r15, r1
    10be:	b9 f6       	brne	.-82     	; 0x106e <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    10c0:	82 e0       	ldi	r24, 0x02	; 2
}
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	bf 90       	pop	r11
    10d4:	af 90       	pop	r10
    10d6:	08 95       	ret

000010d8 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    10d8:	08 95       	ret

000010da <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    10e2:	c8 ee       	ldi	r28, 0xE8	; 232
    10e4:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10e6:	07 c0       	rjmp	.+14     	; 0x10f6 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	29 dc       	rcall	.-1966   	; 0x93e <USB_Host_WaitMS>
    10ec:	88 23       	and	r24, r24
    10ee:	d1 f4       	brne	.+52     	; 0x1124 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    10f0:	20 97       	sbiw	r28, 0x00	; 0
    10f2:	b9 f0       	breq	.+46     	; 0x1122 <USB_Host_WaitForIOS+0x48>
    10f4:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10f6:	11 23       	and	r17, r17
    10f8:	29 f4       	brne	.+10     	; 0x1104 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    10fa:	80 91 a6 00 	lds	r24, 0x00A6
    10fe:	83 ff       	sbrs	r24, 3
    1100:	f3 cf       	rjmp	.-26     	; 0x10e8 <USB_Host_WaitForIOS+0xe>
    1102:	0d c0       	rjmp	.+26     	; 0x111e <USB_Host_WaitForIOS+0x44>
    1104:	11 30       	cpi	r17, 0x01	; 1
    1106:	29 f4       	brne	.+10     	; 0x1112 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1108:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    110c:	80 ff       	sbrs	r24, 0
    110e:	ec cf       	rjmp	.-40     	; 0x10e8 <USB_Host_WaitForIOS+0xe>
    1110:	06 c0       	rjmp	.+12     	; 0x111e <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1112:	12 30       	cpi	r17, 0x02	; 2
    1114:	49 f7       	brne	.-46     	; 0x10e8 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1116:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    111a:	82 ff       	sbrs	r24, 2
    111c:	e5 cf       	rjmp	.-54     	; 0x10e8 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1122:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	08 95       	ret

0000112c <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    113a:	e0 90 9e 00 	lds	r14, 0x009E
    113e:	ff 24       	eor	r15, r15
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	e8 22       	and	r14, r24
    1144:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1146:	c0 91 7d 01 	lds	r28, 0x017D
    114a:	d0 91 7e 01 	lds	r29, 0x017E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    114e:	80 91 9e 00 	lds	r24, 0x009E
    1152:	81 60       	ori	r24, 0x01	; 1
    1154:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	f1 db       	rcall	.-2078   	; 0x93e <USB_Host_WaitMS>
    115c:	88 23       	and	r24, r24
    115e:	09 f0       	breq	.+2      	; 0x1162 <USB_Host_SendControlRequest+0x36>
    1160:	cb c0       	rjmp	.+406    	; 0x12f8 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1162:	80 91 aa 00 	lds	r24, 0x00AA
    1166:	8f 7c       	andi	r24, 0xCF	; 207
    1168:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    116c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1170:	80 91 a6 00 	lds	r24, 0x00A6
    1174:	8f 7e       	andi	r24, 0xEF	; 239
    1176:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    117a:	80 91 a9 00 	lds	r24, 0x00A9
    117e:	8f 7b       	andi	r24, 0xBF	; 191
    1180:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1184:	e7 e7       	ldi	r30, 0x77	; 119
    1186:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1188:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    118a:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	ef 37       	cpi	r30, 0x7F	; 127
    1192:	f8 07       	cpc	r31, r24
    1194:	c9 f7       	brne	.-14     	; 0x1188 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1196:	80 91 a6 00 	lds	r24, 0x00A6
    119a:	87 77       	andi	r24, 0x77	; 119
    119c:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	9b df       	rcall	.-202    	; 0x10da <USB_Host_WaitForIOS>
    11a4:	88 23       	and	r24, r24
    11a6:	09 f0       	breq	.+2      	; 0x11aa <USB_Host_SendControlRequest+0x7e>
    11a8:	a7 c0       	rjmp	.+334    	; 0x12f8 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11aa:	80 91 a9 00 	lds	r24, 0x00A9
    11ae:	80 64       	ori	r24, 0x40	; 64
    11b0:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	c3 db       	rcall	.-2170   	; 0x93e <USB_Host_WaitMS>
    11b8:	88 23       	and	r24, r24
    11ba:	09 f0       	breq	.+2      	; 0x11be <USB_Host_SendControlRequest+0x92>
    11bc:	9d c0       	rjmp	.+314    	; 0x12f8 <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    11be:	80 91 77 01 	lds	r24, 0x0177
    11c2:	87 ff       	sbrs	r24, 7
    11c4:	4f c0       	rjmp	.+158    	; 0x1264 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11c6:	80 91 aa 00 	lds	r24, 0x00AA
    11ca:	8f 7c       	andi	r24, 0xCF	; 207
    11cc:	80 61       	ori	r24, 0x10	; 16
    11ce:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    11d2:	01 15       	cp	r16, r1
    11d4:	11 05       	cpc	r17, r1
    11d6:	61 f5       	brne	.+88     	; 0x1230 <USB_Host_SendControlRequest+0x104>
    11d8:	2d c0       	rjmp	.+90     	; 0x1234 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11da:	80 91 a9 00 	lds	r24, 0x00A9
    11de:	8f 7b       	andi	r24, 0xBF	; 191
    11e0:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	79 df       	rcall	.-270    	; 0x10da <USB_Host_WaitForIOS>
    11e8:	88 23       	and	r24, r24
    11ea:	09 f0       	breq	.+2      	; 0x11ee <USB_Host_SendControlRequest+0xc2>
    11ec:	85 c0       	rjmp	.+266    	; 0x12f8 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11ee:	80 91 f6 00 	lds	r24, 0x00F6
    11f2:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	49 f4       	brne	.+18     	; 0x120c <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    11fa:	c0 e0       	ldi	r28, 0x00	; 0
    11fc:	d0 e0       	ldi	r29, 0x00	; 0
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1200:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1204:	f8 01       	movw	r30, r16
    1206:	81 93       	st	Z+, r24
    1208:	8f 01       	movw	r16, r30
					DataLen--;
    120a:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    120c:	80 91 f6 00 	lds	r24, 0x00F6
    1210:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	11 f0       	breq	.+4      	; 0x121c <USB_Host_SendControlRequest+0xf0>
    1218:	20 97       	sbiw	r28, 0x00	; 0
    121a:	91 f7       	brne	.-28     	; 0x1200 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    121c:	80 91 a9 00 	lds	r24, 0x00A9
    1220:	80 64       	ori	r24, 0x40	; 64
    1222:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1226:	80 91 a6 00 	lds	r24, 0x00A6
    122a:	8e 77       	andi	r24, 0x7E	; 126
    122c:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1230:	20 97       	sbiw	r28, 0x00	; 0
    1232:	99 f6       	brne	.-90     	; 0x11da <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1234:	80 91 aa 00 	lds	r24, 0x00AA
    1238:	8f 7c       	andi	r24, 0xCF	; 207
    123a:	80 62       	ori	r24, 0x20	; 32
    123c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1240:	80 91 a9 00 	lds	r24, 0x00A9
    1244:	8f 7b       	andi	r24, 0xBF	; 191
    1246:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	46 df       	rcall	.-372    	; 0x10da <USB_Host_WaitForIOS>
    124e:	88 23       	and	r24, r24
    1250:	09 f0       	breq	.+2      	; 0x1254 <USB_Host_SendControlRequest+0x128>
    1252:	52 c0       	rjmp	.+164    	; 0x12f8 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1254:	80 91 a6 00 	lds	r24, 0x00A6
    1258:	8b 77       	andi	r24, 0x7B	; 123
    125a:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    125e:	82 e0       	ldi	r24, 0x02	; 2
    1260:	3c df       	rcall	.-392    	; 0x10da <USB_Host_WaitForIOS>
    1262:	4a c0       	rjmp	.+148    	; 0x12f8 <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1264:	01 15       	cp	r16, r1
    1266:	11 05       	cpc	r17, r1
    1268:	99 f1       	breq	.+102    	; 0x12d0 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    126a:	80 91 aa 00 	lds	r24, 0x00AA
    126e:	8f 7c       	andi	r24, 0xCF	; 207
    1270:	80 62       	ori	r24, 0x20	; 32
    1272:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1276:	80 91 a9 00 	lds	r24, 0x00A9
    127a:	8f 7b       	andi	r24, 0xBF	; 191
    127c:	80 93 a9 00 	sts	0x00A9, r24
    1280:	1c c0       	rjmp	.+56     	; 0x12ba <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1282:	82 e0       	ldi	r24, 0x02	; 2
    1284:	2a df       	rcall	.-428    	; 0x10da <USB_Host_WaitForIOS>
    1286:	88 23       	and	r24, r24
    1288:	b9 f5       	brne	.+110    	; 0x12f8 <USB_Host_SendControlRequest+0x1cc>
    128a:	f8 01       	movw	r30, r16
    128c:	06 c0       	rjmp	.+12     	; 0x129a <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    128e:	81 91       	ld	r24, Z+
    1290:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1292:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1296:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1298:	59 f0       	breq	.+22     	; 0x12b0 <USB_Host_SendControlRequest+0x184>
    129a:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    129c:	20 91 f6 00 	lds	r18, 0x00F6
    12a0:	30 91 f7 00 	lds	r19, 0x00F7
    12a4:	80 91 71 01 	lds	r24, 0x0171
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	28 17       	cp	r18, r24
    12ac:	39 07       	cpc	r19, r25
    12ae:	78 f3       	brcs	.-34     	; 0x128e <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    12b0:	80 91 a6 00 	lds	r24, 0x00A6
    12b4:	8b 77       	andi	r24, 0x7B	; 123
    12b6:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    12ba:	20 97       	sbiw	r28, 0x00	; 0
    12bc:	11 f7       	brne	.-60     	; 0x1282 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	0c df       	rcall	.-488    	; 0x10da <USB_Host_WaitForIOS>
    12c2:	88 23       	and	r24, r24
    12c4:	c9 f4       	brne	.+50     	; 0x12f8 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12c6:	80 91 a9 00 	lds	r24, 0x00A9
    12ca:	80 64       	ori	r24, 0x40	; 64
    12cc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12d0:	80 91 aa 00 	lds	r24, 0x00AA
    12d4:	8f 7c       	andi	r24, 0xCF	; 207
    12d6:	80 61       	ori	r24, 0x10	; 16
    12d8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12dc:	80 91 a9 00 	lds	r24, 0x00A9
    12e0:	8f 7b       	andi	r24, 0xBF	; 191
    12e2:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	f8 de       	rcall	.-528    	; 0x10da <USB_Host_WaitForIOS>
    12ea:	88 23       	and	r24, r24
    12ec:	29 f4       	brne	.+10     	; 0x12f8 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12ee:	90 91 a6 00 	lds	r25, 0x00A6
    12f2:	9e 77       	andi	r25, 0x7E	; 126
    12f4:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12f8:	90 91 a9 00 	lds	r25, 0x00A9
    12fc:	90 64       	ori	r25, 0x40	; 64
    12fe:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1302:	e1 14       	cp	r14, r1
    1304:	f1 04       	cpc	r15, r1
    1306:	29 f4       	brne	.+10     	; 0x1312 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1308:	90 91 9e 00 	lds	r25, 0x009E
    130c:	9e 7f       	andi	r25, 0xFE	; 254
    130e:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1318:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	08 95       	ret

0000132a <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    132a:	1f 93       	push	r17
    132c:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    132e:	10 92 77 01 	sts	0x0177, r1
    1332:	89 e0       	ldi	r24, 0x09	; 9
    1334:	80 93 78 01 	sts	0x0178, r24
    1338:	10 93 79 01 	sts	0x0179, r17
    133c:	10 92 7a 01 	sts	0x017A, r1
    1340:	10 92 7c 01 	sts	0x017C, r1
    1344:	10 92 7b 01 	sts	0x017B, r1
    1348:	10 92 7e 01 	sts	0x017E, r1
    134c:	10 92 7d 01 	sts	0x017D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1350:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	e9 de       	rcall	.-558    	; 0x112c <USB_Host_SendControlRequest>
    135a:	88 23       	and	r24, r24
    135c:	49 f4       	brne	.+18     	; 0x1370 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    135e:	10 93 75 01 	sts	0x0175, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1362:	11 23       	and	r17, r17
    1364:	11 f0       	breq	.+4      	; 0x136a <USB_Host_SetDeviceConfiguration+0x40>
    1366:	9b e0       	ldi	r25, 0x0B	; 11
    1368:	01 c0       	rjmp	.+2      	; 0x136c <USB_Host_SetDeviceConfiguration+0x42>
    136a:	9a e0       	ldi	r25, 0x0A	; 10
    136c:	90 93 7f 01 	sts	0x017F, r25
	}

	return ErrorCode;
}
    1370:	1f 91       	pop	r17
    1372:	08 95       	ret

00001374 <USB_Host_GetDescriptor>:
uint8_t USB_Host_GetDescriptor(const uint8_t Type,
                               const uint8_t Index,
                               void* const Buffer,
                               const uint8_t BufferLength)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1374:	90 e8       	ldi	r25, 0x80	; 128
    1376:	90 93 77 01 	sts	0x0177, r25
    137a:	96 e0       	ldi	r25, 0x06	; 6
    137c:	90 93 78 01 	sts	0x0178, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = (((uint16_t)Type << 8) | Index),
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	f8 2f       	mov	r31, r24
    1384:	e0 e0       	ldi	r30, 0x00	; 0
    1386:	6e 2b       	or	r22, r30
    1388:	7f 2b       	or	r23, r31
uint8_t USB_Host_GetDescriptor(const uint8_t Type,
                               const uint8_t Index,
                               void* const Buffer,
                               const uint8_t BufferLength)
{
	USB_ControlRequest = (USB_Request_Header_t)
    138a:	70 93 7a 01 	sts	0x017A, r23
    138e:	60 93 79 01 	sts	0x0179, r22
    1392:	10 92 7c 01 	sts	0x017C, r1
    1396:	10 92 7b 01 	sts	0x017B, r1
    139a:	20 93 7d 01 	sts	0x017D, r18
    139e:	10 92 7e 01 	sts	0x017E, r1
    13a2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = BufferLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
    13a6:	ca 01       	movw	r24, r20
}
    13a8:	c1 ce       	rjmp	.-638    	; 0x112c <USB_Host_SendControlRequest>

000013aa <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    13aa:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    13ac:	10 91 a7 00 	lds	r17, 0x00A7
    13b0:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    13b2:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13b6:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    13ba:	16 db       	rcall	.-2516   	; 0x9e8 <USB_Host_ProcessNextHostState>
    13bc:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    13c0:	1f 91       	pop	r17
    13c2:	08 95       	ret

000013c4 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    13c4:	90 91 c8 00 	lds	r25, 0x00C8
    13c8:	95 ff       	sbrs	r25, 5
    13ca:	fc cf       	rjmp	.-8      	; 0x13c4 <Serial_putchar>
				UDR1 = DataByte;
    13cc:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	08 95       	ret

000013d6 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    13d6:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    13da:	87 ff       	sbrs	r24, 7
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <Serial_getchar+0x18>
    13de:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    13e2:	87 ff       	sbrs	r24, 7
    13e4:	07 c0       	rjmp	.+14     	; 0x13f4 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    13e6:	20 91 ce 00 	lds	r18, 0x00CE
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    13ee:	2e ef       	ldi	r18, 0xFE	; 254
    13f0:	3f ef       	ldi	r19, 0xFF	; 255
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    13f4:	2f ef       	ldi	r18, 0xFF	; 255
    13f6:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    13f8:	c9 01       	movw	r24, r18
    13fa:	08 95       	ret

000013fc <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    13fc:	fc 01       	movw	r30, r24
	if (!(Stream))
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	51 f4       	brne	.+20     	; 0x1416 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1402:	e0 e8       	ldi	r30, 0x80	; 128
    1404:	f1 e0       	ldi	r31, 0x01	; 1
    1406:	f0 93 8f 01 	sts	0x018F, r31
    140a:	e0 93 8e 01 	sts	0x018E, r30
		stdout = Stream;
    140e:	f0 93 91 01 	sts	0x0191, r31
    1412:	e0 93 90 01 	sts	0x0190, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1416:	8e e0       	ldi	r24, 0x0E	; 14
    1418:	df 01       	movw	r26, r30
    141a:	1d 92       	st	X+, r1
    141c:	8a 95       	dec	r24
    141e:	e9 f7       	brne	.-6      	; 0x141a <Serial_CreateStream+0x1e>
    1420:	83 e0       	ldi	r24, 0x03	; 3
    1422:	83 83       	std	Z+3, r24	; 0x03
    1424:	82 ee       	ldi	r24, 0xE2	; 226
    1426:	99 e0       	ldi	r25, 0x09	; 9
    1428:	91 87       	std	Z+9, r25	; 0x09
    142a:	80 87       	std	Z+8, r24	; 0x08
    142c:	8b ee       	ldi	r24, 0xEB	; 235
    142e:	99 e0       	ldi	r25, 0x09	; 9
    1430:	93 87       	std	Z+11, r25	; 0x0b
    1432:	82 87       	std	Z+10, r24	; 0x0a
}
    1434:	08 95       	ret

00001436 <printf_P>:
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	fe 01       	movw	r30, r28
    1440:	35 96       	adiw	r30, 0x05	; 5
    1442:	61 91       	ld	r22, Z+
    1444:	71 91       	ld	r23, Z+
    1446:	80 91 90 01 	lds	r24, 0x0190
    144a:	90 91 91 01 	lds	r25, 0x0191
    144e:	dc 01       	movw	r26, r24
    1450:	13 96       	adiw	r26, 0x03	; 3
    1452:	2c 91       	ld	r18, X
    1454:	13 97       	sbiw	r26, 0x03	; 3
    1456:	28 60       	ori	r18, 0x08	; 8
    1458:	13 96       	adiw	r26, 0x03	; 3
    145a:	2c 93       	st	X, r18
    145c:	af 01       	movw	r20, r30
    145e:	42 d0       	rcall	.+132    	; 0x14e4 <vfprintf>
    1460:	e0 91 90 01 	lds	r30, 0x0190
    1464:	f0 91 91 01 	lds	r31, 0x0191
    1468:	23 81       	ldd	r18, Z+3	; 0x03
    146a:	27 7f       	andi	r18, 0xF7	; 247
    146c:	23 83       	std	Z+3, r18	; 0x03
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <puts_P>:
    1474:	ef 92       	push	r14
    1476:	ff 92       	push	r15
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	8c 01       	movw	r16, r24
    1482:	e0 91 90 01 	lds	r30, 0x0190
    1486:	f0 91 91 01 	lds	r31, 0x0191
    148a:	83 81       	ldd	r24, Z+3	; 0x03
    148c:	81 ff       	sbrs	r24, 1
    148e:	20 c0       	rjmp	.+64     	; 0x14d0 <puts_P+0x5c>
    1490:	c0 e0       	ldi	r28, 0x00	; 0
    1492:	d0 e0       	ldi	r29, 0x00	; 0
    1494:	0c c0       	rjmp	.+24     	; 0x14ae <puts_P+0x3a>
    1496:	db 01       	movw	r26, r22
    1498:	18 96       	adiw	r26, 0x08	; 8
    149a:	ed 91       	ld	r30, X+
    149c:	fc 91       	ld	r31, X
    149e:	19 97       	sbiw	r26, 0x09	; 9
    14a0:	09 95       	icall
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	11 f0       	breq	.+4      	; 0x14aa <puts_P+0x36>
    14a6:	cf ef       	ldi	r28, 0xFF	; 255
    14a8:	df ef       	ldi	r29, 0xFF	; 255
    14aa:	0f 5f       	subi	r16, 0xFF	; 255
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	f8 01       	movw	r30, r16
    14b0:	84 91       	lpm	r24, Z+
    14b2:	60 91 90 01 	lds	r22, 0x0190
    14b6:	70 91 91 01 	lds	r23, 0x0191
    14ba:	88 23       	and	r24, r24
    14bc:	61 f7       	brne	.-40     	; 0x1496 <puts_P+0x22>
    14be:	db 01       	movw	r26, r22
    14c0:	18 96       	adiw	r26, 0x08	; 8
    14c2:	ed 91       	ld	r30, X+
    14c4:	fc 91       	ld	r31, X
    14c6:	19 97       	sbiw	r26, 0x09	; 9
    14c8:	8a e0       	ldi	r24, 0x0A	; 10
    14ca:	09 95       	icall
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	11 f0       	breq	.+4      	; 0x14d4 <puts_P+0x60>
    14d0:	cf ef       	ldi	r28, 0xFF	; 255
    14d2:	df ef       	ldi	r29, 0xFF	; 255
    14d4:	ce 01       	movw	r24, r28
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	08 95       	ret

000014e4 <vfprintf>:
    14e4:	2f 92       	push	r2
    14e6:	3f 92       	push	r3
    14e8:	4f 92       	push	r4
    14ea:	5f 92       	push	r5
    14ec:	6f 92       	push	r6
    14ee:	7f 92       	push	r7
    14f0:	8f 92       	push	r8
    14f2:	9f 92       	push	r9
    14f4:	af 92       	push	r10
    14f6:	bf 92       	push	r11
    14f8:	cf 92       	push	r12
    14fa:	df 92       	push	r13
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	2c 97       	sbiw	r28, 0x0c	; 12
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	6c 01       	movw	r12, r24
    151a:	1b 01       	movw	r2, r22
    151c:	8a 01       	movw	r16, r20
    151e:	fc 01       	movw	r30, r24
    1520:	17 82       	std	Z+7, r1	; 0x07
    1522:	16 82       	std	Z+6, r1	; 0x06
    1524:	83 81       	ldd	r24, Z+3	; 0x03
    1526:	81 ff       	sbrs	r24, 1
    1528:	c4 c1       	rjmp	.+904    	; 0x18b2 <vfprintf+0x3ce>
    152a:	2e 01       	movw	r4, r28
    152c:	08 94       	sec
    152e:	41 1c       	adc	r4, r1
    1530:	51 1c       	adc	r5, r1
    1532:	f6 01       	movw	r30, r12
    1534:	93 81       	ldd	r25, Z+3	; 0x03
    1536:	f1 01       	movw	r30, r2
    1538:	93 fd       	sbrc	r25, 3
    153a:	85 91       	lpm	r24, Z+
    153c:	93 ff       	sbrs	r25, 3
    153e:	81 91       	ld	r24, Z+
    1540:	1f 01       	movw	r2, r30
    1542:	88 23       	and	r24, r24
    1544:	09 f4       	brne	.+2      	; 0x1548 <vfprintf+0x64>
    1546:	b1 c1       	rjmp	.+866    	; 0x18aa <vfprintf+0x3c6>
    1548:	85 32       	cpi	r24, 0x25	; 37
    154a:	39 f4       	brne	.+14     	; 0x155a <vfprintf+0x76>
    154c:	93 fd       	sbrc	r25, 3
    154e:	85 91       	lpm	r24, Z+
    1550:	93 ff       	sbrs	r25, 3
    1552:	81 91       	ld	r24, Z+
    1554:	1f 01       	movw	r2, r30
    1556:	85 32       	cpi	r24, 0x25	; 37
    1558:	21 f4       	brne	.+8      	; 0x1562 <vfprintf+0x7e>
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	b6 01       	movw	r22, r12
    155e:	db d1       	rcall	.+950    	; 0x1916 <fputc>
    1560:	e8 cf       	rjmp	.-48     	; 0x1532 <vfprintf+0x4e>
    1562:	ee 24       	eor	r14, r14
    1564:	ff 24       	eor	r15, r15
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	20 32       	cpi	r18, 0x20	; 32
    156a:	b0 f4       	brcc	.+44     	; 0x1598 <vfprintf+0xb4>
    156c:	8b 32       	cpi	r24, 0x2B	; 43
    156e:	69 f0       	breq	.+26     	; 0x158a <vfprintf+0xa6>
    1570:	8c 32       	cpi	r24, 0x2C	; 44
    1572:	28 f4       	brcc	.+10     	; 0x157e <vfprintf+0x9a>
    1574:	80 32       	cpi	r24, 0x20	; 32
    1576:	51 f0       	breq	.+20     	; 0x158c <vfprintf+0xa8>
    1578:	83 32       	cpi	r24, 0x23	; 35
    157a:	71 f4       	brne	.+28     	; 0x1598 <vfprintf+0xb4>
    157c:	0b c0       	rjmp	.+22     	; 0x1594 <vfprintf+0xb0>
    157e:	8d 32       	cpi	r24, 0x2D	; 45
    1580:	39 f0       	breq	.+14     	; 0x1590 <vfprintf+0xac>
    1582:	80 33       	cpi	r24, 0x30	; 48
    1584:	49 f4       	brne	.+18     	; 0x1598 <vfprintf+0xb4>
    1586:	21 60       	ori	r18, 0x01	; 1
    1588:	2c c0       	rjmp	.+88     	; 0x15e2 <vfprintf+0xfe>
    158a:	22 60       	ori	r18, 0x02	; 2
    158c:	24 60       	ori	r18, 0x04	; 4
    158e:	29 c0       	rjmp	.+82     	; 0x15e2 <vfprintf+0xfe>
    1590:	28 60       	ori	r18, 0x08	; 8
    1592:	27 c0       	rjmp	.+78     	; 0x15e2 <vfprintf+0xfe>
    1594:	20 61       	ori	r18, 0x10	; 16
    1596:	25 c0       	rjmp	.+74     	; 0x15e2 <vfprintf+0xfe>
    1598:	27 fd       	sbrc	r18, 7
    159a:	2c c0       	rjmp	.+88     	; 0x15f4 <vfprintf+0x110>
    159c:	38 2f       	mov	r19, r24
    159e:	30 53       	subi	r19, 0x30	; 48
    15a0:	3a 30       	cpi	r19, 0x0A	; 10
    15a2:	98 f4       	brcc	.+38     	; 0x15ca <vfprintf+0xe6>
    15a4:	26 ff       	sbrs	r18, 6
    15a6:	08 c0       	rjmp	.+16     	; 0x15b8 <vfprintf+0xd4>
    15a8:	8e 2d       	mov	r24, r14
    15aa:	88 0f       	add	r24, r24
    15ac:	e8 2e       	mov	r14, r24
    15ae:	ee 0c       	add	r14, r14
    15b0:	ee 0c       	add	r14, r14
    15b2:	e8 0e       	add	r14, r24
    15b4:	e3 0e       	add	r14, r19
    15b6:	15 c0       	rjmp	.+42     	; 0x15e2 <vfprintf+0xfe>
    15b8:	8f 2d       	mov	r24, r15
    15ba:	88 0f       	add	r24, r24
    15bc:	f8 2e       	mov	r15, r24
    15be:	ff 0c       	add	r15, r15
    15c0:	ff 0c       	add	r15, r15
    15c2:	f8 0e       	add	r15, r24
    15c4:	f3 0e       	add	r15, r19
    15c6:	20 62       	ori	r18, 0x20	; 32
    15c8:	0c c0       	rjmp	.+24     	; 0x15e2 <vfprintf+0xfe>
    15ca:	8e 32       	cpi	r24, 0x2E	; 46
    15cc:	21 f4       	brne	.+8      	; 0x15d6 <vfprintf+0xf2>
    15ce:	26 fd       	sbrc	r18, 6
    15d0:	6c c1       	rjmp	.+728    	; 0x18aa <vfprintf+0x3c6>
    15d2:	20 64       	ori	r18, 0x40	; 64
    15d4:	06 c0       	rjmp	.+12     	; 0x15e2 <vfprintf+0xfe>
    15d6:	8c 36       	cpi	r24, 0x6C	; 108
    15d8:	11 f4       	brne	.+4      	; 0x15de <vfprintf+0xfa>
    15da:	20 68       	ori	r18, 0x80	; 128
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <vfprintf+0xfe>
    15de:	88 36       	cpi	r24, 0x68	; 104
    15e0:	49 f4       	brne	.+18     	; 0x15f4 <vfprintf+0x110>
    15e2:	f1 01       	movw	r30, r2
    15e4:	93 fd       	sbrc	r25, 3
    15e6:	85 91       	lpm	r24, Z+
    15e8:	93 ff       	sbrs	r25, 3
    15ea:	81 91       	ld	r24, Z+
    15ec:	1f 01       	movw	r2, r30
    15ee:	88 23       	and	r24, r24
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <vfprintf+0x110>
    15f2:	ba cf       	rjmp	.-140    	; 0x1568 <vfprintf+0x84>
    15f4:	98 2f       	mov	r25, r24
    15f6:	95 54       	subi	r25, 0x45	; 69
    15f8:	93 30       	cpi	r25, 0x03	; 3
    15fa:	18 f0       	brcs	.+6      	; 0x1602 <vfprintf+0x11e>
    15fc:	90 52       	subi	r25, 0x20	; 32
    15fe:	93 30       	cpi	r25, 0x03	; 3
    1600:	28 f4       	brcc	.+10     	; 0x160c <vfprintf+0x128>
    1602:	0c 5f       	subi	r16, 0xFC	; 252
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	ff e3       	ldi	r31, 0x3F	; 63
    1608:	f9 83       	std	Y+1, r31	; 0x01
    160a:	0d c0       	rjmp	.+26     	; 0x1626 <vfprintf+0x142>
    160c:	83 36       	cpi	r24, 0x63	; 99
    160e:	31 f0       	breq	.+12     	; 0x161c <vfprintf+0x138>
    1610:	83 37       	cpi	r24, 0x73	; 115
    1612:	71 f0       	breq	.+28     	; 0x1630 <vfprintf+0x14c>
    1614:	83 35       	cpi	r24, 0x53	; 83
    1616:	09 f0       	breq	.+2      	; 0x161a <vfprintf+0x136>
    1618:	5c c0       	rjmp	.+184    	; 0x16d2 <vfprintf+0x1ee>
    161a:	21 c0       	rjmp	.+66     	; 0x165e <vfprintf+0x17a>
    161c:	f8 01       	movw	r30, r16
    161e:	80 81       	ld	r24, Z
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	0e 5f       	subi	r16, 0xFE	; 254
    1624:	1f 4f       	sbci	r17, 0xFF	; 255
    1626:	42 01       	movw	r8, r4
    1628:	71 e0       	ldi	r23, 0x01	; 1
    162a:	a7 2e       	mov	r10, r23
    162c:	b1 2c       	mov	r11, r1
    162e:	15 c0       	rjmp	.+42     	; 0x165a <vfprintf+0x176>
    1630:	62 e0       	ldi	r22, 0x02	; 2
    1632:	66 2e       	mov	r6, r22
    1634:	71 2c       	mov	r7, r1
    1636:	60 0e       	add	r6, r16
    1638:	71 1e       	adc	r7, r17
    163a:	f8 01       	movw	r30, r16
    163c:	80 80       	ld	r8, Z
    163e:	91 80       	ldd	r9, Z+1	; 0x01
    1640:	26 ff       	sbrs	r18, 6
    1642:	03 c0       	rjmp	.+6      	; 0x164a <vfprintf+0x166>
    1644:	6e 2d       	mov	r22, r14
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	02 c0       	rjmp	.+4      	; 0x164e <vfprintf+0x16a>
    164a:	6f ef       	ldi	r22, 0xFF	; 255
    164c:	7f ef       	ldi	r23, 0xFF	; 255
    164e:	c4 01       	movw	r24, r8
    1650:	2c 87       	std	Y+12, r18	; 0x0c
    1652:	56 d1       	rcall	.+684    	; 0x1900 <strnlen>
    1654:	5c 01       	movw	r10, r24
    1656:	83 01       	movw	r16, r6
    1658:	2c 85       	ldd	r18, Y+12	; 0x0c
    165a:	2f 77       	andi	r18, 0x7F	; 127
    165c:	16 c0       	rjmp	.+44     	; 0x168a <vfprintf+0x1a6>
    165e:	52 e0       	ldi	r21, 0x02	; 2
    1660:	65 2e       	mov	r6, r21
    1662:	71 2c       	mov	r7, r1
    1664:	60 0e       	add	r6, r16
    1666:	71 1e       	adc	r7, r17
    1668:	f8 01       	movw	r30, r16
    166a:	80 80       	ld	r8, Z
    166c:	91 80       	ldd	r9, Z+1	; 0x01
    166e:	26 ff       	sbrs	r18, 6
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <vfprintf+0x194>
    1672:	6e 2d       	mov	r22, r14
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	02 c0       	rjmp	.+4      	; 0x167c <vfprintf+0x198>
    1678:	6f ef       	ldi	r22, 0xFF	; 255
    167a:	7f ef       	ldi	r23, 0xFF	; 255
    167c:	c4 01       	movw	r24, r8
    167e:	2c 87       	std	Y+12, r18	; 0x0c
    1680:	34 d1       	rcall	.+616    	; 0x18ea <strnlen_P>
    1682:	5c 01       	movw	r10, r24
    1684:	2c 85       	ldd	r18, Y+12	; 0x0c
    1686:	20 68       	ori	r18, 0x80	; 128
    1688:	83 01       	movw	r16, r6
    168a:	23 fd       	sbrc	r18, 3
    168c:	1e c0       	rjmp	.+60     	; 0x16ca <vfprintf+0x1e6>
    168e:	07 c0       	rjmp	.+14     	; 0x169e <vfprintf+0x1ba>
    1690:	80 e2       	ldi	r24, 0x20	; 32
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	b6 01       	movw	r22, r12
    1696:	2c 87       	std	Y+12, r18	; 0x0c
    1698:	3e d1       	rcall	.+636    	; 0x1916 <fputc>
    169a:	fa 94       	dec	r15
    169c:	2c 85       	ldd	r18, Y+12	; 0x0c
    169e:	8f 2d       	mov	r24, r15
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a8 16       	cp	r10, r24
    16a4:	b9 06       	cpc	r11, r25
    16a6:	a0 f3       	brcs	.-24     	; 0x1690 <vfprintf+0x1ac>
    16a8:	10 c0       	rjmp	.+32     	; 0x16ca <vfprintf+0x1e6>
    16aa:	f4 01       	movw	r30, r8
    16ac:	27 fd       	sbrc	r18, 7
    16ae:	85 91       	lpm	r24, Z+
    16b0:	27 ff       	sbrs	r18, 7
    16b2:	81 91       	ld	r24, Z+
    16b4:	4f 01       	movw	r8, r30
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	b6 01       	movw	r22, r12
    16ba:	2c 87       	std	Y+12, r18	; 0x0c
    16bc:	2c d1       	rcall	.+600    	; 0x1916 <fputc>
    16be:	2c 85       	ldd	r18, Y+12	; 0x0c
    16c0:	f1 10       	cpse	r15, r1
    16c2:	fa 94       	dec	r15
    16c4:	08 94       	sec
    16c6:	a1 08       	sbc	r10, r1
    16c8:	b1 08       	sbc	r11, r1
    16ca:	a1 14       	cp	r10, r1
    16cc:	b1 04       	cpc	r11, r1
    16ce:	69 f7       	brne	.-38     	; 0x16aa <vfprintf+0x1c6>
    16d0:	e9 c0       	rjmp	.+466    	; 0x18a4 <vfprintf+0x3c0>
    16d2:	84 36       	cpi	r24, 0x64	; 100
    16d4:	11 f0       	breq	.+4      	; 0x16da <vfprintf+0x1f6>
    16d6:	89 36       	cpi	r24, 0x69	; 105
    16d8:	41 f5       	brne	.+80     	; 0x172a <vfprintf+0x246>
    16da:	27 ff       	sbrs	r18, 7
    16dc:	08 c0       	rjmp	.+16     	; 0x16ee <vfprintf+0x20a>
    16de:	f8 01       	movw	r30, r16
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	0c 5f       	subi	r16, 0xFC	; 252
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <vfprintf+0x21c>
    16ee:	f8 01       	movw	r30, r16
    16f0:	60 81       	ld	r22, Z
    16f2:	71 81       	ldd	r23, Z+1	; 0x01
    16f4:	88 27       	eor	r24, r24
    16f6:	77 fd       	sbrc	r23, 7
    16f8:	80 95       	com	r24
    16fa:	98 2f       	mov	r25, r24
    16fc:	0e 5f       	subi	r16, 0xFE	; 254
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1700:	4f e6       	ldi	r20, 0x6F	; 111
    1702:	b4 2e       	mov	r11, r20
    1704:	b2 22       	and	r11, r18
    1706:	97 ff       	sbrs	r25, 7
    1708:	09 c0       	rjmp	.+18     	; 0x171c <vfprintf+0x238>
    170a:	90 95       	com	r25
    170c:	80 95       	com	r24
    170e:	70 95       	com	r23
    1710:	61 95       	neg	r22
    1712:	7f 4f       	sbci	r23, 0xFF	; 255
    1714:	8f 4f       	sbci	r24, 0xFF	; 255
    1716:	9f 4f       	sbci	r25, 0xFF	; 255
    1718:	f0 e8       	ldi	r31, 0x80	; 128
    171a:	bf 2a       	or	r11, r31
    171c:	a2 01       	movw	r20, r4
    171e:	2a e0       	ldi	r18, 0x0A	; 10
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	25 d1       	rcall	.+586    	; 0x196e <__ultoa_invert>
    1724:	78 2e       	mov	r7, r24
    1726:	74 18       	sub	r7, r4
    1728:	44 c0       	rjmp	.+136    	; 0x17b2 <vfprintf+0x2ce>
    172a:	85 37       	cpi	r24, 0x75	; 117
    172c:	31 f4       	brne	.+12     	; 0x173a <vfprintf+0x256>
    172e:	3f ee       	ldi	r19, 0xEF	; 239
    1730:	b3 2e       	mov	r11, r19
    1732:	b2 22       	and	r11, r18
    1734:	2a e0       	ldi	r18, 0x0A	; 10
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	25 c0       	rjmp	.+74     	; 0x1784 <vfprintf+0x2a0>
    173a:	99 ef       	ldi	r25, 0xF9	; 249
    173c:	b9 2e       	mov	r11, r25
    173e:	b2 22       	and	r11, r18
    1740:	8f 36       	cpi	r24, 0x6F	; 111
    1742:	c1 f0       	breq	.+48     	; 0x1774 <vfprintf+0x290>
    1744:	80 37       	cpi	r24, 0x70	; 112
    1746:	20 f4       	brcc	.+8      	; 0x1750 <vfprintf+0x26c>
    1748:	88 35       	cpi	r24, 0x58	; 88
    174a:	09 f0       	breq	.+2      	; 0x174e <vfprintf+0x26a>
    174c:	ae c0       	rjmp	.+348    	; 0x18aa <vfprintf+0x3c6>
    174e:	0d c0       	rjmp	.+26     	; 0x176a <vfprintf+0x286>
    1750:	80 37       	cpi	r24, 0x70	; 112
    1752:	21 f0       	breq	.+8      	; 0x175c <vfprintf+0x278>
    1754:	88 37       	cpi	r24, 0x78	; 120
    1756:	09 f0       	breq	.+2      	; 0x175a <vfprintf+0x276>
    1758:	a8 c0       	rjmp	.+336    	; 0x18aa <vfprintf+0x3c6>
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x27c>
    175c:	20 e1       	ldi	r18, 0x10	; 16
    175e:	b2 2a       	or	r11, r18
    1760:	b4 fe       	sbrs	r11, 4
    1762:	0b c0       	rjmp	.+22     	; 0x177a <vfprintf+0x296>
    1764:	84 e0       	ldi	r24, 0x04	; 4
    1766:	b8 2a       	or	r11, r24
    1768:	08 c0       	rjmp	.+16     	; 0x177a <vfprintf+0x296>
    176a:	b4 fe       	sbrs	r11, 4
    176c:	09 c0       	rjmp	.+18     	; 0x1780 <vfprintf+0x29c>
    176e:	e6 e0       	ldi	r30, 0x06	; 6
    1770:	be 2a       	or	r11, r30
    1772:	06 c0       	rjmp	.+12     	; 0x1780 <vfprintf+0x29c>
    1774:	28 e0       	ldi	r18, 0x08	; 8
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	05 c0       	rjmp	.+10     	; 0x1784 <vfprintf+0x2a0>
    177a:	20 e1       	ldi	r18, 0x10	; 16
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <vfprintf+0x2a0>
    1780:	20 e1       	ldi	r18, 0x10	; 16
    1782:	32 e0       	ldi	r19, 0x02	; 2
    1784:	b7 fe       	sbrs	r11, 7
    1786:	08 c0       	rjmp	.+16     	; 0x1798 <vfprintf+0x2b4>
    1788:	f8 01       	movw	r30, r16
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	0c 5f       	subi	r16, 0xFC	; 252
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <vfprintf+0x2c2>
    1798:	f8 01       	movw	r30, r16
    179a:	60 81       	ld	r22, Z
    179c:	71 81       	ldd	r23, Z+1	; 0x01
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 5f       	subi	r16, 0xFE	; 254
    17a4:	1f 4f       	sbci	r17, 0xFF	; 255
    17a6:	a2 01       	movw	r20, r4
    17a8:	e2 d0       	rcall	.+452    	; 0x196e <__ultoa_invert>
    17aa:	78 2e       	mov	r7, r24
    17ac:	74 18       	sub	r7, r4
    17ae:	ff e7       	ldi	r31, 0x7F	; 127
    17b0:	bf 22       	and	r11, r31
    17b2:	b6 fe       	sbrs	r11, 6
    17b4:	0b c0       	rjmp	.+22     	; 0x17cc <vfprintf+0x2e8>
    17b6:	2e ef       	ldi	r18, 0xFE	; 254
    17b8:	b2 22       	and	r11, r18
    17ba:	7e 14       	cp	r7, r14
    17bc:	38 f4       	brcc	.+14     	; 0x17cc <vfprintf+0x2e8>
    17be:	b4 fe       	sbrs	r11, 4
    17c0:	07 c0       	rjmp	.+14     	; 0x17d0 <vfprintf+0x2ec>
    17c2:	b2 fc       	sbrc	r11, 2
    17c4:	05 c0       	rjmp	.+10     	; 0x17d0 <vfprintf+0x2ec>
    17c6:	8f ee       	ldi	r24, 0xEF	; 239
    17c8:	b8 22       	and	r11, r24
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <vfprintf+0x2ec>
    17cc:	a7 2c       	mov	r10, r7
    17ce:	01 c0       	rjmp	.+2      	; 0x17d2 <vfprintf+0x2ee>
    17d0:	ae 2c       	mov	r10, r14
    17d2:	8b 2d       	mov	r24, r11
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	b4 fe       	sbrs	r11, 4
    17d8:	0d c0       	rjmp	.+26     	; 0x17f4 <vfprintf+0x310>
    17da:	fe 01       	movw	r30, r28
    17dc:	e7 0d       	add	r30, r7
    17de:	f1 1d       	adc	r31, r1
    17e0:	20 81       	ld	r18, Z
    17e2:	20 33       	cpi	r18, 0x30	; 48
    17e4:	19 f4       	brne	.+6      	; 0x17ec <vfprintf+0x308>
    17e6:	e9 ee       	ldi	r30, 0xE9	; 233
    17e8:	be 22       	and	r11, r30
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <vfprintf+0x31a>
    17ec:	a3 94       	inc	r10
    17ee:	b2 fe       	sbrs	r11, 2
    17f0:	06 c0       	rjmp	.+12     	; 0x17fe <vfprintf+0x31a>
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <vfprintf+0x318>
    17f4:	86 78       	andi	r24, 0x86	; 134
    17f6:	90 70       	andi	r25, 0x00	; 0
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	09 f0       	breq	.+2      	; 0x17fe <vfprintf+0x31a>
    17fc:	a3 94       	inc	r10
    17fe:	8b 2c       	mov	r8, r11
    1800:	99 24       	eor	r9, r9
    1802:	b3 fc       	sbrc	r11, 3
    1804:	13 c0       	rjmp	.+38     	; 0x182c <vfprintf+0x348>
    1806:	b0 fe       	sbrs	r11, 0
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <vfprintf+0x342>
    180a:	af 14       	cp	r10, r15
    180c:	28 f4       	brcc	.+10     	; 0x1818 <vfprintf+0x334>
    180e:	e7 2c       	mov	r14, r7
    1810:	ef 0c       	add	r14, r15
    1812:	ea 18       	sub	r14, r10
    1814:	af 2c       	mov	r10, r15
    1816:	07 c0       	rjmp	.+14     	; 0x1826 <vfprintf+0x342>
    1818:	e7 2c       	mov	r14, r7
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <vfprintf+0x342>
    181c:	80 e2       	ldi	r24, 0x20	; 32
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	b6 01       	movw	r22, r12
    1822:	79 d0       	rcall	.+242    	; 0x1916 <fputc>
    1824:	a3 94       	inc	r10
    1826:	af 14       	cp	r10, r15
    1828:	c8 f3       	brcs	.-14     	; 0x181c <vfprintf+0x338>
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <vfprintf+0x350>
    182c:	af 14       	cp	r10, r15
    182e:	10 f4       	brcc	.+4      	; 0x1834 <vfprintf+0x350>
    1830:	fa 18       	sub	r15, r10
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <vfprintf+0x352>
    1834:	ff 24       	eor	r15, r15
    1836:	84 fe       	sbrs	r8, 4
    1838:	0e c0       	rjmp	.+28     	; 0x1856 <vfprintf+0x372>
    183a:	80 e3       	ldi	r24, 0x30	; 48
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	b6 01       	movw	r22, r12
    1840:	6a d0       	rcall	.+212    	; 0x1916 <fputc>
    1842:	82 fe       	sbrs	r8, 2
    1844:	1d c0       	rjmp	.+58     	; 0x1880 <vfprintf+0x39c>
    1846:	81 fe       	sbrs	r8, 1
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <vfprintf+0x36c>
    184a:	88 e5       	ldi	r24, 0x58	; 88
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	10 c0       	rjmp	.+32     	; 0x1870 <vfprintf+0x38c>
    1850:	88 e7       	ldi	r24, 0x78	; 120
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	0d c0       	rjmp	.+26     	; 0x1870 <vfprintf+0x38c>
    1856:	c4 01       	movw	r24, r8
    1858:	86 78       	andi	r24, 0x86	; 134
    185a:	90 70       	andi	r25, 0x00	; 0
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	81 f0       	breq	.+32     	; 0x1880 <vfprintf+0x39c>
    1860:	81 fc       	sbrc	r8, 1
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <vfprintf+0x384>
    1864:	80 e2       	ldi	r24, 0x20	; 32
    1866:	01 c0       	rjmp	.+2      	; 0x186a <vfprintf+0x386>
    1868:	8b e2       	ldi	r24, 0x2B	; 43
    186a:	b7 fc       	sbrc	r11, 7
    186c:	8d e2       	ldi	r24, 0x2D	; 45
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	b6 01       	movw	r22, r12
    1872:	51 d0       	rcall	.+162    	; 0x1916 <fputc>
    1874:	05 c0       	rjmp	.+10     	; 0x1880 <vfprintf+0x39c>
    1876:	80 e3       	ldi	r24, 0x30	; 48
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	b6 01       	movw	r22, r12
    187c:	4c d0       	rcall	.+152    	; 0x1916 <fputc>
    187e:	ea 94       	dec	r14
    1880:	7e 14       	cp	r7, r14
    1882:	c8 f3       	brcs	.-14     	; 0x1876 <vfprintf+0x392>
    1884:	7a 94       	dec	r7
    1886:	f2 01       	movw	r30, r4
    1888:	e7 0d       	add	r30, r7
    188a:	f1 1d       	adc	r31, r1
    188c:	80 81       	ld	r24, Z
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	b6 01       	movw	r22, r12
    1892:	41 d0       	rcall	.+130    	; 0x1916 <fputc>
    1894:	77 20       	and	r7, r7
    1896:	b1 f7       	brne	.-20     	; 0x1884 <vfprintf+0x3a0>
    1898:	05 c0       	rjmp	.+10     	; 0x18a4 <vfprintf+0x3c0>
    189a:	80 e2       	ldi	r24, 0x20	; 32
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	b6 01       	movw	r22, r12
    18a0:	3a d0       	rcall	.+116    	; 0x1916 <fputc>
    18a2:	fa 94       	dec	r15
    18a4:	ff 20       	and	r15, r15
    18a6:	c9 f7       	brne	.-14     	; 0x189a <vfprintf+0x3b6>
    18a8:	44 ce       	rjmp	.-888    	; 0x1532 <vfprintf+0x4e>
    18aa:	f6 01       	movw	r30, r12
    18ac:	26 81       	ldd	r18, Z+6	; 0x06
    18ae:	37 81       	ldd	r19, Z+7	; 0x07
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <vfprintf+0x3d2>
    18b2:	2f ef       	ldi	r18, 0xFF	; 255
    18b4:	3f ef       	ldi	r19, 0xFF	; 255
    18b6:	c9 01       	movw	r24, r18
    18b8:	2c 96       	adiw	r28, 0x0c	; 12
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	ef 90       	pop	r14
    18d0:	df 90       	pop	r13
    18d2:	cf 90       	pop	r12
    18d4:	bf 90       	pop	r11
    18d6:	af 90       	pop	r10
    18d8:	9f 90       	pop	r9
    18da:	8f 90       	pop	r8
    18dc:	7f 90       	pop	r7
    18de:	6f 90       	pop	r6
    18e0:	5f 90       	pop	r5
    18e2:	4f 90       	pop	r4
    18e4:	3f 90       	pop	r3
    18e6:	2f 90       	pop	r2
    18e8:	08 95       	ret

000018ea <strnlen_P>:
    18ea:	fc 01       	movw	r30, r24
    18ec:	05 90       	lpm	r0, Z+
    18ee:	61 50       	subi	r22, 0x01	; 1
    18f0:	70 40       	sbci	r23, 0x00	; 0
    18f2:	01 10       	cpse	r0, r1
    18f4:	d8 f7       	brcc	.-10     	; 0x18ec <strnlen_P+0x2>
    18f6:	80 95       	com	r24
    18f8:	90 95       	com	r25
    18fa:	8e 0f       	add	r24, r30
    18fc:	9f 1f       	adc	r25, r31
    18fe:	08 95       	ret

00001900 <strnlen>:
    1900:	fc 01       	movw	r30, r24
    1902:	61 50       	subi	r22, 0x01	; 1
    1904:	70 40       	sbci	r23, 0x00	; 0
    1906:	01 90       	ld	r0, Z+
    1908:	01 10       	cpse	r0, r1
    190a:	d8 f7       	brcc	.-10     	; 0x1902 <strnlen+0x2>
    190c:	80 95       	com	r24
    190e:	90 95       	com	r25
    1910:	8e 0f       	add	r24, r30
    1912:	9f 1f       	adc	r25, r31
    1914:	08 95       	ret

00001916 <fputc>:
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	8c 01       	movw	r16, r24
    1920:	eb 01       	movw	r28, r22
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	81 ff       	sbrs	r24, 1
    1926:	1b c0       	rjmp	.+54     	; 0x195e <fputc+0x48>
    1928:	82 ff       	sbrs	r24, 2
    192a:	0d c0       	rjmp	.+26     	; 0x1946 <fputc+0x30>
    192c:	2e 81       	ldd	r18, Y+6	; 0x06
    192e:	3f 81       	ldd	r19, Y+7	; 0x07
    1930:	8c 81       	ldd	r24, Y+4	; 0x04
    1932:	9d 81       	ldd	r25, Y+5	; 0x05
    1934:	28 17       	cp	r18, r24
    1936:	39 07       	cpc	r19, r25
    1938:	64 f4       	brge	.+24     	; 0x1952 <fputc+0x3c>
    193a:	e8 81       	ld	r30, Y
    193c:	f9 81       	ldd	r31, Y+1	; 0x01
    193e:	01 93       	st	Z+, r16
    1940:	f9 83       	std	Y+1, r31	; 0x01
    1942:	e8 83       	st	Y, r30
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <fputc+0x3c>
    1946:	e8 85       	ldd	r30, Y+8	; 0x08
    1948:	f9 85       	ldd	r31, Y+9	; 0x09
    194a:	80 2f       	mov	r24, r16
    194c:	09 95       	icall
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	31 f4       	brne	.+12     	; 0x195e <fputc+0x48>
    1952:	8e 81       	ldd	r24, Y+6	; 0x06
    1954:	9f 81       	ldd	r25, Y+7	; 0x07
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	9f 83       	std	Y+7, r25	; 0x07
    195a:	8e 83       	std	Y+6, r24	; 0x06
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <fputc+0x4c>
    195e:	0f ef       	ldi	r16, 0xFF	; 255
    1960:	1f ef       	ldi	r17, 0xFF	; 255
    1962:	c8 01       	movw	r24, r16
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	08 95       	ret

0000196e <__ultoa_invert>:
    196e:	fa 01       	movw	r30, r20
    1970:	aa 27       	eor	r26, r26
    1972:	28 30       	cpi	r18, 0x08	; 8
    1974:	51 f1       	breq	.+84     	; 0x19ca <__ultoa_invert+0x5c>
    1976:	20 31       	cpi	r18, 0x10	; 16
    1978:	81 f1       	breq	.+96     	; 0x19da <__ultoa_invert+0x6c>
    197a:	e8 94       	clt
    197c:	6f 93       	push	r22
    197e:	6e 7f       	andi	r22, 0xFE	; 254
    1980:	6e 5f       	subi	r22, 0xFE	; 254
    1982:	7f 4f       	sbci	r23, 0xFF	; 255
    1984:	8f 4f       	sbci	r24, 0xFF	; 255
    1986:	9f 4f       	sbci	r25, 0xFF	; 255
    1988:	af 4f       	sbci	r26, 0xFF	; 255
    198a:	b1 e0       	ldi	r27, 0x01	; 1
    198c:	3e d0       	rcall	.+124    	; 0x1a0a <__ultoa_invert+0x9c>
    198e:	b4 e0       	ldi	r27, 0x04	; 4
    1990:	3c d0       	rcall	.+120    	; 0x1a0a <__ultoa_invert+0x9c>
    1992:	67 0f       	add	r22, r23
    1994:	78 1f       	adc	r23, r24
    1996:	89 1f       	adc	r24, r25
    1998:	9a 1f       	adc	r25, r26
    199a:	a1 1d       	adc	r26, r1
    199c:	68 0f       	add	r22, r24
    199e:	79 1f       	adc	r23, r25
    19a0:	8a 1f       	adc	r24, r26
    19a2:	91 1d       	adc	r25, r1
    19a4:	a1 1d       	adc	r26, r1
    19a6:	6a 0f       	add	r22, r26
    19a8:	71 1d       	adc	r23, r1
    19aa:	81 1d       	adc	r24, r1
    19ac:	91 1d       	adc	r25, r1
    19ae:	a1 1d       	adc	r26, r1
    19b0:	20 d0       	rcall	.+64     	; 0x19f2 <__ultoa_invert+0x84>
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <__ultoa_invert+0x48>
    19b4:	68 94       	set
    19b6:	3f 91       	pop	r19
    19b8:	2a e0       	ldi	r18, 0x0A	; 10
    19ba:	26 9f       	mul	r18, r22
    19bc:	11 24       	eor	r1, r1
    19be:	30 19       	sub	r19, r0
    19c0:	30 5d       	subi	r19, 0xD0	; 208
    19c2:	31 93       	st	Z+, r19
    19c4:	de f6       	brtc	.-74     	; 0x197c <__ultoa_invert+0xe>
    19c6:	cf 01       	movw	r24, r30
    19c8:	08 95       	ret
    19ca:	46 2f       	mov	r20, r22
    19cc:	47 70       	andi	r20, 0x07	; 7
    19ce:	40 5d       	subi	r20, 0xD0	; 208
    19d0:	41 93       	st	Z+, r20
    19d2:	b3 e0       	ldi	r27, 0x03	; 3
    19d4:	0f d0       	rcall	.+30     	; 0x19f4 <__ultoa_invert+0x86>
    19d6:	c9 f7       	brne	.-14     	; 0x19ca <__ultoa_invert+0x5c>
    19d8:	f6 cf       	rjmp	.-20     	; 0x19c6 <__ultoa_invert+0x58>
    19da:	46 2f       	mov	r20, r22
    19dc:	4f 70       	andi	r20, 0x0F	; 15
    19de:	40 5d       	subi	r20, 0xD0	; 208
    19e0:	4a 33       	cpi	r20, 0x3A	; 58
    19e2:	18 f0       	brcs	.+6      	; 0x19ea <__ultoa_invert+0x7c>
    19e4:	49 5d       	subi	r20, 0xD9	; 217
    19e6:	31 fd       	sbrc	r19, 1
    19e8:	40 52       	subi	r20, 0x20	; 32
    19ea:	41 93       	st	Z+, r20
    19ec:	02 d0       	rcall	.+4      	; 0x19f2 <__ultoa_invert+0x84>
    19ee:	a9 f7       	brne	.-22     	; 0x19da <__ultoa_invert+0x6c>
    19f0:	ea cf       	rjmp	.-44     	; 0x19c6 <__ultoa_invert+0x58>
    19f2:	b4 e0       	ldi	r27, 0x04	; 4
    19f4:	a6 95       	lsr	r26
    19f6:	97 95       	ror	r25
    19f8:	87 95       	ror	r24
    19fa:	77 95       	ror	r23
    19fc:	67 95       	ror	r22
    19fe:	ba 95       	dec	r27
    1a00:	c9 f7       	brne	.-14     	; 0x19f4 <__ultoa_invert+0x86>
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	61 05       	cpc	r22, r1
    1a06:	71 05       	cpc	r23, r1
    1a08:	08 95       	ret
    1a0a:	9b 01       	movw	r18, r22
    1a0c:	ac 01       	movw	r20, r24
    1a0e:	0a 2e       	mov	r0, r26
    1a10:	06 94       	lsr	r0
    1a12:	57 95       	ror	r21
    1a14:	47 95       	ror	r20
    1a16:	37 95       	ror	r19
    1a18:	27 95       	ror	r18
    1a1a:	ba 95       	dec	r27
    1a1c:	c9 f7       	brne	.-14     	; 0x1a10 <__ultoa_invert+0xa2>
    1a1e:	62 0f       	add	r22, r18
    1a20:	73 1f       	adc	r23, r19
    1a22:	84 1f       	adc	r24, r20
    1a24:	95 1f       	adc	r25, r21
    1a26:	a0 1d       	adc	r26, r0
    1a28:	08 95       	ret

00001a2a <_exit>:
    1a2a:	f8 94       	cli

00001a2c <__stop_program>:
    1a2c:	ff cf       	rjmp	.-2      	; 0x1a2c <__stop_program>
