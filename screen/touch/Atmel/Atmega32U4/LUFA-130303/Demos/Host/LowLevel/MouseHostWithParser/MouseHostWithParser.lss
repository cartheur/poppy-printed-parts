
MouseHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000024ee  00002582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fd  00800112  00800112  00002594  2**0
                  ALLOC
  3 .stab         000021a8  00000000  00000000  00002594  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7e  00000000  00000000  0000473c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000380  00000000  00000000  000054ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008cc  00000000  00000000  0000583a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005781  00000000  00000000  00006106  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001827  00000000  00000000  0000b887  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004920  00000000  00000000  0000d0ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000540  00000000  00000000  000119d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000268e  00000000  00000000  00011f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002f2f  00000000  00000000  0001459e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000ca7  00000000  00000000  000174cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000004a0  00000000  00000000  00018174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	63 c1       	rjmp	.+710    	; 0x2c8 <__ctors_end>
       2:	00 00       	nop
       4:	7f c1       	rjmp	.+766    	; 0x304 <__bad_interrupt>
       6:	00 00       	nop
       8:	7d c1       	rjmp	.+762    	; 0x304 <__bad_interrupt>
       a:	00 00       	nop
       c:	7b c1       	rjmp	.+758    	; 0x304 <__bad_interrupt>
       e:	00 00       	nop
      10:	79 c1       	rjmp	.+754    	; 0x304 <__bad_interrupt>
      12:	00 00       	nop
      14:	77 c1       	rjmp	.+750    	; 0x304 <__bad_interrupt>
      16:	00 00       	nop
      18:	75 c1       	rjmp	.+746    	; 0x304 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	73 c1       	rjmp	.+742    	; 0x304 <__bad_interrupt>
      1e:	00 00       	nop
      20:	71 c1       	rjmp	.+738    	; 0x304 <__bad_interrupt>
      22:	00 00       	nop
      24:	6f c1       	rjmp	.+734    	; 0x304 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__vector_10>
      2c:	6b c1       	rjmp	.+726    	; 0x304 <__bad_interrupt>
      2e:	00 00       	nop
      30:	69 c1       	rjmp	.+722    	; 0x304 <__bad_interrupt>
      32:	00 00       	nop
      34:	67 c1       	rjmp	.+718    	; 0x304 <__bad_interrupt>
      36:	00 00       	nop
      38:	65 c1       	rjmp	.+714    	; 0x304 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	63 c1       	rjmp	.+710    	; 0x304 <__bad_interrupt>
      3e:	00 00       	nop
      40:	61 c1       	rjmp	.+706    	; 0x304 <__bad_interrupt>
      42:	00 00       	nop
      44:	5f c1       	rjmp	.+702    	; 0x304 <__bad_interrupt>
      46:	00 00       	nop
      48:	5d c1       	rjmp	.+698    	; 0x304 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5b c1       	rjmp	.+694    	; 0x304 <__bad_interrupt>
      4e:	00 00       	nop
      50:	59 c1       	rjmp	.+690    	; 0x304 <__bad_interrupt>
      52:	00 00       	nop
      54:	57 c1       	rjmp	.+686    	; 0x304 <__bad_interrupt>
      56:	00 00       	nop
      58:	55 c1       	rjmp	.+682    	; 0x304 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	53 c1       	rjmp	.+678    	; 0x304 <__bad_interrupt>
      5e:	00 00       	nop
      60:	51 c1       	rjmp	.+674    	; 0x304 <__bad_interrupt>
      62:	00 00       	nop
      64:	4f c1       	rjmp	.+670    	; 0x304 <__bad_interrupt>
      66:	00 00       	nop
      68:	4d c1       	rjmp	.+666    	; 0x304 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4b c1       	rjmp	.+662    	; 0x304 <__bad_interrupt>
      6e:	00 00       	nop
      70:	49 c1       	rjmp	.+658    	; 0x304 <__bad_interrupt>
      72:	00 00       	nop
      74:	47 c1       	rjmp	.+654    	; 0x304 <__bad_interrupt>
      76:	00 00       	nop
      78:	45 c1       	rjmp	.+650    	; 0x304 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	43 c1       	rjmp	.+646    	; 0x304 <__bad_interrupt>
      7e:	00 00       	nop
      80:	41 c1       	rjmp	.+642    	; 0x304 <__bad_interrupt>
      82:	00 00       	nop
      84:	3f c1       	rjmp	.+638    	; 0x304 <__bad_interrupt>
      86:	00 00       	nop
      88:	3d c1       	rjmp	.+634    	; 0x304 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3b c1       	rjmp	.+630    	; 0x304 <__bad_interrupt>
      8e:	00 00       	nop
      90:	39 c1       	rjmp	.+626    	; 0x304 <__bad_interrupt>
      92:	00 00       	nop
      94:	37 c1       	rjmp	.+622    	; 0x304 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4312>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4305>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4300>:
     11d:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     12d:	2e 0d 0a 00                                         ....

00000131 <__c.4298>:
     131:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     141:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000014b <__c.4296>:
     14b:	4e 6f 74 20 61 20 76 61 6c 69 64 20 4d 6f 75 73     Not a valid Mous
     15b:	65 2e 1b 5b 33 37 6d 00                             e..[37m.

00000163 <__c.4294>:
     163:	1b 5b 33 31 6d 52 65 70 6f 72 74 20 50 61 72 73     .[31mReport Pars
     173:	65 20 45 72 72 6f 72 2e 0d 0a 00                    e Error....

0000017e <__c.4292>:
     17e:	50 72 6f 63 65 73 73 69 6e 67 20 48 49 44 20 52     Processing HID R
     18e:	65 70 6f 72 74 20 28 53 69 7a 65 20 25 64 20 42     eport (Size %d B
     19e:	79 74 65 73 29 2e 0d 0a 00                          ytes)....

000001a7 <__c.4290>:
     1a7:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1b7:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1c7:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1d7:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1e7:	37 6d 00                                            7m.

000001ea <__c.4288>:
     1ea:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1fa:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000204 <__c.4286>:
     204:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     214:	69 63 65 2e 0d 0a 00                                ice....

0000021b <__c.4284>:
     21b:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     22b:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     23b:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000245 <__c.4281>:
     245:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     255:	61 74 61 2e 0d 0a 00                                ata....

0000025c <__c.4276>:
     25c:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     26c:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

0000027b <__c.4271>:
     27b:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     28b:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000298 <__c.4262>:
     298:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 49 44 20 50     .[36mMouse HID P
     2a8:	61 72 73 65 72 20 48 6f 73 74 20 44 65 6d 6f 20     arser Host Demo 
     2b8:	72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00     running....[37m.

000002c8 <__ctors_end>:
     2c8:	11 24       	eor	r1, r1
     2ca:	1f be       	out	0x3f, r1	; 63
     2cc:	cf ef       	ldi	r28, 0xFF	; 255
     2ce:	d0 e2       	ldi	r29, 0x20	; 32
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	cd bf       	out	0x3d, r28	; 61

000002d4 <__do_copy_data>:
     2d4:	11 e0       	ldi	r17, 0x01	; 1
     2d6:	a0 e0       	ldi	r26, 0x00	; 0
     2d8:	b1 e0       	ldi	r27, 0x01	; 1
     2da:	ee ee       	ldi	r30, 0xEE	; 238
     2dc:	f4 e2       	ldi	r31, 0x24	; 36
     2de:	00 e0       	ldi	r16, 0x00	; 0
     2e0:	0b bf       	out	0x3b, r16	; 59
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__do_copy_data+0x14>
     2e4:	07 90       	elpm	r0, Z+
     2e6:	0d 92       	st	X+, r0
     2e8:	a2 31       	cpi	r26, 0x12	; 18
     2ea:	b1 07       	cpc	r27, r17
     2ec:	d9 f7       	brne	.-10     	; 0x2e4 <__do_copy_data+0x10>

000002ee <__do_clear_bss>:
     2ee:	15 e0       	ldi	r17, 0x05	; 5
     2f0:	a2 e1       	ldi	r26, 0x12	; 18
     2f2:	b1 e0       	ldi	r27, 0x01	; 1
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <.do_clear_bss_start>

000002f6 <.do_clear_bss_loop>:
     2f6:	1d 92       	st	X+, r1

000002f8 <.do_clear_bss_start>:
     2f8:	af 30       	cpi	r26, 0x0F	; 15
     2fa:	b1 07       	cpc	r27, r17
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <.do_clear_bss_loop>
     2fe:	29 d2       	rcall	.+1106   	; 0x752 <main>
     300:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <_exit>

00000304 <__bad_interrupt>:
     304:	7d ce       	rjmp	.-774    	; 0x0 <__vectors>

00000306 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     306:	9b b1       	in	r25, 0x0b	; 11
     308:	9f 70       	andi	r25, 0x0F	; 15
     30a:	98 2b       	or	r25, r24
     30c:	9b b9       	out	0x0b, r25	; 11
			}
     30e:	08 95       	ret

00000310 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     310:	84 b7       	in	r24, 0x34	; 52
     312:	87 7f       	andi	r24, 0xF7	; 247
     314:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     316:	28 e1       	ldi	r18, 0x18	; 24
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	20 93 60 00 	sts	0x0060, r18
     320:	10 92 60 00 	sts	0x0060, r1
     324:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	80 e8       	ldi	r24, 0x80	; 128
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	80 93 61 00 	sts	0x0061, r24
     332:	90 93 61 00 	sts	0x0061, r25
     336:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     338:	83 e3       	ldi	r24, 0x33	; 51
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	90 93 cd 00 	sts	0x00CD, r25
     340:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     344:	86 e0       	ldi	r24, 0x06	; 6
     346:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     34a:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     34e:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     352:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     354:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     356:	8a b1       	in	r24, 0x0a	; 10
     358:	80 6f       	ori	r24, 0xF0	; 240
     35a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     35c:	8b b1       	in	r24, 0x0b	; 11
     35e:	8f 70       	andi	r24, 0x0F	; 15
     360:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     362:	0e 94 99 0c 	call	0x1932	; 0x1932 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <Serial_CreateStream>

0000036e <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     36e:	8b e7       	ldi	r24, 0x7B	; 123
     370:	92 e0       	ldi	r25, 0x02	; 2
     372:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     376:	80 ea       	ldi	r24, 0xA0	; 160
}
     378:	c6 cf       	rjmp	.-116    	; 0x306 <LEDs_SetAllLEDs>

0000037a <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     37a:	8c e5       	ldi	r24, 0x5C	; 92
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     382:	80 e1       	ldi	r24, 0x10	; 16
}
     384:	c0 cf       	rjmp	.-128    	; 0x306 <LEDs_SetAllLEDs>

00000386 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     386:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     388:	85 e4       	ldi	r24, 0x45	; 69
     38a:	92 e0       	ldi	r25, 0x02	; 2
     38c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     390:	0b d2       	rcall	.+1046   	; 0x7a8 <ProcessConfigurationDescriptor>
     392:	18 2f       	mov	r17, r24
     394:	88 23       	and	r24, r24
     396:	01 f1       	breq	.+64     	; 0x3d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
	{
		if (ErrorCode == ControlError)
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	19 f4       	brne	.+6      	; 0x3a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     39c:	8b e1       	ldi	r24, 0x1B	; 27
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     3a2:	84 e0       	ldi	r24, 0x04	; 4
     3a4:	92 e0       	ldi	r25, 0x02	; 2
     3a6:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3aa:	00 d0       	rcall	.+0      	; 0x3ac <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     3ae:	ed b7       	in	r30, 0x3d	; 61
     3b0:	fe b7       	in	r31, 0x3e	; 62
     3b2:	31 96       	adiw	r30, 0x01	; 1
     3b4:	2a ee       	ldi	r18, 0xEA	; 234
     3b6:	31 e0       	ldi	r19, 0x01	; 1
     3b8:	ad b7       	in	r26, 0x3d	; 61
     3ba:	be b7       	in	r27, 0x3e	; 62
     3bc:	12 96       	adiw	r26, 0x02	; 2
     3be:	3c 93       	st	X, r19
     3c0:	2e 93       	st	-X, r18
     3c2:	11 97       	sbiw	r26, 0x01	; 1
     3c4:	12 83       	std	Z+2, r17	; 0x02
     3c6:	13 82       	std	Z+3, r1	; 0x03
     3c8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	80 e9       	ldi	r24, 0x90	; 144
     3d6:	59 c0       	rjmp	.+178    	; 0x48a <EVENT_USB_Host_DeviceEnumerationComplete+0x104>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <USB_Host_SetDeviceConfiguration>
     3de:	88 23       	and	r24, r24
     3e0:	79 f0       	breq	.+30     	; 0x400 <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
     3e6:	ed b7       	in	r30, 0x3d	; 61
     3e8:	fe b7       	in	r31, 0x3e	; 62
     3ea:	31 96       	adiw	r30, 0x01	; 1
     3ec:	27 ea       	ldi	r18, 0xA7	; 167
     3ee:	31 e0       	ldi	r19, 0x01	; 1
     3f0:	ad b7       	in	r26, 0x3d	; 61
     3f2:	be b7       	in	r27, 0x3e	; 62
     3f4:	12 96       	adiw	r26, 0x02	; 2
     3f6:	3c 93       	st	X, r19
     3f8:	2e 93       	st	-X, r18
     3fa:	11 97       	sbiw	r26, 0x01	; 1
     3fc:	82 83       	std	Z+2, r24	; 0x02
     3fe:	e3 cf       	rjmp	.-58     	; 0x3c6 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Processing HID Report (Size %d Bytes).\r\n"), HIDReportSize);
     400:	00 d0       	rcall	.+0      	; 0x402 <EVENT_USB_Host_DeviceEnumerationComplete+0x7c>
     402:	00 d0       	rcall	.+0      	; 0x404 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     404:	8e e7       	ldi	r24, 0x7E	; 126
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	ed b7       	in	r30, 0x3d	; 61
     40a:	fe b7       	in	r31, 0x3e	; 62
     40c:	92 83       	std	Z+2, r25	; 0x02
     40e:	81 83       	std	Z+1, r24	; 0x01
     410:	80 91 ee 04 	lds	r24, 0x04EE
     414:	90 91 ef 04 	lds	r25, 0x04EF
     418:	94 83       	std	Z+4, r25	; 0x04
     41a:	83 83       	std	Z+3, r24	; 0x03
     41c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <printf_P>

	/* Get and process the device's first HID report descriptor */
	if ((ErrorCode = GetHIDReportData()) != ParseSuccessful)
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	53 d2       	rcall	.+1190   	; 0x8d0 <GetHIDReportData>
     42a:	18 2f       	mov	r17, r24
     42c:	88 23       	and	r24, r24
     42e:	41 f1       	breq	.+80     	; 0x480 <EVENT_USB_Host_DeviceEnumerationComplete+0xfa>
	{
		puts_P(PSTR(ESC_FG_RED "Report Parse Error.\r\n"));
     430:	83 e6       	ldi	r24, 0x63	; 99
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <puts_P>

		if (!(HIDReportInfo.TotalReportItems))
     438:	80 91 15 01 	lds	r24, 0x0115
     43c:	88 23       	and	r24, r24
     43e:	29 f4       	brne	.+10     	; 0x44a <EVENT_USB_Host_DeviceEnumerationComplete+0xc4>
			puts_P(PSTR("Not a valid Mouse." ESC_FG_WHITE));
     440:	8b e4       	ldi	r24, 0x4B	; 75
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <puts_P>
     448:	15 c0       	rjmp	.+42     	; 0x474 <EVENT_USB_Host_DeviceEnumerationComplete+0xee>
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     44a:	00 d0       	rcall	.+0      	; 0x44c <EVENT_USB_Host_DeviceEnumerationComplete+0xc6>
     44c:	00 d0       	rcall	.+0      	; 0x44e <EVENT_USB_Host_DeviceEnumerationComplete+0xc8>
     44e:	ed b7       	in	r30, 0x3d	; 61
     450:	fe b7       	in	r31, 0x3e	; 62
     452:	31 96       	adiw	r30, 0x01	; 1
     454:	21 e3       	ldi	r18, 0x31	; 49
     456:	31 e0       	ldi	r19, 0x01	; 1
     458:	ad b7       	in	r26, 0x3d	; 61
     45a:	be b7       	in	r27, 0x3e	; 62
     45c:	12 96       	adiw	r26, 0x02	; 2
     45e:	3c 93       	st	X, r19
     460:	2e 93       	st	-X, r18
     462:	11 97       	sbiw	r26, 0x01	; 1
     464:	12 83       	std	Z+2, r17	; 0x02
     466:	13 82       	std	Z+3, r1	; 0x03
     468:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <printf_P>
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     474:	80 e9       	ldi	r24, 0x90	; 144
     476:	47 df       	rcall	.-370    	; 0x306 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <USB_Host_SetDeviceConfiguration>
		return;
     47e:	06 c0       	rjmp	.+12     	; 0x48c <EVENT_USB_Host_DeviceEnumerationComplete+0x106>
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     480:	8d e1       	ldi	r24, 0x1D	; 29
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     488:	80 e6       	ldi	r24, 0x60	; 96
     48a:	3d df       	rcall	.-390    	; 0x306 <LEDs_SetAllLEDs>
}
     48c:	1f 91       	pop	r17
     48e:	08 95       	ret

00000490 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     490:	df 93       	push	r29
     492:	cf 93       	push	r28
     494:	0f 92       	push	r0
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     49a:	89 83       	std	Y+1, r24	; 0x01
     49c:	0e 94 31 0c 	call	0x1862	; 0x1862 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <EVENT_USB_Host_HostError+0x12>
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <EVENT_USB_Host_HostError+0x14>
     4a4:	ed b7       	in	r30, 0x3d	; 61
     4a6:	fe b7       	in	r31, 0x3e	; 62
     4a8:	31 96       	adiw	r30, 0x01	; 1
     4aa:	2e ee       	ldi	r18, 0xEE	; 238
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	ad b7       	in	r26, 0x3d	; 61
     4b0:	be b7       	in	r27, 0x3e	; 62
     4b2:	12 96       	adiw	r26, 0x02	; 2
     4b4:	3c 93       	st	X, r19
     4b6:	2e 93       	st	-X, r18
     4b8:	11 97       	sbiw	r26, 0x01	; 1
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	82 83       	std	Z+2, r24	; 0x02
     4be:	13 82       	std	Z+3, r1	; 0x03
     4c0:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	80 e9       	ldi	r24, 0x90	; 144
     4ce:	1b df       	rcall	.-458    	; 0x306 <LEDs_SetAllLEDs>
     4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <EVENT_USB_Host_HostError+0x40>

000004d2 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4d2:	90 91 fa 04 	lds	r25, 0x04FA
     4d6:	2d b7       	in	r18, 0x3d	; 61
     4d8:	3e b7       	in	r19, 0x3e	; 62
     4da:	28 50       	subi	r18, 0x08	; 8
     4dc:	30 40       	sbci	r19, 0x00	; 0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	3e bf       	out	0x3e, r19	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	2d bf       	out	0x3d, r18	; 61
     4e8:	ed b7       	in	r30, 0x3d	; 61
     4ea:	fe b7       	in	r31, 0x3e	; 62
     4ec:	31 96       	adiw	r30, 0x01	; 1
     4ee:	28 e9       	ldi	r18, 0x98	; 152
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	ad b7       	in	r26, 0x3d	; 61
     4f4:	be b7       	in	r27, 0x3e	; 62
     4f6:	12 96       	adiw	r26, 0x02	; 2
     4f8:	3c 93       	st	X, r19
     4fa:	2e 93       	st	-X, r18
     4fc:	11 97       	sbiw	r26, 0x01	; 1
     4fe:	82 83       	std	Z+2, r24	; 0x02
     500:	13 82       	std	Z+3, r1	; 0x03
     502:	64 83       	std	Z+4, r22	; 0x04
     504:	15 82       	std	Z+5, r1	; 0x05
     506:	96 83       	std	Z+6, r25	; 0x06
     508:	17 82       	std	Z+7, r1	; 0x07
     50a:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     50e:	2d b7       	in	r18, 0x3d	; 61
     510:	3e b7       	in	r19, 0x3e	; 62
     512:	28 5f       	subi	r18, 0xF8	; 248
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	3e bf       	out	0x3e, r19	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	2d bf       	out	0x3d, r18	; 61
     520:	80 e9       	ldi	r24, 0x90	; 144
}
     522:	f1 ce       	rjmp	.-542    	; 0x306 <LEDs_SetAllLEDs>

00000524 <ProcessMouseReport>:
 *  as required and displays movement and button presses on the board LEDs.
 *
 *  \param[in] MouseReport  Pointer to a HID report from an attached mouse device
 */
void ProcessMouseReport(uint8_t* MouseReport)
{
     524:	af 92       	push	r10
     526:	bf 92       	push	r11
     528:	cf 92       	push	r12
     52a:	df 92       	push	r13
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	8c 01       	movw	r16, r24
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     53a:	cc 24       	eor	r12, r12
 *
 *  \param[in] MouseReport  Pointer to a HID report from an attached mouse device
 */
void ProcessMouseReport(uint8_t* MouseReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;
     53c:	dd 24       	eor	r13, r13

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     53e:	4a e2       	ldi	r20, 0x2A	; 42
     540:	a4 2e       	mov	r10, r20
     542:	b1 2c       	mov	r11, r1

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     544:	30 e1       	ldi	r19, 0x10	; 16
     546:	e3 2e       	mov	r14, r19
     548:	f1 2c       	mov	r15, r1
void ProcessMouseReport(uint8_t* MouseReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     54a:	90 c0       	rjmp	.+288    	; 0x66c <ProcessMouseReport+0x148>
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     54c:	8c 2d       	mov	r24, r12
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	8a 9d       	mul	r24, r10
     552:	e0 01       	movw	r28, r0
     554:	8b 9d       	mul	r24, r11
     556:	d0 0d       	add	r29, r0
     558:	9a 9d       	mul	r25, r10
     55a:	d0 0d       	add	r29, r0
     55c:	11 24       	eor	r1, r1
     55e:	be 01       	movw	r22, r28
     560:	6a 5e       	subi	r22, 0xEA	; 234
     562:	7e 4f       	sbci	r23, 0xFE	; 254

		bool FoundData;

		if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     564:	cb 5e       	subi	r28, 0xEB	; 235
     566:	de 4f       	sbci	r29, 0xFE	; 254
     568:	2a 85       	ldd	r18, Y+10	; 0x0a
     56a:	3b 85       	ldd	r19, Y+11	; 0x0b
     56c:	29 30       	cpi	r18, 0x09	; 9
     56e:	31 05       	cpc	r19, r1
     570:	99 f4       	brne	.+38     	; 0x598 <ProcessMouseReport+0x74>
     572:	8b 81       	ldd	r24, Y+3	; 0x03
     574:	88 23       	and	r24, r24
     576:	09 f0       	breq	.+2      	; 0x57a <ProcessMouseReport+0x56>
     578:	78 c0       	rjmp	.+240    	; 0x66a <ProcessMouseReport+0x146>
			(ReportItem->ItemType                     == HID_REPORT_ITEM_In))
		{
			/* Get the mouse button value */
			FoundData = USB_GetHIDReportItemInfo(MouseReport, ReportItem);
     57a:	c8 01       	movw	r24, r16
     57c:	2e d6       	rcall	.+3164   	; 0x11da <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     57e:	88 23       	and	r24, r24
     580:	09 f4       	brne	.+2      	; 0x584 <ProcessMouseReport+0x60>
     582:	73 c0       	rjmp	.+230    	; 0x66a <ProcessMouseReport+0x146>
			  continue;

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
     584:	8b a1       	ldd	r24, Y+35	; 0x23
     586:	9c a1       	ldd	r25, Y+36	; 0x24
     588:	ad a1       	ldd	r26, Y+37	; 0x25
     58a:	be a1       	ldd	r27, Y+38	; 0x26
     58c:	00 97       	sbiw	r24, 0x00	; 0
     58e:	a1 05       	cpc	r26, r1
     590:	b1 05       	cpc	r27, r1
     592:	09 f0       	breq	.+2      	; 0x596 <ProcessMouseReport+0x72>
     594:	65 c0       	rjmp	.+202    	; 0x660 <ProcessMouseReport+0x13c>
     596:	69 c0       	rjmp	.+210    	; 0x66a <ProcessMouseReport+0x146>
			  LEDMask = LEDS_ALL_LEDS;
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     598:	21 30       	cpi	r18, 0x01	; 1
     59a:	31 05       	cpc	r19, r1
     59c:	09 f0       	breq	.+2      	; 0x5a0 <ProcessMouseReport+0x7c>
     59e:	65 c0       	rjmp	.+202    	; 0x66a <ProcessMouseReport+0x146>
				 (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
     5a0:	2c 85       	ldd	r18, Y+12	; 0x0c
     5a2:	3d 85       	ldd	r19, Y+13	; 0x0d

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
			  LEDMask = LEDS_ALL_LEDS;
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     5a4:	28 33       	cpi	r18, 0x38	; 56
     5a6:	31 05       	cpc	r19, r1
     5a8:	09 f5       	brne	.+66     	; 0x5ec <ProcessMouseReport+0xc8>
				 (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
     5aa:	4b 81       	ldd	r20, Y+3	; 0x03
     5ac:	44 23       	and	r20, r20
     5ae:	f1 f4       	brne	.+60     	; 0x5ec <ProcessMouseReport+0xc8>
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the mouse wheel value if it is contained within the current
			 * report, if not, skip to the next item in the parser list
			 */
			if (!(USB_GetHIDReportItemInfo(MouseReport, ReportItem)))
     5b0:	c8 01       	movw	r24, r16
     5b2:	13 d6       	rcall	.+3110   	; 0x11da <USB_GetHIDReportItemInfo>
     5b4:	88 23       	and	r24, r24
     5b6:	09 f4       	brne	.+2      	; 0x5ba <ProcessMouseReport+0x96>
     5b8:	58 c0       	rjmp	.+176    	; 0x66a <ProcessMouseReport+0x146>
			  continue;

			int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);
     5ba:	89 85       	ldd	r24, Y+9	; 0x09
     5bc:	97 01       	movw	r18, r14
     5be:	28 1b       	sub	r18, r24
     5c0:	31 09       	sbc	r19, r1
     5c2:	8b a1       	ldd	r24, Y+35	; 0x23
     5c4:	9c a1       	ldd	r25, Y+36	; 0x24
     5c6:	ad a1       	ldd	r26, Y+37	; 0x25
     5c8:	be a1       	ldd	r27, Y+38	; 0x26
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <ProcessMouseReport+0xb0>
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	aa 1f       	adc	r26, r26
     5d2:	bb 1f       	adc	r27, r27
     5d4:	2a 95       	dec	r18
     5d6:	d2 f7       	brpl	.-12     	; 0x5cc <ProcessMouseReport+0xa8>

			if (WheelDelta)
     5d8:	00 97       	sbiw	r24, 0x00	; 0
     5da:	09 f4       	brne	.+2      	; 0x5de <ProcessMouseReport+0xba>
     5dc:	46 c0       	rjmp	.+140    	; 0x66a <ProcessMouseReport+0x146>
			  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     5de:	18 16       	cp	r1, r24
     5e0:	19 06       	cpc	r1, r25
     5e2:	0c f0       	brlt	.+2      	; 0x5e6 <ProcessMouseReport+0xc2>
     5e4:	40 c0       	rjmp	.+128    	; 0x666 <ProcessMouseReport+0x142>
     5e6:	20 eb       	ldi	r18, 0xB0	; 176
     5e8:	d2 2e       	mov	r13, r18
     5ea:	3f c0       	rjmp	.+126    	; 0x66a <ProcessMouseReport+0x146>
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
     5ec:	20 53       	subi	r18, 0x30	; 48
     5ee:	30 40       	sbci	r19, 0x00	; 0
			int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);

			if (WheelDelta)
			  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     5f0:	22 30       	cpi	r18, 0x02	; 2
     5f2:	31 05       	cpc	r19, r1
     5f4:	d0 f5       	brcc	.+116    	; 0x66a <ProcessMouseReport+0x146>
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
				  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
     5f6:	8a 9d       	mul	r24, r10
     5f8:	e0 01       	movw	r28, r0
     5fa:	8b 9d       	mul	r24, r11
     5fc:	d0 0d       	add	r29, r0
     5fe:	9a 9d       	mul	r25, r10
     600:	d0 0d       	add	r29, r0
     602:	11 24       	eor	r1, r1
     604:	cb 5e       	subi	r28, 0xEB	; 235
     606:	de 4f       	sbci	r29, 0xFE	; 254
			if (WheelDelta)
			  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
				  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
     608:	8b 81       	ldd	r24, Y+3	; 0x03
     60a:	88 23       	and	r24, r24
     60c:	71 f5       	brne	.+92     	; 0x66a <ProcessMouseReport+0x146>
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the mouse relative position value */
			FoundData = USB_GetHIDReportItemInfo(MouseReport, ReportItem);
     60e:	c8 01       	movw	r24, r16
     610:	e4 d5       	rcall	.+3016   	; 0x11da <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     612:	88 23       	and	r24, r24
     614:	51 f1       	breq	.+84     	; 0x66a <ProcessMouseReport+0x146>
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     616:	89 85       	ldd	r24, Y+9	; 0x09
     618:	97 01       	movw	r18, r14
     61a:	28 1b       	sub	r18, r24
     61c:	31 09       	sbc	r19, r1
     61e:	8b a1       	ldd	r24, Y+35	; 0x23
     620:	9c a1       	ldd	r25, Y+36	; 0x24
     622:	ad a1       	ldd	r26, Y+37	; 0x25
     624:	be a1       	ldd	r27, Y+38	; 0x26
     626:	04 c0       	rjmp	.+8      	; 0x630 <ProcessMouseReport+0x10c>
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	aa 1f       	adc	r26, r26
     62e:	bb 1f       	adc	r27, r27
     630:	2a 95       	dec	r18
     632:	d2 f7       	brpl	.-12     	; 0x628 <ProcessMouseReport+0x104>

			/* Check to see if a (non-zero) delta movement has been indicated */
			if (DeltaMovement)
     634:	00 97       	sbiw	r24, 0x00	; 0
     636:	c9 f0       	breq	.+50     	; 0x66a <ProcessMouseReport+0x146>
			{
				/* Determine if the report is for the X or Y delta movement, light LEDs as appropriate */
				if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     638:	2c 85       	ldd	r18, Y+12	; 0x0c
     63a:	3d 85       	ldd	r19, Y+13	; 0x0d
     63c:	20 33       	cpi	r18, 0x30	; 48
     63e:	31 05       	cpc	r19, r1
     640:	39 f4       	brne	.+14     	; 0x650 <ProcessMouseReport+0x12c>
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     642:	18 16       	cp	r1, r24
     644:	19 06       	cpc	r1, r25
     646:	14 f4       	brge	.+4      	; 0x64c <ProcessMouseReport+0x128>
     648:	80 e1       	ldi	r24, 0x10	; 16
     64a:	08 c0       	rjmp	.+16     	; 0x65c <ProcessMouseReport+0x138>
     64c:	80 e2       	ldi	r24, 0x20	; 32
     64e:	06 c0       	rjmp	.+12     	; 0x65c <ProcessMouseReport+0x138>
				else
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     650:	18 16       	cp	r1, r24
     652:	19 06       	cpc	r1, r25
     654:	14 f4       	brge	.+4      	; 0x65a <ProcessMouseReport+0x136>
     656:	80 e8       	ldi	r24, 0x80	; 128
     658:	01 c0       	rjmp	.+2      	; 0x65c <ProcessMouseReport+0x138>
     65a:	80 e4       	ldi	r24, 0x40	; 64
     65c:	d8 2a       	or	r13, r24
     65e:	05 c0       	rjmp	.+10     	; 0x66a <ProcessMouseReport+0x146>
			if (!(FoundData))
			  continue;

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
			  LEDMask = LEDS_ALL_LEDS;
     660:	90 ef       	ldi	r25, 0xF0	; 240
     662:	d9 2e       	mov	r13, r25
     664:	02 c0       	rjmp	.+4      	; 0x66a <ProcessMouseReport+0x146>
			  continue;

			int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);

			if (WheelDelta)
			  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     666:	80 e7       	ldi	r24, 0x70	; 112
     668:	d8 2e       	mov	r13, r24
void ProcessMouseReport(uint8_t* MouseReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     66a:	c3 94       	inc	r12
     66c:	80 91 15 01 	lds	r24, 0x0115
     670:	c8 16       	cp	r12, r24
     672:	08 f4       	brcc	.+2      	; 0x676 <ProcessMouseReport+0x152>
     674:	6b cf       	rjmp	.-298    	; 0x54c <ProcessMouseReport+0x28>
			}
		}
	}

	/* Display the button information on the board LEDs */
	LEDs_SetAllLEDs(LEDMask);
     676:	8d 2d       	mov	r24, r13
     678:	46 de       	rcall	.-884    	; 0x306 <LEDs_SetAllLEDs>
}
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	cf 90       	pop	r12
     68a:	bf 90       	pop	r11
     68c:	af 90       	pop	r10
     68e:	08 95       	ret

00000690 <MouseHost_Task>:

/** Task to read and process the HID report descriptor and HID reports from the device and display the
 *  results onto the board LEDs.
 */
void MouseHost_Task(void)
{
     690:	af 92       	push	r10
     692:	bf 92       	push	r11
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	df 93       	push	r29
     6a2:	cf 93       	push	r28
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze mouse data pipe */
	Pipe_Freeze();
}
     6a8:	ed b6       	in	r14, 0x3d	; 61
     6aa:	fe b6       	in	r15, 0x3e	; 62
/** Task to read and process the HID report descriptor and HID reports from the device and display the
 *  results onto the board LEDs.
 */
void MouseHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     6ac:	80 91 fa 04 	lds	r24, 0x04FA
     6b0:	8b 30       	cpi	r24, 0x0B	; 11
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <MouseHost_Task+0x26>
     6b4:	3e c0       	rjmp	.+124    	; 0x732 <MouseHost_Task+0xa2>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     6bc:	80 91 a9 00 	lds	r24, 0x00A9
     6c0:	8f 7b       	andi	r24, 0xBF	; 191
     6c2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     6c6:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze mouse data pipe */
	Pipe_SelectPipe(MOUSE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     6ca:	80 ff       	sbrs	r24, 0
     6cc:	2d c0       	rjmp	.+90     	; 0x728 <MouseHost_Task+0x98>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     6ce:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Check if data has been received from the attached mouse */
		if (Pipe_IsReadWriteAllowed())
     6d2:	85 ff       	sbrs	r24, 5
     6d4:	24 c0       	rjmp	.+72     	; 0x71e <MouseHost_Task+0x8e>
     6d6:	cd b6       	in	r12, 0x3d	; 61
     6d8:	de b6       	in	r13, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     6da:	80 91 f6 00 	lds	r24, 0x00F6
     6de:	90 91 f7 00 	lds	r25, 0x00F7
		{
			/* Create buffer big enough for the report */
			uint8_t MouseReport[Pipe_BytesInPipe()];
     6e2:	ad b6       	in	r10, 0x3d	; 61
     6e4:	be b6       	in	r11, 0x3e	; 62
     6e6:	a8 1a       	sub	r10, r24
     6e8:	b9 0a       	sbc	r11, r25
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	be be       	out	0x3e, r11	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	ad be       	out	0x3d, r10	; 61
     6f4:	0d b7       	in	r16, 0x3d	; 61
     6f6:	1e b7       	in	r17, 0x3e	; 62
     6f8:	0f 5f       	subi	r16, 0xFF	; 255
     6fa:	1f 4f       	sbci	r17, 0xFF	; 255
     6fc:	60 91 f6 00 	lds	r22, 0x00F6
     700:	70 91 f7 00 	lds	r23, 0x00F7

			/* Load in the mouse report */
			Pipe_Read_Stream_LE(MouseReport, Pipe_BytesInPipe(), NULL);
     704:	c8 01       	movw	r24, r16
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	9c d7       	rcall	.+3896   	; 0x1644 <Pipe_Read_Stream_LE>

			/* Process the read in mouse report from the device */
			ProcessMouseReport(MouseReport);
     70c:	c8 01       	movw	r24, r16
     70e:	0a df       	rcall	.-492    	; 0x524 <ProcessMouseReport>
     710:	8e 2d       	mov	r24, r14
     712:	9d 2d       	mov	r25, r13
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	9e bf       	out	0x3e, r25	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	8d bf       	out	0x3d, r24	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     71e:	80 91 a6 00 	lds	r24, 0x00A6
     722:	8e 77       	andi	r24, 0x7E	; 126
     724:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     728:	80 91 a9 00 	lds	r24, 0x00A9
     72c:	80 64       	ori	r24, 0x40	; 64
     72e:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearIN();
	}

	/* Freeze mouse data pipe */
	Pipe_Freeze();
}
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	fe be       	out	0x3e, r15	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	ed be       	out	0x3d, r14	; 61
     73c:	cf 91       	pop	r28
     73e:	df 91       	pop	r29
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	df 90       	pop	r13
     74a:	cf 90       	pop	r12
     74c:	bf 90       	pop	r11
     74e:	af 90       	pop	r10
     750:	08 95       	ret

00000752 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     752:	de dd       	rcall	.-1092   	; 0x310 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse HID Parser Host Demo running.\r\n" ESC_FG_WHITE));
     754:	88 e9       	ldi	r24, 0x98	; 152
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     75c:	80 e1       	ldi	r24, 0x10	; 16
     75e:	d3 dd       	rcall	.-1114   	; 0x306 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     760:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		MouseHost_Task();
     762:	96 df       	rcall	.-212    	; 0x690 <MouseHost_Task>

		USB_USBTask();
     764:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USB_USBTask>
     768:	fc cf       	rjmp	.-8      	; 0x762 <main+0x10>

0000076a <DComp_NextMouseInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mouse HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMouseInterface(void* CurrentDescriptor)
{
     76a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     76c:	81 81       	ldd	r24, Z+1	; 0x01
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	19 f4       	brne	.+6      	; 0x778 <DComp_NextMouseInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
     772:	85 81       	ldd	r24, Z+5	; 0x05
     774:	83 30       	cpi	r24, 0x03	; 3
     776:	11 f0       	breq	.+4      	; 0x77c <DComp_NextMouseInterface+0x12>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	08 95       	ret
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
		{
			return DESCRIPTOR_SEARCH_Found;
     77c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     77e:	08 95       	ret

00000780 <DComp_NextMouseInterfaceDataEndpoint>:
 */
uint8_t DComp_NextMouseInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     780:	fc 01       	movw	r30, r24
     782:	81 81       	ldd	r24, Z+1	; 0x01
     784:	85 30       	cpi	r24, 0x05	; 5
     786:	21 f0       	breq	.+8      	; 0x790 <DComp_NextMouseInterfaceDataEndpoint+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     788:	84 30       	cpi	r24, 0x04	; 4
     78a:	21 f4       	brne	.+8      	; 0x794 <DComp_NextMouseInterfaceDataEndpoint+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	08 95       	ret
uint8_t DComp_NextMouseInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
	  return DESCRIPTOR_SEARCH_Found;
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     794:	82 e0       	ldi	r24, 0x02	; 2
}
     796:	08 95       	ret

00000798 <DComp_NextHID>:
 */
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
     798:	fc 01       	movw	r30, r24
     79a:	81 81       	ldd	r24, Z+1	; 0x01
     79c:	81 32       	cpi	r24, 0x21	; 33
     79e:	11 f4       	brne	.+4      	; 0x7a4 <DComp_NextHID+0xc>
	  return DESCRIPTOR_SEARCH_Found;
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	08 95       	ret
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     7a4:	82 e0       	ldi	r24, 0x02	; 2
}
     7a6:	08 95       	ret

000007a8 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref MouseHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     7a8:	8f 92       	push	r8
     7aa:	9f 92       	push	r9
     7ac:	af 92       	push	r10
     7ae:	bf 92       	push	r11
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	df 93       	push	r29
     7be:	cf 93       	push	r28
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	c4 50       	subi	r28, 0x04	; 4
     7c6:	d2 40       	sbci	r29, 0x02	; 2
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     7d2:	ae 01       	movw	r20, r28
     7d4:	4b 5f       	subi	r20, 0xFB	; 251
     7d6:	5f 4f       	sbci	r21, 0xFF	; 255
     7d8:	5a 83       	std	Y+2, r21	; 0x02
     7da:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     7dc:	8e 01       	movw	r16, r28
     7de:	0d 5f       	subi	r16, 0xFD	; 253
     7e0:	1f 4f       	sbci	r17, 0xFF	; 255
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	b8 01       	movw	r22, r16
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	32 e0       	ldi	r19, 0x02	; 2
     7ea:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <USB_Host_GetDeviceConfigDescriptor>
     7ee:	85 30       	cpi	r24, 0x05	; 5
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <ProcessConfigurationDescriptor+0x4c>
     7f2:	54 c0       	rjmp	.+168    	; 0x89c <ProcessConfigurationDescriptor+0xf4>
     7f4:	86 30       	cpi	r24, 0x06	; 6
     7f6:	59 f0       	breq	.+22     	; 0x80e <ProcessConfigurationDescriptor+0x66>
     7f8:	88 23       	and	r24, r24
     7fa:	59 f4       	brne	.+22     	; 0x812 <ProcessConfigurationDescriptor+0x6a>
     7fc:	cc 24       	eor	r12, r12
     7fe:	dd 24       	eor	r13, r13
     800:	88 24       	eor	r8, r8
     802:	99 24       	eor	r9, r9
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMouseInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     804:	58 01       	movw	r10, r16
     806:	8e 01       	movw	r16, r28
     808:	0f 5f       	subi	r16, 0xFF	; 255
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
     80c:	07 c0       	rjmp	.+14     	; 0x81c <ProcessConfigurationDescriptor+0x74>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     80e:	83 e0       	ldi	r24, 0x03	; 3
     810:	48 c0       	rjmp	.+144    	; 0x8a2 <ProcessConfigurationDescriptor+0xfa>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	46 c0       	rjmp	.+140    	; 0x8a2 <ProcessConfigurationDescriptor+0xfa>
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     816:	9c 01       	movw	r18, r24
     818:	c3 2e       	mov	r12, r19
     81a:	d8 2e       	mov	r13, r24
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     81c:	81 14       	cp	r8, r1
     81e:	91 04       	cpc	r9, r1
     820:	41 f0       	breq	.+16     	; 0x832 <ProcessConfigurationDescriptor+0x8a>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     822:	c5 01       	movw	r24, r10
     824:	b8 01       	movw	r22, r16
     826:	40 ec       	ldi	r20, 0xC0	; 192
     828:	53 e0       	ldi	r21, 0x03	; 3
     82a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     82e:	88 23       	and	r24, r24
     830:	b9 f0       	breq	.+46     	; 0x860 <ProcessConfigurationDescriptor+0xb8>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMouseInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     832:	c5 01       	movw	r24, r10
     834:	b8 01       	movw	r22, r16
     836:	45 eb       	ldi	r20, 0xB5	; 181
     838:	53 e0       	ldi	r21, 0x03	; 3
     83a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <USB_GetNextDescriptorComp>
     83e:	88 23       	and	r24, r24
     840:	79 f5       	brne	.+94     	; 0x8a0 <ProcessConfigurationDescriptor+0xf8>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     842:	c9 80       	ldd	r12, Y+1	; 0x01
     844:	ea 80       	ldd	r14, Y+2	; 0x02

			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     846:	c5 01       	movw	r24, r10
     848:	b8 01       	movw	r22, r16
     84a:	4c ec       	ldi	r20, 0xCC	; 204
     84c:	53 e0       	ldi	r21, 0x03	; 3
     84e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <USB_GetNextDescriptorComp>
     852:	88 23       	and	r24, r24
     854:	29 f5       	brne	.+74     	; 0x8a0 <ProcessConfigurationDescriptor+0xf8>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     856:	8c 2c       	mov	r8, r12
     858:	9e 2c       	mov	r9, r14
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the HID descriptor for later use */
			HIDDescriptor = DESCRIPTOR_PCAST(CurrConfigLocation, USB_HID_Descriptor_HID_t);
     85a:	c9 80       	ldd	r12, Y+1	; 0x01
     85c:	da 80       	ldd	r13, Y+2	; 0x02

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     85e:	35 c0       	rjmp	.+106    	; 0x8ca <ProcessConfigurationDescriptor+0x122>
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     860:	e9 80       	ldd	r14, Y+1	; 0x01
     862:	fa 80       	ldd	r15, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     864:	f7 01       	movw	r30, r14
     866:	42 81       	ldd	r20, Z+2	; 0x02
     868:	47 ff       	sbrs	r20, 7
     86a:	2f c0       	rjmp	.+94     	; 0x8ca <ProcessConfigurationDescriptor+0x122>
     86c:	9c 2d       	mov	r25, r12
     86e:	8d 2d       	mov	r24, r13
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     870:	e1 14       	cp	r14, r1
     872:	f1 04       	cpc	r15, r1
     874:	81 f2       	breq	.-96     	; 0x816 <ProcessConfigurationDescriptor+0x6e>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(MOUSE_DATA_IN_PIPE, EP_TYPE_INTERRUPT, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     876:	24 81       	ldd	r18, Z+4	; 0x04
     878:	35 81       	ldd	r19, Z+5	; 0x05
     87a:	81 e8       	ldi	r24, 0x81	; 129
     87c:	63 e0       	ldi	r22, 0x03	; 3
     87e:	01 e0       	ldi	r16, 0x01	; 1
     880:	44 d7       	rcall	.+3720   	; 0x170a <Pipe_ConfigurePipe>
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     882:	f7 01       	movw	r30, r14
     884:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     886:	80 93 ad 00 	sts	0x00AD, r24

	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;
     88a:	f6 01       	movw	r30, r12
     88c:	87 81       	ldd	r24, Z+7	; 0x07
     88e:	90 85       	ldd	r25, Z+8	; 0x08
     890:	90 93 ef 04 	sts	0x04EF, r25
     894:	80 93 ee 04 	sts	0x04EE, r24

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <ProcessConfigurationDescriptor+0xfa>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <ProcessConfigurationDescriptor+0xfa>
			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextHID) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     8a0:	84 e0       	ldi	r24, 0x04	; 4
	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     8a2:	cc 5f       	subi	r28, 0xFC	; 252
     8a4:	dd 4f       	sbci	r29, 0xFD	; 253
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	cf 91       	pop	r28
     8b2:	df 91       	pop	r29
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	bf 90       	pop	r11
     8c2:	af 90       	pop	r10
     8c4:	9f 90       	pop	r9
     8c6:	8f 90       	pop	r8
     8c8:	08 95       	ret
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     8ca:	9c 2d       	mov	r25, r12
     8cc:	8d 2d       	mov	r24, r13
     8ce:	a3 cf       	rjmp	.-186    	; 0x816 <ProcessConfigurationDescriptor+0x6e>

000008d0 <GetHIDReportData>:
 *  structures via the HID parser routines in the LUFA library.
 *
 *  \return  A value from the \ref MouseHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
     8d0:	ef 92       	push	r14
     8d2:	ff 92       	push	r15
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	df 93       	push	r29
     8da:	cf 93       	push	r28
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     8e0:	0d b7       	in	r16, 0x3d	; 61
     8e2:	1e b7       	in	r17, 0x3e	; 62
 *  \return  A value from the \ref MouseHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
	/* Create a buffer big enough to hold the entire returned HID report */
	uint8_t HIDReportData[HIDReportSize];
     8e4:	80 91 ee 04 	lds	r24, 0x04EE
     8e8:	90 91 ef 04 	lds	r25, 0x04EF
     8ec:	2d b7       	in	r18, 0x3d	; 61
     8ee:	3e b7       	in	r19, 0x3e	; 62
     8f0:	28 1b       	sub	r18, r24
     8f2:	39 0b       	sbc	r19, r25
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	3e bf       	out	0x3e, r19	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	2d bf       	out	0x3d, r18	; 61
     8fe:	ed b6       	in	r14, 0x3d	; 61
     900:	fe b6       	in	r15, 0x3e	; 62
     902:	08 94       	sec
     904:	e1 1c       	adc	r14, r1
     906:	f1 1c       	adc	r15, r1

	USB_ControlRequest = (USB_Request_Header_t)
     908:	21 e8       	ldi	r18, 0x81	; 129
     90a:	20 93 f2 04 	sts	0x04F2, r18
     90e:	26 e0       	ldi	r18, 0x06	; 6
     910:	20 93 f3 04 	sts	0x04F3, r18
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	32 e2       	ldi	r19, 0x22	; 34
     918:	30 93 f5 04 	sts	0x04F5, r19
     91c:	20 93 f4 04 	sts	0x04F4, r18
     920:	10 92 f7 04 	sts	0x04F7, r1
     924:	10 92 f6 04 	sts	0x04F6, r1
     928:	90 93 f9 04 	sts	0x04F9, r25
     92c:	80 93 f8 04 	sts	0x04F8, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     930:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
     934:	c7 01       	movw	r24, r14
     936:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <USB_Host_SendControlRequest>
     93a:	88 23       	and	r24, r24
     93c:	61 f4       	brne	.+24     	; 0x956 <GetHIDReportData+0x86>
	  return ParseControlError;

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
     93e:	60 91 ee 04 	lds	r22, 0x04EE
     942:	70 91 ef 04 	lds	r23, 0x04EF
     946:	c7 01       	movw	r24, r14
     948:	45 e1       	ldi	r20, 0x15	; 21
     94a:	51 e0       	ldi	r21, 0x01	; 1
     94c:	3c d0       	rcall	.+120    	; 0x9c6 <USB_ProcessHIDReport>
     94e:	88 23       	and	r24, r24
     950:	21 f0       	breq	.+8      	; 0x95a <GetHIDReportData+0x8a>
	  return ParseError;
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	03 c0       	rjmp	.+6      	; 0x95c <GetHIDReportData+0x8c>
	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
	  return ParseControlError;
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	01 c0       	rjmp	.+2      	; 0x95c <GetHIDReportData+0x8c>

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
     95a:	80 e0       	ldi	r24, 0x00	; 0
}
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	1e bf       	out	0x3e, r17	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	0d bf       	out	0x3d, r16	; 61
     966:	cf 91       	pop	r28
     968:	df 91       	pop	r29
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	08 95       	ret

00000974 <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \param[in] CurrentItem  Pointer to the item the HID report parser is currently working with
 *
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
     974:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     976:	16 96       	adiw	r26, 0x06	; 6
     978:	ed 91       	ld	r30, X+
     97a:	fc 91       	ld	r31, X
     97c:	17 97       	sbiw	r26, 0x07	; 7
     97e:	0d c0       	rjmp	.+26     	; 0x99a <CALLBACK_HIDParser_FilterHIDReportItem+0x26>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     980:	81 81       	ldd	r24, Z+1	; 0x01
     982:	92 81       	ldd	r25, Z+2	; 0x02
     984:	81 30       	cpi	r24, 0x01	; 1
     986:	91 05       	cpc	r25, r1
     988:	29 f4       	brne	.+10     	; 0x994 <CALLBACK_HIDParser_FilterHIDReportItem+0x20>
     98a:	83 81       	ldd	r24, Z+3	; 0x03
     98c:	94 81       	ldd	r25, Z+4	; 0x04
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	91 05       	cpc	r25, r1
     992:	39 f0       	breq	.+14     	; 0x9a2 <CALLBACK_HIDParser_FilterHIDReportItem+0x2e>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     994:	05 80       	ldd	r0, Z+5	; 0x05
     996:	f6 81       	ldd	r31, Z+6	; 0x06
     998:	e0 2d       	mov	r30, r0
     99a:	30 97       	sbiw	r30, 0x00	; 0
     99c:	89 f7       	brne	.-30     	; 0x980 <CALLBACK_HIDParser_FilterHIDReportItem+0xc>
		}
	}

	/* If a collection with the mouse usage was not found, indicate that we are not interested in this item */
	if (!IsMouse)
	  return false;
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	08 95       	ret

	/* Check the attributes of the current mouse item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     9a2:	19 96       	adiw	r26, 0x09	; 9
     9a4:	2d 91       	ld	r18, X+
     9a6:	3c 91       	ld	r19, X
     9a8:	1a 97       	sbiw	r26, 0x0a	; 10
     9aa:	29 30       	cpi	r18, 0x09	; 9
     9ac:	31 05       	cpc	r19, r1
     9ae:	41 f0       	breq	.+16     	; 0x9c0 <CALLBACK_HIDParser_FilterHIDReportItem+0x4c>
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	21 30       	cpi	r18, 0x01	; 1
     9b6:	31 05       	cpc	r19, r1
     9b8:	29 f0       	breq	.+10     	; 0x9c4 <CALLBACK_HIDParser_FilterHIDReportItem+0x50>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	08 95       	ret
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	90 e0       	ldi	r25, 0x00	; 0
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     9c4:	08 95       	ret

000009c6 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     9c6:	2f 92       	push	r2
     9c8:	3f 92       	push	r3
     9ca:	4f 92       	push	r4
     9cc:	5f 92       	push	r5
     9ce:	6f 92       	push	r6
     9d0:	7f 92       	push	r7
     9d2:	8f 92       	push	r8
     9d4:	9f 92       	push	r9
     9d6:	af 92       	push	r10
     9d8:	bf 92       	push	r11
     9da:	cf 92       	push	r12
     9dc:	df 92       	push	r13
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	df 93       	push	r29
     9e8:	cf 93       	push	r28
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	c9 59       	subi	r28, 0x99	; 153
     9f0:	d0 40       	sbci	r29, 0x00	; 0
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	6c 01       	movw	r12, r24
     9fe:	1b 01       	movw	r2, r22
     a00:	ba 01       	movw	r22, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
     a02:	40 57       	subi	r20, 0x70	; 112
     a04:	5c 4f       	sbci	r21, 0xFC	; 252
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     a06:	89 ed       	ldi	r24, 0xD9	; 217
     a08:	93 e0       	ldi	r25, 0x03	; 3
     a0a:	db 01       	movw	r26, r22
     a0c:	9c 01       	movw	r18, r24
     a0e:	1d 92       	st	X+, r1
     a10:	21 50       	subi	r18, 0x01	; 1
     a12:	30 40       	sbci	r19, 0x00	; 0
     a14:	e1 f7       	brne	.-8      	; 0xa0e <USB_ProcessHIDReport+0x48>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     a16:	9e 01       	movw	r18, r28
     a18:	25 5c       	subi	r18, 0xC5	; 197
     a1a:	3f 4f       	sbci	r19, 0xFF	; 255
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     a1c:	8c e1       	ldi	r24, 0x1C	; 28
     a1e:	d9 01       	movw	r26, r18
     a20:	1d 92       	st	X+, r1
     a22:	8a 95       	dec	r24
     a24:	e9 f7       	brne	.-6      	; 0xa20 <USB_ProcessHIDReport+0x5a>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     a26:	87 e0       	ldi	r24, 0x07	; 7
     a28:	da 01       	movw	r26, r20
     a2a:	1d 92       	st	X+, r1
     a2c:	8a 95       	dec	r24
     a2e:	e9 f7       	brne	.-6      	; 0xa2a <USB_ProcessHIDReport+0x64>

	ParserData->TotalDeviceReports = 1;
     a30:	fb 01       	movw	r30, r22
     a32:	e1 57       	subi	r30, 0x71	; 113
     a34:	fc 4f       	sbci	r31, 0xFC	; 252
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	80 83       	st	Z, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
     a3a:	e9 96       	adiw	r28, 0x39	; 57
     a3c:	1c ae       	std	Y+60, r1	; 0x3c
     a3e:	1d ae       	std	Y+61, r1	; 0x3d
     a40:	1e ae       	std	Y+62, r1	; 0x3e
     a42:	1f ae       	std	Y+63, r1	; 0x3f
     a44:	e9 97       	sbiw	r28, 0x39	; 57
     a46:	44 24       	eor	r4, r4
     a48:	55 24       	eor	r5, r5
     a4a:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
     a4c:	bb 24       	eor	r11, r11
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
     a4e:	88 24       	eor	r8, r8
     a50:	99 24       	eor	r9, r9

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     a52:	cb 01       	movw	r24, r22
     a54:	8a 52       	subi	r24, 0x2A	; 42
     a56:	9c 4f       	sbci	r25, 0xFC	; 252
     a58:	c0 58       	subi	r28, 0x80	; 128
     a5a:	df 4f       	sbci	r29, 0xFF	; 255
     a5c:	99 83       	std	Y+1, r25	; 0x01
     a5e:	88 83       	st	Y, r24
     a60:	c0 58       	subi	r28, 0x80	; 128
     a62:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     a64:	c8 56       	subi	r28, 0x68	; 104
     a66:	df 4f       	sbci	r29, 0xFF	; 255
     a68:	39 83       	std	Y+1, r19	; 0x01
     a6a:	28 83       	st	Y, r18
     a6c:	c8 59       	subi	r28, 0x98	; 152
     a6e:	d0 40       	sbci	r29, 0x00	; 0
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     a70:	db 01       	movw	r26, r22
     a72:	a0 5b       	subi	r26, 0xB0	; 176
     a74:	bc 4f       	sbci	r27, 0xFC	; 252
     a76:	c6 57       	subi	r28, 0x76	; 118
     a78:	df 4f       	sbci	r29, 0xFF	; 255
     a7a:	b9 83       	std	Y+1, r27	; 0x01
     a7c:	a8 83       	st	Y, r26
     a7e:	ca 58       	subi	r28, 0x8A	; 138
     a80:	d0 40       	sbci	r29, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     a82:	cb 01       	movw	r24, r22
     a84:	88 57       	subi	r24, 0x78	; 120
     a86:	9c 4f       	sbci	r25, 0xFC	; 252
     a88:	c4 57       	subi	r28, 0x74	; 116
     a8a:	df 4f       	sbci	r29, 0xFF	; 255
     a8c:	99 83       	std	Y+1, r25	; 0x01
     a8e:	88 83       	st	Y, r24
     a90:	cc 58       	subi	r28, 0x8C	; 140
     a92:	d0 40       	sbci	r29, 0x00	; 0
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     a94:	db 01       	movw	r26, r22
     a96:	a7 5b       	subi	r26, 0xB7	; 183
     a98:	bc 4f       	sbci	r27, 0xFC	; 252
     a9a:	c2 57       	subi	r28, 0x72	; 114
     a9c:	df 4f       	sbci	r29, 0xFF	; 255
     a9e:	b9 83       	std	Y+1, r27	; 0x01
     aa0:	a8 83       	st	Y, r26
     aa2:	ce 58       	subi	r28, 0x8E	; 142
     aa4:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     aa6:	c9 01       	movw	r24, r18
     aa8:	4c 96       	adiw	r24, 0x1c	; 28
     aaa:	c0 57       	subi	r28, 0x70	; 112
     aac:	df 4f       	sbci	r29, 0xFF	; 255
     aae:	99 83       	std	Y+1, r25	; 0x01
     ab0:	88 83       	st	Y, r24
     ab2:	c0 59       	subi	r28, 0x90	; 144
     ab4:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     ab6:	db 01       	movw	r26, r22
     ab8:	a8 52       	subi	r26, 0x28	; 40
     aba:	bc 4f       	sbci	r27, 0xFC	; 252
     abc:	ce 57       	subi	r28, 0x7E	; 126
     abe:	df 4f       	sbci	r29, 0xFF	; 255
     ac0:	b9 83       	std	Y+1, r27	; 0x01
     ac2:	a8 83       	st	Y, r26
     ac4:	c2 58       	subi	r28, 0x82	; 130
     ac6:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     ac8:	cc 57       	subi	r28, 0x7C	; 124
     aca:	df 4f       	sbci	r29, 0xFF	; 255
     acc:	f9 83       	std	Y+1, r31	; 0x01
     ace:	e8 83       	st	Y, r30
     ad0:	c4 58       	subi	r28, 0x84	; 132
     ad2:	d0 40       	sbci	r29, 0x00	; 0

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     ad4:	ca 01       	movw	r24, r20
     ad6:	ce 56       	subi	r28, 0x6E	; 110
     ad8:	df 4f       	sbci	r29, 0xFF	; 255
     ada:	48 83       	st	Y, r20
     adc:	c2 59       	subi	r28, 0x92	; 146
     ade:	d0 40       	sbci	r29, 0x00	; 0
     ae0:	cd 56       	subi	r28, 0x6D	; 109
     ae2:	df 4f       	sbci	r29, 0xFF	; 255
     ae4:	98 83       	st	Y, r25
     ae6:	c3 59       	subi	r28, 0x93	; 147
     ae8:	d0 40       	sbci	r29, 0x00	; 0
     aea:	e5 96       	adiw	r28, 0x35	; 53
     aec:	7f af       	std	Y+63, r23	; 0x3f
     aee:	6e af       	std	Y+62, r22	; 0x3e
     af0:	e5 97       	sbiw	r28, 0x35	; 53
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     af2:	38 c3       	rjmp	.+1648   	; 0x1164 <USB_ProcessHIDReport+0x79e>
	{
		uint8_t  HIDReportItem  = *ReportData;
     af4:	f6 01       	movw	r30, r12
     af6:	61 91       	ld	r22, Z+
     af8:	6f 01       	movw	r12, r30
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     afa:	08 94       	sec
     afc:	21 08       	sbc	r2, r1
     afe:	31 08       	sbc	r3, r1

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     b00:	86 2f       	mov	r24, r22
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	eb 96       	adiw	r28, 0x3b	; 59
     b06:	9f af       	std	Y+63, r25	; 0x3f
     b08:	8e af       	std	Y+62, r24	; 0x3e
     b0a:	eb 97       	sbiw	r28, 0x3b	; 59
     b0c:	83 70       	andi	r24, 0x03	; 3
     b0e:	90 70       	andi	r25, 0x00	; 0
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	91 05       	cpc	r25, r1
     b14:	09 f4       	brne	.+2      	; 0xb18 <USB_ProcessHIDReport+0x152>
     b16:	3f c0       	rjmp	.+126    	; 0xb96 <USB_ProcessHIDReport+0x1d0>
     b18:	83 30       	cpi	r24, 0x03	; 3
     b1a:	91 05       	cpc	r25, r1
     b1c:	29 f0       	breq	.+10     	; 0xb28 <USB_ProcessHIDReport+0x162>
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	91 05       	cpc	r25, r1
     b22:	09 f0       	breq	.+2      	; 0xb26 <USB_ProcessHIDReport+0x160>
     b24:	5c c0       	rjmp	.+184    	; 0xbde <USB_ProcessHIDReport+0x218>
     b26:	52 c0       	rjmp	.+164    	; 0xbcc <USB_ProcessHIDReport+0x206>
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     b28:	df 01       	movw	r26, r30
     b2a:	e3 80       	ldd	r14, Z+3	; 0x03
     b2c:	ff 24       	eor	r15, r15
     b2e:	00 e0       	ldi	r16, 0x00	; 0
     b30:	10 e0       	ldi	r17, 0x00	; 0
     b32:	1e 2d       	mov	r17, r14
     b34:	00 27       	eor	r16, r16
     b36:	ff 24       	eor	r15, r15
     b38:	ee 24       	eor	r14, r14
     b3a:	12 96       	adiw	r26, 0x02	; 2
     b3c:	8c 91       	ld	r24, X
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e0       	ldi	r26, 0x00	; 0
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	dc 01       	movw	r26, r24
     b46:	99 27       	eor	r25, r25
     b48:	88 27       	eor	r24, r24
     b4a:	e8 2a       	or	r14, r24
     b4c:	f9 2a       	or	r15, r25
     b4e:	0a 2b       	or	r16, r26
     b50:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     b52:	f6 01       	movw	r30, r12
     b54:	80 81       	ld	r24, Z
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	a0 e0       	ldi	r26, 0x00	; 0
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     b5c:	e8 2a       	or	r14, r24
     b5e:	f9 2a       	or	r15, r25
     b60:	0a 2b       	or	r16, r26
     b62:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     b64:	f1 81       	ldd	r31, Z+1	; 0x01
     b66:	ed 96       	adiw	r28, 0x3d	; 61
     b68:	ff af       	std	Y+63, r31	; 0x3f
     b6a:	ed 97       	sbiw	r28, 0x3d	; 61
     b6c:	ec 96       	adiw	r28, 0x3c	; 60
     b6e:	1f ae       	std	Y+63, r1	; 0x3f
     b70:	ec 97       	sbiw	r28, 0x3c	; 60
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     b72:	ed 96       	adiw	r28, 0x3d	; 61
     b74:	ee ad       	ldd	r30, Y+62	; 0x3e
     b76:	ff ad       	ldd	r31, Y+63	; 0x3f
     b78:	ed 97       	sbiw	r28, 0x3d	; 61
     b7a:	cf 01       	movw	r24, r30
     b7c:	a0 e0       	ldi	r26, 0x00	; 0
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e8 2a       	or	r14, r24
     b82:	f9 2a       	or	r15, r25
     b84:	0a 2b       	or	r16, r26
     b86:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     b88:	8c ef       	ldi	r24, 0xFC	; 252
     b8a:	9f ef       	ldi	r25, 0xFF	; 255
     b8c:	28 0e       	add	r2, r24
     b8e:	39 1e       	adc	r3, r25
				ReportData     += 4;
     b90:	a4 e0       	ldi	r26, 0x04	; 4
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	18 c0       	rjmp	.+48     	; 0xbc6 <USB_ProcessHIDReport+0x200>
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     b96:	f1 81       	ldd	r31, Z+1	; 0x01
     b98:	ef 96       	adiw	r28, 0x3f	; 63
     b9a:	ff af       	std	Y+63, r31	; 0x3f
     b9c:	ef 97       	sbiw	r28, 0x3f	; 63
     b9e:	ee 96       	adiw	r28, 0x3e	; 62
     ba0:	1f ae       	std	Y+63, r1	; 0x3f
     ba2:	ee 97       	sbiw	r28, 0x3e	; 62
     ba4:	d6 01       	movw	r26, r12
     ba6:	ec 90       	ld	r14, X
     ba8:	ff 24       	eor	r15, r15
     baa:	ef 96       	adiw	r28, 0x3f	; 63
     bac:	ee ad       	ldd	r30, Y+62	; 0x3e
     bae:	ff ad       	ldd	r31, Y+63	; 0x3f
     bb0:	ef 97       	sbiw	r28, 0x3f	; 63
     bb2:	ee 2a       	or	r14, r30
     bb4:	ff 2a       	or	r15, r31
     bb6:	00 e0       	ldi	r16, 0x00	; 0
     bb8:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
     bba:	8e ef       	ldi	r24, 0xFE	; 254
     bbc:	9f ef       	ldi	r25, 0xFF	; 255
     bbe:	28 0e       	add	r2, r24
     bc0:	39 1e       	adc	r3, r25
				ReportData     += 2;
     bc2:	a2 e0       	ldi	r26, 0x02	; 2
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	ca 0e       	add	r12, r26
     bc8:	db 1e       	adc	r13, r27
				break;
     bca:	0c c0       	rjmp	.+24     	; 0xbe4 <USB_ProcessHIDReport+0x21e>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     bcc:	e1 90       	ld	r14, Z+
     bce:	6f 01       	movw	r12, r30
     bd0:	ff 24       	eor	r15, r15
     bd2:	00 e0       	ldi	r16, 0x00	; 0
     bd4:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
				ReportData     += 1;
				break;
     bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <USB_ProcessHIDReport+0x21e>

			default:
				ReportItemData  = 0;
     bde:	ee 24       	eor	r14, r14
     be0:	ff 24       	eor	r15, r15
     be2:	87 01       	movw	r16, r14
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     be4:	eb 96       	adiw	r28, 0x3b	; 59
     be6:	8e ad       	ldd	r24, Y+62	; 0x3e
     be8:	9f ad       	ldd	r25, Y+63	; 0x3f
     bea:	eb 97       	sbiw	r28, 0x3b	; 59
     bec:	8c 7f       	andi	r24, 0xFC	; 252
     bee:	90 70       	andi	r25, 0x00	; 0
     bf0:	84 36       	cpi	r24, 0x64	; 100
     bf2:	91 05       	cpc	r25, r1
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <USB_ProcessHIDReport+0x232>
     bf6:	c9 c0       	rjmp	.+402    	; 0xd8a <USB_ProcessHIDReport+0x3c4>
     bf8:	85 36       	cpi	r24, 0x65	; 101
     bfa:	91 05       	cpc	r25, r1
     bfc:	8c f5       	brge	.+98     	; 0xc60 <USB_ProcessHIDReport+0x29a>
     bfe:	84 32       	cpi	r24, 0x24	; 36
     c00:	91 05       	cpc	r25, r1
     c02:	09 f4       	brne	.+2      	; 0xc06 <USB_ProcessHIDReport+0x240>
     c04:	a9 c0       	rjmp	.+338    	; 0xd58 <USB_ProcessHIDReport+0x392>
     c06:	85 32       	cpi	r24, 0x25	; 37
     c08:	91 05       	cpc	r25, r1
     c0a:	ac f4       	brge	.+42     	; 0xc36 <USB_ProcessHIDReport+0x270>
     c0c:	88 30       	cpi	r24, 0x08	; 8
     c0e:	91 05       	cpc	r25, r1
     c10:	09 f4       	brne	.+2      	; 0xc14 <USB_ProcessHIDReport+0x24e>
     c12:	31 c1       	rjmp	.+610    	; 0xe76 <USB_ProcessHIDReport+0x4b0>
     c14:	89 30       	cpi	r24, 0x09	; 9
     c16:	91 05       	cpc	r25, r1
     c18:	2c f4       	brge	.+10     	; 0xc24 <USB_ProcessHIDReport+0x25e>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	91 05       	cpc	r25, r1
     c1e:	09 f0       	breq	.+2      	; 0xc22 <USB_ProcessHIDReport+0x25c>
     c20:	8f c2       	rjmp	.+1310   	; 0x1140 <USB_ProcessHIDReport+0x77a>
     c22:	8e c0       	rjmp	.+284    	; 0xd40 <USB_ProcessHIDReport+0x37a>
     c24:	84 31       	cpi	r24, 0x14	; 20
     c26:	91 05       	cpc	r25, r1
     c28:	09 f4       	brne	.+2      	; 0xc2c <USB_ProcessHIDReport+0x266>
     c2a:	8e c0       	rjmp	.+284    	; 0xd48 <USB_ProcessHIDReport+0x382>
     c2c:	88 31       	cpi	r24, 0x18	; 24
     c2e:	91 05       	cpc	r25, r1
     c30:	09 f0       	breq	.+2      	; 0xc34 <USB_ProcessHIDReport+0x26e>
     c32:	86 c2       	rjmp	.+1292   	; 0x1140 <USB_ProcessHIDReport+0x77a>
     c34:	83 c2       	rjmp	.+1286   	; 0x113c <USB_ProcessHIDReport+0x776>
     c36:	84 33       	cpi	r24, 0x34	; 52
     c38:	91 05       	cpc	r25, r1
     c3a:	09 f4       	brne	.+2      	; 0xc3e <USB_ProcessHIDReport+0x278>
     c3c:	93 c0       	rjmp	.+294    	; 0xd64 <USB_ProcessHIDReport+0x39e>
     c3e:	85 33       	cpi	r24, 0x35	; 53
     c40:	91 05       	cpc	r25, r1
     c42:	2c f4       	brge	.+10     	; 0xc4e <USB_ProcessHIDReport+0x288>
     c44:	88 32       	cpi	r24, 0x28	; 40
     c46:	91 05       	cpc	r25, r1
     c48:	09 f0       	breq	.+2      	; 0xc4c <USB_ProcessHIDReport+0x286>
     c4a:	7a c2       	rjmp	.+1268   	; 0x1140 <USB_ProcessHIDReport+0x77a>
     c4c:	26 c1       	rjmp	.+588    	; 0xe9a <USB_ProcessHIDReport+0x4d4>
     c4e:	84 34       	cpi	r24, 0x44	; 68
     c50:	91 05       	cpc	r25, r1
     c52:	09 f4       	brne	.+2      	; 0xc56 <USB_ProcessHIDReport+0x290>
     c54:	8f c0       	rjmp	.+286    	; 0xd74 <USB_ProcessHIDReport+0x3ae>
     c56:	84 35       	cpi	r24, 0x54	; 84
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f0       	breq	.+2      	; 0xc5e <USB_ProcessHIDReport+0x298>
     c5c:	71 c2       	rjmp	.+1250   	; 0x1140 <USB_ProcessHIDReport+0x77a>
     c5e:	90 c0       	rjmp	.+288    	; 0xd80 <USB_ProcessHIDReport+0x3ba>
     c60:	84 39       	cpi	r24, 0x94	; 148
     c62:	91 05       	cpc	r25, r1
     c64:	09 f4       	brne	.+2      	; 0xc68 <USB_ProcessHIDReport+0x2a2>
     c66:	9a c0       	rjmp	.+308    	; 0xd9c <USB_ProcessHIDReport+0x3d6>
     c68:	85 39       	cpi	r24, 0x95	; 149
     c6a:	91 05       	cpc	r25, r1
     c6c:	a4 f4       	brge	.+40     	; 0xc96 <USB_ProcessHIDReport+0x2d0>
     c6e:	80 38       	cpi	r24, 0x80	; 128
     c70:	91 05       	cpc	r25, r1
     c72:	41 f1       	breq	.+80     	; 0xcc4 <USB_ProcessHIDReport+0x2fe>
     c74:	81 38       	cpi	r24, 0x81	; 129
     c76:	91 05       	cpc	r25, r1
     c78:	2c f4       	brge	.+10     	; 0xc84 <USB_ProcessHIDReport+0x2be>
     c7a:	84 37       	cpi	r24, 0x74	; 116
     c7c:	91 05       	cpc	r25, r1
     c7e:	09 f0       	breq	.+2      	; 0xc82 <USB_ProcessHIDReport+0x2bc>
     c80:	5f c2       	rjmp	.+1214   	; 0x1140 <USB_ProcessHIDReport+0x77a>
     c82:	89 c0       	rjmp	.+274    	; 0xd96 <USB_ProcessHIDReport+0x3d0>
     c84:	84 38       	cpi	r24, 0x84	; 132
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <USB_ProcessHIDReport+0x2c6>
     c8a:	8b c0       	rjmp	.+278    	; 0xda2 <USB_ProcessHIDReport+0x3dc>
     c8c:	80 39       	cpi	r24, 0x90	; 144
     c8e:	91 05       	cpc	r25, r1
     c90:	09 f0       	breq	.+2      	; 0xc94 <USB_ProcessHIDReport+0x2ce>
     c92:	56 c2       	rjmp	.+1196   	; 0x1140 <USB_ProcessHIDReport+0x77a>
     c94:	17 c0       	rjmp	.+46     	; 0xcc4 <USB_ProcessHIDReport+0x2fe>
     c96:	80 3b       	cpi	r24, 0xB0	; 176
     c98:	91 05       	cpc	r25, r1
     c9a:	a1 f0       	breq	.+40     	; 0xcc4 <USB_ProcessHIDReport+0x2fe>
     c9c:	81 3b       	cpi	r24, 0xB1	; 177
     c9e:	91 05       	cpc	r25, r1
     ca0:	4c f4       	brge	.+18     	; 0xcb4 <USB_ProcessHIDReport+0x2ee>
     ca2:	80 3a       	cpi	r24, 0xA0	; 160
     ca4:	91 05       	cpc	r25, r1
     ca6:	09 f4       	brne	.+2      	; 0xcaa <USB_ProcessHIDReport+0x2e4>
     ca8:	ff c0       	rjmp	.+510    	; 0xea8 <USB_ProcessHIDReport+0x4e2>
     caa:	84 3a       	cpi	r24, 0xA4	; 164
     cac:	91 05       	cpc	r25, r1
     cae:	09 f0       	breq	.+2      	; 0xcb2 <USB_ProcessHIDReport+0x2ec>
     cb0:	47 c2       	rjmp	.+1166   	; 0x1140 <USB_ProcessHIDReport+0x77a>
     cb2:	24 c0       	rjmp	.+72     	; 0xcfc <USB_ProcessHIDReport+0x336>
     cb4:	84 3b       	cpi	r24, 0xB4	; 180
     cb6:	91 05       	cpc	r25, r1
     cb8:	b1 f1       	breq	.+108    	; 0xd26 <USB_ProcessHIDReport+0x360>
     cba:	80 3c       	cpi	r24, 0xC0	; 192
     cbc:	91 05       	cpc	r25, r1
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <USB_ProcessHIDReport+0x2fc>
     cc0:	3f c2       	rjmp	.+1150   	; 0x1140 <USB_ProcessHIDReport+0x77a>
     cc2:	4f c1       	rjmp	.+670    	; 0xf62 <USB_ProcessHIDReport+0x59c>
     cc4:	aa 24       	eor	r10, r10
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
     cc6:	6c 7f       	andi	r22, 0xFC	; 252
     cc8:	c1 58       	subi	r28, 0x81	; 129
     cca:	df 4f       	sbci	r29, 0xFF	; 255
     ccc:	68 83       	st	Y, r22
     cce:	cf 57       	subi	r28, 0x7F	; 127
     cd0:	d0 40       	sbci	r29, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     cd2:	c8 01       	movw	r24, r16
     cd4:	b7 01       	movw	r22, r14
     cd6:	61 70       	andi	r22, 0x01	; 1
     cd8:	70 70       	andi	r23, 0x00	; 0
     cda:	80 70       	andi	r24, 0x00	; 0
     cdc:	90 70       	andi	r25, 0x00	; 0
     cde:	ca 57       	subi	r28, 0x7A	; 122
     ce0:	df 4f       	sbci	r29, 0xFF	; 255
     ce2:	68 83       	st	Y, r22
     ce4:	79 83       	std	Y+1, r23	; 0x01
     ce6:	8a 83       	std	Y+2, r24	; 0x02
     ce8:	9b 83       	std	Y+3, r25	; 0x03
     cea:	c6 58       	subi	r28, 0x86	; 134
     cec:	d0 40       	sbci	r29, 0x00	; 0
     cee:	c6 01       	movw	r24, r12
     cf0:	6a 01       	movw	r12, r20
     cf2:	b8 01       	movw	r22, r16
     cf4:	a7 01       	movw	r20, r14
     cf6:	79 01       	movw	r14, r18
     cf8:	8c 01       	movw	r16, r24
     cfa:	17 c2       	rjmp	.+1070   	; 0x112a <USB_ProcessHIDReport+0x764>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     cfc:	c0 57       	subi	r28, 0x70	; 112
     cfe:	df 4f       	sbci	r29, 0xFF	; 255
     d00:	88 81       	ld	r24, Y
     d02:	99 81       	ldd	r25, Y+1	; 0x01
     d04:	c0 59       	subi	r28, 0x90	; 144
     d06:	d0 40       	sbci	r29, 0x00	; 0
     d08:	28 17       	cp	r18, r24
     d0a:	39 07       	cpc	r19, r25
     d0c:	09 f4       	brne	.+2      	; 0xd10 <USB_ProcessHIDReport+0x34a>
     d0e:	38 c2       	rjmp	.+1136   	; 0x1180 <USB_ProcessHIDReport+0x7ba>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     d10:	c9 01       	movw	r24, r18
     d12:	4c 96       	adiw	r24, 0x1c	; 28
     d14:	fc 01       	movw	r30, r24
     d16:	d9 01       	movw	r26, r18
     d18:	2a e2       	ldi	r18, 0x2A	; 42
     d1a:	0d 90       	ld	r0, X+
     d1c:	01 92       	st	Z+, r0
     d1e:	21 50       	subi	r18, 0x01	; 1
     d20:	e1 f7       	brne	.-8      	; 0xd1a <USB_ProcessHIDReport+0x354>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     d22:	9c 01       	movw	r18, r24
				break;
     d24:	0d c2       	rjmp	.+1050   	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     d26:	c8 56       	subi	r28, 0x68	; 104
     d28:	df 4f       	sbci	r29, 0xFF	; 255
     d2a:	a8 81       	ld	r26, Y
     d2c:	b9 81       	ldd	r27, Y+1	; 0x01
     d2e:	c8 59       	subi	r28, 0x98	; 152
     d30:	d0 40       	sbci	r29, 0x00	; 0
     d32:	2a 17       	cp	r18, r26
     d34:	3b 07       	cpc	r19, r27
     d36:	09 f4       	brne	.+2      	; 0xd3a <USB_ProcessHIDReport+0x374>
     d38:	25 c2       	rjmp	.+1098   	; 0x1184 <USB_ProcessHIDReport+0x7be>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     d3a:	2c 51       	subi	r18, 0x1C	; 28
     d3c:	30 40       	sbci	r19, 0x00	; 0
				break;
     d3e:	00 c2       	rjmp	.+1024   	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     d40:	f9 01       	movw	r30, r18
     d42:	f2 82       	std	Z+2, r15	; 0x02
     d44:	e1 82       	std	Z+1, r14	; 0x01
				break;
     d46:	fc c1       	rjmp	.+1016   	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     d48:	d9 01       	movw	r26, r18
     d4a:	1a 96       	adiw	r26, 0x0a	; 10
     d4c:	ed 92       	st	X+, r14
     d4e:	fd 92       	st	X+, r15
     d50:	0d 93       	st	X+, r16
     d52:	1c 93       	st	X, r17
     d54:	1d 97       	sbiw	r26, 0x0d	; 13
				break;
     d56:	f4 c1       	rjmp	.+1000   	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     d58:	f9 01       	movw	r30, r18
     d5a:	e6 86       	std	Z+14, r14	; 0x0e
     d5c:	f7 86       	std	Z+15, r15	; 0x0f
     d5e:	00 8b       	std	Z+16, r16	; 0x10
     d60:	11 8b       	std	Z+17, r17	; 0x11
				break;
     d62:	ee c1       	rjmp	.+988    	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     d64:	d9 01       	movw	r26, r18
     d66:	52 96       	adiw	r26, 0x12	; 18
     d68:	ed 92       	st	X+, r14
     d6a:	fd 92       	st	X+, r15
     d6c:	0d 93       	st	X+, r16
     d6e:	1c 93       	st	X, r17
     d70:	55 97       	sbiw	r26, 0x15	; 21
				break;
     d72:	e6 c1       	rjmp	.+972    	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     d74:	f9 01       	movw	r30, r18
     d76:	e6 8a       	std	Z+22, r14	; 0x16
     d78:	f7 8a       	std	Z+23, r15	; 0x17
     d7a:	00 8f       	std	Z+24, r16	; 0x18
     d7c:	11 8f       	std	Z+25, r17	; 0x19
				break;
     d7e:	e0 c1       	rjmp	.+960    	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     d80:	d9 01       	movw	r26, r18
     d82:	19 96       	adiw	r26, 0x09	; 9
     d84:	ec 92       	st	X, r14
     d86:	19 97       	sbiw	r26, 0x09	; 9
				break;
     d88:	db c1       	rjmp	.+950    	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     d8a:	f9 01       	movw	r30, r18
     d8c:	e5 82       	std	Z+5, r14	; 0x05
     d8e:	f6 82       	std	Z+6, r15	; 0x06
     d90:	07 83       	std	Z+7, r16	; 0x07
     d92:	10 87       	std	Z+8, r17	; 0x08
				break;
     d94:	d5 c1       	rjmp	.+938    	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     d96:	d9 01       	movw	r26, r18
     d98:	ec 92       	st	X, r14
				break;
     d9a:	d2 c1       	rjmp	.+932    	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     d9c:	f9 01       	movw	r30, r18
     d9e:	e2 8e       	std	Z+26, r14	; 0x1a
				break;
     da0:	cf c1       	rjmp	.+926    	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     da2:	9e 2d       	mov	r25, r14
     da4:	d9 01       	movw	r26, r18
     da6:	5b 96       	adiw	r26, 0x1b	; 27
     da8:	ec 92       	st	X, r14
     daa:	5b 97       	sbiw	r26, 0x1b	; 27

				if (ParserData->UsingReportIDs)
     dac:	ce 57       	subi	r28, 0x7E	; 126
     dae:	df 4f       	sbci	r29, 0xFF	; 255
     db0:	e8 81       	ld	r30, Y
     db2:	f9 81       	ldd	r31, Y+1	; 0x01
     db4:	c2 58       	subi	r28, 0x82	; 130
     db6:	d0 40       	sbci	r29, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	88 23       	and	r24, r24
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <USB_ProcessHIDReport+0x3fa>
     dbe:	4c c0       	rjmp	.+152    	; 0xe58 <USB_ProcessHIDReport+0x492>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     dc0:	cc 57       	subi	r28, 0x7C	; 124
     dc2:	df 4f       	sbci	r29, 0xFF	; 255
     dc4:	a8 81       	ld	r26, Y
     dc6:	b9 81       	ldd	r27, Y+1	; 0x01
     dc8:	c4 58       	subi	r28, 0x84	; 132
     dca:	d0 40       	sbci	r29, 0x00	; 0
     dcc:	6c 91       	ld	r22, X

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     dce:	ce 56       	subi	r28, 0x6E	; 110
     dd0:	df 4f       	sbci	r29, 0xFF	; 255
     dd2:	e8 81       	ld	r30, Y
     dd4:	c2 59       	subi	r28, 0x92	; 146
     dd6:	d0 40       	sbci	r29, 0x00	; 0
     dd8:	cd 56       	subi	r28, 0x6D	; 109
     dda:	df 4f       	sbci	r29, 0xFF	; 255
     ddc:	f8 81       	ld	r31, Y
     dde:	c3 59       	subi	r28, 0x93	; 147
     de0:	d0 40       	sbci	r29, 0x00	; 0
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	17 c0       	rjmp	.+46     	; 0xe14 <USB_ProcessHIDReport+0x44e>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     de6:	40 81       	ld	r20, Z
     de8:	37 96       	adiw	r30, 0x07	; 7
     dea:	49 17       	cp	r20, r25
     dec:	91 f4       	brne	.+36     	; 0xe12 <USB_ProcessHIDReport+0x44c>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	ac 01       	movw	r20, r24
     df2:	f3 e0       	ldi	r31, 0x03	; 3
     df4:	44 0f       	add	r20, r20
     df6:	55 1f       	adc	r21, r21
     df8:	fa 95       	dec	r31
     dfa:	e1 f7       	brne	.-8      	; 0xdf4 <USB_ProcessHIDReport+0x42e>
     dfc:	48 1b       	sub	r20, r24
     dfe:	59 0b       	sbc	r21, r25
     e00:	40 57       	subi	r20, 0x70	; 112
     e02:	5c 4f       	sbci	r21, 0xFC	; 252
     e04:	e5 96       	adiw	r28, 0x35	; 53
     e06:	ee ad       	ldd	r30, Y+62	; 0x3e
     e08:	ff ad       	ldd	r31, Y+63	; 0x3f
     e0a:	e5 97       	sbiw	r28, 0x35	; 53
     e0c:	4e 0f       	add	r20, r30
     e0e:	5f 1f       	adc	r21, r31
     e10:	23 c0       	rjmp	.+70     	; 0xe58 <USB_ProcessHIDReport+0x492>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	86 17       	cp	r24, r22
     e16:	38 f3       	brcs	.-50     	; 0xde6 <USB_ProcessHIDReport+0x420>
     e18:	dc c1       	rjmp	.+952    	; 0x11d2 <USB_ProcessHIDReport+0x80c>
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     e1a:	86 2f       	mov	r24, r22
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	ac 01       	movw	r20, r24
     e20:	e3 e0       	ldi	r30, 0x03	; 3
     e22:	44 0f       	add	r20, r20
     e24:	55 1f       	adc	r21, r21
     e26:	ea 95       	dec	r30
     e28:	e1 f7       	brne	.-8      	; 0xe22 <USB_ProcessHIDReport+0x45c>
     e2a:	48 1b       	sub	r20, r24
     e2c:	59 0b       	sbc	r21, r25
     e2e:	40 57       	subi	r20, 0x70	; 112
     e30:	5c 4f       	sbci	r21, 0xFC	; 252
     e32:	e5 96       	adiw	r28, 0x35	; 53
     e34:	8e ad       	ldd	r24, Y+62	; 0x3e
     e36:	9f ad       	ldd	r25, Y+63	; 0x3f
     e38:	e5 97       	sbiw	r28, 0x35	; 53
     e3a:	48 0f       	add	r20, r24
     e3c:	59 1f       	adc	r21, r25
     e3e:	6f 5f       	subi	r22, 0xFF	; 255
     e40:	cc 57       	subi	r28, 0x7C	; 124
     e42:	df 4f       	sbci	r29, 0xFF	; 255
     e44:	a8 81       	ld	r26, Y
     e46:	b9 81       	ldd	r27, Y+1	; 0x01
     e48:	c4 58       	subi	r28, 0x84	; 132
     e4a:	d0 40       	sbci	r29, 0x00	; 0
     e4c:	6c 93       	st	X, r22
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     e4e:	87 e0       	ldi	r24, 0x07	; 7
     e50:	da 01       	movw	r26, r20
     e52:	1d 92       	st	X+, r1
     e54:	8a 95       	dec	r24
     e56:	e9 f7       	brne	.-6      	; 0xe52 <USB_ProcessHIDReport+0x48c>
					}
				}

				ParserData->UsingReportIDs = true;
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	ce 57       	subi	r28, 0x7E	; 126
     e5c:	df 4f       	sbci	r29, 0xFF	; 255
     e5e:	e8 81       	ld	r30, Y
     e60:	f9 81       	ldd	r31, Y+1	; 0x01
     e62:	c2 58       	subi	r28, 0x82	; 130
     e64:	d0 40       	sbci	r29, 0x00	; 0
     e66:	60 83       	st	Z, r22

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     e68:	d9 01       	movw	r26, r18
     e6a:	5b 96       	adiw	r26, 0x1b	; 27
     e6c:	8c 91       	ld	r24, X
     e6e:	5b 97       	sbiw	r26, 0x1b	; 27
     e70:	fa 01       	movw	r30, r20
     e72:	80 83       	st	Z, r24
				break;
     e74:	65 c1       	rjmp	.+714    	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     e76:	fb 2d       	mov	r31, r11
     e78:	f8 30       	cpi	r31, 0x08	; 8
     e7a:	09 f4       	brne	.+2      	; 0xe7e <USB_ProcessHIDReport+0x4b8>
     e7c:	85 c1       	rjmp	.+778    	; 0x1188 <USB_ProcessHIDReport+0x7c2>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     e7e:	eb 2d       	mov	r30, r11
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	ee 0f       	add	r30, r30
     e84:	ff 1f       	adc	r31, r31
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	6c 0f       	add	r22, r28
     e8c:	7d 1f       	adc	r23, r29
     e8e:	e6 0f       	add	r30, r22
     e90:	f7 1f       	adc	r31, r23
     e92:	f1 82       	std	Z+1, r15	; 0x01
     e94:	e0 82       	st	Z, r14
     e96:	b3 94       	inc	r11
				break;
     e98:	53 c1       	rjmp	.+678    	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     e9a:	e9 96       	adiw	r28, 0x39	; 57
     e9c:	ec ae       	std	Y+60, r14	; 0x3c
     e9e:	fd ae       	std	Y+61, r15	; 0x3d
     ea0:	0e af       	std	Y+62, r16	; 0x3e
     ea2:	1f af       	std	Y+63, r17	; 0x3f
     ea4:	e9 97       	sbiw	r28, 0x39	; 57
     ea6:	4c c1       	rjmp	.+664    	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     ea8:	81 14       	cp	r8, r1
     eaa:	91 04       	cpc	r9, r1
     eac:	39 f4       	brne	.+14     	; 0xebc <USB_ProcessHIDReport+0x4f6>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     eae:	c2 57       	subi	r28, 0x72	; 114
     eb0:	df 4f       	sbci	r29, 0xFF	; 255
     eb2:	88 80       	ld	r8, Y
     eb4:	99 80       	ldd	r9, Y+1	; 0x01
     eb6:	ce 58       	subi	r28, 0x8E	; 142
     eb8:	d0 40       	sbci	r29, 0x00	; 0
     eba:	19 c0       	rjmp	.+50     	; 0xeee <USB_ProcessHIDReport+0x528>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     ebc:	c6 57       	subi	r28, 0x76	; 118
     ebe:	df 4f       	sbci	r29, 0xFF	; 255
     ec0:	e8 81       	ld	r30, Y
     ec2:	f9 81       	ldd	r31, Y+1	; 0x01
     ec4:	ca 58       	subi	r28, 0x8A	; 138
     ec6:	d0 40       	sbci	r29, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
     ec8:	0b c0       	rjmp	.+22     	; 0xee0 <USB_ProcessHIDReport+0x51a>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     eca:	c4 57       	subi	r28, 0x74	; 116
     ecc:	df 4f       	sbci	r29, 0xFF	; 255
     ece:	88 81       	ld	r24, Y
     ed0:	99 81       	ldd	r25, Y+1	; 0x01
     ed2:	cc 58       	subi	r28, 0x8C	; 140
     ed4:	d0 40       	sbci	r29, 0x00	; 0
     ed6:	e8 17       	cp	r30, r24
     ed8:	f9 07       	cpc	r31, r25
     eda:	09 f4       	brne	.+2      	; 0xede <USB_ProcessHIDReport+0x518>
     edc:	57 c1       	rjmp	.+686    	; 0x118c <USB_ProcessHIDReport+0x7c6>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     ede:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     ee0:	85 81       	ldd	r24, Z+5	; 0x05
     ee2:	96 81       	ldd	r25, Z+6	; 0x06
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	89 f7       	brne	.-30     	; 0xeca <USB_ProcessHIDReport+0x504>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     ee8:	96 82       	std	Z+6, r9	; 0x06
     eea:	85 82       	std	Z+5, r8	; 0x05
     eec:	4f 01       	movw	r8, r30
				}

				CurrCollectionPath->Type       = ReportItemData;
     eee:	d4 01       	movw	r26, r8
     ef0:	ec 92       	st	X, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     ef2:	f9 01       	movw	r30, r18
     ef4:	81 81       	ldd	r24, Z+1	; 0x01
     ef6:	92 81       	ldd	r25, Z+2	; 0x02
     ef8:	12 96       	adiw	r26, 0x02	; 2
     efa:	9c 93       	st	X, r25
     efc:	8e 93       	st	-X, r24
     efe:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
     f00:	bb 20       	and	r11, r11
     f02:	c1 f0       	breq	.+48     	; 0xf34 <USB_ProcessHIDReport+0x56e>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	14 96       	adiw	r26, 0x04	; 4
     f0a:	9c 93       	st	X, r25
     f0c:	8e 93       	st	-X, r24
     f0e:	13 97       	sbiw	r26, 0x03	; 3
     f10:	fe 01       	movw	r30, r28
     f12:	31 96       	adiw	r30, 0x01	; 1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     f14:	8b 2d       	mov	r24, r11
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	8e 0f       	add	r24, r30
     f1e:	9f 1f       	adc	r25, r31

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <USB_ProcessHIDReport+0x564>
					  UsageList[i] = UsageList[i + 1];
     f22:	62 81       	ldd	r22, Z+2	; 0x02
     f24:	73 81       	ldd	r23, Z+3	; 0x03
     f26:	61 93       	st	Z+, r22
     f28:	71 93       	st	Z+, r23

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     f2a:	e8 17       	cp	r30, r24
     f2c:	f9 07       	cpc	r31, r25
     f2e:	c9 f7       	brne	.-14     	; 0xf22 <USB_ProcessHIDReport+0x55c>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     f30:	ba 94       	dec	r11
     f32:	06 c1       	rjmp	.+524    	; 0x1140 <USB_ProcessHIDReport+0x77a>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     f34:	e9 96       	adiw	r28, 0x39	; 57
     f36:	8c ad       	ldd	r24, Y+60	; 0x3c
     f38:	9d ad       	ldd	r25, Y+61	; 0x3d
     f3a:	ae ad       	ldd	r26, Y+62	; 0x3e
     f3c:	bf ad       	ldd	r27, Y+63	; 0x3f
     f3e:	e9 97       	sbiw	r28, 0x39	; 57
     f40:	84 15       	cp	r24, r4
     f42:	95 05       	cpc	r25, r5
     f44:	a6 05       	cpc	r26, r6
     f46:	b7 05       	cpc	r27, r7
     f48:	08 f4       	brcc	.+2      	; 0xf4c <USB_ProcessHIDReport+0x586>
     f4a:	fa c0       	rjmp	.+500    	; 0x1140 <USB_ProcessHIDReport+0x77a>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     f4c:	d4 01       	movw	r26, r8
     f4e:	14 96       	adiw	r26, 0x04	; 4
     f50:	5c 92       	st	X, r5
     f52:	4e 92       	st	-X, r4
     f54:	13 97       	sbiw	r26, 0x03	; 3
     f56:	08 94       	sec
     f58:	41 1c       	adc	r4, r1
     f5a:	51 1c       	adc	r5, r1
     f5c:	61 1c       	adc	r6, r1
     f5e:	71 1c       	adc	r7, r1
     f60:	ef c0       	rjmp	.+478    	; 0x1140 <USB_ProcessHIDReport+0x77a>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     f62:	81 14       	cp	r8, r1
     f64:	91 04       	cpc	r9, r1
     f66:	09 f4       	brne	.+2      	; 0xf6a <USB_ProcessHIDReport+0x5a4>
     f68:	13 c1       	rjmp	.+550    	; 0x1190 <USB_ProcessHIDReport+0x7ca>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     f6a:	f4 01       	movw	r30, r8
     f6c:	85 80       	ldd	r8, Z+5	; 0x05
     f6e:	96 80       	ldd	r9, Z+6	; 0x06
				break;
     f70:	e7 c0       	rjmp	.+462    	; 0x1140 <USB_ProcessHIDReport+0x77a>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     f72:	de 01       	movw	r26, r28
     f74:	59 96       	adiw	r26, 0x19	; 25
     f76:	f7 01       	movw	r30, r14
     f78:	8a e1       	ldi	r24, 0x1A	; 26
     f7a:	01 90       	ld	r0, Z+
     f7c:	0d 92       	st	X+, r0
     f7e:	81 50       	subi	r24, 0x01	; 1
     f80:	e1 f7       	brne	.-8      	; 0xf7a <USB_ProcessHIDReport+0x5b4>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     f82:	5d 8b       	std	Y+21, r21	; 0x15
     f84:	4c 8b       	std	Y+20, r20	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
     f86:	98 8e       	std	Y+24, r9	; 0x18
     f88:	8f 8a       	std	Y+23, r8	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     f8a:	d7 01       	movw	r26, r14
     f8c:	5b 96       	adiw	r26, 0x1b	; 27
     f8e:	8c 91       	ld	r24, X
     f90:	5b 97       	sbiw	r26, 0x1b	; 27
     f92:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
     f94:	bb 20       	and	r11, r11
     f96:	b1 f0       	breq	.+44     	; 0xfc4 <USB_ProcessHIDReport+0x5fe>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	9d 8f       	std	Y+29, r25	; 0x1d
     f9e:	8c 8f       	std	Y+28, r24	; 0x1c
     fa0:	fe 01       	movw	r30, r28
     fa2:	31 96       	adiw	r30, 0x01	; 1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     fa4:	8b 2d       	mov	r24, r11
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	8e 0f       	add	r24, r30
     fae:	9f 1f       	adc	r25, r31

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     fb0:	04 c0       	rjmp	.+8      	; 0xfba <USB_ProcessHIDReport+0x5f4>
						  UsageList[i] = UsageList[i + 1];
     fb2:	22 81       	ldd	r18, Z+2	; 0x02
     fb4:	33 81       	ldd	r19, Z+3	; 0x03
     fb6:	21 93       	st	Z+, r18
     fb8:	31 93       	st	Z+, r19

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     fba:	e8 17       	cp	r30, r24
     fbc:	f9 07       	cpc	r31, r25
     fbe:	c9 f7       	brne	.-14     	; 0xfb2 <USB_ProcessHIDReport+0x5ec>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     fc0:	ba 94       	dec	r11
     fc2:	12 c0       	rjmp	.+36     	; 0xfe8 <USB_ProcessHIDReport+0x622>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     fc4:	e9 96       	adiw	r28, 0x39	; 57
     fc6:	8c ad       	ldd	r24, Y+60	; 0x3c
     fc8:	9d ad       	ldd	r25, Y+61	; 0x3d
     fca:	ae ad       	ldd	r26, Y+62	; 0x3e
     fcc:	bf ad       	ldd	r27, Y+63	; 0x3f
     fce:	e9 97       	sbiw	r28, 0x39	; 57
     fd0:	84 15       	cp	r24, r4
     fd2:	95 05       	cpc	r25, r5
     fd4:	a6 05       	cpc	r26, r6
     fd6:	b7 05       	cpc	r27, r7
     fd8:	38 f0       	brcs	.+14     	; 0xfe8 <USB_ProcessHIDReport+0x622>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     fda:	5d 8e       	std	Y+29, r5	; 0x1d
     fdc:	4c 8e       	std	Y+28, r4	; 0x1c
     fde:	08 94       	sec
     fe0:	41 1c       	adc	r4, r1
     fe2:	51 1c       	adc	r5, r1
     fe4:	61 1c       	adc	r6, r1
     fe6:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     fe8:	c1 58       	subi	r28, 0x81	; 129
     fea:	df 4f       	sbci	r29, 0xFF	; 255
     fec:	98 81       	ld	r25, Y
     fee:	cf 57       	subi	r28, 0x7F	; 127
     ff0:	d0 40       	sbci	r29, 0x00	; 0
     ff2:	90 38       	cpi	r25, 0x80	; 128
     ff4:	11 f4       	brne	.+4      	; 0xffa <USB_ProcessHIDReport+0x634>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     ff6:	1b 8a       	std	Y+19, r1	; 0x13
     ff8:	0c c0       	rjmp	.+24     	; 0x1012 <USB_ProcessHIDReport+0x64c>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     ffa:	c1 58       	subi	r28, 0x81	; 129
     ffc:	df 4f       	sbci	r29, 0xFF	; 255
     ffe:	a8 81       	ld	r26, Y
    1000:	cf 57       	subi	r28, 0x7F	; 127
    1002:	d0 40       	sbci	r29, 0x00	; 0
    1004:	a0 39       	cpi	r26, 0x90	; 144
    1006:	19 f4       	brne	.+6      	; 0x100e <USB_ProcessHIDReport+0x648>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    1008:	b1 e0       	ldi	r27, 0x01	; 1
    100a:	bb 8b       	std	Y+19, r27	; 0x13
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <USB_ProcessHIDReport+0x64c>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    100e:	e2 e0       	ldi	r30, 0x02	; 2
    1010:	eb 8b       	std	Y+19, r30	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    1012:	eb 89       	ldd	r30, Y+19	; 0x13
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	ee 0f       	add	r30, r30
    1018:	ff 1f       	adc	r31, r31
    101a:	ec 0d       	add	r30, r12
    101c:	fd 1d       	adc	r31, r13
    101e:	81 81       	ldd	r24, Z+1	; 0x01
    1020:	92 81       	ldd	r25, Z+2	; 0x02
    1022:	9a 8b       	std	Y+18, r25	; 0x12
    1024:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    1026:	d7 01       	movw	r26, r14
    1028:	2c 91       	ld	r18, X
    102a:	81 81       	ldd	r24, Z+1	; 0x01
    102c:	92 81       	ldd	r25, Z+2	; 0x02
    102e:	82 0f       	add	r24, r18
    1030:	91 1d       	adc	r25, r1
    1032:	92 83       	std	Z+2, r25	; 0x02
    1034:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    1036:	eb 89       	ldd	r30, Y+19	; 0x13
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	ec 0d       	add	r30, r12
    1040:	fd 1d       	adc	r31, r13
    1042:	c0 58       	subi	r28, 0x80	; 128
    1044:	df 4f       	sbci	r29, 0xFF	; 255
    1046:	a8 81       	ld	r26, Y
    1048:	b9 81       	ldd	r27, Y+1	; 0x01
    104a:	c0 58       	subi	r28, 0x80	; 128
    104c:	d0 40       	sbci	r29, 0x00	; 0
    104e:	8d 91       	ld	r24, X+
    1050:	9c 91       	ld	r25, X
    1052:	11 97       	sbiw	r26, 0x01	; 1
    1054:	21 81       	ldd	r18, Z+1	; 0x01
    1056:	32 81       	ldd	r19, Z+2	; 0x02
    1058:	28 17       	cp	r18, r24
    105a:	39 07       	cpc	r19, r25
    105c:	08 f4       	brcc	.+2      	; 0x1060 <USB_ProcessHIDReport+0x69a>
    105e:	9c 01       	movw	r18, r24
    1060:	c0 58       	subi	r28, 0x80	; 128
    1062:	df 4f       	sbci	r29, 0xFF	; 255
    1064:	e8 81       	ld	r30, Y
    1066:	f9 81       	ldd	r31, Y+1	; 0x01
    1068:	c0 58       	subi	r28, 0x80	; 128
    106a:	d0 40       	sbci	r29, 0x00	; 0
    106c:	31 83       	std	Z+1, r19	; 0x01
    106e:	20 83       	st	Z, r18

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1070:	e5 96       	adiw	r28, 0x35	; 53
    1072:	ae ad       	ldd	r26, Y+62	; 0x3e
    1074:	bf ad       	ldd	r27, Y+63	; 0x3f
    1076:	e5 97       	sbiw	r28, 0x35	; 53
    1078:	8c 91       	ld	r24, X
    107a:	84 31       	cpi	r24, 0x14	; 20
    107c:	09 f4       	brne	.+2      	; 0x1080 <USB_ProcessHIDReport+0x6ba>
    107e:	8a c0       	rjmp	.+276    	; 0x1194 <USB_ProcessHIDReport+0x7ce>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	2a e2       	ldi	r18, 0x2A	; 42
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	82 9f       	mul	r24, r18
    1088:	f0 01       	movw	r30, r0
    108a:	83 9f       	mul	r24, r19
    108c:	f0 0d       	add	r31, r0
    108e:	92 9f       	mul	r25, r18
    1090:	f0 0d       	add	r31, r0
    1092:	11 24       	eor	r1, r1
    1094:	ea 0f       	add	r30, r26
    1096:	fb 1f       	adc	r31, r27
    1098:	31 96       	adiw	r30, 0x01	; 1
    109a:	de 01       	movw	r26, r28
    109c:	51 96       	adiw	r26, 0x11	; 17
    109e:	8a e2       	ldi	r24, 0x2A	; 42
    10a0:	0d 90       	ld	r0, X+
    10a2:	01 92       	st	Z+, r0
    10a4:	81 50       	subi	r24, 0x01	; 1
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <USB_ProcessHIDReport+0x6da>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    10a8:	ca 57       	subi	r28, 0x7A	; 122
    10aa:	df 4f       	sbci	r29, 0xFF	; 255
    10ac:	88 81       	ld	r24, Y
    10ae:	99 81       	ldd	r25, Y+1	; 0x01
    10b0:	aa 81       	ldd	r26, Y+2	; 0x02
    10b2:	bb 81       	ldd	r27, Y+3	; 0x03
    10b4:	c6 58       	subi	r28, 0x86	; 134
    10b6:	d0 40       	sbci	r29, 0x00	; 0
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	a1 05       	cpc	r26, r1
    10bc:	b1 05       	cpc	r27, r1
    10be:	a1 f5       	brne	.+104    	; 0x1128 <USB_ProcessHIDReport+0x762>
    10c0:	ce 01       	movw	r24, r28
    10c2:	41 96       	adiw	r24, 0x11	; 17
    10c4:	cc 56       	subi	r28, 0x6C	; 108
    10c6:	df 4f       	sbci	r29, 0xFF	; 255
    10c8:	48 83       	st	Y, r20
    10ca:	c4 59       	subi	r28, 0x94	; 148
    10cc:	d0 40       	sbci	r29, 0x00	; 0
    10ce:	cb 56       	subi	r28, 0x6B	; 107
    10d0:	df 4f       	sbci	r29, 0xFF	; 255
    10d2:	58 83       	st	Y, r21
    10d4:	c5 59       	subi	r28, 0x95	; 149
    10d6:	d0 40       	sbci	r29, 0x00	; 0
    10d8:	ca 56       	subi	r28, 0x6A	; 106
    10da:	df 4f       	sbci	r29, 0xFF	; 255
    10dc:	68 83       	st	Y, r22
    10de:	c6 59       	subi	r28, 0x96	; 150
    10e0:	d0 40       	sbci	r29, 0x00	; 0
    10e2:	c9 56       	subi	r28, 0x69	; 105
    10e4:	df 4f       	sbci	r29, 0xFF	; 255
    10e6:	78 83       	st	Y, r23
    10e8:	c7 59       	subi	r28, 0x97	; 151
    10ea:	d0 40       	sbci	r29, 0x00	; 0
    10ec:	43 dc       	rcall	.-1914   	; 0x974 <CALLBACK_HIDParser_FilterHIDReportItem>
    10ee:	cc 56       	subi	r28, 0x6C	; 108
    10f0:	df 4f       	sbci	r29, 0xFF	; 255
    10f2:	48 81       	ld	r20, Y
    10f4:	c4 59       	subi	r28, 0x94	; 148
    10f6:	d0 40       	sbci	r29, 0x00	; 0
    10f8:	cb 56       	subi	r28, 0x6B	; 107
    10fa:	df 4f       	sbci	r29, 0xFF	; 255
    10fc:	58 81       	ld	r21, Y
    10fe:	c5 59       	subi	r28, 0x95	; 149
    1100:	d0 40       	sbci	r29, 0x00	; 0
    1102:	ca 56       	subi	r28, 0x6A	; 106
    1104:	df 4f       	sbci	r29, 0xFF	; 255
    1106:	68 81       	ld	r22, Y
    1108:	c6 59       	subi	r28, 0x96	; 150
    110a:	d0 40       	sbci	r29, 0x00	; 0
    110c:	c9 56       	subi	r28, 0x69	; 105
    110e:	df 4f       	sbci	r29, 0xFF	; 255
    1110:	78 81       	ld	r23, Y
    1112:	c7 59       	subi	r28, 0x97	; 151
    1114:	d0 40       	sbci	r29, 0x00	; 0
    1116:	88 23       	and	r24, r24
    1118:	39 f0       	breq	.+14     	; 0x1128 <USB_ProcessHIDReport+0x762>
					  ParserData->TotalReportItems++;
    111a:	e5 96       	adiw	r28, 0x35	; 53
    111c:	ae ad       	ldd	r26, Y+62	; 0x3e
    111e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1120:	e5 97       	sbiw	r28, 0x35	; 53
    1122:	8c 91       	ld	r24, X
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	8c 93       	st	X, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1128:	a3 94       	inc	r10
    112a:	f7 01       	movw	r30, r14
    112c:	82 8d       	ldd	r24, Z+26	; 0x1a
    112e:	a8 16       	cp	r10, r24
    1130:	08 f4       	brcc	.+2      	; 0x1134 <USB_ProcessHIDReport+0x76e>
    1132:	1f cf       	rjmp	.-450    	; 0xf72 <USB_ProcessHIDReport+0x5ac>
    1134:	97 01       	movw	r18, r14
    1136:	a6 01       	movw	r20, r12
    1138:	68 01       	movw	r12, r16
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <USB_ProcessHIDReport+0x77a>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    113c:	27 01       	movw	r4, r14
    113e:	38 01       	movw	r6, r16
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    1140:	eb 96       	adiw	r28, 0x3b	; 59
    1142:	8e ad       	ldd	r24, Y+62	; 0x3e
    1144:	9f ad       	ldd	r25, Y+63	; 0x3f
    1146:	eb 97       	sbiw	r28, 0x3b	; 59
    1148:	8c 70       	andi	r24, 0x0C	; 12
    114a:	90 70       	andi	r25, 0x00	; 0
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	51 f4       	brne	.+20     	; 0x1164 <USB_ProcessHIDReport+0x79e>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
    1150:	e9 96       	adiw	r28, 0x39	; 57
    1152:	1c ae       	std	Y+60, r1	; 0x3c
    1154:	1d ae       	std	Y+61, r1	; 0x3d
    1156:	1e ae       	std	Y+62, r1	; 0x3e
    1158:	1f ae       	std	Y+63, r1	; 0x3f
    115a:	e9 97       	sbiw	r28, 0x39	; 57
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
    115c:	44 24       	eor	r4, r4
    115e:	55 24       	eor	r5, r5
    1160:	32 01       	movw	r6, r4
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
    1162:	bb 24       	eor	r11, r11
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1164:	21 14       	cp	r2, r1
    1166:	31 04       	cpc	r3, r1
    1168:	09 f0       	breq	.+2      	; 0x116c <USB_ProcessHIDReport+0x7a6>
    116a:	c4 cc       	rjmp	.-1656   	; 0xaf4 <USB_ProcessHIDReport+0x12e>
    116c:	e5 96       	adiw	r28, 0x35	; 53
    116e:	6e ad       	ldd	r22, Y+62	; 0x3e
    1170:	7f ad       	ldd	r23, Y+63	; 0x3f
    1172:	e5 97       	sbiw	r28, 0x35	; 53
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    1174:	db 01       	movw	r26, r22
    1176:	8c 91       	ld	r24, X
    1178:	88 23       	and	r24, r24
    117a:	71 f4       	brne	.+28     	; 0x1198 <USB_ProcessHIDReport+0x7d2>
	  return HID_PARSE_NoUnfilteredReportItems;
    117c:	88 e0       	ldi	r24, 0x08	; 8
    117e:	0f c0       	rjmp	.+30     	; 0x119e <USB_ProcessHIDReport+0x7d8>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	0d c0       	rjmp	.+26     	; 0x119e <USB_ProcessHIDReport+0x7d8>

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	0b c0       	rjmp	.+22     	; 0x119e <USB_ProcessHIDReport+0x7d8>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
    1188:	86 e0       	ldi	r24, 0x06	; 6
    118a:	09 c0       	rjmp	.+18     	; 0x119e <USB_ProcessHIDReport+0x7d8>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
    118c:	85 e0       	ldi	r24, 0x05	; 5
    118e:	07 c0       	rjmp	.+14     	; 0x119e <USB_ProcessHIDReport+0x7d8>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
    1190:	84 e0       	ldi	r24, 0x04	; 4
    1192:	05 c0       	rjmp	.+10     	; 0x119e <USB_ProcessHIDReport+0x7d8>
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
    1194:	83 e0       	ldi	r24, 0x03	; 3
    1196:	03 c0       	rjmp	.+6      	; 0x119e <USB_ProcessHIDReport+0x7d8>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	01 c0       	rjmp	.+2      	; 0x119e <USB_ProcessHIDReport+0x7d8>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
    119c:	87 e0       	ldi	r24, 0x07	; 7

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    119e:	c7 56       	subi	r28, 0x67	; 103
    11a0:	df 4f       	sbci	r29, 0xFF	; 255
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
    11bc:	bf 90       	pop	r11
    11be:	af 90       	pop	r10
    11c0:	9f 90       	pop	r9
    11c2:	8f 90       	pop	r8
    11c4:	7f 90       	pop	r7
    11c6:	6f 90       	pop	r6
    11c8:	5f 90       	pop	r5
    11ca:	4f 90       	pop	r4
    11cc:	3f 90       	pop	r3
    11ce:	2f 90       	pop	r2
    11d0:	08 95       	ret
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    11d2:	6a 30       	cpi	r22, 0x0A	; 10
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <USB_ProcessHIDReport+0x812>
    11d6:	21 ce       	rjmp	.-958    	; 0xe1a <USB_ProcessHIDReport+0x454>
    11d8:	e1 cf       	rjmp	.-62     	; 0x119c <USB_ProcessHIDReport+0x7d6>

000011da <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    11da:	ef 92       	push	r14
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	fb 01       	movw	r30, r22
	if (ReportItem == NULL)
    11e8:	30 97       	sbiw	r30, 0x00	; 0
    11ea:	09 f4       	brne	.+2      	; 0x11ee <USB_GetHIDReportItemInfo+0x14>
    11ec:	4c c0       	rjmp	.+152    	; 0x1286 <USB_GetHIDReportItemInfo+0xac>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    11ee:	30 85       	ldd	r19, Z+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    11f0:	60 81       	ld	r22, Z
    11f2:	71 81       	ldd	r23, Z+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    11f4:	25 81       	ldd	r18, Z+5	; 0x05
    11f6:	22 23       	and	r18, r18
    11f8:	31 f0       	breq	.+12     	; 0x1206 <USB_GetHIDReportItemInfo+0x2c>
	{
		if (ReportItem->ReportID != ReportData[0])
    11fa:	dc 01       	movw	r26, r24
    11fc:	4c 91       	ld	r20, X
    11fe:	24 17       	cp	r18, r20
    1200:	09 f0       	breq	.+2      	; 0x1204 <USB_GetHIDReportItemInfo+0x2a>
    1202:	41 c0       	rjmp	.+130    	; 0x1286 <USB_GetHIDReportItemInfo+0xac>
		  return false;

		ReportData++;
    1204:	01 96       	adiw	r24, 0x01	; 1
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1206:	c3 2f       	mov	r28, r19
    1208:	d0 e0       	ldi	r29, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    120a:	22 a1       	ldd	r18, Z+34	; 0x22
    120c:	33 a1       	ldd	r19, Z+35	; 0x23
    120e:	44 a1       	ldd	r20, Z+36	; 0x24
    1210:	55 a1       	ldd	r21, Z+37	; 0x25
    1212:	26 a3       	std	Z+38, r18	; 0x26
    1214:	37 a3       	std	Z+39, r19	; 0x27
    1216:	40 a7       	std	Z+40, r20	; 0x28
    1218:	51 a7       	std	Z+41, r21	; 0x29
	ReportItem->Value = 0;
    121a:	12 a2       	std	Z+34, r1	; 0x22
    121c:	13 a2       	std	Z+35, r1	; 0x23
    121e:	14 a2       	std	Z+36, r1	; 0x24
    1220:	15 a2       	std	Z+37, r1	; 0x25
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
    1222:	21 e0       	ldi	r18, 0x01	; 1
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	50 e0       	ldi	r21, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    122a:	29 c0       	rjmp	.+82     	; 0x127e <USB_GetHIDReportItemInfo+0xa4>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    122c:	db 01       	movw	r26, r22
    122e:	03 e0       	ldi	r16, 0x03	; 3
    1230:	b6 95       	lsr	r27
    1232:	a7 95       	ror	r26
    1234:	0a 95       	dec	r16
    1236:	e1 f7       	brne	.-8      	; 0x1230 <USB_GetHIDReportItemInfo+0x56>
    1238:	a8 0f       	add	r26, r24
    123a:	b9 1f       	adc	r27, r25
    123c:	ac 91       	ld	r26, X
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	17 e0       	ldi	r17, 0x07	; 7
    1242:	e1 2e       	mov	r14, r17
    1244:	f1 2c       	mov	r15, r1
    1246:	e6 22       	and	r14, r22
    1248:	f7 22       	and	r15, r23
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <USB_GetHIDReportItemInfo+0x76>
    124c:	b5 95       	asr	r27
    124e:	a7 95       	ror	r26
    1250:	ea 94       	dec	r14
    1252:	e2 f7       	brpl	.-8      	; 0x124c <USB_GetHIDReportItemInfo+0x72>
    1254:	a0 ff       	sbrs	r26, 0
    1256:	0c c0       	rjmp	.+24     	; 0x1270 <USB_GetHIDReportItemInfo+0x96>
		  ReportItem->Value |= BitMask;
    1258:	e2 a0       	ldd	r14, Z+34	; 0x22
    125a:	f3 a0       	ldd	r15, Z+35	; 0x23
    125c:	04 a1       	ldd	r16, Z+36	; 0x24
    125e:	15 a1       	ldd	r17, Z+37	; 0x25
    1260:	e2 2a       	or	r14, r18
    1262:	f3 2a       	or	r15, r19
    1264:	04 2b       	or	r16, r20
    1266:	15 2b       	or	r17, r21
    1268:	e2 a2       	std	Z+34, r14	; 0x22
    126a:	f3 a2       	std	Z+35, r15	; 0x23
    126c:	04 a3       	std	Z+36, r16	; 0x24
    126e:	15 a3       	std	Z+37, r17	; 0x25

		CurrentBit++;
    1270:	6f 5f       	subi	r22, 0xFF	; 255
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
		BitMask <<= 1;
    1274:	22 0f       	add	r18, r18
    1276:	33 1f       	adc	r19, r19
    1278:	44 1f       	adc	r20, r20
    127a:	55 1f       	adc	r21, r21
    127c:	21 97       	sbiw	r28, 0x01	; 1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    127e:	20 97       	sbiw	r28, 0x00	; 0
    1280:	a9 f6       	brne	.-86     	; 0x122c <USB_GetHIDReportItemInfo+0x52>

		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	01 c0       	rjmp	.+2      	; 0x1288 <USB_GetHIDReportItemInfo+0xae>
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;
    1286:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	08 95       	ret

00001296 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1296:	80 91 9e 00 	lds	r24, 0x009E
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	81 70       	andi	r24, 0x01	; 1
    129e:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    12a0:	20 91 a0 00 	lds	r18, 0x00A0
    12a4:	2d 7f       	andi	r18, 0xFD	; 253
    12a6:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    12aa:	20 91 9e 00 	lds	r18, 0x009E
    12ae:	22 60       	ori	r18, 0x02	; 2
    12b0:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    12b4:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    12b8:	21 fd       	sbrc	r18, 1
    12ba:	fc cf       	rjmp	.-8      	; 0x12b4 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12bc:	20 91 9e 00 	lds	r18, 0x009E
    12c0:	21 60       	ori	r18, 0x01	; 1
    12c2:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
    12c6:	10 92 f0 04 	sts	0x04F0, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    12ca:	20 91 a0 00 	lds	r18, 0x00A0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	20 72       	andi	r18, 0x20	; 32
    12d2:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    12d4:	40 91 a0 00 	lds	r20, 0x00A0
    12d8:	4f 7d       	andi	r20, 0xDF	; 223
    12da:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12de:	40 91 9f 00 	lds	r20, 0x009F
    12e2:	4f 7d       	andi	r20, 0xDF	; 223
    12e4:	40 93 9f 00 	sts	0x009F, r20
    12e8:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    12ea:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    12ee:	55 ff       	sbrs	r21, 5
    12f0:	0b c0       	rjmp	.+22     	; 0x1308 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12f2:	40 91 9f 00 	lds	r20, 0x009F
    12f6:	4f 7d       	andi	r20, 0xDF	; 223
    12f8:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    12fc:	40 91 9f 00 	lds	r20, 0x009F
    1300:	4d 7f       	andi	r20, 0xFD	; 253
    1302:	40 93 9f 00 	sts	0x009F, r20
    1306:	08 c0       	rjmp	.+16     	; 0x1318 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1308:	ef ec       	ldi	r30, 0xCF	; 207
    130a:	f7 e0       	ldi	r31, 0x07	; 7
    130c:	31 97       	sbiw	r30, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <USB_Host_ResetDevice+0x76>
    1310:	00 c0       	rjmp	.+0      	; 0x1312 <USB_Host_ResetDevice+0x7c>
    1312:	00 00       	nop
    1314:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    1316:	49 f7       	brne	.-46     	; 0x12ea <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    1318:	21 15       	cp	r18, r1
    131a:	31 05       	cpc	r19, r1
    131c:	29 f0       	breq	.+10     	; 0x1328 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    131e:	20 91 a0 00 	lds	r18, 0x00A0
    1322:	20 62       	ori	r18, 0x20	; 32
    1324:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	29 f4       	brne	.+10     	; 0x1336 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    132c:	80 91 9e 00 	lds	r24, 0x009E
    1330:	8e 7f       	andi	r24, 0xFE	; 254
    1332:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1336:	80 91 a0 00 	lds	r24, 0x00A0
    133a:	82 60       	ori	r24, 0x02	; 2
    133c:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    1340:	08 95       	ret

00001342 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1342:	40 91 9e 00 	lds	r20, 0x009E
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	41 70       	andi	r20, 0x01	; 1
    134a:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    134c:	20 91 a0 00 	lds	r18, 0x00A0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	20 72       	andi	r18, 0x20	; 32
    1354:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1356:	90 91 a0 00 	lds	r25, 0x00A0
    135a:	9f 7d       	andi	r25, 0xDF	; 223
    135c:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1360:	90 91 9f 00 	lds	r25, 0x009F
    1364:	9f 7d       	andi	r25, 0xDF	; 223
    1366:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    136a:	90 91 9e 00 	lds	r25, 0x009E
    136e:	91 60       	ori	r25, 0x01	; 1
    1370:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    1374:	26 c0       	rjmp	.+76     	; 0x13c2 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1376:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    137a:	95 ff       	sbrs	r25, 5
    137c:	06 c0       	rjmp	.+12     	; 0x138a <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    137e:	90 91 9f 00 	lds	r25, 0x009F
    1382:	9f 7d       	andi	r25, 0xDF	; 223
    1384:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    1388:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    138a:	90 91 fa 04 	lds	r25, 0x04FA
    138e:	91 30       	cpi	r25, 0x01	; 1
    1390:	d9 f0       	breq	.+54     	; 0x13c8 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    1392:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    1396:	94 ff       	sbrs	r25, 4
    1398:	09 c0       	rjmp	.+18     	; 0x13ac <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    139a:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    139e:	80 91 a6 00 	lds	r24, 0x00A6
    13a2:	8f 7e       	andi	r24, 0xEF	; 239
    13a4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    13a8:	82 e0       	ldi	r24, 0x02	; 2

			break;
    13aa:	0f c0       	rjmp	.+30     	; 0x13ca <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    13ac:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
    13b0:	91 ff       	sbrs	r25, 1
    13b2:	07 c0       	rjmp	.+14     	; 0x13c2 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    13b4:	80 91 a6 00 	lds	r24, 0x00A6
    13b8:	8d 7f       	andi	r24, 0xFD	; 253
    13ba:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    13be:	83 e0       	ldi	r24, 0x03	; 3

			break;
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    13c2:	88 23       	and	r24, r24
    13c4:	c1 f6       	brne	.-80     	; 0x1376 <USB_Host_WaitMS+0x34>
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    13c8:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    13ca:	41 15       	cp	r20, r1
    13cc:	51 05       	cpc	r21, r1
    13ce:	29 f4       	brne	.+10     	; 0x13da <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    13d0:	90 91 9e 00 	lds	r25, 0x009E
    13d4:	9e 7f       	andi	r25, 0xFE	; 254
    13d6:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    13da:	21 15       	cp	r18, r1
    13dc:	31 05       	cpc	r19, r1
    13de:	29 f0       	breq	.+10     	; 0x13ea <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    13e0:	90 91 a0 00 	lds	r25, 0x00A0
    13e4:	90 62       	ori	r25, 0x20	; 32
    13e6:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    13ea:	08 95       	ret

000013ec <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	28 97       	sbiw	r28, 0x08	; 8
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    1404:	80 91 fa 04 	lds	r24, 0x04FA
    1408:	85 30       	cpi	r24, 0x05	; 5
    140a:	09 f4       	brne	.+2      	; 0x140e <USB_Host_ProcessNextHostState+0x22>
    140c:	99 c0       	rjmp	.+306    	; 0x1540 <USB_Host_ProcessNextHostState+0x154>
    140e:	86 30       	cpi	r24, 0x06	; 6
    1410:	68 f4       	brcc	.+26     	; 0x142c <USB_Host_ProcessNextHostState+0x40>
    1412:	82 30       	cpi	r24, 0x02	; 2
    1414:	c1 f1       	breq	.+112    	; 0x1486 <USB_Host_ProcessNextHostState+0x9a>
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	18 f4       	brcc	.+6      	; 0x1420 <USB_Host_ProcessNextHostState+0x34>
    141a:	88 23       	and	r24, r24
    141c:	a1 f0       	breq	.+40     	; 0x1446 <USB_Host_ProcessNextHostState+0x5a>
    141e:	07 c1       	rjmp	.+526    	; 0x162e <USB_Host_ProcessNextHostState+0x242>
    1420:	83 30       	cpi	r24, 0x03	; 3
    1422:	d9 f1       	breq	.+118    	; 0x149a <USB_Host_ProcessNextHostState+0xae>
    1424:	84 30       	cpi	r24, 0x04	; 4
    1426:	09 f0       	breq	.+2      	; 0x142a <USB_Host_ProcessNextHostState+0x3e>
    1428:	02 c1       	rjmp	.+516    	; 0x162e <USB_Host_ProcessNextHostState+0x242>
    142a:	62 c0       	rjmp	.+196    	; 0x14f0 <USB_Host_ProcessNextHostState+0x104>
    142c:	87 30       	cpi	r24, 0x07	; 7
    142e:	09 f4       	brne	.+2      	; 0x1432 <USB_Host_ProcessNextHostState+0x46>
    1430:	9e c0       	rjmp	.+316    	; 0x156e <USB_Host_ProcessNextHostState+0x182>
    1432:	87 30       	cpi	r24, 0x07	; 7
    1434:	08 f4       	brcc	.+2      	; 0x1438 <USB_Host_ProcessNextHostState+0x4c>
    1436:	8f c0       	rjmp	.+286    	; 0x1556 <USB_Host_ProcessNextHostState+0x16a>
    1438:	88 30       	cpi	r24, 0x08	; 8
    143a:	09 f4       	brne	.+2      	; 0x143e <USB_Host_ProcessNextHostState+0x52>
    143c:	b8 c0       	rjmp	.+368    	; 0x15ae <USB_Host_ProcessNextHostState+0x1c2>
    143e:	89 30       	cpi	r24, 0x09	; 9
    1440:	09 f0       	breq	.+2      	; 0x1444 <USB_Host_ProcessNextHostState+0x58>
    1442:	f5 c0       	rjmp	.+490    	; 0x162e <USB_Host_ProcessNextHostState+0x242>
    1444:	d9 c0       	rjmp	.+434    	; 0x15f8 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1446:	00 91 13 01 	lds	r16, 0x0113
    144a:	10 91 14 01 	lds	r17, 0x0114
    144e:	01 15       	cp	r16, r1
    1450:	11 05       	cpc	r17, r1
    1452:	09 f4       	brne	.+2      	; 0x1456 <USB_Host_ProcessNextHostState+0x6a>
    1454:	ec c0       	rjmp	.+472    	; 0x162e <USB_Host_ProcessNextHostState+0x242>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	74 df       	rcall	.-280    	; 0x1342 <USB_Host_WaitMS>
    145a:	68 2f       	mov	r22, r24
    145c:	88 23       	and	r24, r24
    145e:	31 f0       	breq	.+12     	; 0x146c <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
    1460:	80 91 12 01 	lds	r24, 0x0112
    1464:	80 93 fa 04 	sts	0x04FA, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    1468:	81 e0       	ldi	r24, 0x01	; 1
					break;
    146a:	d3 c0       	rjmp	.+422    	; 0x1612 <USB_Host_ProcessNextHostState+0x226>
				}

				if (!(--WaitMSRemaining))
    146c:	01 50       	subi	r16, 0x01	; 1
    146e:	10 40       	sbci	r17, 0x00	; 0
    1470:	10 93 14 01 	sts	0x0114, r17
    1474:	00 93 13 01 	sts	0x0113, r16
    1478:	01 15       	cp	r16, r1
    147a:	11 05       	cpc	r17, r1
    147c:	09 f0       	breq	.+2      	; 0x1480 <USB_Host_ProcessNextHostState+0x94>
    147e:	d7 c0       	rjmp	.+430    	; 0x162e <USB_Host_ProcessNextHostState+0x242>
				  USB_HostState = PostWaitState;
    1480:	80 91 12 01 	lds	r24, 0x0112
    1484:	07 c0       	rjmp	.+14     	; 0x1494 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    1486:	88 ee       	ldi	r24, 0xE8	; 232
    1488:	93 e0       	ldi	r25, 0x03	; 3
    148a:	90 93 14 01 	sts	0x0114, r25
    148e:	80 93 13 01 	sts	0x0113, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    1492:	83 e0       	ldi	r24, 0x03	; 3
    1494:	80 93 fa 04 	sts	0x04FA, r24
			break;
    1498:	ca c0       	rjmp	.+404    	; 0x162e <USB_Host_ProcessNextHostState+0x242>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    149a:	80 91 13 01 	lds	r24, 0x0113
    149e:	90 91 14 01 	lds	r25, 0x0114
    14a2:	9c 01       	movw	r18, r24
    14a4:	21 50       	subi	r18, 0x01	; 1
    14a6:	30 40       	sbci	r19, 0x00	; 0
    14a8:	30 93 14 01 	sts	0x0114, r19
    14ac:	20 93 13 01 	sts	0x0113, r18
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	39 f0       	breq	.+14     	; 0x14c2 <USB_Host_ProcessNextHostState+0xd6>
    14b4:	8f ec       	ldi	r24, 0xCF	; 207
    14b6:	97 e0       	ldi	r25, 0x07	; 7
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <USB_Host_ProcessNextHostState+0xcc>
    14bc:	00 c0       	rjmp	.+0      	; 0x14be <USB_Host_ProcessNextHostState+0xd2>
    14be:	00 00       	nop
    14c0:	b6 c0       	rjmp	.+364    	; 0x162e <USB_Host_ProcessNextHostState+0x242>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    14c2:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    14c4:	80 91 d8 00 	lds	r24, 0x00D8
    14c8:	80 61       	ori	r24, 0x10	; 16
    14ca:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    14ce:	80 91 dd 00 	lds	r24, 0x00DD
    14d2:	8b 7f       	andi	r24, 0xFB	; 251
    14d4:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    14d8:	80 91 d7 00 	lds	r24, 0x00D7
    14dc:	80 61       	ori	r24, 0x10	; 16
    14de:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    14e2:	80 91 dd 00 	lds	r24, 0x00DD
    14e6:	82 60       	ori	r24, 0x02	; 2
    14e8:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    14ec:	84 e0       	ldi	r24, 0x04	; 4
    14ee:	d2 cf       	rjmp	.-92     	; 0x1494 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    14f0:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    14f4:	80 ff       	sbrs	r24, 0
    14f6:	9b c0       	rjmp	.+310    	; 0x162e <USB_Host_ProcessNextHostState+0x242>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    14f8:	80 91 9f 00 	lds	r24, 0x009F
    14fc:	8e 7f       	andi	r24, 0xFE	; 254
    14fe:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1502:	80 91 9f 00 	lds	r24, 0x009F
    1506:	8d 7f       	andi	r24, 0xFD	; 253
    1508:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    150c:	80 91 df 00 	lds	r24, 0x00DF
    1510:	8d 7f       	andi	r24, 0xFD	; 253
    1512:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1516:	80 91 de 00 	lds	r24, 0x00DE
    151a:	82 60       	ori	r24, 0x02	; 2
    151c:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1520:	80 91 9e 00 	lds	r24, 0x009E
    1524:	81 60       	ori	r24, 0x01	; 1
    1526:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    152a:	56 d1       	rcall	.+684    	; 0x17d8 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    152c:	10 92 fa 04 	sts	0x04FA, r1
    1530:	84 e6       	ldi	r24, 0x64	; 100
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	90 93 14 01 	sts	0x0114, r25
    1538:	80 93 13 01 	sts	0x0113, r24
    153c:	85 e0       	ldi	r24, 0x05	; 5
    153e:	59 c0       	rjmp	.+178    	; 0x15f2 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1540:	aa de       	rcall	.-684    	; 0x1296 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1542:	10 92 fa 04 	sts	0x04FA, r1
    1546:	88 ec       	ldi	r24, 0xC8	; 200
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	90 93 14 01 	sts	0x0114, r25
    154e:	80 93 13 01 	sts	0x0113, r24
    1552:	86 e0       	ldi	r24, 0x06	; 6
    1554:	4e c0       	rjmp	.+156    	; 0x15f2 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	20 e4       	ldi	r18, 0x40	; 64
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	01 e0       	ldi	r16, 0x01	; 1
    1562:	d3 d0       	rcall	.+422    	; 0x170a <Pipe_ConfigurePipe>
    1564:	88 23       	and	r24, r24
    1566:	09 f4       	brne	.+2      	; 0x156a <USB_Host_ProcessNextHostState+0x17e>
    1568:	50 c0       	rjmp	.+160    	; 0x160a <USB_Host_ProcessNextHostState+0x21e>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    156a:	87 e0       	ldi	r24, 0x07	; 7
    156c:	93 cf       	rjmp	.-218    	; 0x1494 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    156e:	a2 ef       	ldi	r26, 0xF2	; 242
    1570:	b4 e0       	ldi	r27, 0x04	; 4
    1572:	e8 e0       	ldi	r30, 0x08	; 8
    1574:	f1 e0       	ldi	r31, 0x01	; 1
    1576:	88 e0       	ldi	r24, 0x08	; 8
    1578:	01 90       	ld	r0, Z+
    157a:	0d 92       	st	X+, r0
    157c:	81 50       	subi	r24, 0x01	; 1
    157e:	e1 f7       	brne	.-8      	; 0x1578 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1580:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1584:	ce 01       	movw	r24, r28
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	4c d3       	rcall	.+1688   	; 0x1c22 <USB_Host_SendControlRequest>
    158a:	68 2f       	mov	r22, r24
    158c:	88 23       	and	r24, r24
    158e:	09 f0       	breq	.+2      	; 0x1592 <USB_Host_ProcessNextHostState+0x1a6>
    1590:	3f c0       	rjmp	.+126    	; 0x1610 <USB_Host_ProcessNextHostState+0x224>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    1592:	88 85       	ldd	r24, Y+8	; 0x08
    1594:	80 93 10 01 	sts	0x0110, r24

			USB_Host_ResetDevice();
    1598:	7e de       	rcall	.-772    	; 0x1296 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    159a:	10 92 fa 04 	sts	0x04FA, r1
    159e:	88 ec       	ldi	r24, 0xC8	; 200
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	90 93 14 01 	sts	0x0114, r25
    15a6:	80 93 13 01 	sts	0x0113, r24
    15aa:	88 e0       	ldi	r24, 0x08	; 8
    15ac:	22 c0       	rjmp	.+68     	; 0x15f2 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    15ae:	20 91 10 01 	lds	r18, 0x0110
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	01 e0       	ldi	r16, 0x01	; 1
    15bc:	a6 d0       	rcall	.+332    	; 0x170a <Pipe_ConfigurePipe>
    15be:	88 23       	and	r24, r24
    15c0:	21 f1       	breq	.+72     	; 0x160a <USB_Host_ProcessNextHostState+0x21e>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    15c2:	a2 ef       	ldi	r26, 0xF2	; 242
    15c4:	b4 e0       	ldi	r27, 0x04	; 4
    15c6:	e0 e0       	ldi	r30, 0x00	; 0
    15c8:	f1 e0       	ldi	r31, 0x01	; 1
    15ca:	88 e0       	ldi	r24, 0x08	; 8
    15cc:	01 90       	ld	r0, Z+
    15ce:	0d 92       	st	X+, r0
    15d0:	81 50       	subi	r24, 0x01	; 1
    15d2:	e1 f7       	brne	.-8      	; 0x15cc <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	24 d3       	rcall	.+1608   	; 0x1c22 <USB_Host_SendControlRequest>
    15da:	68 2f       	mov	r22, r24
    15dc:	88 23       	and	r24, r24
    15de:	c1 f4       	brne	.+48     	; 0x1610 <USB_Host_ProcessNextHostState+0x224>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    15e0:	10 92 fa 04 	sts	0x04FA, r1
    15e4:	84 e6       	ldi	r24, 0x64	; 100
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	90 93 14 01 	sts	0x0114, r25
    15ec:	80 93 13 01 	sts	0x0113, r24
    15f0:	89 e0       	ldi	r24, 0x09	; 9
    15f2:	80 93 12 01 	sts	0x0112, r24
			break;
    15f6:	1b c0       	rjmp	.+54     	; 0x162e <USB_Host_ProcessNextHostState+0x242>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    15fe:	8a e0       	ldi	r24, 0x0A	; 10
    1600:	80 93 fa 04 	sts	0x04FA, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    1604:	0e 94 c3 01 	call	0x386	; 0x386 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    1608:	12 c0       	rjmp	.+36     	; 0x162e <USB_Host_ProcessNextHostState+0x242>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    160a:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    160c:	84 e0       	ldi	r24, 0x04	; 4
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <USB_Host_ProcessNextHostState+0x226>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    1610:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    1612:	90 91 fa 04 	lds	r25, 0x04FA
    1616:	91 30       	cpi	r25, 0x01	; 1
    1618:	51 f0       	breq	.+20     	; 0x162e <USB_Host_ProcessNextHostState+0x242>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    161a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    161e:	80 91 dd 00 	lds	r24, 0x00DD
    1622:	81 60       	ori	r24, 0x01	; 1
    1624:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1628:	0e 94 bd 01 	call	0x37a	; 0x37a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    162c:	32 d1       	rcall	.+612    	; 0x1892 <USB_ResetInterface>
	}
}
    162e:	28 96       	adiw	r28, 0x08	; 8
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	08 95       	ret

00001644 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1644:	8f 92       	push	r8
    1646:	9f 92       	push	r9
    1648:	bf 92       	push	r11
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	0f 92       	push	r0
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	e8 2e       	mov	r14, r24
    1662:	4b 01       	movw	r8, r22
    1664:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1666:	80 91 aa 00 	lds	r24, 0x00AA
    166a:	8f 7c       	andi	r24, 0xCF	; 207
    166c:	80 61       	ori	r24, 0x10	; 16
    166e:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1672:	99 83       	std	Y+1, r25	; 0x01
    1674:	c7 d0       	rcall	.+398    	; 0x1804 <Pipe_WaitUntilReady>
    1676:	b8 2e       	mov	r11, r24
    1678:	99 81       	ldd	r25, Y+1	; 0x01
    167a:	88 23       	and	r24, r24
    167c:	c1 f5       	brne	.+112    	; 0x16ee <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    167e:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1680:	01 15       	cp	r16, r1
    1682:	11 05       	cpc	r17, r1
    1684:	39 f0       	breq	.+14     	; 0x1694 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    1686:	f8 01       	movw	r30, r16
    1688:	20 81       	ld	r18, Z
    168a:	31 81       	ldd	r19, Z+1	; 0x01
    168c:	82 1a       	sub	r8, r18
    168e:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1690:	e2 0e       	add	r14, r18
    1692:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1694:	cc 24       	eor	r12, r12
    1696:	dd 24       	eor	r13, r13
    1698:	25 c0       	rjmp	.+74     	; 0x16e4 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    169a:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    169e:	85 fd       	sbrc	r24, 5
    16a0:	16 c0       	rjmp	.+44     	; 0x16ce <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    16a2:	80 91 a6 00 	lds	r24, 0x00A6
    16a6:	8e 77       	andi	r24, 0x7E	; 126
    16a8:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    16ac:	01 15       	cp	r16, r1
    16ae:	11 05       	cpc	r17, r1
    16b0:	51 f0       	breq	.+20     	; 0x16c6 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    16b2:	f8 01       	movw	r30, r16
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	8c 0d       	add	r24, r12
    16ba:	9d 1d       	adc	r25, r13
    16bc:	91 83       	std	Z+1, r25	; 0x01
    16be:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    16c0:	44 e0       	ldi	r20, 0x04	; 4
    16c2:	b4 2e       	mov	r11, r20
    16c4:	14 c0       	rjmp	.+40     	; 0x16ee <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    16c6:	9e d0       	rcall	.+316    	; 0x1804 <Pipe_WaitUntilReady>
    16c8:	88 23       	and	r24, r24
    16ca:	61 f0       	breq	.+24     	; 0x16e4 <Pipe_Read_Stream_LE+0xa0>
    16cc:	0f c0       	rjmp	.+30     	; 0x16ec <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    16ce:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    16d2:	f7 01       	movw	r30, r14
    16d4:	81 93       	st	Z+, r24
    16d6:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    16d8:	08 94       	sec
    16da:	81 08       	sbc	r8, r1
    16dc:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    16de:	08 94       	sec
    16e0:	c1 1c       	adc	r12, r1
    16e2:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    16e4:	81 14       	cp	r8, r1
    16e6:	91 04       	cpc	r9, r1
    16e8:	c1 f6       	brne	.-80     	; 0x169a <Pipe_Read_Stream_LE+0x56>
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    16ec:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    16ee:	8b 2d       	mov	r24, r11
    16f0:	0f 90       	pop	r0
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	ff 90       	pop	r15
    16fc:	ef 90       	pop	r14
    16fe:	df 90       	pop	r13
    1700:	cf 90       	pop	r12
    1702:	bf 90       	pop	r11
    1704:	9f 90       	pop	r9
    1706:	8f 90       	pop	r8
    1708:	08 95       	ret

0000170a <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    170a:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    170c:	58 2f       	mov	r21, r24
    170e:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    1710:	87 ff       	sbrs	r24, 7
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <Pipe_ConfigurePipe+0xe>
    1714:	80 e1       	ldi	r24, 0x10	; 16
    1716:	01 c0       	rjmp	.+2      	; 0x171a <Pipe_ConfigurePipe+0x10>
    1718:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    171a:	57 30       	cpi	r21, 0x07	; 7
    171c:	08 f0       	brcs	.+2      	; 0x1720 <Pipe_ConfigurePipe+0x16>
    171e:	59 c0       	rjmp	.+178    	; 0x17d2 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    1720:	66 23       	and	r22, r22
    1722:	09 f4       	brne	.+2      	; 0x1726 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    1724:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1726:	4f 70       	andi	r20, 0x0F	; 15
    1728:	62 95       	swap	r22
    172a:	66 0f       	add	r22, r22
    172c:	66 0f       	add	r22, r22
    172e:	60 7c       	andi	r22, 0xC0	; 192
    1730:	64 2b       	or	r22, r20
    1732:	68 2b       	or	r22, r24
    1734:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1736:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1738:	84 2f       	mov	r24, r20
    173a:	8f 70       	andi	r24, 0x0F	; 15
    173c:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1740:	45 17       	cp	r20, r21
    1742:	a1 f4       	brne	.+40     	; 0x176c <Pipe_ConfigurePipe+0x62>
    1744:	88 e0       	ldi	r24, 0x08	; 8
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    174c:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1752:	82 17       	cp	r24, r18
    1754:	93 07       	cpc	r25, r19
    1756:	10 f4       	brcc	.+4      	; 0x175c <Pipe_ConfigurePipe+0x52>
    1758:	75 30       	cpi	r23, 0x05	; 5
    175a:	c1 f7       	brne	.-16     	; 0x174c <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    175c:	87 2f       	mov	r24, r23
    175e:	82 95       	swap	r24
    1760:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1762:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1764:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    1766:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    1768:	e0 e0       	ldi	r30, 0x00	; 0
    176a:	08 c0       	rjmp	.+16     	; 0x177c <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    176c:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    1770:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    1774:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    1778:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    177c:	81 ff       	sbrs	r24, 1
    177e:	20 c0       	rjmp	.+64     	; 0x17c0 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1780:	90 91 a9 00 	lds	r25, 0x00A9
    1784:	9e 7f       	andi	r25, 0xFE	; 254
    1786:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    178a:	90 91 ab 00 	lds	r25, 0x00AB
    178e:	9d 7f       	andi	r25, 0xFD	; 253
    1790:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    1794:	90 91 a9 00 	lds	r25, 0x00A9
    1798:	91 60       	ori	r25, 0x01	; 1
    179a:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    179e:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    17a2:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    17a6:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    17aa:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    17ae:	80 91 a9 00 	lds	r24, 0x00A9
    17b2:	80 62       	ori	r24, 0x20	; 32
    17b4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    17b8:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    17bc:	87 ff       	sbrs	r24, 7
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    17c0:	4f 5f       	subi	r20, 0xFF	; 255
    17c2:	47 30       	cpi	r20, 0x07	; 7
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <Pipe_ConfigurePipe+0xbe>
    17c6:	b8 cf       	rjmp	.-144    	; 0x1738 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    17c8:	5f 70       	andi	r21, 0x0F	; 15
    17ca:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    17d2:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    17d4:	0f 91       	pop	r16
    17d6:	08 95       	ret

000017d8 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    17d8:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	98 2f       	mov	r25, r24
    17e0:	9f 70       	andi	r25, 0x0F	; 15
    17e2:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    17e6:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    17ea:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    17ee:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    17f2:	90 91 a9 00 	lds	r25, 0x00A9
    17f6:	9e 7f       	andi	r25, 0xFE	; 254
    17f8:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	87 30       	cpi	r24, 0x07	; 7
    1800:	71 f7       	brne	.-36     	; 0x17de <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1802:	08 95       	ret

00001804 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1804:	80 91 a2 00 	lds	r24, 0x00A2
    1808:	90 91 a3 00 	lds	r25, 0x00A3
}

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    180c:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    180e:	20 91 aa 00 	lds	r18, 0x00AA
    1812:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1814:	20 31       	cpi	r18, 0x10	; 16
    1816:	29 f4       	brne	.+10     	; 0x1822 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1818:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    181c:	20 ff       	sbrs	r18, 0
    181e:	05 c0       	rjmp	.+10     	; 0x182a <Pipe_WaitUntilReady+0x26>
    1820:	18 c0       	rjmp	.+48     	; 0x1852 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1822:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1826:	22 fd       	sbrc	r18, 2
    1828:	14 c0       	rjmp	.+40     	; 0x1852 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    182a:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    182e:	21 fd       	sbrc	r18, 1
    1830:	12 c0       	rjmp	.+36     	; 0x1856 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1832:	20 91 fa 04 	lds	r18, 0x04FA
    1836:	21 30       	cpi	r18, 0x01	; 1
    1838:	81 f0       	breq	.+32     	; 0x185a <Pipe_WaitUntilReady+0x56>
    183a:	20 91 a2 00 	lds	r18, 0x00A2
    183e:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1842:	28 17       	cp	r18, r24
    1844:	39 07       	cpc	r19, r25
    1846:	19 f3       	breq	.-58     	; 0x180e <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1848:	44 23       	and	r20, r20
    184a:	49 f0       	breq	.+18     	; 0x185e <Pipe_WaitUntilReady+0x5a>
    184c:	41 50       	subi	r20, 0x01	; 1
    184e:	c9 01       	movw	r24, r18
    1850:	de cf       	rjmp	.-68     	; 0x180e <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    185a:	82 e0       	ldi	r24, 0x02	; 2
    185c:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    185e:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    1860:	08 95       	ret

00001862 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1862:	75 d0       	rcall	.+234    	; 0x194e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1864:	7c d0       	rcall	.+248    	; 0x195e <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1866:	e0 ee       	ldi	r30, 0xE0	; 224
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	81 60       	ori	r24, 0x01	; 1
    186e:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1870:	e8 ed       	ldi	r30, 0xD8	; 216
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8f 77       	andi	r24, 0x7F	; 127
    1878:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    187a:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    187c:	a7 ed       	ldi	r26, 0xD7	; 215
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	8c 91       	ld	r24, X
    1882:	8e 7f       	andi	r24, 0xFE	; 254
    1884:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1886:	80 81       	ld	r24, Z
    1888:	8f 7e       	andi	r24, 0xEF	; 239
    188a:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    188c:	10 92 f1 04 	sts	0x04F1, r1
}
    1890:	08 95       	ret

00001892 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1892:	5d d0       	rcall	.+186    	; 0x194e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1894:	64 d0       	rcall	.+200    	; 0x195e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1896:	80 91 d8 00 	lds	r24, 0x00D8
    189a:	8f 77       	andi	r24, 0x7F	; 127
    189c:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    18a0:	80 91 d8 00 	lds	r24, 0x00D8
    18a4:	80 68       	ori	r24, 0x80	; 128
    18a6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    18aa:	80 91 d8 00 	lds	r24, 0x00D8
    18ae:	8f 7d       	andi	r24, 0xDF	; 223
    18b0:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    18b4:	80 91 d7 00 	lds	r24, 0x00D7
    18b8:	8f 77       	andi	r24, 0x7F	; 127
    18ba:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    18be:	8c e0       	ldi	r24, 0x0C	; 12
    18c0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    18c2:	8e e0       	ldi	r24, 0x0E	; 14
    18c4:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    18c6:	09 b4       	in	r0, 0x29	; 41
    18c8:	00 fe       	sbrs	r0, 0
    18ca:	fd cf       	rjmp	.-6      	; 0x18c6 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	80 93 fa 04 	sts	0x04FA, r24
	USB_Host_ConfigurationNumber = 0;
    18d2:	10 92 f0 04 	sts	0x04F0, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    18d6:	80 e4       	ldi	r24, 0x40	; 64
    18d8:	80 93 10 01 	sts	0x0110, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    18dc:	80 91 d8 00 	lds	r24, 0x00D8
    18e0:	80 64       	ori	r24, 0x40	; 64
    18e2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    18e6:	80 91 dd 00 	lds	r24, 0x00DD
    18ea:	81 60       	ori	r24, 0x01	; 1
    18ec:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    18f0:	80 91 dd 00 	lds	r24, 0x00DD
    18f4:	84 60       	ori	r24, 0x04	; 4
    18f6:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    18fa:	80 91 d7 00 	lds	r24, 0x00D7
    18fe:	8f 7e       	andi	r24, 0xEF	; 239
    1900:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1904:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    1906:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1908:	80 91 de 00 	lds	r24, 0x00DE
    190c:	81 60       	ori	r24, 0x01	; 1
    190e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1912:	80 91 de 00 	lds	r24, 0x00DE
    1916:	84 60       	ori	r24, 0x04	; 4
    1918:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    191c:	80 91 e0 00 	lds	r24, 0x00E0
    1920:	8e 7f       	andi	r24, 0xFE	; 254
    1922:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1926:	80 91 d8 00 	lds	r24, 0x00D8
    192a:	80 61       	ori	r24, 0x10	; 16
    192c:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1930:	08 95       	ret

00001932 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1932:	e8 ed       	ldi	r30, 0xD8	; 216
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8f 7e       	andi	r24, 0xEF	; 239
    193a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    193c:	e7 ed       	ldi	r30, 0xD7	; 215
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	81 60       	ori	r24, 0x01	; 1
    1944:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	80 93 f1 04 	sts	0x04F1, r24

	USB_ResetInterface();
}
    194c:	a2 cf       	rjmp	.-188    	; 0x1892 <USB_ResetInterface>

0000194e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    194e:	e8 ed       	ldi	r30, 0xD8	; 216
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	8c 7f       	andi	r24, 0xFC	; 252
    1956:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1958:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    195c:	08 95       	ret

0000195e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    195e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1962:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1966:	08 95       	ret

00001968 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1968:	1f 92       	push	r1
    196a:	0f 92       	push	r0
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	0f 92       	push	r0
    1970:	0b b6       	in	r0, 0x3b	; 59
    1972:	0f 92       	push	r0
    1974:	11 24       	eor	r1, r1
    1976:	2f 93       	push	r18
    1978:	3f 93       	push	r19
    197a:	4f 93       	push	r20
    197c:	5f 93       	push	r21
    197e:	6f 93       	push	r22
    1980:	7f 93       	push	r23
    1982:	8f 93       	push	r24
    1984:	9f 93       	push	r25
    1986:	af 93       	push	r26
    1988:	bf 93       	push	r27
    198a:	ef 93       	push	r30
    198c:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    198e:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1992:	85 ff       	sbrs	r24, 5
    1994:	0a c0       	rjmp	.+20     	; 0x19aa <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1996:	80 91 a0 00 	lds	r24, 0x00A0
    199a:	85 ff       	sbrs	r24, 5
    199c:	06 c0       	rjmp	.+12     	; 0x19aa <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    199e:	80 91 9f 00 	lds	r24, 0x009F
    19a2:	8f 7d       	andi	r24, 0xDF	; 223
    19a4:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    19a8:	12 d1       	rcall	.+548    	; 0x1bce <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    19aa:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    19ae:	81 ff       	sbrs	r24, 1
    19b0:	16 c0       	rjmp	.+44     	; 0x19de <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    19b2:	80 91 a0 00 	lds	r24, 0x00A0
    19b6:	81 ff       	sbrs	r24, 1
    19b8:	12 c0       	rjmp	.+36     	; 0x19de <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    19ba:	80 91 9f 00 	lds	r24, 0x009F
    19be:	8d 7f       	andi	r24, 0xFD	; 253
    19c0:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    19c4:	80 91 9f 00 	lds	r24, 0x009F
    19c8:	8e 7f       	andi	r24, 0xFE	; 254
    19ca:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    19ce:	80 91 a0 00 	lds	r24, 0x00A0
    19d2:	8d 7f       	andi	r24, 0xFD	; 253
    19d4:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    19d8:	0e 94 bd 01 	call	0x37a	; 0x37a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    19dc:	5a df       	rcall	.-332    	; 0x1892 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    19de:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    19e2:	81 ff       	sbrs	r24, 1
    19e4:	17 c0       	rjmp	.+46     	; 0x1a14 <__vector_10+0xac>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    19e6:	80 91 de 00 	lds	r24, 0x00DE
    19ea:	81 ff       	sbrs	r24, 1
    19ec:	13 c0       	rjmp	.+38     	; 0x1a14 <__vector_10+0xac>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    19ee:	80 91 df 00 	lds	r24, 0x00DF
    19f2:	8d 7f       	andi	r24, 0xFD	; 253
    19f4:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    19f8:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    19fa:	80 91 dd 00 	lds	r24, 0x00DD
    19fe:	81 60       	ori	r24, 0x01	; 1
    1a00:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	0e 94 48 02 	call	0x490	; 0x490 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    1a0a:	0e 94 bd 01 	call	0x37a	; 0x37a <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	80 93 fa 04 	sts	0x04FA, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1a14:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1a18:	80 ff       	sbrs	r24, 0
    1a1a:	18 c0       	rjmp	.+48     	; 0x1a4c <__vector_10+0xe4>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1a1c:	80 91 de 00 	lds	r24, 0x00DE
    1a20:	80 ff       	sbrs	r24, 0
    1a22:	14 c0       	rjmp	.+40     	; 0x1a4c <__vector_10+0xe4>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1a24:	80 91 df 00 	lds	r24, 0x00DF
    1a28:	8e 7f       	andi	r24, 0xFE	; 254
    1a2a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    1a2e:	80 91 de 00 	lds	r24, 0x00DE
    1a32:	8e 7f       	andi	r24, 0xFE	; 254
    1a34:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1a38:	0e 94 b7 01 	call	0x36e	; 0x36e <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1a3c:	80 91 a0 00 	lds	r24, 0x00A0
    1a40:	82 60       	ori	r24, 0x02	; 2
    1a42:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1a46:	82 e0       	ldi	r24, 0x02	; 2
    1a48:	80 93 fa 04 	sts	0x04FA, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1a4c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1a50:	82 ff       	sbrs	r24, 2
    1a52:	10 c0       	rjmp	.+32     	; 0x1a74 <__vector_10+0x10c>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1a54:	80 91 de 00 	lds	r24, 0x00DE
    1a58:	82 ff       	sbrs	r24, 2
    1a5a:	0c c0       	rjmp	.+24     	; 0x1a74 <__vector_10+0x10c>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1a5c:	80 91 df 00 	lds	r24, 0x00DF
    1a60:	8b 7f       	andi	r24, 0xFB	; 251
    1a62:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1a66:	82 e0       	ldi	r24, 0x02	; 2
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1a6e:	0e 94 bd 01 	call	0x37a	; 0x37a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1a72:	0f df       	rcall	.-482    	; 0x1892 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0b be       	out	0x3b, r0	; 59
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	0f 90       	pop	r0
    1a96:	1f 90       	pop	r1
    1a98:	18 95       	reti

00001a9a <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1a9a:	cf 92       	push	r12
    1a9c:	df 92       	push	r13
    1a9e:	ef 92       	push	r14
    1aa0:	ff 92       	push	r15
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	29 97       	sbiw	r28, 0x09	; 9
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	6b 01       	movw	r12, r22
    1abc:	8a 01       	movw	r16, r20
    1abe:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1ac0:	90 e8       	ldi	r25, 0x80	; 128
    1ac2:	90 93 f2 04 	sts	0x04F2, r25
    1ac6:	96 e0       	ldi	r25, 0x06	; 6
    1ac8:	90 93 f3 04 	sts	0x04F3, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1ad2:	90 93 f5 04 	sts	0x04F5, r25
    1ad6:	80 93 f4 04 	sts	0x04F4, r24
    1ada:	10 92 f7 04 	sts	0x04F7, r1
    1ade:	10 92 f6 04 	sts	0x04F6, r1
    1ae2:	89 e0       	ldi	r24, 0x09	; 9
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	90 93 f9 04 	sts	0x04F9, r25
    1aea:	80 93 f8 04 	sts	0x04F8, r24
    1aee:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1af2:	ce 01       	movw	r24, r28
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	95 d0       	rcall	.+298    	; 0x1c22 <USB_Host_SendControlRequest>
    1af8:	88 23       	and	r24, r24
    1afa:	b9 f4       	brne	.+46     	; 0x1b2a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	f6 01       	movw	r30, r12
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1b06:	e8 16       	cp	r14, r24
    1b08:	f9 06       	cpc	r15, r25
    1b0a:	70 f0       	brcs	.+28     	; 0x1b28 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1b0c:	90 93 f9 04 	sts	0x04F9, r25
    1b10:	80 93 f8 04 	sts	0x04F8, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1b14:	c8 01       	movw	r24, r16
    1b16:	85 d0       	rcall	.+266    	; 0x1c22 <USB_Host_SendControlRequest>
    1b18:	88 23       	and	r24, r24
    1b1a:	39 f4       	brne	.+14     	; 0x1b2a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	92 30       	cpi	r25, 0x02	; 2
    1b22:	19 f0       	breq	.+6      	; 0x1b2a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1b24:	86 e0       	ldi	r24, 0x06	; 6
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1b28:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1b2a:	29 96       	adiw	r28, 0x09	; 9
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	ff 90       	pop	r15
    1b40:	ef 90       	pop	r14
    1b42:	df 90       	pop	r13
    1b44:	cf 90       	pop	r12
    1b46:	08 95       	ret

00001b48 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1b48:	af 92       	push	r10
    1b4a:	bf 92       	push	r11
    1b4c:	cf 92       	push	r12
    1b4e:	df 92       	push	r13
    1b50:	ef 92       	push	r14
    1b52:	ff 92       	push	r15
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	8c 01       	movw	r16, r24
    1b5e:	eb 01       	movw	r28, r22
    1b60:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1b62:	23 c0       	rjmp	.+70     	; 0x1baa <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1b64:	e8 81       	ld	r30, Y
    1b66:	f9 81       	ldd	r31, Y+1	; 0x01
    1b68:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1b6a:	20 81       	ld	r18, Z
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	c7 01       	movw	r24, r14
    1b70:	2e 15       	cp	r18, r14
    1b72:	3f 05       	cpc	r19, r15
    1b74:	08 f4       	brcc	.+2      	; 0x1b78 <USB_GetNextDescriptorComp+0x30>
    1b76:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1b78:	e8 0f       	add	r30, r24
    1b7a:	f9 1f       	adc	r31, r25
    1b7c:	f9 83       	std	Y+1, r31	; 0x01
    1b7e:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1b80:	f8 01       	movw	r30, r16
    1b82:	20 81       	ld	r18, Z
    1b84:	31 81       	ldd	r19, Z+1	; 0x01
    1b86:	28 1b       	sub	r18, r24
    1b88:	39 0b       	sbc	r19, r25
    1b8a:	31 83       	std	Z+1, r19	; 0x01
    1b8c:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1b8e:	88 81       	ld	r24, Y
    1b90:	99 81       	ldd	r25, Y+1	; 0x01
    1b92:	f6 01       	movw	r30, r12
    1b94:	09 95       	icall
    1b96:	82 30       	cpi	r24, 0x02	; 2
    1b98:	41 f0       	breq	.+16     	; 0x1baa <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	69 f4       	brne	.+26     	; 0x1bb8 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    1b9e:	a8 82       	st	Y, r10
    1ba0:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	f1 82       	std	Z+1, r15	; 0x01
    1ba6:	e0 82       	st	Z, r14
    1ba8:	07 c0       	rjmp	.+14     	; 0x1bb8 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1baa:	f8 01       	movw	r30, r16
    1bac:	e0 80       	ld	r14, Z
    1bae:	f1 80       	ldd	r15, Z+1	; 0x01
    1bb0:	e1 14       	cp	r14, r1
    1bb2:	f1 04       	cpc	r15, r1
    1bb4:	b9 f6       	brne	.-82     	; 0x1b64 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
}
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	1f 91       	pop	r17
    1bbe:	0f 91       	pop	r16
    1bc0:	ff 90       	pop	r15
    1bc2:	ef 90       	pop	r14
    1bc4:	df 90       	pop	r13
    1bc6:	cf 90       	pop	r12
    1bc8:	bf 90       	pop	r11
    1bca:	af 90       	pop	r10
    1bcc:	08 95       	ret

00001bce <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1bce:	08 95       	ret

00001bd0 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1bd8:	c8 ee       	ldi	r28, 0xE8	; 232
    1bda:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1bdc:	07 c0       	rjmp	.+14     	; 0x1bec <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	b0 db       	rcall	.-2208   	; 0x1342 <USB_Host_WaitMS>
    1be2:	88 23       	and	r24, r24
    1be4:	d1 f4       	brne	.+52     	; 0x1c1a <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1be6:	20 97       	sbiw	r28, 0x00	; 0
    1be8:	b9 f0       	breq	.+46     	; 0x1c18 <USB_Host_WaitForIOS+0x48>
    1bea:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1bec:	11 23       	and	r17, r17
    1bee:	29 f4       	brne	.+10     	; 0x1bfa <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1bf0:	80 91 a6 00 	lds	r24, 0x00A6
    1bf4:	83 ff       	sbrs	r24, 3
    1bf6:	f3 cf       	rjmp	.-26     	; 0x1bde <USB_Host_WaitForIOS+0xe>
    1bf8:	0d c0       	rjmp	.+26     	; 0x1c14 <USB_Host_WaitForIOS+0x44>
    1bfa:	11 30       	cpi	r17, 0x01	; 1
    1bfc:	29 f4       	brne	.+10     	; 0x1c08 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1bfe:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1c02:	80 ff       	sbrs	r24, 0
    1c04:	ec cf       	rjmp	.-40     	; 0x1bde <USB_Host_WaitForIOS+0xe>
    1c06:	06 c0       	rjmp	.+12     	; 0x1c14 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1c08:	12 30       	cpi	r17, 0x02	; 2
    1c0a:	49 f7       	brne	.-46     	; 0x1bde <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1c0c:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1c10:	82 ff       	sbrs	r24, 2
    1c12:	e5 cf       	rjmp	.-54     	; 0x1bde <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1c18:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	1f 91       	pop	r17
    1c20:	08 95       	ret

00001c22 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1c22:	ef 92       	push	r14
    1c24:	ff 92       	push	r15
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1c30:	e0 90 9e 00 	lds	r14, 0x009E
    1c34:	ff 24       	eor	r15, r15
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	e8 22       	and	r14, r24
    1c3a:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1c3c:	c0 91 f8 04 	lds	r28, 0x04F8
    1c40:	d0 91 f9 04 	lds	r29, 0x04F9
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1c44:	80 91 9e 00 	lds	r24, 0x009E
    1c48:	81 60       	ori	r24, 0x01	; 1
    1c4a:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	78 db       	rcall	.-2320   	; 0x1342 <USB_Host_WaitMS>
    1c52:	88 23       	and	r24, r24
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <USB_Host_SendControlRequest+0x36>
    1c56:	cb c0       	rjmp	.+406    	; 0x1dee <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c58:	80 91 aa 00 	lds	r24, 0x00AA
    1c5c:	8f 7c       	andi	r24, 0xCF	; 207
    1c5e:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1c62:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1c66:	80 91 a6 00 	lds	r24, 0x00A6
    1c6a:	8f 7e       	andi	r24, 0xEF	; 239
    1c6c:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c70:	80 91 a9 00 	lds	r24, 0x00A9
    1c74:	8f 7b       	andi	r24, 0xBF	; 191
    1c76:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1c7a:	e2 ef       	ldi	r30, 0xF2	; 242
    1c7c:	f4 e0       	ldi	r31, 0x04	; 4

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1c7e:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1c80:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1c84:	84 e0       	ldi	r24, 0x04	; 4
    1c86:	ea 3f       	cpi	r30, 0xFA	; 250
    1c88:	f8 07       	cpc	r31, r24
    1c8a:	c9 f7       	brne	.-14     	; 0x1c7e <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1c8c:	80 91 a6 00 	lds	r24, 0x00A6
    1c90:	87 77       	andi	r24, 0x77	; 119
    1c92:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	9b df       	rcall	.-202    	; 0x1bd0 <USB_Host_WaitForIOS>
    1c9a:	88 23       	and	r24, r24
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <USB_Host_SendControlRequest+0x7e>
    1c9e:	a7 c0       	rjmp	.+334    	; 0x1dee <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1ca0:	80 91 a9 00 	lds	r24, 0x00A9
    1ca4:	80 64       	ori	r24, 0x40	; 64
    1ca6:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	4a db       	rcall	.-2412   	; 0x1342 <USB_Host_WaitMS>
    1cae:	88 23       	and	r24, r24
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <USB_Host_SendControlRequest+0x92>
    1cb2:	9d c0       	rjmp	.+314    	; 0x1dee <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1cb4:	80 91 f2 04 	lds	r24, 0x04F2
    1cb8:	87 ff       	sbrs	r24, 7
    1cba:	4f c0       	rjmp	.+158    	; 0x1d5a <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1cbc:	80 91 aa 00 	lds	r24, 0x00AA
    1cc0:	8f 7c       	andi	r24, 0xCF	; 207
    1cc2:	80 61       	ori	r24, 0x10	; 16
    1cc4:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1cc8:	01 15       	cp	r16, r1
    1cca:	11 05       	cpc	r17, r1
    1ccc:	61 f5       	brne	.+88     	; 0x1d26 <USB_Host_SendControlRequest+0x104>
    1cce:	2d c0       	rjmp	.+90     	; 0x1d2a <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1cd0:	80 91 a9 00 	lds	r24, 0x00A9
    1cd4:	8f 7b       	andi	r24, 0xBF	; 191
    1cd6:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	79 df       	rcall	.-270    	; 0x1bd0 <USB_Host_WaitForIOS>
    1cde:	88 23       	and	r24, r24
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <USB_Host_SendControlRequest+0xc2>
    1ce2:	85 c0       	rjmp	.+266    	; 0x1dee <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1ce4:	80 91 f6 00 	lds	r24, 0x00F6
    1ce8:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	49 f4       	brne	.+18     	; 0x1d02 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1cf0:	c0 e0       	ldi	r28, 0x00	; 0
    1cf2:	d0 e0       	ldi	r29, 0x00	; 0
    1cf4:	06 c0       	rjmp	.+12     	; 0x1d02 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1cf6:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	81 93       	st	Z+, r24
    1cfe:	8f 01       	movw	r16, r30
					DataLen--;
    1d00:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1d02:	80 91 f6 00 	lds	r24, 0x00F6
    1d06:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	11 f0       	breq	.+4      	; 0x1d12 <USB_Host_SendControlRequest+0xf0>
    1d0e:	20 97       	sbiw	r28, 0x00	; 0
    1d10:	91 f7       	brne	.-28     	; 0x1cf6 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d12:	80 91 a9 00 	lds	r24, 0x00A9
    1d16:	80 64       	ori	r24, 0x40	; 64
    1d18:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1d1c:	80 91 a6 00 	lds	r24, 0x00A6
    1d20:	8e 77       	andi	r24, 0x7E	; 126
    1d22:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1d26:	20 97       	sbiw	r28, 0x00	; 0
    1d28:	99 f6       	brne	.-90     	; 0x1cd0 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1d2a:	80 91 aa 00 	lds	r24, 0x00AA
    1d2e:	8f 7c       	andi	r24, 0xCF	; 207
    1d30:	80 62       	ori	r24, 0x20	; 32
    1d32:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d36:	80 91 a9 00 	lds	r24, 0x00A9
    1d3a:	8f 7b       	andi	r24, 0xBF	; 191
    1d3c:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	46 df       	rcall	.-372    	; 0x1bd0 <USB_Host_WaitForIOS>
    1d44:	88 23       	and	r24, r24
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <USB_Host_SendControlRequest+0x128>
    1d48:	52 c0       	rjmp	.+164    	; 0x1dee <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1d4a:	80 91 a6 00 	lds	r24, 0x00A6
    1d4e:	8b 77       	andi	r24, 0x7B	; 123
    1d50:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	3c df       	rcall	.-392    	; 0x1bd0 <USB_Host_WaitForIOS>
    1d58:	4a c0       	rjmp	.+148    	; 0x1dee <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1d5a:	01 15       	cp	r16, r1
    1d5c:	11 05       	cpc	r17, r1
    1d5e:	99 f1       	breq	.+102    	; 0x1dc6 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1d60:	80 91 aa 00 	lds	r24, 0x00AA
    1d64:	8f 7c       	andi	r24, 0xCF	; 207
    1d66:	80 62       	ori	r24, 0x20	; 32
    1d68:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d6c:	80 91 a9 00 	lds	r24, 0x00A9
    1d70:	8f 7b       	andi	r24, 0xBF	; 191
    1d72:	80 93 a9 00 	sts	0x00A9, r24
    1d76:	1c c0       	rjmp	.+56     	; 0x1db0 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1d78:	82 e0       	ldi	r24, 0x02	; 2
    1d7a:	2a df       	rcall	.-428    	; 0x1bd0 <USB_Host_WaitForIOS>
    1d7c:	88 23       	and	r24, r24
    1d7e:	b9 f5       	brne	.+110    	; 0x1dee <USB_Host_SendControlRequest+0x1cc>
    1d80:	f8 01       	movw	r30, r16
    1d82:	06 c0       	rjmp	.+12     	; 0x1d90 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1d84:	81 91       	ld	r24, Z+
    1d86:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1d88:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1d8c:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1d8e:	59 f0       	breq	.+22     	; 0x1da6 <USB_Host_SendControlRequest+0x184>
    1d90:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1d92:	20 91 f6 00 	lds	r18, 0x00F6
    1d96:	30 91 f7 00 	lds	r19, 0x00F7
    1d9a:	80 91 10 01 	lds	r24, 0x0110
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	28 17       	cp	r18, r24
    1da2:	39 07       	cpc	r19, r25
    1da4:	78 f3       	brcs	.-34     	; 0x1d84 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1da6:	80 91 a6 00 	lds	r24, 0x00A6
    1daa:	8b 77       	andi	r24, 0x7B	; 123
    1dac:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1db0:	20 97       	sbiw	r28, 0x00	; 0
    1db2:	11 f7       	brne	.-60     	; 0x1d78 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1db4:	82 e0       	ldi	r24, 0x02	; 2
    1db6:	0c df       	rcall	.-488    	; 0x1bd0 <USB_Host_WaitForIOS>
    1db8:	88 23       	and	r24, r24
    1dba:	c9 f4       	brne	.+50     	; 0x1dee <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1dbc:	80 91 a9 00 	lds	r24, 0x00A9
    1dc0:	80 64       	ori	r24, 0x40	; 64
    1dc2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1dc6:	80 91 aa 00 	lds	r24, 0x00AA
    1dca:	8f 7c       	andi	r24, 0xCF	; 207
    1dcc:	80 61       	ori	r24, 0x10	; 16
    1dce:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1dd2:	80 91 a9 00 	lds	r24, 0x00A9
    1dd6:	8f 7b       	andi	r24, 0xBF	; 191
    1dd8:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	f8 de       	rcall	.-528    	; 0x1bd0 <USB_Host_WaitForIOS>
    1de0:	88 23       	and	r24, r24
    1de2:	29 f4       	brne	.+10     	; 0x1dee <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1de4:	90 91 a6 00 	lds	r25, 0x00A6
    1de8:	9e 77       	andi	r25, 0x7E	; 126
    1dea:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1dee:	90 91 a9 00 	lds	r25, 0x00A9
    1df2:	90 64       	ori	r25, 0x40	; 64
    1df4:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1df8:	e1 14       	cp	r14, r1
    1dfa:	f1 04       	cpc	r15, r1
    1dfc:	29 f4       	brne	.+10     	; 0x1e08 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1dfe:	90 91 9e 00 	lds	r25, 0x009E
    1e02:	9e 7f       	andi	r25, 0xFE	; 254
    1e04:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1e08:	91 e0       	ldi	r25, 0x01	; 1
    1e0a:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1e0e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	08 95       	ret

00001e20 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1e20:	1f 93       	push	r17
    1e22:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1e24:	10 92 f2 04 	sts	0x04F2, r1
    1e28:	89 e0       	ldi	r24, 0x09	; 9
    1e2a:	80 93 f3 04 	sts	0x04F3, r24
    1e2e:	10 93 f4 04 	sts	0x04F4, r17
    1e32:	10 92 f5 04 	sts	0x04F5, r1
    1e36:	10 92 f7 04 	sts	0x04F7, r1
    1e3a:	10 92 f6 04 	sts	0x04F6, r1
    1e3e:	10 92 f9 04 	sts	0x04F9, r1
    1e42:	10 92 f8 04 	sts	0x04F8, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1e46:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	e9 de       	rcall	.-558    	; 0x1c22 <USB_Host_SendControlRequest>
    1e50:	88 23       	and	r24, r24
    1e52:	49 f4       	brne	.+18     	; 0x1e66 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1e54:	10 93 f0 04 	sts	0x04F0, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1e58:	11 23       	and	r17, r17
    1e5a:	11 f0       	breq	.+4      	; 0x1e60 <USB_Host_SetDeviceConfiguration+0x40>
    1e5c:	9b e0       	ldi	r25, 0x0B	; 11
    1e5e:	01 c0       	rjmp	.+2      	; 0x1e62 <USB_Host_SetDeviceConfiguration+0x42>
    1e60:	9a e0       	ldi	r25, 0x0A	; 10
    1e62:	90 93 fa 04 	sts	0x04FA, r25
	}

	return ErrorCode;
}
    1e66:	1f 91       	pop	r17
    1e68:	08 95       	ret

00001e6a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1e6a:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1e6c:	10 91 a7 00 	lds	r17, 0x00A7
    1e70:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1e72:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1e76:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1e7a:	b8 da       	rcall	.-2704   	; 0x13ec <USB_Host_ProcessNextHostState>
    1e7c:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1e80:	1f 91       	pop	r17
    1e82:	08 95       	ret

00001e84 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1e84:	90 91 c8 00 	lds	r25, 0x00C8
    1e88:	95 ff       	sbrs	r25, 5
    1e8a:	fc cf       	rjmp	.-8      	; 0x1e84 <Serial_putchar>
				UDR1 = DataByte;
    1e8c:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	08 95       	ret

00001e96 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e96:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e9a:	87 ff       	sbrs	r24, 7
    1e9c:	08 c0       	rjmp	.+16     	; 0x1eae <Serial_getchar+0x18>
    1e9e:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1ea2:	87 ff       	sbrs	r24, 7
    1ea4:	07 c0       	rjmp	.+14     	; 0x1eb4 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1ea6:	20 91 ce 00 	lds	r18, 0x00CE
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	05 c0       	rjmp	.+10     	; 0x1eb8 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    1eae:	2e ef       	ldi	r18, 0xFE	; 254
    1eb0:	3f ef       	ldi	r19, 0xFF	; 255
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1eb4:	2f ef       	ldi	r18, 0xFF	; 255
    1eb6:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1eb8:	c9 01       	movw	r24, r18
    1eba:	08 95       	ret

00001ebc <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1ebc:	fc 01       	movw	r30, r24
	if (!(Stream))
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	51 f4       	brne	.+20     	; 0x1ed6 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1ec2:	eb ef       	ldi	r30, 0xFB	; 251
    1ec4:	f4 e0       	ldi	r31, 0x04	; 4
    1ec6:	f0 93 0a 05 	sts	0x050A, r31
    1eca:	e0 93 09 05 	sts	0x0509, r30
		stdout = Stream;
    1ece:	f0 93 0c 05 	sts	0x050C, r31
    1ed2:	e0 93 0b 05 	sts	0x050B, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1ed6:	8e e0       	ldi	r24, 0x0E	; 14
    1ed8:	df 01       	movw	r26, r30
    1eda:	1d 92       	st	X+, r1
    1edc:	8a 95       	dec	r24
    1ede:	e9 f7       	brne	.-6      	; 0x1eda <Serial_CreateStream+0x1e>
    1ee0:	83 e0       	ldi	r24, 0x03	; 3
    1ee2:	83 83       	std	Z+3, r24	; 0x03
    1ee4:	82 e4       	ldi	r24, 0x42	; 66
    1ee6:	9f e0       	ldi	r25, 0x0F	; 15
    1ee8:	91 87       	std	Z+9, r25	; 0x09
    1eea:	80 87       	std	Z+8, r24	; 0x08
    1eec:	8b e4       	ldi	r24, 0x4B	; 75
    1eee:	9f e0       	ldi	r25, 0x0F	; 15
    1ef0:	93 87       	std	Z+11, r25	; 0x0b
    1ef2:	82 87       	std	Z+10, r24	; 0x0a
}
    1ef4:	08 95       	ret

00001ef6 <printf_P>:
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	fe 01       	movw	r30, r28
    1f00:	35 96       	adiw	r30, 0x05	; 5
    1f02:	61 91       	ld	r22, Z+
    1f04:	71 91       	ld	r23, Z+
    1f06:	80 91 0b 05 	lds	r24, 0x050B
    1f0a:	90 91 0c 05 	lds	r25, 0x050C
    1f0e:	dc 01       	movw	r26, r24
    1f10:	13 96       	adiw	r26, 0x03	; 3
    1f12:	2c 91       	ld	r18, X
    1f14:	13 97       	sbiw	r26, 0x03	; 3
    1f16:	28 60       	ori	r18, 0x08	; 8
    1f18:	13 96       	adiw	r26, 0x03	; 3
    1f1a:	2c 93       	st	X, r18
    1f1c:	af 01       	movw	r20, r30
    1f1e:	42 d0       	rcall	.+132    	; 0x1fa4 <vfprintf>
    1f20:	e0 91 0b 05 	lds	r30, 0x050B
    1f24:	f0 91 0c 05 	lds	r31, 0x050C
    1f28:	23 81       	ldd	r18, Z+3	; 0x03
    1f2a:	27 7f       	andi	r18, 0xF7	; 247
    1f2c:	23 83       	std	Z+3, r18	; 0x03
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <puts_P>:
    1f34:	ef 92       	push	r14
    1f36:	ff 92       	push	r15
    1f38:	0f 93       	push	r16
    1f3a:	1f 93       	push	r17
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	8c 01       	movw	r16, r24
    1f42:	e0 91 0b 05 	lds	r30, 0x050B
    1f46:	f0 91 0c 05 	lds	r31, 0x050C
    1f4a:	83 81       	ldd	r24, Z+3	; 0x03
    1f4c:	81 ff       	sbrs	r24, 1
    1f4e:	20 c0       	rjmp	.+64     	; 0x1f90 <puts_P+0x5c>
    1f50:	c0 e0       	ldi	r28, 0x00	; 0
    1f52:	d0 e0       	ldi	r29, 0x00	; 0
    1f54:	0c c0       	rjmp	.+24     	; 0x1f6e <puts_P+0x3a>
    1f56:	db 01       	movw	r26, r22
    1f58:	18 96       	adiw	r26, 0x08	; 8
    1f5a:	ed 91       	ld	r30, X+
    1f5c:	fc 91       	ld	r31, X
    1f5e:	19 97       	sbiw	r26, 0x09	; 9
    1f60:	09 95       	icall
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	11 f0       	breq	.+4      	; 0x1f6a <puts_P+0x36>
    1f66:	cf ef       	ldi	r28, 0xFF	; 255
    1f68:	df ef       	ldi	r29, 0xFF	; 255
    1f6a:	0f 5f       	subi	r16, 0xFF	; 255
    1f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6e:	f8 01       	movw	r30, r16
    1f70:	84 91       	lpm	r24, Z+
    1f72:	60 91 0b 05 	lds	r22, 0x050B
    1f76:	70 91 0c 05 	lds	r23, 0x050C
    1f7a:	88 23       	and	r24, r24
    1f7c:	61 f7       	brne	.-40     	; 0x1f56 <puts_P+0x22>
    1f7e:	db 01       	movw	r26, r22
    1f80:	18 96       	adiw	r26, 0x08	; 8
    1f82:	ed 91       	ld	r30, X+
    1f84:	fc 91       	ld	r31, X
    1f86:	19 97       	sbiw	r26, 0x09	; 9
    1f88:	8a e0       	ldi	r24, 0x0A	; 10
    1f8a:	09 95       	icall
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	11 f0       	breq	.+4      	; 0x1f94 <puts_P+0x60>
    1f90:	cf ef       	ldi	r28, 0xFF	; 255
    1f92:	df ef       	ldi	r29, 0xFF	; 255
    1f94:	ce 01       	movw	r24, r28
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	1f 91       	pop	r17
    1f9c:	0f 91       	pop	r16
    1f9e:	ff 90       	pop	r15
    1fa0:	ef 90       	pop	r14
    1fa2:	08 95       	ret

00001fa4 <vfprintf>:
    1fa4:	2f 92       	push	r2
    1fa6:	3f 92       	push	r3
    1fa8:	4f 92       	push	r4
    1faa:	5f 92       	push	r5
    1fac:	6f 92       	push	r6
    1fae:	7f 92       	push	r7
    1fb0:	8f 92       	push	r8
    1fb2:	9f 92       	push	r9
    1fb4:	af 92       	push	r10
    1fb6:	bf 92       	push	r11
    1fb8:	cf 92       	push	r12
    1fba:	df 92       	push	r13
    1fbc:	ef 92       	push	r14
    1fbe:	ff 92       	push	r15
    1fc0:	0f 93       	push	r16
    1fc2:	1f 93       	push	r17
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	2c 97       	sbiw	r28, 0x0c	; 12
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	6c 01       	movw	r12, r24
    1fda:	1b 01       	movw	r2, r22
    1fdc:	8a 01       	movw	r16, r20
    1fde:	fc 01       	movw	r30, r24
    1fe0:	17 82       	std	Z+7, r1	; 0x07
    1fe2:	16 82       	std	Z+6, r1	; 0x06
    1fe4:	83 81       	ldd	r24, Z+3	; 0x03
    1fe6:	81 ff       	sbrs	r24, 1
    1fe8:	c4 c1       	rjmp	.+904    	; 0x2372 <__stack+0x273>
    1fea:	2e 01       	movw	r4, r28
    1fec:	08 94       	sec
    1fee:	41 1c       	adc	r4, r1
    1ff0:	51 1c       	adc	r5, r1
    1ff2:	f6 01       	movw	r30, r12
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	f1 01       	movw	r30, r2
    1ff8:	93 fd       	sbrc	r25, 3
    1ffa:	85 91       	lpm	r24, Z+
    1ffc:	93 ff       	sbrs	r25, 3
    1ffe:	81 91       	ld	r24, Z+
    2000:	1f 01       	movw	r2, r30
    2002:	88 23       	and	r24, r24
    2004:	09 f4       	brne	.+2      	; 0x2008 <vfprintf+0x64>
    2006:	b1 c1       	rjmp	.+866    	; 0x236a <__stack+0x26b>
    2008:	85 32       	cpi	r24, 0x25	; 37
    200a:	39 f4       	brne	.+14     	; 0x201a <vfprintf+0x76>
    200c:	93 fd       	sbrc	r25, 3
    200e:	85 91       	lpm	r24, Z+
    2010:	93 ff       	sbrs	r25, 3
    2012:	81 91       	ld	r24, Z+
    2014:	1f 01       	movw	r2, r30
    2016:	85 32       	cpi	r24, 0x25	; 37
    2018:	21 f4       	brne	.+8      	; 0x2022 <vfprintf+0x7e>
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	b6 01       	movw	r22, r12
    201e:	db d1       	rcall	.+950    	; 0x23d6 <fputc>
    2020:	e8 cf       	rjmp	.-48     	; 0x1ff2 <vfprintf+0x4e>
    2022:	ee 24       	eor	r14, r14
    2024:	ff 24       	eor	r15, r15
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	20 32       	cpi	r18, 0x20	; 32
    202a:	b0 f4       	brcc	.+44     	; 0x2058 <vfprintf+0xb4>
    202c:	8b 32       	cpi	r24, 0x2B	; 43
    202e:	69 f0       	breq	.+26     	; 0x204a <vfprintf+0xa6>
    2030:	8c 32       	cpi	r24, 0x2C	; 44
    2032:	28 f4       	brcc	.+10     	; 0x203e <vfprintf+0x9a>
    2034:	80 32       	cpi	r24, 0x20	; 32
    2036:	51 f0       	breq	.+20     	; 0x204c <vfprintf+0xa8>
    2038:	83 32       	cpi	r24, 0x23	; 35
    203a:	71 f4       	brne	.+28     	; 0x2058 <vfprintf+0xb4>
    203c:	0b c0       	rjmp	.+22     	; 0x2054 <vfprintf+0xb0>
    203e:	8d 32       	cpi	r24, 0x2D	; 45
    2040:	39 f0       	breq	.+14     	; 0x2050 <vfprintf+0xac>
    2042:	80 33       	cpi	r24, 0x30	; 48
    2044:	49 f4       	brne	.+18     	; 0x2058 <vfprintf+0xb4>
    2046:	21 60       	ori	r18, 0x01	; 1
    2048:	2c c0       	rjmp	.+88     	; 0x20a2 <vfprintf+0xfe>
    204a:	22 60       	ori	r18, 0x02	; 2
    204c:	24 60       	ori	r18, 0x04	; 4
    204e:	29 c0       	rjmp	.+82     	; 0x20a2 <vfprintf+0xfe>
    2050:	28 60       	ori	r18, 0x08	; 8
    2052:	27 c0       	rjmp	.+78     	; 0x20a2 <vfprintf+0xfe>
    2054:	20 61       	ori	r18, 0x10	; 16
    2056:	25 c0       	rjmp	.+74     	; 0x20a2 <vfprintf+0xfe>
    2058:	27 fd       	sbrc	r18, 7
    205a:	2c c0       	rjmp	.+88     	; 0x20b4 <vfprintf+0x110>
    205c:	38 2f       	mov	r19, r24
    205e:	30 53       	subi	r19, 0x30	; 48
    2060:	3a 30       	cpi	r19, 0x0A	; 10
    2062:	98 f4       	brcc	.+38     	; 0x208a <vfprintf+0xe6>
    2064:	26 ff       	sbrs	r18, 6
    2066:	08 c0       	rjmp	.+16     	; 0x2078 <vfprintf+0xd4>
    2068:	8e 2d       	mov	r24, r14
    206a:	88 0f       	add	r24, r24
    206c:	e8 2e       	mov	r14, r24
    206e:	ee 0c       	add	r14, r14
    2070:	ee 0c       	add	r14, r14
    2072:	e8 0e       	add	r14, r24
    2074:	e3 0e       	add	r14, r19
    2076:	15 c0       	rjmp	.+42     	; 0x20a2 <vfprintf+0xfe>
    2078:	8f 2d       	mov	r24, r15
    207a:	88 0f       	add	r24, r24
    207c:	f8 2e       	mov	r15, r24
    207e:	ff 0c       	add	r15, r15
    2080:	ff 0c       	add	r15, r15
    2082:	f8 0e       	add	r15, r24
    2084:	f3 0e       	add	r15, r19
    2086:	20 62       	ori	r18, 0x20	; 32
    2088:	0c c0       	rjmp	.+24     	; 0x20a2 <vfprintf+0xfe>
    208a:	8e 32       	cpi	r24, 0x2E	; 46
    208c:	21 f4       	brne	.+8      	; 0x2096 <vfprintf+0xf2>
    208e:	26 fd       	sbrc	r18, 6
    2090:	6c c1       	rjmp	.+728    	; 0x236a <__stack+0x26b>
    2092:	20 64       	ori	r18, 0x40	; 64
    2094:	06 c0       	rjmp	.+12     	; 0x20a2 <vfprintf+0xfe>
    2096:	8c 36       	cpi	r24, 0x6C	; 108
    2098:	11 f4       	brne	.+4      	; 0x209e <vfprintf+0xfa>
    209a:	20 68       	ori	r18, 0x80	; 128
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <vfprintf+0xfe>
    209e:	88 36       	cpi	r24, 0x68	; 104
    20a0:	49 f4       	brne	.+18     	; 0x20b4 <vfprintf+0x110>
    20a2:	f1 01       	movw	r30, r2
    20a4:	93 fd       	sbrc	r25, 3
    20a6:	85 91       	lpm	r24, Z+
    20a8:	93 ff       	sbrs	r25, 3
    20aa:	81 91       	ld	r24, Z+
    20ac:	1f 01       	movw	r2, r30
    20ae:	88 23       	and	r24, r24
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <vfprintf+0x110>
    20b2:	ba cf       	rjmp	.-140    	; 0x2028 <vfprintf+0x84>
    20b4:	98 2f       	mov	r25, r24
    20b6:	95 54       	subi	r25, 0x45	; 69
    20b8:	93 30       	cpi	r25, 0x03	; 3
    20ba:	18 f0       	brcs	.+6      	; 0x20c2 <vfprintf+0x11e>
    20bc:	90 52       	subi	r25, 0x20	; 32
    20be:	93 30       	cpi	r25, 0x03	; 3
    20c0:	28 f4       	brcc	.+10     	; 0x20cc <vfprintf+0x128>
    20c2:	0c 5f       	subi	r16, 0xFC	; 252
    20c4:	1f 4f       	sbci	r17, 0xFF	; 255
    20c6:	ff e3       	ldi	r31, 0x3F	; 63
    20c8:	f9 83       	std	Y+1, r31	; 0x01
    20ca:	0d c0       	rjmp	.+26     	; 0x20e6 <vfprintf+0x142>
    20cc:	83 36       	cpi	r24, 0x63	; 99
    20ce:	31 f0       	breq	.+12     	; 0x20dc <vfprintf+0x138>
    20d0:	83 37       	cpi	r24, 0x73	; 115
    20d2:	71 f0       	breq	.+28     	; 0x20f0 <vfprintf+0x14c>
    20d4:	83 35       	cpi	r24, 0x53	; 83
    20d6:	09 f0       	breq	.+2      	; 0x20da <vfprintf+0x136>
    20d8:	5c c0       	rjmp	.+184    	; 0x2192 <__stack+0x93>
    20da:	21 c0       	rjmp	.+66     	; 0x211e <__stack+0x1f>
    20dc:	f8 01       	movw	r30, r16
    20de:	80 81       	ld	r24, Z
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	0e 5f       	subi	r16, 0xFE	; 254
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	42 01       	movw	r8, r4
    20e8:	71 e0       	ldi	r23, 0x01	; 1
    20ea:	a7 2e       	mov	r10, r23
    20ec:	b1 2c       	mov	r11, r1
    20ee:	15 c0       	rjmp	.+42     	; 0x211a <__stack+0x1b>
    20f0:	62 e0       	ldi	r22, 0x02	; 2
    20f2:	66 2e       	mov	r6, r22
    20f4:	71 2c       	mov	r7, r1
    20f6:	60 0e       	add	r6, r16
    20f8:	71 1e       	adc	r7, r17
    20fa:	f8 01       	movw	r30, r16
    20fc:	80 80       	ld	r8, Z
    20fe:	91 80       	ldd	r9, Z+1	; 0x01
    2100:	26 ff       	sbrs	r18, 6
    2102:	03 c0       	rjmp	.+6      	; 0x210a <__stack+0xb>
    2104:	6e 2d       	mov	r22, r14
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	02 c0       	rjmp	.+4      	; 0x210e <__stack+0xf>
    210a:	6f ef       	ldi	r22, 0xFF	; 255
    210c:	7f ef       	ldi	r23, 0xFF	; 255
    210e:	c4 01       	movw	r24, r8
    2110:	2c 87       	std	Y+12, r18	; 0x0c
    2112:	56 d1       	rcall	.+684    	; 0x23c0 <strnlen>
    2114:	5c 01       	movw	r10, r24
    2116:	83 01       	movw	r16, r6
    2118:	2c 85       	ldd	r18, Y+12	; 0x0c
    211a:	2f 77       	andi	r18, 0x7F	; 127
    211c:	16 c0       	rjmp	.+44     	; 0x214a <__stack+0x4b>
    211e:	52 e0       	ldi	r21, 0x02	; 2
    2120:	65 2e       	mov	r6, r21
    2122:	71 2c       	mov	r7, r1
    2124:	60 0e       	add	r6, r16
    2126:	71 1e       	adc	r7, r17
    2128:	f8 01       	movw	r30, r16
    212a:	80 80       	ld	r8, Z
    212c:	91 80       	ldd	r9, Z+1	; 0x01
    212e:	26 ff       	sbrs	r18, 6
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <__stack+0x39>
    2132:	6e 2d       	mov	r22, r14
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	02 c0       	rjmp	.+4      	; 0x213c <__stack+0x3d>
    2138:	6f ef       	ldi	r22, 0xFF	; 255
    213a:	7f ef       	ldi	r23, 0xFF	; 255
    213c:	c4 01       	movw	r24, r8
    213e:	2c 87       	std	Y+12, r18	; 0x0c
    2140:	34 d1       	rcall	.+616    	; 0x23aa <strnlen_P>
    2142:	5c 01       	movw	r10, r24
    2144:	2c 85       	ldd	r18, Y+12	; 0x0c
    2146:	20 68       	ori	r18, 0x80	; 128
    2148:	83 01       	movw	r16, r6
    214a:	23 fd       	sbrc	r18, 3
    214c:	1e c0       	rjmp	.+60     	; 0x218a <__stack+0x8b>
    214e:	07 c0       	rjmp	.+14     	; 0x215e <__stack+0x5f>
    2150:	80 e2       	ldi	r24, 0x20	; 32
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	b6 01       	movw	r22, r12
    2156:	2c 87       	std	Y+12, r18	; 0x0c
    2158:	3e d1       	rcall	.+636    	; 0x23d6 <fputc>
    215a:	fa 94       	dec	r15
    215c:	2c 85       	ldd	r18, Y+12	; 0x0c
    215e:	8f 2d       	mov	r24, r15
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a8 16       	cp	r10, r24
    2164:	b9 06       	cpc	r11, r25
    2166:	a0 f3       	brcs	.-24     	; 0x2150 <__stack+0x51>
    2168:	10 c0       	rjmp	.+32     	; 0x218a <__stack+0x8b>
    216a:	f4 01       	movw	r30, r8
    216c:	27 fd       	sbrc	r18, 7
    216e:	85 91       	lpm	r24, Z+
    2170:	27 ff       	sbrs	r18, 7
    2172:	81 91       	ld	r24, Z+
    2174:	4f 01       	movw	r8, r30
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	b6 01       	movw	r22, r12
    217a:	2c 87       	std	Y+12, r18	; 0x0c
    217c:	2c d1       	rcall	.+600    	; 0x23d6 <fputc>
    217e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2180:	f1 10       	cpse	r15, r1
    2182:	fa 94       	dec	r15
    2184:	08 94       	sec
    2186:	a1 08       	sbc	r10, r1
    2188:	b1 08       	sbc	r11, r1
    218a:	a1 14       	cp	r10, r1
    218c:	b1 04       	cpc	r11, r1
    218e:	69 f7       	brne	.-38     	; 0x216a <__stack+0x6b>
    2190:	e9 c0       	rjmp	.+466    	; 0x2364 <__stack+0x265>
    2192:	84 36       	cpi	r24, 0x64	; 100
    2194:	11 f0       	breq	.+4      	; 0x219a <__stack+0x9b>
    2196:	89 36       	cpi	r24, 0x69	; 105
    2198:	41 f5       	brne	.+80     	; 0x21ea <__stack+0xeb>
    219a:	27 ff       	sbrs	r18, 7
    219c:	08 c0       	rjmp	.+16     	; 0x21ae <__stack+0xaf>
    219e:	f8 01       	movw	r30, r16
    21a0:	60 81       	ld	r22, Z
    21a2:	71 81       	ldd	r23, Z+1	; 0x01
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	93 81       	ldd	r25, Z+3	; 0x03
    21a8:	0c 5f       	subi	r16, 0xFC	; 252
    21aa:	1f 4f       	sbci	r17, 0xFF	; 255
    21ac:	09 c0       	rjmp	.+18     	; 0x21c0 <__stack+0xc1>
    21ae:	f8 01       	movw	r30, r16
    21b0:	60 81       	ld	r22, Z
    21b2:	71 81       	ldd	r23, Z+1	; 0x01
    21b4:	88 27       	eor	r24, r24
    21b6:	77 fd       	sbrc	r23, 7
    21b8:	80 95       	com	r24
    21ba:	98 2f       	mov	r25, r24
    21bc:	0e 5f       	subi	r16, 0xFE	; 254
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	4f e6       	ldi	r20, 0x6F	; 111
    21c2:	b4 2e       	mov	r11, r20
    21c4:	b2 22       	and	r11, r18
    21c6:	97 ff       	sbrs	r25, 7
    21c8:	09 c0       	rjmp	.+18     	; 0x21dc <__stack+0xdd>
    21ca:	90 95       	com	r25
    21cc:	80 95       	com	r24
    21ce:	70 95       	com	r23
    21d0:	61 95       	neg	r22
    21d2:	7f 4f       	sbci	r23, 0xFF	; 255
    21d4:	8f 4f       	sbci	r24, 0xFF	; 255
    21d6:	9f 4f       	sbci	r25, 0xFF	; 255
    21d8:	f0 e8       	ldi	r31, 0x80	; 128
    21da:	bf 2a       	or	r11, r31
    21dc:	a2 01       	movw	r20, r4
    21de:	2a e0       	ldi	r18, 0x0A	; 10
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	25 d1       	rcall	.+586    	; 0x242e <__ultoa_invert>
    21e4:	78 2e       	mov	r7, r24
    21e6:	74 18       	sub	r7, r4
    21e8:	44 c0       	rjmp	.+136    	; 0x2272 <__stack+0x173>
    21ea:	85 37       	cpi	r24, 0x75	; 117
    21ec:	31 f4       	brne	.+12     	; 0x21fa <__stack+0xfb>
    21ee:	3f ee       	ldi	r19, 0xEF	; 239
    21f0:	b3 2e       	mov	r11, r19
    21f2:	b2 22       	and	r11, r18
    21f4:	2a e0       	ldi	r18, 0x0A	; 10
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	25 c0       	rjmp	.+74     	; 0x2244 <__stack+0x145>
    21fa:	99 ef       	ldi	r25, 0xF9	; 249
    21fc:	b9 2e       	mov	r11, r25
    21fe:	b2 22       	and	r11, r18
    2200:	8f 36       	cpi	r24, 0x6F	; 111
    2202:	c1 f0       	breq	.+48     	; 0x2234 <__stack+0x135>
    2204:	80 37       	cpi	r24, 0x70	; 112
    2206:	20 f4       	brcc	.+8      	; 0x2210 <__stack+0x111>
    2208:	88 35       	cpi	r24, 0x58	; 88
    220a:	09 f0       	breq	.+2      	; 0x220e <__stack+0x10f>
    220c:	ae c0       	rjmp	.+348    	; 0x236a <__stack+0x26b>
    220e:	0d c0       	rjmp	.+26     	; 0x222a <__stack+0x12b>
    2210:	80 37       	cpi	r24, 0x70	; 112
    2212:	21 f0       	breq	.+8      	; 0x221c <__stack+0x11d>
    2214:	88 37       	cpi	r24, 0x78	; 120
    2216:	09 f0       	breq	.+2      	; 0x221a <__stack+0x11b>
    2218:	a8 c0       	rjmp	.+336    	; 0x236a <__stack+0x26b>
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <__stack+0x121>
    221c:	20 e1       	ldi	r18, 0x10	; 16
    221e:	b2 2a       	or	r11, r18
    2220:	b4 fe       	sbrs	r11, 4
    2222:	0b c0       	rjmp	.+22     	; 0x223a <__stack+0x13b>
    2224:	84 e0       	ldi	r24, 0x04	; 4
    2226:	b8 2a       	or	r11, r24
    2228:	08 c0       	rjmp	.+16     	; 0x223a <__stack+0x13b>
    222a:	b4 fe       	sbrs	r11, 4
    222c:	09 c0       	rjmp	.+18     	; 0x2240 <__stack+0x141>
    222e:	e6 e0       	ldi	r30, 0x06	; 6
    2230:	be 2a       	or	r11, r30
    2232:	06 c0       	rjmp	.+12     	; 0x2240 <__stack+0x141>
    2234:	28 e0       	ldi	r18, 0x08	; 8
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	05 c0       	rjmp	.+10     	; 0x2244 <__stack+0x145>
    223a:	20 e1       	ldi	r18, 0x10	; 16
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <__stack+0x145>
    2240:	20 e1       	ldi	r18, 0x10	; 16
    2242:	32 e0       	ldi	r19, 0x02	; 2
    2244:	b7 fe       	sbrs	r11, 7
    2246:	08 c0       	rjmp	.+16     	; 0x2258 <__stack+0x159>
    2248:	f8 01       	movw	r30, r16
    224a:	60 81       	ld	r22, Z
    224c:	71 81       	ldd	r23, Z+1	; 0x01
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	0c 5f       	subi	r16, 0xFC	; 252
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
    2256:	07 c0       	rjmp	.+14     	; 0x2266 <__stack+0x167>
    2258:	f8 01       	movw	r30, r16
    225a:	60 81       	ld	r22, Z
    225c:	71 81       	ldd	r23, Z+1	; 0x01
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	0e 5f       	subi	r16, 0xFE	; 254
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	a2 01       	movw	r20, r4
    2268:	e2 d0       	rcall	.+452    	; 0x242e <__ultoa_invert>
    226a:	78 2e       	mov	r7, r24
    226c:	74 18       	sub	r7, r4
    226e:	ff e7       	ldi	r31, 0x7F	; 127
    2270:	bf 22       	and	r11, r31
    2272:	b6 fe       	sbrs	r11, 6
    2274:	0b c0       	rjmp	.+22     	; 0x228c <__stack+0x18d>
    2276:	2e ef       	ldi	r18, 0xFE	; 254
    2278:	b2 22       	and	r11, r18
    227a:	7e 14       	cp	r7, r14
    227c:	38 f4       	brcc	.+14     	; 0x228c <__stack+0x18d>
    227e:	b4 fe       	sbrs	r11, 4
    2280:	07 c0       	rjmp	.+14     	; 0x2290 <__stack+0x191>
    2282:	b2 fc       	sbrc	r11, 2
    2284:	05 c0       	rjmp	.+10     	; 0x2290 <__stack+0x191>
    2286:	8f ee       	ldi	r24, 0xEF	; 239
    2288:	b8 22       	and	r11, r24
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <__stack+0x191>
    228c:	a7 2c       	mov	r10, r7
    228e:	01 c0       	rjmp	.+2      	; 0x2292 <__stack+0x193>
    2290:	ae 2c       	mov	r10, r14
    2292:	8b 2d       	mov	r24, r11
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	b4 fe       	sbrs	r11, 4
    2298:	0d c0       	rjmp	.+26     	; 0x22b4 <__stack+0x1b5>
    229a:	fe 01       	movw	r30, r28
    229c:	e7 0d       	add	r30, r7
    229e:	f1 1d       	adc	r31, r1
    22a0:	20 81       	ld	r18, Z
    22a2:	20 33       	cpi	r18, 0x30	; 48
    22a4:	19 f4       	brne	.+6      	; 0x22ac <__stack+0x1ad>
    22a6:	e9 ee       	ldi	r30, 0xE9	; 233
    22a8:	be 22       	and	r11, r30
    22aa:	09 c0       	rjmp	.+18     	; 0x22be <__stack+0x1bf>
    22ac:	a3 94       	inc	r10
    22ae:	b2 fe       	sbrs	r11, 2
    22b0:	06 c0       	rjmp	.+12     	; 0x22be <__stack+0x1bf>
    22b2:	04 c0       	rjmp	.+8      	; 0x22bc <__stack+0x1bd>
    22b4:	86 78       	andi	r24, 0x86	; 134
    22b6:	90 70       	andi	r25, 0x00	; 0
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	09 f0       	breq	.+2      	; 0x22be <__stack+0x1bf>
    22bc:	a3 94       	inc	r10
    22be:	8b 2c       	mov	r8, r11
    22c0:	99 24       	eor	r9, r9
    22c2:	b3 fc       	sbrc	r11, 3
    22c4:	13 c0       	rjmp	.+38     	; 0x22ec <__stack+0x1ed>
    22c6:	b0 fe       	sbrs	r11, 0
    22c8:	0e c0       	rjmp	.+28     	; 0x22e6 <__stack+0x1e7>
    22ca:	af 14       	cp	r10, r15
    22cc:	28 f4       	brcc	.+10     	; 0x22d8 <__stack+0x1d9>
    22ce:	e7 2c       	mov	r14, r7
    22d0:	ef 0c       	add	r14, r15
    22d2:	ea 18       	sub	r14, r10
    22d4:	af 2c       	mov	r10, r15
    22d6:	07 c0       	rjmp	.+14     	; 0x22e6 <__stack+0x1e7>
    22d8:	e7 2c       	mov	r14, r7
    22da:	05 c0       	rjmp	.+10     	; 0x22e6 <__stack+0x1e7>
    22dc:	80 e2       	ldi	r24, 0x20	; 32
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	b6 01       	movw	r22, r12
    22e2:	79 d0       	rcall	.+242    	; 0x23d6 <fputc>
    22e4:	a3 94       	inc	r10
    22e6:	af 14       	cp	r10, r15
    22e8:	c8 f3       	brcs	.-14     	; 0x22dc <__stack+0x1dd>
    22ea:	04 c0       	rjmp	.+8      	; 0x22f4 <__stack+0x1f5>
    22ec:	af 14       	cp	r10, r15
    22ee:	10 f4       	brcc	.+4      	; 0x22f4 <__stack+0x1f5>
    22f0:	fa 18       	sub	r15, r10
    22f2:	01 c0       	rjmp	.+2      	; 0x22f6 <__stack+0x1f7>
    22f4:	ff 24       	eor	r15, r15
    22f6:	84 fe       	sbrs	r8, 4
    22f8:	0e c0       	rjmp	.+28     	; 0x2316 <__stack+0x217>
    22fa:	80 e3       	ldi	r24, 0x30	; 48
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	b6 01       	movw	r22, r12
    2300:	6a d0       	rcall	.+212    	; 0x23d6 <fputc>
    2302:	82 fe       	sbrs	r8, 2
    2304:	1d c0       	rjmp	.+58     	; 0x2340 <__stack+0x241>
    2306:	81 fe       	sbrs	r8, 1
    2308:	03 c0       	rjmp	.+6      	; 0x2310 <__stack+0x211>
    230a:	88 e5       	ldi	r24, 0x58	; 88
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	10 c0       	rjmp	.+32     	; 0x2330 <__stack+0x231>
    2310:	88 e7       	ldi	r24, 0x78	; 120
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	0d c0       	rjmp	.+26     	; 0x2330 <__stack+0x231>
    2316:	c4 01       	movw	r24, r8
    2318:	86 78       	andi	r24, 0x86	; 134
    231a:	90 70       	andi	r25, 0x00	; 0
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	81 f0       	breq	.+32     	; 0x2340 <__stack+0x241>
    2320:	81 fc       	sbrc	r8, 1
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <__stack+0x229>
    2324:	80 e2       	ldi	r24, 0x20	; 32
    2326:	01 c0       	rjmp	.+2      	; 0x232a <__stack+0x22b>
    2328:	8b e2       	ldi	r24, 0x2B	; 43
    232a:	b7 fc       	sbrc	r11, 7
    232c:	8d e2       	ldi	r24, 0x2D	; 45
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	b6 01       	movw	r22, r12
    2332:	51 d0       	rcall	.+162    	; 0x23d6 <fputc>
    2334:	05 c0       	rjmp	.+10     	; 0x2340 <__stack+0x241>
    2336:	80 e3       	ldi	r24, 0x30	; 48
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	b6 01       	movw	r22, r12
    233c:	4c d0       	rcall	.+152    	; 0x23d6 <fputc>
    233e:	ea 94       	dec	r14
    2340:	7e 14       	cp	r7, r14
    2342:	c8 f3       	brcs	.-14     	; 0x2336 <__stack+0x237>
    2344:	7a 94       	dec	r7
    2346:	f2 01       	movw	r30, r4
    2348:	e7 0d       	add	r30, r7
    234a:	f1 1d       	adc	r31, r1
    234c:	80 81       	ld	r24, Z
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	b6 01       	movw	r22, r12
    2352:	41 d0       	rcall	.+130    	; 0x23d6 <fputc>
    2354:	77 20       	and	r7, r7
    2356:	b1 f7       	brne	.-20     	; 0x2344 <__stack+0x245>
    2358:	05 c0       	rjmp	.+10     	; 0x2364 <__stack+0x265>
    235a:	80 e2       	ldi	r24, 0x20	; 32
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	b6 01       	movw	r22, r12
    2360:	3a d0       	rcall	.+116    	; 0x23d6 <fputc>
    2362:	fa 94       	dec	r15
    2364:	ff 20       	and	r15, r15
    2366:	c9 f7       	brne	.-14     	; 0x235a <__stack+0x25b>
    2368:	44 ce       	rjmp	.-888    	; 0x1ff2 <vfprintf+0x4e>
    236a:	f6 01       	movw	r30, r12
    236c:	26 81       	ldd	r18, Z+6	; 0x06
    236e:	37 81       	ldd	r19, Z+7	; 0x07
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <__stack+0x277>
    2372:	2f ef       	ldi	r18, 0xFF	; 255
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	c9 01       	movw	r24, r18
    2378:	2c 96       	adiw	r28, 0x0c	; 12
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	1f 91       	pop	r17
    238a:	0f 91       	pop	r16
    238c:	ff 90       	pop	r15
    238e:	ef 90       	pop	r14
    2390:	df 90       	pop	r13
    2392:	cf 90       	pop	r12
    2394:	bf 90       	pop	r11
    2396:	af 90       	pop	r10
    2398:	9f 90       	pop	r9
    239a:	8f 90       	pop	r8
    239c:	7f 90       	pop	r7
    239e:	6f 90       	pop	r6
    23a0:	5f 90       	pop	r5
    23a2:	4f 90       	pop	r4
    23a4:	3f 90       	pop	r3
    23a6:	2f 90       	pop	r2
    23a8:	08 95       	ret

000023aa <strnlen_P>:
    23aa:	fc 01       	movw	r30, r24
    23ac:	05 90       	lpm	r0, Z+
    23ae:	61 50       	subi	r22, 0x01	; 1
    23b0:	70 40       	sbci	r23, 0x00	; 0
    23b2:	01 10       	cpse	r0, r1
    23b4:	d8 f7       	brcc	.-10     	; 0x23ac <strnlen_P+0x2>
    23b6:	80 95       	com	r24
    23b8:	90 95       	com	r25
    23ba:	8e 0f       	add	r24, r30
    23bc:	9f 1f       	adc	r25, r31
    23be:	08 95       	ret

000023c0 <strnlen>:
    23c0:	fc 01       	movw	r30, r24
    23c2:	61 50       	subi	r22, 0x01	; 1
    23c4:	70 40       	sbci	r23, 0x00	; 0
    23c6:	01 90       	ld	r0, Z+
    23c8:	01 10       	cpse	r0, r1
    23ca:	d8 f7       	brcc	.-10     	; 0x23c2 <strnlen+0x2>
    23cc:	80 95       	com	r24
    23ce:	90 95       	com	r25
    23d0:	8e 0f       	add	r24, r30
    23d2:	9f 1f       	adc	r25, r31
    23d4:	08 95       	ret

000023d6 <fputc>:
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	8c 01       	movw	r16, r24
    23e0:	eb 01       	movw	r28, r22
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	81 ff       	sbrs	r24, 1
    23e6:	1b c0       	rjmp	.+54     	; 0x241e <fputc+0x48>
    23e8:	82 ff       	sbrs	r24, 2
    23ea:	0d c0       	rjmp	.+26     	; 0x2406 <fputc+0x30>
    23ec:	2e 81       	ldd	r18, Y+6	; 0x06
    23ee:	3f 81       	ldd	r19, Y+7	; 0x07
    23f0:	8c 81       	ldd	r24, Y+4	; 0x04
    23f2:	9d 81       	ldd	r25, Y+5	; 0x05
    23f4:	28 17       	cp	r18, r24
    23f6:	39 07       	cpc	r19, r25
    23f8:	64 f4       	brge	.+24     	; 0x2412 <fputc+0x3c>
    23fa:	e8 81       	ld	r30, Y
    23fc:	f9 81       	ldd	r31, Y+1	; 0x01
    23fe:	01 93       	st	Z+, r16
    2400:	f9 83       	std	Y+1, r31	; 0x01
    2402:	e8 83       	st	Y, r30
    2404:	06 c0       	rjmp	.+12     	; 0x2412 <fputc+0x3c>
    2406:	e8 85       	ldd	r30, Y+8	; 0x08
    2408:	f9 85       	ldd	r31, Y+9	; 0x09
    240a:	80 2f       	mov	r24, r16
    240c:	09 95       	icall
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	31 f4       	brne	.+12     	; 0x241e <fputc+0x48>
    2412:	8e 81       	ldd	r24, Y+6	; 0x06
    2414:	9f 81       	ldd	r25, Y+7	; 0x07
    2416:	01 96       	adiw	r24, 0x01	; 1
    2418:	9f 83       	std	Y+7, r25	; 0x07
    241a:	8e 83       	std	Y+6, r24	; 0x06
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <fputc+0x4c>
    241e:	0f ef       	ldi	r16, 0xFF	; 255
    2420:	1f ef       	ldi	r17, 0xFF	; 255
    2422:	c8 01       	movw	r24, r16
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	08 95       	ret

0000242e <__ultoa_invert>:
    242e:	fa 01       	movw	r30, r20
    2430:	aa 27       	eor	r26, r26
    2432:	28 30       	cpi	r18, 0x08	; 8
    2434:	51 f1       	breq	.+84     	; 0x248a <__ultoa_invert+0x5c>
    2436:	20 31       	cpi	r18, 0x10	; 16
    2438:	81 f1       	breq	.+96     	; 0x249a <__ultoa_invert+0x6c>
    243a:	e8 94       	clt
    243c:	6f 93       	push	r22
    243e:	6e 7f       	andi	r22, 0xFE	; 254
    2440:	6e 5f       	subi	r22, 0xFE	; 254
    2442:	7f 4f       	sbci	r23, 0xFF	; 255
    2444:	8f 4f       	sbci	r24, 0xFF	; 255
    2446:	9f 4f       	sbci	r25, 0xFF	; 255
    2448:	af 4f       	sbci	r26, 0xFF	; 255
    244a:	b1 e0       	ldi	r27, 0x01	; 1
    244c:	3e d0       	rcall	.+124    	; 0x24ca <__ultoa_invert+0x9c>
    244e:	b4 e0       	ldi	r27, 0x04	; 4
    2450:	3c d0       	rcall	.+120    	; 0x24ca <__ultoa_invert+0x9c>
    2452:	67 0f       	add	r22, r23
    2454:	78 1f       	adc	r23, r24
    2456:	89 1f       	adc	r24, r25
    2458:	9a 1f       	adc	r25, r26
    245a:	a1 1d       	adc	r26, r1
    245c:	68 0f       	add	r22, r24
    245e:	79 1f       	adc	r23, r25
    2460:	8a 1f       	adc	r24, r26
    2462:	91 1d       	adc	r25, r1
    2464:	a1 1d       	adc	r26, r1
    2466:	6a 0f       	add	r22, r26
    2468:	71 1d       	adc	r23, r1
    246a:	81 1d       	adc	r24, r1
    246c:	91 1d       	adc	r25, r1
    246e:	a1 1d       	adc	r26, r1
    2470:	20 d0       	rcall	.+64     	; 0x24b2 <__ultoa_invert+0x84>
    2472:	09 f4       	brne	.+2      	; 0x2476 <__ultoa_invert+0x48>
    2474:	68 94       	set
    2476:	3f 91       	pop	r19
    2478:	2a e0       	ldi	r18, 0x0A	; 10
    247a:	26 9f       	mul	r18, r22
    247c:	11 24       	eor	r1, r1
    247e:	30 19       	sub	r19, r0
    2480:	30 5d       	subi	r19, 0xD0	; 208
    2482:	31 93       	st	Z+, r19
    2484:	de f6       	brtc	.-74     	; 0x243c <__ultoa_invert+0xe>
    2486:	cf 01       	movw	r24, r30
    2488:	08 95       	ret
    248a:	46 2f       	mov	r20, r22
    248c:	47 70       	andi	r20, 0x07	; 7
    248e:	40 5d       	subi	r20, 0xD0	; 208
    2490:	41 93       	st	Z+, r20
    2492:	b3 e0       	ldi	r27, 0x03	; 3
    2494:	0f d0       	rcall	.+30     	; 0x24b4 <__ultoa_invert+0x86>
    2496:	c9 f7       	brne	.-14     	; 0x248a <__ultoa_invert+0x5c>
    2498:	f6 cf       	rjmp	.-20     	; 0x2486 <__ultoa_invert+0x58>
    249a:	46 2f       	mov	r20, r22
    249c:	4f 70       	andi	r20, 0x0F	; 15
    249e:	40 5d       	subi	r20, 0xD0	; 208
    24a0:	4a 33       	cpi	r20, 0x3A	; 58
    24a2:	18 f0       	brcs	.+6      	; 0x24aa <__ultoa_invert+0x7c>
    24a4:	49 5d       	subi	r20, 0xD9	; 217
    24a6:	31 fd       	sbrc	r19, 1
    24a8:	40 52       	subi	r20, 0x20	; 32
    24aa:	41 93       	st	Z+, r20
    24ac:	02 d0       	rcall	.+4      	; 0x24b2 <__ultoa_invert+0x84>
    24ae:	a9 f7       	brne	.-22     	; 0x249a <__ultoa_invert+0x6c>
    24b0:	ea cf       	rjmp	.-44     	; 0x2486 <__ultoa_invert+0x58>
    24b2:	b4 e0       	ldi	r27, 0x04	; 4
    24b4:	a6 95       	lsr	r26
    24b6:	97 95       	ror	r25
    24b8:	87 95       	ror	r24
    24ba:	77 95       	ror	r23
    24bc:	67 95       	ror	r22
    24be:	ba 95       	dec	r27
    24c0:	c9 f7       	brne	.-14     	; 0x24b4 <__ultoa_invert+0x86>
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	61 05       	cpc	r22, r1
    24c6:	71 05       	cpc	r23, r1
    24c8:	08 95       	ret
    24ca:	9b 01       	movw	r18, r22
    24cc:	ac 01       	movw	r20, r24
    24ce:	0a 2e       	mov	r0, r26
    24d0:	06 94       	lsr	r0
    24d2:	57 95       	ror	r21
    24d4:	47 95       	ror	r20
    24d6:	37 95       	ror	r19
    24d8:	27 95       	ror	r18
    24da:	ba 95       	dec	r27
    24dc:	c9 f7       	brne	.-14     	; 0x24d0 <__ultoa_invert+0xa2>
    24de:	62 0f       	add	r22, r18
    24e0:	73 1f       	adc	r23, r19
    24e2:	84 1f       	adc	r24, r20
    24e4:	95 1f       	adc	r25, r21
    24e6:	a0 1d       	adc	r26, r0
    24e8:	08 95       	ret

000024ea <_exit>:
    24ea:	f8 94       	cli

000024ec <__stop_program>:
    24ec:	ff cf       	rjmp	.-2      	; 0x24ec <__stop_program>
