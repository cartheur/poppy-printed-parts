
KeyboardHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000241e  000024b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000241e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fd  00800112  00800112  000024c4  2**0
                  ALLOC
  3 .stab         000021a8  00000000  00000000  000024c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7e  00000000  00000000  0000466c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000380  00000000  00000000  000053ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008d8  00000000  00000000  0000576a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000585c  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001853  00000000  00000000  0000b89e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000048ba  00000000  00000000  0000d0f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000540  00000000  00000000  000119ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000269f  00000000  00000000  00011eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002e60  00000000  00000000  0001458b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000cb2  00000000  00000000  000173eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000470  00000000  00000000  0001809d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	69 c1       	rjmp	.+722    	; 0x2d4 <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__vector_10>
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6f c1       	rjmp	.+734    	; 0x310 <__bad_interrupt>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	55 c1       	rjmp	.+682    	; 0x310 <__bad_interrupt>
      66:	00 00       	nop
      68:	53 c1       	rjmp	.+678    	; 0x310 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3f c1       	rjmp	.+638    	; 0x310 <__bad_interrupt>
      92:	00 00       	nop
      94:	3d c1       	rjmp	.+634    	; 0x310 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4314>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4307>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4302>:
     11d:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4300>:
     134:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     144:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000014e <__c.4298>:
     14e:	4e 6f 74 20 61 20 76 61 6c 69 64 20 4b 65 79 62     Not a valid Keyb
     15e:	6f 61 72 64 2e 1b 5b 33 37 6d 00                    oard..[37m.

00000169 <__c.4296>:
     169:	1b 5b 33 31 6d 52 65 70 6f 72 74 20 50 61 72 73     .[31mReport Pars
     179:	65 20 45 72 72 6f 72 2e 0d 0a 00                    e Error....

00000184 <__c.4294>:
     184:	50 72 6f 63 65 73 73 69 6e 67 20 48 49 44 20 52     Processing HID R
     194:	65 70 6f 72 74 20 28 53 69 7a 65 20 25 64 20 42     eport (Size %d B
     1a4:	79 74 65 73 29 2e 0d 0a 00                          ytes)....

000001ad <__c.4292>:
     1ad:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1bd:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001c7 <__c.4290>:
     1c7:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1d7:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1e7:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000001f1 <__c.4288>:
     1f1:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     201:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000020b <__c.4286>:
     20b:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     21b:	69 63 65 2e 0d 0a 00                                ice....

00000222 <__c.4284>:
     222:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     232:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     242:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000024c <__c.4281>:
     24c:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     25c:	61 74 61 2e 0d 0a 00                                ata....

00000263 <__c.4276>:
     263:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     273:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     283:	00                                                  .

00000284 <__c.4271>:
     284:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     294:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000002a1 <__c.4262>:
     2a1:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 49     .[36mKeyboard HI
     2b1:	44 20 50 61 72 73 65 72 20 48 6f 73 74 20 44 65     D Parser Host De
     2c1:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     2d1:	37 6d 00                                            7m.

000002d4 <__ctors_end>:
     2d4:	11 24       	eor	r1, r1
     2d6:	1f be       	out	0x3f, r1	; 63
     2d8:	cf ef       	ldi	r28, 0xFF	; 255
     2da:	d0 e2       	ldi	r29, 0x20	; 32
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	cd bf       	out	0x3d, r28	; 61

000002e0 <__do_copy_data>:
     2e0:	11 e0       	ldi	r17, 0x01	; 1
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b1 e0       	ldi	r27, 0x01	; 1
     2e6:	ee e1       	ldi	r30, 0x1E	; 30
     2e8:	f4 e2       	ldi	r31, 0x24	; 36
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	0b bf       	out	0x3b, r16	; 59
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x14>
     2f0:	07 90       	elpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	a2 31       	cpi	r26, 0x12	; 18
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0x10>

000002fa <__do_clear_bss>:
     2fa:	15 e0       	ldi	r17, 0x05	; 5
     2fc:	a2 e1       	ldi	r26, 0x12	; 18
     2fe:	b1 e0       	ldi	r27, 0x01	; 1
     300:	01 c0       	rjmp	.+2      	; 0x304 <.do_clear_bss_start>

00000302 <.do_clear_bss_loop>:
     302:	1d 92       	st	X+, r1

00000304 <.do_clear_bss_start>:
     304:	af 30       	cpi	r26, 0x0F	; 15
     306:	b1 07       	cpc	r27, r17
     308:	e1 f7       	brne	.-8      	; 0x302 <.do_clear_bss_loop>
     30a:	d6 d1       	rcall	.+940    	; 0x6b8 <main>
     30c:	0c 94 0d 12 	jmp	0x241a	; 0x241a <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     312:	9b b1       	in	r25, 0x0b	; 11
     314:	9f 70       	andi	r25, 0x0F	; 15
     316:	98 2b       	or	r25, r24
     318:	9b b9       	out	0x0b, r25	; 11
			}
     31a:	08 95       	ret

0000031c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     31c:	84 b7       	in	r24, 0x34	; 52
     31e:	87 7f       	andi	r24, 0xF7	; 247
     320:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     322:	28 e1       	ldi	r18, 0x18	; 24
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	20 93 60 00 	sts	0x0060, r18
     32c:	10 92 60 00 	sts	0x0060, r1
     330:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	80 e8       	ldi	r24, 0x80	; 128
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	80 93 61 00 	sts	0x0061, r24
     33e:	90 93 61 00 	sts	0x0061, r25
     342:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     344:	83 e3       	ldi	r24, 0x33	; 51
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	90 93 cd 00 	sts	0x00CD, r25
     34c:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     350:	86 e0       	ldi	r24, 0x06	; 6
     352:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     356:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     35a:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     35e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     360:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     362:	8a b1       	in	r24, 0x0a	; 10
     364:	80 6f       	ori	r24, 0xF0	; 240
     366:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     368:	8b b1       	in	r24, 0x0b	; 11
     36a:	8f 70       	andi	r24, 0x0F	; 15
     36c:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     36e:	0e 94 31 0c 	call	0x1862	; 0x1862 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <Serial_CreateStream>

0000037a <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     37a:	84 e8       	ldi	r24, 0x84	; 132
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     382:	80 ea       	ldi	r24, 0xA0	; 160
}
     384:	c6 cf       	rjmp	.-116    	; 0x312 <LEDs_SetAllLEDs>

00000386 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     386:	83 e6       	ldi	r24, 0x63	; 99
     388:	92 e0       	ldi	r25, 0x02	; 2
     38a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     38e:	80 e1       	ldi	r24, 0x10	; 16
}
     390:	c0 cf       	rjmp	.-128    	; 0x312 <LEDs_SetAllLEDs>

00000392 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     392:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     394:	8c e4       	ldi	r24, 0x4C	; 76
     396:	92 e0       	ldi	r25, 0x02	; 2
     398:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     39c:	bc d1       	rcall	.+888    	; 0x716 <ProcessConfigurationDescriptor>
     39e:	18 2f       	mov	r17, r24
     3a0:	88 23       	and	r24, r24
     3a2:	01 f1       	breq	.+64     	; 0x3e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
	{
		if (ErrorCode == ControlError)
     3a4:	81 30       	cpi	r24, 0x01	; 1
     3a6:	19 f4       	brne	.+6      	; 0x3ae <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     3a8:	82 e2       	ldi	r24, 0x22	; 34
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     3ae:	8b e0       	ldi	r24, 0x0B	; 11
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     3ba:	ed b7       	in	r30, 0x3d	; 61
     3bc:	fe b7       	in	r31, 0x3e	; 62
     3be:	31 96       	adiw	r30, 0x01	; 1
     3c0:	21 ef       	ldi	r18, 0xF1	; 241
     3c2:	31 e0       	ldi	r19, 0x01	; 1
     3c4:	ad b7       	in	r26, 0x3d	; 61
     3c6:	be b7       	in	r27, 0x3e	; 62
     3c8:	12 96       	adiw	r26, 0x02	; 2
     3ca:	3c 93       	st	X, r19
     3cc:	2e 93       	st	-X, r18
     3ce:	11 97       	sbiw	r26, 0x01	; 1
     3d0:	12 83       	std	Z+2, r17	; 0x02
     3d2:	13 82       	std	Z+3, r1	; 0x03
     3d4:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	80 e9       	ldi	r24, 0x90	; 144
     3e2:	57 c0       	rjmp	.+174    	; 0x492 <EVENT_USB_Host_DeviceEnumerationComplete+0x100>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <USB_Host_SetDeviceConfiguration>
     3ea:	18 2f       	mov	r17, r24
     3ec:	88 23       	and	r24, r24
     3ee:	61 f0       	breq	.+24     	; 0x408 <EVENT_USB_Host_DeviceEnumerationComplete+0x76>

	{
		puts_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"));
     3f0:	87 ec       	ldi	r24, 0xC7	; 199
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <puts_P>
		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
     3fc:	ed b7       	in	r30, 0x3d	; 61
     3fe:	fe b7       	in	r31, 0x3e	; 62
     400:	31 96       	adiw	r30, 0x01	; 1
     402:	2d ea       	ldi	r18, 0xAD	; 173
     404:	31 e0       	ldi	r19, 0x01	; 1
     406:	de cf       	rjmp	.-68     	; 0x3c4 <EVENT_USB_Host_DeviceEnumerationComplete+0x32>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Processing HID Report (Size %d Bytes).\r\n"), HIDReportSize);
     408:	00 d0       	rcall	.+0      	; 0x40a <EVENT_USB_Host_DeviceEnumerationComplete+0x78>
     40a:	00 d0       	rcall	.+0      	; 0x40c <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
     40c:	84 e8       	ldi	r24, 0x84	; 132
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	ed b7       	in	r30, 0x3d	; 61
     412:	fe b7       	in	r31, 0x3e	; 62
     414:	92 83       	std	Z+2, r25	; 0x02
     416:	81 83       	std	Z+1, r24	; 0x01
     418:	80 91 ee 04 	lds	r24, 0x04EE
     41c:	90 91 ef 04 	lds	r25, 0x04EF
     420:	94 83       	std	Z+4, r25	; 0x04
     422:	83 83       	std	Z+3, r24	; 0x03
     424:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <printf_P>

	/* Get and process the device's first HID report descriptor */
	if ((ErrorCode = GetHIDReportData()) != ParseSuccessful)
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	06 d2       	rcall	.+1036   	; 0x83e <GetHIDReportData>
     432:	18 2f       	mov	r17, r24
     434:	88 23       	and	r24, r24
     436:	41 f1       	breq	.+80     	; 0x488 <EVENT_USB_Host_DeviceEnumerationComplete+0xf6>
	{
		puts_P(PSTR(ESC_FG_RED "Report Parse Error.\r\n"));
     438:	89 e6       	ldi	r24, 0x69	; 105
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <puts_P>

		if (!(HIDReportInfo.TotalReportItems))
     440:	80 91 15 01 	lds	r24, 0x0115
     444:	88 23       	and	r24, r24
     446:	29 f4       	brne	.+10     	; 0x452 <EVENT_USB_Host_DeviceEnumerationComplete+0xc0>
			puts_P(PSTR("Not a valid Keyboard." ESC_FG_WHITE));
     448:	8e e4       	ldi	r24, 0x4E	; 78
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <puts_P>
     450:	15 c0       	rjmp	.+42     	; 0x47c <EVENT_USB_Host_DeviceEnumerationComplete+0xea>
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     452:	00 d0       	rcall	.+0      	; 0x454 <EVENT_USB_Host_DeviceEnumerationComplete+0xc2>
     454:	00 d0       	rcall	.+0      	; 0x456 <EVENT_USB_Host_DeviceEnumerationComplete+0xc4>
     456:	ed b7       	in	r30, 0x3d	; 61
     458:	fe b7       	in	r31, 0x3e	; 62
     45a:	31 96       	adiw	r30, 0x01	; 1
     45c:	24 e3       	ldi	r18, 0x34	; 52
     45e:	31 e0       	ldi	r19, 0x01	; 1
     460:	ad b7       	in	r26, 0x3d	; 61
     462:	be b7       	in	r27, 0x3e	; 62
     464:	12 96       	adiw	r26, 0x02	; 2
     466:	3c 93       	st	X, r19
     468:	2e 93       	st	-X, r18
     46a:	11 97       	sbiw	r26, 0x01	; 1
     46c:	12 83       	std	Z+2, r17	; 0x02
     46e:	13 82       	std	Z+3, r1	; 0x03
     470:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <printf_P>
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     47c:	80 e9       	ldi	r24, 0x90	; 144
     47e:	49 df       	rcall	.-366    	; 0x312 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <USB_Host_SetDeviceConfiguration>
		return;
     486:	06 c0       	rjmp	.+12     	; 0x494 <EVENT_USB_Host_DeviceEnumerationComplete+0x102>
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     488:	8d e1       	ldi	r24, 0x1D	; 29
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     490:	80 e6       	ldi	r24, 0x60	; 96
     492:	3f df       	rcall	.-386    	; 0x312 <LEDs_SetAllLEDs>
}
     494:	1f 91       	pop	r17
     496:	08 95       	ret

00000498 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     498:	df 93       	push	r29
     49a:	cf 93       	push	r28
     49c:	0f 92       	push	r0
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <EVENT_USB_Host_HostError+0x12>
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <EVENT_USB_Host_HostError+0x14>
     4ac:	ed b7       	in	r30, 0x3d	; 61
     4ae:	fe b7       	in	r31, 0x3e	; 62
     4b0:	31 96       	adiw	r30, 0x01	; 1
     4b2:	2e ee       	ldi	r18, 0xEE	; 238
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	ad b7       	in	r26, 0x3d	; 61
     4b8:	be b7       	in	r27, 0x3e	; 62
     4ba:	12 96       	adiw	r26, 0x02	; 2
     4bc:	3c 93       	st	X, r19
     4be:	2e 93       	st	-X, r18
     4c0:	11 97       	sbiw	r26, 0x01	; 1
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	82 83       	std	Z+2, r24	; 0x02
     4c6:	13 82       	std	Z+3, r1	; 0x03
     4c8:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	80 e9       	ldi	r24, 0x90	; 144
     4d6:	1d df       	rcall	.-454    	; 0x312 <LEDs_SetAllLEDs>
     4d8:	ff cf       	rjmp	.-2      	; 0x4d8 <EVENT_USB_Host_HostError+0x40>

000004da <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4da:	90 91 fa 04 	lds	r25, 0x04FA
     4de:	2d b7       	in	r18, 0x3d	; 61
     4e0:	3e b7       	in	r19, 0x3e	; 62
     4e2:	28 50       	subi	r18, 0x08	; 8
     4e4:	30 40       	sbci	r19, 0x00	; 0
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	3e bf       	out	0x3e, r19	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	2d bf       	out	0x3d, r18	; 61
     4f0:	ed b7       	in	r30, 0x3d	; 61
     4f2:	fe b7       	in	r31, 0x3e	; 62
     4f4:	31 96       	adiw	r30, 0x01	; 1
     4f6:	28 e9       	ldi	r18, 0x98	; 152
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	ad b7       	in	r26, 0x3d	; 61
     4fc:	be b7       	in	r27, 0x3e	; 62
     4fe:	12 96       	adiw	r26, 0x02	; 2
     500:	3c 93       	st	X, r19
     502:	2e 93       	st	-X, r18
     504:	11 97       	sbiw	r26, 0x01	; 1
     506:	82 83       	std	Z+2, r24	; 0x02
     508:	13 82       	std	Z+3, r1	; 0x03
     50a:	64 83       	std	Z+4, r22	; 0x04
     50c:	15 82       	std	Z+5, r1	; 0x05
     50e:	96 83       	std	Z+6, r25	; 0x06
     510:	17 82       	std	Z+7, r1	; 0x07
     512:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     516:	2d b7       	in	r18, 0x3d	; 61
     518:	3e b7       	in	r19, 0x3e	; 62
     51a:	28 5f       	subi	r18, 0xF8	; 248
     51c:	3f 4f       	sbci	r19, 0xFF	; 255
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	3e bf       	out	0x3e, r19	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	2d bf       	out	0x3d, r18	; 61
     528:	80 e9       	ldi	r24, 0x90	; 144
}
     52a:	f3 ce       	rjmp	.-538    	; 0x312 <LEDs_SetAllLEDs>

0000052c <ProcessKeyboardReport>:
 *  as required and prints pressed characters to the serial port. Each time a key is typed, a board LED is toggled.
 *
 *  \param[in] KeyboardReport  Pointer to a HID report from an attached keyboard device
 */
void ProcessKeyboardReport(uint8_t* KeyboardReport)
{
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	8c 01       	movw	r16, r24
	/* Check each HID report item in turn, looking for keyboard scan code reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     53c:	dd 24       	eor	r13, r13
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];

		/* Check if the current report item is a keyboard scan-code */
		if ((ReportItem->Attributes.Usage.Page      == USAGE_PAGE_KEYBOARD) &&
     53e:	8a e2       	ldi	r24, 0x2A	; 42
     540:	e8 2e       	mov	r14, r24
     542:	f1 2c       	mov	r15, r1
 *  \param[in] KeyboardReport  Pointer to a HID report from an attached keyboard device
 */
void ProcessKeyboardReport(uint8_t* KeyboardReport)
{
	/* Check each HID report item in turn, looking for keyboard scan code reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     544:	4b c0       	rjmp	.+150    	; 0x5dc <ProcessKeyboardReport+0xb0>
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     546:	8d 2d       	mov	r24, r13
     548:	90 e0       	ldi	r25, 0x00	; 0

		/* Check if the current report item is a keyboard scan-code */
		if ((ReportItem->Attributes.Usage.Page      == USAGE_PAGE_KEYBOARD) &&
     54a:	8e 9d       	mul	r24, r14
     54c:	b0 01       	movw	r22, r0
     54e:	8f 9d       	mul	r24, r15
     550:	70 0d       	add	r23, r0
     552:	9e 9d       	mul	r25, r14
     554:	70 0d       	add	r23, r0
     556:	11 24       	eor	r1, r1
     558:	eb 01       	movw	r28, r22
     55a:	cb 5e       	subi	r28, 0xEB	; 235
     55c:	de 4f       	sbci	r29, 0xFE	; 254
     55e:	8a 85       	ldd	r24, Y+10	; 0x0a
     560:	9b 85       	ldd	r25, Y+11	; 0x0b
     562:	87 30       	cpi	r24, 0x07	; 7
     564:	91 05       	cpc	r25, r1
     566:	c9 f5       	brne	.+114    	; 0x5da <ProcessKeyboardReport+0xae>
     568:	89 85       	ldd	r24, Y+9	; 0x09
     56a:	88 30       	cpi	r24, 0x08	; 8
     56c:	b1 f5       	brne	.+108    	; 0x5da <ProcessKeyboardReport+0xae>
			(ReportItem->Attributes.BitSize         == 8)                   &&
     56e:	8f 89       	ldd	r24, Y+23	; 0x17
     570:	98 8d       	ldd	r25, Y+24	; 0x18
     572:	a9 8d       	ldd	r26, Y+25	; 0x19
     574:	ba 8d       	ldd	r27, Y+26	; 0x1a
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	91 05       	cpc	r25, r1
     57a:	a1 05       	cpc	r26, r1
     57c:	b1 05       	cpc	r27, r1
     57e:	68 f1       	brcs	.+90     	; 0x5da <ProcessKeyboardReport+0xae>
			(ReportItem->Attributes.Logical.Maximum > 1)                    &&
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	88 23       	and	r24, r24
     584:	51 f5       	brne	.+84     	; 0x5da <ProcessKeyboardReport+0xae>
{
	/* Check each HID report item in turn, looking for keyboard scan code reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     586:	6a 5e       	subi	r22, 0xEA	; 234
     588:	7e 4f       	sbci	r23, 0xFE	; 254
			(ReportItem->Attributes.BitSize         == 8)                   &&
			(ReportItem->Attributes.Logical.Maximum > 1)                    &&
			(ReportItem->ItemType                   == HID_REPORT_ITEM_In))
		{
			/* Retrieve the keyboard scan-code from the report data retrieved from the device */
			bool FoundData = USB_GetHIDReportItemInfo(KeyboardReport, ReportItem);
     58a:	c8 01       	movw	r24, r16
     58c:	be d5       	rcall	.+2940   	; 0x110a <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     58e:	88 23       	and	r24, r24
     590:	21 f1       	breq	.+72     	; 0x5da <ProcessKeyboardReport+0xae>
			  continue;

			/* Key code is an unsigned char in length, cast to the appropriate type */
			uint8_t KeyCode = (uint8_t)ReportItem->Value;
     592:	8b a1       	ldd	r24, Y+35	; 0x23

			/* If scan-code is non-zero, a key is being pressed */
			if (KeyCode)
     594:	88 23       	and	r24, r24
     596:	39 f1       	breq	.+78     	; 0x5e6 <ProcessKeyboardReport+0xba>
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
     598:	90 e2       	ldi	r25, 0x20	; 32
     59a:	99 b9       	out	0x09, r25	; 9
				LEDs_ToggleLEDs(LEDS_LED2);

				char PressedKey = 0;

				/* Retrieve pressed key character if alphanumeric */
				if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     59c:	98 2f       	mov	r25, r24
     59e:	94 50       	subi	r25, 0x04	; 4
     5a0:	9a 31       	cpi	r25, 0x1A	; 26
     5a2:	10 f4       	brcc	.+4      	; 0x5a8 <ProcessKeyboardReport+0x7c>
				{
					PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     5a4:	83 5c       	subi	r24, 0xC3	; 195
     5a6:	11 c0       	rjmp	.+34     	; 0x5ca <ProcessKeyboardReport+0x9e>
				}
				else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     5a8:	98 2f       	mov	r25, r24
     5aa:	9e 51       	subi	r25, 0x1E	; 30
     5ac:	99 30       	cpi	r25, 0x09	; 9
     5ae:	10 f4       	brcc	.+4      	; 0x5b4 <ProcessKeyboardReport+0x88>
						 (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
				{
					PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     5b0:	8d 5e       	subi	r24, 0xED	; 237
     5b2:	0b c0       	rjmp	.+22     	; 0x5ca <ProcessKeyboardReport+0x9e>
				}
				else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     5b4:	87 32       	cpi	r24, 0x27	; 39
     5b6:	31 f0       	breq	.+12     	; 0x5c4 <ProcessKeyboardReport+0x98>
				{
					PressedKey = '0';
				}
				else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     5b8:	8c 32       	cpi	r24, 0x2C	; 44
     5ba:	31 f0       	breq	.+12     	; 0x5c8 <ProcessKeyboardReport+0x9c>
				{
					PressedKey = ' ';
				}
				else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     5bc:	88 32       	cpi	r24, 0x28	; 40
     5be:	99 f4       	brne	.+38     	; 0x5e6 <ProcessKeyboardReport+0xba>
				{
					PressedKey = '\n';
     5c0:	8a e0       	ldi	r24, 0x0A	; 10
     5c2:	03 c0       	rjmp	.+6      	; 0x5ca <ProcessKeyboardReport+0x9e>
				{
					PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
				}
				else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
				{
					PressedKey = '0';
     5c4:	80 e3       	ldi	r24, 0x30	; 48
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <ProcessKeyboardReport+0x9e>
				}
				else if (KeyCode == HID_KEYBOARD_SC_SPACE)
				{
					PressedKey = ' ';
     5c8:	80 e2       	ldi	r24, 0x20	; 32
					PressedKey = '\n';
				}

				/* Print the pressed key character out through the serial port if valid */
				if (PressedKey)
				  putchar(PressedKey);
     5ca:	60 91 0b 05 	lds	r22, 0x050B
     5ce:	70 91 0c 05 	lds	r23, 0x050C
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <fputc>
     5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <ProcessKeyboardReport+0xba>
 *  \param[in] KeyboardReport  Pointer to a HID report from an attached keyboard device
 */
void ProcessKeyboardReport(uint8_t* KeyboardReport)
{
	/* Check each HID report item in turn, looking for keyboard scan code reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     5da:	d3 94       	inc	r13
     5dc:	80 91 15 01 	lds	r24, 0x0115
     5e0:	d8 16       	cp	r13, r24
     5e2:	08 f4       	brcc	.+2      	; 0x5e6 <ProcessKeyboardReport+0xba>
     5e4:	b0 cf       	rjmp	.-160    	; 0x546 <ProcessKeyboardReport+0x1a>

			/* Once a scan-code is found, stop scanning through the report items */
			break;
		}
	}
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	df 90       	pop	r13
     5f4:	08 95       	ret

000005f6 <KeyboardHost_Task>:

/** Task to read in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void KeyboardHost_Task(void)
{
     5f6:	af 92       	push	r10
     5f8:	bf 92       	push	r11
     5fa:	cf 92       	push	r12
     5fc:	df 92       	push	r13
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	df 93       	push	r29
     608:	cf 93       	push	r28
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze keyboard data pipe */
	Pipe_Freeze();
}
     60e:	ed b6       	in	r14, 0x3d	; 61
     610:	fe b6       	in	r15, 0x3e	; 62
/** Task to read in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void KeyboardHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     612:	80 91 fa 04 	lds	r24, 0x04FA
     616:	8b 30       	cpi	r24, 0x0B	; 11
     618:	09 f0       	breq	.+2      	; 0x61c <KeyboardHost_Task+0x26>
     61a:	3e c0       	rjmp	.+124    	; 0x698 <KeyboardHost_Task+0xa2>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     622:	80 91 a9 00 	lds	r24, 0x00A9
     626:	8f 7b       	andi	r24, 0xBF	; 191
     628:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     62c:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze keyboard data pipe */
	Pipe_SelectPipe(KEYBOARD_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     630:	80 ff       	sbrs	r24, 0
     632:	2d c0       	rjmp	.+90     	; 0x68e <KeyboardHost_Task+0x98>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     634:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Check if data has been received from the attached keyboard */
		if (Pipe_IsReadWriteAllowed())
     638:	85 ff       	sbrs	r24, 5
     63a:	24 c0       	rjmp	.+72     	; 0x684 <KeyboardHost_Task+0x8e>
     63c:	cd b6       	in	r12, 0x3d	; 61
     63e:	de b6       	in	r13, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     640:	80 91 f6 00 	lds	r24, 0x00F6
     644:	90 91 f7 00 	lds	r25, 0x00F7
		{
			/* Create buffer big enough for the report */
			uint8_t KeyboardReport[Pipe_BytesInPipe()];
     648:	ad b6       	in	r10, 0x3d	; 61
     64a:	be b6       	in	r11, 0x3e	; 62
     64c:	a8 1a       	sub	r10, r24
     64e:	b9 0a       	sbc	r11, r25
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	be be       	out	0x3e, r11	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	ad be       	out	0x3d, r10	; 61
     65a:	0d b7       	in	r16, 0x3d	; 61
     65c:	1e b7       	in	r17, 0x3e	; 62
     65e:	0f 5f       	subi	r16, 0xFF	; 255
     660:	1f 4f       	sbci	r17, 0xFF	; 255
     662:	60 91 f6 00 	lds	r22, 0x00F6
     666:	70 91 f7 00 	lds	r23, 0x00F7

			/* Load in the keyboard report */
			Pipe_Read_Stream_LE(KeyboardReport, Pipe_BytesInPipe(), NULL);
     66a:	c8 01       	movw	r24, r16
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	81 d7       	rcall	.+3842   	; 0x1574 <Pipe_Read_Stream_LE>

			/* Process the read in keyboard report from the device */
			ProcessKeyboardReport(KeyboardReport);
     672:	c8 01       	movw	r24, r16
     674:	5b df       	rcall	.-330    	; 0x52c <ProcessKeyboardReport>
     676:	8e 2d       	mov	r24, r14
     678:	9d 2d       	mov	r25, r13
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	9e bf       	out	0x3e, r25	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	8d bf       	out	0x3d, r24	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     684:	80 91 a6 00 	lds	r24, 0x00A6
     688:	8e 77       	andi	r24, 0x7E	; 126
     68a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     68e:	80 91 a9 00 	lds	r24, 0x00A9
     692:	80 64       	ori	r24, 0x40	; 64
     694:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearIN();
	}

	/* Freeze keyboard data pipe */
	Pipe_Freeze();
}
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	fe be       	out	0x3e, r15	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	ed be       	out	0x3d, r14	; 61
     6a2:	cf 91       	pop	r28
     6a4:	df 91       	pop	r29
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	bf 90       	pop	r11
     6b4:	af 90       	pop	r10
     6b6:	08 95       	ret

000006b8 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     6b8:	31 de       	rcall	.-926    	; 0x31c <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Keyboard HID Parser Host Demo running.\r\n" ESC_FG_WHITE));
     6ba:	81 ea       	ldi	r24, 0xA1	; 161
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     6c2:	80 e1       	ldi	r24, 0x10	; 16
     6c4:	26 de       	rcall	.-948    	; 0x312 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     6c6:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		KeyboardHost_Task();
     6c8:	96 df       	rcall	.-212    	; 0x5f6 <KeyboardHost_Task>

		USB_USBTask();
     6ca:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <USB_USBTask>
     6ce:	fc cf       	rjmp	.-8      	; 0x6c8 <main+0x10>

000006d0 <DComp_NextKeyboardInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Keyboard HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextKeyboardInterface(void* CurrentDescriptor)
{
     6d0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     6d2:	81 81       	ldd	r24, Z+1	; 0x01
     6d4:	84 30       	cpi	r24, 0x04	; 4
     6d6:	19 f4       	brne	.+6      	; 0x6de <DComp_NextKeyboardInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
     6d8:	85 81       	ldd	r24, Z+5	; 0x05
     6da:	83 30       	cpi	r24, 0x03	; 3
     6dc:	11 f0       	breq	.+4      	; 0x6e2 <DComp_NextKeyboardInterface+0x12>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	08 95       	ret
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
		{
			return DESCRIPTOR_SEARCH_Found;
     6e2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6e4:	08 95       	ret

000006e6 <DComp_NextKeyboardInterfaceDataEndpoint>:
 */
uint8_t DComp_NextKeyboardInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     6e6:	fc 01       	movw	r30, r24
     6e8:	81 81       	ldd	r24, Z+1	; 0x01
     6ea:	85 30       	cpi	r24, 0x05	; 5
     6ec:	21 f0       	breq	.+8      	; 0x6f6 <DComp_NextKeyboardInterfaceDataEndpoint+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     6ee:	84 30       	cpi	r24, 0x04	; 4
     6f0:	21 f4       	brne	.+8      	; 0x6fa <DComp_NextKeyboardInterfaceDataEndpoint+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	08 95       	ret
uint8_t DComp_NextKeyboardInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
	  return DESCRIPTOR_SEARCH_Found;
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     6fa:	82 e0       	ldi	r24, 0x02	; 2
}
     6fc:	08 95       	ret

000006fe <DComp_NextHID>:
 */
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
     6fe:	fc 01       	movw	r30, r24
     700:	81 81       	ldd	r24, Z+1	; 0x01
     702:	81 32       	cpi	r24, 0x21	; 33
     704:	21 f0       	breq	.+8      	; 0x70e <DComp_NextHID+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     706:	84 30       	cpi	r24, 0x04	; 4
     708:	21 f4       	brne	.+8      	; 0x712 <DComp_NextHID+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	08 95       	ret
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     712:	82 e0       	ldi	r24, 0x02	; 2
}
     714:	08 95       	ret

00000716 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref KeyboardHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     716:	8f 92       	push	r8
     718:	9f 92       	push	r9
     71a:	af 92       	push	r10
     71c:	bf 92       	push	r11
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	df 93       	push	r29
     72c:	cf 93       	push	r28
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	c4 50       	subi	r28, 0x04	; 4
     734:	d2 40       	sbci	r29, 0x02	; 2
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	de bf       	out	0x3e, r29	; 62
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     740:	ae 01       	movw	r20, r28
     742:	4b 5f       	subi	r20, 0xFB	; 251
     744:	5f 4f       	sbci	r21, 0xFF	; 255
     746:	5a 83       	std	Y+2, r21	; 0x02
     748:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     74a:	8e 01       	movw	r16, r28
     74c:	0d 5f       	subi	r16, 0xFD	; 253
     74e:	1f 4f       	sbci	r17, 0xFF	; 255
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	b8 01       	movw	r22, r16
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	32 e0       	ldi	r19, 0x02	; 2
     758:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <USB_Host_GetDeviceConfigDescriptor>
     75c:	85 30       	cpi	r24, 0x05	; 5
     75e:	09 f4       	brne	.+2      	; 0x762 <ProcessConfigurationDescriptor+0x4c>
     760:	54 c0       	rjmp	.+168    	; 0x80a <ProcessConfigurationDescriptor+0xf4>
     762:	86 30       	cpi	r24, 0x06	; 6
     764:	59 f0       	breq	.+22     	; 0x77c <ProcessConfigurationDescriptor+0x66>
     766:	88 23       	and	r24, r24
     768:	59 f4       	brne	.+22     	; 0x780 <ProcessConfigurationDescriptor+0x6a>
     76a:	cc 24       	eor	r12, r12
     76c:	dd 24       	eor	r13, r13
     76e:	88 24       	eor	r8, r8
     770:	99 24       	eor	r9, r9
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextKeyboardInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     772:	58 01       	movw	r10, r16
     774:	8e 01       	movw	r16, r28
     776:	0f 5f       	subi	r16, 0xFF	; 255
     778:	1f 4f       	sbci	r17, 0xFF	; 255
     77a:	07 c0       	rjmp	.+14     	; 0x78a <ProcessConfigurationDescriptor+0x74>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     77c:	83 e0       	ldi	r24, 0x03	; 3
     77e:	48 c0       	rjmp	.+144    	; 0x810 <ProcessConfigurationDescriptor+0xfa>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	46 c0       	rjmp	.+140    	; 0x810 <ProcessConfigurationDescriptor+0xfa>
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     784:	9c 01       	movw	r18, r24
     786:	c3 2e       	mov	r12, r19
     788:	d8 2e       	mov	r13, r24
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     78a:	81 14       	cp	r8, r1
     78c:	91 04       	cpc	r9, r1
     78e:	41 f0       	breq	.+16     	; 0x7a0 <ProcessConfigurationDescriptor+0x8a>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     790:	c5 01       	movw	r24, r10
     792:	b8 01       	movw	r22, r16
     794:	43 e7       	ldi	r20, 0x73	; 115
     796:	53 e0       	ldi	r21, 0x03	; 3
     798:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     79c:	88 23       	and	r24, r24
     79e:	b9 f0       	breq	.+46     	; 0x7ce <ProcessConfigurationDescriptor+0xb8>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextKeyboardInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7a0:	c5 01       	movw	r24, r10
     7a2:	b8 01       	movw	r22, r16
     7a4:	48 e6       	ldi	r20, 0x68	; 104
     7a6:	53 e0       	ldi	r21, 0x03	; 3
     7a8:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <USB_GetNextDescriptorComp>
     7ac:	88 23       	and	r24, r24
     7ae:	79 f5       	brne	.+94     	; 0x80e <ProcessConfigurationDescriptor+0xf8>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     7b0:	c9 80       	ldd	r12, Y+1	; 0x01
     7b2:	ea 80       	ldd	r14, Y+2	; 0x02

			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7b4:	c5 01       	movw	r24, r10
     7b6:	b8 01       	movw	r22, r16
     7b8:	4f e7       	ldi	r20, 0x7F	; 127
     7ba:	53 e0       	ldi	r21, 0x03	; 3
     7bc:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <USB_GetNextDescriptorComp>
     7c0:	88 23       	and	r24, r24
     7c2:	29 f5       	brne	.+74     	; 0x80e <ProcessConfigurationDescriptor+0xf8>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     7c4:	8c 2c       	mov	r8, r12
     7c6:	9e 2c       	mov	r9, r14
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the HID descriptor for later use */
			HIDDescriptor = DESCRIPTOR_PCAST(CurrConfigLocation, USB_HID_Descriptor_HID_t);
     7c8:	c9 80       	ldd	r12, Y+1	; 0x01
     7ca:	da 80       	ldd	r13, Y+2	; 0x02

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     7cc:	35 c0       	rjmp	.+106    	; 0x838 <ProcessConfigurationDescriptor+0x122>
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     7ce:	e9 80       	ldd	r14, Y+1	; 0x01
     7d0:	fa 80       	ldd	r15, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     7d2:	f7 01       	movw	r30, r14
     7d4:	42 81       	ldd	r20, Z+2	; 0x02
     7d6:	47 ff       	sbrs	r20, 7
     7d8:	2f c0       	rjmp	.+94     	; 0x838 <ProcessConfigurationDescriptor+0x122>
     7da:	9c 2d       	mov	r25, r12
     7dc:	8d 2d       	mov	r24, r13
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     7de:	e1 14       	cp	r14, r1
     7e0:	f1 04       	cpc	r15, r1
     7e2:	81 f2       	breq	.-96     	; 0x784 <ProcessConfigurationDescriptor+0x6e>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(KEYBOARD_DATA_IN_PIPE, EP_TYPE_INTERRUPT, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     7e4:	24 81       	ldd	r18, Z+4	; 0x04
     7e6:	35 81       	ldd	r19, Z+5	; 0x05
     7e8:	81 e8       	ldi	r24, 0x81	; 129
     7ea:	63 e0       	ldi	r22, 0x03	; 3
     7ec:	01 e0       	ldi	r16, 0x01	; 1
     7ee:	25 d7       	rcall	.+3658   	; 0x163a <Pipe_ConfigurePipe>
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     7f0:	f7 01       	movw	r30, r14
     7f2:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     7f4:	80 93 ad 00 	sts	0x00AD, r24

	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;
     7f8:	f6 01       	movw	r30, r12
     7fa:	87 81       	ldd	r24, Z+7	; 0x07
     7fc:	90 85       	ldd	r25, Z+8	; 0x08
     7fe:	90 93 ef 04 	sts	0x04EF, r25
     802:	80 93 ee 04 	sts	0x04EE, r24

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	03 c0       	rjmp	.+6      	; 0x810 <ProcessConfigurationDescriptor+0xfa>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	01 c0       	rjmp	.+2      	; 0x810 <ProcessConfigurationDescriptor+0xfa>
			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextHID) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     80e:	84 e0       	ldi	r24, 0x04	; 4
	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     810:	cc 5f       	subi	r28, 0xFC	; 252
     812:	dd 4f       	sbci	r29, 0xFD	; 253
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	cf 91       	pop	r28
     820:	df 91       	pop	r29
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	bf 90       	pop	r11
     830:	af 90       	pop	r10
     832:	9f 90       	pop	r9
     834:	8f 90       	pop	r8
     836:	08 95       	ret
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     838:	9c 2d       	mov	r25, r12
     83a:	8d 2d       	mov	r24, r13
     83c:	a3 cf       	rjmp	.-186    	; 0x784 <ProcessConfigurationDescriptor+0x6e>

0000083e <GetHIDReportData>:
 *  structures via the HID parser routines in the LUFA library.
 *
 *  \return A value from the \ref KeyboardHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	df 93       	push	r29
     848:	cf 93       	push	r28
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     84e:	0d b7       	in	r16, 0x3d	; 61
     850:	1e b7       	in	r17, 0x3e	; 62
 *  \return A value from the \ref KeyboardHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
	/* Create a buffer big enough to hold the entire returned HID report */
	uint8_t HIDReportData[HIDReportSize];
     852:	80 91 ee 04 	lds	r24, 0x04EE
     856:	90 91 ef 04 	lds	r25, 0x04EF
     85a:	2d b7       	in	r18, 0x3d	; 61
     85c:	3e b7       	in	r19, 0x3e	; 62
     85e:	28 1b       	sub	r18, r24
     860:	39 0b       	sbc	r19, r25
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	3e bf       	out	0x3e, r19	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	2d bf       	out	0x3d, r18	; 61
     86c:	ed b6       	in	r14, 0x3d	; 61
     86e:	fe b6       	in	r15, 0x3e	; 62
     870:	08 94       	sec
     872:	e1 1c       	adc	r14, r1
     874:	f1 1c       	adc	r15, r1

	USB_ControlRequest = (USB_Request_Header_t)
     876:	21 e8       	ldi	r18, 0x81	; 129
     878:	20 93 f2 04 	sts	0x04F2, r18
     87c:	26 e0       	ldi	r18, 0x06	; 6
     87e:	20 93 f3 04 	sts	0x04F3, r18
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	32 e2       	ldi	r19, 0x22	; 34
     886:	30 93 f5 04 	sts	0x04F5, r19
     88a:	20 93 f4 04 	sts	0x04F4, r18
     88e:	10 92 f7 04 	sts	0x04F7, r1
     892:	10 92 f6 04 	sts	0x04F6, r1
     896:	90 93 f9 04 	sts	0x04F9, r25
     89a:	80 93 f8 04 	sts	0x04F8, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     89e:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
     8a2:	c7 01       	movw	r24, r14
     8a4:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <USB_Host_SendControlRequest>
     8a8:	88 23       	and	r24, r24
     8aa:	61 f4       	brne	.+24     	; 0x8c4 <GetHIDReportData+0x86>
	  return ParseControlError;

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
     8ac:	60 91 ee 04 	lds	r22, 0x04EE
     8b0:	70 91 ef 04 	lds	r23, 0x04EF
     8b4:	c7 01       	movw	r24, r14
     8b6:	45 e1       	ldi	r20, 0x15	; 21
     8b8:	51 e0       	ldi	r21, 0x01	; 1
     8ba:	1d d0       	rcall	.+58     	; 0x8f6 <USB_ProcessHIDReport>
     8bc:	88 23       	and	r24, r24
     8be:	21 f0       	breq	.+8      	; 0x8c8 <GetHIDReportData+0x8a>
	  return ParseError;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <GetHIDReportData+0x8c>
	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
	  return ParseControlError;
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <GetHIDReportData+0x8c>

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
}
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	1e bf       	out	0x3e, r17	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0d bf       	out	0x3d, r16	; 61
     8d4:	cf 91       	pop	r28
     8d6:	df 91       	pop	r29
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	08 95       	ret

000008e2 <CALLBACK_HIDParser_FilterHIDReportItem>:
{
	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store KEYBOARD usage page items into the Processed HID Report structure to
	 * save RAM and ignore the rest
	 */
	return (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_KEYBOARD);
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	fc 01       	movw	r30, r24
     8e6:	21 85       	ldd	r18, Z+9	; 0x09
     8e8:	32 85       	ldd	r19, Z+10	; 0x0a
     8ea:	27 30       	cpi	r18, 0x07	; 7
     8ec:	31 05       	cpc	r19, r1
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <CALLBACK_HIDParser_FilterHIDReportItem+0x10>
     8f0:	40 e0       	ldi	r20, 0x00	; 0
}
     8f2:	84 2f       	mov	r24, r20
     8f4:	08 95       	ret

000008f6 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     8f6:	2f 92       	push	r2
     8f8:	3f 92       	push	r3
     8fa:	4f 92       	push	r4
     8fc:	5f 92       	push	r5
     8fe:	6f 92       	push	r6
     900:	7f 92       	push	r7
     902:	8f 92       	push	r8
     904:	9f 92       	push	r9
     906:	af 92       	push	r10
     908:	bf 92       	push	r11
     90a:	cf 92       	push	r12
     90c:	df 92       	push	r13
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	df 93       	push	r29
     918:	cf 93       	push	r28
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	c9 59       	subi	r28, 0x99	; 153
     920:	d0 40       	sbci	r29, 0x00	; 0
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	6c 01       	movw	r12, r24
     92e:	1b 01       	movw	r2, r22
     930:	ba 01       	movw	r22, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
     932:	40 57       	subi	r20, 0x70	; 112
     934:	5c 4f       	sbci	r21, 0xFC	; 252
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     936:	89 ed       	ldi	r24, 0xD9	; 217
     938:	93 e0       	ldi	r25, 0x03	; 3
     93a:	db 01       	movw	r26, r22
     93c:	9c 01       	movw	r18, r24
     93e:	1d 92       	st	X+, r1
     940:	21 50       	subi	r18, 0x01	; 1
     942:	30 40       	sbci	r19, 0x00	; 0
     944:	e1 f7       	brne	.-8      	; 0x93e <USB_ProcessHIDReport+0x48>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     946:	9e 01       	movw	r18, r28
     948:	25 5c       	subi	r18, 0xC5	; 197
     94a:	3f 4f       	sbci	r19, 0xFF	; 255
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     94c:	8c e1       	ldi	r24, 0x1C	; 28
     94e:	d9 01       	movw	r26, r18
     950:	1d 92       	st	X+, r1
     952:	8a 95       	dec	r24
     954:	e9 f7       	brne	.-6      	; 0x950 <USB_ProcessHIDReport+0x5a>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     956:	87 e0       	ldi	r24, 0x07	; 7
     958:	da 01       	movw	r26, r20
     95a:	1d 92       	st	X+, r1
     95c:	8a 95       	dec	r24
     95e:	e9 f7       	brne	.-6      	; 0x95a <USB_ProcessHIDReport+0x64>

	ParserData->TotalDeviceReports = 1;
     960:	fb 01       	movw	r30, r22
     962:	e1 57       	subi	r30, 0x71	; 113
     964:	fc 4f       	sbci	r31, 0xFC	; 252
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 83       	st	Z, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
     96a:	e9 96       	adiw	r28, 0x39	; 57
     96c:	1c ae       	std	Y+60, r1	; 0x3c
     96e:	1d ae       	std	Y+61, r1	; 0x3d
     970:	1e ae       	std	Y+62, r1	; 0x3e
     972:	1f ae       	std	Y+63, r1	; 0x3f
     974:	e9 97       	sbiw	r28, 0x39	; 57
     976:	44 24       	eor	r4, r4
     978:	55 24       	eor	r5, r5
     97a:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
     97c:	bb 24       	eor	r11, r11
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
     97e:	88 24       	eor	r8, r8
     980:	99 24       	eor	r9, r9

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     982:	cb 01       	movw	r24, r22
     984:	8a 52       	subi	r24, 0x2A	; 42
     986:	9c 4f       	sbci	r25, 0xFC	; 252
     988:	c0 58       	subi	r28, 0x80	; 128
     98a:	df 4f       	sbci	r29, 0xFF	; 255
     98c:	99 83       	std	Y+1, r25	; 0x01
     98e:	88 83       	st	Y, r24
     990:	c0 58       	subi	r28, 0x80	; 128
     992:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     994:	c8 56       	subi	r28, 0x68	; 104
     996:	df 4f       	sbci	r29, 0xFF	; 255
     998:	39 83       	std	Y+1, r19	; 0x01
     99a:	28 83       	st	Y, r18
     99c:	c8 59       	subi	r28, 0x98	; 152
     99e:	d0 40       	sbci	r29, 0x00	; 0
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     9a0:	db 01       	movw	r26, r22
     9a2:	a0 5b       	subi	r26, 0xB0	; 176
     9a4:	bc 4f       	sbci	r27, 0xFC	; 252
     9a6:	c6 57       	subi	r28, 0x76	; 118
     9a8:	df 4f       	sbci	r29, 0xFF	; 255
     9aa:	b9 83       	std	Y+1, r27	; 0x01
     9ac:	a8 83       	st	Y, r26
     9ae:	ca 58       	subi	r28, 0x8A	; 138
     9b0:	d0 40       	sbci	r29, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     9b2:	cb 01       	movw	r24, r22
     9b4:	88 57       	subi	r24, 0x78	; 120
     9b6:	9c 4f       	sbci	r25, 0xFC	; 252
     9b8:	c4 57       	subi	r28, 0x74	; 116
     9ba:	df 4f       	sbci	r29, 0xFF	; 255
     9bc:	99 83       	std	Y+1, r25	; 0x01
     9be:	88 83       	st	Y, r24
     9c0:	cc 58       	subi	r28, 0x8C	; 140
     9c2:	d0 40       	sbci	r29, 0x00	; 0
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     9c4:	db 01       	movw	r26, r22
     9c6:	a7 5b       	subi	r26, 0xB7	; 183
     9c8:	bc 4f       	sbci	r27, 0xFC	; 252
     9ca:	c2 57       	subi	r28, 0x72	; 114
     9cc:	df 4f       	sbci	r29, 0xFF	; 255
     9ce:	b9 83       	std	Y+1, r27	; 0x01
     9d0:	a8 83       	st	Y, r26
     9d2:	ce 58       	subi	r28, 0x8E	; 142
     9d4:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     9d6:	c9 01       	movw	r24, r18
     9d8:	4c 96       	adiw	r24, 0x1c	; 28
     9da:	c0 57       	subi	r28, 0x70	; 112
     9dc:	df 4f       	sbci	r29, 0xFF	; 255
     9de:	99 83       	std	Y+1, r25	; 0x01
     9e0:	88 83       	st	Y, r24
     9e2:	c0 59       	subi	r28, 0x90	; 144
     9e4:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     9e6:	db 01       	movw	r26, r22
     9e8:	a8 52       	subi	r26, 0x28	; 40
     9ea:	bc 4f       	sbci	r27, 0xFC	; 252
     9ec:	ce 57       	subi	r28, 0x7E	; 126
     9ee:	df 4f       	sbci	r29, 0xFF	; 255
     9f0:	b9 83       	std	Y+1, r27	; 0x01
     9f2:	a8 83       	st	Y, r26
     9f4:	c2 58       	subi	r28, 0x82	; 130
     9f6:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     9f8:	cc 57       	subi	r28, 0x7C	; 124
     9fa:	df 4f       	sbci	r29, 0xFF	; 255
     9fc:	f9 83       	std	Y+1, r31	; 0x01
     9fe:	e8 83       	st	Y, r30
     a00:	c4 58       	subi	r28, 0x84	; 132
     a02:	d0 40       	sbci	r29, 0x00	; 0

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     a04:	ca 01       	movw	r24, r20
     a06:	ce 56       	subi	r28, 0x6E	; 110
     a08:	df 4f       	sbci	r29, 0xFF	; 255
     a0a:	48 83       	st	Y, r20
     a0c:	c2 59       	subi	r28, 0x92	; 146
     a0e:	d0 40       	sbci	r29, 0x00	; 0
     a10:	cd 56       	subi	r28, 0x6D	; 109
     a12:	df 4f       	sbci	r29, 0xFF	; 255
     a14:	98 83       	st	Y, r25
     a16:	c3 59       	subi	r28, 0x93	; 147
     a18:	d0 40       	sbci	r29, 0x00	; 0
     a1a:	e5 96       	adiw	r28, 0x35	; 53
     a1c:	7f af       	std	Y+63, r23	; 0x3f
     a1e:	6e af       	std	Y+62, r22	; 0x3e
     a20:	e5 97       	sbiw	r28, 0x35	; 53
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     a22:	38 c3       	rjmp	.+1648   	; 0x1094 <USB_ProcessHIDReport+0x79e>
	{
		uint8_t  HIDReportItem  = *ReportData;
     a24:	f6 01       	movw	r30, r12
     a26:	61 91       	ld	r22, Z+
     a28:	6f 01       	movw	r12, r30
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     a2a:	08 94       	sec
     a2c:	21 08       	sbc	r2, r1
     a2e:	31 08       	sbc	r3, r1

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     a30:	86 2f       	mov	r24, r22
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	eb 96       	adiw	r28, 0x3b	; 59
     a36:	9f af       	std	Y+63, r25	; 0x3f
     a38:	8e af       	std	Y+62, r24	; 0x3e
     a3a:	eb 97       	sbiw	r28, 0x3b	; 59
     a3c:	83 70       	andi	r24, 0x03	; 3
     a3e:	90 70       	andi	r25, 0x00	; 0
     a40:	82 30       	cpi	r24, 0x02	; 2
     a42:	91 05       	cpc	r25, r1
     a44:	09 f4       	brne	.+2      	; 0xa48 <USB_ProcessHIDReport+0x152>
     a46:	3f c0       	rjmp	.+126    	; 0xac6 <USB_ProcessHIDReport+0x1d0>
     a48:	83 30       	cpi	r24, 0x03	; 3
     a4a:	91 05       	cpc	r25, r1
     a4c:	29 f0       	breq	.+10     	; 0xa58 <USB_ProcessHIDReport+0x162>
     a4e:	81 30       	cpi	r24, 0x01	; 1
     a50:	91 05       	cpc	r25, r1
     a52:	09 f0       	breq	.+2      	; 0xa56 <USB_ProcessHIDReport+0x160>
     a54:	5c c0       	rjmp	.+184    	; 0xb0e <USB_ProcessHIDReport+0x218>
     a56:	52 c0       	rjmp	.+164    	; 0xafc <USB_ProcessHIDReport+0x206>
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     a58:	df 01       	movw	r26, r30
     a5a:	e3 80       	ldd	r14, Z+3	; 0x03
     a5c:	ff 24       	eor	r15, r15
     a5e:	00 e0       	ldi	r16, 0x00	; 0
     a60:	10 e0       	ldi	r17, 0x00	; 0
     a62:	1e 2d       	mov	r17, r14
     a64:	00 27       	eor	r16, r16
     a66:	ff 24       	eor	r15, r15
     a68:	ee 24       	eor	r14, r14
     a6a:	12 96       	adiw	r26, 0x02	; 2
     a6c:	8c 91       	ld	r24, X
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	dc 01       	movw	r26, r24
     a76:	99 27       	eor	r25, r25
     a78:	88 27       	eor	r24, r24
     a7a:	e8 2a       	or	r14, r24
     a7c:	f9 2a       	or	r15, r25
     a7e:	0a 2b       	or	r16, r26
     a80:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     a82:	f6 01       	movw	r30, r12
     a84:	80 81       	ld	r24, Z
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	a0 e0       	ldi	r26, 0x00	; 0
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     a8c:	e8 2a       	or	r14, r24
     a8e:	f9 2a       	or	r15, r25
     a90:	0a 2b       	or	r16, r26
     a92:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     a94:	f1 81       	ldd	r31, Z+1	; 0x01
     a96:	ed 96       	adiw	r28, 0x3d	; 61
     a98:	ff af       	std	Y+63, r31	; 0x3f
     a9a:	ed 97       	sbiw	r28, 0x3d	; 61
     a9c:	ec 96       	adiw	r28, 0x3c	; 60
     a9e:	1f ae       	std	Y+63, r1	; 0x3f
     aa0:	ec 97       	sbiw	r28, 0x3c	; 60
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     aa2:	ed 96       	adiw	r28, 0x3d	; 61
     aa4:	ee ad       	ldd	r30, Y+62	; 0x3e
     aa6:	ff ad       	ldd	r31, Y+63	; 0x3f
     aa8:	ed 97       	sbiw	r28, 0x3d	; 61
     aaa:	cf 01       	movw	r24, r30
     aac:	a0 e0       	ldi	r26, 0x00	; 0
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	e8 2a       	or	r14, r24
     ab2:	f9 2a       	or	r15, r25
     ab4:	0a 2b       	or	r16, r26
     ab6:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     ab8:	8c ef       	ldi	r24, 0xFC	; 252
     aba:	9f ef       	ldi	r25, 0xFF	; 255
     abc:	28 0e       	add	r2, r24
     abe:	39 1e       	adc	r3, r25
				ReportData     += 4;
     ac0:	a4 e0       	ldi	r26, 0x04	; 4
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	18 c0       	rjmp	.+48     	; 0xaf6 <USB_ProcessHIDReport+0x200>
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     ac6:	f1 81       	ldd	r31, Z+1	; 0x01
     ac8:	ef 96       	adiw	r28, 0x3f	; 63
     aca:	ff af       	std	Y+63, r31	; 0x3f
     acc:	ef 97       	sbiw	r28, 0x3f	; 63
     ace:	ee 96       	adiw	r28, 0x3e	; 62
     ad0:	1f ae       	std	Y+63, r1	; 0x3f
     ad2:	ee 97       	sbiw	r28, 0x3e	; 62
     ad4:	d6 01       	movw	r26, r12
     ad6:	ec 90       	ld	r14, X
     ad8:	ff 24       	eor	r15, r15
     ada:	ef 96       	adiw	r28, 0x3f	; 63
     adc:	ee ad       	ldd	r30, Y+62	; 0x3e
     ade:	ff ad       	ldd	r31, Y+63	; 0x3f
     ae0:	ef 97       	sbiw	r28, 0x3f	; 63
     ae2:	ee 2a       	or	r14, r30
     ae4:	ff 2a       	or	r15, r31
     ae6:	00 e0       	ldi	r16, 0x00	; 0
     ae8:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
     aea:	8e ef       	ldi	r24, 0xFE	; 254
     aec:	9f ef       	ldi	r25, 0xFF	; 255
     aee:	28 0e       	add	r2, r24
     af0:	39 1e       	adc	r3, r25
				ReportData     += 2;
     af2:	a2 e0       	ldi	r26, 0x02	; 2
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	ca 0e       	add	r12, r26
     af8:	db 1e       	adc	r13, r27
				break;
     afa:	0c c0       	rjmp	.+24     	; 0xb14 <USB_ProcessHIDReport+0x21e>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     afc:	e1 90       	ld	r14, Z+
     afe:	6f 01       	movw	r12, r30
     b00:	ff 24       	eor	r15, r15
     b02:	00 e0       	ldi	r16, 0x00	; 0
     b04:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
     b06:	08 94       	sec
     b08:	21 08       	sbc	r2, r1
     b0a:	31 08       	sbc	r3, r1
				ReportData     += 1;
				break;
     b0c:	03 c0       	rjmp	.+6      	; 0xb14 <USB_ProcessHIDReport+0x21e>

			default:
				ReportItemData  = 0;
     b0e:	ee 24       	eor	r14, r14
     b10:	ff 24       	eor	r15, r15
     b12:	87 01       	movw	r16, r14
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     b14:	eb 96       	adiw	r28, 0x3b	; 59
     b16:	8e ad       	ldd	r24, Y+62	; 0x3e
     b18:	9f ad       	ldd	r25, Y+63	; 0x3f
     b1a:	eb 97       	sbiw	r28, 0x3b	; 59
     b1c:	8c 7f       	andi	r24, 0xFC	; 252
     b1e:	90 70       	andi	r25, 0x00	; 0
     b20:	84 36       	cpi	r24, 0x64	; 100
     b22:	91 05       	cpc	r25, r1
     b24:	09 f4       	brne	.+2      	; 0xb28 <USB_ProcessHIDReport+0x232>
     b26:	c9 c0       	rjmp	.+402    	; 0xcba <USB_ProcessHIDReport+0x3c4>
     b28:	85 36       	cpi	r24, 0x65	; 101
     b2a:	91 05       	cpc	r25, r1
     b2c:	8c f5       	brge	.+98     	; 0xb90 <USB_ProcessHIDReport+0x29a>
     b2e:	84 32       	cpi	r24, 0x24	; 36
     b30:	91 05       	cpc	r25, r1
     b32:	09 f4       	brne	.+2      	; 0xb36 <USB_ProcessHIDReport+0x240>
     b34:	a9 c0       	rjmp	.+338    	; 0xc88 <USB_ProcessHIDReport+0x392>
     b36:	85 32       	cpi	r24, 0x25	; 37
     b38:	91 05       	cpc	r25, r1
     b3a:	ac f4       	brge	.+42     	; 0xb66 <USB_ProcessHIDReport+0x270>
     b3c:	88 30       	cpi	r24, 0x08	; 8
     b3e:	91 05       	cpc	r25, r1
     b40:	09 f4       	brne	.+2      	; 0xb44 <USB_ProcessHIDReport+0x24e>
     b42:	31 c1       	rjmp	.+610    	; 0xda6 <USB_ProcessHIDReport+0x4b0>
     b44:	89 30       	cpi	r24, 0x09	; 9
     b46:	91 05       	cpc	r25, r1
     b48:	2c f4       	brge	.+10     	; 0xb54 <USB_ProcessHIDReport+0x25e>
     b4a:	84 30       	cpi	r24, 0x04	; 4
     b4c:	91 05       	cpc	r25, r1
     b4e:	09 f0       	breq	.+2      	; 0xb52 <USB_ProcessHIDReport+0x25c>
     b50:	8f c2       	rjmp	.+1310   	; 0x1070 <USB_ProcessHIDReport+0x77a>
     b52:	8e c0       	rjmp	.+284    	; 0xc70 <USB_ProcessHIDReport+0x37a>
     b54:	84 31       	cpi	r24, 0x14	; 20
     b56:	91 05       	cpc	r25, r1
     b58:	09 f4       	brne	.+2      	; 0xb5c <USB_ProcessHIDReport+0x266>
     b5a:	8e c0       	rjmp	.+284    	; 0xc78 <USB_ProcessHIDReport+0x382>
     b5c:	88 31       	cpi	r24, 0x18	; 24
     b5e:	91 05       	cpc	r25, r1
     b60:	09 f0       	breq	.+2      	; 0xb64 <USB_ProcessHIDReport+0x26e>
     b62:	86 c2       	rjmp	.+1292   	; 0x1070 <USB_ProcessHIDReport+0x77a>
     b64:	83 c2       	rjmp	.+1286   	; 0x106c <USB_ProcessHIDReport+0x776>
     b66:	84 33       	cpi	r24, 0x34	; 52
     b68:	91 05       	cpc	r25, r1
     b6a:	09 f4       	brne	.+2      	; 0xb6e <USB_ProcessHIDReport+0x278>
     b6c:	93 c0       	rjmp	.+294    	; 0xc94 <USB_ProcessHIDReport+0x39e>
     b6e:	85 33       	cpi	r24, 0x35	; 53
     b70:	91 05       	cpc	r25, r1
     b72:	2c f4       	brge	.+10     	; 0xb7e <USB_ProcessHIDReport+0x288>
     b74:	88 32       	cpi	r24, 0x28	; 40
     b76:	91 05       	cpc	r25, r1
     b78:	09 f0       	breq	.+2      	; 0xb7c <USB_ProcessHIDReport+0x286>
     b7a:	7a c2       	rjmp	.+1268   	; 0x1070 <USB_ProcessHIDReport+0x77a>
     b7c:	26 c1       	rjmp	.+588    	; 0xdca <USB_ProcessHIDReport+0x4d4>
     b7e:	84 34       	cpi	r24, 0x44	; 68
     b80:	91 05       	cpc	r25, r1
     b82:	09 f4       	brne	.+2      	; 0xb86 <USB_ProcessHIDReport+0x290>
     b84:	8f c0       	rjmp	.+286    	; 0xca4 <USB_ProcessHIDReport+0x3ae>
     b86:	84 35       	cpi	r24, 0x54	; 84
     b88:	91 05       	cpc	r25, r1
     b8a:	09 f0       	breq	.+2      	; 0xb8e <USB_ProcessHIDReport+0x298>
     b8c:	71 c2       	rjmp	.+1250   	; 0x1070 <USB_ProcessHIDReport+0x77a>
     b8e:	90 c0       	rjmp	.+288    	; 0xcb0 <USB_ProcessHIDReport+0x3ba>
     b90:	84 39       	cpi	r24, 0x94	; 148
     b92:	91 05       	cpc	r25, r1
     b94:	09 f4       	brne	.+2      	; 0xb98 <USB_ProcessHIDReport+0x2a2>
     b96:	9a c0       	rjmp	.+308    	; 0xccc <USB_ProcessHIDReport+0x3d6>
     b98:	85 39       	cpi	r24, 0x95	; 149
     b9a:	91 05       	cpc	r25, r1
     b9c:	a4 f4       	brge	.+40     	; 0xbc6 <USB_ProcessHIDReport+0x2d0>
     b9e:	80 38       	cpi	r24, 0x80	; 128
     ba0:	91 05       	cpc	r25, r1
     ba2:	41 f1       	breq	.+80     	; 0xbf4 <USB_ProcessHIDReport+0x2fe>
     ba4:	81 38       	cpi	r24, 0x81	; 129
     ba6:	91 05       	cpc	r25, r1
     ba8:	2c f4       	brge	.+10     	; 0xbb4 <USB_ProcessHIDReport+0x2be>
     baa:	84 37       	cpi	r24, 0x74	; 116
     bac:	91 05       	cpc	r25, r1
     bae:	09 f0       	breq	.+2      	; 0xbb2 <USB_ProcessHIDReport+0x2bc>
     bb0:	5f c2       	rjmp	.+1214   	; 0x1070 <USB_ProcessHIDReport+0x77a>
     bb2:	89 c0       	rjmp	.+274    	; 0xcc6 <USB_ProcessHIDReport+0x3d0>
     bb4:	84 38       	cpi	r24, 0x84	; 132
     bb6:	91 05       	cpc	r25, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <USB_ProcessHIDReport+0x2c6>
     bba:	8b c0       	rjmp	.+278    	; 0xcd2 <USB_ProcessHIDReport+0x3dc>
     bbc:	80 39       	cpi	r24, 0x90	; 144
     bbe:	91 05       	cpc	r25, r1
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <USB_ProcessHIDReport+0x2ce>
     bc2:	56 c2       	rjmp	.+1196   	; 0x1070 <USB_ProcessHIDReport+0x77a>
     bc4:	17 c0       	rjmp	.+46     	; 0xbf4 <USB_ProcessHIDReport+0x2fe>
     bc6:	80 3b       	cpi	r24, 0xB0	; 176
     bc8:	91 05       	cpc	r25, r1
     bca:	a1 f0       	breq	.+40     	; 0xbf4 <USB_ProcessHIDReport+0x2fe>
     bcc:	81 3b       	cpi	r24, 0xB1	; 177
     bce:	91 05       	cpc	r25, r1
     bd0:	4c f4       	brge	.+18     	; 0xbe4 <USB_ProcessHIDReport+0x2ee>
     bd2:	80 3a       	cpi	r24, 0xA0	; 160
     bd4:	91 05       	cpc	r25, r1
     bd6:	09 f4       	brne	.+2      	; 0xbda <USB_ProcessHIDReport+0x2e4>
     bd8:	ff c0       	rjmp	.+510    	; 0xdd8 <USB_ProcessHIDReport+0x4e2>
     bda:	84 3a       	cpi	r24, 0xA4	; 164
     bdc:	91 05       	cpc	r25, r1
     bde:	09 f0       	breq	.+2      	; 0xbe2 <USB_ProcessHIDReport+0x2ec>
     be0:	47 c2       	rjmp	.+1166   	; 0x1070 <USB_ProcessHIDReport+0x77a>
     be2:	24 c0       	rjmp	.+72     	; 0xc2c <USB_ProcessHIDReport+0x336>
     be4:	84 3b       	cpi	r24, 0xB4	; 180
     be6:	91 05       	cpc	r25, r1
     be8:	b1 f1       	breq	.+108    	; 0xc56 <USB_ProcessHIDReport+0x360>
     bea:	80 3c       	cpi	r24, 0xC0	; 192
     bec:	91 05       	cpc	r25, r1
     bee:	09 f0       	breq	.+2      	; 0xbf2 <USB_ProcessHIDReport+0x2fc>
     bf0:	3f c2       	rjmp	.+1150   	; 0x1070 <USB_ProcessHIDReport+0x77a>
     bf2:	4f c1       	rjmp	.+670    	; 0xe92 <USB_ProcessHIDReport+0x59c>
     bf4:	aa 24       	eor	r10, r10
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
     bf6:	6c 7f       	andi	r22, 0xFC	; 252
     bf8:	c1 58       	subi	r28, 0x81	; 129
     bfa:	df 4f       	sbci	r29, 0xFF	; 255
     bfc:	68 83       	st	Y, r22
     bfe:	cf 57       	subi	r28, 0x7F	; 127
     c00:	d0 40       	sbci	r29, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     c02:	c8 01       	movw	r24, r16
     c04:	b7 01       	movw	r22, r14
     c06:	61 70       	andi	r22, 0x01	; 1
     c08:	70 70       	andi	r23, 0x00	; 0
     c0a:	80 70       	andi	r24, 0x00	; 0
     c0c:	90 70       	andi	r25, 0x00	; 0
     c0e:	ca 57       	subi	r28, 0x7A	; 122
     c10:	df 4f       	sbci	r29, 0xFF	; 255
     c12:	68 83       	st	Y, r22
     c14:	79 83       	std	Y+1, r23	; 0x01
     c16:	8a 83       	std	Y+2, r24	; 0x02
     c18:	9b 83       	std	Y+3, r25	; 0x03
     c1a:	c6 58       	subi	r28, 0x86	; 134
     c1c:	d0 40       	sbci	r29, 0x00	; 0
     c1e:	c6 01       	movw	r24, r12
     c20:	6a 01       	movw	r12, r20
     c22:	b8 01       	movw	r22, r16
     c24:	a7 01       	movw	r20, r14
     c26:	79 01       	movw	r14, r18
     c28:	8c 01       	movw	r16, r24
     c2a:	17 c2       	rjmp	.+1070   	; 0x105a <USB_ProcessHIDReport+0x764>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     c2c:	c0 57       	subi	r28, 0x70	; 112
     c2e:	df 4f       	sbci	r29, 0xFF	; 255
     c30:	88 81       	ld	r24, Y
     c32:	99 81       	ldd	r25, Y+1	; 0x01
     c34:	c0 59       	subi	r28, 0x90	; 144
     c36:	d0 40       	sbci	r29, 0x00	; 0
     c38:	28 17       	cp	r18, r24
     c3a:	39 07       	cpc	r19, r25
     c3c:	09 f4       	brne	.+2      	; 0xc40 <USB_ProcessHIDReport+0x34a>
     c3e:	38 c2       	rjmp	.+1136   	; 0x10b0 <USB_ProcessHIDReport+0x7ba>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     c40:	c9 01       	movw	r24, r18
     c42:	4c 96       	adiw	r24, 0x1c	; 28
     c44:	fc 01       	movw	r30, r24
     c46:	d9 01       	movw	r26, r18
     c48:	2a e2       	ldi	r18, 0x2A	; 42
     c4a:	0d 90       	ld	r0, X+
     c4c:	01 92       	st	Z+, r0
     c4e:	21 50       	subi	r18, 0x01	; 1
     c50:	e1 f7       	brne	.-8      	; 0xc4a <USB_ProcessHIDReport+0x354>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     c52:	9c 01       	movw	r18, r24
				break;
     c54:	0d c2       	rjmp	.+1050   	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     c56:	c8 56       	subi	r28, 0x68	; 104
     c58:	df 4f       	sbci	r29, 0xFF	; 255
     c5a:	a8 81       	ld	r26, Y
     c5c:	b9 81       	ldd	r27, Y+1	; 0x01
     c5e:	c8 59       	subi	r28, 0x98	; 152
     c60:	d0 40       	sbci	r29, 0x00	; 0
     c62:	2a 17       	cp	r18, r26
     c64:	3b 07       	cpc	r19, r27
     c66:	09 f4       	brne	.+2      	; 0xc6a <USB_ProcessHIDReport+0x374>
     c68:	25 c2       	rjmp	.+1098   	; 0x10b4 <USB_ProcessHIDReport+0x7be>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     c6a:	2c 51       	subi	r18, 0x1C	; 28
     c6c:	30 40       	sbci	r19, 0x00	; 0
				break;
     c6e:	00 c2       	rjmp	.+1024   	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     c70:	f9 01       	movw	r30, r18
     c72:	f2 82       	std	Z+2, r15	; 0x02
     c74:	e1 82       	std	Z+1, r14	; 0x01
				break;
     c76:	fc c1       	rjmp	.+1016   	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     c78:	d9 01       	movw	r26, r18
     c7a:	1a 96       	adiw	r26, 0x0a	; 10
     c7c:	ed 92       	st	X+, r14
     c7e:	fd 92       	st	X+, r15
     c80:	0d 93       	st	X+, r16
     c82:	1c 93       	st	X, r17
     c84:	1d 97       	sbiw	r26, 0x0d	; 13
				break;
     c86:	f4 c1       	rjmp	.+1000   	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     c88:	f9 01       	movw	r30, r18
     c8a:	e6 86       	std	Z+14, r14	; 0x0e
     c8c:	f7 86       	std	Z+15, r15	; 0x0f
     c8e:	00 8b       	std	Z+16, r16	; 0x10
     c90:	11 8b       	std	Z+17, r17	; 0x11
				break;
     c92:	ee c1       	rjmp	.+988    	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     c94:	d9 01       	movw	r26, r18
     c96:	52 96       	adiw	r26, 0x12	; 18
     c98:	ed 92       	st	X+, r14
     c9a:	fd 92       	st	X+, r15
     c9c:	0d 93       	st	X+, r16
     c9e:	1c 93       	st	X, r17
     ca0:	55 97       	sbiw	r26, 0x15	; 21
				break;
     ca2:	e6 c1       	rjmp	.+972    	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     ca4:	f9 01       	movw	r30, r18
     ca6:	e6 8a       	std	Z+22, r14	; 0x16
     ca8:	f7 8a       	std	Z+23, r15	; 0x17
     caa:	00 8f       	std	Z+24, r16	; 0x18
     cac:	11 8f       	std	Z+25, r17	; 0x19
				break;
     cae:	e0 c1       	rjmp	.+960    	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     cb0:	d9 01       	movw	r26, r18
     cb2:	19 96       	adiw	r26, 0x09	; 9
     cb4:	ec 92       	st	X, r14
     cb6:	19 97       	sbiw	r26, 0x09	; 9
				break;
     cb8:	db c1       	rjmp	.+950    	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     cba:	f9 01       	movw	r30, r18
     cbc:	e5 82       	std	Z+5, r14	; 0x05
     cbe:	f6 82       	std	Z+6, r15	; 0x06
     cc0:	07 83       	std	Z+7, r16	; 0x07
     cc2:	10 87       	std	Z+8, r17	; 0x08
				break;
     cc4:	d5 c1       	rjmp	.+938    	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     cc6:	d9 01       	movw	r26, r18
     cc8:	ec 92       	st	X, r14
				break;
     cca:	d2 c1       	rjmp	.+932    	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     ccc:	f9 01       	movw	r30, r18
     cce:	e2 8e       	std	Z+26, r14	; 0x1a
				break;
     cd0:	cf c1       	rjmp	.+926    	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     cd2:	9e 2d       	mov	r25, r14
     cd4:	d9 01       	movw	r26, r18
     cd6:	5b 96       	adiw	r26, 0x1b	; 27
     cd8:	ec 92       	st	X, r14
     cda:	5b 97       	sbiw	r26, 0x1b	; 27

				if (ParserData->UsingReportIDs)
     cdc:	ce 57       	subi	r28, 0x7E	; 126
     cde:	df 4f       	sbci	r29, 0xFF	; 255
     ce0:	e8 81       	ld	r30, Y
     ce2:	f9 81       	ldd	r31, Y+1	; 0x01
     ce4:	c2 58       	subi	r28, 0x82	; 130
     ce6:	d0 40       	sbci	r29, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	88 23       	and	r24, r24
     cec:	09 f4       	brne	.+2      	; 0xcf0 <USB_ProcessHIDReport+0x3fa>
     cee:	4c c0       	rjmp	.+152    	; 0xd88 <USB_ProcessHIDReport+0x492>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     cf0:	cc 57       	subi	r28, 0x7C	; 124
     cf2:	df 4f       	sbci	r29, 0xFF	; 255
     cf4:	a8 81       	ld	r26, Y
     cf6:	b9 81       	ldd	r27, Y+1	; 0x01
     cf8:	c4 58       	subi	r28, 0x84	; 132
     cfa:	d0 40       	sbci	r29, 0x00	; 0
     cfc:	6c 91       	ld	r22, X

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     cfe:	ce 56       	subi	r28, 0x6E	; 110
     d00:	df 4f       	sbci	r29, 0xFF	; 255
     d02:	e8 81       	ld	r30, Y
     d04:	c2 59       	subi	r28, 0x92	; 146
     d06:	d0 40       	sbci	r29, 0x00	; 0
     d08:	cd 56       	subi	r28, 0x6D	; 109
     d0a:	df 4f       	sbci	r29, 0xFF	; 255
     d0c:	f8 81       	ld	r31, Y
     d0e:	c3 59       	subi	r28, 0x93	; 147
     d10:	d0 40       	sbci	r29, 0x00	; 0
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	17 c0       	rjmp	.+46     	; 0xd44 <USB_ProcessHIDReport+0x44e>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     d16:	40 81       	ld	r20, Z
     d18:	37 96       	adiw	r30, 0x07	; 7
     d1a:	49 17       	cp	r20, r25
     d1c:	91 f4       	brne	.+36     	; 0xd42 <USB_ProcessHIDReport+0x44c>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	ac 01       	movw	r20, r24
     d22:	f3 e0       	ldi	r31, 0x03	; 3
     d24:	44 0f       	add	r20, r20
     d26:	55 1f       	adc	r21, r21
     d28:	fa 95       	dec	r31
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <USB_ProcessHIDReport+0x42e>
     d2c:	48 1b       	sub	r20, r24
     d2e:	59 0b       	sbc	r21, r25
     d30:	40 57       	subi	r20, 0x70	; 112
     d32:	5c 4f       	sbci	r21, 0xFC	; 252
     d34:	e5 96       	adiw	r28, 0x35	; 53
     d36:	ee ad       	ldd	r30, Y+62	; 0x3e
     d38:	ff ad       	ldd	r31, Y+63	; 0x3f
     d3a:	e5 97       	sbiw	r28, 0x35	; 53
     d3c:	4e 0f       	add	r20, r30
     d3e:	5f 1f       	adc	r21, r31
     d40:	23 c0       	rjmp	.+70     	; 0xd88 <USB_ProcessHIDReport+0x492>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     d42:	8f 5f       	subi	r24, 0xFF	; 255
     d44:	86 17       	cp	r24, r22
     d46:	38 f3       	brcs	.-50     	; 0xd16 <USB_ProcessHIDReport+0x420>
     d48:	dc c1       	rjmp	.+952    	; 0x1102 <USB_ProcessHIDReport+0x80c>
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     d4a:	86 2f       	mov	r24, r22
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	ac 01       	movw	r20, r24
     d50:	e3 e0       	ldi	r30, 0x03	; 3
     d52:	44 0f       	add	r20, r20
     d54:	55 1f       	adc	r21, r21
     d56:	ea 95       	dec	r30
     d58:	e1 f7       	brne	.-8      	; 0xd52 <USB_ProcessHIDReport+0x45c>
     d5a:	48 1b       	sub	r20, r24
     d5c:	59 0b       	sbc	r21, r25
     d5e:	40 57       	subi	r20, 0x70	; 112
     d60:	5c 4f       	sbci	r21, 0xFC	; 252
     d62:	e5 96       	adiw	r28, 0x35	; 53
     d64:	8e ad       	ldd	r24, Y+62	; 0x3e
     d66:	9f ad       	ldd	r25, Y+63	; 0x3f
     d68:	e5 97       	sbiw	r28, 0x35	; 53
     d6a:	48 0f       	add	r20, r24
     d6c:	59 1f       	adc	r21, r25
     d6e:	6f 5f       	subi	r22, 0xFF	; 255
     d70:	cc 57       	subi	r28, 0x7C	; 124
     d72:	df 4f       	sbci	r29, 0xFF	; 255
     d74:	a8 81       	ld	r26, Y
     d76:	b9 81       	ldd	r27, Y+1	; 0x01
     d78:	c4 58       	subi	r28, 0x84	; 132
     d7a:	d0 40       	sbci	r29, 0x00	; 0
     d7c:	6c 93       	st	X, r22
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     d7e:	87 e0       	ldi	r24, 0x07	; 7
     d80:	da 01       	movw	r26, r20
     d82:	1d 92       	st	X+, r1
     d84:	8a 95       	dec	r24
     d86:	e9 f7       	brne	.-6      	; 0xd82 <USB_ProcessHIDReport+0x48c>
					}
				}

				ParserData->UsingReportIDs = true;
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	ce 57       	subi	r28, 0x7E	; 126
     d8c:	df 4f       	sbci	r29, 0xFF	; 255
     d8e:	e8 81       	ld	r30, Y
     d90:	f9 81       	ldd	r31, Y+1	; 0x01
     d92:	c2 58       	subi	r28, 0x82	; 130
     d94:	d0 40       	sbci	r29, 0x00	; 0
     d96:	60 83       	st	Z, r22

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     d98:	d9 01       	movw	r26, r18
     d9a:	5b 96       	adiw	r26, 0x1b	; 27
     d9c:	8c 91       	ld	r24, X
     d9e:	5b 97       	sbiw	r26, 0x1b	; 27
     da0:	fa 01       	movw	r30, r20
     da2:	80 83       	st	Z, r24
				break;
     da4:	65 c1       	rjmp	.+714    	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     da6:	fb 2d       	mov	r31, r11
     da8:	f8 30       	cpi	r31, 0x08	; 8
     daa:	09 f4       	brne	.+2      	; 0xdae <USB_ProcessHIDReport+0x4b8>
     dac:	85 c1       	rjmp	.+778    	; 0x10b8 <USB_ProcessHIDReport+0x7c2>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     dae:	eb 2d       	mov	r30, r11
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	6c 0f       	add	r22, r28
     dbc:	7d 1f       	adc	r23, r29
     dbe:	e6 0f       	add	r30, r22
     dc0:	f7 1f       	adc	r31, r23
     dc2:	f1 82       	std	Z+1, r15	; 0x01
     dc4:	e0 82       	st	Z, r14
     dc6:	b3 94       	inc	r11
				break;
     dc8:	53 c1       	rjmp	.+678    	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     dca:	e9 96       	adiw	r28, 0x39	; 57
     dcc:	ec ae       	std	Y+60, r14	; 0x3c
     dce:	fd ae       	std	Y+61, r15	; 0x3d
     dd0:	0e af       	std	Y+62, r16	; 0x3e
     dd2:	1f af       	std	Y+63, r17	; 0x3f
     dd4:	e9 97       	sbiw	r28, 0x39	; 57
     dd6:	4c c1       	rjmp	.+664    	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     dd8:	81 14       	cp	r8, r1
     dda:	91 04       	cpc	r9, r1
     ddc:	39 f4       	brne	.+14     	; 0xdec <USB_ProcessHIDReport+0x4f6>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     dde:	c2 57       	subi	r28, 0x72	; 114
     de0:	df 4f       	sbci	r29, 0xFF	; 255
     de2:	88 80       	ld	r8, Y
     de4:	99 80       	ldd	r9, Y+1	; 0x01
     de6:	ce 58       	subi	r28, 0x8E	; 142
     de8:	d0 40       	sbci	r29, 0x00	; 0
     dea:	19 c0       	rjmp	.+50     	; 0xe1e <USB_ProcessHIDReport+0x528>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     dec:	c6 57       	subi	r28, 0x76	; 118
     dee:	df 4f       	sbci	r29, 0xFF	; 255
     df0:	e8 81       	ld	r30, Y
     df2:	f9 81       	ldd	r31, Y+1	; 0x01
     df4:	ca 58       	subi	r28, 0x8A	; 138
     df6:	d0 40       	sbci	r29, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
     df8:	0b c0       	rjmp	.+22     	; 0xe10 <USB_ProcessHIDReport+0x51a>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     dfa:	c4 57       	subi	r28, 0x74	; 116
     dfc:	df 4f       	sbci	r29, 0xFF	; 255
     dfe:	88 81       	ld	r24, Y
     e00:	99 81       	ldd	r25, Y+1	; 0x01
     e02:	cc 58       	subi	r28, 0x8C	; 140
     e04:	d0 40       	sbci	r29, 0x00	; 0
     e06:	e8 17       	cp	r30, r24
     e08:	f9 07       	cpc	r31, r25
     e0a:	09 f4       	brne	.+2      	; 0xe0e <USB_ProcessHIDReport+0x518>
     e0c:	57 c1       	rjmp	.+686    	; 0x10bc <USB_ProcessHIDReport+0x7c6>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     e0e:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     e10:	85 81       	ldd	r24, Z+5	; 0x05
     e12:	96 81       	ldd	r25, Z+6	; 0x06
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	89 f7       	brne	.-30     	; 0xdfa <USB_ProcessHIDReport+0x504>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     e18:	96 82       	std	Z+6, r9	; 0x06
     e1a:	85 82       	std	Z+5, r8	; 0x05
     e1c:	4f 01       	movw	r8, r30
				}

				CurrCollectionPath->Type       = ReportItemData;
     e1e:	d4 01       	movw	r26, r8
     e20:	ec 92       	st	X, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     e22:	f9 01       	movw	r30, r18
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	92 81       	ldd	r25, Z+2	; 0x02
     e28:	12 96       	adiw	r26, 0x02	; 2
     e2a:	9c 93       	st	X, r25
     e2c:	8e 93       	st	-X, r24
     e2e:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
     e30:	bb 20       	and	r11, r11
     e32:	c1 f0       	breq	.+48     	; 0xe64 <USB_ProcessHIDReport+0x56e>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	9c 93       	st	X, r25
     e3c:	8e 93       	st	-X, r24
     e3e:	13 97       	sbiw	r26, 0x03	; 3
     e40:	fe 01       	movw	r30, r28
     e42:	31 96       	adiw	r30, 0x01	; 1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     e44:	8b 2d       	mov	r24, r11
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	8e 0f       	add	r24, r30
     e4e:	9f 1f       	adc	r25, r31

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     e50:	04 c0       	rjmp	.+8      	; 0xe5a <USB_ProcessHIDReport+0x564>
					  UsageList[i] = UsageList[i + 1];
     e52:	62 81       	ldd	r22, Z+2	; 0x02
     e54:	73 81       	ldd	r23, Z+3	; 0x03
     e56:	61 93       	st	Z+, r22
     e58:	71 93       	st	Z+, r23

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     e5a:	e8 17       	cp	r30, r24
     e5c:	f9 07       	cpc	r31, r25
     e5e:	c9 f7       	brne	.-14     	; 0xe52 <USB_ProcessHIDReport+0x55c>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     e60:	ba 94       	dec	r11
     e62:	06 c1       	rjmp	.+524    	; 0x1070 <USB_ProcessHIDReport+0x77a>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     e64:	e9 96       	adiw	r28, 0x39	; 57
     e66:	8c ad       	ldd	r24, Y+60	; 0x3c
     e68:	9d ad       	ldd	r25, Y+61	; 0x3d
     e6a:	ae ad       	ldd	r26, Y+62	; 0x3e
     e6c:	bf ad       	ldd	r27, Y+63	; 0x3f
     e6e:	e9 97       	sbiw	r28, 0x39	; 57
     e70:	84 15       	cp	r24, r4
     e72:	95 05       	cpc	r25, r5
     e74:	a6 05       	cpc	r26, r6
     e76:	b7 05       	cpc	r27, r7
     e78:	08 f4       	brcc	.+2      	; 0xe7c <USB_ProcessHIDReport+0x586>
     e7a:	fa c0       	rjmp	.+500    	; 0x1070 <USB_ProcessHIDReport+0x77a>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     e7c:	d4 01       	movw	r26, r8
     e7e:	14 96       	adiw	r26, 0x04	; 4
     e80:	5c 92       	st	X, r5
     e82:	4e 92       	st	-X, r4
     e84:	13 97       	sbiw	r26, 0x03	; 3
     e86:	08 94       	sec
     e88:	41 1c       	adc	r4, r1
     e8a:	51 1c       	adc	r5, r1
     e8c:	61 1c       	adc	r6, r1
     e8e:	71 1c       	adc	r7, r1
     e90:	ef c0       	rjmp	.+478    	; 0x1070 <USB_ProcessHIDReport+0x77a>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     e92:	81 14       	cp	r8, r1
     e94:	91 04       	cpc	r9, r1
     e96:	09 f4       	brne	.+2      	; 0xe9a <USB_ProcessHIDReport+0x5a4>
     e98:	13 c1       	rjmp	.+550    	; 0x10c0 <USB_ProcessHIDReport+0x7ca>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     e9a:	f4 01       	movw	r30, r8
     e9c:	85 80       	ldd	r8, Z+5	; 0x05
     e9e:	96 80       	ldd	r9, Z+6	; 0x06
				break;
     ea0:	e7 c0       	rjmp	.+462    	; 0x1070 <USB_ProcessHIDReport+0x77a>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     ea2:	de 01       	movw	r26, r28
     ea4:	59 96       	adiw	r26, 0x19	; 25
     ea6:	f7 01       	movw	r30, r14
     ea8:	8a e1       	ldi	r24, 0x1A	; 26
     eaa:	01 90       	ld	r0, Z+
     eac:	0d 92       	st	X+, r0
     eae:	81 50       	subi	r24, 0x01	; 1
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <USB_ProcessHIDReport+0x5b4>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     eb2:	5d 8b       	std	Y+21, r21	; 0x15
     eb4:	4c 8b       	std	Y+20, r20	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	8f 8a       	std	Y+23, r8	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     eba:	d7 01       	movw	r26, r14
     ebc:	5b 96       	adiw	r26, 0x1b	; 27
     ebe:	8c 91       	ld	r24, X
     ec0:	5b 97       	sbiw	r26, 0x1b	; 27
     ec2:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
     ec4:	bb 20       	and	r11, r11
     ec6:	b1 f0       	breq	.+44     	; 0xef4 <USB_ProcessHIDReport+0x5fe>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	9a 81       	ldd	r25, Y+2	; 0x02
     ecc:	9d 8f       	std	Y+29, r25	; 0x1d
     ece:	8c 8f       	std	Y+28, r24	; 0x1c
     ed0:	fe 01       	movw	r30, r28
     ed2:	31 96       	adiw	r30, 0x01	; 1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     ed4:	8b 2d       	mov	r24, r11
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	8e 0f       	add	r24, r30
     ede:	9f 1f       	adc	r25, r31

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <USB_ProcessHIDReport+0x5f4>
						  UsageList[i] = UsageList[i + 1];
     ee2:	22 81       	ldd	r18, Z+2	; 0x02
     ee4:	33 81       	ldd	r19, Z+3	; 0x03
     ee6:	21 93       	st	Z+, r18
     ee8:	31 93       	st	Z+, r19

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     eea:	e8 17       	cp	r30, r24
     eec:	f9 07       	cpc	r31, r25
     eee:	c9 f7       	brne	.-14     	; 0xee2 <USB_ProcessHIDReport+0x5ec>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     ef0:	ba 94       	dec	r11
     ef2:	12 c0       	rjmp	.+36     	; 0xf18 <USB_ProcessHIDReport+0x622>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     ef4:	e9 96       	adiw	r28, 0x39	; 57
     ef6:	8c ad       	ldd	r24, Y+60	; 0x3c
     ef8:	9d ad       	ldd	r25, Y+61	; 0x3d
     efa:	ae ad       	ldd	r26, Y+62	; 0x3e
     efc:	bf ad       	ldd	r27, Y+63	; 0x3f
     efe:	e9 97       	sbiw	r28, 0x39	; 57
     f00:	84 15       	cp	r24, r4
     f02:	95 05       	cpc	r25, r5
     f04:	a6 05       	cpc	r26, r6
     f06:	b7 05       	cpc	r27, r7
     f08:	38 f0       	brcs	.+14     	; 0xf18 <USB_ProcessHIDReport+0x622>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     f0a:	5d 8e       	std	Y+29, r5	; 0x1d
     f0c:	4c 8e       	std	Y+28, r4	; 0x1c
     f0e:	08 94       	sec
     f10:	41 1c       	adc	r4, r1
     f12:	51 1c       	adc	r5, r1
     f14:	61 1c       	adc	r6, r1
     f16:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     f18:	c1 58       	subi	r28, 0x81	; 129
     f1a:	df 4f       	sbci	r29, 0xFF	; 255
     f1c:	98 81       	ld	r25, Y
     f1e:	cf 57       	subi	r28, 0x7F	; 127
     f20:	d0 40       	sbci	r29, 0x00	; 0
     f22:	90 38       	cpi	r25, 0x80	; 128
     f24:	11 f4       	brne	.+4      	; 0xf2a <USB_ProcessHIDReport+0x634>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     f26:	1b 8a       	std	Y+19, r1	; 0x13
     f28:	0c c0       	rjmp	.+24     	; 0xf42 <USB_ProcessHIDReport+0x64c>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     f2a:	c1 58       	subi	r28, 0x81	; 129
     f2c:	df 4f       	sbci	r29, 0xFF	; 255
     f2e:	a8 81       	ld	r26, Y
     f30:	cf 57       	subi	r28, 0x7F	; 127
     f32:	d0 40       	sbci	r29, 0x00	; 0
     f34:	a0 39       	cpi	r26, 0x90	; 144
     f36:	19 f4       	brne	.+6      	; 0xf3e <USB_ProcessHIDReport+0x648>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     f38:	b1 e0       	ldi	r27, 0x01	; 1
     f3a:	bb 8b       	std	Y+19, r27	; 0x13
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <USB_ProcessHIDReport+0x64c>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     f3e:	e2 e0       	ldi	r30, 0x02	; 2
     f40:	eb 8b       	std	Y+19, r30	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     f42:	eb 89       	ldd	r30, Y+19	; 0x13
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	ec 0d       	add	r30, r12
     f4c:	fd 1d       	adc	r31, r13
     f4e:	81 81       	ldd	r24, Z+1	; 0x01
     f50:	92 81       	ldd	r25, Z+2	; 0x02
     f52:	9a 8b       	std	Y+18, r25	; 0x12
     f54:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     f56:	d7 01       	movw	r26, r14
     f58:	2c 91       	ld	r18, X
     f5a:	81 81       	ldd	r24, Z+1	; 0x01
     f5c:	92 81       	ldd	r25, Z+2	; 0x02
     f5e:	82 0f       	add	r24, r18
     f60:	91 1d       	adc	r25, r1
     f62:	92 83       	std	Z+2, r25	; 0x02
     f64:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     f66:	eb 89       	ldd	r30, Y+19	; 0x13
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	ec 0d       	add	r30, r12
     f70:	fd 1d       	adc	r31, r13
     f72:	c0 58       	subi	r28, 0x80	; 128
     f74:	df 4f       	sbci	r29, 0xFF	; 255
     f76:	a8 81       	ld	r26, Y
     f78:	b9 81       	ldd	r27, Y+1	; 0x01
     f7a:	c0 58       	subi	r28, 0x80	; 128
     f7c:	d0 40       	sbci	r29, 0x00	; 0
     f7e:	8d 91       	ld	r24, X+
     f80:	9c 91       	ld	r25, X
     f82:	11 97       	sbiw	r26, 0x01	; 1
     f84:	21 81       	ldd	r18, Z+1	; 0x01
     f86:	32 81       	ldd	r19, Z+2	; 0x02
     f88:	28 17       	cp	r18, r24
     f8a:	39 07       	cpc	r19, r25
     f8c:	08 f4       	brcc	.+2      	; 0xf90 <USB_ProcessHIDReport+0x69a>
     f8e:	9c 01       	movw	r18, r24
     f90:	c0 58       	subi	r28, 0x80	; 128
     f92:	df 4f       	sbci	r29, 0xFF	; 255
     f94:	e8 81       	ld	r30, Y
     f96:	f9 81       	ldd	r31, Y+1	; 0x01
     f98:	c0 58       	subi	r28, 0x80	; 128
     f9a:	d0 40       	sbci	r29, 0x00	; 0
     f9c:	31 83       	std	Z+1, r19	; 0x01
     f9e:	20 83       	st	Z, r18

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     fa0:	e5 96       	adiw	r28, 0x35	; 53
     fa2:	ae ad       	ldd	r26, Y+62	; 0x3e
     fa4:	bf ad       	ldd	r27, Y+63	; 0x3f
     fa6:	e5 97       	sbiw	r28, 0x35	; 53
     fa8:	8c 91       	ld	r24, X
     faa:	84 31       	cpi	r24, 0x14	; 20
     fac:	09 f4       	brne	.+2      	; 0xfb0 <USB_ProcessHIDReport+0x6ba>
     fae:	8a c0       	rjmp	.+276    	; 0x10c4 <USB_ProcessHIDReport+0x7ce>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	2a e2       	ldi	r18, 0x2A	; 42
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	82 9f       	mul	r24, r18
     fb8:	f0 01       	movw	r30, r0
     fba:	83 9f       	mul	r24, r19
     fbc:	f0 0d       	add	r31, r0
     fbe:	92 9f       	mul	r25, r18
     fc0:	f0 0d       	add	r31, r0
     fc2:	11 24       	eor	r1, r1
     fc4:	ea 0f       	add	r30, r26
     fc6:	fb 1f       	adc	r31, r27
     fc8:	31 96       	adiw	r30, 0x01	; 1
     fca:	de 01       	movw	r26, r28
     fcc:	51 96       	adiw	r26, 0x11	; 17
     fce:	8a e2       	ldi	r24, 0x2A	; 42
     fd0:	0d 90       	ld	r0, X+
     fd2:	01 92       	st	Z+, r0
     fd4:	81 50       	subi	r24, 0x01	; 1
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <USB_ProcessHIDReport+0x6da>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     fd8:	ca 57       	subi	r28, 0x7A	; 122
     fda:	df 4f       	sbci	r29, 0xFF	; 255
     fdc:	88 81       	ld	r24, Y
     fde:	99 81       	ldd	r25, Y+1	; 0x01
     fe0:	aa 81       	ldd	r26, Y+2	; 0x02
     fe2:	bb 81       	ldd	r27, Y+3	; 0x03
     fe4:	c6 58       	subi	r28, 0x86	; 134
     fe6:	d0 40       	sbci	r29, 0x00	; 0
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	a1 05       	cpc	r26, r1
     fec:	b1 05       	cpc	r27, r1
     fee:	a1 f5       	brne	.+104    	; 0x1058 <USB_ProcessHIDReport+0x762>
     ff0:	ce 01       	movw	r24, r28
     ff2:	41 96       	adiw	r24, 0x11	; 17
     ff4:	cc 56       	subi	r28, 0x6C	; 108
     ff6:	df 4f       	sbci	r29, 0xFF	; 255
     ff8:	48 83       	st	Y, r20
     ffa:	c4 59       	subi	r28, 0x94	; 148
     ffc:	d0 40       	sbci	r29, 0x00	; 0
     ffe:	cb 56       	subi	r28, 0x6B	; 107
    1000:	df 4f       	sbci	r29, 0xFF	; 255
    1002:	58 83       	st	Y, r21
    1004:	c5 59       	subi	r28, 0x95	; 149
    1006:	d0 40       	sbci	r29, 0x00	; 0
    1008:	ca 56       	subi	r28, 0x6A	; 106
    100a:	df 4f       	sbci	r29, 0xFF	; 255
    100c:	68 83       	st	Y, r22
    100e:	c6 59       	subi	r28, 0x96	; 150
    1010:	d0 40       	sbci	r29, 0x00	; 0
    1012:	c9 56       	subi	r28, 0x69	; 105
    1014:	df 4f       	sbci	r29, 0xFF	; 255
    1016:	78 83       	st	Y, r23
    1018:	c7 59       	subi	r28, 0x97	; 151
    101a:	d0 40       	sbci	r29, 0x00	; 0
    101c:	62 dc       	rcall	.-1852   	; 0x8e2 <CALLBACK_HIDParser_FilterHIDReportItem>
    101e:	cc 56       	subi	r28, 0x6C	; 108
    1020:	df 4f       	sbci	r29, 0xFF	; 255
    1022:	48 81       	ld	r20, Y
    1024:	c4 59       	subi	r28, 0x94	; 148
    1026:	d0 40       	sbci	r29, 0x00	; 0
    1028:	cb 56       	subi	r28, 0x6B	; 107
    102a:	df 4f       	sbci	r29, 0xFF	; 255
    102c:	58 81       	ld	r21, Y
    102e:	c5 59       	subi	r28, 0x95	; 149
    1030:	d0 40       	sbci	r29, 0x00	; 0
    1032:	ca 56       	subi	r28, 0x6A	; 106
    1034:	df 4f       	sbci	r29, 0xFF	; 255
    1036:	68 81       	ld	r22, Y
    1038:	c6 59       	subi	r28, 0x96	; 150
    103a:	d0 40       	sbci	r29, 0x00	; 0
    103c:	c9 56       	subi	r28, 0x69	; 105
    103e:	df 4f       	sbci	r29, 0xFF	; 255
    1040:	78 81       	ld	r23, Y
    1042:	c7 59       	subi	r28, 0x97	; 151
    1044:	d0 40       	sbci	r29, 0x00	; 0
    1046:	88 23       	and	r24, r24
    1048:	39 f0       	breq	.+14     	; 0x1058 <USB_ProcessHIDReport+0x762>
					  ParserData->TotalReportItems++;
    104a:	e5 96       	adiw	r28, 0x35	; 53
    104c:	ae ad       	ldd	r26, Y+62	; 0x3e
    104e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1050:	e5 97       	sbiw	r28, 0x35	; 53
    1052:	8c 91       	ld	r24, X
    1054:	8f 5f       	subi	r24, 0xFF	; 255
    1056:	8c 93       	st	X, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1058:	a3 94       	inc	r10
    105a:	f7 01       	movw	r30, r14
    105c:	82 8d       	ldd	r24, Z+26	; 0x1a
    105e:	a8 16       	cp	r10, r24
    1060:	08 f4       	brcc	.+2      	; 0x1064 <USB_ProcessHIDReport+0x76e>
    1062:	1f cf       	rjmp	.-450    	; 0xea2 <USB_ProcessHIDReport+0x5ac>
    1064:	97 01       	movw	r18, r14
    1066:	a6 01       	movw	r20, r12
    1068:	68 01       	movw	r12, r16
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <USB_ProcessHIDReport+0x77a>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    106c:	27 01       	movw	r4, r14
    106e:	38 01       	movw	r6, r16
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    1070:	eb 96       	adiw	r28, 0x3b	; 59
    1072:	8e ad       	ldd	r24, Y+62	; 0x3e
    1074:	9f ad       	ldd	r25, Y+63	; 0x3f
    1076:	eb 97       	sbiw	r28, 0x3b	; 59
    1078:	8c 70       	andi	r24, 0x0C	; 12
    107a:	90 70       	andi	r25, 0x00	; 0
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	51 f4       	brne	.+20     	; 0x1094 <USB_ProcessHIDReport+0x79e>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
    1080:	e9 96       	adiw	r28, 0x39	; 57
    1082:	1c ae       	std	Y+60, r1	; 0x3c
    1084:	1d ae       	std	Y+61, r1	; 0x3d
    1086:	1e ae       	std	Y+62, r1	; 0x3e
    1088:	1f ae       	std	Y+63, r1	; 0x3f
    108a:	e9 97       	sbiw	r28, 0x39	; 57
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
    108c:	44 24       	eor	r4, r4
    108e:	55 24       	eor	r5, r5
    1090:	32 01       	movw	r6, r4
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
    1092:	bb 24       	eor	r11, r11
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1094:	21 14       	cp	r2, r1
    1096:	31 04       	cpc	r3, r1
    1098:	09 f0       	breq	.+2      	; 0x109c <USB_ProcessHIDReport+0x7a6>
    109a:	c4 cc       	rjmp	.-1656   	; 0xa24 <USB_ProcessHIDReport+0x12e>
    109c:	e5 96       	adiw	r28, 0x35	; 53
    109e:	6e ad       	ldd	r22, Y+62	; 0x3e
    10a0:	7f ad       	ldd	r23, Y+63	; 0x3f
    10a2:	e5 97       	sbiw	r28, 0x35	; 53
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    10a4:	db 01       	movw	r26, r22
    10a6:	8c 91       	ld	r24, X
    10a8:	88 23       	and	r24, r24
    10aa:	71 f4       	brne	.+28     	; 0x10c8 <USB_ProcessHIDReport+0x7d2>
	  return HID_PARSE_NoUnfilteredReportItems;
    10ac:	88 e0       	ldi	r24, 0x08	; 8
    10ae:	0f c0       	rjmp	.+30     	; 0x10ce <USB_ProcessHIDReport+0x7d8>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	0d c0       	rjmp	.+26     	; 0x10ce <USB_ProcessHIDReport+0x7d8>

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	0b c0       	rjmp	.+22     	; 0x10ce <USB_ProcessHIDReport+0x7d8>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
    10b8:	86 e0       	ldi	r24, 0x06	; 6
    10ba:	09 c0       	rjmp	.+18     	; 0x10ce <USB_ProcessHIDReport+0x7d8>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
    10bc:	85 e0       	ldi	r24, 0x05	; 5
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <USB_ProcessHIDReport+0x7d8>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
    10c0:	84 e0       	ldi	r24, 0x04	; 4
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <USB_ProcessHIDReport+0x7d8>
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <USB_ProcessHIDReport+0x7d8>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <USB_ProcessHIDReport+0x7d8>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
    10cc:	87 e0       	ldi	r24, 0x07	; 7

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    10ce:	c7 56       	subi	r28, 0x67	; 103
    10d0:	df 4f       	sbci	r29, 0xFF	; 255
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	cf 90       	pop	r12
    10ec:	bf 90       	pop	r11
    10ee:	af 90       	pop	r10
    10f0:	9f 90       	pop	r9
    10f2:	8f 90       	pop	r8
    10f4:	7f 90       	pop	r7
    10f6:	6f 90       	pop	r6
    10f8:	5f 90       	pop	r5
    10fa:	4f 90       	pop	r4
    10fc:	3f 90       	pop	r3
    10fe:	2f 90       	pop	r2
    1100:	08 95       	ret
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    1102:	6a 30       	cpi	r22, 0x0A	; 10
    1104:	09 f0       	breq	.+2      	; 0x1108 <USB_ProcessHIDReport+0x812>
    1106:	21 ce       	rjmp	.-958    	; 0xd4a <USB_ProcessHIDReport+0x454>
    1108:	e1 cf       	rjmp	.-62     	; 0x10cc <USB_ProcessHIDReport+0x7d6>

0000110a <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    110a:	ef 92       	push	r14
    110c:	ff 92       	push	r15
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	fb 01       	movw	r30, r22
	if (ReportItem == NULL)
    1118:	30 97       	sbiw	r30, 0x00	; 0
    111a:	09 f4       	brne	.+2      	; 0x111e <USB_GetHIDReportItemInfo+0x14>
    111c:	4c c0       	rjmp	.+152    	; 0x11b6 <USB_GetHIDReportItemInfo+0xac>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    111e:	30 85       	ldd	r19, Z+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    1120:	60 81       	ld	r22, Z
    1122:	71 81       	ldd	r23, Z+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    1124:	25 81       	ldd	r18, Z+5	; 0x05
    1126:	22 23       	and	r18, r18
    1128:	31 f0       	breq	.+12     	; 0x1136 <USB_GetHIDReportItemInfo+0x2c>
	{
		if (ReportItem->ReportID != ReportData[0])
    112a:	dc 01       	movw	r26, r24
    112c:	4c 91       	ld	r20, X
    112e:	24 17       	cp	r18, r20
    1130:	09 f0       	breq	.+2      	; 0x1134 <USB_GetHIDReportItemInfo+0x2a>
    1132:	41 c0       	rjmp	.+130    	; 0x11b6 <USB_GetHIDReportItemInfo+0xac>
		  return false;

		ReportData++;
    1134:	01 96       	adiw	r24, 0x01	; 1
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1136:	c3 2f       	mov	r28, r19
    1138:	d0 e0       	ldi	r29, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    113a:	22 a1       	ldd	r18, Z+34	; 0x22
    113c:	33 a1       	ldd	r19, Z+35	; 0x23
    113e:	44 a1       	ldd	r20, Z+36	; 0x24
    1140:	55 a1       	ldd	r21, Z+37	; 0x25
    1142:	26 a3       	std	Z+38, r18	; 0x26
    1144:	37 a3       	std	Z+39, r19	; 0x27
    1146:	40 a7       	std	Z+40, r20	; 0x28
    1148:	51 a7       	std	Z+41, r21	; 0x29
	ReportItem->Value = 0;
    114a:	12 a2       	std	Z+34, r1	; 0x22
    114c:	13 a2       	std	Z+35, r1	; 0x23
    114e:	14 a2       	std	Z+36, r1	; 0x24
    1150:	15 a2       	std	Z+37, r1	; 0x25
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
    1152:	21 e0       	ldi	r18, 0x01	; 1
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    115a:	29 c0       	rjmp	.+82     	; 0x11ae <USB_GetHIDReportItemInfo+0xa4>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    115c:	db 01       	movw	r26, r22
    115e:	03 e0       	ldi	r16, 0x03	; 3
    1160:	b6 95       	lsr	r27
    1162:	a7 95       	ror	r26
    1164:	0a 95       	dec	r16
    1166:	e1 f7       	brne	.-8      	; 0x1160 <USB_GetHIDReportItemInfo+0x56>
    1168:	a8 0f       	add	r26, r24
    116a:	b9 1f       	adc	r27, r25
    116c:	ac 91       	ld	r26, X
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	17 e0       	ldi	r17, 0x07	; 7
    1172:	e1 2e       	mov	r14, r17
    1174:	f1 2c       	mov	r15, r1
    1176:	e6 22       	and	r14, r22
    1178:	f7 22       	and	r15, r23
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <USB_GetHIDReportItemInfo+0x76>
    117c:	b5 95       	asr	r27
    117e:	a7 95       	ror	r26
    1180:	ea 94       	dec	r14
    1182:	e2 f7       	brpl	.-8      	; 0x117c <USB_GetHIDReportItemInfo+0x72>
    1184:	a0 ff       	sbrs	r26, 0
    1186:	0c c0       	rjmp	.+24     	; 0x11a0 <USB_GetHIDReportItemInfo+0x96>
		  ReportItem->Value |= BitMask;
    1188:	e2 a0       	ldd	r14, Z+34	; 0x22
    118a:	f3 a0       	ldd	r15, Z+35	; 0x23
    118c:	04 a1       	ldd	r16, Z+36	; 0x24
    118e:	15 a1       	ldd	r17, Z+37	; 0x25
    1190:	e2 2a       	or	r14, r18
    1192:	f3 2a       	or	r15, r19
    1194:	04 2b       	or	r16, r20
    1196:	15 2b       	or	r17, r21
    1198:	e2 a2       	std	Z+34, r14	; 0x22
    119a:	f3 a2       	std	Z+35, r15	; 0x23
    119c:	04 a3       	std	Z+36, r16	; 0x24
    119e:	15 a3       	std	Z+37, r17	; 0x25

		CurrentBit++;
    11a0:	6f 5f       	subi	r22, 0xFF	; 255
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
		BitMask <<= 1;
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	44 1f       	adc	r20, r20
    11aa:	55 1f       	adc	r21, r21
    11ac:	21 97       	sbiw	r28, 0x01	; 1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    11ae:	20 97       	sbiw	r28, 0x00	; 0
    11b0:	a9 f6       	brne	.-86     	; 0x115c <USB_GetHIDReportItemInfo+0x52>

		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <USB_GetHIDReportItemInfo+0xae>
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;
    11b6:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	08 95       	ret

000011c6 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    11c6:	80 91 9e 00 	lds	r24, 0x009E
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	81 70       	andi	r24, 0x01	; 1
    11ce:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    11d0:	20 91 a0 00 	lds	r18, 0x00A0
    11d4:	2d 7f       	andi	r18, 0xFD	; 253
    11d6:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    11da:	20 91 9e 00 	lds	r18, 0x009E
    11de:	22 60       	ori	r18, 0x02	; 2
    11e0:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    11e4:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    11e8:	21 fd       	sbrc	r18, 1
    11ea:	fc cf       	rjmp	.-8      	; 0x11e4 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    11ec:	20 91 9e 00 	lds	r18, 0x009E
    11f0:	21 60       	ori	r18, 0x01	; 1
    11f2:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
    11f6:	10 92 f0 04 	sts	0x04F0, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    11fa:	20 91 a0 00 	lds	r18, 0x00A0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	20 72       	andi	r18, 0x20	; 32
    1202:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1204:	40 91 a0 00 	lds	r20, 0x00A0
    1208:	4f 7d       	andi	r20, 0xDF	; 223
    120a:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    120e:	40 91 9f 00 	lds	r20, 0x009F
    1212:	4f 7d       	andi	r20, 0xDF	; 223
    1214:	40 93 9f 00 	sts	0x009F, r20
    1218:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    121a:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    121e:	55 ff       	sbrs	r21, 5
    1220:	0b c0       	rjmp	.+22     	; 0x1238 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1222:	40 91 9f 00 	lds	r20, 0x009F
    1226:	4f 7d       	andi	r20, 0xDF	; 223
    1228:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    122c:	40 91 9f 00 	lds	r20, 0x009F
    1230:	4d 7f       	andi	r20, 0xFD	; 253
    1232:	40 93 9f 00 	sts	0x009F, r20
    1236:	08 c0       	rjmp	.+16     	; 0x1248 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1238:	ef ec       	ldi	r30, 0xCF	; 207
    123a:	f7 e0       	ldi	r31, 0x07	; 7
    123c:	31 97       	sbiw	r30, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <USB_Host_ResetDevice+0x76>
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <USB_Host_ResetDevice+0x7c>
    1242:	00 00       	nop
    1244:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    1246:	49 f7       	brne	.-46     	; 0x121a <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    1248:	21 15       	cp	r18, r1
    124a:	31 05       	cpc	r19, r1
    124c:	29 f0       	breq	.+10     	; 0x1258 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    124e:	20 91 a0 00 	lds	r18, 0x00A0
    1252:	20 62       	ori	r18, 0x20	; 32
    1254:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	29 f4       	brne	.+10     	; 0x1266 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    125c:	80 91 9e 00 	lds	r24, 0x009E
    1260:	8e 7f       	andi	r24, 0xFE	; 254
    1262:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1266:	80 91 a0 00 	lds	r24, 0x00A0
    126a:	82 60       	ori	r24, 0x02	; 2
    126c:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    1270:	08 95       	ret

00001272 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1272:	40 91 9e 00 	lds	r20, 0x009E
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	41 70       	andi	r20, 0x01	; 1
    127a:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    127c:	20 91 a0 00 	lds	r18, 0x00A0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	20 72       	andi	r18, 0x20	; 32
    1284:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1286:	90 91 a0 00 	lds	r25, 0x00A0
    128a:	9f 7d       	andi	r25, 0xDF	; 223
    128c:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1290:	90 91 9f 00 	lds	r25, 0x009F
    1294:	9f 7d       	andi	r25, 0xDF	; 223
    1296:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    129a:	90 91 9e 00 	lds	r25, 0x009E
    129e:	91 60       	ori	r25, 0x01	; 1
    12a0:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    12a4:	26 c0       	rjmp	.+76     	; 0x12f2 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    12a6:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    12aa:	95 ff       	sbrs	r25, 5
    12ac:	06 c0       	rjmp	.+12     	; 0x12ba <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12ae:	90 91 9f 00 	lds	r25, 0x009F
    12b2:	9f 7d       	andi	r25, 0xDF	; 223
    12b4:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    12b8:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    12ba:	90 91 fa 04 	lds	r25, 0x04FA
    12be:	91 30       	cpi	r25, 0x01	; 1
    12c0:	d9 f0       	breq	.+54     	; 0x12f8 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    12c2:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    12c6:	94 ff       	sbrs	r25, 4
    12c8:	09 c0       	rjmp	.+18     	; 0x12dc <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    12ca:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    12ce:	80 91 a6 00 	lds	r24, 0x00A6
    12d2:	8f 7e       	andi	r24, 0xEF	; 239
    12d4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    12d8:	82 e0       	ldi	r24, 0x02	; 2

			break;
    12da:	0f c0       	rjmp	.+30     	; 0x12fa <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    12dc:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
    12e0:	91 ff       	sbrs	r25, 1
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    12e4:	80 91 a6 00 	lds	r24, 0x00A6
    12e8:	8d 7f       	andi	r24, 0xFD	; 253
    12ea:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    12ee:	83 e0       	ldi	r24, 0x03	; 3

			break;
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    12f2:	88 23       	and	r24, r24
    12f4:	c1 f6       	brne	.-80     	; 0x12a6 <USB_Host_WaitMS+0x34>
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    12f8:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    12fa:	41 15       	cp	r20, r1
    12fc:	51 05       	cpc	r21, r1
    12fe:	29 f4       	brne	.+10     	; 0x130a <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1300:	90 91 9e 00 	lds	r25, 0x009E
    1304:	9e 7f       	andi	r25, 0xFE	; 254
    1306:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    130a:	21 15       	cp	r18, r1
    130c:	31 05       	cpc	r19, r1
    130e:	29 f0       	breq	.+10     	; 0x131a <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    1310:	90 91 a0 00 	lds	r25, 0x00A0
    1314:	90 62       	ori	r25, 0x20	; 32
    1316:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    131a:	08 95       	ret

0000131c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	28 97       	sbiw	r28, 0x08	; 8
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    1334:	80 91 fa 04 	lds	r24, 0x04FA
    1338:	85 30       	cpi	r24, 0x05	; 5
    133a:	09 f4       	brne	.+2      	; 0x133e <USB_Host_ProcessNextHostState+0x22>
    133c:	99 c0       	rjmp	.+306    	; 0x1470 <USB_Host_ProcessNextHostState+0x154>
    133e:	86 30       	cpi	r24, 0x06	; 6
    1340:	68 f4       	brcc	.+26     	; 0x135c <USB_Host_ProcessNextHostState+0x40>
    1342:	82 30       	cpi	r24, 0x02	; 2
    1344:	c1 f1       	breq	.+112    	; 0x13b6 <USB_Host_ProcessNextHostState+0x9a>
    1346:	83 30       	cpi	r24, 0x03	; 3
    1348:	18 f4       	brcc	.+6      	; 0x1350 <USB_Host_ProcessNextHostState+0x34>
    134a:	88 23       	and	r24, r24
    134c:	a1 f0       	breq	.+40     	; 0x1376 <USB_Host_ProcessNextHostState+0x5a>
    134e:	07 c1       	rjmp	.+526    	; 0x155e <USB_Host_ProcessNextHostState+0x242>
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	d9 f1       	breq	.+118    	; 0x13ca <USB_Host_ProcessNextHostState+0xae>
    1354:	84 30       	cpi	r24, 0x04	; 4
    1356:	09 f0       	breq	.+2      	; 0x135a <USB_Host_ProcessNextHostState+0x3e>
    1358:	02 c1       	rjmp	.+516    	; 0x155e <USB_Host_ProcessNextHostState+0x242>
    135a:	62 c0       	rjmp	.+196    	; 0x1420 <USB_Host_ProcessNextHostState+0x104>
    135c:	87 30       	cpi	r24, 0x07	; 7
    135e:	09 f4       	brne	.+2      	; 0x1362 <USB_Host_ProcessNextHostState+0x46>
    1360:	9e c0       	rjmp	.+316    	; 0x149e <USB_Host_ProcessNextHostState+0x182>
    1362:	87 30       	cpi	r24, 0x07	; 7
    1364:	08 f4       	brcc	.+2      	; 0x1368 <USB_Host_ProcessNextHostState+0x4c>
    1366:	8f c0       	rjmp	.+286    	; 0x1486 <USB_Host_ProcessNextHostState+0x16a>
    1368:	88 30       	cpi	r24, 0x08	; 8
    136a:	09 f4       	brne	.+2      	; 0x136e <USB_Host_ProcessNextHostState+0x52>
    136c:	b8 c0       	rjmp	.+368    	; 0x14de <USB_Host_ProcessNextHostState+0x1c2>
    136e:	89 30       	cpi	r24, 0x09	; 9
    1370:	09 f0       	breq	.+2      	; 0x1374 <USB_Host_ProcessNextHostState+0x58>
    1372:	f5 c0       	rjmp	.+490    	; 0x155e <USB_Host_ProcessNextHostState+0x242>
    1374:	d9 c0       	rjmp	.+434    	; 0x1528 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1376:	00 91 13 01 	lds	r16, 0x0113
    137a:	10 91 14 01 	lds	r17, 0x0114
    137e:	01 15       	cp	r16, r1
    1380:	11 05       	cpc	r17, r1
    1382:	09 f4       	brne	.+2      	; 0x1386 <USB_Host_ProcessNextHostState+0x6a>
    1384:	ec c0       	rjmp	.+472    	; 0x155e <USB_Host_ProcessNextHostState+0x242>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	74 df       	rcall	.-280    	; 0x1272 <USB_Host_WaitMS>
    138a:	68 2f       	mov	r22, r24
    138c:	88 23       	and	r24, r24
    138e:	31 f0       	breq	.+12     	; 0x139c <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
    1390:	80 91 12 01 	lds	r24, 0x0112
    1394:	80 93 fa 04 	sts	0x04FA, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    1398:	81 e0       	ldi	r24, 0x01	; 1
					break;
    139a:	d3 c0       	rjmp	.+422    	; 0x1542 <USB_Host_ProcessNextHostState+0x226>
				}

				if (!(--WaitMSRemaining))
    139c:	01 50       	subi	r16, 0x01	; 1
    139e:	10 40       	sbci	r17, 0x00	; 0
    13a0:	10 93 14 01 	sts	0x0114, r17
    13a4:	00 93 13 01 	sts	0x0113, r16
    13a8:	01 15       	cp	r16, r1
    13aa:	11 05       	cpc	r17, r1
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <USB_Host_ProcessNextHostState+0x94>
    13ae:	d7 c0       	rjmp	.+430    	; 0x155e <USB_Host_ProcessNextHostState+0x242>
				  USB_HostState = PostWaitState;
    13b0:	80 91 12 01 	lds	r24, 0x0112
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    13b6:	88 ee       	ldi	r24, 0xE8	; 232
    13b8:	93 e0       	ldi	r25, 0x03	; 3
    13ba:	90 93 14 01 	sts	0x0114, r25
    13be:	80 93 13 01 	sts	0x0113, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	80 93 fa 04 	sts	0x04FA, r24
			break;
    13c8:	ca c0       	rjmp	.+404    	; 0x155e <USB_Host_ProcessNextHostState+0x242>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    13ca:	80 91 13 01 	lds	r24, 0x0113
    13ce:	90 91 14 01 	lds	r25, 0x0114
    13d2:	9c 01       	movw	r18, r24
    13d4:	21 50       	subi	r18, 0x01	; 1
    13d6:	30 40       	sbci	r19, 0x00	; 0
    13d8:	30 93 14 01 	sts	0x0114, r19
    13dc:	20 93 13 01 	sts	0x0113, r18
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	39 f0       	breq	.+14     	; 0x13f2 <USB_Host_ProcessNextHostState+0xd6>
    13e4:	8f ec       	ldi	r24, 0xCF	; 207
    13e6:	97 e0       	ldi	r25, 0x07	; 7
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <USB_Host_ProcessNextHostState+0xcc>
    13ec:	00 c0       	rjmp	.+0      	; 0x13ee <USB_Host_ProcessNextHostState+0xd2>
    13ee:	00 00       	nop
    13f0:	b6 c0       	rjmp	.+364    	; 0x155e <USB_Host_ProcessNextHostState+0x242>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    13f2:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    13f4:	80 91 d8 00 	lds	r24, 0x00D8
    13f8:	80 61       	ori	r24, 0x10	; 16
    13fa:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    13fe:	80 91 dd 00 	lds	r24, 0x00DD
    1402:	8b 7f       	andi	r24, 0xFB	; 251
    1404:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    1408:	80 91 d7 00 	lds	r24, 0x00D7
    140c:	80 61       	ori	r24, 0x10	; 16
    140e:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    1412:	80 91 dd 00 	lds	r24, 0x00DD
    1416:	82 60       	ori	r24, 0x02	; 2
    1418:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    141c:	84 e0       	ldi	r24, 0x04	; 4
    141e:	d2 cf       	rjmp	.-92     	; 0x13c4 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1420:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    1424:	80 ff       	sbrs	r24, 0
    1426:	9b c0       	rjmp	.+310    	; 0x155e <USB_Host_ProcessNextHostState+0x242>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1428:	80 91 9f 00 	lds	r24, 0x009F
    142c:	8e 7f       	andi	r24, 0xFE	; 254
    142e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1432:	80 91 9f 00 	lds	r24, 0x009F
    1436:	8d 7f       	andi	r24, 0xFD	; 253
    1438:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    143c:	80 91 df 00 	lds	r24, 0x00DF
    1440:	8d 7f       	andi	r24, 0xFD	; 253
    1442:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1446:	80 91 de 00 	lds	r24, 0x00DE
    144a:	82 60       	ori	r24, 0x02	; 2
    144c:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1450:	80 91 9e 00 	lds	r24, 0x009E
    1454:	81 60       	ori	r24, 0x01	; 1
    1456:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    145a:	56 d1       	rcall	.+684    	; 0x1708 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    145c:	10 92 fa 04 	sts	0x04FA, r1
    1460:	84 e6       	ldi	r24, 0x64	; 100
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	90 93 14 01 	sts	0x0114, r25
    1468:	80 93 13 01 	sts	0x0113, r24
    146c:	85 e0       	ldi	r24, 0x05	; 5
    146e:	59 c0       	rjmp	.+178    	; 0x1522 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1470:	aa de       	rcall	.-684    	; 0x11c6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1472:	10 92 fa 04 	sts	0x04FA, r1
    1476:	88 ec       	ldi	r24, 0xC8	; 200
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	90 93 14 01 	sts	0x0114, r25
    147e:	80 93 13 01 	sts	0x0113, r24
    1482:	86 e0       	ldi	r24, 0x06	; 6
    1484:	4e c0       	rjmp	.+156    	; 0x1522 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	20 e4       	ldi	r18, 0x40	; 64
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	01 e0       	ldi	r16, 0x01	; 1
    1492:	d3 d0       	rcall	.+422    	; 0x163a <Pipe_ConfigurePipe>
    1494:	88 23       	and	r24, r24
    1496:	09 f4       	brne	.+2      	; 0x149a <USB_Host_ProcessNextHostState+0x17e>
    1498:	50 c0       	rjmp	.+160    	; 0x153a <USB_Host_ProcessNextHostState+0x21e>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    149a:	87 e0       	ldi	r24, 0x07	; 7
    149c:	93 cf       	rjmp	.-218    	; 0x13c4 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    149e:	a2 ef       	ldi	r26, 0xF2	; 242
    14a0:	b4 e0       	ldi	r27, 0x04	; 4
    14a2:	e8 e0       	ldi	r30, 0x08	; 8
    14a4:	f1 e0       	ldi	r31, 0x01	; 1
    14a6:	88 e0       	ldi	r24, 0x08	; 8
    14a8:	01 90       	ld	r0, Z+
    14aa:	0d 92       	st	X+, r0
    14ac:	81 50       	subi	r24, 0x01	; 1
    14ae:	e1 f7       	brne	.-8      	; 0x14a8 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14b0:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    14b4:	ce 01       	movw	r24, r28
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	4c d3       	rcall	.+1688   	; 0x1b52 <USB_Host_SendControlRequest>
    14ba:	68 2f       	mov	r22, r24
    14bc:	88 23       	and	r24, r24
    14be:	09 f0       	breq	.+2      	; 0x14c2 <USB_Host_ProcessNextHostState+0x1a6>
    14c0:	3f c0       	rjmp	.+126    	; 0x1540 <USB_Host_ProcessNextHostState+0x224>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    14c2:	88 85       	ldd	r24, Y+8	; 0x08
    14c4:	80 93 10 01 	sts	0x0110, r24

			USB_Host_ResetDevice();
    14c8:	7e de       	rcall	.-772    	; 0x11c6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    14ca:	10 92 fa 04 	sts	0x04FA, r1
    14ce:	88 ec       	ldi	r24, 0xC8	; 200
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	90 93 14 01 	sts	0x0114, r25
    14d6:	80 93 13 01 	sts	0x0113, r24
    14da:	88 e0       	ldi	r24, 0x08	; 8
    14dc:	22 c0       	rjmp	.+68     	; 0x1522 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    14de:	20 91 10 01 	lds	r18, 0x0110
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	01 e0       	ldi	r16, 0x01	; 1
    14ec:	a6 d0       	rcall	.+332    	; 0x163a <Pipe_ConfigurePipe>
    14ee:	88 23       	and	r24, r24
    14f0:	21 f1       	breq	.+72     	; 0x153a <USB_Host_ProcessNextHostState+0x21e>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    14f2:	a2 ef       	ldi	r26, 0xF2	; 242
    14f4:	b4 e0       	ldi	r27, 0x04	; 4
    14f6:	e0 e0       	ldi	r30, 0x00	; 0
    14f8:	f1 e0       	ldi	r31, 0x01	; 1
    14fa:	88 e0       	ldi	r24, 0x08	; 8
    14fc:	01 90       	ld	r0, Z+
    14fe:	0d 92       	st	X+, r0
    1500:	81 50       	subi	r24, 0x01	; 1
    1502:	e1 f7       	brne	.-8      	; 0x14fc <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	24 d3       	rcall	.+1608   	; 0x1b52 <USB_Host_SendControlRequest>
    150a:	68 2f       	mov	r22, r24
    150c:	88 23       	and	r24, r24
    150e:	c1 f4       	brne	.+48     	; 0x1540 <USB_Host_ProcessNextHostState+0x224>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1510:	10 92 fa 04 	sts	0x04FA, r1
    1514:	84 e6       	ldi	r24, 0x64	; 100
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	90 93 14 01 	sts	0x0114, r25
    151c:	80 93 13 01 	sts	0x0113, r24
    1520:	89 e0       	ldi	r24, 0x09	; 9
    1522:	80 93 12 01 	sts	0x0112, r24
			break;
    1526:	1b c0       	rjmp	.+54     	; 0x155e <USB_Host_ProcessNextHostState+0x242>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    152e:	8a e0       	ldi	r24, 0x0A	; 10
    1530:	80 93 fa 04 	sts	0x04FA, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    1534:	0e 94 c9 01 	call	0x392	; 0x392 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    1538:	12 c0       	rjmp	.+36     	; 0x155e <USB_Host_ProcessNextHostState+0x242>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    153a:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    153c:	84 e0       	ldi	r24, 0x04	; 4
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <USB_Host_ProcessNextHostState+0x226>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    1540:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    1542:	90 91 fa 04 	lds	r25, 0x04FA
    1546:	91 30       	cpi	r25, 0x01	; 1
    1548:	51 f0       	breq	.+20     	; 0x155e <USB_Host_ProcessNextHostState+0x242>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    154a:	0e 94 6d 02 	call	0x4da	; 0x4da <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    154e:	80 91 dd 00 	lds	r24, 0x00DD
    1552:	81 60       	ori	r24, 0x01	; 1
    1554:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1558:	0e 94 c3 01 	call	0x386	; 0x386 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    155c:	32 d1       	rcall	.+612    	; 0x17c2 <USB_ResetInterface>
	}
}
    155e:	28 96       	adiw	r28, 0x08	; 8
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	08 95       	ret

00001574 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1574:	8f 92       	push	r8
    1576:	9f 92       	push	r9
    1578:	bf 92       	push	r11
    157a:	cf 92       	push	r12
    157c:	df 92       	push	r13
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	0f 92       	push	r0
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	e8 2e       	mov	r14, r24
    1592:	4b 01       	movw	r8, r22
    1594:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1596:	80 91 aa 00 	lds	r24, 0x00AA
    159a:	8f 7c       	andi	r24, 0xCF	; 207
    159c:	80 61       	ori	r24, 0x10	; 16
    159e:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    15a2:	99 83       	std	Y+1, r25	; 0x01
    15a4:	c7 d0       	rcall	.+398    	; 0x1734 <Pipe_WaitUntilReady>
    15a6:	b8 2e       	mov	r11, r24
    15a8:	99 81       	ldd	r25, Y+1	; 0x01
    15aa:	88 23       	and	r24, r24
    15ac:	c1 f5       	brne	.+112    	; 0x161e <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    15ae:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    15b0:	01 15       	cp	r16, r1
    15b2:	11 05       	cpc	r17, r1
    15b4:	39 f0       	breq	.+14     	; 0x15c4 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    15b6:	f8 01       	movw	r30, r16
    15b8:	20 81       	ld	r18, Z
    15ba:	31 81       	ldd	r19, Z+1	; 0x01
    15bc:	82 1a       	sub	r8, r18
    15be:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    15c0:	e2 0e       	add	r14, r18
    15c2:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    15c4:	cc 24       	eor	r12, r12
    15c6:	dd 24       	eor	r13, r13
    15c8:	25 c0       	rjmp	.+74     	; 0x1614 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    15ca:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    15ce:	85 fd       	sbrc	r24, 5
    15d0:	16 c0       	rjmp	.+44     	; 0x15fe <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    15d2:	80 91 a6 00 	lds	r24, 0x00A6
    15d6:	8e 77       	andi	r24, 0x7E	; 126
    15d8:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    15dc:	01 15       	cp	r16, r1
    15de:	11 05       	cpc	r17, r1
    15e0:	51 f0       	breq	.+20     	; 0x15f6 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    15e2:	f8 01       	movw	r30, r16
    15e4:	80 81       	ld	r24, Z
    15e6:	91 81       	ldd	r25, Z+1	; 0x01
    15e8:	8c 0d       	add	r24, r12
    15ea:	9d 1d       	adc	r25, r13
    15ec:	91 83       	std	Z+1, r25	; 0x01
    15ee:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    15f0:	44 e0       	ldi	r20, 0x04	; 4
    15f2:	b4 2e       	mov	r11, r20
    15f4:	14 c0       	rjmp	.+40     	; 0x161e <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    15f6:	9e d0       	rcall	.+316    	; 0x1734 <Pipe_WaitUntilReady>
    15f8:	88 23       	and	r24, r24
    15fa:	61 f0       	breq	.+24     	; 0x1614 <Pipe_Read_Stream_LE+0xa0>
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    15fe:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1602:	f7 01       	movw	r30, r14
    1604:	81 93       	st	Z+, r24
    1606:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1608:	08 94       	sec
    160a:	81 08       	sbc	r8, r1
    160c:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    160e:	08 94       	sec
    1610:	c1 1c       	adc	r12, r1
    1612:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1614:	81 14       	cp	r8, r1
    1616:	91 04       	cpc	r9, r1
    1618:	c1 f6       	brne	.-80     	; 0x15ca <Pipe_Read_Stream_LE+0x56>
    161a:	01 c0       	rjmp	.+2      	; 0x161e <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    161c:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    161e:	8b 2d       	mov	r24, r11
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	ff 90       	pop	r15
    162c:	ef 90       	pop	r14
    162e:	df 90       	pop	r13
    1630:	cf 90       	pop	r12
    1632:	bf 90       	pop	r11
    1634:	9f 90       	pop	r9
    1636:	8f 90       	pop	r8
    1638:	08 95       	ret

0000163a <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    163a:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    163c:	58 2f       	mov	r21, r24
    163e:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    1640:	87 ff       	sbrs	r24, 7
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <Pipe_ConfigurePipe+0xe>
    1644:	80 e1       	ldi	r24, 0x10	; 16
    1646:	01 c0       	rjmp	.+2      	; 0x164a <Pipe_ConfigurePipe+0x10>
    1648:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    164a:	57 30       	cpi	r21, 0x07	; 7
    164c:	08 f0       	brcs	.+2      	; 0x1650 <Pipe_ConfigurePipe+0x16>
    164e:	59 c0       	rjmp	.+178    	; 0x1702 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    1650:	66 23       	and	r22, r22
    1652:	09 f4       	brne	.+2      	; 0x1656 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    1654:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1656:	4f 70       	andi	r20, 0x0F	; 15
    1658:	62 95       	swap	r22
    165a:	66 0f       	add	r22, r22
    165c:	66 0f       	add	r22, r22
    165e:	60 7c       	andi	r22, 0xC0	; 192
    1660:	64 2b       	or	r22, r20
    1662:	68 2b       	or	r22, r24
    1664:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1666:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1668:	84 2f       	mov	r24, r20
    166a:	8f 70       	andi	r24, 0x0F	; 15
    166c:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1670:	45 17       	cp	r20, r21
    1672:	a1 f4       	brne	.+40     	; 0x169c <Pipe_ConfigurePipe+0x62>
    1674:	88 e0       	ldi	r24, 0x08	; 8
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    167c:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1682:	82 17       	cp	r24, r18
    1684:	93 07       	cpc	r25, r19
    1686:	10 f4       	brcc	.+4      	; 0x168c <Pipe_ConfigurePipe+0x52>
    1688:	75 30       	cpi	r23, 0x05	; 5
    168a:	c1 f7       	brne	.-16     	; 0x167c <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    168c:	87 2f       	mov	r24, r23
    168e:	82 95       	swap	r24
    1690:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1692:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1694:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    1696:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    1698:	e0 e0       	ldi	r30, 0x00	; 0
    169a:	08 c0       	rjmp	.+16     	; 0x16ac <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    169c:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    16a0:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    16a4:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    16a8:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    16ac:	81 ff       	sbrs	r24, 1
    16ae:	20 c0       	rjmp	.+64     	; 0x16f0 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    16b0:	90 91 a9 00 	lds	r25, 0x00A9
    16b4:	9e 7f       	andi	r25, 0xFE	; 254
    16b6:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    16ba:	90 91 ab 00 	lds	r25, 0x00AB
    16be:	9d 7f       	andi	r25, 0xFD	; 253
    16c0:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    16c4:	90 91 a9 00 	lds	r25, 0x00A9
    16c8:	91 60       	ori	r25, 0x01	; 1
    16ca:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    16ce:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    16d2:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    16d6:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    16da:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    16de:	80 91 a9 00 	lds	r24, 0x00A9
    16e2:	80 62       	ori	r24, 0x20	; 32
    16e4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    16e8:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    16ec:	87 ff       	sbrs	r24, 7
    16ee:	09 c0       	rjmp	.+18     	; 0x1702 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    16f0:	4f 5f       	subi	r20, 0xFF	; 255
    16f2:	47 30       	cpi	r20, 0x07	; 7
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <Pipe_ConfigurePipe+0xbe>
    16f6:	b8 cf       	rjmp	.-144    	; 0x1668 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    16f8:	5f 70       	andi	r21, 0x0F	; 15
    16fa:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    1702:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1704:	0f 91       	pop	r16
    1706:	08 95       	ret

00001708 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    1708:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	98 2f       	mov	r25, r24
    1710:	9f 70       	andi	r25, 0x0F	; 15
    1712:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1716:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    171a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    171e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1722:	90 91 a9 00 	lds	r25, 0x00A9
    1726:	9e 7f       	andi	r25, 0xFE	; 254
    1728:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    172c:	8f 5f       	subi	r24, 0xFF	; 255
    172e:	87 30       	cpi	r24, 0x07	; 7
    1730:	71 f7       	brne	.-36     	; 0x170e <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1732:	08 95       	ret

00001734 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1734:	80 91 a2 00 	lds	r24, 0x00A2
    1738:	90 91 a3 00 	lds	r25, 0x00A3
}

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    173c:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    173e:	20 91 aa 00 	lds	r18, 0x00AA
    1742:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1744:	20 31       	cpi	r18, 0x10	; 16
    1746:	29 f4       	brne	.+10     	; 0x1752 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1748:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    174c:	20 ff       	sbrs	r18, 0
    174e:	05 c0       	rjmp	.+10     	; 0x175a <Pipe_WaitUntilReady+0x26>
    1750:	18 c0       	rjmp	.+48     	; 0x1782 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1752:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1756:	22 fd       	sbrc	r18, 2
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    175a:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    175e:	21 fd       	sbrc	r18, 1
    1760:	12 c0       	rjmp	.+36     	; 0x1786 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1762:	20 91 fa 04 	lds	r18, 0x04FA
    1766:	21 30       	cpi	r18, 0x01	; 1
    1768:	81 f0       	breq	.+32     	; 0x178a <Pipe_WaitUntilReady+0x56>
    176a:	20 91 a2 00 	lds	r18, 0x00A2
    176e:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1772:	28 17       	cp	r18, r24
    1774:	39 07       	cpc	r19, r25
    1776:	19 f3       	breq	.-58     	; 0x173e <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1778:	44 23       	and	r20, r20
    177a:	49 f0       	breq	.+18     	; 0x178e <Pipe_WaitUntilReady+0x5a>
    177c:	41 50       	subi	r20, 0x01	; 1
    177e:	c9 01       	movw	r24, r18
    1780:	de cf       	rjmp	.-68     	; 0x173e <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    178a:	82 e0       	ldi	r24, 0x02	; 2
    178c:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    178e:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    1790:	08 95       	ret

00001792 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1792:	75 d0       	rcall	.+234    	; 0x187e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1794:	7c d0       	rcall	.+248    	; 0x188e <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1796:	e0 ee       	ldi	r30, 0xE0	; 224
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	81 60       	ori	r24, 0x01	; 1
    179e:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    17a0:	e8 ed       	ldi	r30, 0xD8	; 216
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	8f 77       	andi	r24, 0x7F	; 127
    17a8:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    17aa:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    17ac:	a7 ed       	ldi	r26, 0xD7	; 215
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	8c 91       	ld	r24, X
    17b2:	8e 7f       	andi	r24, 0xFE	; 254
    17b4:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    17b6:	80 81       	ld	r24, Z
    17b8:	8f 7e       	andi	r24, 0xEF	; 239
    17ba:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    17bc:	10 92 f1 04 	sts	0x04F1, r1
}
    17c0:	08 95       	ret

000017c2 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    17c2:	5d d0       	rcall	.+186    	; 0x187e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    17c4:	64 d0       	rcall	.+200    	; 0x188e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    17c6:	80 91 d8 00 	lds	r24, 0x00D8
    17ca:	8f 77       	andi	r24, 0x7F	; 127
    17cc:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    17d0:	80 91 d8 00 	lds	r24, 0x00D8
    17d4:	80 68       	ori	r24, 0x80	; 128
    17d6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    17da:	80 91 d8 00 	lds	r24, 0x00D8
    17de:	8f 7d       	andi	r24, 0xDF	; 223
    17e0:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    17e4:	80 91 d7 00 	lds	r24, 0x00D7
    17e8:	8f 77       	andi	r24, 0x7F	; 127
    17ea:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    17ee:	8c e0       	ldi	r24, 0x0C	; 12
    17f0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    17f2:	8e e0       	ldi	r24, 0x0E	; 14
    17f4:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    17f6:	09 b4       	in	r0, 0x29	; 41
    17f8:	00 fe       	sbrs	r0, 0
    17fa:	fd cf       	rjmp	.-6      	; 0x17f6 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	80 93 fa 04 	sts	0x04FA, r24
	USB_Host_ConfigurationNumber = 0;
    1802:	10 92 f0 04 	sts	0x04F0, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1806:	80 e4       	ldi	r24, 0x40	; 64
    1808:	80 93 10 01 	sts	0x0110, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    180c:	80 91 d8 00 	lds	r24, 0x00D8
    1810:	80 64       	ori	r24, 0x40	; 64
    1812:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1816:	80 91 dd 00 	lds	r24, 0x00DD
    181a:	81 60       	ori	r24, 0x01	; 1
    181c:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1820:	80 91 dd 00 	lds	r24, 0x00DD
    1824:	84 60       	ori	r24, 0x04	; 4
    1826:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    182a:	80 91 d7 00 	lds	r24, 0x00D7
    182e:	8f 7e       	andi	r24, 0xEF	; 239
    1830:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1834:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    1836:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1838:	80 91 de 00 	lds	r24, 0x00DE
    183c:	81 60       	ori	r24, 0x01	; 1
    183e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1842:	80 91 de 00 	lds	r24, 0x00DE
    1846:	84 60       	ori	r24, 0x04	; 4
    1848:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    184c:	80 91 e0 00 	lds	r24, 0x00E0
    1850:	8e 7f       	andi	r24, 0xFE	; 254
    1852:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1856:	80 91 d8 00 	lds	r24, 0x00D8
    185a:	80 61       	ori	r24, 0x10	; 16
    185c:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1860:	08 95       	ret

00001862 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1862:	e8 ed       	ldi	r30, 0xD8	; 216
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	8f 7e       	andi	r24, 0xEF	; 239
    186a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    186c:	e7 ed       	ldi	r30, 0xD7	; 215
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	81 60       	ori	r24, 0x01	; 1
    1874:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	80 93 f1 04 	sts	0x04F1, r24

	USB_ResetInterface();
}
    187c:	a2 cf       	rjmp	.-188    	; 0x17c2 <USB_ResetInterface>

0000187e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    187e:	e8 ed       	ldi	r30, 0xD8	; 216
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8c 7f       	andi	r24, 0xFC	; 252
    1886:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1888:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    188c:	08 95       	ret

0000188e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    188e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1892:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1896:	08 95       	ret

00001898 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1898:	1f 92       	push	r1
    189a:	0f 92       	push	r0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	0f 92       	push	r0
    18a0:	0b b6       	in	r0, 0x3b	; 59
    18a2:	0f 92       	push	r0
    18a4:	11 24       	eor	r1, r1
    18a6:	2f 93       	push	r18
    18a8:	3f 93       	push	r19
    18aa:	4f 93       	push	r20
    18ac:	5f 93       	push	r21
    18ae:	6f 93       	push	r22
    18b0:	7f 93       	push	r23
    18b2:	8f 93       	push	r24
    18b4:	9f 93       	push	r25
    18b6:	af 93       	push	r26
    18b8:	bf 93       	push	r27
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    18be:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    18c2:	85 ff       	sbrs	r24, 5
    18c4:	0a c0       	rjmp	.+20     	; 0x18da <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    18c6:	80 91 a0 00 	lds	r24, 0x00A0
    18ca:	85 ff       	sbrs	r24, 5
    18cc:	06 c0       	rjmp	.+12     	; 0x18da <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    18ce:	80 91 9f 00 	lds	r24, 0x009F
    18d2:	8f 7d       	andi	r24, 0xDF	; 223
    18d4:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    18d8:	12 d1       	rcall	.+548    	; 0x1afe <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    18da:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    18de:	81 ff       	sbrs	r24, 1
    18e0:	16 c0       	rjmp	.+44     	; 0x190e <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    18e2:	80 91 a0 00 	lds	r24, 0x00A0
    18e6:	81 ff       	sbrs	r24, 1
    18e8:	12 c0       	rjmp	.+36     	; 0x190e <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    18ea:	80 91 9f 00 	lds	r24, 0x009F
    18ee:	8d 7f       	andi	r24, 0xFD	; 253
    18f0:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    18f4:	80 91 9f 00 	lds	r24, 0x009F
    18f8:	8e 7f       	andi	r24, 0xFE	; 254
    18fa:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    18fe:	80 91 a0 00 	lds	r24, 0x00A0
    1902:	8d 7f       	andi	r24, 0xFD	; 253
    1904:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1908:	0e 94 c3 01 	call	0x386	; 0x386 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    190c:	5a df       	rcall	.-332    	; 0x17c2 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    190e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1912:	81 ff       	sbrs	r24, 1
    1914:	17 c0       	rjmp	.+46     	; 0x1944 <__vector_10+0xac>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1916:	80 91 de 00 	lds	r24, 0x00DE
    191a:	81 ff       	sbrs	r24, 1
    191c:	13 c0       	rjmp	.+38     	; 0x1944 <__vector_10+0xac>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    191e:	80 91 df 00 	lds	r24, 0x00DF
    1922:	8d 7f       	andi	r24, 0xFD	; 253
    1924:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    1928:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    192a:	80 91 dd 00 	lds	r24, 0x00DD
    192e:	81 60       	ori	r24, 0x01	; 1
    1930:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	0e 94 4c 02 	call	0x498	; 0x498 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    193a:	0e 94 c3 01 	call	0x386	; 0x386 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	80 93 fa 04 	sts	0x04FA, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1944:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1948:	80 ff       	sbrs	r24, 0
    194a:	18 c0       	rjmp	.+48     	; 0x197c <__vector_10+0xe4>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    194c:	80 91 de 00 	lds	r24, 0x00DE
    1950:	80 ff       	sbrs	r24, 0
    1952:	14 c0       	rjmp	.+40     	; 0x197c <__vector_10+0xe4>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1954:	80 91 df 00 	lds	r24, 0x00DF
    1958:	8e 7f       	andi	r24, 0xFE	; 254
    195a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    195e:	80 91 de 00 	lds	r24, 0x00DE
    1962:	8e 7f       	andi	r24, 0xFE	; 254
    1964:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1968:	0e 94 bd 01 	call	0x37a	; 0x37a <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    196c:	80 91 a0 00 	lds	r24, 0x00A0
    1970:	82 60       	ori	r24, 0x02	; 2
    1972:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1976:	82 e0       	ldi	r24, 0x02	; 2
    1978:	80 93 fa 04 	sts	0x04FA, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    197c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1980:	82 ff       	sbrs	r24, 2
    1982:	10 c0       	rjmp	.+32     	; 0x19a4 <__vector_10+0x10c>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1984:	80 91 de 00 	lds	r24, 0x00DE
    1988:	82 ff       	sbrs	r24, 2
    198a:	0c c0       	rjmp	.+24     	; 0x19a4 <__vector_10+0x10c>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    198c:	80 91 df 00 	lds	r24, 0x00DF
    1990:	8b 7f       	andi	r24, 0xFB	; 251
    1992:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	0e 94 6d 02 	call	0x4da	; 0x4da <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    199e:	0e 94 c3 01 	call	0x386	; 0x386 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    19a2:	0f df       	rcall	.-482    	; 0x17c2 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    19a4:	ff 91       	pop	r31
    19a6:	ef 91       	pop	r30
    19a8:	bf 91       	pop	r27
    19aa:	af 91       	pop	r26
    19ac:	9f 91       	pop	r25
    19ae:	8f 91       	pop	r24
    19b0:	7f 91       	pop	r23
    19b2:	6f 91       	pop	r22
    19b4:	5f 91       	pop	r21
    19b6:	4f 91       	pop	r20
    19b8:	3f 91       	pop	r19
    19ba:	2f 91       	pop	r18
    19bc:	0f 90       	pop	r0
    19be:	0b be       	out	0x3b, r0	; 59
    19c0:	0f 90       	pop	r0
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	0f 90       	pop	r0
    19c6:	1f 90       	pop	r1
    19c8:	18 95       	reti

000019ca <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    19ca:	cf 92       	push	r12
    19cc:	df 92       	push	r13
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	29 97       	sbiw	r28, 0x09	; 9
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	6b 01       	movw	r12, r22
    19ec:	8a 01       	movw	r16, r20
    19ee:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    19f0:	90 e8       	ldi	r25, 0x80	; 128
    19f2:	90 93 f2 04 	sts	0x04F2, r25
    19f6:	96 e0       	ldi	r25, 0x06	; 6
    19f8:	90 93 f3 04 	sts	0x04F3, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1a02:	90 93 f5 04 	sts	0x04F5, r25
    1a06:	80 93 f4 04 	sts	0x04F4, r24
    1a0a:	10 92 f7 04 	sts	0x04F7, r1
    1a0e:	10 92 f6 04 	sts	0x04F6, r1
    1a12:	89 e0       	ldi	r24, 0x09	; 9
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	90 93 f9 04 	sts	0x04F9, r25
    1a1a:	80 93 f8 04 	sts	0x04F8, r24
    1a1e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1a22:	ce 01       	movw	r24, r28
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	95 d0       	rcall	.+298    	; 0x1b52 <USB_Host_SendControlRequest>
    1a28:	88 23       	and	r24, r24
    1a2a:	b9 f4       	brne	.+46     	; 0x1a5a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a30:	f6 01       	movw	r30, r12
    1a32:	91 83       	std	Z+1, r25	; 0x01
    1a34:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1a36:	e8 16       	cp	r14, r24
    1a38:	f9 06       	cpc	r15, r25
    1a3a:	70 f0       	brcs	.+28     	; 0x1a58 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1a3c:	90 93 f9 04 	sts	0x04F9, r25
    1a40:	80 93 f8 04 	sts	0x04F8, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1a44:	c8 01       	movw	r24, r16
    1a46:	85 d0       	rcall	.+266    	; 0x1b52 <USB_Host_SendControlRequest>
    1a48:	88 23       	and	r24, r24
    1a4a:	39 f4       	brne	.+14     	; 0x1a5a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	92 30       	cpi	r25, 0x02	; 2
    1a52:	19 f0       	breq	.+6      	; 0x1a5a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1a54:	86 e0       	ldi	r24, 0x06	; 6
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1a58:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1a5a:	29 96       	adiw	r28, 0x09	; 9
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	ff 90       	pop	r15
    1a70:	ef 90       	pop	r14
    1a72:	df 90       	pop	r13
    1a74:	cf 90       	pop	r12
    1a76:	08 95       	ret

00001a78 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1a78:	af 92       	push	r10
    1a7a:	bf 92       	push	r11
    1a7c:	cf 92       	push	r12
    1a7e:	df 92       	push	r13
    1a80:	ef 92       	push	r14
    1a82:	ff 92       	push	r15
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	8c 01       	movw	r16, r24
    1a8e:	eb 01       	movw	r28, r22
    1a90:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1a92:	23 c0       	rjmp	.+70     	; 0x1ada <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1a94:	e8 81       	ld	r30, Y
    1a96:	f9 81       	ldd	r31, Y+1	; 0x01
    1a98:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1a9a:	20 81       	ld	r18, Z
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	c7 01       	movw	r24, r14
    1aa0:	2e 15       	cp	r18, r14
    1aa2:	3f 05       	cpc	r19, r15
    1aa4:	08 f4       	brcc	.+2      	; 0x1aa8 <USB_GetNextDescriptorComp+0x30>
    1aa6:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1aa8:	e8 0f       	add	r30, r24
    1aaa:	f9 1f       	adc	r31, r25
    1aac:	f9 83       	std	Y+1, r31	; 0x01
    1aae:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	20 81       	ld	r18, Z
    1ab4:	31 81       	ldd	r19, Z+1	; 0x01
    1ab6:	28 1b       	sub	r18, r24
    1ab8:	39 0b       	sbc	r19, r25
    1aba:	31 83       	std	Z+1, r19	; 0x01
    1abc:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1abe:	88 81       	ld	r24, Y
    1ac0:	99 81       	ldd	r25, Y+1	; 0x01
    1ac2:	f6 01       	movw	r30, r12
    1ac4:	09 95       	icall
    1ac6:	82 30       	cpi	r24, 0x02	; 2
    1ac8:	41 f0       	breq	.+16     	; 0x1ada <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	69 f4       	brne	.+26     	; 0x1ae8 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    1ace:	a8 82       	st	Y, r10
    1ad0:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	f1 82       	std	Z+1, r15	; 0x01
    1ad6:	e0 82       	st	Z, r14
    1ad8:	07 c0       	rjmp	.+14     	; 0x1ae8 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1ada:	f8 01       	movw	r30, r16
    1adc:	e0 80       	ld	r14, Z
    1ade:	f1 80       	ldd	r15, Z+1	; 0x01
    1ae0:	e1 14       	cp	r14, r1
    1ae2:	f1 04       	cpc	r15, r1
    1ae4:	b9 f6       	brne	.-82     	; 0x1a94 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1ae6:	82 e0       	ldi	r24, 0x02	; 2
}
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	ff 90       	pop	r15
    1af2:	ef 90       	pop	r14
    1af4:	df 90       	pop	r13
    1af6:	cf 90       	pop	r12
    1af8:	bf 90       	pop	r11
    1afa:	af 90       	pop	r10
    1afc:	08 95       	ret

00001afe <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1afe:	08 95       	ret

00001b00 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1b08:	c8 ee       	ldi	r28, 0xE8	; 232
    1b0a:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1b0c:	07 c0       	rjmp	.+14     	; 0x1b1c <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	b0 db       	rcall	.-2208   	; 0x1272 <USB_Host_WaitMS>
    1b12:	88 23       	and	r24, r24
    1b14:	d1 f4       	brne	.+52     	; 0x1b4a <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1b16:	20 97       	sbiw	r28, 0x00	; 0
    1b18:	b9 f0       	breq	.+46     	; 0x1b48 <USB_Host_WaitForIOS+0x48>
    1b1a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1b1c:	11 23       	and	r17, r17
    1b1e:	29 f4       	brne	.+10     	; 0x1b2a <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1b20:	80 91 a6 00 	lds	r24, 0x00A6
    1b24:	83 ff       	sbrs	r24, 3
    1b26:	f3 cf       	rjmp	.-26     	; 0x1b0e <USB_Host_WaitForIOS+0xe>
    1b28:	0d c0       	rjmp	.+26     	; 0x1b44 <USB_Host_WaitForIOS+0x44>
    1b2a:	11 30       	cpi	r17, 0x01	; 1
    1b2c:	29 f4       	brne	.+10     	; 0x1b38 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1b2e:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1b32:	80 ff       	sbrs	r24, 0
    1b34:	ec cf       	rjmp	.-40     	; 0x1b0e <USB_Host_WaitForIOS+0xe>
    1b36:	06 c0       	rjmp	.+12     	; 0x1b44 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1b38:	12 30       	cpi	r17, 0x02	; 2
    1b3a:	49 f7       	brne	.-46     	; 0x1b0e <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1b3c:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1b40:	82 ff       	sbrs	r24, 2
    1b42:	e5 cf       	rjmp	.-54     	; 0x1b0e <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1b48:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	08 95       	ret

00001b52 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1b60:	e0 90 9e 00 	lds	r14, 0x009E
    1b64:	ff 24       	eor	r15, r15
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	e8 22       	and	r14, r24
    1b6a:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1b6c:	c0 91 f8 04 	lds	r28, 0x04F8
    1b70:	d0 91 f9 04 	lds	r29, 0x04F9
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1b74:	80 91 9e 00 	lds	r24, 0x009E
    1b78:	81 60       	ori	r24, 0x01	; 1
    1b7a:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	78 db       	rcall	.-2320   	; 0x1272 <USB_Host_WaitMS>
    1b82:	88 23       	and	r24, r24
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <USB_Host_SendControlRequest+0x36>
    1b86:	cb c0       	rjmp	.+406    	; 0x1d1e <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b88:	80 91 aa 00 	lds	r24, 0x00AA
    1b8c:	8f 7c       	andi	r24, 0xCF	; 207
    1b8e:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1b92:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1b96:	80 91 a6 00 	lds	r24, 0x00A6
    1b9a:	8f 7e       	andi	r24, 0xEF	; 239
    1b9c:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1ba0:	80 91 a9 00 	lds	r24, 0x00A9
    1ba4:	8f 7b       	andi	r24, 0xBF	; 191
    1ba6:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1baa:	e2 ef       	ldi	r30, 0xF2	; 242
    1bac:	f4 e0       	ldi	r31, 0x04	; 4

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1bae:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1bb0:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1bb4:	84 e0       	ldi	r24, 0x04	; 4
    1bb6:	ea 3f       	cpi	r30, 0xFA	; 250
    1bb8:	f8 07       	cpc	r31, r24
    1bba:	c9 f7       	brne	.-14     	; 0x1bae <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1bbc:	80 91 a6 00 	lds	r24, 0x00A6
    1bc0:	87 77       	andi	r24, 0x77	; 119
    1bc2:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	9b df       	rcall	.-202    	; 0x1b00 <USB_Host_WaitForIOS>
    1bca:	88 23       	and	r24, r24
    1bcc:	09 f0       	breq	.+2      	; 0x1bd0 <USB_Host_SendControlRequest+0x7e>
    1bce:	a7 c0       	rjmp	.+334    	; 0x1d1e <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1bd0:	80 91 a9 00 	lds	r24, 0x00A9
    1bd4:	80 64       	ori	r24, 0x40	; 64
    1bd6:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	4a db       	rcall	.-2412   	; 0x1272 <USB_Host_WaitMS>
    1bde:	88 23       	and	r24, r24
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <USB_Host_SendControlRequest+0x92>
    1be2:	9d c0       	rjmp	.+314    	; 0x1d1e <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1be4:	80 91 f2 04 	lds	r24, 0x04F2
    1be8:	87 ff       	sbrs	r24, 7
    1bea:	4f c0       	rjmp	.+158    	; 0x1c8a <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1bec:	80 91 aa 00 	lds	r24, 0x00AA
    1bf0:	8f 7c       	andi	r24, 0xCF	; 207
    1bf2:	80 61       	ori	r24, 0x10	; 16
    1bf4:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1bf8:	01 15       	cp	r16, r1
    1bfa:	11 05       	cpc	r17, r1
    1bfc:	61 f5       	brne	.+88     	; 0x1c56 <USB_Host_SendControlRequest+0x104>
    1bfe:	2d c0       	rjmp	.+90     	; 0x1c5a <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c00:	80 91 a9 00 	lds	r24, 0x00A9
    1c04:	8f 7b       	andi	r24, 0xBF	; 191
    1c06:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	79 df       	rcall	.-270    	; 0x1b00 <USB_Host_WaitForIOS>
    1c0e:	88 23       	and	r24, r24
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <USB_Host_SendControlRequest+0xc2>
    1c12:	85 c0       	rjmp	.+266    	; 0x1d1e <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c14:	80 91 f6 00 	lds	r24, 0x00F6
    1c18:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	49 f4       	brne	.+18     	; 0x1c32 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1c20:	c0 e0       	ldi	r28, 0x00	; 0
    1c22:	d0 e0       	ldi	r29, 0x00	; 0
    1c24:	06 c0       	rjmp	.+12     	; 0x1c32 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1c26:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	81 93       	st	Z+, r24
    1c2e:	8f 01       	movw	r16, r30
					DataLen--;
    1c30:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c32:	80 91 f6 00 	lds	r24, 0x00F6
    1c36:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	11 f0       	breq	.+4      	; 0x1c42 <USB_Host_SendControlRequest+0xf0>
    1c3e:	20 97       	sbiw	r28, 0x00	; 0
    1c40:	91 f7       	brne	.-28     	; 0x1c26 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c42:	80 91 a9 00 	lds	r24, 0x00A9
    1c46:	80 64       	ori	r24, 0x40	; 64
    1c48:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1c4c:	80 91 a6 00 	lds	r24, 0x00A6
    1c50:	8e 77       	andi	r24, 0x7E	; 126
    1c52:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1c56:	20 97       	sbiw	r28, 0x00	; 0
    1c58:	99 f6       	brne	.-90     	; 0x1c00 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c5a:	80 91 aa 00 	lds	r24, 0x00AA
    1c5e:	8f 7c       	andi	r24, 0xCF	; 207
    1c60:	80 62       	ori	r24, 0x20	; 32
    1c62:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c66:	80 91 a9 00 	lds	r24, 0x00A9
    1c6a:	8f 7b       	andi	r24, 0xBF	; 191
    1c6c:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c70:	82 e0       	ldi	r24, 0x02	; 2
    1c72:	46 df       	rcall	.-372    	; 0x1b00 <USB_Host_WaitForIOS>
    1c74:	88 23       	and	r24, r24
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <USB_Host_SendControlRequest+0x128>
    1c78:	52 c0       	rjmp	.+164    	; 0x1d1e <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1c7a:	80 91 a6 00 	lds	r24, 0x00A6
    1c7e:	8b 77       	andi	r24, 0x7B	; 123
    1c80:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	3c df       	rcall	.-392    	; 0x1b00 <USB_Host_WaitForIOS>
    1c88:	4a c0       	rjmp	.+148    	; 0x1d1e <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1c8a:	01 15       	cp	r16, r1
    1c8c:	11 05       	cpc	r17, r1
    1c8e:	99 f1       	breq	.+102    	; 0x1cf6 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c90:	80 91 aa 00 	lds	r24, 0x00AA
    1c94:	8f 7c       	andi	r24, 0xCF	; 207
    1c96:	80 62       	ori	r24, 0x20	; 32
    1c98:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c9c:	80 91 a9 00 	lds	r24, 0x00A9
    1ca0:	8f 7b       	andi	r24, 0xBF	; 191
    1ca2:	80 93 a9 00 	sts	0x00A9, r24
    1ca6:	1c c0       	rjmp	.+56     	; 0x1ce0 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	2a df       	rcall	.-428    	; 0x1b00 <USB_Host_WaitForIOS>
    1cac:	88 23       	and	r24, r24
    1cae:	b9 f5       	brne	.+110    	; 0x1d1e <USB_Host_SendControlRequest+0x1cc>
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	06 c0       	rjmp	.+12     	; 0x1cc0 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1cb4:	81 91       	ld	r24, Z+
    1cb6:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1cb8:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1cbc:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1cbe:	59 f0       	breq	.+22     	; 0x1cd6 <USB_Host_SendControlRequest+0x184>
    1cc0:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1cc2:	20 91 f6 00 	lds	r18, 0x00F6
    1cc6:	30 91 f7 00 	lds	r19, 0x00F7
    1cca:	80 91 10 01 	lds	r24, 0x0110
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	28 17       	cp	r18, r24
    1cd2:	39 07       	cpc	r19, r25
    1cd4:	78 f3       	brcs	.-34     	; 0x1cb4 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1cd6:	80 91 a6 00 	lds	r24, 0x00A6
    1cda:	8b 77       	andi	r24, 0x7B	; 123
    1cdc:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1ce0:	20 97       	sbiw	r28, 0x00	; 0
    1ce2:	11 f7       	brne	.-60     	; 0x1ca8 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	0c df       	rcall	.-488    	; 0x1b00 <USB_Host_WaitForIOS>
    1ce8:	88 23       	and	r24, r24
    1cea:	c9 f4       	brne	.+50     	; 0x1d1e <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1cec:	80 91 a9 00 	lds	r24, 0x00A9
    1cf0:	80 64       	ori	r24, 0x40	; 64
    1cf2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1cf6:	80 91 aa 00 	lds	r24, 0x00AA
    1cfa:	8f 7c       	andi	r24, 0xCF	; 207
    1cfc:	80 61       	ori	r24, 0x10	; 16
    1cfe:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d02:	80 91 a9 00 	lds	r24, 0x00A9
    1d06:	8f 7b       	andi	r24, 0xBF	; 191
    1d08:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	f8 de       	rcall	.-528    	; 0x1b00 <USB_Host_WaitForIOS>
    1d10:	88 23       	and	r24, r24
    1d12:	29 f4       	brne	.+10     	; 0x1d1e <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1d14:	90 91 a6 00 	lds	r25, 0x00A6
    1d18:	9e 77       	andi	r25, 0x7E	; 126
    1d1a:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d1e:	90 91 a9 00 	lds	r25, 0x00A9
    1d22:	90 64       	ori	r25, 0x40	; 64
    1d24:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1d28:	e1 14       	cp	r14, r1
    1d2a:	f1 04       	cpc	r15, r1
    1d2c:	29 f4       	brne	.+10     	; 0x1d38 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1d2e:	90 91 9e 00 	lds	r25, 0x009E
    1d32:	9e 7f       	andi	r25, 0xFE	; 254
    1d34:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1d3e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	ff 90       	pop	r15
    1d4c:	ef 90       	pop	r14
    1d4e:	08 95       	ret

00001d50 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1d50:	1f 93       	push	r17
    1d52:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1d54:	10 92 f2 04 	sts	0x04F2, r1
    1d58:	89 e0       	ldi	r24, 0x09	; 9
    1d5a:	80 93 f3 04 	sts	0x04F3, r24
    1d5e:	10 93 f4 04 	sts	0x04F4, r17
    1d62:	10 92 f5 04 	sts	0x04F5, r1
    1d66:	10 92 f7 04 	sts	0x04F7, r1
    1d6a:	10 92 f6 04 	sts	0x04F6, r1
    1d6e:	10 92 f9 04 	sts	0x04F9, r1
    1d72:	10 92 f8 04 	sts	0x04F8, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d76:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	e9 de       	rcall	.-558    	; 0x1b52 <USB_Host_SendControlRequest>
    1d80:	88 23       	and	r24, r24
    1d82:	49 f4       	brne	.+18     	; 0x1d96 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1d84:	10 93 f0 04 	sts	0x04F0, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1d88:	11 23       	and	r17, r17
    1d8a:	11 f0       	breq	.+4      	; 0x1d90 <USB_Host_SetDeviceConfiguration+0x40>
    1d8c:	9b e0       	ldi	r25, 0x0B	; 11
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <USB_Host_SetDeviceConfiguration+0x42>
    1d90:	9a e0       	ldi	r25, 0x0A	; 10
    1d92:	90 93 fa 04 	sts	0x04FA, r25
	}

	return ErrorCode;
}
    1d96:	1f 91       	pop	r17
    1d98:	08 95       	ret

00001d9a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1d9a:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1d9c:	10 91 a7 00 	lds	r17, 0x00A7
    1da0:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1da2:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1da6:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1daa:	b8 da       	rcall	.-2704   	; 0x131c <USB_Host_ProcessNextHostState>
    1dac:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1db0:	1f 91       	pop	r17
    1db2:	08 95       	ret

00001db4 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1db4:	90 91 c8 00 	lds	r25, 0x00C8
    1db8:	95 ff       	sbrs	r25, 5
    1dba:	fc cf       	rjmp	.-8      	; 0x1db4 <Serial_putchar>
				UDR1 = DataByte;
    1dbc:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	08 95       	ret

00001dc6 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1dc6:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1dca:	87 ff       	sbrs	r24, 7
    1dcc:	08 c0       	rjmp	.+16     	; 0x1dde <Serial_getchar+0x18>
    1dce:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1dd2:	87 ff       	sbrs	r24, 7
    1dd4:	07 c0       	rjmp	.+14     	; 0x1de4 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1dd6:	20 91 ce 00 	lds	r18, 0x00CE
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	05 c0       	rjmp	.+10     	; 0x1de8 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    1dde:	2e ef       	ldi	r18, 0xFE	; 254
    1de0:	3f ef       	ldi	r19, 0xFF	; 255
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1de4:	2f ef       	ldi	r18, 0xFF	; 255
    1de6:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1de8:	c9 01       	movw	r24, r18
    1dea:	08 95       	ret

00001dec <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1dec:	fc 01       	movw	r30, r24
	if (!(Stream))
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	51 f4       	brne	.+20     	; 0x1e06 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1df2:	eb ef       	ldi	r30, 0xFB	; 251
    1df4:	f4 e0       	ldi	r31, 0x04	; 4
    1df6:	f0 93 0a 05 	sts	0x050A, r31
    1dfa:	e0 93 09 05 	sts	0x0509, r30
		stdout = Stream;
    1dfe:	f0 93 0c 05 	sts	0x050C, r31
    1e02:	e0 93 0b 05 	sts	0x050B, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1e06:	8e e0       	ldi	r24, 0x0E	; 14
    1e08:	df 01       	movw	r26, r30
    1e0a:	1d 92       	st	X+, r1
    1e0c:	8a 95       	dec	r24
    1e0e:	e9 f7       	brne	.-6      	; 0x1e0a <Serial_CreateStream+0x1e>
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	83 83       	std	Z+3, r24	; 0x03
    1e14:	8a ed       	ldi	r24, 0xDA	; 218
    1e16:	9e e0       	ldi	r25, 0x0E	; 14
    1e18:	91 87       	std	Z+9, r25	; 0x09
    1e1a:	80 87       	std	Z+8, r24	; 0x08
    1e1c:	83 ee       	ldi	r24, 0xE3	; 227
    1e1e:	9e e0       	ldi	r25, 0x0E	; 14
    1e20:	93 87       	std	Z+11, r25	; 0x0b
    1e22:	82 87       	std	Z+10, r24	; 0x0a
}
    1e24:	08 95       	ret

00001e26 <fputc>:
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	8c 01       	movw	r16, r24
    1e30:	eb 01       	movw	r28, r22
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	81 ff       	sbrs	r24, 1
    1e36:	1b c0       	rjmp	.+54     	; 0x1e6e <fputc+0x48>
    1e38:	82 ff       	sbrs	r24, 2
    1e3a:	0d c0       	rjmp	.+26     	; 0x1e56 <fputc+0x30>
    1e3c:	2e 81       	ldd	r18, Y+6	; 0x06
    1e3e:	3f 81       	ldd	r19, Y+7	; 0x07
    1e40:	8c 81       	ldd	r24, Y+4	; 0x04
    1e42:	9d 81       	ldd	r25, Y+5	; 0x05
    1e44:	28 17       	cp	r18, r24
    1e46:	39 07       	cpc	r19, r25
    1e48:	64 f4       	brge	.+24     	; 0x1e62 <fputc+0x3c>
    1e4a:	e8 81       	ld	r30, Y
    1e4c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e4e:	01 93       	st	Z+, r16
    1e50:	f9 83       	std	Y+1, r31	; 0x01
    1e52:	e8 83       	st	Y, r30
    1e54:	06 c0       	rjmp	.+12     	; 0x1e62 <fputc+0x3c>
    1e56:	e8 85       	ldd	r30, Y+8	; 0x08
    1e58:	f9 85       	ldd	r31, Y+9	; 0x09
    1e5a:	80 2f       	mov	r24, r16
    1e5c:	09 95       	icall
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	31 f4       	brne	.+12     	; 0x1e6e <fputc+0x48>
    1e62:	8e 81       	ldd	r24, Y+6	; 0x06
    1e64:	9f 81       	ldd	r25, Y+7	; 0x07
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	9f 83       	std	Y+7, r25	; 0x07
    1e6a:	8e 83       	std	Y+6, r24	; 0x06
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <fputc+0x4c>
    1e6e:	0f ef       	ldi	r16, 0xFF	; 255
    1e70:	1f ef       	ldi	r17, 0xFF	; 255
    1e72:	c8 01       	movw	r24, r16
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	08 95       	ret

00001e7e <printf_P>:
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	fe 01       	movw	r30, r28
    1e88:	35 96       	adiw	r30, 0x05	; 5
    1e8a:	61 91       	ld	r22, Z+
    1e8c:	71 91       	ld	r23, Z+
    1e8e:	80 91 0b 05 	lds	r24, 0x050B
    1e92:	90 91 0c 05 	lds	r25, 0x050C
    1e96:	dc 01       	movw	r26, r24
    1e98:	13 96       	adiw	r26, 0x03	; 3
    1e9a:	2c 91       	ld	r18, X
    1e9c:	13 97       	sbiw	r26, 0x03	; 3
    1e9e:	28 60       	ori	r18, 0x08	; 8
    1ea0:	13 96       	adiw	r26, 0x03	; 3
    1ea2:	2c 93       	st	X, r18
    1ea4:	af 01       	movw	r20, r30
    1ea6:	42 d0       	rcall	.+132    	; 0x1f2c <vfprintf>
    1ea8:	e0 91 0b 05 	lds	r30, 0x050B
    1eac:	f0 91 0c 05 	lds	r31, 0x050C
    1eb0:	23 81       	ldd	r18, Z+3	; 0x03
    1eb2:	27 7f       	andi	r18, 0xF7	; 247
    1eb4:	23 83       	std	Z+3, r18	; 0x03
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <puts_P>:
    1ebc:	ef 92       	push	r14
    1ebe:	ff 92       	push	r15
    1ec0:	0f 93       	push	r16
    1ec2:	1f 93       	push	r17
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	8c 01       	movw	r16, r24
    1eca:	e0 91 0b 05 	lds	r30, 0x050B
    1ece:	f0 91 0c 05 	lds	r31, 0x050C
    1ed2:	83 81       	ldd	r24, Z+3	; 0x03
    1ed4:	81 ff       	sbrs	r24, 1
    1ed6:	20 c0       	rjmp	.+64     	; 0x1f18 <puts_P+0x5c>
    1ed8:	c0 e0       	ldi	r28, 0x00	; 0
    1eda:	d0 e0       	ldi	r29, 0x00	; 0
    1edc:	0c c0       	rjmp	.+24     	; 0x1ef6 <puts_P+0x3a>
    1ede:	db 01       	movw	r26, r22
    1ee0:	18 96       	adiw	r26, 0x08	; 8
    1ee2:	ed 91       	ld	r30, X+
    1ee4:	fc 91       	ld	r31, X
    1ee6:	19 97       	sbiw	r26, 0x09	; 9
    1ee8:	09 95       	icall
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	11 f0       	breq	.+4      	; 0x1ef2 <puts_P+0x36>
    1eee:	cf ef       	ldi	r28, 0xFF	; 255
    1ef0:	df ef       	ldi	r29, 0xFF	; 255
    1ef2:	0f 5f       	subi	r16, 0xFF	; 255
    1ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef6:	f8 01       	movw	r30, r16
    1ef8:	84 91       	lpm	r24, Z+
    1efa:	60 91 0b 05 	lds	r22, 0x050B
    1efe:	70 91 0c 05 	lds	r23, 0x050C
    1f02:	88 23       	and	r24, r24
    1f04:	61 f7       	brne	.-40     	; 0x1ede <puts_P+0x22>
    1f06:	db 01       	movw	r26, r22
    1f08:	18 96       	adiw	r26, 0x08	; 8
    1f0a:	ed 91       	ld	r30, X+
    1f0c:	fc 91       	ld	r31, X
    1f0e:	19 97       	sbiw	r26, 0x09	; 9
    1f10:	8a e0       	ldi	r24, 0x0A	; 10
    1f12:	09 95       	icall
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	11 f0       	breq	.+4      	; 0x1f1c <puts_P+0x60>
    1f18:	cf ef       	ldi	r28, 0xFF	; 255
    1f1a:	df ef       	ldi	r29, 0xFF	; 255
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	ff 90       	pop	r15
    1f28:	ef 90       	pop	r14
    1f2a:	08 95       	ret

00001f2c <vfprintf>:
    1f2c:	2f 92       	push	r2
    1f2e:	3f 92       	push	r3
    1f30:	4f 92       	push	r4
    1f32:	5f 92       	push	r5
    1f34:	6f 92       	push	r6
    1f36:	7f 92       	push	r7
    1f38:	8f 92       	push	r8
    1f3a:	9f 92       	push	r9
    1f3c:	af 92       	push	r10
    1f3e:	bf 92       	push	r11
    1f40:	cf 92       	push	r12
    1f42:	df 92       	push	r13
    1f44:	ef 92       	push	r14
    1f46:	ff 92       	push	r15
    1f48:	0f 93       	push	r16
    1f4a:	1f 93       	push	r17
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	2c 97       	sbiw	r28, 0x0c	; 12
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	6c 01       	movw	r12, r24
    1f62:	1b 01       	movw	r2, r22
    1f64:	8a 01       	movw	r16, r20
    1f66:	fc 01       	movw	r30, r24
    1f68:	17 82       	std	Z+7, r1	; 0x07
    1f6a:	16 82       	std	Z+6, r1	; 0x06
    1f6c:	83 81       	ldd	r24, Z+3	; 0x03
    1f6e:	81 ff       	sbrs	r24, 1
    1f70:	c4 c1       	rjmp	.+904    	; 0x22fa <__stack+0x1fb>
    1f72:	2e 01       	movw	r4, r28
    1f74:	08 94       	sec
    1f76:	41 1c       	adc	r4, r1
    1f78:	51 1c       	adc	r5, r1
    1f7a:	f6 01       	movw	r30, r12
    1f7c:	93 81       	ldd	r25, Z+3	; 0x03
    1f7e:	f1 01       	movw	r30, r2
    1f80:	93 fd       	sbrc	r25, 3
    1f82:	85 91       	lpm	r24, Z+
    1f84:	93 ff       	sbrs	r25, 3
    1f86:	81 91       	ld	r24, Z+
    1f88:	1f 01       	movw	r2, r30
    1f8a:	88 23       	and	r24, r24
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <vfprintf+0x64>
    1f8e:	b1 c1       	rjmp	.+866    	; 0x22f2 <__stack+0x1f3>
    1f90:	85 32       	cpi	r24, 0x25	; 37
    1f92:	39 f4       	brne	.+14     	; 0x1fa2 <vfprintf+0x76>
    1f94:	93 fd       	sbrc	r25, 3
    1f96:	85 91       	lpm	r24, Z+
    1f98:	93 ff       	sbrs	r25, 3
    1f9a:	81 91       	ld	r24, Z+
    1f9c:	1f 01       	movw	r2, r30
    1f9e:	85 32       	cpi	r24, 0x25	; 37
    1fa0:	21 f4       	brne	.+8      	; 0x1faa <vfprintf+0x7e>
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	b6 01       	movw	r22, r12
    1fa6:	3f df       	rcall	.-386    	; 0x1e26 <fputc>
    1fa8:	e8 cf       	rjmp	.-48     	; 0x1f7a <vfprintf+0x4e>
    1faa:	ee 24       	eor	r14, r14
    1fac:	ff 24       	eor	r15, r15
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	20 32       	cpi	r18, 0x20	; 32
    1fb2:	b0 f4       	brcc	.+44     	; 0x1fe0 <vfprintf+0xb4>
    1fb4:	8b 32       	cpi	r24, 0x2B	; 43
    1fb6:	69 f0       	breq	.+26     	; 0x1fd2 <vfprintf+0xa6>
    1fb8:	8c 32       	cpi	r24, 0x2C	; 44
    1fba:	28 f4       	brcc	.+10     	; 0x1fc6 <vfprintf+0x9a>
    1fbc:	80 32       	cpi	r24, 0x20	; 32
    1fbe:	51 f0       	breq	.+20     	; 0x1fd4 <vfprintf+0xa8>
    1fc0:	83 32       	cpi	r24, 0x23	; 35
    1fc2:	71 f4       	brne	.+28     	; 0x1fe0 <vfprintf+0xb4>
    1fc4:	0b c0       	rjmp	.+22     	; 0x1fdc <vfprintf+0xb0>
    1fc6:	8d 32       	cpi	r24, 0x2D	; 45
    1fc8:	39 f0       	breq	.+14     	; 0x1fd8 <vfprintf+0xac>
    1fca:	80 33       	cpi	r24, 0x30	; 48
    1fcc:	49 f4       	brne	.+18     	; 0x1fe0 <vfprintf+0xb4>
    1fce:	21 60       	ori	r18, 0x01	; 1
    1fd0:	2c c0       	rjmp	.+88     	; 0x202a <vfprintf+0xfe>
    1fd2:	22 60       	ori	r18, 0x02	; 2
    1fd4:	24 60       	ori	r18, 0x04	; 4
    1fd6:	29 c0       	rjmp	.+82     	; 0x202a <vfprintf+0xfe>
    1fd8:	28 60       	ori	r18, 0x08	; 8
    1fda:	27 c0       	rjmp	.+78     	; 0x202a <vfprintf+0xfe>
    1fdc:	20 61       	ori	r18, 0x10	; 16
    1fde:	25 c0       	rjmp	.+74     	; 0x202a <vfprintf+0xfe>
    1fe0:	27 fd       	sbrc	r18, 7
    1fe2:	2c c0       	rjmp	.+88     	; 0x203c <vfprintf+0x110>
    1fe4:	38 2f       	mov	r19, r24
    1fe6:	30 53       	subi	r19, 0x30	; 48
    1fe8:	3a 30       	cpi	r19, 0x0A	; 10
    1fea:	98 f4       	brcc	.+38     	; 0x2012 <vfprintf+0xe6>
    1fec:	26 ff       	sbrs	r18, 6
    1fee:	08 c0       	rjmp	.+16     	; 0x2000 <vfprintf+0xd4>
    1ff0:	8e 2d       	mov	r24, r14
    1ff2:	88 0f       	add	r24, r24
    1ff4:	e8 2e       	mov	r14, r24
    1ff6:	ee 0c       	add	r14, r14
    1ff8:	ee 0c       	add	r14, r14
    1ffa:	e8 0e       	add	r14, r24
    1ffc:	e3 0e       	add	r14, r19
    1ffe:	15 c0       	rjmp	.+42     	; 0x202a <vfprintf+0xfe>
    2000:	8f 2d       	mov	r24, r15
    2002:	88 0f       	add	r24, r24
    2004:	f8 2e       	mov	r15, r24
    2006:	ff 0c       	add	r15, r15
    2008:	ff 0c       	add	r15, r15
    200a:	f8 0e       	add	r15, r24
    200c:	f3 0e       	add	r15, r19
    200e:	20 62       	ori	r18, 0x20	; 32
    2010:	0c c0       	rjmp	.+24     	; 0x202a <vfprintf+0xfe>
    2012:	8e 32       	cpi	r24, 0x2E	; 46
    2014:	21 f4       	brne	.+8      	; 0x201e <vfprintf+0xf2>
    2016:	26 fd       	sbrc	r18, 6
    2018:	6c c1       	rjmp	.+728    	; 0x22f2 <__stack+0x1f3>
    201a:	20 64       	ori	r18, 0x40	; 64
    201c:	06 c0       	rjmp	.+12     	; 0x202a <vfprintf+0xfe>
    201e:	8c 36       	cpi	r24, 0x6C	; 108
    2020:	11 f4       	brne	.+4      	; 0x2026 <vfprintf+0xfa>
    2022:	20 68       	ori	r18, 0x80	; 128
    2024:	02 c0       	rjmp	.+4      	; 0x202a <vfprintf+0xfe>
    2026:	88 36       	cpi	r24, 0x68	; 104
    2028:	49 f4       	brne	.+18     	; 0x203c <vfprintf+0x110>
    202a:	f1 01       	movw	r30, r2
    202c:	93 fd       	sbrc	r25, 3
    202e:	85 91       	lpm	r24, Z+
    2030:	93 ff       	sbrs	r25, 3
    2032:	81 91       	ld	r24, Z+
    2034:	1f 01       	movw	r2, r30
    2036:	88 23       	and	r24, r24
    2038:	09 f0       	breq	.+2      	; 0x203c <vfprintf+0x110>
    203a:	ba cf       	rjmp	.-140    	; 0x1fb0 <vfprintf+0x84>
    203c:	98 2f       	mov	r25, r24
    203e:	95 54       	subi	r25, 0x45	; 69
    2040:	93 30       	cpi	r25, 0x03	; 3
    2042:	18 f0       	brcs	.+6      	; 0x204a <vfprintf+0x11e>
    2044:	90 52       	subi	r25, 0x20	; 32
    2046:	93 30       	cpi	r25, 0x03	; 3
    2048:	28 f4       	brcc	.+10     	; 0x2054 <vfprintf+0x128>
    204a:	0c 5f       	subi	r16, 0xFC	; 252
    204c:	1f 4f       	sbci	r17, 0xFF	; 255
    204e:	ff e3       	ldi	r31, 0x3F	; 63
    2050:	f9 83       	std	Y+1, r31	; 0x01
    2052:	0d c0       	rjmp	.+26     	; 0x206e <vfprintf+0x142>
    2054:	83 36       	cpi	r24, 0x63	; 99
    2056:	31 f0       	breq	.+12     	; 0x2064 <vfprintf+0x138>
    2058:	83 37       	cpi	r24, 0x73	; 115
    205a:	71 f0       	breq	.+28     	; 0x2078 <vfprintf+0x14c>
    205c:	83 35       	cpi	r24, 0x53	; 83
    205e:	09 f0       	breq	.+2      	; 0x2062 <vfprintf+0x136>
    2060:	5c c0       	rjmp	.+184    	; 0x211a <__stack+0x1b>
    2062:	21 c0       	rjmp	.+66     	; 0x20a6 <vfprintf+0x17a>
    2064:	f8 01       	movw	r30, r16
    2066:	80 81       	ld	r24, Z
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	0e 5f       	subi	r16, 0xFE	; 254
    206c:	1f 4f       	sbci	r17, 0xFF	; 255
    206e:	42 01       	movw	r8, r4
    2070:	71 e0       	ldi	r23, 0x01	; 1
    2072:	a7 2e       	mov	r10, r23
    2074:	b1 2c       	mov	r11, r1
    2076:	15 c0       	rjmp	.+42     	; 0x20a2 <vfprintf+0x176>
    2078:	62 e0       	ldi	r22, 0x02	; 2
    207a:	66 2e       	mov	r6, r22
    207c:	71 2c       	mov	r7, r1
    207e:	60 0e       	add	r6, r16
    2080:	71 1e       	adc	r7, r17
    2082:	f8 01       	movw	r30, r16
    2084:	80 80       	ld	r8, Z
    2086:	91 80       	ldd	r9, Z+1	; 0x01
    2088:	26 ff       	sbrs	r18, 6
    208a:	03 c0       	rjmp	.+6      	; 0x2092 <vfprintf+0x166>
    208c:	6e 2d       	mov	r22, r14
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <vfprintf+0x16a>
    2092:	6f ef       	ldi	r22, 0xFF	; 255
    2094:	7f ef       	ldi	r23, 0xFF	; 255
    2096:	c4 01       	movw	r24, r8
    2098:	2c 87       	std	Y+12, r18	; 0x0c
    209a:	56 d1       	rcall	.+684    	; 0x2348 <strnlen>
    209c:	5c 01       	movw	r10, r24
    209e:	83 01       	movw	r16, r6
    20a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    20a2:	2f 77       	andi	r18, 0x7F	; 127
    20a4:	16 c0       	rjmp	.+44     	; 0x20d2 <vfprintf+0x1a6>
    20a6:	52 e0       	ldi	r21, 0x02	; 2
    20a8:	65 2e       	mov	r6, r21
    20aa:	71 2c       	mov	r7, r1
    20ac:	60 0e       	add	r6, r16
    20ae:	71 1e       	adc	r7, r17
    20b0:	f8 01       	movw	r30, r16
    20b2:	80 80       	ld	r8, Z
    20b4:	91 80       	ldd	r9, Z+1	; 0x01
    20b6:	26 ff       	sbrs	r18, 6
    20b8:	03 c0       	rjmp	.+6      	; 0x20c0 <vfprintf+0x194>
    20ba:	6e 2d       	mov	r22, r14
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <vfprintf+0x198>
    20c0:	6f ef       	ldi	r22, 0xFF	; 255
    20c2:	7f ef       	ldi	r23, 0xFF	; 255
    20c4:	c4 01       	movw	r24, r8
    20c6:	2c 87       	std	Y+12, r18	; 0x0c
    20c8:	34 d1       	rcall	.+616    	; 0x2332 <strnlen_P>
    20ca:	5c 01       	movw	r10, r24
    20cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    20ce:	20 68       	ori	r18, 0x80	; 128
    20d0:	83 01       	movw	r16, r6
    20d2:	23 fd       	sbrc	r18, 3
    20d4:	1e c0       	rjmp	.+60     	; 0x2112 <__stack+0x13>
    20d6:	07 c0       	rjmp	.+14     	; 0x20e6 <vfprintf+0x1ba>
    20d8:	80 e2       	ldi	r24, 0x20	; 32
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	b6 01       	movw	r22, r12
    20de:	2c 87       	std	Y+12, r18	; 0x0c
    20e0:	a2 de       	rcall	.-700    	; 0x1e26 <fputc>
    20e2:	fa 94       	dec	r15
    20e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    20e6:	8f 2d       	mov	r24, r15
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a8 16       	cp	r10, r24
    20ec:	b9 06       	cpc	r11, r25
    20ee:	a0 f3       	brcs	.-24     	; 0x20d8 <vfprintf+0x1ac>
    20f0:	10 c0       	rjmp	.+32     	; 0x2112 <__stack+0x13>
    20f2:	f4 01       	movw	r30, r8
    20f4:	27 fd       	sbrc	r18, 7
    20f6:	85 91       	lpm	r24, Z+
    20f8:	27 ff       	sbrs	r18, 7
    20fa:	81 91       	ld	r24, Z+
    20fc:	4f 01       	movw	r8, r30
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	b6 01       	movw	r22, r12
    2102:	2c 87       	std	Y+12, r18	; 0x0c
    2104:	90 de       	rcall	.-736    	; 0x1e26 <fputc>
    2106:	2c 85       	ldd	r18, Y+12	; 0x0c
    2108:	f1 10       	cpse	r15, r1
    210a:	fa 94       	dec	r15
    210c:	08 94       	sec
    210e:	a1 08       	sbc	r10, r1
    2110:	b1 08       	sbc	r11, r1
    2112:	a1 14       	cp	r10, r1
    2114:	b1 04       	cpc	r11, r1
    2116:	69 f7       	brne	.-38     	; 0x20f2 <vfprintf+0x1c6>
    2118:	e9 c0       	rjmp	.+466    	; 0x22ec <__stack+0x1ed>
    211a:	84 36       	cpi	r24, 0x64	; 100
    211c:	11 f0       	breq	.+4      	; 0x2122 <__stack+0x23>
    211e:	89 36       	cpi	r24, 0x69	; 105
    2120:	41 f5       	brne	.+80     	; 0x2172 <__stack+0x73>
    2122:	27 ff       	sbrs	r18, 7
    2124:	08 c0       	rjmp	.+16     	; 0x2136 <__stack+0x37>
    2126:	f8 01       	movw	r30, r16
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	0c 5f       	subi	r16, 0xFC	; 252
    2132:	1f 4f       	sbci	r17, 0xFF	; 255
    2134:	09 c0       	rjmp	.+18     	; 0x2148 <__stack+0x49>
    2136:	f8 01       	movw	r30, r16
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	88 27       	eor	r24, r24
    213e:	77 fd       	sbrc	r23, 7
    2140:	80 95       	com	r24
    2142:	98 2f       	mov	r25, r24
    2144:	0e 5f       	subi	r16, 0xFE	; 254
    2146:	1f 4f       	sbci	r17, 0xFF	; 255
    2148:	4f e6       	ldi	r20, 0x6F	; 111
    214a:	b4 2e       	mov	r11, r20
    214c:	b2 22       	and	r11, r18
    214e:	97 ff       	sbrs	r25, 7
    2150:	09 c0       	rjmp	.+18     	; 0x2164 <__stack+0x65>
    2152:	90 95       	com	r25
    2154:	80 95       	com	r24
    2156:	70 95       	com	r23
    2158:	61 95       	neg	r22
    215a:	7f 4f       	sbci	r23, 0xFF	; 255
    215c:	8f 4f       	sbci	r24, 0xFF	; 255
    215e:	9f 4f       	sbci	r25, 0xFF	; 255
    2160:	f0 e8       	ldi	r31, 0x80	; 128
    2162:	bf 2a       	or	r11, r31
    2164:	a2 01       	movw	r20, r4
    2166:	2a e0       	ldi	r18, 0x0A	; 10
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	f9 d0       	rcall	.+498    	; 0x235e <__ultoa_invert>
    216c:	78 2e       	mov	r7, r24
    216e:	74 18       	sub	r7, r4
    2170:	44 c0       	rjmp	.+136    	; 0x21fa <__stack+0xfb>
    2172:	85 37       	cpi	r24, 0x75	; 117
    2174:	31 f4       	brne	.+12     	; 0x2182 <__stack+0x83>
    2176:	3f ee       	ldi	r19, 0xEF	; 239
    2178:	b3 2e       	mov	r11, r19
    217a:	b2 22       	and	r11, r18
    217c:	2a e0       	ldi	r18, 0x0A	; 10
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	25 c0       	rjmp	.+74     	; 0x21cc <__stack+0xcd>
    2182:	99 ef       	ldi	r25, 0xF9	; 249
    2184:	b9 2e       	mov	r11, r25
    2186:	b2 22       	and	r11, r18
    2188:	8f 36       	cpi	r24, 0x6F	; 111
    218a:	c1 f0       	breq	.+48     	; 0x21bc <__stack+0xbd>
    218c:	80 37       	cpi	r24, 0x70	; 112
    218e:	20 f4       	brcc	.+8      	; 0x2198 <__stack+0x99>
    2190:	88 35       	cpi	r24, 0x58	; 88
    2192:	09 f0       	breq	.+2      	; 0x2196 <__stack+0x97>
    2194:	ae c0       	rjmp	.+348    	; 0x22f2 <__stack+0x1f3>
    2196:	0d c0       	rjmp	.+26     	; 0x21b2 <__stack+0xb3>
    2198:	80 37       	cpi	r24, 0x70	; 112
    219a:	21 f0       	breq	.+8      	; 0x21a4 <__stack+0xa5>
    219c:	88 37       	cpi	r24, 0x78	; 120
    219e:	09 f0       	breq	.+2      	; 0x21a2 <__stack+0xa3>
    21a0:	a8 c0       	rjmp	.+336    	; 0x22f2 <__stack+0x1f3>
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <__stack+0xa9>
    21a4:	20 e1       	ldi	r18, 0x10	; 16
    21a6:	b2 2a       	or	r11, r18
    21a8:	b4 fe       	sbrs	r11, 4
    21aa:	0b c0       	rjmp	.+22     	; 0x21c2 <__stack+0xc3>
    21ac:	84 e0       	ldi	r24, 0x04	; 4
    21ae:	b8 2a       	or	r11, r24
    21b0:	08 c0       	rjmp	.+16     	; 0x21c2 <__stack+0xc3>
    21b2:	b4 fe       	sbrs	r11, 4
    21b4:	09 c0       	rjmp	.+18     	; 0x21c8 <__stack+0xc9>
    21b6:	e6 e0       	ldi	r30, 0x06	; 6
    21b8:	be 2a       	or	r11, r30
    21ba:	06 c0       	rjmp	.+12     	; 0x21c8 <__stack+0xc9>
    21bc:	28 e0       	ldi	r18, 0x08	; 8
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	05 c0       	rjmp	.+10     	; 0x21cc <__stack+0xcd>
    21c2:	20 e1       	ldi	r18, 0x10	; 16
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <__stack+0xcd>
    21c8:	20 e1       	ldi	r18, 0x10	; 16
    21ca:	32 e0       	ldi	r19, 0x02	; 2
    21cc:	b7 fe       	sbrs	r11, 7
    21ce:	08 c0       	rjmp	.+16     	; 0x21e0 <__stack+0xe1>
    21d0:	f8 01       	movw	r30, r16
    21d2:	60 81       	ld	r22, Z
    21d4:	71 81       	ldd	r23, Z+1	; 0x01
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	0c 5f       	subi	r16, 0xFC	; 252
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	07 c0       	rjmp	.+14     	; 0x21ee <__stack+0xef>
    21e0:	f8 01       	movw	r30, r16
    21e2:	60 81       	ld	r22, Z
    21e4:	71 81       	ldd	r23, Z+1	; 0x01
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0e 5f       	subi	r16, 0xFE	; 254
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	a2 01       	movw	r20, r4
    21f0:	b6 d0       	rcall	.+364    	; 0x235e <__ultoa_invert>
    21f2:	78 2e       	mov	r7, r24
    21f4:	74 18       	sub	r7, r4
    21f6:	ff e7       	ldi	r31, 0x7F	; 127
    21f8:	bf 22       	and	r11, r31
    21fa:	b6 fe       	sbrs	r11, 6
    21fc:	0b c0       	rjmp	.+22     	; 0x2214 <__stack+0x115>
    21fe:	2e ef       	ldi	r18, 0xFE	; 254
    2200:	b2 22       	and	r11, r18
    2202:	7e 14       	cp	r7, r14
    2204:	38 f4       	brcc	.+14     	; 0x2214 <__stack+0x115>
    2206:	b4 fe       	sbrs	r11, 4
    2208:	07 c0       	rjmp	.+14     	; 0x2218 <__stack+0x119>
    220a:	b2 fc       	sbrc	r11, 2
    220c:	05 c0       	rjmp	.+10     	; 0x2218 <__stack+0x119>
    220e:	8f ee       	ldi	r24, 0xEF	; 239
    2210:	b8 22       	and	r11, r24
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <__stack+0x119>
    2214:	a7 2c       	mov	r10, r7
    2216:	01 c0       	rjmp	.+2      	; 0x221a <__stack+0x11b>
    2218:	ae 2c       	mov	r10, r14
    221a:	8b 2d       	mov	r24, r11
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	b4 fe       	sbrs	r11, 4
    2220:	0d c0       	rjmp	.+26     	; 0x223c <__stack+0x13d>
    2222:	fe 01       	movw	r30, r28
    2224:	e7 0d       	add	r30, r7
    2226:	f1 1d       	adc	r31, r1
    2228:	20 81       	ld	r18, Z
    222a:	20 33       	cpi	r18, 0x30	; 48
    222c:	19 f4       	brne	.+6      	; 0x2234 <__stack+0x135>
    222e:	e9 ee       	ldi	r30, 0xE9	; 233
    2230:	be 22       	and	r11, r30
    2232:	09 c0       	rjmp	.+18     	; 0x2246 <__stack+0x147>
    2234:	a3 94       	inc	r10
    2236:	b2 fe       	sbrs	r11, 2
    2238:	06 c0       	rjmp	.+12     	; 0x2246 <__stack+0x147>
    223a:	04 c0       	rjmp	.+8      	; 0x2244 <__stack+0x145>
    223c:	86 78       	andi	r24, 0x86	; 134
    223e:	90 70       	andi	r25, 0x00	; 0
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	09 f0       	breq	.+2      	; 0x2246 <__stack+0x147>
    2244:	a3 94       	inc	r10
    2246:	8b 2c       	mov	r8, r11
    2248:	99 24       	eor	r9, r9
    224a:	b3 fc       	sbrc	r11, 3
    224c:	13 c0       	rjmp	.+38     	; 0x2274 <__stack+0x175>
    224e:	b0 fe       	sbrs	r11, 0
    2250:	0e c0       	rjmp	.+28     	; 0x226e <__stack+0x16f>
    2252:	af 14       	cp	r10, r15
    2254:	28 f4       	brcc	.+10     	; 0x2260 <__stack+0x161>
    2256:	e7 2c       	mov	r14, r7
    2258:	ef 0c       	add	r14, r15
    225a:	ea 18       	sub	r14, r10
    225c:	af 2c       	mov	r10, r15
    225e:	07 c0       	rjmp	.+14     	; 0x226e <__stack+0x16f>
    2260:	e7 2c       	mov	r14, r7
    2262:	05 c0       	rjmp	.+10     	; 0x226e <__stack+0x16f>
    2264:	80 e2       	ldi	r24, 0x20	; 32
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	b6 01       	movw	r22, r12
    226a:	dd dd       	rcall	.-1094   	; 0x1e26 <fputc>
    226c:	a3 94       	inc	r10
    226e:	af 14       	cp	r10, r15
    2270:	c8 f3       	brcs	.-14     	; 0x2264 <__stack+0x165>
    2272:	04 c0       	rjmp	.+8      	; 0x227c <__stack+0x17d>
    2274:	af 14       	cp	r10, r15
    2276:	10 f4       	brcc	.+4      	; 0x227c <__stack+0x17d>
    2278:	fa 18       	sub	r15, r10
    227a:	01 c0       	rjmp	.+2      	; 0x227e <__stack+0x17f>
    227c:	ff 24       	eor	r15, r15
    227e:	84 fe       	sbrs	r8, 4
    2280:	0e c0       	rjmp	.+28     	; 0x229e <__stack+0x19f>
    2282:	80 e3       	ldi	r24, 0x30	; 48
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	b6 01       	movw	r22, r12
    2288:	ce dd       	rcall	.-1124   	; 0x1e26 <fputc>
    228a:	82 fe       	sbrs	r8, 2
    228c:	1d c0       	rjmp	.+58     	; 0x22c8 <__stack+0x1c9>
    228e:	81 fe       	sbrs	r8, 1
    2290:	03 c0       	rjmp	.+6      	; 0x2298 <__stack+0x199>
    2292:	88 e5       	ldi	r24, 0x58	; 88
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	10 c0       	rjmp	.+32     	; 0x22b8 <__stack+0x1b9>
    2298:	88 e7       	ldi	r24, 0x78	; 120
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	0d c0       	rjmp	.+26     	; 0x22b8 <__stack+0x1b9>
    229e:	c4 01       	movw	r24, r8
    22a0:	86 78       	andi	r24, 0x86	; 134
    22a2:	90 70       	andi	r25, 0x00	; 0
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	81 f0       	breq	.+32     	; 0x22c8 <__stack+0x1c9>
    22a8:	81 fc       	sbrc	r8, 1
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <__stack+0x1b1>
    22ac:	80 e2       	ldi	r24, 0x20	; 32
    22ae:	01 c0       	rjmp	.+2      	; 0x22b2 <__stack+0x1b3>
    22b0:	8b e2       	ldi	r24, 0x2B	; 43
    22b2:	b7 fc       	sbrc	r11, 7
    22b4:	8d e2       	ldi	r24, 0x2D	; 45
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	b6 01       	movw	r22, r12
    22ba:	b5 dd       	rcall	.-1174   	; 0x1e26 <fputc>
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <__stack+0x1c9>
    22be:	80 e3       	ldi	r24, 0x30	; 48
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	b6 01       	movw	r22, r12
    22c4:	b0 dd       	rcall	.-1184   	; 0x1e26 <fputc>
    22c6:	ea 94       	dec	r14
    22c8:	7e 14       	cp	r7, r14
    22ca:	c8 f3       	brcs	.-14     	; 0x22be <__stack+0x1bf>
    22cc:	7a 94       	dec	r7
    22ce:	f2 01       	movw	r30, r4
    22d0:	e7 0d       	add	r30, r7
    22d2:	f1 1d       	adc	r31, r1
    22d4:	80 81       	ld	r24, Z
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	b6 01       	movw	r22, r12
    22da:	a5 dd       	rcall	.-1206   	; 0x1e26 <fputc>
    22dc:	77 20       	and	r7, r7
    22de:	b1 f7       	brne	.-20     	; 0x22cc <__stack+0x1cd>
    22e0:	05 c0       	rjmp	.+10     	; 0x22ec <__stack+0x1ed>
    22e2:	80 e2       	ldi	r24, 0x20	; 32
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	b6 01       	movw	r22, r12
    22e8:	9e dd       	rcall	.-1220   	; 0x1e26 <fputc>
    22ea:	fa 94       	dec	r15
    22ec:	ff 20       	and	r15, r15
    22ee:	c9 f7       	brne	.-14     	; 0x22e2 <__stack+0x1e3>
    22f0:	44 ce       	rjmp	.-888    	; 0x1f7a <vfprintf+0x4e>
    22f2:	f6 01       	movw	r30, r12
    22f4:	26 81       	ldd	r18, Z+6	; 0x06
    22f6:	37 81       	ldd	r19, Z+7	; 0x07
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <__stack+0x1ff>
    22fa:	2f ef       	ldi	r18, 0xFF	; 255
    22fc:	3f ef       	ldi	r19, 0xFF	; 255
    22fe:	c9 01       	movw	r24, r18
    2300:	2c 96       	adiw	r28, 0x0c	; 12
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	ff 90       	pop	r15
    2316:	ef 90       	pop	r14
    2318:	df 90       	pop	r13
    231a:	cf 90       	pop	r12
    231c:	bf 90       	pop	r11
    231e:	af 90       	pop	r10
    2320:	9f 90       	pop	r9
    2322:	8f 90       	pop	r8
    2324:	7f 90       	pop	r7
    2326:	6f 90       	pop	r6
    2328:	5f 90       	pop	r5
    232a:	4f 90       	pop	r4
    232c:	3f 90       	pop	r3
    232e:	2f 90       	pop	r2
    2330:	08 95       	ret

00002332 <strnlen_P>:
    2332:	fc 01       	movw	r30, r24
    2334:	05 90       	lpm	r0, Z+
    2336:	61 50       	subi	r22, 0x01	; 1
    2338:	70 40       	sbci	r23, 0x00	; 0
    233a:	01 10       	cpse	r0, r1
    233c:	d8 f7       	brcc	.-10     	; 0x2334 <strnlen_P+0x2>
    233e:	80 95       	com	r24
    2340:	90 95       	com	r25
    2342:	8e 0f       	add	r24, r30
    2344:	9f 1f       	adc	r25, r31
    2346:	08 95       	ret

00002348 <strnlen>:
    2348:	fc 01       	movw	r30, r24
    234a:	61 50       	subi	r22, 0x01	; 1
    234c:	70 40       	sbci	r23, 0x00	; 0
    234e:	01 90       	ld	r0, Z+
    2350:	01 10       	cpse	r0, r1
    2352:	d8 f7       	brcc	.-10     	; 0x234a <strnlen+0x2>
    2354:	80 95       	com	r24
    2356:	90 95       	com	r25
    2358:	8e 0f       	add	r24, r30
    235a:	9f 1f       	adc	r25, r31
    235c:	08 95       	ret

0000235e <__ultoa_invert>:
    235e:	fa 01       	movw	r30, r20
    2360:	aa 27       	eor	r26, r26
    2362:	28 30       	cpi	r18, 0x08	; 8
    2364:	51 f1       	breq	.+84     	; 0x23ba <__ultoa_invert+0x5c>
    2366:	20 31       	cpi	r18, 0x10	; 16
    2368:	81 f1       	breq	.+96     	; 0x23ca <__ultoa_invert+0x6c>
    236a:	e8 94       	clt
    236c:	6f 93       	push	r22
    236e:	6e 7f       	andi	r22, 0xFE	; 254
    2370:	6e 5f       	subi	r22, 0xFE	; 254
    2372:	7f 4f       	sbci	r23, 0xFF	; 255
    2374:	8f 4f       	sbci	r24, 0xFF	; 255
    2376:	9f 4f       	sbci	r25, 0xFF	; 255
    2378:	af 4f       	sbci	r26, 0xFF	; 255
    237a:	b1 e0       	ldi	r27, 0x01	; 1
    237c:	3e d0       	rcall	.+124    	; 0x23fa <__ultoa_invert+0x9c>
    237e:	b4 e0       	ldi	r27, 0x04	; 4
    2380:	3c d0       	rcall	.+120    	; 0x23fa <__ultoa_invert+0x9c>
    2382:	67 0f       	add	r22, r23
    2384:	78 1f       	adc	r23, r24
    2386:	89 1f       	adc	r24, r25
    2388:	9a 1f       	adc	r25, r26
    238a:	a1 1d       	adc	r26, r1
    238c:	68 0f       	add	r22, r24
    238e:	79 1f       	adc	r23, r25
    2390:	8a 1f       	adc	r24, r26
    2392:	91 1d       	adc	r25, r1
    2394:	a1 1d       	adc	r26, r1
    2396:	6a 0f       	add	r22, r26
    2398:	71 1d       	adc	r23, r1
    239a:	81 1d       	adc	r24, r1
    239c:	91 1d       	adc	r25, r1
    239e:	a1 1d       	adc	r26, r1
    23a0:	20 d0       	rcall	.+64     	; 0x23e2 <__ultoa_invert+0x84>
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <__ultoa_invert+0x48>
    23a4:	68 94       	set
    23a6:	3f 91       	pop	r19
    23a8:	2a e0       	ldi	r18, 0x0A	; 10
    23aa:	26 9f       	mul	r18, r22
    23ac:	11 24       	eor	r1, r1
    23ae:	30 19       	sub	r19, r0
    23b0:	30 5d       	subi	r19, 0xD0	; 208
    23b2:	31 93       	st	Z+, r19
    23b4:	de f6       	brtc	.-74     	; 0x236c <__ultoa_invert+0xe>
    23b6:	cf 01       	movw	r24, r30
    23b8:	08 95       	ret
    23ba:	46 2f       	mov	r20, r22
    23bc:	47 70       	andi	r20, 0x07	; 7
    23be:	40 5d       	subi	r20, 0xD0	; 208
    23c0:	41 93       	st	Z+, r20
    23c2:	b3 e0       	ldi	r27, 0x03	; 3
    23c4:	0f d0       	rcall	.+30     	; 0x23e4 <__ultoa_invert+0x86>
    23c6:	c9 f7       	brne	.-14     	; 0x23ba <__ultoa_invert+0x5c>
    23c8:	f6 cf       	rjmp	.-20     	; 0x23b6 <__ultoa_invert+0x58>
    23ca:	46 2f       	mov	r20, r22
    23cc:	4f 70       	andi	r20, 0x0F	; 15
    23ce:	40 5d       	subi	r20, 0xD0	; 208
    23d0:	4a 33       	cpi	r20, 0x3A	; 58
    23d2:	18 f0       	brcs	.+6      	; 0x23da <__ultoa_invert+0x7c>
    23d4:	49 5d       	subi	r20, 0xD9	; 217
    23d6:	31 fd       	sbrc	r19, 1
    23d8:	40 52       	subi	r20, 0x20	; 32
    23da:	41 93       	st	Z+, r20
    23dc:	02 d0       	rcall	.+4      	; 0x23e2 <__ultoa_invert+0x84>
    23de:	a9 f7       	brne	.-22     	; 0x23ca <__ultoa_invert+0x6c>
    23e0:	ea cf       	rjmp	.-44     	; 0x23b6 <__ultoa_invert+0x58>
    23e2:	b4 e0       	ldi	r27, 0x04	; 4
    23e4:	a6 95       	lsr	r26
    23e6:	97 95       	ror	r25
    23e8:	87 95       	ror	r24
    23ea:	77 95       	ror	r23
    23ec:	67 95       	ror	r22
    23ee:	ba 95       	dec	r27
    23f0:	c9 f7       	brne	.-14     	; 0x23e4 <__ultoa_invert+0x86>
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	61 05       	cpc	r22, r1
    23f6:	71 05       	cpc	r23, r1
    23f8:	08 95       	ret
    23fa:	9b 01       	movw	r18, r22
    23fc:	ac 01       	movw	r20, r24
    23fe:	0a 2e       	mov	r0, r26
    2400:	06 94       	lsr	r0
    2402:	57 95       	ror	r21
    2404:	47 95       	ror	r20
    2406:	37 95       	ror	r19
    2408:	27 95       	ror	r18
    240a:	ba 95       	dec	r27
    240c:	c9 f7       	brne	.-14     	; 0x2400 <__ultoa_invert+0xa2>
    240e:	62 0f       	add	r22, r18
    2410:	73 1f       	adc	r23, r19
    2412:	84 1f       	adc	r24, r20
    2414:	95 1f       	adc	r25, r21
    2416:	a0 1d       	adc	r26, r0
    2418:	08 95       	ret

0000241a <_exit>:
    241a:	f8 94       	cli

0000241c <__stop_program>:
    241c:	ff cf       	rjmp	.-2      	; 0x241c <__stop_program>
