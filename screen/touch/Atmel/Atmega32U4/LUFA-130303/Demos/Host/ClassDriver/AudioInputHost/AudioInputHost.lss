
AudioInputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001a0a  00001a9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800124  00800124  00001ac2  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ddb  00000000  00000000  00003dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000788  00000000  00000000  00004baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000114e  00000000  00000000  00005337  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ce76  00000000  00000000  00006485  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d55  00000000  00000000  000132fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009a78  00000000  00000000  00016050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c70  00000000  00000000  0001fac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004f5f  00000000  00000000  00020738  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000071bd  00000000  00000000  00025697  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001eef  00000000  00000000  0002c854  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a18  00000000  00000000  0002e743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2d c1       	rjmp	.+602    	; 0x25c <__ctors_end>
       2:	00 00       	nop
       4:	49 c1       	rjmp	.+658    	; 0x298 <__bad_interrupt>
       6:	00 00       	nop
       8:	47 c1       	rjmp	.+654    	; 0x298 <__bad_interrupt>
       a:	00 00       	nop
       c:	45 c1       	rjmp	.+650    	; 0x298 <__bad_interrupt>
       e:	00 00       	nop
      10:	43 c1       	rjmp	.+646    	; 0x298 <__bad_interrupt>
      12:	00 00       	nop
      14:	41 c1       	rjmp	.+642    	; 0x298 <__bad_interrupt>
      16:	00 00       	nop
      18:	3f c1       	rjmp	.+638    	; 0x298 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3d c1       	rjmp	.+634    	; 0x298 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3b c1       	rjmp	.+630    	; 0x298 <__bad_interrupt>
      22:	00 00       	nop
      24:	39 c1       	rjmp	.+626    	; 0x298 <__bad_interrupt>
      26:	00 00       	nop
      28:	cd c5       	rjmp	.+2970   	; 0xbc4 <__vector_10>
      2a:	00 00       	nop
      2c:	35 c1       	rjmp	.+618    	; 0x298 <__bad_interrupt>
      2e:	00 00       	nop
      30:	33 c1       	rjmp	.+614    	; 0x298 <__bad_interrupt>
      32:	00 00       	nop
      34:	31 c1       	rjmp	.+610    	; 0x298 <__bad_interrupt>
      36:	00 00       	nop
      38:	2f c1       	rjmp	.+606    	; 0x298 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2d c1       	rjmp	.+602    	; 0x298 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2b c1       	rjmp	.+598    	; 0x298 <__bad_interrupt>
      42:	00 00       	nop
      44:	29 c1       	rjmp	.+594    	; 0x298 <__bad_interrupt>
      46:	00 00       	nop
      48:	27 c1       	rjmp	.+590    	; 0x298 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	25 c1       	rjmp	.+586    	; 0x298 <__bad_interrupt>
      4e:	00 00       	nop
      50:	23 c1       	rjmp	.+582    	; 0x298 <__bad_interrupt>
      52:	00 00       	nop
      54:	27 c1       	rjmp	.+590    	; 0x2a4 <__vector_21>
      56:	00 00       	nop
      58:	1f c1       	rjmp	.+574    	; 0x298 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1d c1       	rjmp	.+570    	; 0x298 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1b c1       	rjmp	.+566    	; 0x298 <__bad_interrupt>
      62:	00 00       	nop
      64:	19 c1       	rjmp	.+562    	; 0x298 <__bad_interrupt>
      66:	00 00       	nop
      68:	17 c1       	rjmp	.+558    	; 0x298 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	15 c1       	rjmp	.+554    	; 0x298 <__bad_interrupt>
      6e:	00 00       	nop
      70:	13 c1       	rjmp	.+550    	; 0x298 <__bad_interrupt>
      72:	00 00       	nop
      74:	11 c1       	rjmp	.+546    	; 0x298 <__bad_interrupt>
      76:	00 00       	nop
      78:	0f c1       	rjmp	.+542    	; 0x298 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0d c1       	rjmp	.+538    	; 0x298 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0b c1       	rjmp	.+534    	; 0x298 <__bad_interrupt>
      82:	00 00       	nop
      84:	09 c1       	rjmp	.+530    	; 0x298 <__bad_interrupt>
      86:	00 00       	nop
      88:	07 c1       	rjmp	.+526    	; 0x298 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 c1       	rjmp	.+522    	; 0x298 <__bad_interrupt>
      8e:	00 00       	nop
      90:	03 c1       	rjmp	.+518    	; 0x298 <__bad_interrupt>
      92:	00 00       	nop
      94:	01 c1       	rjmp	.+514    	; 0x298 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4287>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4280>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4275>:
     11d:	41 75 64 69 6f 20 44 65 76 69 63 65 20 45 6e 75     Audio Device Enu
     12d:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

00000138 <__c.4273>:
     138:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 41 75     Error Setting Au
     148:	64 69 6f 20 53 61 6d 70 6c 69 6e 67 20 46 72 65     dio Sampling Fre
     158:	71 75 65 6e 63 79 2e 0d 0a 00                       quency....

00000162 <__c.4270>:
     162:	45 72 72 6f 72 20 45 6e 61 62 6c 69 6e 67 20 41     Error Enabling A
     172:	75 64 69 6f 20 53 74 72 65 61 6d 2e 0d 0a 00        udio Stream....

00000181 <__c.4268>:
     181:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     191:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1a1:	6f 6e 2e 0d 0a 00                                   on....

000001a7 <__c.4266>:
     1a7:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1b7:	4e 6f 74 20 61 20 56 61 6c 69 64 20 41 75 64 69     Not a Valid Audi
     1c7:	6f 20 49 6e 70 75 74 20 44 65 76 69 63 65 2e 0d     o Input Device..
     1d7:	0a 00                                               ..

000001d9 <__c.4264>:
     1d9:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1e9:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1f9:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000206 <__c.4257>:
     206:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     216:	68 65 64 2e 0d 0a 00                                hed....

0000021d <__c.4252>:
     21d:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     22d:	0d 0a 00                                            ...

00000230 <__c.4235>:
     230:	1b 5b 33 36 6d 41 75 64 69 6f 20 49 6e 70 75 74     .[36mAudio Input
     240:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     250:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

0000025c <__ctors_end>:
     25c:	11 24       	eor	r1, r1
     25e:	1f be       	out	0x3f, r1	; 63
     260:	cf ef       	ldi	r28, 0xFF	; 255
     262:	d0 e2       	ldi	r29, 0x20	; 32
     264:	de bf       	out	0x3e, r29	; 62
     266:	cd bf       	out	0x3d, r28	; 61

00000268 <__do_copy_data>:
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	ea e0       	ldi	r30, 0x0A	; 10
     270:	fa e1       	ldi	r31, 0x1A	; 26
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	0b bf       	out	0x3b, r16	; 59
     276:	02 c0       	rjmp	.+4      	; 0x27c <__do_copy_data+0x14>
     278:	07 90       	elpm	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	a4 32       	cpi	r26, 0x24	; 36
     27e:	b1 07       	cpc	r27, r17
     280:	d9 f7       	brne	.-10     	; 0x278 <__do_copy_data+0x10>

00000282 <__do_clear_bss>:
     282:	11 e0       	ldi	r17, 0x01	; 1
     284:	a4 e2       	ldi	r26, 0x24	; 36
     286:	b1 e0       	ldi	r27, 0x01	; 1
     288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
     28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
     28c:	a6 34       	cpi	r26, 0x46	; 70
     28e:	b1 07       	cpc	r27, r17
     290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>
     292:	c0 d0       	rcall	.+384    	; 0x414 <main>
     294:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <_exit>

00000298 <__bad_interrupt>:
     298:	b3 ce       	rjmp	.-666    	; 0x0 <__vectors>

0000029a <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     29a:	9b b1       	in	r25, 0x0b	; 11
     29c:	9f 70       	andi	r25, 0x0F	; 15
     29e:	98 2b       	or	r25, r24
     2a0:	9b b9       	out	0x0b, r25	; 11
			}
     2a2:	08 95       	ret

000002a4 <__vector_21>:
	}
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     2a4:	1f 92       	push	r1
     2a6:	0f 92       	push	r0
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	0f 92       	push	r0
     2ac:	0b b6       	in	r0, 0x3b	; 59
     2ae:	0f 92       	push	r0
     2b0:	11 24       	eor	r1, r1
     2b2:	1f 93       	push	r17
     2b4:	2f 93       	push	r18
     2b6:	3f 93       	push	r19
     2b8:	4f 93       	push	r20
     2ba:	5f 93       	push	r21
     2bc:	6f 93       	push	r22
     2be:	7f 93       	push	r23
     2c0:	8f 93       	push	r24
     2c2:	9f 93       	push	r25
     2c4:	af 93       	push	r26
     2c6:	bf 93       	push	r27
     2c8:	ef 93       	push	r30
     2ca:	ff 93       	push	r31
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     2cc:	80 91 a7 00 	lds	r24, 0x00A7
     2d0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     2d2:	90 91 aa 00 	lds	r25, 0x00AA
     2d6:	90 ff       	sbrs	r25, 0
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <__vector_21+0x3a>
     2da:	10 e8       	ldi	r17, 0x80	; 128
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <__vector_21+0x3c>
     2de:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     2e0:	18 2b       	or	r17, r24
			 */
			static inline bool Audio_Host_IsSampleReceived(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			                                               ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline bool Audio_Host_IsSampleReceived(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			{
				if ((USB_HostState != HOST_STATE_Configured) || !(AudioInterfaceInfo->State.IsActive))
     2e2:	80 91 31 01 	lds	r24, 0x0131
     2e6:	8b 30       	cpi	r24, 0x0B	; 11
     2e8:	09 f0       	breq	.+2      	; 0x2ec <__vector_21+0x48>
     2ea:	50 c0       	rjmp	.+160    	; 0x38c <__vector_21+0xe8>
     2ec:	80 91 0c 01 	lds	r24, 0x010C
     2f0:	88 23       	and	r24, r24
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <__vector_21+0x52>
     2f4:	4b c0       	rjmp	.+150    	; 0x38c <__vector_21+0xe8>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     2f6:	80 91 00 01 	lds	r24, 0x0100
     2fa:	8f 70       	andi	r24, 0x0F	; 15
     2fc:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     300:	80 91 a9 00 	lds	r24, 0x00A9
     304:	8f 7b       	andi	r24, 0xBF	; 191
     306:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     30a:	90 91 a6 00 	lds	r25, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     30e:	80 91 a9 00 	lds	r24, 0x00A9
     312:	80 64       	ori	r24, 0x40	; 64
     314:	80 93 a9 00 	sts	0x00A9, r24
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	/* Check that the USB bus is ready for the next sample to read */
	if (Audio_Host_IsSampleReceived(&Microphone_Audio_Interface))
     318:	90 ff       	sbrs	r25, 0
     31a:	38 c0       	rjmp	.+112    	; 0x38c <__vector_21+0xe8>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UPDATX;
     31c:	20 91 af 00 	lds	r18, 0x00AF
				Data.Bytes[1] = UPDATX;
     320:	80 91 af 00 	lds	r24, 0x00AF
			{
				int16_t Sample;

				(void)AudioInterfaceInfo;

				Sample = (int16_t)Pipe_Read_16_LE();
     324:	48 2f       	mov	r20, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     326:	80 91 f6 00 	lds	r24, 0x00F6
     32a:	90 91 f7 00 	lds	r25, 0x00F7

				if (!(Pipe_BytesInPipe()))
     32e:	00 97       	sbiw	r24, 0x00	; 0
     330:	79 f4       	brne	.+30     	; 0x350 <__vector_21+0xac>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     332:	80 91 a9 00 	lds	r24, 0x00A9
     336:	8f 7b       	andi	r24, 0xBF	; 191
     338:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     33c:	80 91 a6 00 	lds	r24, 0x00A6
     340:	8e 77       	andi	r24, 0x7E	; 126
     342:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     346:	80 91 a9 00 	lds	r24, 0x00A9
     34a:	80 64       	ori	r24, 0x40	; 64
     34c:	80 93 a9 00 	sts	0x00A9, r24
	{
		/* Retrieve the signed 16-bit audio sample, convert to 8-bit */
		int8_t Sample_8Bit = (Audio_Host_ReadSample16(&Microphone_Audio_Interface) >> 8);

		/* Load the sample into the PWM timer channel */
		OCR3A = (Sample_8Bit ^ (1 << 7));
     350:	84 2f       	mov	r24, r20
     352:	99 27       	eor	r25, r25
     354:	87 fd       	sbrc	r24, 7
     356:	90 95       	com	r25
     358:	20 e8       	ldi	r18, 0x80	; 128
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	82 27       	eor	r24, r18
     35e:	93 27       	eor	r25, r19
     360:	90 93 99 00 	sts	0x0099, r25
     364:	80 93 98 00 	sts	0x0098, r24

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (Sample_8Bit > 16)
     368:	41 31       	cpi	r20, 0x11	; 17
     36a:	44 f4       	brge	.+16     	; 0x37c <__vector_21+0xd8>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (Sample_8Bit > 8)
     36c:	49 30       	cpi	r20, 0x09	; 9
     36e:	44 f4       	brge	.+16     	; 0x380 <__vector_21+0xdc>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (Sample_8Bit > 4)
     370:	45 30       	cpi	r20, 0x05	; 5
     372:	44 f4       	brge	.+16     	; 0x384 <__vector_21+0xe0>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (Sample_8Bit > 2)
     374:	43 30       	cpi	r20, 0x03	; 3
     376:	44 f4       	brge	.+16     	; 0x388 <__vector_21+0xe4>
		int8_t Sample_8Bit = (Audio_Host_ReadSample16(&Microphone_Audio_Interface) >> 8);

		/* Load the sample into the PWM timer channel */
		OCR3A = (Sample_8Bit ^ (1 << 7));

		uint8_t LEDMask = LEDS_NO_LEDS;
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	07 c0       	rjmp	.+14     	; 0x38a <__vector_21+0xe6>

		/* Turn on LEDs as the sample amplitude increases */
		if (Sample_8Bit > 16)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
     37c:	80 ef       	ldi	r24, 0xF0	; 240
     37e:	05 c0       	rjmp	.+10     	; 0x38a <__vector_21+0xe6>
		else if (Sample_8Bit > 8)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
     380:	80 eb       	ldi	r24, 0xB0	; 176
     382:	03 c0       	rjmp	.+6      	; 0x38a <__vector_21+0xe6>
		else if (Sample_8Bit > 4)
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
     384:	80 e3       	ldi	r24, 0x30	; 48
     386:	01 c0       	rjmp	.+2      	; 0x38a <__vector_21+0xe6>
		else if (Sample_8Bit > 2)
		  LEDMask = (LEDS_LED1);
     388:	80 e1       	ldi	r24, 0x10	; 16

		LEDs_SetAllLEDs(LEDMask);
     38a:	87 df       	rcall	.-242    	; 0x29a <LEDs_SetAllLEDs>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     38c:	1f 70       	andi	r17, 0x0F	; 15
     38e:	10 93 a7 00 	sts	0x00A7, r17
	}

	Pipe_SelectPipe(PrevPipe);
}
     392:	ff 91       	pop	r31
     394:	ef 91       	pop	r30
     396:	bf 91       	pop	r27
     398:	af 91       	pop	r26
     39a:	9f 91       	pop	r25
     39c:	8f 91       	pop	r24
     39e:	7f 91       	pop	r23
     3a0:	6f 91       	pop	r22
     3a2:	5f 91       	pop	r21
     3a4:	4f 91       	pop	r20
     3a6:	3f 91       	pop	r19
     3a8:	2f 91       	pop	r18
     3aa:	1f 91       	pop	r17
     3ac:	0f 90       	pop	r0
     3ae:	0b be       	out	0x3b, r0	; 59
     3b0:	0f 90       	pop	r0
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	0f 90       	pop	r0
     3b6:	1f 90       	pop	r1
     3b8:	18 95       	reti

000003ba <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3ba:	84 b7       	in	r24, 0x34	; 52
     3bc:	87 7f       	andi	r24, 0xF7	; 247
     3be:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3c0:	28 e1       	ldi	r18, 0x18	; 24
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	20 93 60 00 	sts	0x0060, r18
     3ca:	10 92 60 00 	sts	0x0060, r1
     3ce:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	80 e8       	ldi	r24, 0x80	; 128
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	80 93 61 00 	sts	0x0061, r24
     3dc:	90 93 61 00 	sts	0x0061, r25
     3e0:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3e2:	83 e3       	ldi	r24, 0x33	; 51
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	90 93 cd 00 	sts	0x00CD, r25
     3ea:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3ee:	86 e0       	ldi	r24, 0x06	; 6
     3f0:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3f4:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3f8:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     3fc:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     3fe:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     400:	8a b1       	in	r24, 0x0a	; 10
     402:	80 6f       	ori	r24, 0xF0	; 240
     404:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     406:	8b b1       	in	r24, 0x0b	; 11
     408:	8f 70       	andi	r24, 0x0F	; 15
     40a:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     40c:	c0 d3       	rcall	.+1920   	; 0xb8e <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	90 e0       	ldi	r25, 0x00	; 0
}
     412:	e2 c7       	rjmp	.+4036   	; 0x13d8 <Serial_CreateStream>

00000414 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     414:	d2 df       	rcall	.-92     	; 0x3ba <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Audio Input Host Demo running.\r\n" ESC_FG_WHITE));
     416:	80 e3       	ldi	r24, 0x30	; 48
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	0e 94 28 0a 	call	0x1450	; 0x1450 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     41e:	80 e1       	ldi	r24, 0x10	; 16
     420:	3c df       	rcall	.-392    	; 0x29a <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     422:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		Audio_Host_USBTask(&Microphone_Audio_Interface);
		USB_USBTask();
     424:	61 d6       	rcall	.+3266   	; 0x10e8 <USB_USBTask>
     426:	fe cf       	rjmp	.-4      	; 0x424 <main+0x10>

00000428 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     428:	8d e1       	ldi	r24, 0x1D	; 29
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	0e 94 28 0a 	call	0x1450	; 0x1450 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     430:	80 ea       	ldi	r24, 0xA0	; 160
}
     432:	33 cf       	rjmp	.-410    	; 0x29a <LEDs_SetAllLEDs>

00000434 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     434:	86 e0       	ldi	r24, 0x06	; 6
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	0e 94 28 0a 	call	0x1450	; 0x1450 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     43c:	80 e1       	ldi	r24, 0x10	; 16
}
     43e:	2d cf       	rjmp	.-422    	; 0x29a <LEDs_SetAllLEDs>

00000440 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     440:	ef 92       	push	r14
     442:	ff 92       	push	r15
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	c5 50       	subi	r28, 0x05	; 5
     452:	d2 40       	sbci	r29, 0x02	; 2
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     45e:	80 ea       	ldi	r24, 0xA0	; 160
     460:	1c df       	rcall	.-456    	; 0x29a <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     462:	8e 01       	movw	r16, r28
     464:	0a 5f       	subi	r16, 0xFA	; 250
     466:	1f 4f       	sbci	r17, 0xFF	; 255
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	be 01       	movw	r22, r28
     46c:	6f 5f       	subi	r22, 0xFF	; 255
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	a8 01       	movw	r20, r16
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	32 e0       	ldi	r19, 0x02	; 2
     476:	39 d4       	rcall	.+2162   	; 0xcea <USB_Host_GetDeviceConfigDescriptor>
     478:	88 23       	and	r24, r24
     47a:	19 f0       	breq	.+6      	; 0x482 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     47c:	89 ed       	ldi	r24, 0xD9	; 217
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	11 c0       	rjmp	.+34     	; 0x4a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (Audio_Host_ConfigurePipes(&Microphone_Audio_Interface,
     482:	69 81       	ldd	r22, Y+1	; 0x01
     484:	7a 81       	ldd	r23, Y+2	; 0x02
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	a8 01       	movw	r20, r16
     48c:	6d d6       	rcall	.+3290   	; 0x1168 <Audio_Host_ConfigurePipes>
     48e:	88 23       	and	r24, r24
     490:	19 f0       	breq	.+6      	; 0x498 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
	                              ConfigDescriptorSize, ConfigDescriptorData) != AUDIO_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Audio Input Device.\r\n"));
     492:	87 ea       	ldi	r24, 0xA7	; 167
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	06 c0       	rjmp	.+12     	; 0x4a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	ea d5       	rcall	.+3028   	; 0x1070 <USB_Host_SetDeviceConfiguration>
     49c:	88 23       	and	r24, r24
     49e:	29 f0       	breq	.+10     	; 0x4aa <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4a0:	81 e8       	ldi	r24, 0x81	; 129
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	d5 d7       	rcall	.+4010   	; 0x1450 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4a6:	80 e9       	ldi	r24, 0x90	; 144
     4a8:	3c c0       	rjmp	.+120    	; 0x522 <EVENT_USB_Host_DeviceEnumerationComplete+0xe2>
		return;
	}

	if (Audio_Host_StartStopStreaming(&Microphone_Audio_Interface, true) != HOST_SENDCONTROL_Successful)
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	35 d7       	rcall	.+3690   	; 0x131c <Audio_Host_StartStopStreaming>
     4b2:	88 23       	and	r24, r24
     4b4:	19 f0       	breq	.+6      	; 0x4bc <EVENT_USB_Host_DeviceEnumerationComplete+0x7c>
	{
		puts_P(PSTR("Error Enabling Audio Stream.\r\n"));
     4b6:	82 e6       	ldi	r24, 0x62	; 98
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	1b c0       	rjmp	.+54     	; 0x4f2 <EVENT_USB_Host_DeviceEnumerationComplete+0xb2>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     4bc:	de 01       	movw	r26, r28
     4be:	13 96       	adiw	r26, 0x03	; 3
     4c0:	e0 e1       	ldi	r30, 0x10	; 16
     4c2:	f1 e0       	ldi	r31, 0x01	; 1
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	01 90       	ld	r0, Z+
     4c8:	0d 92       	st	X+, r0
     4ca:	81 50       	subi	r24, 0x01	; 1
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
	if (Audio_Host_GetSetEndpointProperty(&Microphone_Audio_Interface, Microphone_Audio_Interface.Config.DataINPipe.Address,
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	60 91 00 01 	lds	r22, 0x0100
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	21 e0       	ldi	r18, 0x01	; 1
     4da:	03 e0       	ldi	r16, 0x03	; 3
     4dc:	10 e0       	ldi	r17, 0x00	; 0
     4de:	33 e0       	ldi	r19, 0x03	; 3
     4e0:	e3 2e       	mov	r14, r19
     4e2:	f1 2c       	mov	r15, r1
     4e4:	ec 0e       	add	r14, r28
     4e6:	fd 1e       	adc	r15, r29
     4e8:	26 d7       	rcall	.+3660   	; 0x1336 <Audio_Host_GetSetEndpointProperty>
     4ea:	88 23       	and	r24, r24
     4ec:	41 f0       	breq	.+16     	; 0x4fe <EVENT_USB_Host_DeviceEnumerationComplete+0xbe>
	                                      AUDIO_REQ_SetCurrent, AUDIO_EPCONTROL_SamplingFreq,
	                                      sizeof(SampleRate), &SampleRate) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Setting Audio Sampling Frequency.\r\n"));
     4ee:	88 e3       	ldi	r24, 0x38	; 56
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	ae d7       	rcall	.+3932   	; 0x1450 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4f4:	80 e9       	ldi	r24, 0x90	; 144
     4f6:	d1 de       	rcall	.-606    	; 0x29a <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	ba d5       	rcall	.+2932   	; 0x1070 <USB_Host_SetDeviceConfiguration>
		return;
     4fc:	13 c0       	rjmp	.+38     	; 0x524 <EVENT_USB_Host_DeviceEnumerationComplete+0xe4>
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	80 93 6e 00 	sts	0x006E, r24
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     504:	93 e1       	ldi	r25, 0x13	; 19
     506:	97 bd       	out	0x27, r25	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
     508:	84 bd       	out	0x24, r24	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     50a:	85 bd       	out	0x25, r24	; 37

	/* Set speaker as output */
	DDRC   |= (1 << 6);
     50c:	3e 9a       	sbi	0x07, 6	; 7

	/* PWM speaker timer initialization */
	TCCR3A  = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)); // Set on match, clear on TOP
     50e:	81 ec       	ldi	r24, 0xC1	; 193
     510:	80 93 90 00 	sts	0x0090, r24
	TCCR3B  = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
     514:	89 e0       	ldi	r24, 0x09	; 9
     516:	80 93 91 00 	sts	0x0091, r24

	puts_P(PSTR("Audio Device Enumerated.\r\n"));
     51a:	8d e1       	ldi	r24, 0x1D	; 29
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	98 d7       	rcall	.+3888   	; 0x1450 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     520:	80 e6       	ldi	r24, 0x60	; 96
     522:	bb de       	rcall	.-650    	; 0x29a <LEDs_SetAllLEDs>
}
     524:	cb 5f       	subi	r28, 0xFB	; 251
     526:	dd 4f       	sbci	r29, 0xFD	; 253
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	cf 91       	pop	r28
     534:	df 91       	pop	r29
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	08 95       	ret

00000540 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	0f 92       	push	r0
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     54a:	89 83       	std	Y+1, r24	; 0x01
     54c:	b8 d2       	rcall	.+1392   	; 0xabe <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     54e:	00 d0       	rcall	.+0      	; 0x550 <EVENT_USB_Host_HostError+0x10>
     550:	00 d0       	rcall	.+0      	; 0x552 <EVENT_USB_Host_HostError+0x12>
     552:	ed b7       	in	r30, 0x3d	; 61
     554:	fe b7       	in	r31, 0x3e	; 62
     556:	31 96       	adiw	r30, 0x01	; 1
     558:	2e ee       	ldi	r18, 0xEE	; 238
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	ad b7       	in	r26, 0x3d	; 61
     55e:	be b7       	in	r27, 0x3e	; 62
     560:	12 96       	adiw	r26, 0x02	; 2
     562:	3c 93       	st	X, r19
     564:	2e 93       	st	-X, r18
     566:	11 97       	sbiw	r26, 0x01	; 1
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	13 82       	std	Z+3, r1	; 0x03
     56e:	51 d7       	rcall	.+3746   	; 0x1412 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	80 e9       	ldi	r24, 0x90	; 144
     57a:	8f de       	rcall	.-738    	; 0x29a <LEDs_SetAllLEDs>
     57c:	ff cf       	rjmp	.-2      	; 0x57c <EVENT_USB_Host_HostError+0x3c>

0000057e <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     57e:	90 91 31 01 	lds	r25, 0x0131
     582:	2d b7       	in	r18, 0x3d	; 61
     584:	3e b7       	in	r19, 0x3e	; 62
     586:	28 50       	subi	r18, 0x08	; 8
     588:	30 40       	sbci	r19, 0x00	; 0
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	3e bf       	out	0x3e, r19	; 62
     590:	0f be       	out	0x3f, r0	; 63
     592:	2d bf       	out	0x3d, r18	; 61
     594:	ed b7       	in	r30, 0x3d	; 61
     596:	fe b7       	in	r31, 0x3e	; 62
     598:	31 96       	adiw	r30, 0x01	; 1
     59a:	28 e9       	ldi	r18, 0x98	; 152
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	ad b7       	in	r26, 0x3d	; 61
     5a0:	be b7       	in	r27, 0x3e	; 62
     5a2:	12 96       	adiw	r26, 0x02	; 2
     5a4:	3c 93       	st	X, r19
     5a6:	2e 93       	st	-X, r18
     5a8:	11 97       	sbiw	r26, 0x01	; 1
     5aa:	82 83       	std	Z+2, r24	; 0x02
     5ac:	13 82       	std	Z+3, r1	; 0x03
     5ae:	64 83       	std	Z+4, r22	; 0x04
     5b0:	15 82       	std	Z+5, r1	; 0x05
     5b2:	96 83       	std	Z+6, r25	; 0x06
     5b4:	17 82       	std	Z+7, r1	; 0x07
     5b6:	2d d7       	rcall	.+3674   	; 0x1412 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5b8:	2d b7       	in	r18, 0x3d	; 61
     5ba:	3e b7       	in	r19, 0x3e	; 62
     5bc:	28 5f       	subi	r18, 0xF8	; 248
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	3e bf       	out	0x3e, r19	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	2d bf       	out	0x3d, r18	; 61
     5ca:	80 e9       	ldi	r24, 0x90	; 144
}
     5cc:	66 ce       	rjmp	.-820    	; 0x29a <LEDs_SetAllLEDs>

000005ce <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5ce:	80 91 9e 00 	lds	r24, 0x009E
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	81 70       	andi	r24, 0x01	; 1
     5d6:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     5d8:	20 91 a0 00 	lds	r18, 0x00A0
     5dc:	2d 7f       	andi	r18, 0xFD	; 253
     5de:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     5e2:	20 91 9e 00 	lds	r18, 0x009E
     5e6:	22 60       	ori	r18, 0x02	; 2
     5e8:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     5ec:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     5f0:	21 fd       	sbrc	r18, 1
     5f2:	fc cf       	rjmp	.-8      	; 0x5ec <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5f4:	20 91 9e 00 	lds	r18, 0x009E
     5f8:	21 60       	ori	r18, 0x01	; 1
     5fa:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     5fe:	10 92 27 01 	sts	0x0127, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     602:	20 91 a0 00 	lds	r18, 0x00A0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	20 72       	andi	r18, 0x20	; 32
     60a:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     60c:	40 91 a0 00 	lds	r20, 0x00A0
     610:	4f 7d       	andi	r20, 0xDF	; 223
     612:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     616:	40 91 9f 00 	lds	r20, 0x009F
     61a:	4f 7d       	andi	r20, 0xDF	; 223
     61c:	40 93 9f 00 	sts	0x009F, r20
     620:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     622:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     626:	55 ff       	sbrs	r21, 5
     628:	0b c0       	rjmp	.+22     	; 0x640 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     62a:	40 91 9f 00 	lds	r20, 0x009F
     62e:	4f 7d       	andi	r20, 0xDF	; 223
     630:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     634:	40 91 9f 00 	lds	r20, 0x009F
     638:	4d 7f       	andi	r20, 0xFD	; 253
     63a:	40 93 9f 00 	sts	0x009F, r20
     63e:	08 c0       	rjmp	.+16     	; 0x650 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     640:	ef ec       	ldi	r30, 0xCF	; 207
     642:	f7 e0       	ldi	r31, 0x07	; 7
     644:	31 97       	sbiw	r30, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <USB_Host_ResetDevice+0x76>
     648:	00 c0       	rjmp	.+0      	; 0x64a <USB_Host_ResetDevice+0x7c>
     64a:	00 00       	nop
     64c:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     64e:	49 f7       	brne	.-46     	; 0x622 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     650:	21 15       	cp	r18, r1
     652:	31 05       	cpc	r19, r1
     654:	29 f0       	breq	.+10     	; 0x660 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     656:	20 91 a0 00 	lds	r18, 0x00A0
     65a:	20 62       	ori	r18, 0x20	; 32
     65c:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	29 f4       	brne	.+10     	; 0x66e <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     664:	80 91 9e 00 	lds	r24, 0x009E
     668:	8e 7f       	andi	r24, 0xFE	; 254
     66a:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     66e:	80 91 a0 00 	lds	r24, 0x00A0
     672:	82 60       	ori	r24, 0x02	; 2
     674:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     678:	08 95       	ret

0000067a <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     67a:	40 91 9e 00 	lds	r20, 0x009E
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	41 70       	andi	r20, 0x01	; 1
     682:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     684:	20 91 a0 00 	lds	r18, 0x00A0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	20 72       	andi	r18, 0x20	; 32
     68c:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     68e:	90 91 a0 00 	lds	r25, 0x00A0
     692:	9f 7d       	andi	r25, 0xDF	; 223
     694:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     698:	90 91 9f 00 	lds	r25, 0x009F
     69c:	9f 7d       	andi	r25, 0xDF	; 223
     69e:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6a2:	90 91 9e 00 	lds	r25, 0x009E
     6a6:	91 60       	ori	r25, 0x01	; 1
     6a8:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6ac:	26 c0       	rjmp	.+76     	; 0x6fa <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6ae:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6b2:	95 ff       	sbrs	r25, 5
     6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6b6:	90 91 9f 00 	lds	r25, 0x009F
     6ba:	9f 7d       	andi	r25, 0xDF	; 223
     6bc:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     6c0:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     6c2:	90 91 31 01 	lds	r25, 0x0131
     6c6:	91 30       	cpi	r25, 0x01	; 1
     6c8:	d9 f0       	breq	.+54     	; 0x700 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     6ca:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     6ce:	94 ff       	sbrs	r25, 4
     6d0:	09 c0       	rjmp	.+18     	; 0x6e4 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     6d2:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     6d6:	80 91 a6 00 	lds	r24, 0x00A6
     6da:	8f 7e       	andi	r24, 0xEF	; 239
     6dc:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     6e0:	82 e0       	ldi	r24, 0x02	; 2

			break;
     6e2:	0f c0       	rjmp	.+30     	; 0x702 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     6e4:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     6e8:	91 ff       	sbrs	r25, 1
     6ea:	07 c0       	rjmp	.+14     	; 0x6fa <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     6ec:	80 91 a6 00 	lds	r24, 0x00A6
     6f0:	8d 7f       	andi	r24, 0xFD	; 253
     6f2:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     6f6:	83 e0       	ldi	r24, 0x03	; 3

			break;
     6f8:	04 c0       	rjmp	.+8      	; 0x702 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6fa:	88 23       	and	r24, r24
     6fc:	c1 f6       	brne	.-80     	; 0x6ae <USB_Host_WaitMS+0x34>
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     700:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     702:	41 15       	cp	r20, r1
     704:	51 05       	cpc	r21, r1
     706:	29 f4       	brne	.+10     	; 0x712 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     708:	90 91 9e 00 	lds	r25, 0x009E
     70c:	9e 7f       	andi	r25, 0xFE	; 254
     70e:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     712:	21 15       	cp	r18, r1
     714:	31 05       	cpc	r19, r1
     716:	29 f0       	breq	.+10     	; 0x722 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     718:	90 91 a0 00 	lds	r25, 0x00A0
     71c:	90 62       	ori	r25, 0x20	; 32
     71e:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     722:	08 95       	ret

00000724 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	df 93       	push	r29
     72a:	cf 93       	push	r28
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	28 97       	sbiw	r28, 0x08	; 8
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     73c:	80 91 31 01 	lds	r24, 0x0131
     740:	85 30       	cpi	r24, 0x05	; 5
     742:	09 f4       	brne	.+2      	; 0x746 <USB_Host_ProcessNextHostState+0x22>
     744:	99 c0       	rjmp	.+306    	; 0x878 <USB_Host_ProcessNextHostState+0x154>
     746:	86 30       	cpi	r24, 0x06	; 6
     748:	68 f4       	brcc	.+26     	; 0x764 <USB_Host_ProcessNextHostState+0x40>
     74a:	82 30       	cpi	r24, 0x02	; 2
     74c:	c1 f1       	breq	.+112    	; 0x7be <USB_Host_ProcessNextHostState+0x9a>
     74e:	83 30       	cpi	r24, 0x03	; 3
     750:	18 f4       	brcc	.+6      	; 0x758 <USB_Host_ProcessNextHostState+0x34>
     752:	88 23       	and	r24, r24
     754:	a1 f0       	breq	.+40     	; 0x77e <USB_Host_ProcessNextHostState+0x5a>
     756:	04 c1       	rjmp	.+520    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
     758:	83 30       	cpi	r24, 0x03	; 3
     75a:	d9 f1       	breq	.+118    	; 0x7d2 <USB_Host_ProcessNextHostState+0xae>
     75c:	84 30       	cpi	r24, 0x04	; 4
     75e:	09 f0       	breq	.+2      	; 0x762 <USB_Host_ProcessNextHostState+0x3e>
     760:	ff c0       	rjmp	.+510    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
     762:	62 c0       	rjmp	.+196    	; 0x828 <USB_Host_ProcessNextHostState+0x104>
     764:	87 30       	cpi	r24, 0x07	; 7
     766:	09 f4       	brne	.+2      	; 0x76a <USB_Host_ProcessNextHostState+0x46>
     768:	9e c0       	rjmp	.+316    	; 0x8a6 <USB_Host_ProcessNextHostState+0x182>
     76a:	87 30       	cpi	r24, 0x07	; 7
     76c:	08 f4       	brcc	.+2      	; 0x770 <USB_Host_ProcessNextHostState+0x4c>
     76e:	8f c0       	rjmp	.+286    	; 0x88e <USB_Host_ProcessNextHostState+0x16a>
     770:	88 30       	cpi	r24, 0x08	; 8
     772:	09 f4       	brne	.+2      	; 0x776 <USB_Host_ProcessNextHostState+0x52>
     774:	b8 c0       	rjmp	.+368    	; 0x8e6 <USB_Host_ProcessNextHostState+0x1c2>
     776:	89 30       	cpi	r24, 0x09	; 9
     778:	09 f0       	breq	.+2      	; 0x77c <USB_Host_ProcessNextHostState+0x58>
     77a:	f2 c0       	rjmp	.+484    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
     77c:	d9 c0       	rjmp	.+434    	; 0x930 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     77e:	00 91 25 01 	lds	r16, 0x0125
     782:	10 91 26 01 	lds	r17, 0x0126
     786:	01 15       	cp	r16, r1
     788:	11 05       	cpc	r17, r1
     78a:	09 f4       	brne	.+2      	; 0x78e <USB_Host_ProcessNextHostState+0x6a>
     78c:	e9 c0       	rjmp	.+466    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	74 df       	rcall	.-280    	; 0x67a <USB_Host_WaitMS>
     792:	68 2f       	mov	r22, r24
     794:	88 23       	and	r24, r24
     796:	31 f0       	breq	.+12     	; 0x7a4 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     798:	80 91 24 01 	lds	r24, 0x0124
     79c:	80 93 31 01 	sts	0x0131, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
					break;
     7a2:	d2 c0       	rjmp	.+420    	; 0x948 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     7a4:	01 50       	subi	r16, 0x01	; 1
     7a6:	10 40       	sbci	r17, 0x00	; 0
     7a8:	10 93 26 01 	sts	0x0126, r17
     7ac:	00 93 25 01 	sts	0x0125, r16
     7b0:	01 15       	cp	r16, r1
     7b2:	11 05       	cpc	r17, r1
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <USB_Host_ProcessNextHostState+0x94>
     7b6:	d4 c0       	rjmp	.+424    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     7b8:	80 91 24 01 	lds	r24, 0x0124
     7bc:	07 c0       	rjmp	.+14     	; 0x7cc <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7be:	88 ee       	ldi	r24, 0xE8	; 232
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	90 93 26 01 	sts	0x0126, r25
     7c6:	80 93 25 01 	sts	0x0125, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	80 93 31 01 	sts	0x0131, r24
			break;
     7d0:	c7 c0       	rjmp	.+398    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7d2:	80 91 25 01 	lds	r24, 0x0125
     7d6:	90 91 26 01 	lds	r25, 0x0126
     7da:	9c 01       	movw	r18, r24
     7dc:	21 50       	subi	r18, 0x01	; 1
     7de:	30 40       	sbci	r19, 0x00	; 0
     7e0:	30 93 26 01 	sts	0x0126, r19
     7e4:	20 93 25 01 	sts	0x0125, r18
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	39 f0       	breq	.+14     	; 0x7fa <USB_Host_ProcessNextHostState+0xd6>
     7ec:	8f ec       	ldi	r24, 0xCF	; 207
     7ee:	97 e0       	ldi	r25, 0x07	; 7
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <USB_Host_ProcessNextHostState+0xcc>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <USB_Host_ProcessNextHostState+0xd2>
     7f6:	00 00       	nop
     7f8:	b3 c0       	rjmp	.+358    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     7fa:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     7fc:	80 91 d8 00 	lds	r24, 0x00D8
     800:	80 61       	ori	r24, 0x10	; 16
     802:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     806:	80 91 dd 00 	lds	r24, 0x00DD
     80a:	8b 7f       	andi	r24, 0xFB	; 251
     80c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     810:	80 91 d7 00 	lds	r24, 0x00D7
     814:	80 61       	ori	r24, 0x10	; 16
     816:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     81a:	80 91 dd 00 	lds	r24, 0x00DD
     81e:	82 60       	ori	r24, 0x02	; 2
     820:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     824:	84 e0       	ldi	r24, 0x04	; 4
     826:	d2 cf       	rjmp	.-92     	; 0x7cc <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     828:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     82c:	80 ff       	sbrs	r24, 0
     82e:	98 c0       	rjmp	.+304    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     830:	80 91 9f 00 	lds	r24, 0x009F
     834:	8e 7f       	andi	r24, 0xFE	; 254
     836:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     83a:	80 91 9f 00 	lds	r24, 0x009F
     83e:	8d 7f       	andi	r24, 0xFD	; 253
     840:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     844:	80 91 df 00 	lds	r24, 0x00DF
     848:	8d 7f       	andi	r24, 0xFD	; 253
     84a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     84e:	80 91 de 00 	lds	r24, 0x00DE
     852:	82 60       	ori	r24, 0x02	; 2
     854:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     858:	80 91 9e 00 	lds	r24, 0x009E
     85c:	81 60       	ori	r24, 0x01	; 1
     85e:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     862:	17 d1       	rcall	.+558    	; 0xa92 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     864:	10 92 31 01 	sts	0x0131, r1
     868:	84 e6       	ldi	r24, 0x64	; 100
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	90 93 26 01 	sts	0x0126, r25
     870:	80 93 25 01 	sts	0x0125, r24
     874:	85 e0       	ldi	r24, 0x05	; 5
     876:	59 c0       	rjmp	.+178    	; 0x92a <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     878:	aa de       	rcall	.-684    	; 0x5ce <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     87a:	10 92 31 01 	sts	0x0131, r1
     87e:	88 ec       	ldi	r24, 0xC8	; 200
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	90 93 26 01 	sts	0x0126, r25
     886:	80 93 25 01 	sts	0x0125, r24
     88a:	86 e0       	ldi	r24, 0x06	; 6
     88c:	4e c0       	rjmp	.+156    	; 0x92a <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	20 e4       	ldi	r18, 0x40	; 64
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	01 e0       	ldi	r16, 0x01	; 1
     89a:	6d d0       	rcall	.+218    	; 0x976 <Pipe_ConfigurePipe>
     89c:	88 23       	and	r24, r24
     89e:	09 f4       	brne	.+2      	; 0x8a2 <USB_Host_ProcessNextHostState+0x17e>
     8a0:	4f c0       	rjmp	.+158    	; 0x940 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8a2:	87 e0       	ldi	r24, 0x07	; 7
     8a4:	93 cf       	rjmp	.-218    	; 0x7cc <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8a6:	a9 e2       	ldi	r26, 0x29	; 41
     8a8:	b1 e0       	ldi	r27, 0x01	; 1
     8aa:	eb e1       	ldi	r30, 0x1B	; 27
     8ac:	f1 e0       	ldi	r31, 0x01	; 1
     8ae:	88 e0       	ldi	r24, 0x08	; 8
     8b0:	01 90       	ld	r0, Z+
     8b2:	0d 92       	st	X+, r0
     8b4:	81 50       	subi	r24, 0x01	; 1
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8b8:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	d8 d2       	rcall	.+1456   	; 0xe72 <USB_Host_SendControlRequest>
     8c2:	68 2f       	mov	r22, r24
     8c4:	88 23       	and	r24, r24
     8c6:	09 f0       	breq	.+2      	; 0x8ca <USB_Host_ProcessNextHostState+0x1a6>
     8c8:	3e c0       	rjmp	.+124    	; 0x946 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8ca:	88 85       	ldd	r24, Y+8	; 0x08
     8cc:	80 93 23 01 	sts	0x0123, r24

			USB_Host_ResetDevice();
     8d0:	7e de       	rcall	.-772    	; 0x5ce <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8d2:	10 92 31 01 	sts	0x0131, r1
     8d6:	88 ec       	ldi	r24, 0xC8	; 200
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	90 93 26 01 	sts	0x0126, r25
     8de:	80 93 25 01 	sts	0x0125, r24
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	22 c0       	rjmp	.+68     	; 0x92a <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     8e6:	20 91 23 01 	lds	r18, 0x0123
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	01 e0       	ldi	r16, 0x01	; 1
     8f4:	40 d0       	rcall	.+128    	; 0x976 <Pipe_ConfigurePipe>
     8f6:	88 23       	and	r24, r24
     8f8:	19 f1       	breq	.+70     	; 0x940 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     8fa:	a9 e2       	ldi	r26, 0x29	; 41
     8fc:	b1 e0       	ldi	r27, 0x01	; 1
     8fe:	e3 e1       	ldi	r30, 0x13	; 19
     900:	f1 e0       	ldi	r31, 0x01	; 1
     902:	88 e0       	ldi	r24, 0x08	; 8
     904:	01 90       	ld	r0, Z+
     906:	0d 92       	st	X+, r0
     908:	81 50       	subi	r24, 0x01	; 1
     90a:	e1 f7       	brne	.-8      	; 0x904 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	b0 d2       	rcall	.+1376   	; 0xe72 <USB_Host_SendControlRequest>
     912:	68 2f       	mov	r22, r24
     914:	88 23       	and	r24, r24
     916:	b9 f4       	brne	.+46     	; 0x946 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     918:	10 92 31 01 	sts	0x0131, r1
     91c:	84 e6       	ldi	r24, 0x64	; 100
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	90 93 26 01 	sts	0x0126, r25
     924:	80 93 25 01 	sts	0x0125, r24
     928:	89 e0       	ldi	r24, 0x09	; 9
     92a:	80 93 24 01 	sts	0x0124, r24
			break;
     92e:	18 c0       	rjmp	.+48     	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     936:	8a e0       	ldi	r24, 0x0A	; 10
     938:	80 93 31 01 	sts	0x0131, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     93c:	81 dd       	rcall	.-1278   	; 0x440 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     93e:	10 c0       	rjmp	.+32     	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     940:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     942:	84 e0       	ldi	r24, 0x04	; 4
     944:	01 c0       	rjmp	.+2      	; 0x948 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     946:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     948:	90 91 31 01 	lds	r25, 0x0131
     94c:	91 30       	cpi	r25, 0x01	; 1
     94e:	41 f0       	breq	.+16     	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     950:	16 de       	rcall	.-980    	; 0x57e <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     952:	80 91 dd 00 	lds	r24, 0x00DD
     956:	81 60       	ori	r24, 0x01	; 1
     958:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     95c:	6b dd       	rcall	.-1322   	; 0x434 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     95e:	c7 d0       	rcall	.+398    	; 0xaee <USB_ResetInterface>
	}
}
     960:	28 96       	adiw	r28, 0x08	; 8
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	de bf       	out	0x3e, r29	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	cf 91       	pop	r28
     96e:	df 91       	pop	r29
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	08 95       	ret

00000976 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     976:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     978:	58 2f       	mov	r21, r24
     97a:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     97c:	87 ff       	sbrs	r24, 7
     97e:	02 c0       	rjmp	.+4      	; 0x984 <Pipe_ConfigurePipe+0xe>
     980:	80 e1       	ldi	r24, 0x10	; 16
     982:	01 c0       	rjmp	.+2      	; 0x986 <Pipe_ConfigurePipe+0x10>
     984:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     986:	57 30       	cpi	r21, 0x07	; 7
     988:	08 f0       	brcs	.+2      	; 0x98c <Pipe_ConfigurePipe+0x16>
     98a:	59 c0       	rjmp	.+178    	; 0xa3e <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     98c:	66 23       	and	r22, r22
     98e:	09 f4       	brne	.+2      	; 0x992 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     990:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     992:	4f 70       	andi	r20, 0x0F	; 15
     994:	62 95       	swap	r22
     996:	66 0f       	add	r22, r22
     998:	66 0f       	add	r22, r22
     99a:	60 7c       	andi	r22, 0xC0	; 192
     99c:	64 2b       	or	r22, r20
     99e:	68 2b       	or	r22, r24
     9a0:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9a2:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9a4:	84 2f       	mov	r24, r20
     9a6:	8f 70       	andi	r24, 0x0F	; 15
     9a8:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     9ac:	45 17       	cp	r20, r21
     9ae:	a1 f4       	brne	.+40     	; 0x9d8 <Pipe_ConfigurePipe+0x62>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9b8:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9be:	82 17       	cp	r24, r18
     9c0:	93 07       	cpc	r25, r19
     9c2:	10 f4       	brcc	.+4      	; 0x9c8 <Pipe_ConfigurePipe+0x52>
     9c4:	75 30       	cpi	r23, 0x05	; 5
     9c6:	c1 f7       	brne	.-16     	; 0x9b8 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     9c8:	87 2f       	mov	r24, r23
     9ca:	82 95       	swap	r24
     9cc:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9ce:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     9d0:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     9d2:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	08 c0       	rjmp	.+16     	; 0x9e8 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     9d8:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     9dc:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     9e0:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     9e4:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     9e8:	81 ff       	sbrs	r24, 1
     9ea:	20 c0       	rjmp	.+64     	; 0xa2c <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9ec:	90 91 a9 00 	lds	r25, 0x00A9
     9f0:	9e 7f       	andi	r25, 0xFE	; 254
     9f2:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     9f6:	90 91 ab 00 	lds	r25, 0x00AB
     9fa:	9d 7f       	andi	r25, 0xFD	; 253
     9fc:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a00:	90 91 a9 00 	lds	r25, 0x00A9
     a04:	91 60       	ori	r25, 0x01	; 1
     a06:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a0a:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     a0e:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     a12:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     a16:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a1a:	80 91 a9 00 	lds	r24, 0x00A9
     a1e:	80 62       	ori	r24, 0x20	; 32
     a20:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a24:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     a28:	87 ff       	sbrs	r24, 7
     a2a:	09 c0       	rjmp	.+18     	; 0xa3e <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a2c:	4f 5f       	subi	r20, 0xFF	; 255
     a2e:	47 30       	cpi	r20, 0x07	; 7
     a30:	09 f0       	breq	.+2      	; 0xa34 <Pipe_ConfigurePipe+0xbe>
     a32:	b8 cf       	rjmp	.-144    	; 0x9a4 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a34:	5f 70       	andi	r21, 0x0F	; 15
     a36:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     a3e:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     a40:	0f 91       	pop	r16
     a42:	08 95       	ret

00000a44 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     a52:	e8 2e       	mov	r14, r24
     a54:	e7 01       	movw	r28, r14
     a56:	7e 01       	movw	r14, r28
     a58:	f9 2e       	mov	r15, r25
     a5a:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a5c:	ff 24       	eor	r15, r15
     a5e:	0d c0       	rjmp	.+26     	; 0xa7a <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
     a60:	88 81       	ld	r24, Y
     a62:	88 23       	and	r24, r24
     a64:	41 f0       	breq	.+16     	; 0xa76 <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     a66:	29 81       	ldd	r18, Y+1	; 0x01
     a68:	3a 81       	ldd	r19, Y+2	; 0x02
     a6a:	6c 81       	ldd	r22, Y+4	; 0x04
     a6c:	4b 81       	ldd	r20, Y+3	; 0x03
     a6e:	0d 81       	ldd	r16, Y+5	; 0x05
     a70:	82 df       	rcall	.-252    	; 0x976 <Pipe_ConfigurePipe>
     a72:	88 23       	and	r24, r24
     a74:	31 f0       	breq	.+12     	; 0xa82 <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a76:	f3 94       	inc	r15
     a78:	26 96       	adiw	r28, 0x06	; 6
     a7a:	f1 16       	cp	r15, r17
     a7c:	88 f3       	brcs	.-30     	; 0xa60 <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     a82:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	08 95       	ret

00000a92 <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a92:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	98 2f       	mov	r25, r24
     a9a:	9f 70       	andi	r25, 0x0F	; 15
     a9c:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     aa0:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     aa4:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     aa8:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     aac:	90 91 a9 00 	lds	r25, 0x00A9
     ab0:	9e 7f       	andi	r25, 0xFE	; 254
     ab2:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ab6:	8f 5f       	subi	r24, 0xFF	; 255
     ab8:	87 30       	cpi	r24, 0x07	; 7
     aba:	71 f7       	brne	.-36     	; 0xa98 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     abc:	08 95       	ret

00000abe <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     abe:	75 d0       	rcall	.+234    	; 0xbaa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ac0:	7c d0       	rcall	.+248    	; 0xbba <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     ac2:	e0 ee       	ldi	r30, 0xE0	; 224
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	81 60       	ori	r24, 0x01	; 1
     aca:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     acc:	e8 ed       	ldi	r30, 0xD8	; 216
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	8f 77       	andi	r24, 0x7F	; 127
     ad4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ad6:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     ad8:	a7 ed       	ldi	r26, 0xD7	; 215
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	8c 91       	ld	r24, X
     ade:	8e 7f       	andi	r24, 0xFE	; 254
     ae0:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     ae2:	80 81       	ld	r24, Z
     ae4:	8f 7e       	andi	r24, 0xEF	; 239
     ae6:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     ae8:	10 92 28 01 	sts	0x0128, r1
}
     aec:	08 95       	ret

00000aee <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     aee:	5d d0       	rcall	.+186    	; 0xbaa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     af0:	64 d0       	rcall	.+200    	; 0xbba <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     af2:	80 91 d8 00 	lds	r24, 0x00D8
     af6:	8f 77       	andi	r24, 0x7F	; 127
     af8:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     afc:	80 91 d8 00 	lds	r24, 0x00D8
     b00:	80 68       	ori	r24, 0x80	; 128
     b02:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b06:	80 91 d8 00 	lds	r24, 0x00D8
     b0a:	8f 7d       	andi	r24, 0xDF	; 223
     b0c:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b10:	80 91 d7 00 	lds	r24, 0x00D7
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b1a:	8c e0       	ldi	r24, 0x0C	; 12
     b1c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b1e:	8e e0       	ldi	r24, 0x0E	; 14
     b20:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b22:	09 b4       	in	r0, 0x29	; 41
     b24:	00 fe       	sbrs	r0, 0
     b26:	fd cf       	rjmp	.-6      	; 0xb22 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	80 93 31 01 	sts	0x0131, r24
	USB_Host_ConfigurationNumber = 0;
     b2e:	10 92 27 01 	sts	0x0127, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b32:	80 e4       	ldi	r24, 0x40	; 64
     b34:	80 93 23 01 	sts	0x0123, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b38:	80 91 d8 00 	lds	r24, 0x00D8
     b3c:	80 64       	ori	r24, 0x40	; 64
     b3e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b42:	80 91 dd 00 	lds	r24, 0x00DD
     b46:	81 60       	ori	r24, 0x01	; 1
     b48:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b4c:	80 91 dd 00 	lds	r24, 0x00DD
     b50:	84 60       	ori	r24, 0x04	; 4
     b52:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b56:	80 91 d7 00 	lds	r24, 0x00D7
     b5a:	8f 7e       	andi	r24, 0xEF	; 239
     b5c:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b60:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     b62:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     b64:	80 91 de 00 	lds	r24, 0x00DE
     b68:	81 60       	ori	r24, 0x01	; 1
     b6a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b6e:	80 91 de 00 	lds	r24, 0x00DE
     b72:	84 60       	ori	r24, 0x04	; 4
     b74:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b78:	80 91 e0 00 	lds	r24, 0x00E0
     b7c:	8e 7f       	andi	r24, 0xFE	; 254
     b7e:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b82:	80 91 d8 00 	lds	r24, 0x00D8
     b86:	80 61       	ori	r24, 0x10	; 16
     b88:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b8c:	08 95       	ret

00000b8e <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b8e:	e8 ed       	ldi	r30, 0xD8	; 216
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	8f 7e       	andi	r24, 0xEF	; 239
     b96:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     b98:	e7 ed       	ldi	r30, 0xD7	; 215
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	80 93 28 01 	sts	0x0128, r24

	USB_ResetInterface();
}
     ba8:	a2 cf       	rjmp	.-188    	; 0xaee <USB_ResetInterface>

00000baa <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     baa:	e8 ed       	ldi	r30, 0xD8	; 216
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	8c 7f       	andi	r24, 0xFC	; 252
     bb2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     bb4:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     bb8:	08 95       	ret

00000bba <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     bba:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     bbe:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     bc2:	08 95       	ret

00000bc4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     bc4:	1f 92       	push	r1
     bc6:	0f 92       	push	r0
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	0f 92       	push	r0
     bcc:	0b b6       	in	r0, 0x3b	; 59
     bce:	0f 92       	push	r0
     bd0:	11 24       	eor	r1, r1
     bd2:	2f 93       	push	r18
     bd4:	3f 93       	push	r19
     bd6:	4f 93       	push	r20
     bd8:	5f 93       	push	r21
     bda:	6f 93       	push	r22
     bdc:	7f 93       	push	r23
     bde:	8f 93       	push	r24
     be0:	9f 93       	push	r25
     be2:	af 93       	push	r26
     be4:	bf 93       	push	r27
     be6:	ef 93       	push	r30
     be8:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     bea:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     bee:	85 ff       	sbrs	r24, 5
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     bf2:	80 91 a0 00 	lds	r24, 0x00A0
     bf6:	85 ff       	sbrs	r24, 5
     bf8:	06 c0       	rjmp	.+12     	; 0xc06 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bfa:	80 91 9f 00 	lds	r24, 0x009F
     bfe:	8f 7d       	andi	r24, 0xDF	; 223
     c00:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c04:	0c d1       	rcall	.+536    	; 0xe1e <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c06:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c0a:	81 ff       	sbrs	r24, 1
     c0c:	15 c0       	rjmp	.+42     	; 0xc38 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c0e:	80 91 a0 00 	lds	r24, 0x00A0
     c12:	81 ff       	sbrs	r24, 1
     c14:	11 c0       	rjmp	.+34     	; 0xc38 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c16:	80 91 9f 00 	lds	r24, 0x009F
     c1a:	8d 7f       	andi	r24, 0xFD	; 253
     c1c:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c20:	80 91 9f 00 	lds	r24, 0x009F
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c2a:	80 91 a0 00 	lds	r24, 0x00A0
     c2e:	8d 7f       	andi	r24, 0xFD	; 253
     c30:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c34:	ff db       	rcall	.-2050   	; 0x434 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c36:	5b df       	rcall	.-330    	; 0xaee <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c38:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c3c:	81 ff       	sbrs	r24, 1
     c3e:	15 c0       	rjmp	.+42     	; 0xc6a <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c40:	80 91 de 00 	lds	r24, 0x00DE
     c44:	81 ff       	sbrs	r24, 1
     c46:	11 c0       	rjmp	.+34     	; 0xc6a <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c48:	80 91 df 00 	lds	r24, 0x00DF
     c4c:	8d 7f       	andi	r24, 0xFD	; 253
     c4e:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     c52:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c54:	80 91 dd 00 	lds	r24, 0x00DD
     c58:	81 60       	ori	r24, 0x01	; 1
     c5a:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	6f dc       	rcall	.-1826   	; 0x540 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c62:	e8 db       	rcall	.-2096   	; 0x434 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	80 93 31 01 	sts	0x0131, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c6a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c6e:	80 ff       	sbrs	r24, 0
     c70:	17 c0       	rjmp	.+46     	; 0xca0 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c72:	80 91 de 00 	lds	r24, 0x00DE
     c76:	80 ff       	sbrs	r24, 0
     c78:	13 c0       	rjmp	.+38     	; 0xca0 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c7a:	80 91 df 00 	lds	r24, 0x00DF
     c7e:	8e 7f       	andi	r24, 0xFE	; 254
     c80:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     c84:	80 91 de 00 	lds	r24, 0x00DE
     c88:	8e 7f       	andi	r24, 0xFE	; 254
     c8a:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c8e:	cc db       	rcall	.-2152   	; 0x428 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c90:	80 91 a0 00 	lds	r24, 0x00A0
     c94:	82 60       	ori	r24, 0x02	; 2
     c96:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	80 93 31 01 	sts	0x0131, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     ca0:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ca4:	82 ff       	sbrs	r24, 2
     ca6:	0e c0       	rjmp	.+28     	; 0xcc4 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ca8:	80 91 de 00 	lds	r24, 0x00DE
     cac:	82 ff       	sbrs	r24, 2
     cae:	0a c0       	rjmp	.+20     	; 0xcc4 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     cb0:	80 91 df 00 	lds	r24, 0x00DF
     cb4:	8b 7f       	andi	r24, 0xFB	; 251
     cb6:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	5f dc       	rcall	.-1858   	; 0x57e <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     cc0:	b9 db       	rcall	.-2190   	; 0x434 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     cc2:	15 df       	rcall	.-470    	; 0xaee <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     cc4:	ff 91       	pop	r31
     cc6:	ef 91       	pop	r30
     cc8:	bf 91       	pop	r27
     cca:	af 91       	pop	r26
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	7f 91       	pop	r23
     cd2:	6f 91       	pop	r22
     cd4:	5f 91       	pop	r21
     cd6:	4f 91       	pop	r20
     cd8:	3f 91       	pop	r19
     cda:	2f 91       	pop	r18
     cdc:	0f 90       	pop	r0
     cde:	0b be       	out	0x3b, r0	; 59
     ce0:	0f 90       	pop	r0
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	0f 90       	pop	r0
     ce6:	1f 90       	pop	r1
     ce8:	18 95       	reti

00000cea <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	29 97       	sbiw	r28, 0x09	; 9
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	6b 01       	movw	r12, r22
     d0c:	8a 01       	movw	r16, r20
     d0e:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d10:	90 e8       	ldi	r25, 0x80	; 128
     d12:	90 93 29 01 	sts	0x0129, r25
     d16:	96 e0       	ldi	r25, 0x06	; 6
     d18:	90 93 2a 01 	sts	0x012A, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d22:	90 93 2c 01 	sts	0x012C, r25
     d26:	80 93 2b 01 	sts	0x012B, r24
     d2a:	10 92 2e 01 	sts	0x012E, r1
     d2e:	10 92 2d 01 	sts	0x012D, r1
     d32:	89 e0       	ldi	r24, 0x09	; 9
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	90 93 30 01 	sts	0x0130, r25
     d3a:	80 93 2f 01 	sts	0x012F, r24
     d3e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d42:	ce 01       	movw	r24, r28
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	95 d0       	rcall	.+298    	; 0xe72 <USB_Host_SendControlRequest>
     d48:	88 23       	and	r24, r24
     d4a:	b9 f4       	brne	.+46     	; 0xd7a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	f6 01       	movw	r30, r12
     d52:	91 83       	std	Z+1, r25	; 0x01
     d54:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     d56:	e8 16       	cp	r14, r24
     d58:	f9 06       	cpc	r15, r25
     d5a:	70 f0       	brcs	.+28     	; 0xd78 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d5c:	90 93 30 01 	sts	0x0130, r25
     d60:	80 93 2f 01 	sts	0x012F, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d64:	c8 01       	movw	r24, r16
     d66:	85 d0       	rcall	.+266    	; 0xe72 <USB_Host_SendControlRequest>
     d68:	88 23       	and	r24, r24
     d6a:	39 f4       	brne	.+14     	; 0xd7a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d6c:	f8 01       	movw	r30, r16
     d6e:	91 81       	ldd	r25, Z+1	; 0x01
     d70:	92 30       	cpi	r25, 0x02	; 2
     d72:	19 f0       	breq	.+6      	; 0xd7a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     d74:	86 e0       	ldi	r24, 0x06	; 6
     d76:	01 c0       	rjmp	.+2      	; 0xd7a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     d78:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     d7a:	29 96       	adiw	r28, 0x09	; 9
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	df 90       	pop	r13
     d94:	cf 90       	pop	r12
     d96:	08 95       	ret

00000d98 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d98:	af 92       	push	r10
     d9a:	bf 92       	push	r11
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	8c 01       	movw	r16, r24
     dae:	eb 01       	movw	r28, r22
     db0:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     db2:	23 c0       	rjmp	.+70     	; 0xdfa <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     db4:	e8 81       	ld	r30, Y
     db6:	f9 81       	ldd	r31, Y+1	; 0x01
     db8:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     dba:	20 81       	ld	r18, Z
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	c7 01       	movw	r24, r14
     dc0:	2e 15       	cp	r18, r14
     dc2:	3f 05       	cpc	r19, r15
     dc4:	08 f4       	brcc	.+2      	; 0xdc8 <USB_GetNextDescriptorComp+0x30>
     dc6:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     dc8:	e8 0f       	add	r30, r24
     dca:	f9 1f       	adc	r31, r25
     dcc:	f9 83       	std	Y+1, r31	; 0x01
     dce:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     dd0:	f8 01       	movw	r30, r16
     dd2:	20 81       	ld	r18, Z
     dd4:	31 81       	ldd	r19, Z+1	; 0x01
     dd6:	28 1b       	sub	r18, r24
     dd8:	39 0b       	sbc	r19, r25
     dda:	31 83       	std	Z+1, r19	; 0x01
     ddc:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     dde:	88 81       	ld	r24, Y
     de0:	99 81       	ldd	r25, Y+1	; 0x01
     de2:	f6 01       	movw	r30, r12
     de4:	09 95       	icall
     de6:	82 30       	cpi	r24, 0x02	; 2
     de8:	41 f0       	breq	.+16     	; 0xdfa <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	69 f4       	brne	.+26     	; 0xe08 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
     dee:	a8 82       	st	Y, r10
     df0:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
     df2:	f8 01       	movw	r30, r16
     df4:	f1 82       	std	Z+1, r15	; 0x01
     df6:	e0 82       	st	Z, r14
     df8:	07 c0       	rjmp	.+14     	; 0xe08 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     dfa:	f8 01       	movw	r30, r16
     dfc:	e0 80       	ld	r14, Z
     dfe:	f1 80       	ldd	r15, Z+1	; 0x01
     e00:	e1 14       	cp	r14, r1
     e02:	f1 04       	cpc	r15, r1
     e04:	b9 f6       	brne	.-82     	; 0xdb4 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     e06:	82 e0       	ldi	r24, 0x02	; 2
}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	bf 90       	pop	r11
     e1a:	af 90       	pop	r10
     e1c:	08 95       	ret

00000e1e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e1e:	08 95       	ret

00000e20 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
     e28:	c8 ee       	ldi	r28, 0xE8	; 232
     e2a:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e2c:	07 c0       	rjmp	.+14     	; 0xe3c <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	24 dc       	rcall	.-1976   	; 0x67a <USB_Host_WaitMS>
     e32:	88 23       	and	r24, r24
     e34:	d1 f4       	brne	.+52     	; 0xe6a <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     e36:	20 97       	sbiw	r28, 0x00	; 0
     e38:	b9 f0       	breq	.+46     	; 0xe68 <USB_Host_WaitForIOS+0x48>
     e3a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e3c:	11 23       	and	r17, r17
     e3e:	29 f4       	brne	.+10     	; 0xe4a <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     e40:	80 91 a6 00 	lds	r24, 0x00A6
     e44:	83 ff       	sbrs	r24, 3
     e46:	f3 cf       	rjmp	.-26     	; 0xe2e <USB_Host_WaitForIOS+0xe>
     e48:	0d c0       	rjmp	.+26     	; 0xe64 <USB_Host_WaitForIOS+0x44>
     e4a:	11 30       	cpi	r17, 0x01	; 1
     e4c:	29 f4       	brne	.+10     	; 0xe58 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e4e:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     e52:	80 ff       	sbrs	r24, 0
     e54:	ec cf       	rjmp	.-40     	; 0xe2e <USB_Host_WaitForIOS+0xe>
     e56:	06 c0       	rjmp	.+12     	; 0xe64 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e58:	12 30       	cpi	r17, 0x02	; 2
     e5a:	49 f7       	brne	.-46     	; 0xe2e <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e5c:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     e60:	82 ff       	sbrs	r24, 2
     e62:	e5 cf       	rjmp	.-54     	; 0xe2e <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     e68:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	08 95       	ret

00000e72 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e80:	e0 90 9e 00 	lds	r14, 0x009E
     e84:	ff 24       	eor	r15, r15
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	e8 22       	and	r14, r24
     e8a:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     e8c:	c0 91 2f 01 	lds	r28, 0x012F
     e90:	d0 91 30 01 	lds	r29, 0x0130
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e94:	80 91 9e 00 	lds	r24, 0x009E
     e98:	81 60       	ori	r24, 0x01	; 1
     e9a:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	ec db       	rcall	.-2088   	; 0x67a <USB_Host_WaitMS>
     ea2:	88 23       	and	r24, r24
     ea4:	09 f0       	breq	.+2      	; 0xea8 <USB_Host_SendControlRequest+0x36>
     ea6:	cb c0       	rjmp	.+406    	; 0x103e <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ea8:	80 91 aa 00 	lds	r24, 0x00AA
     eac:	8f 7c       	andi	r24, 0xCF	; 207
     eae:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     eb2:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     eb6:	80 91 a6 00 	lds	r24, 0x00A6
     eba:	8f 7e       	andi	r24, 0xEF	; 239
     ebc:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ec0:	80 91 a9 00 	lds	r24, 0x00A9
     ec4:	8f 7b       	andi	r24, 0xBF	; 191
     ec6:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     eca:	e9 e2       	ldi	r30, 0x29	; 41
     ecc:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     ece:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     ed0:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	e1 33       	cpi	r30, 0x31	; 49
     ed8:	f8 07       	cpc	r31, r24
     eda:	c9 f7       	brne	.-14     	; 0xece <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     edc:	80 91 a6 00 	lds	r24, 0x00A6
     ee0:	87 77       	andi	r24, 0x77	; 119
     ee2:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	9b df       	rcall	.-202    	; 0xe20 <USB_Host_WaitForIOS>
     eea:	88 23       	and	r24, r24
     eec:	09 f0       	breq	.+2      	; 0xef0 <USB_Host_SendControlRequest+0x7e>
     eee:	a7 c0       	rjmp	.+334    	; 0x103e <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ef0:	80 91 a9 00 	lds	r24, 0x00A9
     ef4:	80 64       	ori	r24, 0x40	; 64
     ef6:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	be db       	rcall	.-2180   	; 0x67a <USB_Host_WaitMS>
     efe:	88 23       	and	r24, r24
     f00:	09 f0       	breq	.+2      	; 0xf04 <USB_Host_SendControlRequest+0x92>
     f02:	9d c0       	rjmp	.+314    	; 0x103e <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f04:	80 91 29 01 	lds	r24, 0x0129
     f08:	87 ff       	sbrs	r24, 7
     f0a:	4f c0       	rjmp	.+158    	; 0xfaa <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f0c:	80 91 aa 00 	lds	r24, 0x00AA
     f10:	8f 7c       	andi	r24, 0xCF	; 207
     f12:	80 61       	ori	r24, 0x10	; 16
     f14:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     f18:	01 15       	cp	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	61 f5       	brne	.+88     	; 0xf76 <USB_Host_SendControlRequest+0x104>
     f1e:	2d c0       	rjmp	.+90     	; 0xf7a <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f20:	80 91 a9 00 	lds	r24, 0x00A9
     f24:	8f 7b       	andi	r24, 0xBF	; 191
     f26:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	79 df       	rcall	.-270    	; 0xe20 <USB_Host_WaitForIOS>
     f2e:	88 23       	and	r24, r24
     f30:	09 f0       	breq	.+2      	; 0xf34 <USB_Host_SendControlRequest+0xc2>
     f32:	85 c0       	rjmp	.+266    	; 0x103e <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f34:	80 91 f6 00 	lds	r24, 0x00F6
     f38:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	49 f4       	brne	.+18     	; 0xf52 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
     f40:	c0 e0       	ldi	r28, 0x00	; 0
     f42:	d0 e0       	ldi	r29, 0x00	; 0
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f46:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
     f4a:	f8 01       	movw	r30, r16
     f4c:	81 93       	st	Z+, r24
     f4e:	8f 01       	movw	r16, r30
					DataLen--;
     f50:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f52:	80 91 f6 00 	lds	r24, 0x00F6
     f56:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	11 f0       	breq	.+4      	; 0xf62 <USB_Host_SendControlRequest+0xf0>
     f5e:	20 97       	sbiw	r28, 0x00	; 0
     f60:	91 f7       	brne	.-28     	; 0xf46 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f62:	80 91 a9 00 	lds	r24, 0x00A9
     f66:	80 64       	ori	r24, 0x40	; 64
     f68:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f6c:	80 91 a6 00 	lds	r24, 0x00A6
     f70:	8e 77       	andi	r24, 0x7E	; 126
     f72:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f76:	20 97       	sbiw	r28, 0x00	; 0
     f78:	99 f6       	brne	.-90     	; 0xf20 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f7a:	80 91 aa 00 	lds	r24, 0x00AA
     f7e:	8f 7c       	andi	r24, 0xCF	; 207
     f80:	80 62       	ori	r24, 0x20	; 32
     f82:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f86:	80 91 a9 00 	lds	r24, 0x00A9
     f8a:	8f 7b       	andi	r24, 0xBF	; 191
     f8c:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	46 df       	rcall	.-372    	; 0xe20 <USB_Host_WaitForIOS>
     f94:	88 23       	and	r24, r24
     f96:	09 f0       	breq	.+2      	; 0xf9a <USB_Host_SendControlRequest+0x128>
     f98:	52 c0       	rjmp	.+164    	; 0x103e <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f9a:	80 91 a6 00 	lds	r24, 0x00A6
     f9e:	8b 77       	andi	r24, 0x7B	; 123
     fa0:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	3c df       	rcall	.-392    	; 0xe20 <USB_Host_WaitForIOS>
     fa8:	4a c0       	rjmp	.+148    	; 0x103e <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
     faa:	01 15       	cp	r16, r1
     fac:	11 05       	cpc	r17, r1
     fae:	99 f1       	breq	.+102    	; 0x1016 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fb0:	80 91 aa 00 	lds	r24, 0x00AA
     fb4:	8f 7c       	andi	r24, 0xCF	; 207
     fb6:	80 62       	ori	r24, 0x20	; 32
     fb8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fbc:	80 91 a9 00 	lds	r24, 0x00A9
     fc0:	8f 7b       	andi	r24, 0xBF	; 191
     fc2:	80 93 a9 00 	sts	0x00A9, r24
     fc6:	1c c0       	rjmp	.+56     	; 0x1000 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	2a df       	rcall	.-428    	; 0xe20 <USB_Host_WaitForIOS>
     fcc:	88 23       	and	r24, r24
     fce:	b9 f5       	brne	.+110    	; 0x103e <USB_Host_SendControlRequest+0x1cc>
     fd0:	f8 01       	movw	r30, r16
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
     fd4:	81 91       	ld	r24, Z+
     fd6:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fd8:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
     fdc:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     fde:	59 f0       	breq	.+22     	; 0xff6 <USB_Host_SendControlRequest+0x184>
     fe0:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fe2:	20 91 f6 00 	lds	r18, 0x00F6
     fe6:	30 91 f7 00 	lds	r19, 0x00F7
     fea:	80 91 23 01 	lds	r24, 0x0123
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	28 17       	cp	r18, r24
     ff2:	39 07       	cpc	r19, r25
     ff4:	78 f3       	brcs	.-34     	; 0xfd4 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     ff6:	80 91 a6 00 	lds	r24, 0x00A6
     ffa:	8b 77       	andi	r24, 0x7B	; 123
     ffc:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1000:	20 97       	sbiw	r28, 0x00	; 0
    1002:	11 f7       	brne	.-60     	; 0xfc8 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	0c df       	rcall	.-488    	; 0xe20 <USB_Host_WaitForIOS>
    1008:	88 23       	and	r24, r24
    100a:	c9 f4       	brne	.+50     	; 0x103e <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    100c:	80 91 a9 00 	lds	r24, 0x00A9
    1010:	80 64       	ori	r24, 0x40	; 64
    1012:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1016:	80 91 aa 00 	lds	r24, 0x00AA
    101a:	8f 7c       	andi	r24, 0xCF	; 207
    101c:	80 61       	ori	r24, 0x10	; 16
    101e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1022:	80 91 a9 00 	lds	r24, 0x00A9
    1026:	8f 7b       	andi	r24, 0xBF	; 191
    1028:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	f8 de       	rcall	.-528    	; 0xe20 <USB_Host_WaitForIOS>
    1030:	88 23       	and	r24, r24
    1032:	29 f4       	brne	.+10     	; 0x103e <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1034:	90 91 a6 00 	lds	r25, 0x00A6
    1038:	9e 77       	andi	r25, 0x7E	; 126
    103a:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    103e:	90 91 a9 00 	lds	r25, 0x00A9
    1042:	90 64       	ori	r25, 0x40	; 64
    1044:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1048:	e1 14       	cp	r14, r1
    104a:	f1 04       	cpc	r15, r1
    104c:	29 f4       	brne	.+10     	; 0x1058 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    104e:	90 91 9e 00 	lds	r25, 0x009E
    1052:	9e 7f       	andi	r25, 0xFE	; 254
    1054:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    105e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	08 95       	ret

00001070 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1070:	1f 93       	push	r17
    1072:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1074:	10 92 29 01 	sts	0x0129, r1
    1078:	89 e0       	ldi	r24, 0x09	; 9
    107a:	80 93 2a 01 	sts	0x012A, r24
    107e:	10 93 2b 01 	sts	0x012B, r17
    1082:	10 92 2c 01 	sts	0x012C, r1
    1086:	10 92 2e 01 	sts	0x012E, r1
    108a:	10 92 2d 01 	sts	0x012D, r1
    108e:	10 92 30 01 	sts	0x0130, r1
    1092:	10 92 2f 01 	sts	0x012F, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1096:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	e9 de       	rcall	.-558    	; 0xe72 <USB_Host_SendControlRequest>
    10a0:	88 23       	and	r24, r24
    10a2:	49 f4       	brne	.+18     	; 0x10b6 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    10a4:	10 93 27 01 	sts	0x0127, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    10a8:	11 23       	and	r17, r17
    10aa:	11 f0       	breq	.+4      	; 0x10b0 <USB_Host_SetDeviceConfiguration+0x40>
    10ac:	9b e0       	ldi	r25, 0x0B	; 11
    10ae:	01 c0       	rjmp	.+2      	; 0x10b2 <USB_Host_SetDeviceConfiguration+0x42>
    10b0:	9a e0       	ldi	r25, 0x0A	; 10
    10b2:	90 93 31 01 	sts	0x0131, r25
	}

	return ErrorCode;
}
    10b6:	1f 91       	pop	r17
    10b8:	08 95       	ret

000010ba <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    10ba:	e9 e2       	ldi	r30, 0x29	; 41
    10bc:	f1 e0       	ldi	r31, 0x01	; 1
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	90 93 29 01 	sts	0x0129, r25
    10c4:	9b e0       	ldi	r25, 0x0B	; 11
    10c6:	90 93 2a 01 	sts	0x012A, r25
    10ca:	60 93 2b 01 	sts	0x012B, r22
    10ce:	13 82       	std	Z+3, r1	; 0x03
    10d0:	80 93 2d 01 	sts	0x012D, r24
    10d4:	15 82       	std	Z+5, r1	; 0x05
    10d6:	10 92 30 01 	sts	0x0130, r1
    10da:	10 92 2f 01 	sts	0x012F, r1
    10de:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
}
    10e6:	c5 ce       	rjmp	.-630    	; 0xe72 <USB_Host_SendControlRequest>

000010e8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    10e8:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    10ea:	10 91 a7 00 	lds	r17, 0x00A7
    10ee:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    10f0:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10f4:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    10f8:	15 db       	rcall	.-2518   	; 0x724 <USB_Host_ProcessNextHostState>
    10fa:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    10fe:	1f 91       	pop	r17
    1100:	08 95       	ret

00001102 <DCOMP_Audio_Host_NextAudioControlInterface>:

	return AUDIO_ENUMERROR_NoError;
}

static uint8_t DCOMP_Audio_Host_NextAudioControlInterface(void* CurrentDescriptor)
{
    1102:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1104:	81 81       	ldd	r24, Z+1	; 0x01
    1106:	84 30       	cpi	r24, 0x04	; 4
    1108:	49 f4       	brne	.+18     	; 0x111c <DCOMP_Audio_Host_NextAudioControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    110a:	85 81       	ldd	r24, Z+5	; 0x05
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	31 f4       	brne	.+12     	; 0x111c <DCOMP_Audio_Host_NextAudioControlInterface+0x1a>
    1110:	86 81       	ldd	r24, Z+6	; 0x06
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	19 f4       	brne	.+6      	; 0x111c <DCOMP_Audio_Host_NextAudioControlInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
    1116:	87 81       	ldd	r24, Z+7	; 0x07
    1118:	88 23       	and	r24, r24
    111a:	11 f0       	breq	.+4      	; 0x1120 <DCOMP_Audio_Host_NextAudioControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    111c:	82 e0       	ldi	r24, 0x02	; 2
    111e:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_ControlProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1120:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1122:	08 95       	ret

00001124 <DCOMP_Audio_Host_NextAudioStreamInterface>:

static uint8_t DCOMP_Audio_Host_NextAudioStreamInterface(void* CurrentDescriptor)
{
    1124:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1126:	81 81       	ldd	r24, Z+1	; 0x01
    1128:	84 30       	cpi	r24, 0x04	; 4
    112a:	49 f4       	brne	.+18     	; 0x113e <DCOMP_Audio_Host_NextAudioStreamInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    112c:	85 81       	ldd	r24, Z+5	; 0x05
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	31 f4       	brne	.+12     	; 0x113e <DCOMP_Audio_Host_NextAudioStreamInterface+0x1a>
    1132:	86 81       	ldd	r24, Z+6	; 0x06
    1134:	82 30       	cpi	r24, 0x02	; 2
    1136:	19 f4       	brne	.+6      	; 0x113e <DCOMP_Audio_Host_NextAudioStreamInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
    1138:	87 81       	ldd	r24, Z+7	; 0x07
    113a:	88 23       	and	r24, r24
    113c:	11 f0       	breq	.+4      	; 0x1142 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1142:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1144:	08 95       	ret

00001146 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint>:

static uint8_t DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
    1146:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1148:	81 81       	ldd	r24, Z+1	; 0x01
    114a:	85 30       	cpi	r24, 0x05	; 5
    114c:	29 f4       	brne	.+10     	; 0x1158 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
    114e:	83 81       	ldd	r24, Z+3	; 0x03
    1150:	83 70       	andi	r24, 0x03	; 3
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	19 f4       	brne	.+6      	; 0x115c <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x16>
    1156:	04 c0       	rjmp	.+8      	; 0x1160 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1158:	84 30       	cpi	r24, 0x04	; 4
    115a:	21 f0       	breq	.+8      	; 0x1164 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
		  return DESCRIPTOR_SEARCH_Found;
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1164:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1166:	08 95       	ret

00001168 <Audio_Host_ConfigurePipes>:
#include "AudioClassHost.h"

uint8_t Audio_Host_ConfigurePipes(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    1168:	4f 92       	push	r4
    116a:	5f 92       	push	r5
    116c:	6f 92       	push	r6
    116e:	7f 92       	push	r7
    1170:	8f 92       	push	r8
    1172:	9f 92       	push	r9
    1174:	af 92       	push	r10
    1176:	bf 92       	push	r11
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	00 d0       	rcall	.+0      	; 0x118a <Audio_Host_ConfigurePipes+0x22>
    118a:	00 d0       	rcall	.+0      	; 0x118c <Audio_Host_ConfigurePipes+0x24>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	8c 01       	movw	r16, r24
    1192:	7a 83       	std	Y+2, r23	; 0x02
    1194:	69 83       	std	Y+1, r22	; 0x01
    1196:	fa 01       	movw	r30, r20
    1198:	5c 83       	std	Y+4, r21	; 0x04
    119a:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
    119c:	dc 01       	movw	r26, r24
    119e:	1c 96       	adiw	r26, 0x0c	; 12
    11a0:	1d 92       	st	X+, r1
    11a2:	1d 92       	st	X+, r1
    11a4:	1d 92       	st	X+, r1
    11a6:	1c 92       	st	X, r1
    11a8:	1f 97       	sbiw	r26, 0x0f	; 15

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    11aa:	81 81       	ldd	r24, Z+1	; 0x01
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <Audio_Host_ConfigurePipes+0x4a>
    11b0:	92 c0       	rjmp	.+292    	; 0x12d6 <Audio_Host_ConfigurePipes+0x16e>
    11b2:	44 24       	eor	r4, r4
    11b4:	55 24       	eor	r5, r5
    11b6:	66 24       	eor	r6, r6
    11b8:	77 24       	eor	r7, r7
    11ba:	cc 24       	eor	r12, r12
    11bc:	dd 24       	eor	r13, r13
    11be:	ee 24       	eor	r14, r14
    11c0:	ff 24       	eor	r15, r15
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	88 2e       	mov	r8, r24
    11c6:	91 2c       	mov	r9, r1
    11c8:	8c 0e       	add	r8, r28
    11ca:	9d 1e       	adc	r9, r29
    11cc:	5e 01       	movw	r10, r28
    11ce:	08 94       	sec
    11d0:	a1 1c       	adc	r10, r1
    11d2:	b1 1c       	adc	r11, r1
    11d4:	2f c0       	rjmp	.+94     	; 0x1234 <Audio_Host_ConfigurePipes+0xcc>
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    11d6:	61 14       	cp	r6, r1
    11d8:	71 04       	cpc	r7, r1
    11da:	49 f0       	breq	.+18     	; 0x11ee <Audio_Host_ConfigurePipes+0x86>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11dc:	c5 01       	movw	r24, r10
    11de:	b4 01       	movw	r22, r8
    11e0:	43 ea       	ldi	r20, 0xA3	; 163
    11e2:	58 e0       	ldi	r21, 0x08	; 8
    11e4:	d9 dd       	rcall	.-1102   	; 0xd98 <USB_GetNextDescriptorComp>
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    11e6:	88 23       	and	r24, r24
    11e8:	09 f0       	breq	.+2      	; 0x11ec <Audio_Host_ConfigurePipes+0x84>
    11ea:	8f c0       	rjmp	.+286    	; 0x130a <Audio_Host_ConfigurePipes+0x1a2>
    11ec:	1b c0       	rjmp	.+54     	; 0x1224 <Audio_Host_ConfigurePipes+0xbc>
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11ee:	c5 01       	movw	r24, r10
    11f0:	b4 01       	movw	r22, r8
    11f2:	41 e8       	ldi	r20, 0x81	; 129
    11f4:	58 e0       	ldi	r21, 0x08	; 8
    11f6:	d0 dd       	rcall	.-1120   	; 0xd98 <USB_GetNextDescriptorComp>
    11f8:	88 23       	and	r24, r24
    11fa:	09 f0       	breq	.+2      	; 0x11fe <Audio_Host_ConfigurePipes+0x96>
    11fc:	6e c0       	rjmp	.+220    	; 0x12da <Audio_Host_ConfigurePipes+0x172>
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    11fe:	cb 80       	ldd	r12, Y+3	; 0x03
    1200:	ec 80       	ldd	r14, Y+4	; 0x04

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1202:	c5 01       	movw	r24, r10
    1204:	b4 01       	movw	r22, r8
    1206:	42 e9       	ldi	r20, 0x92	; 146
    1208:	58 e0       	ldi	r21, 0x08	; 8
    120a:	c6 dd       	rcall	.-1140   	; 0xd98 <USB_GetNextDescriptorComp>
    120c:	88 23       	and	r24, r24
    120e:	09 f0       	breq	.+2      	; 0x1212 <Audio_Host_ConfigurePipes+0xaa>
    1210:	64 c0       	rjmp	.+200    	; 0x12da <Audio_Host_ConfigurePipes+0x172>
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1212:	6c 2c       	mov	r6, r12
    1214:	7e 2c       	mov	r7, r14
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1216:	4b 80       	ldd	r4, Y+3	; 0x03
    1218:	5c 80       	ldd	r5, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    121a:	cc 24       	eor	r12, r12
    121c:	dd 24       	eor	r13, r13
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

			DataINEndpoint  = NULL;
    121e:	ee 24       	eor	r14, r14
    1220:	ff 24       	eor	r15, r15
			DataOUTEndpoint = NULL;

			continue;
    1222:	08 c0       	rjmp	.+16     	; 0x1234 <Audio_Host_ConfigurePipes+0xcc>
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1224:	eb 81       	ldd	r30, Y+3	; 0x03
    1226:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1228:	82 81       	ldd	r24, Z+2	; 0x02
    122a:	87 ff       	sbrs	r24, 7
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <Audio_Host_ConfigurePipes+0xca>
		  DataINEndpoint  = EndpointData;
    122e:	7f 01       	movw	r14, r30
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <Audio_Host_ConfigurePipes+0xcc>
		else
		  DataOUTEndpoint = EndpointData;
    1232:	6f 01       	movw	r12, r30
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
    1234:	f8 01       	movw	r30, r16
    1236:	80 81       	ld	r24, Z
    1238:	88 23       	and	r24, r24
    123a:	19 f0       	breq	.+6      	; 0x1242 <Audio_Host_ConfigurePipes+0xda>
    123c:	e1 14       	cp	r14, r1
    123e:	f1 04       	cpc	r15, r1
    1240:	51 f2       	breq	.-108    	; 0x11d6 <Audio_Host_ConfigurePipes+0x6e>
    1242:	d8 01       	movw	r26, r16
    1244:	16 96       	adiw	r26, 0x06	; 6
    1246:	8c 91       	ld	r24, X
    1248:	16 97       	sbiw	r26, 0x06	; 6
    124a:	88 23       	and	r24, r24
    124c:	21 f0       	breq	.+8      	; 0x1256 <Audio_Host_ConfigurePipes+0xee>
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
    124e:	c1 14       	cp	r12, r1
    1250:	d1 04       	cpc	r13, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <Audio_Host_ConfigurePipes+0xee>
    1254:	c0 cf       	rjmp	.-128    	; 0x11d6 <Audio_Host_ConfigurePipes+0x6e>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	AudioInterfaceInfo->Config.DataINPipe.Size   = le16_to_cpu(DataINEndpoint->EndpointSize);
    1256:	f7 01       	movw	r30, r14
    1258:	84 81       	ldd	r24, Z+4	; 0x04
    125a:	95 81       	ldd	r25, Z+5	; 0x05
    125c:	d8 01       	movw	r26, r16
    125e:	12 96       	adiw	r26, 0x02	; 2
    1260:	9c 93       	st	X, r25
    1262:	8e 93       	st	-X, r24
    1264:	11 97       	sbiw	r26, 0x01	; 1
	AudioInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1266:	82 81       	ldd	r24, Z+2	; 0x02
    1268:	13 96       	adiw	r26, 0x03	; 3
    126a:	8c 93       	st	X, r24
    126c:	13 97       	sbiw	r26, 0x03	; 3
	AudioInterfaceInfo->Config.DataINPipe.Type   = EP_TYPE_ISOCHRONOUS;
    126e:	ee 24       	eor	r14, r14
    1270:	e3 94       	inc	r14
    1272:	14 96       	adiw	r26, 0x04	; 4
    1274:	ec 92       	st	X, r14
    1276:	14 97       	sbiw	r26, 0x04	; 4
	AudioInterfaceInfo->Config.DataINPipe.Banks  = 2;
    1278:	22 e0       	ldi	r18, 0x02	; 2
    127a:	15 96       	adiw	r26, 0x05	; 5
    127c:	2c 93       	st	X, r18
    127e:	15 97       	sbiw	r26, 0x05	; 5
	
	AudioInterfaceInfo->Config.DataOUTPipe.Size  = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1280:	f6 01       	movw	r30, r12
    1282:	84 81       	ldd	r24, Z+4	; 0x04
    1284:	95 81       	ldd	r25, Z+5	; 0x05
    1286:	18 96       	adiw	r26, 0x08	; 8
    1288:	9c 93       	st	X, r25
    128a:	8e 93       	st	-X, r24
    128c:	17 97       	sbiw	r26, 0x07	; 7
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    128e:	82 81       	ldd	r24, Z+2	; 0x02
    1290:	19 96       	adiw	r26, 0x09	; 9
    1292:	8c 93       	st	X, r24
    1294:	19 97       	sbiw	r26, 0x09	; 9
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
    1296:	1a 96       	adiw	r26, 0x0a	; 10
    1298:	ec 92       	st	X, r14
    129a:	1a 97       	sbiw	r26, 0x0a	; 10
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;
    129c:	1b 96       	adiw	r26, 0x0b	; 11
    129e:	2c 93       	st	X, r18
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
    12a0:	c8 01       	movw	r24, r16
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	cf db       	rcall	.-2146   	; 0xa44 <Pipe_ConfigurePipeTable>
    12a6:	88 23       	and	r24, r24
    12a8:	d1 f0       	breq	.+52     	; 0x12de <Audio_Host_ConfigurePipes+0x176>
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
    12aa:	c8 01       	movw	r24, r16
    12ac:	06 96       	adiw	r24, 0x06	; 6
    12ae:	61 e0       	ldi	r22, 0x01	; 1
    12b0:	c9 db       	rcall	.-2158   	; 0xa44 <Pipe_ConfigurePipeTable>
    12b2:	88 23       	and	r24, r24
    12b4:	a1 f0       	breq	.+40     	; 0x12de <Audio_Host_ConfigurePipes+0x176>
	  return false;

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
    12b6:	d3 01       	movw	r26, r6
    12b8:	12 96       	adiw	r26, 0x02	; 2
    12ba:	8c 91       	ld	r24, X
    12bc:	f8 01       	movw	r30, r16
    12be:	85 87       	std	Z+13, r24	; 0x0d
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
    12c0:	d2 01       	movw	r26, r4
    12c2:	12 96       	adiw	r26, 0x02	; 2
    12c4:	8c 91       	ld	r24, X
    12c6:	12 97       	sbiw	r26, 0x02	; 2
    12c8:	86 87       	std	Z+14, r24	; 0x0e
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
    12ca:	13 96       	adiw	r26, 0x03	; 3
    12cc:	8c 91       	ld	r24, X
    12ce:	13 97       	sbiw	r26, 0x03	; 3
    12d0:	87 87       	std	Z+15, r24	; 0x0f
	AudioInterfaceInfo->State.IsActive = true;
    12d2:	e4 86       	std	Z+12, r14	; 0x0c
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <Audio_Host_ConfigurePipes+0x176>
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	03 c0       	rjmp	.+6      	; 0x12e0 <Audio_Host_ConfigurePipes+0x178>
				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
				                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <Audio_Host_ConfigurePipes+0x178>
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;
    12de:	80 e0       	ldi	r24, 0x00	; 0
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
	AudioInterfaceInfo->State.IsActive = true;

	return AUDIO_ENUMERROR_NoError;
}
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	bf 90       	pop	r11
    12fa:	af 90       	pop	r10
    12fc:	9f 90       	pop	r9
    12fe:	8f 90       	pop	r8
    1300:	7f 90       	pop	r7
    1302:	6f 90       	pop	r6
    1304:	5f 90       	pop	r5
    1306:	4f 90       	pop	r4
    1308:	08 95       	ret
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    130a:	c5 01       	movw	r24, r10
    130c:	b4 01       	movw	r22, r8
    130e:	42 e9       	ldi	r20, 0x92	; 146
    1310:	58 e0       	ldi	r21, 0x08	; 8
    1312:	42 dd       	rcall	.-1404   	; 0xd98 <USB_GetNextDescriptorComp>
	{
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
    1314:	88 23       	and	r24, r24
    1316:	09 f0       	breq	.+2      	; 0x131a <Audio_Host_ConfigurePipes+0x1b2>
    1318:	6a cf       	rjmp	.-300    	; 0x11ee <Audio_Host_ConfigurePipes+0x86>
    131a:	7d cf       	rjmp	.-262    	; 0x1216 <Audio_Host_ConfigurePipes+0xae>

0000131c <Audio_Host_StartStopStreaming>:
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t Audio_Host_StartStopStreaming(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
			                          const bool EnableStreaming)
{
    131c:	fc 01       	movw	r30, r24
	if (!(AudioInterfaceInfo->State.IsActive))
    131e:	84 85       	ldd	r24, Z+12	; 0x0c
    1320:	88 23       	and	r24, r24
    1322:	39 f0       	breq	.+14     	; 0x1332 <Audio_Host_StartStopStreaming+0x16>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
    1324:	86 85       	ldd	r24, Z+14	; 0x0e
    1326:	66 23       	and	r22, r22
    1328:	11 f0       	breq	.+4      	; 0x132e <Audio_Host_StartStopStreaming+0x12>
    132a:	67 85       	ldd	r22, Z+15	; 0x0f
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <Audio_Host_StartStopStreaming+0x14>
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	c4 ce       	rjmp	.-632    	; 0x10ba <USB_Host_SetInterfaceAltSetting>

uint8_t Audio_Host_StartStopStreaming(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
			                          const bool EnableStreaming)
{
	if (!(AudioInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1332:	81 e0       	ldi	r24, 0x01	; 1

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
	                                       EnableStreaming ? AudioInterfaceInfo->State.EnabledStreamingAltIndex : 0);
}
    1334:	08 95       	ret

00001336 <Audio_Host_GetSetEndpointProperty>:
			                              const uint8_t DataPipeIndex,
			                              const uint8_t EndpointProperty,
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
    1336:	ef 92       	push	r14
    1338:	ff 92       	push	r15
    133a:	0f 93       	push	r16
    133c:	1f 93       	push	r17
	if (!(AudioInterfaceInfo->State.IsActive))
    133e:	fc 01       	movw	r30, r24
    1340:	84 85       	ldd	r24, Z+12	; 0x0c
    1342:	88 23       	and	r24, r24
    1344:	39 f1       	breq	.+78     	; 0x1394 <Audio_Host_GetSetEndpointProperty+0x5e>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t RequestType;
	uint8_t EndpointAddress;

	if (EndpointProperty & 0x80)
    1346:	47 ff       	sbrs	r20, 7
    1348:	02 c0       	rjmp	.+4      	; 0x134e <Audio_Host_GetSetEndpointProperty+0x18>
	  RequestType = (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT);
    134a:	92 ea       	ldi	r25, 0xA2	; 162
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <Audio_Host_GetSetEndpointProperty+0x1a>
	else
	  RequestType = (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT);
    134e:	92 e2       	ldi	r25, 0x22	; 34
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1350:	6f 70       	andi	r22, 0x0F	; 15
    1352:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    1356:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    135a:	53 2f       	mov	r21, r19
    135c:	5f 70       	andi	r21, 0x0F	; 15
    135e:	30 ff       	sbrs	r19, 0
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <Audio_Host_GetSetEndpointProperty+0x30>
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <Audio_Host_GetSetEndpointProperty+0x32>
    1366:	80 e8       	ldi	r24, 0x80	; 128

	Pipe_SelectPipe(DataPipeIndex);
	EndpointAddress = Pipe_GetBoundEndpointAddress();

	USB_ControlRequest = (USB_Request_Header_t)
    1368:	90 93 29 01 	sts	0x0129, r25
    136c:	40 93 2a 01 	sts	0x012A, r20
    1370:	eb e2       	ldi	r30, 0x2B	; 43
    1372:	f1 e0       	ldi	r31, 0x01	; 1
    1374:	10 92 2b 01 	sts	0x012B, r1
    1378:	21 83       	std	Z+1, r18	; 0x01
    137a:	85 2b       	or	r24, r21
    137c:	80 93 2d 01 	sts	0x012D, r24
    1380:	13 82       	std	Z+3, r1	; 0x03
    1382:	10 93 30 01 	sts	0x0130, r17
    1386:	00 93 2f 01 	sts	0x012F, r16
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    138a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = DataLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
    138e:	c7 01       	movw	r24, r14
    1390:	70 dd       	rcall	.-1312   	; 0xe72 <USB_Host_SendControlRequest>
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <Audio_Host_GetSetEndpointProperty+0x60>
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
	if (!(AudioInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1394:	81 e0       	ldi	r24, 0x01	; 1
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
}
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	08 95       	ret

000013a0 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    13a0:	90 91 c8 00 	lds	r25, 0x00C8
    13a4:	95 ff       	sbrs	r25, 5
    13a6:	fc cf       	rjmp	.-8      	; 0x13a0 <Serial_putchar>
				UDR1 = DataByte;
    13a8:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	08 95       	ret

000013b2 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    13b2:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    13b6:	87 ff       	sbrs	r24, 7
    13b8:	08 c0       	rjmp	.+16     	; 0x13ca <Serial_getchar+0x18>
    13ba:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    13be:	87 ff       	sbrs	r24, 7
    13c0:	07 c0       	rjmp	.+14     	; 0x13d0 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    13c2:	20 91 ce 00 	lds	r18, 0x00CE
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	05 c0       	rjmp	.+10     	; 0x13d4 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    13ca:	2e ef       	ldi	r18, 0xFE	; 254
    13cc:	3f ef       	ldi	r19, 0xFF	; 255
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    13d0:	2f ef       	ldi	r18, 0xFF	; 255
    13d2:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    13d4:	c9 01       	movw	r24, r18
    13d6:	08 95       	ret

000013d8 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    13d8:	fc 01       	movw	r30, r24
	if (!(Stream))
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	51 f4       	brne	.+20     	; 0x13f2 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    13de:	e2 e3       	ldi	r30, 0x32	; 50
    13e0:	f1 e0       	ldi	r31, 0x01	; 1
    13e2:	f0 93 41 01 	sts	0x0141, r31
    13e6:	e0 93 40 01 	sts	0x0140, r30
		stdout = Stream;
    13ea:	f0 93 43 01 	sts	0x0143, r31
    13ee:	e0 93 42 01 	sts	0x0142, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    13f2:	8e e0       	ldi	r24, 0x0E	; 14
    13f4:	df 01       	movw	r26, r30
    13f6:	1d 92       	st	X+, r1
    13f8:	8a 95       	dec	r24
    13fa:	e9 f7       	brne	.-6      	; 0x13f6 <Serial_CreateStream+0x1e>
    13fc:	83 e0       	ldi	r24, 0x03	; 3
    13fe:	83 83       	std	Z+3, r24	; 0x03
    1400:	80 ed       	ldi	r24, 0xD0	; 208
    1402:	99 e0       	ldi	r25, 0x09	; 9
    1404:	91 87       	std	Z+9, r25	; 0x09
    1406:	80 87       	std	Z+8, r24	; 0x08
    1408:	89 ed       	ldi	r24, 0xD9	; 217
    140a:	99 e0       	ldi	r25, 0x09	; 9
    140c:	93 87       	std	Z+11, r25	; 0x0b
    140e:	82 87       	std	Z+10, r24	; 0x0a
}
    1410:	08 95       	ret

00001412 <printf_P>:
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	fe 01       	movw	r30, r28
    141c:	35 96       	adiw	r30, 0x05	; 5
    141e:	61 91       	ld	r22, Z+
    1420:	71 91       	ld	r23, Z+
    1422:	80 91 42 01 	lds	r24, 0x0142
    1426:	90 91 43 01 	lds	r25, 0x0143
    142a:	dc 01       	movw	r26, r24
    142c:	13 96       	adiw	r26, 0x03	; 3
    142e:	2c 91       	ld	r18, X
    1430:	13 97       	sbiw	r26, 0x03	; 3
    1432:	28 60       	ori	r18, 0x08	; 8
    1434:	13 96       	adiw	r26, 0x03	; 3
    1436:	2c 93       	st	X, r18
    1438:	af 01       	movw	r20, r30
    143a:	42 d0       	rcall	.+132    	; 0x14c0 <vfprintf>
    143c:	e0 91 42 01 	lds	r30, 0x0142
    1440:	f0 91 43 01 	lds	r31, 0x0143
    1444:	23 81       	ldd	r18, Z+3	; 0x03
    1446:	27 7f       	andi	r18, 0xF7	; 247
    1448:	23 83       	std	Z+3, r18	; 0x03
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <puts_P>:
    1450:	ef 92       	push	r14
    1452:	ff 92       	push	r15
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	8c 01       	movw	r16, r24
    145e:	e0 91 42 01 	lds	r30, 0x0142
    1462:	f0 91 43 01 	lds	r31, 0x0143
    1466:	83 81       	ldd	r24, Z+3	; 0x03
    1468:	81 ff       	sbrs	r24, 1
    146a:	20 c0       	rjmp	.+64     	; 0x14ac <puts_P+0x5c>
    146c:	c0 e0       	ldi	r28, 0x00	; 0
    146e:	d0 e0       	ldi	r29, 0x00	; 0
    1470:	0c c0       	rjmp	.+24     	; 0x148a <puts_P+0x3a>
    1472:	db 01       	movw	r26, r22
    1474:	18 96       	adiw	r26, 0x08	; 8
    1476:	ed 91       	ld	r30, X+
    1478:	fc 91       	ld	r31, X
    147a:	19 97       	sbiw	r26, 0x09	; 9
    147c:	09 95       	icall
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	11 f0       	breq	.+4      	; 0x1486 <puts_P+0x36>
    1482:	cf ef       	ldi	r28, 0xFF	; 255
    1484:	df ef       	ldi	r29, 0xFF	; 255
    1486:	0f 5f       	subi	r16, 0xFF	; 255
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	f8 01       	movw	r30, r16
    148c:	84 91       	lpm	r24, Z+
    148e:	60 91 42 01 	lds	r22, 0x0142
    1492:	70 91 43 01 	lds	r23, 0x0143
    1496:	88 23       	and	r24, r24
    1498:	61 f7       	brne	.-40     	; 0x1472 <puts_P+0x22>
    149a:	db 01       	movw	r26, r22
    149c:	18 96       	adiw	r26, 0x08	; 8
    149e:	ed 91       	ld	r30, X+
    14a0:	fc 91       	ld	r31, X
    14a2:	19 97       	sbiw	r26, 0x09	; 9
    14a4:	8a e0       	ldi	r24, 0x0A	; 10
    14a6:	09 95       	icall
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	11 f0       	breq	.+4      	; 0x14b0 <puts_P+0x60>
    14ac:	cf ef       	ldi	r28, 0xFF	; 255
    14ae:	df ef       	ldi	r29, 0xFF	; 255
    14b0:	ce 01       	movw	r24, r28
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	08 95       	ret

000014c0 <vfprintf>:
    14c0:	2f 92       	push	r2
    14c2:	3f 92       	push	r3
    14c4:	4f 92       	push	r4
    14c6:	5f 92       	push	r5
    14c8:	6f 92       	push	r6
    14ca:	7f 92       	push	r7
    14cc:	8f 92       	push	r8
    14ce:	9f 92       	push	r9
    14d0:	af 92       	push	r10
    14d2:	bf 92       	push	r11
    14d4:	cf 92       	push	r12
    14d6:	df 92       	push	r13
    14d8:	ef 92       	push	r14
    14da:	ff 92       	push	r15
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	2c 97       	sbiw	r28, 0x0c	; 12
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	6c 01       	movw	r12, r24
    14f6:	1b 01       	movw	r2, r22
    14f8:	8a 01       	movw	r16, r20
    14fa:	fc 01       	movw	r30, r24
    14fc:	17 82       	std	Z+7, r1	; 0x07
    14fe:	16 82       	std	Z+6, r1	; 0x06
    1500:	83 81       	ldd	r24, Z+3	; 0x03
    1502:	81 ff       	sbrs	r24, 1
    1504:	c4 c1       	rjmp	.+904    	; 0x188e <vfprintf+0x3ce>
    1506:	2e 01       	movw	r4, r28
    1508:	08 94       	sec
    150a:	41 1c       	adc	r4, r1
    150c:	51 1c       	adc	r5, r1
    150e:	f6 01       	movw	r30, r12
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	f1 01       	movw	r30, r2
    1514:	93 fd       	sbrc	r25, 3
    1516:	85 91       	lpm	r24, Z+
    1518:	93 ff       	sbrs	r25, 3
    151a:	81 91       	ld	r24, Z+
    151c:	1f 01       	movw	r2, r30
    151e:	88 23       	and	r24, r24
    1520:	09 f4       	brne	.+2      	; 0x1524 <vfprintf+0x64>
    1522:	b1 c1       	rjmp	.+866    	; 0x1886 <vfprintf+0x3c6>
    1524:	85 32       	cpi	r24, 0x25	; 37
    1526:	39 f4       	brne	.+14     	; 0x1536 <vfprintf+0x76>
    1528:	93 fd       	sbrc	r25, 3
    152a:	85 91       	lpm	r24, Z+
    152c:	93 ff       	sbrs	r25, 3
    152e:	81 91       	ld	r24, Z+
    1530:	1f 01       	movw	r2, r30
    1532:	85 32       	cpi	r24, 0x25	; 37
    1534:	21 f4       	brne	.+8      	; 0x153e <vfprintf+0x7e>
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	b6 01       	movw	r22, r12
    153a:	db d1       	rcall	.+950    	; 0x18f2 <fputc>
    153c:	e8 cf       	rjmp	.-48     	; 0x150e <vfprintf+0x4e>
    153e:	ee 24       	eor	r14, r14
    1540:	ff 24       	eor	r15, r15
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	20 32       	cpi	r18, 0x20	; 32
    1546:	b0 f4       	brcc	.+44     	; 0x1574 <vfprintf+0xb4>
    1548:	8b 32       	cpi	r24, 0x2B	; 43
    154a:	69 f0       	breq	.+26     	; 0x1566 <vfprintf+0xa6>
    154c:	8c 32       	cpi	r24, 0x2C	; 44
    154e:	28 f4       	brcc	.+10     	; 0x155a <vfprintf+0x9a>
    1550:	80 32       	cpi	r24, 0x20	; 32
    1552:	51 f0       	breq	.+20     	; 0x1568 <vfprintf+0xa8>
    1554:	83 32       	cpi	r24, 0x23	; 35
    1556:	71 f4       	brne	.+28     	; 0x1574 <vfprintf+0xb4>
    1558:	0b c0       	rjmp	.+22     	; 0x1570 <vfprintf+0xb0>
    155a:	8d 32       	cpi	r24, 0x2D	; 45
    155c:	39 f0       	breq	.+14     	; 0x156c <vfprintf+0xac>
    155e:	80 33       	cpi	r24, 0x30	; 48
    1560:	49 f4       	brne	.+18     	; 0x1574 <vfprintf+0xb4>
    1562:	21 60       	ori	r18, 0x01	; 1
    1564:	2c c0       	rjmp	.+88     	; 0x15be <vfprintf+0xfe>
    1566:	22 60       	ori	r18, 0x02	; 2
    1568:	24 60       	ori	r18, 0x04	; 4
    156a:	29 c0       	rjmp	.+82     	; 0x15be <vfprintf+0xfe>
    156c:	28 60       	ori	r18, 0x08	; 8
    156e:	27 c0       	rjmp	.+78     	; 0x15be <vfprintf+0xfe>
    1570:	20 61       	ori	r18, 0x10	; 16
    1572:	25 c0       	rjmp	.+74     	; 0x15be <vfprintf+0xfe>
    1574:	27 fd       	sbrc	r18, 7
    1576:	2c c0       	rjmp	.+88     	; 0x15d0 <vfprintf+0x110>
    1578:	38 2f       	mov	r19, r24
    157a:	30 53       	subi	r19, 0x30	; 48
    157c:	3a 30       	cpi	r19, 0x0A	; 10
    157e:	98 f4       	brcc	.+38     	; 0x15a6 <vfprintf+0xe6>
    1580:	26 ff       	sbrs	r18, 6
    1582:	08 c0       	rjmp	.+16     	; 0x1594 <vfprintf+0xd4>
    1584:	8e 2d       	mov	r24, r14
    1586:	88 0f       	add	r24, r24
    1588:	e8 2e       	mov	r14, r24
    158a:	ee 0c       	add	r14, r14
    158c:	ee 0c       	add	r14, r14
    158e:	e8 0e       	add	r14, r24
    1590:	e3 0e       	add	r14, r19
    1592:	15 c0       	rjmp	.+42     	; 0x15be <vfprintf+0xfe>
    1594:	8f 2d       	mov	r24, r15
    1596:	88 0f       	add	r24, r24
    1598:	f8 2e       	mov	r15, r24
    159a:	ff 0c       	add	r15, r15
    159c:	ff 0c       	add	r15, r15
    159e:	f8 0e       	add	r15, r24
    15a0:	f3 0e       	add	r15, r19
    15a2:	20 62       	ori	r18, 0x20	; 32
    15a4:	0c c0       	rjmp	.+24     	; 0x15be <vfprintf+0xfe>
    15a6:	8e 32       	cpi	r24, 0x2E	; 46
    15a8:	21 f4       	brne	.+8      	; 0x15b2 <vfprintf+0xf2>
    15aa:	26 fd       	sbrc	r18, 6
    15ac:	6c c1       	rjmp	.+728    	; 0x1886 <vfprintf+0x3c6>
    15ae:	20 64       	ori	r18, 0x40	; 64
    15b0:	06 c0       	rjmp	.+12     	; 0x15be <vfprintf+0xfe>
    15b2:	8c 36       	cpi	r24, 0x6C	; 108
    15b4:	11 f4       	brne	.+4      	; 0x15ba <vfprintf+0xfa>
    15b6:	20 68       	ori	r18, 0x80	; 128
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <vfprintf+0xfe>
    15ba:	88 36       	cpi	r24, 0x68	; 104
    15bc:	49 f4       	brne	.+18     	; 0x15d0 <vfprintf+0x110>
    15be:	f1 01       	movw	r30, r2
    15c0:	93 fd       	sbrc	r25, 3
    15c2:	85 91       	lpm	r24, Z+
    15c4:	93 ff       	sbrs	r25, 3
    15c6:	81 91       	ld	r24, Z+
    15c8:	1f 01       	movw	r2, r30
    15ca:	88 23       	and	r24, r24
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <vfprintf+0x110>
    15ce:	ba cf       	rjmp	.-140    	; 0x1544 <vfprintf+0x84>
    15d0:	98 2f       	mov	r25, r24
    15d2:	95 54       	subi	r25, 0x45	; 69
    15d4:	93 30       	cpi	r25, 0x03	; 3
    15d6:	18 f0       	brcs	.+6      	; 0x15de <vfprintf+0x11e>
    15d8:	90 52       	subi	r25, 0x20	; 32
    15da:	93 30       	cpi	r25, 0x03	; 3
    15dc:	28 f4       	brcc	.+10     	; 0x15e8 <vfprintf+0x128>
    15de:	0c 5f       	subi	r16, 0xFC	; 252
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	ff e3       	ldi	r31, 0x3F	; 63
    15e4:	f9 83       	std	Y+1, r31	; 0x01
    15e6:	0d c0       	rjmp	.+26     	; 0x1602 <vfprintf+0x142>
    15e8:	83 36       	cpi	r24, 0x63	; 99
    15ea:	31 f0       	breq	.+12     	; 0x15f8 <vfprintf+0x138>
    15ec:	83 37       	cpi	r24, 0x73	; 115
    15ee:	71 f0       	breq	.+28     	; 0x160c <vfprintf+0x14c>
    15f0:	83 35       	cpi	r24, 0x53	; 83
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <vfprintf+0x136>
    15f4:	5c c0       	rjmp	.+184    	; 0x16ae <vfprintf+0x1ee>
    15f6:	21 c0       	rjmp	.+66     	; 0x163a <vfprintf+0x17a>
    15f8:	f8 01       	movw	r30, r16
    15fa:	80 81       	ld	r24, Z
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	0e 5f       	subi	r16, 0xFE	; 254
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	42 01       	movw	r8, r4
    1604:	71 e0       	ldi	r23, 0x01	; 1
    1606:	a7 2e       	mov	r10, r23
    1608:	b1 2c       	mov	r11, r1
    160a:	15 c0       	rjmp	.+42     	; 0x1636 <vfprintf+0x176>
    160c:	62 e0       	ldi	r22, 0x02	; 2
    160e:	66 2e       	mov	r6, r22
    1610:	71 2c       	mov	r7, r1
    1612:	60 0e       	add	r6, r16
    1614:	71 1e       	adc	r7, r17
    1616:	f8 01       	movw	r30, r16
    1618:	80 80       	ld	r8, Z
    161a:	91 80       	ldd	r9, Z+1	; 0x01
    161c:	26 ff       	sbrs	r18, 6
    161e:	03 c0       	rjmp	.+6      	; 0x1626 <vfprintf+0x166>
    1620:	6e 2d       	mov	r22, r14
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	02 c0       	rjmp	.+4      	; 0x162a <vfprintf+0x16a>
    1626:	6f ef       	ldi	r22, 0xFF	; 255
    1628:	7f ef       	ldi	r23, 0xFF	; 255
    162a:	c4 01       	movw	r24, r8
    162c:	2c 87       	std	Y+12, r18	; 0x0c
    162e:	56 d1       	rcall	.+684    	; 0x18dc <strnlen>
    1630:	5c 01       	movw	r10, r24
    1632:	83 01       	movw	r16, r6
    1634:	2c 85       	ldd	r18, Y+12	; 0x0c
    1636:	2f 77       	andi	r18, 0x7F	; 127
    1638:	16 c0       	rjmp	.+44     	; 0x1666 <vfprintf+0x1a6>
    163a:	52 e0       	ldi	r21, 0x02	; 2
    163c:	65 2e       	mov	r6, r21
    163e:	71 2c       	mov	r7, r1
    1640:	60 0e       	add	r6, r16
    1642:	71 1e       	adc	r7, r17
    1644:	f8 01       	movw	r30, r16
    1646:	80 80       	ld	r8, Z
    1648:	91 80       	ldd	r9, Z+1	; 0x01
    164a:	26 ff       	sbrs	r18, 6
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <vfprintf+0x194>
    164e:	6e 2d       	mov	r22, r14
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <vfprintf+0x198>
    1654:	6f ef       	ldi	r22, 0xFF	; 255
    1656:	7f ef       	ldi	r23, 0xFF	; 255
    1658:	c4 01       	movw	r24, r8
    165a:	2c 87       	std	Y+12, r18	; 0x0c
    165c:	34 d1       	rcall	.+616    	; 0x18c6 <strnlen_P>
    165e:	5c 01       	movw	r10, r24
    1660:	2c 85       	ldd	r18, Y+12	; 0x0c
    1662:	20 68       	ori	r18, 0x80	; 128
    1664:	83 01       	movw	r16, r6
    1666:	23 fd       	sbrc	r18, 3
    1668:	1e c0       	rjmp	.+60     	; 0x16a6 <vfprintf+0x1e6>
    166a:	07 c0       	rjmp	.+14     	; 0x167a <vfprintf+0x1ba>
    166c:	80 e2       	ldi	r24, 0x20	; 32
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	b6 01       	movw	r22, r12
    1672:	2c 87       	std	Y+12, r18	; 0x0c
    1674:	3e d1       	rcall	.+636    	; 0x18f2 <fputc>
    1676:	fa 94       	dec	r15
    1678:	2c 85       	ldd	r18, Y+12	; 0x0c
    167a:	8f 2d       	mov	r24, r15
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a8 16       	cp	r10, r24
    1680:	b9 06       	cpc	r11, r25
    1682:	a0 f3       	brcs	.-24     	; 0x166c <vfprintf+0x1ac>
    1684:	10 c0       	rjmp	.+32     	; 0x16a6 <vfprintf+0x1e6>
    1686:	f4 01       	movw	r30, r8
    1688:	27 fd       	sbrc	r18, 7
    168a:	85 91       	lpm	r24, Z+
    168c:	27 ff       	sbrs	r18, 7
    168e:	81 91       	ld	r24, Z+
    1690:	4f 01       	movw	r8, r30
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	b6 01       	movw	r22, r12
    1696:	2c 87       	std	Y+12, r18	; 0x0c
    1698:	2c d1       	rcall	.+600    	; 0x18f2 <fputc>
    169a:	2c 85       	ldd	r18, Y+12	; 0x0c
    169c:	f1 10       	cpse	r15, r1
    169e:	fa 94       	dec	r15
    16a0:	08 94       	sec
    16a2:	a1 08       	sbc	r10, r1
    16a4:	b1 08       	sbc	r11, r1
    16a6:	a1 14       	cp	r10, r1
    16a8:	b1 04       	cpc	r11, r1
    16aa:	69 f7       	brne	.-38     	; 0x1686 <vfprintf+0x1c6>
    16ac:	e9 c0       	rjmp	.+466    	; 0x1880 <vfprintf+0x3c0>
    16ae:	84 36       	cpi	r24, 0x64	; 100
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <vfprintf+0x1f6>
    16b2:	89 36       	cpi	r24, 0x69	; 105
    16b4:	41 f5       	brne	.+80     	; 0x1706 <vfprintf+0x246>
    16b6:	27 ff       	sbrs	r18, 7
    16b8:	08 c0       	rjmp	.+16     	; 0x16ca <vfprintf+0x20a>
    16ba:	f8 01       	movw	r30, r16
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	0c 5f       	subi	r16, 0xFC	; 252
    16c6:	1f 4f       	sbci	r17, 0xFF	; 255
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <vfprintf+0x21c>
    16ca:	f8 01       	movw	r30, r16
    16cc:	60 81       	ld	r22, Z
    16ce:	71 81       	ldd	r23, Z+1	; 0x01
    16d0:	88 27       	eor	r24, r24
    16d2:	77 fd       	sbrc	r23, 7
    16d4:	80 95       	com	r24
    16d6:	98 2f       	mov	r25, r24
    16d8:	0e 5f       	subi	r16, 0xFE	; 254
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	4f e6       	ldi	r20, 0x6F	; 111
    16de:	b4 2e       	mov	r11, r20
    16e0:	b2 22       	and	r11, r18
    16e2:	97 ff       	sbrs	r25, 7
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <vfprintf+0x238>
    16e6:	90 95       	com	r25
    16e8:	80 95       	com	r24
    16ea:	70 95       	com	r23
    16ec:	61 95       	neg	r22
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	8f 4f       	sbci	r24, 0xFF	; 255
    16f2:	9f 4f       	sbci	r25, 0xFF	; 255
    16f4:	f0 e8       	ldi	r31, 0x80	; 128
    16f6:	bf 2a       	or	r11, r31
    16f8:	a2 01       	movw	r20, r4
    16fa:	2a e0       	ldi	r18, 0x0A	; 10
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	25 d1       	rcall	.+586    	; 0x194a <__ultoa_invert>
    1700:	78 2e       	mov	r7, r24
    1702:	74 18       	sub	r7, r4
    1704:	44 c0       	rjmp	.+136    	; 0x178e <vfprintf+0x2ce>
    1706:	85 37       	cpi	r24, 0x75	; 117
    1708:	31 f4       	brne	.+12     	; 0x1716 <vfprintf+0x256>
    170a:	3f ee       	ldi	r19, 0xEF	; 239
    170c:	b3 2e       	mov	r11, r19
    170e:	b2 22       	and	r11, r18
    1710:	2a e0       	ldi	r18, 0x0A	; 10
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	25 c0       	rjmp	.+74     	; 0x1760 <vfprintf+0x2a0>
    1716:	99 ef       	ldi	r25, 0xF9	; 249
    1718:	b9 2e       	mov	r11, r25
    171a:	b2 22       	and	r11, r18
    171c:	8f 36       	cpi	r24, 0x6F	; 111
    171e:	c1 f0       	breq	.+48     	; 0x1750 <vfprintf+0x290>
    1720:	80 37       	cpi	r24, 0x70	; 112
    1722:	20 f4       	brcc	.+8      	; 0x172c <vfprintf+0x26c>
    1724:	88 35       	cpi	r24, 0x58	; 88
    1726:	09 f0       	breq	.+2      	; 0x172a <vfprintf+0x26a>
    1728:	ae c0       	rjmp	.+348    	; 0x1886 <vfprintf+0x3c6>
    172a:	0d c0       	rjmp	.+26     	; 0x1746 <vfprintf+0x286>
    172c:	80 37       	cpi	r24, 0x70	; 112
    172e:	21 f0       	breq	.+8      	; 0x1738 <vfprintf+0x278>
    1730:	88 37       	cpi	r24, 0x78	; 120
    1732:	09 f0       	breq	.+2      	; 0x1736 <vfprintf+0x276>
    1734:	a8 c0       	rjmp	.+336    	; 0x1886 <vfprintf+0x3c6>
    1736:	02 c0       	rjmp	.+4      	; 0x173c <vfprintf+0x27c>
    1738:	20 e1       	ldi	r18, 0x10	; 16
    173a:	b2 2a       	or	r11, r18
    173c:	b4 fe       	sbrs	r11, 4
    173e:	0b c0       	rjmp	.+22     	; 0x1756 <vfprintf+0x296>
    1740:	84 e0       	ldi	r24, 0x04	; 4
    1742:	b8 2a       	or	r11, r24
    1744:	08 c0       	rjmp	.+16     	; 0x1756 <vfprintf+0x296>
    1746:	b4 fe       	sbrs	r11, 4
    1748:	09 c0       	rjmp	.+18     	; 0x175c <vfprintf+0x29c>
    174a:	e6 e0       	ldi	r30, 0x06	; 6
    174c:	be 2a       	or	r11, r30
    174e:	06 c0       	rjmp	.+12     	; 0x175c <vfprintf+0x29c>
    1750:	28 e0       	ldi	r18, 0x08	; 8
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <vfprintf+0x2a0>
    1756:	20 e1       	ldi	r18, 0x10	; 16
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x2a0>
    175c:	20 e1       	ldi	r18, 0x10	; 16
    175e:	32 e0       	ldi	r19, 0x02	; 2
    1760:	b7 fe       	sbrs	r11, 7
    1762:	08 c0       	rjmp	.+16     	; 0x1774 <vfprintf+0x2b4>
    1764:	f8 01       	movw	r30, r16
    1766:	60 81       	ld	r22, Z
    1768:	71 81       	ldd	r23, Z+1	; 0x01
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	93 81       	ldd	r25, Z+3	; 0x03
    176e:	0c 5f       	subi	r16, 0xFC	; 252
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	07 c0       	rjmp	.+14     	; 0x1782 <vfprintf+0x2c2>
    1774:	f8 01       	movw	r30, r16
    1776:	60 81       	ld	r22, Z
    1778:	71 81       	ldd	r23, Z+1	; 0x01
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 5f       	subi	r16, 0xFE	; 254
    1780:	1f 4f       	sbci	r17, 0xFF	; 255
    1782:	a2 01       	movw	r20, r4
    1784:	e2 d0       	rcall	.+452    	; 0x194a <__ultoa_invert>
    1786:	78 2e       	mov	r7, r24
    1788:	74 18       	sub	r7, r4
    178a:	ff e7       	ldi	r31, 0x7F	; 127
    178c:	bf 22       	and	r11, r31
    178e:	b6 fe       	sbrs	r11, 6
    1790:	0b c0       	rjmp	.+22     	; 0x17a8 <vfprintf+0x2e8>
    1792:	2e ef       	ldi	r18, 0xFE	; 254
    1794:	b2 22       	and	r11, r18
    1796:	7e 14       	cp	r7, r14
    1798:	38 f4       	brcc	.+14     	; 0x17a8 <vfprintf+0x2e8>
    179a:	b4 fe       	sbrs	r11, 4
    179c:	07 c0       	rjmp	.+14     	; 0x17ac <vfprintf+0x2ec>
    179e:	b2 fc       	sbrc	r11, 2
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <vfprintf+0x2ec>
    17a2:	8f ee       	ldi	r24, 0xEF	; 239
    17a4:	b8 22       	and	r11, r24
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <vfprintf+0x2ec>
    17a8:	a7 2c       	mov	r10, r7
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <vfprintf+0x2ee>
    17ac:	ae 2c       	mov	r10, r14
    17ae:	8b 2d       	mov	r24, r11
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	b4 fe       	sbrs	r11, 4
    17b4:	0d c0       	rjmp	.+26     	; 0x17d0 <vfprintf+0x310>
    17b6:	fe 01       	movw	r30, r28
    17b8:	e7 0d       	add	r30, r7
    17ba:	f1 1d       	adc	r31, r1
    17bc:	20 81       	ld	r18, Z
    17be:	20 33       	cpi	r18, 0x30	; 48
    17c0:	19 f4       	brne	.+6      	; 0x17c8 <vfprintf+0x308>
    17c2:	e9 ee       	ldi	r30, 0xE9	; 233
    17c4:	be 22       	and	r11, r30
    17c6:	09 c0       	rjmp	.+18     	; 0x17da <vfprintf+0x31a>
    17c8:	a3 94       	inc	r10
    17ca:	b2 fe       	sbrs	r11, 2
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <vfprintf+0x31a>
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <vfprintf+0x318>
    17d0:	86 78       	andi	r24, 0x86	; 134
    17d2:	90 70       	andi	r25, 0x00	; 0
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	09 f0       	breq	.+2      	; 0x17da <vfprintf+0x31a>
    17d8:	a3 94       	inc	r10
    17da:	8b 2c       	mov	r8, r11
    17dc:	99 24       	eor	r9, r9
    17de:	b3 fc       	sbrc	r11, 3
    17e0:	13 c0       	rjmp	.+38     	; 0x1808 <vfprintf+0x348>
    17e2:	b0 fe       	sbrs	r11, 0
    17e4:	0e c0       	rjmp	.+28     	; 0x1802 <vfprintf+0x342>
    17e6:	af 14       	cp	r10, r15
    17e8:	28 f4       	brcc	.+10     	; 0x17f4 <vfprintf+0x334>
    17ea:	e7 2c       	mov	r14, r7
    17ec:	ef 0c       	add	r14, r15
    17ee:	ea 18       	sub	r14, r10
    17f0:	af 2c       	mov	r10, r15
    17f2:	07 c0       	rjmp	.+14     	; 0x1802 <vfprintf+0x342>
    17f4:	e7 2c       	mov	r14, r7
    17f6:	05 c0       	rjmp	.+10     	; 0x1802 <vfprintf+0x342>
    17f8:	80 e2       	ldi	r24, 0x20	; 32
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	b6 01       	movw	r22, r12
    17fe:	79 d0       	rcall	.+242    	; 0x18f2 <fputc>
    1800:	a3 94       	inc	r10
    1802:	af 14       	cp	r10, r15
    1804:	c8 f3       	brcs	.-14     	; 0x17f8 <vfprintf+0x338>
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <vfprintf+0x350>
    1808:	af 14       	cp	r10, r15
    180a:	10 f4       	brcc	.+4      	; 0x1810 <vfprintf+0x350>
    180c:	fa 18       	sub	r15, r10
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <vfprintf+0x352>
    1810:	ff 24       	eor	r15, r15
    1812:	84 fe       	sbrs	r8, 4
    1814:	0e c0       	rjmp	.+28     	; 0x1832 <vfprintf+0x372>
    1816:	80 e3       	ldi	r24, 0x30	; 48
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	b6 01       	movw	r22, r12
    181c:	6a d0       	rcall	.+212    	; 0x18f2 <fputc>
    181e:	82 fe       	sbrs	r8, 2
    1820:	1d c0       	rjmp	.+58     	; 0x185c <vfprintf+0x39c>
    1822:	81 fe       	sbrs	r8, 1
    1824:	03 c0       	rjmp	.+6      	; 0x182c <vfprintf+0x36c>
    1826:	88 e5       	ldi	r24, 0x58	; 88
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	10 c0       	rjmp	.+32     	; 0x184c <vfprintf+0x38c>
    182c:	88 e7       	ldi	r24, 0x78	; 120
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0d c0       	rjmp	.+26     	; 0x184c <vfprintf+0x38c>
    1832:	c4 01       	movw	r24, r8
    1834:	86 78       	andi	r24, 0x86	; 134
    1836:	90 70       	andi	r25, 0x00	; 0
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	81 f0       	breq	.+32     	; 0x185c <vfprintf+0x39c>
    183c:	81 fc       	sbrc	r8, 1
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <vfprintf+0x384>
    1840:	80 e2       	ldi	r24, 0x20	; 32
    1842:	01 c0       	rjmp	.+2      	; 0x1846 <vfprintf+0x386>
    1844:	8b e2       	ldi	r24, 0x2B	; 43
    1846:	b7 fc       	sbrc	r11, 7
    1848:	8d e2       	ldi	r24, 0x2D	; 45
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	b6 01       	movw	r22, r12
    184e:	51 d0       	rcall	.+162    	; 0x18f2 <fputc>
    1850:	05 c0       	rjmp	.+10     	; 0x185c <vfprintf+0x39c>
    1852:	80 e3       	ldi	r24, 0x30	; 48
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	b6 01       	movw	r22, r12
    1858:	4c d0       	rcall	.+152    	; 0x18f2 <fputc>
    185a:	ea 94       	dec	r14
    185c:	7e 14       	cp	r7, r14
    185e:	c8 f3       	brcs	.-14     	; 0x1852 <vfprintf+0x392>
    1860:	7a 94       	dec	r7
    1862:	f2 01       	movw	r30, r4
    1864:	e7 0d       	add	r30, r7
    1866:	f1 1d       	adc	r31, r1
    1868:	80 81       	ld	r24, Z
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	b6 01       	movw	r22, r12
    186e:	41 d0       	rcall	.+130    	; 0x18f2 <fputc>
    1870:	77 20       	and	r7, r7
    1872:	b1 f7       	brne	.-20     	; 0x1860 <vfprintf+0x3a0>
    1874:	05 c0       	rjmp	.+10     	; 0x1880 <vfprintf+0x3c0>
    1876:	80 e2       	ldi	r24, 0x20	; 32
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	b6 01       	movw	r22, r12
    187c:	3a d0       	rcall	.+116    	; 0x18f2 <fputc>
    187e:	fa 94       	dec	r15
    1880:	ff 20       	and	r15, r15
    1882:	c9 f7       	brne	.-14     	; 0x1876 <vfprintf+0x3b6>
    1884:	44 ce       	rjmp	.-888    	; 0x150e <vfprintf+0x4e>
    1886:	f6 01       	movw	r30, r12
    1888:	26 81       	ldd	r18, Z+6	; 0x06
    188a:	37 81       	ldd	r19, Z+7	; 0x07
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <vfprintf+0x3d2>
    188e:	2f ef       	ldi	r18, 0xFF	; 255
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	c9 01       	movw	r24, r18
    1894:	2c 96       	adiw	r28, 0x0c	; 12
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	ff 90       	pop	r15
    18aa:	ef 90       	pop	r14
    18ac:	df 90       	pop	r13
    18ae:	cf 90       	pop	r12
    18b0:	bf 90       	pop	r11
    18b2:	af 90       	pop	r10
    18b4:	9f 90       	pop	r9
    18b6:	8f 90       	pop	r8
    18b8:	7f 90       	pop	r7
    18ba:	6f 90       	pop	r6
    18bc:	5f 90       	pop	r5
    18be:	4f 90       	pop	r4
    18c0:	3f 90       	pop	r3
    18c2:	2f 90       	pop	r2
    18c4:	08 95       	ret

000018c6 <strnlen_P>:
    18c6:	fc 01       	movw	r30, r24
    18c8:	05 90       	lpm	r0, Z+
    18ca:	61 50       	subi	r22, 0x01	; 1
    18cc:	70 40       	sbci	r23, 0x00	; 0
    18ce:	01 10       	cpse	r0, r1
    18d0:	d8 f7       	brcc	.-10     	; 0x18c8 <strnlen_P+0x2>
    18d2:	80 95       	com	r24
    18d4:	90 95       	com	r25
    18d6:	8e 0f       	add	r24, r30
    18d8:	9f 1f       	adc	r25, r31
    18da:	08 95       	ret

000018dc <strnlen>:
    18dc:	fc 01       	movw	r30, r24
    18de:	61 50       	subi	r22, 0x01	; 1
    18e0:	70 40       	sbci	r23, 0x00	; 0
    18e2:	01 90       	ld	r0, Z+
    18e4:	01 10       	cpse	r0, r1
    18e6:	d8 f7       	brcc	.-10     	; 0x18de <strnlen+0x2>
    18e8:	80 95       	com	r24
    18ea:	90 95       	com	r25
    18ec:	8e 0f       	add	r24, r30
    18ee:	9f 1f       	adc	r25, r31
    18f0:	08 95       	ret

000018f2 <fputc>:
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	8c 01       	movw	r16, r24
    18fc:	eb 01       	movw	r28, r22
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	81 ff       	sbrs	r24, 1
    1902:	1b c0       	rjmp	.+54     	; 0x193a <fputc+0x48>
    1904:	82 ff       	sbrs	r24, 2
    1906:	0d c0       	rjmp	.+26     	; 0x1922 <fputc+0x30>
    1908:	2e 81       	ldd	r18, Y+6	; 0x06
    190a:	3f 81       	ldd	r19, Y+7	; 0x07
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	9d 81       	ldd	r25, Y+5	; 0x05
    1910:	28 17       	cp	r18, r24
    1912:	39 07       	cpc	r19, r25
    1914:	64 f4       	brge	.+24     	; 0x192e <fputc+0x3c>
    1916:	e8 81       	ld	r30, Y
    1918:	f9 81       	ldd	r31, Y+1	; 0x01
    191a:	01 93       	st	Z+, r16
    191c:	f9 83       	std	Y+1, r31	; 0x01
    191e:	e8 83       	st	Y, r30
    1920:	06 c0       	rjmp	.+12     	; 0x192e <fputc+0x3c>
    1922:	e8 85       	ldd	r30, Y+8	; 0x08
    1924:	f9 85       	ldd	r31, Y+9	; 0x09
    1926:	80 2f       	mov	r24, r16
    1928:	09 95       	icall
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	31 f4       	brne	.+12     	; 0x193a <fputc+0x48>
    192e:	8e 81       	ldd	r24, Y+6	; 0x06
    1930:	9f 81       	ldd	r25, Y+7	; 0x07
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	9f 83       	std	Y+7, r25	; 0x07
    1936:	8e 83       	std	Y+6, r24	; 0x06
    1938:	02 c0       	rjmp	.+4      	; 0x193e <fputc+0x4c>
    193a:	0f ef       	ldi	r16, 0xFF	; 255
    193c:	1f ef       	ldi	r17, 0xFF	; 255
    193e:	c8 01       	movw	r24, r16
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	08 95       	ret

0000194a <__ultoa_invert>:
    194a:	fa 01       	movw	r30, r20
    194c:	aa 27       	eor	r26, r26
    194e:	28 30       	cpi	r18, 0x08	; 8
    1950:	51 f1       	breq	.+84     	; 0x19a6 <__ultoa_invert+0x5c>
    1952:	20 31       	cpi	r18, 0x10	; 16
    1954:	81 f1       	breq	.+96     	; 0x19b6 <__ultoa_invert+0x6c>
    1956:	e8 94       	clt
    1958:	6f 93       	push	r22
    195a:	6e 7f       	andi	r22, 0xFE	; 254
    195c:	6e 5f       	subi	r22, 0xFE	; 254
    195e:	7f 4f       	sbci	r23, 0xFF	; 255
    1960:	8f 4f       	sbci	r24, 0xFF	; 255
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	af 4f       	sbci	r26, 0xFF	; 255
    1966:	b1 e0       	ldi	r27, 0x01	; 1
    1968:	3e d0       	rcall	.+124    	; 0x19e6 <__ultoa_invert+0x9c>
    196a:	b4 e0       	ldi	r27, 0x04	; 4
    196c:	3c d0       	rcall	.+120    	; 0x19e6 <__ultoa_invert+0x9c>
    196e:	67 0f       	add	r22, r23
    1970:	78 1f       	adc	r23, r24
    1972:	89 1f       	adc	r24, r25
    1974:	9a 1f       	adc	r25, r26
    1976:	a1 1d       	adc	r26, r1
    1978:	68 0f       	add	r22, r24
    197a:	79 1f       	adc	r23, r25
    197c:	8a 1f       	adc	r24, r26
    197e:	91 1d       	adc	r25, r1
    1980:	a1 1d       	adc	r26, r1
    1982:	6a 0f       	add	r22, r26
    1984:	71 1d       	adc	r23, r1
    1986:	81 1d       	adc	r24, r1
    1988:	91 1d       	adc	r25, r1
    198a:	a1 1d       	adc	r26, r1
    198c:	20 d0       	rcall	.+64     	; 0x19ce <__ultoa_invert+0x84>
    198e:	09 f4       	brne	.+2      	; 0x1992 <__ultoa_invert+0x48>
    1990:	68 94       	set
    1992:	3f 91       	pop	r19
    1994:	2a e0       	ldi	r18, 0x0A	; 10
    1996:	26 9f       	mul	r18, r22
    1998:	11 24       	eor	r1, r1
    199a:	30 19       	sub	r19, r0
    199c:	30 5d       	subi	r19, 0xD0	; 208
    199e:	31 93       	st	Z+, r19
    19a0:	de f6       	brtc	.-74     	; 0x1958 <__ultoa_invert+0xe>
    19a2:	cf 01       	movw	r24, r30
    19a4:	08 95       	ret
    19a6:	46 2f       	mov	r20, r22
    19a8:	47 70       	andi	r20, 0x07	; 7
    19aa:	40 5d       	subi	r20, 0xD0	; 208
    19ac:	41 93       	st	Z+, r20
    19ae:	b3 e0       	ldi	r27, 0x03	; 3
    19b0:	0f d0       	rcall	.+30     	; 0x19d0 <__ultoa_invert+0x86>
    19b2:	c9 f7       	brne	.-14     	; 0x19a6 <__ultoa_invert+0x5c>
    19b4:	f6 cf       	rjmp	.-20     	; 0x19a2 <__ultoa_invert+0x58>
    19b6:	46 2f       	mov	r20, r22
    19b8:	4f 70       	andi	r20, 0x0F	; 15
    19ba:	40 5d       	subi	r20, 0xD0	; 208
    19bc:	4a 33       	cpi	r20, 0x3A	; 58
    19be:	18 f0       	brcs	.+6      	; 0x19c6 <__ultoa_invert+0x7c>
    19c0:	49 5d       	subi	r20, 0xD9	; 217
    19c2:	31 fd       	sbrc	r19, 1
    19c4:	40 52       	subi	r20, 0x20	; 32
    19c6:	41 93       	st	Z+, r20
    19c8:	02 d0       	rcall	.+4      	; 0x19ce <__ultoa_invert+0x84>
    19ca:	a9 f7       	brne	.-22     	; 0x19b6 <__ultoa_invert+0x6c>
    19cc:	ea cf       	rjmp	.-44     	; 0x19a2 <__ultoa_invert+0x58>
    19ce:	b4 e0       	ldi	r27, 0x04	; 4
    19d0:	a6 95       	lsr	r26
    19d2:	97 95       	ror	r25
    19d4:	87 95       	ror	r24
    19d6:	77 95       	ror	r23
    19d8:	67 95       	ror	r22
    19da:	ba 95       	dec	r27
    19dc:	c9 f7       	brne	.-14     	; 0x19d0 <__ultoa_invert+0x86>
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	61 05       	cpc	r22, r1
    19e2:	71 05       	cpc	r23, r1
    19e4:	08 95       	ret
    19e6:	9b 01       	movw	r18, r22
    19e8:	ac 01       	movw	r20, r24
    19ea:	0a 2e       	mov	r0, r26
    19ec:	06 94       	lsr	r0
    19ee:	57 95       	ror	r21
    19f0:	47 95       	ror	r20
    19f2:	37 95       	ror	r19
    19f4:	27 95       	ror	r18
    19f6:	ba 95       	dec	r27
    19f8:	c9 f7       	brne	.-14     	; 0x19ec <__ultoa_invert+0xa2>
    19fa:	62 0f       	add	r22, r18
    19fc:	73 1f       	adc	r23, r19
    19fe:	84 1f       	adc	r24, r20
    1a00:	95 1f       	adc	r25, r21
    1a02:	a0 1d       	adc	r26, r0
    1a04:	08 95       	ret

00001a06 <_exit>:
    1a06:	f8 94       	cli

00001a08 <__stop_program>:
    1a08:	ff cf       	rjmp	.-2      	; 0x1a08 <__stop_program>
