
JoystickHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00002652  000026e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800128  00800128  0000270e  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00002710  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ddb  00000000  00000000  00004a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000790  00000000  00000000  000057fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000117b  00000000  00000000  00005f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cf6f  00000000  00000000  00007106  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cd4  00000000  00000000  00014075  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009a28  00000000  00000000  00016d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c80  00000000  00000000  00020774  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004e27  00000000  00000000  000213f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007289  00000000  00000000  0002621b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001f96  00000000  00000000  0002d4a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a50  00000000  00000000  0002f43a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	1f c1       	rjmp	.+574    	; 0x240 <__ctors_end>
       2:	00 00       	nop
       4:	3b c1       	rjmp	.+630    	; 0x27c <__bad_interrupt>
       6:	00 00       	nop
       8:	39 c1       	rjmp	.+626    	; 0x27c <__bad_interrupt>
       a:	00 00       	nop
       c:	37 c1       	rjmp	.+622    	; 0x27c <__bad_interrupt>
       e:	00 00       	nop
      10:	35 c1       	rjmp	.+618    	; 0x27c <__bad_interrupt>
      12:	00 00       	nop
      14:	33 c1       	rjmp	.+614    	; 0x27c <__bad_interrupt>
      16:	00 00       	nop
      18:	31 c1       	rjmp	.+610    	; 0x27c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2f c1       	rjmp	.+606    	; 0x27c <__bad_interrupt>
      1e:	00 00       	nop
      20:	2d c1       	rjmp	.+602    	; 0x27c <__bad_interrupt>
      22:	00 00       	nop
      24:	2b c1       	rjmp	.+598    	; 0x27c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__vector_10>
      2c:	27 c1       	rjmp	.+590    	; 0x27c <__bad_interrupt>
      2e:	00 00       	nop
      30:	25 c1       	rjmp	.+586    	; 0x27c <__bad_interrupt>
      32:	00 00       	nop
      34:	23 c1       	rjmp	.+582    	; 0x27c <__bad_interrupt>
      36:	00 00       	nop
      38:	21 c1       	rjmp	.+578    	; 0x27c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1f c1       	rjmp	.+574    	; 0x27c <__bad_interrupt>
      3e:	00 00       	nop
      40:	1d c1       	rjmp	.+570    	; 0x27c <__bad_interrupt>
      42:	00 00       	nop
      44:	1b c1       	rjmp	.+566    	; 0x27c <__bad_interrupt>
      46:	00 00       	nop
      48:	19 c1       	rjmp	.+562    	; 0x27c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	17 c1       	rjmp	.+558    	; 0x27c <__bad_interrupt>
      4e:	00 00       	nop
      50:	15 c1       	rjmp	.+554    	; 0x27c <__bad_interrupt>
      52:	00 00       	nop
      54:	13 c1       	rjmp	.+550    	; 0x27c <__bad_interrupt>
      56:	00 00       	nop
      58:	11 c1       	rjmp	.+546    	; 0x27c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0f c1       	rjmp	.+542    	; 0x27c <__bad_interrupt>
      5e:	00 00       	nop
      60:	0d c1       	rjmp	.+538    	; 0x27c <__bad_interrupt>
      62:	00 00       	nop
      64:	0b c1       	rjmp	.+534    	; 0x27c <__bad_interrupt>
      66:	00 00       	nop
      68:	09 c1       	rjmp	.+530    	; 0x27c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	07 c1       	rjmp	.+526    	; 0x27c <__bad_interrupt>
      6e:	00 00       	nop
      70:	05 c1       	rjmp	.+522    	; 0x27c <__bad_interrupt>
      72:	00 00       	nop
      74:	03 c1       	rjmp	.+518    	; 0x27c <__bad_interrupt>
      76:	00 00       	nop
      78:	01 c1       	rjmp	.+514    	; 0x27c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ff c0       	rjmp	.+510    	; 0x27c <__bad_interrupt>
      7e:	00 00       	nop
      80:	fd c0       	rjmp	.+506    	; 0x27c <__bad_interrupt>
      82:	00 00       	nop
      84:	fb c0       	rjmp	.+502    	; 0x27c <__bad_interrupt>
      86:	00 00       	nop
      88:	f9 c0       	rjmp	.+498    	; 0x27c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f7 c0       	rjmp	.+494    	; 0x27c <__bad_interrupt>
      8e:	00 00       	nop
      90:	f5 c0       	rjmp	.+490    	; 0x27c <__bad_interrupt>
      92:	00 00       	nop
      94:	f3 c0       	rjmp	.+486    	; 0x27c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4293>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4286>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4281>:
     11d:	4a 6f 79 73 74 69 63 6b 20 45 6e 75 6d 65 72 61     Joystick Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4279>:
     134:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     144:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     154:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
     164:	64 20 4a 6f 79 73 74 69 63 6b 2e 0d 0a 00           d Joystick....

00000172 <__c.4277>:
     172:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     182:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     192:	6f 6e 2e 0d 0a 00                                   on....

00000198 <__c.4275>:
     198:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1a8:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4a 6f 79 73     Not a Valid Joys
     1b8:	74 69 63 6b 2e 0d 0a 00                             tick....

000001c0 <__c.4273>:
     1c0:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1d0:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1e0:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001ed <__c.4266>:
     1ed:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1fd:	68 65 64 2e 0d 0a 00                                hed....

00000204 <__c.4261>:
     204:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     214:	0d 0a 00                                            ...

00000217 <__c.4240>:
     217:	1b 5b 33 36 6d 4a 6f 79 73 74 69 63 6b 20 48 6f     .[36mJoystick Ho
     227:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     237:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	d0 e2       	ldi	r29, 0x20	; 32
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61

0000024c <__do_copy_data>:
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	e2 e5       	ldi	r30, 0x52	; 82
     254:	f6 e2       	ldi	r31, 0x26	; 38
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	0b bf       	out	0x3b, r16	; 59
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x14>
     25c:	07 90       	elpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	a8 32       	cpi	r26, 0x28	; 40
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0x10>

00000266 <__do_clear_bss>:
     266:	15 e0       	ldi	r17, 0x05	; 5
     268:	a8 e2       	ldi	r26, 0x28	; 40
     26a:	b1 e0       	ldi	r27, 0x01	; 1
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	a3 32       	cpi	r26, 0x23	; 35
     272:	b1 07       	cpc	r27, r17
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	f9 d0       	rcall	.+498    	; 0x46a <main>
     278:	0c 94 27 13 	jmp	0x264e	; 0x264e <_exit>

0000027c <__bad_interrupt>:
     27c:	c1 ce       	rjmp	.-638    	; 0x0 <__vectors>

0000027e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     27e:	9b b1       	in	r25, 0x0b	; 11
     280:	9f 70       	andi	r25, 0x0F	; 15
     282:	98 2b       	or	r25, r24
     284:	9b b9       	out	0x0b, r25	; 11
			}
     286:	08 95       	ret

00000288 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     288:	84 b7       	in	r24, 0x34	; 52
     28a:	87 7f       	andi	r24, 0xF7	; 247
     28c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     28e:	28 e1       	ldi	r18, 0x18	; 24
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	20 93 60 00 	sts	0x0060, r18
     298:	10 92 60 00 	sts	0x0060, r1
     29c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	80 93 61 00 	sts	0x0061, r24
     2aa:	90 93 61 00 	sts	0x0061, r25
     2ae:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2b0:	83 e3       	ldi	r24, 0x33	; 51
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	90 93 cd 00 	sts	0x00CD, r25
     2b8:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2bc:	86 e0       	ldi	r24, 0x06	; 6
     2be:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2c2:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2c6:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2ca:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2cc:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2ce:	8a b1       	in	r24, 0x0a	; 10
     2d0:	80 6f       	ori	r24, 0xF0	; 240
     2d2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2d4:	8b b1       	in	r24, 0x0b	; 11
     2d6:	8f 70       	andi	r24, 0x0F	; 15
     2d8:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2da:	0e 94 43 0b 	call	0x1686	; 0x1686 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0c 94 10 10 	jmp	0x2020	; 0x2020 <Serial_CreateStream>

000002e6 <JoystickHost_Task>:

/** Task to manage an enumerated USB joystick once connected, to display movement
 *  data as it is received.
 */
void JoystickHost_Task(void)
{
     2e6:	4f 92       	push	r4
     2e8:	5f 92       	push	r5
     2ea:	6f 92       	push	r6
     2ec:	7f 92       	push	r7
     2ee:	8f 92       	push	r8
     2f0:	9f 92       	push	r9
     2f2:	af 92       	push	r10
     2f4:	bf 92       	push	r11
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	df 93       	push	r29
     304:	cf 93       	push	r28
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
			}
		}

		LEDs_SetAllLEDs(LEDMask);
	}
}
     30a:	8d b6       	in	r8, 0x3d	; 61
     30c:	9e b6       	in	r9, 0x3e	; 62
/** Task to manage an enumerated USB joystick once connected, to display movement
 *  data as it is received.
 */
void JoystickHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     30e:	80 91 0e 05 	lds	r24, 0x050E
     312:	8b 30       	cpi	r24, 0x0B	; 11
     314:	09 f0       	breq	.+2      	; 0x318 <JoystickHost_Task+0x32>
     316:	93 c0       	rjmp	.+294    	; 0x43e <JoystickHost_Task+0x158>
	  return;

	if (HID_Host_IsReportReceived(&Joystick_HID_Interface))
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <HID_Host_IsReportReceived>
     320:	88 23       	and	r24, r24
     322:	09 f4       	brne	.+2      	; 0x326 <JoystickHost_Task+0x40>
     324:	8c c0       	rjmp	.+280    	; 0x43e <JoystickHost_Task+0x158>
     326:	ed b6       	in	r14, 0x3d	; 61
     328:	fe b6       	in	r15, 0x3e	; 62
     32a:	5d b6       	in	r5, 0x3d	; 61
     32c:	4f 2c       	mov	r4, r15
	{
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
     32e:	80 91 16 01 	lds	r24, 0x0116
     332:	2d b7       	in	r18, 0x3d	; 61
     334:	3e b7       	in	r19, 0x3e	; 62
     336:	28 1b       	sub	r18, r24
     338:	31 09       	sbc	r19, r1
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	3e bf       	out	0x3e, r19	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	2d bf       	out	0x3d, r18	; 61
     344:	2f 5f       	subi	r18, 0xFF	; 255
     346:	3f 4f       	sbci	r19, 0xFF	; 255
     348:	72 2e       	mov	r7, r18
     34a:	63 2e       	mov	r6, r19
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	b9 01       	movw	r22, r18
     352:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <HID_Host_ReceiveReport>

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     356:	aa 24       	eor	r10, r10
	if (HID_Host_IsReportReceived(&Joystick_HID_Interface))
	{
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);

		uint8_t LEDMask = LEDS_NO_LEDS;
     358:	bb 24       	eor	r11, r11

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     35a:	2a e2       	ldi	r18, 0x2A	; 42
     35c:	c2 2e       	mov	r12, r18
     35e:	d1 2c       	mov	r13, r1
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     360:	90 e1       	ldi	r25, 0x10	; 16
     362:	e9 2e       	mov	r14, r25
     364:	f1 2c       	mov	r15, r1
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     366:	5c c0       	rjmp	.+184    	; 0x420 <JoystickHost_Task+0x13a>
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     368:	8a 2d       	mov	r24, r10
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	8c 9d       	mul	r24, r12
     36e:	80 01       	movw	r16, r0
     370:	8d 9d       	mul	r24, r13
     372:	10 0d       	add	r17, r0
     374:	9c 9d       	mul	r25, r12
     376:	10 0d       	add	r17, r0
     378:	11 24       	eor	r1, r1
     37a:	b8 01       	movw	r22, r16
     37c:	67 5d       	subi	r22, 0xD7	; 215
     37e:	7e 4f       	sbci	r23, 0xFE	; 254

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(JoystickReport, ReportItem)))
     380:	87 2d       	mov	r24, r7
     382:	96 2d       	mov	r25, r6
     384:	60 d5       	rcall	.+2752   	; 0xe46 <USB_GetHIDReportItemInfo>
     386:	88 23       	and	r24, r24
     388:	09 f4       	brne	.+2      	; 0x38c <JoystickHost_Task+0xa6>
     38a:	49 c0       	rjmp	.+146    	; 0x41e <JoystickHost_Task+0x138>
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     38c:	f8 01       	movw	r30, r16
     38e:	e8 5d       	subi	r30, 0xD8	; 216
     390:	fe 4f       	sbci	r31, 0xFE	; 254
     392:	82 85       	ldd	r24, Z+10	; 0x0a
     394:	93 85       	ldd	r25, Z+11	; 0x0b
     396:	89 30       	cpi	r24, 0x09	; 9
     398:	91 05       	cpc	r25, r1
     39a:	69 f4       	brne	.+26     	; 0x3b6 <JoystickHost_Task+0xd0>
     39c:	83 81       	ldd	r24, Z+3	; 0x03
     39e:	88 23       	and	r24, r24
     3a0:	09 f0       	breq	.+2      	; 0x3a4 <JoystickHost_Task+0xbe>
     3a2:	3d c0       	rjmp	.+122    	; 0x41e <JoystickHost_Task+0x138>
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
     3a4:	83 a1       	ldd	r24, Z+35	; 0x23
     3a6:	94 a1       	ldd	r25, Z+36	; 0x24
     3a8:	a5 a1       	ldd	r26, Z+37	; 0x25
     3aa:	b6 a1       	ldd	r27, Z+38	; 0x26
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	a1 05       	cpc	r26, r1
     3b0:	b1 05       	cpc	r27, r1
     3b2:	99 f5       	brne	.+102    	; 0x41a <JoystickHost_Task+0x134>
     3b4:	34 c0       	rjmp	.+104    	; 0x41e <JoystickHost_Task+0x138>
				  LEDMask = LEDS_ALL_LEDS;
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	91 05       	cpc	r25, r1
     3ba:	89 f5       	brne	.+98     	; 0x41e <JoystickHost_Task+0x138>
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
     3bc:	84 85       	ldd	r24, Z+12	; 0x0c
     3be:	95 85       	ldd	r25, Z+13	; 0x0d
     3c0:	9c 01       	movw	r18, r24
     3c2:	20 53       	subi	r18, 0x30	; 48
     3c4:	30 40       	sbci	r19, 0x00	; 0
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
				  LEDMask = LEDS_ALL_LEDS;
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3c6:	22 30       	cpi	r18, 0x02	; 2
     3c8:	31 05       	cpc	r19, r1
     3ca:	48 f5       	brcc	.+82     	; 0x41e <JoystickHost_Task+0x138>
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
     3cc:	23 81       	ldd	r18, Z+3	; 0x03
     3ce:	22 23       	and	r18, r18
     3d0:	31 f5       	brne	.+76     	; 0x41e <JoystickHost_Task+0x138>
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     3d2:	21 85       	ldd	r18, Z+9	; 0x09
     3d4:	b7 01       	movw	r22, r14
     3d6:	62 1b       	sub	r22, r18
     3d8:	71 09       	sbc	r23, r1
     3da:	23 a1       	ldd	r18, Z+35	; 0x23
     3dc:	34 a1       	ldd	r19, Z+36	; 0x24
     3de:	45 a1       	ldd	r20, Z+37	; 0x25
     3e0:	56 a1       	ldd	r21, Z+38	; 0x26
     3e2:	04 c0       	rjmp	.+8      	; 0x3ec <JoystickHost_Task+0x106>
     3e4:	22 0f       	add	r18, r18
     3e6:	33 1f       	adc	r19, r19
     3e8:	44 1f       	adc	r20, r20
     3ea:	55 1f       	adc	r21, r21
     3ec:	6a 95       	dec	r22
     3ee:	d2 f7       	brpl	.-12     	; 0x3e4 <JoystickHost_Task+0xfe>

				if (DeltaMovement)
     3f0:	21 15       	cp	r18, r1
     3f2:	31 05       	cpc	r19, r1
     3f4:	a1 f0       	breq	.+40     	; 0x41e <JoystickHost_Task+0x138>
				{
					if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     3f6:	80 33       	cpi	r24, 0x30	; 48
     3f8:	91 05       	cpc	r25, r1
     3fa:	39 f4       	brne	.+14     	; 0x40a <JoystickHost_Task+0x124>
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     3fc:	12 16       	cp	r1, r18
     3fe:	13 06       	cpc	r1, r19
     400:	14 f4       	brge	.+4      	; 0x406 <JoystickHost_Task+0x120>
     402:	80 e1       	ldi	r24, 0x10	; 16
     404:	08 c0       	rjmp	.+16     	; 0x416 <JoystickHost_Task+0x130>
     406:	80 e2       	ldi	r24, 0x20	; 32
     408:	06 c0       	rjmp	.+12     	; 0x416 <JoystickHost_Task+0x130>
					else
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     40a:	12 16       	cp	r1, r18
     40c:	13 06       	cpc	r1, r19
     40e:	14 f4       	brge	.+4      	; 0x414 <JoystickHost_Task+0x12e>
     410:	80 e8       	ldi	r24, 0x80	; 128
     412:	01 c0       	rjmp	.+2      	; 0x416 <JoystickHost_Task+0x130>
     414:	80 e4       	ldi	r24, 0x40	; 64
     416:	b8 2a       	or	r11, r24
     418:	02 c0       	rjmp	.+4      	; 0x41e <JoystickHost_Task+0x138>
			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
				  LEDMask = LEDS_ALL_LEDS;
     41a:	80 ef       	ldi	r24, 0xF0	; 240
     41c:	b8 2e       	mov	r11, r24
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     41e:	a3 94       	inc	r10
     420:	80 91 28 01 	lds	r24, 0x0128
     424:	a8 16       	cp	r10, r24
     426:	08 f4       	brcc	.+2      	; 0x42a <JoystickHost_Task+0x144>
     428:	9f cf       	rjmp	.-194    	; 0x368 <JoystickHost_Task+0x82>
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
				}
			}
		}

		LEDs_SetAllLEDs(LEDMask);
     42a:	8b 2d       	mov	r24, r11
     42c:	28 df       	rcall	.-432    	; 0x27e <LEDs_SetAllLEDs>
     42e:	92 01       	movw	r18, r4
     430:	83 2f       	mov	r24, r19
     432:	94 2d       	mov	r25, r4
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	9e bf       	out	0x3e, r25	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	8d bf       	out	0x3d, r24	; 61
	}
}
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	9e be       	out	0x3e, r9	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	8d be       	out	0x3d, r8	; 61
     448:	cf 91       	pop	r28
     44a:	df 91       	pop	r29
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	df 90       	pop	r13
     456:	cf 90       	pop	r12
     458:	bf 90       	pop	r11
     45a:	af 90       	pop	r10
     45c:	9f 90       	pop	r9
     45e:	8f 90       	pop	r8
     460:	7f 90       	pop	r7
     462:	6f 90       	pop	r6
     464:	5f 90       	pop	r5
     466:	4f 90       	pop	r4
     468:	08 95       	ret

0000046a <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     46a:	0e df       	rcall	.-484    	; 0x288 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Joystick Host Demo running.\r\n" ESC_FG_WHITE));
     46c:	87 e1       	ldi	r24, 0x17	; 23
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	0e 94 4c 10 	call	0x2098	; 0x2098 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     474:	80 e1       	ldi	r24, 0x10	; 16
     476:	03 df       	rcall	.-506    	; 0x27e <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     478:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		JoystickHost_Task();
     47a:	35 df       	rcall	.-406    	; 0x2e6 <JoystickHost_Task>

		HID_Host_USBTask(&Joystick_HID_Interface);
		USB_USBTask();
     47c:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <USB_USBTask>
     480:	fc cf       	rjmp	.-8      	; 0x47a <main+0x10>

00000482 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	0e 94 4c 10 	call	0x2098	; 0x2098 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     48a:	80 ea       	ldi	r24, 0xA0	; 160
}
     48c:	f8 ce       	rjmp	.-528    	; 0x27e <LEDs_SetAllLEDs>

0000048e <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     48e:	8d ee       	ldi	r24, 0xED	; 237
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 4c 10 	call	0x2098	; 0x2098 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     496:	80 e1       	ldi	r24, 0x10	; 16
}
     498:	f2 ce       	rjmp	.-540    	; 0x27e <LEDs_SetAllLEDs>

0000049a <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	df 93       	push	r29
     4a0:	cf 93       	push	r28
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	c2 50       	subi	r28, 0x02	; 2
     4a8:	d2 40       	sbci	r29, 0x02	; 2
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4b4:	80 ea       	ldi	r24, 0xA0	; 160
     4b6:	e3 de       	rcall	.-570    	; 0x27e <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4b8:	8e 01       	movw	r16, r28
     4ba:	0d 5f       	subi	r16, 0xFD	; 253
     4bc:	1f 4f       	sbci	r17, 0xFF	; 255
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	be 01       	movw	r22, r28
     4c2:	6f 5f       	subi	r22, 0xFF	; 255
     4c4:	7f 4f       	sbci	r23, 0xFF	; 255
     4c6:	a8 01       	movw	r20, r16
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	32 e0       	ldi	r19, 0x02	; 2
     4cc:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <USB_Host_GetDeviceConfigDescriptor>
     4d0:	88 23       	and	r24, r24
     4d2:	19 f0       	breq	.+6      	; 0x4da <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4d4:	80 ec       	ldi	r24, 0xC0	; 192
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	13 c0       	rjmp	.+38     	; 0x500 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Joystick_HID_Interface,
     4da:	69 81       	ldd	r22, Y+1	; 0x01
     4dc:	7a 81       	ldd	r23, Y+2	; 0x02
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	a8 01       	movw	r20, r16
     4e4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <HID_Host_ConfigurePipes>
     4e8:	88 23       	and	r24, r24
     4ea:	19 f0       	breq	.+6      	; 0x4f2 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Joystick.\r\n"));
     4ec:	88 e9       	ldi	r24, 0x98	; 152
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	07 c0       	rjmp	.+14     	; 0x500 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <USB_Host_SetDeviceConfiguration>
     4f8:	88 23       	and	r24, r24
     4fa:	31 f0       	breq	.+12     	; 0x508 <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4fc:	82 e7       	ldi	r24, 0x72	; 114
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 4c 10 	call	0x2098	; 0x2098 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     504:	80 e9       	ldi	r24, 0x90	; 144
     506:	15 c0       	rjmp	.+42     	; 0x532 <EVENT_USB_Host_DeviceEnumerationComplete+0x98>
		return;
	}

	if (HID_Host_SetReportProtocol(&Joystick_HID_Interface) != 0)
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <HID_Host_SetReportProtocol>
     510:	88 23       	and	r24, r24
     512:	51 f0       	breq	.+20     	; 0x528 <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Joystick.\r\n"));
     514:	84 e3       	ldi	r24, 0x34	; 52
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	0e 94 4c 10 	call	0x2098	; 0x2098 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     51c:	80 e9       	ldi	r24, 0x90	; 144
     51e:	af de       	rcall	.-674    	; 0x27e <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <USB_Host_SetDeviceConfiguration>
		return;
     526:	06 c0       	rjmp	.+12     	; 0x534 <EVENT_USB_Host_DeviceEnumerationComplete+0x9a>
	}

	puts_P(PSTR("Joystick Enumerated.\r\n"));
     528:	8d e1       	ldi	r24, 0x1D	; 29
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	0e 94 4c 10 	call	0x2098	; 0x2098 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     530:	80 e6       	ldi	r24, 0x60	; 96
     532:	a5 de       	rcall	.-694    	; 0x27e <LEDs_SetAllLEDs>
}
     534:	ce 5f       	subi	r28, 0xFE	; 254
     536:	dd 4f       	sbci	r29, 0xFD	; 253
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	cf 91       	pop	r28
     544:	df 91       	pop	r29
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	08 95       	ret

0000054c <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	0f 92       	push	r0
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     556:	89 83       	std	Y+1, r24	; 0x01
     558:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     55c:	00 d0       	rcall	.+0      	; 0x55e <EVENT_USB_Host_HostError+0x12>
     55e:	00 d0       	rcall	.+0      	; 0x560 <EVENT_USB_Host_HostError+0x14>
     560:	ed b7       	in	r30, 0x3d	; 61
     562:	fe b7       	in	r31, 0x3e	; 62
     564:	31 96       	adiw	r30, 0x01	; 1
     566:	2e ee       	ldi	r18, 0xEE	; 238
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	ad b7       	in	r26, 0x3d	; 61
     56c:	be b7       	in	r27, 0x3e	; 62
     56e:	12 96       	adiw	r26, 0x02	; 2
     570:	3c 93       	st	X, r19
     572:	2e 93       	st	-X, r18
     574:	11 97       	sbiw	r26, 0x01	; 1
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	82 83       	std	Z+2, r24	; 0x02
     57a:	13 82       	std	Z+3, r1	; 0x03
     57c:	0e 94 2d 10 	call	0x205a	; 0x205a <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	80 e9       	ldi	r24, 0x90	; 144
     58a:	79 de       	rcall	.-782    	; 0x27e <LEDs_SetAllLEDs>
     58c:	ff cf       	rjmp	.-2      	; 0x58c <EVENT_USB_Host_HostError+0x40>

0000058e <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     58e:	90 91 0e 05 	lds	r25, 0x050E
     592:	2d b7       	in	r18, 0x3d	; 61
     594:	3e b7       	in	r19, 0x3e	; 62
     596:	28 50       	subi	r18, 0x08	; 8
     598:	30 40       	sbci	r19, 0x00	; 0
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	3e bf       	out	0x3e, r19	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	2d bf       	out	0x3d, r18	; 61
     5a4:	ed b7       	in	r30, 0x3d	; 61
     5a6:	fe b7       	in	r31, 0x3e	; 62
     5a8:	31 96       	adiw	r30, 0x01	; 1
     5aa:	28 e9       	ldi	r18, 0x98	; 152
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	ad b7       	in	r26, 0x3d	; 61
     5b0:	be b7       	in	r27, 0x3e	; 62
     5b2:	12 96       	adiw	r26, 0x02	; 2
     5b4:	3c 93       	st	X, r19
     5b6:	2e 93       	st	-X, r18
     5b8:	11 97       	sbiw	r26, 0x01	; 1
     5ba:	82 83       	std	Z+2, r24	; 0x02
     5bc:	13 82       	std	Z+3, r1	; 0x03
     5be:	64 83       	std	Z+4, r22	; 0x04
     5c0:	15 82       	std	Z+5, r1	; 0x05
     5c2:	96 83       	std	Z+6, r25	; 0x06
     5c4:	17 82       	std	Z+7, r1	; 0x07
     5c6:	0e 94 2d 10 	call	0x205a	; 0x205a <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5ca:	2d b7       	in	r18, 0x3d	; 61
     5cc:	3e b7       	in	r19, 0x3e	; 62
     5ce:	28 5f       	subi	r18, 0xF8	; 248
     5d0:	3f 4f       	sbci	r19, 0xFF	; 255
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	3e bf       	out	0x3e, r19	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	2d bf       	out	0x3d, r18	; 61
     5dc:	80 e9       	ldi	r24, 0x90	; 144
}
     5de:	4f ce       	rjmp	.-866    	; 0x27e <LEDs_SetAllLEDs>

000005e0 <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \param[in] CurrentItem  Pointer to the item the HID report parser is currently working with
 *
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
     5e0:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a joystick by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     5e2:	16 96       	adiw	r26, 0x06	; 6
     5e4:	ed 91       	ld	r30, X+
     5e6:	fc 91       	ld	r31, X
     5e8:	17 97       	sbiw	r26, 0x07	; 7
     5ea:	0d c0       	rjmp	.+26     	; 0x606 <CALLBACK_HIDParser_FilterHIDReportItem+0x26>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     5ec:	81 81       	ldd	r24, Z+1	; 0x01
     5ee:	92 81       	ldd	r25, Z+2	; 0x02
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	91 05       	cpc	r25, r1
     5f4:	29 f4       	brne	.+10     	; 0x600 <CALLBACK_HIDParser_FilterHIDReportItem+0x20>
     5f6:	83 81       	ldd	r24, Z+3	; 0x03
     5f8:	94 81       	ldd	r25, Z+4	; 0x04
     5fa:	84 30       	cpi	r24, 0x04	; 4
     5fc:	91 05       	cpc	r25, r1
     5fe:	39 f0       	breq	.+14     	; 0x60e <CALLBACK_HIDParser_FilterHIDReportItem+0x2e>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a joystick by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     600:	05 80       	ldd	r0, Z+5	; 0x05
     602:	f6 81       	ldd	r31, Z+6	; 0x06
     604:	e0 2d       	mov	r30, r0
     606:	30 97       	sbiw	r30, 0x00	; 0
     608:	89 f7       	brne	.-30     	; 0x5ec <CALLBACK_HIDParser_FilterHIDReportItem+0xc>
		}
	}

	/* If a collection with the joystick usage was not found, indicate that we are not interested in this item */
	if (!IsJoystick)
	  return false;
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	08 95       	ret

	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     60e:	19 96       	adiw	r26, 0x09	; 9
     610:	2d 91       	ld	r18, X+
     612:	3c 91       	ld	r19, X
     614:	1a 97       	sbiw	r26, 0x0a	; 10
     616:	29 30       	cpi	r18, 0x09	; 9
     618:	31 05       	cpc	r19, r1
     61a:	41 f0       	breq	.+16     	; 0x62c <CALLBACK_HIDParser_FilterHIDReportItem+0x4c>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	21 30       	cpi	r18, 0x01	; 1
     622:	31 05       	cpc	r19, r1
     624:	29 f0       	breq	.+10     	; 0x630 <CALLBACK_HIDParser_FilterHIDReportItem+0x50>
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	08 95       	ret
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     630:	08 95       	ret

00000632 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     632:	2f 92       	push	r2
     634:	3f 92       	push	r3
     636:	4f 92       	push	r4
     638:	5f 92       	push	r5
     63a:	6f 92       	push	r6
     63c:	7f 92       	push	r7
     63e:	8f 92       	push	r8
     640:	9f 92       	push	r9
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	df 93       	push	r29
     654:	cf 93       	push	r28
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	c9 59       	subi	r28, 0x99	; 153
     65c:	d0 40       	sbci	r29, 0x00	; 0
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	6c 01       	movw	r12, r24
     66a:	1b 01       	movw	r2, r22
     66c:	ba 01       	movw	r22, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
     66e:	40 57       	subi	r20, 0x70	; 112
     670:	5c 4f       	sbci	r21, 0xFC	; 252
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     672:	89 ed       	ldi	r24, 0xD9	; 217
     674:	93 e0       	ldi	r25, 0x03	; 3
     676:	db 01       	movw	r26, r22
     678:	9c 01       	movw	r18, r24
     67a:	1d 92       	st	X+, r1
     67c:	21 50       	subi	r18, 0x01	; 1
     67e:	30 40       	sbci	r19, 0x00	; 0
     680:	e1 f7       	brne	.-8      	; 0x67a <USB_ProcessHIDReport+0x48>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     682:	9e 01       	movw	r18, r28
     684:	25 5c       	subi	r18, 0xC5	; 197
     686:	3f 4f       	sbci	r19, 0xFF	; 255
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     688:	8c e1       	ldi	r24, 0x1C	; 28
     68a:	d9 01       	movw	r26, r18
     68c:	1d 92       	st	X+, r1
     68e:	8a 95       	dec	r24
     690:	e9 f7       	brne	.-6      	; 0x68c <USB_ProcessHIDReport+0x5a>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     692:	87 e0       	ldi	r24, 0x07	; 7
     694:	da 01       	movw	r26, r20
     696:	1d 92       	st	X+, r1
     698:	8a 95       	dec	r24
     69a:	e9 f7       	brne	.-6      	; 0x696 <USB_ProcessHIDReport+0x64>

	ParserData->TotalDeviceReports = 1;
     69c:	fb 01       	movw	r30, r22
     69e:	e1 57       	subi	r30, 0x71	; 113
     6a0:	fc 4f       	sbci	r31, 0xFC	; 252
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 83       	st	Z, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
     6a6:	e9 96       	adiw	r28, 0x39	; 57
     6a8:	1c ae       	std	Y+60, r1	; 0x3c
     6aa:	1d ae       	std	Y+61, r1	; 0x3d
     6ac:	1e ae       	std	Y+62, r1	; 0x3e
     6ae:	1f ae       	std	Y+63, r1	; 0x3f
     6b0:	e9 97       	sbiw	r28, 0x39	; 57
     6b2:	44 24       	eor	r4, r4
     6b4:	55 24       	eor	r5, r5
     6b6:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
     6b8:	bb 24       	eor	r11, r11
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
     6ba:	88 24       	eor	r8, r8
     6bc:	99 24       	eor	r9, r9

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     6be:	cb 01       	movw	r24, r22
     6c0:	8a 52       	subi	r24, 0x2A	; 42
     6c2:	9c 4f       	sbci	r25, 0xFC	; 252
     6c4:	c0 58       	subi	r28, 0x80	; 128
     6c6:	df 4f       	sbci	r29, 0xFF	; 255
     6c8:	99 83       	std	Y+1, r25	; 0x01
     6ca:	88 83       	st	Y, r24
     6cc:	c0 58       	subi	r28, 0x80	; 128
     6ce:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     6d0:	c8 56       	subi	r28, 0x68	; 104
     6d2:	df 4f       	sbci	r29, 0xFF	; 255
     6d4:	39 83       	std	Y+1, r19	; 0x01
     6d6:	28 83       	st	Y, r18
     6d8:	c8 59       	subi	r28, 0x98	; 152
     6da:	d0 40       	sbci	r29, 0x00	; 0
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     6dc:	db 01       	movw	r26, r22
     6de:	a0 5b       	subi	r26, 0xB0	; 176
     6e0:	bc 4f       	sbci	r27, 0xFC	; 252
     6e2:	c6 57       	subi	r28, 0x76	; 118
     6e4:	df 4f       	sbci	r29, 0xFF	; 255
     6e6:	b9 83       	std	Y+1, r27	; 0x01
     6e8:	a8 83       	st	Y, r26
     6ea:	ca 58       	subi	r28, 0x8A	; 138
     6ec:	d0 40       	sbci	r29, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     6ee:	cb 01       	movw	r24, r22
     6f0:	88 57       	subi	r24, 0x78	; 120
     6f2:	9c 4f       	sbci	r25, 0xFC	; 252
     6f4:	c4 57       	subi	r28, 0x74	; 116
     6f6:	df 4f       	sbci	r29, 0xFF	; 255
     6f8:	99 83       	std	Y+1, r25	; 0x01
     6fa:	88 83       	st	Y, r24
     6fc:	cc 58       	subi	r28, 0x8C	; 140
     6fe:	d0 40       	sbci	r29, 0x00	; 0
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     700:	db 01       	movw	r26, r22
     702:	a7 5b       	subi	r26, 0xB7	; 183
     704:	bc 4f       	sbci	r27, 0xFC	; 252
     706:	c2 57       	subi	r28, 0x72	; 114
     708:	df 4f       	sbci	r29, 0xFF	; 255
     70a:	b9 83       	std	Y+1, r27	; 0x01
     70c:	a8 83       	st	Y, r26
     70e:	ce 58       	subi	r28, 0x8E	; 142
     710:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     712:	c9 01       	movw	r24, r18
     714:	4c 96       	adiw	r24, 0x1c	; 28
     716:	c0 57       	subi	r28, 0x70	; 112
     718:	df 4f       	sbci	r29, 0xFF	; 255
     71a:	99 83       	std	Y+1, r25	; 0x01
     71c:	88 83       	st	Y, r24
     71e:	c0 59       	subi	r28, 0x90	; 144
     720:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     722:	db 01       	movw	r26, r22
     724:	a8 52       	subi	r26, 0x28	; 40
     726:	bc 4f       	sbci	r27, 0xFC	; 252
     728:	ce 57       	subi	r28, 0x7E	; 126
     72a:	df 4f       	sbci	r29, 0xFF	; 255
     72c:	b9 83       	std	Y+1, r27	; 0x01
     72e:	a8 83       	st	Y, r26
     730:	c2 58       	subi	r28, 0x82	; 130
     732:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     734:	cc 57       	subi	r28, 0x7C	; 124
     736:	df 4f       	sbci	r29, 0xFF	; 255
     738:	f9 83       	std	Y+1, r31	; 0x01
     73a:	e8 83       	st	Y, r30
     73c:	c4 58       	subi	r28, 0x84	; 132
     73e:	d0 40       	sbci	r29, 0x00	; 0

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     740:	ca 01       	movw	r24, r20
     742:	ce 56       	subi	r28, 0x6E	; 110
     744:	df 4f       	sbci	r29, 0xFF	; 255
     746:	48 83       	st	Y, r20
     748:	c2 59       	subi	r28, 0x92	; 146
     74a:	d0 40       	sbci	r29, 0x00	; 0
     74c:	cd 56       	subi	r28, 0x6D	; 109
     74e:	df 4f       	sbci	r29, 0xFF	; 255
     750:	98 83       	st	Y, r25
     752:	c3 59       	subi	r28, 0x93	; 147
     754:	d0 40       	sbci	r29, 0x00	; 0
     756:	e5 96       	adiw	r28, 0x35	; 53
     758:	7f af       	std	Y+63, r23	; 0x3f
     75a:	6e af       	std	Y+62, r22	; 0x3e
     75c:	e5 97       	sbiw	r28, 0x35	; 53
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     75e:	38 c3       	rjmp	.+1648   	; 0xdd0 <USB_ProcessHIDReport+0x79e>
	{
		uint8_t  HIDReportItem  = *ReportData;
     760:	f6 01       	movw	r30, r12
     762:	61 91       	ld	r22, Z+
     764:	6f 01       	movw	r12, r30
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     766:	08 94       	sec
     768:	21 08       	sbc	r2, r1
     76a:	31 08       	sbc	r3, r1

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     76c:	86 2f       	mov	r24, r22
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	eb 96       	adiw	r28, 0x3b	; 59
     772:	9f af       	std	Y+63, r25	; 0x3f
     774:	8e af       	std	Y+62, r24	; 0x3e
     776:	eb 97       	sbiw	r28, 0x3b	; 59
     778:	83 70       	andi	r24, 0x03	; 3
     77a:	90 70       	andi	r25, 0x00	; 0
     77c:	82 30       	cpi	r24, 0x02	; 2
     77e:	91 05       	cpc	r25, r1
     780:	09 f4       	brne	.+2      	; 0x784 <USB_ProcessHIDReport+0x152>
     782:	3f c0       	rjmp	.+126    	; 0x802 <USB_ProcessHIDReport+0x1d0>
     784:	83 30       	cpi	r24, 0x03	; 3
     786:	91 05       	cpc	r25, r1
     788:	29 f0       	breq	.+10     	; 0x794 <USB_ProcessHIDReport+0x162>
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	91 05       	cpc	r25, r1
     78e:	09 f0       	breq	.+2      	; 0x792 <USB_ProcessHIDReport+0x160>
     790:	5c c0       	rjmp	.+184    	; 0x84a <USB_ProcessHIDReport+0x218>
     792:	52 c0       	rjmp	.+164    	; 0x838 <USB_ProcessHIDReport+0x206>
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     794:	df 01       	movw	r26, r30
     796:	e3 80       	ldd	r14, Z+3	; 0x03
     798:	ff 24       	eor	r15, r15
     79a:	00 e0       	ldi	r16, 0x00	; 0
     79c:	10 e0       	ldi	r17, 0x00	; 0
     79e:	1e 2d       	mov	r17, r14
     7a0:	00 27       	eor	r16, r16
     7a2:	ff 24       	eor	r15, r15
     7a4:	ee 24       	eor	r14, r14
     7a6:	12 96       	adiw	r26, 0x02	; 2
     7a8:	8c 91       	ld	r24, X
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	a0 e0       	ldi	r26, 0x00	; 0
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	dc 01       	movw	r26, r24
     7b2:	99 27       	eor	r25, r25
     7b4:	88 27       	eor	r24, r24
     7b6:	e8 2a       	or	r14, r24
     7b8:	f9 2a       	or	r15, r25
     7ba:	0a 2b       	or	r16, r26
     7bc:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     7be:	f6 01       	movw	r30, r12
     7c0:	80 81       	ld	r24, Z
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	a0 e0       	ldi	r26, 0x00	; 0
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     7c8:	e8 2a       	or	r14, r24
     7ca:	f9 2a       	or	r15, r25
     7cc:	0a 2b       	or	r16, r26
     7ce:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     7d0:	f1 81       	ldd	r31, Z+1	; 0x01
     7d2:	ed 96       	adiw	r28, 0x3d	; 61
     7d4:	ff af       	std	Y+63, r31	; 0x3f
     7d6:	ed 97       	sbiw	r28, 0x3d	; 61
     7d8:	ec 96       	adiw	r28, 0x3c	; 60
     7da:	1f ae       	std	Y+63, r1	; 0x3f
     7dc:	ec 97       	sbiw	r28, 0x3c	; 60
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     7de:	ed 96       	adiw	r28, 0x3d	; 61
     7e0:	ee ad       	ldd	r30, Y+62	; 0x3e
     7e2:	ff ad       	ldd	r31, Y+63	; 0x3f
     7e4:	ed 97       	sbiw	r28, 0x3d	; 61
     7e6:	cf 01       	movw	r24, r30
     7e8:	a0 e0       	ldi	r26, 0x00	; 0
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	e8 2a       	or	r14, r24
     7ee:	f9 2a       	or	r15, r25
     7f0:	0a 2b       	or	r16, r26
     7f2:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     7f4:	8c ef       	ldi	r24, 0xFC	; 252
     7f6:	9f ef       	ldi	r25, 0xFF	; 255
     7f8:	28 0e       	add	r2, r24
     7fa:	39 1e       	adc	r3, r25
				ReportData     += 4;
     7fc:	a4 e0       	ldi	r26, 0x04	; 4
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	18 c0       	rjmp	.+48     	; 0x832 <USB_ProcessHIDReport+0x200>
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     802:	f1 81       	ldd	r31, Z+1	; 0x01
     804:	ef 96       	adiw	r28, 0x3f	; 63
     806:	ff af       	std	Y+63, r31	; 0x3f
     808:	ef 97       	sbiw	r28, 0x3f	; 63
     80a:	ee 96       	adiw	r28, 0x3e	; 62
     80c:	1f ae       	std	Y+63, r1	; 0x3f
     80e:	ee 97       	sbiw	r28, 0x3e	; 62
     810:	d6 01       	movw	r26, r12
     812:	ec 90       	ld	r14, X
     814:	ff 24       	eor	r15, r15
     816:	ef 96       	adiw	r28, 0x3f	; 63
     818:	ee ad       	ldd	r30, Y+62	; 0x3e
     81a:	ff ad       	ldd	r31, Y+63	; 0x3f
     81c:	ef 97       	sbiw	r28, 0x3f	; 63
     81e:	ee 2a       	or	r14, r30
     820:	ff 2a       	or	r15, r31
     822:	00 e0       	ldi	r16, 0x00	; 0
     824:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
     826:	8e ef       	ldi	r24, 0xFE	; 254
     828:	9f ef       	ldi	r25, 0xFF	; 255
     82a:	28 0e       	add	r2, r24
     82c:	39 1e       	adc	r3, r25
				ReportData     += 2;
     82e:	a2 e0       	ldi	r26, 0x02	; 2
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	ca 0e       	add	r12, r26
     834:	db 1e       	adc	r13, r27
				break;
     836:	0c c0       	rjmp	.+24     	; 0x850 <USB_ProcessHIDReport+0x21e>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     838:	e1 90       	ld	r14, Z+
     83a:	6f 01       	movw	r12, r30
     83c:	ff 24       	eor	r15, r15
     83e:	00 e0       	ldi	r16, 0x00	; 0
     840:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
     842:	08 94       	sec
     844:	21 08       	sbc	r2, r1
     846:	31 08       	sbc	r3, r1
				ReportData     += 1;
				break;
     848:	03 c0       	rjmp	.+6      	; 0x850 <USB_ProcessHIDReport+0x21e>

			default:
				ReportItemData  = 0;
     84a:	ee 24       	eor	r14, r14
     84c:	ff 24       	eor	r15, r15
     84e:	87 01       	movw	r16, r14
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     850:	eb 96       	adiw	r28, 0x3b	; 59
     852:	8e ad       	ldd	r24, Y+62	; 0x3e
     854:	9f ad       	ldd	r25, Y+63	; 0x3f
     856:	eb 97       	sbiw	r28, 0x3b	; 59
     858:	8c 7f       	andi	r24, 0xFC	; 252
     85a:	90 70       	andi	r25, 0x00	; 0
     85c:	84 36       	cpi	r24, 0x64	; 100
     85e:	91 05       	cpc	r25, r1
     860:	09 f4       	brne	.+2      	; 0x864 <USB_ProcessHIDReport+0x232>
     862:	c9 c0       	rjmp	.+402    	; 0x9f6 <USB_ProcessHIDReport+0x3c4>
     864:	85 36       	cpi	r24, 0x65	; 101
     866:	91 05       	cpc	r25, r1
     868:	8c f5       	brge	.+98     	; 0x8cc <USB_ProcessHIDReport+0x29a>
     86a:	84 32       	cpi	r24, 0x24	; 36
     86c:	91 05       	cpc	r25, r1
     86e:	09 f4       	brne	.+2      	; 0x872 <USB_ProcessHIDReport+0x240>
     870:	a9 c0       	rjmp	.+338    	; 0x9c4 <USB_ProcessHIDReport+0x392>
     872:	85 32       	cpi	r24, 0x25	; 37
     874:	91 05       	cpc	r25, r1
     876:	ac f4       	brge	.+42     	; 0x8a2 <USB_ProcessHIDReport+0x270>
     878:	88 30       	cpi	r24, 0x08	; 8
     87a:	91 05       	cpc	r25, r1
     87c:	09 f4       	brne	.+2      	; 0x880 <USB_ProcessHIDReport+0x24e>
     87e:	31 c1       	rjmp	.+610    	; 0xae2 <USB_ProcessHIDReport+0x4b0>
     880:	89 30       	cpi	r24, 0x09	; 9
     882:	91 05       	cpc	r25, r1
     884:	2c f4       	brge	.+10     	; 0x890 <USB_ProcessHIDReport+0x25e>
     886:	84 30       	cpi	r24, 0x04	; 4
     888:	91 05       	cpc	r25, r1
     88a:	09 f0       	breq	.+2      	; 0x88e <USB_ProcessHIDReport+0x25c>
     88c:	8f c2       	rjmp	.+1310   	; 0xdac <USB_ProcessHIDReport+0x77a>
     88e:	8e c0       	rjmp	.+284    	; 0x9ac <USB_ProcessHIDReport+0x37a>
     890:	84 31       	cpi	r24, 0x14	; 20
     892:	91 05       	cpc	r25, r1
     894:	09 f4       	brne	.+2      	; 0x898 <USB_ProcessHIDReport+0x266>
     896:	8e c0       	rjmp	.+284    	; 0x9b4 <USB_ProcessHIDReport+0x382>
     898:	88 31       	cpi	r24, 0x18	; 24
     89a:	91 05       	cpc	r25, r1
     89c:	09 f0       	breq	.+2      	; 0x8a0 <USB_ProcessHIDReport+0x26e>
     89e:	86 c2       	rjmp	.+1292   	; 0xdac <USB_ProcessHIDReport+0x77a>
     8a0:	83 c2       	rjmp	.+1286   	; 0xda8 <USB_ProcessHIDReport+0x776>
     8a2:	84 33       	cpi	r24, 0x34	; 52
     8a4:	91 05       	cpc	r25, r1
     8a6:	09 f4       	brne	.+2      	; 0x8aa <USB_ProcessHIDReport+0x278>
     8a8:	93 c0       	rjmp	.+294    	; 0x9d0 <USB_ProcessHIDReport+0x39e>
     8aa:	85 33       	cpi	r24, 0x35	; 53
     8ac:	91 05       	cpc	r25, r1
     8ae:	2c f4       	brge	.+10     	; 0x8ba <USB_ProcessHIDReport+0x288>
     8b0:	88 32       	cpi	r24, 0x28	; 40
     8b2:	91 05       	cpc	r25, r1
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <USB_ProcessHIDReport+0x286>
     8b6:	7a c2       	rjmp	.+1268   	; 0xdac <USB_ProcessHIDReport+0x77a>
     8b8:	26 c1       	rjmp	.+588    	; 0xb06 <USB_ProcessHIDReport+0x4d4>
     8ba:	84 34       	cpi	r24, 0x44	; 68
     8bc:	91 05       	cpc	r25, r1
     8be:	09 f4       	brne	.+2      	; 0x8c2 <USB_ProcessHIDReport+0x290>
     8c0:	8f c0       	rjmp	.+286    	; 0x9e0 <USB_ProcessHIDReport+0x3ae>
     8c2:	84 35       	cpi	r24, 0x54	; 84
     8c4:	91 05       	cpc	r25, r1
     8c6:	09 f0       	breq	.+2      	; 0x8ca <USB_ProcessHIDReport+0x298>
     8c8:	71 c2       	rjmp	.+1250   	; 0xdac <USB_ProcessHIDReport+0x77a>
     8ca:	90 c0       	rjmp	.+288    	; 0x9ec <USB_ProcessHIDReport+0x3ba>
     8cc:	84 39       	cpi	r24, 0x94	; 148
     8ce:	91 05       	cpc	r25, r1
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <USB_ProcessHIDReport+0x2a2>
     8d2:	9a c0       	rjmp	.+308    	; 0xa08 <USB_ProcessHIDReport+0x3d6>
     8d4:	85 39       	cpi	r24, 0x95	; 149
     8d6:	91 05       	cpc	r25, r1
     8d8:	a4 f4       	brge	.+40     	; 0x902 <USB_ProcessHIDReport+0x2d0>
     8da:	80 38       	cpi	r24, 0x80	; 128
     8dc:	91 05       	cpc	r25, r1
     8de:	41 f1       	breq	.+80     	; 0x930 <USB_ProcessHIDReport+0x2fe>
     8e0:	81 38       	cpi	r24, 0x81	; 129
     8e2:	91 05       	cpc	r25, r1
     8e4:	2c f4       	brge	.+10     	; 0x8f0 <USB_ProcessHIDReport+0x2be>
     8e6:	84 37       	cpi	r24, 0x74	; 116
     8e8:	91 05       	cpc	r25, r1
     8ea:	09 f0       	breq	.+2      	; 0x8ee <USB_ProcessHIDReport+0x2bc>
     8ec:	5f c2       	rjmp	.+1214   	; 0xdac <USB_ProcessHIDReport+0x77a>
     8ee:	89 c0       	rjmp	.+274    	; 0xa02 <USB_ProcessHIDReport+0x3d0>
     8f0:	84 38       	cpi	r24, 0x84	; 132
     8f2:	91 05       	cpc	r25, r1
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <USB_ProcessHIDReport+0x2c6>
     8f6:	8b c0       	rjmp	.+278    	; 0xa0e <USB_ProcessHIDReport+0x3dc>
     8f8:	80 39       	cpi	r24, 0x90	; 144
     8fa:	91 05       	cpc	r25, r1
     8fc:	09 f0       	breq	.+2      	; 0x900 <USB_ProcessHIDReport+0x2ce>
     8fe:	56 c2       	rjmp	.+1196   	; 0xdac <USB_ProcessHIDReport+0x77a>
     900:	17 c0       	rjmp	.+46     	; 0x930 <USB_ProcessHIDReport+0x2fe>
     902:	80 3b       	cpi	r24, 0xB0	; 176
     904:	91 05       	cpc	r25, r1
     906:	a1 f0       	breq	.+40     	; 0x930 <USB_ProcessHIDReport+0x2fe>
     908:	81 3b       	cpi	r24, 0xB1	; 177
     90a:	91 05       	cpc	r25, r1
     90c:	4c f4       	brge	.+18     	; 0x920 <USB_ProcessHIDReport+0x2ee>
     90e:	80 3a       	cpi	r24, 0xA0	; 160
     910:	91 05       	cpc	r25, r1
     912:	09 f4       	brne	.+2      	; 0x916 <USB_ProcessHIDReport+0x2e4>
     914:	ff c0       	rjmp	.+510    	; 0xb14 <USB_ProcessHIDReport+0x4e2>
     916:	84 3a       	cpi	r24, 0xA4	; 164
     918:	91 05       	cpc	r25, r1
     91a:	09 f0       	breq	.+2      	; 0x91e <USB_ProcessHIDReport+0x2ec>
     91c:	47 c2       	rjmp	.+1166   	; 0xdac <USB_ProcessHIDReport+0x77a>
     91e:	24 c0       	rjmp	.+72     	; 0x968 <USB_ProcessHIDReport+0x336>
     920:	84 3b       	cpi	r24, 0xB4	; 180
     922:	91 05       	cpc	r25, r1
     924:	b1 f1       	breq	.+108    	; 0x992 <USB_ProcessHIDReport+0x360>
     926:	80 3c       	cpi	r24, 0xC0	; 192
     928:	91 05       	cpc	r25, r1
     92a:	09 f0       	breq	.+2      	; 0x92e <USB_ProcessHIDReport+0x2fc>
     92c:	3f c2       	rjmp	.+1150   	; 0xdac <USB_ProcessHIDReport+0x77a>
     92e:	4f c1       	rjmp	.+670    	; 0xbce <USB_ProcessHIDReport+0x59c>
     930:	aa 24       	eor	r10, r10
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
     932:	6c 7f       	andi	r22, 0xFC	; 252
     934:	c1 58       	subi	r28, 0x81	; 129
     936:	df 4f       	sbci	r29, 0xFF	; 255
     938:	68 83       	st	Y, r22
     93a:	cf 57       	subi	r28, 0x7F	; 127
     93c:	d0 40       	sbci	r29, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     93e:	c8 01       	movw	r24, r16
     940:	b7 01       	movw	r22, r14
     942:	61 70       	andi	r22, 0x01	; 1
     944:	70 70       	andi	r23, 0x00	; 0
     946:	80 70       	andi	r24, 0x00	; 0
     948:	90 70       	andi	r25, 0x00	; 0
     94a:	ca 57       	subi	r28, 0x7A	; 122
     94c:	df 4f       	sbci	r29, 0xFF	; 255
     94e:	68 83       	st	Y, r22
     950:	79 83       	std	Y+1, r23	; 0x01
     952:	8a 83       	std	Y+2, r24	; 0x02
     954:	9b 83       	std	Y+3, r25	; 0x03
     956:	c6 58       	subi	r28, 0x86	; 134
     958:	d0 40       	sbci	r29, 0x00	; 0
     95a:	c6 01       	movw	r24, r12
     95c:	6a 01       	movw	r12, r20
     95e:	b8 01       	movw	r22, r16
     960:	a7 01       	movw	r20, r14
     962:	79 01       	movw	r14, r18
     964:	8c 01       	movw	r16, r24
     966:	17 c2       	rjmp	.+1070   	; 0xd96 <USB_ProcessHIDReport+0x764>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     968:	c0 57       	subi	r28, 0x70	; 112
     96a:	df 4f       	sbci	r29, 0xFF	; 255
     96c:	88 81       	ld	r24, Y
     96e:	99 81       	ldd	r25, Y+1	; 0x01
     970:	c0 59       	subi	r28, 0x90	; 144
     972:	d0 40       	sbci	r29, 0x00	; 0
     974:	28 17       	cp	r18, r24
     976:	39 07       	cpc	r19, r25
     978:	09 f4       	brne	.+2      	; 0x97c <USB_ProcessHIDReport+0x34a>
     97a:	38 c2       	rjmp	.+1136   	; 0xdec <USB_ProcessHIDReport+0x7ba>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     97c:	c9 01       	movw	r24, r18
     97e:	4c 96       	adiw	r24, 0x1c	; 28
     980:	fc 01       	movw	r30, r24
     982:	d9 01       	movw	r26, r18
     984:	2a e2       	ldi	r18, 0x2A	; 42
     986:	0d 90       	ld	r0, X+
     988:	01 92       	st	Z+, r0
     98a:	21 50       	subi	r18, 0x01	; 1
     98c:	e1 f7       	brne	.-8      	; 0x986 <USB_ProcessHIDReport+0x354>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     98e:	9c 01       	movw	r18, r24
				break;
     990:	0d c2       	rjmp	.+1050   	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     992:	c8 56       	subi	r28, 0x68	; 104
     994:	df 4f       	sbci	r29, 0xFF	; 255
     996:	a8 81       	ld	r26, Y
     998:	b9 81       	ldd	r27, Y+1	; 0x01
     99a:	c8 59       	subi	r28, 0x98	; 152
     99c:	d0 40       	sbci	r29, 0x00	; 0
     99e:	2a 17       	cp	r18, r26
     9a0:	3b 07       	cpc	r19, r27
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <USB_ProcessHIDReport+0x374>
     9a4:	25 c2       	rjmp	.+1098   	; 0xdf0 <USB_ProcessHIDReport+0x7be>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     9a6:	2c 51       	subi	r18, 0x1C	; 28
     9a8:	30 40       	sbci	r19, 0x00	; 0
				break;
     9aa:	00 c2       	rjmp	.+1024   	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     9ac:	f9 01       	movw	r30, r18
     9ae:	f2 82       	std	Z+2, r15	; 0x02
     9b0:	e1 82       	std	Z+1, r14	; 0x01
				break;
     9b2:	fc c1       	rjmp	.+1016   	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     9b4:	d9 01       	movw	r26, r18
     9b6:	1a 96       	adiw	r26, 0x0a	; 10
     9b8:	ed 92       	st	X+, r14
     9ba:	fd 92       	st	X+, r15
     9bc:	0d 93       	st	X+, r16
     9be:	1c 93       	st	X, r17
     9c0:	1d 97       	sbiw	r26, 0x0d	; 13
				break;
     9c2:	f4 c1       	rjmp	.+1000   	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     9c4:	f9 01       	movw	r30, r18
     9c6:	e6 86       	std	Z+14, r14	; 0x0e
     9c8:	f7 86       	std	Z+15, r15	; 0x0f
     9ca:	00 8b       	std	Z+16, r16	; 0x10
     9cc:	11 8b       	std	Z+17, r17	; 0x11
				break;
     9ce:	ee c1       	rjmp	.+988    	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     9d0:	d9 01       	movw	r26, r18
     9d2:	52 96       	adiw	r26, 0x12	; 18
     9d4:	ed 92       	st	X+, r14
     9d6:	fd 92       	st	X+, r15
     9d8:	0d 93       	st	X+, r16
     9da:	1c 93       	st	X, r17
     9dc:	55 97       	sbiw	r26, 0x15	; 21
				break;
     9de:	e6 c1       	rjmp	.+972    	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     9e0:	f9 01       	movw	r30, r18
     9e2:	e6 8a       	std	Z+22, r14	; 0x16
     9e4:	f7 8a       	std	Z+23, r15	; 0x17
     9e6:	00 8f       	std	Z+24, r16	; 0x18
     9e8:	11 8f       	std	Z+25, r17	; 0x19
				break;
     9ea:	e0 c1       	rjmp	.+960    	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     9ec:	d9 01       	movw	r26, r18
     9ee:	19 96       	adiw	r26, 0x09	; 9
     9f0:	ec 92       	st	X, r14
     9f2:	19 97       	sbiw	r26, 0x09	; 9
				break;
     9f4:	db c1       	rjmp	.+950    	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     9f6:	f9 01       	movw	r30, r18
     9f8:	e5 82       	std	Z+5, r14	; 0x05
     9fa:	f6 82       	std	Z+6, r15	; 0x06
     9fc:	07 83       	std	Z+7, r16	; 0x07
     9fe:	10 87       	std	Z+8, r17	; 0x08
				break;
     a00:	d5 c1       	rjmp	.+938    	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     a02:	d9 01       	movw	r26, r18
     a04:	ec 92       	st	X, r14
				break;
     a06:	d2 c1       	rjmp	.+932    	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     a08:	f9 01       	movw	r30, r18
     a0a:	e2 8e       	std	Z+26, r14	; 0x1a
				break;
     a0c:	cf c1       	rjmp	.+926    	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     a0e:	9e 2d       	mov	r25, r14
     a10:	d9 01       	movw	r26, r18
     a12:	5b 96       	adiw	r26, 0x1b	; 27
     a14:	ec 92       	st	X, r14
     a16:	5b 97       	sbiw	r26, 0x1b	; 27

				if (ParserData->UsingReportIDs)
     a18:	ce 57       	subi	r28, 0x7E	; 126
     a1a:	df 4f       	sbci	r29, 0xFF	; 255
     a1c:	e8 81       	ld	r30, Y
     a1e:	f9 81       	ldd	r31, Y+1	; 0x01
     a20:	c2 58       	subi	r28, 0x82	; 130
     a22:	d0 40       	sbci	r29, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	88 23       	and	r24, r24
     a28:	09 f4       	brne	.+2      	; 0xa2c <USB_ProcessHIDReport+0x3fa>
     a2a:	4c c0       	rjmp	.+152    	; 0xac4 <USB_ProcessHIDReport+0x492>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     a2c:	cc 57       	subi	r28, 0x7C	; 124
     a2e:	df 4f       	sbci	r29, 0xFF	; 255
     a30:	a8 81       	ld	r26, Y
     a32:	b9 81       	ldd	r27, Y+1	; 0x01
     a34:	c4 58       	subi	r28, 0x84	; 132
     a36:	d0 40       	sbci	r29, 0x00	; 0
     a38:	6c 91       	ld	r22, X

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     a3a:	ce 56       	subi	r28, 0x6E	; 110
     a3c:	df 4f       	sbci	r29, 0xFF	; 255
     a3e:	e8 81       	ld	r30, Y
     a40:	c2 59       	subi	r28, 0x92	; 146
     a42:	d0 40       	sbci	r29, 0x00	; 0
     a44:	cd 56       	subi	r28, 0x6D	; 109
     a46:	df 4f       	sbci	r29, 0xFF	; 255
     a48:	f8 81       	ld	r31, Y
     a4a:	c3 59       	subi	r28, 0x93	; 147
     a4c:	d0 40       	sbci	r29, 0x00	; 0
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	17 c0       	rjmp	.+46     	; 0xa80 <USB_ProcessHIDReport+0x44e>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     a52:	40 81       	ld	r20, Z
     a54:	37 96       	adiw	r30, 0x07	; 7
     a56:	49 17       	cp	r20, r25
     a58:	91 f4       	brne	.+36     	; 0xa7e <USB_ProcessHIDReport+0x44c>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	ac 01       	movw	r20, r24
     a5e:	f3 e0       	ldi	r31, 0x03	; 3
     a60:	44 0f       	add	r20, r20
     a62:	55 1f       	adc	r21, r21
     a64:	fa 95       	dec	r31
     a66:	e1 f7       	brne	.-8      	; 0xa60 <USB_ProcessHIDReport+0x42e>
     a68:	48 1b       	sub	r20, r24
     a6a:	59 0b       	sbc	r21, r25
     a6c:	40 57       	subi	r20, 0x70	; 112
     a6e:	5c 4f       	sbci	r21, 0xFC	; 252
     a70:	e5 96       	adiw	r28, 0x35	; 53
     a72:	ee ad       	ldd	r30, Y+62	; 0x3e
     a74:	ff ad       	ldd	r31, Y+63	; 0x3f
     a76:	e5 97       	sbiw	r28, 0x35	; 53
     a78:	4e 0f       	add	r20, r30
     a7a:	5f 1f       	adc	r21, r31
     a7c:	23 c0       	rjmp	.+70     	; 0xac4 <USB_ProcessHIDReport+0x492>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     a7e:	8f 5f       	subi	r24, 0xFF	; 255
     a80:	86 17       	cp	r24, r22
     a82:	38 f3       	brcs	.-50     	; 0xa52 <USB_ProcessHIDReport+0x420>
     a84:	dc c1       	rjmp	.+952    	; 0xe3e <USB_ProcessHIDReport+0x80c>
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     a86:	86 2f       	mov	r24, r22
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	ac 01       	movw	r20, r24
     a8c:	e3 e0       	ldi	r30, 0x03	; 3
     a8e:	44 0f       	add	r20, r20
     a90:	55 1f       	adc	r21, r21
     a92:	ea 95       	dec	r30
     a94:	e1 f7       	brne	.-8      	; 0xa8e <USB_ProcessHIDReport+0x45c>
     a96:	48 1b       	sub	r20, r24
     a98:	59 0b       	sbc	r21, r25
     a9a:	40 57       	subi	r20, 0x70	; 112
     a9c:	5c 4f       	sbci	r21, 0xFC	; 252
     a9e:	e5 96       	adiw	r28, 0x35	; 53
     aa0:	8e ad       	ldd	r24, Y+62	; 0x3e
     aa2:	9f ad       	ldd	r25, Y+63	; 0x3f
     aa4:	e5 97       	sbiw	r28, 0x35	; 53
     aa6:	48 0f       	add	r20, r24
     aa8:	59 1f       	adc	r21, r25
     aaa:	6f 5f       	subi	r22, 0xFF	; 255
     aac:	cc 57       	subi	r28, 0x7C	; 124
     aae:	df 4f       	sbci	r29, 0xFF	; 255
     ab0:	a8 81       	ld	r26, Y
     ab2:	b9 81       	ldd	r27, Y+1	; 0x01
     ab4:	c4 58       	subi	r28, 0x84	; 132
     ab6:	d0 40       	sbci	r29, 0x00	; 0
     ab8:	6c 93       	st	X, r22
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     aba:	87 e0       	ldi	r24, 0x07	; 7
     abc:	da 01       	movw	r26, r20
     abe:	1d 92       	st	X+, r1
     ac0:	8a 95       	dec	r24
     ac2:	e9 f7       	brne	.-6      	; 0xabe <USB_ProcessHIDReport+0x48c>
					}
				}

				ParserData->UsingReportIDs = true;
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	ce 57       	subi	r28, 0x7E	; 126
     ac8:	df 4f       	sbci	r29, 0xFF	; 255
     aca:	e8 81       	ld	r30, Y
     acc:	f9 81       	ldd	r31, Y+1	; 0x01
     ace:	c2 58       	subi	r28, 0x82	; 130
     ad0:	d0 40       	sbci	r29, 0x00	; 0
     ad2:	60 83       	st	Z, r22

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     ad4:	d9 01       	movw	r26, r18
     ad6:	5b 96       	adiw	r26, 0x1b	; 27
     ad8:	8c 91       	ld	r24, X
     ada:	5b 97       	sbiw	r26, 0x1b	; 27
     adc:	fa 01       	movw	r30, r20
     ade:	80 83       	st	Z, r24
				break;
     ae0:	65 c1       	rjmp	.+714    	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     ae2:	fb 2d       	mov	r31, r11
     ae4:	f8 30       	cpi	r31, 0x08	; 8
     ae6:	09 f4       	brne	.+2      	; 0xaea <USB_ProcessHIDReport+0x4b8>
     ae8:	85 c1       	rjmp	.+778    	; 0xdf4 <USB_ProcessHIDReport+0x7c2>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     aea:	eb 2d       	mov	r30, r11
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	ee 0f       	add	r30, r30
     af0:	ff 1f       	adc	r31, r31
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	6c 0f       	add	r22, r28
     af8:	7d 1f       	adc	r23, r29
     afa:	e6 0f       	add	r30, r22
     afc:	f7 1f       	adc	r31, r23
     afe:	f1 82       	std	Z+1, r15	; 0x01
     b00:	e0 82       	st	Z, r14
     b02:	b3 94       	inc	r11
				break;
     b04:	53 c1       	rjmp	.+678    	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     b06:	e9 96       	adiw	r28, 0x39	; 57
     b08:	ec ae       	std	Y+60, r14	; 0x3c
     b0a:	fd ae       	std	Y+61, r15	; 0x3d
     b0c:	0e af       	std	Y+62, r16	; 0x3e
     b0e:	1f af       	std	Y+63, r17	; 0x3f
     b10:	e9 97       	sbiw	r28, 0x39	; 57
     b12:	4c c1       	rjmp	.+664    	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     b14:	81 14       	cp	r8, r1
     b16:	91 04       	cpc	r9, r1
     b18:	39 f4       	brne	.+14     	; 0xb28 <USB_ProcessHIDReport+0x4f6>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     b1a:	c2 57       	subi	r28, 0x72	; 114
     b1c:	df 4f       	sbci	r29, 0xFF	; 255
     b1e:	88 80       	ld	r8, Y
     b20:	99 80       	ldd	r9, Y+1	; 0x01
     b22:	ce 58       	subi	r28, 0x8E	; 142
     b24:	d0 40       	sbci	r29, 0x00	; 0
     b26:	19 c0       	rjmp	.+50     	; 0xb5a <USB_ProcessHIDReport+0x528>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     b28:	c6 57       	subi	r28, 0x76	; 118
     b2a:	df 4f       	sbci	r29, 0xFF	; 255
     b2c:	e8 81       	ld	r30, Y
     b2e:	f9 81       	ldd	r31, Y+1	; 0x01
     b30:	ca 58       	subi	r28, 0x8A	; 138
     b32:	d0 40       	sbci	r29, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
     b34:	0b c0       	rjmp	.+22     	; 0xb4c <USB_ProcessHIDReport+0x51a>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     b36:	c4 57       	subi	r28, 0x74	; 116
     b38:	df 4f       	sbci	r29, 0xFF	; 255
     b3a:	88 81       	ld	r24, Y
     b3c:	99 81       	ldd	r25, Y+1	; 0x01
     b3e:	cc 58       	subi	r28, 0x8C	; 140
     b40:	d0 40       	sbci	r29, 0x00	; 0
     b42:	e8 17       	cp	r30, r24
     b44:	f9 07       	cpc	r31, r25
     b46:	09 f4       	brne	.+2      	; 0xb4a <USB_ProcessHIDReport+0x518>
     b48:	57 c1       	rjmp	.+686    	; 0xdf8 <USB_ProcessHIDReport+0x7c6>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     b4a:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     b4c:	85 81       	ldd	r24, Z+5	; 0x05
     b4e:	96 81       	ldd	r25, Z+6	; 0x06
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	89 f7       	brne	.-30     	; 0xb36 <USB_ProcessHIDReport+0x504>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     b54:	96 82       	std	Z+6, r9	; 0x06
     b56:	85 82       	std	Z+5, r8	; 0x05
     b58:	4f 01       	movw	r8, r30
				}

				CurrCollectionPath->Type       = ReportItemData;
     b5a:	d4 01       	movw	r26, r8
     b5c:	ec 92       	st	X, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     b5e:	f9 01       	movw	r30, r18
     b60:	81 81       	ldd	r24, Z+1	; 0x01
     b62:	92 81       	ldd	r25, Z+2	; 0x02
     b64:	12 96       	adiw	r26, 0x02	; 2
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
     b6c:	bb 20       	and	r11, r11
     b6e:	c1 f0       	breq	.+48     	; 0xba0 <USB_ProcessHIDReport+0x56e>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	14 96       	adiw	r26, 0x04	; 4
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	13 97       	sbiw	r26, 0x03	; 3
     b7c:	fe 01       	movw	r30, r28
     b7e:	31 96       	adiw	r30, 0x01	; 1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     b80:	8b 2d       	mov	r24, r11
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	8e 0f       	add	r24, r30
     b8a:	9f 1f       	adc	r25, r31

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <USB_ProcessHIDReport+0x564>
					  UsageList[i] = UsageList[i + 1];
     b8e:	62 81       	ldd	r22, Z+2	; 0x02
     b90:	73 81       	ldd	r23, Z+3	; 0x03
     b92:	61 93       	st	Z+, r22
     b94:	71 93       	st	Z+, r23

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     b96:	e8 17       	cp	r30, r24
     b98:	f9 07       	cpc	r31, r25
     b9a:	c9 f7       	brne	.-14     	; 0xb8e <USB_ProcessHIDReport+0x55c>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     b9c:	ba 94       	dec	r11
     b9e:	06 c1       	rjmp	.+524    	; 0xdac <USB_ProcessHIDReport+0x77a>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     ba0:	e9 96       	adiw	r28, 0x39	; 57
     ba2:	8c ad       	ldd	r24, Y+60	; 0x3c
     ba4:	9d ad       	ldd	r25, Y+61	; 0x3d
     ba6:	ae ad       	ldd	r26, Y+62	; 0x3e
     ba8:	bf ad       	ldd	r27, Y+63	; 0x3f
     baa:	e9 97       	sbiw	r28, 0x39	; 57
     bac:	84 15       	cp	r24, r4
     bae:	95 05       	cpc	r25, r5
     bb0:	a6 05       	cpc	r26, r6
     bb2:	b7 05       	cpc	r27, r7
     bb4:	08 f4       	brcc	.+2      	; 0xbb8 <USB_ProcessHIDReport+0x586>
     bb6:	fa c0       	rjmp	.+500    	; 0xdac <USB_ProcessHIDReport+0x77a>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     bb8:	d4 01       	movw	r26, r8
     bba:	14 96       	adiw	r26, 0x04	; 4
     bbc:	5c 92       	st	X, r5
     bbe:	4e 92       	st	-X, r4
     bc0:	13 97       	sbiw	r26, 0x03	; 3
     bc2:	08 94       	sec
     bc4:	41 1c       	adc	r4, r1
     bc6:	51 1c       	adc	r5, r1
     bc8:	61 1c       	adc	r6, r1
     bca:	71 1c       	adc	r7, r1
     bcc:	ef c0       	rjmp	.+478    	; 0xdac <USB_ProcessHIDReport+0x77a>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     bce:	81 14       	cp	r8, r1
     bd0:	91 04       	cpc	r9, r1
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <USB_ProcessHIDReport+0x5a4>
     bd4:	13 c1       	rjmp	.+550    	; 0xdfc <USB_ProcessHIDReport+0x7ca>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     bd6:	f4 01       	movw	r30, r8
     bd8:	85 80       	ldd	r8, Z+5	; 0x05
     bda:	96 80       	ldd	r9, Z+6	; 0x06
				break;
     bdc:	e7 c0       	rjmp	.+462    	; 0xdac <USB_ProcessHIDReport+0x77a>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     bde:	de 01       	movw	r26, r28
     be0:	59 96       	adiw	r26, 0x19	; 25
     be2:	f7 01       	movw	r30, r14
     be4:	8a e1       	ldi	r24, 0x1A	; 26
     be6:	01 90       	ld	r0, Z+
     be8:	0d 92       	st	X+, r0
     bea:	81 50       	subi	r24, 0x01	; 1
     bec:	e1 f7       	brne	.-8      	; 0xbe6 <USB_ProcessHIDReport+0x5b4>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     bee:	5d 8b       	std	Y+21, r21	; 0x15
     bf0:	4c 8b       	std	Y+20, r20	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
     bf2:	98 8e       	std	Y+24, r9	; 0x18
     bf4:	8f 8a       	std	Y+23, r8	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     bf6:	d7 01       	movw	r26, r14
     bf8:	5b 96       	adiw	r26, 0x1b	; 27
     bfa:	8c 91       	ld	r24, X
     bfc:	5b 97       	sbiw	r26, 0x1b	; 27
     bfe:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
     c00:	bb 20       	and	r11, r11
     c02:	b1 f0       	breq	.+44     	; 0xc30 <USB_ProcessHIDReport+0x5fe>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	9d 8f       	std	Y+29, r25	; 0x1d
     c0a:	8c 8f       	std	Y+28, r24	; 0x1c
     c0c:	fe 01       	movw	r30, r28
     c0e:	31 96       	adiw	r30, 0x01	; 1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     c10:	8b 2d       	mov	r24, r11
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	8e 0f       	add	r24, r30
     c1a:	9f 1f       	adc	r25, r31

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <USB_ProcessHIDReport+0x5f4>
						  UsageList[i] = UsageList[i + 1];
     c1e:	22 81       	ldd	r18, Z+2	; 0x02
     c20:	33 81       	ldd	r19, Z+3	; 0x03
     c22:	21 93       	st	Z+, r18
     c24:	31 93       	st	Z+, r19

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     c26:	e8 17       	cp	r30, r24
     c28:	f9 07       	cpc	r31, r25
     c2a:	c9 f7       	brne	.-14     	; 0xc1e <USB_ProcessHIDReport+0x5ec>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     c2c:	ba 94       	dec	r11
     c2e:	12 c0       	rjmp	.+36     	; 0xc54 <USB_ProcessHIDReport+0x622>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     c30:	e9 96       	adiw	r28, 0x39	; 57
     c32:	8c ad       	ldd	r24, Y+60	; 0x3c
     c34:	9d ad       	ldd	r25, Y+61	; 0x3d
     c36:	ae ad       	ldd	r26, Y+62	; 0x3e
     c38:	bf ad       	ldd	r27, Y+63	; 0x3f
     c3a:	e9 97       	sbiw	r28, 0x39	; 57
     c3c:	84 15       	cp	r24, r4
     c3e:	95 05       	cpc	r25, r5
     c40:	a6 05       	cpc	r26, r6
     c42:	b7 05       	cpc	r27, r7
     c44:	38 f0       	brcs	.+14     	; 0xc54 <USB_ProcessHIDReport+0x622>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     c46:	5d 8e       	std	Y+29, r5	; 0x1d
     c48:	4c 8e       	std	Y+28, r4	; 0x1c
     c4a:	08 94       	sec
     c4c:	41 1c       	adc	r4, r1
     c4e:	51 1c       	adc	r5, r1
     c50:	61 1c       	adc	r6, r1
     c52:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     c54:	c1 58       	subi	r28, 0x81	; 129
     c56:	df 4f       	sbci	r29, 0xFF	; 255
     c58:	98 81       	ld	r25, Y
     c5a:	cf 57       	subi	r28, 0x7F	; 127
     c5c:	d0 40       	sbci	r29, 0x00	; 0
     c5e:	90 38       	cpi	r25, 0x80	; 128
     c60:	11 f4       	brne	.+4      	; 0xc66 <USB_ProcessHIDReport+0x634>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     c62:	1b 8a       	std	Y+19, r1	; 0x13
     c64:	0c c0       	rjmp	.+24     	; 0xc7e <USB_ProcessHIDReport+0x64c>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     c66:	c1 58       	subi	r28, 0x81	; 129
     c68:	df 4f       	sbci	r29, 0xFF	; 255
     c6a:	a8 81       	ld	r26, Y
     c6c:	cf 57       	subi	r28, 0x7F	; 127
     c6e:	d0 40       	sbci	r29, 0x00	; 0
     c70:	a0 39       	cpi	r26, 0x90	; 144
     c72:	19 f4       	brne	.+6      	; 0xc7a <USB_ProcessHIDReport+0x648>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     c74:	b1 e0       	ldi	r27, 0x01	; 1
     c76:	bb 8b       	std	Y+19, r27	; 0x13
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <USB_ProcessHIDReport+0x64c>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     c7a:	e2 e0       	ldi	r30, 0x02	; 2
     c7c:	eb 8b       	std	Y+19, r30	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     c7e:	eb 89       	ldd	r30, Y+19	; 0x13
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	ec 0d       	add	r30, r12
     c88:	fd 1d       	adc	r31, r13
     c8a:	81 81       	ldd	r24, Z+1	; 0x01
     c8c:	92 81       	ldd	r25, Z+2	; 0x02
     c8e:	9a 8b       	std	Y+18, r25	; 0x12
     c90:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     c92:	d7 01       	movw	r26, r14
     c94:	2c 91       	ld	r18, X
     c96:	81 81       	ldd	r24, Z+1	; 0x01
     c98:	92 81       	ldd	r25, Z+2	; 0x02
     c9a:	82 0f       	add	r24, r18
     c9c:	91 1d       	adc	r25, r1
     c9e:	92 83       	std	Z+2, r25	; 0x02
     ca0:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     ca2:	eb 89       	ldd	r30, Y+19	; 0x13
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	ec 0d       	add	r30, r12
     cac:	fd 1d       	adc	r31, r13
     cae:	c0 58       	subi	r28, 0x80	; 128
     cb0:	df 4f       	sbci	r29, 0xFF	; 255
     cb2:	a8 81       	ld	r26, Y
     cb4:	b9 81       	ldd	r27, Y+1	; 0x01
     cb6:	c0 58       	subi	r28, 0x80	; 128
     cb8:	d0 40       	sbci	r29, 0x00	; 0
     cba:	8d 91       	ld	r24, X+
     cbc:	9c 91       	ld	r25, X
     cbe:	11 97       	sbiw	r26, 0x01	; 1
     cc0:	21 81       	ldd	r18, Z+1	; 0x01
     cc2:	32 81       	ldd	r19, Z+2	; 0x02
     cc4:	28 17       	cp	r18, r24
     cc6:	39 07       	cpc	r19, r25
     cc8:	08 f4       	brcc	.+2      	; 0xccc <USB_ProcessHIDReport+0x69a>
     cca:	9c 01       	movw	r18, r24
     ccc:	c0 58       	subi	r28, 0x80	; 128
     cce:	df 4f       	sbci	r29, 0xFF	; 255
     cd0:	e8 81       	ld	r30, Y
     cd2:	f9 81       	ldd	r31, Y+1	; 0x01
     cd4:	c0 58       	subi	r28, 0x80	; 128
     cd6:	d0 40       	sbci	r29, 0x00	; 0
     cd8:	31 83       	std	Z+1, r19	; 0x01
     cda:	20 83       	st	Z, r18

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     cdc:	e5 96       	adiw	r28, 0x35	; 53
     cde:	ae ad       	ldd	r26, Y+62	; 0x3e
     ce0:	bf ad       	ldd	r27, Y+63	; 0x3f
     ce2:	e5 97       	sbiw	r28, 0x35	; 53
     ce4:	8c 91       	ld	r24, X
     ce6:	84 31       	cpi	r24, 0x14	; 20
     ce8:	09 f4       	brne	.+2      	; 0xcec <USB_ProcessHIDReport+0x6ba>
     cea:	8a c0       	rjmp	.+276    	; 0xe00 <USB_ProcessHIDReport+0x7ce>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	2a e2       	ldi	r18, 0x2A	; 42
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	82 9f       	mul	r24, r18
     cf4:	f0 01       	movw	r30, r0
     cf6:	83 9f       	mul	r24, r19
     cf8:	f0 0d       	add	r31, r0
     cfa:	92 9f       	mul	r25, r18
     cfc:	f0 0d       	add	r31, r0
     cfe:	11 24       	eor	r1, r1
     d00:	ea 0f       	add	r30, r26
     d02:	fb 1f       	adc	r31, r27
     d04:	31 96       	adiw	r30, 0x01	; 1
     d06:	de 01       	movw	r26, r28
     d08:	51 96       	adiw	r26, 0x11	; 17
     d0a:	8a e2       	ldi	r24, 0x2A	; 42
     d0c:	0d 90       	ld	r0, X+
     d0e:	01 92       	st	Z+, r0
     d10:	81 50       	subi	r24, 0x01	; 1
     d12:	e1 f7       	brne	.-8      	; 0xd0c <USB_ProcessHIDReport+0x6da>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     d14:	ca 57       	subi	r28, 0x7A	; 122
     d16:	df 4f       	sbci	r29, 0xFF	; 255
     d18:	88 81       	ld	r24, Y
     d1a:	99 81       	ldd	r25, Y+1	; 0x01
     d1c:	aa 81       	ldd	r26, Y+2	; 0x02
     d1e:	bb 81       	ldd	r27, Y+3	; 0x03
     d20:	c6 58       	subi	r28, 0x86	; 134
     d22:	d0 40       	sbci	r29, 0x00	; 0
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	a1 05       	cpc	r26, r1
     d28:	b1 05       	cpc	r27, r1
     d2a:	a1 f5       	brne	.+104    	; 0xd94 <USB_ProcessHIDReport+0x762>
     d2c:	ce 01       	movw	r24, r28
     d2e:	41 96       	adiw	r24, 0x11	; 17
     d30:	cc 56       	subi	r28, 0x6C	; 108
     d32:	df 4f       	sbci	r29, 0xFF	; 255
     d34:	48 83       	st	Y, r20
     d36:	c4 59       	subi	r28, 0x94	; 148
     d38:	d0 40       	sbci	r29, 0x00	; 0
     d3a:	cb 56       	subi	r28, 0x6B	; 107
     d3c:	df 4f       	sbci	r29, 0xFF	; 255
     d3e:	58 83       	st	Y, r21
     d40:	c5 59       	subi	r28, 0x95	; 149
     d42:	d0 40       	sbci	r29, 0x00	; 0
     d44:	ca 56       	subi	r28, 0x6A	; 106
     d46:	df 4f       	sbci	r29, 0xFF	; 255
     d48:	68 83       	st	Y, r22
     d4a:	c6 59       	subi	r28, 0x96	; 150
     d4c:	d0 40       	sbci	r29, 0x00	; 0
     d4e:	c9 56       	subi	r28, 0x69	; 105
     d50:	df 4f       	sbci	r29, 0xFF	; 255
     d52:	78 83       	st	Y, r23
     d54:	c7 59       	subi	r28, 0x97	; 151
     d56:	d0 40       	sbci	r29, 0x00	; 0
     d58:	43 dc       	rcall	.-1914   	; 0x5e0 <CALLBACK_HIDParser_FilterHIDReportItem>
     d5a:	cc 56       	subi	r28, 0x6C	; 108
     d5c:	df 4f       	sbci	r29, 0xFF	; 255
     d5e:	48 81       	ld	r20, Y
     d60:	c4 59       	subi	r28, 0x94	; 148
     d62:	d0 40       	sbci	r29, 0x00	; 0
     d64:	cb 56       	subi	r28, 0x6B	; 107
     d66:	df 4f       	sbci	r29, 0xFF	; 255
     d68:	58 81       	ld	r21, Y
     d6a:	c5 59       	subi	r28, 0x95	; 149
     d6c:	d0 40       	sbci	r29, 0x00	; 0
     d6e:	ca 56       	subi	r28, 0x6A	; 106
     d70:	df 4f       	sbci	r29, 0xFF	; 255
     d72:	68 81       	ld	r22, Y
     d74:	c6 59       	subi	r28, 0x96	; 150
     d76:	d0 40       	sbci	r29, 0x00	; 0
     d78:	c9 56       	subi	r28, 0x69	; 105
     d7a:	df 4f       	sbci	r29, 0xFF	; 255
     d7c:	78 81       	ld	r23, Y
     d7e:	c7 59       	subi	r28, 0x97	; 151
     d80:	d0 40       	sbci	r29, 0x00	; 0
     d82:	88 23       	and	r24, r24
     d84:	39 f0       	breq	.+14     	; 0xd94 <USB_ProcessHIDReport+0x762>
					  ParserData->TotalReportItems++;
     d86:	e5 96       	adiw	r28, 0x35	; 53
     d88:	ae ad       	ldd	r26, Y+62	; 0x3e
     d8a:	bf ad       	ldd	r27, Y+63	; 0x3f
     d8c:	e5 97       	sbiw	r28, 0x35	; 53
     d8e:	8c 91       	ld	r24, X
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	8c 93       	st	X, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     d94:	a3 94       	inc	r10
     d96:	f7 01       	movw	r30, r14
     d98:	82 8d       	ldd	r24, Z+26	; 0x1a
     d9a:	a8 16       	cp	r10, r24
     d9c:	08 f4       	brcc	.+2      	; 0xda0 <USB_ProcessHIDReport+0x76e>
     d9e:	1f cf       	rjmp	.-450    	; 0xbde <USB_ProcessHIDReport+0x5ac>
     da0:	97 01       	movw	r18, r14
     da2:	a6 01       	movw	r20, r12
     da4:	68 01       	movw	r12, r16
     da6:	02 c0       	rjmp	.+4      	; 0xdac <USB_ProcessHIDReport+0x77a>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     da8:	27 01       	movw	r4, r14
     daa:	38 01       	movw	r6, r16
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     dac:	eb 96       	adiw	r28, 0x3b	; 59
     dae:	8e ad       	ldd	r24, Y+62	; 0x3e
     db0:	9f ad       	ldd	r25, Y+63	; 0x3f
     db2:	eb 97       	sbiw	r28, 0x3b	; 59
     db4:	8c 70       	andi	r24, 0x0C	; 12
     db6:	90 70       	andi	r25, 0x00	; 0
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	51 f4       	brne	.+20     	; 0xdd0 <USB_ProcessHIDReport+0x79e>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     dbc:	e9 96       	adiw	r28, 0x39	; 57
     dbe:	1c ae       	std	Y+60, r1	; 0x3c
     dc0:	1d ae       	std	Y+61, r1	; 0x3d
     dc2:	1e ae       	std	Y+62, r1	; 0x3e
     dc4:	1f ae       	std	Y+63, r1	; 0x3f
     dc6:	e9 97       	sbiw	r28, 0x39	; 57
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     dc8:	44 24       	eor	r4, r4
     dca:	55 24       	eor	r5, r5
     dcc:	32 01       	movw	r6, r4
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     dce:	bb 24       	eor	r11, r11
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     dd0:	21 14       	cp	r2, r1
     dd2:	31 04       	cpc	r3, r1
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <USB_ProcessHIDReport+0x7a6>
     dd6:	c4 cc       	rjmp	.-1656   	; 0x760 <USB_ProcessHIDReport+0x12e>
     dd8:	e5 96       	adiw	r28, 0x35	; 53
     dda:	6e ad       	ldd	r22, Y+62	; 0x3e
     ddc:	7f ad       	ldd	r23, Y+63	; 0x3f
     dde:	e5 97       	sbiw	r28, 0x35	; 53
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     de0:	db 01       	movw	r26, r22
     de2:	8c 91       	ld	r24, X
     de4:	88 23       	and	r24, r24
     de6:	71 f4       	brne	.+28     	; 0xe04 <USB_ProcessHIDReport+0x7d2>
	  return HID_PARSE_NoUnfilteredReportItems;
     de8:	88 e0       	ldi	r24, 0x08	; 8
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <USB_ProcessHIDReport+0x7d8>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	0d c0       	rjmp	.+26     	; 0xe0a <USB_ProcessHIDReport+0x7d8>

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	0b c0       	rjmp	.+22     	; 0xe0a <USB_ProcessHIDReport+0x7d8>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     df4:	86 e0       	ldi	r24, 0x06	; 6
     df6:	09 c0       	rjmp	.+18     	; 0xe0a <USB_ProcessHIDReport+0x7d8>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     df8:	85 e0       	ldi	r24, 0x05	; 5
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <USB_ProcessHIDReport+0x7d8>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     dfc:	84 e0       	ldi	r24, 0x04	; 4
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <USB_ProcessHIDReport+0x7d8>
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <USB_ProcessHIDReport+0x7d8>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <USB_ProcessHIDReport+0x7d8>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     e08:	87 e0       	ldi	r24, 0x07	; 7

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     e0a:	c7 56       	subi	r28, 0x67	; 103
     e0c:	df 4f       	sbci	r29, 0xFF	; 255
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	df 90       	pop	r13
     e26:	cf 90       	pop	r12
     e28:	bf 90       	pop	r11
     e2a:	af 90       	pop	r10
     e2c:	9f 90       	pop	r9
     e2e:	8f 90       	pop	r8
     e30:	7f 90       	pop	r7
     e32:	6f 90       	pop	r6
     e34:	5f 90       	pop	r5
     e36:	4f 90       	pop	r4
     e38:	3f 90       	pop	r3
     e3a:	2f 90       	pop	r2
     e3c:	08 95       	ret
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     e3e:	6a 30       	cpi	r22, 0x0A	; 10
     e40:	09 f0       	breq	.+2      	; 0xe44 <USB_ProcessHIDReport+0x812>
     e42:	21 ce       	rjmp	.-958    	; 0xa86 <USB_ProcessHIDReport+0x454>
     e44:	e1 cf       	rjmp	.-62     	; 0xe08 <USB_ProcessHIDReport+0x7d6>

00000e46 <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	fb 01       	movw	r30, r22
	if (ReportItem == NULL)
     e54:	30 97       	sbiw	r30, 0x00	; 0
     e56:	09 f4       	brne	.+2      	; 0xe5a <USB_GetHIDReportItemInfo+0x14>
     e58:	4c c0       	rjmp	.+152    	; 0xef2 <USB_GetHIDReportItemInfo+0xac>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
     e5a:	30 85       	ldd	r19, Z+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
     e5c:	60 81       	ld	r22, Z
     e5e:	71 81       	ldd	r23, Z+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
     e60:	25 81       	ldd	r18, Z+5	; 0x05
     e62:	22 23       	and	r18, r18
     e64:	31 f0       	breq	.+12     	; 0xe72 <USB_GetHIDReportItemInfo+0x2c>
	{
		if (ReportItem->ReportID != ReportData[0])
     e66:	dc 01       	movw	r26, r24
     e68:	4c 91       	ld	r20, X
     e6a:	24 17       	cp	r18, r20
     e6c:	09 f0       	breq	.+2      	; 0xe70 <USB_GetHIDReportItemInfo+0x2a>
     e6e:	41 c0       	rjmp	.+130    	; 0xef2 <USB_GetHIDReportItemInfo+0xac>
		  return false;

		ReportData++;
     e70:	01 96       	adiw	r24, 0x01	; 1
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
     e72:	c3 2f       	mov	r28, r19
     e74:	d0 e0       	ldi	r29, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
     e76:	22 a1       	ldd	r18, Z+34	; 0x22
     e78:	33 a1       	ldd	r19, Z+35	; 0x23
     e7a:	44 a1       	ldd	r20, Z+36	; 0x24
     e7c:	55 a1       	ldd	r21, Z+37	; 0x25
     e7e:	26 a3       	std	Z+38, r18	; 0x26
     e80:	37 a3       	std	Z+39, r19	; 0x27
     e82:	40 a7       	std	Z+40, r20	; 0x28
     e84:	51 a7       	std	Z+41, r21	; 0x29
	ReportItem->Value = 0;
     e86:	12 a2       	std	Z+34, r1	; 0x22
     e88:	13 a2       	std	Z+35, r1	; 0x23
     e8a:	14 a2       	std	Z+36, r1	; 0x24
     e8c:	15 a2       	std	Z+37, r1	; 0x25
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
     e8e:	21 e0       	ldi	r18, 0x01	; 1
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	50 e0       	ldi	r21, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     e96:	29 c0       	rjmp	.+82     	; 0xeea <USB_GetHIDReportItemInfo+0xa4>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
     e98:	db 01       	movw	r26, r22
     e9a:	03 e0       	ldi	r16, 0x03	; 3
     e9c:	b6 95       	lsr	r27
     e9e:	a7 95       	ror	r26
     ea0:	0a 95       	dec	r16
     ea2:	e1 f7       	brne	.-8      	; 0xe9c <USB_GetHIDReportItemInfo+0x56>
     ea4:	a8 0f       	add	r26, r24
     ea6:	b9 1f       	adc	r27, r25
     ea8:	ac 91       	ld	r26, X
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	17 e0       	ldi	r17, 0x07	; 7
     eae:	e1 2e       	mov	r14, r17
     eb0:	f1 2c       	mov	r15, r1
     eb2:	e6 22       	and	r14, r22
     eb4:	f7 22       	and	r15, r23
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <USB_GetHIDReportItemInfo+0x76>
     eb8:	b5 95       	asr	r27
     eba:	a7 95       	ror	r26
     ebc:	ea 94       	dec	r14
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <USB_GetHIDReportItemInfo+0x72>
     ec0:	a0 ff       	sbrs	r26, 0
     ec2:	0c c0       	rjmp	.+24     	; 0xedc <USB_GetHIDReportItemInfo+0x96>
		  ReportItem->Value |= BitMask;
     ec4:	e2 a0       	ldd	r14, Z+34	; 0x22
     ec6:	f3 a0       	ldd	r15, Z+35	; 0x23
     ec8:	04 a1       	ldd	r16, Z+36	; 0x24
     eca:	15 a1       	ldd	r17, Z+37	; 0x25
     ecc:	e2 2a       	or	r14, r18
     ece:	f3 2a       	or	r15, r19
     ed0:	04 2b       	or	r16, r20
     ed2:	15 2b       	or	r17, r21
     ed4:	e2 a2       	std	Z+34, r14	; 0x22
     ed6:	f3 a2       	std	Z+35, r15	; 0x23
     ed8:	04 a3       	std	Z+36, r16	; 0x24
     eda:	15 a3       	std	Z+37, r17	; 0x25

		CurrentBit++;
     edc:	6f 5f       	subi	r22, 0xFF	; 255
     ede:	7f 4f       	sbci	r23, 0xFF	; 255
		BitMask <<= 1;
     ee0:	22 0f       	add	r18, r18
     ee2:	33 1f       	adc	r19, r19
     ee4:	44 1f       	adc	r20, r20
     ee6:	55 1f       	adc	r21, r21
     ee8:	21 97       	sbiw	r28, 0x01	; 1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     eea:	20 97       	sbiw	r28, 0x00	; 0
     eec:	a9 f6       	brne	.-86     	; 0xe98 <USB_GetHIDReportItemInfo+0x52>

		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <USB_GetHIDReportItemInfo+0xae>
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;
     ef2:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	08 95       	ret

00000f02 <USB_GetHIDReportSize>:
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     f02:	e4 2f       	mov	r30, r20
     f04:	f0 e0       	ldi	r31, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
     f06:	ee 0f       	add	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	ef 56       	subi	r30, 0x6F	; 111
     f0c:	fc 4f       	sbci	r31, 0xFC	; 252
     f0e:	e8 0f       	add	r30, r24
     f10:	f9 1f       	adc	r31, r25
     f12:	80 57       	subi	r24, 0x70	; 112
     f14:	9c 4f       	sbci	r25, 0xFC	; 252
     f16:	4a e0       	ldi	r20, 0x0A	; 10
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     f18:	20 81       	ld	r18, Z
     f1a:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
     f1c:	dc 01       	movw	r26, r24
     f1e:	5c 91       	ld	r21, X
     f20:	56 17       	cp	r21, r22
     f22:	91 f4       	brne	.+36     	; 0xf48 <USB_GetHIDReportSize+0x46>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
     f24:	a9 01       	movw	r20, r18
     f26:	47 70       	andi	r20, 0x07	; 7
     f28:	50 70       	andi	r21, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	41 15       	cp	r20, r1
     f30:	51 05       	cpc	r21, r1
     f32:	11 f4       	brne	.+4      	; 0xf38 <USB_GetHIDReportSize+0x36>
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	43 e0       	ldi	r20, 0x03	; 3
     f3a:	36 95       	lsr	r19
     f3c:	27 95       	ror	r18
     f3e:	4a 95       	dec	r20
     f40:	e1 f7       	brne	.-8      	; 0xf3a <USB_GetHIDReportSize+0x38>
     f42:	28 0f       	add	r18, r24
     f44:	39 1f       	adc	r19, r25
     f46:	07 c0       	rjmp	.+14     	; 0xf56 <USB_GetHIDReportSize+0x54>
     f48:	41 50       	subi	r20, 0x01	; 1
     f4a:	37 96       	adiw	r30, 0x07	; 7
     f4c:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
     f4e:	44 23       	and	r20, r20
     f50:	19 f7       	brne	.-58     	; 0xf18 <USB_GetHIDReportSize+0x16>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
}
     f56:	c9 01       	movw	r24, r18
     f58:	08 95       	ret

00000f5a <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f5a:	80 91 9e 00 	lds	r24, 0x009E
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	81 70       	andi	r24, 0x01	; 1
     f62:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     f64:	20 91 a0 00 	lds	r18, 0x00A0
     f68:	2d 7f       	andi	r18, 0xFD	; 253
     f6a:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     f6e:	20 91 9e 00 	lds	r18, 0x009E
     f72:	22 60       	ori	r18, 0x02	; 2
     f74:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     f78:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     f7c:	21 fd       	sbrc	r18, 1
     f7e:	fc cf       	rjmp	.-8      	; 0xf78 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f80:	20 91 9e 00 	lds	r18, 0x009E
     f84:	21 60       	ori	r18, 0x01	; 1
     f86:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     f8a:	10 92 04 05 	sts	0x0504, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f8e:	20 91 a0 00 	lds	r18, 0x00A0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	20 72       	andi	r18, 0x20	; 32
     f96:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     f98:	40 91 a0 00 	lds	r20, 0x00A0
     f9c:	4f 7d       	andi	r20, 0xDF	; 223
     f9e:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     fa2:	40 91 9f 00 	lds	r20, 0x009F
     fa6:	4f 7d       	andi	r20, 0xDF	; 223
     fa8:	40 93 9f 00 	sts	0x009F, r20
     fac:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     fae:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     fb2:	55 ff       	sbrs	r21, 5
     fb4:	0b c0       	rjmp	.+22     	; 0xfcc <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     fb6:	40 91 9f 00 	lds	r20, 0x009F
     fba:	4f 7d       	andi	r20, 0xDF	; 223
     fbc:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     fc0:	40 91 9f 00 	lds	r20, 0x009F
     fc4:	4d 7f       	andi	r20, 0xFD	; 253
     fc6:	40 93 9f 00 	sts	0x009F, r20
     fca:	08 c0       	rjmp	.+16     	; 0xfdc <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fcc:	ef ec       	ldi	r30, 0xCF	; 207
     fce:	f7 e0       	ldi	r31, 0x07	; 7
     fd0:	31 97       	sbiw	r30, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <USB_Host_ResetDevice+0x76>
     fd4:	00 c0       	rjmp	.+0      	; 0xfd6 <USB_Host_ResetDevice+0x7c>
     fd6:	00 00       	nop
     fd8:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     fda:	49 f7       	brne	.-46     	; 0xfae <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     fdc:	21 15       	cp	r18, r1
     fde:	31 05       	cpc	r19, r1
     fe0:	29 f0       	breq	.+10     	; 0xfec <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     fe2:	20 91 a0 00 	lds	r18, 0x00A0
     fe6:	20 62       	ori	r18, 0x20	; 32
     fe8:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	29 f4       	brne	.+10     	; 0xffa <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     ff0:	80 91 9e 00 	lds	r24, 0x009E
     ff4:	8e 7f       	andi	r24, 0xFE	; 254
     ff6:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     ffa:	80 91 a0 00 	lds	r24, 0x00A0
     ffe:	82 60       	ori	r24, 0x02	; 2
    1000:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    1004:	08 95       	ret

00001006 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1006:	40 91 9e 00 	lds	r20, 0x009E
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	41 70       	andi	r20, 0x01	; 1
    100e:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1010:	20 91 a0 00 	lds	r18, 0x00A0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	20 72       	andi	r18, 0x20	; 32
    1018:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    101a:	90 91 a0 00 	lds	r25, 0x00A0
    101e:	9f 7d       	andi	r25, 0xDF	; 223
    1020:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1024:	90 91 9f 00 	lds	r25, 0x009F
    1028:	9f 7d       	andi	r25, 0xDF	; 223
    102a:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    102e:	90 91 9e 00 	lds	r25, 0x009E
    1032:	91 60       	ori	r25, 0x01	; 1
    1034:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    1038:	26 c0       	rjmp	.+76     	; 0x1086 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    103a:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    103e:	95 ff       	sbrs	r25, 5
    1040:	06 c0       	rjmp	.+12     	; 0x104e <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1042:	90 91 9f 00 	lds	r25, 0x009F
    1046:	9f 7d       	andi	r25, 0xDF	; 223
    1048:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    104c:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    104e:	90 91 0e 05 	lds	r25, 0x050E
    1052:	91 30       	cpi	r25, 0x01	; 1
    1054:	d9 f0       	breq	.+54     	; 0x108c <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    1056:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    105a:	94 ff       	sbrs	r25, 4
    105c:	09 c0       	rjmp	.+18     	; 0x1070 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    105e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1062:	80 91 a6 00 	lds	r24, 0x00A6
    1066:	8f 7e       	andi	r24, 0xEF	; 239
    1068:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    106c:	82 e0       	ldi	r24, 0x02	; 2

			break;
    106e:	0f c0       	rjmp	.+30     	; 0x108e <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1070:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
    1074:	91 ff       	sbrs	r25, 1
    1076:	07 c0       	rjmp	.+14     	; 0x1086 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    1078:	80 91 a6 00 	lds	r24, 0x00A6
    107c:	8d 7f       	andi	r24, 0xFD	; 253
    107e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    1082:	83 e0       	ldi	r24, 0x03	; 3

			break;
    1084:	04 c0       	rjmp	.+8      	; 0x108e <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    1086:	88 23       	and	r24, r24
    1088:	c1 f6       	brne	.-80     	; 0x103a <USB_Host_WaitMS+0x34>
    108a:	01 c0       	rjmp	.+2      	; 0x108e <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    108c:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    108e:	41 15       	cp	r20, r1
    1090:	51 05       	cpc	r21, r1
    1092:	29 f4       	brne	.+10     	; 0x109e <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1094:	90 91 9e 00 	lds	r25, 0x009E
    1098:	9e 7f       	andi	r25, 0xFE	; 254
    109a:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    109e:	21 15       	cp	r18, r1
    10a0:	31 05       	cpc	r19, r1
    10a2:	29 f0       	breq	.+10     	; 0x10ae <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    10a4:	90 91 a0 00 	lds	r25, 0x00A0
    10a8:	90 62       	ori	r25, 0x20	; 32
    10aa:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    10ae:	08 95       	ret

000010b0 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	28 97       	sbiw	r28, 0x08	; 8
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    10c8:	80 91 0e 05 	lds	r24, 0x050E
    10cc:	85 30       	cpi	r24, 0x05	; 5
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <USB_Host_ProcessNextHostState+0x22>
    10d0:	99 c0       	rjmp	.+306    	; 0x1204 <USB_Host_ProcessNextHostState+0x154>
    10d2:	86 30       	cpi	r24, 0x06	; 6
    10d4:	68 f4       	brcc	.+26     	; 0x10f0 <USB_Host_ProcessNextHostState+0x40>
    10d6:	82 30       	cpi	r24, 0x02	; 2
    10d8:	c1 f1       	breq	.+112    	; 0x114a <USB_Host_ProcessNextHostState+0x9a>
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	18 f4       	brcc	.+6      	; 0x10e4 <USB_Host_ProcessNextHostState+0x34>
    10de:	88 23       	and	r24, r24
    10e0:	a1 f0       	breq	.+40     	; 0x110a <USB_Host_ProcessNextHostState+0x5a>
    10e2:	04 c1       	rjmp	.+520    	; 0x12ec <USB_Host_ProcessNextHostState+0x23c>
    10e4:	83 30       	cpi	r24, 0x03	; 3
    10e6:	d9 f1       	breq	.+118    	; 0x115e <USB_Host_ProcessNextHostState+0xae>
    10e8:	84 30       	cpi	r24, 0x04	; 4
    10ea:	09 f0       	breq	.+2      	; 0x10ee <USB_Host_ProcessNextHostState+0x3e>
    10ec:	ff c0       	rjmp	.+510    	; 0x12ec <USB_Host_ProcessNextHostState+0x23c>
    10ee:	62 c0       	rjmp	.+196    	; 0x11b4 <USB_Host_ProcessNextHostState+0x104>
    10f0:	87 30       	cpi	r24, 0x07	; 7
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <USB_Host_ProcessNextHostState+0x46>
    10f4:	9e c0       	rjmp	.+316    	; 0x1232 <USB_Host_ProcessNextHostState+0x182>
    10f6:	87 30       	cpi	r24, 0x07	; 7
    10f8:	08 f4       	brcc	.+2      	; 0x10fc <USB_Host_ProcessNextHostState+0x4c>
    10fa:	8f c0       	rjmp	.+286    	; 0x121a <USB_Host_ProcessNextHostState+0x16a>
    10fc:	88 30       	cpi	r24, 0x08	; 8
    10fe:	09 f4       	brne	.+2      	; 0x1102 <USB_Host_ProcessNextHostState+0x52>
    1100:	b8 c0       	rjmp	.+368    	; 0x1272 <USB_Host_ProcessNextHostState+0x1c2>
    1102:	89 30       	cpi	r24, 0x09	; 9
    1104:	09 f0       	breq	.+2      	; 0x1108 <USB_Host_ProcessNextHostState+0x58>
    1106:	f2 c0       	rjmp	.+484    	; 0x12ec <USB_Host_ProcessNextHostState+0x23c>
    1108:	d9 c0       	rjmp	.+434    	; 0x12bc <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    110a:	00 91 02 05 	lds	r16, 0x0502
    110e:	10 91 03 05 	lds	r17, 0x0503
    1112:	01 15       	cp	r16, r1
    1114:	11 05       	cpc	r17, r1
    1116:	09 f4       	brne	.+2      	; 0x111a <USB_Host_ProcessNextHostState+0x6a>
    1118:	e9 c0       	rjmp	.+466    	; 0x12ec <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	74 df       	rcall	.-280    	; 0x1006 <USB_Host_WaitMS>
    111e:	68 2f       	mov	r22, r24
    1120:	88 23       	and	r24, r24
    1122:	31 f0       	breq	.+12     	; 0x1130 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
    1124:	80 91 01 05 	lds	r24, 0x0501
    1128:	80 93 0e 05 	sts	0x050E, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    112c:	81 e0       	ldi	r24, 0x01	; 1
					break;
    112e:	d2 c0       	rjmp	.+420    	; 0x12d4 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
    1130:	01 50       	subi	r16, 0x01	; 1
    1132:	10 40       	sbci	r17, 0x00	; 0
    1134:	10 93 03 05 	sts	0x0503, r17
    1138:	00 93 02 05 	sts	0x0502, r16
    113c:	01 15       	cp	r16, r1
    113e:	11 05       	cpc	r17, r1
    1140:	09 f0       	breq	.+2      	; 0x1144 <USB_Host_ProcessNextHostState+0x94>
    1142:	d4 c0       	rjmp	.+424    	; 0x12ec <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
    1144:	80 91 01 05 	lds	r24, 0x0501
    1148:	07 c0       	rjmp	.+14     	; 0x1158 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    114a:	88 ee       	ldi	r24, 0xE8	; 232
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	90 93 03 05 	sts	0x0503, r25
    1152:	80 93 02 05 	sts	0x0502, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    1156:	83 e0       	ldi	r24, 0x03	; 3
    1158:	80 93 0e 05 	sts	0x050E, r24
			break;
    115c:	c7 c0       	rjmp	.+398    	; 0x12ec <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    115e:	80 91 02 05 	lds	r24, 0x0502
    1162:	90 91 03 05 	lds	r25, 0x0503
    1166:	9c 01       	movw	r18, r24
    1168:	21 50       	subi	r18, 0x01	; 1
    116a:	30 40       	sbci	r19, 0x00	; 0
    116c:	30 93 03 05 	sts	0x0503, r19
    1170:	20 93 02 05 	sts	0x0502, r18
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	39 f0       	breq	.+14     	; 0x1186 <USB_Host_ProcessNextHostState+0xd6>
    1178:	8f ec       	ldi	r24, 0xCF	; 207
    117a:	97 e0       	ldi	r25, 0x07	; 7
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <USB_Host_ProcessNextHostState+0xcc>
    1180:	00 c0       	rjmp	.+0      	; 0x1182 <USB_Host_ProcessNextHostState+0xd2>
    1182:	00 00       	nop
    1184:	b3 c0       	rjmp	.+358    	; 0x12ec <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    1186:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1188:	80 91 d8 00 	lds	r24, 0x00D8
    118c:	80 61       	ori	r24, 0x10	; 16
    118e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    1192:	80 91 dd 00 	lds	r24, 0x00DD
    1196:	8b 7f       	andi	r24, 0xFB	; 251
    1198:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    119c:	80 91 d7 00 	lds	r24, 0x00D7
    11a0:	80 61       	ori	r24, 0x10	; 16
    11a2:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    11a6:	80 91 dd 00 	lds	r24, 0x00DD
    11aa:	82 60       	ori	r24, 0x02	; 2
    11ac:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    11b0:	84 e0       	ldi	r24, 0x04	; 4
    11b2:	d2 cf       	rjmp	.-92     	; 0x1158 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    11b4:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    11b8:	80 ff       	sbrs	r24, 0
    11ba:	98 c0       	rjmp	.+304    	; 0x12ec <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    11bc:	80 91 9f 00 	lds	r24, 0x009F
    11c0:	8e 7f       	andi	r24, 0xFE	; 254
    11c2:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    11c6:	80 91 9f 00 	lds	r24, 0x009F
    11ca:	8d 7f       	andi	r24, 0xFD	; 253
    11cc:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    11d0:	80 91 df 00 	lds	r24, 0x00DF
    11d4:	8d 7f       	andi	r24, 0xFD	; 253
    11d6:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    11da:	80 91 de 00 	lds	r24, 0x00DE
    11de:	82 60       	ori	r24, 0x02	; 2
    11e0:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    11e4:	80 91 9e 00 	lds	r24, 0x009E
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    11ee:	7a d1       	rcall	.+756    	; 0x14e4 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    11f0:	10 92 0e 05 	sts	0x050E, r1
    11f4:	84 e6       	ldi	r24, 0x64	; 100
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	90 93 03 05 	sts	0x0503, r25
    11fc:	80 93 02 05 	sts	0x0502, r24
    1200:	85 e0       	ldi	r24, 0x05	; 5
    1202:	59 c0       	rjmp	.+178    	; 0x12b6 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1204:	aa de       	rcall	.-684    	; 0xf5a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1206:	10 92 0e 05 	sts	0x050E, r1
    120a:	88 ec       	ldi	r24, 0xC8	; 200
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	90 93 03 05 	sts	0x0503, r25
    1212:	80 93 02 05 	sts	0x0502, r24
    1216:	86 e0       	ldi	r24, 0x06	; 6
    1218:	4e c0       	rjmp	.+156    	; 0x12b6 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	20 e4       	ldi	r18, 0x40	; 64
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	01 e0       	ldi	r16, 0x01	; 1
    1226:	d0 d0       	rcall	.+416    	; 0x13c8 <Pipe_ConfigurePipe>
    1228:	88 23       	and	r24, r24
    122a:	09 f4       	brne	.+2      	; 0x122e <USB_Host_ProcessNextHostState+0x17e>
    122c:	4f c0       	rjmp	.+158    	; 0x12cc <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    122e:	87 e0       	ldi	r24, 0x07	; 7
    1230:	93 cf       	rjmp	.-218    	; 0x1158 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1232:	a6 e0       	ldi	r26, 0x06	; 6
    1234:	b5 e0       	ldi	r27, 0x05	; 5
    1236:	ef e1       	ldi	r30, 0x1F	; 31
    1238:	f1 e0       	ldi	r31, 0x01	; 1
    123a:	88 e0       	ldi	r24, 0x08	; 8
    123c:	01 90       	ld	r0, Z+
    123e:	0d 92       	st	X+, r0
    1240:	81 50       	subi	r24, 0x01	; 1
    1242:	e1 f7       	brne	.-8      	; 0x123c <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1244:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1248:	ce 01       	movw	r24, r28
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	94 d3       	rcall	.+1832   	; 0x1976 <USB_Host_SendControlRequest>
    124e:	68 2f       	mov	r22, r24
    1250:	88 23       	and	r24, r24
    1252:	09 f0       	breq	.+2      	; 0x1256 <USB_Host_ProcessNextHostState+0x1a6>
    1254:	3e c0       	rjmp	.+124    	; 0x12d2 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    1256:	88 85       	ldd	r24, Y+8	; 0x08
    1258:	80 93 27 01 	sts	0x0127, r24

			USB_Host_ResetDevice();
    125c:	7e de       	rcall	.-772    	; 0xf5a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    125e:	10 92 0e 05 	sts	0x050E, r1
    1262:	88 ec       	ldi	r24, 0xC8	; 200
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	90 93 03 05 	sts	0x0503, r25
    126a:	80 93 02 05 	sts	0x0502, r24
    126e:	88 e0       	ldi	r24, 0x08	; 8
    1270:	22 c0       	rjmp	.+68     	; 0x12b6 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    1272:	20 91 27 01 	lds	r18, 0x0127
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	01 e0       	ldi	r16, 0x01	; 1
    1280:	a3 d0       	rcall	.+326    	; 0x13c8 <Pipe_ConfigurePipe>
    1282:	88 23       	and	r24, r24
    1284:	19 f1       	breq	.+70     	; 0x12cc <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    1286:	a6 e0       	ldi	r26, 0x06	; 6
    1288:	b5 e0       	ldi	r27, 0x05	; 5
    128a:	e7 e1       	ldi	r30, 0x17	; 23
    128c:	f1 e0       	ldi	r31, 0x01	; 1
    128e:	88 e0       	ldi	r24, 0x08	; 8
    1290:	01 90       	ld	r0, Z+
    1292:	0d 92       	st	X+, r0
    1294:	81 50       	subi	r24, 0x01	; 1
    1296:	e1 f7       	brne	.-8      	; 0x1290 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	6c d3       	rcall	.+1752   	; 0x1976 <USB_Host_SendControlRequest>
    129e:	68 2f       	mov	r22, r24
    12a0:	88 23       	and	r24, r24
    12a2:	b9 f4       	brne	.+46     	; 0x12d2 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    12a4:	10 92 0e 05 	sts	0x050E, r1
    12a8:	84 e6       	ldi	r24, 0x64	; 100
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	90 93 03 05 	sts	0x0503, r25
    12b0:	80 93 02 05 	sts	0x0502, r24
    12b4:	89 e0       	ldi	r24, 0x09	; 9
    12b6:	80 93 01 05 	sts	0x0501, r24
			break;
    12ba:	18 c0       	rjmp	.+48     	; 0x12ec <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    12c2:	8a e0       	ldi	r24, 0x0A	; 10
    12c4:	80 93 0e 05 	sts	0x050E, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    12c8:	e8 d8       	rcall	.-3632   	; 0x49a <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    12ca:	10 c0       	rjmp	.+32     	; 0x12ec <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    12cc:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    12ce:	84 e0       	ldi	r24, 0x04	; 4
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    12d2:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    12d4:	90 91 0e 05 	lds	r25, 0x050E
    12d8:	91 30       	cpi	r25, 0x01	; 1
    12da:	41 f0       	breq	.+16     	; 0x12ec <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    12dc:	58 d9       	rcall	.-3408   	; 0x58e <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    12de:	80 91 dd 00 	lds	r24, 0x00DD
    12e2:	81 60       	ori	r24, 0x01	; 1
    12e4:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    12e8:	d2 d8       	rcall	.-3676   	; 0x48e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    12ea:	7d d1       	rcall	.+762    	; 0x15e6 <USB_ResetInterface>
	}
}
    12ec:	28 96       	adiw	r28, 0x08	; 8
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	08 95       	ret

00001302 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1302:	8f 92       	push	r8
    1304:	9f 92       	push	r9
    1306:	bf 92       	push	r11
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	0f 92       	push	r0
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	e8 2e       	mov	r14, r24
    1320:	4b 01       	movw	r8, r22
    1322:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1324:	80 91 aa 00 	lds	r24, 0x00AA
    1328:	8f 7c       	andi	r24, 0xCF	; 207
    132a:	80 61       	ori	r24, 0x10	; 16
    132c:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1330:	99 83       	std	Y+1, r25	; 0x01
    1332:	12 d1       	rcall	.+548    	; 0x1558 <Pipe_WaitUntilReady>
    1334:	b8 2e       	mov	r11, r24
    1336:	99 81       	ldd	r25, Y+1	; 0x01
    1338:	88 23       	and	r24, r24
    133a:	c1 f5       	brne	.+112    	; 0x13ac <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    133c:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    133e:	01 15       	cp	r16, r1
    1340:	11 05       	cpc	r17, r1
    1342:	39 f0       	breq	.+14     	; 0x1352 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    1344:	f8 01       	movw	r30, r16
    1346:	20 81       	ld	r18, Z
    1348:	31 81       	ldd	r19, Z+1	; 0x01
    134a:	82 1a       	sub	r8, r18
    134c:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    134e:	e2 0e       	add	r14, r18
    1350:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1352:	cc 24       	eor	r12, r12
    1354:	dd 24       	eor	r13, r13
    1356:	25 c0       	rjmp	.+74     	; 0x13a2 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1358:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    135c:	85 fd       	sbrc	r24, 5
    135e:	16 c0       	rjmp	.+44     	; 0x138c <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1360:	80 91 a6 00 	lds	r24, 0x00A6
    1364:	8e 77       	andi	r24, 0x7E	; 126
    1366:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    136a:	01 15       	cp	r16, r1
    136c:	11 05       	cpc	r17, r1
    136e:	51 f0       	breq	.+20     	; 0x1384 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    1370:	f8 01       	movw	r30, r16
    1372:	80 81       	ld	r24, Z
    1374:	91 81       	ldd	r25, Z+1	; 0x01
    1376:	8c 0d       	add	r24, r12
    1378:	9d 1d       	adc	r25, r13
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    137e:	44 e0       	ldi	r20, 0x04	; 4
    1380:	b4 2e       	mov	r11, r20
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1384:	e9 d0       	rcall	.+466    	; 0x1558 <Pipe_WaitUntilReady>
    1386:	88 23       	and	r24, r24
    1388:	61 f0       	breq	.+24     	; 0x13a2 <Pipe_Read_Stream_LE+0xa0>
    138a:	0f c0       	rjmp	.+30     	; 0x13aa <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    138c:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1390:	f7 01       	movw	r30, r14
    1392:	81 93       	st	Z+, r24
    1394:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1396:	08 94       	sec
    1398:	81 08       	sbc	r8, r1
    139a:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    139c:	08 94       	sec
    139e:	c1 1c       	adc	r12, r1
    13a0:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    13a2:	81 14       	cp	r8, r1
    13a4:	91 04       	cpc	r9, r1
    13a6:	c1 f6       	brne	.-80     	; 0x1358 <Pipe_Read_Stream_LE+0x56>
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    13aa:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    13ac:	8b 2d       	mov	r24, r11
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	df 90       	pop	r13
    13be:	cf 90       	pop	r12
    13c0:	bf 90       	pop	r11
    13c2:	9f 90       	pop	r9
    13c4:	8f 90       	pop	r8
    13c6:	08 95       	ret

000013c8 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    13c8:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    13ca:	58 2f       	mov	r21, r24
    13cc:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    13ce:	87 ff       	sbrs	r24, 7
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <Pipe_ConfigurePipe+0xe>
    13d2:	80 e1       	ldi	r24, 0x10	; 16
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <Pipe_ConfigurePipe+0x10>
    13d6:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    13d8:	57 30       	cpi	r21, 0x07	; 7
    13da:	08 f0       	brcs	.+2      	; 0x13de <Pipe_ConfigurePipe+0x16>
    13dc:	59 c0       	rjmp	.+178    	; 0x1490 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    13de:	66 23       	and	r22, r22
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    13e2:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    13e4:	4f 70       	andi	r20, 0x0F	; 15
    13e6:	62 95       	swap	r22
    13e8:	66 0f       	add	r22, r22
    13ea:	66 0f       	add	r22, r22
    13ec:	60 7c       	andi	r22, 0xC0	; 192
    13ee:	64 2b       	or	r22, r20
    13f0:	68 2b       	or	r22, r24
    13f2:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    13f4:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13f6:	84 2f       	mov	r24, r20
    13f8:	8f 70       	andi	r24, 0x0F	; 15
    13fa:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    13fe:	45 17       	cp	r20, r21
    1400:	a1 f4       	brne	.+40     	; 0x142a <Pipe_ConfigurePipe+0x62>
    1402:	88 e0       	ldi	r24, 0x08	; 8
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	03 c0       	rjmp	.+6      	; 0x1410 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    140a:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1410:	82 17       	cp	r24, r18
    1412:	93 07       	cpc	r25, r19
    1414:	10 f4       	brcc	.+4      	; 0x141a <Pipe_ConfigurePipe+0x52>
    1416:	75 30       	cpi	r23, 0x05	; 5
    1418:	c1 f7       	brne	.-16     	; 0x140a <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    141a:	87 2f       	mov	r24, r23
    141c:	82 95       	swap	r24
    141e:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1420:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1422:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    1424:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    1426:	e0 e0       	ldi	r30, 0x00	; 0
    1428:	08 c0       	rjmp	.+16     	; 0x143a <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    142a:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    142e:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    1432:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    1436:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    143a:	81 ff       	sbrs	r24, 1
    143c:	20 c0       	rjmp	.+64     	; 0x147e <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    143e:	90 91 a9 00 	lds	r25, 0x00A9
    1442:	9e 7f       	andi	r25, 0xFE	; 254
    1444:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1448:	90 91 ab 00 	lds	r25, 0x00AB
    144c:	9d 7f       	andi	r25, 0xFD	; 253
    144e:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    1452:	90 91 a9 00 	lds	r25, 0x00A9
    1456:	91 60       	ori	r25, 0x01	; 1
    1458:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    145c:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    1460:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    1464:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    1468:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    146c:	80 91 a9 00 	lds	r24, 0x00A9
    1470:	80 62       	ori	r24, 0x20	; 32
    1472:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1476:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    147a:	87 ff       	sbrs	r24, 7
    147c:	09 c0       	rjmp	.+18     	; 0x1490 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    147e:	4f 5f       	subi	r20, 0xFF	; 255
    1480:	47 30       	cpi	r20, 0x07	; 7
    1482:	09 f0       	breq	.+2      	; 0x1486 <Pipe_ConfigurePipe+0xbe>
    1484:	b8 cf       	rjmp	.-144    	; 0x13f6 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1486:	5f 70       	andi	r21, 0x0F	; 15
    1488:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    1490:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1492:	0f 91       	pop	r16
    1494:	08 95       	ret

00001496 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
    1496:	ef 92       	push	r14
    1498:	ff 92       	push	r15
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
    14a4:	e8 2e       	mov	r14, r24
    14a6:	e7 01       	movw	r28, r14
    14a8:	7e 01       	movw	r14, r28
    14aa:	f9 2e       	mov	r15, r25
    14ac:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    14ae:	ff 24       	eor	r15, r15
    14b0:	0d c0       	rjmp	.+26     	; 0x14cc <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
    14b2:	88 81       	ld	r24, Y
    14b4:	88 23       	and	r24, r24
    14b6:	41 f0       	breq	.+16     	; 0x14c8 <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
    14b8:	29 81       	ldd	r18, Y+1	; 0x01
    14ba:	3a 81       	ldd	r19, Y+2	; 0x02
    14bc:	6c 81       	ldd	r22, Y+4	; 0x04
    14be:	4b 81       	ldd	r20, Y+3	; 0x03
    14c0:	0d 81       	ldd	r16, Y+5	; 0x05
    14c2:	82 df       	rcall	.-252    	; 0x13c8 <Pipe_ConfigurePipe>
    14c4:	88 23       	and	r24, r24
    14c6:	31 f0       	breq	.+12     	; 0x14d4 <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    14c8:	f3 94       	inc	r15
    14ca:	26 96       	adiw	r28, 0x06	; 6
    14cc:	f1 16       	cp	r15, r17
    14ce:	88 f3       	brcs	.-30     	; 0x14b2 <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
    14d4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	08 95       	ret

000014e4 <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    14e4:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	98 2f       	mov	r25, r24
    14ec:	9f 70       	andi	r25, 0x0F	; 15
    14ee:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    14f2:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    14f6:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    14fa:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    14fe:	90 91 a9 00 	lds	r25, 0x00A9
    1502:	9e 7f       	andi	r25, 0xFE	; 254
    1504:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1508:	8f 5f       	subi	r24, 0xFF	; 255
    150a:	87 30       	cpi	r24, 0x07	; 7
    150c:	71 f7       	brne	.-36     	; 0x14ea <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    150e:	08 95       	ret

00001510 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1510:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1514:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1518:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    151a:	29 2f       	mov	r18, r25
    151c:	2f 70       	andi	r18, 0x0F	; 15
    151e:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1522:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    1526:	27 ff       	sbrs	r18, 7
    1528:	0c c0       	rjmp	.+24     	; 0x1542 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    152a:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    152e:	53 2f       	mov	r21, r19
    1530:	5f 70       	andi	r21, 0x0F	; 15
    1532:	30 ff       	sbrs	r19, 0
    1534:	02 c0       	rjmp	.+4      	; 0x153a <Pipe_IsEndpointBound+0x2a>
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	01 c0       	rjmp	.+2      	; 0x153c <Pipe_IsEndpointBound+0x2c>
    153a:	20 e8       	ldi	r18, 0x80	; 128
    153c:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    153e:	28 17       	cp	r18, r24
    1540:	49 f0       	breq	.+18     	; 0x1554 <Pipe_IsEndpointBound+0x44>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1542:	9f 5f       	subi	r25, 0xFF	; 255
    1544:	97 30       	cpi	r25, 0x07	; 7
    1546:	49 f7       	brne	.-46     	; 0x151a <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1548:	84 2f       	mov	r24, r20
    154a:	8f 70       	andi	r24, 0x0F	; 15
    154c:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    1554:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    1556:	08 95       	ret

00001558 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1558:	80 91 a2 00 	lds	r24, 0x00A2
    155c:	90 91 a3 00 	lds	r25, 0x00A3

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    1560:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1562:	20 91 aa 00 	lds	r18, 0x00AA
    1566:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1568:	20 31       	cpi	r18, 0x10	; 16
    156a:	29 f4       	brne	.+10     	; 0x1576 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    156c:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    1570:	20 ff       	sbrs	r18, 0
    1572:	05 c0       	rjmp	.+10     	; 0x157e <Pipe_WaitUntilReady+0x26>
    1574:	18 c0       	rjmp	.+48     	; 0x15a6 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1576:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    157a:	22 fd       	sbrc	r18, 2
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    157e:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1582:	21 fd       	sbrc	r18, 1
    1584:	12 c0       	rjmp	.+36     	; 0x15aa <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1586:	20 91 0e 05 	lds	r18, 0x050E
    158a:	21 30       	cpi	r18, 0x01	; 1
    158c:	81 f0       	breq	.+32     	; 0x15ae <Pipe_WaitUntilReady+0x56>
    158e:	20 91 a2 00 	lds	r18, 0x00A2
    1592:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1596:	28 17       	cp	r18, r24
    1598:	39 07       	cpc	r19, r25
    159a:	19 f3       	breq	.-58     	; 0x1562 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    159c:	44 23       	and	r20, r20
    159e:	49 f0       	breq	.+18     	; 0x15b2 <Pipe_WaitUntilReady+0x5a>
    15a0:	41 50       	subi	r20, 0x01	; 1
    15a2:	c9 01       	movw	r24, r18
    15a4:	de cf       	rjmp	.-68     	; 0x1562 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    15b2:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    15b4:	08 95       	ret

000015b6 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    15b6:	75 d0       	rcall	.+234    	; 0x16a2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    15b8:	7c d0       	rcall	.+248    	; 0x16b2 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    15ba:	e0 ee       	ldi	r30, 0xE0	; 224
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	81 60       	ori	r24, 0x01	; 1
    15c2:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    15c4:	e8 ed       	ldi	r30, 0xD8	; 216
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 77       	andi	r24, 0x7F	; 127
    15cc:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    15ce:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    15d0:	a7 ed       	ldi	r26, 0xD7	; 215
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	8c 91       	ld	r24, X
    15d6:	8e 7f       	andi	r24, 0xFE	; 254
    15d8:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    15da:	80 81       	ld	r24, Z
    15dc:	8f 7e       	andi	r24, 0xEF	; 239
    15de:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    15e0:	10 92 05 05 	sts	0x0505, r1
}
    15e4:	08 95       	ret

000015e6 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    15e6:	5d d0       	rcall	.+186    	; 0x16a2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    15e8:	64 d0       	rcall	.+200    	; 0x16b2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    15ea:	80 91 d8 00 	lds	r24, 0x00D8
    15ee:	8f 77       	andi	r24, 0x7F	; 127
    15f0:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    15f4:	80 91 d8 00 	lds	r24, 0x00D8
    15f8:	80 68       	ori	r24, 0x80	; 128
    15fa:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    15fe:	80 91 d8 00 	lds	r24, 0x00D8
    1602:	8f 7d       	andi	r24, 0xDF	; 223
    1604:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1608:	80 91 d7 00 	lds	r24, 0x00D7
    160c:	8f 77       	andi	r24, 0x7F	; 127
    160e:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1612:	8c e0       	ldi	r24, 0x0C	; 12
    1614:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1616:	8e e0       	ldi	r24, 0x0E	; 14
    1618:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    161a:	09 b4       	in	r0, 0x29	; 41
    161c:	00 fe       	sbrs	r0, 0
    161e:	fd cf       	rjmp	.-6      	; 0x161a <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	80 93 0e 05 	sts	0x050E, r24
	USB_Host_ConfigurationNumber = 0;
    1626:	10 92 04 05 	sts	0x0504, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    162a:	80 e4       	ldi	r24, 0x40	; 64
    162c:	80 93 27 01 	sts	0x0127, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1630:	80 91 d8 00 	lds	r24, 0x00D8
    1634:	80 64       	ori	r24, 0x40	; 64
    1636:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    163a:	80 91 dd 00 	lds	r24, 0x00DD
    163e:	81 60       	ori	r24, 0x01	; 1
    1640:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1644:	80 91 dd 00 	lds	r24, 0x00DD
    1648:	84 60       	ori	r24, 0x04	; 4
    164a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    164e:	80 91 d7 00 	lds	r24, 0x00D7
    1652:	8f 7e       	andi	r24, 0xEF	; 239
    1654:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1658:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    165a:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    165c:	80 91 de 00 	lds	r24, 0x00DE
    1660:	81 60       	ori	r24, 0x01	; 1
    1662:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1666:	80 91 de 00 	lds	r24, 0x00DE
    166a:	84 60       	ori	r24, 0x04	; 4
    166c:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1670:	80 91 e0 00 	lds	r24, 0x00E0
    1674:	8e 7f       	andi	r24, 0xFE	; 254
    1676:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    167a:	80 91 d8 00 	lds	r24, 0x00D8
    167e:	80 61       	ori	r24, 0x10	; 16
    1680:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1684:	08 95       	ret

00001686 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1686:	e8 ed       	ldi	r30, 0xD8	; 216
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	8f 7e       	andi	r24, 0xEF	; 239
    168e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1690:	e7 ed       	ldi	r30, 0xD7	; 215
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	81 60       	ori	r24, 0x01	; 1
    1698:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	80 93 05 05 	sts	0x0505, r24

	USB_ResetInterface();
}
    16a0:	a2 cf       	rjmp	.-188    	; 0x15e6 <USB_ResetInterface>

000016a2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    16a2:	e8 ed       	ldi	r30, 0xD8	; 216
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	8c 7f       	andi	r24, 0xFC	; 252
    16aa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    16ac:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    16b0:	08 95       	ret

000016b2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    16b2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    16b6:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    16ba:	08 95       	ret

000016bc <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    16bc:	1f 92       	push	r1
    16be:	0f 92       	push	r0
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	0f 92       	push	r0
    16c4:	0b b6       	in	r0, 0x3b	; 59
    16c6:	0f 92       	push	r0
    16c8:	11 24       	eor	r1, r1
    16ca:	2f 93       	push	r18
    16cc:	3f 93       	push	r19
    16ce:	4f 93       	push	r20
    16d0:	5f 93       	push	r21
    16d2:	6f 93       	push	r22
    16d4:	7f 93       	push	r23
    16d6:	8f 93       	push	r24
    16d8:	9f 93       	push	r25
    16da:	af 93       	push	r26
    16dc:	bf 93       	push	r27
    16de:	ef 93       	push	r30
    16e0:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    16e2:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    16e6:	85 ff       	sbrs	r24, 5
    16e8:	0a c0       	rjmp	.+20     	; 0x16fe <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    16ea:	80 91 a0 00 	lds	r24, 0x00A0
    16ee:	85 ff       	sbrs	r24, 5
    16f0:	06 c0       	rjmp	.+12     	; 0x16fe <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    16f2:	80 91 9f 00 	lds	r24, 0x009F
    16f6:	8f 7d       	andi	r24, 0xDF	; 223
    16f8:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    16fc:	12 d1       	rcall	.+548    	; 0x1922 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    16fe:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1702:	81 ff       	sbrs	r24, 1
    1704:	16 c0       	rjmp	.+44     	; 0x1732 <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1706:	80 91 a0 00 	lds	r24, 0x00A0
    170a:	81 ff       	sbrs	r24, 1
    170c:	12 c0       	rjmp	.+36     	; 0x1732 <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    170e:	80 91 9f 00 	lds	r24, 0x009F
    1712:	8d 7f       	andi	r24, 0xFD	; 253
    1714:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1718:	80 91 9f 00 	lds	r24, 0x009F
    171c:	8e 7f       	andi	r24, 0xFE	; 254
    171e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1722:	80 91 a0 00 	lds	r24, 0x00A0
    1726:	8d 7f       	andi	r24, 0xFD	; 253
    1728:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    172c:	0e 94 47 02 	call	0x48e	; 0x48e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1730:	5a df       	rcall	.-332    	; 0x15e6 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1732:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1736:	81 ff       	sbrs	r24, 1
    1738:	17 c0       	rjmp	.+46     	; 0x1768 <__vector_10+0xac>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    173a:	80 91 de 00 	lds	r24, 0x00DE
    173e:	81 ff       	sbrs	r24, 1
    1740:	13 c0       	rjmp	.+38     	; 0x1768 <__vector_10+0xac>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1742:	80 91 df 00 	lds	r24, 0x00DF
    1746:	8d 7f       	andi	r24, 0xFD	; 253
    1748:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    174c:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    174e:	80 91 dd 00 	lds	r24, 0x00DD
    1752:	81 60       	ori	r24, 0x01	; 1
    1754:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	0e 94 a6 02 	call	0x54c	; 0x54c <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    175e:	0e 94 47 02 	call	0x48e	; 0x48e <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	80 93 0e 05 	sts	0x050E, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1768:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    176c:	80 ff       	sbrs	r24, 0
    176e:	18 c0       	rjmp	.+48     	; 0x17a0 <__vector_10+0xe4>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1770:	80 91 de 00 	lds	r24, 0x00DE
    1774:	80 ff       	sbrs	r24, 0
    1776:	14 c0       	rjmp	.+40     	; 0x17a0 <__vector_10+0xe4>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1778:	80 91 df 00 	lds	r24, 0x00DF
    177c:	8e 7f       	andi	r24, 0xFE	; 254
    177e:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    1782:	80 91 de 00 	lds	r24, 0x00DE
    1786:	8e 7f       	andi	r24, 0xFE	; 254
    1788:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    178c:	0e 94 41 02 	call	0x482	; 0x482 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1790:	80 91 a0 00 	lds	r24, 0x00A0
    1794:	82 60       	ori	r24, 0x02	; 2
    1796:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    179a:	82 e0       	ldi	r24, 0x02	; 2
    179c:	80 93 0e 05 	sts	0x050E, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    17a0:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    17a4:	82 ff       	sbrs	r24, 2
    17a6:	10 c0       	rjmp	.+32     	; 0x17c8 <__vector_10+0x10c>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    17a8:	80 91 de 00 	lds	r24, 0x00DE
    17ac:	82 ff       	sbrs	r24, 2
    17ae:	0c c0       	rjmp	.+24     	; 0x17c8 <__vector_10+0x10c>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    17b0:	80 91 df 00 	lds	r24, 0x00DF
    17b4:	8b 7f       	andi	r24, 0xFB	; 251
    17b6:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	0e 94 c7 02 	call	0x58e	; 0x58e <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    17c2:	0e 94 47 02 	call	0x48e	; 0x48e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    17c6:	0f df       	rcall	.-482    	; 0x15e6 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    17c8:	ff 91       	pop	r31
    17ca:	ef 91       	pop	r30
    17cc:	bf 91       	pop	r27
    17ce:	af 91       	pop	r26
    17d0:	9f 91       	pop	r25
    17d2:	8f 91       	pop	r24
    17d4:	7f 91       	pop	r23
    17d6:	6f 91       	pop	r22
    17d8:	5f 91       	pop	r21
    17da:	4f 91       	pop	r20
    17dc:	3f 91       	pop	r19
    17de:	2f 91       	pop	r18
    17e0:	0f 90       	pop	r0
    17e2:	0b be       	out	0x3b, r0	; 59
    17e4:	0f 90       	pop	r0
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	0f 90       	pop	r0
    17ea:	1f 90       	pop	r1
    17ec:	18 95       	reti

000017ee <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    17ee:	cf 92       	push	r12
    17f0:	df 92       	push	r13
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	29 97       	sbiw	r28, 0x09	; 9
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	6b 01       	movw	r12, r22
    1810:	8a 01       	movw	r16, r20
    1812:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1814:	90 e8       	ldi	r25, 0x80	; 128
    1816:	90 93 06 05 	sts	0x0506, r25
    181a:	96 e0       	ldi	r25, 0x06	; 6
    181c:	90 93 07 05 	sts	0x0507, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1826:	90 93 09 05 	sts	0x0509, r25
    182a:	80 93 08 05 	sts	0x0508, r24
    182e:	10 92 0b 05 	sts	0x050B, r1
    1832:	10 92 0a 05 	sts	0x050A, r1
    1836:	89 e0       	ldi	r24, 0x09	; 9
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	90 93 0d 05 	sts	0x050D, r25
    183e:	80 93 0c 05 	sts	0x050C, r24
    1842:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1846:	ce 01       	movw	r24, r28
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	95 d0       	rcall	.+298    	; 0x1976 <USB_Host_SendControlRequest>
    184c:	88 23       	and	r24, r24
    184e:	b9 f4       	brne	.+46     	; 0x187e <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	f6 01       	movw	r30, r12
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    185a:	e8 16       	cp	r14, r24
    185c:	f9 06       	cpc	r15, r25
    185e:	70 f0       	brcs	.+28     	; 0x187c <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1860:	90 93 0d 05 	sts	0x050D, r25
    1864:	80 93 0c 05 	sts	0x050C, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1868:	c8 01       	movw	r24, r16
    186a:	85 d0       	rcall	.+266    	; 0x1976 <USB_Host_SendControlRequest>
    186c:	88 23       	and	r24, r24
    186e:	39 f4       	brne	.+14     	; 0x187e <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1870:	f8 01       	movw	r30, r16
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	92 30       	cpi	r25, 0x02	; 2
    1876:	19 f0       	breq	.+6      	; 0x187e <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1878:	86 e0       	ldi	r24, 0x06	; 6
    187a:	01 c0       	rjmp	.+2      	; 0x187e <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    187c:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    187e:	29 96       	adiw	r28, 0x09	; 9
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	ff 90       	pop	r15
    1894:	ef 90       	pop	r14
    1896:	df 90       	pop	r13
    1898:	cf 90       	pop	r12
    189a:	08 95       	ret

0000189c <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    189c:	af 92       	push	r10
    189e:	bf 92       	push	r11
    18a0:	cf 92       	push	r12
    18a2:	df 92       	push	r13
    18a4:	ef 92       	push	r14
    18a6:	ff 92       	push	r15
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	8c 01       	movw	r16, r24
    18b2:	eb 01       	movw	r28, r22
    18b4:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    18b6:	23 c0       	rjmp	.+70     	; 0x18fe <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    18b8:	e8 81       	ld	r30, Y
    18ba:	f9 81       	ldd	r31, Y+1	; 0x01
    18bc:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    18be:	20 81       	ld	r18, Z
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	c7 01       	movw	r24, r14
    18c4:	2e 15       	cp	r18, r14
    18c6:	3f 05       	cpc	r19, r15
    18c8:	08 f4       	brcc	.+2      	; 0x18cc <USB_GetNextDescriptorComp+0x30>
    18ca:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    18cc:	e8 0f       	add	r30, r24
    18ce:	f9 1f       	adc	r31, r25
    18d0:	f9 83       	std	Y+1, r31	; 0x01
    18d2:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    18d4:	f8 01       	movw	r30, r16
    18d6:	20 81       	ld	r18, Z
    18d8:	31 81       	ldd	r19, Z+1	; 0x01
    18da:	28 1b       	sub	r18, r24
    18dc:	39 0b       	sbc	r19, r25
    18de:	31 83       	std	Z+1, r19	; 0x01
    18e0:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    18e2:	88 81       	ld	r24, Y
    18e4:	99 81       	ldd	r25, Y+1	; 0x01
    18e6:	f6 01       	movw	r30, r12
    18e8:	09 95       	icall
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	41 f0       	breq	.+16     	; 0x18fe <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	69 f4       	brne	.+26     	; 0x190c <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    18f2:	a8 82       	st	Y, r10
    18f4:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    18f6:	f8 01       	movw	r30, r16
    18f8:	f1 82       	std	Z+1, r15	; 0x01
    18fa:	e0 82       	st	Z, r14
    18fc:	07 c0       	rjmp	.+14     	; 0x190c <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    18fe:	f8 01       	movw	r30, r16
    1900:	e0 80       	ld	r14, Z
    1902:	f1 80       	ldd	r15, Z+1	; 0x01
    1904:	e1 14       	cp	r14, r1
    1906:	f1 04       	cpc	r15, r1
    1908:	b9 f6       	brne	.-82     	; 0x18b8 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    190a:	82 e0       	ldi	r24, 0x02	; 2
}
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	ff 90       	pop	r15
    1916:	ef 90       	pop	r14
    1918:	df 90       	pop	r13
    191a:	cf 90       	pop	r12
    191c:	bf 90       	pop	r11
    191e:	af 90       	pop	r10
    1920:	08 95       	ret

00001922 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1922:	08 95       	ret

00001924 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    192c:	c8 ee       	ldi	r28, 0xE8	; 232
    192e:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1930:	07 c0       	rjmp	.+14     	; 0x1940 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	68 db       	rcall	.-2352   	; 0x1006 <USB_Host_WaitMS>
    1936:	88 23       	and	r24, r24
    1938:	d1 f4       	brne	.+52     	; 0x196e <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    193a:	20 97       	sbiw	r28, 0x00	; 0
    193c:	b9 f0       	breq	.+46     	; 0x196c <USB_Host_WaitForIOS+0x48>
    193e:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1940:	11 23       	and	r17, r17
    1942:	29 f4       	brne	.+10     	; 0x194e <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1944:	80 91 a6 00 	lds	r24, 0x00A6
    1948:	83 ff       	sbrs	r24, 3
    194a:	f3 cf       	rjmp	.-26     	; 0x1932 <USB_Host_WaitForIOS+0xe>
    194c:	0d c0       	rjmp	.+26     	; 0x1968 <USB_Host_WaitForIOS+0x44>
    194e:	11 30       	cpi	r17, 0x01	; 1
    1950:	29 f4       	brne	.+10     	; 0x195c <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1952:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1956:	80 ff       	sbrs	r24, 0
    1958:	ec cf       	rjmp	.-40     	; 0x1932 <USB_Host_WaitForIOS+0xe>
    195a:	06 c0       	rjmp	.+12     	; 0x1968 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    195c:	12 30       	cpi	r17, 0x02	; 2
    195e:	49 f7       	brne	.-46     	; 0x1932 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1960:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1964:	82 ff       	sbrs	r24, 2
    1966:	e5 cf       	rjmp	.-54     	; 0x1932 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	01 c0       	rjmp	.+2      	; 0x196e <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    196c:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	1f 91       	pop	r17
    1974:	08 95       	ret

00001976 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1976:	ef 92       	push	r14
    1978:	ff 92       	push	r15
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1984:	e0 90 9e 00 	lds	r14, 0x009E
    1988:	ff 24       	eor	r15, r15
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	e8 22       	and	r14, r24
    198e:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1990:	c0 91 0c 05 	lds	r28, 0x050C
    1994:	d0 91 0d 05 	lds	r29, 0x050D
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1998:	80 91 9e 00 	lds	r24, 0x009E
    199c:	81 60       	ori	r24, 0x01	; 1
    199e:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	30 db       	rcall	.-2464   	; 0x1006 <USB_Host_WaitMS>
    19a6:	88 23       	and	r24, r24
    19a8:	09 f0       	breq	.+2      	; 0x19ac <USB_Host_SendControlRequest+0x36>
    19aa:	cb c0       	rjmp	.+406    	; 0x1b42 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19ac:	80 91 aa 00 	lds	r24, 0x00AA
    19b0:	8f 7c       	andi	r24, 0xCF	; 207
    19b2:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    19b6:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    19ba:	80 91 a6 00 	lds	r24, 0x00A6
    19be:	8f 7e       	andi	r24, 0xEF	; 239
    19c0:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19c4:	80 91 a9 00 	lds	r24, 0x00A9
    19c8:	8f 7b       	andi	r24, 0xBF	; 191
    19ca:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    19ce:	e6 e0       	ldi	r30, 0x06	; 6
    19d0:	f5 e0       	ldi	r31, 0x05	; 5

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    19d2:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    19d4:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    19d8:	85 e0       	ldi	r24, 0x05	; 5
    19da:	ee 30       	cpi	r30, 0x0E	; 14
    19dc:	f8 07       	cpc	r31, r24
    19de:	c9 f7       	brne	.-14     	; 0x19d2 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    19e0:	80 91 a6 00 	lds	r24, 0x00A6
    19e4:	87 77       	andi	r24, 0x77	; 119
    19e6:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	9b df       	rcall	.-202    	; 0x1924 <USB_Host_WaitForIOS>
    19ee:	88 23       	and	r24, r24
    19f0:	09 f0       	breq	.+2      	; 0x19f4 <USB_Host_SendControlRequest+0x7e>
    19f2:	a7 c0       	rjmp	.+334    	; 0x1b42 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19f4:	80 91 a9 00 	lds	r24, 0x00A9
    19f8:	80 64       	ori	r24, 0x40	; 64
    19fa:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	02 db       	rcall	.-2556   	; 0x1006 <USB_Host_WaitMS>
    1a02:	88 23       	and	r24, r24
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <USB_Host_SendControlRequest+0x92>
    1a06:	9d c0       	rjmp	.+314    	; 0x1b42 <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1a08:	80 91 06 05 	lds	r24, 0x0506
    1a0c:	87 ff       	sbrs	r24, 7
    1a0e:	4f c0       	rjmp	.+158    	; 0x1aae <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a10:	80 91 aa 00 	lds	r24, 0x00AA
    1a14:	8f 7c       	andi	r24, 0xCF	; 207
    1a16:	80 61       	ori	r24, 0x10	; 16
    1a18:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1a1c:	01 15       	cp	r16, r1
    1a1e:	11 05       	cpc	r17, r1
    1a20:	61 f5       	brne	.+88     	; 0x1a7a <USB_Host_SendControlRequest+0x104>
    1a22:	2d c0       	rjmp	.+90     	; 0x1a7e <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a24:	80 91 a9 00 	lds	r24, 0x00A9
    1a28:	8f 7b       	andi	r24, 0xBF	; 191
    1a2a:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	79 df       	rcall	.-270    	; 0x1924 <USB_Host_WaitForIOS>
    1a32:	88 23       	and	r24, r24
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <USB_Host_SendControlRequest+0xc2>
    1a36:	85 c0       	rjmp	.+266    	; 0x1b42 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1a38:	80 91 f6 00 	lds	r24, 0x00F6
    1a3c:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	49 f4       	brne	.+18     	; 0x1a56 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1a44:	c0 e0       	ldi	r28, 0x00	; 0
    1a46:	d0 e0       	ldi	r29, 0x00	; 0
    1a48:	06 c0       	rjmp	.+12     	; 0x1a56 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1a4a:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1a4e:	f8 01       	movw	r30, r16
    1a50:	81 93       	st	Z+, r24
    1a52:	8f 01       	movw	r16, r30
					DataLen--;
    1a54:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1a56:	80 91 f6 00 	lds	r24, 0x00F6
    1a5a:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	11 f0       	breq	.+4      	; 0x1a66 <USB_Host_SendControlRequest+0xf0>
    1a62:	20 97       	sbiw	r28, 0x00	; 0
    1a64:	91 f7       	brne	.-28     	; 0x1a4a <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a66:	80 91 a9 00 	lds	r24, 0x00A9
    1a6a:	80 64       	ori	r24, 0x40	; 64
    1a6c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1a70:	80 91 a6 00 	lds	r24, 0x00A6
    1a74:	8e 77       	andi	r24, 0x7E	; 126
    1a76:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1a7a:	20 97       	sbiw	r28, 0x00	; 0
    1a7c:	99 f6       	brne	.-90     	; 0x1a24 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a7e:	80 91 aa 00 	lds	r24, 0x00AA
    1a82:	8f 7c       	andi	r24, 0xCF	; 207
    1a84:	80 62       	ori	r24, 0x20	; 32
    1a86:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a8a:	80 91 a9 00 	lds	r24, 0x00A9
    1a8e:	8f 7b       	andi	r24, 0xBF	; 191
    1a90:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	46 df       	rcall	.-372    	; 0x1924 <USB_Host_WaitForIOS>
    1a98:	88 23       	and	r24, r24
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <USB_Host_SendControlRequest+0x128>
    1a9c:	52 c0       	rjmp	.+164    	; 0x1b42 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a9e:	80 91 a6 00 	lds	r24, 0x00A6
    1aa2:	8b 77       	andi	r24, 0x7B	; 123
    1aa4:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	3c df       	rcall	.-392    	; 0x1924 <USB_Host_WaitForIOS>
    1aac:	4a c0       	rjmp	.+148    	; 0x1b42 <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1aae:	01 15       	cp	r16, r1
    1ab0:	11 05       	cpc	r17, r1
    1ab2:	99 f1       	breq	.+102    	; 0x1b1a <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1ab4:	80 91 aa 00 	lds	r24, 0x00AA
    1ab8:	8f 7c       	andi	r24, 0xCF	; 207
    1aba:	80 62       	ori	r24, 0x20	; 32
    1abc:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1ac0:	80 91 a9 00 	lds	r24, 0x00A9
    1ac4:	8f 7b       	andi	r24, 0xBF	; 191
    1ac6:	80 93 a9 00 	sts	0x00A9, r24
    1aca:	1c c0       	rjmp	.+56     	; 0x1b04 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	2a df       	rcall	.-428    	; 0x1924 <USB_Host_WaitForIOS>
    1ad0:	88 23       	and	r24, r24
    1ad2:	b9 f5       	brne	.+110    	; 0x1b42 <USB_Host_SendControlRequest+0x1cc>
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	06 c0       	rjmp	.+12     	; 0x1ae4 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1ad8:	81 91       	ld	r24, Z+
    1ada:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1adc:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1ae0:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1ae2:	59 f0       	breq	.+22     	; 0x1afa <USB_Host_SendControlRequest+0x184>
    1ae4:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1ae6:	20 91 f6 00 	lds	r18, 0x00F6
    1aea:	30 91 f7 00 	lds	r19, 0x00F7
    1aee:	80 91 27 01 	lds	r24, 0x0127
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	28 17       	cp	r18, r24
    1af6:	39 07       	cpc	r19, r25
    1af8:	78 f3       	brcs	.-34     	; 0x1ad8 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1afa:	80 91 a6 00 	lds	r24, 0x00A6
    1afe:	8b 77       	andi	r24, 0x7B	; 123
    1b00:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1b04:	20 97       	sbiw	r28, 0x00	; 0
    1b06:	11 f7       	brne	.-60     	; 0x1acc <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	0c df       	rcall	.-488    	; 0x1924 <USB_Host_WaitForIOS>
    1b0c:	88 23       	and	r24, r24
    1b0e:	c9 f4       	brne	.+50     	; 0x1b42 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b10:	80 91 a9 00 	lds	r24, 0x00A9
    1b14:	80 64       	ori	r24, 0x40	; 64
    1b16:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b1a:	80 91 aa 00 	lds	r24, 0x00AA
    1b1e:	8f 7c       	andi	r24, 0xCF	; 207
    1b20:	80 61       	ori	r24, 0x10	; 16
    1b22:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b26:	80 91 a9 00 	lds	r24, 0x00A9
    1b2a:	8f 7b       	andi	r24, 0xBF	; 191
    1b2c:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	f8 de       	rcall	.-528    	; 0x1924 <USB_Host_WaitForIOS>
    1b34:	88 23       	and	r24, r24
    1b36:	29 f4       	brne	.+10     	; 0x1b42 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1b38:	90 91 a6 00 	lds	r25, 0x00A6
    1b3c:	9e 77       	andi	r25, 0x7E	; 126
    1b3e:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b42:	90 91 a9 00 	lds	r25, 0x00A9
    1b46:	90 64       	ori	r25, 0x40	; 64
    1b48:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1b4c:	e1 14       	cp	r14, r1
    1b4e:	f1 04       	cpc	r15, r1
    1b50:	29 f4       	brne	.+10     	; 0x1b5c <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1b52:	90 91 9e 00 	lds	r25, 0x009E
    1b56:	9e 7f       	andi	r25, 0xFE	; 254
    1b58:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1b62:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	1f 91       	pop	r17
    1b6c:	0f 91       	pop	r16
    1b6e:	ff 90       	pop	r15
    1b70:	ef 90       	pop	r14
    1b72:	08 95       	ret

00001b74 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1b74:	1f 93       	push	r17
    1b76:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1b78:	10 92 06 05 	sts	0x0506, r1
    1b7c:	89 e0       	ldi	r24, 0x09	; 9
    1b7e:	80 93 07 05 	sts	0x0507, r24
    1b82:	10 93 08 05 	sts	0x0508, r17
    1b86:	10 92 09 05 	sts	0x0509, r1
    1b8a:	10 92 0b 05 	sts	0x050B, r1
    1b8e:	10 92 0a 05 	sts	0x050A, r1
    1b92:	10 92 0d 05 	sts	0x050D, r1
    1b96:	10 92 0c 05 	sts	0x050C, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1b9a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	e9 de       	rcall	.-558    	; 0x1976 <USB_Host_SendControlRequest>
    1ba4:	88 23       	and	r24, r24
    1ba6:	49 f4       	brne	.+18     	; 0x1bba <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1ba8:	10 93 04 05 	sts	0x0504, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1bac:	11 23       	and	r17, r17
    1bae:	11 f0       	breq	.+4      	; 0x1bb4 <USB_Host_SetDeviceConfiguration+0x40>
    1bb0:	9b e0       	ldi	r25, 0x0B	; 11
    1bb2:	01 c0       	rjmp	.+2      	; 0x1bb6 <USB_Host_SetDeviceConfiguration+0x42>
    1bb4:	9a e0       	ldi	r25, 0x0A	; 10
    1bb6:	90 93 0e 05 	sts	0x050E, r25
	}

	return ErrorCode;
}
    1bba:	1f 91       	pop	r17
    1bbc:	08 95       	ret

00001bbe <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1bbe:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1bc0:	10 91 a7 00 	lds	r17, 0x00A7
    1bc4:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1bc6:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1bca:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1bce:	70 da       	rcall	.-2848   	; 0x10b0 <USB_Host_ProcessNextHostState>
    1bd0:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1bd4:	1f 91       	pop	r17
    1bd6:	08 95       	ret

00001bd8 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1bd8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1bda:	81 81       	ldd	r24, Z+1	; 0x01
    1bdc:	84 30       	cpi	r24, 0x04	; 4
    1bde:	19 f4       	brne	.+6      	; 0x1be6 <DCOMP_HID_Host_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1be0:	85 81       	ldd	r24, Z+5	; 0x05
    1be2:	83 30       	cpi	r24, 0x03	; 3
    1be4:	11 f0       	breq	.+4      	; 0x1bea <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1be6:	82 e0       	ldi	r24, 0x02	; 2
    1be8:	08 95       	ret
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
		  return DESCRIPTOR_SEARCH_Found;
    1bea:	80 e0       	ldi	r24, 0x00	; 0
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1bec:	08 95       	ret

00001bee <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1bee:	fc 01       	movw	r30, r24
    1bf0:	81 81       	ldd	r24, Z+1	; 0x01
    1bf2:	81 32       	cpi	r24, 0x21	; 33
    1bf4:	21 f0       	breq	.+8      	; 0x1bfe <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1bf6:	84 30       	cpi	r24, 0x04	; 4
    1bf8:	21 f4       	brne	.+8      	; 0x1c02 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    1c02:	82 e0       	ldi	r24, 0x02	; 2
}
    1c04:	08 95       	ret

00001c06 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    1c06:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1c08:	81 81       	ldd	r24, Z+1	; 0x01
    1c0a:	85 30       	cpi	r24, 0x05	; 5
    1c0c:	29 f4       	brne	.+10     	; 0x1c18 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	7f dc       	rcall	.-1794   	; 0x1510 <Pipe_IsEndpointBound>
    1c12:	88 23       	and	r24, r24
    1c14:	19 f4       	brne	.+6      	; 0x1c1c <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x16>
    1c16:	04 c0       	rjmp	.+8      	; 0x1c20 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1c18:	84 30       	cpi	r24, 0x04	; 4
    1c1a:	21 f0       	breq	.+8      	; 0x1c24 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1c1c:	82 e0       	ldi	r24, 0x02	; 2
    1c1e:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1c26:	08 95       	ret

00001c28 <HID_Host_ConfigurePipes>:
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1c28:	4f 92       	push	r4
    1c2a:	5f 92       	push	r5
    1c2c:	6f 92       	push	r6
    1c2e:	7f 92       	push	r7
    1c30:	8f 92       	push	r8
    1c32:	9f 92       	push	r9
    1c34:	af 92       	push	r10
    1c36:	bf 92       	push	r11
    1c38:	cf 92       	push	r12
    1c3a:	df 92       	push	r13
    1c3c:	ef 92       	push	r14
    1c3e:	ff 92       	push	r15
    1c40:	0f 93       	push	r16
    1c42:	1f 93       	push	r17
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <HID_Host_ConfigurePipes+0x22>
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <HID_Host_ConfigurePipes+0x24>
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	8c 01       	movw	r16, r24
    1c52:	7a 83       	std	Y+2, r23	; 0x02
    1c54:	69 83       	std	Y+1, r22	; 0x01
    1c56:	5c 83       	std	Y+4, r21	; 0x04
    1c58:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1c5a:	0f 96       	adiw	r24, 0x0f	; 15
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	88 e0       	ldi	r24, 0x08	; 8
    1c60:	df 01       	movw	r26, r30
    1c62:	1d 92       	st	X+, r1
    1c64:	8a 95       	dec	r24
    1c66:	e9 f7       	brne	.-6      	; 0x1c62 <HID_Host_ConfigurePipes+0x3a>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1c68:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c6c:	81 81       	ldd	r24, Z+1	; 0x01
    1c6e:	82 30       	cpi	r24, 0x02	; 2
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <HID_Host_ConfigurePipes+0x4c>
    1c72:	95 c0       	rjmp	.+298    	; 0x1d9e <HID_Host_ConfigurePipes+0x176>
    1c74:	44 24       	eor	r4, r4
    1c76:	55 24       	eor	r5, r5
    1c78:	aa 24       	eor	r10, r10
    1c7a:	bb 24       	eor	r11, r11
    1c7c:	ee 24       	eor	r14, r14
    1c7e:	ff 24       	eor	r15, r15
    1c80:	cc 24       	eor	r12, r12
    1c82:	dd 24       	eor	r13, r13
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1c84:	93 e0       	ldi	r25, 0x03	; 3
    1c86:	69 2e       	mov	r6, r25
    1c88:	71 2c       	mov	r7, r1
    1c8a:	6c 0e       	add	r6, r28
    1c8c:	7d 1e       	adc	r7, r29
    1c8e:	4e 01       	movw	r8, r28
    1c90:	08 94       	sec
    1c92:	81 1c       	adc	r8, r1
    1c94:	91 1c       	adc	r9, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1c96:	a1 14       	cp	r10, r1
    1c98:	b1 04       	cpc	r11, r1
    1c9a:	39 f0       	breq	.+14     	; 0x1caa <HID_Host_ConfigurePipes+0x82>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1c9c:	c4 01       	movw	r24, r8
    1c9e:	b3 01       	movw	r22, r6
    1ca0:	43 e0       	ldi	r20, 0x03	; 3
    1ca2:	5e e0       	ldi	r21, 0x0E	; 14
    1ca4:	fb dd       	rcall	.-1034   	; 0x189c <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1ca6:	88 23       	and	r24, r24
    1ca8:	21 f1       	breq	.+72     	; 0x1cf2 <HID_Host_ConfigurePipes+0xca>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1caa:	c1 14       	cp	r12, r1
    1cac:	d1 04       	cpc	r13, r1
    1cae:	79 f5       	brne	.+94     	; 0x1d0e <HID_Host_ConfigurePipes+0xe6>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1cb0:	c4 01       	movw	r24, r8
    1cb2:	b3 01       	movw	r22, r6
    1cb4:	4c ee       	ldi	r20, 0xEC	; 236
    1cb6:	5d e0       	ldi	r21, 0x0D	; 13
    1cb8:	f1 dd       	rcall	.-1054   	; 0x189c <USB_GetNextDescriptorComp>
    1cba:	88 23       	and	r24, r24
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <HID_Host_ConfigurePipes+0x98>
    1cbe:	71 c0       	rjmp	.+226    	; 0x1da2 <HID_Host_ConfigurePipes+0x17a>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1cc0:	ab 80       	ldd	r10, Y+3	; 0x03
    1cc2:	bc 80       	ldd	r11, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	84 85       	ldd	r24, Z+12	; 0x0c
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1cc8:	88 23       	and	r24, r24
    1cca:	31 f0       	breq	.+12     	; 0x1cd8 <HID_Host_ConfigurePipes+0xb0>
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1ccc:	d5 01       	movw	r26, r10
    1cce:	17 96       	adiw	r26, 0x07	; 7
    1cd0:	9c 91       	ld	r25, X
    1cd2:	17 97       	sbiw	r26, 0x07	; 7
    1cd4:	98 17       	cp	r25, r24
    1cd6:	61 f7       	brne	.-40     	; 0x1cb0 <HID_Host_ConfigurePipes+0x88>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1cd8:	c4 01       	movw	r24, r8
    1cda:	b3 01       	movw	r22, r6
    1cdc:	47 ef       	ldi	r20, 0xF7	; 247
    1cde:	5d e0       	ldi	r21, 0x0D	; 13
    1ce0:	dd dd       	rcall	.-1094   	; 0x189c <USB_GetNextDescriptorComp>
    1ce2:	88 23       	and	r24, r24
    1ce4:	09 f0       	breq	.+2      	; 0x1ce8 <HID_Host_ConfigurePipes+0xc0>
    1ce6:	5d c0       	rjmp	.+186    	; 0x1da2 <HID_Host_ConfigurePipes+0x17a>
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1ce8:	4b 80       	ldd	r4, Y+3	; 0x03
    1cea:	5c 80       	ldd	r5, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1cec:	ee 24       	eor	r14, r14
    1cee:	ff 24       	eor	r15, r15
    1cf0:	d2 cf       	rjmp	.-92     	; 0x1c96 <HID_Host_ConfigurePipes+0x6e>

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    1cf4:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	87 ff       	sbrs	r24, 7
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <HID_Host_ConfigurePipes+0xd8>
		  DataINEndpoint  = EndpointData;
    1cfc:	6f 01       	movw	r12, r30
    1cfe:	01 c0       	rjmp	.+2      	; 0x1d02 <HID_Host_ConfigurePipes+0xda>
		else
		  DataOUTEndpoint = EndpointData;
    1d00:	7f 01       	movw	r14, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1d02:	c1 14       	cp	r12, r1
    1d04:	d1 04       	cpc	r13, r1
    1d06:	39 f2       	breq	.-114    	; 0x1c96 <HID_Host_ConfigurePipes+0x6e>
    1d08:	e1 14       	cp	r14, r1
    1d0a:	f1 04       	cpc	r15, r1
    1d0c:	21 f2       	breq	.-120    	; 0x1c96 <HID_Host_ConfigurePipes+0x6e>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1d0e:	f6 01       	movw	r30, r12
    1d10:	84 81       	ldd	r24, Z+4	; 0x04
    1d12:	95 81       	ldd	r25, Z+5	; 0x05
    1d14:	d8 01       	movw	r26, r16
    1d16:	12 96       	adiw	r26, 0x02	; 2
    1d18:	9c 93       	st	X, r25
    1d1a:	8e 93       	st	-X, r24
    1d1c:	11 97       	sbiw	r26, 0x01	; 1
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1d1e:	82 81       	ldd	r24, Z+2	; 0x02
    1d20:	13 96       	adiw	r26, 0x03	; 3
    1d22:	8c 93       	st	X, r24
    1d24:	13 97       	sbiw	r26, 0x03	; 3
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    1d26:	83 e0       	ldi	r24, 0x03	; 3
    1d28:	c8 2e       	mov	r12, r24
    1d2a:	14 96       	adiw	r26, 0x04	; 4
    1d2c:	cc 92       	st	X, r12

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    1d2e:	c8 01       	movw	r24, r16
    1d30:	61 e0       	ldi	r22, 0x01	; 1
    1d32:	b1 db       	rcall	.-2206   	; 0x1496 <Pipe_ConfigurePipeTable>
    1d34:	88 23       	and	r24, r24
    1d36:	b9 f1       	breq	.+110    	; 0x1da6 <HID_Host_ConfigurePipes+0x17e>
	  return false;

	if (DataOUTEndpoint)
    1d38:	e1 14       	cp	r14, r1
    1d3a:	f1 04       	cpc	r15, r1
    1d3c:	a1 f0       	breq	.+40     	; 0x1d66 <HID_Host_ConfigurePipes+0x13e>
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1d3e:	f7 01       	movw	r30, r14
    1d40:	84 81       	ldd	r24, Z+4	; 0x04
    1d42:	95 81       	ldd	r25, Z+5	; 0x05
    1d44:	d8 01       	movw	r26, r16
    1d46:	18 96       	adiw	r26, 0x08	; 8
    1d48:	9c 93       	st	X, r25
    1d4a:	8e 93       	st	-X, r24
    1d4c:	17 97       	sbiw	r26, 0x07	; 7
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	19 96       	adiw	r26, 0x09	; 9
    1d52:	8c 93       	st	X, r24
    1d54:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    1d56:	1a 96       	adiw	r26, 0x0a	; 10
    1d58:	cc 92       	st	X, r12

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    1d5a:	c8 01       	movw	r24, r16
    1d5c:	06 96       	adiw	r24, 0x06	; 6
    1d5e:	61 e0       	ldi	r22, 0x01	; 1
    1d60:	9a db       	rcall	.-2252   	; 0x1496 <Pipe_ConfigurePipeTable>
    1d62:	88 23       	and	r24, r24
    1d64:	01 f1       	breq	.+64     	; 0x1da6 <HID_Host_ConfigurePipes+0x17e>
		  return false;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1d66:	f5 01       	movw	r30, r10
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	d8 01       	movw	r26, r16
    1d6c:	50 96       	adiw	r26, 0x10	; 16
    1d6e:	8c 93       	st	X, r24
    1d70:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1d72:	f2 01       	movw	r30, r4
    1d74:	87 81       	ldd	r24, Z+7	; 0x07
    1d76:	90 85       	ldd	r25, Z+8	; 0x08
    1d78:	55 96       	adiw	r26, 0x15	; 21
    1d7a:	9c 93       	st	X, r25
    1d7c:	8e 93       	st	-X, r24
    1d7e:	54 97       	sbiw	r26, 0x14	; 20
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	d5 01       	movw	r26, r10
    1d84:	16 96       	adiw	r26, 0x06	; 6
    1d86:	9c 91       	ld	r25, X
    1d88:	16 97       	sbiw	r26, 0x06	; 6
    1d8a:	99 23       	and	r25, r25
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <HID_Host_ConfigurePipes+0x168>
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	f8 01       	movw	r30, r16
    1d92:	81 8b       	std	Z+17, r24	; 0x11
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1d94:	88 e0       	ldi	r24, 0x08	; 8
    1d96:	86 8b       	std	Z+22, r24	; 0x16
	HIDInterfaceInfo->State.IsActive             = true;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	87 87       	std	Z+15, r24	; 0x0f
    1d9c:	04 c0       	rjmp	.+8      	; 0x1da6 <HID_Host_ConfigurePipes+0x17e>
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	03 c0       	rjmp	.+6      	; 0x1da8 <HID_Host_ConfigurePipes+0x180>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <HID_Host_ConfigurePipes+0x180>
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return false;
    1da6:	80 e0       	ldi	r24, 0x00	; 0
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	ff 90       	pop	r15
    1dba:	ef 90       	pop	r14
    1dbc:	df 90       	pop	r13
    1dbe:	cf 90       	pop	r12
    1dc0:	bf 90       	pop	r11
    1dc2:	af 90       	pop	r10
    1dc4:	9f 90       	pop	r9
    1dc6:	8f 90       	pop	r8
    1dc8:	7f 90       	pop	r7
    1dca:	6f 90       	pop	r6
    1dcc:	5f 90       	pop	r5
    1dce:	4f 90       	pop	r4
    1dd0:	08 95       	ret

00001dd2 <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    1dd2:	ef 92       	push	r14
    1dd4:	ff 92       	push	r15
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1ddc:	80 91 0e 05 	lds	r24, 0x050E
    1de0:	8b 30       	cpi	r24, 0x0B	; 11
    1de2:	d9 f5       	brne	.+118    	; 0x1e5a <HID_Host_ReceiveReport+0x88>
    1de4:	87 85       	ldd	r24, Z+15	; 0x0f
    1de6:	88 23       	and	r24, r24
    1de8:	c1 f1       	breq	.+112    	; 0x1e5a <HID_Host_ReceiveReport+0x88>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1dea:	80 81       	ld	r24, Z
    1dec:	8f 70       	andi	r24, 0x0F	; 15
    1dee:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1df2:	80 91 a9 00 	lds	r24, 0x00A9
    1df6:	8f 7b       	andi	r24, 0xBF	; 191
    1df8:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1dfc:	e6 2e       	mov	r14, r22
    1dfe:	e7 01       	movw	r28, r14
    1e00:	7e 01       	movw	r14, r28
    1e02:	f7 2e       	mov	r15, r23
    1e04:	e7 01       	movw	r28, r14

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1e06:	83 89       	ldd	r24, Z+19	; 0x13
    1e08:	88 23       	and	r24, r24
    1e0a:	91 f4       	brne	.+36     	; 0x1e30 <HID_Host_ReceiveReport+0x5e>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1e0c:	a5 85       	ldd	r26, Z+13	; 0x0d
    1e0e:	b6 85       	ldd	r27, Z+14	; 0x0e
    1e10:	a8 52       	subi	r26, 0x28	; 40
    1e12:	bc 4f       	sbci	r27, 0xFC	; 252
    1e14:	8c 91       	ld	r24, X
    1e16:	88 23       	and	r24, r24
    1e18:	21 f0       	breq	.+8      	; 0x1e22 <HID_Host_ReceiveReport+0x50>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1e1a:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    1e1e:	69 93       	st	Y+, r22
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <HID_Host_ReceiveReport+0x52>
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    1e22:	60 e0       	ldi	r22, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    1e24:	85 85       	ldd	r24, Z+13	; 0x0d
    1e26:	96 85       	ldd	r25, Z+14	; 0x0e
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	6b d8       	rcall	.-3882   	; 0xf02 <USB_GetHIDReportSize>
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	04 c0       	rjmp	.+8      	; 0x1e38 <HID_Host_ReceiveReport+0x66>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1e30:	60 91 f6 00 	lds	r22, 0x00F6
    1e34:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1e38:	ce 01       	movw	r24, r28
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	61 da       	rcall	.-2878   	; 0x1302 <Pipe_Read_Stream_LE>
    1e40:	88 23       	and	r24, r24
    1e42:	61 f4       	brne	.+24     	; 0x1e5c <HID_Host_ReceiveReport+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1e44:	90 91 a6 00 	lds	r25, 0x00A6
    1e48:	9e 77       	andi	r25, 0x7E	; 126
    1e4a:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1e4e:	90 91 a9 00 	lds	r25, 0x00A9
    1e52:	90 64       	ori	r25, 0x40	; 64
    1e54:	90 93 a9 00 	sts	0x00A9, r25
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1e58:	01 c0       	rjmp	.+2      	; 0x1e5c <HID_Host_ReceiveReport+0x8a>

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1e5a:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	ff 90       	pop	r15
    1e62:	ef 90       	pop	r14
    1e64:	08 95       	ret

00001e66 <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1e66:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1e68:	80 91 0e 05 	lds	r24, 0x050E
    1e6c:	8b 30       	cpi	r24, 0x0B	; 11
    1e6e:	a9 f4       	brne	.+42     	; 0x1e9a <HID_Host_IsReportReceived+0x34>
    1e70:	87 85       	ldd	r24, Z+15	; 0x0f
    1e72:	88 23       	and	r24, r24
    1e74:	a1 f0       	breq	.+40     	; 0x1e9e <HID_Host_IsReportReceived+0x38>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1e76:	80 81       	ld	r24, Z
    1e78:	8f 70       	andi	r24, 0x0F	; 15
    1e7a:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1e7e:	80 91 a9 00 	lds	r24, 0x00A9
    1e82:	8f 7b       	andi	r24, 0xBF	; 191
    1e84:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1e88:	80 91 a6 00 	lds	r24, 0x00A6
    1e8c:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1e8e:	90 91 a9 00 	lds	r25, 0x00A9
    1e92:	90 64       	ori	r25, 0x40	; 64
    1e94:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1e98:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	08 95       	ret
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    1ea0:	08 95       	ret

00001ea2 <HID_Host_SetReportProtocol>:
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1ea2:	af 92       	push	r10
    1ea4:	bf 92       	push	r11
    1ea6:	cf 92       	push	r12
    1ea8:	df 92       	push	r13
    1eaa:	ef 92       	push	r14
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1ebc:	cd b6       	in	r12, 0x3d	; 61
    1ebe:	de b6       	in	r13, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	54 96       	adiw	r26, 0x14	; 20
    1ec4:	4d 91       	ld	r20, X+
    1ec6:	5c 91       	ld	r21, X
    1ec8:	55 97       	sbiw	r26, 0x15	; 21
    1eca:	ed b7       	in	r30, 0x3d	; 61
    1ecc:	fe b7       	in	r31, 0x3e	; 62
    1ece:	e4 1b       	sub	r30, r20
    1ed0:	f5 0b       	sbc	r31, r21
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	fe bf       	out	0x3e, r31	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	ed bf       	out	0x3d, r30	; 61
    1edc:	2d b7       	in	r18, 0x3d	; 61
    1ede:	3e b7       	in	r19, 0x3e	; 62
    1ee0:	2f 5f       	subi	r18, 0xFF	; 255
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	59 01       	movw	r10, r18

	USB_ControlRequest = (USB_Request_Header_t)
    1ee6:	50 96       	adiw	r26, 0x10	; 16
    1ee8:	6c 91       	ld	r22, X
    1eea:	81 e8       	ldi	r24, 0x81	; 129
    1eec:	80 93 06 05 	sts	0x0506, r24
    1ef0:	86 e0       	ldi	r24, 0x06	; 6
    1ef2:	80 93 07 05 	sts	0x0507, r24
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	92 e2       	ldi	r25, 0x22	; 34
    1efa:	90 93 09 05 	sts	0x0509, r25
    1efe:	80 93 08 05 	sts	0x0508, r24
    1f02:	7a e0       	ldi	r23, 0x0A	; 10
    1f04:	e7 2e       	mov	r14, r23
    1f06:	75 e0       	ldi	r23, 0x05	; 5
    1f08:	f7 2e       	mov	r15, r23
    1f0a:	60 93 0a 05 	sts	0x050A, r22
    1f0e:	d7 01       	movw	r26, r14
    1f10:	11 96       	adiw	r26, 0x01	; 1
    1f12:	1c 92       	st	X, r1
    1f14:	50 93 0d 05 	sts	0x050D, r21
    1f18:	40 93 0c 05 	sts	0x050C, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1f1c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1f20:	c9 01       	movw	r24, r18
    1f22:	29 dd       	rcall	.-1454   	; 0x1976 <USB_Host_SendControlRequest>
    1f24:	88 23       	and	r24, r24
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <HID_Host_SetReportProtocol+0x88>
    1f28:	4f c0       	rjmp	.+158    	; 0x1fc8 <HID_Host_SetReportProtocol+0x126>
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1f2a:	f8 01       	movw	r30, r16
    1f2c:	83 89       	ldd	r24, Z+19	; 0x13
    1f2e:	88 23       	and	r24, r24
    1f30:	e9 f0       	breq	.+58     	; 0x1f6c <HID_Host_SetReportProtocol+0xca>
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1f32:	20 89       	ldd	r18, Z+16	; 0x10
    1f34:	81 e2       	ldi	r24, 0x21	; 33
    1f36:	80 93 06 05 	sts	0x0506, r24
    1f3a:	8b e0       	ldi	r24, 0x0B	; 11
    1f3c:	80 93 07 05 	sts	0x0507, r24
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	90 93 09 05 	sts	0x0509, r25
    1f48:	80 93 08 05 	sts	0x0508, r24
    1f4c:	20 93 0a 05 	sts	0x050A, r18
    1f50:	d7 01       	movw	r26, r14
    1f52:	11 96       	adiw	r26, 0x01	; 1
    1f54:	1c 92       	st	X, r1
    1f56:	10 92 0d 05 	sts	0x050D, r1
    1f5a:	10 92 0c 05 	sts	0x050C, r1
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	09 dd       	rcall	.-1518   	; 0x1976 <USB_Host_SendControlRequest>
    1f64:	88 23       	and	r24, r24
    1f66:	81 f5       	brne	.+96     	; 0x1fc8 <HID_Host_SetReportProtocol+0x126>
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1f68:	f8 01       	movw	r30, r16
    1f6a:	13 8a       	std	Z+19, r1	; 0x13
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1f6c:	d8 01       	movw	r26, r16
    1f6e:	1d 96       	adiw	r26, 0x0d	; 13
    1f70:	4d 91       	ld	r20, X+
    1f72:	5c 91       	ld	r21, X
    1f74:	1e 97       	sbiw	r26, 0x0e	; 14
    1f76:	41 15       	cp	r20, r1
    1f78:	51 05       	cpc	r21, r1
    1f7a:	29 f1       	breq	.+74     	; 0x1fc6 <HID_Host_SetReportProtocol+0x124>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1f7c:	54 96       	adiw	r26, 0x14	; 20
    1f7e:	6d 91       	ld	r22, X+
    1f80:	7c 91       	ld	r23, X
    1f82:	55 97       	sbiw	r26, 0x15	; 21
    1f84:	c5 01       	movw	r24, r10
    1f86:	0e 94 19 03 	call	0x632	; 0x632 <USB_ProcessHIDReport>
    1f8a:	88 23       	and	r24, r24
    1f8c:	11 f0       	breq	.+4      	; 0x1f92 <HID_Host_SetReportProtocol+0xf0>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1f8e:	80 68       	ori	r24, 0x80	; 128
    1f90:	1b c0       	rjmp	.+54     	; 0x1fc8 <HID_Host_SetReportProtocol+0x126>
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1f92:	d8 01       	movw	r26, r16
    1f94:	1d 96       	adiw	r26, 0x0d	; 13
    1f96:	ed 91       	ld	r30, X+
    1f98:	fc 91       	ld	r31, X
    1f9a:	1e 97       	sbiw	r26, 0x0e	; 14
    1f9c:	ea 52       	subi	r30, 0x2A	; 42
    1f9e:	fc 4f       	sbci	r31, 0xFC	; 252
    1fa0:	20 81       	ld	r18, Z
    1fa2:	31 81       	ldd	r19, Z+1	; 0x01
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1fa4:	a9 01       	movw	r20, r18
    1fa6:	47 70       	andi	r20, 0x07	; 7
    1fa8:	50 70       	andi	r21, 0x00	; 0
    1faa:	91 e0       	ldi	r25, 0x01	; 1
    1fac:	41 15       	cp	r20, r1
    1fae:	51 05       	cpc	r21, r1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <HID_Host_SetReportProtocol+0x112>
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	43 e0       	ldi	r20, 0x03	; 3
    1fb6:	36 95       	lsr	r19
    1fb8:	27 95       	ror	r18
    1fba:	4a 95       	dec	r20
    1fbc:	e1 f7       	brne	.-8      	; 0x1fb6 <HID_Host_SetReportProtocol+0x114>
    1fbe:	29 0f       	add	r18, r25
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	26 8b       	std	Z+22, r18	; 0x16
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <HID_Host_SetReportProtocol+0x126>

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    1fc6:	80 e8       	ldi	r24, 0x80	; 128

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de be       	out	0x3e, r13	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd be       	out	0x3d, r12	; 61
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	1f 91       	pop	r17
    1fd8:	0f 91       	pop	r16
    1fda:	ff 90       	pop	r15
    1fdc:	ef 90       	pop	r14
    1fde:	df 90       	pop	r13
    1fe0:	cf 90       	pop	r12
    1fe2:	bf 90       	pop	r11
    1fe4:	af 90       	pop	r10
    1fe6:	08 95       	ret

00001fe8 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1fe8:	90 91 c8 00 	lds	r25, 0x00C8
    1fec:	95 ff       	sbrs	r25, 5
    1fee:	fc cf       	rjmp	.-8      	; 0x1fe8 <Serial_putchar>
				UDR1 = DataByte;
    1ff0:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	08 95       	ret

00001ffa <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1ffa:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1ffe:	87 ff       	sbrs	r24, 7
    2000:	08 c0       	rjmp	.+16     	; 0x2012 <Serial_getchar+0x18>
    2002:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    2006:	87 ff       	sbrs	r24, 7
    2008:	07 c0       	rjmp	.+14     	; 0x2018 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    200a:	20 91 ce 00 	lds	r18, 0x00CE
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	05 c0       	rjmp	.+10     	; 0x201c <Serial_getchar+0x22>
	  return _FDEV_EOF;
    2012:	2e ef       	ldi	r18, 0xFE	; 254
    2014:	3f ef       	ldi	r19, 0xFF	; 255
    2016:	02 c0       	rjmp	.+4      	; 0x201c <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    2018:	2f ef       	ldi	r18, 0xFF	; 255
    201a:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    201c:	c9 01       	movw	r24, r18
    201e:	08 95       	ret

00002020 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    2020:	fc 01       	movw	r30, r24
	if (!(Stream))
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	51 f4       	brne	.+20     	; 0x203a <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    2026:	ef e0       	ldi	r30, 0x0F	; 15
    2028:	f5 e0       	ldi	r31, 0x05	; 5
    202a:	f0 93 1e 05 	sts	0x051E, r31
    202e:	e0 93 1d 05 	sts	0x051D, r30
		stdout = Stream;
    2032:	f0 93 20 05 	sts	0x0520, r31
    2036:	e0 93 1f 05 	sts	0x051F, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    203a:	8e e0       	ldi	r24, 0x0E	; 14
    203c:	df 01       	movw	r26, r30
    203e:	1d 92       	st	X+, r1
    2040:	8a 95       	dec	r24
    2042:	e9 f7       	brne	.-6      	; 0x203e <Serial_CreateStream+0x1e>
    2044:	83 e0       	ldi	r24, 0x03	; 3
    2046:	83 83       	std	Z+3, r24	; 0x03
    2048:	84 ef       	ldi	r24, 0xF4	; 244
    204a:	9f e0       	ldi	r25, 0x0F	; 15
    204c:	91 87       	std	Z+9, r25	; 0x09
    204e:	80 87       	std	Z+8, r24	; 0x08
    2050:	8d ef       	ldi	r24, 0xFD	; 253
    2052:	9f e0       	ldi	r25, 0x0F	; 15
    2054:	93 87       	std	Z+11, r25	; 0x0b
    2056:	82 87       	std	Z+10, r24	; 0x0a
}
    2058:	08 95       	ret

0000205a <printf_P>:
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	fe 01       	movw	r30, r28
    2064:	35 96       	adiw	r30, 0x05	; 5
    2066:	61 91       	ld	r22, Z+
    2068:	71 91       	ld	r23, Z+
    206a:	80 91 1f 05 	lds	r24, 0x051F
    206e:	90 91 20 05 	lds	r25, 0x0520
    2072:	dc 01       	movw	r26, r24
    2074:	13 96       	adiw	r26, 0x03	; 3
    2076:	2c 91       	ld	r18, X
    2078:	13 97       	sbiw	r26, 0x03	; 3
    207a:	28 60       	ori	r18, 0x08	; 8
    207c:	13 96       	adiw	r26, 0x03	; 3
    207e:	2c 93       	st	X, r18
    2080:	af 01       	movw	r20, r30
    2082:	42 d0       	rcall	.+132    	; 0x2108 <vfprintf>
    2084:	e0 91 1f 05 	lds	r30, 0x051F
    2088:	f0 91 20 05 	lds	r31, 0x0520
    208c:	23 81       	ldd	r18, Z+3	; 0x03
    208e:	27 7f       	andi	r18, 0xF7	; 247
    2090:	23 83       	std	Z+3, r18	; 0x03
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <puts_P>:
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	8c 01       	movw	r16, r24
    20a6:	e0 91 1f 05 	lds	r30, 0x051F
    20aa:	f0 91 20 05 	lds	r31, 0x0520
    20ae:	83 81       	ldd	r24, Z+3	; 0x03
    20b0:	81 ff       	sbrs	r24, 1
    20b2:	20 c0       	rjmp	.+64     	; 0x20f4 <puts_P+0x5c>
    20b4:	c0 e0       	ldi	r28, 0x00	; 0
    20b6:	d0 e0       	ldi	r29, 0x00	; 0
    20b8:	0c c0       	rjmp	.+24     	; 0x20d2 <puts_P+0x3a>
    20ba:	db 01       	movw	r26, r22
    20bc:	18 96       	adiw	r26, 0x08	; 8
    20be:	ed 91       	ld	r30, X+
    20c0:	fc 91       	ld	r31, X
    20c2:	19 97       	sbiw	r26, 0x09	; 9
    20c4:	09 95       	icall
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	11 f0       	breq	.+4      	; 0x20ce <puts_P+0x36>
    20ca:	cf ef       	ldi	r28, 0xFF	; 255
    20cc:	df ef       	ldi	r29, 0xFF	; 255
    20ce:	0f 5f       	subi	r16, 0xFF	; 255
    20d0:	1f 4f       	sbci	r17, 0xFF	; 255
    20d2:	f8 01       	movw	r30, r16
    20d4:	84 91       	lpm	r24, Z+
    20d6:	60 91 1f 05 	lds	r22, 0x051F
    20da:	70 91 20 05 	lds	r23, 0x0520
    20de:	88 23       	and	r24, r24
    20e0:	61 f7       	brne	.-40     	; 0x20ba <puts_P+0x22>
    20e2:	db 01       	movw	r26, r22
    20e4:	18 96       	adiw	r26, 0x08	; 8
    20e6:	ed 91       	ld	r30, X+
    20e8:	fc 91       	ld	r31, X
    20ea:	19 97       	sbiw	r26, 0x09	; 9
    20ec:	8a e0       	ldi	r24, 0x0A	; 10
    20ee:	09 95       	icall
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	11 f0       	breq	.+4      	; 0x20f8 <puts_P+0x60>
    20f4:	cf ef       	ldi	r28, 0xFF	; 255
    20f6:	df ef       	ldi	r29, 0xFF	; 255
    20f8:	ce 01       	movw	r24, r28
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	1f 91       	pop	r17
    2100:	0f 91       	pop	r16
    2102:	ff 90       	pop	r15
    2104:	ef 90       	pop	r14
    2106:	08 95       	ret

00002108 <vfprintf>:
    2108:	2f 92       	push	r2
    210a:	3f 92       	push	r3
    210c:	4f 92       	push	r4
    210e:	5f 92       	push	r5
    2110:	6f 92       	push	r6
    2112:	7f 92       	push	r7
    2114:	8f 92       	push	r8
    2116:	9f 92       	push	r9
    2118:	af 92       	push	r10
    211a:	bf 92       	push	r11
    211c:	cf 92       	push	r12
    211e:	df 92       	push	r13
    2120:	ef 92       	push	r14
    2122:	ff 92       	push	r15
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	2c 97       	sbiw	r28, 0x0c	; 12
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	6c 01       	movw	r12, r24
    213e:	1b 01       	movw	r2, r22
    2140:	8a 01       	movw	r16, r20
    2142:	fc 01       	movw	r30, r24
    2144:	17 82       	std	Z+7, r1	; 0x07
    2146:	16 82       	std	Z+6, r1	; 0x06
    2148:	83 81       	ldd	r24, Z+3	; 0x03
    214a:	81 ff       	sbrs	r24, 1
    214c:	c4 c1       	rjmp	.+904    	; 0x24d6 <vfprintf+0x3ce>
    214e:	2e 01       	movw	r4, r28
    2150:	08 94       	sec
    2152:	41 1c       	adc	r4, r1
    2154:	51 1c       	adc	r5, r1
    2156:	f6 01       	movw	r30, r12
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	f1 01       	movw	r30, r2
    215c:	93 fd       	sbrc	r25, 3
    215e:	85 91       	lpm	r24, Z+
    2160:	93 ff       	sbrs	r25, 3
    2162:	81 91       	ld	r24, Z+
    2164:	1f 01       	movw	r2, r30
    2166:	88 23       	and	r24, r24
    2168:	09 f4       	brne	.+2      	; 0x216c <vfprintf+0x64>
    216a:	b1 c1       	rjmp	.+866    	; 0x24ce <vfprintf+0x3c6>
    216c:	85 32       	cpi	r24, 0x25	; 37
    216e:	39 f4       	brne	.+14     	; 0x217e <vfprintf+0x76>
    2170:	93 fd       	sbrc	r25, 3
    2172:	85 91       	lpm	r24, Z+
    2174:	93 ff       	sbrs	r25, 3
    2176:	81 91       	ld	r24, Z+
    2178:	1f 01       	movw	r2, r30
    217a:	85 32       	cpi	r24, 0x25	; 37
    217c:	21 f4       	brne	.+8      	; 0x2186 <vfprintf+0x7e>
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	b6 01       	movw	r22, r12
    2182:	db d1       	rcall	.+950    	; 0x253a <fputc>
    2184:	e8 cf       	rjmp	.-48     	; 0x2156 <vfprintf+0x4e>
    2186:	ee 24       	eor	r14, r14
    2188:	ff 24       	eor	r15, r15
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	20 32       	cpi	r18, 0x20	; 32
    218e:	b0 f4       	brcc	.+44     	; 0x21bc <vfprintf+0xb4>
    2190:	8b 32       	cpi	r24, 0x2B	; 43
    2192:	69 f0       	breq	.+26     	; 0x21ae <vfprintf+0xa6>
    2194:	8c 32       	cpi	r24, 0x2C	; 44
    2196:	28 f4       	brcc	.+10     	; 0x21a2 <vfprintf+0x9a>
    2198:	80 32       	cpi	r24, 0x20	; 32
    219a:	51 f0       	breq	.+20     	; 0x21b0 <vfprintf+0xa8>
    219c:	83 32       	cpi	r24, 0x23	; 35
    219e:	71 f4       	brne	.+28     	; 0x21bc <vfprintf+0xb4>
    21a0:	0b c0       	rjmp	.+22     	; 0x21b8 <vfprintf+0xb0>
    21a2:	8d 32       	cpi	r24, 0x2D	; 45
    21a4:	39 f0       	breq	.+14     	; 0x21b4 <vfprintf+0xac>
    21a6:	80 33       	cpi	r24, 0x30	; 48
    21a8:	49 f4       	brne	.+18     	; 0x21bc <vfprintf+0xb4>
    21aa:	21 60       	ori	r18, 0x01	; 1
    21ac:	2c c0       	rjmp	.+88     	; 0x2206 <vfprintf+0xfe>
    21ae:	22 60       	ori	r18, 0x02	; 2
    21b0:	24 60       	ori	r18, 0x04	; 4
    21b2:	29 c0       	rjmp	.+82     	; 0x2206 <vfprintf+0xfe>
    21b4:	28 60       	ori	r18, 0x08	; 8
    21b6:	27 c0       	rjmp	.+78     	; 0x2206 <vfprintf+0xfe>
    21b8:	20 61       	ori	r18, 0x10	; 16
    21ba:	25 c0       	rjmp	.+74     	; 0x2206 <vfprintf+0xfe>
    21bc:	27 fd       	sbrc	r18, 7
    21be:	2c c0       	rjmp	.+88     	; 0x2218 <vfprintf+0x110>
    21c0:	38 2f       	mov	r19, r24
    21c2:	30 53       	subi	r19, 0x30	; 48
    21c4:	3a 30       	cpi	r19, 0x0A	; 10
    21c6:	98 f4       	brcc	.+38     	; 0x21ee <vfprintf+0xe6>
    21c8:	26 ff       	sbrs	r18, 6
    21ca:	08 c0       	rjmp	.+16     	; 0x21dc <vfprintf+0xd4>
    21cc:	8e 2d       	mov	r24, r14
    21ce:	88 0f       	add	r24, r24
    21d0:	e8 2e       	mov	r14, r24
    21d2:	ee 0c       	add	r14, r14
    21d4:	ee 0c       	add	r14, r14
    21d6:	e8 0e       	add	r14, r24
    21d8:	e3 0e       	add	r14, r19
    21da:	15 c0       	rjmp	.+42     	; 0x2206 <vfprintf+0xfe>
    21dc:	8f 2d       	mov	r24, r15
    21de:	88 0f       	add	r24, r24
    21e0:	f8 2e       	mov	r15, r24
    21e2:	ff 0c       	add	r15, r15
    21e4:	ff 0c       	add	r15, r15
    21e6:	f8 0e       	add	r15, r24
    21e8:	f3 0e       	add	r15, r19
    21ea:	20 62       	ori	r18, 0x20	; 32
    21ec:	0c c0       	rjmp	.+24     	; 0x2206 <vfprintf+0xfe>
    21ee:	8e 32       	cpi	r24, 0x2E	; 46
    21f0:	21 f4       	brne	.+8      	; 0x21fa <vfprintf+0xf2>
    21f2:	26 fd       	sbrc	r18, 6
    21f4:	6c c1       	rjmp	.+728    	; 0x24ce <vfprintf+0x3c6>
    21f6:	20 64       	ori	r18, 0x40	; 64
    21f8:	06 c0       	rjmp	.+12     	; 0x2206 <vfprintf+0xfe>
    21fa:	8c 36       	cpi	r24, 0x6C	; 108
    21fc:	11 f4       	brne	.+4      	; 0x2202 <vfprintf+0xfa>
    21fe:	20 68       	ori	r18, 0x80	; 128
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <vfprintf+0xfe>
    2202:	88 36       	cpi	r24, 0x68	; 104
    2204:	49 f4       	brne	.+18     	; 0x2218 <vfprintf+0x110>
    2206:	f1 01       	movw	r30, r2
    2208:	93 fd       	sbrc	r25, 3
    220a:	85 91       	lpm	r24, Z+
    220c:	93 ff       	sbrs	r25, 3
    220e:	81 91       	ld	r24, Z+
    2210:	1f 01       	movw	r2, r30
    2212:	88 23       	and	r24, r24
    2214:	09 f0       	breq	.+2      	; 0x2218 <vfprintf+0x110>
    2216:	ba cf       	rjmp	.-140    	; 0x218c <vfprintf+0x84>
    2218:	98 2f       	mov	r25, r24
    221a:	95 54       	subi	r25, 0x45	; 69
    221c:	93 30       	cpi	r25, 0x03	; 3
    221e:	18 f0       	brcs	.+6      	; 0x2226 <vfprintf+0x11e>
    2220:	90 52       	subi	r25, 0x20	; 32
    2222:	93 30       	cpi	r25, 0x03	; 3
    2224:	28 f4       	brcc	.+10     	; 0x2230 <vfprintf+0x128>
    2226:	0c 5f       	subi	r16, 0xFC	; 252
    2228:	1f 4f       	sbci	r17, 0xFF	; 255
    222a:	ff e3       	ldi	r31, 0x3F	; 63
    222c:	f9 83       	std	Y+1, r31	; 0x01
    222e:	0d c0       	rjmp	.+26     	; 0x224a <vfprintf+0x142>
    2230:	83 36       	cpi	r24, 0x63	; 99
    2232:	31 f0       	breq	.+12     	; 0x2240 <vfprintf+0x138>
    2234:	83 37       	cpi	r24, 0x73	; 115
    2236:	71 f0       	breq	.+28     	; 0x2254 <vfprintf+0x14c>
    2238:	83 35       	cpi	r24, 0x53	; 83
    223a:	09 f0       	breq	.+2      	; 0x223e <vfprintf+0x136>
    223c:	5c c0       	rjmp	.+184    	; 0x22f6 <vfprintf+0x1ee>
    223e:	21 c0       	rjmp	.+66     	; 0x2282 <vfprintf+0x17a>
    2240:	f8 01       	movw	r30, r16
    2242:	80 81       	ld	r24, Z
    2244:	89 83       	std	Y+1, r24	; 0x01
    2246:	0e 5f       	subi	r16, 0xFE	; 254
    2248:	1f 4f       	sbci	r17, 0xFF	; 255
    224a:	42 01       	movw	r8, r4
    224c:	71 e0       	ldi	r23, 0x01	; 1
    224e:	a7 2e       	mov	r10, r23
    2250:	b1 2c       	mov	r11, r1
    2252:	15 c0       	rjmp	.+42     	; 0x227e <vfprintf+0x176>
    2254:	62 e0       	ldi	r22, 0x02	; 2
    2256:	66 2e       	mov	r6, r22
    2258:	71 2c       	mov	r7, r1
    225a:	60 0e       	add	r6, r16
    225c:	71 1e       	adc	r7, r17
    225e:	f8 01       	movw	r30, r16
    2260:	80 80       	ld	r8, Z
    2262:	91 80       	ldd	r9, Z+1	; 0x01
    2264:	26 ff       	sbrs	r18, 6
    2266:	03 c0       	rjmp	.+6      	; 0x226e <vfprintf+0x166>
    2268:	6e 2d       	mov	r22, r14
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <vfprintf+0x16a>
    226e:	6f ef       	ldi	r22, 0xFF	; 255
    2270:	7f ef       	ldi	r23, 0xFF	; 255
    2272:	c4 01       	movw	r24, r8
    2274:	2c 87       	std	Y+12, r18	; 0x0c
    2276:	56 d1       	rcall	.+684    	; 0x2524 <strnlen>
    2278:	5c 01       	movw	r10, r24
    227a:	83 01       	movw	r16, r6
    227c:	2c 85       	ldd	r18, Y+12	; 0x0c
    227e:	2f 77       	andi	r18, 0x7F	; 127
    2280:	16 c0       	rjmp	.+44     	; 0x22ae <vfprintf+0x1a6>
    2282:	52 e0       	ldi	r21, 0x02	; 2
    2284:	65 2e       	mov	r6, r21
    2286:	71 2c       	mov	r7, r1
    2288:	60 0e       	add	r6, r16
    228a:	71 1e       	adc	r7, r17
    228c:	f8 01       	movw	r30, r16
    228e:	80 80       	ld	r8, Z
    2290:	91 80       	ldd	r9, Z+1	; 0x01
    2292:	26 ff       	sbrs	r18, 6
    2294:	03 c0       	rjmp	.+6      	; 0x229c <vfprintf+0x194>
    2296:	6e 2d       	mov	r22, r14
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <vfprintf+0x198>
    229c:	6f ef       	ldi	r22, 0xFF	; 255
    229e:	7f ef       	ldi	r23, 0xFF	; 255
    22a0:	c4 01       	movw	r24, r8
    22a2:	2c 87       	std	Y+12, r18	; 0x0c
    22a4:	34 d1       	rcall	.+616    	; 0x250e <strnlen_P>
    22a6:	5c 01       	movw	r10, r24
    22a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    22aa:	20 68       	ori	r18, 0x80	; 128
    22ac:	83 01       	movw	r16, r6
    22ae:	23 fd       	sbrc	r18, 3
    22b0:	1e c0       	rjmp	.+60     	; 0x22ee <vfprintf+0x1e6>
    22b2:	07 c0       	rjmp	.+14     	; 0x22c2 <vfprintf+0x1ba>
    22b4:	80 e2       	ldi	r24, 0x20	; 32
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	b6 01       	movw	r22, r12
    22ba:	2c 87       	std	Y+12, r18	; 0x0c
    22bc:	3e d1       	rcall	.+636    	; 0x253a <fputc>
    22be:	fa 94       	dec	r15
    22c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    22c2:	8f 2d       	mov	r24, r15
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a8 16       	cp	r10, r24
    22c8:	b9 06       	cpc	r11, r25
    22ca:	a0 f3       	brcs	.-24     	; 0x22b4 <vfprintf+0x1ac>
    22cc:	10 c0       	rjmp	.+32     	; 0x22ee <vfprintf+0x1e6>
    22ce:	f4 01       	movw	r30, r8
    22d0:	27 fd       	sbrc	r18, 7
    22d2:	85 91       	lpm	r24, Z+
    22d4:	27 ff       	sbrs	r18, 7
    22d6:	81 91       	ld	r24, Z+
    22d8:	4f 01       	movw	r8, r30
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	b6 01       	movw	r22, r12
    22de:	2c 87       	std	Y+12, r18	; 0x0c
    22e0:	2c d1       	rcall	.+600    	; 0x253a <fputc>
    22e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    22e4:	f1 10       	cpse	r15, r1
    22e6:	fa 94       	dec	r15
    22e8:	08 94       	sec
    22ea:	a1 08       	sbc	r10, r1
    22ec:	b1 08       	sbc	r11, r1
    22ee:	a1 14       	cp	r10, r1
    22f0:	b1 04       	cpc	r11, r1
    22f2:	69 f7       	brne	.-38     	; 0x22ce <vfprintf+0x1c6>
    22f4:	e9 c0       	rjmp	.+466    	; 0x24c8 <vfprintf+0x3c0>
    22f6:	84 36       	cpi	r24, 0x64	; 100
    22f8:	11 f0       	breq	.+4      	; 0x22fe <vfprintf+0x1f6>
    22fa:	89 36       	cpi	r24, 0x69	; 105
    22fc:	41 f5       	brne	.+80     	; 0x234e <vfprintf+0x246>
    22fe:	27 ff       	sbrs	r18, 7
    2300:	08 c0       	rjmp	.+16     	; 0x2312 <vfprintf+0x20a>
    2302:	f8 01       	movw	r30, r16
    2304:	60 81       	ld	r22, Z
    2306:	71 81       	ldd	r23, Z+1	; 0x01
    2308:	82 81       	ldd	r24, Z+2	; 0x02
    230a:	93 81       	ldd	r25, Z+3	; 0x03
    230c:	0c 5f       	subi	r16, 0xFC	; 252
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	09 c0       	rjmp	.+18     	; 0x2324 <vfprintf+0x21c>
    2312:	f8 01       	movw	r30, r16
    2314:	60 81       	ld	r22, Z
    2316:	71 81       	ldd	r23, Z+1	; 0x01
    2318:	88 27       	eor	r24, r24
    231a:	77 fd       	sbrc	r23, 7
    231c:	80 95       	com	r24
    231e:	98 2f       	mov	r25, r24
    2320:	0e 5f       	subi	r16, 0xFE	; 254
    2322:	1f 4f       	sbci	r17, 0xFF	; 255
    2324:	4f e6       	ldi	r20, 0x6F	; 111
    2326:	b4 2e       	mov	r11, r20
    2328:	b2 22       	and	r11, r18
    232a:	97 ff       	sbrs	r25, 7
    232c:	09 c0       	rjmp	.+18     	; 0x2340 <vfprintf+0x238>
    232e:	90 95       	com	r25
    2330:	80 95       	com	r24
    2332:	70 95       	com	r23
    2334:	61 95       	neg	r22
    2336:	7f 4f       	sbci	r23, 0xFF	; 255
    2338:	8f 4f       	sbci	r24, 0xFF	; 255
    233a:	9f 4f       	sbci	r25, 0xFF	; 255
    233c:	f0 e8       	ldi	r31, 0x80	; 128
    233e:	bf 2a       	or	r11, r31
    2340:	a2 01       	movw	r20, r4
    2342:	2a e0       	ldi	r18, 0x0A	; 10
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	25 d1       	rcall	.+586    	; 0x2592 <__ultoa_invert>
    2348:	78 2e       	mov	r7, r24
    234a:	74 18       	sub	r7, r4
    234c:	44 c0       	rjmp	.+136    	; 0x23d6 <vfprintf+0x2ce>
    234e:	85 37       	cpi	r24, 0x75	; 117
    2350:	31 f4       	brne	.+12     	; 0x235e <vfprintf+0x256>
    2352:	3f ee       	ldi	r19, 0xEF	; 239
    2354:	b3 2e       	mov	r11, r19
    2356:	b2 22       	and	r11, r18
    2358:	2a e0       	ldi	r18, 0x0A	; 10
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	25 c0       	rjmp	.+74     	; 0x23a8 <vfprintf+0x2a0>
    235e:	99 ef       	ldi	r25, 0xF9	; 249
    2360:	b9 2e       	mov	r11, r25
    2362:	b2 22       	and	r11, r18
    2364:	8f 36       	cpi	r24, 0x6F	; 111
    2366:	c1 f0       	breq	.+48     	; 0x2398 <vfprintf+0x290>
    2368:	80 37       	cpi	r24, 0x70	; 112
    236a:	20 f4       	brcc	.+8      	; 0x2374 <vfprintf+0x26c>
    236c:	88 35       	cpi	r24, 0x58	; 88
    236e:	09 f0       	breq	.+2      	; 0x2372 <vfprintf+0x26a>
    2370:	ae c0       	rjmp	.+348    	; 0x24ce <vfprintf+0x3c6>
    2372:	0d c0       	rjmp	.+26     	; 0x238e <vfprintf+0x286>
    2374:	80 37       	cpi	r24, 0x70	; 112
    2376:	21 f0       	breq	.+8      	; 0x2380 <vfprintf+0x278>
    2378:	88 37       	cpi	r24, 0x78	; 120
    237a:	09 f0       	breq	.+2      	; 0x237e <vfprintf+0x276>
    237c:	a8 c0       	rjmp	.+336    	; 0x24ce <vfprintf+0x3c6>
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <vfprintf+0x27c>
    2380:	20 e1       	ldi	r18, 0x10	; 16
    2382:	b2 2a       	or	r11, r18
    2384:	b4 fe       	sbrs	r11, 4
    2386:	0b c0       	rjmp	.+22     	; 0x239e <vfprintf+0x296>
    2388:	84 e0       	ldi	r24, 0x04	; 4
    238a:	b8 2a       	or	r11, r24
    238c:	08 c0       	rjmp	.+16     	; 0x239e <vfprintf+0x296>
    238e:	b4 fe       	sbrs	r11, 4
    2390:	09 c0       	rjmp	.+18     	; 0x23a4 <vfprintf+0x29c>
    2392:	e6 e0       	ldi	r30, 0x06	; 6
    2394:	be 2a       	or	r11, r30
    2396:	06 c0       	rjmp	.+12     	; 0x23a4 <vfprintf+0x29c>
    2398:	28 e0       	ldi	r18, 0x08	; 8
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	05 c0       	rjmp	.+10     	; 0x23a8 <vfprintf+0x2a0>
    239e:	20 e1       	ldi	r18, 0x10	; 16
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <vfprintf+0x2a0>
    23a4:	20 e1       	ldi	r18, 0x10	; 16
    23a6:	32 e0       	ldi	r19, 0x02	; 2
    23a8:	b7 fe       	sbrs	r11, 7
    23aa:	08 c0       	rjmp	.+16     	; 0x23bc <vfprintf+0x2b4>
    23ac:	f8 01       	movw	r30, r16
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	0c 5f       	subi	r16, 0xFC	; 252
    23b8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ba:	07 c0       	rjmp	.+14     	; 0x23ca <vfprintf+0x2c2>
    23bc:	f8 01       	movw	r30, r16
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	0e 5f       	subi	r16, 0xFE	; 254
    23c8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ca:	a2 01       	movw	r20, r4
    23cc:	e2 d0       	rcall	.+452    	; 0x2592 <__ultoa_invert>
    23ce:	78 2e       	mov	r7, r24
    23d0:	74 18       	sub	r7, r4
    23d2:	ff e7       	ldi	r31, 0x7F	; 127
    23d4:	bf 22       	and	r11, r31
    23d6:	b6 fe       	sbrs	r11, 6
    23d8:	0b c0       	rjmp	.+22     	; 0x23f0 <vfprintf+0x2e8>
    23da:	2e ef       	ldi	r18, 0xFE	; 254
    23dc:	b2 22       	and	r11, r18
    23de:	7e 14       	cp	r7, r14
    23e0:	38 f4       	brcc	.+14     	; 0x23f0 <vfprintf+0x2e8>
    23e2:	b4 fe       	sbrs	r11, 4
    23e4:	07 c0       	rjmp	.+14     	; 0x23f4 <vfprintf+0x2ec>
    23e6:	b2 fc       	sbrc	r11, 2
    23e8:	05 c0       	rjmp	.+10     	; 0x23f4 <vfprintf+0x2ec>
    23ea:	8f ee       	ldi	r24, 0xEF	; 239
    23ec:	b8 22       	and	r11, r24
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <vfprintf+0x2ec>
    23f0:	a7 2c       	mov	r10, r7
    23f2:	01 c0       	rjmp	.+2      	; 0x23f6 <vfprintf+0x2ee>
    23f4:	ae 2c       	mov	r10, r14
    23f6:	8b 2d       	mov	r24, r11
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	b4 fe       	sbrs	r11, 4
    23fc:	0d c0       	rjmp	.+26     	; 0x2418 <vfprintf+0x310>
    23fe:	fe 01       	movw	r30, r28
    2400:	e7 0d       	add	r30, r7
    2402:	f1 1d       	adc	r31, r1
    2404:	20 81       	ld	r18, Z
    2406:	20 33       	cpi	r18, 0x30	; 48
    2408:	19 f4       	brne	.+6      	; 0x2410 <vfprintf+0x308>
    240a:	e9 ee       	ldi	r30, 0xE9	; 233
    240c:	be 22       	and	r11, r30
    240e:	09 c0       	rjmp	.+18     	; 0x2422 <vfprintf+0x31a>
    2410:	a3 94       	inc	r10
    2412:	b2 fe       	sbrs	r11, 2
    2414:	06 c0       	rjmp	.+12     	; 0x2422 <vfprintf+0x31a>
    2416:	04 c0       	rjmp	.+8      	; 0x2420 <vfprintf+0x318>
    2418:	86 78       	andi	r24, 0x86	; 134
    241a:	90 70       	andi	r25, 0x00	; 0
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	09 f0       	breq	.+2      	; 0x2422 <vfprintf+0x31a>
    2420:	a3 94       	inc	r10
    2422:	8b 2c       	mov	r8, r11
    2424:	99 24       	eor	r9, r9
    2426:	b3 fc       	sbrc	r11, 3
    2428:	13 c0       	rjmp	.+38     	; 0x2450 <vfprintf+0x348>
    242a:	b0 fe       	sbrs	r11, 0
    242c:	0e c0       	rjmp	.+28     	; 0x244a <vfprintf+0x342>
    242e:	af 14       	cp	r10, r15
    2430:	28 f4       	brcc	.+10     	; 0x243c <vfprintf+0x334>
    2432:	e7 2c       	mov	r14, r7
    2434:	ef 0c       	add	r14, r15
    2436:	ea 18       	sub	r14, r10
    2438:	af 2c       	mov	r10, r15
    243a:	07 c0       	rjmp	.+14     	; 0x244a <vfprintf+0x342>
    243c:	e7 2c       	mov	r14, r7
    243e:	05 c0       	rjmp	.+10     	; 0x244a <vfprintf+0x342>
    2440:	80 e2       	ldi	r24, 0x20	; 32
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	b6 01       	movw	r22, r12
    2446:	79 d0       	rcall	.+242    	; 0x253a <fputc>
    2448:	a3 94       	inc	r10
    244a:	af 14       	cp	r10, r15
    244c:	c8 f3       	brcs	.-14     	; 0x2440 <vfprintf+0x338>
    244e:	04 c0       	rjmp	.+8      	; 0x2458 <vfprintf+0x350>
    2450:	af 14       	cp	r10, r15
    2452:	10 f4       	brcc	.+4      	; 0x2458 <vfprintf+0x350>
    2454:	fa 18       	sub	r15, r10
    2456:	01 c0       	rjmp	.+2      	; 0x245a <vfprintf+0x352>
    2458:	ff 24       	eor	r15, r15
    245a:	84 fe       	sbrs	r8, 4
    245c:	0e c0       	rjmp	.+28     	; 0x247a <vfprintf+0x372>
    245e:	80 e3       	ldi	r24, 0x30	; 48
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	b6 01       	movw	r22, r12
    2464:	6a d0       	rcall	.+212    	; 0x253a <fputc>
    2466:	82 fe       	sbrs	r8, 2
    2468:	1d c0       	rjmp	.+58     	; 0x24a4 <vfprintf+0x39c>
    246a:	81 fe       	sbrs	r8, 1
    246c:	03 c0       	rjmp	.+6      	; 0x2474 <vfprintf+0x36c>
    246e:	88 e5       	ldi	r24, 0x58	; 88
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	10 c0       	rjmp	.+32     	; 0x2494 <vfprintf+0x38c>
    2474:	88 e7       	ldi	r24, 0x78	; 120
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	0d c0       	rjmp	.+26     	; 0x2494 <vfprintf+0x38c>
    247a:	c4 01       	movw	r24, r8
    247c:	86 78       	andi	r24, 0x86	; 134
    247e:	90 70       	andi	r25, 0x00	; 0
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	81 f0       	breq	.+32     	; 0x24a4 <vfprintf+0x39c>
    2484:	81 fc       	sbrc	r8, 1
    2486:	02 c0       	rjmp	.+4      	; 0x248c <vfprintf+0x384>
    2488:	80 e2       	ldi	r24, 0x20	; 32
    248a:	01 c0       	rjmp	.+2      	; 0x248e <vfprintf+0x386>
    248c:	8b e2       	ldi	r24, 0x2B	; 43
    248e:	b7 fc       	sbrc	r11, 7
    2490:	8d e2       	ldi	r24, 0x2D	; 45
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	b6 01       	movw	r22, r12
    2496:	51 d0       	rcall	.+162    	; 0x253a <fputc>
    2498:	05 c0       	rjmp	.+10     	; 0x24a4 <vfprintf+0x39c>
    249a:	80 e3       	ldi	r24, 0x30	; 48
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	b6 01       	movw	r22, r12
    24a0:	4c d0       	rcall	.+152    	; 0x253a <fputc>
    24a2:	ea 94       	dec	r14
    24a4:	7e 14       	cp	r7, r14
    24a6:	c8 f3       	brcs	.-14     	; 0x249a <vfprintf+0x392>
    24a8:	7a 94       	dec	r7
    24aa:	f2 01       	movw	r30, r4
    24ac:	e7 0d       	add	r30, r7
    24ae:	f1 1d       	adc	r31, r1
    24b0:	80 81       	ld	r24, Z
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	b6 01       	movw	r22, r12
    24b6:	41 d0       	rcall	.+130    	; 0x253a <fputc>
    24b8:	77 20       	and	r7, r7
    24ba:	b1 f7       	brne	.-20     	; 0x24a8 <vfprintf+0x3a0>
    24bc:	05 c0       	rjmp	.+10     	; 0x24c8 <vfprintf+0x3c0>
    24be:	80 e2       	ldi	r24, 0x20	; 32
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	b6 01       	movw	r22, r12
    24c4:	3a d0       	rcall	.+116    	; 0x253a <fputc>
    24c6:	fa 94       	dec	r15
    24c8:	ff 20       	and	r15, r15
    24ca:	c9 f7       	brne	.-14     	; 0x24be <vfprintf+0x3b6>
    24cc:	44 ce       	rjmp	.-888    	; 0x2156 <vfprintf+0x4e>
    24ce:	f6 01       	movw	r30, r12
    24d0:	26 81       	ldd	r18, Z+6	; 0x06
    24d2:	37 81       	ldd	r19, Z+7	; 0x07
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <vfprintf+0x3d2>
    24d6:	2f ef       	ldi	r18, 0xFF	; 255
    24d8:	3f ef       	ldi	r19, 0xFF	; 255
    24da:	c9 01       	movw	r24, r18
    24dc:	2c 96       	adiw	r28, 0x0c	; 12
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	ff 90       	pop	r15
    24f2:	ef 90       	pop	r14
    24f4:	df 90       	pop	r13
    24f6:	cf 90       	pop	r12
    24f8:	bf 90       	pop	r11
    24fa:	af 90       	pop	r10
    24fc:	9f 90       	pop	r9
    24fe:	8f 90       	pop	r8
    2500:	7f 90       	pop	r7
    2502:	6f 90       	pop	r6
    2504:	5f 90       	pop	r5
    2506:	4f 90       	pop	r4
    2508:	3f 90       	pop	r3
    250a:	2f 90       	pop	r2
    250c:	08 95       	ret

0000250e <strnlen_P>:
    250e:	fc 01       	movw	r30, r24
    2510:	05 90       	lpm	r0, Z+
    2512:	61 50       	subi	r22, 0x01	; 1
    2514:	70 40       	sbci	r23, 0x00	; 0
    2516:	01 10       	cpse	r0, r1
    2518:	d8 f7       	brcc	.-10     	; 0x2510 <strnlen_P+0x2>
    251a:	80 95       	com	r24
    251c:	90 95       	com	r25
    251e:	8e 0f       	add	r24, r30
    2520:	9f 1f       	adc	r25, r31
    2522:	08 95       	ret

00002524 <strnlen>:
    2524:	fc 01       	movw	r30, r24
    2526:	61 50       	subi	r22, 0x01	; 1
    2528:	70 40       	sbci	r23, 0x00	; 0
    252a:	01 90       	ld	r0, Z+
    252c:	01 10       	cpse	r0, r1
    252e:	d8 f7       	brcc	.-10     	; 0x2526 <strnlen+0x2>
    2530:	80 95       	com	r24
    2532:	90 95       	com	r25
    2534:	8e 0f       	add	r24, r30
    2536:	9f 1f       	adc	r25, r31
    2538:	08 95       	ret

0000253a <fputc>:
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	8c 01       	movw	r16, r24
    2544:	eb 01       	movw	r28, r22
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	81 ff       	sbrs	r24, 1
    254a:	1b c0       	rjmp	.+54     	; 0x2582 <fputc+0x48>
    254c:	82 ff       	sbrs	r24, 2
    254e:	0d c0       	rjmp	.+26     	; 0x256a <fputc+0x30>
    2550:	2e 81       	ldd	r18, Y+6	; 0x06
    2552:	3f 81       	ldd	r19, Y+7	; 0x07
    2554:	8c 81       	ldd	r24, Y+4	; 0x04
    2556:	9d 81       	ldd	r25, Y+5	; 0x05
    2558:	28 17       	cp	r18, r24
    255a:	39 07       	cpc	r19, r25
    255c:	64 f4       	brge	.+24     	; 0x2576 <fputc+0x3c>
    255e:	e8 81       	ld	r30, Y
    2560:	f9 81       	ldd	r31, Y+1	; 0x01
    2562:	01 93       	st	Z+, r16
    2564:	f9 83       	std	Y+1, r31	; 0x01
    2566:	e8 83       	st	Y, r30
    2568:	06 c0       	rjmp	.+12     	; 0x2576 <fputc+0x3c>
    256a:	e8 85       	ldd	r30, Y+8	; 0x08
    256c:	f9 85       	ldd	r31, Y+9	; 0x09
    256e:	80 2f       	mov	r24, r16
    2570:	09 95       	icall
    2572:	00 97       	sbiw	r24, 0x00	; 0
    2574:	31 f4       	brne	.+12     	; 0x2582 <fputc+0x48>
    2576:	8e 81       	ldd	r24, Y+6	; 0x06
    2578:	9f 81       	ldd	r25, Y+7	; 0x07
    257a:	01 96       	adiw	r24, 0x01	; 1
    257c:	9f 83       	std	Y+7, r25	; 0x07
    257e:	8e 83       	std	Y+6, r24	; 0x06
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <fputc+0x4c>
    2582:	0f ef       	ldi	r16, 0xFF	; 255
    2584:	1f ef       	ldi	r17, 0xFF	; 255
    2586:	c8 01       	movw	r24, r16
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	08 95       	ret

00002592 <__ultoa_invert>:
    2592:	fa 01       	movw	r30, r20
    2594:	aa 27       	eor	r26, r26
    2596:	28 30       	cpi	r18, 0x08	; 8
    2598:	51 f1       	breq	.+84     	; 0x25ee <__ultoa_invert+0x5c>
    259a:	20 31       	cpi	r18, 0x10	; 16
    259c:	81 f1       	breq	.+96     	; 0x25fe <__ultoa_invert+0x6c>
    259e:	e8 94       	clt
    25a0:	6f 93       	push	r22
    25a2:	6e 7f       	andi	r22, 0xFE	; 254
    25a4:	6e 5f       	subi	r22, 0xFE	; 254
    25a6:	7f 4f       	sbci	r23, 0xFF	; 255
    25a8:	8f 4f       	sbci	r24, 0xFF	; 255
    25aa:	9f 4f       	sbci	r25, 0xFF	; 255
    25ac:	af 4f       	sbci	r26, 0xFF	; 255
    25ae:	b1 e0       	ldi	r27, 0x01	; 1
    25b0:	3e d0       	rcall	.+124    	; 0x262e <__ultoa_invert+0x9c>
    25b2:	b4 e0       	ldi	r27, 0x04	; 4
    25b4:	3c d0       	rcall	.+120    	; 0x262e <__ultoa_invert+0x9c>
    25b6:	67 0f       	add	r22, r23
    25b8:	78 1f       	adc	r23, r24
    25ba:	89 1f       	adc	r24, r25
    25bc:	9a 1f       	adc	r25, r26
    25be:	a1 1d       	adc	r26, r1
    25c0:	68 0f       	add	r22, r24
    25c2:	79 1f       	adc	r23, r25
    25c4:	8a 1f       	adc	r24, r26
    25c6:	91 1d       	adc	r25, r1
    25c8:	a1 1d       	adc	r26, r1
    25ca:	6a 0f       	add	r22, r26
    25cc:	71 1d       	adc	r23, r1
    25ce:	81 1d       	adc	r24, r1
    25d0:	91 1d       	adc	r25, r1
    25d2:	a1 1d       	adc	r26, r1
    25d4:	20 d0       	rcall	.+64     	; 0x2616 <__ultoa_invert+0x84>
    25d6:	09 f4       	brne	.+2      	; 0x25da <__ultoa_invert+0x48>
    25d8:	68 94       	set
    25da:	3f 91       	pop	r19
    25dc:	2a e0       	ldi	r18, 0x0A	; 10
    25de:	26 9f       	mul	r18, r22
    25e0:	11 24       	eor	r1, r1
    25e2:	30 19       	sub	r19, r0
    25e4:	30 5d       	subi	r19, 0xD0	; 208
    25e6:	31 93       	st	Z+, r19
    25e8:	de f6       	brtc	.-74     	; 0x25a0 <__ultoa_invert+0xe>
    25ea:	cf 01       	movw	r24, r30
    25ec:	08 95       	ret
    25ee:	46 2f       	mov	r20, r22
    25f0:	47 70       	andi	r20, 0x07	; 7
    25f2:	40 5d       	subi	r20, 0xD0	; 208
    25f4:	41 93       	st	Z+, r20
    25f6:	b3 e0       	ldi	r27, 0x03	; 3
    25f8:	0f d0       	rcall	.+30     	; 0x2618 <__ultoa_invert+0x86>
    25fa:	c9 f7       	brne	.-14     	; 0x25ee <__ultoa_invert+0x5c>
    25fc:	f6 cf       	rjmp	.-20     	; 0x25ea <__ultoa_invert+0x58>
    25fe:	46 2f       	mov	r20, r22
    2600:	4f 70       	andi	r20, 0x0F	; 15
    2602:	40 5d       	subi	r20, 0xD0	; 208
    2604:	4a 33       	cpi	r20, 0x3A	; 58
    2606:	18 f0       	brcs	.+6      	; 0x260e <__ultoa_invert+0x7c>
    2608:	49 5d       	subi	r20, 0xD9	; 217
    260a:	31 fd       	sbrc	r19, 1
    260c:	40 52       	subi	r20, 0x20	; 32
    260e:	41 93       	st	Z+, r20
    2610:	02 d0       	rcall	.+4      	; 0x2616 <__ultoa_invert+0x84>
    2612:	a9 f7       	brne	.-22     	; 0x25fe <__ultoa_invert+0x6c>
    2614:	ea cf       	rjmp	.-44     	; 0x25ea <__ultoa_invert+0x58>
    2616:	b4 e0       	ldi	r27, 0x04	; 4
    2618:	a6 95       	lsr	r26
    261a:	97 95       	ror	r25
    261c:	87 95       	ror	r24
    261e:	77 95       	ror	r23
    2620:	67 95       	ror	r22
    2622:	ba 95       	dec	r27
    2624:	c9 f7       	brne	.-14     	; 0x2618 <__ultoa_invert+0x86>
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	61 05       	cpc	r22, r1
    262a:	71 05       	cpc	r23, r1
    262c:	08 95       	ret
    262e:	9b 01       	movw	r18, r22
    2630:	ac 01       	movw	r20, r24
    2632:	0a 2e       	mov	r0, r26
    2634:	06 94       	lsr	r0
    2636:	57 95       	ror	r21
    2638:	47 95       	ror	r20
    263a:	37 95       	ror	r19
    263c:	27 95       	ror	r18
    263e:	ba 95       	dec	r27
    2640:	c9 f7       	brne	.-14     	; 0x2634 <__ultoa_invert+0xa2>
    2642:	62 0f       	add	r22, r18
    2644:	73 1f       	adc	r23, r19
    2646:	84 1f       	adc	r24, r20
    2648:	95 1f       	adc	r25, r21
    264a:	a0 1d       	adc	r26, r0
    264c:	08 95       	ret

0000264e <_exit>:
    264e:	f8 94       	cli

00002650 <__stop_program>:
    2650:	ff cf       	rjmp	.-2      	; 0x2650 <__stop_program>
