
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00002136  000021ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000422  0080013a  0080013a  00002204  2**0
                  ALLOC
  3 .stab         0000249c  00000000  00000000  00002204  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e06  00000000  00000000  000046a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000788  00000000  00000000  000054a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000114f  00000000  00000000  00005c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cb8b  00000000  00000000  00006d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002c31  00000000  00000000  00013908  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000098d8  00000000  00000000  00016539  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c70  00000000  00000000  0001fe14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004db1  00000000  00000000  00020a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007191  00000000  00000000  00025835  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001e91  00000000  00000000  0002c9c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a18  00000000  00000000  0002e857  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
       2:	00 00       	nop
       4:	81 c1       	rjmp	.+770    	; 0x308 <__bad_interrupt>
       6:	00 00       	nop
       8:	7f c1       	rjmp	.+766    	; 0x308 <__bad_interrupt>
       a:	00 00       	nop
       c:	7d c1       	rjmp	.+762    	; 0x308 <__bad_interrupt>
       e:	00 00       	nop
      10:	7b c1       	rjmp	.+758    	; 0x308 <__bad_interrupt>
      12:	00 00       	nop
      14:	79 c1       	rjmp	.+754    	; 0x308 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c1       	rjmp	.+750    	; 0x308 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c1       	rjmp	.+746    	; 0x308 <__bad_interrupt>
      1e:	00 00       	nop
      20:	73 c1       	rjmp	.+742    	; 0x308 <__bad_interrupt>
      22:	00 00       	nop
      24:	71 c1       	rjmp	.+738    	; 0x308 <__bad_interrupt>
      26:	00 00       	nop
      28:	2c c7       	rjmp	.+3672   	; 0xe82 <__vector_10>
      2a:	00 00       	nop
      2c:	6d c1       	rjmp	.+730    	; 0x308 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c1       	rjmp	.+726    	; 0x308 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c1       	rjmp	.+722    	; 0x308 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c1       	rjmp	.+718    	; 0x308 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c1       	rjmp	.+714    	; 0x308 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c1       	rjmp	.+710    	; 0x308 <__bad_interrupt>
      42:	00 00       	nop
      44:	61 c1       	rjmp	.+706    	; 0x308 <__bad_interrupt>
      46:	00 00       	nop
      48:	5f c1       	rjmp	.+702    	; 0x308 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c1       	rjmp	.+698    	; 0x308 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c1       	rjmp	.+694    	; 0x308 <__bad_interrupt>
      52:	00 00       	nop
      54:	59 c1       	rjmp	.+690    	; 0x308 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c1       	rjmp	.+686    	; 0x308 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c1       	rjmp	.+682    	; 0x308 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c1       	rjmp	.+678    	; 0x308 <__bad_interrupt>
      62:	00 00       	nop
      64:	51 c1       	rjmp	.+674    	; 0x308 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c1       	rjmp	.+670    	; 0x308 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4d c1       	rjmp	.+666    	; 0x308 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c1       	rjmp	.+662    	; 0x308 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c1       	rjmp	.+658    	; 0x308 <__bad_interrupt>
      76:	00 00       	nop
      78:	47 c1       	rjmp	.+654    	; 0x308 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	45 c1       	rjmp	.+650    	; 0x308 <__bad_interrupt>
      7e:	00 00       	nop
      80:	43 c1       	rjmp	.+646    	; 0x308 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c1       	rjmp	.+642    	; 0x308 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c1       	rjmp	.+638    	; 0x308 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3d c1       	rjmp	.+634    	; 0x308 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3b c1       	rjmp	.+630    	; 0x308 <__bad_interrupt>
      92:	00 00       	nop
      94:	39 c1       	rjmp	.+626    	; 0x308 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4301>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4294>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4289>:
     11d:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
     12d:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

00000138 <__c.4287>:
     138:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
     148:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

00000154 <__c.4285>:
     154:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 56 65     Error Getting Ve
     164:	6e 64 6f 72 20 49 44 2e 0d 0a 00                    ndor ID....

0000016f <__c.4282>:
     16f:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     17f:	76 69 63 65 20 50 61 63 6b 65 74 20 46 69 6c 74     vice Packet Filt
     18f:	65 72 2e 0d 0a 00                                   er....

00000195 <__c.4279>:
     195:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     1a5:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
     1b5:	74 65 73 2e 0d 0a 00                                tes....

000001bc <__c.4277>:
     1bc:	45 72 72 6f 72 20 49 6e 69 74 69 61 6c 69 7a 69     Error Initializi
     1cc:	6e 67 20 44 65 76 69 63 65 2e 0d 0a 00              ng Device....

000001d9 <__c.4275>:
     1d9:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1e9:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1f9:	6f 6e 2e 0d 0a 00                                   on....

000001ff <__c.4273>:
     1ff:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     20f:	4e 6f 74 20 61 20 56 61 6c 69 64 20 52 4e 44 49     Not a Valid RNDI
     21f:	53 20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d     S Class Device..
     22f:	0a 00                                               ..

00000231 <__c.4271>:
     231:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     241:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     251:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

0000025e <__c.4264>:
     25e:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     26e:	68 65 64 2e 0d 0a 00                                hed....

00000275 <__c.4259>:
     275:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     285:	0d 0a 00                                            ...

00000288 <__c.4251>:
     288:	0d 0a 0d 0a 00                                      .....

0000028d <__c.4245>:
     28d:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
     29d:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

000002a6 <__c.4238>:
     2a6:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
     2b6:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     2c6:	5b 33 37 6d 00 00                                   [37m..

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d0 e2       	ldi	r29, 0x20	; 32
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	e6 e3       	ldi	r30, 0x36	; 54
     2e0:	f1 e2       	ldi	r31, 0x21	; 33
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	0b bf       	out	0x3b, r16	; 59
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x14>
     2e8:	07 90       	elpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	aa 33       	cpi	r26, 0x3A	; 58
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0x10>

000002f2 <__do_clear_bss>:
     2f2:	15 e0       	ldi	r17, 0x05	; 5
     2f4:	aa e3       	ldi	r26, 0x3A	; 58
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	ac 35       	cpi	r26, 0x5C	; 92
     2fe:	b1 07       	cpc	r27, r17
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
     302:	a8 d0       	rcall	.+336    	; 0x454 <main>
     304:	0c 94 99 10 	jmp	0x2132	; 0x2132 <_exit>

00000308 <__bad_interrupt>:
     308:	7b ce       	rjmp	.-778    	; 0x0 <__vectors>

0000030a <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     30a:	9b b1       	in	r25, 0x0b	; 11
     30c:	9f 70       	andi	r25, 0x0F	; 15
     30e:	98 2b       	or	r25, r24
     310:	9b b9       	out	0x0b, r25	; 11
			}
     312:	08 95       	ret

00000314 <RNDISHost_Task>:

/** Task to manage an enumerated USB RNDIS device once connected, to display device
 *  received data packets.
 */
void RNDISHost_Task(void)
{
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	df 93       	push	r29
     322:	cf 93       	push	r28
     324:	00 d0       	rcall	.+0      	; 0x326 <RNDISHost_Task+0x12>
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     32a:	80 91 47 05 	lds	r24, 0x0547
     32e:	8b 30       	cpi	r24, 0x0B	; 11
     330:	09 f0       	breq	.+2      	; 0x334 <RNDISHost_Task+0x20>
     332:	57 c0       	rjmp	.+174    	; 0x3e2 <RNDISHost_Task+0xce>
	  return;

	if (RNDIS_Host_IsPacketReceived(&Ethernet_RNDIS_Interface))
     334:	88 e0       	ldi	r24, 0x08	; 8
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	0e 94 b5 0c 	call	0x196a	; 0x196a <RNDIS_Host_IsPacketReceived>
     33c:	88 23       	and	r24, r24
     33e:	09 f4       	brne	.+2      	; 0x342 <RNDISHost_Task+0x2e>
     340:	50 c0       	rjmp	.+160    	; 0x3e2 <RNDISHost_Task+0xce>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     342:	80 e2       	ldi	r24, 0x20	; 32
     344:	e2 df       	rcall	.-60     	; 0x30a <LEDs_SetAllLEDs>

		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);
     346:	88 e0       	ldi	r24, 0x08	; 8
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	6a e3       	ldi	r22, 0x3A	; 58
     34c:	71 e0       	ldi	r23, 0x01	; 1
     34e:	ae 01       	movw	r20, r28
     350:	4f 5f       	subi	r20, 0xFF	; 255
     352:	5f 4f       	sbci	r21, 0xFF	; 255
     354:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <RNDIS_Host_ReadPacket>

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);
     358:	00 d0       	rcall	.+0      	; 0x35a <RNDISHost_Task+0x46>
     35a:	00 d0       	rcall	.+0      	; 0x35c <RNDISHost_Task+0x48>
     35c:	8d e8       	ldi	r24, 0x8D	; 141
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	ed b7       	in	r30, 0x3d	; 61
     362:	fe b7       	in	r31, 0x3e	; 62
     364:	92 83       	std	Z+2, r25	; 0x02
     366:	81 83       	std	Z+1, r24	; 0x01
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	9a 81       	ldd	r25, Y+2	; 0x02
     36c:	94 83       	std	Z+4, r25	; 0x04
     36e:	83 83       	std	Z+3, r24	; 0x03
     370:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <printf_P>
     374:	9a e3       	ldi	r25, 0x3A	; 58
     376:	e9 2e       	mov	r14, r25
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	f9 2e       	mov	r15, r25

		for (uint16_t i = 0; i < PacketLength; i++)
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	00 e0       	ldi	r16, 0x00	; 0
     386:	10 e0       	ldi	r17, 0x00	; 0
		  printf("0x%02x ", PacketBuffer[i]);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	c8 2e       	mov	r12, r24
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	d8 2e       	mov	r13, r24
		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);

		for (uint16_t i = 0; i < PacketLength; i++)
     390:	16 c0       	rjmp	.+44     	; 0x3be <RNDISHost_Task+0xaa>
		  printf("0x%02x ", PacketBuffer[i]);
     392:	f7 01       	movw	r30, r14
     394:	81 91       	ld	r24, Z+
     396:	7f 01       	movw	r14, r30
     398:	00 d0       	rcall	.+0      	; 0x39a <RNDISHost_Task+0x86>
     39a:	00 d0       	rcall	.+0      	; 0x39c <RNDISHost_Task+0x88>
     39c:	ed b7       	in	r30, 0x3d	; 61
     39e:	fe b7       	in	r31, 0x3e	; 62
     3a0:	d2 82       	std	Z+2, r13	; 0x02
     3a2:	c1 82       	std	Z+1, r12	; 0x01
     3a4:	99 27       	eor	r25, r25
     3a6:	87 fd       	sbrc	r24, 7
     3a8:	90 95       	com	r25
     3aa:	94 83       	std	Z+4, r25	; 0x04
     3ac:	83 83       	std	Z+3, r24	; 0x03
     3ae:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <printf>
		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);

		for (uint16_t i = 0; i < PacketLength; i++)
     3b2:	0f 5f       	subi	r16, 0xFF	; 255
     3b4:	1f 4f       	sbci	r17, 0xFF	; 255
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	9a 81       	ldd	r25, Y+2	; 0x02
     3c2:	08 17       	cp	r16, r24
     3c4:	19 07       	cpc	r17, r25
     3c6:	28 f3       	brcs	.-54     	; 0x392 <RNDISHost_Task+0x7e>
		  printf("0x%02x ", PacketBuffer[i]);

		printf_P(PSTR("\r\n\r\n"));
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <RNDISHost_Task+0xb6>
     3ca:	88 e8       	ldi	r24, 0x88	; 136
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	ed b7       	in	r30, 0x3d	; 61
     3d0:	fe b7       	in	r31, 0x3e	; 62
     3d2:	92 83       	std	Z+2, r25	; 0x02
     3d4:	81 83       	std	Z+1, r24	; 0x01
     3d6:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <printf_P>

		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	80 e6       	ldi	r24, 0x60	; 96
     3e0:	94 df       	rcall	.-216    	; 0x30a <LEDs_SetAllLEDs>
	}
}
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	cf 91       	pop	r28
     3e8:	df 91       	pop	r29
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	df 90       	pop	r13
     3f4:	cf 90       	pop	r12
     3f6:	08 95       	ret

000003f8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3f8:	84 b7       	in	r24, 0x34	; 52
     3fa:	87 7f       	andi	r24, 0xF7	; 247
     3fc:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3fe:	28 e1       	ldi	r18, 0x18	; 24
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	20 93 60 00 	sts	0x0060, r18
     408:	10 92 60 00 	sts	0x0060, r1
     40c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	80 e8       	ldi	r24, 0x80	; 128
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	80 93 61 00 	sts	0x0061, r24
     41a:	90 93 61 00 	sts	0x0061, r25
     41e:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     420:	83 e3       	ldi	r24, 0x33	; 51
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	90 93 cd 00 	sts	0x00CD, r25
     428:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     42c:	86 e0       	ldi	r24, 0x06	; 6
     42e:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     432:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     436:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     43a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     43c:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     43e:	8a b1       	in	r24, 0x0a	; 10
     440:	80 6f       	ori	r24, 0xF0	; 240
     442:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     444:	8b b1       	in	r24, 0x0b	; 11
     446:	8f 70       	andi	r24, 0x0F	; 15
     448:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     44a:	00 d5       	rcall	.+2560   	; 0xe4c <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <Serial_CreateStream>

00000454 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     454:	d1 df       	rcall	.-94     	; 0x3f8 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "RNDIS Host Demo running.\r\n" ESC_FG_WHITE));
     456:	86 ea       	ldi	r24, 0xA6	; 166
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     45e:	80 e1       	ldi	r24, 0x10	; 16
     460:	54 df       	rcall	.-344    	; 0x30a <LEDs_SetAllLEDs>
	sei();
     462:	78 94       	sei

	for (;;)
	{
		RNDISHost_Task();
     464:	57 df       	rcall	.-338    	; 0x314 <RNDISHost_Task>

		RNDIS_Host_USBTask(&Ethernet_RNDIS_Interface);
		USB_USBTask();
     466:	88 d7       	rcall	.+3856   	; 0x1378 <USB_USBTask>
     468:	fd cf       	rjmp	.-6      	; 0x464 <main+0x10>

0000046a <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     46a:	85 e7       	ldi	r24, 0x75	; 117
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     472:	80 ea       	ldi	r24, 0xA0	; 160
}
     474:	4a cf       	rjmp	.-364    	; 0x30a <LEDs_SetAllLEDs>

00000476 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     476:	8e e5       	ldi	r24, 0x5E	; 94
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     47e:	80 e1       	ldi	r24, 0x10	; 16
}
     480:	44 cf       	rjmp	.-376    	; 0x30a <LEDs_SetAllLEDs>

00000482 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	ca 50       	subi	r28, 0x0A	; 10
     490:	d2 40       	sbci	r29, 0x02	; 2
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	f8 94       	cli
     496:	de bf       	out	0x3e, r29	; 62
     498:	0f be       	out	0x3f, r0	; 63
     49a:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     49c:	80 ea       	ldi	r24, 0xA0	; 160
     49e:	35 df       	rcall	.-406    	; 0x30a <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4a0:	8e 01       	movw	r16, r28
     4a2:	05 5f       	subi	r16, 0xF5	; 245
     4a4:	1f 4f       	sbci	r17, 0xFF	; 255
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	be 01       	movw	r22, r28
     4aa:	6f 5f       	subi	r22, 0xFF	; 255
     4ac:	7f 4f       	sbci	r23, 0xFF	; 255
     4ae:	a8 01       	movw	r20, r16
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	32 e0       	ldi	r19, 0x02	; 2
     4b4:	79 d5       	rcall	.+2802   	; 0xfa8 <USB_Host_GetDeviceConfigDescriptor>
     4b6:	88 23       	and	r24, r24
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4ba:	81 e3       	ldi	r24, 0x31	; 49
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	11 c0       	rjmp	.+34     	; 0x4e2 <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (RNDIS_Host_ConfigurePipes(&Ethernet_RNDIS_Interface,
     4c0:	69 81       	ldd	r22, Y+1	; 0x01
     4c2:	7a 81       	ldd	r23, Y+2	; 0x02
     4c4:	88 e0       	ldi	r24, 0x08	; 8
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	a8 01       	movw	r20, r16
     4ca:	ca d7       	rcall	.+3988   	; 0x1460 <RNDIS_Host_ConfigurePipes>
     4cc:	88 23       	and	r24, r24
     4ce:	19 f0       	breq	.+6      	; 0x4d6 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
	                              ConfigDescriptorSize, ConfigDescriptorData) != RNDIS_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid RNDIS Class Device.\r\n"));
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	2a d7       	rcall	.+3668   	; 0x132e <USB_Host_SetDeviceConfiguration>
     4da:	88 23       	and	r24, r24
     4dc:	31 f0       	breq	.+12     	; 0x4ea <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4de:	89 ed       	ldi	r24, 0xD9	; 217
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4e6:	80 e9       	ldi	r24, 0x90	; 144
     4e8:	7a c0       	rjmp	.+244    	; 0x5de <EVENT_USB_Host_DeviceEnumerationComplete+0x15c>
		return;
	}

	if (RNDIS_Host_InitializeDevice(&Ethernet_RNDIS_Interface) != HOST_SENDCONTROL_Successful)
     4ea:	88 e0       	ldi	r24, 0x08	; 8
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	0e 94 00 0b 	call	0x1600	; 0x1600 <RNDIS_Host_InitializeDevice>
     4f2:	88 23       	and	r24, r24
     4f4:	19 f0       	breq	.+6      	; 0x4fc <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
	{
		puts_P(PSTR("Error Initializing Device.\r\n"));
     4f6:	8c eb       	ldi	r24, 0xBC	; 188
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	4a c0       	rjmp	.+148    	; 0x590 <EVENT_USB_Host_DeviceEnumerationComplete+0x10e>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device Max Transfer Size: %lu bytes.\r\n"), Ethernet_RNDIS_Interface.State.DeviceMaxPacketSize);
     4fc:	00 d0       	rcall	.+0      	; 0x4fe <EVENT_USB_Host_DeviceEnumerationComplete+0x7c>
     4fe:	00 d0       	rcall	.+0      	; 0x500 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     500:	00 d0       	rcall	.+0      	; 0x502 <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
     502:	85 e9       	ldi	r24, 0x95	; 149
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	ed b7       	in	r30, 0x3d	; 61
     508:	fe b7       	in	r31, 0x3e	; 62
     50a:	92 83       	std	Z+2, r25	; 0x02
     50c:	81 83       	std	Z+1, r24	; 0x01
     50e:	80 91 20 01 	lds	r24, 0x0120
     512:	90 91 21 01 	lds	r25, 0x0121
     516:	a0 91 22 01 	lds	r26, 0x0122
     51a:	b0 91 23 01 	lds	r27, 0x0123
     51e:	83 83       	std	Z+3, r24	; 0x03
     520:	94 83       	std	Z+4, r25	; 0x04
     522:	a5 83       	std	Z+5, r26	; 0x05
     524:	b6 83       	std	Z+6, r27	; 0x06
     526:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <printf_P>

	uint32_t PacketFilter = (REMOTE_NDIS_PACKET_DIRECTED | REMOTE_NDIS_PACKET_BROADCAST | REMOTE_NDIS_PACKET_ALL_MULTICAST);
     52a:	8d e0       	ldi	r24, 0x0D	; 13
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	a0 e0       	ldi	r26, 0x00	; 0
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	8b 83       	std	Y+3, r24	; 0x03
     534:	9c 83       	std	Y+4, r25	; 0x04
     536:	ad 83       	std	Y+5, r26	; 0x05
     538:	be 83       	std	Y+6, r27	; 0x06
	if (RNDIS_Host_SetRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_CURRENT_PACKET_FILTER,
     53a:	8d b7       	in	r24, 0x3d	; 61
     53c:	9e b7       	in	r25, 0x3e	; 62
     53e:	06 96       	adiw	r24, 0x06	; 6
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	9e bf       	out	0x3e, r25	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	8d bf       	out	0x3d, r24	; 61
     54a:	88 e0       	ldi	r24, 0x08	; 8
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	4e e0       	ldi	r20, 0x0E	; 14
     550:	51 e0       	ldi	r21, 0x01	; 1
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	9e 01       	movw	r18, r28
     558:	2d 5f       	subi	r18, 0xFD	; 253
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	04 e0       	ldi	r16, 0x04	; 4
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	0e 94 76 0b 	call	0x16ec	; 0x16ec <RNDIS_Host_SetRNDISProperty>
     564:	88 23       	and	r24, r24
     566:	19 f0       	breq	.+6      	; 0x56e <EVENT_USB_Host_DeviceEnumerationComplete+0xec>
	                                &PacketFilter, sizeof(PacketFilter)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Setting Device Packet Filter.\r\n"));
     568:	8f e6       	ldi	r24, 0x6F	; 111
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	11 c0       	rjmp	.+34     	; 0x590 <EVENT_USB_Host_DeviceEnumerationComplete+0x10e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	uint32_t VendorID;
	if (RNDIS_Host_QueryRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_VENDOR_ID,
     56e:	88 e0       	ldi	r24, 0x08	; 8
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	4c e0       	ldi	r20, 0x0C	; 12
     574:	51 e0       	ldi	r21, 0x01	; 1
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	9e 01       	movw	r18, r28
     57c:	29 5f       	subi	r18, 0xF9	; 249
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	04 e0       	ldi	r16, 0x04	; 4
     582:	10 e0       	ldi	r17, 0x00	; 0
     584:	0e 94 15 0c 	call	0x182a	; 0x182a <RNDIS_Host_QueryRNDISProperty>
     588:	88 23       	and	r24, r24
     58a:	49 f0       	breq	.+18     	; 0x59e <EVENT_USB_Host_DeviceEnumerationComplete+0x11c>
	                                  &VendorID, sizeof(VendorID)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Getting Vendor ID.\r\n"));
     58c:	84 e5       	ldi	r24, 0x54	; 84
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <puts_P>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     594:	80 e9       	ldi	r24, 0x90	; 144
     596:	b9 de       	rcall	.-654    	; 0x30a <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	c9 d6       	rcall	.+3474   	; 0x132e <USB_Host_SetDeviceConfiguration>
		return;
     59c:	21 c0       	rjmp	.+66     	; 0x5e0 <EVENT_USB_Host_DeviceEnumerationComplete+0x15e>
	}

	printf_P(PSTR("Device Vendor ID: 0x%08lX\r\n"), VendorID);
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <EVENT_USB_Host_DeviceEnumerationComplete+0x11e>
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x120>
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x122>
     5a4:	88 e3       	ldi	r24, 0x38	; 56
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	ed b7       	in	r30, 0x3d	; 61
     5aa:	fe b7       	in	r31, 0x3e	; 62
     5ac:	92 83       	std	Z+2, r25	; 0x02
     5ae:	81 83       	std	Z+1, r24	; 0x01
     5b0:	8f 81       	ldd	r24, Y+7	; 0x07
     5b2:	98 85       	ldd	r25, Y+8	; 0x08
     5b4:	a9 85       	ldd	r26, Y+9	; 0x09
     5b6:	ba 85       	ldd	r27, Y+10	; 0x0a
     5b8:	83 83       	std	Z+3, r24	; 0x03
     5ba:	94 83       	std	Z+4, r25	; 0x04
     5bc:	a5 83       	std	Z+5, r26	; 0x05
     5be:	b6 83       	std	Z+6, r27	; 0x06
     5c0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <printf_P>

	puts_P(PSTR("RNDIS Device Enumerated.\r\n"));
     5c4:	8d b7       	in	r24, 0x3d	; 61
     5c6:	9e b7       	in	r25, 0x3e	; 62
     5c8:	06 96       	adiw	r24, 0x06	; 6
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	9e bf       	out	0x3e, r25	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	8d bf       	out	0x3d, r24	; 61
     5d4:	8d e1       	ldi	r24, 0x1D	; 29
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     5dc:	80 e6       	ldi	r24, 0x60	; 96
     5de:	95 de       	rcall	.-726    	; 0x30a <LEDs_SetAllLEDs>
}
     5e0:	c6 5f       	subi	r28, 0xF6	; 246
     5e2:	dd 4f       	sbci	r29, 0xFD	; 253
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	cf 91       	pop	r28
     5f0:	df 91       	pop	r29
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	08 95       	ret

000005f8 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     5f8:	df 93       	push	r29
     5fa:	cf 93       	push	r28
     5fc:	0f 92       	push	r0
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	bb d3       	rcall	.+1910   	; 0xd7c <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     606:	00 d0       	rcall	.+0      	; 0x608 <EVENT_USB_Host_HostError+0x10>
     608:	00 d0       	rcall	.+0      	; 0x60a <EVENT_USB_Host_HostError+0x12>
     60a:	ed b7       	in	r30, 0x3d	; 61
     60c:	fe b7       	in	r31, 0x3e	; 62
     60e:	31 96       	adiw	r30, 0x01	; 1
     610:	2e ee       	ldi	r18, 0xEE	; 238
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	ad b7       	in	r26, 0x3d	; 61
     616:	be b7       	in	r27, 0x3e	; 62
     618:	12 96       	adiw	r26, 0x02	; 2
     61a:	3c 93       	st	X, r19
     61c:	2e 93       	st	-X, r18
     61e:	11 97       	sbiw	r26, 0x01	; 1
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	82 83       	std	Z+2, r24	; 0x02
     624:	13 82       	std	Z+3, r1	; 0x03
     626:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	80 e9       	ldi	r24, 0x90	; 144
     634:	6a de       	rcall	.-812    	; 0x30a <LEDs_SetAllLEDs>
     636:	ff cf       	rjmp	.-2      	; 0x636 <EVENT_USB_Host_HostError+0x3e>

00000638 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     638:	90 91 47 05 	lds	r25, 0x0547
     63c:	2d b7       	in	r18, 0x3d	; 61
     63e:	3e b7       	in	r19, 0x3e	; 62
     640:	28 50       	subi	r18, 0x08	; 8
     642:	30 40       	sbci	r19, 0x00	; 0
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	3e bf       	out	0x3e, r19	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	2d bf       	out	0x3d, r18	; 61
     64e:	ed b7       	in	r30, 0x3d	; 61
     650:	fe b7       	in	r31, 0x3e	; 62
     652:	31 96       	adiw	r30, 0x01	; 1
     654:	28 e9       	ldi	r18, 0x98	; 152
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	ad b7       	in	r26, 0x3d	; 61
     65a:	be b7       	in	r27, 0x3e	; 62
     65c:	12 96       	adiw	r26, 0x02	; 2
     65e:	3c 93       	st	X, r19
     660:	2e 93       	st	-X, r18
     662:	11 97       	sbiw	r26, 0x01	; 1
     664:	82 83       	std	Z+2, r24	; 0x02
     666:	13 82       	std	Z+3, r1	; 0x03
     668:	64 83       	std	Z+4, r22	; 0x04
     66a:	15 82       	std	Z+5, r1	; 0x05
     66c:	96 83       	std	Z+6, r25	; 0x06
     66e:	17 82       	std	Z+7, r1	; 0x07
     670:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     674:	2d b7       	in	r18, 0x3d	; 61
     676:	3e b7       	in	r19, 0x3e	; 62
     678:	28 5f       	subi	r18, 0xF8	; 248
     67a:	3f 4f       	sbci	r19, 0xFF	; 255
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	3e bf       	out	0x3e, r19	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	2d bf       	out	0x3d, r18	; 61
     686:	80 e9       	ldi	r24, 0x90	; 144
}
     688:	40 ce       	rjmp	.-896    	; 0x30a <LEDs_SetAllLEDs>

0000068a <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     68a:	80 91 9e 00 	lds	r24, 0x009E
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	81 70       	andi	r24, 0x01	; 1
     692:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     694:	20 91 a0 00 	lds	r18, 0x00A0
     698:	2d 7f       	andi	r18, 0xFD	; 253
     69a:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     69e:	20 91 9e 00 	lds	r18, 0x009E
     6a2:	22 60       	ori	r18, 0x02	; 2
     6a4:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6a8:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6ac:	21 fd       	sbrc	r18, 1
     6ae:	fc cf       	rjmp	.-8      	; 0x6a8 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6b0:	20 91 9e 00 	lds	r18, 0x009E
     6b4:	21 60       	ori	r18, 0x01	; 1
     6b6:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     6ba:	10 92 3d 05 	sts	0x053D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6be:	20 91 a0 00 	lds	r18, 0x00A0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	20 72       	andi	r18, 0x20	; 32
     6c6:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6c8:	40 91 a0 00 	lds	r20, 0x00A0
     6cc:	4f 7d       	andi	r20, 0xDF	; 223
     6ce:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6d2:	40 91 9f 00 	lds	r20, 0x009F
     6d6:	4f 7d       	andi	r20, 0xDF	; 223
     6d8:	40 93 9f 00 	sts	0x009F, r20
     6dc:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6de:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6e2:	55 ff       	sbrs	r21, 5
     6e4:	0b c0       	rjmp	.+22     	; 0x6fc <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6e6:	40 91 9f 00 	lds	r20, 0x009F
     6ea:	4f 7d       	andi	r20, 0xDF	; 223
     6ec:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     6f0:	40 91 9f 00 	lds	r20, 0x009F
     6f4:	4d 7f       	andi	r20, 0xFD	; 253
     6f6:	40 93 9f 00 	sts	0x009F, r20
     6fa:	08 c0       	rjmp	.+16     	; 0x70c <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6fc:	ef ec       	ldi	r30, 0xCF	; 207
     6fe:	f7 e0       	ldi	r31, 0x07	; 7
     700:	31 97       	sbiw	r30, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <USB_Host_ResetDevice+0x76>
     704:	00 c0       	rjmp	.+0      	; 0x706 <USB_Host_ResetDevice+0x7c>
     706:	00 00       	nop
     708:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     70a:	49 f7       	brne	.-46     	; 0x6de <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     70c:	21 15       	cp	r18, r1
     70e:	31 05       	cpc	r19, r1
     710:	29 f0       	breq	.+10     	; 0x71c <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     712:	20 91 a0 00 	lds	r18, 0x00A0
     716:	20 62       	ori	r18, 0x20	; 32
     718:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	29 f4       	brne	.+10     	; 0x72a <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     720:	80 91 9e 00 	lds	r24, 0x009E
     724:	8e 7f       	andi	r24, 0xFE	; 254
     726:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     72a:	80 91 a0 00 	lds	r24, 0x00A0
     72e:	82 60       	ori	r24, 0x02	; 2
     730:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     734:	08 95       	ret

00000736 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     736:	40 91 9e 00 	lds	r20, 0x009E
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	41 70       	andi	r20, 0x01	; 1
     73e:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     740:	20 91 a0 00 	lds	r18, 0x00A0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	20 72       	andi	r18, 0x20	; 32
     748:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     74a:	90 91 a0 00 	lds	r25, 0x00A0
     74e:	9f 7d       	andi	r25, 0xDF	; 223
     750:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     754:	90 91 9f 00 	lds	r25, 0x009F
     758:	9f 7d       	andi	r25, 0xDF	; 223
     75a:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     75e:	90 91 9e 00 	lds	r25, 0x009E
     762:	91 60       	ori	r25, 0x01	; 1
     764:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     768:	26 c0       	rjmp	.+76     	; 0x7b6 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     76a:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     76e:	95 ff       	sbrs	r25, 5
     770:	06 c0       	rjmp	.+12     	; 0x77e <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     772:	90 91 9f 00 	lds	r25, 0x009F
     776:	9f 7d       	andi	r25, 0xDF	; 223
     778:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     77c:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     77e:	90 91 47 05 	lds	r25, 0x0547
     782:	91 30       	cpi	r25, 0x01	; 1
     784:	d9 f0       	breq	.+54     	; 0x7bc <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     786:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     78a:	94 ff       	sbrs	r25, 4
     78c:	09 c0       	rjmp	.+18     	; 0x7a0 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     78e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     792:	80 91 a6 00 	lds	r24, 0x00A6
     796:	8f 7e       	andi	r24, 0xEF	; 239
     798:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     79c:	82 e0       	ldi	r24, 0x02	; 2

			break;
     79e:	0f c0       	rjmp	.+30     	; 0x7be <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     7a0:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     7a4:	91 ff       	sbrs	r25, 1
     7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     7a8:	80 91 a6 00 	lds	r24, 0x00A6
     7ac:	8d 7f       	andi	r24, 0xFD	; 253
     7ae:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     7b2:	83 e0       	ldi	r24, 0x03	; 3

			break;
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     7b6:	88 23       	and	r24, r24
     7b8:	c1 f6       	brne	.-80     	; 0x76a <USB_Host_WaitMS+0x34>
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     7bc:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     7be:	41 15       	cp	r20, r1
     7c0:	51 05       	cpc	r21, r1
     7c2:	29 f4       	brne	.+10     	; 0x7ce <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7c4:	90 91 9e 00 	lds	r25, 0x009E
     7c8:	9e 7f       	andi	r25, 0xFE	; 254
     7ca:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     7ce:	21 15       	cp	r18, r1
     7d0:	31 05       	cpc	r19, r1
     7d2:	29 f0       	breq	.+10     	; 0x7de <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     7d4:	90 91 a0 00 	lds	r25, 0x00A0
     7d8:	90 62       	ori	r25, 0x20	; 32
     7da:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     7de:	08 95       	ret

000007e0 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	28 97       	sbiw	r28, 0x08	; 8
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     7f8:	80 91 47 05 	lds	r24, 0x0547
     7fc:	85 30       	cpi	r24, 0x05	; 5
     7fe:	09 f4       	brne	.+2      	; 0x802 <USB_Host_ProcessNextHostState+0x22>
     800:	99 c0       	rjmp	.+306    	; 0x934 <USB_Host_ProcessNextHostState+0x154>
     802:	86 30       	cpi	r24, 0x06	; 6
     804:	68 f4       	brcc	.+26     	; 0x820 <USB_Host_ProcessNextHostState+0x40>
     806:	82 30       	cpi	r24, 0x02	; 2
     808:	c1 f1       	breq	.+112    	; 0x87a <USB_Host_ProcessNextHostState+0x9a>
     80a:	83 30       	cpi	r24, 0x03	; 3
     80c:	18 f4       	brcc	.+6      	; 0x814 <USB_Host_ProcessNextHostState+0x34>
     80e:	88 23       	and	r24, r24
     810:	a1 f0       	breq	.+40     	; 0x83a <USB_Host_ProcessNextHostState+0x5a>
     812:	04 c1       	rjmp	.+520    	; 0xa1c <USB_Host_ProcessNextHostState+0x23c>
     814:	83 30       	cpi	r24, 0x03	; 3
     816:	d9 f1       	breq	.+118    	; 0x88e <USB_Host_ProcessNextHostState+0xae>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f0       	breq	.+2      	; 0x81e <USB_Host_ProcessNextHostState+0x3e>
     81c:	ff c0       	rjmp	.+510    	; 0xa1c <USB_Host_ProcessNextHostState+0x23c>
     81e:	62 c0       	rjmp	.+196    	; 0x8e4 <USB_Host_ProcessNextHostState+0x104>
     820:	87 30       	cpi	r24, 0x07	; 7
     822:	09 f4       	brne	.+2      	; 0x826 <USB_Host_ProcessNextHostState+0x46>
     824:	9e c0       	rjmp	.+316    	; 0x962 <USB_Host_ProcessNextHostState+0x182>
     826:	87 30       	cpi	r24, 0x07	; 7
     828:	08 f4       	brcc	.+2      	; 0x82c <USB_Host_ProcessNextHostState+0x4c>
     82a:	8f c0       	rjmp	.+286    	; 0x94a <USB_Host_ProcessNextHostState+0x16a>
     82c:	88 30       	cpi	r24, 0x08	; 8
     82e:	09 f4       	brne	.+2      	; 0x832 <USB_Host_ProcessNextHostState+0x52>
     830:	b8 c0       	rjmp	.+368    	; 0x9a2 <USB_Host_ProcessNextHostState+0x1c2>
     832:	89 30       	cpi	r24, 0x09	; 9
     834:	09 f0       	breq	.+2      	; 0x838 <USB_Host_ProcessNextHostState+0x58>
     836:	f2 c0       	rjmp	.+484    	; 0xa1c <USB_Host_ProcessNextHostState+0x23c>
     838:	d9 c0       	rjmp	.+434    	; 0x9ec <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     83a:	00 91 3b 05 	lds	r16, 0x053B
     83e:	10 91 3c 05 	lds	r17, 0x053C
     842:	01 15       	cp	r16, r1
     844:	11 05       	cpc	r17, r1
     846:	09 f4       	brne	.+2      	; 0x84a <USB_Host_ProcessNextHostState+0x6a>
     848:	e9 c0       	rjmp	.+466    	; 0xa1c <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	74 df       	rcall	.-280    	; 0x736 <USB_Host_WaitMS>
     84e:	68 2f       	mov	r22, r24
     850:	88 23       	and	r24, r24
     852:	31 f0       	breq	.+12     	; 0x860 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     854:	80 91 3a 05 	lds	r24, 0x053A
     858:	80 93 47 05 	sts	0x0547, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     85c:	81 e0       	ldi	r24, 0x01	; 1
					break;
     85e:	d2 c0       	rjmp	.+420    	; 0xa04 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     860:	01 50       	subi	r16, 0x01	; 1
     862:	10 40       	sbci	r17, 0x00	; 0
     864:	10 93 3c 05 	sts	0x053C, r17
     868:	00 93 3b 05 	sts	0x053B, r16
     86c:	01 15       	cp	r16, r1
     86e:	11 05       	cpc	r17, r1
     870:	09 f0       	breq	.+2      	; 0x874 <USB_Host_ProcessNextHostState+0x94>
     872:	d4 c0       	rjmp	.+424    	; 0xa1c <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     874:	80 91 3a 05 	lds	r24, 0x053A
     878:	07 c0       	rjmp	.+14     	; 0x888 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     87a:	88 ee       	ldi	r24, 0xE8	; 232
     87c:	93 e0       	ldi	r25, 0x03	; 3
     87e:	90 93 3c 05 	sts	0x053C, r25
     882:	80 93 3b 05 	sts	0x053B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	80 93 47 05 	sts	0x0547, r24
			break;
     88c:	c7 c0       	rjmp	.+398    	; 0xa1c <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     88e:	80 91 3b 05 	lds	r24, 0x053B
     892:	90 91 3c 05 	lds	r25, 0x053C
     896:	9c 01       	movw	r18, r24
     898:	21 50       	subi	r18, 0x01	; 1
     89a:	30 40       	sbci	r19, 0x00	; 0
     89c:	30 93 3c 05 	sts	0x053C, r19
     8a0:	20 93 3b 05 	sts	0x053B, r18
     8a4:	00 97       	sbiw	r24, 0x00	; 0
     8a6:	39 f0       	breq	.+14     	; 0x8b6 <USB_Host_ProcessNextHostState+0xd6>
     8a8:	8f ec       	ldi	r24, 0xCF	; 207
     8aa:	97 e0       	ldi	r25, 0x07	; 7
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <USB_Host_ProcessNextHostState+0xcc>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <USB_Host_ProcessNextHostState+0xd2>
     8b2:	00 00       	nop
     8b4:	b3 c0       	rjmp	.+358    	; 0xa1c <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     8b6:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     8b8:	80 91 d8 00 	lds	r24, 0x00D8
     8bc:	80 61       	ori	r24, 0x10	; 16
     8be:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     8c2:	80 91 dd 00 	lds	r24, 0x00DD
     8c6:	8b 7f       	andi	r24, 0xFB	; 251
     8c8:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     8cc:	80 91 d7 00 	lds	r24, 0x00D7
     8d0:	80 61       	ori	r24, 0x10	; 16
     8d2:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     8d6:	80 91 dd 00 	lds	r24, 0x00DD
     8da:	82 60       	ori	r24, 0x02	; 2
     8dc:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     8e0:	84 e0       	ldi	r24, 0x04	; 4
     8e2:	d2 cf       	rjmp	.-92     	; 0x888 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     8e4:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     8e8:	80 ff       	sbrs	r24, 0
     8ea:	98 c0       	rjmp	.+304    	; 0xa1c <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     8ec:	80 91 9f 00 	lds	r24, 0x009F
     8f0:	8e 7f       	andi	r24, 0xFE	; 254
     8f2:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     8f6:	80 91 9f 00 	lds	r24, 0x009F
     8fa:	8d 7f       	andi	r24, 0xFD	; 253
     8fc:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     900:	80 91 df 00 	lds	r24, 0x00DF
     904:	8d 7f       	andi	r24, 0xFD	; 253
     906:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     90a:	80 91 de 00 	lds	r24, 0x00DE
     90e:	82 60       	ori	r24, 0x02	; 2
     910:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     914:	80 91 9e 00 	lds	r24, 0x009E
     918:	81 60       	ori	r24, 0x01	; 1
     91a:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     91e:	c5 d1       	rcall	.+906    	; 0xcaa <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     920:	10 92 47 05 	sts	0x0547, r1
     924:	84 e6       	ldi	r24, 0x64	; 100
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	90 93 3c 05 	sts	0x053C, r25
     92c:	80 93 3b 05 	sts	0x053B, r24
     930:	85 e0       	ldi	r24, 0x05	; 5
     932:	59 c0       	rjmp	.+178    	; 0x9e6 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     934:	aa de       	rcall	.-684    	; 0x68a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     936:	10 92 47 05 	sts	0x0547, r1
     93a:	88 ec       	ldi	r24, 0xC8	; 200
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	90 93 3c 05 	sts	0x053C, r25
     942:	80 93 3b 05 	sts	0x053B, r24
     946:	86 e0       	ldi	r24, 0x06	; 6
     948:	4e c0       	rjmp	.+156    	; 0x9e6 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	20 e4       	ldi	r18, 0x40	; 64
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	01 e0       	ldi	r16, 0x01	; 1
     956:	1b d1       	rcall	.+566    	; 0xb8e <Pipe_ConfigurePipe>
     958:	88 23       	and	r24, r24
     95a:	09 f4       	brne	.+2      	; 0x95e <USB_Host_ProcessNextHostState+0x17e>
     95c:	4f c0       	rjmp	.+158    	; 0x9fc <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     95e:	87 e0       	ldi	r24, 0x07	; 7
     960:	93 cf       	rjmp	.-218    	; 0x888 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     962:	af e3       	ldi	r26, 0x3F	; 63
     964:	b5 e0       	ldi	r27, 0x05	; 5
     966:	e0 e3       	ldi	r30, 0x30	; 48
     968:	f1 e0       	ldi	r31, 0x01	; 1
     96a:	88 e0       	ldi	r24, 0x08	; 8
     96c:	01 90       	ld	r0, Z+
     96e:	0d 92       	st	X+, r0
     970:	81 50       	subi	r24, 0x01	; 1
     972:	e1 f7       	brne	.-8      	; 0x96c <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     974:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     978:	ce 01       	movw	r24, r28
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	d9 d3       	rcall	.+1970   	; 0x1130 <USB_Host_SendControlRequest>
     97e:	68 2f       	mov	r22, r24
     980:	88 23       	and	r24, r24
     982:	09 f0       	breq	.+2      	; 0x986 <USB_Host_ProcessNextHostState+0x1a6>
     984:	3e c0       	rjmp	.+124    	; 0xa02 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     986:	88 85       	ldd	r24, Y+8	; 0x08
     988:	80 93 38 01 	sts	0x0138, r24

			USB_Host_ResetDevice();
     98c:	7e de       	rcall	.-772    	; 0x68a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     98e:	10 92 47 05 	sts	0x0547, r1
     992:	88 ec       	ldi	r24, 0xC8	; 200
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	90 93 3c 05 	sts	0x053C, r25
     99a:	80 93 3b 05 	sts	0x053B, r24
     99e:	88 e0       	ldi	r24, 0x08	; 8
     9a0:	22 c0       	rjmp	.+68     	; 0x9e6 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     9a2:	20 91 38 01 	lds	r18, 0x0138
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	01 e0       	ldi	r16, 0x01	; 1
     9b0:	ee d0       	rcall	.+476    	; 0xb8e <Pipe_ConfigurePipe>
     9b2:	88 23       	and	r24, r24
     9b4:	19 f1       	breq	.+70     	; 0x9fc <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     9b6:	af e3       	ldi	r26, 0x3F	; 63
     9b8:	b5 e0       	ldi	r27, 0x05	; 5
     9ba:	e8 e2       	ldi	r30, 0x28	; 40
     9bc:	f1 e0       	ldi	r31, 0x01	; 1
     9be:	88 e0       	ldi	r24, 0x08	; 8
     9c0:	01 90       	ld	r0, Z+
     9c2:	0d 92       	st	X+, r0
     9c4:	81 50       	subi	r24, 0x01	; 1
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	b1 d3       	rcall	.+1890   	; 0x1130 <USB_Host_SendControlRequest>
     9ce:	68 2f       	mov	r22, r24
     9d0:	88 23       	and	r24, r24
     9d2:	b9 f4       	brne	.+46     	; 0xa02 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     9d4:	10 92 47 05 	sts	0x0547, r1
     9d8:	84 e6       	ldi	r24, 0x64	; 100
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	90 93 3c 05 	sts	0x053C, r25
     9e0:	80 93 3b 05 	sts	0x053B, r24
     9e4:	89 e0       	ldi	r24, 0x09	; 9
     9e6:	80 93 3a 05 	sts	0x053A, r24
			break;
     9ea:	18 c0       	rjmp	.+48     	; 0xa1c <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     9f2:	8a e0       	ldi	r24, 0x0A	; 10
     9f4:	80 93 47 05 	sts	0x0547, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     9f8:	44 dd       	rcall	.-1400   	; 0x482 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     9fa:	10 c0       	rjmp	.+32     	; 0xa1c <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     9fc:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     9fe:	84 e0       	ldi	r24, 0x04	; 4
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     a02:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a04:	90 91 47 05 	lds	r25, 0x0547
     a08:	91 30       	cpi	r25, 0x01	; 1
     a0a:	41 f0       	breq	.+16     	; 0xa1c <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a0c:	15 de       	rcall	.-982    	; 0x638 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a0e:	80 91 dd 00 	lds	r24, 0x00DD
     a12:	81 60       	ori	r24, 0x01	; 1
     a14:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a18:	2e dd       	rcall	.-1444   	; 0x476 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a1a:	c8 d1       	rcall	.+912    	; 0xdac <USB_ResetInterface>
	}
}
     a1c:	28 96       	adiw	r28, 0x08	; 8
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	cf 91       	pop	r28
     a2a:	df 91       	pop	r29
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <Pipe_Discard_Stream>:

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	ec 01       	movw	r28, r24
     a42:	8b 01       	movw	r16, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     a44:	80 91 aa 00 	lds	r24, 0x00AA
     a48:	8f 7c       	andi	r24, 0xCF	; 207
     a4a:	80 61       	ori	r24, 0x10	; 16
     a4c:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	Pipe_SetPipeToken(PIPE_TOKEN_IN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     a50:	66 d1       	rcall	.+716    	; 0xd1e <Pipe_WaitUntilReady>
     a52:	d8 2e       	mov	r13, r24
     a54:	88 23       	and	r24, r24
     a56:	79 f5       	brne	.+94     	; 0xab6 <Pipe_Discard_Stream+0x84>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     a58:	01 15       	cp	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	29 f0       	breq	.+10     	; 0xa68 <Pipe_Discard_Stream+0x36>
	  Length -= *BytesProcessed;
     a5e:	f8 01       	movw	r30, r16
     a60:	20 81       	ld	r18, Z
     a62:	31 81       	ldd	r19, Z+1	; 0x01
     a64:	c2 1b       	sub	r28, r18
     a66:	d3 0b       	sbc	r29, r19

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     a68:	ee 24       	eor	r14, r14
     a6a:	ff 24       	eor	r15, r15
     a6c:	20 c0       	rjmp	.+64     	; 0xaae <Pipe_Discard_Stream+0x7c>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     a6e:	80 91 a6 00 	lds	r24, 0x00A6
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     a72:	85 fd       	sbrc	r24, 5
     a74:	16 c0       	rjmp	.+44     	; 0xaa2 <Pipe_Discard_Stream+0x70>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     a76:	80 91 a6 00 	lds	r24, 0x00A6
     a7a:	8e 77       	andi	r24, 0x7E	; 126
     a7c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearIN();
				
			if (BytesProcessed != NULL)
     a80:	01 15       	cp	r16, r1
     a82:	11 05       	cpc	r17, r1
     a84:	51 f0       	breq	.+20     	; 0xa9a <Pipe_Discard_Stream+0x68>
			{
				*BytesProcessed += BytesInTransfer;
     a86:	f8 01       	movw	r30, r16
     a88:	80 81       	ld	r24, Z
     a8a:	91 81       	ldd	r25, Z+1	; 0x01
     a8c:	8e 0d       	add	r24, r14
     a8e:	9f 1d       	adc	r25, r15
     a90:	91 83       	std	Z+1, r25	; 0x01
     a92:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     a94:	84 e0       	ldi	r24, 0x04	; 4
     a96:	d8 2e       	mov	r13, r24
     a98:	0e c0       	rjmp	.+28     	; 0xab6 <Pipe_Discard_Stream+0x84>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a9a:	41 d1       	rcall	.+642    	; 0xd1e <Pipe_WaitUntilReady>
     a9c:	88 23       	and	r24, r24
     a9e:	39 f0       	breq	.+14     	; 0xaae <Pipe_Discard_Stream+0x7c>
     aa0:	09 c0       	rjmp	.+18     	; 0xab4 <Pipe_Discard_Stream+0x82>
			static inline void Pipe_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UPDATX;
     aa2:	80 91 af 00 	lds	r24, 0x00AF
		}
		else
		{
			Pipe_Discard_8();
			
			Length--;
     aa6:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
     aa8:	08 94       	sec
     aaa:	e1 1c       	adc	r14, r1
     aac:	f1 1c       	adc	r15, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     aae:	20 97       	sbiw	r28, 0x00	; 0
     ab0:	f1 f6       	brne	.-68     	; 0xa6e <Pipe_Discard_Stream+0x3c>
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <Pipe_Discard_Stream+0x84>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     ab4:	d8 2e       	mov	r13, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     ab6:	8d 2d       	mov	r24, r13
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	08 95       	ret

00000ac8 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     ac8:	8f 92       	push	r8
     aca:	9f 92       	push	r9
     acc:	bf 92       	push	r11
     ace:	cf 92       	push	r12
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	df 93       	push	r29
     adc:	cf 93       	push	r28
     ade:	0f 92       	push	r0
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	e8 2e       	mov	r14, r24
     ae6:	4b 01       	movw	r8, r22
     ae8:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     aea:	80 91 aa 00 	lds	r24, 0x00AA
     aee:	8f 7c       	andi	r24, 0xCF	; 207
     af0:	80 61       	ori	r24, 0x10	; 16
     af2:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     af6:	99 83       	std	Y+1, r25	; 0x01
     af8:	12 d1       	rcall	.+548    	; 0xd1e <Pipe_WaitUntilReady>
     afa:	b8 2e       	mov	r11, r24
     afc:	99 81       	ldd	r25, Y+1	; 0x01
     afe:	88 23       	and	r24, r24
     b00:	c1 f5       	brne	.+112    	; 0xb72 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     b02:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     b04:	01 15       	cp	r16, r1
     b06:	11 05       	cpc	r17, r1
     b08:	39 f0       	breq	.+14     	; 0xb18 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     b0a:	f8 01       	movw	r30, r16
     b0c:	20 81       	ld	r18, Z
     b0e:	31 81       	ldd	r19, Z+1	; 0x01
     b10:	82 1a       	sub	r8, r18
     b12:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     b14:	e2 0e       	add	r14, r18
     b16:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     b18:	cc 24       	eor	r12, r12
     b1a:	dd 24       	eor	r13, r13
     b1c:	25 c0       	rjmp	.+74     	; 0xb68 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     b1e:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     b22:	85 fd       	sbrc	r24, 5
     b24:	16 c0       	rjmp	.+44     	; 0xb52 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     b26:	80 91 a6 00 	lds	r24, 0x00A6
     b2a:	8e 77       	andi	r24, 0x7E	; 126
     b2c:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     b30:	01 15       	cp	r16, r1
     b32:	11 05       	cpc	r17, r1
     b34:	51 f0       	breq	.+20     	; 0xb4a <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     b36:	f8 01       	movw	r30, r16
     b38:	80 81       	ld	r24, Z
     b3a:	91 81       	ldd	r25, Z+1	; 0x01
     b3c:	8c 0d       	add	r24, r12
     b3e:	9d 1d       	adc	r25, r13
     b40:	91 83       	std	Z+1, r25	; 0x01
     b42:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     b44:	44 e0       	ldi	r20, 0x04	; 4
     b46:	b4 2e       	mov	r11, r20
     b48:	14 c0       	rjmp	.+40     	; 0xb72 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     b4a:	e9 d0       	rcall	.+466    	; 0xd1e <Pipe_WaitUntilReady>
     b4c:	88 23       	and	r24, r24
     b4e:	61 f0       	breq	.+24     	; 0xb68 <Pipe_Read_Stream_LE+0xa0>
     b50:	0f c0       	rjmp	.+30     	; 0xb70 <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     b52:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     b56:	f7 01       	movw	r30, r14
     b58:	81 93       	st	Z+, r24
     b5a:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     b5c:	08 94       	sec
     b5e:	81 08       	sbc	r8, r1
     b60:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     b62:	08 94       	sec
     b64:	c1 1c       	adc	r12, r1
     b66:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     b68:	81 14       	cp	r8, r1
     b6a:	91 04       	cpc	r9, r1
     b6c:	c1 f6       	brne	.-80     	; 0xb1e <Pipe_Read_Stream_LE+0x56>
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     b70:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     b72:	8b 2d       	mov	r24, r11
     b74:	0f 90       	pop	r0
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	bf 90       	pop	r11
     b88:	9f 90       	pop	r9
     b8a:	8f 90       	pop	r8
     b8c:	08 95       	ret

00000b8e <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     b8e:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     b90:	58 2f       	mov	r21, r24
     b92:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     b94:	87 ff       	sbrs	r24, 7
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <Pipe_ConfigurePipe+0xe>
     b98:	80 e1       	ldi	r24, 0x10	; 16
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <Pipe_ConfigurePipe+0x10>
     b9c:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     b9e:	57 30       	cpi	r21, 0x07	; 7
     ba0:	08 f0       	brcs	.+2      	; 0xba4 <Pipe_ConfigurePipe+0x16>
     ba2:	59 c0       	rjmp	.+178    	; 0xc56 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     ba4:	66 23       	and	r22, r22
     ba6:	09 f4       	brne	.+2      	; 0xbaa <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     ba8:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     baa:	4f 70       	andi	r20, 0x0F	; 15
     bac:	62 95       	swap	r22
     bae:	66 0f       	add	r22, r22
     bb0:	66 0f       	add	r22, r22
     bb2:	60 7c       	andi	r22, 0xC0	; 192
     bb4:	64 2b       	or	r22, r20
     bb6:	68 2b       	or	r22, r24
     bb8:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     bba:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bbc:	84 2f       	mov	r24, r20
     bbe:	8f 70       	andi	r24, 0x0F	; 15
     bc0:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     bc4:	45 17       	cp	r20, r21
     bc6:	a1 f4       	brne	.+40     	; 0xbf0 <Pipe_ConfigurePipe+0x62>
     bc8:	88 e0       	ldi	r24, 0x08	; 8
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	03 c0       	rjmp	.+6      	; 0xbd6 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     bd0:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     bd6:	82 17       	cp	r24, r18
     bd8:	93 07       	cpc	r25, r19
     bda:	10 f4       	brcc	.+4      	; 0xbe0 <Pipe_ConfigurePipe+0x52>
     bdc:	75 30       	cpi	r23, 0x05	; 5
     bde:	c1 f7       	brne	.-16     	; 0xbd0 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     be0:	87 2f       	mov	r24, r23
     be2:	82 95       	swap	r24
     be4:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     be6:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     be8:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     bea:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	08 c0       	rjmp	.+16     	; 0xc00 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     bf0:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     bf4:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     bf8:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     bfc:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     c00:	81 ff       	sbrs	r24, 1
     c02:	20 c0       	rjmp	.+64     	; 0xc44 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c04:	90 91 a9 00 	lds	r25, 0x00A9
     c08:	9e 7f       	andi	r25, 0xFE	; 254
     c0a:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     c0e:	90 91 ab 00 	lds	r25, 0x00AB
     c12:	9d 7f       	andi	r25, 0xFD	; 253
     c14:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     c18:	90 91 a9 00 	lds	r25, 0x00A9
     c1c:	91 60       	ori	r25, 0x01	; 1
     c1e:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     c22:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     c26:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     c2a:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     c2e:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     c32:	80 91 a9 00 	lds	r24, 0x00A9
     c36:	80 62       	ori	r24, 0x20	; 32
     c38:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c3c:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     c40:	87 ff       	sbrs	r24, 7
     c42:	09 c0       	rjmp	.+18     	; 0xc56 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     c44:	4f 5f       	subi	r20, 0xFF	; 255
     c46:	47 30       	cpi	r20, 0x07	; 7
     c48:	09 f0       	breq	.+2      	; 0xc4c <Pipe_ConfigurePipe+0xbe>
     c4a:	b8 cf       	rjmp	.-144    	; 0xbbc <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c4c:	5f 70       	andi	r21, 0x0F	; 15
     c4e:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     c56:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     c58:	0f 91       	pop	r16
     c5a:	08 95       	ret

00000c5c <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     c6a:	e8 2e       	mov	r14, r24
     c6c:	e7 01       	movw	r28, r14
     c6e:	7e 01       	movw	r14, r28
     c70:	f9 2e       	mov	r15, r25
     c72:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     c74:	ff 24       	eor	r15, r15
     c76:	0d c0       	rjmp	.+26     	; 0xc92 <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
     c78:	88 81       	ld	r24, Y
     c7a:	88 23       	and	r24, r24
     c7c:	41 f0       	breq	.+16     	; 0xc8e <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     c7e:	29 81       	ldd	r18, Y+1	; 0x01
     c80:	3a 81       	ldd	r19, Y+2	; 0x02
     c82:	6c 81       	ldd	r22, Y+4	; 0x04
     c84:	4b 81       	ldd	r20, Y+3	; 0x03
     c86:	0d 81       	ldd	r16, Y+5	; 0x05
     c88:	82 df       	rcall	.-252    	; 0xb8e <Pipe_ConfigurePipe>
     c8a:	88 23       	and	r24, r24
     c8c:	31 f0       	breq	.+12     	; 0xc9a <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     c8e:	f3 94       	inc	r15
     c90:	26 96       	adiw	r28, 0x06	; 6
     c92:	f1 16       	cp	r15, r17
     c94:	88 f3       	brcs	.-30     	; 0xc78 <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	01 c0       	rjmp	.+2      	; 0xc9c <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     c9a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	ff 90       	pop	r15
     ca6:	ef 90       	pop	r14
     ca8:	08 95       	ret

00000caa <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     caa:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	98 2f       	mov	r25, r24
     cb2:	9f 70       	andi	r25, 0x0F	; 15
     cb4:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     cb8:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     cbc:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     cc0:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     cc4:	90 91 a9 00 	lds	r25, 0x00A9
     cc8:	9e 7f       	andi	r25, 0xFE	; 254
     cca:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     cce:	8f 5f       	subi	r24, 0xFF	; 255
     cd0:	87 30       	cpi	r24, 0x07	; 7
     cd2:	71 f7       	brne	.-36     	; 0xcb0 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     cd4:	08 95       	ret

00000cd6 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     cd6:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     cda:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     cde:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ce0:	29 2f       	mov	r18, r25
     ce2:	2f 70       	andi	r18, 0x0F	; 15
     ce4:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     ce8:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     cec:	27 ff       	sbrs	r18, 7
     cee:	0c c0       	rjmp	.+24     	; 0xd08 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     cf0:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     cf4:	53 2f       	mov	r21, r19
     cf6:	5f 70       	andi	r21, 0x0F	; 15
     cf8:	30 ff       	sbrs	r19, 0
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <Pipe_IsEndpointBound+0x2a>
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <Pipe_IsEndpointBound+0x2c>
     d00:	20 e8       	ldi	r18, 0x80	; 128
     d02:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     d04:	28 17       	cp	r18, r24
     d06:	49 f0       	breq	.+18     	; 0xd1a <Pipe_IsEndpointBound+0x44>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d08:	9f 5f       	subi	r25, 0xFF	; 255
     d0a:	97 30       	cpi	r25, 0x07	; 7
     d0c:	49 f7       	brne	.-46     	; 0xce0 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d0e:	84 2f       	mov	r24, r20
     d10:	8f 70       	andi	r24, 0x0F	; 15
     d12:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     d1c:	08 95       	ret

00000d1e <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     d1e:	80 91 a2 00 	lds	r24, 0x00A2
     d22:	90 91 a3 00 	lds	r25, 0x00A3

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     d26:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     d28:	20 91 aa 00 	lds	r18, 0x00AA
     d2c:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     d2e:	20 31       	cpi	r18, 0x10	; 16
     d30:	29 f4       	brne	.+10     	; 0xd3c <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d32:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     d36:	20 ff       	sbrs	r18, 0
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <Pipe_WaitUntilReady+0x26>
     d3a:	18 c0       	rjmp	.+48     	; 0xd6c <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     d3c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     d40:	22 fd       	sbrc	r18, 2
     d42:	14 c0       	rjmp	.+40     	; 0xd6c <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     d44:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     d48:	21 fd       	sbrc	r18, 1
     d4a:	12 c0       	rjmp	.+36     	; 0xd70 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     d4c:	20 91 47 05 	lds	r18, 0x0547
     d50:	21 30       	cpi	r18, 0x01	; 1
     d52:	81 f0       	breq	.+32     	; 0xd74 <Pipe_WaitUntilReady+0x56>
     d54:	20 91 a2 00 	lds	r18, 0x00A2
     d58:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d5c:	28 17       	cp	r18, r24
     d5e:	39 07       	cpc	r19, r25
     d60:	19 f3       	breq	.-58     	; 0xd28 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d62:	44 23       	and	r20, r20
     d64:	49 f0       	breq	.+18     	; 0xd78 <Pipe_WaitUntilReady+0x5a>
     d66:	41 50       	subi	r20, 0x01	; 1
     d68:	c9 01       	movw	r24, r18
     d6a:	de cf       	rjmp	.-68     	; 0xd28 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     d78:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     d7a:	08 95       	ret

00000d7c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     d7c:	75 d0       	rcall	.+234    	; 0xe68 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d7e:	7c d0       	rcall	.+248    	; 0xe78 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     d80:	e0 ee       	ldi	r30, 0xE0	; 224
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	81 60       	ori	r24, 0x01	; 1
     d88:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     d8a:	e8 ed       	ldi	r30, 0xD8	; 216
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8f 77       	andi	r24, 0x7F	; 127
     d92:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d94:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     d96:	a7 ed       	ldi	r26, 0xD7	; 215
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	8c 91       	ld	r24, X
     d9c:	8e 7f       	andi	r24, 0xFE	; 254
     d9e:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     da0:	80 81       	ld	r24, Z
     da2:	8f 7e       	andi	r24, 0xEF	; 239
     da4:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     da6:	10 92 3e 05 	sts	0x053E, r1
}
     daa:	08 95       	ret

00000dac <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     dac:	5d d0       	rcall	.+186    	; 0xe68 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     dae:	64 d0       	rcall	.+200    	; 0xe78 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     db0:	80 91 d8 00 	lds	r24, 0x00D8
     db4:	8f 77       	andi	r24, 0x7F	; 127
     db6:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     dba:	80 91 d8 00 	lds	r24, 0x00D8
     dbe:	80 68       	ori	r24, 0x80	; 128
     dc0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     dc4:	80 91 d8 00 	lds	r24, 0x00D8
     dc8:	8f 7d       	andi	r24, 0xDF	; 223
     dca:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     dce:	80 91 d7 00 	lds	r24, 0x00D7
     dd2:	8f 77       	andi	r24, 0x7F	; 127
     dd4:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dd8:	8c e0       	ldi	r24, 0x0C	; 12
     dda:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ddc:	8e e0       	ldi	r24, 0x0E	; 14
     dde:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     de0:	09 b4       	in	r0, 0x29	; 41
     de2:	00 fe       	sbrs	r0, 0
     de4:	fd cf       	rjmp	.-6      	; 0xde0 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 47 05 	sts	0x0547, r24
	USB_Host_ConfigurationNumber = 0;
     dec:	10 92 3d 05 	sts	0x053D, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     df0:	80 e4       	ldi	r24, 0x40	; 64
     df2:	80 93 38 01 	sts	0x0138, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     df6:	80 91 d8 00 	lds	r24, 0x00D8
     dfa:	80 64       	ori	r24, 0x40	; 64
     dfc:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e00:	80 91 dd 00 	lds	r24, 0x00DD
     e04:	81 60       	ori	r24, 0x01	; 1
     e06:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     e0a:	80 91 dd 00 	lds	r24, 0x00DD
     e0e:	84 60       	ori	r24, 0x04	; 4
     e10:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     e14:	80 91 d7 00 	lds	r24, 0x00D7
     e18:	8f 7e       	andi	r24, 0xEF	; 239
     e1a:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     e1e:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     e20:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     e22:	80 91 de 00 	lds	r24, 0x00DE
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     e2c:	80 91 de 00 	lds	r24, 0x00DE
     e30:	84 60       	ori	r24, 0x04	; 4
     e32:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e36:	80 91 e0 00 	lds	r24, 0x00E0
     e3a:	8e 7f       	andi	r24, 0xFE	; 254
     e3c:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     e40:	80 91 d8 00 	lds	r24, 0x00D8
     e44:	80 61       	ori	r24, 0x10	; 16
     e46:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e4a:	08 95       	ret

00000e4c <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     e4c:	e8 ed       	ldi	r30, 0xD8	; 216
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	8f 7e       	andi	r24, 0xEF	; 239
     e54:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     e56:	e7 ed       	ldi	r30, 0xD7	; 215
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	80 93 3e 05 	sts	0x053E, r24

	USB_ResetInterface();
}
     e66:	a2 cf       	rjmp	.-188    	; 0xdac <USB_ResetInterface>

00000e68 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e68:	e8 ed       	ldi	r30, 0xD8	; 216
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8c 7f       	andi	r24, 0xFC	; 252
     e70:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     e72:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     e76:	08 95       	ret

00000e78 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e78:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     e7c:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     e80:	08 95       	ret

00000e82 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e82:	1f 92       	push	r1
     e84:	0f 92       	push	r0
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	0f 92       	push	r0
     e8a:	0b b6       	in	r0, 0x3b	; 59
     e8c:	0f 92       	push	r0
     e8e:	11 24       	eor	r1, r1
     e90:	2f 93       	push	r18
     e92:	3f 93       	push	r19
     e94:	4f 93       	push	r20
     e96:	5f 93       	push	r21
     e98:	6f 93       	push	r22
     e9a:	7f 93       	push	r23
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ea8:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     eac:	85 ff       	sbrs	r24, 5
     eae:	0a c0       	rjmp	.+20     	; 0xec4 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     eb0:	80 91 a0 00 	lds	r24, 0x00A0
     eb4:	85 ff       	sbrs	r24, 5
     eb6:	06 c0       	rjmp	.+12     	; 0xec4 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     eb8:	80 91 9f 00 	lds	r24, 0x009F
     ebc:	8f 7d       	andi	r24, 0xDF	; 223
     ebe:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     ec2:	0c d1       	rcall	.+536    	; 0x10dc <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     ec4:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     ec8:	81 ff       	sbrs	r24, 1
     eca:	15 c0       	rjmp	.+42     	; 0xef6 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     ecc:	80 91 a0 00 	lds	r24, 0x00A0
     ed0:	81 ff       	sbrs	r24, 1
     ed2:	11 c0       	rjmp	.+34     	; 0xef6 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ed4:	80 91 9f 00 	lds	r24, 0x009F
     ed8:	8d 7f       	andi	r24, 0xFD	; 253
     eda:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     ede:	80 91 9f 00 	lds	r24, 0x009F
     ee2:	8e 7f       	andi	r24, 0xFE	; 254
     ee4:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     ee8:	80 91 a0 00 	lds	r24, 0x00A0
     eec:	8d 7f       	andi	r24, 0xFD	; 253
     eee:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     ef2:	c1 da       	rcall	.-2686   	; 0x476 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     ef4:	5b df       	rcall	.-330    	; 0xdac <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     ef6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     efa:	81 ff       	sbrs	r24, 1
     efc:	15 c0       	rjmp	.+42     	; 0xf28 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     efe:	80 91 de 00 	lds	r24, 0x00DE
     f02:	81 ff       	sbrs	r24, 1
     f04:	11 c0       	rjmp	.+34     	; 0xf28 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     f06:	80 91 df 00 	lds	r24, 0x00DF
     f0a:	8d 7f       	andi	r24, 0xFD	; 253
     f0c:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     f10:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f12:	80 91 dd 00 	lds	r24, 0x00DD
     f16:	81 60       	ori	r24, 0x01	; 1
     f18:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	6c db       	rcall	.-2344   	; 0x5f8 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     f20:	aa da       	rcall	.-2732   	; 0x476 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	80 93 47 05 	sts	0x0547, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     f28:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     f2c:	80 ff       	sbrs	r24, 0
     f2e:	17 c0       	rjmp	.+46     	; 0xf5e <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     f30:	80 91 de 00 	lds	r24, 0x00DE
     f34:	80 ff       	sbrs	r24, 0
     f36:	13 c0       	rjmp	.+38     	; 0xf5e <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     f38:	80 91 df 00 	lds	r24, 0x00DF
     f3c:	8e 7f       	andi	r24, 0xFE	; 254
     f3e:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     f42:	80 91 de 00 	lds	r24, 0x00DE
     f46:	8e 7f       	andi	r24, 0xFE	; 254
     f48:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     f4c:	8e da       	rcall	.-2788   	; 0x46a <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     f4e:	80 91 a0 00 	lds	r24, 0x00A0
     f52:	82 60       	ori	r24, 0x02	; 2
     f54:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	80 93 47 05 	sts	0x0547, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     f5e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     f62:	82 ff       	sbrs	r24, 2
     f64:	0e c0       	rjmp	.+28     	; 0xf82 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     f66:	80 91 de 00 	lds	r24, 0x00DE
     f6a:	82 ff       	sbrs	r24, 2
     f6c:	0a c0       	rjmp	.+20     	; 0xf82 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     f6e:	80 91 df 00 	lds	r24, 0x00DF
     f72:	8b 7f       	andi	r24, 0xFB	; 251
     f74:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	5d db       	rcall	.-2374   	; 0x638 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     f7e:	7b da       	rcall	.-2826   	; 0x476 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     f80:	15 df       	rcall	.-470    	; 0xdac <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	bf 91       	pop	r27
     f88:	af 91       	pop	r26
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	7f 91       	pop	r23
     f90:	6f 91       	pop	r22
     f92:	5f 91       	pop	r21
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	0b be       	out	0x3b, r0	; 59
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	0f 90       	pop	r0
     fa4:	1f 90       	pop	r1
     fa6:	18 95       	reti

00000fa8 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     fa8:	cf 92       	push	r12
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	29 97       	sbiw	r28, 0x09	; 9
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	6b 01       	movw	r12, r22
     fca:	8a 01       	movw	r16, r20
     fcc:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     fce:	90 e8       	ldi	r25, 0x80	; 128
     fd0:	90 93 3f 05 	sts	0x053F, r25
     fd4:	96 e0       	ldi	r25, 0x06	; 6
     fd6:	90 93 40 05 	sts	0x0540, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     fe0:	90 93 42 05 	sts	0x0542, r25
     fe4:	80 93 41 05 	sts	0x0541, r24
     fe8:	10 92 44 05 	sts	0x0544, r1
     fec:	10 92 43 05 	sts	0x0543, r1
     ff0:	89 e0       	ldi	r24, 0x09	; 9
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	90 93 46 05 	sts	0x0546, r25
     ff8:	80 93 45 05 	sts	0x0545, r24
     ffc:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1000:	ce 01       	movw	r24, r28
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	95 d0       	rcall	.+298    	; 0x1130 <USB_Host_SendControlRequest>
    1006:	88 23       	and	r24, r24
    1008:	b9 f4       	brne	.+46     	; 0x1038 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	f6 01       	movw	r30, r12
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1014:	e8 16       	cp	r14, r24
    1016:	f9 06       	cpc	r15, r25
    1018:	70 f0       	brcs	.+28     	; 0x1036 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    101a:	90 93 46 05 	sts	0x0546, r25
    101e:	80 93 45 05 	sts	0x0545, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1022:	c8 01       	movw	r24, r16
    1024:	85 d0       	rcall	.+266    	; 0x1130 <USB_Host_SendControlRequest>
    1026:	88 23       	and	r24, r24
    1028:	39 f4       	brne	.+14     	; 0x1038 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    102a:	f8 01       	movw	r30, r16
    102c:	91 81       	ldd	r25, Z+1	; 0x01
    102e:	92 30       	cpi	r25, 0x02	; 2
    1030:	19 f0       	breq	.+6      	; 0x1038 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1032:	86 e0       	ldi	r24, 0x06	; 6
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1036:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1038:	29 96       	adiw	r28, 0x09	; 9
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	df 90       	pop	r13
    1052:	cf 90       	pop	r12
    1054:	08 95       	ret

00001056 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1056:	af 92       	push	r10
    1058:	bf 92       	push	r11
    105a:	cf 92       	push	r12
    105c:	df 92       	push	r13
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	8c 01       	movw	r16, r24
    106c:	eb 01       	movw	r28, r22
    106e:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1070:	23 c0       	rjmp	.+70     	; 0x10b8 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1072:	e8 81       	ld	r30, Y
    1074:	f9 81       	ldd	r31, Y+1	; 0x01
    1076:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1078:	20 81       	ld	r18, Z
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	c7 01       	movw	r24, r14
    107e:	2e 15       	cp	r18, r14
    1080:	3f 05       	cpc	r19, r15
    1082:	08 f4       	brcc	.+2      	; 0x1086 <USB_GetNextDescriptorComp+0x30>
    1084:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1086:	e8 0f       	add	r30, r24
    1088:	f9 1f       	adc	r31, r25
    108a:	f9 83       	std	Y+1, r31	; 0x01
    108c:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    108e:	f8 01       	movw	r30, r16
    1090:	20 81       	ld	r18, Z
    1092:	31 81       	ldd	r19, Z+1	; 0x01
    1094:	28 1b       	sub	r18, r24
    1096:	39 0b       	sbc	r19, r25
    1098:	31 83       	std	Z+1, r19	; 0x01
    109a:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    109c:	88 81       	ld	r24, Y
    109e:	99 81       	ldd	r25, Y+1	; 0x01
    10a0:	f6 01       	movw	r30, r12
    10a2:	09 95       	icall
    10a4:	82 30       	cpi	r24, 0x02	; 2
    10a6:	41 f0       	breq	.+16     	; 0x10b8 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	69 f4       	brne	.+26     	; 0x10c6 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    10ac:	a8 82       	st	Y, r10
    10ae:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    10b0:	f8 01       	movw	r30, r16
    10b2:	f1 82       	std	Z+1, r15	; 0x01
    10b4:	e0 82       	st	Z, r14
    10b6:	07 c0       	rjmp	.+14     	; 0x10c6 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    10b8:	f8 01       	movw	r30, r16
    10ba:	e0 80       	ld	r14, Z
    10bc:	f1 80       	ldd	r15, Z+1	; 0x01
    10be:	e1 14       	cp	r14, r1
    10c0:	f1 04       	cpc	r15, r1
    10c2:	b9 f6       	brne	.-82     	; 0x1072 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    10c4:	82 e0       	ldi	r24, 0x02	; 2
}
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	df 90       	pop	r13
    10d4:	cf 90       	pop	r12
    10d6:	bf 90       	pop	r11
    10d8:	af 90       	pop	r10
    10da:	08 95       	ret

000010dc <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    10dc:	08 95       	ret

000010de <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    10e6:	c8 ee       	ldi	r28, 0xE8	; 232
    10e8:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10ea:	07 c0       	rjmp	.+14     	; 0x10fa <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	23 db       	rcall	.-2490   	; 0x736 <USB_Host_WaitMS>
    10f0:	88 23       	and	r24, r24
    10f2:	d1 f4       	brne	.+52     	; 0x1128 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    10f4:	20 97       	sbiw	r28, 0x00	; 0
    10f6:	b9 f0       	breq	.+46     	; 0x1126 <USB_Host_WaitForIOS+0x48>
    10f8:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10fa:	11 23       	and	r17, r17
    10fc:	29 f4       	brne	.+10     	; 0x1108 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    10fe:	80 91 a6 00 	lds	r24, 0x00A6
    1102:	83 ff       	sbrs	r24, 3
    1104:	f3 cf       	rjmp	.-26     	; 0x10ec <USB_Host_WaitForIOS+0xe>
    1106:	0d c0       	rjmp	.+26     	; 0x1122 <USB_Host_WaitForIOS+0x44>
    1108:	11 30       	cpi	r17, 0x01	; 1
    110a:	29 f4       	brne	.+10     	; 0x1116 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    110c:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1110:	80 ff       	sbrs	r24, 0
    1112:	ec cf       	rjmp	.-40     	; 0x10ec <USB_Host_WaitForIOS+0xe>
    1114:	06 c0       	rjmp	.+12     	; 0x1122 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1116:	12 30       	cpi	r17, 0x02	; 2
    1118:	49 f7       	brne	.-46     	; 0x10ec <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    111a:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    111e:	82 ff       	sbrs	r24, 2
    1120:	e5 cf       	rjmp	.-54     	; 0x10ec <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1126:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	08 95       	ret

00001130 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    113e:	e0 90 9e 00 	lds	r14, 0x009E
    1142:	ff 24       	eor	r15, r15
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	e8 22       	and	r14, r24
    1148:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    114a:	c0 91 45 05 	lds	r28, 0x0545
    114e:	d0 91 46 05 	lds	r29, 0x0546
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1152:	80 91 9e 00 	lds	r24, 0x009E
    1156:	81 60       	ori	r24, 0x01	; 1
    1158:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	eb da       	rcall	.-2602   	; 0x736 <USB_Host_WaitMS>
    1160:	88 23       	and	r24, r24
    1162:	09 f0       	breq	.+2      	; 0x1166 <USB_Host_SendControlRequest+0x36>
    1164:	cb c0       	rjmp	.+406    	; 0x12fc <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1166:	80 91 aa 00 	lds	r24, 0x00AA
    116a:	8f 7c       	andi	r24, 0xCF	; 207
    116c:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1170:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1174:	80 91 a6 00 	lds	r24, 0x00A6
    1178:	8f 7e       	andi	r24, 0xEF	; 239
    117a:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    117e:	80 91 a9 00 	lds	r24, 0x00A9
    1182:	8f 7b       	andi	r24, 0xBF	; 191
    1184:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1188:	ef e3       	ldi	r30, 0x3F	; 63
    118a:	f5 e0       	ldi	r31, 0x05	; 5

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    118c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    118e:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1192:	85 e0       	ldi	r24, 0x05	; 5
    1194:	e7 34       	cpi	r30, 0x47	; 71
    1196:	f8 07       	cpc	r31, r24
    1198:	c9 f7       	brne	.-14     	; 0x118c <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    119a:	80 91 a6 00 	lds	r24, 0x00A6
    119e:	87 77       	andi	r24, 0x77	; 119
    11a0:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	9b df       	rcall	.-202    	; 0x10de <USB_Host_WaitForIOS>
    11a8:	88 23       	and	r24, r24
    11aa:	09 f0       	breq	.+2      	; 0x11ae <USB_Host_SendControlRequest+0x7e>
    11ac:	a7 c0       	rjmp	.+334    	; 0x12fc <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11ae:	80 91 a9 00 	lds	r24, 0x00A9
    11b2:	80 64       	ori	r24, 0x40	; 64
    11b4:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	bd da       	rcall	.-2694   	; 0x736 <USB_Host_WaitMS>
    11bc:	88 23       	and	r24, r24
    11be:	09 f0       	breq	.+2      	; 0x11c2 <USB_Host_SendControlRequest+0x92>
    11c0:	9d c0       	rjmp	.+314    	; 0x12fc <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    11c2:	80 91 3f 05 	lds	r24, 0x053F
    11c6:	87 ff       	sbrs	r24, 7
    11c8:	4f c0       	rjmp	.+158    	; 0x1268 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11ca:	80 91 aa 00 	lds	r24, 0x00AA
    11ce:	8f 7c       	andi	r24, 0xCF	; 207
    11d0:	80 61       	ori	r24, 0x10	; 16
    11d2:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    11d6:	01 15       	cp	r16, r1
    11d8:	11 05       	cpc	r17, r1
    11da:	61 f5       	brne	.+88     	; 0x1234 <USB_Host_SendControlRequest+0x104>
    11dc:	2d c0       	rjmp	.+90     	; 0x1238 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11de:	80 91 a9 00 	lds	r24, 0x00A9
    11e2:	8f 7b       	andi	r24, 0xBF	; 191
    11e4:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	79 df       	rcall	.-270    	; 0x10de <USB_Host_WaitForIOS>
    11ec:	88 23       	and	r24, r24
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <USB_Host_SendControlRequest+0xc2>
    11f0:	85 c0       	rjmp	.+266    	; 0x12fc <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11f2:	80 91 f6 00 	lds	r24, 0x00F6
    11f6:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	49 f4       	brne	.+18     	; 0x1210 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    11fe:	c0 e0       	ldi	r28, 0x00	; 0
    1200:	d0 e0       	ldi	r29, 0x00	; 0
    1202:	06 c0       	rjmp	.+12     	; 0x1210 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1204:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1208:	f8 01       	movw	r30, r16
    120a:	81 93       	st	Z+, r24
    120c:	8f 01       	movw	r16, r30
					DataLen--;
    120e:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1210:	80 91 f6 00 	lds	r24, 0x00F6
    1214:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	11 f0       	breq	.+4      	; 0x1220 <USB_Host_SendControlRequest+0xf0>
    121c:	20 97       	sbiw	r28, 0x00	; 0
    121e:	91 f7       	brne	.-28     	; 0x1204 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1220:	80 91 a9 00 	lds	r24, 0x00A9
    1224:	80 64       	ori	r24, 0x40	; 64
    1226:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    122a:	80 91 a6 00 	lds	r24, 0x00A6
    122e:	8e 77       	andi	r24, 0x7E	; 126
    1230:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1234:	20 97       	sbiw	r28, 0x00	; 0
    1236:	99 f6       	brne	.-90     	; 0x11de <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1238:	80 91 aa 00 	lds	r24, 0x00AA
    123c:	8f 7c       	andi	r24, 0xCF	; 207
    123e:	80 62       	ori	r24, 0x20	; 32
    1240:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1244:	80 91 a9 00 	lds	r24, 0x00A9
    1248:	8f 7b       	andi	r24, 0xBF	; 191
    124a:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	46 df       	rcall	.-372    	; 0x10de <USB_Host_WaitForIOS>
    1252:	88 23       	and	r24, r24
    1254:	09 f0       	breq	.+2      	; 0x1258 <USB_Host_SendControlRequest+0x128>
    1256:	52 c0       	rjmp	.+164    	; 0x12fc <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1258:	80 91 a6 00 	lds	r24, 0x00A6
    125c:	8b 77       	andi	r24, 0x7B	; 123
    125e:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	3c df       	rcall	.-392    	; 0x10de <USB_Host_WaitForIOS>
    1266:	4a c0       	rjmp	.+148    	; 0x12fc <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1268:	01 15       	cp	r16, r1
    126a:	11 05       	cpc	r17, r1
    126c:	99 f1       	breq	.+102    	; 0x12d4 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    126e:	80 91 aa 00 	lds	r24, 0x00AA
    1272:	8f 7c       	andi	r24, 0xCF	; 207
    1274:	80 62       	ori	r24, 0x20	; 32
    1276:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    127a:	80 91 a9 00 	lds	r24, 0x00A9
    127e:	8f 7b       	andi	r24, 0xBF	; 191
    1280:	80 93 a9 00 	sts	0x00A9, r24
    1284:	1c c0       	rjmp	.+56     	; 0x12be <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	2a df       	rcall	.-428    	; 0x10de <USB_Host_WaitForIOS>
    128a:	88 23       	and	r24, r24
    128c:	b9 f5       	brne	.+110    	; 0x12fc <USB_Host_SendControlRequest+0x1cc>
    128e:	f8 01       	movw	r30, r16
    1290:	06 c0       	rjmp	.+12     	; 0x129e <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1292:	81 91       	ld	r24, Z+
    1294:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1296:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    129a:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    129c:	59 f0       	breq	.+22     	; 0x12b4 <USB_Host_SendControlRequest+0x184>
    129e:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    12a0:	20 91 f6 00 	lds	r18, 0x00F6
    12a4:	30 91 f7 00 	lds	r19, 0x00F7
    12a8:	80 91 38 01 	lds	r24, 0x0138
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	28 17       	cp	r18, r24
    12b0:	39 07       	cpc	r19, r25
    12b2:	78 f3       	brcs	.-34     	; 0x1292 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    12b4:	80 91 a6 00 	lds	r24, 0x00A6
    12b8:	8b 77       	andi	r24, 0x7B	; 123
    12ba:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    12be:	20 97       	sbiw	r28, 0x00	; 0
    12c0:	11 f7       	brne	.-60     	; 0x1286 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	0c df       	rcall	.-488    	; 0x10de <USB_Host_WaitForIOS>
    12c6:	88 23       	and	r24, r24
    12c8:	c9 f4       	brne	.+50     	; 0x12fc <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12ca:	80 91 a9 00 	lds	r24, 0x00A9
    12ce:	80 64       	ori	r24, 0x40	; 64
    12d0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12d4:	80 91 aa 00 	lds	r24, 0x00AA
    12d8:	8f 7c       	andi	r24, 0xCF	; 207
    12da:	80 61       	ori	r24, 0x10	; 16
    12dc:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12e0:	80 91 a9 00 	lds	r24, 0x00A9
    12e4:	8f 7b       	andi	r24, 0xBF	; 191
    12e6:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	f8 de       	rcall	.-528    	; 0x10de <USB_Host_WaitForIOS>
    12ee:	88 23       	and	r24, r24
    12f0:	29 f4       	brne	.+10     	; 0x12fc <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12f2:	90 91 a6 00 	lds	r25, 0x00A6
    12f6:	9e 77       	andi	r25, 0x7E	; 126
    12f8:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12fc:	90 91 a9 00 	lds	r25, 0x00A9
    1300:	90 64       	ori	r25, 0x40	; 64
    1302:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1306:	e1 14       	cp	r14, r1
    1308:	f1 04       	cpc	r15, r1
    130a:	29 f4       	brne	.+10     	; 0x1316 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    130c:	90 91 9e 00 	lds	r25, 0x009E
    1310:	9e 7f       	andi	r25, 0xFE	; 254
    1312:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    131c:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	ef 90       	pop	r14
    132c:	08 95       	ret

0000132e <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    132e:	1f 93       	push	r17
    1330:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1332:	10 92 3f 05 	sts	0x053F, r1
    1336:	89 e0       	ldi	r24, 0x09	; 9
    1338:	80 93 40 05 	sts	0x0540, r24
    133c:	10 93 41 05 	sts	0x0541, r17
    1340:	10 92 42 05 	sts	0x0542, r1
    1344:	10 92 44 05 	sts	0x0544, r1
    1348:	10 92 43 05 	sts	0x0543, r1
    134c:	10 92 46 05 	sts	0x0546, r1
    1350:	10 92 45 05 	sts	0x0545, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1354:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	e9 de       	rcall	.-558    	; 0x1130 <USB_Host_SendControlRequest>
    135e:	88 23       	and	r24, r24
    1360:	49 f4       	brne	.+18     	; 0x1374 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1362:	10 93 3d 05 	sts	0x053D, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1366:	11 23       	and	r17, r17
    1368:	11 f0       	breq	.+4      	; 0x136e <USB_Host_SetDeviceConfiguration+0x40>
    136a:	9b e0       	ldi	r25, 0x0B	; 11
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <USB_Host_SetDeviceConfiguration+0x42>
    136e:	9a e0       	ldi	r25, 0x0A	; 10
    1370:	90 93 47 05 	sts	0x0547, r25
	}

	return ErrorCode;
}
    1374:	1f 91       	pop	r17
    1376:	08 95       	ret

00001378 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1378:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    137a:	10 91 a7 00 	lds	r17, 0x00A7
    137e:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1380:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1384:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1388:	2b da       	rcall	.-2986   	; 0x7e0 <USB_Host_ProcessNextHostState>
    138a:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    138e:	1f 91       	pop	r17
    1390:	08 95       	ret

00001392 <DCOMP_RNDIS_Host_NextRNDISControlInterface>:

	return RNDIS_ENUMERROR_NoError;
}

static uint8_t DCOMP_RNDIS_Host_NextRNDISControlInterface(void* const CurrentDescriptor)
{
    1392:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1394:	81 81       	ldd	r24, Z+1	; 0x01
    1396:	84 30       	cpi	r24, 0x04	; 4
    1398:	49 f4       	brne	.+18     	; 0x13ac <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
    139a:	85 81       	ldd	r24, Z+5	; 0x05
    139c:	82 30       	cpi	r24, 0x02	; 2
    139e:	31 f4       	brne	.+12     	; 0x13ac <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1a>
    13a0:	86 81       	ldd	r24, Z+6	; 0x06
    13a2:	82 30       	cpi	r24, 0x02	; 2
    13a4:	19 f4       	brne	.+6      	; 0x13ac <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
    13a6:	87 81       	ldd	r24, Z+7	; 0x07
    13a8:	8f 3f       	cpi	r24, 0xFF	; 255
    13aa:	11 f0       	breq	.+4      	; 0x13b0 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    13ac:	82 e0       	ldi	r24, 0x02	; 2
    13ae:	08 95       	ret

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
		    (Interface->Protocol == CDC_CSCP_VendorSpecificProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    13b0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    13b2:	08 95       	ret

000013b4 <DCOMP_RNDIS_Host_NextRNDISDataInterface>:

static uint8_t DCOMP_RNDIS_Host_NextRNDISDataInterface(void* const CurrentDescriptor)
{
    13b4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    13b6:	81 81       	ldd	r24, Z+1	; 0x01
    13b8:	84 30       	cpi	r24, 0x04	; 4
    13ba:	49 f4       	brne	.+18     	; 0x13ce <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor,
		                                                         USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
    13bc:	85 81       	ldd	r24, Z+5	; 0x05
    13be:	8a 30       	cpi	r24, 0x0A	; 10
    13c0:	31 f4       	brne	.+12     	; 0x13ce <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1a>
    13c2:	86 81       	ldd	r24, Z+6	; 0x06
    13c4:	88 23       	and	r24, r24
    13c6:	19 f4       	brne	.+6      	; 0x13ce <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
    13c8:	87 81       	ldd	r24, Z+7	; 0x07
    13ca:	88 23       	and	r24, r24
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    13ce:	82 e0       	ldi	r24, 0x02	; 2
    13d0:	08 95       	ret

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
		    (Interface->Protocol == CDC_CSCP_NoDataProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    13d2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    13d4:	08 95       	ret

000013d6 <RNDIS_SendEncapsulatedCommand>:

static uint8_t RNDIS_SendEncapsulatedCommand(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                             void* Buffer,
                                             const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
    13d6:	fc 01       	movw	r30, r24
    13d8:	87 89       	ldd	r24, Z+23	; 0x17
    13da:	91 e2       	ldi	r25, 0x21	; 33
    13dc:	90 93 3f 05 	sts	0x053F, r25
    13e0:	10 92 40 05 	sts	0x0540, r1
    13e4:	10 92 42 05 	sts	0x0542, r1
    13e8:	10 92 41 05 	sts	0x0541, r1
    13ec:	80 93 43 05 	sts	0x0543, r24
    13f0:	10 92 44 05 	sts	0x0544, r1
    13f4:	50 93 46 05 	sts	0x0546, r21
    13f8:	40 93 45 05 	sts	0x0545, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13fc:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = Length,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
    1400:	cb 01       	movw	r24, r22
}
    1402:	96 ce       	rjmp	.-724    	; 0x1130 <USB_Host_SendControlRequest>

00001404 <RNDIS_GetEncapsulatedResponse>:

static uint8_t RNDIS_GetEncapsulatedResponse(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                             void* Buffer,
                                             const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1404:	fc 01       	movw	r30, r24
    1406:	87 89       	ldd	r24, Z+23	; 0x17
    1408:	91 ea       	ldi	r25, 0xA1	; 161
    140a:	90 93 3f 05 	sts	0x053F, r25
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	90 93 40 05 	sts	0x0540, r25
    1414:	10 92 42 05 	sts	0x0542, r1
    1418:	10 92 41 05 	sts	0x0541, r1
    141c:	80 93 43 05 	sts	0x0543, r24
    1420:	10 92 44 05 	sts	0x0544, r1
    1424:	50 93 46 05 	sts	0x0546, r21
    1428:	40 93 45 05 	sts	0x0545, r20
    142c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = Length,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
    1430:	cb 01       	movw	r24, r22
}
    1432:	7e ce       	rjmp	.-772    	; 0x1130 <USB_Host_SendControlRequest>

00001434 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint(void* const CurrentDescriptor)
{
    1434:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1436:	81 81       	ldd	r24, Z+1	; 0x01
    1438:	85 30       	cpi	r24, 0x05	; 5
    143a:	51 f4       	brne	.+20     	; 0x1450 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    143c:	83 81       	ldd	r24, Z+3	; 0x03
    143e:	83 70       	andi	r24, 0x03	; 3

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1440:	82 50       	subi	r24, 0x02	; 2
    1442:	82 30       	cpi	r24, 0x02	; 2
    1444:	38 f4       	brcc	.+14     	; 0x1454 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x20>
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	46 dc       	rcall	.-1908   	; 0xcd6 <Pipe_IsEndpointBound>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    144a:	88 23       	and	r24, r24
    144c:	19 f4       	brne	.+6      	; 0x1454 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x20>
    144e:	04 c0       	rjmp	.+8      	; 0x1458 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    1450:	84 30       	cpi	r24, 0x04	; 4
    1452:	21 f0       	breq	.+8      	; 0x145c <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x28>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	08 95       	ret
		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    145c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    145e:	08 95       	ret

00001460 <RNDIS_Host_ConfigurePipes>:
#include "RNDISClassHost.h"

uint8_t RNDIS_Host_ConfigurePipes(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    1460:	4f 92       	push	r4
    1462:	5f 92       	push	r5
    1464:	6f 92       	push	r6
    1466:	7f 92       	push	r7
    1468:	8f 92       	push	r8
    146a:	9f 92       	push	r9
    146c:	af 92       	push	r10
    146e:	bf 92       	push	r11
    1470:	cf 92       	push	r12
    1472:	df 92       	push	r13
    1474:	ef 92       	push	r14
    1476:	ff 92       	push	r15
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <RNDIS_Host_ConfigurePipes+0x22>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <RNDIS_Host_ConfigurePipes+0x24>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	8c 01       	movw	r16, r24
    148a:	7a 83       	std	Y+2, r23	; 0x02
    148c:	69 83       	std	Y+1, r22	; 0x01
    148e:	5c 83       	std	Y+4, r21	; 0x04
    1490:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint  = NULL;
	USB_Descriptor_Interface_t* RNDISControlInterface = NULL;

	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));
    1492:	46 96       	adiw	r24, 0x16	; 22
    1494:	fc 01       	movw	r30, r24
    1496:	8a e0       	ldi	r24, 0x0A	; 10
    1498:	df 01       	movw	r26, r30
    149a:	1d 92       	st	X+, r1
    149c:	8a 95       	dec	r24
    149e:	e9 f7       	brne	.-6      	; 0x149a <RNDIS_Host_ConfigurePipes+0x3a>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    14a0:	eb 81       	ldd	r30, Y+3	; 0x03
    14a2:	fc 81       	ldd	r31, Y+4	; 0x04
    14a4:	81 81       	ldd	r24, Z+1	; 0x01
    14a6:	82 30       	cpi	r24, 0x02	; 2
    14a8:	09 f0       	breq	.+2      	; 0x14ac <RNDIS_Host_ConfigurePipes+0x4c>
    14aa:	90 c0       	rjmp	.+288    	; 0x15cc <RNDIS_Host_ConfigurePipes+0x16c>
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    14ac:	2f 01       	movw	r4, r30
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint  = NULL;
    14ae:	aa 24       	eor	r10, r10
    14b0:	bb 24       	eor	r11, r11
uint8_t RNDIS_Host_ConfigurePipes(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint       = NULL;
    14b2:	cc 24       	eor	r12, r12
    14b4:	dd 24       	eor	r13, r13

uint8_t RNDIS_Host_ConfigurePipes(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint        = NULL;
    14b6:	ee 24       	eor	r14, r14
    14b8:	ff 24       	eor	r15, r15
	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    14ba:	83 e0       	ldi	r24, 0x03	; 3
    14bc:	68 2e       	mov	r6, r24
    14be:	71 2c       	mov	r7, r1
    14c0:	6c 0e       	add	r6, r28
    14c2:	7d 1e       	adc	r7, r29
    14c4:	4e 01       	movw	r8, r28
    14c6:	08 94       	sec
    14c8:	81 1c       	adc	r8, r1
    14ca:	91 1c       	adc	r9, r1

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
    14cc:	41 14       	cp	r4, r1
    14ce:	51 04       	cpc	r5, r1
    14d0:	39 f0       	breq	.+14     	; 0x14e0 <RNDIS_Host_ConfigurePipes+0x80>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    14d2:	c4 01       	movw	r24, r8
    14d4:	b3 01       	movw	r22, r6
    14d6:	4a e1       	ldi	r20, 0x1A	; 26
    14d8:	5a e0       	ldi	r21, 0x0A	; 10
    14da:	bd dd       	rcall	.-1158   	; 0x1056 <USB_GetNextDescriptorComp>

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
    14dc:	88 23       	and	r24, r24
    14de:	d9 f0       	breq	.+54     	; 0x1516 <RNDIS_Host_ConfigurePipes+0xb6>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
    14e0:	a1 14       	cp	r10, r1
    14e2:	b1 04       	cpc	r11, r1
    14e4:	69 f0       	breq	.+26     	; 0x1500 <RNDIS_Host_ConfigurePipes+0xa0>
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    14e6:	c4 01       	movw	r24, r8
    14e8:	b3 01       	movw	r22, r6
    14ea:	4a ed       	ldi	r20, 0xDA	; 218
    14ec:	59 e0       	ldi	r21, 0x09	; 9
    14ee:	b3 dd       	rcall	.-1178   	; 0x1056 <USB_GetNextDescriptorComp>
    14f0:	88 23       	and	r24, r24
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <RNDIS_Host_ConfigurePipes+0x96>
    14f4:	6d c0       	rjmp	.+218    	; 0x15d0 <RNDIS_Host_ConfigurePipes+0x170>
				{
					return RNDIS_ENUMERROR_NoCompatibleInterfaceFound;
				}

				DataINEndpoint  = NULL;
				DataOUTEndpoint = NULL;
    14f6:	cc 24       	eor	r12, r12
    14f8:	dd 24       	eor	r13, r13
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    14fa:	ee 24       	eor	r14, r14
    14fc:	ff 24       	eor	r15, r15
    14fe:	e6 cf       	rjmp	.-52     	; 0x14cc <RNDIS_Host_ConfigurePipes+0x6c>
				DataINEndpoint  = NULL;
				DataOUTEndpoint = NULL;
			}
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1500:	c4 01       	movw	r24, r8
    1502:	b3 01       	movw	r22, r6
    1504:	49 ec       	ldi	r20, 0xC9	; 201
    1506:	59 e0       	ldi	r21, 0x09	; 9
    1508:	a6 dd       	rcall	.-1204   	; 0x1056 <USB_GetNextDescriptorComp>
    150a:	88 23       	and	r24, r24
    150c:	09 f0       	breq	.+2      	; 0x1510 <RNDIS_Host_ConfigurePipes+0xb0>
    150e:	60 c0       	rjmp	.+192    	; 0x15d0 <RNDIS_Host_ConfigurePipes+0x170>
											  DCOMP_RNDIS_Host_NextRNDISControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return RNDIS_ENUMERROR_NoCompatibleInterfaceFound;
				}

				RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1510:	4b 80       	ldd	r4, Y+3	; 0x03
    1512:	5c 80       	ldd	r5, Y+4	; 0x04
    1514:	0e c0       	rjmp	.+28     	; 0x1532 <RNDIS_Host_ConfigurePipes+0xd2>
			}

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1516:	eb 81       	ldd	r30, Y+3	; 0x03
    1518:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    151a:	82 81       	ldd	r24, Z+2	; 0x02
    151c:	87 ff       	sbrs	r24, 7
    151e:	06 c0       	rjmp	.+12     	; 0x152c <RNDIS_Host_ConfigurePipes+0xcc>
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    1520:	83 81       	ldd	r24, Z+3	; 0x03
    1522:	83 70       	andi	r24, 0x03	; 3
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	21 f4       	brne	.+8      	; 0x1530 <RNDIS_Host_ConfigurePipes+0xd0>
			  NotificationEndpoint = EndpointData;
    1528:	5f 01       	movw	r10, r30
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <RNDIS_Host_ConfigurePipes+0xd2>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
    152c:	6f 01       	movw	r12, r30
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <RNDIS_Host_ConfigurePipes+0xd2>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  NotificationEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
    1530:	7f 01       	movw	r14, r30
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
    1532:	e1 14       	cp	r14, r1
    1534:	f1 04       	cpc	r15, r1
    1536:	51 f2       	breq	.-108    	; 0x14cc <RNDIS_Host_ConfigurePipes+0x6c>
    1538:	c1 14       	cp	r12, r1
    153a:	d1 04       	cpc	r13, r1
    153c:	39 f2       	breq	.-114    	; 0x14cc <RNDIS_Host_ConfigurePipes+0x6c>
    153e:	a1 14       	cp	r10, r1
    1540:	b1 04       	cpc	r11, r1
    1542:	21 f2       	breq	.-120    	; 0x14cc <RNDIS_Host_ConfigurePipes+0x6c>
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	RNDISInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1544:	f7 01       	movw	r30, r14
    1546:	84 81       	ldd	r24, Z+4	; 0x04
    1548:	95 81       	ldd	r25, Z+5	; 0x05
    154a:	d8 01       	movw	r26, r16
    154c:	12 96       	adiw	r26, 0x02	; 2
    154e:	9c 93       	st	X, r25
    1550:	8e 93       	st	-X, r24
    1552:	11 97       	sbiw	r26, 0x01	; 1
	RNDISInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	13 96       	adiw	r26, 0x03	; 3
    1558:	8c 93       	st	X, r24
    155a:	13 97       	sbiw	r26, 0x03	; 3
	RNDISInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    155c:	22 e0       	ldi	r18, 0x02	; 2
    155e:	14 96       	adiw	r26, 0x04	; 4
    1560:	2c 93       	st	X, r18
    1562:	14 97       	sbiw	r26, 0x04	; 4
	
	RNDISInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1564:	f6 01       	movw	r30, r12
    1566:	84 81       	ldd	r24, Z+4	; 0x04
    1568:	95 81       	ldd	r25, Z+5	; 0x05
    156a:	18 96       	adiw	r26, 0x08	; 8
    156c:	9c 93       	st	X, r25
    156e:	8e 93       	st	-X, r24
    1570:	17 97       	sbiw	r26, 0x07	; 7
	RNDISInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	19 96       	adiw	r26, 0x09	; 9
    1576:	8c 93       	st	X, r24
    1578:	19 97       	sbiw	r26, 0x09	; 9
	RNDISInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    157a:	1a 96       	adiw	r26, 0x0a	; 10
    157c:	2c 93       	st	X, r18
	
	RNDISInterfaceInfo->Config.NotificationPipe.Size = le16_to_cpu(NotificationEndpoint->EndpointSize);
    157e:	d5 01       	movw	r26, r10
    1580:	14 96       	adiw	r26, 0x04	; 4
    1582:	8d 91       	ld	r24, X+
    1584:	9c 91       	ld	r25, X
    1586:	15 97       	sbiw	r26, 0x05	; 5
    1588:	f8 01       	movw	r30, r16
    158a:	96 87       	std	Z+14, r25	; 0x0e
    158c:	85 87       	std	Z+13, r24	; 0x0d
	RNDISInterfaceInfo->Config.NotificationPipe.EndpointAddress = NotificationEndpoint->EndpointAddress;
    158e:	12 96       	adiw	r26, 0x02	; 2
    1590:	8c 91       	ld	r24, X
    1592:	87 87       	std	Z+15, r24	; 0x0f
	RNDISInterfaceInfo->Config.NotificationPipe.Type = EP_TYPE_INTERRUPT;
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	80 8b       	std	Z+16, r24	; 0x10

	if (!(Pipe_ConfigurePipeTable(&RNDISInterfaceInfo->Config.DataINPipe, 1)))
    1598:	c8 01       	movw	r24, r16
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	5f db       	rcall	.-2370   	; 0xc5c <Pipe_ConfigurePipeTable>
    159e:	88 23       	and	r24, r24
    15a0:	c9 f0       	breq	.+50     	; 0x15d4 <RNDIS_Host_ConfigurePipes+0x174>
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&RNDISInterfaceInfo->Config.DataOUTPipe, 1)))
    15a2:	c8 01       	movw	r24, r16
    15a4:	06 96       	adiw	r24, 0x06	; 6
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	59 db       	rcall	.-2382   	; 0xc5c <Pipe_ConfigurePipeTable>
    15aa:	88 23       	and	r24, r24
    15ac:	99 f0       	breq	.+38     	; 0x15d4 <RNDIS_Host_ConfigurePipes+0x174>
	  return false;

	if (!(Pipe_ConfigurePipeTable(&RNDISInterfaceInfo->Config.NotificationPipe, 1)))
    15ae:	c8 01       	movw	r24, r16
    15b0:	0c 96       	adiw	r24, 0x0c	; 12
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	53 db       	rcall	.-2394   	; 0xc5c <Pipe_ConfigurePipeTable>
    15b6:	88 23       	and	r24, r24
    15b8:	69 f0       	breq	.+26     	; 0x15d4 <RNDIS_Host_ConfigurePipes+0x174>
	  return false;

	RNDISInterfaceInfo->State.ControlInterfaceNumber = RNDISControlInterface->InterfaceNumber;
    15ba:	d2 01       	movw	r26, r4
    15bc:	12 96       	adiw	r26, 0x02	; 2
    15be:	8c 91       	ld	r24, X
    15c0:	12 97       	sbiw	r26, 0x02	; 2
    15c2:	f8 01       	movw	r30, r16
    15c4:	87 8b       	std	Z+23, r24	; 0x17
	RNDISInterfaceInfo->State.IsActive = true;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	86 8b       	std	Z+22, r24	; 0x16
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <RNDIS_Host_ConfigurePipes+0x174>
	USB_Descriptor_Interface_t* RNDISControlInterface = NULL;

	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	03 c0       	rjmp	.+6      	; 0x15d6 <RNDIS_Host_ConfigurePipes+0x176>
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
											  DCOMP_RNDIS_Host_NextRNDISControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return RNDIS_ENUMERROR_NoCompatibleInterfaceFound;
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <RNDIS_Host_ConfigurePipes+0x176>
	
	if (!(Pipe_ConfigurePipeTable(&RNDISInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;

	if (!(Pipe_ConfigurePipeTable(&RNDISInterfaceInfo->Config.NotificationPipe, 1)))
	  return false;
    15d4:	80 e0       	ldi	r24, 0x00	; 0

	RNDISInterfaceInfo->State.ControlInterfaceNumber = RNDISControlInterface->InterfaceNumber;
	RNDISInterfaceInfo->State.IsActive = true;

	return RNDIS_ENUMERROR_NoError;
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	ff 90       	pop	r15
    15e8:	ef 90       	pop	r14
    15ea:	df 90       	pop	r13
    15ec:	cf 90       	pop	r12
    15ee:	bf 90       	pop	r11
    15f0:	af 90       	pop	r10
    15f2:	9f 90       	pop	r9
    15f4:	8f 90       	pop	r8
    15f6:	7f 90       	pop	r7
    15f8:	6f 90       	pop	r6
    15fa:	5f 90       	pop	r5
    15fc:	4f 90       	pop	r4
    15fe:	08 95       	ret

00001600 <RNDIS_Host_InitializeDevice>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t RNDIS_Host_InitializeDevice(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	cc 54       	subi	r28, 0x4C	; 76
    160e:	d0 40       	sbci	r29, 0x00	; 0
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	8c 01       	movw	r16, r24
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = CPU_TO_LE32(REMOTE_NDIS_INITIALIZE_MSG);
    161c:	82 e0       	ldi	r24, 0x02	; 2
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a0 e0       	ldi	r26, 0x00	; 0
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	9a 83       	std	Y+2, r25	; 0x02
    1628:	ab 83       	std	Y+3, r26	; 0x03
    162a:	bc 83       	std	Y+4, r27	; 0x04
	InitMessage.MessageLength   = CPU_TO_LE32(sizeof(RNDIS_Initialize_Message_t));
    162c:	88 e1       	ldi	r24, 0x18	; 24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a0 e0       	ldi	r26, 0x00	; 0
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	8d 83       	std	Y+5, r24	; 0x05
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	af 83       	std	Y+7, r26	; 0x07
    163a:	b8 87       	std	Y+8, r27	; 0x08
	InitMessage.RequestId       = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    163c:	f8 01       	movw	r30, r16
    163e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1640:	95 8d       	ldd	r25, Z+29	; 0x1d
    1642:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1644:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1646:	89 87       	std	Y+9, r24	; 0x09
    1648:	9a 87       	std	Y+10, r25	; 0x0a
    164a:	ab 87       	std	Y+11, r26	; 0x0b
    164c:	bc 87       	std	Y+12, r27	; 0x0c
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	a1 1d       	adc	r26, r1
    1652:	b1 1d       	adc	r27, r1
    1654:	84 8f       	std	Z+28, r24	; 0x1c
    1656:	95 8f       	std	Z+29, r25	; 0x1d
    1658:	a6 8f       	std	Z+30, r26	; 0x1e
    165a:	b7 8f       	std	Z+31, r27	; 0x1f

	InitMessage.MajorVersion    = CPU_TO_LE32(REMOTE_NDIS_VERSION_MAJOR);
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a0 e0       	ldi	r26, 0x00	; 0
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	8d 87       	std	Y+13, r24	; 0x0d
    1666:	9e 87       	std	Y+14, r25	; 0x0e
    1668:	af 87       	std	Y+15, r26	; 0x0f
    166a:	b8 8b       	std	Y+16, r27	; 0x10
	InitMessage.MinorVersion    = CPU_TO_LE32(REMOTE_NDIS_VERSION_MINOR);
    166c:	19 8a       	std	Y+17, r1	; 0x11
    166e:	1a 8a       	std	Y+18, r1	; 0x12
    1670:	1b 8a       	std	Y+19, r1	; 0x13
    1672:	1c 8a       	std	Y+20, r1	; 0x14
	InitMessage.MaxTransferSize = cpu_to_le32(RNDISInterfaceInfo->Config.HostMaxPacketSize);
    1674:	82 89       	ldd	r24, Z+18	; 0x12
    1676:	93 89       	ldd	r25, Z+19	; 0x13
    1678:	a4 89       	ldd	r26, Z+20	; 0x14
    167a:	b5 89       	ldd	r27, Z+21	; 0x15
    167c:	8d 8b       	std	Y+21, r24	; 0x15
    167e:	9e 8b       	std	Y+22, r25	; 0x16
    1680:	af 8b       	std	Y+23, r26	; 0x17
    1682:	b8 8f       	std	Y+24, r27	; 0x18

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &InitMessage,
    1684:	c8 01       	movw	r24, r16
    1686:	be 01       	movw	r22, r28
    1688:	6f 5f       	subi	r22, 0xFF	; 255
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	48 e1       	ldi	r20, 0x18	; 24
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	a2 de       	rcall	.-700    	; 0x13d6 <RNDIS_SendEncapsulatedCommand>
    1692:	88 23       	and	r24, r24
    1694:	f9 f4       	brne	.+62     	; 0x16d4 <RNDIS_Host_InitializeDevice+0xd4>
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &InitMessageResponse,
    1696:	c8 01       	movw	r24, r16
    1698:	be 01       	movw	r22, r28
    169a:	67 5e       	subi	r22, 0xE7	; 231
    169c:	7f 4f       	sbci	r23, 0xFF	; 255
    169e:	44 e3       	ldi	r20, 0x34	; 52
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	b0 de       	rcall	.-672    	; 0x1404 <RNDIS_GetEncapsulatedResponse>
    16a4:	88 23       	and	r24, r24
    16a6:	b1 f4       	brne	.+44     	; 0x16d4 <RNDIS_Host_InitializeDevice+0xd4>
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    16a8:	2d a1       	ldd	r18, Y+37	; 0x25
    16aa:	3e a1       	ldd	r19, Y+38	; 0x26
    16ac:	4f a1       	ldd	r20, Y+39	; 0x27
    16ae:	58 a5       	ldd	r21, Y+40	; 0x28
    16b0:	21 15       	cp	r18, r1
    16b2:	31 05       	cpc	r19, r1
    16b4:	41 05       	cpc	r20, r1
    16b6:	51 05       	cpc	r21, r1
    16b8:	61 f4       	brne	.+24     	; 0x16d2 <RNDIS_Host_InitializeDevice+0xd2>
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	RNDISInterfaceInfo->State.DeviceMaxPacketSize = le32_to_cpu(InitMessageResponse.MaxTransferSize);
    16ba:	fe 01       	movw	r30, r28
    16bc:	fd 96       	adiw	r30, 0x3d	; 61
    16be:	20 81       	ld	r18, Z
    16c0:	31 81       	ldd	r19, Z+1	; 0x01
    16c2:	42 81       	ldd	r20, Z+2	; 0x02
    16c4:	53 81       	ldd	r21, Z+3	; 0x03
    16c6:	f8 01       	movw	r30, r16
    16c8:	20 8f       	std	Z+24, r18	; 0x18
    16ca:	31 8f       	std	Z+25, r19	; 0x19
    16cc:	42 8f       	std	Z+26, r20	; 0x1a
    16ce:	53 8f       	std	Z+27, r21	; 0x1b

	return HOST_SENDCONTROL_Successful;
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <RNDIS_Host_InitializeDevice+0xd4>
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;
    16d2:	80 e8       	ldi	r24, 0x80	; 128

	RNDISInterfaceInfo->State.DeviceMaxPacketSize = le32_to_cpu(InitMessageResponse.MaxTransferSize);

	return HOST_SENDCONTROL_Successful;
}
    16d4:	c4 5b       	subi	r28, 0xB4	; 180
    16d6:	df 4f       	sbci	r29, 0xFF	; 255
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	08 95       	ret

000016ec <RNDIS_Host_SetRNDISProperty>:

uint8_t RNDIS_Host_SetRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                    const uint32_t Oid,
                                    void* Buffer,
                                    const uint16_t Length)
{
    16ec:	8f 92       	push	r8
    16ee:	9f 92       	push	r9
    16f0:	af 92       	push	r10
    16f2:	bf 92       	push	r11
    16f4:	cf 92       	push	r12
    16f6:	df 92       	push	r13
    16f8:	ef 92       	push	r14
    16fa:	ff 92       	push	r15
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	60 97       	sbiw	r28, 0x10	; 16
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	6c 01       	movw	r12, r24

	if (SetMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	return HOST_SENDCONTROL_Successful;
}
    1716:	8d b6       	in	r8, 0x3d	; 61
    1718:	9e b6       	in	r9, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
    171a:	9c e1       	ldi	r25, 0x1C	; 28
    171c:	a9 2e       	mov	r10, r25
    171e:	b1 2c       	mov	r11, r1
    1720:	a0 0e       	add	r10, r16
    1722:	b1 1e       	adc	r11, r17
    1724:	8d b7       	in	r24, 0x3d	; 61
    1726:	9e b7       	in	r25, 0x3e	; 62
    1728:	8a 19       	sub	r24, r10
    172a:	9b 09       	sbc	r25, r11
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	9e bf       	out	0x3e, r25	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	8d bf       	out	0x3d, r24	; 61
    1736:	ed b6       	in	r14, 0x3d	; 61
    1738:	fe b6       	in	r15, 0x3e	; 62
    173a:	08 94       	sec
    173c:	e1 1c       	adc	r14, r1
    173e:	f1 1c       	adc	r15, r1

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = CPU_TO_LE32(REMOTE_NDIS_SET_MSG);
    1740:	85 e0       	ldi	r24, 0x05	; 5
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e0       	ldi	r26, 0x00	; 0
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	ed b7       	in	r30, 0x3d	; 61
    174a:	fe b7       	in	r31, 0x3e	; 62
    174c:	81 83       	std	Z+1, r24	; 0x01
    174e:	92 83       	std	Z+2, r25	; 0x02
    1750:	a3 83       	std	Z+3, r26	; 0x03
    1752:	b4 83       	std	Z+4, r27	; 0x04
	SetMessageData.SetMessage.MessageLength  = cpu_to_le32(sizeof(RNDIS_Set_Message_t) + Length);
    1754:	c5 01       	movw	r24, r10
    1756:	a0 e0       	ldi	r26, 0x00	; 0
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	f7 01       	movw	r30, r14
    175c:	84 83       	std	Z+4, r24	; 0x04
    175e:	95 83       	std	Z+5, r25	; 0x05
    1760:	a6 83       	std	Z+6, r26	; 0x06
    1762:	b7 83       	std	Z+7, r27	; 0x07
	SetMessageData.SetMessage.RequestId      = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    1764:	f6 01       	movw	r30, r12
    1766:	84 8d       	ldd	r24, Z+28	; 0x1c
    1768:	95 8d       	ldd	r25, Z+29	; 0x1d
    176a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    176c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    176e:	f7 01       	movw	r30, r14
    1770:	80 87       	std	Z+8, r24	; 0x08
    1772:	91 87       	std	Z+9, r25	; 0x09
    1774:	a2 87       	std	Z+10, r26	; 0x0a
    1776:	b3 87       	std	Z+11, r27	; 0x0b
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	a1 1d       	adc	r26, r1
    177c:	b1 1d       	adc	r27, r1
    177e:	f6 01       	movw	r30, r12
    1780:	84 8f       	std	Z+28, r24	; 0x1c
    1782:	95 8f       	std	Z+29, r25	; 0x1d
    1784:	a6 8f       	std	Z+30, r26	; 0x1e
    1786:	b7 8f       	std	Z+31, r27	; 0x1f

	SetMessageData.SetMessage.Oid            = cpu_to_le32(Oid);
    1788:	f7 01       	movw	r30, r14
    178a:	44 87       	std	Z+12, r20	; 0x0c
    178c:	55 87       	std	Z+13, r21	; 0x0d
    178e:	66 87       	std	Z+14, r22	; 0x0e
    1790:	77 87       	std	Z+15, r23	; 0x0f
	SetMessageData.SetMessage.InformationBufferLength = cpu_to_le32(Length);
    1792:	c8 01       	movw	r24, r16
    1794:	a0 e0       	ldi	r26, 0x00	; 0
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	80 8b       	std	Z+16, r24	; 0x10
    179a:	91 8b       	std	Z+17, r25	; 0x11
    179c:	a2 8b       	std	Z+18, r26	; 0x12
    179e:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = CPU_TO_LE32(sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
    17a0:	84 e1       	ldi	r24, 0x14	; 20
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	a0 e0       	ldi	r26, 0x00	; 0
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	84 8b       	std	Z+20, r24	; 0x14
    17aa:	95 8b       	std	Z+21, r25	; 0x15
    17ac:	a6 8b       	std	Z+22, r26	; 0x16
    17ae:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = CPU_TO_LE32(0);
    17b0:	10 8e       	std	Z+24, r1	; 0x18
    17b2:	11 8e       	std	Z+25, r1	; 0x19
    17b4:	12 8e       	std	Z+26, r1	; 0x1a
    17b6:	13 8e       	std	Z+27, r1	; 0x1b

	memcpy(&SetMessageData.ContiguousBuffer, Buffer, Length);
    17b8:	4d b7       	in	r20, 0x3d	; 61
    17ba:	5e b7       	in	r21, 0x3e	; 62
    17bc:	43 5e       	subi	r20, 0xE3	; 227
    17be:	5f 4f       	sbci	r21, 0xFF	; 255
    17c0:	ca 01       	movw	r24, r20
    17c2:	b9 01       	movw	r22, r18
    17c4:	a8 01       	movw	r20, r16
    17c6:	a1 d1       	rcall	.+834    	; 0x1b0a <memcpy>

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &SetMessageData,
    17c8:	c6 01       	movw	r24, r12
    17ca:	b7 01       	movw	r22, r14
    17cc:	a5 01       	movw	r20, r10
    17ce:	03 de       	rcall	.-1018   	; 0x13d6 <RNDIS_SendEncapsulatedCommand>
    17d0:	88 23       	and	r24, r24
    17d2:	99 f4       	brne	.+38     	; 0x17fa <RNDIS_Host_SetRNDISProperty+0x10e>
	                                               (sizeof(RNDIS_Set_Message_t) + Length))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &SetMessageResponse,
    17d4:	c6 01       	movw	r24, r12
    17d6:	be 01       	movw	r22, r28
    17d8:	6f 5f       	subi	r22, 0xFF	; 255
    17da:	7f 4f       	sbci	r23, 0xFF	; 255
    17dc:	40 e1       	ldi	r20, 0x10	; 16
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	11 de       	rcall	.-990    	; 0x1404 <RNDIS_GetEncapsulatedResponse>
    17e2:	88 23       	and	r24, r24
    17e4:	51 f4       	brne	.+20     	; 0x17fa <RNDIS_Host_SetRNDISProperty+0x10e>
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    17e6:	2d 85       	ldd	r18, Y+13	; 0x0d
    17e8:	3e 85       	ldd	r19, Y+14	; 0x0e
    17ea:	4f 85       	ldd	r20, Y+15	; 0x0f
    17ec:	58 89       	ldd	r21, Y+16	; 0x10
    17ee:	21 15       	cp	r18, r1
    17f0:	31 05       	cpc	r19, r1
    17f2:	41 05       	cpc	r20, r1
    17f4:	51 05       	cpc	r21, r1
    17f6:	09 f0       	breq	.+2      	; 0x17fa <RNDIS_Host_SetRNDISProperty+0x10e>
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;
    17f8:	80 e8       	ldi	r24, 0x80	; 128

	return HOST_SENDCONTROL_Successful;
}
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	9e be       	out	0x3e, r9	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	8d be       	out	0x3d, r8	; 61
    1804:	60 96       	adiw	r28, 0x10	; 16
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	df 90       	pop	r13
    181e:	cf 90       	pop	r12
    1820:	bf 90       	pop	r11
    1822:	af 90       	pop	r10
    1824:	9f 90       	pop	r9
    1826:	8f 90       	pop	r8
    1828:	08 95       	ret

0000182a <RNDIS_Host_QueryRNDISProperty>:

uint8_t RNDIS_Host_QueryRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                      const uint32_t Oid,
                                      void* Buffer,
                                      const uint16_t MaxLength)
{
    182a:	5f 92       	push	r5
    182c:	6f 92       	push	r6
    182e:	7f 92       	push	r7
    1830:	8f 92       	push	r8
    1832:	9f 92       	push	r9
    1834:	af 92       	push	r10
    1836:	bf 92       	push	r11
    1838:	cf 92       	push	r12
    183a:	df 92       	push	r13
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	6c 97       	sbiw	r28, 0x1c	; 28
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	7c 01       	movw	r14, r24
    185a:	52 2e       	mov	r5, r18
    185c:	a3 2e       	mov	r10, r19
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
    185e:	6d b6       	in	r6, 0x3d	; 61
    1860:	7e b6       	in	r7, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
    1862:	38 e1       	ldi	r19, 0x18	; 24
    1864:	83 2e       	mov	r8, r19
    1866:	91 2c       	mov	r9, r1
    1868:	80 0e       	add	r8, r16
    186a:	91 1e       	adc	r9, r17
    186c:	8d b7       	in	r24, 0x3d	; 61
    186e:	9e b7       	in	r25, 0x3e	; 62
    1870:	88 19       	sub	r24, r8
    1872:	99 09       	sbc	r25, r9
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	9e bf       	out	0x3e, r25	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	8d bf       	out	0x3d, r24	; 61
    187e:	cd b6       	in	r12, 0x3d	; 61
    1880:	de b6       	in	r13, 0x3e	; 62
    1882:	08 94       	sec
    1884:	c1 1c       	adc	r12, r1
    1886:	d1 1c       	adc	r13, r1

	QueryMessage.MessageType    = CPU_TO_LE32(REMOTE_NDIS_QUERY_MSG);
    1888:	84 e0       	ldi	r24, 0x04	; 4
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a0 e0       	ldi	r26, 0x00	; 0
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	ab 83       	std	Y+3, r26	; 0x03
    1896:	bc 83       	std	Y+4, r27	; 0x04
	QueryMessage.MessageLength  = CPU_TO_LE32(sizeof(RNDIS_Query_Message_t));
    1898:	8c e1       	ldi	r24, 0x1C	; 28
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 e0       	ldi	r26, 0x00	; 0
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	8d 83       	std	Y+5, r24	; 0x05
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	af 83       	std	Y+7, r26	; 0x07
    18a6:	b8 87       	std	Y+8, r27	; 0x08
	QueryMessage.RequestId      = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    18a8:	f7 01       	movw	r30, r14
    18aa:	84 8d       	ldd	r24, Z+28	; 0x1c
    18ac:	95 8d       	ldd	r25, Z+29	; 0x1d
    18ae:	a6 8d       	ldd	r26, Z+30	; 0x1e
    18b0:	b7 8d       	ldd	r27, Z+31	; 0x1f
    18b2:	89 87       	std	Y+9, r24	; 0x09
    18b4:	9a 87       	std	Y+10, r25	; 0x0a
    18b6:	ab 87       	std	Y+11, r26	; 0x0b
    18b8:	bc 87       	std	Y+12, r27	; 0x0c
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	a1 1d       	adc	r26, r1
    18be:	b1 1d       	adc	r27, r1
    18c0:	84 8f       	std	Z+28, r24	; 0x1c
    18c2:	95 8f       	std	Z+29, r25	; 0x1d
    18c4:	a6 8f       	std	Z+30, r26	; 0x1e
    18c6:	b7 8f       	std	Z+31, r27	; 0x1f

	QueryMessage.Oid            = cpu_to_le32(Oid);
    18c8:	4d 87       	std	Y+13, r20	; 0x0d
    18ca:	5e 87       	std	Y+14, r21	; 0x0e
    18cc:	6f 87       	std	Y+15, r22	; 0x0f
    18ce:	78 8b       	std	Y+16, r23	; 0x10
	QueryMessage.InformationBufferLength = CPU_TO_LE32(0);
    18d0:	19 8a       	std	Y+17, r1	; 0x11
    18d2:	1a 8a       	std	Y+18, r1	; 0x12
    18d4:	1b 8a       	std	Y+19, r1	; 0x13
    18d6:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = CPU_TO_LE32(0);
    18d8:	1d 8a       	std	Y+21, r1	; 0x15
    18da:	1e 8a       	std	Y+22, r1	; 0x16
    18dc:	1f 8a       	std	Y+23, r1	; 0x17
    18de:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = CPU_TO_LE32(0);
    18e0:	19 8e       	std	Y+25, r1	; 0x19
    18e2:	1a 8e       	std	Y+26, r1	; 0x1a
    18e4:	1b 8e       	std	Y+27, r1	; 0x1b
    18e6:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &QueryMessage,
    18e8:	c7 01       	movw	r24, r14
    18ea:	be 01       	movw	r22, r28
    18ec:	6f 5f       	subi	r22, 0xFF	; 255
    18ee:	7f 4f       	sbci	r23, 0xFF	; 255
    18f0:	4c e1       	ldi	r20, 0x1C	; 28
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	70 dd       	rcall	.-1312   	; 0x13d6 <RNDIS_SendEncapsulatedCommand>
    18f6:	b8 2e       	mov	r11, r24
    18f8:	88 23       	and	r24, r24
    18fa:	d9 f4       	brne	.+54     	; 0x1932 <RNDIS_Host_QueryRNDISProperty+0x108>
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &QueryMessageResponseData,
    18fc:	c7 01       	movw	r24, r14
    18fe:	b6 01       	movw	r22, r12
    1900:	a4 01       	movw	r20, r8
    1902:	80 dd       	rcall	.-1280   	; 0x1404 <RNDIS_GetEncapsulatedResponse>
    1904:	b8 2e       	mov	r11, r24
    1906:	88 23       	and	r24, r24
    1908:	a1 f4       	brne	.+40     	; 0x1932 <RNDIS_Host_QueryRNDISProperty+0x108>
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    190a:	f6 01       	movw	r30, r12
    190c:	84 85       	ldd	r24, Z+12	; 0x0c
    190e:	95 85       	ldd	r25, Z+13	; 0x0d
    1910:	a6 85       	ldd	r26, Z+14	; 0x0e
    1912:	b7 85       	ldd	r27, Z+15	; 0x0f
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	a1 05       	cpc	r26, r1
    1918:	b1 05       	cpc	r27, r1
    191a:	49 f4       	brne	.+18     	; 0x192e <RNDIS_Host_QueryRNDISProperty+0x104>
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
    191c:	96 01       	movw	r18, r12
    191e:	28 5e       	subi	r18, 0xE8	; 232
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
    1922:	85 2d       	mov	r24, r5
    1924:	9a 2d       	mov	r25, r10
    1926:	b9 01       	movw	r22, r18
    1928:	a8 01       	movw	r20, r16
    192a:	ef d0       	rcall	.+478    	; 0x1b0a <memcpy>
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <RNDIS_Host_QueryRNDISProperty+0x108>
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;
    192e:	20 e8       	ldi	r18, 0x80	; 128
    1930:	b2 2e       	mov	r11, r18

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
    1932:	8b 2d       	mov	r24, r11
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	7e be       	out	0x3e, r7	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	6d be       	out	0x3d, r6	; 61
    193e:	6c 96       	adiw	r28, 0x1c	; 28
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	1f 91       	pop	r17
    1950:	0f 91       	pop	r16
    1952:	ff 90       	pop	r15
    1954:	ef 90       	pop	r14
    1956:	df 90       	pop	r13
    1958:	cf 90       	pop	r12
    195a:	bf 90       	pop	r11
    195c:	af 90       	pop	r10
    195e:	9f 90       	pop	r9
    1960:	8f 90       	pop	r8
    1962:	7f 90       	pop	r7
    1964:	6f 90       	pop	r6
    1966:	5f 90       	pop	r5
    1968:	08 95       	ret

0000196a <RNDIS_Host_IsPacketReceived>:

bool RNDIS_Host_IsPacketReceived(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
    196a:	fc 01       	movw	r30, r24
	bool PacketWaiting;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    196c:	80 91 47 05 	lds	r24, 0x0547
    1970:	8b 30       	cpi	r24, 0x0B	; 11
    1972:	a9 f4       	brne	.+42     	; 0x199e <RNDIS_Host_IsPacketReceived+0x34>
    1974:	86 89       	ldd	r24, Z+22	; 0x16
    1976:	88 23       	and	r24, r24
    1978:	a1 f0       	breq	.+40     	; 0x19a2 <RNDIS_Host_IsPacketReceived+0x38>
    197a:	80 81       	ld	r24, Z
    197c:	8f 70       	andi	r24, 0x0F	; 15
    197e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1982:	80 91 a9 00 	lds	r24, 0x00A9
    1986:	8f 7b       	andi	r24, 0xBF	; 191
    1988:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    198c:	80 91 a6 00 	lds	r24, 0x00A6
    1990:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1992:	90 91 a9 00 	lds	r25, 0x00A9
    1996:	90 64       	ori	r25, 0x40	; 64
    1998:	90 93 a9 00 	sts	0x00A9, r25

	Pipe_Unfreeze();
	PacketWaiting = Pipe_IsINReceived();
	Pipe_Freeze();

	return PacketWaiting;
    199c:	08 95       	ret
bool RNDIS_Host_IsPacketReceived(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
	bool PacketWaiting;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
	  return false;
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	08 95       	ret
    19a2:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_Unfreeze();
	PacketWaiting = Pipe_IsINReceived();
	Pipe_Freeze();

	return PacketWaiting;
}
    19a4:	08 95       	ret

000019a6 <RNDIS_Host_ReadPacket>:

uint8_t RNDIS_Host_ReadPacket(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                              void* Buffer,
                              uint16_t* const PacketLength)
{
    19a6:	ef 92       	push	r14
    19a8:	ff 92       	push	r15
    19aa:	0f 93       	push	r16
    19ac:	1f 93       	push	r17
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	ad 97       	sbiw	r28, 0x2d	; 45
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	fc 01       	movw	r30, r24
    19c4:	7b 01       	movw	r14, r22
    19c6:	8a 01       	movw	r16, r20
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    19c8:	80 91 47 05 	lds	r24, 0x0547
    19cc:	8b 30       	cpi	r24, 0x0B	; 11
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <RNDIS_Host_ReadPacket+0x2c>
    19d0:	54 c0       	rjmp	.+168    	; 0x1a7a <RNDIS_Host_ReadPacket+0xd4>
    19d2:	86 89       	ldd	r24, Z+22	; 0x16
    19d4:	88 23       	and	r24, r24
    19d6:	09 f4       	brne	.+2      	; 0x19da <RNDIS_Host_ReadPacket+0x34>
    19d8:	50 c0       	rjmp	.+160    	; 0x1a7a <RNDIS_Host_ReadPacket+0xd4>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    19da:	80 81       	ld	r24, Z
    19dc:	8f 70       	andi	r24, 0x0F	; 15
    19de:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19e2:	80 91 a9 00 	lds	r24, 0x00A9
    19e6:	8f 7b       	andi	r24, 0xBF	; 191
    19e8:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    19ec:	80 91 a6 00 	lds	r24, 0x00A6
	  return PIPE_READYWAIT_DeviceDisconnected;

	Pipe_SelectPipe(RNDISInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
    19f0:	85 fd       	sbrc	r24, 5
    19f2:	13 c0       	rjmp	.+38     	; 0x1a1a <RNDIS_Host_ReadPacket+0x74>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    19f4:	80 91 a6 00 	lds	r24, 0x00A6
	{
		if (Pipe_IsINReceived())
    19f8:	80 ff       	sbrs	r24, 0
    19fa:	05 c0       	rjmp	.+10     	; 0x1a06 <RNDIS_Host_ReadPacket+0x60>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19fc:	80 91 a6 00 	lds	r24, 0x00A6
    1a00:	8e 77       	andi	r24, 0x7E	; 126
    1a02:	80 93 a6 00 	sts	0x00A6, r24
		  Pipe_ClearIN();

		*PacketLength = 0;
    1a06:	f8 01       	movw	r30, r16
    1a08:	11 82       	std	Z+1, r1	; 0x01
    1a0a:	10 82       	st	Z, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a0c:	80 91 a9 00 	lds	r24, 0x00A9
    1a10:	80 64       	ori	r24, 0x40	; 64
    1a12:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return PIPE_RWSTREAM_NoError;
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	31 c0       	rjmp	.+98     	; 0x1a7c <RNDIS_Host_ReadPacket+0xd6>
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t),
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	01 96       	adiw	r24, 0x01	; 1
    1a1e:	6c e2       	ldi	r22, 0x2C	; 44
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	50 d8       	rcall	.-3936   	; 0xac8 <Pipe_Read_Stream_LE>
    1a28:	28 2f       	mov	r18, r24
    1a2a:	88 23       	and	r24, r24
    1a2c:	39 f5       	brne	.+78     	; 0x1a7c <RNDIS_Host_ReadPacket+0xd6>
	                                     NULL)) != PIPE_RWSTREAM_NoError)
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)le32_to_cpu(DeviceMessage.DataLength);
    1a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a32:	f8 01       	movw	r30, r16
    1a34:	91 83       	std	Z+1, r25	; 0x01
    1a36:	80 83       	st	Z, r24

	Pipe_Discard_Stream(le32_to_cpu(DeviceMessage.DataOffset) -
    1a38:	89 85       	ldd	r24, Y+9	; 0x09
    1a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3c:	84 97       	sbiw	r24, 0x24	; 36
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	2d a7       	std	Y+45, r18	; 0x2d
    1a44:	0e 94 19 05 	call	0xa32	; 0xa32 <Pipe_Discard_Stream>
	                    (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)),
	                    NULL);

	Pipe_Read_Stream_LE(Buffer, *PacketLength, NULL);
    1a48:	f8 01       	movw	r30, r16
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	c7 01       	movw	r24, r14
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	39 d8       	rcall	.-3982   	; 0xac8 <Pipe_Read_Stream_LE>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1a56:	80 91 f6 00 	lds	r24, 0x00F6
    1a5a:	90 91 f7 00 	lds	r25, 0x00F7

	if (!(Pipe_BytesInPipe()))
    1a5e:	2d a5       	ldd	r18, Y+45	; 0x2d
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	29 f4       	brne	.+10     	; 0x1a6e <RNDIS_Host_ReadPacket+0xc8>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1a64:	80 91 a6 00 	lds	r24, 0x00A6
    1a68:	8e 77       	andi	r24, 0x7E	; 126
    1a6a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a6e:	80 91 a9 00 	lds	r24, 0x00A9
    1a72:	80 64       	ori	r24, 0x40	; 64
    1a74:	80 93 a9 00 	sts	0x00A9, r24
	  Pipe_ClearIN();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1a78:	01 c0       	rjmp	.+2      	; 0x1a7c <RNDIS_Host_ReadPacket+0xd6>
                              uint16_t* const PacketLength)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1a7a:	22 e0       	ldi	r18, 0x02	; 2
	  Pipe_ClearIN();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1a7c:	82 2f       	mov	r24, r18
    1a7e:	ad 96       	adiw	r28, 0x2d	; 45
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	ff 90       	pop	r15
    1a94:	ef 90       	pop	r14
    1a96:	08 95       	ret

00001a98 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1a98:	90 91 c8 00 	lds	r25, 0x00C8
    1a9c:	95 ff       	sbrs	r25, 5
    1a9e:	fc cf       	rjmp	.-8      	; 0x1a98 <Serial_putchar>
				UDR1 = DataByte;
    1aa0:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	08 95       	ret

00001aaa <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1aaa:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1aae:	87 ff       	sbrs	r24, 7
    1ab0:	08 c0       	rjmp	.+16     	; 0x1ac2 <Serial_getchar+0x18>
    1ab2:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1ab6:	87 ff       	sbrs	r24, 7
    1ab8:	07 c0       	rjmp	.+14     	; 0x1ac8 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1aba:	20 91 ce 00 	lds	r18, 0x00CE
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	05 c0       	rjmp	.+10     	; 0x1acc <Serial_getchar+0x22>
	  return _FDEV_EOF;
    1ac2:	2e ef       	ldi	r18, 0xFE	; 254
    1ac4:	3f ef       	ldi	r19, 0xFF	; 255
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1ac8:	2f ef       	ldi	r18, 0xFF	; 255
    1aca:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1acc:	c9 01       	movw	r24, r18
    1ace:	08 95       	ret

00001ad0 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1ad0:	fc 01       	movw	r30, r24
	if (!(Stream))
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	51 f4       	brne	.+20     	; 0x1aea <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1ad6:	e8 e4       	ldi	r30, 0x48	; 72
    1ad8:	f5 e0       	ldi	r31, 0x05	; 5
    1ada:	f0 93 57 05 	sts	0x0557, r31
    1ade:	e0 93 56 05 	sts	0x0556, r30
		stdout = Stream;
    1ae2:	f0 93 59 05 	sts	0x0559, r31
    1ae6:	e0 93 58 05 	sts	0x0558, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1aea:	8e e0       	ldi	r24, 0x0E	; 14
    1aec:	df 01       	movw	r26, r30
    1aee:	1d 92       	st	X+, r1
    1af0:	8a 95       	dec	r24
    1af2:	e9 f7       	brne	.-6      	; 0x1aee <Serial_CreateStream+0x1e>
    1af4:	83 e0       	ldi	r24, 0x03	; 3
    1af6:	83 83       	std	Z+3, r24	; 0x03
    1af8:	8c e4       	ldi	r24, 0x4C	; 76
    1afa:	9d e0       	ldi	r25, 0x0D	; 13
    1afc:	91 87       	std	Z+9, r25	; 0x09
    1afe:	80 87       	std	Z+8, r24	; 0x08
    1b00:	85 e5       	ldi	r24, 0x55	; 85
    1b02:	9d e0       	ldi	r25, 0x0D	; 13
    1b04:	93 87       	std	Z+11, r25	; 0x0b
    1b06:	82 87       	std	Z+10, r24	; 0x0a
}
    1b08:	08 95       	ret

00001b0a <memcpy>:
    1b0a:	fb 01       	movw	r30, r22
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <memcpy+0xa>
    1b10:	01 90       	ld	r0, Z+
    1b12:	0d 92       	st	X+, r0
    1b14:	41 50       	subi	r20, 0x01	; 1
    1b16:	50 40       	sbci	r21, 0x00	; 0
    1b18:	d8 f7       	brcc	.-10     	; 0x1b10 <memcpy+0x6>
    1b1a:	08 95       	ret

00001b1c <printf>:
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	fe 01       	movw	r30, r28
    1b26:	35 96       	adiw	r30, 0x05	; 5
    1b28:	61 91       	ld	r22, Z+
    1b2a:	71 91       	ld	r23, Z+
    1b2c:	80 91 58 05 	lds	r24, 0x0558
    1b30:	90 91 59 05 	lds	r25, 0x0559
    1b34:	af 01       	movw	r20, r30
    1b36:	5a d0       	rcall	.+180    	; 0x1bec <vfprintf>
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <printf_P>:
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	fe 01       	movw	r30, r28
    1b48:	35 96       	adiw	r30, 0x05	; 5
    1b4a:	61 91       	ld	r22, Z+
    1b4c:	71 91       	ld	r23, Z+
    1b4e:	80 91 58 05 	lds	r24, 0x0558
    1b52:	90 91 59 05 	lds	r25, 0x0559
    1b56:	dc 01       	movw	r26, r24
    1b58:	13 96       	adiw	r26, 0x03	; 3
    1b5a:	2c 91       	ld	r18, X
    1b5c:	13 97       	sbiw	r26, 0x03	; 3
    1b5e:	28 60       	ori	r18, 0x08	; 8
    1b60:	13 96       	adiw	r26, 0x03	; 3
    1b62:	2c 93       	st	X, r18
    1b64:	af 01       	movw	r20, r30
    1b66:	42 d0       	rcall	.+132    	; 0x1bec <vfprintf>
    1b68:	e0 91 58 05 	lds	r30, 0x0558
    1b6c:	f0 91 59 05 	lds	r31, 0x0559
    1b70:	23 81       	ldd	r18, Z+3	; 0x03
    1b72:	27 7f       	andi	r18, 0xF7	; 247
    1b74:	23 83       	std	Z+3, r18	; 0x03
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <puts_P>:
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	8c 01       	movw	r16, r24
    1b8a:	e0 91 58 05 	lds	r30, 0x0558
    1b8e:	f0 91 59 05 	lds	r31, 0x0559
    1b92:	83 81       	ldd	r24, Z+3	; 0x03
    1b94:	81 ff       	sbrs	r24, 1
    1b96:	20 c0       	rjmp	.+64     	; 0x1bd8 <puts_P+0x5c>
    1b98:	c0 e0       	ldi	r28, 0x00	; 0
    1b9a:	d0 e0       	ldi	r29, 0x00	; 0
    1b9c:	0c c0       	rjmp	.+24     	; 0x1bb6 <puts_P+0x3a>
    1b9e:	db 01       	movw	r26, r22
    1ba0:	18 96       	adiw	r26, 0x08	; 8
    1ba2:	ed 91       	ld	r30, X+
    1ba4:	fc 91       	ld	r31, X
    1ba6:	19 97       	sbiw	r26, 0x09	; 9
    1ba8:	09 95       	icall
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	11 f0       	breq	.+4      	; 0x1bb2 <puts_P+0x36>
    1bae:	cf ef       	ldi	r28, 0xFF	; 255
    1bb0:	df ef       	ldi	r29, 0xFF	; 255
    1bb2:	0f 5f       	subi	r16, 0xFF	; 255
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	84 91       	lpm	r24, Z+
    1bba:	60 91 58 05 	lds	r22, 0x0558
    1bbe:	70 91 59 05 	lds	r23, 0x0559
    1bc2:	88 23       	and	r24, r24
    1bc4:	61 f7       	brne	.-40     	; 0x1b9e <puts_P+0x22>
    1bc6:	db 01       	movw	r26, r22
    1bc8:	18 96       	adiw	r26, 0x08	; 8
    1bca:	ed 91       	ld	r30, X+
    1bcc:	fc 91       	ld	r31, X
    1bce:	19 97       	sbiw	r26, 0x09	; 9
    1bd0:	8a e0       	ldi	r24, 0x0A	; 10
    1bd2:	09 95       	icall
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	11 f0       	breq	.+4      	; 0x1bdc <puts_P+0x60>
    1bd8:	cf ef       	ldi	r28, 0xFF	; 255
    1bda:	df ef       	ldi	r29, 0xFF	; 255
    1bdc:	ce 01       	movw	r24, r28
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	1f 91       	pop	r17
    1be4:	0f 91       	pop	r16
    1be6:	ff 90       	pop	r15
    1be8:	ef 90       	pop	r14
    1bea:	08 95       	ret

00001bec <vfprintf>:
    1bec:	2f 92       	push	r2
    1bee:	3f 92       	push	r3
    1bf0:	4f 92       	push	r4
    1bf2:	5f 92       	push	r5
    1bf4:	6f 92       	push	r6
    1bf6:	7f 92       	push	r7
    1bf8:	8f 92       	push	r8
    1bfa:	9f 92       	push	r9
    1bfc:	af 92       	push	r10
    1bfe:	bf 92       	push	r11
    1c00:	cf 92       	push	r12
    1c02:	df 92       	push	r13
    1c04:	ef 92       	push	r14
    1c06:	ff 92       	push	r15
    1c08:	0f 93       	push	r16
    1c0a:	1f 93       	push	r17
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	2c 97       	sbiw	r28, 0x0c	; 12
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	6c 01       	movw	r12, r24
    1c22:	1b 01       	movw	r2, r22
    1c24:	8a 01       	movw	r16, r20
    1c26:	fc 01       	movw	r30, r24
    1c28:	17 82       	std	Z+7, r1	; 0x07
    1c2a:	16 82       	std	Z+6, r1	; 0x06
    1c2c:	83 81       	ldd	r24, Z+3	; 0x03
    1c2e:	81 ff       	sbrs	r24, 1
    1c30:	c4 c1       	rjmp	.+904    	; 0x1fba <vfprintf+0x3ce>
    1c32:	2e 01       	movw	r4, r28
    1c34:	08 94       	sec
    1c36:	41 1c       	adc	r4, r1
    1c38:	51 1c       	adc	r5, r1
    1c3a:	f6 01       	movw	r30, r12
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	f1 01       	movw	r30, r2
    1c40:	93 fd       	sbrc	r25, 3
    1c42:	85 91       	lpm	r24, Z+
    1c44:	93 ff       	sbrs	r25, 3
    1c46:	81 91       	ld	r24, Z+
    1c48:	1f 01       	movw	r2, r30
    1c4a:	88 23       	and	r24, r24
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <vfprintf+0x64>
    1c4e:	b1 c1       	rjmp	.+866    	; 0x1fb2 <vfprintf+0x3c6>
    1c50:	85 32       	cpi	r24, 0x25	; 37
    1c52:	39 f4       	brne	.+14     	; 0x1c62 <vfprintf+0x76>
    1c54:	93 fd       	sbrc	r25, 3
    1c56:	85 91       	lpm	r24, Z+
    1c58:	93 ff       	sbrs	r25, 3
    1c5a:	81 91       	ld	r24, Z+
    1c5c:	1f 01       	movw	r2, r30
    1c5e:	85 32       	cpi	r24, 0x25	; 37
    1c60:	21 f4       	brne	.+8      	; 0x1c6a <vfprintf+0x7e>
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	b6 01       	movw	r22, r12
    1c66:	db d1       	rcall	.+950    	; 0x201e <fputc>
    1c68:	e8 cf       	rjmp	.-48     	; 0x1c3a <vfprintf+0x4e>
    1c6a:	ee 24       	eor	r14, r14
    1c6c:	ff 24       	eor	r15, r15
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	20 32       	cpi	r18, 0x20	; 32
    1c72:	b0 f4       	brcc	.+44     	; 0x1ca0 <vfprintf+0xb4>
    1c74:	8b 32       	cpi	r24, 0x2B	; 43
    1c76:	69 f0       	breq	.+26     	; 0x1c92 <vfprintf+0xa6>
    1c78:	8c 32       	cpi	r24, 0x2C	; 44
    1c7a:	28 f4       	brcc	.+10     	; 0x1c86 <vfprintf+0x9a>
    1c7c:	80 32       	cpi	r24, 0x20	; 32
    1c7e:	51 f0       	breq	.+20     	; 0x1c94 <vfprintf+0xa8>
    1c80:	83 32       	cpi	r24, 0x23	; 35
    1c82:	71 f4       	brne	.+28     	; 0x1ca0 <vfprintf+0xb4>
    1c84:	0b c0       	rjmp	.+22     	; 0x1c9c <vfprintf+0xb0>
    1c86:	8d 32       	cpi	r24, 0x2D	; 45
    1c88:	39 f0       	breq	.+14     	; 0x1c98 <vfprintf+0xac>
    1c8a:	80 33       	cpi	r24, 0x30	; 48
    1c8c:	49 f4       	brne	.+18     	; 0x1ca0 <vfprintf+0xb4>
    1c8e:	21 60       	ori	r18, 0x01	; 1
    1c90:	2c c0       	rjmp	.+88     	; 0x1cea <vfprintf+0xfe>
    1c92:	22 60       	ori	r18, 0x02	; 2
    1c94:	24 60       	ori	r18, 0x04	; 4
    1c96:	29 c0       	rjmp	.+82     	; 0x1cea <vfprintf+0xfe>
    1c98:	28 60       	ori	r18, 0x08	; 8
    1c9a:	27 c0       	rjmp	.+78     	; 0x1cea <vfprintf+0xfe>
    1c9c:	20 61       	ori	r18, 0x10	; 16
    1c9e:	25 c0       	rjmp	.+74     	; 0x1cea <vfprintf+0xfe>
    1ca0:	27 fd       	sbrc	r18, 7
    1ca2:	2c c0       	rjmp	.+88     	; 0x1cfc <vfprintf+0x110>
    1ca4:	38 2f       	mov	r19, r24
    1ca6:	30 53       	subi	r19, 0x30	; 48
    1ca8:	3a 30       	cpi	r19, 0x0A	; 10
    1caa:	98 f4       	brcc	.+38     	; 0x1cd2 <vfprintf+0xe6>
    1cac:	26 ff       	sbrs	r18, 6
    1cae:	08 c0       	rjmp	.+16     	; 0x1cc0 <vfprintf+0xd4>
    1cb0:	8e 2d       	mov	r24, r14
    1cb2:	88 0f       	add	r24, r24
    1cb4:	e8 2e       	mov	r14, r24
    1cb6:	ee 0c       	add	r14, r14
    1cb8:	ee 0c       	add	r14, r14
    1cba:	e8 0e       	add	r14, r24
    1cbc:	e3 0e       	add	r14, r19
    1cbe:	15 c0       	rjmp	.+42     	; 0x1cea <vfprintf+0xfe>
    1cc0:	8f 2d       	mov	r24, r15
    1cc2:	88 0f       	add	r24, r24
    1cc4:	f8 2e       	mov	r15, r24
    1cc6:	ff 0c       	add	r15, r15
    1cc8:	ff 0c       	add	r15, r15
    1cca:	f8 0e       	add	r15, r24
    1ccc:	f3 0e       	add	r15, r19
    1cce:	20 62       	ori	r18, 0x20	; 32
    1cd0:	0c c0       	rjmp	.+24     	; 0x1cea <vfprintf+0xfe>
    1cd2:	8e 32       	cpi	r24, 0x2E	; 46
    1cd4:	21 f4       	brne	.+8      	; 0x1cde <vfprintf+0xf2>
    1cd6:	26 fd       	sbrc	r18, 6
    1cd8:	6c c1       	rjmp	.+728    	; 0x1fb2 <vfprintf+0x3c6>
    1cda:	20 64       	ori	r18, 0x40	; 64
    1cdc:	06 c0       	rjmp	.+12     	; 0x1cea <vfprintf+0xfe>
    1cde:	8c 36       	cpi	r24, 0x6C	; 108
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <vfprintf+0xfa>
    1ce2:	20 68       	ori	r18, 0x80	; 128
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <vfprintf+0xfe>
    1ce6:	88 36       	cpi	r24, 0x68	; 104
    1ce8:	49 f4       	brne	.+18     	; 0x1cfc <vfprintf+0x110>
    1cea:	f1 01       	movw	r30, r2
    1cec:	93 fd       	sbrc	r25, 3
    1cee:	85 91       	lpm	r24, Z+
    1cf0:	93 ff       	sbrs	r25, 3
    1cf2:	81 91       	ld	r24, Z+
    1cf4:	1f 01       	movw	r2, r30
    1cf6:	88 23       	and	r24, r24
    1cf8:	09 f0       	breq	.+2      	; 0x1cfc <vfprintf+0x110>
    1cfa:	ba cf       	rjmp	.-140    	; 0x1c70 <vfprintf+0x84>
    1cfc:	98 2f       	mov	r25, r24
    1cfe:	95 54       	subi	r25, 0x45	; 69
    1d00:	93 30       	cpi	r25, 0x03	; 3
    1d02:	18 f0       	brcs	.+6      	; 0x1d0a <vfprintf+0x11e>
    1d04:	90 52       	subi	r25, 0x20	; 32
    1d06:	93 30       	cpi	r25, 0x03	; 3
    1d08:	28 f4       	brcc	.+10     	; 0x1d14 <vfprintf+0x128>
    1d0a:	0c 5f       	subi	r16, 0xFC	; 252
    1d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0e:	ff e3       	ldi	r31, 0x3F	; 63
    1d10:	f9 83       	std	Y+1, r31	; 0x01
    1d12:	0d c0       	rjmp	.+26     	; 0x1d2e <vfprintf+0x142>
    1d14:	83 36       	cpi	r24, 0x63	; 99
    1d16:	31 f0       	breq	.+12     	; 0x1d24 <vfprintf+0x138>
    1d18:	83 37       	cpi	r24, 0x73	; 115
    1d1a:	71 f0       	breq	.+28     	; 0x1d38 <vfprintf+0x14c>
    1d1c:	83 35       	cpi	r24, 0x53	; 83
    1d1e:	09 f0       	breq	.+2      	; 0x1d22 <vfprintf+0x136>
    1d20:	5c c0       	rjmp	.+184    	; 0x1dda <vfprintf+0x1ee>
    1d22:	21 c0       	rjmp	.+66     	; 0x1d66 <vfprintf+0x17a>
    1d24:	f8 01       	movw	r30, r16
    1d26:	80 81       	ld	r24, Z
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	0e 5f       	subi	r16, 0xFE	; 254
    1d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2e:	42 01       	movw	r8, r4
    1d30:	71 e0       	ldi	r23, 0x01	; 1
    1d32:	a7 2e       	mov	r10, r23
    1d34:	b1 2c       	mov	r11, r1
    1d36:	15 c0       	rjmp	.+42     	; 0x1d62 <vfprintf+0x176>
    1d38:	62 e0       	ldi	r22, 0x02	; 2
    1d3a:	66 2e       	mov	r6, r22
    1d3c:	71 2c       	mov	r7, r1
    1d3e:	60 0e       	add	r6, r16
    1d40:	71 1e       	adc	r7, r17
    1d42:	f8 01       	movw	r30, r16
    1d44:	80 80       	ld	r8, Z
    1d46:	91 80       	ldd	r9, Z+1	; 0x01
    1d48:	26 ff       	sbrs	r18, 6
    1d4a:	03 c0       	rjmp	.+6      	; 0x1d52 <vfprintf+0x166>
    1d4c:	6e 2d       	mov	r22, r14
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <vfprintf+0x16a>
    1d52:	6f ef       	ldi	r22, 0xFF	; 255
    1d54:	7f ef       	ldi	r23, 0xFF	; 255
    1d56:	c4 01       	movw	r24, r8
    1d58:	2c 87       	std	Y+12, r18	; 0x0c
    1d5a:	56 d1       	rcall	.+684    	; 0x2008 <strnlen>
    1d5c:	5c 01       	movw	r10, r24
    1d5e:	83 01       	movw	r16, r6
    1d60:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d62:	2f 77       	andi	r18, 0x7F	; 127
    1d64:	16 c0       	rjmp	.+44     	; 0x1d92 <vfprintf+0x1a6>
    1d66:	52 e0       	ldi	r21, 0x02	; 2
    1d68:	65 2e       	mov	r6, r21
    1d6a:	71 2c       	mov	r7, r1
    1d6c:	60 0e       	add	r6, r16
    1d6e:	71 1e       	adc	r7, r17
    1d70:	f8 01       	movw	r30, r16
    1d72:	80 80       	ld	r8, Z
    1d74:	91 80       	ldd	r9, Z+1	; 0x01
    1d76:	26 ff       	sbrs	r18, 6
    1d78:	03 c0       	rjmp	.+6      	; 0x1d80 <vfprintf+0x194>
    1d7a:	6e 2d       	mov	r22, r14
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <vfprintf+0x198>
    1d80:	6f ef       	ldi	r22, 0xFF	; 255
    1d82:	7f ef       	ldi	r23, 0xFF	; 255
    1d84:	c4 01       	movw	r24, r8
    1d86:	2c 87       	std	Y+12, r18	; 0x0c
    1d88:	34 d1       	rcall	.+616    	; 0x1ff2 <strnlen_P>
    1d8a:	5c 01       	movw	r10, r24
    1d8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d8e:	20 68       	ori	r18, 0x80	; 128
    1d90:	83 01       	movw	r16, r6
    1d92:	23 fd       	sbrc	r18, 3
    1d94:	1e c0       	rjmp	.+60     	; 0x1dd2 <vfprintf+0x1e6>
    1d96:	07 c0       	rjmp	.+14     	; 0x1da6 <vfprintf+0x1ba>
    1d98:	80 e2       	ldi	r24, 0x20	; 32
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	b6 01       	movw	r22, r12
    1d9e:	2c 87       	std	Y+12, r18	; 0x0c
    1da0:	3e d1       	rcall	.+636    	; 0x201e <fputc>
    1da2:	fa 94       	dec	r15
    1da4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1da6:	8f 2d       	mov	r24, r15
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	a8 16       	cp	r10, r24
    1dac:	b9 06       	cpc	r11, r25
    1dae:	a0 f3       	brcs	.-24     	; 0x1d98 <vfprintf+0x1ac>
    1db0:	10 c0       	rjmp	.+32     	; 0x1dd2 <vfprintf+0x1e6>
    1db2:	f4 01       	movw	r30, r8
    1db4:	27 fd       	sbrc	r18, 7
    1db6:	85 91       	lpm	r24, Z+
    1db8:	27 ff       	sbrs	r18, 7
    1dba:	81 91       	ld	r24, Z+
    1dbc:	4f 01       	movw	r8, r30
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	b6 01       	movw	r22, r12
    1dc2:	2c 87       	std	Y+12, r18	; 0x0c
    1dc4:	2c d1       	rcall	.+600    	; 0x201e <fputc>
    1dc6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dc8:	f1 10       	cpse	r15, r1
    1dca:	fa 94       	dec	r15
    1dcc:	08 94       	sec
    1dce:	a1 08       	sbc	r10, r1
    1dd0:	b1 08       	sbc	r11, r1
    1dd2:	a1 14       	cp	r10, r1
    1dd4:	b1 04       	cpc	r11, r1
    1dd6:	69 f7       	brne	.-38     	; 0x1db2 <vfprintf+0x1c6>
    1dd8:	e9 c0       	rjmp	.+466    	; 0x1fac <vfprintf+0x3c0>
    1dda:	84 36       	cpi	r24, 0x64	; 100
    1ddc:	11 f0       	breq	.+4      	; 0x1de2 <vfprintf+0x1f6>
    1dde:	89 36       	cpi	r24, 0x69	; 105
    1de0:	41 f5       	brne	.+80     	; 0x1e32 <vfprintf+0x246>
    1de2:	27 ff       	sbrs	r18, 7
    1de4:	08 c0       	rjmp	.+16     	; 0x1df6 <vfprintf+0x20a>
    1de6:	f8 01       	movw	r30, r16
    1de8:	60 81       	ld	r22, Z
    1dea:	71 81       	ldd	r23, Z+1	; 0x01
    1dec:	82 81       	ldd	r24, Z+2	; 0x02
    1dee:	93 81       	ldd	r25, Z+3	; 0x03
    1df0:	0c 5f       	subi	r16, 0xFC	; 252
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	09 c0       	rjmp	.+18     	; 0x1e08 <vfprintf+0x21c>
    1df6:	f8 01       	movw	r30, r16
    1df8:	60 81       	ld	r22, Z
    1dfa:	71 81       	ldd	r23, Z+1	; 0x01
    1dfc:	88 27       	eor	r24, r24
    1dfe:	77 fd       	sbrc	r23, 7
    1e00:	80 95       	com	r24
    1e02:	98 2f       	mov	r25, r24
    1e04:	0e 5f       	subi	r16, 0xFE	; 254
    1e06:	1f 4f       	sbci	r17, 0xFF	; 255
    1e08:	4f e6       	ldi	r20, 0x6F	; 111
    1e0a:	b4 2e       	mov	r11, r20
    1e0c:	b2 22       	and	r11, r18
    1e0e:	97 ff       	sbrs	r25, 7
    1e10:	09 c0       	rjmp	.+18     	; 0x1e24 <vfprintf+0x238>
    1e12:	90 95       	com	r25
    1e14:	80 95       	com	r24
    1e16:	70 95       	com	r23
    1e18:	61 95       	neg	r22
    1e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e20:	f0 e8       	ldi	r31, 0x80	; 128
    1e22:	bf 2a       	or	r11, r31
    1e24:	a2 01       	movw	r20, r4
    1e26:	2a e0       	ldi	r18, 0x0A	; 10
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	25 d1       	rcall	.+586    	; 0x2076 <__ultoa_invert>
    1e2c:	78 2e       	mov	r7, r24
    1e2e:	74 18       	sub	r7, r4
    1e30:	44 c0       	rjmp	.+136    	; 0x1eba <vfprintf+0x2ce>
    1e32:	85 37       	cpi	r24, 0x75	; 117
    1e34:	31 f4       	brne	.+12     	; 0x1e42 <vfprintf+0x256>
    1e36:	3f ee       	ldi	r19, 0xEF	; 239
    1e38:	b3 2e       	mov	r11, r19
    1e3a:	b2 22       	and	r11, r18
    1e3c:	2a e0       	ldi	r18, 0x0A	; 10
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	25 c0       	rjmp	.+74     	; 0x1e8c <vfprintf+0x2a0>
    1e42:	99 ef       	ldi	r25, 0xF9	; 249
    1e44:	b9 2e       	mov	r11, r25
    1e46:	b2 22       	and	r11, r18
    1e48:	8f 36       	cpi	r24, 0x6F	; 111
    1e4a:	c1 f0       	breq	.+48     	; 0x1e7c <vfprintf+0x290>
    1e4c:	80 37       	cpi	r24, 0x70	; 112
    1e4e:	20 f4       	brcc	.+8      	; 0x1e58 <vfprintf+0x26c>
    1e50:	88 35       	cpi	r24, 0x58	; 88
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <vfprintf+0x26a>
    1e54:	ae c0       	rjmp	.+348    	; 0x1fb2 <vfprintf+0x3c6>
    1e56:	0d c0       	rjmp	.+26     	; 0x1e72 <vfprintf+0x286>
    1e58:	80 37       	cpi	r24, 0x70	; 112
    1e5a:	21 f0       	breq	.+8      	; 0x1e64 <vfprintf+0x278>
    1e5c:	88 37       	cpi	r24, 0x78	; 120
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <vfprintf+0x276>
    1e60:	a8 c0       	rjmp	.+336    	; 0x1fb2 <vfprintf+0x3c6>
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <vfprintf+0x27c>
    1e64:	20 e1       	ldi	r18, 0x10	; 16
    1e66:	b2 2a       	or	r11, r18
    1e68:	b4 fe       	sbrs	r11, 4
    1e6a:	0b c0       	rjmp	.+22     	; 0x1e82 <vfprintf+0x296>
    1e6c:	84 e0       	ldi	r24, 0x04	; 4
    1e6e:	b8 2a       	or	r11, r24
    1e70:	08 c0       	rjmp	.+16     	; 0x1e82 <vfprintf+0x296>
    1e72:	b4 fe       	sbrs	r11, 4
    1e74:	09 c0       	rjmp	.+18     	; 0x1e88 <vfprintf+0x29c>
    1e76:	e6 e0       	ldi	r30, 0x06	; 6
    1e78:	be 2a       	or	r11, r30
    1e7a:	06 c0       	rjmp	.+12     	; 0x1e88 <vfprintf+0x29c>
    1e7c:	28 e0       	ldi	r18, 0x08	; 8
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	05 c0       	rjmp	.+10     	; 0x1e8c <vfprintf+0x2a0>
    1e82:	20 e1       	ldi	r18, 0x10	; 16
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <vfprintf+0x2a0>
    1e88:	20 e1       	ldi	r18, 0x10	; 16
    1e8a:	32 e0       	ldi	r19, 0x02	; 2
    1e8c:	b7 fe       	sbrs	r11, 7
    1e8e:	08 c0       	rjmp	.+16     	; 0x1ea0 <vfprintf+0x2b4>
    1e90:	f8 01       	movw	r30, r16
    1e92:	60 81       	ld	r22, Z
    1e94:	71 81       	ldd	r23, Z+1	; 0x01
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	0c 5f       	subi	r16, 0xFC	; 252
    1e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9e:	07 c0       	rjmp	.+14     	; 0x1eae <vfprintf+0x2c2>
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	60 81       	ld	r22, Z
    1ea4:	71 81       	ldd	r23, Z+1	; 0x01
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	0e 5f       	subi	r16, 0xFE	; 254
    1eac:	1f 4f       	sbci	r17, 0xFF	; 255
    1eae:	a2 01       	movw	r20, r4
    1eb0:	e2 d0       	rcall	.+452    	; 0x2076 <__ultoa_invert>
    1eb2:	78 2e       	mov	r7, r24
    1eb4:	74 18       	sub	r7, r4
    1eb6:	ff e7       	ldi	r31, 0x7F	; 127
    1eb8:	bf 22       	and	r11, r31
    1eba:	b6 fe       	sbrs	r11, 6
    1ebc:	0b c0       	rjmp	.+22     	; 0x1ed4 <vfprintf+0x2e8>
    1ebe:	2e ef       	ldi	r18, 0xFE	; 254
    1ec0:	b2 22       	and	r11, r18
    1ec2:	7e 14       	cp	r7, r14
    1ec4:	38 f4       	brcc	.+14     	; 0x1ed4 <vfprintf+0x2e8>
    1ec6:	b4 fe       	sbrs	r11, 4
    1ec8:	07 c0       	rjmp	.+14     	; 0x1ed8 <vfprintf+0x2ec>
    1eca:	b2 fc       	sbrc	r11, 2
    1ecc:	05 c0       	rjmp	.+10     	; 0x1ed8 <vfprintf+0x2ec>
    1ece:	8f ee       	ldi	r24, 0xEF	; 239
    1ed0:	b8 22       	and	r11, r24
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <vfprintf+0x2ec>
    1ed4:	a7 2c       	mov	r10, r7
    1ed6:	01 c0       	rjmp	.+2      	; 0x1eda <vfprintf+0x2ee>
    1ed8:	ae 2c       	mov	r10, r14
    1eda:	8b 2d       	mov	r24, r11
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	b4 fe       	sbrs	r11, 4
    1ee0:	0d c0       	rjmp	.+26     	; 0x1efc <vfprintf+0x310>
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	e7 0d       	add	r30, r7
    1ee6:	f1 1d       	adc	r31, r1
    1ee8:	20 81       	ld	r18, Z
    1eea:	20 33       	cpi	r18, 0x30	; 48
    1eec:	19 f4       	brne	.+6      	; 0x1ef4 <vfprintf+0x308>
    1eee:	e9 ee       	ldi	r30, 0xE9	; 233
    1ef0:	be 22       	and	r11, r30
    1ef2:	09 c0       	rjmp	.+18     	; 0x1f06 <vfprintf+0x31a>
    1ef4:	a3 94       	inc	r10
    1ef6:	b2 fe       	sbrs	r11, 2
    1ef8:	06 c0       	rjmp	.+12     	; 0x1f06 <vfprintf+0x31a>
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <vfprintf+0x318>
    1efc:	86 78       	andi	r24, 0x86	; 134
    1efe:	90 70       	andi	r25, 0x00	; 0
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <vfprintf+0x31a>
    1f04:	a3 94       	inc	r10
    1f06:	8b 2c       	mov	r8, r11
    1f08:	99 24       	eor	r9, r9
    1f0a:	b3 fc       	sbrc	r11, 3
    1f0c:	13 c0       	rjmp	.+38     	; 0x1f34 <vfprintf+0x348>
    1f0e:	b0 fe       	sbrs	r11, 0
    1f10:	0e c0       	rjmp	.+28     	; 0x1f2e <vfprintf+0x342>
    1f12:	af 14       	cp	r10, r15
    1f14:	28 f4       	brcc	.+10     	; 0x1f20 <vfprintf+0x334>
    1f16:	e7 2c       	mov	r14, r7
    1f18:	ef 0c       	add	r14, r15
    1f1a:	ea 18       	sub	r14, r10
    1f1c:	af 2c       	mov	r10, r15
    1f1e:	07 c0       	rjmp	.+14     	; 0x1f2e <vfprintf+0x342>
    1f20:	e7 2c       	mov	r14, r7
    1f22:	05 c0       	rjmp	.+10     	; 0x1f2e <vfprintf+0x342>
    1f24:	80 e2       	ldi	r24, 0x20	; 32
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	b6 01       	movw	r22, r12
    1f2a:	79 d0       	rcall	.+242    	; 0x201e <fputc>
    1f2c:	a3 94       	inc	r10
    1f2e:	af 14       	cp	r10, r15
    1f30:	c8 f3       	brcs	.-14     	; 0x1f24 <vfprintf+0x338>
    1f32:	04 c0       	rjmp	.+8      	; 0x1f3c <vfprintf+0x350>
    1f34:	af 14       	cp	r10, r15
    1f36:	10 f4       	brcc	.+4      	; 0x1f3c <vfprintf+0x350>
    1f38:	fa 18       	sub	r15, r10
    1f3a:	01 c0       	rjmp	.+2      	; 0x1f3e <vfprintf+0x352>
    1f3c:	ff 24       	eor	r15, r15
    1f3e:	84 fe       	sbrs	r8, 4
    1f40:	0e c0       	rjmp	.+28     	; 0x1f5e <vfprintf+0x372>
    1f42:	80 e3       	ldi	r24, 0x30	; 48
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	b6 01       	movw	r22, r12
    1f48:	6a d0       	rcall	.+212    	; 0x201e <fputc>
    1f4a:	82 fe       	sbrs	r8, 2
    1f4c:	1d c0       	rjmp	.+58     	; 0x1f88 <vfprintf+0x39c>
    1f4e:	81 fe       	sbrs	r8, 1
    1f50:	03 c0       	rjmp	.+6      	; 0x1f58 <vfprintf+0x36c>
    1f52:	88 e5       	ldi	r24, 0x58	; 88
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	10 c0       	rjmp	.+32     	; 0x1f78 <vfprintf+0x38c>
    1f58:	88 e7       	ldi	r24, 0x78	; 120
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0d c0       	rjmp	.+26     	; 0x1f78 <vfprintf+0x38c>
    1f5e:	c4 01       	movw	r24, r8
    1f60:	86 78       	andi	r24, 0x86	; 134
    1f62:	90 70       	andi	r25, 0x00	; 0
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	81 f0       	breq	.+32     	; 0x1f88 <vfprintf+0x39c>
    1f68:	81 fc       	sbrc	r8, 1
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <vfprintf+0x384>
    1f6c:	80 e2       	ldi	r24, 0x20	; 32
    1f6e:	01 c0       	rjmp	.+2      	; 0x1f72 <vfprintf+0x386>
    1f70:	8b e2       	ldi	r24, 0x2B	; 43
    1f72:	b7 fc       	sbrc	r11, 7
    1f74:	8d e2       	ldi	r24, 0x2D	; 45
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	b6 01       	movw	r22, r12
    1f7a:	51 d0       	rcall	.+162    	; 0x201e <fputc>
    1f7c:	05 c0       	rjmp	.+10     	; 0x1f88 <vfprintf+0x39c>
    1f7e:	80 e3       	ldi	r24, 0x30	; 48
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	b6 01       	movw	r22, r12
    1f84:	4c d0       	rcall	.+152    	; 0x201e <fputc>
    1f86:	ea 94       	dec	r14
    1f88:	7e 14       	cp	r7, r14
    1f8a:	c8 f3       	brcs	.-14     	; 0x1f7e <vfprintf+0x392>
    1f8c:	7a 94       	dec	r7
    1f8e:	f2 01       	movw	r30, r4
    1f90:	e7 0d       	add	r30, r7
    1f92:	f1 1d       	adc	r31, r1
    1f94:	80 81       	ld	r24, Z
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	b6 01       	movw	r22, r12
    1f9a:	41 d0       	rcall	.+130    	; 0x201e <fputc>
    1f9c:	77 20       	and	r7, r7
    1f9e:	b1 f7       	brne	.-20     	; 0x1f8c <vfprintf+0x3a0>
    1fa0:	05 c0       	rjmp	.+10     	; 0x1fac <vfprintf+0x3c0>
    1fa2:	80 e2       	ldi	r24, 0x20	; 32
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	b6 01       	movw	r22, r12
    1fa8:	3a d0       	rcall	.+116    	; 0x201e <fputc>
    1faa:	fa 94       	dec	r15
    1fac:	ff 20       	and	r15, r15
    1fae:	c9 f7       	brne	.-14     	; 0x1fa2 <vfprintf+0x3b6>
    1fb0:	44 ce       	rjmp	.-888    	; 0x1c3a <vfprintf+0x4e>
    1fb2:	f6 01       	movw	r30, r12
    1fb4:	26 81       	ldd	r18, Z+6	; 0x06
    1fb6:	37 81       	ldd	r19, Z+7	; 0x07
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <vfprintf+0x3d2>
    1fba:	2f ef       	ldi	r18, 0xFF	; 255
    1fbc:	3f ef       	ldi	r19, 0xFF	; 255
    1fbe:	c9 01       	movw	r24, r18
    1fc0:	2c 96       	adiw	r28, 0x0c	; 12
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	1f 91       	pop	r17
    1fd2:	0f 91       	pop	r16
    1fd4:	ff 90       	pop	r15
    1fd6:	ef 90       	pop	r14
    1fd8:	df 90       	pop	r13
    1fda:	cf 90       	pop	r12
    1fdc:	bf 90       	pop	r11
    1fde:	af 90       	pop	r10
    1fe0:	9f 90       	pop	r9
    1fe2:	8f 90       	pop	r8
    1fe4:	7f 90       	pop	r7
    1fe6:	6f 90       	pop	r6
    1fe8:	5f 90       	pop	r5
    1fea:	4f 90       	pop	r4
    1fec:	3f 90       	pop	r3
    1fee:	2f 90       	pop	r2
    1ff0:	08 95       	ret

00001ff2 <strnlen_P>:
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	05 90       	lpm	r0, Z+
    1ff6:	61 50       	subi	r22, 0x01	; 1
    1ff8:	70 40       	sbci	r23, 0x00	; 0
    1ffa:	01 10       	cpse	r0, r1
    1ffc:	d8 f7       	brcc	.-10     	; 0x1ff4 <strnlen_P+0x2>
    1ffe:	80 95       	com	r24
    2000:	90 95       	com	r25
    2002:	8e 0f       	add	r24, r30
    2004:	9f 1f       	adc	r25, r31
    2006:	08 95       	ret

00002008 <strnlen>:
    2008:	fc 01       	movw	r30, r24
    200a:	61 50       	subi	r22, 0x01	; 1
    200c:	70 40       	sbci	r23, 0x00	; 0
    200e:	01 90       	ld	r0, Z+
    2010:	01 10       	cpse	r0, r1
    2012:	d8 f7       	brcc	.-10     	; 0x200a <strnlen+0x2>
    2014:	80 95       	com	r24
    2016:	90 95       	com	r25
    2018:	8e 0f       	add	r24, r30
    201a:	9f 1f       	adc	r25, r31
    201c:	08 95       	ret

0000201e <fputc>:
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	8c 01       	movw	r16, r24
    2028:	eb 01       	movw	r28, r22
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	81 ff       	sbrs	r24, 1
    202e:	1b c0       	rjmp	.+54     	; 0x2066 <fputc+0x48>
    2030:	82 ff       	sbrs	r24, 2
    2032:	0d c0       	rjmp	.+26     	; 0x204e <fputc+0x30>
    2034:	2e 81       	ldd	r18, Y+6	; 0x06
    2036:	3f 81       	ldd	r19, Y+7	; 0x07
    2038:	8c 81       	ldd	r24, Y+4	; 0x04
    203a:	9d 81       	ldd	r25, Y+5	; 0x05
    203c:	28 17       	cp	r18, r24
    203e:	39 07       	cpc	r19, r25
    2040:	64 f4       	brge	.+24     	; 0x205a <fputc+0x3c>
    2042:	e8 81       	ld	r30, Y
    2044:	f9 81       	ldd	r31, Y+1	; 0x01
    2046:	01 93       	st	Z+, r16
    2048:	f9 83       	std	Y+1, r31	; 0x01
    204a:	e8 83       	st	Y, r30
    204c:	06 c0       	rjmp	.+12     	; 0x205a <fputc+0x3c>
    204e:	e8 85       	ldd	r30, Y+8	; 0x08
    2050:	f9 85       	ldd	r31, Y+9	; 0x09
    2052:	80 2f       	mov	r24, r16
    2054:	09 95       	icall
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	31 f4       	brne	.+12     	; 0x2066 <fputc+0x48>
    205a:	8e 81       	ldd	r24, Y+6	; 0x06
    205c:	9f 81       	ldd	r25, Y+7	; 0x07
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	9f 83       	std	Y+7, r25	; 0x07
    2062:	8e 83       	std	Y+6, r24	; 0x06
    2064:	02 c0       	rjmp	.+4      	; 0x206a <fputc+0x4c>
    2066:	0f ef       	ldi	r16, 0xFF	; 255
    2068:	1f ef       	ldi	r17, 0xFF	; 255
    206a:	c8 01       	movw	r24, r16
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	08 95       	ret

00002076 <__ultoa_invert>:
    2076:	fa 01       	movw	r30, r20
    2078:	aa 27       	eor	r26, r26
    207a:	28 30       	cpi	r18, 0x08	; 8
    207c:	51 f1       	breq	.+84     	; 0x20d2 <__ultoa_invert+0x5c>
    207e:	20 31       	cpi	r18, 0x10	; 16
    2080:	81 f1       	breq	.+96     	; 0x20e2 <__ultoa_invert+0x6c>
    2082:	e8 94       	clt
    2084:	6f 93       	push	r22
    2086:	6e 7f       	andi	r22, 0xFE	; 254
    2088:	6e 5f       	subi	r22, 0xFE	; 254
    208a:	7f 4f       	sbci	r23, 0xFF	; 255
    208c:	8f 4f       	sbci	r24, 0xFF	; 255
    208e:	9f 4f       	sbci	r25, 0xFF	; 255
    2090:	af 4f       	sbci	r26, 0xFF	; 255
    2092:	b1 e0       	ldi	r27, 0x01	; 1
    2094:	3e d0       	rcall	.+124    	; 0x2112 <__stack+0x13>
    2096:	b4 e0       	ldi	r27, 0x04	; 4
    2098:	3c d0       	rcall	.+120    	; 0x2112 <__stack+0x13>
    209a:	67 0f       	add	r22, r23
    209c:	78 1f       	adc	r23, r24
    209e:	89 1f       	adc	r24, r25
    20a0:	9a 1f       	adc	r25, r26
    20a2:	a1 1d       	adc	r26, r1
    20a4:	68 0f       	add	r22, r24
    20a6:	79 1f       	adc	r23, r25
    20a8:	8a 1f       	adc	r24, r26
    20aa:	91 1d       	adc	r25, r1
    20ac:	a1 1d       	adc	r26, r1
    20ae:	6a 0f       	add	r22, r26
    20b0:	71 1d       	adc	r23, r1
    20b2:	81 1d       	adc	r24, r1
    20b4:	91 1d       	adc	r25, r1
    20b6:	a1 1d       	adc	r26, r1
    20b8:	20 d0       	rcall	.+64     	; 0x20fa <__ultoa_invert+0x84>
    20ba:	09 f4       	brne	.+2      	; 0x20be <__ultoa_invert+0x48>
    20bc:	68 94       	set
    20be:	3f 91       	pop	r19
    20c0:	2a e0       	ldi	r18, 0x0A	; 10
    20c2:	26 9f       	mul	r18, r22
    20c4:	11 24       	eor	r1, r1
    20c6:	30 19       	sub	r19, r0
    20c8:	30 5d       	subi	r19, 0xD0	; 208
    20ca:	31 93       	st	Z+, r19
    20cc:	de f6       	brtc	.-74     	; 0x2084 <__ultoa_invert+0xe>
    20ce:	cf 01       	movw	r24, r30
    20d0:	08 95       	ret
    20d2:	46 2f       	mov	r20, r22
    20d4:	47 70       	andi	r20, 0x07	; 7
    20d6:	40 5d       	subi	r20, 0xD0	; 208
    20d8:	41 93       	st	Z+, r20
    20da:	b3 e0       	ldi	r27, 0x03	; 3
    20dc:	0f d0       	rcall	.+30     	; 0x20fc <__ultoa_invert+0x86>
    20de:	c9 f7       	brne	.-14     	; 0x20d2 <__ultoa_invert+0x5c>
    20e0:	f6 cf       	rjmp	.-20     	; 0x20ce <__ultoa_invert+0x58>
    20e2:	46 2f       	mov	r20, r22
    20e4:	4f 70       	andi	r20, 0x0F	; 15
    20e6:	40 5d       	subi	r20, 0xD0	; 208
    20e8:	4a 33       	cpi	r20, 0x3A	; 58
    20ea:	18 f0       	brcs	.+6      	; 0x20f2 <__ultoa_invert+0x7c>
    20ec:	49 5d       	subi	r20, 0xD9	; 217
    20ee:	31 fd       	sbrc	r19, 1
    20f0:	40 52       	subi	r20, 0x20	; 32
    20f2:	41 93       	st	Z+, r20
    20f4:	02 d0       	rcall	.+4      	; 0x20fa <__ultoa_invert+0x84>
    20f6:	a9 f7       	brne	.-22     	; 0x20e2 <__ultoa_invert+0x6c>
    20f8:	ea cf       	rjmp	.-44     	; 0x20ce <__ultoa_invert+0x58>
    20fa:	b4 e0       	ldi	r27, 0x04	; 4
    20fc:	a6 95       	lsr	r26
    20fe:	97 95       	ror	r25
    2100:	87 95       	ror	r24
    2102:	77 95       	ror	r23
    2104:	67 95       	ror	r22
    2106:	ba 95       	dec	r27
    2108:	c9 f7       	brne	.-14     	; 0x20fc <__ultoa_invert+0x86>
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	61 05       	cpc	r22, r1
    210e:	71 05       	cpc	r23, r1
    2110:	08 95       	ret
    2112:	9b 01       	movw	r18, r22
    2114:	ac 01       	movw	r20, r24
    2116:	0a 2e       	mov	r0, r26
    2118:	06 94       	lsr	r0
    211a:	57 95       	ror	r21
    211c:	47 95       	ror	r20
    211e:	37 95       	ror	r19
    2120:	27 95       	ror	r18
    2122:	ba 95       	dec	r27
    2124:	c9 f7       	brne	.-14     	; 0x2118 <__stack+0x19>
    2126:	62 0f       	add	r22, r18
    2128:	73 1f       	adc	r23, r19
    212a:	84 1f       	adc	r24, r20
    212c:	95 1f       	adc	r25, r21
    212e:	a0 1d       	adc	r26, r0
    2130:	08 95       	ret

00002132 <_exit>:
    2132:	f8 94       	cli

00002134 <__stop_program>:
    2134:	ff cf       	rjmp	.-2      	; 0x2134 <__stop_program>
