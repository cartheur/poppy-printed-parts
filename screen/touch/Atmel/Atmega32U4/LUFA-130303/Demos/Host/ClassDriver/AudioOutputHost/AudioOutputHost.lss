
AudioOutputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001aac  00001b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800124  00800124  00001b64  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00001b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ddb  00000000  00000000  00003e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000788  00000000  00000000  00004c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000114b  00000000  00000000  000053d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cf4a  00000000  00000000  00006522  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d02  00000000  00000000  0001346c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009ae4  00000000  00000000  0001616e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c70  00000000  00000000  0001fc54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004fe3  00000000  00000000  000208c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000071a7  00000000  00000000  000258a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001ee4  00000000  00000000  0002ca4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a18  00000000  00000000  0002e932  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2e c1       	rjmp	.+604    	; 0x25e <__ctors_end>
       2:	00 00       	nop
       4:	4a c1       	rjmp	.+660    	; 0x29a <__bad_interrupt>
       6:	00 00       	nop
       8:	48 c1       	rjmp	.+656    	; 0x29a <__bad_interrupt>
       a:	00 00       	nop
       c:	46 c1       	rjmp	.+652    	; 0x29a <__bad_interrupt>
       e:	00 00       	nop
      10:	44 c1       	rjmp	.+648    	; 0x29a <__bad_interrupt>
      12:	00 00       	nop
      14:	42 c1       	rjmp	.+644    	; 0x29a <__bad_interrupt>
      16:	00 00       	nop
      18:	40 c1       	rjmp	.+640    	; 0x29a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3e c1       	rjmp	.+636    	; 0x29a <__bad_interrupt>
      1e:	00 00       	nop
      20:	3c c1       	rjmp	.+632    	; 0x29a <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c1       	rjmp	.+628    	; 0x29a <__bad_interrupt>
      26:	00 00       	nop
      28:	1e c6       	rjmp	.+3132   	; 0xc66 <__vector_10>
      2a:	00 00       	nop
      2c:	36 c1       	rjmp	.+620    	; 0x29a <__bad_interrupt>
      2e:	00 00       	nop
      30:	34 c1       	rjmp	.+616    	; 0x29a <__bad_interrupt>
      32:	00 00       	nop
      34:	32 c1       	rjmp	.+612    	; 0x29a <__bad_interrupt>
      36:	00 00       	nop
      38:	30 c1       	rjmp	.+608    	; 0x29a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2e c1       	rjmp	.+604    	; 0x29a <__bad_interrupt>
      3e:	00 00       	nop
      40:	2c c1       	rjmp	.+600    	; 0x29a <__bad_interrupt>
      42:	00 00       	nop
      44:	2a c1       	rjmp	.+596    	; 0x29a <__bad_interrupt>
      46:	00 00       	nop
      48:	28 c1       	rjmp	.+592    	; 0x29a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	26 c1       	rjmp	.+588    	; 0x29a <__bad_interrupt>
      4e:	00 00       	nop
      50:	24 c1       	rjmp	.+584    	; 0x29a <__bad_interrupt>
      52:	00 00       	nop
      54:	28 c1       	rjmp	.+592    	; 0x2a6 <__vector_21>
      56:	00 00       	nop
      58:	20 c1       	rjmp	.+576    	; 0x29a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1e c1       	rjmp	.+572    	; 0x29a <__bad_interrupt>
      5e:	00 00       	nop
      60:	1c c1       	rjmp	.+568    	; 0x29a <__bad_interrupt>
      62:	00 00       	nop
      64:	1a c1       	rjmp	.+564    	; 0x29a <__bad_interrupt>
      66:	00 00       	nop
      68:	18 c1       	rjmp	.+560    	; 0x29a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	16 c1       	rjmp	.+556    	; 0x29a <__bad_interrupt>
      6e:	00 00       	nop
      70:	14 c1       	rjmp	.+552    	; 0x29a <__bad_interrupt>
      72:	00 00       	nop
      74:	12 c1       	rjmp	.+548    	; 0x29a <__bad_interrupt>
      76:	00 00       	nop
      78:	10 c1       	rjmp	.+544    	; 0x29a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0e c1       	rjmp	.+540    	; 0x29a <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c c1       	rjmp	.+536    	; 0x29a <__bad_interrupt>
      82:	00 00       	nop
      84:	0a c1       	rjmp	.+532    	; 0x29a <__bad_interrupt>
      86:	00 00       	nop
      88:	08 c1       	rjmp	.+528    	; 0x29a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 c1       	rjmp	.+524    	; 0x29a <__bad_interrupt>
      8e:	00 00       	nop
      90:	04 c1       	rjmp	.+520    	; 0x29a <__bad_interrupt>
      92:	00 00       	nop
      94:	02 c1       	rjmp	.+516    	; 0x29a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4341>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4334>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4329>:
     11d:	41 75 64 69 6f 20 44 65 76 69 63 65 20 45 6e 75     Audio Device Enu
     12d:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

00000138 <__c.4327>:
     138:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 41 75     Error Setting Au
     148:	64 69 6f 20 53 61 6d 70 6c 69 6e 67 20 46 72 65     dio Sampling Fre
     158:	71 75 65 6e 63 79 2e 0d 0a 00                       quency....

00000162 <__c.4324>:
     162:	45 72 72 6f 72 20 45 6e 61 62 6c 69 6e 67 20 41     Error Enabling A
     172:	75 64 69 6f 20 53 74 72 65 61 6d 2e 0d 0a 00        udio Stream....

00000181 <__c.4322>:
     181:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     191:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1a1:	6f 6e 2e 0d 0a 00                                   on....

000001a7 <__c.4320>:
     1a7:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1b7:	4e 6f 74 20 61 20 56 61 6c 69 64 20 41 75 64 69     Not a Valid Audi
     1c7:	6f 20 4f 75 74 70 75 74 20 44 65 76 69 63 65 2e     o Output Device.
     1d7:	0d 0a 00                                            ...

000001da <__c.4318>:
     1da:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1ea:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1fa:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000207 <__c.4311>:
     207:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     217:	68 65 64 2e 0d 0a 00                                hed....

0000021e <__c.4306>:
     21e:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     22e:	0d 0a 00                                            ...

00000231 <__c.4288>:
     231:	1b 5b 33 36 6d 41 75 64 69 6f 20 4f 75 74 70 75     .[36mAudio Outpu
     241:	74 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     t Host Demo runn
     251:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

0000025e <__ctors_end>:
     25e:	11 24       	eor	r1, r1
     260:	1f be       	out	0x3f, r1	; 63
     262:	cf ef       	ldi	r28, 0xFF	; 255
     264:	d0 e2       	ldi	r29, 0x20	; 32
     266:	de bf       	out	0x3e, r29	; 62
     268:	cd bf       	out	0x3d, r28	; 61

0000026a <__do_copy_data>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	ec ea       	ldi	r30, 0xAC	; 172
     272:	fa e1       	ldi	r31, 0x1A	; 26
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0b bf       	out	0x3b, r16	; 59
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x14>
     27a:	07 90       	elpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	a4 32       	cpi	r26, 0x24	; 36
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0x10>

00000284 <__do_clear_bss>:
     284:	11 e0       	ldi	r17, 0x01	; 1
     286:	a4 e2       	ldi	r26, 0x24	; 36
     288:	b1 e0       	ldi	r27, 0x01	; 1
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	a9 34       	cpi	r26, 0x49	; 73
     290:	b1 07       	cpc	r27, r17
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>
     294:	e8 d0       	rcall	.+464    	; 0x466 <main>
     296:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <_exit>

0000029a <__bad_interrupt>:
     29a:	b2 ce       	rjmp	.-668    	; 0x0 <__vectors>

0000029c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     29c:	9b b1       	in	r25, 0x0b	; 11
     29e:	9f 70       	andi	r25, 0x0F	; 15
     2a0:	98 2b       	or	r25, r24
     2a2:	9b b9       	out	0x0b, r25	; 11
			}
     2a4:	08 95       	ret

000002a6 <__vector_21>:
	}
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     2a6:	1f 92       	push	r1
     2a8:	0f 92       	push	r0
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	0f 92       	push	r0
     2ae:	0b b6       	in	r0, 0x3b	; 59
     2b0:	0f 92       	push	r0
     2b2:	11 24       	eor	r1, r1
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	2f 93       	push	r18
     2bc:	3f 93       	push	r19
     2be:	4f 93       	push	r20
     2c0:	5f 93       	push	r21
     2c2:	6f 93       	push	r22
     2c4:	7f 93       	push	r23
     2c6:	8f 93       	push	r24
     2c8:	9f 93       	push	r25
     2ca:	af 93       	push	r26
     2cc:	bf 93       	push	r27
     2ce:	ef 93       	push	r30
     2d0:	ff 93       	push	r31
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     2d2:	80 91 a7 00 	lds	r24, 0x00A7
     2d6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     2d8:	90 91 aa 00 	lds	r25, 0x00AA
     2dc:	90 ff       	sbrs	r25, 0
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <__vector_21+0x3e>
     2e0:	10 e8       	ldi	r17, 0x80	; 128
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <__vector_21+0x40>
     2e4:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     2e6:	18 2b       	or	r17, r24
			 */
			static inline bool Audio_Host_IsReadyForNextSample(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			                                                   ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline bool Audio_Host_IsReadyForNextSample(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			{
				if ((USB_HostState != HOST_STATE_Configured) || !(AudioInterfaceInfo->State.IsActive))
     2e8:	80 91 34 01 	lds	r24, 0x0134
     2ec:	8b 30       	cpi	r24, 0x0B	; 11
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <__vector_21+0x4c>
     2f0:	5c c0       	rjmp	.+184    	; 0x3aa <__vector_21+0x104>
     2f2:	80 91 0c 01 	lds	r24, 0x010C
     2f6:	88 23       	and	r24, r24
     2f8:	09 f4       	brne	.+2      	; 0x2fc <__vector_21+0x56>
     2fa:	57 c0       	rjmp	.+174    	; 0x3aa <__vector_21+0x104>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     2fc:	80 91 06 01 	lds	r24, 0x0106
     300:	8f 70       	andi	r24, 0x0F	; 15
     302:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     306:	80 91 a6 00 	lds	r24, 0x00A6
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	/* Check that the USB bus is ready for the next sample to write */
	if (Audio_Host_IsReadyForNextSample(&Speaker_Audio_Interface))
     30a:	82 ff       	sbrs	r24, 2
     30c:	4e c0       	rjmp	.+156    	; 0x3aa <__vector_21+0x104>
		#if defined(USE_TEST_TONE)
			static uint8_t SquareWaveSampleCount;
			static int16_t CurrentWaveValue;

			/* In test tone mode, generate a square wave at 1/256 of the sample rate */
			if (SquareWaveSampleCount++ == 0xFF)
     30e:	80 91 26 01 	lds	r24, 0x0126
     312:	98 2f       	mov	r25, r24
     314:	9f 5f       	subi	r25, 0xFF	; 255
     316:	90 93 26 01 	sts	0x0126, r25
     31a:	8f 3f       	cpi	r24, 0xFF	; 255
     31c:	51 f4       	brne	.+20     	; 0x332 <__vector_21+0x8c>
			  CurrentWaveValue ^= 0x8000;
     31e:	80 91 24 01 	lds	r24, 0x0124
     322:	90 91 25 01 	lds	r25, 0x0125
     326:	80 50       	subi	r24, 0x00	; 0
     328:	90 48       	sbci	r25, 0x80	; 128
     32a:	90 93 25 01 	sts	0x0125, r25
     32e:	80 93 24 01 	sts	0x0124, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     332:	8c b1       	in	r24, 0x0c	; 12

			/* Only generate audio if the board button is being pressed */
			AudioSample = (Buttons_GetStatus() & BUTTONS_BUTTON1) ? CurrentWaveValue : 0;
     334:	82 fd       	sbrc	r24, 2
     336:	05 c0       	rjmp	.+10     	; 0x342 <__vector_21+0x9c>
     338:	80 91 24 01 	lds	r24, 0x0124
     33c:	90 91 25 01 	lds	r25, 0x0125
     340:	02 c0       	rjmp	.+4      	; 0x346 <__vector_21+0xa0>
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     346:	f8 2e       	mov	r15, r24
     348:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     34c:	09 2f       	mov	r16, r25
     34e:	90 93 af 00 	sts	0x00AF, r25
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     352:	80 91 a6 00 	lds	r24, 0x00A6
			{
				(void)AudioInterfaceInfo;

				Pipe_Write_16_LE(Sample);

				if (!(Pipe_IsReadWriteAllowed()))
     356:	85 fd       	sbrc	r24, 5
     358:	10 c0       	rjmp	.+32     	; 0x37a <__vector_21+0xd4>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     35a:	80 91 a9 00 	lds	r24, 0x00A9
     35e:	8f 7b       	andi	r24, 0xBF	; 191
     360:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     364:	80 91 a6 00 	lds	r24, 0x00A6
     368:	8b 77       	andi	r24, 0x7B	; 123
     36a:	80 93 a6 00 	sts	0x00A6, r24
				{
					Pipe_Unfreeze();
					Pipe_ClearOUT();
					Pipe_WaitUntilReady();
     36e:	c9 d3       	rcall	.+1938   	; 0xb02 <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     370:	80 91 a9 00 	lds	r24, 0x00A9
     374:	80 64       	ori	r24, 0x40	; 64
     376:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     37a:	f0 92 af 00 	sts	0x00AF, r15
				UPDATX = (Data >> 8);
     37e:	00 93 af 00 	sts	0x00AF, r16
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     382:	80 91 a6 00 	lds	r24, 0x00A6
			{
				(void)AudioInterfaceInfo;

				Pipe_Write_16_LE(Sample);

				if (!(Pipe_IsReadWriteAllowed()))
     386:	85 fd       	sbrc	r24, 5
     388:	10 c0       	rjmp	.+32     	; 0x3aa <__vector_21+0x104>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     38a:	80 91 a9 00 	lds	r24, 0x00A9
     38e:	8f 7b       	andi	r24, 0xBF	; 191
     390:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     394:	80 91 a6 00 	lds	r24, 0x00A6
     398:	8b 77       	andi	r24, 0x7B	; 123
     39a:	80 93 a6 00 	sts	0x00A6, r24
				{
					Pipe_Unfreeze();
					Pipe_ClearOUT();
					Pipe_WaitUntilReady();
     39e:	b1 d3       	rcall	.+1890   	; 0xb02 <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     3a0:	80 91 a9 00 	lds	r24, 0x00A9
     3a4:	80 64       	ori	r24, 0x40	; 64
     3a6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     3aa:	1f 70       	andi	r17, 0x0F	; 15
     3ac:	10 93 a7 00 	sts	0x00A7, r17
		Audio_Host_WriteSample16(&Speaker_Audio_Interface, AudioSample);
		Audio_Host_WriteSample16(&Speaker_Audio_Interface, AudioSample);
	}

	Pipe_SelectPipe(PrevPipe);
}
     3b0:	ff 91       	pop	r31
     3b2:	ef 91       	pop	r30
     3b4:	bf 91       	pop	r27
     3b6:	af 91       	pop	r26
     3b8:	9f 91       	pop	r25
     3ba:	8f 91       	pop	r24
     3bc:	7f 91       	pop	r23
     3be:	6f 91       	pop	r22
     3c0:	5f 91       	pop	r21
     3c2:	4f 91       	pop	r20
     3c4:	3f 91       	pop	r19
     3c6:	2f 91       	pop	r18
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	0f 90       	pop	r0
     3d0:	0b be       	out	0x3b, r0	; 59
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3e0:	84 b7       	in	r24, 0x34	; 52
     3e2:	87 7f       	andi	r24, 0xF7	; 247
     3e4:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3e6:	28 e1       	ldi	r18, 0x18	; 24
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	20 93 60 00 	sts	0x0060, r18
     3f0:	10 92 60 00 	sts	0x0060, r1
     3f4:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	80 e8       	ldi	r24, 0x80	; 128
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	80 93 61 00 	sts	0x0061, r24
     402:	90 93 61 00 	sts	0x0061, r25
     406:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     408:	83 e3       	ldi	r24, 0x33	; 51
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	90 93 cd 00 	sts	0x00CD, r25
     410:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     414:	86 e0       	ldi	r24, 0x06	; 6
     416:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     41a:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     41e:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     422:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     424:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     426:	8a b1       	in	r24, 0x0a	; 10
     428:	80 6f       	ori	r24, 0xF0	; 240
     42a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     42c:	8b b1       	in	r24, 0x0b	; 11
     42e:	8f 70       	andi	r24, 0x0F	; 15
     430:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     432:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     434:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(const uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(const uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     436:	ca e7       	ldi	r28, 0x7A	; 122
     438:	d0 e0       	ldi	r29, 0x00	; 0
     43a:	85 ea       	ldi	r24, 0xA5	; 165
     43c:	88 83       	st	Y, r24
			 */
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__))
				DDRF  &= ~(1 << ChannelIndex);
     43e:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     440:	ee e7       	ldi	r30, 0x7E	; 126
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	84 60       	ori	r24, 0x04	; 4
     448:	80 83       	st	Z, r24
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	USB_Init();
     44a:	f2 d3       	rcall	.+2020   	; 0xc30 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 3d 0a 	call	0x147a	; 0x147a <Serial_CreateStream>
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
     454:	82 e4       	ldi	r24, 0x42	; 66
     456:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
     45a:	88 81       	ld	r24, Y
     45c:	80 64       	ori	r24, 0x40	; 64
     45e:	88 83       	st	Y, r24
	
	/* Start the ADC conversion in free running mode */
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_GET_CHANNEL_MASK(MIC_IN_ADC_CHANNEL));	
}
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     466:	ba df       	rcall	.-140    	; 0x3dc <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Audio Output Host Demo running.\r\n" ESC_FG_WHITE));
     468:	81 e3       	ldi	r24, 0x31	; 49
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     470:	80 e1       	ldi	r24, 0x10	; 16
     472:	14 df       	rcall	.-472    	; 0x29c <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     474:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		Audio_Host_USBTask(&Speaker_Audio_Interface);
		USB_USBTask();
     476:	89 d6       	rcall	.+3346   	; 0x118a <USB_USBTask>
     478:	fe cf       	rjmp	.-4      	; 0x476 <main+0x10>

0000047a <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     47a:	8e e1       	ldi	r24, 0x1E	; 30
     47c:	92 e0       	ldi	r25, 0x02	; 2
     47e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     482:	80 ea       	ldi	r24, 0xA0	; 160
}
     484:	0b cf       	rjmp	.-490    	; 0x29c <LEDs_SetAllLEDs>

00000486 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     486:	87 e0       	ldi	r24, 0x07	; 7
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     48e:	80 e1       	ldi	r24, 0x10	; 16
}
     490:	05 cf       	rjmp	.-502    	; 0x29c <LEDs_SetAllLEDs>

00000492 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	df 93       	push	r29
     49c:	cf 93       	push	r28
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	c5 50       	subi	r28, 0x05	; 5
     4a4:	d2 40       	sbci	r29, 0x02	; 2
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4b0:	80 ea       	ldi	r24, 0xA0	; 160
     4b2:	f4 de       	rcall	.-536    	; 0x29c <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4b4:	8e 01       	movw	r16, r28
     4b6:	0a 5f       	subi	r16, 0xFA	; 250
     4b8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	be 01       	movw	r22, r28
     4be:	6f 5f       	subi	r22, 0xFF	; 255
     4c0:	7f 4f       	sbci	r23, 0xFF	; 255
     4c2:	a8 01       	movw	r20, r16
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	32 e0       	ldi	r19, 0x02	; 2
     4c8:	61 d4       	rcall	.+2242   	; 0xd8c <USB_Host_GetDeviceConfigDescriptor>
     4ca:	88 23       	and	r24, r24
     4cc:	19 f0       	breq	.+6      	; 0x4d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4ce:	8a ed       	ldi	r24, 0xDA	; 218
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	11 c0       	rjmp	.+34     	; 0x4f6 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (Audio_Host_ConfigurePipes(&Speaker_Audio_Interface,
     4d4:	69 81       	ldd	r22, Y+1	; 0x01
     4d6:	7a 81       	ldd	r23, Y+2	; 0x02
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	a8 01       	movw	r20, r16
     4de:	95 d6       	rcall	.+3370   	; 0x120a <Audio_Host_ConfigurePipes>
     4e0:	88 23       	and	r24, r24
     4e2:	19 f0       	breq	.+6      	; 0x4ea <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
	                              ConfigDescriptorSize, ConfigDescriptorData) != AUDIO_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Audio Output Device.\r\n"));
     4e4:	87 ea       	ldi	r24, 0xA7	; 167
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	12 d6       	rcall	.+3108   	; 0x1112 <USB_Host_SetDeviceConfiguration>
     4ee:	88 23       	and	r24, r24
     4f0:	29 f0       	breq	.+10     	; 0x4fc <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4f2:	81 e8       	ldi	r24, 0x81	; 129
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	fd d7       	rcall	.+4090   	; 0x14f2 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4f8:	80 e9       	ldi	r24, 0x90	; 144
     4fa:	35 c0       	rjmp	.+106    	; 0x566 <EVENT_USB_Host_DeviceEnumerationComplete+0xd4>
		return;
	}

	if (Audio_Host_StartStopStreaming(&Speaker_Audio_Interface, true) != HOST_SENDCONTROL_Successful)
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	5d d7       	rcall	.+3770   	; 0x13be <Audio_Host_StartStopStreaming>
     504:	88 23       	and	r24, r24
     506:	19 f0       	breq	.+6      	; 0x50e <EVENT_USB_Host_DeviceEnumerationComplete+0x7c>
	{
		puts_P(PSTR("Error Enabling Audio Stream.\r\n"));
     508:	82 e6       	ldi	r24, 0x62	; 98
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	1b c0       	rjmp	.+54     	; 0x544 <EVENT_USB_Host_DeviceEnumerationComplete+0xb2>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     50e:	de 01       	movw	r26, r28
     510:	13 96       	adiw	r26, 0x03	; 3
     512:	e0 e1       	ldi	r30, 0x10	; 16
     514:	f1 e0       	ldi	r31, 0x01	; 1
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	01 90       	ld	r0, Z+
     51a:	0d 92       	st	X+, r0
     51c:	81 50       	subi	r24, 0x01	; 1
     51e:	e1 f7       	brne	.-8      	; 0x518 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
	if (Audio_Host_GetSetEndpointProperty(&Speaker_Audio_Interface, Speaker_Audio_Interface.Config.DataOUTPipe.Address,
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	60 91 06 01 	lds	r22, 0x0106
     528:	41 e0       	ldi	r20, 0x01	; 1
     52a:	21 e0       	ldi	r18, 0x01	; 1
     52c:	03 e0       	ldi	r16, 0x03	; 3
     52e:	10 e0       	ldi	r17, 0x00	; 0
     530:	33 e0       	ldi	r19, 0x03	; 3
     532:	e3 2e       	mov	r14, r19
     534:	f1 2c       	mov	r15, r1
     536:	ec 0e       	add	r14, r28
     538:	fd 1e       	adc	r15, r29
     53a:	4e d7       	rcall	.+3740   	; 0x13d8 <Audio_Host_GetSetEndpointProperty>
     53c:	88 23       	and	r24, r24
     53e:	41 f0       	breq	.+16     	; 0x550 <EVENT_USB_Host_DeviceEnumerationComplete+0xbe>
	                                      AUDIO_REQ_SetCurrent, AUDIO_EPCONTROL_SamplingFreq,
	                                      sizeof(SampleRate), &SampleRate) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Setting Audio Sampling Frequency.\r\n"));
     540:	88 e3       	ldi	r24, 0x38	; 56
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	d6 d7       	rcall	.+4012   	; 0x14f2 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     546:	80 e9       	ldi	r24, 0x90	; 144
     548:	a9 de       	rcall	.-686    	; 0x29c <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	e2 d5       	rcall	.+3012   	; 0x1112 <USB_Host_SetDeviceConfiguration>
		return;
     54e:	0c c0       	rjmp	.+24     	; 0x568 <EVENT_USB_Host_DeviceEnumerationComplete+0xd6>
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	80 93 6e 00 	sts	0x006E, r24
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     556:	93 e1       	ldi	r25, 0x13	; 19
     558:	97 bd       	out	0x27, r25	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
     55a:	84 bd       	out	0x24, r24	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     55c:	85 bd       	out	0x25, r24	; 37

	puts_P(PSTR("Audio Device Enumerated.\r\n"));
     55e:	8d e1       	ldi	r24, 0x1D	; 29
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	c7 d7       	rcall	.+3982   	; 0x14f2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     564:	80 e6       	ldi	r24, 0x60	; 96
     566:	9a de       	rcall	.-716    	; 0x29c <LEDs_SetAllLEDs>
}
     568:	cb 5f       	subi	r28, 0xFB	; 251
     56a:	dd 4f       	sbci	r29, 0xFD	; 253
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
     576:	cf 91       	pop	r28
     578:	df 91       	pop	r29
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	ff 90       	pop	r15
     580:	ef 90       	pop	r14
     582:	08 95       	ret

00000584 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     584:	df 93       	push	r29
     586:	cf 93       	push	r28
     588:	0f 92       	push	r0
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     58e:	89 83       	std	Y+1, r24	; 0x01
     590:	e7 d2       	rcall	.+1486   	; 0xb60 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     592:	00 d0       	rcall	.+0      	; 0x594 <EVENT_USB_Host_HostError+0x10>
     594:	00 d0       	rcall	.+0      	; 0x596 <EVENT_USB_Host_HostError+0x12>
     596:	ed b7       	in	r30, 0x3d	; 61
     598:	fe b7       	in	r31, 0x3e	; 62
     59a:	31 96       	adiw	r30, 0x01	; 1
     59c:	2e ee       	ldi	r18, 0xEE	; 238
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	ad b7       	in	r26, 0x3d	; 61
     5a2:	be b7       	in	r27, 0x3e	; 62
     5a4:	12 96       	adiw	r26, 0x02	; 2
     5a6:	3c 93       	st	X, r19
     5a8:	2e 93       	st	-X, r18
     5aa:	11 97       	sbiw	r26, 0x01	; 1
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	82 83       	std	Z+2, r24	; 0x02
     5b0:	13 82       	std	Z+3, r1	; 0x03
     5b2:	80 d7       	rcall	.+3840   	; 0x14b4 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	80 e9       	ldi	r24, 0x90	; 144
     5be:	6e de       	rcall	.-804    	; 0x29c <LEDs_SetAllLEDs>
     5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <EVENT_USB_Host_HostError+0x3c>

000005c2 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5c2:	90 91 34 01 	lds	r25, 0x0134
     5c6:	2d b7       	in	r18, 0x3d	; 61
     5c8:	3e b7       	in	r19, 0x3e	; 62
     5ca:	28 50       	subi	r18, 0x08	; 8
     5cc:	30 40       	sbci	r19, 0x00	; 0
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	3e bf       	out	0x3e, r19	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	2d bf       	out	0x3d, r18	; 61
     5d8:	ed b7       	in	r30, 0x3d	; 61
     5da:	fe b7       	in	r31, 0x3e	; 62
     5dc:	31 96       	adiw	r30, 0x01	; 1
     5de:	28 e9       	ldi	r18, 0x98	; 152
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	ad b7       	in	r26, 0x3d	; 61
     5e4:	be b7       	in	r27, 0x3e	; 62
     5e6:	12 96       	adiw	r26, 0x02	; 2
     5e8:	3c 93       	st	X, r19
     5ea:	2e 93       	st	-X, r18
     5ec:	11 97       	sbiw	r26, 0x01	; 1
     5ee:	82 83       	std	Z+2, r24	; 0x02
     5f0:	13 82       	std	Z+3, r1	; 0x03
     5f2:	64 83       	std	Z+4, r22	; 0x04
     5f4:	15 82       	std	Z+5, r1	; 0x05
     5f6:	96 83       	std	Z+6, r25	; 0x06
     5f8:	17 82       	std	Z+7, r1	; 0x07
     5fa:	5c d7       	rcall	.+3768   	; 0x14b4 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5fc:	2d b7       	in	r18, 0x3d	; 61
     5fe:	3e b7       	in	r19, 0x3e	; 62
     600:	28 5f       	subi	r18, 0xF8	; 248
     602:	3f 4f       	sbci	r19, 0xFF	; 255
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	3e bf       	out	0x3e, r19	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	2d bf       	out	0x3d, r18	; 61
     60e:	80 e9       	ldi	r24, 0x90	; 144
}
     610:	45 ce       	rjmp	.-886    	; 0x29c <LEDs_SetAllLEDs>

00000612 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     612:	80 91 9e 00 	lds	r24, 0x009E
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	81 70       	andi	r24, 0x01	; 1
     61a:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     61c:	20 91 a0 00 	lds	r18, 0x00A0
     620:	2d 7f       	andi	r18, 0xFD	; 253
     622:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     626:	20 91 9e 00 	lds	r18, 0x009E
     62a:	22 60       	ori	r18, 0x02	; 2
     62c:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     630:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     634:	21 fd       	sbrc	r18, 1
     636:	fc cf       	rjmp	.-8      	; 0x630 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     638:	20 91 9e 00 	lds	r18, 0x009E
     63c:	21 60       	ori	r18, 0x01	; 1
     63e:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     642:	10 92 2a 01 	sts	0x012A, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     646:	20 91 a0 00 	lds	r18, 0x00A0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	20 72       	andi	r18, 0x20	; 32
     64e:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     650:	40 91 a0 00 	lds	r20, 0x00A0
     654:	4f 7d       	andi	r20, 0xDF	; 223
     656:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     65a:	40 91 9f 00 	lds	r20, 0x009F
     65e:	4f 7d       	andi	r20, 0xDF	; 223
     660:	40 93 9f 00 	sts	0x009F, r20
     664:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     666:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     66a:	55 ff       	sbrs	r21, 5
     66c:	0b c0       	rjmp	.+22     	; 0x684 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     66e:	40 91 9f 00 	lds	r20, 0x009F
     672:	4f 7d       	andi	r20, 0xDF	; 223
     674:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     678:	40 91 9f 00 	lds	r20, 0x009F
     67c:	4d 7f       	andi	r20, 0xFD	; 253
     67e:	40 93 9f 00 	sts	0x009F, r20
     682:	08 c0       	rjmp	.+16     	; 0x694 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     684:	ef ec       	ldi	r30, 0xCF	; 207
     686:	f7 e0       	ldi	r31, 0x07	; 7
     688:	31 97       	sbiw	r30, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <USB_Host_ResetDevice+0x76>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <USB_Host_ResetDevice+0x7c>
     68e:	00 00       	nop
     690:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     692:	49 f7       	brne	.-46     	; 0x666 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     694:	21 15       	cp	r18, r1
     696:	31 05       	cpc	r19, r1
     698:	29 f0       	breq	.+10     	; 0x6a4 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     69a:	20 91 a0 00 	lds	r18, 0x00A0
     69e:	20 62       	ori	r18, 0x20	; 32
     6a0:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     6a4:	00 97       	sbiw	r24, 0x00	; 0
     6a6:	29 f4       	brne	.+10     	; 0x6b2 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6a8:	80 91 9e 00 	lds	r24, 0x009E
     6ac:	8e 7f       	andi	r24, 0xFE	; 254
     6ae:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     6b2:	80 91 a0 00 	lds	r24, 0x00A0
     6b6:	82 60       	ori	r24, 0x02	; 2
     6b8:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     6bc:	08 95       	ret

000006be <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6be:	40 91 9e 00 	lds	r20, 0x009E
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	41 70       	andi	r20, 0x01	; 1
     6c6:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6c8:	20 91 a0 00 	lds	r18, 0x00A0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	20 72       	andi	r18, 0x20	; 32
     6d0:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6d2:	90 91 a0 00 	lds	r25, 0x00A0
     6d6:	9f 7d       	andi	r25, 0xDF	; 223
     6d8:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6dc:	90 91 9f 00 	lds	r25, 0x009F
     6e0:	9f 7d       	andi	r25, 0xDF	; 223
     6e2:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6e6:	90 91 9e 00 	lds	r25, 0x009E
     6ea:	91 60       	ori	r25, 0x01	; 1
     6ec:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6f0:	26 c0       	rjmp	.+76     	; 0x73e <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6f2:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6f6:	95 ff       	sbrs	r25, 5
     6f8:	06 c0       	rjmp	.+12     	; 0x706 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6fa:	90 91 9f 00 	lds	r25, 0x009F
     6fe:	9f 7d       	andi	r25, 0xDF	; 223
     700:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     704:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     706:	90 91 34 01 	lds	r25, 0x0134
     70a:	91 30       	cpi	r25, 0x01	; 1
     70c:	d9 f0       	breq	.+54     	; 0x744 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     70e:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     712:	94 ff       	sbrs	r25, 4
     714:	09 c0       	rjmp	.+18     	; 0x728 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     716:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     71a:	80 91 a6 00 	lds	r24, 0x00A6
     71e:	8f 7e       	andi	r24, 0xEF	; 239
     720:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     724:	82 e0       	ldi	r24, 0x02	; 2

			break;
     726:	0f c0       	rjmp	.+30     	; 0x746 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     728:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     72c:	91 ff       	sbrs	r25, 1
     72e:	07 c0       	rjmp	.+14     	; 0x73e <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     730:	80 91 a6 00 	lds	r24, 0x00A6
     734:	8d 7f       	andi	r24, 0xFD	; 253
     736:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     73a:	83 e0       	ldi	r24, 0x03	; 3

			break;
     73c:	04 c0       	rjmp	.+8      	; 0x746 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     73e:	88 23       	and	r24, r24
     740:	c1 f6       	brne	.-80     	; 0x6f2 <USB_Host_WaitMS+0x34>
     742:	01 c0       	rjmp	.+2      	; 0x746 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     744:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     746:	41 15       	cp	r20, r1
     748:	51 05       	cpc	r21, r1
     74a:	29 f4       	brne	.+10     	; 0x756 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     74c:	90 91 9e 00 	lds	r25, 0x009E
     750:	9e 7f       	andi	r25, 0xFE	; 254
     752:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     756:	21 15       	cp	r18, r1
     758:	31 05       	cpc	r19, r1
     75a:	29 f0       	breq	.+10     	; 0x766 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     75c:	90 91 a0 00 	lds	r25, 0x00A0
     760:	90 62       	ori	r25, 0x20	; 32
     762:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     766:	08 95       	ret

00000768 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	df 93       	push	r29
     76e:	cf 93       	push	r28
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	28 97       	sbiw	r28, 0x08	; 8
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     780:	80 91 34 01 	lds	r24, 0x0134
     784:	85 30       	cpi	r24, 0x05	; 5
     786:	09 f4       	brne	.+2      	; 0x78a <USB_Host_ProcessNextHostState+0x22>
     788:	99 c0       	rjmp	.+306    	; 0x8bc <USB_Host_ProcessNextHostState+0x154>
     78a:	86 30       	cpi	r24, 0x06	; 6
     78c:	68 f4       	brcc	.+26     	; 0x7a8 <USB_Host_ProcessNextHostState+0x40>
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	c1 f1       	breq	.+112    	; 0x802 <USB_Host_ProcessNextHostState+0x9a>
     792:	83 30       	cpi	r24, 0x03	; 3
     794:	18 f4       	brcc	.+6      	; 0x79c <USB_Host_ProcessNextHostState+0x34>
     796:	88 23       	and	r24, r24
     798:	a1 f0       	breq	.+40     	; 0x7c2 <USB_Host_ProcessNextHostState+0x5a>
     79a:	04 c1       	rjmp	.+520    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23c>
     79c:	83 30       	cpi	r24, 0x03	; 3
     79e:	d9 f1       	breq	.+118    	; 0x816 <USB_Host_ProcessNextHostState+0xae>
     7a0:	84 30       	cpi	r24, 0x04	; 4
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <USB_Host_ProcessNextHostState+0x3e>
     7a4:	ff c0       	rjmp	.+510    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23c>
     7a6:	62 c0       	rjmp	.+196    	; 0x86c <USB_Host_ProcessNextHostState+0x104>
     7a8:	87 30       	cpi	r24, 0x07	; 7
     7aa:	09 f4       	brne	.+2      	; 0x7ae <USB_Host_ProcessNextHostState+0x46>
     7ac:	9e c0       	rjmp	.+316    	; 0x8ea <USB_Host_ProcessNextHostState+0x182>
     7ae:	87 30       	cpi	r24, 0x07	; 7
     7b0:	08 f4       	brcc	.+2      	; 0x7b4 <USB_Host_ProcessNextHostState+0x4c>
     7b2:	8f c0       	rjmp	.+286    	; 0x8d2 <USB_Host_ProcessNextHostState+0x16a>
     7b4:	88 30       	cpi	r24, 0x08	; 8
     7b6:	09 f4       	brne	.+2      	; 0x7ba <USB_Host_ProcessNextHostState+0x52>
     7b8:	b8 c0       	rjmp	.+368    	; 0x92a <USB_Host_ProcessNextHostState+0x1c2>
     7ba:	89 30       	cpi	r24, 0x09	; 9
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <USB_Host_ProcessNextHostState+0x58>
     7be:	f2 c0       	rjmp	.+484    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23c>
     7c0:	d9 c0       	rjmp	.+434    	; 0x974 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7c2:	00 91 28 01 	lds	r16, 0x0128
     7c6:	10 91 29 01 	lds	r17, 0x0129
     7ca:	01 15       	cp	r16, r1
     7cc:	11 05       	cpc	r17, r1
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <USB_Host_ProcessNextHostState+0x6a>
     7d0:	e9 c0       	rjmp	.+466    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	74 df       	rcall	.-280    	; 0x6be <USB_Host_WaitMS>
     7d6:	68 2f       	mov	r22, r24
     7d8:	88 23       	and	r24, r24
     7da:	31 f0       	breq	.+12     	; 0x7e8 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     7dc:	80 91 27 01 	lds	r24, 0x0127
     7e0:	80 93 34 01 	sts	0x0134, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
					break;
     7e6:	d2 c0       	rjmp	.+420    	; 0x98c <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     7e8:	01 50       	subi	r16, 0x01	; 1
     7ea:	10 40       	sbci	r17, 0x00	; 0
     7ec:	10 93 29 01 	sts	0x0129, r17
     7f0:	00 93 28 01 	sts	0x0128, r16
     7f4:	01 15       	cp	r16, r1
     7f6:	11 05       	cpc	r17, r1
     7f8:	09 f0       	breq	.+2      	; 0x7fc <USB_Host_ProcessNextHostState+0x94>
     7fa:	d4 c0       	rjmp	.+424    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     7fc:	80 91 27 01 	lds	r24, 0x0127
     800:	07 c0       	rjmp	.+14     	; 0x810 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     802:	88 ee       	ldi	r24, 0xE8	; 232
     804:	93 e0       	ldi	r25, 0x03	; 3
     806:	90 93 29 01 	sts	0x0129, r25
     80a:	80 93 28 01 	sts	0x0128, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     80e:	83 e0       	ldi	r24, 0x03	; 3
     810:	80 93 34 01 	sts	0x0134, r24
			break;
     814:	c7 c0       	rjmp	.+398    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     816:	80 91 28 01 	lds	r24, 0x0128
     81a:	90 91 29 01 	lds	r25, 0x0129
     81e:	9c 01       	movw	r18, r24
     820:	21 50       	subi	r18, 0x01	; 1
     822:	30 40       	sbci	r19, 0x00	; 0
     824:	30 93 29 01 	sts	0x0129, r19
     828:	20 93 28 01 	sts	0x0128, r18
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	39 f0       	breq	.+14     	; 0x83e <USB_Host_ProcessNextHostState+0xd6>
     830:	8f ec       	ldi	r24, 0xCF	; 207
     832:	97 e0       	ldi	r25, 0x07	; 7
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <USB_Host_ProcessNextHostState+0xcc>
     838:	00 c0       	rjmp	.+0      	; 0x83a <USB_Host_ProcessNextHostState+0xd2>
     83a:	00 00       	nop
     83c:	b3 c0       	rjmp	.+358    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     83e:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     840:	80 91 d8 00 	lds	r24, 0x00D8
     844:	80 61       	ori	r24, 0x10	; 16
     846:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     84a:	80 91 dd 00 	lds	r24, 0x00DD
     84e:	8b 7f       	andi	r24, 0xFB	; 251
     850:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     854:	80 91 d7 00 	lds	r24, 0x00D7
     858:	80 61       	ori	r24, 0x10	; 16
     85a:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     85e:	80 91 dd 00 	lds	r24, 0x00DD
     862:	82 60       	ori	r24, 0x02	; 2
     864:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     868:	84 e0       	ldi	r24, 0x04	; 4
     86a:	d2 cf       	rjmp	.-92     	; 0x810 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     86c:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     870:	80 ff       	sbrs	r24, 0
     872:	98 c0       	rjmp	.+304    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     874:	80 91 9f 00 	lds	r24, 0x009F
     878:	8e 7f       	andi	r24, 0xFE	; 254
     87a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     87e:	80 91 9f 00 	lds	r24, 0x009F
     882:	8d 7f       	andi	r24, 0xFD	; 253
     884:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     888:	80 91 df 00 	lds	r24, 0x00DF
     88c:	8d 7f       	andi	r24, 0xFD	; 253
     88e:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     892:	80 91 de 00 	lds	r24, 0x00DE
     896:	82 60       	ori	r24, 0x02	; 2
     898:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     89c:	80 91 9e 00 	lds	r24, 0x009E
     8a0:	81 60       	ori	r24, 0x01	; 1
     8a2:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     8a6:	17 d1       	rcall	.+558    	; 0xad6 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     8a8:	10 92 34 01 	sts	0x0134, r1
     8ac:	84 e6       	ldi	r24, 0x64	; 100
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	90 93 29 01 	sts	0x0129, r25
     8b4:	80 93 28 01 	sts	0x0128, r24
     8b8:	85 e0       	ldi	r24, 0x05	; 5
     8ba:	59 c0       	rjmp	.+178    	; 0x96e <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8bc:	aa de       	rcall	.-684    	; 0x612 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8be:	10 92 34 01 	sts	0x0134, r1
     8c2:	88 ec       	ldi	r24, 0xC8	; 200
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	90 93 29 01 	sts	0x0129, r25
     8ca:	80 93 28 01 	sts	0x0128, r24
     8ce:	86 e0       	ldi	r24, 0x06	; 6
     8d0:	4e c0       	rjmp	.+156    	; 0x96e <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	20 e4       	ldi	r18, 0x40	; 64
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	01 e0       	ldi	r16, 0x01	; 1
     8de:	6d d0       	rcall	.+218    	; 0x9ba <Pipe_ConfigurePipe>
     8e0:	88 23       	and	r24, r24
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <USB_Host_ProcessNextHostState+0x17e>
     8e4:	4f c0       	rjmp	.+158    	; 0x984 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8e6:	87 e0       	ldi	r24, 0x07	; 7
     8e8:	93 cf       	rjmp	.-218    	; 0x810 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8ea:	ac e2       	ldi	r26, 0x2C	; 44
     8ec:	b1 e0       	ldi	r27, 0x01	; 1
     8ee:	eb e1       	ldi	r30, 0x1B	; 27
     8f0:	f1 e0       	ldi	r31, 0x01	; 1
     8f2:	88 e0       	ldi	r24, 0x08	; 8
     8f4:	01 90       	ld	r0, Z+
     8f6:	0d 92       	st	X+, r0
     8f8:	81 50       	subi	r24, 0x01	; 1
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8fc:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     900:	ce 01       	movw	r24, r28
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	07 d3       	rcall	.+1550   	; 0xf14 <USB_Host_SendControlRequest>
     906:	68 2f       	mov	r22, r24
     908:	88 23       	and	r24, r24
     90a:	09 f0       	breq	.+2      	; 0x90e <USB_Host_ProcessNextHostState+0x1a6>
     90c:	3e c0       	rjmp	.+124    	; 0x98a <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     90e:	88 85       	ldd	r24, Y+8	; 0x08
     910:	80 93 23 01 	sts	0x0123, r24

			USB_Host_ResetDevice();
     914:	7e de       	rcall	.-772    	; 0x612 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     916:	10 92 34 01 	sts	0x0134, r1
     91a:	88 ec       	ldi	r24, 0xC8	; 200
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	90 93 29 01 	sts	0x0129, r25
     922:	80 93 28 01 	sts	0x0128, r24
     926:	88 e0       	ldi	r24, 0x08	; 8
     928:	22 c0       	rjmp	.+68     	; 0x96e <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     92a:	20 91 23 01 	lds	r18, 0x0123
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	01 e0       	ldi	r16, 0x01	; 1
     938:	40 d0       	rcall	.+128    	; 0x9ba <Pipe_ConfigurePipe>
     93a:	88 23       	and	r24, r24
     93c:	19 f1       	breq	.+70     	; 0x984 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     93e:	ac e2       	ldi	r26, 0x2C	; 44
     940:	b1 e0       	ldi	r27, 0x01	; 1
     942:	e3 e1       	ldi	r30, 0x13	; 19
     944:	f1 e0       	ldi	r31, 0x01	; 1
     946:	88 e0       	ldi	r24, 0x08	; 8
     948:	01 90       	ld	r0, Z+
     94a:	0d 92       	st	X+, r0
     94c:	81 50       	subi	r24, 0x01	; 1
     94e:	e1 f7       	brne	.-8      	; 0x948 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	df d2       	rcall	.+1470   	; 0xf14 <USB_Host_SendControlRequest>
     956:	68 2f       	mov	r22, r24
     958:	88 23       	and	r24, r24
     95a:	b9 f4       	brne	.+46     	; 0x98a <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     95c:	10 92 34 01 	sts	0x0134, r1
     960:	84 e6       	ldi	r24, 0x64	; 100
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	90 93 29 01 	sts	0x0129, r25
     968:	80 93 28 01 	sts	0x0128, r24
     96c:	89 e0       	ldi	r24, 0x09	; 9
     96e:	80 93 27 01 	sts	0x0127, r24
			break;
     972:	18 c0       	rjmp	.+48     	; 0x9a4 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     97a:	8a e0       	ldi	r24, 0x0A	; 10
     97c:	80 93 34 01 	sts	0x0134, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     980:	88 dd       	rcall	.-1264   	; 0x492 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     982:	10 c0       	rjmp	.+32     	; 0x9a4 <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     984:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	01 c0       	rjmp	.+2      	; 0x98c <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     98a:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     98c:	90 91 34 01 	lds	r25, 0x0134
     990:	91 30       	cpi	r25, 0x01	; 1
     992:	41 f0       	breq	.+16     	; 0x9a4 <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     994:	16 de       	rcall	.-980    	; 0x5c2 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     996:	80 91 dd 00 	lds	r24, 0x00DD
     99a:	81 60       	ori	r24, 0x01	; 1
     99c:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     9a0:	72 dd       	rcall	.-1308   	; 0x486 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     9a2:	f6 d0       	rcall	.+492    	; 0xb90 <USB_ResetInterface>
	}
}
     9a4:	28 96       	adiw	r28, 0x08	; 8
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
     9b0:	cf 91       	pop	r28
     9b2:	df 91       	pop	r29
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	08 95       	ret

000009ba <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9ba:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     9bc:	58 2f       	mov	r21, r24
     9be:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     9c0:	87 ff       	sbrs	r24, 7
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <Pipe_ConfigurePipe+0xe>
     9c4:	80 e1       	ldi	r24, 0x10	; 16
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <Pipe_ConfigurePipe+0x10>
     9c8:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     9ca:	57 30       	cpi	r21, 0x07	; 7
     9cc:	08 f0       	brcs	.+2      	; 0x9d0 <Pipe_ConfigurePipe+0x16>
     9ce:	59 c0       	rjmp	.+178    	; 0xa82 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     9d0:	66 23       	and	r22, r22
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     9d4:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     9d6:	4f 70       	andi	r20, 0x0F	; 15
     9d8:	62 95       	swap	r22
     9da:	66 0f       	add	r22, r22
     9dc:	66 0f       	add	r22, r22
     9de:	60 7c       	andi	r22, 0xC0	; 192
     9e0:	64 2b       	or	r22, r20
     9e2:	68 2b       	or	r22, r24
     9e4:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9e6:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9e8:	84 2f       	mov	r24, r20
     9ea:	8f 70       	andi	r24, 0x0F	; 15
     9ec:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     9f0:	45 17       	cp	r20, r21
     9f2:	a1 f4       	brne	.+40     	; 0xa1c <Pipe_ConfigurePipe+0x62>
     9f4:	88 e0       	ldi	r24, 0x08	; 8
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9fc:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a02:	82 17       	cp	r24, r18
     a04:	93 07       	cpc	r25, r19
     a06:	10 f4       	brcc	.+4      	; 0xa0c <Pipe_ConfigurePipe+0x52>
     a08:	75 30       	cpi	r23, 0x05	; 5
     a0a:	c1 f7       	brne	.-16     	; 0x9fc <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     a0c:	87 2f       	mov	r24, r23
     a0e:	82 95       	swap	r24
     a10:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a12:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a14:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     a16:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     a18:	e0 e0       	ldi	r30, 0x00	; 0
     a1a:	08 c0       	rjmp	.+16     	; 0xa2c <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a1c:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a20:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a24:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     a28:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a2c:	81 ff       	sbrs	r24, 1
     a2e:	20 c0       	rjmp	.+64     	; 0xa70 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a30:	90 91 a9 00 	lds	r25, 0x00A9
     a34:	9e 7f       	andi	r25, 0xFE	; 254
     a36:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a3a:	90 91 ab 00 	lds	r25, 0x00AB
     a3e:	9d 7f       	andi	r25, 0xFD	; 253
     a40:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a44:	90 91 a9 00 	lds	r25, 0x00A9
     a48:	91 60       	ori	r25, 0x01	; 1
     a4a:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a4e:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     a52:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     a56:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     a5a:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a5e:	80 91 a9 00 	lds	r24, 0x00A9
     a62:	80 62       	ori	r24, 0x20	; 32
     a64:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a68:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     a6c:	87 ff       	sbrs	r24, 7
     a6e:	09 c0       	rjmp	.+18     	; 0xa82 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a70:	4f 5f       	subi	r20, 0xFF	; 255
     a72:	47 30       	cpi	r20, 0x07	; 7
     a74:	09 f0       	breq	.+2      	; 0xa78 <Pipe_ConfigurePipe+0xbe>
     a76:	b8 cf       	rjmp	.-144    	; 0x9e8 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a78:	5f 70       	andi	r21, 0x0F	; 15
     a7a:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     a82:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     a84:	0f 91       	pop	r16
     a86:	08 95       	ret

00000a88 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     a96:	e8 2e       	mov	r14, r24
     a98:	e7 01       	movw	r28, r14
     a9a:	7e 01       	movw	r14, r28
     a9c:	f9 2e       	mov	r15, r25
     a9e:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     aa0:	ff 24       	eor	r15, r15
     aa2:	0d c0       	rjmp	.+26     	; 0xabe <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
     aa4:	88 81       	ld	r24, Y
     aa6:	88 23       	and	r24, r24
     aa8:	41 f0       	breq	.+16     	; 0xaba <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     aaa:	29 81       	ldd	r18, Y+1	; 0x01
     aac:	3a 81       	ldd	r19, Y+2	; 0x02
     aae:	6c 81       	ldd	r22, Y+4	; 0x04
     ab0:	4b 81       	ldd	r20, Y+3	; 0x03
     ab2:	0d 81       	ldd	r16, Y+5	; 0x05
     ab4:	82 df       	rcall	.-252    	; 0x9ba <Pipe_ConfigurePipe>
     ab6:	88 23       	and	r24, r24
     ab8:	31 f0       	breq	.+12     	; 0xac6 <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     aba:	f3 94       	inc	r15
     abc:	26 96       	adiw	r28, 0x06	; 6
     abe:	f1 16       	cp	r15, r17
     ac0:	88 f3       	brcs	.-30     	; 0xaa4 <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     ac6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	08 95       	ret

00000ad6 <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     ad6:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	98 2f       	mov	r25, r24
     ade:	9f 70       	andi	r25, 0x0F	; 15
     ae0:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     ae4:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     ae8:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     aec:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     af0:	90 91 a9 00 	lds	r25, 0x00A9
     af4:	9e 7f       	andi	r25, 0xFE	; 254
     af6:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     afa:	8f 5f       	subi	r24, 0xFF	; 255
     afc:	87 30       	cpi	r24, 0x07	; 7
     afe:	71 f7       	brne	.-36     	; 0xadc <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b00:	08 95       	ret

00000b02 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b02:	80 91 a2 00 	lds	r24, 0x00A2
     b06:	90 91 a3 00 	lds	r25, 0x00A3
}

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     b0a:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b0c:	20 91 aa 00 	lds	r18, 0x00AA
     b10:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b12:	20 31       	cpi	r18, 0x10	; 16
     b14:	29 f4       	brne	.+10     	; 0xb20 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b16:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     b1a:	20 ff       	sbrs	r18, 0
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <Pipe_WaitUntilReady+0x26>
     b1e:	18 c0       	rjmp	.+48     	; 0xb50 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b20:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b24:	22 fd       	sbrc	r18, 2
     b26:	14 c0       	rjmp	.+40     	; 0xb50 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b28:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b2c:	21 fd       	sbrc	r18, 1
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b30:	20 91 34 01 	lds	r18, 0x0134
     b34:	21 30       	cpi	r18, 0x01	; 1
     b36:	81 f0       	breq	.+32     	; 0xb58 <Pipe_WaitUntilReady+0x56>
     b38:	20 91 a2 00 	lds	r18, 0x00A2
     b3c:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b40:	28 17       	cp	r18, r24
     b42:	39 07       	cpc	r19, r25
     b44:	19 f3       	breq	.-58     	; 0xb0c <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b46:	44 23       	and	r20, r20
     b48:	49 f0       	breq	.+18     	; 0xb5c <Pipe_WaitUntilReady+0x5a>
     b4a:	41 50       	subi	r20, 0x01	; 1
     b4c:	c9 01       	movw	r24, r18
     b4e:	de cf       	rjmp	.-68     	; 0xb0c <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     b5c:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     b5e:	08 95       	ret

00000b60 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b60:	75 d0       	rcall	.+234    	; 0xc4c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b62:	7c d0       	rcall	.+248    	; 0xc5c <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b64:	e0 ee       	ldi	r30, 0xE0	; 224
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	81 60       	ori	r24, 0x01	; 1
     b6c:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     b6e:	e8 ed       	ldi	r30, 0xD8	; 216
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b78:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     b7a:	a7 ed       	ldi	r26, 0xD7	; 215
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	8c 91       	ld	r24, X
     b80:	8e 7f       	andi	r24, 0xFE	; 254
     b82:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b84:	80 81       	ld	r24, Z
     b86:	8f 7e       	andi	r24, 0xEF	; 239
     b88:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b8a:	10 92 2b 01 	sts	0x012B, r1
}
     b8e:	08 95       	ret

00000b90 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b90:	5d d0       	rcall	.+186    	; 0xc4c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b92:	64 d0       	rcall	.+200    	; 0xc5c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b94:	80 91 d8 00 	lds	r24, 0x00D8
     b98:	8f 77       	andi	r24, 0x7F	; 127
     b9a:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     b9e:	80 91 d8 00 	lds	r24, 0x00D8
     ba2:	80 68       	ori	r24, 0x80	; 128
     ba4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     ba8:	80 91 d8 00 	lds	r24, 0x00D8
     bac:	8f 7d       	andi	r24, 0xDF	; 223
     bae:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     bb2:	80 91 d7 00 	lds	r24, 0x00D7
     bb6:	8f 77       	andi	r24, 0x7F	; 127
     bb8:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     bbc:	8c e0       	ldi	r24, 0x0C	; 12
     bbe:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     bc0:	8e e0       	ldi	r24, 0x0E	; 14
     bc2:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     bc4:	09 b4       	in	r0, 0x29	; 41
     bc6:	00 fe       	sbrs	r0, 0
     bc8:	fd cf       	rjmp	.-6      	; 0xbc4 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	80 93 34 01 	sts	0x0134, r24
	USB_Host_ConfigurationNumber = 0;
     bd0:	10 92 2a 01 	sts	0x012A, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     bd4:	80 e4       	ldi	r24, 0x40	; 64
     bd6:	80 93 23 01 	sts	0x0123, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     bda:	80 91 d8 00 	lds	r24, 0x00D8
     bde:	80 64       	ori	r24, 0x40	; 64
     be0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     be4:	80 91 dd 00 	lds	r24, 0x00DD
     be8:	81 60       	ori	r24, 0x01	; 1
     bea:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     bee:	80 91 dd 00 	lds	r24, 0x00DD
     bf2:	84 60       	ori	r24, 0x04	; 4
     bf4:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     bf8:	80 91 d7 00 	lds	r24, 0x00D7
     bfc:	8f 7e       	andi	r24, 0xEF	; 239
     bfe:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c02:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     c04:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     c06:	80 91 de 00 	lds	r24, 0x00DE
     c0a:	81 60       	ori	r24, 0x01	; 1
     c0c:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c10:	80 91 de 00 	lds	r24, 0x00DE
     c14:	84 60       	ori	r24, 0x04	; 4
     c16:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c1a:	80 91 e0 00 	lds	r24, 0x00E0
     c1e:	8e 7f       	andi	r24, 0xFE	; 254
     c20:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c24:	80 91 d8 00 	lds	r24, 0x00D8
     c28:	80 61       	ori	r24, 0x10	; 16
     c2a:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c2e:	08 95       	ret

00000c30 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c30:	e8 ed       	ldi	r30, 0xD8	; 216
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	8f 7e       	andi	r24, 0xEF	; 239
     c38:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     c3a:	e7 ed       	ldi	r30, 0xD7	; 215
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	81 60       	ori	r24, 0x01	; 1
     c42:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	80 93 2b 01 	sts	0x012B, r24

	USB_ResetInterface();
}
     c4a:	a2 cf       	rjmp	.-188    	; 0xb90 <USB_ResetInterface>

00000c4c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c4c:	e8 ed       	ldi	r30, 0xD8	; 216
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8c 7f       	andi	r24, 0xFC	; 252
     c54:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c56:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     c5a:	08 95       	ret

00000c5c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c5c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c60:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     c64:	08 95       	ret

00000c66 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c66:	1f 92       	push	r1
     c68:	0f 92       	push	r0
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	0f 92       	push	r0
     c6e:	0b b6       	in	r0, 0x3b	; 59
     c70:	0f 92       	push	r0
     c72:	11 24       	eor	r1, r1
     c74:	2f 93       	push	r18
     c76:	3f 93       	push	r19
     c78:	4f 93       	push	r20
     c7a:	5f 93       	push	r21
     c7c:	6f 93       	push	r22
     c7e:	7f 93       	push	r23
     c80:	8f 93       	push	r24
     c82:	9f 93       	push	r25
     c84:	af 93       	push	r26
     c86:	bf 93       	push	r27
     c88:	ef 93       	push	r30
     c8a:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c8c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c90:	85 ff       	sbrs	r24, 5
     c92:	0a c0       	rjmp	.+20     	; 0xca8 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c94:	80 91 a0 00 	lds	r24, 0x00A0
     c98:	85 ff       	sbrs	r24, 5
     c9a:	06 c0       	rjmp	.+12     	; 0xca8 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c9c:	80 91 9f 00 	lds	r24, 0x009F
     ca0:	8f 7d       	andi	r24, 0xDF	; 223
     ca2:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     ca6:	0c d1       	rcall	.+536    	; 0xec0 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     ca8:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     cac:	81 ff       	sbrs	r24, 1
     cae:	15 c0       	rjmp	.+42     	; 0xcda <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     cb0:	80 91 a0 00 	lds	r24, 0x00A0
     cb4:	81 ff       	sbrs	r24, 1
     cb6:	11 c0       	rjmp	.+34     	; 0xcda <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     cb8:	80 91 9f 00 	lds	r24, 0x009F
     cbc:	8d 7f       	andi	r24, 0xFD	; 253
     cbe:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     cc2:	80 91 9f 00 	lds	r24, 0x009F
     cc6:	8e 7f       	andi	r24, 0xFE	; 254
     cc8:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     ccc:	80 91 a0 00 	lds	r24, 0x00A0
     cd0:	8d 7f       	andi	r24, 0xFD	; 253
     cd2:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     cd6:	d7 db       	rcall	.-2130   	; 0x486 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     cd8:	5b df       	rcall	.-330    	; 0xb90 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     cda:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     cde:	81 ff       	sbrs	r24, 1
     ce0:	15 c0       	rjmp	.+42     	; 0xd0c <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     ce2:	80 91 de 00 	lds	r24, 0x00DE
     ce6:	81 ff       	sbrs	r24, 1
     ce8:	11 c0       	rjmp	.+34     	; 0xd0c <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     cea:	80 91 df 00 	lds	r24, 0x00DF
     cee:	8d 7f       	andi	r24, 0xFD	; 253
     cf0:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     cf4:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cf6:	80 91 dd 00 	lds	r24, 0x00DD
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	40 dc       	rcall	.-1920   	; 0x584 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d04:	c0 db       	rcall	.-2176   	; 0x486 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 34 01 	sts	0x0134, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d0c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d10:	80 ff       	sbrs	r24, 0
     d12:	17 c0       	rjmp	.+46     	; 0xd42 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d14:	80 91 de 00 	lds	r24, 0x00DE
     d18:	80 ff       	sbrs	r24, 0
     d1a:	13 c0       	rjmp	.+38     	; 0xd42 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d1c:	80 91 df 00 	lds	r24, 0x00DF
     d20:	8e 7f       	andi	r24, 0xFE	; 254
     d22:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     d26:	80 91 de 00 	lds	r24, 0x00DE
     d2a:	8e 7f       	andi	r24, 0xFE	; 254
     d2c:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d30:	a4 db       	rcall	.-2232   	; 0x47a <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d32:	80 91 a0 00 	lds	r24, 0x00A0
     d36:	82 60       	ori	r24, 0x02	; 2
     d38:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	80 93 34 01 	sts	0x0134, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d42:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d46:	82 ff       	sbrs	r24, 2
     d48:	0e c0       	rjmp	.+28     	; 0xd66 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d4a:	80 91 de 00 	lds	r24, 0x00DE
     d4e:	82 ff       	sbrs	r24, 2
     d50:	0a c0       	rjmp	.+20     	; 0xd66 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d52:	80 91 df 00 	lds	r24, 0x00DF
     d56:	8b 7f       	andi	r24, 0xFB	; 251
     d58:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	30 dc       	rcall	.-1952   	; 0x5c2 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d62:	91 db       	rcall	.-2270   	; 0x486 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d64:	15 df       	rcall	.-470    	; 0xb90 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d66:	ff 91       	pop	r31
     d68:	ef 91       	pop	r30
     d6a:	bf 91       	pop	r27
     d6c:	af 91       	pop	r26
     d6e:	9f 91       	pop	r25
     d70:	8f 91       	pop	r24
     d72:	7f 91       	pop	r23
     d74:	6f 91       	pop	r22
     d76:	5f 91       	pop	r21
     d78:	4f 91       	pop	r20
     d7a:	3f 91       	pop	r19
     d7c:	2f 91       	pop	r18
     d7e:	0f 90       	pop	r0
     d80:	0b be       	out	0x3b, r0	; 59
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     d8c:	cf 92       	push	r12
     d8e:	df 92       	push	r13
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	29 97       	sbiw	r28, 0x09	; 9
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	6b 01       	movw	r12, r22
     dae:	8a 01       	movw	r16, r20
     db0:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     db2:	90 e8       	ldi	r25, 0x80	; 128
     db4:	90 93 2c 01 	sts	0x012C, r25
     db8:	96 e0       	ldi	r25, 0x06	; 6
     dba:	90 93 2d 01 	sts	0x012D, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     dc4:	90 93 2f 01 	sts	0x012F, r25
     dc8:	80 93 2e 01 	sts	0x012E, r24
     dcc:	10 92 31 01 	sts	0x0131, r1
     dd0:	10 92 30 01 	sts	0x0130, r1
     dd4:	89 e0       	ldi	r24, 0x09	; 9
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	90 93 33 01 	sts	0x0133, r25
     ddc:	80 93 32 01 	sts	0x0132, r24
     de0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     de4:	ce 01       	movw	r24, r28
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	95 d0       	rcall	.+298    	; 0xf14 <USB_Host_SendControlRequest>
     dea:	88 23       	and	r24, r24
     dec:	b9 f4       	brne	.+46     	; 0xe1c <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	f6 01       	movw	r30, r12
     df4:	91 83       	std	Z+1, r25	; 0x01
     df6:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     df8:	e8 16       	cp	r14, r24
     dfa:	f9 06       	cpc	r15, r25
     dfc:	70 f0       	brcs	.+28     	; 0xe1a <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     dfe:	90 93 33 01 	sts	0x0133, r25
     e02:	80 93 32 01 	sts	0x0132, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e06:	c8 01       	movw	r24, r16
     e08:	85 d0       	rcall	.+266    	; 0xf14 <USB_Host_SendControlRequest>
     e0a:	88 23       	and	r24, r24
     e0c:	39 f4       	brne	.+14     	; 0xe1c <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e0e:	f8 01       	movw	r30, r16
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	92 30       	cpi	r25, 0x02	; 2
     e14:	19 f0       	breq	.+6      	; 0xe1c <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     e16:	86 e0       	ldi	r24, 0x06	; 6
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     e1a:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e1c:	29 96       	adiw	r28, 0x09	; 9
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	df 90       	pop	r13
     e36:	cf 90       	pop	r12
     e38:	08 95       	ret

00000e3a <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e3a:	af 92       	push	r10
     e3c:	bf 92       	push	r11
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	8c 01       	movw	r16, r24
     e50:	eb 01       	movw	r28, r22
     e52:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     e54:	23 c0       	rjmp	.+70     	; 0xe9c <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e56:	e8 81       	ld	r30, Y
     e58:	f9 81       	ldd	r31, Y+1	; 0x01
     e5a:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     e5c:	20 81       	ld	r18, Z
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	c7 01       	movw	r24, r14
     e62:	2e 15       	cp	r18, r14
     e64:	3f 05       	cpc	r19, r15
     e66:	08 f4       	brcc	.+2      	; 0xe6a <USB_GetNextDescriptorComp+0x30>
     e68:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e6a:	e8 0f       	add	r30, r24
     e6c:	f9 1f       	adc	r31, r25
     e6e:	f9 83       	std	Y+1, r31	; 0x01
     e70:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     e72:	f8 01       	movw	r30, r16
     e74:	20 81       	ld	r18, Z
     e76:	31 81       	ldd	r19, Z+1	; 0x01
     e78:	28 1b       	sub	r18, r24
     e7a:	39 0b       	sbc	r19, r25
     e7c:	31 83       	std	Z+1, r19	; 0x01
     e7e:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e80:	88 81       	ld	r24, Y
     e82:	99 81       	ldd	r25, Y+1	; 0x01
     e84:	f6 01       	movw	r30, r12
     e86:	09 95       	icall
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	41 f0       	breq	.+16     	; 0xe9c <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	69 f4       	brne	.+26     	; 0xeaa <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
     e90:	a8 82       	st	Y, r10
     e92:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
     e94:	f8 01       	movw	r30, r16
     e96:	f1 82       	std	Z+1, r15	; 0x01
     e98:	e0 82       	st	Z, r14
     e9a:	07 c0       	rjmp	.+14     	; 0xeaa <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     e9c:	f8 01       	movw	r30, r16
     e9e:	e0 80       	ld	r14, Z
     ea0:	f1 80       	ldd	r15, Z+1	; 0x01
     ea2:	e1 14       	cp	r14, r1
     ea4:	f1 04       	cpc	r15, r1
     ea6:	b9 f6       	brne	.-82     	; 0xe56 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     ea8:	82 e0       	ldi	r24, 0x02	; 2
}
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	bf 90       	pop	r11
     ebc:	af 90       	pop	r10
     ebe:	08 95       	ret

00000ec0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     ec0:	08 95       	ret

00000ec2 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
     eca:	c8 ee       	ldi	r28, 0xE8	; 232
     ecc:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ece:	07 c0       	rjmp	.+14     	; 0xede <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	f5 db       	rcall	.-2070   	; 0x6be <USB_Host_WaitMS>
     ed4:	88 23       	and	r24, r24
     ed6:	d1 f4       	brne	.+52     	; 0xf0c <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     ed8:	20 97       	sbiw	r28, 0x00	; 0
     eda:	b9 f0       	breq	.+46     	; 0xf0a <USB_Host_WaitForIOS+0x48>
     edc:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ede:	11 23       	and	r17, r17
     ee0:	29 f4       	brne	.+10     	; 0xeec <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     ee2:	80 91 a6 00 	lds	r24, 0x00A6
     ee6:	83 ff       	sbrs	r24, 3
     ee8:	f3 cf       	rjmp	.-26     	; 0xed0 <USB_Host_WaitForIOS+0xe>
     eea:	0d c0       	rjmp	.+26     	; 0xf06 <USB_Host_WaitForIOS+0x44>
     eec:	11 30       	cpi	r17, 0x01	; 1
     eee:	29 f4       	brne	.+10     	; 0xefa <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ef0:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     ef4:	80 ff       	sbrs	r24, 0
     ef6:	ec cf       	rjmp	.-40     	; 0xed0 <USB_Host_WaitForIOS+0xe>
     ef8:	06 c0       	rjmp	.+12     	; 0xf06 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     efa:	12 30       	cpi	r17, 0x02	; 2
     efc:	49 f7       	brne	.-46     	; 0xed0 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     efe:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f02:	82 ff       	sbrs	r24, 2
     f04:	e5 cf       	rjmp	.-54     	; 0xed0 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f0a:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	08 95       	ret

00000f14 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f22:	e0 90 9e 00 	lds	r14, 0x009E
     f26:	ff 24       	eor	r15, r15
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	e8 22       	and	r14, r24
     f2c:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f2e:	c0 91 32 01 	lds	r28, 0x0132
     f32:	d0 91 33 01 	lds	r29, 0x0133
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f36:	80 91 9e 00 	lds	r24, 0x009E
     f3a:	81 60       	ori	r24, 0x01	; 1
     f3c:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	bd db       	rcall	.-2182   	; 0x6be <USB_Host_WaitMS>
     f44:	88 23       	and	r24, r24
     f46:	09 f0       	breq	.+2      	; 0xf4a <USB_Host_SendControlRequest+0x36>
     f48:	cb c0       	rjmp	.+406    	; 0x10e0 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f4a:	80 91 aa 00 	lds	r24, 0x00AA
     f4e:	8f 7c       	andi	r24, 0xCF	; 207
     f50:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f54:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     f58:	80 91 a6 00 	lds	r24, 0x00A6
     f5c:	8f 7e       	andi	r24, 0xEF	; 239
     f5e:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f62:	80 91 a9 00 	lds	r24, 0x00A9
     f66:	8f 7b       	andi	r24, 0xBF	; 191
     f68:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     f6c:	ec e2       	ldi	r30, 0x2C	; 44
     f6e:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     f70:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f72:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	e4 33       	cpi	r30, 0x34	; 52
     f7a:	f8 07       	cpc	r31, r24
     f7c:	c9 f7       	brne	.-14     	; 0xf70 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f7e:	80 91 a6 00 	lds	r24, 0x00A6
     f82:	87 77       	andi	r24, 0x77	; 119
     f84:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	9b df       	rcall	.-202    	; 0xec2 <USB_Host_WaitForIOS>
     f8c:	88 23       	and	r24, r24
     f8e:	09 f0       	breq	.+2      	; 0xf92 <USB_Host_SendControlRequest+0x7e>
     f90:	a7 c0       	rjmp	.+334    	; 0x10e0 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f92:	80 91 a9 00 	lds	r24, 0x00A9
     f96:	80 64       	ori	r24, 0x40	; 64
     f98:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	8f db       	rcall	.-2274   	; 0x6be <USB_Host_WaitMS>
     fa0:	88 23       	and	r24, r24
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <USB_Host_SendControlRequest+0x92>
     fa4:	9d c0       	rjmp	.+314    	; 0x10e0 <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     fa6:	80 91 2c 01 	lds	r24, 0x012C
     faa:	87 ff       	sbrs	r24, 7
     fac:	4f c0       	rjmp	.+158    	; 0x104c <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fae:	80 91 aa 00 	lds	r24, 0x00AA
     fb2:	8f 7c       	andi	r24, 0xCF	; 207
     fb4:	80 61       	ori	r24, 0x10	; 16
     fb6:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     fba:	01 15       	cp	r16, r1
     fbc:	11 05       	cpc	r17, r1
     fbe:	61 f5       	brne	.+88     	; 0x1018 <USB_Host_SendControlRequest+0x104>
     fc0:	2d c0       	rjmp	.+90     	; 0x101c <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fc2:	80 91 a9 00 	lds	r24, 0x00A9
     fc6:	8f 7b       	andi	r24, 0xBF	; 191
     fc8:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	79 df       	rcall	.-270    	; 0xec2 <USB_Host_WaitForIOS>
     fd0:	88 23       	and	r24, r24
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <USB_Host_SendControlRequest+0xc2>
     fd4:	85 c0       	rjmp	.+266    	; 0x10e0 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fd6:	80 91 f6 00 	lds	r24, 0x00F6
     fda:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	49 f4       	brne	.+18     	; 0xff4 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
     fe2:	c0 e0       	ldi	r28, 0x00	; 0
     fe4:	d0 e0       	ldi	r29, 0x00	; 0
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     fe8:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
     fec:	f8 01       	movw	r30, r16
     fee:	81 93       	st	Z+, r24
     ff0:	8f 01       	movw	r16, r30
					DataLen--;
     ff2:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     ff4:	80 91 f6 00 	lds	r24, 0x00F6
     ff8:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	11 f0       	breq	.+4      	; 0x1004 <USB_Host_SendControlRequest+0xf0>
    1000:	20 97       	sbiw	r28, 0x00	; 0
    1002:	91 f7       	brne	.-28     	; 0xfe8 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1004:	80 91 a9 00 	lds	r24, 0x00A9
    1008:	80 64       	ori	r24, 0x40	; 64
    100a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    100e:	80 91 a6 00 	lds	r24, 0x00A6
    1012:	8e 77       	andi	r24, 0x7E	; 126
    1014:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1018:	20 97       	sbiw	r28, 0x00	; 0
    101a:	99 f6       	brne	.-90     	; 0xfc2 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    101c:	80 91 aa 00 	lds	r24, 0x00AA
    1020:	8f 7c       	andi	r24, 0xCF	; 207
    1022:	80 62       	ori	r24, 0x20	; 32
    1024:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1028:	80 91 a9 00 	lds	r24, 0x00A9
    102c:	8f 7b       	andi	r24, 0xBF	; 191
    102e:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	46 df       	rcall	.-372    	; 0xec2 <USB_Host_WaitForIOS>
    1036:	88 23       	and	r24, r24
    1038:	09 f0       	breq	.+2      	; 0x103c <USB_Host_SendControlRequest+0x128>
    103a:	52 c0       	rjmp	.+164    	; 0x10e0 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    103c:	80 91 a6 00 	lds	r24, 0x00A6
    1040:	8b 77       	andi	r24, 0x7B	; 123
    1042:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	3c df       	rcall	.-392    	; 0xec2 <USB_Host_WaitForIOS>
    104a:	4a c0       	rjmp	.+148    	; 0x10e0 <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    104c:	01 15       	cp	r16, r1
    104e:	11 05       	cpc	r17, r1
    1050:	99 f1       	breq	.+102    	; 0x10b8 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1052:	80 91 aa 00 	lds	r24, 0x00AA
    1056:	8f 7c       	andi	r24, 0xCF	; 207
    1058:	80 62       	ori	r24, 0x20	; 32
    105a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    105e:	80 91 a9 00 	lds	r24, 0x00A9
    1062:	8f 7b       	andi	r24, 0xBF	; 191
    1064:	80 93 a9 00 	sts	0x00A9, r24
    1068:	1c c0       	rjmp	.+56     	; 0x10a2 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	2a df       	rcall	.-428    	; 0xec2 <USB_Host_WaitForIOS>
    106e:	88 23       	and	r24, r24
    1070:	b9 f5       	brne	.+110    	; 0x10e0 <USB_Host_SendControlRequest+0x1cc>
    1072:	f8 01       	movw	r30, r16
    1074:	06 c0       	rjmp	.+12     	; 0x1082 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1076:	81 91       	ld	r24, Z+
    1078:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    107a:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    107e:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1080:	59 f0       	breq	.+22     	; 0x1098 <USB_Host_SendControlRequest+0x184>
    1082:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1084:	20 91 f6 00 	lds	r18, 0x00F6
    1088:	30 91 f7 00 	lds	r19, 0x00F7
    108c:	80 91 23 01 	lds	r24, 0x0123
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	28 17       	cp	r18, r24
    1094:	39 07       	cpc	r19, r25
    1096:	78 f3       	brcs	.-34     	; 0x1076 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1098:	80 91 a6 00 	lds	r24, 0x00A6
    109c:	8b 77       	andi	r24, 0x7B	; 123
    109e:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10a2:	20 97       	sbiw	r28, 0x00	; 0
    10a4:	11 f7       	brne	.-60     	; 0x106a <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10a6:	82 e0       	ldi	r24, 0x02	; 2
    10a8:	0c df       	rcall	.-488    	; 0xec2 <USB_Host_WaitForIOS>
    10aa:	88 23       	and	r24, r24
    10ac:	c9 f4       	brne	.+50     	; 0x10e0 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10ae:	80 91 a9 00 	lds	r24, 0x00A9
    10b2:	80 64       	ori	r24, 0x40	; 64
    10b4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10b8:	80 91 aa 00 	lds	r24, 0x00AA
    10bc:	8f 7c       	andi	r24, 0xCF	; 207
    10be:	80 61       	ori	r24, 0x10	; 16
    10c0:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10c4:	80 91 a9 00 	lds	r24, 0x00A9
    10c8:	8f 7b       	andi	r24, 0xBF	; 191
    10ca:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	f8 de       	rcall	.-528    	; 0xec2 <USB_Host_WaitForIOS>
    10d2:	88 23       	and	r24, r24
    10d4:	29 f4       	brne	.+10     	; 0x10e0 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10d6:	90 91 a6 00 	lds	r25, 0x00A6
    10da:	9e 77       	andi	r25, 0x7E	; 126
    10dc:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10e0:	90 91 a9 00 	lds	r25, 0x00A9
    10e4:	90 64       	ori	r25, 0x40	; 64
    10e6:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    10ea:	e1 14       	cp	r14, r1
    10ec:	f1 04       	cpc	r15, r1
    10ee:	29 f4       	brne	.+10     	; 0x10fa <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    10f0:	90 91 9e 00 	lds	r25, 0x009E
    10f4:	9e 7f       	andi	r25, 0xFE	; 254
    10f6:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1100:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	08 95       	ret

00001112 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1112:	1f 93       	push	r17
    1114:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1116:	10 92 2c 01 	sts	0x012C, r1
    111a:	89 e0       	ldi	r24, 0x09	; 9
    111c:	80 93 2d 01 	sts	0x012D, r24
    1120:	10 93 2e 01 	sts	0x012E, r17
    1124:	10 92 2f 01 	sts	0x012F, r1
    1128:	10 92 31 01 	sts	0x0131, r1
    112c:	10 92 30 01 	sts	0x0130, r1
    1130:	10 92 33 01 	sts	0x0133, r1
    1134:	10 92 32 01 	sts	0x0132, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1138:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	e9 de       	rcall	.-558    	; 0xf14 <USB_Host_SendControlRequest>
    1142:	88 23       	and	r24, r24
    1144:	49 f4       	brne	.+18     	; 0x1158 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1146:	10 93 2a 01 	sts	0x012A, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    114a:	11 23       	and	r17, r17
    114c:	11 f0       	breq	.+4      	; 0x1152 <USB_Host_SetDeviceConfiguration+0x40>
    114e:	9b e0       	ldi	r25, 0x0B	; 11
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <USB_Host_SetDeviceConfiguration+0x42>
    1152:	9a e0       	ldi	r25, 0x0A	; 10
    1154:	90 93 34 01 	sts	0x0134, r25
	}

	return ErrorCode;
}
    1158:	1f 91       	pop	r17
    115a:	08 95       	ret

0000115c <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    115c:	ec e2       	ldi	r30, 0x2C	; 44
    115e:	f1 e0       	ldi	r31, 0x01	; 1
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	90 93 2c 01 	sts	0x012C, r25
    1166:	9b e0       	ldi	r25, 0x0B	; 11
    1168:	90 93 2d 01 	sts	0x012D, r25
    116c:	60 93 2e 01 	sts	0x012E, r22
    1170:	13 82       	std	Z+3, r1	; 0x03
    1172:	80 93 30 01 	sts	0x0130, r24
    1176:	15 82       	std	Z+5, r1	; 0x05
    1178:	10 92 33 01 	sts	0x0133, r1
    117c:	10 92 32 01 	sts	0x0132, r1
    1180:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
}
    1188:	c5 ce       	rjmp	.-630    	; 0xf14 <USB_Host_SendControlRequest>

0000118a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    118a:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    118c:	10 91 a7 00 	lds	r17, 0x00A7
    1190:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1192:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1196:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    119a:	e6 da       	rcall	.-2612   	; 0x768 <USB_Host_ProcessNextHostState>
    119c:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    11a0:	1f 91       	pop	r17
    11a2:	08 95       	ret

000011a4 <DCOMP_Audio_Host_NextAudioControlInterface>:

	return AUDIO_ENUMERROR_NoError;
}

static uint8_t DCOMP_Audio_Host_NextAudioControlInterface(void* CurrentDescriptor)
{
    11a4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    11a6:	81 81       	ldd	r24, Z+1	; 0x01
    11a8:	84 30       	cpi	r24, 0x04	; 4
    11aa:	49 f4       	brne	.+18     	; 0x11be <DCOMP_Audio_Host_NextAudioControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    11ac:	85 81       	ldd	r24, Z+5	; 0x05
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	31 f4       	brne	.+12     	; 0x11be <DCOMP_Audio_Host_NextAudioControlInterface+0x1a>
    11b2:	86 81       	ldd	r24, Z+6	; 0x06
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	19 f4       	brne	.+6      	; 0x11be <DCOMP_Audio_Host_NextAudioControlInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
    11b8:	87 81       	ldd	r24, Z+7	; 0x07
    11ba:	88 23       	and	r24, r24
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <DCOMP_Audio_Host_NextAudioControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_ControlProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    11c2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11c4:	08 95       	ret

000011c6 <DCOMP_Audio_Host_NextAudioStreamInterface>:

static uint8_t DCOMP_Audio_Host_NextAudioStreamInterface(void* CurrentDescriptor)
{
    11c6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    11c8:	81 81       	ldd	r24, Z+1	; 0x01
    11ca:	84 30       	cpi	r24, 0x04	; 4
    11cc:	49 f4       	brne	.+18     	; 0x11e0 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    11ce:	85 81       	ldd	r24, Z+5	; 0x05
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	31 f4       	brne	.+12     	; 0x11e0 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1a>
    11d4:	86 81       	ldd	r24, Z+6	; 0x06
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	19 f4       	brne	.+6      	; 0x11e0 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
    11da:	87 81       	ldd	r24, Z+7	; 0x07
    11dc:	88 23       	and	r24, r24
    11de:	11 f0       	breq	.+4      	; 0x11e4 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    11e4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11e6:	08 95       	ret

000011e8 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint>:

static uint8_t DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
    11e8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    11ea:	81 81       	ldd	r24, Z+1	; 0x01
    11ec:	85 30       	cpi	r24, 0x05	; 5
    11ee:	29 f4       	brne	.+10     	; 0x11fa <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
    11f0:	83 81       	ldd	r24, Z+3	; 0x03
    11f2:	83 70       	andi	r24, 0x03	; 3
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	19 f4       	brne	.+6      	; 0x11fe <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x16>
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    11fa:	84 30       	cpi	r24, 0x04	; 4
    11fc:	21 f0       	breq	.+8      	; 0x1206 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
		  return DESCRIPTOR_SEARCH_Found;
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1206:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1208:	08 95       	ret

0000120a <Audio_Host_ConfigurePipes>:
#include "AudioClassHost.h"

uint8_t Audio_Host_ConfigurePipes(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    120a:	4f 92       	push	r4
    120c:	5f 92       	push	r5
    120e:	6f 92       	push	r6
    1210:	7f 92       	push	r7
    1212:	8f 92       	push	r8
    1214:	9f 92       	push	r9
    1216:	af 92       	push	r10
    1218:	bf 92       	push	r11
    121a:	cf 92       	push	r12
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	00 d0       	rcall	.+0      	; 0x122c <Audio_Host_ConfigurePipes+0x22>
    122c:	00 d0       	rcall	.+0      	; 0x122e <Audio_Host_ConfigurePipes+0x24>
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	8c 01       	movw	r16, r24
    1234:	7a 83       	std	Y+2, r23	; 0x02
    1236:	69 83       	std	Y+1, r22	; 0x01
    1238:	fa 01       	movw	r30, r20
    123a:	5c 83       	std	Y+4, r21	; 0x04
    123c:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
    123e:	dc 01       	movw	r26, r24
    1240:	1c 96       	adiw	r26, 0x0c	; 12
    1242:	1d 92       	st	X+, r1
    1244:	1d 92       	st	X+, r1
    1246:	1d 92       	st	X+, r1
    1248:	1c 92       	st	X, r1
    124a:	1f 97       	sbiw	r26, 0x0f	; 15

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    124c:	81 81       	ldd	r24, Z+1	; 0x01
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	09 f0       	breq	.+2      	; 0x1254 <Audio_Host_ConfigurePipes+0x4a>
    1252:	92 c0       	rjmp	.+292    	; 0x1378 <Audio_Host_ConfigurePipes+0x16e>
    1254:	44 24       	eor	r4, r4
    1256:	55 24       	eor	r5, r5
    1258:	66 24       	eor	r6, r6
    125a:	77 24       	eor	r7, r7
    125c:	cc 24       	eor	r12, r12
    125e:	dd 24       	eor	r13, r13
    1260:	ee 24       	eor	r14, r14
    1262:	ff 24       	eor	r15, r15
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1264:	83 e0       	ldi	r24, 0x03	; 3
    1266:	88 2e       	mov	r8, r24
    1268:	91 2c       	mov	r9, r1
    126a:	8c 0e       	add	r8, r28
    126c:	9d 1e       	adc	r9, r29
    126e:	5e 01       	movw	r10, r28
    1270:	08 94       	sec
    1272:	a1 1c       	adc	r10, r1
    1274:	b1 1c       	adc	r11, r1
    1276:	2f c0       	rjmp	.+94     	; 0x12d6 <Audio_Host_ConfigurePipes+0xcc>
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    1278:	61 14       	cp	r6, r1
    127a:	71 04       	cpc	r7, r1
    127c:	49 f0       	breq	.+18     	; 0x1290 <Audio_Host_ConfigurePipes+0x86>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    127e:	c5 01       	movw	r24, r10
    1280:	b4 01       	movw	r22, r8
    1282:	44 ef       	ldi	r20, 0xF4	; 244
    1284:	58 e0       	ldi	r21, 0x08	; 8
    1286:	d9 dd       	rcall	.-1102   	; 0xe3a <USB_GetNextDescriptorComp>
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    1288:	88 23       	and	r24, r24
    128a:	09 f0       	breq	.+2      	; 0x128e <Audio_Host_ConfigurePipes+0x84>
    128c:	8f c0       	rjmp	.+286    	; 0x13ac <Audio_Host_ConfigurePipes+0x1a2>
    128e:	1b c0       	rjmp	.+54     	; 0x12c6 <Audio_Host_ConfigurePipes+0xbc>
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1290:	c5 01       	movw	r24, r10
    1292:	b4 01       	movw	r22, r8
    1294:	42 ed       	ldi	r20, 0xD2	; 210
    1296:	58 e0       	ldi	r21, 0x08	; 8
    1298:	d0 dd       	rcall	.-1120   	; 0xe3a <USB_GetNextDescriptorComp>
    129a:	88 23       	and	r24, r24
    129c:	09 f0       	breq	.+2      	; 0x12a0 <Audio_Host_ConfigurePipes+0x96>
    129e:	6e c0       	rjmp	.+220    	; 0x137c <Audio_Host_ConfigurePipes+0x172>
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    12a0:	cb 80       	ldd	r12, Y+3	; 0x03
    12a2:	ec 80       	ldd	r14, Y+4	; 0x04

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12a4:	c5 01       	movw	r24, r10
    12a6:	b4 01       	movw	r22, r8
    12a8:	43 ee       	ldi	r20, 0xE3	; 227
    12aa:	58 e0       	ldi	r21, 0x08	; 8
    12ac:	c6 dd       	rcall	.-1140   	; 0xe3a <USB_GetNextDescriptorComp>
    12ae:	88 23       	and	r24, r24
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <Audio_Host_ConfigurePipes+0xaa>
    12b2:	64 c0       	rjmp	.+200    	; 0x137c <Audio_Host_ConfigurePipes+0x172>
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    12b4:	6c 2c       	mov	r6, r12
    12b6:	7e 2c       	mov	r7, r14
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    12b8:	4b 80       	ldd	r4, Y+3	; 0x03
    12ba:	5c 80       	ldd	r5, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    12bc:	cc 24       	eor	r12, r12
    12be:	dd 24       	eor	r13, r13
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

			DataINEndpoint  = NULL;
    12c0:	ee 24       	eor	r14, r14
    12c2:	ff 24       	eor	r15, r15
			DataOUTEndpoint = NULL;

			continue;
    12c4:	08 c0       	rjmp	.+16     	; 0x12d6 <Audio_Host_ConfigurePipes+0xcc>
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    12c6:	eb 81       	ldd	r30, Y+3	; 0x03
    12c8:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	87 ff       	sbrs	r24, 7
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <Audio_Host_ConfigurePipes+0xca>
		  DataINEndpoint  = EndpointData;
    12d0:	7f 01       	movw	r14, r30
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <Audio_Host_ConfigurePipes+0xcc>
		else
		  DataOUTEndpoint = EndpointData;
    12d4:	6f 01       	movw	r12, r30
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
    12d6:	f8 01       	movw	r30, r16
    12d8:	80 81       	ld	r24, Z
    12da:	88 23       	and	r24, r24
    12dc:	19 f0       	breq	.+6      	; 0x12e4 <Audio_Host_ConfigurePipes+0xda>
    12de:	e1 14       	cp	r14, r1
    12e0:	f1 04       	cpc	r15, r1
    12e2:	51 f2       	breq	.-108    	; 0x1278 <Audio_Host_ConfigurePipes+0x6e>
    12e4:	d8 01       	movw	r26, r16
    12e6:	16 96       	adiw	r26, 0x06	; 6
    12e8:	8c 91       	ld	r24, X
    12ea:	16 97       	sbiw	r26, 0x06	; 6
    12ec:	88 23       	and	r24, r24
    12ee:	21 f0       	breq	.+8      	; 0x12f8 <Audio_Host_ConfigurePipes+0xee>
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
    12f0:	c1 14       	cp	r12, r1
    12f2:	d1 04       	cpc	r13, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <Audio_Host_ConfigurePipes+0xee>
    12f6:	c0 cf       	rjmp	.-128    	; 0x1278 <Audio_Host_ConfigurePipes+0x6e>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	AudioInterfaceInfo->Config.DataINPipe.Size   = le16_to_cpu(DataINEndpoint->EndpointSize);
    12f8:	f7 01       	movw	r30, r14
    12fa:	84 81       	ldd	r24, Z+4	; 0x04
    12fc:	95 81       	ldd	r25, Z+5	; 0x05
    12fe:	d8 01       	movw	r26, r16
    1300:	12 96       	adiw	r26, 0x02	; 2
    1302:	9c 93       	st	X, r25
    1304:	8e 93       	st	-X, r24
    1306:	11 97       	sbiw	r26, 0x01	; 1
	AudioInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	13 96       	adiw	r26, 0x03	; 3
    130c:	8c 93       	st	X, r24
    130e:	13 97       	sbiw	r26, 0x03	; 3
	AudioInterfaceInfo->Config.DataINPipe.Type   = EP_TYPE_ISOCHRONOUS;
    1310:	ee 24       	eor	r14, r14
    1312:	e3 94       	inc	r14
    1314:	14 96       	adiw	r26, 0x04	; 4
    1316:	ec 92       	st	X, r14
    1318:	14 97       	sbiw	r26, 0x04	; 4
	AudioInterfaceInfo->Config.DataINPipe.Banks  = 2;
    131a:	22 e0       	ldi	r18, 0x02	; 2
    131c:	15 96       	adiw	r26, 0x05	; 5
    131e:	2c 93       	st	X, r18
    1320:	15 97       	sbiw	r26, 0x05	; 5
	
	AudioInterfaceInfo->Config.DataOUTPipe.Size  = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1322:	f6 01       	movw	r30, r12
    1324:	84 81       	ldd	r24, Z+4	; 0x04
    1326:	95 81       	ldd	r25, Z+5	; 0x05
    1328:	18 96       	adiw	r26, 0x08	; 8
    132a:	9c 93       	st	X, r25
    132c:	8e 93       	st	-X, r24
    132e:	17 97       	sbiw	r26, 0x07	; 7
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1330:	82 81       	ldd	r24, Z+2	; 0x02
    1332:	19 96       	adiw	r26, 0x09	; 9
    1334:	8c 93       	st	X, r24
    1336:	19 97       	sbiw	r26, 0x09	; 9
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
    1338:	1a 96       	adiw	r26, 0x0a	; 10
    133a:	ec 92       	st	X, r14
    133c:	1a 97       	sbiw	r26, 0x0a	; 10
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;
    133e:	1b 96       	adiw	r26, 0x0b	; 11
    1340:	2c 93       	st	X, r18
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
    1342:	c8 01       	movw	r24, r16
    1344:	61 e0       	ldi	r22, 0x01	; 1
    1346:	a0 db       	rcall	.-2240   	; 0xa88 <Pipe_ConfigurePipeTable>
    1348:	88 23       	and	r24, r24
    134a:	d1 f0       	breq	.+52     	; 0x1380 <Audio_Host_ConfigurePipes+0x176>
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
    134c:	c8 01       	movw	r24, r16
    134e:	06 96       	adiw	r24, 0x06	; 6
    1350:	61 e0       	ldi	r22, 0x01	; 1
    1352:	9a db       	rcall	.-2252   	; 0xa88 <Pipe_ConfigurePipeTable>
    1354:	88 23       	and	r24, r24
    1356:	a1 f0       	breq	.+40     	; 0x1380 <Audio_Host_ConfigurePipes+0x176>
	  return false;

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
    1358:	d3 01       	movw	r26, r6
    135a:	12 96       	adiw	r26, 0x02	; 2
    135c:	8c 91       	ld	r24, X
    135e:	f8 01       	movw	r30, r16
    1360:	85 87       	std	Z+13, r24	; 0x0d
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
    1362:	d2 01       	movw	r26, r4
    1364:	12 96       	adiw	r26, 0x02	; 2
    1366:	8c 91       	ld	r24, X
    1368:	12 97       	sbiw	r26, 0x02	; 2
    136a:	86 87       	std	Z+14, r24	; 0x0e
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
    136c:	13 96       	adiw	r26, 0x03	; 3
    136e:	8c 91       	ld	r24, X
    1370:	13 97       	sbiw	r26, 0x03	; 3
    1372:	87 87       	std	Z+15, r24	; 0x0f
	AudioInterfaceInfo->State.IsActive = true;
    1374:	e4 86       	std	Z+12, r14	; 0x0c
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <Audio_Host_ConfigurePipes+0x176>
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <Audio_Host_ConfigurePipes+0x178>
				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
				                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <Audio_Host_ConfigurePipes+0x178>
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;
    1380:	80 e0       	ldi	r24, 0x00	; 0
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
	AudioInterfaceInfo->State.IsActive = true;

	return AUDIO_ENUMERROR_NoError;
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	df 90       	pop	r13
    1398:	cf 90       	pop	r12
    139a:	bf 90       	pop	r11
    139c:	af 90       	pop	r10
    139e:	9f 90       	pop	r9
    13a0:	8f 90       	pop	r8
    13a2:	7f 90       	pop	r7
    13a4:	6f 90       	pop	r6
    13a6:	5f 90       	pop	r5
    13a8:	4f 90       	pop	r4
    13aa:	08 95       	ret
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    13ac:	c5 01       	movw	r24, r10
    13ae:	b4 01       	movw	r22, r8
    13b0:	43 ee       	ldi	r20, 0xE3	; 227
    13b2:	58 e0       	ldi	r21, 0x08	; 8
    13b4:	42 dd       	rcall	.-1404   	; 0xe3a <USB_GetNextDescriptorComp>
	{
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
    13b6:	88 23       	and	r24, r24
    13b8:	09 f0       	breq	.+2      	; 0x13bc <Audio_Host_ConfigurePipes+0x1b2>
    13ba:	6a cf       	rjmp	.-300    	; 0x1290 <Audio_Host_ConfigurePipes+0x86>
    13bc:	7d cf       	rjmp	.-262    	; 0x12b8 <Audio_Host_ConfigurePipes+0xae>

000013be <Audio_Host_StartStopStreaming>:
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t Audio_Host_StartStopStreaming(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
			                          const bool EnableStreaming)
{
    13be:	fc 01       	movw	r30, r24
	if (!(AudioInterfaceInfo->State.IsActive))
    13c0:	84 85       	ldd	r24, Z+12	; 0x0c
    13c2:	88 23       	and	r24, r24
    13c4:	39 f0       	breq	.+14     	; 0x13d4 <Audio_Host_StartStopStreaming+0x16>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
    13c6:	86 85       	ldd	r24, Z+14	; 0x0e
    13c8:	66 23       	and	r22, r22
    13ca:	11 f0       	breq	.+4      	; 0x13d0 <Audio_Host_StartStopStreaming+0x12>
    13cc:	67 85       	ldd	r22, Z+15	; 0x0f
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <Audio_Host_StartStopStreaming+0x14>
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	c4 ce       	rjmp	.-632    	; 0x115c <USB_Host_SetInterfaceAltSetting>

uint8_t Audio_Host_StartStopStreaming(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
			                          const bool EnableStreaming)
{
	if (!(AudioInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    13d4:	81 e0       	ldi	r24, 0x01	; 1

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
	                                       EnableStreaming ? AudioInterfaceInfo->State.EnabledStreamingAltIndex : 0);
}
    13d6:	08 95       	ret

000013d8 <Audio_Host_GetSetEndpointProperty>:
			                              const uint8_t DataPipeIndex,
			                              const uint8_t EndpointProperty,
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
    13d8:	ef 92       	push	r14
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
	if (!(AudioInterfaceInfo->State.IsActive))
    13e0:	fc 01       	movw	r30, r24
    13e2:	84 85       	ldd	r24, Z+12	; 0x0c
    13e4:	88 23       	and	r24, r24
    13e6:	39 f1       	breq	.+78     	; 0x1436 <Audio_Host_GetSetEndpointProperty+0x5e>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t RequestType;
	uint8_t EndpointAddress;

	if (EndpointProperty & 0x80)
    13e8:	47 ff       	sbrs	r20, 7
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <Audio_Host_GetSetEndpointProperty+0x18>
	  RequestType = (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT);
    13ec:	92 ea       	ldi	r25, 0xA2	; 162
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <Audio_Host_GetSetEndpointProperty+0x1a>
	else
	  RequestType = (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT);
    13f0:	92 e2       	ldi	r25, 0x22	; 34
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13f2:	6f 70       	andi	r22, 0x0F	; 15
    13f4:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    13f8:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    13fc:	53 2f       	mov	r21, r19
    13fe:	5f 70       	andi	r21, 0x0F	; 15
    1400:	30 ff       	sbrs	r19, 0
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <Audio_Host_GetSetEndpointProperty+0x30>
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	01 c0       	rjmp	.+2      	; 0x140a <Audio_Host_GetSetEndpointProperty+0x32>
    1408:	80 e8       	ldi	r24, 0x80	; 128

	Pipe_SelectPipe(DataPipeIndex);
	EndpointAddress = Pipe_GetBoundEndpointAddress();

	USB_ControlRequest = (USB_Request_Header_t)
    140a:	90 93 2c 01 	sts	0x012C, r25
    140e:	40 93 2d 01 	sts	0x012D, r20
    1412:	ee e2       	ldi	r30, 0x2E	; 46
    1414:	f1 e0       	ldi	r31, 0x01	; 1
    1416:	10 92 2e 01 	sts	0x012E, r1
    141a:	21 83       	std	Z+1, r18	; 0x01
    141c:	85 2b       	or	r24, r21
    141e:	80 93 30 01 	sts	0x0130, r24
    1422:	13 82       	std	Z+3, r1	; 0x03
    1424:	10 93 33 01 	sts	0x0133, r17
    1428:	00 93 32 01 	sts	0x0132, r16
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    142c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = DataLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
    1430:	c7 01       	movw	r24, r14
    1432:	70 dd       	rcall	.-1312   	; 0xf14 <USB_Host_SendControlRequest>
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <Audio_Host_GetSetEndpointProperty+0x60>
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
	if (!(AudioInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1436:	81 e0       	ldi	r24, 0x01	; 1
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
}
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	08 95       	ret

00001442 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1442:	90 91 c8 00 	lds	r25, 0x00C8
    1446:	95 ff       	sbrs	r25, 5
    1448:	fc cf       	rjmp	.-8      	; 0x1442 <Serial_putchar>
				UDR1 = DataByte;
    144a:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	08 95       	ret

00001454 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1454:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1458:	87 ff       	sbrs	r24, 7
    145a:	08 c0       	rjmp	.+16     	; 0x146c <Serial_getchar+0x18>
    145c:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1460:	87 ff       	sbrs	r24, 7
    1462:	07 c0       	rjmp	.+14     	; 0x1472 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1464:	20 91 ce 00 	lds	r18, 0x00CE
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	05 c0       	rjmp	.+10     	; 0x1476 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    146c:	2e ef       	ldi	r18, 0xFE	; 254
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1472:	2f ef       	ldi	r18, 0xFF	; 255
    1474:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1476:	c9 01       	movw	r24, r18
    1478:	08 95       	ret

0000147a <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    147a:	fc 01       	movw	r30, r24
	if (!(Stream))
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	51 f4       	brne	.+20     	; 0x1494 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1480:	e5 e3       	ldi	r30, 0x35	; 53
    1482:	f1 e0       	ldi	r31, 0x01	; 1
    1484:	f0 93 44 01 	sts	0x0144, r31
    1488:	e0 93 43 01 	sts	0x0143, r30
		stdout = Stream;
    148c:	f0 93 46 01 	sts	0x0146, r31
    1490:	e0 93 45 01 	sts	0x0145, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1494:	8e e0       	ldi	r24, 0x0E	; 14
    1496:	df 01       	movw	r26, r30
    1498:	1d 92       	st	X+, r1
    149a:	8a 95       	dec	r24
    149c:	e9 f7       	brne	.-6      	; 0x1498 <Serial_CreateStream+0x1e>
    149e:	83 e0       	ldi	r24, 0x03	; 3
    14a0:	83 83       	std	Z+3, r24	; 0x03
    14a2:	81 e2       	ldi	r24, 0x21	; 33
    14a4:	9a e0       	ldi	r25, 0x0A	; 10
    14a6:	91 87       	std	Z+9, r25	; 0x09
    14a8:	80 87       	std	Z+8, r24	; 0x08
    14aa:	8a e2       	ldi	r24, 0x2A	; 42
    14ac:	9a e0       	ldi	r25, 0x0A	; 10
    14ae:	93 87       	std	Z+11, r25	; 0x0b
    14b0:	82 87       	std	Z+10, r24	; 0x0a
}
    14b2:	08 95       	ret

000014b4 <printf_P>:
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	fe 01       	movw	r30, r28
    14be:	35 96       	adiw	r30, 0x05	; 5
    14c0:	61 91       	ld	r22, Z+
    14c2:	71 91       	ld	r23, Z+
    14c4:	80 91 45 01 	lds	r24, 0x0145
    14c8:	90 91 46 01 	lds	r25, 0x0146
    14cc:	dc 01       	movw	r26, r24
    14ce:	13 96       	adiw	r26, 0x03	; 3
    14d0:	2c 91       	ld	r18, X
    14d2:	13 97       	sbiw	r26, 0x03	; 3
    14d4:	28 60       	ori	r18, 0x08	; 8
    14d6:	13 96       	adiw	r26, 0x03	; 3
    14d8:	2c 93       	st	X, r18
    14da:	af 01       	movw	r20, r30
    14dc:	42 d0       	rcall	.+132    	; 0x1562 <vfprintf>
    14de:	e0 91 45 01 	lds	r30, 0x0145
    14e2:	f0 91 46 01 	lds	r31, 0x0146
    14e6:	23 81       	ldd	r18, Z+3	; 0x03
    14e8:	27 7f       	andi	r18, 0xF7	; 247
    14ea:	23 83       	std	Z+3, r18	; 0x03
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <puts_P>:
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	8c 01       	movw	r16, r24
    1500:	e0 91 45 01 	lds	r30, 0x0145
    1504:	f0 91 46 01 	lds	r31, 0x0146
    1508:	83 81       	ldd	r24, Z+3	; 0x03
    150a:	81 ff       	sbrs	r24, 1
    150c:	20 c0       	rjmp	.+64     	; 0x154e <puts_P+0x5c>
    150e:	c0 e0       	ldi	r28, 0x00	; 0
    1510:	d0 e0       	ldi	r29, 0x00	; 0
    1512:	0c c0       	rjmp	.+24     	; 0x152c <puts_P+0x3a>
    1514:	db 01       	movw	r26, r22
    1516:	18 96       	adiw	r26, 0x08	; 8
    1518:	ed 91       	ld	r30, X+
    151a:	fc 91       	ld	r31, X
    151c:	19 97       	sbiw	r26, 0x09	; 9
    151e:	09 95       	icall
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	11 f0       	breq	.+4      	; 0x1528 <puts_P+0x36>
    1524:	cf ef       	ldi	r28, 0xFF	; 255
    1526:	df ef       	ldi	r29, 0xFF	; 255
    1528:	0f 5f       	subi	r16, 0xFF	; 255
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	f8 01       	movw	r30, r16
    152e:	84 91       	lpm	r24, Z+
    1530:	60 91 45 01 	lds	r22, 0x0145
    1534:	70 91 46 01 	lds	r23, 0x0146
    1538:	88 23       	and	r24, r24
    153a:	61 f7       	brne	.-40     	; 0x1514 <puts_P+0x22>
    153c:	db 01       	movw	r26, r22
    153e:	18 96       	adiw	r26, 0x08	; 8
    1540:	ed 91       	ld	r30, X+
    1542:	fc 91       	ld	r31, X
    1544:	19 97       	sbiw	r26, 0x09	; 9
    1546:	8a e0       	ldi	r24, 0x0A	; 10
    1548:	09 95       	icall
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	11 f0       	breq	.+4      	; 0x1552 <puts_P+0x60>
    154e:	cf ef       	ldi	r28, 0xFF	; 255
    1550:	df ef       	ldi	r29, 0xFF	; 255
    1552:	ce 01       	movw	r24, r28
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	08 95       	ret

00001562 <vfprintf>:
    1562:	2f 92       	push	r2
    1564:	3f 92       	push	r3
    1566:	4f 92       	push	r4
    1568:	5f 92       	push	r5
    156a:	6f 92       	push	r6
    156c:	7f 92       	push	r7
    156e:	8f 92       	push	r8
    1570:	9f 92       	push	r9
    1572:	af 92       	push	r10
    1574:	bf 92       	push	r11
    1576:	cf 92       	push	r12
    1578:	df 92       	push	r13
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	2c 97       	sbiw	r28, 0x0c	; 12
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	6c 01       	movw	r12, r24
    1598:	1b 01       	movw	r2, r22
    159a:	8a 01       	movw	r16, r20
    159c:	fc 01       	movw	r30, r24
    159e:	17 82       	std	Z+7, r1	; 0x07
    15a0:	16 82       	std	Z+6, r1	; 0x06
    15a2:	83 81       	ldd	r24, Z+3	; 0x03
    15a4:	81 ff       	sbrs	r24, 1
    15a6:	c4 c1       	rjmp	.+904    	; 0x1930 <vfprintf+0x3ce>
    15a8:	2e 01       	movw	r4, r28
    15aa:	08 94       	sec
    15ac:	41 1c       	adc	r4, r1
    15ae:	51 1c       	adc	r5, r1
    15b0:	f6 01       	movw	r30, r12
    15b2:	93 81       	ldd	r25, Z+3	; 0x03
    15b4:	f1 01       	movw	r30, r2
    15b6:	93 fd       	sbrc	r25, 3
    15b8:	85 91       	lpm	r24, Z+
    15ba:	93 ff       	sbrs	r25, 3
    15bc:	81 91       	ld	r24, Z+
    15be:	1f 01       	movw	r2, r30
    15c0:	88 23       	and	r24, r24
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <vfprintf+0x64>
    15c4:	b1 c1       	rjmp	.+866    	; 0x1928 <vfprintf+0x3c6>
    15c6:	85 32       	cpi	r24, 0x25	; 37
    15c8:	39 f4       	brne	.+14     	; 0x15d8 <vfprintf+0x76>
    15ca:	93 fd       	sbrc	r25, 3
    15cc:	85 91       	lpm	r24, Z+
    15ce:	93 ff       	sbrs	r25, 3
    15d0:	81 91       	ld	r24, Z+
    15d2:	1f 01       	movw	r2, r30
    15d4:	85 32       	cpi	r24, 0x25	; 37
    15d6:	21 f4       	brne	.+8      	; 0x15e0 <vfprintf+0x7e>
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	b6 01       	movw	r22, r12
    15dc:	db d1       	rcall	.+950    	; 0x1994 <fputc>
    15de:	e8 cf       	rjmp	.-48     	; 0x15b0 <vfprintf+0x4e>
    15e0:	ee 24       	eor	r14, r14
    15e2:	ff 24       	eor	r15, r15
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	20 32       	cpi	r18, 0x20	; 32
    15e8:	b0 f4       	brcc	.+44     	; 0x1616 <vfprintf+0xb4>
    15ea:	8b 32       	cpi	r24, 0x2B	; 43
    15ec:	69 f0       	breq	.+26     	; 0x1608 <vfprintf+0xa6>
    15ee:	8c 32       	cpi	r24, 0x2C	; 44
    15f0:	28 f4       	brcc	.+10     	; 0x15fc <vfprintf+0x9a>
    15f2:	80 32       	cpi	r24, 0x20	; 32
    15f4:	51 f0       	breq	.+20     	; 0x160a <vfprintf+0xa8>
    15f6:	83 32       	cpi	r24, 0x23	; 35
    15f8:	71 f4       	brne	.+28     	; 0x1616 <vfprintf+0xb4>
    15fa:	0b c0       	rjmp	.+22     	; 0x1612 <vfprintf+0xb0>
    15fc:	8d 32       	cpi	r24, 0x2D	; 45
    15fe:	39 f0       	breq	.+14     	; 0x160e <vfprintf+0xac>
    1600:	80 33       	cpi	r24, 0x30	; 48
    1602:	49 f4       	brne	.+18     	; 0x1616 <vfprintf+0xb4>
    1604:	21 60       	ori	r18, 0x01	; 1
    1606:	2c c0       	rjmp	.+88     	; 0x1660 <vfprintf+0xfe>
    1608:	22 60       	ori	r18, 0x02	; 2
    160a:	24 60       	ori	r18, 0x04	; 4
    160c:	29 c0       	rjmp	.+82     	; 0x1660 <vfprintf+0xfe>
    160e:	28 60       	ori	r18, 0x08	; 8
    1610:	27 c0       	rjmp	.+78     	; 0x1660 <vfprintf+0xfe>
    1612:	20 61       	ori	r18, 0x10	; 16
    1614:	25 c0       	rjmp	.+74     	; 0x1660 <vfprintf+0xfe>
    1616:	27 fd       	sbrc	r18, 7
    1618:	2c c0       	rjmp	.+88     	; 0x1672 <vfprintf+0x110>
    161a:	38 2f       	mov	r19, r24
    161c:	30 53       	subi	r19, 0x30	; 48
    161e:	3a 30       	cpi	r19, 0x0A	; 10
    1620:	98 f4       	brcc	.+38     	; 0x1648 <vfprintf+0xe6>
    1622:	26 ff       	sbrs	r18, 6
    1624:	08 c0       	rjmp	.+16     	; 0x1636 <vfprintf+0xd4>
    1626:	8e 2d       	mov	r24, r14
    1628:	88 0f       	add	r24, r24
    162a:	e8 2e       	mov	r14, r24
    162c:	ee 0c       	add	r14, r14
    162e:	ee 0c       	add	r14, r14
    1630:	e8 0e       	add	r14, r24
    1632:	e3 0e       	add	r14, r19
    1634:	15 c0       	rjmp	.+42     	; 0x1660 <vfprintf+0xfe>
    1636:	8f 2d       	mov	r24, r15
    1638:	88 0f       	add	r24, r24
    163a:	f8 2e       	mov	r15, r24
    163c:	ff 0c       	add	r15, r15
    163e:	ff 0c       	add	r15, r15
    1640:	f8 0e       	add	r15, r24
    1642:	f3 0e       	add	r15, r19
    1644:	20 62       	ori	r18, 0x20	; 32
    1646:	0c c0       	rjmp	.+24     	; 0x1660 <vfprintf+0xfe>
    1648:	8e 32       	cpi	r24, 0x2E	; 46
    164a:	21 f4       	brne	.+8      	; 0x1654 <vfprintf+0xf2>
    164c:	26 fd       	sbrc	r18, 6
    164e:	6c c1       	rjmp	.+728    	; 0x1928 <vfprintf+0x3c6>
    1650:	20 64       	ori	r18, 0x40	; 64
    1652:	06 c0       	rjmp	.+12     	; 0x1660 <vfprintf+0xfe>
    1654:	8c 36       	cpi	r24, 0x6C	; 108
    1656:	11 f4       	brne	.+4      	; 0x165c <vfprintf+0xfa>
    1658:	20 68       	ori	r18, 0x80	; 128
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <vfprintf+0xfe>
    165c:	88 36       	cpi	r24, 0x68	; 104
    165e:	49 f4       	brne	.+18     	; 0x1672 <vfprintf+0x110>
    1660:	f1 01       	movw	r30, r2
    1662:	93 fd       	sbrc	r25, 3
    1664:	85 91       	lpm	r24, Z+
    1666:	93 ff       	sbrs	r25, 3
    1668:	81 91       	ld	r24, Z+
    166a:	1f 01       	movw	r2, r30
    166c:	88 23       	and	r24, r24
    166e:	09 f0       	breq	.+2      	; 0x1672 <vfprintf+0x110>
    1670:	ba cf       	rjmp	.-140    	; 0x15e6 <vfprintf+0x84>
    1672:	98 2f       	mov	r25, r24
    1674:	95 54       	subi	r25, 0x45	; 69
    1676:	93 30       	cpi	r25, 0x03	; 3
    1678:	18 f0       	brcs	.+6      	; 0x1680 <vfprintf+0x11e>
    167a:	90 52       	subi	r25, 0x20	; 32
    167c:	93 30       	cpi	r25, 0x03	; 3
    167e:	28 f4       	brcc	.+10     	; 0x168a <vfprintf+0x128>
    1680:	0c 5f       	subi	r16, 0xFC	; 252
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	ff e3       	ldi	r31, 0x3F	; 63
    1686:	f9 83       	std	Y+1, r31	; 0x01
    1688:	0d c0       	rjmp	.+26     	; 0x16a4 <vfprintf+0x142>
    168a:	83 36       	cpi	r24, 0x63	; 99
    168c:	31 f0       	breq	.+12     	; 0x169a <vfprintf+0x138>
    168e:	83 37       	cpi	r24, 0x73	; 115
    1690:	71 f0       	breq	.+28     	; 0x16ae <vfprintf+0x14c>
    1692:	83 35       	cpi	r24, 0x53	; 83
    1694:	09 f0       	breq	.+2      	; 0x1698 <vfprintf+0x136>
    1696:	5c c0       	rjmp	.+184    	; 0x1750 <vfprintf+0x1ee>
    1698:	21 c0       	rjmp	.+66     	; 0x16dc <vfprintf+0x17a>
    169a:	f8 01       	movw	r30, r16
    169c:	80 81       	ld	r24, Z
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	0e 5f       	subi	r16, 0xFE	; 254
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	42 01       	movw	r8, r4
    16a6:	71 e0       	ldi	r23, 0x01	; 1
    16a8:	a7 2e       	mov	r10, r23
    16aa:	b1 2c       	mov	r11, r1
    16ac:	15 c0       	rjmp	.+42     	; 0x16d8 <vfprintf+0x176>
    16ae:	62 e0       	ldi	r22, 0x02	; 2
    16b0:	66 2e       	mov	r6, r22
    16b2:	71 2c       	mov	r7, r1
    16b4:	60 0e       	add	r6, r16
    16b6:	71 1e       	adc	r7, r17
    16b8:	f8 01       	movw	r30, r16
    16ba:	80 80       	ld	r8, Z
    16bc:	91 80       	ldd	r9, Z+1	; 0x01
    16be:	26 ff       	sbrs	r18, 6
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <vfprintf+0x166>
    16c2:	6e 2d       	mov	r22, r14
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <vfprintf+0x16a>
    16c8:	6f ef       	ldi	r22, 0xFF	; 255
    16ca:	7f ef       	ldi	r23, 0xFF	; 255
    16cc:	c4 01       	movw	r24, r8
    16ce:	2c 87       	std	Y+12, r18	; 0x0c
    16d0:	56 d1       	rcall	.+684    	; 0x197e <strnlen>
    16d2:	5c 01       	movw	r10, r24
    16d4:	83 01       	movw	r16, r6
    16d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    16d8:	2f 77       	andi	r18, 0x7F	; 127
    16da:	16 c0       	rjmp	.+44     	; 0x1708 <vfprintf+0x1a6>
    16dc:	52 e0       	ldi	r21, 0x02	; 2
    16de:	65 2e       	mov	r6, r21
    16e0:	71 2c       	mov	r7, r1
    16e2:	60 0e       	add	r6, r16
    16e4:	71 1e       	adc	r7, r17
    16e6:	f8 01       	movw	r30, r16
    16e8:	80 80       	ld	r8, Z
    16ea:	91 80       	ldd	r9, Z+1	; 0x01
    16ec:	26 ff       	sbrs	r18, 6
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <vfprintf+0x194>
    16f0:	6e 2d       	mov	r22, r14
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <vfprintf+0x198>
    16f6:	6f ef       	ldi	r22, 0xFF	; 255
    16f8:	7f ef       	ldi	r23, 0xFF	; 255
    16fa:	c4 01       	movw	r24, r8
    16fc:	2c 87       	std	Y+12, r18	; 0x0c
    16fe:	34 d1       	rcall	.+616    	; 0x1968 <strnlen_P>
    1700:	5c 01       	movw	r10, r24
    1702:	2c 85       	ldd	r18, Y+12	; 0x0c
    1704:	20 68       	ori	r18, 0x80	; 128
    1706:	83 01       	movw	r16, r6
    1708:	23 fd       	sbrc	r18, 3
    170a:	1e c0       	rjmp	.+60     	; 0x1748 <vfprintf+0x1e6>
    170c:	07 c0       	rjmp	.+14     	; 0x171c <vfprintf+0x1ba>
    170e:	80 e2       	ldi	r24, 0x20	; 32
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	b6 01       	movw	r22, r12
    1714:	2c 87       	std	Y+12, r18	; 0x0c
    1716:	3e d1       	rcall	.+636    	; 0x1994 <fputc>
    1718:	fa 94       	dec	r15
    171a:	2c 85       	ldd	r18, Y+12	; 0x0c
    171c:	8f 2d       	mov	r24, r15
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a8 16       	cp	r10, r24
    1722:	b9 06       	cpc	r11, r25
    1724:	a0 f3       	brcs	.-24     	; 0x170e <vfprintf+0x1ac>
    1726:	10 c0       	rjmp	.+32     	; 0x1748 <vfprintf+0x1e6>
    1728:	f4 01       	movw	r30, r8
    172a:	27 fd       	sbrc	r18, 7
    172c:	85 91       	lpm	r24, Z+
    172e:	27 ff       	sbrs	r18, 7
    1730:	81 91       	ld	r24, Z+
    1732:	4f 01       	movw	r8, r30
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	b6 01       	movw	r22, r12
    1738:	2c 87       	std	Y+12, r18	; 0x0c
    173a:	2c d1       	rcall	.+600    	; 0x1994 <fputc>
    173c:	2c 85       	ldd	r18, Y+12	; 0x0c
    173e:	f1 10       	cpse	r15, r1
    1740:	fa 94       	dec	r15
    1742:	08 94       	sec
    1744:	a1 08       	sbc	r10, r1
    1746:	b1 08       	sbc	r11, r1
    1748:	a1 14       	cp	r10, r1
    174a:	b1 04       	cpc	r11, r1
    174c:	69 f7       	brne	.-38     	; 0x1728 <vfprintf+0x1c6>
    174e:	e9 c0       	rjmp	.+466    	; 0x1922 <vfprintf+0x3c0>
    1750:	84 36       	cpi	r24, 0x64	; 100
    1752:	11 f0       	breq	.+4      	; 0x1758 <vfprintf+0x1f6>
    1754:	89 36       	cpi	r24, 0x69	; 105
    1756:	41 f5       	brne	.+80     	; 0x17a8 <vfprintf+0x246>
    1758:	27 ff       	sbrs	r18, 7
    175a:	08 c0       	rjmp	.+16     	; 0x176c <vfprintf+0x20a>
    175c:	f8 01       	movw	r30, r16
    175e:	60 81       	ld	r22, Z
    1760:	71 81       	ldd	r23, Z+1	; 0x01
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	93 81       	ldd	r25, Z+3	; 0x03
    1766:	0c 5f       	subi	r16, 0xFC	; 252
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	09 c0       	rjmp	.+18     	; 0x177e <vfprintf+0x21c>
    176c:	f8 01       	movw	r30, r16
    176e:	60 81       	ld	r22, Z
    1770:	71 81       	ldd	r23, Z+1	; 0x01
    1772:	88 27       	eor	r24, r24
    1774:	77 fd       	sbrc	r23, 7
    1776:	80 95       	com	r24
    1778:	98 2f       	mov	r25, r24
    177a:	0e 5f       	subi	r16, 0xFE	; 254
    177c:	1f 4f       	sbci	r17, 0xFF	; 255
    177e:	4f e6       	ldi	r20, 0x6F	; 111
    1780:	b4 2e       	mov	r11, r20
    1782:	b2 22       	and	r11, r18
    1784:	97 ff       	sbrs	r25, 7
    1786:	09 c0       	rjmp	.+18     	; 0x179a <vfprintf+0x238>
    1788:	90 95       	com	r25
    178a:	80 95       	com	r24
    178c:	70 95       	com	r23
    178e:	61 95       	neg	r22
    1790:	7f 4f       	sbci	r23, 0xFF	; 255
    1792:	8f 4f       	sbci	r24, 0xFF	; 255
    1794:	9f 4f       	sbci	r25, 0xFF	; 255
    1796:	f0 e8       	ldi	r31, 0x80	; 128
    1798:	bf 2a       	or	r11, r31
    179a:	a2 01       	movw	r20, r4
    179c:	2a e0       	ldi	r18, 0x0A	; 10
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	25 d1       	rcall	.+586    	; 0x19ec <__ultoa_invert>
    17a2:	78 2e       	mov	r7, r24
    17a4:	74 18       	sub	r7, r4
    17a6:	44 c0       	rjmp	.+136    	; 0x1830 <vfprintf+0x2ce>
    17a8:	85 37       	cpi	r24, 0x75	; 117
    17aa:	31 f4       	brne	.+12     	; 0x17b8 <vfprintf+0x256>
    17ac:	3f ee       	ldi	r19, 0xEF	; 239
    17ae:	b3 2e       	mov	r11, r19
    17b0:	b2 22       	and	r11, r18
    17b2:	2a e0       	ldi	r18, 0x0A	; 10
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	25 c0       	rjmp	.+74     	; 0x1802 <vfprintf+0x2a0>
    17b8:	99 ef       	ldi	r25, 0xF9	; 249
    17ba:	b9 2e       	mov	r11, r25
    17bc:	b2 22       	and	r11, r18
    17be:	8f 36       	cpi	r24, 0x6F	; 111
    17c0:	c1 f0       	breq	.+48     	; 0x17f2 <vfprintf+0x290>
    17c2:	80 37       	cpi	r24, 0x70	; 112
    17c4:	20 f4       	brcc	.+8      	; 0x17ce <vfprintf+0x26c>
    17c6:	88 35       	cpi	r24, 0x58	; 88
    17c8:	09 f0       	breq	.+2      	; 0x17cc <vfprintf+0x26a>
    17ca:	ae c0       	rjmp	.+348    	; 0x1928 <vfprintf+0x3c6>
    17cc:	0d c0       	rjmp	.+26     	; 0x17e8 <vfprintf+0x286>
    17ce:	80 37       	cpi	r24, 0x70	; 112
    17d0:	21 f0       	breq	.+8      	; 0x17da <vfprintf+0x278>
    17d2:	88 37       	cpi	r24, 0x78	; 120
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <vfprintf+0x276>
    17d6:	a8 c0       	rjmp	.+336    	; 0x1928 <vfprintf+0x3c6>
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <vfprintf+0x27c>
    17da:	20 e1       	ldi	r18, 0x10	; 16
    17dc:	b2 2a       	or	r11, r18
    17de:	b4 fe       	sbrs	r11, 4
    17e0:	0b c0       	rjmp	.+22     	; 0x17f8 <vfprintf+0x296>
    17e2:	84 e0       	ldi	r24, 0x04	; 4
    17e4:	b8 2a       	or	r11, r24
    17e6:	08 c0       	rjmp	.+16     	; 0x17f8 <vfprintf+0x296>
    17e8:	b4 fe       	sbrs	r11, 4
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <vfprintf+0x29c>
    17ec:	e6 e0       	ldi	r30, 0x06	; 6
    17ee:	be 2a       	or	r11, r30
    17f0:	06 c0       	rjmp	.+12     	; 0x17fe <vfprintf+0x29c>
    17f2:	28 e0       	ldi	r18, 0x08	; 8
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	05 c0       	rjmp	.+10     	; 0x1802 <vfprintf+0x2a0>
    17f8:	20 e1       	ldi	r18, 0x10	; 16
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <vfprintf+0x2a0>
    17fe:	20 e1       	ldi	r18, 0x10	; 16
    1800:	32 e0       	ldi	r19, 0x02	; 2
    1802:	b7 fe       	sbrs	r11, 7
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <vfprintf+0x2b4>
    1806:	f8 01       	movw	r30, r16
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	0c 5f       	subi	r16, 0xFC	; 252
    1812:	1f 4f       	sbci	r17, 0xFF	; 255
    1814:	07 c0       	rjmp	.+14     	; 0x1824 <vfprintf+0x2c2>
    1816:	f8 01       	movw	r30, r16
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	0e 5f       	subi	r16, 0xFE	; 254
    1822:	1f 4f       	sbci	r17, 0xFF	; 255
    1824:	a2 01       	movw	r20, r4
    1826:	e2 d0       	rcall	.+452    	; 0x19ec <__ultoa_invert>
    1828:	78 2e       	mov	r7, r24
    182a:	74 18       	sub	r7, r4
    182c:	ff e7       	ldi	r31, 0x7F	; 127
    182e:	bf 22       	and	r11, r31
    1830:	b6 fe       	sbrs	r11, 6
    1832:	0b c0       	rjmp	.+22     	; 0x184a <vfprintf+0x2e8>
    1834:	2e ef       	ldi	r18, 0xFE	; 254
    1836:	b2 22       	and	r11, r18
    1838:	7e 14       	cp	r7, r14
    183a:	38 f4       	brcc	.+14     	; 0x184a <vfprintf+0x2e8>
    183c:	b4 fe       	sbrs	r11, 4
    183e:	07 c0       	rjmp	.+14     	; 0x184e <vfprintf+0x2ec>
    1840:	b2 fc       	sbrc	r11, 2
    1842:	05 c0       	rjmp	.+10     	; 0x184e <vfprintf+0x2ec>
    1844:	8f ee       	ldi	r24, 0xEF	; 239
    1846:	b8 22       	and	r11, r24
    1848:	02 c0       	rjmp	.+4      	; 0x184e <vfprintf+0x2ec>
    184a:	a7 2c       	mov	r10, r7
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <vfprintf+0x2ee>
    184e:	ae 2c       	mov	r10, r14
    1850:	8b 2d       	mov	r24, r11
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	b4 fe       	sbrs	r11, 4
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <vfprintf+0x310>
    1858:	fe 01       	movw	r30, r28
    185a:	e7 0d       	add	r30, r7
    185c:	f1 1d       	adc	r31, r1
    185e:	20 81       	ld	r18, Z
    1860:	20 33       	cpi	r18, 0x30	; 48
    1862:	19 f4       	brne	.+6      	; 0x186a <vfprintf+0x308>
    1864:	e9 ee       	ldi	r30, 0xE9	; 233
    1866:	be 22       	and	r11, r30
    1868:	09 c0       	rjmp	.+18     	; 0x187c <vfprintf+0x31a>
    186a:	a3 94       	inc	r10
    186c:	b2 fe       	sbrs	r11, 2
    186e:	06 c0       	rjmp	.+12     	; 0x187c <vfprintf+0x31a>
    1870:	04 c0       	rjmp	.+8      	; 0x187a <vfprintf+0x318>
    1872:	86 78       	andi	r24, 0x86	; 134
    1874:	90 70       	andi	r25, 0x00	; 0
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	09 f0       	breq	.+2      	; 0x187c <vfprintf+0x31a>
    187a:	a3 94       	inc	r10
    187c:	8b 2c       	mov	r8, r11
    187e:	99 24       	eor	r9, r9
    1880:	b3 fc       	sbrc	r11, 3
    1882:	13 c0       	rjmp	.+38     	; 0x18aa <vfprintf+0x348>
    1884:	b0 fe       	sbrs	r11, 0
    1886:	0e c0       	rjmp	.+28     	; 0x18a4 <vfprintf+0x342>
    1888:	af 14       	cp	r10, r15
    188a:	28 f4       	brcc	.+10     	; 0x1896 <vfprintf+0x334>
    188c:	e7 2c       	mov	r14, r7
    188e:	ef 0c       	add	r14, r15
    1890:	ea 18       	sub	r14, r10
    1892:	af 2c       	mov	r10, r15
    1894:	07 c0       	rjmp	.+14     	; 0x18a4 <vfprintf+0x342>
    1896:	e7 2c       	mov	r14, r7
    1898:	05 c0       	rjmp	.+10     	; 0x18a4 <vfprintf+0x342>
    189a:	80 e2       	ldi	r24, 0x20	; 32
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	b6 01       	movw	r22, r12
    18a0:	79 d0       	rcall	.+242    	; 0x1994 <fputc>
    18a2:	a3 94       	inc	r10
    18a4:	af 14       	cp	r10, r15
    18a6:	c8 f3       	brcs	.-14     	; 0x189a <vfprintf+0x338>
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <vfprintf+0x350>
    18aa:	af 14       	cp	r10, r15
    18ac:	10 f4       	brcc	.+4      	; 0x18b2 <vfprintf+0x350>
    18ae:	fa 18       	sub	r15, r10
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <vfprintf+0x352>
    18b2:	ff 24       	eor	r15, r15
    18b4:	84 fe       	sbrs	r8, 4
    18b6:	0e c0       	rjmp	.+28     	; 0x18d4 <vfprintf+0x372>
    18b8:	80 e3       	ldi	r24, 0x30	; 48
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	b6 01       	movw	r22, r12
    18be:	6a d0       	rcall	.+212    	; 0x1994 <fputc>
    18c0:	82 fe       	sbrs	r8, 2
    18c2:	1d c0       	rjmp	.+58     	; 0x18fe <vfprintf+0x39c>
    18c4:	81 fe       	sbrs	r8, 1
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <vfprintf+0x36c>
    18c8:	88 e5       	ldi	r24, 0x58	; 88
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	10 c0       	rjmp	.+32     	; 0x18ee <vfprintf+0x38c>
    18ce:	88 e7       	ldi	r24, 0x78	; 120
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	0d c0       	rjmp	.+26     	; 0x18ee <vfprintf+0x38c>
    18d4:	c4 01       	movw	r24, r8
    18d6:	86 78       	andi	r24, 0x86	; 134
    18d8:	90 70       	andi	r25, 0x00	; 0
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	81 f0       	breq	.+32     	; 0x18fe <vfprintf+0x39c>
    18de:	81 fc       	sbrc	r8, 1
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <vfprintf+0x384>
    18e2:	80 e2       	ldi	r24, 0x20	; 32
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <vfprintf+0x386>
    18e6:	8b e2       	ldi	r24, 0x2B	; 43
    18e8:	b7 fc       	sbrc	r11, 7
    18ea:	8d e2       	ldi	r24, 0x2D	; 45
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	b6 01       	movw	r22, r12
    18f0:	51 d0       	rcall	.+162    	; 0x1994 <fputc>
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <vfprintf+0x39c>
    18f4:	80 e3       	ldi	r24, 0x30	; 48
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	b6 01       	movw	r22, r12
    18fa:	4c d0       	rcall	.+152    	; 0x1994 <fputc>
    18fc:	ea 94       	dec	r14
    18fe:	7e 14       	cp	r7, r14
    1900:	c8 f3       	brcs	.-14     	; 0x18f4 <vfprintf+0x392>
    1902:	7a 94       	dec	r7
    1904:	f2 01       	movw	r30, r4
    1906:	e7 0d       	add	r30, r7
    1908:	f1 1d       	adc	r31, r1
    190a:	80 81       	ld	r24, Z
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	b6 01       	movw	r22, r12
    1910:	41 d0       	rcall	.+130    	; 0x1994 <fputc>
    1912:	77 20       	and	r7, r7
    1914:	b1 f7       	brne	.-20     	; 0x1902 <vfprintf+0x3a0>
    1916:	05 c0       	rjmp	.+10     	; 0x1922 <vfprintf+0x3c0>
    1918:	80 e2       	ldi	r24, 0x20	; 32
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	b6 01       	movw	r22, r12
    191e:	3a d0       	rcall	.+116    	; 0x1994 <fputc>
    1920:	fa 94       	dec	r15
    1922:	ff 20       	and	r15, r15
    1924:	c9 f7       	brne	.-14     	; 0x1918 <vfprintf+0x3b6>
    1926:	44 ce       	rjmp	.-888    	; 0x15b0 <vfprintf+0x4e>
    1928:	f6 01       	movw	r30, r12
    192a:	26 81       	ldd	r18, Z+6	; 0x06
    192c:	37 81       	ldd	r19, Z+7	; 0x07
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <vfprintf+0x3d2>
    1930:	2f ef       	ldi	r18, 0xFF	; 255
    1932:	3f ef       	ldi	r19, 0xFF	; 255
    1934:	c9 01       	movw	r24, r18
    1936:	2c 96       	adiw	r28, 0x0c	; 12
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	ff 90       	pop	r15
    194c:	ef 90       	pop	r14
    194e:	df 90       	pop	r13
    1950:	cf 90       	pop	r12
    1952:	bf 90       	pop	r11
    1954:	af 90       	pop	r10
    1956:	9f 90       	pop	r9
    1958:	8f 90       	pop	r8
    195a:	7f 90       	pop	r7
    195c:	6f 90       	pop	r6
    195e:	5f 90       	pop	r5
    1960:	4f 90       	pop	r4
    1962:	3f 90       	pop	r3
    1964:	2f 90       	pop	r2
    1966:	08 95       	ret

00001968 <strnlen_P>:
    1968:	fc 01       	movw	r30, r24
    196a:	05 90       	lpm	r0, Z+
    196c:	61 50       	subi	r22, 0x01	; 1
    196e:	70 40       	sbci	r23, 0x00	; 0
    1970:	01 10       	cpse	r0, r1
    1972:	d8 f7       	brcc	.-10     	; 0x196a <strnlen_P+0x2>
    1974:	80 95       	com	r24
    1976:	90 95       	com	r25
    1978:	8e 0f       	add	r24, r30
    197a:	9f 1f       	adc	r25, r31
    197c:	08 95       	ret

0000197e <strnlen>:
    197e:	fc 01       	movw	r30, r24
    1980:	61 50       	subi	r22, 0x01	; 1
    1982:	70 40       	sbci	r23, 0x00	; 0
    1984:	01 90       	ld	r0, Z+
    1986:	01 10       	cpse	r0, r1
    1988:	d8 f7       	brcc	.-10     	; 0x1980 <strnlen+0x2>
    198a:	80 95       	com	r24
    198c:	90 95       	com	r25
    198e:	8e 0f       	add	r24, r30
    1990:	9f 1f       	adc	r25, r31
    1992:	08 95       	ret

00001994 <fputc>:
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	8c 01       	movw	r16, r24
    199e:	eb 01       	movw	r28, r22
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	81 ff       	sbrs	r24, 1
    19a4:	1b c0       	rjmp	.+54     	; 0x19dc <fputc+0x48>
    19a6:	82 ff       	sbrs	r24, 2
    19a8:	0d c0       	rjmp	.+26     	; 0x19c4 <fputc+0x30>
    19aa:	2e 81       	ldd	r18, Y+6	; 0x06
    19ac:	3f 81       	ldd	r19, Y+7	; 0x07
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	9d 81       	ldd	r25, Y+5	; 0x05
    19b2:	28 17       	cp	r18, r24
    19b4:	39 07       	cpc	r19, r25
    19b6:	64 f4       	brge	.+24     	; 0x19d0 <fputc+0x3c>
    19b8:	e8 81       	ld	r30, Y
    19ba:	f9 81       	ldd	r31, Y+1	; 0x01
    19bc:	01 93       	st	Z+, r16
    19be:	f9 83       	std	Y+1, r31	; 0x01
    19c0:	e8 83       	st	Y, r30
    19c2:	06 c0       	rjmp	.+12     	; 0x19d0 <fputc+0x3c>
    19c4:	e8 85       	ldd	r30, Y+8	; 0x08
    19c6:	f9 85       	ldd	r31, Y+9	; 0x09
    19c8:	80 2f       	mov	r24, r16
    19ca:	09 95       	icall
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	31 f4       	brne	.+12     	; 0x19dc <fputc+0x48>
    19d0:	8e 81       	ldd	r24, Y+6	; 0x06
    19d2:	9f 81       	ldd	r25, Y+7	; 0x07
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	9f 83       	std	Y+7, r25	; 0x07
    19d8:	8e 83       	std	Y+6, r24	; 0x06
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <fputc+0x4c>
    19dc:	0f ef       	ldi	r16, 0xFF	; 255
    19de:	1f ef       	ldi	r17, 0xFF	; 255
    19e0:	c8 01       	movw	r24, r16
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	08 95       	ret

000019ec <__ultoa_invert>:
    19ec:	fa 01       	movw	r30, r20
    19ee:	aa 27       	eor	r26, r26
    19f0:	28 30       	cpi	r18, 0x08	; 8
    19f2:	51 f1       	breq	.+84     	; 0x1a48 <__ultoa_invert+0x5c>
    19f4:	20 31       	cpi	r18, 0x10	; 16
    19f6:	81 f1       	breq	.+96     	; 0x1a58 <__ultoa_invert+0x6c>
    19f8:	e8 94       	clt
    19fa:	6f 93       	push	r22
    19fc:	6e 7f       	andi	r22, 0xFE	; 254
    19fe:	6e 5f       	subi	r22, 0xFE	; 254
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	8f 4f       	sbci	r24, 0xFF	; 255
    1a04:	9f 4f       	sbci	r25, 0xFF	; 255
    1a06:	af 4f       	sbci	r26, 0xFF	; 255
    1a08:	b1 e0       	ldi	r27, 0x01	; 1
    1a0a:	3e d0       	rcall	.+124    	; 0x1a88 <__ultoa_invert+0x9c>
    1a0c:	b4 e0       	ldi	r27, 0x04	; 4
    1a0e:	3c d0       	rcall	.+120    	; 0x1a88 <__ultoa_invert+0x9c>
    1a10:	67 0f       	add	r22, r23
    1a12:	78 1f       	adc	r23, r24
    1a14:	89 1f       	adc	r24, r25
    1a16:	9a 1f       	adc	r25, r26
    1a18:	a1 1d       	adc	r26, r1
    1a1a:	68 0f       	add	r22, r24
    1a1c:	79 1f       	adc	r23, r25
    1a1e:	8a 1f       	adc	r24, r26
    1a20:	91 1d       	adc	r25, r1
    1a22:	a1 1d       	adc	r26, r1
    1a24:	6a 0f       	add	r22, r26
    1a26:	71 1d       	adc	r23, r1
    1a28:	81 1d       	adc	r24, r1
    1a2a:	91 1d       	adc	r25, r1
    1a2c:	a1 1d       	adc	r26, r1
    1a2e:	20 d0       	rcall	.+64     	; 0x1a70 <__ultoa_invert+0x84>
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <__ultoa_invert+0x48>
    1a32:	68 94       	set
    1a34:	3f 91       	pop	r19
    1a36:	2a e0       	ldi	r18, 0x0A	; 10
    1a38:	26 9f       	mul	r18, r22
    1a3a:	11 24       	eor	r1, r1
    1a3c:	30 19       	sub	r19, r0
    1a3e:	30 5d       	subi	r19, 0xD0	; 208
    1a40:	31 93       	st	Z+, r19
    1a42:	de f6       	brtc	.-74     	; 0x19fa <__ultoa_invert+0xe>
    1a44:	cf 01       	movw	r24, r30
    1a46:	08 95       	ret
    1a48:	46 2f       	mov	r20, r22
    1a4a:	47 70       	andi	r20, 0x07	; 7
    1a4c:	40 5d       	subi	r20, 0xD0	; 208
    1a4e:	41 93       	st	Z+, r20
    1a50:	b3 e0       	ldi	r27, 0x03	; 3
    1a52:	0f d0       	rcall	.+30     	; 0x1a72 <__ultoa_invert+0x86>
    1a54:	c9 f7       	brne	.-14     	; 0x1a48 <__ultoa_invert+0x5c>
    1a56:	f6 cf       	rjmp	.-20     	; 0x1a44 <__ultoa_invert+0x58>
    1a58:	46 2f       	mov	r20, r22
    1a5a:	4f 70       	andi	r20, 0x0F	; 15
    1a5c:	40 5d       	subi	r20, 0xD0	; 208
    1a5e:	4a 33       	cpi	r20, 0x3A	; 58
    1a60:	18 f0       	brcs	.+6      	; 0x1a68 <__ultoa_invert+0x7c>
    1a62:	49 5d       	subi	r20, 0xD9	; 217
    1a64:	31 fd       	sbrc	r19, 1
    1a66:	40 52       	subi	r20, 0x20	; 32
    1a68:	41 93       	st	Z+, r20
    1a6a:	02 d0       	rcall	.+4      	; 0x1a70 <__ultoa_invert+0x84>
    1a6c:	a9 f7       	brne	.-22     	; 0x1a58 <__ultoa_invert+0x6c>
    1a6e:	ea cf       	rjmp	.-44     	; 0x1a44 <__ultoa_invert+0x58>
    1a70:	b4 e0       	ldi	r27, 0x04	; 4
    1a72:	a6 95       	lsr	r26
    1a74:	97 95       	ror	r25
    1a76:	87 95       	ror	r24
    1a78:	77 95       	ror	r23
    1a7a:	67 95       	ror	r22
    1a7c:	ba 95       	dec	r27
    1a7e:	c9 f7       	brne	.-14     	; 0x1a72 <__ultoa_invert+0x86>
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	61 05       	cpc	r22, r1
    1a84:	71 05       	cpc	r23, r1
    1a86:	08 95       	ret
    1a88:	9b 01       	movw	r18, r22
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	0a 2e       	mov	r0, r26
    1a8e:	06 94       	lsr	r0
    1a90:	57 95       	ror	r21
    1a92:	47 95       	ror	r20
    1a94:	37 95       	ror	r19
    1a96:	27 95       	ror	r18
    1a98:	ba 95       	dec	r27
    1a9a:	c9 f7       	brne	.-14     	; 0x1a8e <__ultoa_invert+0xa2>
    1a9c:	62 0f       	add	r22, r18
    1a9e:	73 1f       	adc	r23, r19
    1aa0:	84 1f       	adc	r24, r20
    1aa2:	95 1f       	adc	r25, r21
    1aa4:	a0 1d       	adc	r26, r0
    1aa6:	08 95       	ret

00001aa8 <_exit>:
    1aa8:	f8 94       	cli

00001aaa <__stop_program>:
    1aaa:	ff cf       	rjmp	.-2      	; 0x1aaa <__stop_program>
