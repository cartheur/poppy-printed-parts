
AndroidAccessoryHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  00001b30  00001bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800188  00800188  00001c4c  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00001c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ddb  00000000  00000000  00003f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000788  00000000  00000000  00004d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001150  00000000  00000000  000054bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cdb4  00000000  00000000  0000660f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cee  00000000  00000000  000133c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009928  00000000  00000000  000160b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c70  00000000  00000000  0001f9dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004dc1  00000000  00000000  0002064c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007196  00000000  00000000  0002540d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001eeb  00000000  00000000  0002c5a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a18  00000000  00000000  0002e48e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c1       	rjmp	.+650    	; 0x28c <__ctors_end>
       2:	00 00       	nop
       4:	61 c1       	rjmp	.+706    	; 0x2c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c1       	rjmp	.+702    	; 0x2c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c1       	rjmp	.+698    	; 0x2c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c1       	rjmp	.+694    	; 0x2c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c1       	rjmp	.+690    	; 0x2c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c1       	rjmp	.+686    	; 0x2c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c1       	rjmp	.+682    	; 0x2c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c1       	rjmp	.+678    	; 0x2c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c1       	rjmp	.+674    	; 0x2c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	b4 c5       	rjmp	.+2920   	; 0xb92 <__vector_10>
      2a:	00 00       	nop
      2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c1       	rjmp	.+662    	; 0x2c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c1       	rjmp	.+658    	; 0x2c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c1       	rjmp	.+654    	; 0x2c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c1       	rjmp	.+650    	; 0x2c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c1       	rjmp	.+646    	; 0x2c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c1       	rjmp	.+642    	; 0x2c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c1       	rjmp	.+638    	; 0x2c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c1       	rjmp	.+634    	; 0x2c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c1       	rjmp	.+630    	; 0x2c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c1       	rjmp	.+626    	; 0x2c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c1       	rjmp	.+622    	; 0x2c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c1       	rjmp	.+618    	; 0x2c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c1       	rjmp	.+610    	; 0x2c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c1       	rjmp	.+606    	; 0x2c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c1       	rjmp	.+602    	; 0x2c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c1       	rjmp	.+598    	; 0x2c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c1       	rjmp	.+594    	; 0x2c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c1       	rjmp	.+590    	; 0x2c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c1       	rjmp	.+586    	; 0x2c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c1       	rjmp	.+582    	; 0x2c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c1       	rjmp	.+578    	; 0x2c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c1       	rjmp	.+574    	; 0x2c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1d c1       	rjmp	.+570    	; 0x2c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1b c1       	rjmp	.+566    	; 0x2c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	19 c1       	rjmp	.+562    	; 0x2c8 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4288>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4281>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4276>:
     11d:	41 6e 64 72 6f 69 64 20 44 65 76 69 63 65 20 45     Android Device E
     12d:	6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00              numerated....

0000013a <__c.4274>:
     13a:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     14a:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     15a:	6f 6e 2e 0d 0a 00                                   on....

00000160 <__c.4272>:
     160:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     170:	4e 6f 74 20 61 20 56 61 6c 69 64 20 41 6e 64 72     Not a Valid Andr
     180:	6f 69 64 20 41 63 63 65 73 73 6f 72 79 20 43 6c     oid Accessory Cl
     190:	61 73 73 20 44 65 76 69 63 65 2e 0d 0a 00           ass Device....

0000019e <__c.4270>:
     19e:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1ae:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1be:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001cb <__c.4266>:
     1cb:	4e 6f 74 20 69 6e 20 41 63 63 65 73 73 6f 72 79     Not in Accessory
     1db:	20 6d 6f 64 65 2c 20 73 77 69 74 63 68 69 6e 67      mode, switching
     1eb:	2e 2e 2e 0d 0a 00                                   ......

000001f1 <__c.4264>:
     1f1:	4e 6f 74 20 61 6e 20 41 6e 64 72 6f 69 64 20 64     Not an Android d
     201:	65 76 69 63 65 2e 0d 0a 00                          evice....

0000020a <__c.4261>:
     20a:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     21a:	20 44 65 76 69 63 65 20 44 65 73 63 72 69 70 74      Device Descript
     22a:	6f 72 2e 0d 0a 00                                   or....

00000230 <__c.4255>:
     230:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     240:	68 65 64 2e 0d 0a 00                                hed....

00000247 <__c.4250>:
     247:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     257:	0d 0a 00                                            ...

0000025a <__c.4237>:
     25a:	1b 5b 33 36 6d 41 6e 64 72 6f 69 64 20 41 63 63     .[36mAndroid Acc
     26a:	65 73 73 6f 72 79 20 48 6f 73 74 20 44 65 6d 6f     essory Host Demo
     27a:	20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d      running....[37m
     28a:	00 00                                               ..

0000028c <__ctors_end>:
     28c:	11 24       	eor	r1, r1
     28e:	1f be       	out	0x3f, r1	; 63
     290:	cf ef       	ldi	r28, 0xFF	; 255
     292:	d0 e2       	ldi	r29, 0x20	; 32
     294:	de bf       	out	0x3e, r29	; 62
     296:	cd bf       	out	0x3d, r28	; 61

00000298 <__do_copy_data>:
     298:	11 e0       	ldi	r17, 0x01	; 1
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	e0 e3       	ldi	r30, 0x30	; 48
     2a0:	fb e1       	ldi	r31, 0x1B	; 27
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0b bf       	out	0x3b, r16	; 59
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x14>
     2a8:	07 90       	elpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	a8 38       	cpi	r26, 0x88	; 136
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0x10>

000002b2 <__do_clear_bss>:
     2b2:	11 e0       	ldi	r17, 0x01	; 1
     2b4:	a8 e8       	ldi	r26, 0x88	; 136
     2b6:	b1 e0       	ldi	r27, 0x01	; 1
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	aa 3a       	cpi	r26, 0xAA	; 170
     2be:	b1 07       	cpc	r27, r17
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	4d d0       	rcall	.+154    	; 0x35e <main>
     2c4:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <_exit>

000002c8 <__bad_interrupt>:
     2c8:	9b ce       	rjmp	.-714    	; 0x0 <__vectors>

000002ca <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2ca:	9b b1       	in	r25, 0x0b	; 11
     2cc:	9f 70       	andi	r25, 0x0F	; 15
     2ce:	98 2b       	or	r25, r24
     2d0:	9b b9       	out	0x0b, r25	; 11
			}
     2d2:	08 95       	ret

000002d4 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2d4:	84 b7       	in	r24, 0x34	; 52
     2d6:	87 7f       	andi	r24, 0xF7	; 247
     2d8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2da:	28 e1       	ldi	r18, 0x18	; 24
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	20 93 60 00 	sts	0x0060, r18
     2e4:	10 92 60 00 	sts	0x0060, r1
     2e8:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	80 e8       	ldi	r24, 0x80	; 128
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	80 93 61 00 	sts	0x0061, r24
     2f6:	90 93 61 00 	sts	0x0061, r25
     2fa:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2fc:	83 e3       	ldi	r24, 0x33	; 51
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	90 93 cd 00 	sts	0x00CD, r25
     304:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     308:	86 e0       	ldi	r24, 0x06	; 6
     30a:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     30e:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     312:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     316:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     318:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     31a:	8a b1       	in	r24, 0x0a	; 10
     31c:	80 6f       	ori	r24, 0xF0	; 240
     31e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     320:	8b b1       	in	r24, 0x0b	; 11
     322:	8f 70       	andi	r24, 0x0F	; 15
     324:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     326:	1a d4       	rcall	.+2100   	; 0xb5c <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <Serial_CreateStream>

00000330 <AOAHost_Task>:
/** Task to manage an enumerated USB Android Accessory device once connected, to print received data
 *  from the device to the serial port.
 */
void AOAHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     330:	80 91 95 01 	lds	r24, 0x0195
     334:	8b 30       	cpi	r24, 0x0B	; 11
     336:	91 f4       	brne	.+36     	; 0x35c <AOAHost_Task+0x2c>
	  return;

	if (AOA_Host_BytesReceived(&AndroidDevice_AOA_Interface))
     338:	8b e4       	ldi	r24, 0x4B	; 75
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	0e 94 b9 09 	call	0x1372	; 0x1372 <AOA_Host_BytesReceived>
     340:	00 97       	sbiw	r24, 0x00	; 0
     342:	61 f0       	breq	.+24     	; 0x35c <AOAHost_Task+0x2c>
	{
		/* Echo received bytes from the attached device through the USART */
		int16_t ReceivedByte = AOA_Host_ReceiveByte(&AndroidDevice_AOA_Interface);
     344:	8b e4       	ldi	r24, 0x4B	; 75
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	0e 94 ed 09 	call	0x13da	; 0x13da <AOA_Host_ReceiveByte>
		if (!(ReceivedByte < 0))
     34c:	97 fd       	sbrc	r25, 7
     34e:	06 c0       	rjmp	.+12     	; 0x35c <AOAHost_Task+0x2c>
		  putchar(ReceivedByte);
     350:	60 91 a6 01 	lds	r22, 0x01A6
     354:	70 91 a7 01 	lds	r23, 0x01A7
     358:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <fputc>
     35c:	08 95       	ret

0000035e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     35e:	ba df       	rcall	.-140    	; 0x2d4 <SetupHardware>
	
	puts_P(PSTR(ESC_FG_CYAN "Android Accessory Host Demo running.\r\n" ESC_FG_WHITE));
     360:	8a e5       	ldi	r24, 0x5A	; 90
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     368:	80 e1       	ldi	r24, 0x10	; 16
     36a:	af df       	rcall	.-162    	; 0x2ca <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     36c:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		AOAHost_Task();
     36e:	e0 df       	rcall	.-64     	; 0x330 <AOAHost_Task>

		AOA_Host_USBTask(&AndroidDevice_AOA_Interface);
     370:	8b e4       	ldi	r24, 0x4B	; 75
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <AOA_Host_USBTask>
		USB_USBTask();
     378:	a2 d6       	rcall	.+3396   	; 0x10be <USB_USBTask>
     37a:	f9 cf       	rjmp	.-14     	; 0x36e <main+0x10>

0000037c <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     37c:	87 e4       	ldi	r24, 0x47	; 71
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     384:	80 ea       	ldi	r24, 0xA0	; 160
}
     386:	a1 cf       	rjmp	.-190    	; 0x2ca <LEDs_SetAllLEDs>

00000388 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     388:	80 e3       	ldi	r24, 0x30	; 48
     38a:	92 e0       	ldi	r25, 0x02	; 2
     38c:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     390:	80 e1       	ldi	r24, 0x10	; 16
}
     392:	9b cf       	rjmp	.-202    	; 0x2ca <LEDs_SetAllLEDs>

00000394 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	df 93       	push	r29
     39a:	cf 93       	push	r28
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	c5 51       	subi	r28, 0x15	; 21
     3a2:	d2 40       	sbci	r29, 0x02	; 2
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3ae:	80 ea       	ldi	r24, 0xA0	; 160
     3b0:	8c df       	rcall	.-232    	; 0x2ca <LEDs_SetAllLEDs>

	USB_Descriptor_Device_t DeviceDescriptor;

	if (USB_Host_GetDeviceDescriptor(&DeviceDescriptor) != HOST_SENDCONTROL_Successful)
     3b2:	8e 01       	movw	r16, r28
     3b4:	0c 5f       	subi	r16, 0xFC	; 252
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  \return A value from the \ref USB_Host_SendControlErrorCodes_t enum to indicate the result.
			 */
			static inline uint8_t USB_Host_GetDeviceDescriptor(USB_Descriptor_Device_t* const DeviceDescriptorPtr) ATTR_NON_NULL_PTR_ARG(1);
			static inline uint8_t USB_Host_GetDeviceDescriptor(USB_Descriptor_Device_t* const DeviceDescriptorPtr)
			{
				return USB_Host_GetDescriptor(DTYPE_Device, 0, DeviceDescriptorPtr, sizeof(USB_Descriptor_Device_t));
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	a8 01       	movw	r20, r16
     3be:	22 e1       	ldi	r18, 0x12	; 18
     3c0:	63 d6       	rcall	.+3270   	; 0x1088 <USB_Host_GetDescriptor>
     3c2:	88 23       	and	r24, r24
     3c4:	19 f0       	breq	.+6      	; 0x3cc <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
	{
		puts_P(PSTR("Error Retrieving Device Descriptor.\r\n"));
     3c6:	8a e0       	ldi	r24, 0x0A	; 10
     3c8:	92 e0       	ldi	r25, 0x02	; 2
     3ca:	38 c0       	rjmp	.+112    	; 0x43c <EVENT_USB_Host_DeviceEnumerationComplete+0xa8>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;	
	}

	bool NeedModeSwitch;
	if (!(AOA_Host_ValidateAccessoryDevice(&AndroidDevice_AOA_Interface, &DeviceDescriptor, &NeedModeSwitch)))
     3cc:	8b e4       	ldi	r24, 0x4B	; 75
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	b8 01       	movw	r22, r16
     3d2:	ae 01       	movw	r20, r28
     3d4:	4f 5f       	subi	r20, 0xFF	; 255
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	a5 d6       	rcall	.+3402   	; 0x1124 <AOA_Host_ValidateAccessoryDevice>
     3da:	88 23       	and	r24, r24
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
	{
		puts_P(PSTR("Not an Android device.\r\n"));
     3de:	81 ef       	ldi	r24, 0xF1	; 241
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	2c c0       	rjmp	.+88     	; 0x43c <EVENT_USB_Host_DeviceEnumerationComplete+0xa8>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}
	
	if (NeedModeSwitch)
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	88 23       	and	r24, r24
     3e8:	41 f0       	breq	.+16     	; 0x3fa <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
	{
		puts_P(PSTR("Not in Accessory mode, switching...\r\n"));
     3ea:	8b ec       	ldi	r24, 0xCB	; 203
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <puts_P>
		AOA_Host_StartAccessoryMode(&AndroidDevice_AOA_Interface);
     3f2:	8b e4       	ldi	r24, 0x4B	; 75
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	4c d7       	rcall	.+3736   	; 0x1290 <AOA_Host_StartAccessoryMode>
		return;
     3f8:	2b c0       	rjmp	.+86     	; 0x450 <EVENT_USB_Host_DeviceEnumerationComplete+0xbc>
	}

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3fa:	8e 01       	movw	r16, r28
     3fc:	0a 5e       	subi	r16, 0xEA	; 234
     3fe:	1f 4f       	sbci	r17, 0xFF	; 255
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	be 01       	movw	r22, r28
     404:	6e 5f       	subi	r22, 0xFE	; 254
     406:	7f 4f       	sbci	r23, 0xFF	; 255
     408:	a8 01       	movw	r20, r16
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	32 e0       	ldi	r19, 0x02	; 2
     40e:	54 d4       	rcall	.+2216   	; 0xcb8 <USB_Host_GetDeviceConfigDescriptor>
     410:	88 23       	and	r24, r24
     412:	19 f0       	breq	.+6      	; 0x41a <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     414:	8e e9       	ldi	r24, 0x9E	; 158
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	11 c0       	rjmp	.+34     	; 0x43c <EVENT_USB_Host_DeviceEnumerationComplete+0xa8>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (AOA_Host_ConfigurePipes(&AndroidDevice_AOA_Interface,
     41a:	6a 81       	ldd	r22, Y+2	; 0x02
     41c:	7b 81       	ldd	r23, Y+3	; 0x03
     41e:	8b e4       	ldi	r24, 0x4B	; 75
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	a8 01       	movw	r20, r16
     424:	92 d6       	rcall	.+3364   	; 0x114a <AOA_Host_ConfigurePipes>
     426:	88 23       	and	r24, r24
     428:	19 f0       	breq	.+6      	; 0x430 <EVENT_USB_Host_DeviceEnumerationComplete+0x9c>
	                            ConfigDescriptorSize, ConfigDescriptorData) != AOA_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Android Accessory Class Device.\r\n"));
     42a:	80 e6       	ldi	r24, 0x60	; 96
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	06 c0       	rjmp	.+12     	; 0x43c <EVENT_USB_Host_DeviceEnumerationComplete+0xa8>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	05 d6       	rcall	.+3082   	; 0x103e <USB_Host_SetDeviceConfiguration>
     434:	88 23       	and	r24, r24
     436:	31 f0       	breq	.+12     	; 0x444 <EVENT_USB_Host_DeviceEnumerationComplete+0xb0>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     438:	8a e3       	ldi	r24, 0x3A	; 58
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     440:	80 e9       	ldi	r24, 0x90	; 144
     442:	05 c0       	rjmp	.+10     	; 0x44e <EVENT_USB_Host_DeviceEnumerationComplete+0xba>
		return;
	}

	puts_P(PSTR("Android Device Enumerated.\r\n"));
     444:	8d e1       	ldi	r24, 0x1D	; 29
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     44c:	80 e6       	ldi	r24, 0x60	; 96
     44e:	3d df       	rcall	.-390    	; 0x2ca <LEDs_SetAllLEDs>
}
     450:	cb 5e       	subi	r28, 0xEB	; 235
     452:	dd 4f       	sbci	r29, 0xFD	; 253
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	cf 91       	pop	r28
     460:	df 91       	pop	r29
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	08 95       	ret

00000468 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     468:	df 93       	push	r29
     46a:	cf 93       	push	r28
     46c:	0f 92       	push	r0
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     472:	89 83       	std	Y+1, r24	; 0x01
     474:	0b d3       	rcall	.+1558   	; 0xa8c <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     476:	00 d0       	rcall	.+0      	; 0x478 <EVENT_USB_Host_HostError+0x10>
     478:	00 d0       	rcall	.+0      	; 0x47a <EVENT_USB_Host_HostError+0x12>
     47a:	ed b7       	in	r30, 0x3d	; 61
     47c:	fe b7       	in	r31, 0x3e	; 62
     47e:	31 96       	adiw	r30, 0x01	; 1
     480:	2e ee       	ldi	r18, 0xEE	; 238
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	ad b7       	in	r26, 0x3d	; 61
     486:	be b7       	in	r27, 0x3e	; 62
     488:	12 96       	adiw	r26, 0x02	; 2
     48a:	3c 93       	st	X, r19
     48c:	2e 93       	st	-X, r18
     48e:	11 97       	sbiw	r26, 0x01	; 1
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	82 83       	std	Z+2, r24	; 0x02
     494:	13 82       	std	Z+3, r1	; 0x03
     496:	0e 94 c8 0a 	call	0x1590	; 0x1590 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	80 e9       	ldi	r24, 0x90	; 144
     4a4:	12 df       	rcall	.-476    	; 0x2ca <LEDs_SetAllLEDs>
     4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <EVENT_USB_Host_HostError+0x3e>

000004a8 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4a8:	90 91 95 01 	lds	r25, 0x0195
     4ac:	2d b7       	in	r18, 0x3d	; 61
     4ae:	3e b7       	in	r19, 0x3e	; 62
     4b0:	28 50       	subi	r18, 0x08	; 8
     4b2:	30 40       	sbci	r19, 0x00	; 0
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	3e bf       	out	0x3e, r19	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	2d bf       	out	0x3d, r18	; 61
     4be:	ed b7       	in	r30, 0x3d	; 61
     4c0:	fe b7       	in	r31, 0x3e	; 62
     4c2:	31 96       	adiw	r30, 0x01	; 1
     4c4:	28 e9       	ldi	r18, 0x98	; 152
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	ad b7       	in	r26, 0x3d	; 61
     4ca:	be b7       	in	r27, 0x3e	; 62
     4cc:	12 96       	adiw	r26, 0x02	; 2
     4ce:	3c 93       	st	X, r19
     4d0:	2e 93       	st	-X, r18
     4d2:	11 97       	sbiw	r26, 0x01	; 1
     4d4:	82 83       	std	Z+2, r24	; 0x02
     4d6:	13 82       	std	Z+3, r1	; 0x03
     4d8:	64 83       	std	Z+4, r22	; 0x04
     4da:	15 82       	std	Z+5, r1	; 0x05
     4dc:	96 83       	std	Z+6, r25	; 0x06
     4de:	17 82       	std	Z+7, r1	; 0x07
     4e0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4e4:	2d b7       	in	r18, 0x3d	; 61
     4e6:	3e b7       	in	r19, 0x3e	; 62
     4e8:	28 5f       	subi	r18, 0xF8	; 248
     4ea:	3f 4f       	sbci	r19, 0xFF	; 255
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	3e bf       	out	0x3e, r19	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	2d bf       	out	0x3d, r18	; 61
     4f6:	80 e9       	ldi	r24, 0x90	; 144
}
     4f8:	e8 ce       	rjmp	.-560    	; 0x2ca <LEDs_SetAllLEDs>

000004fa <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     4fa:	80 91 9e 00 	lds	r24, 0x009E
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	81 70       	andi	r24, 0x01	; 1
     502:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     504:	20 91 a0 00 	lds	r18, 0x00A0
     508:	2d 7f       	andi	r18, 0xFD	; 253
     50a:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     50e:	20 91 9e 00 	lds	r18, 0x009E
     512:	22 60       	ori	r18, 0x02	; 2
     514:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     518:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     51c:	21 fd       	sbrc	r18, 1
     51e:	fc cf       	rjmp	.-8      	; 0x518 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     520:	20 91 9e 00 	lds	r18, 0x009E
     524:	21 60       	ori	r18, 0x01	; 1
     526:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     52a:	10 92 8b 01 	sts	0x018B, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     52e:	20 91 a0 00 	lds	r18, 0x00A0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	20 72       	andi	r18, 0x20	; 32
     536:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     538:	40 91 a0 00 	lds	r20, 0x00A0
     53c:	4f 7d       	andi	r20, 0xDF	; 223
     53e:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     542:	40 91 9f 00 	lds	r20, 0x009F
     546:	4f 7d       	andi	r20, 0xDF	; 223
     548:	40 93 9f 00 	sts	0x009F, r20
     54c:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     54e:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     552:	55 ff       	sbrs	r21, 5
     554:	0b c0       	rjmp	.+22     	; 0x56c <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     556:	40 91 9f 00 	lds	r20, 0x009F
     55a:	4f 7d       	andi	r20, 0xDF	; 223
     55c:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     560:	40 91 9f 00 	lds	r20, 0x009F
     564:	4d 7f       	andi	r20, 0xFD	; 253
     566:	40 93 9f 00 	sts	0x009F, r20
     56a:	08 c0       	rjmp	.+16     	; 0x57c <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56c:	ef ec       	ldi	r30, 0xCF	; 207
     56e:	f7 e0       	ldi	r31, 0x07	; 7
     570:	31 97       	sbiw	r30, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <USB_Host_ResetDevice+0x76>
     574:	00 c0       	rjmp	.+0      	; 0x576 <USB_Host_ResetDevice+0x7c>
     576:	00 00       	nop
     578:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     57a:	49 f7       	brne	.-46     	; 0x54e <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     57c:	21 15       	cp	r18, r1
     57e:	31 05       	cpc	r19, r1
     580:	29 f0       	breq	.+10     	; 0x58c <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     582:	20 91 a0 00 	lds	r18, 0x00A0
     586:	20 62       	ori	r18, 0x20	; 32
     588:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     58c:	00 97       	sbiw	r24, 0x00	; 0
     58e:	29 f4       	brne	.+10     	; 0x59a <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     590:	80 91 9e 00 	lds	r24, 0x009E
     594:	8e 7f       	andi	r24, 0xFE	; 254
     596:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     59a:	80 91 a0 00 	lds	r24, 0x00A0
     59e:	82 60       	ori	r24, 0x02	; 2
     5a0:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     5a4:	08 95       	ret

000005a6 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5a6:	40 91 9e 00 	lds	r20, 0x009E
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	41 70       	andi	r20, 0x01	; 1
     5ae:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5b0:	20 91 a0 00 	lds	r18, 0x00A0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	20 72       	andi	r18, 0x20	; 32
     5b8:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5ba:	90 91 a0 00 	lds	r25, 0x00A0
     5be:	9f 7d       	andi	r25, 0xDF	; 223
     5c0:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5c4:	90 91 9f 00 	lds	r25, 0x009F
     5c8:	9f 7d       	andi	r25, 0xDF	; 223
     5ca:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5ce:	90 91 9e 00 	lds	r25, 0x009E
     5d2:	91 60       	ori	r25, 0x01	; 1
     5d4:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     5d8:	26 c0       	rjmp	.+76     	; 0x626 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     5da:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     5de:	95 ff       	sbrs	r25, 5
     5e0:	06 c0       	rjmp	.+12     	; 0x5ee <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5e2:	90 91 9f 00 	lds	r25, 0x009F
     5e6:	9f 7d       	andi	r25, 0xDF	; 223
     5e8:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     5ec:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     5ee:	90 91 95 01 	lds	r25, 0x0195
     5f2:	91 30       	cpi	r25, 0x01	; 1
     5f4:	d9 f0       	breq	.+54     	; 0x62c <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     5f6:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     5fa:	94 ff       	sbrs	r25, 4
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     5fe:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     602:	80 91 a6 00 	lds	r24, 0x00A6
     606:	8f 7e       	andi	r24, 0xEF	; 239
     608:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     60c:	82 e0       	ldi	r24, 0x02	; 2

			break;
     60e:	0f c0       	rjmp	.+30     	; 0x62e <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     610:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     614:	91 ff       	sbrs	r25, 1
     616:	07 c0       	rjmp	.+14     	; 0x626 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     618:	80 91 a6 00 	lds	r24, 0x00A6
     61c:	8d 7f       	andi	r24, 0xFD	; 253
     61e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     622:	83 e0       	ldi	r24, 0x03	; 3

			break;
     624:	04 c0       	rjmp	.+8      	; 0x62e <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     626:	88 23       	and	r24, r24
     628:	c1 f6       	brne	.-80     	; 0x5da <USB_Host_WaitMS+0x34>
     62a:	01 c0       	rjmp	.+2      	; 0x62e <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     62c:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     62e:	41 15       	cp	r20, r1
     630:	51 05       	cpc	r21, r1
     632:	29 f4       	brne	.+10     	; 0x63e <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     634:	90 91 9e 00 	lds	r25, 0x009E
     638:	9e 7f       	andi	r25, 0xFE	; 254
     63a:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     63e:	21 15       	cp	r18, r1
     640:	31 05       	cpc	r19, r1
     642:	29 f0       	breq	.+10     	; 0x64e <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     644:	90 91 a0 00 	lds	r25, 0x00A0
     648:	90 62       	ori	r25, 0x20	; 32
     64a:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     64e:	08 95       	ret

00000650 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	df 93       	push	r29
     656:	cf 93       	push	r28
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	28 97       	sbiw	r28, 0x08	; 8
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     668:	80 91 95 01 	lds	r24, 0x0195
     66c:	85 30       	cpi	r24, 0x05	; 5
     66e:	09 f4       	brne	.+2      	; 0x672 <USB_Host_ProcessNextHostState+0x22>
     670:	97 c0       	rjmp	.+302    	; 0x7a0 <USB_Host_ProcessNextHostState+0x150>
     672:	86 30       	cpi	r24, 0x06	; 6
     674:	68 f4       	brcc	.+26     	; 0x690 <USB_Host_ProcessNextHostState+0x40>
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	c1 f1       	breq	.+112    	; 0x6ea <USB_Host_ProcessNextHostState+0x9a>
     67a:	83 30       	cpi	r24, 0x03	; 3
     67c:	18 f4       	brcc	.+6      	; 0x684 <USB_Host_ProcessNextHostState+0x34>
     67e:	88 23       	and	r24, r24
     680:	a1 f0       	breq	.+40     	; 0x6aa <USB_Host_ProcessNextHostState+0x5a>
     682:	02 c1       	rjmp	.+516    	; 0x888 <USB_Host_ProcessNextHostState+0x238>
     684:	83 30       	cpi	r24, 0x03	; 3
     686:	c9 f1       	breq	.+114    	; 0x6fa <USB_Host_ProcessNextHostState+0xaa>
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	09 f0       	breq	.+2      	; 0x68e <USB_Host_ProcessNextHostState+0x3e>
     68c:	fd c0       	rjmp	.+506    	; 0x888 <USB_Host_ProcessNextHostState+0x238>
     68e:	60 c0       	rjmp	.+192    	; 0x750 <USB_Host_ProcessNextHostState+0x100>
     690:	87 30       	cpi	r24, 0x07	; 7
     692:	09 f4       	brne	.+2      	; 0x696 <USB_Host_ProcessNextHostState+0x46>
     694:	9c c0       	rjmp	.+312    	; 0x7ce <USB_Host_ProcessNextHostState+0x17e>
     696:	87 30       	cpi	r24, 0x07	; 7
     698:	08 f4       	brcc	.+2      	; 0x69c <USB_Host_ProcessNextHostState+0x4c>
     69a:	8d c0       	rjmp	.+282    	; 0x7b6 <USB_Host_ProcessNextHostState+0x166>
     69c:	88 30       	cpi	r24, 0x08	; 8
     69e:	09 f4       	brne	.+2      	; 0x6a2 <USB_Host_ProcessNextHostState+0x52>
     6a0:	b6 c0       	rjmp	.+364    	; 0x80e <USB_Host_ProcessNextHostState+0x1be>
     6a2:	89 30       	cpi	r24, 0x09	; 9
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <USB_Host_ProcessNextHostState+0x58>
     6a6:	f0 c0       	rjmp	.+480    	; 0x888 <USB_Host_ProcessNextHostState+0x238>
     6a8:	d7 c0       	rjmp	.+430    	; 0x858 <USB_Host_ProcessNextHostState+0x208>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     6aa:	00 91 89 01 	lds	r16, 0x0189
     6ae:	10 91 8a 01 	lds	r17, 0x018A
     6b2:	01 15       	cp	r16, r1
     6b4:	11 05       	cpc	r17, r1
     6b6:	09 f4       	brne	.+2      	; 0x6ba <USB_Host_ProcessNextHostState+0x6a>
     6b8:	e7 c0       	rjmp	.+462    	; 0x888 <USB_Host_ProcessNextHostState+0x238>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	74 df       	rcall	.-280    	; 0x5a6 <USB_Host_WaitMS>
     6be:	68 2f       	mov	r22, r24
     6c0:	88 23       	and	r24, r24
     6c2:	31 f0       	breq	.+12     	; 0x6d0 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     6c4:	80 91 88 01 	lds	r24, 0x0188
     6c8:	80 93 95 01 	sts	0x0195, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
					break;
     6ce:	d0 c0       	rjmp	.+416    	; 0x870 <USB_Host_ProcessNextHostState+0x220>
				}

				if (!(--WaitMSRemaining))
     6d0:	01 50       	subi	r16, 0x01	; 1
     6d2:	10 40       	sbci	r17, 0x00	; 0
     6d4:	10 93 8a 01 	sts	0x018A, r17
     6d8:	00 93 89 01 	sts	0x0189, r16
     6dc:	01 15       	cp	r16, r1
     6de:	11 05       	cpc	r17, r1
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <USB_Host_ProcessNextHostState+0x94>
     6e2:	d2 c0       	rjmp	.+420    	; 0x888 <USB_Host_ProcessNextHostState+0x238>
				  USB_HostState = PostWaitState;
     6e4:	80 91 88 01 	lds	r24, 0x0188
     6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <USB_Host_ProcessNextHostState+0xa4>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     6ea:	10 92 8a 01 	sts	0x018A, r1
     6ee:	10 92 89 01 	sts	0x0189, r1

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	80 93 95 01 	sts	0x0195, r24
			break;
     6f8:	c7 c0       	rjmp	.+398    	; 0x888 <USB_Host_ProcessNextHostState+0x238>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     6fa:	80 91 89 01 	lds	r24, 0x0189
     6fe:	90 91 8a 01 	lds	r25, 0x018A
     702:	9c 01       	movw	r18, r24
     704:	21 50       	subi	r18, 0x01	; 1
     706:	30 40       	sbci	r19, 0x00	; 0
     708:	30 93 8a 01 	sts	0x018A, r19
     70c:	20 93 89 01 	sts	0x0189, r18
     710:	00 97       	sbiw	r24, 0x00	; 0
     712:	39 f0       	breq	.+14     	; 0x722 <USB_Host_ProcessNextHostState+0xd2>
     714:	8f ec       	ldi	r24, 0xCF	; 207
     716:	97 e0       	ldi	r25, 0x07	; 7
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <USB_Host_ProcessNextHostState+0xc8>
     71c:	00 c0       	rjmp	.+0      	; 0x71e <USB_Host_ProcessNextHostState+0xce>
     71e:	00 00       	nop
     720:	b3 c0       	rjmp	.+358    	; 0x888 <USB_Host_ProcessNextHostState+0x238>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     722:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     724:	80 91 d8 00 	lds	r24, 0x00D8
     728:	80 61       	ori	r24, 0x10	; 16
     72a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     72e:	80 91 dd 00 	lds	r24, 0x00DD
     732:	8b 7f       	andi	r24, 0xFB	; 251
     734:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     738:	80 91 d7 00 	lds	r24, 0x00D7
     73c:	80 61       	ori	r24, 0x10	; 16
     73e:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     742:	80 91 dd 00 	lds	r24, 0x00DD
     746:	82 60       	ori	r24, 0x02	; 2
     748:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	d2 cf       	rjmp	.-92     	; 0x6f4 <USB_Host_ProcessNextHostState+0xa4>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     750:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     754:	80 ff       	sbrs	r24, 0
     756:	98 c0       	rjmp	.+304    	; 0x888 <USB_Host_ProcessNextHostState+0x238>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     758:	80 91 9f 00 	lds	r24, 0x009F
     75c:	8e 7f       	andi	r24, 0xFE	; 254
     75e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     762:	80 91 9f 00 	lds	r24, 0x009F
     766:	8d 7f       	andi	r24, 0xFD	; 253
     768:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     76c:	80 91 df 00 	lds	r24, 0x00DF
     770:	8d 7f       	andi	r24, 0xFD	; 253
     772:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     776:	80 91 de 00 	lds	r24, 0x00DE
     77a:	82 60       	ori	r24, 0x02	; 2
     77c:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     780:	80 91 9e 00 	lds	r24, 0x009E
     784:	81 60       	ori	r24, 0x01	; 1
     786:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     78a:	17 d1       	rcall	.+558    	; 0x9ba <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     78c:	10 92 95 01 	sts	0x0195, r1
     790:	84 e6       	ldi	r24, 0x64	; 100
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	90 93 8a 01 	sts	0x018A, r25
     798:	80 93 89 01 	sts	0x0189, r24
     79c:	85 e0       	ldi	r24, 0x05	; 5
     79e:	59 c0       	rjmp	.+178    	; 0x852 <USB_Host_ProcessNextHostState+0x202>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7a0:	ac de       	rcall	.-680    	; 0x4fa <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7a2:	10 92 95 01 	sts	0x0195, r1
     7a6:	88 ec       	ldi	r24, 0xC8	; 200
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	90 93 8a 01 	sts	0x018A, r25
     7ae:	80 93 89 01 	sts	0x0189, r24
     7b2:	86 e0       	ldi	r24, 0x06	; 6
     7b4:	4e c0       	rjmp	.+156    	; 0x852 <USB_Host_ProcessNextHostState+0x202>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	20 e4       	ldi	r18, 0x40	; 64
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	01 e0       	ldi	r16, 0x01	; 1
     7c2:	6d d0       	rcall	.+218    	; 0x89e <Pipe_ConfigurePipe>
     7c4:	88 23       	and	r24, r24
     7c6:	09 f4       	brne	.+2      	; 0x7ca <USB_Host_ProcessNextHostState+0x17a>
     7c8:	4f c0       	rjmp	.+158    	; 0x868 <USB_Host_ProcessNextHostState+0x218>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     7ca:	87 e0       	ldi	r24, 0x07	; 7
     7cc:	93 cf       	rjmp	.-218    	; 0x6f4 <USB_Host_ProcessNextHostState+0xa4>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     7ce:	ad e8       	ldi	r26, 0x8D	; 141
     7d0:	b1 e0       	ldi	r27, 0x01	; 1
     7d2:	ed e6       	ldi	r30, 0x6D	; 109
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	88 e0       	ldi	r24, 0x08	; 8
     7d8:	01 90       	ld	r0, Z+
     7da:	0d 92       	st	X+, r0
     7dc:	81 50       	subi	r24, 0x01	; 1
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <USB_Host_ProcessNextHostState+0x188>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     7e0:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     7e4:	ce 01       	movw	r24, r28
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	2b d3       	rcall	.+1622   	; 0xe40 <USB_Host_SendControlRequest>
     7ea:	68 2f       	mov	r22, r24
     7ec:	88 23       	and	r24, r24
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <USB_Host_ProcessNextHostState+0x1a2>
     7f0:	3e c0       	rjmp	.+124    	; 0x86e <USB_Host_ProcessNextHostState+0x21e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     7f2:	88 85       	ldd	r24, Y+8	; 0x08
     7f4:	80 93 75 01 	sts	0x0175, r24

			USB_Host_ResetDevice();
     7f8:	80 de       	rcall	.-768    	; 0x4fa <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     7fa:	10 92 95 01 	sts	0x0195, r1
     7fe:	88 ec       	ldi	r24, 0xC8	; 200
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	90 93 8a 01 	sts	0x018A, r25
     806:	80 93 89 01 	sts	0x0189, r24
     80a:	88 e0       	ldi	r24, 0x08	; 8
     80c:	22 c0       	rjmp	.+68     	; 0x852 <USB_Host_ProcessNextHostState+0x202>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     80e:	20 91 75 01 	lds	r18, 0x0175
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	01 e0       	ldi	r16, 0x01	; 1
     81c:	40 d0       	rcall	.+128    	; 0x89e <Pipe_ConfigurePipe>
     81e:	88 23       	and	r24, r24
     820:	19 f1       	breq	.+70     	; 0x868 <USB_Host_ProcessNextHostState+0x218>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     822:	ad e8       	ldi	r26, 0x8D	; 141
     824:	b1 e0       	ldi	r27, 0x01	; 1
     826:	e5 e6       	ldi	r30, 0x65	; 101
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	88 e0       	ldi	r24, 0x08	; 8
     82c:	01 90       	ld	r0, Z+
     82e:	0d 92       	st	X+, r0
     830:	81 50       	subi	r24, 0x01	; 1
     832:	e1 f7       	brne	.-8      	; 0x82c <USB_Host_ProcessNextHostState+0x1dc>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	03 d3       	rcall	.+1542   	; 0xe40 <USB_Host_SendControlRequest>
     83a:	68 2f       	mov	r22, r24
     83c:	88 23       	and	r24, r24
     83e:	b9 f4       	brne	.+46     	; 0x86e <USB_Host_ProcessNextHostState+0x21e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     840:	10 92 95 01 	sts	0x0195, r1
     844:	84 e6       	ldi	r24, 0x64	; 100
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	90 93 8a 01 	sts	0x018A, r25
     84c:	80 93 89 01 	sts	0x0189, r24
     850:	89 e0       	ldi	r24, 0x09	; 9
     852:	80 93 88 01 	sts	0x0188, r24
			break;
     856:	18 c0       	rjmp	.+48     	; 0x888 <USB_Host_ProcessNextHostState+0x238>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     85e:	8a e0       	ldi	r24, 0x0A	; 10
     860:	80 93 95 01 	sts	0x0195, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     864:	97 dd       	rcall	.-1234   	; 0x394 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     866:	10 c0       	rjmp	.+32     	; 0x888 <USB_Host_ProcessNextHostState+0x238>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     868:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     86a:	84 e0       	ldi	r24, 0x04	; 4
     86c:	01 c0       	rjmp	.+2      	; 0x870 <USB_Host_ProcessNextHostState+0x220>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     86e:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     870:	90 91 95 01 	lds	r25, 0x0195
     874:	91 30       	cpi	r25, 0x01	; 1
     876:	41 f0       	breq	.+16     	; 0x888 <USB_Host_ProcessNextHostState+0x238>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     878:	17 de       	rcall	.-978    	; 0x4a8 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     87a:	80 91 dd 00 	lds	r24, 0x00DD
     87e:	81 60       	ori	r24, 0x01	; 1
     880:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     884:	81 dd       	rcall	.-1278   	; 0x388 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     886:	1a d1       	rcall	.+564    	; 0xabc <USB_ResetInterface>
	}
}
     888:	28 96       	adiw	r28, 0x08	; 8
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	de bf       	out	0x3e, r29	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	cd bf       	out	0x3d, r28	; 61
     894:	cf 91       	pop	r28
     896:	df 91       	pop	r29
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	08 95       	ret

0000089e <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     89e:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     8a0:	58 2f       	mov	r21, r24
     8a2:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     8a4:	87 ff       	sbrs	r24, 7
     8a6:	02 c0       	rjmp	.+4      	; 0x8ac <Pipe_ConfigurePipe+0xe>
     8a8:	80 e1       	ldi	r24, 0x10	; 16
     8aa:	01 c0       	rjmp	.+2      	; 0x8ae <Pipe_ConfigurePipe+0x10>
     8ac:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     8ae:	57 30       	cpi	r21, 0x07	; 7
     8b0:	08 f0       	brcs	.+2      	; 0x8b4 <Pipe_ConfigurePipe+0x16>
     8b2:	59 c0       	rjmp	.+178    	; 0x966 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     8b4:	66 23       	and	r22, r22
     8b6:	09 f4       	brne	.+2      	; 0x8ba <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     8b8:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     8ba:	4f 70       	andi	r20, 0x0F	; 15
     8bc:	62 95       	swap	r22
     8be:	66 0f       	add	r22, r22
     8c0:	66 0f       	add	r22, r22
     8c2:	60 7c       	andi	r22, 0xC0	; 192
     8c4:	64 2b       	or	r22, r20
     8c6:	68 2b       	or	r22, r24
     8c8:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     8ca:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8cc:	84 2f       	mov	r24, r20
     8ce:	8f 70       	andi	r24, 0x0F	; 15
     8d0:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     8d4:	45 17       	cp	r20, r21
     8d6:	a1 f4       	brne	.+40     	; 0x900 <Pipe_ConfigurePipe+0x62>
     8d8:	88 e0       	ldi	r24, 0x08	; 8
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	03 c0       	rjmp	.+6      	; 0x8e6 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     8e0:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     8e6:	82 17       	cp	r24, r18
     8e8:	93 07       	cpc	r25, r19
     8ea:	10 f4       	brcc	.+4      	; 0x8f0 <Pipe_ConfigurePipe+0x52>
     8ec:	75 30       	cpi	r23, 0x05	; 5
     8ee:	c1 f7       	brne	.-16     	; 0x8e0 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     8f0:	87 2f       	mov	r24, r23
     8f2:	82 95       	swap	r24
     8f4:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     8f6:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     8f8:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     8fa:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     8fc:	e0 e0       	ldi	r30, 0x00	; 0
     8fe:	08 c0       	rjmp	.+16     	; 0x910 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     900:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     904:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     908:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     90c:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     910:	81 ff       	sbrs	r24, 1
     912:	20 c0       	rjmp	.+64     	; 0x954 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     914:	90 91 a9 00 	lds	r25, 0x00A9
     918:	9e 7f       	andi	r25, 0xFE	; 254
     91a:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     91e:	90 91 ab 00 	lds	r25, 0x00AB
     922:	9d 7f       	andi	r25, 0xFD	; 253
     924:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     928:	90 91 a9 00 	lds	r25, 0x00A9
     92c:	91 60       	ori	r25, 0x01	; 1
     92e:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     932:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     936:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     93a:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     93e:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     942:	80 91 a9 00 	lds	r24, 0x00A9
     946:	80 62       	ori	r24, 0x20	; 32
     948:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     94c:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     950:	87 ff       	sbrs	r24, 7
     952:	09 c0       	rjmp	.+18     	; 0x966 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     954:	4f 5f       	subi	r20, 0xFF	; 255
     956:	47 30       	cpi	r20, 0x07	; 7
     958:	09 f0       	breq	.+2      	; 0x95c <Pipe_ConfigurePipe+0xbe>
     95a:	b8 cf       	rjmp	.-144    	; 0x8cc <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     95c:	5f 70       	andi	r21, 0x0F	; 15
     95e:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	01 c0       	rjmp	.+2      	; 0x968 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     966:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     968:	0f 91       	pop	r16
     96a:	08 95       	ret

0000096c <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     97a:	e8 2e       	mov	r14, r24
     97c:	e7 01       	movw	r28, r14
     97e:	7e 01       	movw	r14, r28
     980:	f9 2e       	mov	r15, r25
     982:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     984:	ff 24       	eor	r15, r15
     986:	0d c0       	rjmp	.+26     	; 0x9a2 <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
     988:	88 81       	ld	r24, Y
     98a:	88 23       	and	r24, r24
     98c:	41 f0       	breq	.+16     	; 0x99e <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     98e:	29 81       	ldd	r18, Y+1	; 0x01
     990:	3a 81       	ldd	r19, Y+2	; 0x02
     992:	6c 81       	ldd	r22, Y+4	; 0x04
     994:	4b 81       	ldd	r20, Y+3	; 0x03
     996:	0d 81       	ldd	r16, Y+5	; 0x05
     998:	82 df       	rcall	.-252    	; 0x89e <Pipe_ConfigurePipe>
     99a:	88 23       	and	r24, r24
     99c:	31 f0       	breq	.+12     	; 0x9aa <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     99e:	f3 94       	inc	r15
     9a0:	26 96       	adiw	r28, 0x06	; 6
     9a2:	f1 16       	cp	r15, r17
     9a4:	88 f3       	brcs	.-30     	; 0x988 <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     9aa:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	08 95       	ret

000009ba <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     9ba:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	98 2f       	mov	r25, r24
     9c2:	9f 70       	andi	r25, 0x0F	; 15
     9c4:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     9c8:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     9cc:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     9d0:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9d4:	90 91 a9 00 	lds	r25, 0x00A9
     9d8:	9e 7f       	andi	r25, 0xFE	; 254
     9da:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9de:	8f 5f       	subi	r24, 0xFF	; 255
     9e0:	87 30       	cpi	r24, 0x07	; 7
     9e2:	71 f7       	brne	.-36     	; 0x9c0 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     9e4:	08 95       	ret

000009e6 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     9e6:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     9ea:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9ee:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9f0:	29 2f       	mov	r18, r25
     9f2:	2f 70       	andi	r18, 0x0F	; 15
     9f4:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9f8:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     9fc:	27 ff       	sbrs	r18, 7
     9fe:	0c c0       	rjmp	.+24     	; 0xa18 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     a00:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     a04:	53 2f       	mov	r21, r19
     a06:	5f 70       	andi	r21, 0x0F	; 15
     a08:	30 ff       	sbrs	r19, 0
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <Pipe_IsEndpointBound+0x2a>
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <Pipe_IsEndpointBound+0x2c>
     a10:	20 e8       	ldi	r18, 0x80	; 128
     a12:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     a14:	28 17       	cp	r18, r24
     a16:	49 f0       	breq	.+18     	; 0xa2a <Pipe_IsEndpointBound+0x44>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a18:	9f 5f       	subi	r25, 0xFF	; 255
     a1a:	97 30       	cpi	r25, 0x07	; 7
     a1c:	49 f7       	brne	.-46     	; 0x9f0 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a1e:	84 2f       	mov	r24, r20
     a20:	8f 70       	andi	r24, 0x0F	; 15
     a22:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     a2a:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a2c:	08 95       	ret

00000a2e <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a2e:	80 91 a2 00 	lds	r24, 0x00A2
     a32:	90 91 a3 00 	lds	r25, 0x00A3

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     a36:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a38:	20 91 aa 00 	lds	r18, 0x00AA
     a3c:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a3e:	20 31       	cpi	r18, 0x10	; 16
     a40:	29 f4       	brne	.+10     	; 0xa4c <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a42:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     a46:	20 ff       	sbrs	r18, 0
     a48:	05 c0       	rjmp	.+10     	; 0xa54 <Pipe_WaitUntilReady+0x26>
     a4a:	18 c0       	rjmp	.+48     	; 0xa7c <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a4c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a50:	22 fd       	sbrc	r18, 2
     a52:	14 c0       	rjmp	.+40     	; 0xa7c <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a54:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a58:	21 fd       	sbrc	r18, 1
     a5a:	12 c0       	rjmp	.+36     	; 0xa80 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a5c:	20 91 95 01 	lds	r18, 0x0195
     a60:	21 30       	cpi	r18, 0x01	; 1
     a62:	81 f0       	breq	.+32     	; 0xa84 <Pipe_WaitUntilReady+0x56>
     a64:	20 91 a2 00 	lds	r18, 0x00A2
     a68:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a6c:	28 17       	cp	r18, r24
     a6e:	39 07       	cpc	r19, r25
     a70:	19 f3       	breq	.-58     	; 0xa38 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a72:	44 23       	and	r20, r20
     a74:	49 f0       	breq	.+18     	; 0xa88 <Pipe_WaitUntilReady+0x5a>
     a76:	41 50       	subi	r20, 0x01	; 1
     a78:	c9 01       	movw	r24, r18
     a7a:	de cf       	rjmp	.-68     	; 0xa38 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     a88:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     a8a:	08 95       	ret

00000a8c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     a8c:	75 d0       	rcall	.+234    	; 0xb78 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a8e:	7c d0       	rcall	.+248    	; 0xb88 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a90:	e0 ee       	ldi	r30, 0xE0	; 224
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	81 60       	ori	r24, 0x01	; 1
     a98:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     a9a:	e8 ed       	ldi	r30, 0xD8	; 216
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	8f 77       	andi	r24, 0x7F	; 127
     aa2:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     aa4:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     aa6:	a7 ed       	ldi	r26, 0xD7	; 215
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	8c 91       	ld	r24, X
     aac:	8e 7f       	andi	r24, 0xFE	; 254
     aae:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     ab0:	80 81       	ld	r24, Z
     ab2:	8f 7e       	andi	r24, 0xEF	; 239
     ab4:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     ab6:	10 92 8c 01 	sts	0x018C, r1
}
     aba:	08 95       	ret

00000abc <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     abc:	5d d0       	rcall	.+186    	; 0xb78 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     abe:	64 d0       	rcall	.+200    	; 0xb88 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     ac0:	80 91 d8 00 	lds	r24, 0x00D8
     ac4:	8f 77       	andi	r24, 0x7F	; 127
     ac6:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     aca:	80 91 d8 00 	lds	r24, 0x00D8
     ace:	80 68       	ori	r24, 0x80	; 128
     ad0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     ad4:	80 91 d8 00 	lds	r24, 0x00D8
     ad8:	8f 7d       	andi	r24, 0xDF	; 223
     ada:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     ade:	80 91 d7 00 	lds	r24, 0x00D7
     ae2:	8f 77       	andi	r24, 0x7F	; 127
     ae4:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ae8:	8c e0       	ldi	r24, 0x0C	; 12
     aea:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     aec:	8e e0       	ldi	r24, 0x0E	; 14
     aee:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     af0:	09 b4       	in	r0, 0x29	; 41
     af2:	00 fe       	sbrs	r0, 0
     af4:	fd cf       	rjmp	.-6      	; 0xaf0 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	80 93 95 01 	sts	0x0195, r24
	USB_Host_ConfigurationNumber = 0;
     afc:	10 92 8b 01 	sts	0x018B, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b00:	80 e4       	ldi	r24, 0x40	; 64
     b02:	80 93 75 01 	sts	0x0175, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b06:	80 91 d8 00 	lds	r24, 0x00D8
     b0a:	80 64       	ori	r24, 0x40	; 64
     b0c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b10:	80 91 dd 00 	lds	r24, 0x00DD
     b14:	81 60       	ori	r24, 0x01	; 1
     b16:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b1a:	80 91 dd 00 	lds	r24, 0x00DD
     b1e:	84 60       	ori	r24, 0x04	; 4
     b20:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b24:	80 91 d7 00 	lds	r24, 0x00D7
     b28:	8f 7e       	andi	r24, 0xEF	; 239
     b2a:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b2e:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     b30:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     b32:	80 91 de 00 	lds	r24, 0x00DE
     b36:	81 60       	ori	r24, 0x01	; 1
     b38:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b3c:	80 91 de 00 	lds	r24, 0x00DE
     b40:	84 60       	ori	r24, 0x04	; 4
     b42:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b46:	80 91 e0 00 	lds	r24, 0x00E0
     b4a:	8e 7f       	andi	r24, 0xFE	; 254
     b4c:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b50:	80 91 d8 00 	lds	r24, 0x00D8
     b54:	80 61       	ori	r24, 0x10	; 16
     b56:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b5a:	08 95       	ret

00000b5c <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b5c:	e8 ed       	ldi	r30, 0xD8	; 216
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	8f 7e       	andi	r24, 0xEF	; 239
     b64:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     b66:	e7 ed       	ldi	r30, 0xD7	; 215
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	81 60       	ori	r24, 0x01	; 1
     b6e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 8c 01 	sts	0x018C, r24

	USB_ResetInterface();
}
     b76:	a2 cf       	rjmp	.-188    	; 0xabc <USB_ResetInterface>

00000b78 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b78:	e8 ed       	ldi	r30, 0xD8	; 216
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	8c 7f       	andi	r24, 0xFC	; 252
     b80:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b82:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     b86:	08 95       	ret

00000b88 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b88:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b8c:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     b90:	08 95       	ret

00000b92 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b92:	1f 92       	push	r1
     b94:	0f 92       	push	r0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	0f 92       	push	r0
     b9a:	0b b6       	in	r0, 0x3b	; 59
     b9c:	0f 92       	push	r0
     b9e:	11 24       	eor	r1, r1
     ba0:	2f 93       	push	r18
     ba2:	3f 93       	push	r19
     ba4:	4f 93       	push	r20
     ba6:	5f 93       	push	r21
     ba8:	6f 93       	push	r22
     baa:	7f 93       	push	r23
     bac:	8f 93       	push	r24
     bae:	9f 93       	push	r25
     bb0:	af 93       	push	r26
     bb2:	bf 93       	push	r27
     bb4:	ef 93       	push	r30
     bb6:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     bb8:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     bbc:	85 ff       	sbrs	r24, 5
     bbe:	0a c0       	rjmp	.+20     	; 0xbd4 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     bc0:	80 91 a0 00 	lds	r24, 0x00A0
     bc4:	85 ff       	sbrs	r24, 5
     bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bc8:	80 91 9f 00 	lds	r24, 0x009F
     bcc:	8f 7d       	andi	r24, 0xDF	; 223
     bce:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     bd2:	0c d1       	rcall	.+536    	; 0xdec <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     bd4:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     bd8:	81 ff       	sbrs	r24, 1
     bda:	15 c0       	rjmp	.+42     	; 0xc06 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     bdc:	80 91 a0 00 	lds	r24, 0x00A0
     be0:	81 ff       	sbrs	r24, 1
     be2:	11 c0       	rjmp	.+34     	; 0xc06 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     be4:	80 91 9f 00 	lds	r24, 0x009F
     be8:	8d 7f       	andi	r24, 0xFD	; 253
     bea:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bee:	80 91 9f 00 	lds	r24, 0x009F
     bf2:	8e 7f       	andi	r24, 0xFE	; 254
     bf4:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     bf8:	80 91 a0 00 	lds	r24, 0x00A0
     bfc:	8d 7f       	andi	r24, 0xFD	; 253
     bfe:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c02:	c2 db       	rcall	.-2172   	; 0x388 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c04:	5b df       	rcall	.-330    	; 0xabc <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c06:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c0a:	81 ff       	sbrs	r24, 1
     c0c:	15 c0       	rjmp	.+42     	; 0xc38 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c0e:	80 91 de 00 	lds	r24, 0x00DE
     c12:	81 ff       	sbrs	r24, 1
     c14:	11 c0       	rjmp	.+34     	; 0xc38 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c16:	80 91 df 00 	lds	r24, 0x00DF
     c1a:	8d 7f       	andi	r24, 0xFD	; 253
     c1c:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     c20:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c22:	80 91 dd 00 	lds	r24, 0x00DD
     c26:	81 60       	ori	r24, 0x01	; 1
     c28:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	1c dc       	rcall	.-1992   	; 0x468 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c30:	ab db       	rcall	.-2218   	; 0x388 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	80 93 95 01 	sts	0x0195, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c38:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c3c:	80 ff       	sbrs	r24, 0
     c3e:	17 c0       	rjmp	.+46     	; 0xc6e <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c40:	80 91 de 00 	lds	r24, 0x00DE
     c44:	80 ff       	sbrs	r24, 0
     c46:	13 c0       	rjmp	.+38     	; 0xc6e <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c48:	80 91 df 00 	lds	r24, 0x00DF
     c4c:	8e 7f       	andi	r24, 0xFE	; 254
     c4e:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     c52:	80 91 de 00 	lds	r24, 0x00DE
     c56:	8e 7f       	andi	r24, 0xFE	; 254
     c58:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c5c:	8f db       	rcall	.-2274   	; 0x37c <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c5e:	80 91 a0 00 	lds	r24, 0x00A0
     c62:	82 60       	ori	r24, 0x02	; 2
     c64:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	80 93 95 01 	sts	0x0195, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c6e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c72:	82 ff       	sbrs	r24, 2
     c74:	0e c0       	rjmp	.+28     	; 0xc92 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c76:	80 91 de 00 	lds	r24, 0x00DE
     c7a:	82 ff       	sbrs	r24, 2
     c7c:	0a c0       	rjmp	.+20     	; 0xc92 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c7e:	80 91 df 00 	lds	r24, 0x00DF
     c82:	8b 7f       	andi	r24, 0xFB	; 251
     c84:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	0d dc       	rcall	.-2022   	; 0x4a8 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c8e:	7c db       	rcall	.-2312   	; 0x388 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c90:	15 df       	rcall	.-470    	; 0xabc <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c92:	ff 91       	pop	r31
     c94:	ef 91       	pop	r30
     c96:	bf 91       	pop	r27
     c98:	af 91       	pop	r26
     c9a:	9f 91       	pop	r25
     c9c:	8f 91       	pop	r24
     c9e:	7f 91       	pop	r23
     ca0:	6f 91       	pop	r22
     ca2:	5f 91       	pop	r21
     ca4:	4f 91       	pop	r20
     ca6:	3f 91       	pop	r19
     ca8:	2f 91       	pop	r18
     caa:	0f 90       	pop	r0
     cac:	0b be       	out	0x3b, r0	; 59
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	0f 90       	pop	r0
     cb4:	1f 90       	pop	r1
     cb6:	18 95       	reti

00000cb8 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     cb8:	cf 92       	push	r12
     cba:	df 92       	push	r13
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	29 97       	sbiw	r28, 0x09	; 9
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	6b 01       	movw	r12, r22
     cda:	8a 01       	movw	r16, r20
     cdc:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     cde:	90 e8       	ldi	r25, 0x80	; 128
     ce0:	90 93 8d 01 	sts	0x018D, r25
     ce4:	96 e0       	ldi	r25, 0x06	; 6
     ce6:	90 93 8e 01 	sts	0x018E, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     cf0:	90 93 90 01 	sts	0x0190, r25
     cf4:	80 93 8f 01 	sts	0x018F, r24
     cf8:	10 92 92 01 	sts	0x0192, r1
     cfc:	10 92 91 01 	sts	0x0191, r1
     d00:	89 e0       	ldi	r24, 0x09	; 9
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	90 93 94 01 	sts	0x0194, r25
     d08:	80 93 93 01 	sts	0x0193, r24
     d0c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d10:	ce 01       	movw	r24, r28
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	95 d0       	rcall	.+298    	; 0xe40 <USB_Host_SendControlRequest>
     d16:	88 23       	and	r24, r24
     d18:	b9 f4       	brne	.+46     	; 0xd48 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	9c 81       	ldd	r25, Y+4	; 0x04
     d1e:	f6 01       	movw	r30, r12
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     d24:	e8 16       	cp	r14, r24
     d26:	f9 06       	cpc	r15, r25
     d28:	70 f0       	brcs	.+28     	; 0xd46 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d2a:	90 93 94 01 	sts	0x0194, r25
     d2e:	80 93 93 01 	sts	0x0193, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d32:	c8 01       	movw	r24, r16
     d34:	85 d0       	rcall	.+266    	; 0xe40 <USB_Host_SendControlRequest>
     d36:	88 23       	and	r24, r24
     d38:	39 f4       	brne	.+14     	; 0xd48 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d3a:	f8 01       	movw	r30, r16
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	19 f0       	breq	.+6      	; 0xd48 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     d42:	86 e0       	ldi	r24, 0x06	; 6
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     d46:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     d48:	29 96       	adiw	r28, 0x09	; 9
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	df 90       	pop	r13
     d62:	cf 90       	pop	r12
     d64:	08 95       	ret

00000d66 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d66:	af 92       	push	r10
     d68:	bf 92       	push	r11
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	8c 01       	movw	r16, r24
     d7c:	eb 01       	movw	r28, r22
     d7e:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     d80:	23 c0       	rjmp	.+70     	; 0xdc8 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d82:	e8 81       	ld	r30, Y
     d84:	f9 81       	ldd	r31, Y+1	; 0x01
     d86:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     d88:	20 81       	ld	r18, Z
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	c7 01       	movw	r24, r14
     d8e:	2e 15       	cp	r18, r14
     d90:	3f 05       	cpc	r19, r15
     d92:	08 f4       	brcc	.+2      	; 0xd96 <USB_GetNextDescriptorComp+0x30>
     d94:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     d96:	e8 0f       	add	r30, r24
     d98:	f9 1f       	adc	r31, r25
     d9a:	f9 83       	std	Y+1, r31	; 0x01
     d9c:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     d9e:	f8 01       	movw	r30, r16
     da0:	20 81       	ld	r18, Z
     da2:	31 81       	ldd	r19, Z+1	; 0x01
     da4:	28 1b       	sub	r18, r24
     da6:	39 0b       	sbc	r19, r25
     da8:	31 83       	std	Z+1, r19	; 0x01
     daa:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     dac:	88 81       	ld	r24, Y
     dae:	99 81       	ldd	r25, Y+1	; 0x01
     db0:	f6 01       	movw	r30, r12
     db2:	09 95       	icall
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	41 f0       	breq	.+16     	; 0xdc8 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	69 f4       	brne	.+26     	; 0xdd6 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
     dbc:	a8 82       	st	Y, r10
     dbe:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
     dc0:	f8 01       	movw	r30, r16
     dc2:	f1 82       	std	Z+1, r15	; 0x01
     dc4:	e0 82       	st	Z, r14
     dc6:	07 c0       	rjmp	.+14     	; 0xdd6 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     dc8:	f8 01       	movw	r30, r16
     dca:	e0 80       	ld	r14, Z
     dcc:	f1 80       	ldd	r15, Z+1	; 0x01
     dce:	e1 14       	cp	r14, r1
     dd0:	f1 04       	cpc	r15, r1
     dd2:	b9 f6       	brne	.-82     	; 0xd82 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     dd4:	82 e0       	ldi	r24, 0x02	; 2
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	df 90       	pop	r13
     de4:	cf 90       	pop	r12
     de6:	bf 90       	pop	r11
     de8:	af 90       	pop	r10
     dea:	08 95       	ret

00000dec <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     dec:	08 95       	ret

00000dee <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
     df6:	c8 ee       	ldi	r28, 0xE8	; 232
     df8:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	d3 db       	rcall	.-2138   	; 0x5a6 <USB_Host_WaitMS>
     e00:	88 23       	and	r24, r24
     e02:	d1 f4       	brne	.+52     	; 0xe38 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     e04:	20 97       	sbiw	r28, 0x00	; 0
     e06:	b9 f0       	breq	.+46     	; 0xe36 <USB_Host_WaitForIOS+0x48>
     e08:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e0a:	11 23       	and	r17, r17
     e0c:	29 f4       	brne	.+10     	; 0xe18 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     e0e:	80 91 a6 00 	lds	r24, 0x00A6
     e12:	83 ff       	sbrs	r24, 3
     e14:	f3 cf       	rjmp	.-26     	; 0xdfc <USB_Host_WaitForIOS+0xe>
     e16:	0d c0       	rjmp	.+26     	; 0xe32 <USB_Host_WaitForIOS+0x44>
     e18:	11 30       	cpi	r17, 0x01	; 1
     e1a:	29 f4       	brne	.+10     	; 0xe26 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e1c:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     e20:	80 ff       	sbrs	r24, 0
     e22:	ec cf       	rjmp	.-40     	; 0xdfc <USB_Host_WaitForIOS+0xe>
     e24:	06 c0       	rjmp	.+12     	; 0xe32 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e26:	12 30       	cpi	r17, 0x02	; 2
     e28:	49 f7       	brne	.-46     	; 0xdfc <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e2a:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     e2e:	82 ff       	sbrs	r24, 2
     e30:	e5 cf       	rjmp	.-54     	; 0xdfc <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     e36:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	08 95       	ret

00000e40 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e4e:	e0 90 9e 00 	lds	r14, 0x009E
     e52:	ff 24       	eor	r15, r15
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	e8 22       	and	r14, r24
     e58:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     e5a:	c0 91 93 01 	lds	r28, 0x0193
     e5e:	d0 91 94 01 	lds	r29, 0x0194
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e62:	80 91 9e 00 	lds	r24, 0x009E
     e66:	81 60       	ori	r24, 0x01	; 1
     e68:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	9b db       	rcall	.-2250   	; 0x5a6 <USB_Host_WaitMS>
     e70:	88 23       	and	r24, r24
     e72:	09 f0       	breq	.+2      	; 0xe76 <USB_Host_SendControlRequest+0x36>
     e74:	cb c0       	rjmp	.+406    	; 0x100c <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e76:	80 91 aa 00 	lds	r24, 0x00AA
     e7a:	8f 7c       	andi	r24, 0xCF	; 207
     e7c:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     e80:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     e84:	80 91 a6 00 	lds	r24, 0x00A6
     e88:	8f 7e       	andi	r24, 0xEF	; 239
     e8a:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e8e:	80 91 a9 00 	lds	r24, 0x00A9
     e92:	8f 7b       	andi	r24, 0xBF	; 191
     e94:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     e98:	ed e8       	ldi	r30, 0x8D	; 141
     e9a:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     e9c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     e9e:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	e5 39       	cpi	r30, 0x95	; 149
     ea6:	f8 07       	cpc	r31, r24
     ea8:	c9 f7       	brne	.-14     	; 0xe9c <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     eaa:	80 91 a6 00 	lds	r24, 0x00A6
     eae:	87 77       	andi	r24, 0x77	; 119
     eb0:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	9b df       	rcall	.-202    	; 0xdee <USB_Host_WaitForIOS>
     eb8:	88 23       	and	r24, r24
     eba:	09 f0       	breq	.+2      	; 0xebe <USB_Host_SendControlRequest+0x7e>
     ebc:	a7 c0       	rjmp	.+334    	; 0x100c <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ebe:	80 91 a9 00 	lds	r24, 0x00A9
     ec2:	80 64       	ori	r24, 0x40	; 64
     ec4:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	6d db       	rcall	.-2342   	; 0x5a6 <USB_Host_WaitMS>
     ecc:	88 23       	and	r24, r24
     ece:	09 f0       	breq	.+2      	; 0xed2 <USB_Host_SendControlRequest+0x92>
     ed0:	9d c0       	rjmp	.+314    	; 0x100c <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     ed2:	80 91 8d 01 	lds	r24, 0x018D
     ed6:	87 ff       	sbrs	r24, 7
     ed8:	4f c0       	rjmp	.+158    	; 0xf78 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eda:	80 91 aa 00 	lds	r24, 0x00AA
     ede:	8f 7c       	andi	r24, 0xCF	; 207
     ee0:	80 61       	ori	r24, 0x10	; 16
     ee2:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     ee6:	01 15       	cp	r16, r1
     ee8:	11 05       	cpc	r17, r1
     eea:	61 f5       	brne	.+88     	; 0xf44 <USB_Host_SendControlRequest+0x104>
     eec:	2d c0       	rjmp	.+90     	; 0xf48 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     eee:	80 91 a9 00 	lds	r24, 0x00A9
     ef2:	8f 7b       	andi	r24, 0xBF	; 191
     ef4:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	79 df       	rcall	.-270    	; 0xdee <USB_Host_WaitForIOS>
     efc:	88 23       	and	r24, r24
     efe:	09 f0       	breq	.+2      	; 0xf02 <USB_Host_SendControlRequest+0xc2>
     f00:	85 c0       	rjmp	.+266    	; 0x100c <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f02:	80 91 f6 00 	lds	r24, 0x00F6
     f06:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	49 f4       	brne	.+18     	; 0xf20 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
     f0e:	c0 e0       	ldi	r28, 0x00	; 0
     f10:	d0 e0       	ldi	r29, 0x00	; 0
     f12:	06 c0       	rjmp	.+12     	; 0xf20 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f14:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
     f18:	f8 01       	movw	r30, r16
     f1a:	81 93       	st	Z+, r24
     f1c:	8f 01       	movw	r16, r30
					DataLen--;
     f1e:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f20:	80 91 f6 00 	lds	r24, 0x00F6
     f24:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	11 f0       	breq	.+4      	; 0xf30 <USB_Host_SendControlRequest+0xf0>
     f2c:	20 97       	sbiw	r28, 0x00	; 0
     f2e:	91 f7       	brne	.-28     	; 0xf14 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f30:	80 91 a9 00 	lds	r24, 0x00A9
     f34:	80 64       	ori	r24, 0x40	; 64
     f36:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f3a:	80 91 a6 00 	lds	r24, 0x00A6
     f3e:	8e 77       	andi	r24, 0x7E	; 126
     f40:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f44:	20 97       	sbiw	r28, 0x00	; 0
     f46:	99 f6       	brne	.-90     	; 0xeee <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f48:	80 91 aa 00 	lds	r24, 0x00AA
     f4c:	8f 7c       	andi	r24, 0xCF	; 207
     f4e:	80 62       	ori	r24, 0x20	; 32
     f50:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f54:	80 91 a9 00 	lds	r24, 0x00A9
     f58:	8f 7b       	andi	r24, 0xBF	; 191
     f5a:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	46 df       	rcall	.-372    	; 0xdee <USB_Host_WaitForIOS>
     f62:	88 23       	and	r24, r24
     f64:	09 f0       	breq	.+2      	; 0xf68 <USB_Host_SendControlRequest+0x128>
     f66:	52 c0       	rjmp	.+164    	; 0x100c <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f68:	80 91 a6 00 	lds	r24, 0x00A6
     f6c:	8b 77       	andi	r24, 0x7B	; 123
     f6e:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f72:	82 e0       	ldi	r24, 0x02	; 2
     f74:	3c df       	rcall	.-392    	; 0xdee <USB_Host_WaitForIOS>
     f76:	4a c0       	rjmp	.+148    	; 0x100c <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
     f78:	01 15       	cp	r16, r1
     f7a:	11 05       	cpc	r17, r1
     f7c:	99 f1       	breq	.+102    	; 0xfe4 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f7e:	80 91 aa 00 	lds	r24, 0x00AA
     f82:	8f 7c       	andi	r24, 0xCF	; 207
     f84:	80 62       	ori	r24, 0x20	; 32
     f86:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f8a:	80 91 a9 00 	lds	r24, 0x00A9
     f8e:	8f 7b       	andi	r24, 0xBF	; 191
     f90:	80 93 a9 00 	sts	0x00A9, r24
     f94:	1c c0       	rjmp	.+56     	; 0xfce <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	2a df       	rcall	.-428    	; 0xdee <USB_Host_WaitForIOS>
     f9a:	88 23       	and	r24, r24
     f9c:	b9 f5       	brne	.+110    	; 0x100c <USB_Host_SendControlRequest+0x1cc>
     f9e:	f8 01       	movw	r30, r16
     fa0:	06 c0       	rjmp	.+12     	; 0xfae <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
     fa2:	81 91       	ld	r24, Z+
     fa4:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fa6:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
     faa:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     fac:	59 f0       	breq	.+22     	; 0xfc4 <USB_Host_SendControlRequest+0x184>
     fae:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fb0:	20 91 f6 00 	lds	r18, 0x00F6
     fb4:	30 91 f7 00 	lds	r19, 0x00F7
     fb8:	80 91 75 01 	lds	r24, 0x0175
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	28 17       	cp	r18, r24
     fc0:	39 07       	cpc	r19, r25
     fc2:	78 f3       	brcs	.-34     	; 0xfa2 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fc4:	80 91 a6 00 	lds	r24, 0x00A6
     fc8:	8b 77       	andi	r24, 0x7B	; 123
     fca:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     fce:	20 97       	sbiw	r28, 0x00	; 0
     fd0:	11 f7       	brne	.-60     	; 0xf96 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fd2:	82 e0       	ldi	r24, 0x02	; 2
     fd4:	0c df       	rcall	.-488    	; 0xdee <USB_Host_WaitForIOS>
     fd6:	88 23       	and	r24, r24
     fd8:	c9 f4       	brne	.+50     	; 0x100c <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fda:	80 91 a9 00 	lds	r24, 0x00A9
     fde:	80 64       	ori	r24, 0x40	; 64
     fe0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fe4:	80 91 aa 00 	lds	r24, 0x00AA
     fe8:	8f 7c       	andi	r24, 0xCF	; 207
     fea:	80 61       	ori	r24, 0x10	; 16
     fec:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ff0:	80 91 a9 00 	lds	r24, 0x00A9
     ff4:	8f 7b       	andi	r24, 0xBF	; 191
     ff6:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	f8 de       	rcall	.-528    	; 0xdee <USB_Host_WaitForIOS>
     ffe:	88 23       	and	r24, r24
    1000:	29 f4       	brne	.+10     	; 0x100c <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1002:	90 91 a6 00 	lds	r25, 0x00A6
    1006:	9e 77       	andi	r25, 0x7E	; 126
    1008:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    100c:	90 91 a9 00 	lds	r25, 0x00A9
    1010:	90 64       	ori	r25, 0x40	; 64
    1012:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1016:	e1 14       	cp	r14, r1
    1018:	f1 04       	cpc	r15, r1
    101a:	29 f4       	brne	.+10     	; 0x1026 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    101c:	90 91 9e 00 	lds	r25, 0x009E
    1020:	9e 7f       	andi	r25, 0xFE	; 254
    1022:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    102c:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	08 95       	ret

0000103e <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    103e:	1f 93       	push	r17
    1040:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1042:	10 92 8d 01 	sts	0x018D, r1
    1046:	89 e0       	ldi	r24, 0x09	; 9
    1048:	80 93 8e 01 	sts	0x018E, r24
    104c:	10 93 8f 01 	sts	0x018F, r17
    1050:	10 92 90 01 	sts	0x0190, r1
    1054:	10 92 92 01 	sts	0x0192, r1
    1058:	10 92 91 01 	sts	0x0191, r1
    105c:	10 92 94 01 	sts	0x0194, r1
    1060:	10 92 93 01 	sts	0x0193, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1064:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	e9 de       	rcall	.-558    	; 0xe40 <USB_Host_SendControlRequest>
    106e:	88 23       	and	r24, r24
    1070:	49 f4       	brne	.+18     	; 0x1084 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1072:	10 93 8b 01 	sts	0x018B, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1076:	11 23       	and	r17, r17
    1078:	11 f0       	breq	.+4      	; 0x107e <USB_Host_SetDeviceConfiguration+0x40>
    107a:	9b e0       	ldi	r25, 0x0B	; 11
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <USB_Host_SetDeviceConfiguration+0x42>
    107e:	9a e0       	ldi	r25, 0x0A	; 10
    1080:	90 93 95 01 	sts	0x0195, r25
	}

	return ErrorCode;
}
    1084:	1f 91       	pop	r17
    1086:	08 95       	ret

00001088 <USB_Host_GetDescriptor>:
uint8_t USB_Host_GetDescriptor(const uint8_t Type,
                               const uint8_t Index,
                               void* const Buffer,
                               const uint8_t BufferLength)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1088:	90 e8       	ldi	r25, 0x80	; 128
    108a:	90 93 8d 01 	sts	0x018D, r25
    108e:	96 e0       	ldi	r25, 0x06	; 6
    1090:	90 93 8e 01 	sts	0x018E, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = (((uint16_t)Type << 8) | Index),
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	f8 2f       	mov	r31, r24
    1098:	e0 e0       	ldi	r30, 0x00	; 0
    109a:	6e 2b       	or	r22, r30
    109c:	7f 2b       	or	r23, r31
uint8_t USB_Host_GetDescriptor(const uint8_t Type,
                               const uint8_t Index,
                               void* const Buffer,
                               const uint8_t BufferLength)
{
	USB_ControlRequest = (USB_Request_Header_t)
    109e:	70 93 90 01 	sts	0x0190, r23
    10a2:	60 93 8f 01 	sts	0x018F, r22
    10a6:	10 92 92 01 	sts	0x0192, r1
    10aa:	10 92 91 01 	sts	0x0191, r1
    10ae:	20 93 93 01 	sts	0x0193, r18
    10b2:	10 92 94 01 	sts	0x0194, r1
    10b6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = BufferLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
    10ba:	ca 01       	movw	r24, r20
}
    10bc:	c1 ce       	rjmp	.-638    	; 0xe40 <USB_Host_SendControlRequest>

000010be <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    10be:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    10c0:	10 91 a7 00 	lds	r17, 0x00A7
    10c4:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    10c6:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10ca:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    10ce:	c0 da       	rcall	.-2688   	; 0x650 <USB_Host_ProcessNextHostState>
    10d0:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    10d4:	1f 91       	pop	r17
    10d6:	08 95       	ret

000010d8 <DCOMP_AOA_Host_NextAndroidAccessoryInterface>:

	return AOA_ENUMERROR_NoError;
}

static uint8_t DCOMP_AOA_Host_NextAndroidAccessoryInterface(void* const CurrentDescriptor)
{
    10d8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10da:	81 81       	ldd	r24, Z+1	; 0x01
    10dc:	84 30       	cpi	r24, 0x04	; 4
    10de:	49 f4       	brne	.+18     	; 0x10f2 <DCOMP_AOA_Host_NextAndroidAccessoryInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AOA_CSCP_AOADataClass)    &&
    10e0:	85 81       	ldd	r24, Z+5	; 0x05
    10e2:	8f 3f       	cpi	r24, 0xFF	; 255
    10e4:	31 f4       	brne	.+12     	; 0x10f2 <DCOMP_AOA_Host_NextAndroidAccessoryInterface+0x1a>
    10e6:	86 81       	ldd	r24, Z+6	; 0x06
    10e8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ea:	19 f4       	brne	.+6      	; 0x10f2 <DCOMP_AOA_Host_NextAndroidAccessoryInterface+0x1a>
		    (Interface->SubClass == AOA_CSCP_AOADataSubclass) &&
    10ec:	87 81       	ldd	r24, Z+7	; 0x07
    10ee:	88 23       	and	r24, r24
    10f0:	11 f0       	breq	.+4      	; 0x10f6 <DCOMP_AOA_Host_NextAndroidAccessoryInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	08 95       	ret

		if ((Interface->Class    == AOA_CSCP_AOADataClass)    &&
		    (Interface->SubClass == AOA_CSCP_AOADataSubclass) &&
		    (Interface->Protocol == AOA_CSCP_AOADataProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    10f6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    10f8:	08 95       	ret

000010fa <DCOMP_AOA_Host_NextInterfaceBulkEndpoint>:

static uint8_t DCOMP_AOA_Host_NextInterfaceBulkEndpoint(void* const CurrentDescriptor)
{
    10fa:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    10fc:	81 81       	ldd	r24, Z+1	; 0x01
    10fe:	85 30       	cpi	r24, 0x05	; 5
    1100:	49 f4       	brne	.+18     	; 0x1114 <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    1102:	83 81       	ldd	r24, Z+3	; 0x03
    1104:	83 70       	andi	r24, 0x03	; 3

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    1106:	82 30       	cpi	r24, 0x02	; 2
    1108:	39 f4       	brne	.+14     	; 0x1118 <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x1e>
    110a:	82 81       	ldd	r24, Z+2	; 0x02
    110c:	6c dc       	rcall	.-1832   	; 0x9e6 <Pipe_IsEndpointBound>
    110e:	88 23       	and	r24, r24
    1110:	19 f4       	brne	.+6      	; 0x1118 <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x1e>
    1112:	04 c0       	rjmp	.+8      	; 0x111c <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x22>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1114:	84 30       	cpi	r24, 0x04	; 4
    1116:	21 f0       	breq	.+8      	; 0x1120 <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x26>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	08 95       	ret
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		  return DESCRIPTOR_SEARCH_Found;
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1120:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1122:	08 95       	ret

00001124 <AOA_Host_ValidateAccessoryDevice>:
#include "AndroidAccessoryClassHost.h"

bool AOA_Host_ValidateAccessoryDevice(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                      const USB_Descriptor_Device_t* const DeviceDescriptor,
                                      bool* const NeedModeSwitch)
{
    1124:	fb 01       	movw	r30, r22
	(void)AOAInterfaceInfo;

	if (DeviceDescriptor->Header.Type != DTYPE_Device)
    1126:	81 81       	ldd	r24, Z+1	; 0x01
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	69 f4       	brne	.+26     	; 0x1146 <AOA_Host_ValidateAccessoryDevice+0x22>
	  return false;

	*NeedModeSwitch = ((DeviceDescriptor->ProductID != ANDROID_ACCESSORY_PRODUCT_ID) &&
    112c:	82 85       	ldd	r24, Z+10	; 0x0a
    112e:	93 85       	ldd	r25, Z+11	; 0x0b
    1130:	80 50       	subi	r24, 0x00	; 0
    1132:	9d 42       	sbci	r25, 0x2D	; 45
    1134:	21 e0       	ldi	r18, 0x01	; 1
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	91 05       	cpc	r25, r1
    113a:	08 f4       	brcc	.+2      	; 0x113e <AOA_Host_ValidateAccessoryDevice+0x1a>
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	fa 01       	movw	r30, r20
    1140:	20 83       	st	Z, r18
	                   (DeviceDescriptor->ProductID != ANDROID_ACCESSORY_ADB_PRODUCT_ID));

	return true;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	08 95       	ret
                                      bool* const NeedModeSwitch)
{
	(void)AOAInterfaceInfo;

	if (DeviceDescriptor->Header.Type != DTYPE_Device)
	  return false;
    1146:	80 e0       	ldi	r24, 0x00	; 0

	*NeedModeSwitch = ((DeviceDescriptor->ProductID != ANDROID_ACCESSORY_PRODUCT_ID) &&
	                   (DeviceDescriptor->ProductID != ANDROID_ACCESSORY_ADB_PRODUCT_ID));

	return true;
}
    1148:	08 95       	ret

0000114a <AOA_Host_ConfigurePipes>:

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    114a:	4f 92       	push	r4
    114c:	5f 92       	push	r5
    114e:	6f 92       	push	r6
    1150:	7f 92       	push	r7
    1152:	8f 92       	push	r8
    1154:	9f 92       	push	r9
    1156:	af 92       	push	r10
    1158:	bf 92       	push	r11
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <AOA_Host_ConfigurePipes+0x22>
    116c:	00 d0       	rcall	.+0      	; 0x116e <AOA_Host_ConfigurePipes+0x24>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	8c 01       	movw	r16, r24
    1174:	7a 83       	std	Y+2, r23	; 0x02
    1176:	69 83       	std	Y+1, r22	; 0x01
    1178:	fa 01       	movw	r30, r20
    117a:	5c 83       	std	Y+4, r21	; 0x04
    117c:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* AOAInterface    = NULL;

	memset(&AOAInterfaceInfo->State, 0x00, sizeof(AOAInterfaceInfo->State));
    117e:	dc 01       	movw	r26, r24
    1180:	59 96       	adiw	r26, 0x19	; 25
    1182:	1c 92       	st	X, r1
    1184:	1e 92       	st	-X, r1
    1186:	58 97       	sbiw	r26, 0x18	; 24

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1188:	81 81       	ldd	r24, Z+1	; 0x01
    118a:	82 30       	cpi	r24, 0x02	; 2
    118c:	09 f0       	breq	.+2      	; 0x1190 <AOA_Host_ConfigurePipes+0x46>
    118e:	66 c0       	rjmp	.+204    	; 0x125c <AOA_Host_ConfigurePipes+0x112>
	  return AOA_ENUMERROR_InvalidConfigDescriptor;

	if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1190:	83 e0       	ldi	r24, 0x03	; 3
    1192:	a8 2e       	mov	r10, r24
    1194:	b1 2c       	mov	r11, r1
    1196:	ac 0e       	add	r10, r28
    1198:	bd 1e       	adc	r11, r29
    119a:	4e 01       	movw	r8, r28
    119c:	08 94       	sec
    119e:	81 1c       	adc	r8, r1
    11a0:	91 1c       	adc	r9, r1
    11a2:	c4 01       	movw	r24, r8
    11a4:	b5 01       	movw	r22, r10
    11a6:	4c e6       	ldi	r20, 0x6C	; 108
    11a8:	58 e0       	ldi	r21, 0x08	; 8
    11aa:	dd dd       	rcall	.-1094   	; 0xd66 <USB_GetNextDescriptorComp>
    11ac:	88 23       	and	r24, r24
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <AOA_Host_ConfigurePipes+0x68>
    11b0:	57 c0       	rjmp	.+174    	; 0x1260 <AOA_Host_ConfigurePipes+0x116>
	                              DCOMP_AOA_Host_NextAndroidAccessoryInterface) != DESCRIPTOR_SEARCH_COMP_Found)
	{
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    11b2:	4b 80       	ldd	r4, Y+3	; 0x03
    11b4:	5c 80       	ldd	r5, Y+4	; 0x04
uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
    11b6:	cc 24       	eor	r12, r12
    11b8:	dd 24       	eor	r13, r13

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
    11ba:	ee 24       	eor	r14, r14
    11bc:	ff 24       	eor	r15, r15

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11be:	7a 2c       	mov	r7, r10
    11c0:	6b 2c       	mov	r6, r11
    11c2:	b8 2c       	mov	r11, r8
    11c4:	a9 2c       	mov	r10, r9
    11c6:	8b 2d       	mov	r24, r11
    11c8:	9a 2d       	mov	r25, r10
    11ca:	67 2d       	mov	r22, r7
    11cc:	76 2d       	mov	r23, r6
    11ce:	4d e7       	ldi	r20, 0x7D	; 125
    11d0:	58 e0       	ldi	r21, 0x08	; 8
    11d2:	c9 dd       	rcall	.-1134   	; 0xd66 <USB_GetNextDescriptorComp>
    11d4:	88 23       	and	r24, r24
    11d6:	09 f0       	breq	.+2      	; 0x11da <AOA_Host_ConfigurePipes+0x90>
    11d8:	43 c0       	rjmp	.+134    	; 0x1260 <AOA_Host_ConfigurePipes+0x116>
		                              DCOMP_AOA_Host_NextInterfaceBulkEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    11da:	eb 81       	ldd	r30, Y+3	; 0x03
    11dc:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	87 ff       	sbrs	r24, 7
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <AOA_Host_ConfigurePipes+0x9e>
		  DataINEndpoint  = EndpointData;
    11e4:	7f 01       	movw	r14, r30
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <AOA_Host_ConfigurePipes+0xa0>
		else
		  DataOUTEndpoint = EndpointData;
    11e8:	6f 01       	movw	r12, r30
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    11ea:	e1 14       	cp	r14, r1
    11ec:	f1 04       	cpc	r15, r1
    11ee:	59 f3       	breq	.-42     	; 0x11c6 <AOA_Host_ConfigurePipes+0x7c>
    11f0:	c1 14       	cp	r12, r1
    11f2:	d1 04       	cpc	r13, r1
    11f4:	41 f3       	breq	.-48     	; 0x11c6 <AOA_Host_ConfigurePipes+0x7c>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	AOAInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    11f6:	f7 01       	movw	r30, r14
    11f8:	84 81       	ldd	r24, Z+4	; 0x04
    11fa:	95 81       	ldd	r25, Z+5	; 0x05
    11fc:	d8 01       	movw	r26, r16
    11fe:	12 96       	adiw	r26, 0x02	; 2
    1200:	9c 93       	st	X, r25
    1202:	8e 93       	st	-X, r24
    1204:	11 97       	sbiw	r26, 0x01	; 1
	AOAInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1206:	82 81       	ldd	r24, Z+2	; 0x02
    1208:	13 96       	adiw	r26, 0x03	; 3
    120a:	8c 93       	st	X, r24
    120c:	13 97       	sbiw	r26, 0x03	; 3
	AOAInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    120e:	22 e0       	ldi	r18, 0x02	; 2
    1210:	14 96       	adiw	r26, 0x04	; 4
    1212:	2c 93       	st	X, r18
    1214:	14 97       	sbiw	r26, 0x04	; 4

	AOAInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1216:	f6 01       	movw	r30, r12
    1218:	84 81       	ldd	r24, Z+4	; 0x04
    121a:	95 81       	ldd	r25, Z+5	; 0x05
    121c:	18 96       	adiw	r26, 0x08	; 8
    121e:	9c 93       	st	X, r25
    1220:	8e 93       	st	-X, r24
    1222:	17 97       	sbiw	r26, 0x07	; 7
	AOAInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1224:	82 81       	ldd	r24, Z+2	; 0x02
    1226:	19 96       	adiw	r26, 0x09	; 9
    1228:	8c 93       	st	X, r24
    122a:	19 97       	sbiw	r26, 0x09	; 9
	AOAInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    122c:	1a 96       	adiw	r26, 0x0a	; 10
    122e:	2c 93       	st	X, r18

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataINPipe, 1)))
    1230:	c8 01       	movw	r24, r16
    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	9b db       	rcall	.-2250   	; 0x96c <Pipe_ConfigurePipeTable>
    1236:	88 23       	and	r24, r24
    1238:	a9 f0       	breq	.+42     	; 0x1264 <AOA_Host_ConfigurePipes+0x11a>
	  return false;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataOUTPipe, 1)))
    123a:	c8 01       	movw	r24, r16
    123c:	06 96       	adiw	r24, 0x06	; 6
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	95 db       	rcall	.-2262   	; 0x96c <Pipe_ConfigurePipeTable>
    1242:	88 23       	and	r24, r24
    1244:	79 f0       	breq	.+30     	; 0x1264 <AOA_Host_ConfigurePipes+0x11a>
	  return false;

	AOAInterfaceInfo->State.IsActive        = true;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	d8 01       	movw	r26, r16
    124a:	58 96       	adiw	r26, 0x18	; 24
    124c:	8c 93       	st	X, r24
    124e:	58 97       	sbiw	r26, 0x18	; 24
	AOAInterfaceInfo->State.InterfaceNumber = AOAInterface->InterfaceNumber;
    1250:	f2 01       	movw	r30, r4
    1252:	82 81       	ldd	r24, Z+2	; 0x02
    1254:	59 96       	adiw	r26, 0x19	; 25
    1256:	8c 93       	st	X, r24
    1258:	59 97       	sbiw	r26, 0x19	; 25
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <AOA_Host_ConfigurePipes+0x11a>
	USB_Descriptor_Interface_t* AOAInterface    = NULL;

	memset(&AOAInterfaceInfo->State, 0x00, sizeof(AOAInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AOA_ENUMERROR_InvalidConfigDescriptor;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	03 c0       	rjmp	.+6      	; 0x1266 <AOA_Host_ConfigurePipes+0x11c>
	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_AOA_Host_NextInterfaceBulkEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
    1260:	82 e0       	ldi	r24, 0x02	; 2
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <AOA_Host_ConfigurePipes+0x11c>

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataINPipe, 1)))
	  return false;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;
    1264:	80 e0       	ldi	r24, 0x00	; 0

	AOAInterfaceInfo->State.IsActive        = true;
	AOAInterfaceInfo->State.InterfaceNumber = AOAInterface->InterfaceNumber;

	return AOA_ENUMERROR_NoError;
}
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	cf 90       	pop	r12
    127e:	bf 90       	pop	r11
    1280:	af 90       	pop	r10
    1282:	9f 90       	pop	r9
    1284:	8f 90       	pop	r8
    1286:	7f 90       	pop	r7
    1288:	6f 90       	pop	r6
    128a:	5f 90       	pop	r5
    128c:	4f 90       	pop	r4
    128e:	08 95       	ret

00001290 <AOA_Host_StartAccessoryMode>:
	AOA_Host_Flush(AOAInterfaceInfo);
	#endif
}

uint8_t AOA_Host_StartAccessoryMode(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
    1290:	cf 92       	push	r12
    1292:	df 92       	push	r13
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <AOA_Host_StartAccessoryMode+0x12>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	8c 01       	movw	r16, r24
	return USB_Host_SendControlRequest(NULL);
}

static uint8_t AOA_Host_GetAccessoryProtocol(uint16_t* const Protocol)
{
	USB_ControlRequest = (USB_Request_Header_t)
    12a8:	ad e8       	ldi	r26, 0x8D	; 141
    12aa:	b1 e0       	ldi	r27, 0x01	; 1
    12ac:	ef e7       	ldi	r30, 0x7F	; 127
    12ae:	f1 e0       	ldi	r31, 0x01	; 1
    12b0:	88 e0       	ldi	r24, 0x08	; 8
    12b2:	01 90       	ld	r0, Z+
    12b4:	0d 92       	st	X+, r0
    12b6:	81 50       	subi	r24, 0x01	; 1
    12b8:	e1 f7       	brne	.-8      	; 0x12b2 <AOA_Host_StartAccessoryMode+0x22>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12ba:	10 92 a7 00 	sts	0x00A7, r1
		.wIndex        = 0,
		.wLength       = sizeof(uint16_t),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(Protocol);
    12be:	ce 01       	movw	r24, r28
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	be dd       	rcall	.-1156   	; 0xe40 <USB_Host_SendControlRequest>
uint8_t AOA_Host_StartAccessoryMode(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	uint8_t ErrorCode;

	uint16_t AccessoryProtocol;
	if ((ErrorCode = AOA_Host_GetAccessoryProtocol(&AccessoryProtocol)) != HOST_WAITERROR_Successful)
    12c4:	88 23       	and	r24, r24
    12c6:	09 f0       	breq	.+2      	; 0x12ca <AOA_Host_StartAccessoryMode+0x3a>
    12c8:	49 c0       	rjmp	.+146    	; 0x135c <AOA_Host_StartAccessoryMode+0xcc>
	  return ErrorCode;

	if (AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV1))
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <AOA_Host_StartAccessoryMode+0x46>
    12d4:	42 c0       	rjmp	.+132    	; 0x135a <AOA_Host_StartAccessoryMode+0xca>
	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	AOA_Host_Flush(AOAInterfaceInfo);
	#endif
}

uint8_t AOA_Host_StartAccessoryMode(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
    12d6:	3c e0       	ldi	r19, 0x0C	; 12
    12d8:	e3 2e       	mov	r14, r19
    12da:	f1 2c       	mov	r15, r1
    12dc:	e0 0e       	add	r14, r16
    12de:	f1 1e       	adc	r15, r17
    12e0:	00 e0       	ldi	r16, 0x00	; 0
    12e2:	10 e0       	ldi	r17, 0x00	; 0
	const char* String = AOAInterfaceInfo->Config.PropertyStrings[StringIndex];

	if (String == NULL)
	  String = "";

	USB_ControlRequest = (USB_Request_Header_t)
    12e4:	20 e4       	ldi	r18, 0x40	; 64
    12e6:	c2 2e       	mov	r12, r18
    12e8:	94 e3       	ldi	r25, 0x34	; 52
    12ea:	d9 2e       	mov	r13, r25
}

static uint8_t AOA_Host_SendPropertyString(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                           const uint8_t StringIndex)
{
	const char* String = AOAInterfaceInfo->Config.PropertyStrings[StringIndex];
    12ec:	f7 01       	movw	r30, r14
    12ee:	81 91       	ld	r24, Z+
    12f0:	91 91       	ld	r25, Z+
    12f2:	7f 01       	movw	r14, r30

	if (String == NULL)
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	11 f4       	brne	.+4      	; 0x12fc <AOA_Host_StartAccessoryMode+0x6c>
	  String = "";
    12f8:	86 e7       	ldi	r24, 0x76	; 118
    12fa:	91 e0       	ldi	r25, 0x01	; 1
	{
		.bmRequestType = (REQDIR_HOSTTODEVICE | REQTYPE_VENDOR | REQREC_DEVICE),
		.bRequest      = AOA_REQ_SendString,
		.wValue        = 0,
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
    12fc:	dc 01       	movw	r26, r24
    12fe:	0d 90       	ld	r0, X+
    1300:	00 20       	and	r0, r0
    1302:	e9 f7       	brne	.-6      	; 0x12fe <AOA_Host_StartAccessoryMode+0x6e>
	const char* String = AOAInterfaceInfo->Config.PropertyStrings[StringIndex];

	if (String == NULL)
	  String = "";

	USB_ControlRequest = (USB_Request_Header_t)
    1304:	c0 92 8d 01 	sts	0x018D, r12
    1308:	d0 92 8e 01 	sts	0x018E, r13
    130c:	10 92 90 01 	sts	0x0190, r1
    1310:	10 92 8f 01 	sts	0x018F, r1
    1314:	10 93 92 01 	sts	0x0192, r17
    1318:	00 93 91 01 	sts	0x0191, r16
	{
		.bmRequestType = (REQDIR_HOSTTODEVICE | REQTYPE_VENDOR | REQREC_DEVICE),
		.bRequest      = AOA_REQ_SendString,
		.wValue        = 0,
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
    131c:	a8 1b       	sub	r26, r24
    131e:	b9 0b       	sbc	r27, r25
	const char* String = AOAInterfaceInfo->Config.PropertyStrings[StringIndex];

	if (String == NULL)
	  String = "";

	USB_ControlRequest = (USB_Request_Header_t)
    1320:	b0 93 94 01 	sts	0x0194, r27
    1324:	a0 93 93 01 	sts	0x0193, r26
    1328:	10 92 a7 00 	sts	0x00A7, r1
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest((char*)String);
    132c:	89 dd       	rcall	.-1262   	; 0xe40 <USB_Host_SendControlRequest>
	if (AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV1))
	  return AOA_ERROR_LOGICAL_CMD_FAILED;

	for (uint8_t PropertyIndex = 0; PropertyIndex < AOA_STRING_TOTAL_STRINGS; PropertyIndex++)
	{
		if ((ErrorCode = AOA_Host_SendPropertyString(AOAInterfaceInfo, PropertyIndex)) != HOST_WAITERROR_Successful)
    132e:	88 23       	and	r24, r24
    1330:	a9 f4       	brne	.+42     	; 0x135c <AOA_Host_StartAccessoryMode+0xcc>
    1332:	0f 5f       	subi	r16, 0xFF	; 255
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
	  return ErrorCode;

	if (AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV1))
	  return AOA_ERROR_LOGICAL_CMD_FAILED;

	for (uint8_t PropertyIndex = 0; PropertyIndex < AOA_STRING_TOTAL_STRINGS; PropertyIndex++)
    1336:	06 30       	cpi	r16, 0x06	; 6
    1338:	11 05       	cpc	r17, r1
    133a:	c1 f6       	brne	.-80     	; 0x12ec <AOA_Host_StartAccessoryMode+0x5c>
	{
		if ((ErrorCode = AOA_Host_SendPropertyString(AOAInterfaceInfo, PropertyIndex)) != HOST_WAITERROR_Successful)
		  return ErrorCode;
	}

	USB_ControlRequest = (USB_Request_Header_t)
    133c:	ad e8       	ldi	r26, 0x8D	; 141
    133e:	b1 e0       	ldi	r27, 0x01	; 1
    1340:	e7 e7       	ldi	r30, 0x77	; 119
    1342:	f1 e0       	ldi	r31, 0x01	; 1
    1344:	88 e0       	ldi	r24, 0x08	; 8
    1346:	01 90       	ld	r0, Z+
    1348:	0d 92       	st	X+, r0
    134a:	81 50       	subi	r24, 0x01	; 1
    134c:	e1 f7       	brne	.-8      	; 0x1346 <AOA_Host_StartAccessoryMode+0xb6>
    134e:	10 92 a7 00 	sts	0x00A7, r1
		.wIndex        = 0,
		.wLength       = 0,
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(NULL);
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	74 dd       	rcall	.-1304   	; 0xe40 <USB_Host_SendControlRequest>
    1358:	01 c0       	rjmp	.+2      	; 0x135c <AOA_Host_StartAccessoryMode+0xcc>
	uint16_t AccessoryProtocol;
	if ((ErrorCode = AOA_Host_GetAccessoryProtocol(&AccessoryProtocol)) != HOST_WAITERROR_Successful)
	  return ErrorCode;

	if (AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV1))
	  return AOA_ERROR_LOGICAL_CMD_FAILED;
    135a:	80 e8       	ldi	r24, 0x80	; 128
		.wLength       = 0,
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(NULL);
}
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	ff 90       	pop	r15
    136a:	ef 90       	pop	r14
    136c:	df 90       	pop	r13
    136e:	cf 90       	pop	r12
    1370:	08 95       	ret

00001372 <AOA_Host_BytesReceived>:

	return PIPE_READYWAIT_NoError;
}

uint16_t AOA_Host_BytesReceived(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
    1372:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
    1374:	80 91 95 01 	lds	r24, 0x0195
    1378:	8b 30       	cpi	r24, 0x0B	; 11
    137a:	59 f5       	brne	.+86     	; 0x13d2 <AOA_Host_BytesReceived+0x60>
    137c:	80 8d       	ldd	r24, Z+24	; 0x18
    137e:	88 23       	and	r24, r24
    1380:	41 f1       	breq	.+80     	; 0x13d2 <AOA_Host_BytesReceived+0x60>
    1382:	80 81       	ld	r24, Z
    1384:	8f 70       	andi	r24, 0x0F	; 15
    1386:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    138a:	80 91 a9 00 	lds	r24, 0x00A9
    138e:	8f 7b       	andi	r24, 0xBF	; 191
    1390:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1394:	80 91 a6 00 	lds	r24, 0x00A6
	  return 0;

	Pipe_SelectPipe(AOAInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    1398:	80 ff       	sbrs	r24, 0
    139a:	16 c0       	rjmp	.+44     	; 0x13c8 <AOA_Host_BytesReceived+0x56>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    139c:	80 91 f6 00 	lds	r24, 0x00F6
    13a0:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (!(Pipe_BytesInPipe()))
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	31 f4       	brne	.+12     	; 0x13b4 <AOA_Host_BytesReceived+0x42>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13a8:	80 91 a6 00 	lds	r24, 0x00A6
    13ac:	8e 77       	andi	r24, 0x7E	; 126
    13ae:	80 93 a6 00 	sts	0x00A6, r24
    13b2:	0a c0       	rjmp	.+20     	; 0x13c8 <AOA_Host_BytesReceived+0x56>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13b4:	80 91 a9 00 	lds	r24, 0x00A9
    13b8:	80 64       	ori	r24, 0x40	; 64
    13ba:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13be:	20 91 f6 00 	lds	r18, 0x00F6
    13c2:	30 91 f7 00 	lds	r19, 0x00F7
			return 0;
		}
		else
		{
			Pipe_Freeze();
			return Pipe_BytesInPipe();
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <AOA_Host_BytesReceived+0x64>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13c8:	80 91 a9 00 	lds	r24, 0x00A9
    13cc:	80 64       	ori	r24, 0x40	; 64
    13ce:	80 93 a9 00 	sts	0x00A9, r24
}

uint16_t AOA_Host_BytesReceived(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return 0;
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
	{
		Pipe_Freeze();

		return 0;
	}
}
    13d6:	c9 01       	movw	r24, r18
    13d8:	08 95       	ret

000013da <AOA_Host_ReceiveByte>:

int16_t AOA_Host_ReceiveByte(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
    13da:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
    13dc:	80 91 95 01 	lds	r24, 0x0195
    13e0:	8b 30       	cpi	r24, 0x0B	; 11
    13e2:	81 f5       	brne	.+96     	; 0x1444 <AOA_Host_ReceiveByte+0x6a>
    13e4:	80 8d       	ldd	r24, Z+24	; 0x18
    13e6:	88 23       	and	r24, r24
    13e8:	69 f1       	breq	.+90     	; 0x1444 <AOA_Host_ReceiveByte+0x6a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13ea:	80 81       	ld	r24, Z
    13ec:	8f 70       	andi	r24, 0x0F	; 15
    13ee:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13f2:	80 91 a9 00 	lds	r24, 0x00A9
    13f6:	8f 7b       	andi	r24, 0xBF	; 191
    13f8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    13fc:	80 91 a6 00 	lds	r24, 0x00A6
	int16_t ReceivedByte = -1;

	Pipe_SelectPipe(AOAInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    1400:	80 ff       	sbrs	r24, 0
    1402:	18 c0       	rjmp	.+48     	; 0x1434 <AOA_Host_ReceiveByte+0x5a>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1404:	80 91 f6 00 	lds	r24, 0x00F6
    1408:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (Pipe_BytesInPipe())
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	21 f0       	breq	.+8      	; 0x1418 <AOA_Host_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1410:	20 91 af 00 	lds	r18, 0x00AF
		  ReceivedByte = Pipe_Read_8();
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <AOA_Host_ReceiveByte+0x42>
int16_t AOA_Host_ReceiveByte(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return -1;

	int16_t ReceivedByte = -1;
    1418:	2f ef       	ldi	r18, 0xFF	; 255
    141a:	3f ef       	ldi	r19, 0xFF	; 255
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    141c:	80 91 f6 00 	lds	r24, 0x00F6
    1420:	90 91 f7 00 	lds	r25, 0x00F7
	if (Pipe_IsINReceived())
	{
		if (Pipe_BytesInPipe())
		  ReceivedByte = Pipe_Read_8();

		if (!(Pipe_BytesInPipe()))
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	41 f4       	brne	.+16     	; 0x1438 <AOA_Host_ReceiveByte+0x5e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1428:	80 91 a6 00 	lds	r24, 0x00A6
    142c:	8e 77       	andi	r24, 0x7E	; 126
    142e:	80 93 a6 00 	sts	0x00A6, r24
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <AOA_Host_ReceiveByte+0x5e>
int16_t AOA_Host_ReceiveByte(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return -1;

	int16_t ReceivedByte = -1;
    1434:	2f ef       	ldi	r18, 0xFF	; 255
    1436:	3f ef       	ldi	r19, 0xFF	; 255

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1438:	80 91 a9 00 	lds	r24, 0x00A9
    143c:	80 64       	ori	r24, 0x40	; 64
    143e:	80 93 a9 00 	sts	0x00A9, r24
		  Pipe_ClearIN();
	}

	Pipe_Freeze();

	return ReceivedByte;
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <AOA_Host_ReceiveByte+0x6e>
}

int16_t AOA_Host_ReceiveByte(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return -1;
    1444:	2f ef       	ldi	r18, 0xFF	; 255
    1446:	3f ef       	ldi	r19, 0xFF	; 255
	}

	Pipe_Freeze();

	return ReceivedByte;
}
    1448:	c9 01       	movw	r24, r18
    144a:	08 95       	ret

0000144c <AOA_Host_Flush>:

uint8_t AOA_Host_Flush(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
    144c:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
    144e:	80 91 95 01 	lds	r24, 0x0195
    1452:	8b 30       	cpi	r24, 0x0B	; 11
    1454:	51 f5       	brne	.+84     	; 0x14aa <AOA_Host_Flush+0x5e>
    1456:	80 8d       	ldd	r24, Z+24	; 0x18
    1458:	88 23       	and	r24, r24
    145a:	39 f1       	breq	.+78     	; 0x14aa <AOA_Host_Flush+0x5e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    145c:	86 81       	ldd	r24, Z+6	; 0x06
    145e:	8f 70       	andi	r24, 0x0F	; 15
    1460:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1464:	80 91 a9 00 	lds	r24, 0x00A9
    1468:	8f 7b       	andi	r24, 0xBF	; 191
    146a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    146e:	80 91 f6 00 	lds	r24, 0x00F6
    1472:	90 91 f7 00 	lds	r25, 0x00F7
	uint8_t ErrorCode;

	Pipe_SelectPipe(AOAInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	d1 f0       	breq	.+52     	; 0x14ae <AOA_Host_Flush+0x62>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    147a:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    147e:	80 91 a6 00 	lds	r24, 0x00A6
    1482:	8b 77       	andi	r24, 0x7B	; 123
    1484:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    1488:	95 fd       	sbrc	r25, 5
    148a:	08 c0       	rjmp	.+16     	; 0x149c <AOA_Host_Flush+0x50>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    148c:	d0 da       	rcall	.-2656   	; 0xa2e <Pipe_WaitUntilReady>
    148e:	88 23       	and	r24, r24
    1490:	79 f4       	brne	.+30     	; 0x14b0 <AOA_Host_Flush+0x64>
    1492:	80 91 a6 00 	lds	r24, 0x00A6
    1496:	8b 77       	andi	r24, 0x7B	; 123
    1498:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    149c:	80 91 a9 00 	lds	r24, 0x00A9
    14a0:	80 64       	ori	r24, 0x40	; 64
    14a2:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearOUT();
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	08 95       	ret
}

uint8_t AOA_Host_Flush(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    14aa:	82 e0       	ldi	r24, 0x02	; 2
    14ac:	08 95       	ret

	Pipe_SelectPipe(AOAInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
	  return PIPE_READYWAIT_NoError;
    14ae:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
}
    14b0:	08 95       	ret

000014b2 <AOA_Host_USBTask>:
	return DESCRIPTOR_SEARCH_NotFound;
}

void AOA_Host_USBTask(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
    14b2:	20 91 95 01 	lds	r18, 0x0195
    14b6:	2b 30       	cpi	r18, 0x0B	; 11
    14b8:	29 f4       	brne	.+10     	; 0x14c4 <AOA_Host_USBTask+0x12>
    14ba:	fc 01       	movw	r30, r24
    14bc:	20 8d       	ldd	r18, Z+24	; 0x18
    14be:	22 23       	and	r18, r18
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <AOA_Host_USBTask+0x12>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	AOA_Host_Flush(AOAInterfaceInfo);
    14c2:	c4 cf       	rjmp	.-120    	; 0x144c <AOA_Host_Flush>
    14c4:	08 95       	ret

000014c6 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    14c6:	90 91 c8 00 	lds	r25, 0x00C8
    14ca:	95 ff       	sbrs	r25, 5
    14cc:	fc cf       	rjmp	.-8      	; 0x14c6 <Serial_putchar>
				UDR1 = DataByte;
    14ce:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	08 95       	ret

000014d8 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    14d8:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    14dc:	87 ff       	sbrs	r24, 7
    14de:	08 c0       	rjmp	.+16     	; 0x14f0 <Serial_getchar+0x18>
    14e0:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    14e4:	87 ff       	sbrs	r24, 7
    14e6:	07 c0       	rjmp	.+14     	; 0x14f6 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    14e8:	20 91 ce 00 	lds	r18, 0x00CE
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	05 c0       	rjmp	.+10     	; 0x14fa <Serial_getchar+0x22>
	  return _FDEV_EOF;
    14f0:	2e ef       	ldi	r18, 0xFE	; 254
    14f2:	3f ef       	ldi	r19, 0xFF	; 255
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    14f6:	2f ef       	ldi	r18, 0xFF	; 255
    14f8:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    14fa:	c9 01       	movw	r24, r18
    14fc:	08 95       	ret

000014fe <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    14fe:	fc 01       	movw	r30, r24
	if (!(Stream))
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	51 f4       	brne	.+20     	; 0x1518 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1504:	e6 e9       	ldi	r30, 0x96	; 150
    1506:	f1 e0       	ldi	r31, 0x01	; 1
    1508:	f0 93 a5 01 	sts	0x01A5, r31
    150c:	e0 93 a4 01 	sts	0x01A4, r30
		stdout = Stream;
    1510:	f0 93 a7 01 	sts	0x01A7, r31
    1514:	e0 93 a6 01 	sts	0x01A6, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1518:	8e e0       	ldi	r24, 0x0E	; 14
    151a:	df 01       	movw	r26, r30
    151c:	1d 92       	st	X+, r1
    151e:	8a 95       	dec	r24
    1520:	e9 f7       	brne	.-6      	; 0x151c <Serial_CreateStream+0x1e>
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	83 83       	std	Z+3, r24	; 0x03
    1526:	83 e6       	ldi	r24, 0x63	; 99
    1528:	9a e0       	ldi	r25, 0x0A	; 10
    152a:	91 87       	std	Z+9, r25	; 0x09
    152c:	80 87       	std	Z+8, r24	; 0x08
    152e:	8c e6       	ldi	r24, 0x6C	; 108
    1530:	9a e0       	ldi	r25, 0x0A	; 10
    1532:	93 87       	std	Z+11, r25	; 0x0b
    1534:	82 87       	std	Z+10, r24	; 0x0a
}
    1536:	08 95       	ret

00001538 <fputc>:
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	8c 01       	movw	r16, r24
    1542:	eb 01       	movw	r28, r22
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	81 ff       	sbrs	r24, 1
    1548:	1b c0       	rjmp	.+54     	; 0x1580 <fputc+0x48>
    154a:	82 ff       	sbrs	r24, 2
    154c:	0d c0       	rjmp	.+26     	; 0x1568 <fputc+0x30>
    154e:	2e 81       	ldd	r18, Y+6	; 0x06
    1550:	3f 81       	ldd	r19, Y+7	; 0x07
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	9d 81       	ldd	r25, Y+5	; 0x05
    1556:	28 17       	cp	r18, r24
    1558:	39 07       	cpc	r19, r25
    155a:	64 f4       	brge	.+24     	; 0x1574 <fputc+0x3c>
    155c:	e8 81       	ld	r30, Y
    155e:	f9 81       	ldd	r31, Y+1	; 0x01
    1560:	01 93       	st	Z+, r16
    1562:	f9 83       	std	Y+1, r31	; 0x01
    1564:	e8 83       	st	Y, r30
    1566:	06 c0       	rjmp	.+12     	; 0x1574 <fputc+0x3c>
    1568:	e8 85       	ldd	r30, Y+8	; 0x08
    156a:	f9 85       	ldd	r31, Y+9	; 0x09
    156c:	80 2f       	mov	r24, r16
    156e:	09 95       	icall
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	31 f4       	brne	.+12     	; 0x1580 <fputc+0x48>
    1574:	8e 81       	ldd	r24, Y+6	; 0x06
    1576:	9f 81       	ldd	r25, Y+7	; 0x07
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	9f 83       	std	Y+7, r25	; 0x07
    157c:	8e 83       	std	Y+6, r24	; 0x06
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <fputc+0x4c>
    1580:	0f ef       	ldi	r16, 0xFF	; 255
    1582:	1f ef       	ldi	r17, 0xFF	; 255
    1584:	c8 01       	movw	r24, r16
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	08 95       	ret

00001590 <printf_P>:
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	fe 01       	movw	r30, r28
    159a:	35 96       	adiw	r30, 0x05	; 5
    159c:	61 91       	ld	r22, Z+
    159e:	71 91       	ld	r23, Z+
    15a0:	80 91 a6 01 	lds	r24, 0x01A6
    15a4:	90 91 a7 01 	lds	r25, 0x01A7
    15a8:	dc 01       	movw	r26, r24
    15aa:	13 96       	adiw	r26, 0x03	; 3
    15ac:	2c 91       	ld	r18, X
    15ae:	13 97       	sbiw	r26, 0x03	; 3
    15b0:	28 60       	ori	r18, 0x08	; 8
    15b2:	13 96       	adiw	r26, 0x03	; 3
    15b4:	2c 93       	st	X, r18
    15b6:	af 01       	movw	r20, r30
    15b8:	42 d0       	rcall	.+132    	; 0x163e <vfprintf>
    15ba:	e0 91 a6 01 	lds	r30, 0x01A6
    15be:	f0 91 a7 01 	lds	r31, 0x01A7
    15c2:	23 81       	ldd	r18, Z+3	; 0x03
    15c4:	27 7f       	andi	r18, 0xF7	; 247
    15c6:	23 83       	std	Z+3, r18	; 0x03
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <puts_P>:
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	8c 01       	movw	r16, r24
    15dc:	e0 91 a6 01 	lds	r30, 0x01A6
    15e0:	f0 91 a7 01 	lds	r31, 0x01A7
    15e4:	83 81       	ldd	r24, Z+3	; 0x03
    15e6:	81 ff       	sbrs	r24, 1
    15e8:	20 c0       	rjmp	.+64     	; 0x162a <puts_P+0x5c>
    15ea:	c0 e0       	ldi	r28, 0x00	; 0
    15ec:	d0 e0       	ldi	r29, 0x00	; 0
    15ee:	0c c0       	rjmp	.+24     	; 0x1608 <puts_P+0x3a>
    15f0:	db 01       	movw	r26, r22
    15f2:	18 96       	adiw	r26, 0x08	; 8
    15f4:	ed 91       	ld	r30, X+
    15f6:	fc 91       	ld	r31, X
    15f8:	19 97       	sbiw	r26, 0x09	; 9
    15fa:	09 95       	icall
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	11 f0       	breq	.+4      	; 0x1604 <puts_P+0x36>
    1600:	cf ef       	ldi	r28, 0xFF	; 255
    1602:	df ef       	ldi	r29, 0xFF	; 255
    1604:	0f 5f       	subi	r16, 0xFF	; 255
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	f8 01       	movw	r30, r16
    160a:	84 91       	lpm	r24, Z+
    160c:	60 91 a6 01 	lds	r22, 0x01A6
    1610:	70 91 a7 01 	lds	r23, 0x01A7
    1614:	88 23       	and	r24, r24
    1616:	61 f7       	brne	.-40     	; 0x15f0 <puts_P+0x22>
    1618:	db 01       	movw	r26, r22
    161a:	18 96       	adiw	r26, 0x08	; 8
    161c:	ed 91       	ld	r30, X+
    161e:	fc 91       	ld	r31, X
    1620:	19 97       	sbiw	r26, 0x09	; 9
    1622:	8a e0       	ldi	r24, 0x0A	; 10
    1624:	09 95       	icall
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	11 f0       	breq	.+4      	; 0x162e <puts_P+0x60>
    162a:	cf ef       	ldi	r28, 0xFF	; 255
    162c:	df ef       	ldi	r29, 0xFF	; 255
    162e:	ce 01       	movw	r24, r28
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	08 95       	ret

0000163e <vfprintf>:
    163e:	2f 92       	push	r2
    1640:	3f 92       	push	r3
    1642:	4f 92       	push	r4
    1644:	5f 92       	push	r5
    1646:	6f 92       	push	r6
    1648:	7f 92       	push	r7
    164a:	8f 92       	push	r8
    164c:	9f 92       	push	r9
    164e:	af 92       	push	r10
    1650:	bf 92       	push	r11
    1652:	cf 92       	push	r12
    1654:	df 92       	push	r13
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	2c 97       	sbiw	r28, 0x0c	; 12
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	6c 01       	movw	r12, r24
    1674:	1b 01       	movw	r2, r22
    1676:	8a 01       	movw	r16, r20
    1678:	fc 01       	movw	r30, r24
    167a:	17 82       	std	Z+7, r1	; 0x07
    167c:	16 82       	std	Z+6, r1	; 0x06
    167e:	83 81       	ldd	r24, Z+3	; 0x03
    1680:	81 ff       	sbrs	r24, 1
    1682:	c4 c1       	rjmp	.+904    	; 0x1a0c <vfprintf+0x3ce>
    1684:	2e 01       	movw	r4, r28
    1686:	08 94       	sec
    1688:	41 1c       	adc	r4, r1
    168a:	51 1c       	adc	r5, r1
    168c:	f6 01       	movw	r30, r12
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	f1 01       	movw	r30, r2
    1692:	93 fd       	sbrc	r25, 3
    1694:	85 91       	lpm	r24, Z+
    1696:	93 ff       	sbrs	r25, 3
    1698:	81 91       	ld	r24, Z+
    169a:	1f 01       	movw	r2, r30
    169c:	88 23       	and	r24, r24
    169e:	09 f4       	brne	.+2      	; 0x16a2 <vfprintf+0x64>
    16a0:	b1 c1       	rjmp	.+866    	; 0x1a04 <vfprintf+0x3c6>
    16a2:	85 32       	cpi	r24, 0x25	; 37
    16a4:	39 f4       	brne	.+14     	; 0x16b4 <vfprintf+0x76>
    16a6:	93 fd       	sbrc	r25, 3
    16a8:	85 91       	lpm	r24, Z+
    16aa:	93 ff       	sbrs	r25, 3
    16ac:	81 91       	ld	r24, Z+
    16ae:	1f 01       	movw	r2, r30
    16b0:	85 32       	cpi	r24, 0x25	; 37
    16b2:	21 f4       	brne	.+8      	; 0x16bc <vfprintf+0x7e>
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	b6 01       	movw	r22, r12
    16b8:	3f df       	rcall	.-386    	; 0x1538 <fputc>
    16ba:	e8 cf       	rjmp	.-48     	; 0x168c <vfprintf+0x4e>
    16bc:	ee 24       	eor	r14, r14
    16be:	ff 24       	eor	r15, r15
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	20 32       	cpi	r18, 0x20	; 32
    16c4:	b0 f4       	brcc	.+44     	; 0x16f2 <vfprintf+0xb4>
    16c6:	8b 32       	cpi	r24, 0x2B	; 43
    16c8:	69 f0       	breq	.+26     	; 0x16e4 <vfprintf+0xa6>
    16ca:	8c 32       	cpi	r24, 0x2C	; 44
    16cc:	28 f4       	brcc	.+10     	; 0x16d8 <vfprintf+0x9a>
    16ce:	80 32       	cpi	r24, 0x20	; 32
    16d0:	51 f0       	breq	.+20     	; 0x16e6 <vfprintf+0xa8>
    16d2:	83 32       	cpi	r24, 0x23	; 35
    16d4:	71 f4       	brne	.+28     	; 0x16f2 <vfprintf+0xb4>
    16d6:	0b c0       	rjmp	.+22     	; 0x16ee <vfprintf+0xb0>
    16d8:	8d 32       	cpi	r24, 0x2D	; 45
    16da:	39 f0       	breq	.+14     	; 0x16ea <vfprintf+0xac>
    16dc:	80 33       	cpi	r24, 0x30	; 48
    16de:	49 f4       	brne	.+18     	; 0x16f2 <vfprintf+0xb4>
    16e0:	21 60       	ori	r18, 0x01	; 1
    16e2:	2c c0       	rjmp	.+88     	; 0x173c <vfprintf+0xfe>
    16e4:	22 60       	ori	r18, 0x02	; 2
    16e6:	24 60       	ori	r18, 0x04	; 4
    16e8:	29 c0       	rjmp	.+82     	; 0x173c <vfprintf+0xfe>
    16ea:	28 60       	ori	r18, 0x08	; 8
    16ec:	27 c0       	rjmp	.+78     	; 0x173c <vfprintf+0xfe>
    16ee:	20 61       	ori	r18, 0x10	; 16
    16f0:	25 c0       	rjmp	.+74     	; 0x173c <vfprintf+0xfe>
    16f2:	27 fd       	sbrc	r18, 7
    16f4:	2c c0       	rjmp	.+88     	; 0x174e <vfprintf+0x110>
    16f6:	38 2f       	mov	r19, r24
    16f8:	30 53       	subi	r19, 0x30	; 48
    16fa:	3a 30       	cpi	r19, 0x0A	; 10
    16fc:	98 f4       	brcc	.+38     	; 0x1724 <vfprintf+0xe6>
    16fe:	26 ff       	sbrs	r18, 6
    1700:	08 c0       	rjmp	.+16     	; 0x1712 <vfprintf+0xd4>
    1702:	8e 2d       	mov	r24, r14
    1704:	88 0f       	add	r24, r24
    1706:	e8 2e       	mov	r14, r24
    1708:	ee 0c       	add	r14, r14
    170a:	ee 0c       	add	r14, r14
    170c:	e8 0e       	add	r14, r24
    170e:	e3 0e       	add	r14, r19
    1710:	15 c0       	rjmp	.+42     	; 0x173c <vfprintf+0xfe>
    1712:	8f 2d       	mov	r24, r15
    1714:	88 0f       	add	r24, r24
    1716:	f8 2e       	mov	r15, r24
    1718:	ff 0c       	add	r15, r15
    171a:	ff 0c       	add	r15, r15
    171c:	f8 0e       	add	r15, r24
    171e:	f3 0e       	add	r15, r19
    1720:	20 62       	ori	r18, 0x20	; 32
    1722:	0c c0       	rjmp	.+24     	; 0x173c <vfprintf+0xfe>
    1724:	8e 32       	cpi	r24, 0x2E	; 46
    1726:	21 f4       	brne	.+8      	; 0x1730 <vfprintf+0xf2>
    1728:	26 fd       	sbrc	r18, 6
    172a:	6c c1       	rjmp	.+728    	; 0x1a04 <vfprintf+0x3c6>
    172c:	20 64       	ori	r18, 0x40	; 64
    172e:	06 c0       	rjmp	.+12     	; 0x173c <vfprintf+0xfe>
    1730:	8c 36       	cpi	r24, 0x6C	; 108
    1732:	11 f4       	brne	.+4      	; 0x1738 <vfprintf+0xfa>
    1734:	20 68       	ori	r18, 0x80	; 128
    1736:	02 c0       	rjmp	.+4      	; 0x173c <vfprintf+0xfe>
    1738:	88 36       	cpi	r24, 0x68	; 104
    173a:	49 f4       	brne	.+18     	; 0x174e <vfprintf+0x110>
    173c:	f1 01       	movw	r30, r2
    173e:	93 fd       	sbrc	r25, 3
    1740:	85 91       	lpm	r24, Z+
    1742:	93 ff       	sbrs	r25, 3
    1744:	81 91       	ld	r24, Z+
    1746:	1f 01       	movw	r2, r30
    1748:	88 23       	and	r24, r24
    174a:	09 f0       	breq	.+2      	; 0x174e <vfprintf+0x110>
    174c:	ba cf       	rjmp	.-140    	; 0x16c2 <vfprintf+0x84>
    174e:	98 2f       	mov	r25, r24
    1750:	95 54       	subi	r25, 0x45	; 69
    1752:	93 30       	cpi	r25, 0x03	; 3
    1754:	18 f0       	brcs	.+6      	; 0x175c <vfprintf+0x11e>
    1756:	90 52       	subi	r25, 0x20	; 32
    1758:	93 30       	cpi	r25, 0x03	; 3
    175a:	28 f4       	brcc	.+10     	; 0x1766 <vfprintf+0x128>
    175c:	0c 5f       	subi	r16, 0xFC	; 252
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	ff e3       	ldi	r31, 0x3F	; 63
    1762:	f9 83       	std	Y+1, r31	; 0x01
    1764:	0d c0       	rjmp	.+26     	; 0x1780 <vfprintf+0x142>
    1766:	83 36       	cpi	r24, 0x63	; 99
    1768:	31 f0       	breq	.+12     	; 0x1776 <vfprintf+0x138>
    176a:	83 37       	cpi	r24, 0x73	; 115
    176c:	71 f0       	breq	.+28     	; 0x178a <vfprintf+0x14c>
    176e:	83 35       	cpi	r24, 0x53	; 83
    1770:	09 f0       	breq	.+2      	; 0x1774 <vfprintf+0x136>
    1772:	5c c0       	rjmp	.+184    	; 0x182c <vfprintf+0x1ee>
    1774:	21 c0       	rjmp	.+66     	; 0x17b8 <vfprintf+0x17a>
    1776:	f8 01       	movw	r30, r16
    1778:	80 81       	ld	r24, Z
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	0e 5f       	subi	r16, 0xFE	; 254
    177e:	1f 4f       	sbci	r17, 0xFF	; 255
    1780:	42 01       	movw	r8, r4
    1782:	71 e0       	ldi	r23, 0x01	; 1
    1784:	a7 2e       	mov	r10, r23
    1786:	b1 2c       	mov	r11, r1
    1788:	15 c0       	rjmp	.+42     	; 0x17b4 <vfprintf+0x176>
    178a:	62 e0       	ldi	r22, 0x02	; 2
    178c:	66 2e       	mov	r6, r22
    178e:	71 2c       	mov	r7, r1
    1790:	60 0e       	add	r6, r16
    1792:	71 1e       	adc	r7, r17
    1794:	f8 01       	movw	r30, r16
    1796:	80 80       	ld	r8, Z
    1798:	91 80       	ldd	r9, Z+1	; 0x01
    179a:	26 ff       	sbrs	r18, 6
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <vfprintf+0x166>
    179e:	6e 2d       	mov	r22, r14
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <vfprintf+0x16a>
    17a4:	6f ef       	ldi	r22, 0xFF	; 255
    17a6:	7f ef       	ldi	r23, 0xFF	; 255
    17a8:	c4 01       	movw	r24, r8
    17aa:	2c 87       	std	Y+12, r18	; 0x0c
    17ac:	56 d1       	rcall	.+684    	; 0x1a5a <strnlen>
    17ae:	5c 01       	movw	r10, r24
    17b0:	83 01       	movw	r16, r6
    17b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    17b4:	2f 77       	andi	r18, 0x7F	; 127
    17b6:	16 c0       	rjmp	.+44     	; 0x17e4 <vfprintf+0x1a6>
    17b8:	52 e0       	ldi	r21, 0x02	; 2
    17ba:	65 2e       	mov	r6, r21
    17bc:	71 2c       	mov	r7, r1
    17be:	60 0e       	add	r6, r16
    17c0:	71 1e       	adc	r7, r17
    17c2:	f8 01       	movw	r30, r16
    17c4:	80 80       	ld	r8, Z
    17c6:	91 80       	ldd	r9, Z+1	; 0x01
    17c8:	26 ff       	sbrs	r18, 6
    17ca:	03 c0       	rjmp	.+6      	; 0x17d2 <vfprintf+0x194>
    17cc:	6e 2d       	mov	r22, r14
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <vfprintf+0x198>
    17d2:	6f ef       	ldi	r22, 0xFF	; 255
    17d4:	7f ef       	ldi	r23, 0xFF	; 255
    17d6:	c4 01       	movw	r24, r8
    17d8:	2c 87       	std	Y+12, r18	; 0x0c
    17da:	34 d1       	rcall	.+616    	; 0x1a44 <strnlen_P>
    17dc:	5c 01       	movw	r10, r24
    17de:	2c 85       	ldd	r18, Y+12	; 0x0c
    17e0:	20 68       	ori	r18, 0x80	; 128
    17e2:	83 01       	movw	r16, r6
    17e4:	23 fd       	sbrc	r18, 3
    17e6:	1e c0       	rjmp	.+60     	; 0x1824 <vfprintf+0x1e6>
    17e8:	07 c0       	rjmp	.+14     	; 0x17f8 <vfprintf+0x1ba>
    17ea:	80 e2       	ldi	r24, 0x20	; 32
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	b6 01       	movw	r22, r12
    17f0:	2c 87       	std	Y+12, r18	; 0x0c
    17f2:	a2 de       	rcall	.-700    	; 0x1538 <fputc>
    17f4:	fa 94       	dec	r15
    17f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    17f8:	8f 2d       	mov	r24, r15
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a8 16       	cp	r10, r24
    17fe:	b9 06       	cpc	r11, r25
    1800:	a0 f3       	brcs	.-24     	; 0x17ea <vfprintf+0x1ac>
    1802:	10 c0       	rjmp	.+32     	; 0x1824 <vfprintf+0x1e6>
    1804:	f4 01       	movw	r30, r8
    1806:	27 fd       	sbrc	r18, 7
    1808:	85 91       	lpm	r24, Z+
    180a:	27 ff       	sbrs	r18, 7
    180c:	81 91       	ld	r24, Z+
    180e:	4f 01       	movw	r8, r30
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	b6 01       	movw	r22, r12
    1814:	2c 87       	std	Y+12, r18	; 0x0c
    1816:	90 de       	rcall	.-736    	; 0x1538 <fputc>
    1818:	2c 85       	ldd	r18, Y+12	; 0x0c
    181a:	f1 10       	cpse	r15, r1
    181c:	fa 94       	dec	r15
    181e:	08 94       	sec
    1820:	a1 08       	sbc	r10, r1
    1822:	b1 08       	sbc	r11, r1
    1824:	a1 14       	cp	r10, r1
    1826:	b1 04       	cpc	r11, r1
    1828:	69 f7       	brne	.-38     	; 0x1804 <vfprintf+0x1c6>
    182a:	e9 c0       	rjmp	.+466    	; 0x19fe <vfprintf+0x3c0>
    182c:	84 36       	cpi	r24, 0x64	; 100
    182e:	11 f0       	breq	.+4      	; 0x1834 <vfprintf+0x1f6>
    1830:	89 36       	cpi	r24, 0x69	; 105
    1832:	41 f5       	brne	.+80     	; 0x1884 <vfprintf+0x246>
    1834:	27 ff       	sbrs	r18, 7
    1836:	08 c0       	rjmp	.+16     	; 0x1848 <vfprintf+0x20a>
    1838:	f8 01       	movw	r30, r16
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	0c 5f       	subi	r16, 0xFC	; 252
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	09 c0       	rjmp	.+18     	; 0x185a <vfprintf+0x21c>
    1848:	f8 01       	movw	r30, r16
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	88 27       	eor	r24, r24
    1850:	77 fd       	sbrc	r23, 7
    1852:	80 95       	com	r24
    1854:	98 2f       	mov	r25, r24
    1856:	0e 5f       	subi	r16, 0xFE	; 254
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
    185a:	4f e6       	ldi	r20, 0x6F	; 111
    185c:	b4 2e       	mov	r11, r20
    185e:	b2 22       	and	r11, r18
    1860:	97 ff       	sbrs	r25, 7
    1862:	09 c0       	rjmp	.+18     	; 0x1876 <vfprintf+0x238>
    1864:	90 95       	com	r25
    1866:	80 95       	com	r24
    1868:	70 95       	com	r23
    186a:	61 95       	neg	r22
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	8f 4f       	sbci	r24, 0xFF	; 255
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	f0 e8       	ldi	r31, 0x80	; 128
    1874:	bf 2a       	or	r11, r31
    1876:	a2 01       	movw	r20, r4
    1878:	2a e0       	ldi	r18, 0x0A	; 10
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	f9 d0       	rcall	.+498    	; 0x1a70 <__ultoa_invert>
    187e:	78 2e       	mov	r7, r24
    1880:	74 18       	sub	r7, r4
    1882:	44 c0       	rjmp	.+136    	; 0x190c <vfprintf+0x2ce>
    1884:	85 37       	cpi	r24, 0x75	; 117
    1886:	31 f4       	brne	.+12     	; 0x1894 <vfprintf+0x256>
    1888:	3f ee       	ldi	r19, 0xEF	; 239
    188a:	b3 2e       	mov	r11, r19
    188c:	b2 22       	and	r11, r18
    188e:	2a e0       	ldi	r18, 0x0A	; 10
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	25 c0       	rjmp	.+74     	; 0x18de <vfprintf+0x2a0>
    1894:	99 ef       	ldi	r25, 0xF9	; 249
    1896:	b9 2e       	mov	r11, r25
    1898:	b2 22       	and	r11, r18
    189a:	8f 36       	cpi	r24, 0x6F	; 111
    189c:	c1 f0       	breq	.+48     	; 0x18ce <vfprintf+0x290>
    189e:	80 37       	cpi	r24, 0x70	; 112
    18a0:	20 f4       	brcc	.+8      	; 0x18aa <vfprintf+0x26c>
    18a2:	88 35       	cpi	r24, 0x58	; 88
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <vfprintf+0x26a>
    18a6:	ae c0       	rjmp	.+348    	; 0x1a04 <vfprintf+0x3c6>
    18a8:	0d c0       	rjmp	.+26     	; 0x18c4 <vfprintf+0x286>
    18aa:	80 37       	cpi	r24, 0x70	; 112
    18ac:	21 f0       	breq	.+8      	; 0x18b6 <vfprintf+0x278>
    18ae:	88 37       	cpi	r24, 0x78	; 120
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <vfprintf+0x276>
    18b2:	a8 c0       	rjmp	.+336    	; 0x1a04 <vfprintf+0x3c6>
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <vfprintf+0x27c>
    18b6:	20 e1       	ldi	r18, 0x10	; 16
    18b8:	b2 2a       	or	r11, r18
    18ba:	b4 fe       	sbrs	r11, 4
    18bc:	0b c0       	rjmp	.+22     	; 0x18d4 <vfprintf+0x296>
    18be:	84 e0       	ldi	r24, 0x04	; 4
    18c0:	b8 2a       	or	r11, r24
    18c2:	08 c0       	rjmp	.+16     	; 0x18d4 <vfprintf+0x296>
    18c4:	b4 fe       	sbrs	r11, 4
    18c6:	09 c0       	rjmp	.+18     	; 0x18da <vfprintf+0x29c>
    18c8:	e6 e0       	ldi	r30, 0x06	; 6
    18ca:	be 2a       	or	r11, r30
    18cc:	06 c0       	rjmp	.+12     	; 0x18da <vfprintf+0x29c>
    18ce:	28 e0       	ldi	r18, 0x08	; 8
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	05 c0       	rjmp	.+10     	; 0x18de <vfprintf+0x2a0>
    18d4:	20 e1       	ldi	r18, 0x10	; 16
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0x2a0>
    18da:	20 e1       	ldi	r18, 0x10	; 16
    18dc:	32 e0       	ldi	r19, 0x02	; 2
    18de:	b7 fe       	sbrs	r11, 7
    18e0:	08 c0       	rjmp	.+16     	; 0x18f2 <vfprintf+0x2b4>
    18e2:	f8 01       	movw	r30, r16
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	0c 5f       	subi	r16, 0xFC	; 252
    18ee:	1f 4f       	sbci	r17, 0xFF	; 255
    18f0:	07 c0       	rjmp	.+14     	; 0x1900 <vfprintf+0x2c2>
    18f2:	f8 01       	movw	r30, r16
    18f4:	60 81       	ld	r22, Z
    18f6:	71 81       	ldd	r23, Z+1	; 0x01
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 5f       	subi	r16, 0xFE	; 254
    18fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1900:	a2 01       	movw	r20, r4
    1902:	b6 d0       	rcall	.+364    	; 0x1a70 <__ultoa_invert>
    1904:	78 2e       	mov	r7, r24
    1906:	74 18       	sub	r7, r4
    1908:	ff e7       	ldi	r31, 0x7F	; 127
    190a:	bf 22       	and	r11, r31
    190c:	b6 fe       	sbrs	r11, 6
    190e:	0b c0       	rjmp	.+22     	; 0x1926 <vfprintf+0x2e8>
    1910:	2e ef       	ldi	r18, 0xFE	; 254
    1912:	b2 22       	and	r11, r18
    1914:	7e 14       	cp	r7, r14
    1916:	38 f4       	brcc	.+14     	; 0x1926 <vfprintf+0x2e8>
    1918:	b4 fe       	sbrs	r11, 4
    191a:	07 c0       	rjmp	.+14     	; 0x192a <vfprintf+0x2ec>
    191c:	b2 fc       	sbrc	r11, 2
    191e:	05 c0       	rjmp	.+10     	; 0x192a <vfprintf+0x2ec>
    1920:	8f ee       	ldi	r24, 0xEF	; 239
    1922:	b8 22       	and	r11, r24
    1924:	02 c0       	rjmp	.+4      	; 0x192a <vfprintf+0x2ec>
    1926:	a7 2c       	mov	r10, r7
    1928:	01 c0       	rjmp	.+2      	; 0x192c <vfprintf+0x2ee>
    192a:	ae 2c       	mov	r10, r14
    192c:	8b 2d       	mov	r24, r11
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	b4 fe       	sbrs	r11, 4
    1932:	0d c0       	rjmp	.+26     	; 0x194e <vfprintf+0x310>
    1934:	fe 01       	movw	r30, r28
    1936:	e7 0d       	add	r30, r7
    1938:	f1 1d       	adc	r31, r1
    193a:	20 81       	ld	r18, Z
    193c:	20 33       	cpi	r18, 0x30	; 48
    193e:	19 f4       	brne	.+6      	; 0x1946 <vfprintf+0x308>
    1940:	e9 ee       	ldi	r30, 0xE9	; 233
    1942:	be 22       	and	r11, r30
    1944:	09 c0       	rjmp	.+18     	; 0x1958 <vfprintf+0x31a>
    1946:	a3 94       	inc	r10
    1948:	b2 fe       	sbrs	r11, 2
    194a:	06 c0       	rjmp	.+12     	; 0x1958 <vfprintf+0x31a>
    194c:	04 c0       	rjmp	.+8      	; 0x1956 <vfprintf+0x318>
    194e:	86 78       	andi	r24, 0x86	; 134
    1950:	90 70       	andi	r25, 0x00	; 0
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	09 f0       	breq	.+2      	; 0x1958 <vfprintf+0x31a>
    1956:	a3 94       	inc	r10
    1958:	8b 2c       	mov	r8, r11
    195a:	99 24       	eor	r9, r9
    195c:	b3 fc       	sbrc	r11, 3
    195e:	13 c0       	rjmp	.+38     	; 0x1986 <vfprintf+0x348>
    1960:	b0 fe       	sbrs	r11, 0
    1962:	0e c0       	rjmp	.+28     	; 0x1980 <vfprintf+0x342>
    1964:	af 14       	cp	r10, r15
    1966:	28 f4       	brcc	.+10     	; 0x1972 <vfprintf+0x334>
    1968:	e7 2c       	mov	r14, r7
    196a:	ef 0c       	add	r14, r15
    196c:	ea 18       	sub	r14, r10
    196e:	af 2c       	mov	r10, r15
    1970:	07 c0       	rjmp	.+14     	; 0x1980 <vfprintf+0x342>
    1972:	e7 2c       	mov	r14, r7
    1974:	05 c0       	rjmp	.+10     	; 0x1980 <vfprintf+0x342>
    1976:	80 e2       	ldi	r24, 0x20	; 32
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	b6 01       	movw	r22, r12
    197c:	dd dd       	rcall	.-1094   	; 0x1538 <fputc>
    197e:	a3 94       	inc	r10
    1980:	af 14       	cp	r10, r15
    1982:	c8 f3       	brcs	.-14     	; 0x1976 <vfprintf+0x338>
    1984:	04 c0       	rjmp	.+8      	; 0x198e <vfprintf+0x350>
    1986:	af 14       	cp	r10, r15
    1988:	10 f4       	brcc	.+4      	; 0x198e <vfprintf+0x350>
    198a:	fa 18       	sub	r15, r10
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <vfprintf+0x352>
    198e:	ff 24       	eor	r15, r15
    1990:	84 fe       	sbrs	r8, 4
    1992:	0e c0       	rjmp	.+28     	; 0x19b0 <vfprintf+0x372>
    1994:	80 e3       	ldi	r24, 0x30	; 48
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	b6 01       	movw	r22, r12
    199a:	ce dd       	rcall	.-1124   	; 0x1538 <fputc>
    199c:	82 fe       	sbrs	r8, 2
    199e:	1d c0       	rjmp	.+58     	; 0x19da <vfprintf+0x39c>
    19a0:	81 fe       	sbrs	r8, 1
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <vfprintf+0x36c>
    19a4:	88 e5       	ldi	r24, 0x58	; 88
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	10 c0       	rjmp	.+32     	; 0x19ca <vfprintf+0x38c>
    19aa:	88 e7       	ldi	r24, 0x78	; 120
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0d c0       	rjmp	.+26     	; 0x19ca <vfprintf+0x38c>
    19b0:	c4 01       	movw	r24, r8
    19b2:	86 78       	andi	r24, 0x86	; 134
    19b4:	90 70       	andi	r25, 0x00	; 0
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	81 f0       	breq	.+32     	; 0x19da <vfprintf+0x39c>
    19ba:	81 fc       	sbrc	r8, 1
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <vfprintf+0x384>
    19be:	80 e2       	ldi	r24, 0x20	; 32
    19c0:	01 c0       	rjmp	.+2      	; 0x19c4 <vfprintf+0x386>
    19c2:	8b e2       	ldi	r24, 0x2B	; 43
    19c4:	b7 fc       	sbrc	r11, 7
    19c6:	8d e2       	ldi	r24, 0x2D	; 45
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	b6 01       	movw	r22, r12
    19cc:	b5 dd       	rcall	.-1174   	; 0x1538 <fputc>
    19ce:	05 c0       	rjmp	.+10     	; 0x19da <vfprintf+0x39c>
    19d0:	80 e3       	ldi	r24, 0x30	; 48
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	b6 01       	movw	r22, r12
    19d6:	b0 dd       	rcall	.-1184   	; 0x1538 <fputc>
    19d8:	ea 94       	dec	r14
    19da:	7e 14       	cp	r7, r14
    19dc:	c8 f3       	brcs	.-14     	; 0x19d0 <vfprintf+0x392>
    19de:	7a 94       	dec	r7
    19e0:	f2 01       	movw	r30, r4
    19e2:	e7 0d       	add	r30, r7
    19e4:	f1 1d       	adc	r31, r1
    19e6:	80 81       	ld	r24, Z
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	b6 01       	movw	r22, r12
    19ec:	a5 dd       	rcall	.-1206   	; 0x1538 <fputc>
    19ee:	77 20       	and	r7, r7
    19f0:	b1 f7       	brne	.-20     	; 0x19de <vfprintf+0x3a0>
    19f2:	05 c0       	rjmp	.+10     	; 0x19fe <vfprintf+0x3c0>
    19f4:	80 e2       	ldi	r24, 0x20	; 32
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	b6 01       	movw	r22, r12
    19fa:	9e dd       	rcall	.-1220   	; 0x1538 <fputc>
    19fc:	fa 94       	dec	r15
    19fe:	ff 20       	and	r15, r15
    1a00:	c9 f7       	brne	.-14     	; 0x19f4 <vfprintf+0x3b6>
    1a02:	44 ce       	rjmp	.-888    	; 0x168c <vfprintf+0x4e>
    1a04:	f6 01       	movw	r30, r12
    1a06:	26 81       	ldd	r18, Z+6	; 0x06
    1a08:	37 81       	ldd	r19, Z+7	; 0x07
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <vfprintf+0x3d2>
    1a0c:	2f ef       	ldi	r18, 0xFF	; 255
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	c9 01       	movw	r24, r18
    1a12:	2c 96       	adiw	r28, 0x0c	; 12
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	ff 90       	pop	r15
    1a28:	ef 90       	pop	r14
    1a2a:	df 90       	pop	r13
    1a2c:	cf 90       	pop	r12
    1a2e:	bf 90       	pop	r11
    1a30:	af 90       	pop	r10
    1a32:	9f 90       	pop	r9
    1a34:	8f 90       	pop	r8
    1a36:	7f 90       	pop	r7
    1a38:	6f 90       	pop	r6
    1a3a:	5f 90       	pop	r5
    1a3c:	4f 90       	pop	r4
    1a3e:	3f 90       	pop	r3
    1a40:	2f 90       	pop	r2
    1a42:	08 95       	ret

00001a44 <strnlen_P>:
    1a44:	fc 01       	movw	r30, r24
    1a46:	05 90       	lpm	r0, Z+
    1a48:	61 50       	subi	r22, 0x01	; 1
    1a4a:	70 40       	sbci	r23, 0x00	; 0
    1a4c:	01 10       	cpse	r0, r1
    1a4e:	d8 f7       	brcc	.-10     	; 0x1a46 <strnlen_P+0x2>
    1a50:	80 95       	com	r24
    1a52:	90 95       	com	r25
    1a54:	8e 0f       	add	r24, r30
    1a56:	9f 1f       	adc	r25, r31
    1a58:	08 95       	ret

00001a5a <strnlen>:
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	61 50       	subi	r22, 0x01	; 1
    1a5e:	70 40       	sbci	r23, 0x00	; 0
    1a60:	01 90       	ld	r0, Z+
    1a62:	01 10       	cpse	r0, r1
    1a64:	d8 f7       	brcc	.-10     	; 0x1a5c <strnlen+0x2>
    1a66:	80 95       	com	r24
    1a68:	90 95       	com	r25
    1a6a:	8e 0f       	add	r24, r30
    1a6c:	9f 1f       	adc	r25, r31
    1a6e:	08 95       	ret

00001a70 <__ultoa_invert>:
    1a70:	fa 01       	movw	r30, r20
    1a72:	aa 27       	eor	r26, r26
    1a74:	28 30       	cpi	r18, 0x08	; 8
    1a76:	51 f1       	breq	.+84     	; 0x1acc <__ultoa_invert+0x5c>
    1a78:	20 31       	cpi	r18, 0x10	; 16
    1a7a:	81 f1       	breq	.+96     	; 0x1adc <__ultoa_invert+0x6c>
    1a7c:	e8 94       	clt
    1a7e:	6f 93       	push	r22
    1a80:	6e 7f       	andi	r22, 0xFE	; 254
    1a82:	6e 5f       	subi	r22, 0xFE	; 254
    1a84:	7f 4f       	sbci	r23, 0xFF	; 255
    1a86:	8f 4f       	sbci	r24, 0xFF	; 255
    1a88:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8a:	af 4f       	sbci	r26, 0xFF	; 255
    1a8c:	b1 e0       	ldi	r27, 0x01	; 1
    1a8e:	3e d0       	rcall	.+124    	; 0x1b0c <__ultoa_invert+0x9c>
    1a90:	b4 e0       	ldi	r27, 0x04	; 4
    1a92:	3c d0       	rcall	.+120    	; 0x1b0c <__ultoa_invert+0x9c>
    1a94:	67 0f       	add	r22, r23
    1a96:	78 1f       	adc	r23, r24
    1a98:	89 1f       	adc	r24, r25
    1a9a:	9a 1f       	adc	r25, r26
    1a9c:	a1 1d       	adc	r26, r1
    1a9e:	68 0f       	add	r22, r24
    1aa0:	79 1f       	adc	r23, r25
    1aa2:	8a 1f       	adc	r24, r26
    1aa4:	91 1d       	adc	r25, r1
    1aa6:	a1 1d       	adc	r26, r1
    1aa8:	6a 0f       	add	r22, r26
    1aaa:	71 1d       	adc	r23, r1
    1aac:	81 1d       	adc	r24, r1
    1aae:	91 1d       	adc	r25, r1
    1ab0:	a1 1d       	adc	r26, r1
    1ab2:	20 d0       	rcall	.+64     	; 0x1af4 <__ultoa_invert+0x84>
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <__ultoa_invert+0x48>
    1ab6:	68 94       	set
    1ab8:	3f 91       	pop	r19
    1aba:	2a e0       	ldi	r18, 0x0A	; 10
    1abc:	26 9f       	mul	r18, r22
    1abe:	11 24       	eor	r1, r1
    1ac0:	30 19       	sub	r19, r0
    1ac2:	30 5d       	subi	r19, 0xD0	; 208
    1ac4:	31 93       	st	Z+, r19
    1ac6:	de f6       	brtc	.-74     	; 0x1a7e <__ultoa_invert+0xe>
    1ac8:	cf 01       	movw	r24, r30
    1aca:	08 95       	ret
    1acc:	46 2f       	mov	r20, r22
    1ace:	47 70       	andi	r20, 0x07	; 7
    1ad0:	40 5d       	subi	r20, 0xD0	; 208
    1ad2:	41 93       	st	Z+, r20
    1ad4:	b3 e0       	ldi	r27, 0x03	; 3
    1ad6:	0f d0       	rcall	.+30     	; 0x1af6 <__ultoa_invert+0x86>
    1ad8:	c9 f7       	brne	.-14     	; 0x1acc <__ultoa_invert+0x5c>
    1ada:	f6 cf       	rjmp	.-20     	; 0x1ac8 <__ultoa_invert+0x58>
    1adc:	46 2f       	mov	r20, r22
    1ade:	4f 70       	andi	r20, 0x0F	; 15
    1ae0:	40 5d       	subi	r20, 0xD0	; 208
    1ae2:	4a 33       	cpi	r20, 0x3A	; 58
    1ae4:	18 f0       	brcs	.+6      	; 0x1aec <__ultoa_invert+0x7c>
    1ae6:	49 5d       	subi	r20, 0xD9	; 217
    1ae8:	31 fd       	sbrc	r19, 1
    1aea:	40 52       	subi	r20, 0x20	; 32
    1aec:	41 93       	st	Z+, r20
    1aee:	02 d0       	rcall	.+4      	; 0x1af4 <__ultoa_invert+0x84>
    1af0:	a9 f7       	brne	.-22     	; 0x1adc <__ultoa_invert+0x6c>
    1af2:	ea cf       	rjmp	.-44     	; 0x1ac8 <__ultoa_invert+0x58>
    1af4:	b4 e0       	ldi	r27, 0x04	; 4
    1af6:	a6 95       	lsr	r26
    1af8:	97 95       	ror	r25
    1afa:	87 95       	ror	r24
    1afc:	77 95       	ror	r23
    1afe:	67 95       	ror	r22
    1b00:	ba 95       	dec	r27
    1b02:	c9 f7       	brne	.-14     	; 0x1af6 <__ultoa_invert+0x86>
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	61 05       	cpc	r22, r1
    1b08:	71 05       	cpc	r23, r1
    1b0a:	08 95       	ret
    1b0c:	9b 01       	movw	r18, r22
    1b0e:	ac 01       	movw	r20, r24
    1b10:	0a 2e       	mov	r0, r26
    1b12:	06 94       	lsr	r0
    1b14:	57 95       	ror	r21
    1b16:	47 95       	ror	r20
    1b18:	37 95       	ror	r19
    1b1a:	27 95       	ror	r18
    1b1c:	ba 95       	dec	r27
    1b1e:	c9 f7       	brne	.-14     	; 0x1b12 <__ultoa_invert+0xa2>
    1b20:	62 0f       	add	r22, r18
    1b22:	73 1f       	adc	r23, r19
    1b24:	84 1f       	adc	r24, r20
    1b26:	95 1f       	adc	r25, r21
    1b28:	a0 1d       	adc	r26, r0
    1b2a:	08 95       	ret

00001b2c <_exit>:
    1b2c:	f8 94       	cli

00001b2e <__stop_program>:
    1b2e:	ff cf       	rjmp	.-2      	; 0x1b2e <__stop_program>
