
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001c4c  00001ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800126  00800126  00001d06  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00001d08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ddb  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000790  00000000  00000000  00004df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000116b  00000000  00000000  00005583  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cc4e  00000000  00000000  000066ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ca0  00000000  00000000  0001333c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009a5a  00000000  00000000  00015fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c80  00000000  00000000  0001fa38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004e3e  00000000  00000000  000206b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000071d7  00000000  00000000  000254f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001e9b  00000000  00000000  0002c6cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a38  00000000  00000000  0002e568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	1d c1       	rjmp	.+570    	; 0x23c <__ctors_end>
       2:	00 00       	nop
       4:	39 c1       	rjmp	.+626    	; 0x278 <__bad_interrupt>
       6:	00 00       	nop
       8:	37 c1       	rjmp	.+622    	; 0x278 <__bad_interrupt>
       a:	00 00       	nop
       c:	35 c1       	rjmp	.+618    	; 0x278 <__bad_interrupt>
       e:	00 00       	nop
      10:	33 c1       	rjmp	.+614    	; 0x278 <__bad_interrupt>
      12:	00 00       	nop
      14:	31 c1       	rjmp	.+610    	; 0x278 <__bad_interrupt>
      16:	00 00       	nop
      18:	2f c1       	rjmp	.+606    	; 0x278 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2d c1       	rjmp	.+602    	; 0x278 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2b c1       	rjmp	.+598    	; 0x278 <__bad_interrupt>
      22:	00 00       	nop
      24:	29 c1       	rjmp	.+594    	; 0x278 <__bad_interrupt>
      26:	00 00       	nop
      28:	eb c6       	rjmp	.+3542   	; 0xe00 <__vector_10>
      2a:	00 00       	nop
      2c:	25 c1       	rjmp	.+586    	; 0x278 <__bad_interrupt>
      2e:	00 00       	nop
      30:	23 c1       	rjmp	.+582    	; 0x278 <__bad_interrupt>
      32:	00 00       	nop
      34:	21 c1       	rjmp	.+578    	; 0x278 <__bad_interrupt>
      36:	00 00       	nop
      38:	1f c1       	rjmp	.+574    	; 0x278 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1d c1       	rjmp	.+570    	; 0x278 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1b c1       	rjmp	.+566    	; 0x278 <__bad_interrupt>
      42:	00 00       	nop
      44:	19 c1       	rjmp	.+562    	; 0x278 <__bad_interrupt>
      46:	00 00       	nop
      48:	17 c1       	rjmp	.+558    	; 0x278 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	15 c1       	rjmp	.+554    	; 0x278 <__bad_interrupt>
      4e:	00 00       	nop
      50:	13 c1       	rjmp	.+550    	; 0x278 <__bad_interrupt>
      52:	00 00       	nop
      54:	11 c1       	rjmp	.+546    	; 0x278 <__bad_interrupt>
      56:	00 00       	nop
      58:	0f c1       	rjmp	.+542    	; 0x278 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0d c1       	rjmp	.+538    	; 0x278 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0b c1       	rjmp	.+534    	; 0x278 <__bad_interrupt>
      62:	00 00       	nop
      64:	09 c1       	rjmp	.+530    	; 0x278 <__bad_interrupt>
      66:	00 00       	nop
      68:	07 c1       	rjmp	.+526    	; 0x278 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	05 c1       	rjmp	.+522    	; 0x278 <__bad_interrupt>
      6e:	00 00       	nop
      70:	03 c1       	rjmp	.+518    	; 0x278 <__bad_interrupt>
      72:	00 00       	nop
      74:	01 c1       	rjmp	.+514    	; 0x278 <__bad_interrupt>
      76:	00 00       	nop
      78:	ff c0       	rjmp	.+510    	; 0x278 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fd c0       	rjmp	.+506    	; 0x278 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fb c0       	rjmp	.+502    	; 0x278 <__bad_interrupt>
      82:	00 00       	nop
      84:	f9 c0       	rjmp	.+498    	; 0x278 <__bad_interrupt>
      86:	00 00       	nop
      88:	f7 c0       	rjmp	.+494    	; 0x278 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f5 c0       	rjmp	.+490    	; 0x278 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f3 c0       	rjmp	.+486    	; 0x278 <__bad_interrupt>
      92:	00 00       	nop
      94:	f1 c0       	rjmp	.+482    	; 0x278 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4322>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4315>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4310>:
     11d:	4d 49 44 49 20 44 65 76 69 63 65 20 45 6e 75 6d     MIDI Device Enum
     12d:	65 72 61 74 65 64 2e 0d 0a 00                       erated....

00000137 <__c.4308>:
     137:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     147:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     157:	6f 6e 2e 0d 0a 00                                   on....

0000015d <__c.4306>:
     15d:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     16d:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 49 44 49     Not a Valid MIDI
     17d:	20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d 0a      Class Device...
     18d:	00                                                  .

0000018e <__c.4304>:
     18e:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     19e:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1ae:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001bb <__c.4297>:
     1bb:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1cb:	68 65 64 2e 0d 0a 00                                hed....

000001d2 <__c.4292>:
     1d2:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1e2:	0d 0a 00                                            ...

000001e5 <__c.4273>:
     1e5:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C
     1f5:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch
     205:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
     215:	0d 0a 00                                            ...

00000218 <__c.4261>:
     218:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
     228:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
     238:	33 37 6d 00                                         37m.

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	d0 e2       	ldi	r29, 0x20	; 32
     244:	de bf       	out	0x3e, r29	; 62
     246:	cd bf       	out	0x3d, r28	; 61

00000248 <__do_copy_data>:
     248:	11 e0       	ldi	r17, 0x01	; 1
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b1 e0       	ldi	r27, 0x01	; 1
     24e:	ec e4       	ldi	r30, 0x4C	; 76
     250:	fc e1       	ldi	r31, 0x1C	; 28
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0b bf       	out	0x3b, r16	; 59
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x14>
     258:	07 90       	elpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	a6 32       	cpi	r26, 0x26	; 38
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0x10>

00000262 <__do_clear_bss>:
     262:	11 e0       	ldi	r17, 0x01	; 1
     264:	a6 e2       	ldi	r26, 0x26	; 38
     266:	b1 e0       	ldi	r27, 0x01	; 1
     268:	01 c0       	rjmp	.+2      	; 0x26c <.do_clear_bss_start>

0000026a <.do_clear_bss_loop>:
     26a:	1d 92       	st	X+, r1

0000026c <.do_clear_bss_start>:
     26c:	a9 34       	cpi	r26, 0x49	; 73
     26e:	b1 07       	cpc	r27, r17
     270:	e1 f7       	brne	.-8      	; 0x26a <.do_clear_bss_loop>
     272:	08 d1       	rcall	.+528    	; 0x484 <main>
     274:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <_exit>

00000278 <__bad_interrupt>:
     278:	c3 ce       	rjmp	.-634    	; 0x0 <__vectors>

0000027a <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     27a:	9b b1       	in	r25, 0x0b	; 11
     27c:	9f 70       	andi	r25, 0x0F	; 15
     27e:	98 2b       	or	r25, r24
     280:	9b b9       	out	0x0b, r25	; 11
			}
     282:	08 95       	ret

00000284 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     284:	84 b7       	in	r24, 0x34	; 52
     286:	87 7f       	andi	r24, 0xF7	; 247
     288:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     28a:	28 e1       	ldi	r18, 0x18	; 24
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
     290:	20 93 60 00 	sts	0x0060, r18
     294:	10 92 60 00 	sts	0x0060, r1
     298:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	80 e8       	ldi	r24, 0x80	; 128
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	80 93 61 00 	sts	0x0061, r24
     2a6:	90 93 61 00 	sts	0x0061, r25
     2aa:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2ac:	83 e3       	ldi	r24, 0x33	; 51
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	90 93 cd 00 	sts	0x00CD, r25
     2b4:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2b8:	86 e0       	ldi	r24, 0x06	; 6
     2ba:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2be:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2c2:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2c6:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2c8:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2ca:	8a b1       	in	r24, 0x0a	; 10
     2cc:	80 6f       	ori	r24, 0xF0	; 240
     2ce:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2d0:	8b b1       	in	r24, 0x0b	; 11
     2d2:	8f 70       	andi	r24, 0x0F	; 15
     2d4:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     2d6:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     2d8:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     2da:	84 b1       	in	r24, 0x04	; 4
     2dc:	8f 71       	andi	r24, 0x1F	; 31
     2de:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     2e0:	8d b1       	in	r24, 0x0d	; 13
     2e2:	8f 7c       	andi	r24, 0xCF	; 207
     2e4:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     2e6:	85 b1       	in	r24, 0x05	; 5
     2e8:	80 6e       	ori	r24, 0xE0	; 224
     2ea:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     2ec:	8e b1       	in	r24, 0x0e	; 14
     2ee:	80 63       	ori	r24, 0x30	; 48
     2f0:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	Joystick_Init();
	USB_Init();
     2f2:	6b d5       	rcall	.+2774   	; 0xdca <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <Serial_CreateStream>

000002fc <CheckJoystickMovement>:

/** Checks for movement of the board's joystick, and sends corresponding MIDI note on/off
 *  messages to the host.
 */
void CheckJoystickMovement(void)
{
     2fc:	1f 93       	push	r17
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	00 d0       	rcall	.+0      	; 0x304 <CheckJoystickMovement+0x8>
     304:	00 d0       	rcall	.+0      	; 0x306 <CheckJoystickMovement+0xa>
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     30a:	13 b1       	in	r17, 0x03	; 3
     30c:	8c b1       	in	r24, 0x0c	; 12
     30e:	80 95       	com	r24
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	80 73       	andi	r24, 0x30	; 48
     314:	90 70       	andi	r25, 0x00	; 0
     316:	95 95       	asr	r25
     318:	87 95       	ror	r24
     31a:	10 95       	com	r17
     31c:	10 7e       	andi	r17, 0xE0	; 224
     31e:	18 2b       	or	r17, r24
	uint8_t MIDICommand = 0;
	uint8_t MIDIPitch;

	/* Get current joystick mask, XOR with previous to detect joystick changes */
	uint8_t JoystickStatus  = Joystick_GetStatus();
	uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
     320:	20 91 26 01 	lds	r18, 0x0126
     324:	21 27       	eor	r18, r17
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     326:	8c b1       	in	r24, 0x0c	; 12

	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
     328:	82 fd       	sbrc	r24, 2
     32a:	02 c0       	rjmp	.+4      	; 0x330 <CheckJoystickMovement+0x34>
     32c:	39 e0       	ldi	r19, 0x09	; 9
     32e:	01 c0       	rjmp	.+2      	; 0x332 <CheckJoystickMovement+0x36>
     330:	30 e0       	ldi	r19, 0x00	; 0

	if (JoystickChanges & JOY_LEFT)
     332:	26 ff       	sbrs	r18, 6
     334:	04 c0       	rjmp	.+8      	; 0x33e <CheckJoystickMovement+0x42>
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     336:	16 ff       	sbrs	r17, 6
     338:	1b c0       	rjmp	.+54     	; 0x370 <CheckJoystickMovement+0x74>
		MIDIPitch   = 0x3C;
     33a:	9c e3       	ldi	r25, 0x3C	; 60
     33c:	17 c0       	rjmp	.+46     	; 0x36c <CheckJoystickMovement+0x70>
	}
	else if (JoystickChanges & JOY_UP)
     33e:	27 ff       	sbrs	r18, 7
     340:	04 c0       	rjmp	.+8      	; 0x34a <CheckJoystickMovement+0x4e>
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     342:	17 ff       	sbrs	r17, 7
     344:	17 c0       	rjmp	.+46     	; 0x374 <CheckJoystickMovement+0x78>
		MIDIPitch   = 0x3D;
     346:	9d e3       	ldi	r25, 0x3D	; 61
     348:	11 c0       	rjmp	.+34     	; 0x36c <CheckJoystickMovement+0x70>
	}
	else if (JoystickChanges & JOY_RIGHT)
     34a:	23 ff       	sbrs	r18, 3
     34c:	04 c0       	rjmp	.+8      	; 0x356 <CheckJoystickMovement+0x5a>
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     34e:	13 ff       	sbrs	r17, 3
     350:	13 c0       	rjmp	.+38     	; 0x378 <CheckJoystickMovement+0x7c>
		MIDIPitch   = 0x3E;
     352:	9e e3       	ldi	r25, 0x3E	; 62
     354:	0b c0       	rjmp	.+22     	; 0x36c <CheckJoystickMovement+0x70>
	}
	else if (JoystickChanges & JOY_DOWN)
     356:	24 ff       	sbrs	r18, 4
     358:	04 c0       	rjmp	.+8      	; 0x362 <CheckJoystickMovement+0x66>
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     35a:	14 ff       	sbrs	r17, 4
     35c:	0f c0       	rjmp	.+30     	; 0x37c <CheckJoystickMovement+0x80>
		MIDIPitch   = 0x3F;
     35e:	9f e3       	ldi	r25, 0x3F	; 63
     360:	05 c0       	rjmp	.+10     	; 0x36c <CheckJoystickMovement+0x70>
	}
	else if (JoystickChanges & JOY_PRESS)
     362:	25 ff       	sbrs	r18, 5
     364:	23 c0       	rjmp	.+70     	; 0x3ac <CheckJoystickMovement+0xb0>
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     366:	15 ff       	sbrs	r17, 5
     368:	0b c0       	rjmp	.+22     	; 0x380 <CheckJoystickMovement+0x84>
		MIDIPitch   = 0x3B;
     36a:	9b e3       	ldi	r25, 0x3B	; 59
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3F;
	}
	else if (JoystickChanges & JOY_PRESS)
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     36c:	80 e9       	ldi	r24, 0x90	; 144
     36e:	0a c0       	rjmp	.+20     	; 0x384 <CheckJoystickMovement+0x88>
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));

	if (JoystickChanges & JOY_LEFT)
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3C;
     370:	9c e3       	ldi	r25, 0x3C	; 60
     372:	07 c0       	rjmp	.+14     	; 0x382 <CheckJoystickMovement+0x86>
	}
	else if (JoystickChanges & JOY_UP)
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3D;
     374:	9d e3       	ldi	r25, 0x3D	; 61
     376:	05 c0       	rjmp	.+10     	; 0x382 <CheckJoystickMovement+0x86>
	}
	else if (JoystickChanges & JOY_RIGHT)
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3E;
     378:	9e e3       	ldi	r25, 0x3E	; 62
     37a:	03 c0       	rjmp	.+6      	; 0x382 <CheckJoystickMovement+0x86>
	}
	else if (JoystickChanges & JOY_DOWN)
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3F;
     37c:	9f e3       	ldi	r25, 0x3F	; 63
     37e:	01 c0       	rjmp	.+2      	; 0x382 <CheckJoystickMovement+0x86>
	}
	else if (JoystickChanges & JOY_PRESS)
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3B;
     380:	9b e3       	ldi	r25, 0x3B	; 59
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3F;
	}
	else if (JoystickChanges & JOY_PRESS)
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     382:	80 e8       	ldi	r24, 0x80	; 128
		MIDIPitch   = 0x3B;
	}

	if (MIDICommand)
	{
		MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
     384:	28 2f       	mov	r18, r24
     386:	22 95       	swap	r18
     388:	2f 70       	andi	r18, 0x0F	; 15
     38a:	29 83       	std	Y+1, r18	; 0x01
     38c:	83 2b       	or	r24, r19
     38e:	8a 83       	std	Y+2, r24	; 0x02
     390:	9b 83       	std	Y+3, r25	; 0x03
     392:	80 e4       	ldi	r24, 0x40	; 64
     394:	8c 83       	std	Y+4, r24	; 0x04
				.Data1       = MIDICommand | Channel,
				.Data2       = MIDIPitch,
				.Data3       = MIDI_STANDARD_VELOCITY,
			};

		MIDI_Host_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
     396:	87 e0       	ldi	r24, 0x07	; 7
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	be 01       	movw	r22, r28
     39c:	6f 5f       	subi	r22, 0xFF	; 255
     39e:	7f 4f       	sbci	r23, 0xFF	; 255
     3a0:	0e 94 88 0a 	call	0x1510	; 0x1510 <MIDI_Host_SendEventPacket>
		MIDI_Host_Flush(&Keyboard_MIDI_Interface);
     3a4:	87 e0       	ldi	r24, 0x07	; 7
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	0e 94 4e 0a 	call	0x149c	; 0x149c <MIDI_Host_Flush>
	}

	PrevJoystickStatus = JoystickStatus;
     3ac:	10 93 26 01 	sts	0x0126, r17
}
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	cf 91       	pop	r28
     3ba:	df 91       	pop	r29
     3bc:	1f 91       	pop	r17
     3be:	08 95       	ret

000003c0 <JoystickHost_Task>:

/** Task to manage an enumerated USB MIDI device once connected, to display received
 *  note events from the host and send note changes in response to the board's joystick.
 */
void JoystickHost_Task(void)
{
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <JoystickHost_Task+0xe>
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <JoystickHost_Task+0x10>
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     3d4:	80 91 34 01 	lds	r24, 0x0134
     3d8:	8b 30       	cpi	r24, 0x0B	; 11
     3da:	09 f0       	breq	.+2      	; 0x3de <JoystickHost_Task+0x1e>
     3dc:	48 c0       	rjmp	.+144    	; 0x46e <JoystickHost_Task+0xae>
     3de:	37 c0       	rjmp	.+110    	; 0x44e <JoystickHost_Task+0x8e>
	  return;

	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
	{
		bool NoteOnEvent  = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_ON));
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
		bool NoteOffEvent = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_OFF));

		/* Display note events from the host */
		if (NoteOnEvent || NoteOffEvent)
     3e2:	89 30       	cpi	r24, 0x09	; 9
     3e4:	29 f0       	breq	.+10     	; 0x3f0 <JoystickHost_Task+0x30>
     3e6:	88 30       	cpi	r24, 0x08	; 8
     3e8:	c9 f5       	brne	.+114    	; 0x45c <JoystickHost_Task+0x9c>
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <JoystickHost_Task+0x34>
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	2d b7       	in	r18, 0x3d	; 61
     3f6:	3e b7       	in	r19, 0x3e	; 62
     3f8:	2a 50       	subi	r18, 0x0A	; 10
     3fa:	30 40       	sbci	r19, 0x00	; 0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	3e bf       	out	0x3e, r19	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	2d bf       	out	0x3d, r18	; 61
     406:	ed b7       	in	r30, 0x3d	; 61
     408:	fe b7       	in	r31, 0x3e	; 62
     40a:	31 96       	adiw	r30, 0x01	; 1
     40c:	ad b7       	in	r26, 0x3d	; 61
     40e:	be b7       	in	r27, 0x3e	; 62
     410:	12 96       	adiw	r26, 0x02	; 2
     412:	fc 92       	st	X, r15
     414:	ee 92       	st	-X, r14
     416:	11 97       	sbiw	r26, 0x01	; 1
     418:	93 83       	std	Z+3, r25	; 0x03
     41a:	82 83       	std	Z+2, r24	; 0x02
																				   ((MIDIEvent.Data1 & 0x0F) + 1),
     41c:	8a 81       	ldd	r24, Y+2	; 0x02
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	8f 70       	andi	r24, 0x0F	; 15
     422:	90 70       	andi	r25, 0x00	; 0
		bool NoteOffEvent = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_OFF));

		/* Display note events from the host */
		if (NoteOnEvent || NoteOffEvent)
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     424:	01 96       	adiw	r24, 0x01	; 1
     426:	95 83       	std	Z+5, r25	; 0x05
     428:	84 83       	std	Z+4, r24	; 0x04
     42a:	8b 81       	ldd	r24, Y+3	; 0x03
     42c:	86 83       	std	Z+6, r24	; 0x06
     42e:	17 82       	std	Z+7, r1	; 0x07
     430:	8c 81       	ldd	r24, Y+4	; 0x04
     432:	80 87       	std	Z+8, r24	; 0x08
     434:	11 86       	std	Z+9, r1	; 0x09
     436:	0e 94 2a 0b 	call	0x1654	; 0x1654 <printf_P>
     43a:	2d b7       	in	r18, 0x3d	; 61
     43c:	3e b7       	in	r19, 0x3e	; 62
     43e:	26 5f       	subi	r18, 0xF6	; 246
     440:	3f 4f       	sbci	r19, 0xFF	; 255
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	3e bf       	out	0x3e, r19	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	2d bf       	out	0x3d, r18	; 61
     44c:	07 c0       	rjmp	.+14     	; 0x45c <JoystickHost_Task+0x9c>
{
	if (USB_HostState != HOST_STATE_Configured)
	  return;

	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
     44e:	8e 01       	movw	r16, r28
     450:	0f 5f       	subi	r16, 0xFF	; 255
     452:	1f 4f       	sbci	r17, 0xFF	; 255
		bool NoteOffEvent = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_OFF));

		/* Display note events from the host */
		if (NoteOnEvent || NoteOffEvent)
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     454:	35 ee       	ldi	r19, 0xE5	; 229
     456:	e3 2e       	mov	r14, r19
     458:	31 e0       	ldi	r19, 0x01	; 1
     45a:	f3 2e       	mov	r15, r19
{
	if (USB_HostState != HOST_STATE_Configured)
	  return;

	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
     45c:	87 e0       	ldi	r24, 0x07	; 7
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	b8 01       	movw	r22, r16
     462:	0e 94 b4 0a 	call	0x1568	; 0x1568 <MIDI_Host_ReceiveEventPacket>
     466:	88 23       	and	r24, r24
     468:	09 f0       	breq	.+2      	; 0x46c <JoystickHost_Task+0xac>
     46a:	ba cf       	rjmp	.-140    	; 0x3e0 <JoystickHost_Task+0x20>
																				   ((MIDIEvent.Data1 & 0x0F) + 1),
																				   MIDIEvent.Data2, MIDIEvent.Data3);
		}
	}

	CheckJoystickMovement();
     46c:	47 df       	rcall	.-370    	; 0x2fc <CheckJoystickMovement>
}
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	cf 91       	pop	r28
     478:	df 91       	pop	r29
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	08 95       	ret

00000484 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     484:	ff de       	rcall	.-514    	; 0x284 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "MIDI Host Demo running.\r\n" ESC_FG_WHITE));
     486:	88 e1       	ldi	r24, 0x18	; 24
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	0e 94 49 0b 	call	0x1692	; 0x1692 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     48e:	80 e1       	ldi	r24, 0x10	; 16
     490:	f4 de       	rcall	.-536    	; 0x27a <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     492:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		JoystickHost_Task();
     494:	95 df       	rcall	.-214    	; 0x3c0 <JoystickHost_Task>

		MIDI_Host_USBTask(&Keyboard_MIDI_Interface);
     496:	87 e0       	ldi	r24, 0x07	; 7
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <MIDI_Host_USBTask>
		USB_USBTask();
     49e:	2b d7       	rcall	.+3670   	; 0x12f6 <USB_USBTask>
     4a0:	f9 cf       	rjmp	.-14     	; 0x494 <main+0x10>

000004a2 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     4a2:	82 ed       	ldi	r24, 0xD2	; 210
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 49 0b 	call	0x1692	; 0x1692 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4aa:	80 ea       	ldi	r24, 0xA0	; 160
}
     4ac:	e6 ce       	rjmp	.-564    	; 0x27a <LEDs_SetAllLEDs>

000004ae <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     4ae:	8b eb       	ldi	r24, 0xBB	; 187
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	0e 94 49 0b 	call	0x1692	; 0x1692 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4b6:	80 e1       	ldi	r24, 0x10	; 16
}
     4b8:	e0 ce       	rjmp	.-576    	; 0x27a <LEDs_SetAllLEDs>

000004ba <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	df 93       	push	r29
     4c0:	cf 93       	push	r28
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	c2 50       	subi	r28, 0x02	; 2
     4c8:	d2 40       	sbci	r29, 0x02	; 2
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4d4:	80 ea       	ldi	r24, 0xA0	; 160
     4d6:	d1 de       	rcall	.-606    	; 0x27a <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4d8:	8e 01       	movw	r16, r28
     4da:	0d 5f       	subi	r16, 0xFD	; 253
     4dc:	1f 4f       	sbci	r17, 0xFF	; 255
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	be 01       	movw	r22, r28
     4e2:	6f 5f       	subi	r22, 0xFF	; 255
     4e4:	7f 4f       	sbci	r23, 0xFF	; 255
     4e6:	a8 01       	movw	r20, r16
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	32 e0       	ldi	r19, 0x02	; 2
     4ec:	1c d5       	rcall	.+2616   	; 0xf26 <USB_Host_GetDeviceConfigDescriptor>
     4ee:	88 23       	and	r24, r24
     4f0:	19 f0       	breq	.+6      	; 0x4f8 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4f2:	8e e8       	ldi	r24, 0x8E	; 142
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	11 c0       	rjmp	.+34     	; 0x51a <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (MIDI_Host_ConfigurePipes(&Keyboard_MIDI_Interface,
     4f8:	69 81       	ldd	r22, Y+1	; 0x01
     4fa:	7a 81       	ldd	r23, Y+2	; 0x02
     4fc:	87 e0       	ldi	r24, 0x07	; 7
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	a8 01       	movw	r20, r16
     502:	2c d7       	rcall	.+3672   	; 0x135c <MIDI_Host_ConfigurePipes>
     504:	88 23       	and	r24, r24
     506:	19 f0       	breq	.+6      	; 0x50e <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
	                             ConfigDescriptorSize, ConfigDescriptorData) != MIDI_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid MIDI Class Device.\r\n"));
     508:	8d e5       	ldi	r24, 0x5D	; 93
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	06 c0       	rjmp	.+12     	; 0x51a <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	cd d6       	rcall	.+3482   	; 0x12ac <USB_Host_SetDeviceConfiguration>
     512:	88 23       	and	r24, r24
     514:	31 f0       	breq	.+12     	; 0x522 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     516:	87 e3       	ldi	r24, 0x37	; 55
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	0e 94 49 0b 	call	0x1692	; 0x1692 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     51e:	80 e9       	ldi	r24, 0x90	; 144
     520:	05 c0       	rjmp	.+10     	; 0x52c <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
		return;
	}

	puts_P(PSTR("MIDI Device Enumerated.\r\n"));
     522:	8d e1       	ldi	r24, 0x1D	; 29
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 49 0b 	call	0x1692	; 0x1692 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     52a:	80 e6       	ldi	r24, 0x60	; 96
     52c:	a6 de       	rcall	.-692    	; 0x27a <LEDs_SetAllLEDs>
}
     52e:	ce 5f       	subi	r28, 0xFE	; 254
     530:	dd 4f       	sbci	r29, 0xFD	; 253
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	cf 91       	pop	r28
     53e:	df 91       	pop	r29
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     546:	df 93       	push	r29
     548:	cf 93       	push	r28
     54a:	0f 92       	push	r0
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	d3 d3       	rcall	.+1958   	; 0xcfa <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     554:	00 d0       	rcall	.+0      	; 0x556 <EVENT_USB_Host_HostError+0x10>
     556:	00 d0       	rcall	.+0      	; 0x558 <EVENT_USB_Host_HostError+0x12>
     558:	ed b7       	in	r30, 0x3d	; 61
     55a:	fe b7       	in	r31, 0x3e	; 62
     55c:	31 96       	adiw	r30, 0x01	; 1
     55e:	2e ee       	ldi	r18, 0xEE	; 238
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	ad b7       	in	r26, 0x3d	; 61
     564:	be b7       	in	r27, 0x3e	; 62
     566:	12 96       	adiw	r26, 0x02	; 2
     568:	3c 93       	st	X, r19
     56a:	2e 93       	st	-X, r18
     56c:	11 97       	sbiw	r26, 0x01	; 1
     56e:	89 81       	ldd	r24, Y+1	; 0x01
     570:	82 83       	std	Z+2, r24	; 0x02
     572:	13 82       	std	Z+3, r1	; 0x03
     574:	0e 94 2a 0b 	call	0x1654	; 0x1654 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	80 e9       	ldi	r24, 0x90	; 144
     582:	7b de       	rcall	.-778    	; 0x27a <LEDs_SetAllLEDs>
     584:	ff cf       	rjmp	.-2      	; 0x584 <EVENT_USB_Host_HostError+0x3e>

00000586 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     586:	90 91 34 01 	lds	r25, 0x0134
     58a:	2d b7       	in	r18, 0x3d	; 61
     58c:	3e b7       	in	r19, 0x3e	; 62
     58e:	28 50       	subi	r18, 0x08	; 8
     590:	30 40       	sbci	r19, 0x00	; 0
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	3e bf       	out	0x3e, r19	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	2d bf       	out	0x3d, r18	; 61
     59c:	ed b7       	in	r30, 0x3d	; 61
     59e:	fe b7       	in	r31, 0x3e	; 62
     5a0:	31 96       	adiw	r30, 0x01	; 1
     5a2:	28 e9       	ldi	r18, 0x98	; 152
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	ad b7       	in	r26, 0x3d	; 61
     5a8:	be b7       	in	r27, 0x3e	; 62
     5aa:	12 96       	adiw	r26, 0x02	; 2
     5ac:	3c 93       	st	X, r19
     5ae:	2e 93       	st	-X, r18
     5b0:	11 97       	sbiw	r26, 0x01	; 1
     5b2:	82 83       	std	Z+2, r24	; 0x02
     5b4:	13 82       	std	Z+3, r1	; 0x03
     5b6:	64 83       	std	Z+4, r22	; 0x04
     5b8:	15 82       	std	Z+5, r1	; 0x05
     5ba:	96 83       	std	Z+6, r25	; 0x06
     5bc:	17 82       	std	Z+7, r1	; 0x07
     5be:	0e 94 2a 0b 	call	0x1654	; 0x1654 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5c2:	2d b7       	in	r18, 0x3d	; 61
     5c4:	3e b7       	in	r19, 0x3e	; 62
     5c6:	28 5f       	subi	r18, 0xF8	; 248
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	3e bf       	out	0x3e, r19	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	2d bf       	out	0x3d, r18	; 61
     5d4:	80 e9       	ldi	r24, 0x90	; 144
}
     5d6:	51 ce       	rjmp	.-862    	; 0x27a <LEDs_SetAllLEDs>

000005d8 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5d8:	80 91 9e 00 	lds	r24, 0x009E
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	81 70       	andi	r24, 0x01	; 1
     5e0:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     5e2:	20 91 a0 00 	lds	r18, 0x00A0
     5e6:	2d 7f       	andi	r18, 0xFD	; 253
     5e8:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     5ec:	20 91 9e 00 	lds	r18, 0x009E
     5f0:	22 60       	ori	r18, 0x02	; 2
     5f2:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     5f6:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     5fa:	21 fd       	sbrc	r18, 1
     5fc:	fc cf       	rjmp	.-8      	; 0x5f6 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5fe:	20 91 9e 00 	lds	r18, 0x009E
     602:	21 60       	ori	r18, 0x01	; 1
     604:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     608:	10 92 2a 01 	sts	0x012A, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     60c:	20 91 a0 00 	lds	r18, 0x00A0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	20 72       	andi	r18, 0x20	; 32
     614:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     616:	40 91 a0 00 	lds	r20, 0x00A0
     61a:	4f 7d       	andi	r20, 0xDF	; 223
     61c:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     620:	40 91 9f 00 	lds	r20, 0x009F
     624:	4f 7d       	andi	r20, 0xDF	; 223
     626:	40 93 9f 00 	sts	0x009F, r20
     62a:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     62c:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     630:	55 ff       	sbrs	r21, 5
     632:	0b c0       	rjmp	.+22     	; 0x64a <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     634:	40 91 9f 00 	lds	r20, 0x009F
     638:	4f 7d       	andi	r20, 0xDF	; 223
     63a:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     63e:	40 91 9f 00 	lds	r20, 0x009F
     642:	4d 7f       	andi	r20, 0xFD	; 253
     644:	40 93 9f 00 	sts	0x009F, r20
     648:	08 c0       	rjmp	.+16     	; 0x65a <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     64a:	ef ec       	ldi	r30, 0xCF	; 207
     64c:	f7 e0       	ldi	r31, 0x07	; 7
     64e:	31 97       	sbiw	r30, 0x01	; 1
     650:	f1 f7       	brne	.-4      	; 0x64e <USB_Host_ResetDevice+0x76>
     652:	00 c0       	rjmp	.+0      	; 0x654 <USB_Host_ResetDevice+0x7c>
     654:	00 00       	nop
     656:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     658:	49 f7       	brne	.-46     	; 0x62c <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     65a:	21 15       	cp	r18, r1
     65c:	31 05       	cpc	r19, r1
     65e:	29 f0       	breq	.+10     	; 0x66a <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     660:	20 91 a0 00 	lds	r18, 0x00A0
     664:	20 62       	ori	r18, 0x20	; 32
     666:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	29 f4       	brne	.+10     	; 0x678 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     66e:	80 91 9e 00 	lds	r24, 0x009E
     672:	8e 7f       	andi	r24, 0xFE	; 254
     674:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     678:	80 91 a0 00 	lds	r24, 0x00A0
     67c:	82 60       	ori	r24, 0x02	; 2
     67e:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     682:	08 95       	ret

00000684 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     684:	40 91 9e 00 	lds	r20, 0x009E
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	41 70       	andi	r20, 0x01	; 1
     68c:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     68e:	20 91 a0 00 	lds	r18, 0x00A0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	20 72       	andi	r18, 0x20	; 32
     696:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     698:	90 91 a0 00 	lds	r25, 0x00A0
     69c:	9f 7d       	andi	r25, 0xDF	; 223
     69e:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6a2:	90 91 9f 00 	lds	r25, 0x009F
     6a6:	9f 7d       	andi	r25, 0xDF	; 223
     6a8:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6ac:	90 91 9e 00 	lds	r25, 0x009E
     6b0:	91 60       	ori	r25, 0x01	; 1
     6b2:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6b6:	26 c0       	rjmp	.+76     	; 0x704 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6b8:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6bc:	95 ff       	sbrs	r25, 5
     6be:	06 c0       	rjmp	.+12     	; 0x6cc <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6c0:	90 91 9f 00 	lds	r25, 0x009F
     6c4:	9f 7d       	andi	r25, 0xDF	; 223
     6c6:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     6ca:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     6cc:	90 91 34 01 	lds	r25, 0x0134
     6d0:	91 30       	cpi	r25, 0x01	; 1
     6d2:	d9 f0       	breq	.+54     	; 0x70a <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     6d4:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     6d8:	94 ff       	sbrs	r25, 4
     6da:	09 c0       	rjmp	.+18     	; 0x6ee <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     6dc:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     6e0:	80 91 a6 00 	lds	r24, 0x00A6
     6e4:	8f 7e       	andi	r24, 0xEF	; 239
     6e6:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     6ea:	82 e0       	ldi	r24, 0x02	; 2

			break;
     6ec:	0f c0       	rjmp	.+30     	; 0x70c <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     6ee:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     6f2:	91 ff       	sbrs	r25, 1
     6f4:	07 c0       	rjmp	.+14     	; 0x704 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     6f6:	80 91 a6 00 	lds	r24, 0x00A6
     6fa:	8d 7f       	andi	r24, 0xFD	; 253
     6fc:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     700:	83 e0       	ldi	r24, 0x03	; 3

			break;
     702:	04 c0       	rjmp	.+8      	; 0x70c <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     704:	88 23       	and	r24, r24
     706:	c1 f6       	brne	.-80     	; 0x6b8 <USB_Host_WaitMS+0x34>
     708:	01 c0       	rjmp	.+2      	; 0x70c <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     70a:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     70c:	41 15       	cp	r20, r1
     70e:	51 05       	cpc	r21, r1
     710:	29 f4       	brne	.+10     	; 0x71c <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     712:	90 91 9e 00 	lds	r25, 0x009E
     716:	9e 7f       	andi	r25, 0xFE	; 254
     718:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     71c:	21 15       	cp	r18, r1
     71e:	31 05       	cpc	r19, r1
     720:	29 f0       	breq	.+10     	; 0x72c <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     722:	90 91 a0 00 	lds	r25, 0x00A0
     726:	90 62       	ori	r25, 0x20	; 32
     728:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     72c:	08 95       	ret

0000072e <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	28 97       	sbiw	r28, 0x08	; 8
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     746:	80 91 34 01 	lds	r24, 0x0134
     74a:	85 30       	cpi	r24, 0x05	; 5
     74c:	09 f4       	brne	.+2      	; 0x750 <USB_Host_ProcessNextHostState+0x22>
     74e:	99 c0       	rjmp	.+306    	; 0x882 <USB_Host_ProcessNextHostState+0x154>
     750:	86 30       	cpi	r24, 0x06	; 6
     752:	68 f4       	brcc	.+26     	; 0x76e <USB_Host_ProcessNextHostState+0x40>
     754:	82 30       	cpi	r24, 0x02	; 2
     756:	c1 f1       	breq	.+112    	; 0x7c8 <USB_Host_ProcessNextHostState+0x9a>
     758:	83 30       	cpi	r24, 0x03	; 3
     75a:	18 f4       	brcc	.+6      	; 0x762 <USB_Host_ProcessNextHostState+0x34>
     75c:	88 23       	and	r24, r24
     75e:	a1 f0       	breq	.+40     	; 0x788 <USB_Host_ProcessNextHostState+0x5a>
     760:	04 c1       	rjmp	.+520    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
     762:	83 30       	cpi	r24, 0x03	; 3
     764:	d9 f1       	breq	.+118    	; 0x7dc <USB_Host_ProcessNextHostState+0xae>
     766:	84 30       	cpi	r24, 0x04	; 4
     768:	09 f0       	breq	.+2      	; 0x76c <USB_Host_ProcessNextHostState+0x3e>
     76a:	ff c0       	rjmp	.+510    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
     76c:	62 c0       	rjmp	.+196    	; 0x832 <USB_Host_ProcessNextHostState+0x104>
     76e:	87 30       	cpi	r24, 0x07	; 7
     770:	09 f4       	brne	.+2      	; 0x774 <USB_Host_ProcessNextHostState+0x46>
     772:	9e c0       	rjmp	.+316    	; 0x8b0 <USB_Host_ProcessNextHostState+0x182>
     774:	87 30       	cpi	r24, 0x07	; 7
     776:	08 f4       	brcc	.+2      	; 0x77a <USB_Host_ProcessNextHostState+0x4c>
     778:	8f c0       	rjmp	.+286    	; 0x898 <USB_Host_ProcessNextHostState+0x16a>
     77a:	88 30       	cpi	r24, 0x08	; 8
     77c:	09 f4       	brne	.+2      	; 0x780 <USB_Host_ProcessNextHostState+0x52>
     77e:	b8 c0       	rjmp	.+368    	; 0x8f0 <USB_Host_ProcessNextHostState+0x1c2>
     780:	89 30       	cpi	r24, 0x09	; 9
     782:	09 f0       	breq	.+2      	; 0x786 <USB_Host_ProcessNextHostState+0x58>
     784:	f2 c0       	rjmp	.+484    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
     786:	d9 c0       	rjmp	.+434    	; 0x93a <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     788:	00 91 28 01 	lds	r16, 0x0128
     78c:	10 91 29 01 	lds	r17, 0x0129
     790:	01 15       	cp	r16, r1
     792:	11 05       	cpc	r17, r1
     794:	09 f4       	brne	.+2      	; 0x798 <USB_Host_ProcessNextHostState+0x6a>
     796:	e9 c0       	rjmp	.+466    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	74 df       	rcall	.-280    	; 0x684 <USB_Host_WaitMS>
     79c:	68 2f       	mov	r22, r24
     79e:	88 23       	and	r24, r24
     7a0:	31 f0       	breq	.+12     	; 0x7ae <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     7a2:	80 91 27 01 	lds	r24, 0x0127
     7a6:	80 93 34 01 	sts	0x0134, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
					break;
     7ac:	d2 c0       	rjmp	.+420    	; 0x952 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     7ae:	01 50       	subi	r16, 0x01	; 1
     7b0:	10 40       	sbci	r17, 0x00	; 0
     7b2:	10 93 29 01 	sts	0x0129, r17
     7b6:	00 93 28 01 	sts	0x0128, r16
     7ba:	01 15       	cp	r16, r1
     7bc:	11 05       	cpc	r17, r1
     7be:	09 f0       	breq	.+2      	; 0x7c2 <USB_Host_ProcessNextHostState+0x94>
     7c0:	d4 c0       	rjmp	.+424    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     7c2:	80 91 27 01 	lds	r24, 0x0127
     7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7c8:	88 ee       	ldi	r24, 0xE8	; 232
     7ca:	93 e0       	ldi	r25, 0x03	; 3
     7cc:	90 93 29 01 	sts	0x0129, r25
     7d0:	80 93 28 01 	sts	0x0128, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7d4:	83 e0       	ldi	r24, 0x03	; 3
     7d6:	80 93 34 01 	sts	0x0134, r24
			break;
     7da:	c7 c0       	rjmp	.+398    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7dc:	80 91 28 01 	lds	r24, 0x0128
     7e0:	90 91 29 01 	lds	r25, 0x0129
     7e4:	9c 01       	movw	r18, r24
     7e6:	21 50       	subi	r18, 0x01	; 1
     7e8:	30 40       	sbci	r19, 0x00	; 0
     7ea:	30 93 29 01 	sts	0x0129, r19
     7ee:	20 93 28 01 	sts	0x0128, r18
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	39 f0       	breq	.+14     	; 0x804 <USB_Host_ProcessNextHostState+0xd6>
     7f6:	8f ec       	ldi	r24, 0xCF	; 207
     7f8:	97 e0       	ldi	r25, 0x07	; 7
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <USB_Host_ProcessNextHostState+0xcc>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <USB_Host_ProcessNextHostState+0xd2>
     800:	00 00       	nop
     802:	b3 c0       	rjmp	.+358    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     804:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     806:	80 91 d8 00 	lds	r24, 0x00D8
     80a:	80 61       	ori	r24, 0x10	; 16
     80c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     810:	80 91 dd 00 	lds	r24, 0x00DD
     814:	8b 7f       	andi	r24, 0xFB	; 251
     816:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     81a:	80 91 d7 00 	lds	r24, 0x00D7
     81e:	80 61       	ori	r24, 0x10	; 16
     820:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     824:	80 91 dd 00 	lds	r24, 0x00DD
     828:	82 60       	ori	r24, 0x02	; 2
     82a:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     82e:	84 e0       	ldi	r24, 0x04	; 4
     830:	d2 cf       	rjmp	.-92     	; 0x7d6 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     832:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     836:	80 ff       	sbrs	r24, 0
     838:	98 c0       	rjmp	.+304    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     83a:	80 91 9f 00 	lds	r24, 0x009F
     83e:	8e 7f       	andi	r24, 0xFE	; 254
     840:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     844:	80 91 9f 00 	lds	r24, 0x009F
     848:	8d 7f       	andi	r24, 0xFD	; 253
     84a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     84e:	80 91 df 00 	lds	r24, 0x00DF
     852:	8d 7f       	andi	r24, 0xFD	; 253
     854:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     858:	80 91 de 00 	lds	r24, 0x00DE
     85c:	82 60       	ori	r24, 0x02	; 2
     85e:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     862:	80 91 9e 00 	lds	r24, 0x009E
     866:	81 60       	ori	r24, 0x01	; 1
     868:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     86c:	dd d1       	rcall	.+954    	; 0xc28 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     86e:	10 92 34 01 	sts	0x0134, r1
     872:	84 e6       	ldi	r24, 0x64	; 100
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	90 93 29 01 	sts	0x0129, r25
     87a:	80 93 28 01 	sts	0x0128, r24
     87e:	85 e0       	ldi	r24, 0x05	; 5
     880:	59 c0       	rjmp	.+178    	; 0x934 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     882:	aa de       	rcall	.-684    	; 0x5d8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     884:	10 92 34 01 	sts	0x0134, r1
     888:	88 ec       	ldi	r24, 0xC8	; 200
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	90 93 29 01 	sts	0x0129, r25
     890:	80 93 28 01 	sts	0x0128, r24
     894:	86 e0       	ldi	r24, 0x06	; 6
     896:	4e c0       	rjmp	.+156    	; 0x934 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	20 e4       	ldi	r18, 0x40	; 64
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	01 e0       	ldi	r16, 0x01	; 1
     8a4:	33 d1       	rcall	.+614    	; 0xb0c <Pipe_ConfigurePipe>
     8a6:	88 23       	and	r24, r24
     8a8:	09 f4       	brne	.+2      	; 0x8ac <USB_Host_ProcessNextHostState+0x17e>
     8aa:	4f c0       	rjmp	.+158    	; 0x94a <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8ac:	87 e0       	ldi	r24, 0x07	; 7
     8ae:	93 cf       	rjmp	.-218    	; 0x7d6 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8b0:	ac e2       	ldi	r26, 0x2C	; 44
     8b2:	b1 e0       	ldi	r27, 0x01	; 1
     8b4:	ed e1       	ldi	r30, 0x1D	; 29
     8b6:	f1 e0       	ldi	r31, 0x01	; 1
     8b8:	88 e0       	ldi	r24, 0x08	; 8
     8ba:	01 90       	ld	r0, Z+
     8bc:	0d 92       	st	X+, r0
     8be:	81 50       	subi	r24, 0x01	; 1
     8c0:	e1 f7       	brne	.-8      	; 0x8ba <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8c2:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8c6:	ce 01       	movw	r24, r28
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	f1 d3       	rcall	.+2018   	; 0x10ae <USB_Host_SendControlRequest>
     8cc:	68 2f       	mov	r22, r24
     8ce:	88 23       	and	r24, r24
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <USB_Host_ProcessNextHostState+0x1a6>
     8d2:	3e c0       	rjmp	.+124    	; 0x950 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8d4:	88 85       	ldd	r24, Y+8	; 0x08
     8d6:	80 93 25 01 	sts	0x0125, r24

			USB_Host_ResetDevice();
     8da:	7e de       	rcall	.-772    	; 0x5d8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8dc:	10 92 34 01 	sts	0x0134, r1
     8e0:	88 ec       	ldi	r24, 0xC8	; 200
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	90 93 29 01 	sts	0x0129, r25
     8e8:	80 93 28 01 	sts	0x0128, r24
     8ec:	88 e0       	ldi	r24, 0x08	; 8
     8ee:	22 c0       	rjmp	.+68     	; 0x934 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     8f0:	20 91 25 01 	lds	r18, 0x0125
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	01 e0       	ldi	r16, 0x01	; 1
     8fe:	06 d1       	rcall	.+524    	; 0xb0c <Pipe_ConfigurePipe>
     900:	88 23       	and	r24, r24
     902:	19 f1       	breq	.+70     	; 0x94a <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     904:	ac e2       	ldi	r26, 0x2C	; 44
     906:	b1 e0       	ldi	r27, 0x01	; 1
     908:	e5 e1       	ldi	r30, 0x15	; 21
     90a:	f1 e0       	ldi	r31, 0x01	; 1
     90c:	88 e0       	ldi	r24, 0x08	; 8
     90e:	01 90       	ld	r0, Z+
     910:	0d 92       	st	X+, r0
     912:	81 50       	subi	r24, 0x01	; 1
     914:	e1 f7       	brne	.-8      	; 0x90e <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	c9 d3       	rcall	.+1938   	; 0x10ae <USB_Host_SendControlRequest>
     91c:	68 2f       	mov	r22, r24
     91e:	88 23       	and	r24, r24
     920:	b9 f4       	brne	.+46     	; 0x950 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     922:	10 92 34 01 	sts	0x0134, r1
     926:	84 e6       	ldi	r24, 0x64	; 100
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	90 93 29 01 	sts	0x0129, r25
     92e:	80 93 28 01 	sts	0x0128, r24
     932:	89 e0       	ldi	r24, 0x09	; 9
     934:	80 93 27 01 	sts	0x0127, r24
			break;
     938:	18 c0       	rjmp	.+48     	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     940:	8a e0       	ldi	r24, 0x0A	; 10
     942:	80 93 34 01 	sts	0x0134, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     946:	b9 dd       	rcall	.-1166   	; 0x4ba <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     948:	10 c0       	rjmp	.+32     	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     94a:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     94c:	84 e0       	ldi	r24, 0x04	; 4
     94e:	01 c0       	rjmp	.+2      	; 0x952 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     950:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     952:	90 91 34 01 	lds	r25, 0x0134
     956:	91 30       	cpi	r25, 0x01	; 1
     958:	41 f0       	breq	.+16     	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     95a:	15 de       	rcall	.-982    	; 0x586 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     95c:	80 91 dd 00 	lds	r24, 0x00DD
     960:	81 60       	ori	r24, 0x01	; 1
     962:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     966:	a3 dd       	rcall	.-1210   	; 0x4ae <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     968:	e0 d1       	rcall	.+960    	; 0xd2a <USB_ResetInterface>
	}
}
     96a:	28 96       	adiw	r28, 0x08	; 8
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	cf 91       	pop	r28
     978:	df 91       	pop	r29
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret

00000980 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     980:	8f 92       	push	r8
     982:	9f 92       	push	r9
     984:	bf 92       	push	r11
     986:	cf 92       	push	r12
     988:	df 92       	push	r13
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	df 93       	push	r29
     994:	cf 93       	push	r28
     996:	0f 92       	push	r0
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	e8 2e       	mov	r14, r24
     99e:	4b 01       	movw	r8, r22
     9a0:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     9a2:	80 91 aa 00 	lds	r24, 0x00AA
     9a6:	8f 7c       	andi	r24, 0xCF	; 207
     9a8:	80 62       	ori	r24, 0x20	; 32
     9aa:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     9ae:	99 83       	std	Y+1, r25	; 0x01
     9b0:	75 d1       	rcall	.+746    	; 0xc9c <Pipe_WaitUntilReady>
     9b2:	b8 2e       	mov	r11, r24
     9b4:	99 81       	ldd	r25, Y+1	; 0x01
     9b6:	88 23       	and	r24, r24
     9b8:	c1 f5       	brne	.+112    	; 0xa2a <Pipe_Write_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     9ba:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     9bc:	01 15       	cp	r16, r1
     9be:	11 05       	cpc	r17, r1
     9c0:	39 f0       	breq	.+14     	; 0x9d0 <Pipe_Write_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     9c2:	f8 01       	movw	r30, r16
     9c4:	20 81       	ld	r18, Z
     9c6:	31 81       	ldd	r19, Z+1	; 0x01
     9c8:	82 1a       	sub	r8, r18
     9ca:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     9cc:	e2 0e       	add	r14, r18
     9ce:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     9d0:	cc 24       	eor	r12, r12
     9d2:	dd 24       	eor	r13, r13
     9d4:	25 c0       	rjmp	.+74     	; 0xa20 <Pipe_Write_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     9d6:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     9da:	85 fd       	sbrc	r24, 5
     9dc:	16 c0       	rjmp	.+44     	; 0xa0a <Pipe_Write_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     9de:	80 91 a6 00 	lds	r24, 0x00A6
     9e2:	8b 77       	andi	r24, 0x7B	; 123
     9e4:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     9e8:	01 15       	cp	r16, r1
     9ea:	11 05       	cpc	r17, r1
     9ec:	51 f0       	breq	.+20     	; 0xa02 <Pipe_Write_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     9ee:	f8 01       	movw	r30, r16
     9f0:	80 81       	ld	r24, Z
     9f2:	91 81       	ldd	r25, Z+1	; 0x01
     9f4:	8c 0d       	add	r24, r12
     9f6:	9d 1d       	adc	r25, r13
     9f8:	91 83       	std	Z+1, r25	; 0x01
     9fa:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     9fc:	24 e0       	ldi	r18, 0x04	; 4
     9fe:	b2 2e       	mov	r11, r18
     a00:	14 c0       	rjmp	.+40     	; 0xa2a <Pipe_Write_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a02:	4c d1       	rcall	.+664    	; 0xc9c <Pipe_WaitUntilReady>
     a04:	88 23       	and	r24, r24
     a06:	61 f0       	breq	.+24     	; 0xa20 <Pipe_Write_Stream_LE+0xa0>
     a08:	0f c0       	rjmp	.+30     	; 0xa28 <Pipe_Write_Stream_LE+0xa8>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     a0a:	f7 01       	movw	r30, r14
     a0c:	81 91       	ld	r24, Z+
     a0e:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     a10:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     a14:	08 94       	sec
     a16:	81 08       	sbc	r8, r1
     a18:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     a1a:	08 94       	sec
     a1c:	c1 1c       	adc	r12, r1
     a1e:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     a20:	81 14       	cp	r8, r1
     a22:	91 04       	cpc	r9, r1
     a24:	c1 f6       	brne	.-80     	; 0x9d6 <Pipe_Write_Stream_LE+0x56>
     a26:	01 c0       	rjmp	.+2      	; 0xa2a <Pipe_Write_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a28:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     a2a:	8b 2d       	mov	r24, r11
     a2c:	0f 90       	pop	r0
     a2e:	cf 91       	pop	r28
     a30:	df 91       	pop	r29
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	cf 90       	pop	r12
     a3e:	bf 90       	pop	r11
     a40:	9f 90       	pop	r9
     a42:	8f 90       	pop	r8
     a44:	08 95       	ret

00000a46 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     a46:	8f 92       	push	r8
     a48:	9f 92       	push	r9
     a4a:	bf 92       	push	r11
     a4c:	cf 92       	push	r12
     a4e:	df 92       	push	r13
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	df 93       	push	r29
     a5a:	cf 93       	push	r28
     a5c:	0f 92       	push	r0
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	e8 2e       	mov	r14, r24
     a64:	4b 01       	movw	r8, r22
     a66:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     a68:	80 91 aa 00 	lds	r24, 0x00AA
     a6c:	8f 7c       	andi	r24, 0xCF	; 207
     a6e:	80 61       	ori	r24, 0x10	; 16
     a70:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     a74:	99 83       	std	Y+1, r25	; 0x01
     a76:	12 d1       	rcall	.+548    	; 0xc9c <Pipe_WaitUntilReady>
     a78:	b8 2e       	mov	r11, r24
     a7a:	99 81       	ldd	r25, Y+1	; 0x01
     a7c:	88 23       	and	r24, r24
     a7e:	c1 f5       	brne	.+112    	; 0xaf0 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     a80:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     a82:	01 15       	cp	r16, r1
     a84:	11 05       	cpc	r17, r1
     a86:	39 f0       	breq	.+14     	; 0xa96 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     a88:	f8 01       	movw	r30, r16
     a8a:	20 81       	ld	r18, Z
     a8c:	31 81       	ldd	r19, Z+1	; 0x01
     a8e:	82 1a       	sub	r8, r18
     a90:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     a92:	e2 0e       	add	r14, r18
     a94:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     a96:	cc 24       	eor	r12, r12
     a98:	dd 24       	eor	r13, r13
     a9a:	25 c0       	rjmp	.+74     	; 0xae6 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     a9c:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     aa0:	85 fd       	sbrc	r24, 5
     aa2:	16 c0       	rjmp	.+44     	; 0xad0 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     aa4:	80 91 a6 00 	lds	r24, 0x00A6
     aa8:	8e 77       	andi	r24, 0x7E	; 126
     aaa:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     aae:	01 15       	cp	r16, r1
     ab0:	11 05       	cpc	r17, r1
     ab2:	51 f0       	breq	.+20     	; 0xac8 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     ab4:	f8 01       	movw	r30, r16
     ab6:	80 81       	ld	r24, Z
     ab8:	91 81       	ldd	r25, Z+1	; 0x01
     aba:	8c 0d       	add	r24, r12
     abc:	9d 1d       	adc	r25, r13
     abe:	91 83       	std	Z+1, r25	; 0x01
     ac0:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     ac2:	44 e0       	ldi	r20, 0x04	; 4
     ac4:	b4 2e       	mov	r11, r20
     ac6:	14 c0       	rjmp	.+40     	; 0xaf0 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     ac8:	e9 d0       	rcall	.+466    	; 0xc9c <Pipe_WaitUntilReady>
     aca:	88 23       	and	r24, r24
     acc:	61 f0       	breq	.+24     	; 0xae6 <Pipe_Read_Stream_LE+0xa0>
     ace:	0f c0       	rjmp	.+30     	; 0xaee <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     ad0:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     ad4:	f7 01       	movw	r30, r14
     ad6:	81 93       	st	Z+, r24
     ad8:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     ada:	08 94       	sec
     adc:	81 08       	sbc	r8, r1
     ade:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     ae0:	08 94       	sec
     ae2:	c1 1c       	adc	r12, r1
     ae4:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     ae6:	81 14       	cp	r8, r1
     ae8:	91 04       	cpc	r9, r1
     aea:	c1 f6       	brne	.-80     	; 0xa9c <Pipe_Read_Stream_LE+0x56>
     aec:	01 c0       	rjmp	.+2      	; 0xaf0 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     aee:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     af0:	8b 2d       	mov	r24, r11
     af2:	0f 90       	pop	r0
     af4:	cf 91       	pop	r28
     af6:	df 91       	pop	r29
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	9f 90       	pop	r9
     b08:	8f 90       	pop	r8
     b0a:	08 95       	ret

00000b0c <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     b0c:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     b0e:	58 2f       	mov	r21, r24
     b10:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     b12:	87 ff       	sbrs	r24, 7
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <Pipe_ConfigurePipe+0xe>
     b16:	80 e1       	ldi	r24, 0x10	; 16
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <Pipe_ConfigurePipe+0x10>
     b1a:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     b1c:	57 30       	cpi	r21, 0x07	; 7
     b1e:	08 f0       	brcs	.+2      	; 0xb22 <Pipe_ConfigurePipe+0x16>
     b20:	59 c0       	rjmp	.+178    	; 0xbd4 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     b22:	66 23       	and	r22, r22
     b24:	09 f4       	brne	.+2      	; 0xb28 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     b26:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     b28:	4f 70       	andi	r20, 0x0F	; 15
     b2a:	62 95       	swap	r22
     b2c:	66 0f       	add	r22, r22
     b2e:	66 0f       	add	r22, r22
     b30:	60 7c       	andi	r22, 0xC0	; 192
     b32:	64 2b       	or	r22, r20
     b34:	68 2b       	or	r22, r24
     b36:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b38:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b3a:	84 2f       	mov	r24, r20
     b3c:	8f 70       	andi	r24, 0x0F	; 15
     b3e:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     b42:	45 17       	cp	r20, r21
     b44:	a1 f4       	brne	.+40     	; 0xb6e <Pipe_ConfigurePipe+0x62>
     b46:	88 e0       	ldi	r24, 0x08	; 8
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     b4e:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     b54:	82 17       	cp	r24, r18
     b56:	93 07       	cpc	r25, r19
     b58:	10 f4       	brcc	.+4      	; 0xb5e <Pipe_ConfigurePipe+0x52>
     b5a:	75 30       	cpi	r23, 0x05	; 5
     b5c:	c1 f7       	brne	.-16     	; 0xb4e <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     b5e:	87 2f       	mov	r24, r23
     b60:	82 95       	swap	r24
     b62:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b64:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     b66:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     b68:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     b6a:	e0 e0       	ldi	r30, 0x00	; 0
     b6c:	08 c0       	rjmp	.+16     	; 0xb7e <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     b6e:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     b72:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     b76:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     b7a:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     b7e:	81 ff       	sbrs	r24, 1
     b80:	20 c0       	rjmp	.+64     	; 0xbc2 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b82:	90 91 a9 00 	lds	r25, 0x00A9
     b86:	9e 7f       	andi	r25, 0xFE	; 254
     b88:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     b8c:	90 91 ab 00 	lds	r25, 0x00AB
     b90:	9d 7f       	andi	r25, 0xFD	; 253
     b92:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     b96:	90 91 a9 00 	lds	r25, 0x00A9
     b9a:	91 60       	ori	r25, 0x01	; 1
     b9c:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     ba0:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     ba4:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     ba8:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     bac:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     bb0:	80 91 a9 00 	lds	r24, 0x00A9
     bb4:	80 62       	ori	r24, 0x20	; 32
     bb6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     bba:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     bbe:	87 ff       	sbrs	r24, 7
     bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     bc2:	4f 5f       	subi	r20, 0xFF	; 255
     bc4:	47 30       	cpi	r20, 0x07	; 7
     bc6:	09 f0       	breq	.+2      	; 0xbca <Pipe_ConfigurePipe+0xbe>
     bc8:	b8 cf       	rjmp	.-144    	; 0xb3a <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bca:	5f 70       	andi	r21, 0x0F	; 15
     bcc:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     bd4:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     be8:	e8 2e       	mov	r14, r24
     bea:	e7 01       	movw	r28, r14
     bec:	7e 01       	movw	r14, r28
     bee:	f9 2e       	mov	r15, r25
     bf0:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     bf2:	ff 24       	eor	r15, r15
     bf4:	0d c0       	rjmp	.+26     	; 0xc10 <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
     bf6:	88 81       	ld	r24, Y
     bf8:	88 23       	and	r24, r24
     bfa:	41 f0       	breq	.+16     	; 0xc0c <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     bfc:	29 81       	ldd	r18, Y+1	; 0x01
     bfe:	3a 81       	ldd	r19, Y+2	; 0x02
     c00:	6c 81       	ldd	r22, Y+4	; 0x04
     c02:	4b 81       	ldd	r20, Y+3	; 0x03
     c04:	0d 81       	ldd	r16, Y+5	; 0x05
     c06:	82 df       	rcall	.-252    	; 0xb0c <Pipe_ConfigurePipe>
     c08:	88 23       	and	r24, r24
     c0a:	31 f0       	breq	.+12     	; 0xc18 <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     c0c:	f3 94       	inc	r15
     c0e:	26 96       	adiw	r28, 0x06	; 6
     c10:	f1 16       	cp	r15, r17
     c12:	88 f3       	brcs	.-30     	; 0xbf6 <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     c18:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	08 95       	ret

00000c28 <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     c28:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	98 2f       	mov	r25, r24
     c30:	9f 70       	andi	r25, 0x0F	; 15
     c32:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     c36:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     c3a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     c3e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c42:	90 91 a9 00 	lds	r25, 0x00A9
     c46:	9e 7f       	andi	r25, 0xFE	; 254
     c48:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c4c:	8f 5f       	subi	r24, 0xFF	; 255
     c4e:	87 30       	cpi	r24, 0x07	; 7
     c50:	71 f7       	brne	.-36     	; 0xc2e <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     c52:	08 95       	ret

00000c54 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     c54:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     c58:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c5c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c5e:	29 2f       	mov	r18, r25
     c60:	2f 70       	andi	r18, 0x0F	; 15
     c62:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c66:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     c6a:	27 ff       	sbrs	r18, 7
     c6c:	0c c0       	rjmp	.+24     	; 0xc86 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     c6e:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     c72:	53 2f       	mov	r21, r19
     c74:	5f 70       	andi	r21, 0x0F	; 15
     c76:	30 ff       	sbrs	r19, 0
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <Pipe_IsEndpointBound+0x2a>
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <Pipe_IsEndpointBound+0x2c>
     c7e:	20 e8       	ldi	r18, 0x80	; 128
     c80:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     c82:	28 17       	cp	r18, r24
     c84:	49 f0       	breq	.+18     	; 0xc98 <Pipe_IsEndpointBound+0x44>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c86:	9f 5f       	subi	r25, 0xFF	; 255
     c88:	97 30       	cpi	r25, 0x07	; 7
     c8a:	49 f7       	brne	.-46     	; 0xc5e <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c8c:	84 2f       	mov	r24, r20
     c8e:	8f 70       	andi	r24, 0x0F	; 15
     c90:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     c98:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     c9a:	08 95       	ret

00000c9c <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     c9c:	80 91 a2 00 	lds	r24, 0x00A2
     ca0:	90 91 a3 00 	lds	r25, 0x00A3

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     ca4:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ca6:	20 91 aa 00 	lds	r18, 0x00AA
     caa:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     cac:	20 31       	cpi	r18, 0x10	; 16
     cae:	29 f4       	brne	.+10     	; 0xcba <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     cb0:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     cb4:	20 ff       	sbrs	r18, 0
     cb6:	05 c0       	rjmp	.+10     	; 0xcc2 <Pipe_WaitUntilReady+0x26>
     cb8:	18 c0       	rjmp	.+48     	; 0xcea <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     cba:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     cbe:	22 fd       	sbrc	r18, 2
     cc0:	14 c0       	rjmp	.+40     	; 0xcea <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     cc2:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     cc6:	21 fd       	sbrc	r18, 1
     cc8:	12 c0       	rjmp	.+36     	; 0xcee <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     cca:	20 91 34 01 	lds	r18, 0x0134
     cce:	21 30       	cpi	r18, 0x01	; 1
     cd0:	81 f0       	breq	.+32     	; 0xcf2 <Pipe_WaitUntilReady+0x56>
     cd2:	20 91 a2 00 	lds	r18, 0x00A2
     cd6:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     cda:	28 17       	cp	r18, r24
     cdc:	39 07       	cpc	r19, r25
     cde:	19 f3       	breq	.-58     	; 0xca6 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ce0:	44 23       	and	r20, r20
     ce2:	49 f0       	breq	.+18     	; 0xcf6 <Pipe_WaitUntilReady+0x5a>
     ce4:	41 50       	subi	r20, 0x01	; 1
     ce6:	c9 01       	movw	r24, r18
     ce8:	de cf       	rjmp	.-68     	; 0xca6 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     cf6:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     cf8:	08 95       	ret

00000cfa <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     cfa:	75 d0       	rcall	.+234    	; 0xde6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cfc:	7c d0       	rcall	.+248    	; 0xdf6 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cfe:	e0 ee       	ldi	r30, 0xE0	; 224
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	81 60       	ori	r24, 0x01	; 1
     d06:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     d08:	e8 ed       	ldi	r30, 0xD8	; 216
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	8f 77       	andi	r24, 0x7F	; 127
     d10:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d12:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     d14:	a7 ed       	ldi	r26, 0xD7	; 215
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	8c 91       	ld	r24, X
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d1e:	80 81       	ld	r24, Z
     d20:	8f 7e       	andi	r24, 0xEF	; 239
     d22:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     d24:	10 92 2b 01 	sts	0x012B, r1
}
     d28:	08 95       	ret

00000d2a <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     d2a:	5d d0       	rcall	.+186    	; 0xde6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d2c:	64 d0       	rcall	.+200    	; 0xdf6 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     d2e:	80 91 d8 00 	lds	r24, 0x00D8
     d32:	8f 77       	andi	r24, 0x7F	; 127
     d34:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     d38:	80 91 d8 00 	lds	r24, 0x00D8
     d3c:	80 68       	ori	r24, 0x80	; 128
     d3e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     d42:	80 91 d8 00 	lds	r24, 0x00D8
     d46:	8f 7d       	andi	r24, 0xDF	; 223
     d48:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     d4c:	80 91 d7 00 	lds	r24, 0x00D7
     d50:	8f 77       	andi	r24, 0x7F	; 127
     d52:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d56:	8c e0       	ldi	r24, 0x0C	; 12
     d58:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d5a:	8e e0       	ldi	r24, 0x0E	; 14
     d5c:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d5e:	09 b4       	in	r0, 0x29	; 41
     d60:	00 fe       	sbrs	r0, 0
     d62:	fd cf       	rjmp	.-6      	; 0xd5e <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	80 93 34 01 	sts	0x0134, r24
	USB_Host_ConfigurationNumber = 0;
     d6a:	10 92 2a 01 	sts	0x012A, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     d6e:	80 e4       	ldi	r24, 0x40	; 64
     d70:	80 93 25 01 	sts	0x0125, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     d74:	80 91 d8 00 	lds	r24, 0x00D8
     d78:	80 64       	ori	r24, 0x40	; 64
     d7a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d7e:	80 91 dd 00 	lds	r24, 0x00DD
     d82:	81 60       	ori	r24, 0x01	; 1
     d84:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     d88:	80 91 dd 00 	lds	r24, 0x00DD
     d8c:	84 60       	ori	r24, 0x04	; 4
     d8e:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     d92:	80 91 d7 00 	lds	r24, 0x00D7
     d96:	8f 7e       	andi	r24, 0xEF	; 239
     d98:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     d9c:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     d9e:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     da0:	80 91 de 00 	lds	r24, 0x00DE
     da4:	81 60       	ori	r24, 0x01	; 1
     da6:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     daa:	80 91 de 00 	lds	r24, 0x00DE
     dae:	84 60       	ori	r24, 0x04	; 4
     db0:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     db4:	80 91 e0 00 	lds	r24, 0x00E0
     db8:	8e 7f       	andi	r24, 0xFE	; 254
     dba:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     dbe:	80 91 d8 00 	lds	r24, 0x00D8
     dc2:	80 61       	ori	r24, 0x10	; 16
     dc4:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     dc8:	08 95       	ret

00000dca <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     dca:	e8 ed       	ldi	r30, 0xD8	; 216
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8f 7e       	andi	r24, 0xEF	; 239
     dd2:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     dd4:	e7 ed       	ldi	r30, 0xD7	; 215
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	81 60       	ori	r24, 0x01	; 1
     ddc:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	80 93 2b 01 	sts	0x012B, r24

	USB_ResetInterface();
}
     de4:	a2 cf       	rjmp	.-188    	; 0xd2a <USB_ResetInterface>

00000de6 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     de6:	e8 ed       	ldi	r30, 0xD8	; 216
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8c 7f       	andi	r24, 0xFC	; 252
     dee:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     df0:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     df4:	08 95       	ret

00000df6 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     df6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     dfa:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     dfe:	08 95       	ret

00000e00 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	0b b6       	in	r0, 0x3b	; 59
     e0a:	0f 92       	push	r0
     e0c:	11 24       	eor	r1, r1
     e0e:	2f 93       	push	r18
     e10:	3f 93       	push	r19
     e12:	4f 93       	push	r20
     e14:	5f 93       	push	r21
     e16:	6f 93       	push	r22
     e18:	7f 93       	push	r23
     e1a:	8f 93       	push	r24
     e1c:	9f 93       	push	r25
     e1e:	af 93       	push	r26
     e20:	bf 93       	push	r27
     e22:	ef 93       	push	r30
     e24:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e26:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     e2a:	85 ff       	sbrs	r24, 5
     e2c:	0a c0       	rjmp	.+20     	; 0xe42 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e2e:	80 91 a0 00 	lds	r24, 0x00A0
     e32:	85 ff       	sbrs	r24, 5
     e34:	06 c0       	rjmp	.+12     	; 0xe42 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e36:	80 91 9f 00 	lds	r24, 0x009F
     e3a:	8f 7d       	andi	r24, 0xDF	; 223
     e3c:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     e40:	0c d1       	rcall	.+536    	; 0x105a <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     e42:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     e46:	81 ff       	sbrs	r24, 1
     e48:	15 c0       	rjmp	.+42     	; 0xe74 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     e4a:	80 91 a0 00 	lds	r24, 0x00A0
     e4e:	81 ff       	sbrs	r24, 1
     e50:	11 c0       	rjmp	.+34     	; 0xe74 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     e52:	80 91 9f 00 	lds	r24, 0x009F
     e56:	8d 7f       	andi	r24, 0xFD	; 253
     e58:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     e5c:	80 91 9f 00 	lds	r24, 0x009F
     e60:	8e 7f       	andi	r24, 0xFE	; 254
     e62:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e66:	80 91 a0 00 	lds	r24, 0x00A0
     e6a:	8d 7f       	andi	r24, 0xFD	; 253
     e6c:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     e70:	1e db       	rcall	.-2500   	; 0x4ae <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     e72:	5b df       	rcall	.-330    	; 0xd2a <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     e74:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     e78:	81 ff       	sbrs	r24, 1
     e7a:	15 c0       	rjmp	.+42     	; 0xea6 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     e7c:	80 91 de 00 	lds	r24, 0x00DE
     e80:	81 ff       	sbrs	r24, 1
     e82:	11 c0       	rjmp	.+34     	; 0xea6 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     e84:	80 91 df 00 	lds	r24, 0x00DF
     e88:	8d 7f       	andi	r24, 0xFD	; 253
     e8a:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     e8e:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e90:	80 91 dd 00 	lds	r24, 0x00DD
     e94:	81 60       	ori	r24, 0x01	; 1
     e96:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	54 db       	rcall	.-2392   	; 0x546 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     e9e:	07 db       	rcall	.-2546   	; 0x4ae <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	80 93 34 01 	sts	0x0134, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     ea6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     eaa:	80 ff       	sbrs	r24, 0
     eac:	17 c0       	rjmp	.+46     	; 0xedc <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     eae:	80 91 de 00 	lds	r24, 0x00DE
     eb2:	80 ff       	sbrs	r24, 0
     eb4:	13 c0       	rjmp	.+38     	; 0xedc <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     eb6:	80 91 df 00 	lds	r24, 0x00DF
     eba:	8e 7f       	andi	r24, 0xFE	; 254
     ebc:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     ec0:	80 91 de 00 	lds	r24, 0x00DE
     ec4:	8e 7f       	andi	r24, 0xFE	; 254
     ec6:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     eca:	eb da       	rcall	.-2602   	; 0x4a2 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     ecc:	80 91 a0 00 	lds	r24, 0x00A0
     ed0:	82 60       	ori	r24, 0x02	; 2
     ed2:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     ed6:	82 e0       	ldi	r24, 0x02	; 2
     ed8:	80 93 34 01 	sts	0x0134, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     edc:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ee0:	82 ff       	sbrs	r24, 2
     ee2:	0e c0       	rjmp	.+28     	; 0xf00 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ee4:	80 91 de 00 	lds	r24, 0x00DE
     ee8:	82 ff       	sbrs	r24, 2
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     eec:	80 91 df 00 	lds	r24, 0x00DF
     ef0:	8b 7f       	andi	r24, 0xFB	; 251
     ef2:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	45 db       	rcall	.-2422   	; 0x586 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     efc:	d8 da       	rcall	.-2640   	; 0x4ae <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     efe:	15 df       	rcall	.-470    	; 0xd2a <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f00:	ff 91       	pop	r31
     f02:	ef 91       	pop	r30
     f04:	bf 91       	pop	r27
     f06:	af 91       	pop	r26
     f08:	9f 91       	pop	r25
     f0a:	8f 91       	pop	r24
     f0c:	7f 91       	pop	r23
     f0e:	6f 91       	pop	r22
     f10:	5f 91       	pop	r21
     f12:	4f 91       	pop	r20
     f14:	3f 91       	pop	r19
     f16:	2f 91       	pop	r18
     f18:	0f 90       	pop	r0
     f1a:	0b be       	out	0x3b, r0	; 59
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	0f 90       	pop	r0
     f22:	1f 90       	pop	r1
     f24:	18 95       	reti

00000f26 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f26:	cf 92       	push	r12
     f28:	df 92       	push	r13
     f2a:	ef 92       	push	r14
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	29 97       	sbiw	r28, 0x09	; 9
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	6b 01       	movw	r12, r22
     f48:	8a 01       	movw	r16, r20
     f4a:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f4c:	90 e8       	ldi	r25, 0x80	; 128
     f4e:	90 93 2c 01 	sts	0x012C, r25
     f52:	96 e0       	ldi	r25, 0x06	; 6
     f54:	90 93 2d 01 	sts	0x012D, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f5e:	90 93 2f 01 	sts	0x012F, r25
     f62:	80 93 2e 01 	sts	0x012E, r24
     f66:	10 92 31 01 	sts	0x0131, r1
     f6a:	10 92 30 01 	sts	0x0130, r1
     f6e:	89 e0       	ldi	r24, 0x09	; 9
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	90 93 33 01 	sts	0x0133, r25
     f76:	80 93 32 01 	sts	0x0132, r24
     f7a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f7e:	ce 01       	movw	r24, r28
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	95 d0       	rcall	.+298    	; 0x10ae <USB_Host_SendControlRequest>
     f84:	88 23       	and	r24, r24
     f86:	b9 f4       	brne	.+46     	; 0xfb6 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	9c 81       	ldd	r25, Y+4	; 0x04
     f8c:	f6 01       	movw	r30, r12
     f8e:	91 83       	std	Z+1, r25	; 0x01
     f90:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     f92:	e8 16       	cp	r14, r24
     f94:	f9 06       	cpc	r15, r25
     f96:	70 f0       	brcs	.+28     	; 0xfb4 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f98:	90 93 33 01 	sts	0x0133, r25
     f9c:	80 93 32 01 	sts	0x0132, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     fa0:	c8 01       	movw	r24, r16
     fa2:	85 d0       	rcall	.+266    	; 0x10ae <USB_Host_SendControlRequest>
     fa4:	88 23       	and	r24, r24
     fa6:	39 f4       	brne	.+14     	; 0xfb6 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     fa8:	f8 01       	movw	r30, r16
     faa:	91 81       	ldd	r25, Z+1	; 0x01
     fac:	92 30       	cpi	r25, 0x02	; 2
     fae:	19 f0       	breq	.+6      	; 0xfb6 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     fb0:	86 e0       	ldi	r24, 0x06	; 6
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     fb4:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     fb6:	29 96       	adiw	r28, 0x09	; 9
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	08 95       	ret

00000fd4 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     fd4:	af 92       	push	r10
     fd6:	bf 92       	push	r11
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	8c 01       	movw	r16, r24
     fea:	eb 01       	movw	r28, r22
     fec:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     fee:	23 c0       	rjmp	.+70     	; 0x1036 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ff0:	e8 81       	ld	r30, Y
     ff2:	f9 81       	ldd	r31, Y+1	; 0x01
     ff4:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     ff6:	20 81       	ld	r18, Z
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	c7 01       	movw	r24, r14
     ffc:	2e 15       	cp	r18, r14
     ffe:	3f 05       	cpc	r19, r15
    1000:	08 f4       	brcc	.+2      	; 0x1004 <USB_GetNextDescriptorComp+0x30>
    1002:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1004:	e8 0f       	add	r30, r24
    1006:	f9 1f       	adc	r31, r25
    1008:	f9 83       	std	Y+1, r31	; 0x01
    100a:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    100c:	f8 01       	movw	r30, r16
    100e:	20 81       	ld	r18, Z
    1010:	31 81       	ldd	r19, Z+1	; 0x01
    1012:	28 1b       	sub	r18, r24
    1014:	39 0b       	sbc	r19, r25
    1016:	31 83       	std	Z+1, r19	; 0x01
    1018:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    101a:	88 81       	ld	r24, Y
    101c:	99 81       	ldd	r25, Y+1	; 0x01
    101e:	f6 01       	movw	r30, r12
    1020:	09 95       	icall
    1022:	82 30       	cpi	r24, 0x02	; 2
    1024:	41 f0       	breq	.+16     	; 0x1036 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	69 f4       	brne	.+26     	; 0x1044 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    102a:	a8 82       	st	Y, r10
    102c:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    102e:	f8 01       	movw	r30, r16
    1030:	f1 82       	std	Z+1, r15	; 0x01
    1032:	e0 82       	st	Z, r14
    1034:	07 c0       	rjmp	.+14     	; 0x1044 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1036:	f8 01       	movw	r30, r16
    1038:	e0 80       	ld	r14, Z
    103a:	f1 80       	ldd	r15, Z+1	; 0x01
    103c:	e1 14       	cp	r14, r1
    103e:	f1 04       	cpc	r15, r1
    1040:	b9 f6       	brne	.-82     	; 0xff0 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1042:	82 e0       	ldi	r24, 0x02	; 2
}
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	df 90       	pop	r13
    1052:	cf 90       	pop	r12
    1054:	bf 90       	pop	r11
    1056:	af 90       	pop	r10
    1058:	08 95       	ret

0000105a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    105a:	08 95       	ret

0000105c <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1064:	c8 ee       	ldi	r28, 0xE8	; 232
    1066:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1068:	07 c0       	rjmp	.+14     	; 0x1078 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	0b db       	rcall	.-2538   	; 0x684 <USB_Host_WaitMS>
    106e:	88 23       	and	r24, r24
    1070:	d1 f4       	brne	.+52     	; 0x10a6 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1072:	20 97       	sbiw	r28, 0x00	; 0
    1074:	b9 f0       	breq	.+46     	; 0x10a4 <USB_Host_WaitForIOS+0x48>
    1076:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1078:	11 23       	and	r17, r17
    107a:	29 f4       	brne	.+10     	; 0x1086 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    107c:	80 91 a6 00 	lds	r24, 0x00A6
    1080:	83 ff       	sbrs	r24, 3
    1082:	f3 cf       	rjmp	.-26     	; 0x106a <USB_Host_WaitForIOS+0xe>
    1084:	0d c0       	rjmp	.+26     	; 0x10a0 <USB_Host_WaitForIOS+0x44>
    1086:	11 30       	cpi	r17, 0x01	; 1
    1088:	29 f4       	brne	.+10     	; 0x1094 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    108a:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    108e:	80 ff       	sbrs	r24, 0
    1090:	ec cf       	rjmp	.-40     	; 0x106a <USB_Host_WaitForIOS+0xe>
    1092:	06 c0       	rjmp	.+12     	; 0x10a0 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1094:	12 30       	cpi	r17, 0x02	; 2
    1096:	49 f7       	brne	.-46     	; 0x106a <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1098:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    109c:	82 ff       	sbrs	r24, 2
    109e:	e5 cf       	rjmp	.-54     	; 0x106a <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    10a4:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	08 95       	ret

000010ae <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    10bc:	e0 90 9e 00 	lds	r14, 0x009E
    10c0:	ff 24       	eor	r15, r15
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	e8 22       	and	r14, r24
    10c6:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    10c8:	c0 91 32 01 	lds	r28, 0x0132
    10cc:	d0 91 33 01 	lds	r29, 0x0133
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    10d0:	80 91 9e 00 	lds	r24, 0x009E
    10d4:	81 60       	ori	r24, 0x01	; 1
    10d6:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	d3 da       	rcall	.-2650   	; 0x684 <USB_Host_WaitMS>
    10de:	88 23       	and	r24, r24
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <USB_Host_SendControlRequest+0x36>
    10e2:	cb c0       	rjmp	.+406    	; 0x127a <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10e4:	80 91 aa 00 	lds	r24, 0x00AA
    10e8:	8f 7c       	andi	r24, 0xCF	; 207
    10ea:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    10ee:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    10f2:	80 91 a6 00 	lds	r24, 0x00A6
    10f6:	8f 7e       	andi	r24, 0xEF	; 239
    10f8:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10fc:	80 91 a9 00 	lds	r24, 0x00A9
    1100:	8f 7b       	andi	r24, 0xBF	; 191
    1102:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1106:	ec e2       	ldi	r30, 0x2C	; 44
    1108:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    110a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    110c:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	e4 33       	cpi	r30, 0x34	; 52
    1114:	f8 07       	cpc	r31, r24
    1116:	c9 f7       	brne	.-14     	; 0x110a <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1118:	80 91 a6 00 	lds	r24, 0x00A6
    111c:	87 77       	andi	r24, 0x77	; 119
    111e:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	9b df       	rcall	.-202    	; 0x105c <USB_Host_WaitForIOS>
    1126:	88 23       	and	r24, r24
    1128:	09 f0       	breq	.+2      	; 0x112c <USB_Host_SendControlRequest+0x7e>
    112a:	a7 c0       	rjmp	.+334    	; 0x127a <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    112c:	80 91 a9 00 	lds	r24, 0x00A9
    1130:	80 64       	ori	r24, 0x40	; 64
    1132:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	a5 da       	rcall	.-2742   	; 0x684 <USB_Host_WaitMS>
    113a:	88 23       	and	r24, r24
    113c:	09 f0       	breq	.+2      	; 0x1140 <USB_Host_SendControlRequest+0x92>
    113e:	9d c0       	rjmp	.+314    	; 0x127a <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1140:	80 91 2c 01 	lds	r24, 0x012C
    1144:	87 ff       	sbrs	r24, 7
    1146:	4f c0       	rjmp	.+158    	; 0x11e6 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1148:	80 91 aa 00 	lds	r24, 0x00AA
    114c:	8f 7c       	andi	r24, 0xCF	; 207
    114e:	80 61       	ori	r24, 0x10	; 16
    1150:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1154:	01 15       	cp	r16, r1
    1156:	11 05       	cpc	r17, r1
    1158:	61 f5       	brne	.+88     	; 0x11b2 <USB_Host_SendControlRequest+0x104>
    115a:	2d c0       	rjmp	.+90     	; 0x11b6 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    115c:	80 91 a9 00 	lds	r24, 0x00A9
    1160:	8f 7b       	andi	r24, 0xBF	; 191
    1162:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	79 df       	rcall	.-270    	; 0x105c <USB_Host_WaitForIOS>
    116a:	88 23       	and	r24, r24
    116c:	09 f0       	breq	.+2      	; 0x1170 <USB_Host_SendControlRequest+0xc2>
    116e:	85 c0       	rjmp	.+266    	; 0x127a <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1170:	80 91 f6 00 	lds	r24, 0x00F6
    1174:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	49 f4       	brne	.+18     	; 0x118e <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    117c:	c0 e0       	ldi	r28, 0x00	; 0
    117e:	d0 e0       	ldi	r29, 0x00	; 0
    1180:	06 c0       	rjmp	.+12     	; 0x118e <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1182:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1186:	f8 01       	movw	r30, r16
    1188:	81 93       	st	Z+, r24
    118a:	8f 01       	movw	r16, r30
					DataLen--;
    118c:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    118e:	80 91 f6 00 	lds	r24, 0x00F6
    1192:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	11 f0       	breq	.+4      	; 0x119e <USB_Host_SendControlRequest+0xf0>
    119a:	20 97       	sbiw	r28, 0x00	; 0
    119c:	91 f7       	brne	.-28     	; 0x1182 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    119e:	80 91 a9 00 	lds	r24, 0x00A9
    11a2:	80 64       	ori	r24, 0x40	; 64
    11a4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11a8:	80 91 a6 00 	lds	r24, 0x00A6
    11ac:	8e 77       	andi	r24, 0x7E	; 126
    11ae:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    11b2:	20 97       	sbiw	r28, 0x00	; 0
    11b4:	99 f6       	brne	.-90     	; 0x115c <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11b6:	80 91 aa 00 	lds	r24, 0x00AA
    11ba:	8f 7c       	andi	r24, 0xCF	; 207
    11bc:	80 62       	ori	r24, 0x20	; 32
    11be:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11c2:	80 91 a9 00 	lds	r24, 0x00A9
    11c6:	8f 7b       	andi	r24, 0xBF	; 191
    11c8:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	46 df       	rcall	.-372    	; 0x105c <USB_Host_WaitForIOS>
    11d0:	88 23       	and	r24, r24
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <USB_Host_SendControlRequest+0x128>
    11d4:	52 c0       	rjmp	.+164    	; 0x127a <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11d6:	80 91 a6 00 	lds	r24, 0x00A6
    11da:	8b 77       	andi	r24, 0x7B	; 123
    11dc:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	3c df       	rcall	.-392    	; 0x105c <USB_Host_WaitForIOS>
    11e4:	4a c0       	rjmp	.+148    	; 0x127a <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    11e6:	01 15       	cp	r16, r1
    11e8:	11 05       	cpc	r17, r1
    11ea:	99 f1       	breq	.+102    	; 0x1252 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11ec:	80 91 aa 00 	lds	r24, 0x00AA
    11f0:	8f 7c       	andi	r24, 0xCF	; 207
    11f2:	80 62       	ori	r24, 0x20	; 32
    11f4:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11f8:	80 91 a9 00 	lds	r24, 0x00A9
    11fc:	8f 7b       	andi	r24, 0xBF	; 191
    11fe:	80 93 a9 00 	sts	0x00A9, r24
    1202:	1c c0       	rjmp	.+56     	; 0x123c <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	2a df       	rcall	.-428    	; 0x105c <USB_Host_WaitForIOS>
    1208:	88 23       	and	r24, r24
    120a:	b9 f5       	brne	.+110    	; 0x127a <USB_Host_SendControlRequest+0x1cc>
    120c:	f8 01       	movw	r30, r16
    120e:	06 c0       	rjmp	.+12     	; 0x121c <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1210:	81 91       	ld	r24, Z+
    1212:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1214:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1218:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    121a:	59 f0       	breq	.+22     	; 0x1232 <USB_Host_SendControlRequest+0x184>
    121c:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    121e:	20 91 f6 00 	lds	r18, 0x00F6
    1222:	30 91 f7 00 	lds	r19, 0x00F7
    1226:	80 91 25 01 	lds	r24, 0x0125
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	28 17       	cp	r18, r24
    122e:	39 07       	cpc	r19, r25
    1230:	78 f3       	brcs	.-34     	; 0x1210 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1232:	80 91 a6 00 	lds	r24, 0x00A6
    1236:	8b 77       	andi	r24, 0x7B	; 123
    1238:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    123c:	20 97       	sbiw	r28, 0x00	; 0
    123e:	11 f7       	brne	.-60     	; 0x1204 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	0c df       	rcall	.-488    	; 0x105c <USB_Host_WaitForIOS>
    1244:	88 23       	and	r24, r24
    1246:	c9 f4       	brne	.+50     	; 0x127a <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1248:	80 91 a9 00 	lds	r24, 0x00A9
    124c:	80 64       	ori	r24, 0x40	; 64
    124e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1252:	80 91 aa 00 	lds	r24, 0x00AA
    1256:	8f 7c       	andi	r24, 0xCF	; 207
    1258:	80 61       	ori	r24, 0x10	; 16
    125a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    125e:	80 91 a9 00 	lds	r24, 0x00A9
    1262:	8f 7b       	andi	r24, 0xBF	; 191
    1264:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	f8 de       	rcall	.-528    	; 0x105c <USB_Host_WaitForIOS>
    126c:	88 23       	and	r24, r24
    126e:	29 f4       	brne	.+10     	; 0x127a <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1270:	90 91 a6 00 	lds	r25, 0x00A6
    1274:	9e 77       	andi	r25, 0x7E	; 126
    1276:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    127a:	90 91 a9 00 	lds	r25, 0x00A9
    127e:	90 64       	ori	r25, 0x40	; 64
    1280:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1284:	e1 14       	cp	r14, r1
    1286:	f1 04       	cpc	r15, r1
    1288:	29 f4       	brne	.+10     	; 0x1294 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    128a:	90 91 9e 00 	lds	r25, 0x009E
    128e:	9e 7f       	andi	r25, 0xFE	; 254
    1290:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    129a:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	08 95       	ret

000012ac <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    12ac:	1f 93       	push	r17
    12ae:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    12b0:	10 92 2c 01 	sts	0x012C, r1
    12b4:	89 e0       	ldi	r24, 0x09	; 9
    12b6:	80 93 2d 01 	sts	0x012D, r24
    12ba:	10 93 2e 01 	sts	0x012E, r17
    12be:	10 92 2f 01 	sts	0x012F, r1
    12c2:	10 92 31 01 	sts	0x0131, r1
    12c6:	10 92 30 01 	sts	0x0130, r1
    12ca:	10 92 33 01 	sts	0x0133, r1
    12ce:	10 92 32 01 	sts	0x0132, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12d2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	e9 de       	rcall	.-558    	; 0x10ae <USB_Host_SendControlRequest>
    12dc:	88 23       	and	r24, r24
    12de:	49 f4       	brne	.+18     	; 0x12f2 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    12e0:	10 93 2a 01 	sts	0x012A, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    12e4:	11 23       	and	r17, r17
    12e6:	11 f0       	breq	.+4      	; 0x12ec <USB_Host_SetDeviceConfiguration+0x40>
    12e8:	9b e0       	ldi	r25, 0x0B	; 11
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <USB_Host_SetDeviceConfiguration+0x42>
    12ec:	9a e0       	ldi	r25, 0x0A	; 10
    12ee:	90 93 34 01 	sts	0x0134, r25
	}

	return ErrorCode;
}
    12f2:	1f 91       	pop	r17
    12f4:	08 95       	ret

000012f6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12f6:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    12f8:	10 91 a7 00 	lds	r17, 0x00A7
    12fc:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    12fe:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1302:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1306:	13 da       	rcall	.-3034   	; 0x72e <USB_Host_ProcessNextHostState>
    1308:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    130c:	1f 91       	pop	r17
    130e:	08 95       	ret

00001310 <DCOMP_MIDI_Host_NextMIDIStreamingInterface>:

	return MIDI_ENUMERROR_NoError;
}

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingInterface(void* const CurrentDescriptor)
{
    1310:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1312:	81 81       	ldd	r24, Z+1	; 0x01
    1314:	84 30       	cpi	r24, 0x04	; 4
    1316:	49 f4       	brne	.+18     	; 0x132a <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
    1318:	85 81       	ldd	r24, Z+5	; 0x05
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	31 f4       	brne	.+12     	; 0x132a <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1a>
    131e:	86 81       	ldd	r24, Z+6	; 0x06
    1320:	83 30       	cpi	r24, 0x03	; 3
    1322:	19 f4       	brne	.+6      	; 0x132a <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
    1324:	87 81       	ldd	r24, Z+7	; 0x07
    1326:	88 23       	and	r24, r24
    1328:	11 f0       	breq	.+4      	; 0x132e <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    132e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1330:	08 95       	ret

00001332 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint>:

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint(void* const CurrentDescriptor)
{
    1332:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1334:	81 81       	ldd	r24, Z+1	; 0x01
    1336:	85 30       	cpi	r24, 0x05	; 5
    1338:	49 f4       	brne	.+18     	; 0x134c <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    133a:	83 81       	ldd	r24, Z+3	; 0x03
    133c:	83 70       	andi	r24, 0x03	; 3

		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	39 f4       	brne	.+14     	; 0x1350 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x1e>
    1342:	82 81       	ldd	r24, Z+2	; 0x02
    1344:	87 dc       	rcall	.-1778   	; 0xc54 <Pipe_IsEndpointBound>
    1346:	88 23       	and	r24, r24
    1348:	19 f4       	brne	.+6      	; 0x1350 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x1e>
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    134c:	84 30       	cpi	r24, 0x04	; 4
    134e:	21 f0       	breq	.+8      	; 0x1358 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x26>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	08 95       	ret
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1358:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    135a:	08 95       	ret

0000135c <MIDI_Host_ConfigurePipes>:
#include "MIDIClassHost.h"

uint8_t MIDI_Host_ConfigurePipes(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
                                 void* ConfigDescriptorData)
{
    135c:	6f 92       	push	r6
    135e:	7f 92       	push	r7
    1360:	8f 92       	push	r8
    1362:	9f 92       	push	r9
    1364:	af 92       	push	r10
    1366:	bf 92       	push	r11
    1368:	cf 92       	push	r12
    136a:	df 92       	push	r13
    136c:	ef 92       	push	r14
    136e:	ff 92       	push	r15
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <MIDI_Host_ConfigurePipes+0x1e>
    137a:	00 d0       	rcall	.+0      	; 0x137c <MIDI_Host_ConfigurePipes+0x20>
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	8c 01       	movw	r16, r24
    1382:	7a 83       	std	Y+2, r23	; 0x02
    1384:	69 83       	std	Y+1, r22	; 0x01
    1386:	fa 01       	movw	r30, r20
    1388:	5c 83       	std	Y+4, r21	; 0x04
    138a:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;

	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
    138c:	dc 01       	movw	r26, r24
    138e:	1d 96       	adiw	r26, 0x0d	; 13
    1390:	1c 92       	st	X, r1
    1392:	1e 92       	st	-X, r1
    1394:	1c 97       	sbiw	r26, 0x0c	; 12

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1396:	81 81       	ldd	r24, Z+1	; 0x01
    1398:	82 30       	cpi	r24, 0x02	; 2
    139a:	09 f0       	breq	.+2      	; 0x139e <MIDI_Host_ConfigurePipes+0x42>
    139c:	67 c0       	rjmp	.+206    	; 0x146c <MIDI_Host_ConfigurePipes+0x110>
    139e:	aa 24       	eor	r10, r10
    13a0:	bb 24       	eor	r11, r11
    13a2:	cc 24       	eor	r12, r12
    13a4:	dd 24       	eor	r13, r13
    13a6:	ee 24       	eor	r14, r14
    13a8:	ff 24       	eor	r15, r15
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MIDIInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    13aa:	83 e0       	ldi	r24, 0x03	; 3
    13ac:	68 2e       	mov	r6, r24
    13ae:	71 2c       	mov	r7, r1
    13b0:	6c 0e       	add	r6, r28
    13b2:	7d 1e       	adc	r7, r29
    13b4:	4e 01       	movw	r8, r28
    13b6:	08 94       	sec
    13b8:	81 1c       	adc	r8, r1
    13ba:	91 1c       	adc	r9, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MIDIInterface) ||
    13bc:	a1 14       	cp	r10, r1
    13be:	b1 04       	cpc	r11, r1
    13c0:	39 f0       	breq	.+14     	; 0x13d0 <MIDI_Host_ConfigurePipes+0x74>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    13c2:	c4 01       	movw	r24, r8
    13c4:	b3 01       	movw	r22, r6
    13c6:	49 e9       	ldi	r20, 0x99	; 153
    13c8:	59 e0       	ldi	r21, 0x09	; 9
    13ca:	04 de       	rcall	.-1016   	; 0xfd4 <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MIDIInterface) ||
    13cc:	88 23       	and	r24, r24
    13ce:	79 f0       	breq	.+30     	; 0x13ee <MIDI_Host_ConfigurePipes+0x92>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    13d0:	c4 01       	movw	r24, r8
    13d2:	b3 01       	movw	r22, r6
    13d4:	48 e8       	ldi	r20, 0x88	; 136
    13d6:	59 e0       	ldi	r21, 0x09	; 9
    13d8:	fd dd       	rcall	.-1030   	; 0xfd4 <USB_GetNextDescriptorComp>
    13da:	88 23       	and	r24, r24
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <MIDI_Host_ConfigurePipes+0x84>
    13de:	48 c0       	rjmp	.+144    	; 0x1470 <MIDI_Host_ConfigurePipes+0x114>
			                              DCOMP_MIDI_Host_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MIDI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MIDIInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    13e0:	ab 80       	ldd	r10, Y+3	; 0x03
    13e2:	bc 80       	ldd	r11, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    13e4:	cc 24       	eor	r12, r12
    13e6:	dd 24       	eor	r13, r13
			                              DCOMP_MIDI_Host_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MIDI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MIDIInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    13e8:	ee 24       	eor	r14, r14
    13ea:	ff 24       	eor	r15, r15
    13ec:	e7 cf       	rjmp	.-50     	; 0x13bc <MIDI_Host_ConfigurePipes+0x60>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    13ee:	eb 81       	ldd	r30, Y+3	; 0x03
    13f0:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	87 ff       	sbrs	r24, 7
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <MIDI_Host_ConfigurePipes+0xa0>
		  DataINEndpoint  = EndpointData;
    13f8:	7f 01       	movw	r14, r30
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <MIDI_Host_ConfigurePipes+0xa2>
		else
		  DataOUTEndpoint = EndpointData;
    13fc:	6f 01       	movw	r12, r30
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    13fe:	e1 14       	cp	r14, r1
    1400:	f1 04       	cpc	r15, r1
    1402:	e1 f2       	breq	.-72     	; 0x13bc <MIDI_Host_ConfigurePipes+0x60>
    1404:	c1 14       	cp	r12, r1
    1406:	d1 04       	cpc	r13, r1
    1408:	c9 f2       	breq	.-78     	; 0x13bc <MIDI_Host_ConfigurePipes+0x60>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	MIDIInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    140a:	f7 01       	movw	r30, r14
    140c:	84 81       	ldd	r24, Z+4	; 0x04
    140e:	95 81       	ldd	r25, Z+5	; 0x05
    1410:	d8 01       	movw	r26, r16
    1412:	12 96       	adiw	r26, 0x02	; 2
    1414:	9c 93       	st	X, r25
    1416:	8e 93       	st	-X, r24
    1418:	11 97       	sbiw	r26, 0x01	; 1
	MIDIInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	13 96       	adiw	r26, 0x03	; 3
    141e:	8c 93       	st	X, r24
    1420:	13 97       	sbiw	r26, 0x03	; 3
	MIDIInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    1422:	22 e0       	ldi	r18, 0x02	; 2
    1424:	14 96       	adiw	r26, 0x04	; 4
    1426:	2c 93       	st	X, r18
    1428:	14 97       	sbiw	r26, 0x04	; 4
	
	MIDIInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    142a:	f6 01       	movw	r30, r12
    142c:	84 81       	ldd	r24, Z+4	; 0x04
    142e:	95 81       	ldd	r25, Z+5	; 0x05
    1430:	18 96       	adiw	r26, 0x08	; 8
    1432:	9c 93       	st	X, r25
    1434:	8e 93       	st	-X, r24
    1436:	17 97       	sbiw	r26, 0x07	; 7
	MIDIInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1438:	82 81       	ldd	r24, Z+2	; 0x02
    143a:	19 96       	adiw	r26, 0x09	; 9
    143c:	8c 93       	st	X, r24
    143e:	19 97       	sbiw	r26, 0x09	; 9
	MIDIInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    1440:	1a 96       	adiw	r26, 0x0a	; 10
    1442:	2c 93       	st	X, r18
	
	if (!(Pipe_ConfigurePipeTable(&MIDIInterfaceInfo->Config.DataINPipe, 1)))
    1444:	c8 01       	movw	r24, r16
    1446:	61 e0       	ldi	r22, 0x01	; 1
    1448:	c8 db       	rcall	.-2160   	; 0xbda <Pipe_ConfigurePipeTable>
    144a:	88 23       	and	r24, r24
    144c:	99 f0       	breq	.+38     	; 0x1474 <MIDI_Host_ConfigurePipes+0x118>
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&MIDIInterfaceInfo->Config.DataOUTPipe, 1)))
    144e:	c8 01       	movw	r24, r16
    1450:	06 96       	adiw	r24, 0x06	; 6
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	c2 db       	rcall	.-2172   	; 0xbda <Pipe_ConfigurePipeTable>
    1456:	88 23       	and	r24, r24
    1458:	69 f0       	breq	.+26     	; 0x1474 <MIDI_Host_ConfigurePipes+0x118>
	  return false;	

	MIDIInterfaceInfo->State.InterfaceNumber = MIDIInterface->InterfaceNumber;
    145a:	d5 01       	movw	r26, r10
    145c:	12 96       	adiw	r26, 0x02	; 2
    145e:	8c 91       	ld	r24, X
    1460:	12 97       	sbiw	r26, 0x02	; 2
    1462:	f8 01       	movw	r30, r16
    1464:	85 87       	std	Z+13, r24	; 0x0d
	MIDIInterfaceInfo->State.IsActive = true;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	84 87       	std	Z+12, r24	; 0x0c
    146a:	04 c0       	rjmp	.+8      	; 0x1474 <MIDI_Host_ConfigurePipes+0x118>
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;

	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	03 c0       	rjmp	.+6      	; 0x1476 <MIDI_Host_ConfigurePipes+0x11a>
		                              DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_MIDI_Host_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MIDI_ENUMERROR_NoCompatibleInterfaceFound;
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <MIDI_Host_ConfigurePipes+0x11a>
	
	if (!(Pipe_ConfigurePipeTable(&MIDIInterfaceInfo->Config.DataINPipe, 1)))
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&MIDIInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;	
    1474:	80 e0       	ldi	r24, 0x00	; 0

	MIDIInterfaceInfo->State.InterfaceNumber = MIDIInterface->InterfaceNumber;
	MIDIInterfaceInfo->State.IsActive = true;

	return MIDI_ENUMERROR_NoError;
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	df 90       	pop	r13
    148c:	cf 90       	pop	r12
    148e:	bf 90       	pop	r11
    1490:	af 90       	pop	r10
    1492:	9f 90       	pop	r9
    1494:	8f 90       	pop	r8
    1496:	7f 90       	pop	r7
    1498:	6f 90       	pop	r6
    149a:	08 95       	ret

0000149c <MIDI_Host_Flush>:
	MIDI_Host_Flush(MIDIInterfaceInfo);
	#endif
}

uint8_t MIDI_Host_Flush(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
    149c:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    149e:	80 91 34 01 	lds	r24, 0x0134
    14a2:	8b 30       	cpi	r24, 0x0B	; 11
    14a4:	39 f5       	brne	.+78     	; 0x14f4 <MIDI_Host_Flush+0x58>
    14a6:	84 85       	ldd	r24, Z+12	; 0x0c
    14a8:	88 23       	and	r24, r24
    14aa:	31 f1       	breq	.+76     	; 0x14f8 <MIDI_Host_Flush+0x5c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14ac:	86 81       	ldd	r24, Z+6	; 0x06
    14ae:	8f 70       	andi	r24, 0x0F	; 15
    14b0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14b4:	80 91 a9 00 	lds	r24, 0x00A9
    14b8:	8f 7b       	andi	r24, 0xBF	; 191
    14ba:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    14be:	80 91 f6 00 	lds	r24, 0x00F6
    14c2:	90 91 f7 00 	lds	r25, 0x00F7
	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();
	
	if (Pipe_BytesInPipe())
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	71 f0       	breq	.+28     	; 0x14e6 <MIDI_Host_Flush+0x4a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    14ca:	80 91 a6 00 	lds	r24, 0x00A6
    14ce:	8b 77       	andi	r24, 0x7B	; 123
    14d0:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_ClearOUT();

		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    14d4:	e3 db       	rcall	.-2106   	; 0xc9c <Pipe_WaitUntilReady>
    14d6:	88 23       	and	r24, r24
    14d8:	31 f0       	breq	.+12     	; 0x14e6 <MIDI_Host_Flush+0x4a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14da:	90 91 a9 00 	lds	r25, 0x00A9
    14de:	90 64       	ori	r25, 0x40	; 64
    14e0:	90 93 a9 00 	sts	0x00A9, r25
		{
			Pipe_Freeze();
			return ErrorCode;
    14e4:	08 95       	ret
    14e6:	80 91 a9 00 	lds	r24, 0x00A9
    14ea:	80 64       	ori	r24, 0x40	; 64
    14ec:	80 93 a9 00 	sts	0x00A9, r24
		}
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	08 95       	ret
}

uint8_t MIDI_Host_Flush(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	08 95       	ret
    14f8:	82 e0       	ldi	r24, 0x02	; 2
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
}
    14fa:	08 95       	ret

000014fc <MIDI_Host_USBTask>:
	return DESCRIPTOR_SEARCH_NotFound;
}

void MIDI_Host_USBTask(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    14fc:	20 91 34 01 	lds	r18, 0x0134
    1500:	2b 30       	cpi	r18, 0x0B	; 11
    1502:	29 f4       	brne	.+10     	; 0x150e <MIDI_Host_USBTask+0x12>
    1504:	fc 01       	movw	r30, r24
    1506:	24 85       	ldd	r18, Z+12	; 0x0c
    1508:	22 23       	and	r18, r18
    150a:	09 f0       	breq	.+2      	; 0x150e <MIDI_Host_USBTask+0x12>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	MIDI_Host_Flush(MIDIInterfaceInfo);
    150c:	c7 cf       	rjmp	.-114    	; 0x149c <MIDI_Host_Flush>
    150e:	08 95       	ret

00001510 <MIDI_Host_SendEventPacket>:
	return PIPE_READYWAIT_NoError;
}

uint8_t MIDI_Host_SendEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    1510:	fc 01       	movw	r30, r24
    1512:	cb 01       	movw	r24, r22
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    1514:	20 91 34 01 	lds	r18, 0x0134
    1518:	2b 30       	cpi	r18, 0x0B	; 11
    151a:	11 f5       	brne	.+68     	; 0x1560 <MIDI_Host_SendEventPacket+0x50>
    151c:	24 85       	ldd	r18, Z+12	; 0x0c
    151e:	22 23       	and	r18, r18
    1520:	09 f1       	breq	.+66     	; 0x1564 <MIDI_Host_SendEventPacket+0x54>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1522:	26 81       	ldd	r18, Z+6	; 0x06
    1524:	2f 70       	andi	r18, 0x0F	; 15
    1526:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    152a:	20 91 a9 00 	lds	r18, 0x00A9
    152e:	2f 7b       	andi	r18, 0xBF	; 191
    1530:	20 93 a9 00 	sts	0x00A9, r18
	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();
	
	if ((ErrorCode = Pipe_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != PIPE_RWSTREAM_NoError)
    1534:	64 e0       	ldi	r22, 0x04	; 4
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	21 da       	rcall	.-3006   	; 0x980 <Pipe_Write_Stream_LE>
    153e:	88 23       	and	r24, r24
    1540:	49 f4       	brne	.+18     	; 0x1554 <MIDI_Host_SendEventPacket+0x44>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1542:	90 91 a6 00 	lds	r25, 0x00A6
	{
		Pipe_Freeze();
		return ErrorCode;
	}

	if (!(Pipe_IsReadWriteAllowed()))
    1546:	95 fd       	sbrc	r25, 5
    1548:	05 c0       	rjmp	.+10     	; 0x1554 <MIDI_Host_SendEventPacket+0x44>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    154a:	90 91 a6 00 	lds	r25, 0x00A6
    154e:	9b 77       	andi	r25, 0x7B	; 123
    1550:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1554:	90 91 a9 00 	lds	r25, 0x00A9
    1558:	90 64       	ori	r25, 0x40	; 64
    155a:	90 93 a9 00 	sts	0x00A9, r25
	  Pipe_ClearOUT();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    155e:	08 95       	ret

uint8_t MIDI_Host_SendEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	08 95       	ret
    1564:	81 e0       	ldi	r24, 0x01	; 1
	  Pipe_ClearOUT();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1566:	08 95       	ret

00001568 <MIDI_Host_ReceiveEventPacket>:

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    1568:	fc 01       	movw	r30, r24
    156a:	cb 01       	movw	r24, r22
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    156c:	20 91 34 01 	lds	r18, 0x0134
    1570:	2b 30       	cpi	r18, 0x0B	; 11
    1572:	99 f5       	brne	.+102    	; 0x15da <MIDI_Host_ReceiveEventPacket+0x72>
    1574:	24 85       	ldd	r18, Z+12	; 0x0c
    1576:	22 23       	and	r18, r18
    1578:	91 f1       	breq	.+100    	; 0x15de <MIDI_Host_ReceiveEventPacket+0x76>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    157a:	20 81       	ld	r18, Z
    157c:	2f 70       	andi	r18, 0x0F	; 15
    157e:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1582:	20 91 a9 00 	lds	r18, 0x00A9
    1586:	2f 7b       	andi	r18, 0xBF	; 191
    1588:	20 93 a9 00 	sts	0x00A9, r18
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    158c:	20 91 a6 00 	lds	r18, 0x00A6
	bool DataReady = false;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    1590:	20 ff       	sbrs	r18, 0
    1592:	1c c0       	rjmp	.+56     	; 0x15cc <MIDI_Host_ReceiveEventPacket+0x64>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1594:	20 91 f6 00 	lds	r18, 0x00F6
    1598:	30 91 f7 00 	lds	r19, 0x00F7
	{
		if (Pipe_BytesInPipe())
    159c:	21 15       	cp	r18, r1
    159e:	31 05       	cpc	r19, r1
    15a0:	39 f0       	breq	.+14     	; 0x15b0 <MIDI_Host_ReceiveEventPacket+0x48>
		{
			Pipe_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
    15a2:	64 e0       	ldi	r22, 0x04	; 4
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	4d da       	rcall	.-2918   	; 0xa46 <Pipe_Read_Stream_LE>
			DataReady = true;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <MIDI_Host_ReceiveEventPacket+0x4a>
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
	  
	bool DataReady = false;
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	20 91 f6 00 	lds	r18, 0x00F6
    15b6:	30 91 f7 00 	lds	r19, 0x00F7
		{
			Pipe_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
			DataReady = true;
		}

		if (!(Pipe_BytesInPipe()))
    15ba:	21 15       	cp	r18, r1
    15bc:	31 05       	cpc	r19, r1
    15be:	39 f4       	brne	.+14     	; 0x15ce <MIDI_Host_ReceiveEventPacket+0x66>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    15c0:	90 91 a6 00 	lds	r25, 0x00A6
    15c4:	9e 77       	andi	r25, 0x7E	; 126
    15c6:	90 93 a6 00 	sts	0x00A6, r25
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <MIDI_Host_ReceiveEventPacket+0x66>
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
	  
	bool DataReady = false;
    15cc:	80 e0       	ldi	r24, 0x00	; 0

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    15ce:	90 91 a9 00 	lds	r25, 0x00A9
    15d2:	90 64       	ori	r25, 0x40	; 64
    15d4:	90 93 a9 00 	sts	0x00A9, r25
		  Pipe_ClearIN();
	}
	
	Pipe_Freeze();
	
	return DataReady;
    15d8:	08 95       	ret

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	08 95       	ret
    15de:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Pipe_Freeze();
	
	return DataReady;
}
    15e0:	08 95       	ret

000015e2 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    15e2:	90 91 c8 00 	lds	r25, 0x00C8
    15e6:	95 ff       	sbrs	r25, 5
    15e8:	fc cf       	rjmp	.-8      	; 0x15e2 <Serial_putchar>
				UDR1 = DataByte;
    15ea:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	08 95       	ret

000015f4 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    15f4:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    15f8:	87 ff       	sbrs	r24, 7
    15fa:	08 c0       	rjmp	.+16     	; 0x160c <Serial_getchar+0x18>
    15fc:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1600:	87 ff       	sbrs	r24, 7
    1602:	07 c0       	rjmp	.+14     	; 0x1612 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1604:	20 91 ce 00 	lds	r18, 0x00CE
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	05 c0       	rjmp	.+10     	; 0x1616 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    160c:	2e ef       	ldi	r18, 0xFE	; 254
    160e:	3f ef       	ldi	r19, 0xFF	; 255
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1612:	2f ef       	ldi	r18, 0xFF	; 255
    1614:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1616:	c9 01       	movw	r24, r18
    1618:	08 95       	ret

0000161a <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    161a:	fc 01       	movw	r30, r24
	if (!(Stream))
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	51 f4       	brne	.+20     	; 0x1634 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1620:	e5 e3       	ldi	r30, 0x35	; 53
    1622:	f1 e0       	ldi	r31, 0x01	; 1
    1624:	f0 93 44 01 	sts	0x0144, r31
    1628:	e0 93 43 01 	sts	0x0143, r30
		stdout = Stream;
    162c:	f0 93 46 01 	sts	0x0146, r31
    1630:	e0 93 45 01 	sts	0x0145, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1634:	8e e0       	ldi	r24, 0x0E	; 14
    1636:	df 01       	movw	r26, r30
    1638:	1d 92       	st	X+, r1
    163a:	8a 95       	dec	r24
    163c:	e9 f7       	brne	.-6      	; 0x1638 <Serial_CreateStream+0x1e>
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	83 83       	std	Z+3, r24	; 0x03
    1642:	81 ef       	ldi	r24, 0xF1	; 241
    1644:	9a e0       	ldi	r25, 0x0A	; 10
    1646:	91 87       	std	Z+9, r25	; 0x09
    1648:	80 87       	std	Z+8, r24	; 0x08
    164a:	8a ef       	ldi	r24, 0xFA	; 250
    164c:	9a e0       	ldi	r25, 0x0A	; 10
    164e:	93 87       	std	Z+11, r25	; 0x0b
    1650:	82 87       	std	Z+10, r24	; 0x0a
}
    1652:	08 95       	ret

00001654 <printf_P>:
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	fe 01       	movw	r30, r28
    165e:	35 96       	adiw	r30, 0x05	; 5
    1660:	61 91       	ld	r22, Z+
    1662:	71 91       	ld	r23, Z+
    1664:	80 91 45 01 	lds	r24, 0x0145
    1668:	90 91 46 01 	lds	r25, 0x0146
    166c:	dc 01       	movw	r26, r24
    166e:	13 96       	adiw	r26, 0x03	; 3
    1670:	2c 91       	ld	r18, X
    1672:	13 97       	sbiw	r26, 0x03	; 3
    1674:	28 60       	ori	r18, 0x08	; 8
    1676:	13 96       	adiw	r26, 0x03	; 3
    1678:	2c 93       	st	X, r18
    167a:	af 01       	movw	r20, r30
    167c:	42 d0       	rcall	.+132    	; 0x1702 <vfprintf>
    167e:	e0 91 45 01 	lds	r30, 0x0145
    1682:	f0 91 46 01 	lds	r31, 0x0146
    1686:	23 81       	ldd	r18, Z+3	; 0x03
    1688:	27 7f       	andi	r18, 0xF7	; 247
    168a:	23 83       	std	Z+3, r18	; 0x03
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <puts_P>:
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	8c 01       	movw	r16, r24
    16a0:	e0 91 45 01 	lds	r30, 0x0145
    16a4:	f0 91 46 01 	lds	r31, 0x0146
    16a8:	83 81       	ldd	r24, Z+3	; 0x03
    16aa:	81 ff       	sbrs	r24, 1
    16ac:	20 c0       	rjmp	.+64     	; 0x16ee <puts_P+0x5c>
    16ae:	c0 e0       	ldi	r28, 0x00	; 0
    16b0:	d0 e0       	ldi	r29, 0x00	; 0
    16b2:	0c c0       	rjmp	.+24     	; 0x16cc <puts_P+0x3a>
    16b4:	db 01       	movw	r26, r22
    16b6:	18 96       	adiw	r26, 0x08	; 8
    16b8:	ed 91       	ld	r30, X+
    16ba:	fc 91       	ld	r31, X
    16bc:	19 97       	sbiw	r26, 0x09	; 9
    16be:	09 95       	icall
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	11 f0       	breq	.+4      	; 0x16c8 <puts_P+0x36>
    16c4:	cf ef       	ldi	r28, 0xFF	; 255
    16c6:	df ef       	ldi	r29, 0xFF	; 255
    16c8:	0f 5f       	subi	r16, 0xFF	; 255
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
    16cc:	f8 01       	movw	r30, r16
    16ce:	84 91       	lpm	r24, Z+
    16d0:	60 91 45 01 	lds	r22, 0x0145
    16d4:	70 91 46 01 	lds	r23, 0x0146
    16d8:	88 23       	and	r24, r24
    16da:	61 f7       	brne	.-40     	; 0x16b4 <puts_P+0x22>
    16dc:	db 01       	movw	r26, r22
    16de:	18 96       	adiw	r26, 0x08	; 8
    16e0:	ed 91       	ld	r30, X+
    16e2:	fc 91       	ld	r31, X
    16e4:	19 97       	sbiw	r26, 0x09	; 9
    16e6:	8a e0       	ldi	r24, 0x0A	; 10
    16e8:	09 95       	icall
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	11 f0       	breq	.+4      	; 0x16f2 <puts_P+0x60>
    16ee:	cf ef       	ldi	r28, 0xFF	; 255
    16f0:	df ef       	ldi	r29, 0xFF	; 255
    16f2:	ce 01       	movw	r24, r28
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	08 95       	ret

00001702 <vfprintf>:
    1702:	2f 92       	push	r2
    1704:	3f 92       	push	r3
    1706:	4f 92       	push	r4
    1708:	5f 92       	push	r5
    170a:	6f 92       	push	r6
    170c:	7f 92       	push	r7
    170e:	8f 92       	push	r8
    1710:	9f 92       	push	r9
    1712:	af 92       	push	r10
    1714:	bf 92       	push	r11
    1716:	cf 92       	push	r12
    1718:	df 92       	push	r13
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	2c 97       	sbiw	r28, 0x0c	; 12
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	6c 01       	movw	r12, r24
    1738:	1b 01       	movw	r2, r22
    173a:	8a 01       	movw	r16, r20
    173c:	fc 01       	movw	r30, r24
    173e:	17 82       	std	Z+7, r1	; 0x07
    1740:	16 82       	std	Z+6, r1	; 0x06
    1742:	83 81       	ldd	r24, Z+3	; 0x03
    1744:	81 ff       	sbrs	r24, 1
    1746:	c4 c1       	rjmp	.+904    	; 0x1ad0 <vfprintf+0x3ce>
    1748:	2e 01       	movw	r4, r28
    174a:	08 94       	sec
    174c:	41 1c       	adc	r4, r1
    174e:	51 1c       	adc	r5, r1
    1750:	f6 01       	movw	r30, r12
    1752:	93 81       	ldd	r25, Z+3	; 0x03
    1754:	f1 01       	movw	r30, r2
    1756:	93 fd       	sbrc	r25, 3
    1758:	85 91       	lpm	r24, Z+
    175a:	93 ff       	sbrs	r25, 3
    175c:	81 91       	ld	r24, Z+
    175e:	1f 01       	movw	r2, r30
    1760:	88 23       	and	r24, r24
    1762:	09 f4       	brne	.+2      	; 0x1766 <vfprintf+0x64>
    1764:	b1 c1       	rjmp	.+866    	; 0x1ac8 <vfprintf+0x3c6>
    1766:	85 32       	cpi	r24, 0x25	; 37
    1768:	39 f4       	brne	.+14     	; 0x1778 <vfprintf+0x76>
    176a:	93 fd       	sbrc	r25, 3
    176c:	85 91       	lpm	r24, Z+
    176e:	93 ff       	sbrs	r25, 3
    1770:	81 91       	ld	r24, Z+
    1772:	1f 01       	movw	r2, r30
    1774:	85 32       	cpi	r24, 0x25	; 37
    1776:	21 f4       	brne	.+8      	; 0x1780 <vfprintf+0x7e>
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	b6 01       	movw	r22, r12
    177c:	db d1       	rcall	.+950    	; 0x1b34 <fputc>
    177e:	e8 cf       	rjmp	.-48     	; 0x1750 <vfprintf+0x4e>
    1780:	ee 24       	eor	r14, r14
    1782:	ff 24       	eor	r15, r15
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	20 32       	cpi	r18, 0x20	; 32
    1788:	b0 f4       	brcc	.+44     	; 0x17b6 <vfprintf+0xb4>
    178a:	8b 32       	cpi	r24, 0x2B	; 43
    178c:	69 f0       	breq	.+26     	; 0x17a8 <vfprintf+0xa6>
    178e:	8c 32       	cpi	r24, 0x2C	; 44
    1790:	28 f4       	brcc	.+10     	; 0x179c <vfprintf+0x9a>
    1792:	80 32       	cpi	r24, 0x20	; 32
    1794:	51 f0       	breq	.+20     	; 0x17aa <vfprintf+0xa8>
    1796:	83 32       	cpi	r24, 0x23	; 35
    1798:	71 f4       	brne	.+28     	; 0x17b6 <vfprintf+0xb4>
    179a:	0b c0       	rjmp	.+22     	; 0x17b2 <vfprintf+0xb0>
    179c:	8d 32       	cpi	r24, 0x2D	; 45
    179e:	39 f0       	breq	.+14     	; 0x17ae <vfprintf+0xac>
    17a0:	80 33       	cpi	r24, 0x30	; 48
    17a2:	49 f4       	brne	.+18     	; 0x17b6 <vfprintf+0xb4>
    17a4:	21 60       	ori	r18, 0x01	; 1
    17a6:	2c c0       	rjmp	.+88     	; 0x1800 <vfprintf+0xfe>
    17a8:	22 60       	ori	r18, 0x02	; 2
    17aa:	24 60       	ori	r18, 0x04	; 4
    17ac:	29 c0       	rjmp	.+82     	; 0x1800 <vfprintf+0xfe>
    17ae:	28 60       	ori	r18, 0x08	; 8
    17b0:	27 c0       	rjmp	.+78     	; 0x1800 <vfprintf+0xfe>
    17b2:	20 61       	ori	r18, 0x10	; 16
    17b4:	25 c0       	rjmp	.+74     	; 0x1800 <vfprintf+0xfe>
    17b6:	27 fd       	sbrc	r18, 7
    17b8:	2c c0       	rjmp	.+88     	; 0x1812 <vfprintf+0x110>
    17ba:	38 2f       	mov	r19, r24
    17bc:	30 53       	subi	r19, 0x30	; 48
    17be:	3a 30       	cpi	r19, 0x0A	; 10
    17c0:	98 f4       	brcc	.+38     	; 0x17e8 <vfprintf+0xe6>
    17c2:	26 ff       	sbrs	r18, 6
    17c4:	08 c0       	rjmp	.+16     	; 0x17d6 <vfprintf+0xd4>
    17c6:	8e 2d       	mov	r24, r14
    17c8:	88 0f       	add	r24, r24
    17ca:	e8 2e       	mov	r14, r24
    17cc:	ee 0c       	add	r14, r14
    17ce:	ee 0c       	add	r14, r14
    17d0:	e8 0e       	add	r14, r24
    17d2:	e3 0e       	add	r14, r19
    17d4:	15 c0       	rjmp	.+42     	; 0x1800 <vfprintf+0xfe>
    17d6:	8f 2d       	mov	r24, r15
    17d8:	88 0f       	add	r24, r24
    17da:	f8 2e       	mov	r15, r24
    17dc:	ff 0c       	add	r15, r15
    17de:	ff 0c       	add	r15, r15
    17e0:	f8 0e       	add	r15, r24
    17e2:	f3 0e       	add	r15, r19
    17e4:	20 62       	ori	r18, 0x20	; 32
    17e6:	0c c0       	rjmp	.+24     	; 0x1800 <vfprintf+0xfe>
    17e8:	8e 32       	cpi	r24, 0x2E	; 46
    17ea:	21 f4       	brne	.+8      	; 0x17f4 <vfprintf+0xf2>
    17ec:	26 fd       	sbrc	r18, 6
    17ee:	6c c1       	rjmp	.+728    	; 0x1ac8 <vfprintf+0x3c6>
    17f0:	20 64       	ori	r18, 0x40	; 64
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <vfprintf+0xfe>
    17f4:	8c 36       	cpi	r24, 0x6C	; 108
    17f6:	11 f4       	brne	.+4      	; 0x17fc <vfprintf+0xfa>
    17f8:	20 68       	ori	r18, 0x80	; 128
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <vfprintf+0xfe>
    17fc:	88 36       	cpi	r24, 0x68	; 104
    17fe:	49 f4       	brne	.+18     	; 0x1812 <vfprintf+0x110>
    1800:	f1 01       	movw	r30, r2
    1802:	93 fd       	sbrc	r25, 3
    1804:	85 91       	lpm	r24, Z+
    1806:	93 ff       	sbrs	r25, 3
    1808:	81 91       	ld	r24, Z+
    180a:	1f 01       	movw	r2, r30
    180c:	88 23       	and	r24, r24
    180e:	09 f0       	breq	.+2      	; 0x1812 <vfprintf+0x110>
    1810:	ba cf       	rjmp	.-140    	; 0x1786 <vfprintf+0x84>
    1812:	98 2f       	mov	r25, r24
    1814:	95 54       	subi	r25, 0x45	; 69
    1816:	93 30       	cpi	r25, 0x03	; 3
    1818:	18 f0       	brcs	.+6      	; 0x1820 <vfprintf+0x11e>
    181a:	90 52       	subi	r25, 0x20	; 32
    181c:	93 30       	cpi	r25, 0x03	; 3
    181e:	28 f4       	brcc	.+10     	; 0x182a <vfprintf+0x128>
    1820:	0c 5f       	subi	r16, 0xFC	; 252
    1822:	1f 4f       	sbci	r17, 0xFF	; 255
    1824:	ff e3       	ldi	r31, 0x3F	; 63
    1826:	f9 83       	std	Y+1, r31	; 0x01
    1828:	0d c0       	rjmp	.+26     	; 0x1844 <vfprintf+0x142>
    182a:	83 36       	cpi	r24, 0x63	; 99
    182c:	31 f0       	breq	.+12     	; 0x183a <vfprintf+0x138>
    182e:	83 37       	cpi	r24, 0x73	; 115
    1830:	71 f0       	breq	.+28     	; 0x184e <vfprintf+0x14c>
    1832:	83 35       	cpi	r24, 0x53	; 83
    1834:	09 f0       	breq	.+2      	; 0x1838 <vfprintf+0x136>
    1836:	5c c0       	rjmp	.+184    	; 0x18f0 <vfprintf+0x1ee>
    1838:	21 c0       	rjmp	.+66     	; 0x187c <vfprintf+0x17a>
    183a:	f8 01       	movw	r30, r16
    183c:	80 81       	ld	r24, Z
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	0e 5f       	subi	r16, 0xFE	; 254
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	42 01       	movw	r8, r4
    1846:	71 e0       	ldi	r23, 0x01	; 1
    1848:	a7 2e       	mov	r10, r23
    184a:	b1 2c       	mov	r11, r1
    184c:	15 c0       	rjmp	.+42     	; 0x1878 <vfprintf+0x176>
    184e:	62 e0       	ldi	r22, 0x02	; 2
    1850:	66 2e       	mov	r6, r22
    1852:	71 2c       	mov	r7, r1
    1854:	60 0e       	add	r6, r16
    1856:	71 1e       	adc	r7, r17
    1858:	f8 01       	movw	r30, r16
    185a:	80 80       	ld	r8, Z
    185c:	91 80       	ldd	r9, Z+1	; 0x01
    185e:	26 ff       	sbrs	r18, 6
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <vfprintf+0x166>
    1862:	6e 2d       	mov	r22, r14
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	02 c0       	rjmp	.+4      	; 0x186c <vfprintf+0x16a>
    1868:	6f ef       	ldi	r22, 0xFF	; 255
    186a:	7f ef       	ldi	r23, 0xFF	; 255
    186c:	c4 01       	movw	r24, r8
    186e:	2c 87       	std	Y+12, r18	; 0x0c
    1870:	56 d1       	rcall	.+684    	; 0x1b1e <strnlen>
    1872:	5c 01       	movw	r10, r24
    1874:	83 01       	movw	r16, r6
    1876:	2c 85       	ldd	r18, Y+12	; 0x0c
    1878:	2f 77       	andi	r18, 0x7F	; 127
    187a:	16 c0       	rjmp	.+44     	; 0x18a8 <vfprintf+0x1a6>
    187c:	52 e0       	ldi	r21, 0x02	; 2
    187e:	65 2e       	mov	r6, r21
    1880:	71 2c       	mov	r7, r1
    1882:	60 0e       	add	r6, r16
    1884:	71 1e       	adc	r7, r17
    1886:	f8 01       	movw	r30, r16
    1888:	80 80       	ld	r8, Z
    188a:	91 80       	ldd	r9, Z+1	; 0x01
    188c:	26 ff       	sbrs	r18, 6
    188e:	03 c0       	rjmp	.+6      	; 0x1896 <vfprintf+0x194>
    1890:	6e 2d       	mov	r22, r14
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	02 c0       	rjmp	.+4      	; 0x189a <vfprintf+0x198>
    1896:	6f ef       	ldi	r22, 0xFF	; 255
    1898:	7f ef       	ldi	r23, 0xFF	; 255
    189a:	c4 01       	movw	r24, r8
    189c:	2c 87       	std	Y+12, r18	; 0x0c
    189e:	34 d1       	rcall	.+616    	; 0x1b08 <strnlen_P>
    18a0:	5c 01       	movw	r10, r24
    18a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    18a4:	20 68       	ori	r18, 0x80	; 128
    18a6:	83 01       	movw	r16, r6
    18a8:	23 fd       	sbrc	r18, 3
    18aa:	1e c0       	rjmp	.+60     	; 0x18e8 <vfprintf+0x1e6>
    18ac:	07 c0       	rjmp	.+14     	; 0x18bc <vfprintf+0x1ba>
    18ae:	80 e2       	ldi	r24, 0x20	; 32
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	b6 01       	movw	r22, r12
    18b4:	2c 87       	std	Y+12, r18	; 0x0c
    18b6:	3e d1       	rcall	.+636    	; 0x1b34 <fputc>
    18b8:	fa 94       	dec	r15
    18ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    18bc:	8f 2d       	mov	r24, r15
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a8 16       	cp	r10, r24
    18c2:	b9 06       	cpc	r11, r25
    18c4:	a0 f3       	brcs	.-24     	; 0x18ae <vfprintf+0x1ac>
    18c6:	10 c0       	rjmp	.+32     	; 0x18e8 <vfprintf+0x1e6>
    18c8:	f4 01       	movw	r30, r8
    18ca:	27 fd       	sbrc	r18, 7
    18cc:	85 91       	lpm	r24, Z+
    18ce:	27 ff       	sbrs	r18, 7
    18d0:	81 91       	ld	r24, Z+
    18d2:	4f 01       	movw	r8, r30
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	b6 01       	movw	r22, r12
    18d8:	2c 87       	std	Y+12, r18	; 0x0c
    18da:	2c d1       	rcall	.+600    	; 0x1b34 <fputc>
    18dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    18de:	f1 10       	cpse	r15, r1
    18e0:	fa 94       	dec	r15
    18e2:	08 94       	sec
    18e4:	a1 08       	sbc	r10, r1
    18e6:	b1 08       	sbc	r11, r1
    18e8:	a1 14       	cp	r10, r1
    18ea:	b1 04       	cpc	r11, r1
    18ec:	69 f7       	brne	.-38     	; 0x18c8 <vfprintf+0x1c6>
    18ee:	e9 c0       	rjmp	.+466    	; 0x1ac2 <vfprintf+0x3c0>
    18f0:	84 36       	cpi	r24, 0x64	; 100
    18f2:	11 f0       	breq	.+4      	; 0x18f8 <vfprintf+0x1f6>
    18f4:	89 36       	cpi	r24, 0x69	; 105
    18f6:	41 f5       	brne	.+80     	; 0x1948 <vfprintf+0x246>
    18f8:	27 ff       	sbrs	r18, 7
    18fa:	08 c0       	rjmp	.+16     	; 0x190c <vfprintf+0x20a>
    18fc:	f8 01       	movw	r30, r16
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	0c 5f       	subi	r16, 0xFC	; 252
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	09 c0       	rjmp	.+18     	; 0x191e <vfprintf+0x21c>
    190c:	f8 01       	movw	r30, r16
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	88 27       	eor	r24, r24
    1914:	77 fd       	sbrc	r23, 7
    1916:	80 95       	com	r24
    1918:	98 2f       	mov	r25, r24
    191a:	0e 5f       	subi	r16, 0xFE	; 254
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	4f e6       	ldi	r20, 0x6F	; 111
    1920:	b4 2e       	mov	r11, r20
    1922:	b2 22       	and	r11, r18
    1924:	97 ff       	sbrs	r25, 7
    1926:	09 c0       	rjmp	.+18     	; 0x193a <vfprintf+0x238>
    1928:	90 95       	com	r25
    192a:	80 95       	com	r24
    192c:	70 95       	com	r23
    192e:	61 95       	neg	r22
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	8f 4f       	sbci	r24, 0xFF	; 255
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	f0 e8       	ldi	r31, 0x80	; 128
    1938:	bf 2a       	or	r11, r31
    193a:	a2 01       	movw	r20, r4
    193c:	2a e0       	ldi	r18, 0x0A	; 10
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	25 d1       	rcall	.+586    	; 0x1b8c <__ultoa_invert>
    1942:	78 2e       	mov	r7, r24
    1944:	74 18       	sub	r7, r4
    1946:	44 c0       	rjmp	.+136    	; 0x19d0 <vfprintf+0x2ce>
    1948:	85 37       	cpi	r24, 0x75	; 117
    194a:	31 f4       	brne	.+12     	; 0x1958 <vfprintf+0x256>
    194c:	3f ee       	ldi	r19, 0xEF	; 239
    194e:	b3 2e       	mov	r11, r19
    1950:	b2 22       	and	r11, r18
    1952:	2a e0       	ldi	r18, 0x0A	; 10
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	25 c0       	rjmp	.+74     	; 0x19a2 <vfprintf+0x2a0>
    1958:	99 ef       	ldi	r25, 0xF9	; 249
    195a:	b9 2e       	mov	r11, r25
    195c:	b2 22       	and	r11, r18
    195e:	8f 36       	cpi	r24, 0x6F	; 111
    1960:	c1 f0       	breq	.+48     	; 0x1992 <vfprintf+0x290>
    1962:	80 37       	cpi	r24, 0x70	; 112
    1964:	20 f4       	brcc	.+8      	; 0x196e <vfprintf+0x26c>
    1966:	88 35       	cpi	r24, 0x58	; 88
    1968:	09 f0       	breq	.+2      	; 0x196c <vfprintf+0x26a>
    196a:	ae c0       	rjmp	.+348    	; 0x1ac8 <vfprintf+0x3c6>
    196c:	0d c0       	rjmp	.+26     	; 0x1988 <vfprintf+0x286>
    196e:	80 37       	cpi	r24, 0x70	; 112
    1970:	21 f0       	breq	.+8      	; 0x197a <vfprintf+0x278>
    1972:	88 37       	cpi	r24, 0x78	; 120
    1974:	09 f0       	breq	.+2      	; 0x1978 <vfprintf+0x276>
    1976:	a8 c0       	rjmp	.+336    	; 0x1ac8 <vfprintf+0x3c6>
    1978:	02 c0       	rjmp	.+4      	; 0x197e <vfprintf+0x27c>
    197a:	20 e1       	ldi	r18, 0x10	; 16
    197c:	b2 2a       	or	r11, r18
    197e:	b4 fe       	sbrs	r11, 4
    1980:	0b c0       	rjmp	.+22     	; 0x1998 <vfprintf+0x296>
    1982:	84 e0       	ldi	r24, 0x04	; 4
    1984:	b8 2a       	or	r11, r24
    1986:	08 c0       	rjmp	.+16     	; 0x1998 <vfprintf+0x296>
    1988:	b4 fe       	sbrs	r11, 4
    198a:	09 c0       	rjmp	.+18     	; 0x199e <vfprintf+0x29c>
    198c:	e6 e0       	ldi	r30, 0x06	; 6
    198e:	be 2a       	or	r11, r30
    1990:	06 c0       	rjmp	.+12     	; 0x199e <vfprintf+0x29c>
    1992:	28 e0       	ldi	r18, 0x08	; 8
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <vfprintf+0x2a0>
    1998:	20 e1       	ldi	r18, 0x10	; 16
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <vfprintf+0x2a0>
    199e:	20 e1       	ldi	r18, 0x10	; 16
    19a0:	32 e0       	ldi	r19, 0x02	; 2
    19a2:	b7 fe       	sbrs	r11, 7
    19a4:	08 c0       	rjmp	.+16     	; 0x19b6 <vfprintf+0x2b4>
    19a6:	f8 01       	movw	r30, r16
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	0c 5f       	subi	r16, 0xFC	; 252
    19b2:	1f 4f       	sbci	r17, 0xFF	; 255
    19b4:	07 c0       	rjmp	.+14     	; 0x19c4 <vfprintf+0x2c2>
    19b6:	f8 01       	movw	r30, r16
    19b8:	60 81       	ld	r22, Z
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 5f       	subi	r16, 0xFE	; 254
    19c2:	1f 4f       	sbci	r17, 0xFF	; 255
    19c4:	a2 01       	movw	r20, r4
    19c6:	e2 d0       	rcall	.+452    	; 0x1b8c <__ultoa_invert>
    19c8:	78 2e       	mov	r7, r24
    19ca:	74 18       	sub	r7, r4
    19cc:	ff e7       	ldi	r31, 0x7F	; 127
    19ce:	bf 22       	and	r11, r31
    19d0:	b6 fe       	sbrs	r11, 6
    19d2:	0b c0       	rjmp	.+22     	; 0x19ea <vfprintf+0x2e8>
    19d4:	2e ef       	ldi	r18, 0xFE	; 254
    19d6:	b2 22       	and	r11, r18
    19d8:	7e 14       	cp	r7, r14
    19da:	38 f4       	brcc	.+14     	; 0x19ea <vfprintf+0x2e8>
    19dc:	b4 fe       	sbrs	r11, 4
    19de:	07 c0       	rjmp	.+14     	; 0x19ee <vfprintf+0x2ec>
    19e0:	b2 fc       	sbrc	r11, 2
    19e2:	05 c0       	rjmp	.+10     	; 0x19ee <vfprintf+0x2ec>
    19e4:	8f ee       	ldi	r24, 0xEF	; 239
    19e6:	b8 22       	and	r11, r24
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <vfprintf+0x2ec>
    19ea:	a7 2c       	mov	r10, r7
    19ec:	01 c0       	rjmp	.+2      	; 0x19f0 <vfprintf+0x2ee>
    19ee:	ae 2c       	mov	r10, r14
    19f0:	8b 2d       	mov	r24, r11
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	b4 fe       	sbrs	r11, 4
    19f6:	0d c0       	rjmp	.+26     	; 0x1a12 <vfprintf+0x310>
    19f8:	fe 01       	movw	r30, r28
    19fa:	e7 0d       	add	r30, r7
    19fc:	f1 1d       	adc	r31, r1
    19fe:	20 81       	ld	r18, Z
    1a00:	20 33       	cpi	r18, 0x30	; 48
    1a02:	19 f4       	brne	.+6      	; 0x1a0a <vfprintf+0x308>
    1a04:	e9 ee       	ldi	r30, 0xE9	; 233
    1a06:	be 22       	and	r11, r30
    1a08:	09 c0       	rjmp	.+18     	; 0x1a1c <vfprintf+0x31a>
    1a0a:	a3 94       	inc	r10
    1a0c:	b2 fe       	sbrs	r11, 2
    1a0e:	06 c0       	rjmp	.+12     	; 0x1a1c <vfprintf+0x31a>
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <vfprintf+0x318>
    1a12:	86 78       	andi	r24, 0x86	; 134
    1a14:	90 70       	andi	r25, 0x00	; 0
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <vfprintf+0x31a>
    1a1a:	a3 94       	inc	r10
    1a1c:	8b 2c       	mov	r8, r11
    1a1e:	99 24       	eor	r9, r9
    1a20:	b3 fc       	sbrc	r11, 3
    1a22:	13 c0       	rjmp	.+38     	; 0x1a4a <vfprintf+0x348>
    1a24:	b0 fe       	sbrs	r11, 0
    1a26:	0e c0       	rjmp	.+28     	; 0x1a44 <vfprintf+0x342>
    1a28:	af 14       	cp	r10, r15
    1a2a:	28 f4       	brcc	.+10     	; 0x1a36 <vfprintf+0x334>
    1a2c:	e7 2c       	mov	r14, r7
    1a2e:	ef 0c       	add	r14, r15
    1a30:	ea 18       	sub	r14, r10
    1a32:	af 2c       	mov	r10, r15
    1a34:	07 c0       	rjmp	.+14     	; 0x1a44 <vfprintf+0x342>
    1a36:	e7 2c       	mov	r14, r7
    1a38:	05 c0       	rjmp	.+10     	; 0x1a44 <vfprintf+0x342>
    1a3a:	80 e2       	ldi	r24, 0x20	; 32
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	b6 01       	movw	r22, r12
    1a40:	79 d0       	rcall	.+242    	; 0x1b34 <fputc>
    1a42:	a3 94       	inc	r10
    1a44:	af 14       	cp	r10, r15
    1a46:	c8 f3       	brcs	.-14     	; 0x1a3a <vfprintf+0x338>
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <vfprintf+0x350>
    1a4a:	af 14       	cp	r10, r15
    1a4c:	10 f4       	brcc	.+4      	; 0x1a52 <vfprintf+0x350>
    1a4e:	fa 18       	sub	r15, r10
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <vfprintf+0x352>
    1a52:	ff 24       	eor	r15, r15
    1a54:	84 fe       	sbrs	r8, 4
    1a56:	0e c0       	rjmp	.+28     	; 0x1a74 <vfprintf+0x372>
    1a58:	80 e3       	ldi	r24, 0x30	; 48
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	b6 01       	movw	r22, r12
    1a5e:	6a d0       	rcall	.+212    	; 0x1b34 <fputc>
    1a60:	82 fe       	sbrs	r8, 2
    1a62:	1d c0       	rjmp	.+58     	; 0x1a9e <vfprintf+0x39c>
    1a64:	81 fe       	sbrs	r8, 1
    1a66:	03 c0       	rjmp	.+6      	; 0x1a6e <vfprintf+0x36c>
    1a68:	88 e5       	ldi	r24, 0x58	; 88
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	10 c0       	rjmp	.+32     	; 0x1a8e <vfprintf+0x38c>
    1a6e:	88 e7       	ldi	r24, 0x78	; 120
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0d c0       	rjmp	.+26     	; 0x1a8e <vfprintf+0x38c>
    1a74:	c4 01       	movw	r24, r8
    1a76:	86 78       	andi	r24, 0x86	; 134
    1a78:	90 70       	andi	r25, 0x00	; 0
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	81 f0       	breq	.+32     	; 0x1a9e <vfprintf+0x39c>
    1a7e:	81 fc       	sbrc	r8, 1
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <vfprintf+0x384>
    1a82:	80 e2       	ldi	r24, 0x20	; 32
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <vfprintf+0x386>
    1a86:	8b e2       	ldi	r24, 0x2B	; 43
    1a88:	b7 fc       	sbrc	r11, 7
    1a8a:	8d e2       	ldi	r24, 0x2D	; 45
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	b6 01       	movw	r22, r12
    1a90:	51 d0       	rcall	.+162    	; 0x1b34 <fputc>
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <vfprintf+0x39c>
    1a94:	80 e3       	ldi	r24, 0x30	; 48
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	b6 01       	movw	r22, r12
    1a9a:	4c d0       	rcall	.+152    	; 0x1b34 <fputc>
    1a9c:	ea 94       	dec	r14
    1a9e:	7e 14       	cp	r7, r14
    1aa0:	c8 f3       	brcs	.-14     	; 0x1a94 <vfprintf+0x392>
    1aa2:	7a 94       	dec	r7
    1aa4:	f2 01       	movw	r30, r4
    1aa6:	e7 0d       	add	r30, r7
    1aa8:	f1 1d       	adc	r31, r1
    1aaa:	80 81       	ld	r24, Z
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	b6 01       	movw	r22, r12
    1ab0:	41 d0       	rcall	.+130    	; 0x1b34 <fputc>
    1ab2:	77 20       	and	r7, r7
    1ab4:	b1 f7       	brne	.-20     	; 0x1aa2 <vfprintf+0x3a0>
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <vfprintf+0x3c0>
    1ab8:	80 e2       	ldi	r24, 0x20	; 32
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	b6 01       	movw	r22, r12
    1abe:	3a d0       	rcall	.+116    	; 0x1b34 <fputc>
    1ac0:	fa 94       	dec	r15
    1ac2:	ff 20       	and	r15, r15
    1ac4:	c9 f7       	brne	.-14     	; 0x1ab8 <vfprintf+0x3b6>
    1ac6:	44 ce       	rjmp	.-888    	; 0x1750 <vfprintf+0x4e>
    1ac8:	f6 01       	movw	r30, r12
    1aca:	26 81       	ldd	r18, Z+6	; 0x06
    1acc:	37 81       	ldd	r19, Z+7	; 0x07
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <vfprintf+0x3d2>
    1ad0:	2f ef       	ldi	r18, 0xFF	; 255
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	c9 01       	movw	r24, r18
    1ad6:	2c 96       	adiw	r28, 0x0c	; 12
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	ff 90       	pop	r15
    1aec:	ef 90       	pop	r14
    1aee:	df 90       	pop	r13
    1af0:	cf 90       	pop	r12
    1af2:	bf 90       	pop	r11
    1af4:	af 90       	pop	r10
    1af6:	9f 90       	pop	r9
    1af8:	8f 90       	pop	r8
    1afa:	7f 90       	pop	r7
    1afc:	6f 90       	pop	r6
    1afe:	5f 90       	pop	r5
    1b00:	4f 90       	pop	r4
    1b02:	3f 90       	pop	r3
    1b04:	2f 90       	pop	r2
    1b06:	08 95       	ret

00001b08 <strnlen_P>:
    1b08:	fc 01       	movw	r30, r24
    1b0a:	05 90       	lpm	r0, Z+
    1b0c:	61 50       	subi	r22, 0x01	; 1
    1b0e:	70 40       	sbci	r23, 0x00	; 0
    1b10:	01 10       	cpse	r0, r1
    1b12:	d8 f7       	brcc	.-10     	; 0x1b0a <strnlen_P+0x2>
    1b14:	80 95       	com	r24
    1b16:	90 95       	com	r25
    1b18:	8e 0f       	add	r24, r30
    1b1a:	9f 1f       	adc	r25, r31
    1b1c:	08 95       	ret

00001b1e <strnlen>:
    1b1e:	fc 01       	movw	r30, r24
    1b20:	61 50       	subi	r22, 0x01	; 1
    1b22:	70 40       	sbci	r23, 0x00	; 0
    1b24:	01 90       	ld	r0, Z+
    1b26:	01 10       	cpse	r0, r1
    1b28:	d8 f7       	brcc	.-10     	; 0x1b20 <strnlen+0x2>
    1b2a:	80 95       	com	r24
    1b2c:	90 95       	com	r25
    1b2e:	8e 0f       	add	r24, r30
    1b30:	9f 1f       	adc	r25, r31
    1b32:	08 95       	ret

00001b34 <fputc>:
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	8c 01       	movw	r16, r24
    1b3e:	eb 01       	movw	r28, r22
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	81 ff       	sbrs	r24, 1
    1b44:	1b c0       	rjmp	.+54     	; 0x1b7c <fputc+0x48>
    1b46:	82 ff       	sbrs	r24, 2
    1b48:	0d c0       	rjmp	.+26     	; 0x1b64 <fputc+0x30>
    1b4a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b4c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	28 17       	cp	r18, r24
    1b54:	39 07       	cpc	r19, r25
    1b56:	64 f4       	brge	.+24     	; 0x1b70 <fputc+0x3c>
    1b58:	e8 81       	ld	r30, Y
    1b5a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b5c:	01 93       	st	Z+, r16
    1b5e:	f9 83       	std	Y+1, r31	; 0x01
    1b60:	e8 83       	st	Y, r30
    1b62:	06 c0       	rjmp	.+12     	; 0x1b70 <fputc+0x3c>
    1b64:	e8 85       	ldd	r30, Y+8	; 0x08
    1b66:	f9 85       	ldd	r31, Y+9	; 0x09
    1b68:	80 2f       	mov	r24, r16
    1b6a:	09 95       	icall
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	31 f4       	brne	.+12     	; 0x1b7c <fputc+0x48>
    1b70:	8e 81       	ldd	r24, Y+6	; 0x06
    1b72:	9f 81       	ldd	r25, Y+7	; 0x07
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	9f 83       	std	Y+7, r25	; 0x07
    1b78:	8e 83       	std	Y+6, r24	; 0x06
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <fputc+0x4c>
    1b7c:	0f ef       	ldi	r16, 0xFF	; 255
    1b7e:	1f ef       	ldi	r17, 0xFF	; 255
    1b80:	c8 01       	movw	r24, r16
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	1f 91       	pop	r17
    1b88:	0f 91       	pop	r16
    1b8a:	08 95       	ret

00001b8c <__ultoa_invert>:
    1b8c:	fa 01       	movw	r30, r20
    1b8e:	aa 27       	eor	r26, r26
    1b90:	28 30       	cpi	r18, 0x08	; 8
    1b92:	51 f1       	breq	.+84     	; 0x1be8 <__ultoa_invert+0x5c>
    1b94:	20 31       	cpi	r18, 0x10	; 16
    1b96:	81 f1       	breq	.+96     	; 0x1bf8 <__ultoa_invert+0x6c>
    1b98:	e8 94       	clt
    1b9a:	6f 93       	push	r22
    1b9c:	6e 7f       	andi	r22, 0xFE	; 254
    1b9e:	6e 5f       	subi	r22, 0xFE	; 254
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba6:	af 4f       	sbci	r26, 0xFF	; 255
    1ba8:	b1 e0       	ldi	r27, 0x01	; 1
    1baa:	3e d0       	rcall	.+124    	; 0x1c28 <__ultoa_invert+0x9c>
    1bac:	b4 e0       	ldi	r27, 0x04	; 4
    1bae:	3c d0       	rcall	.+120    	; 0x1c28 <__ultoa_invert+0x9c>
    1bb0:	67 0f       	add	r22, r23
    1bb2:	78 1f       	adc	r23, r24
    1bb4:	89 1f       	adc	r24, r25
    1bb6:	9a 1f       	adc	r25, r26
    1bb8:	a1 1d       	adc	r26, r1
    1bba:	68 0f       	add	r22, r24
    1bbc:	79 1f       	adc	r23, r25
    1bbe:	8a 1f       	adc	r24, r26
    1bc0:	91 1d       	adc	r25, r1
    1bc2:	a1 1d       	adc	r26, r1
    1bc4:	6a 0f       	add	r22, r26
    1bc6:	71 1d       	adc	r23, r1
    1bc8:	81 1d       	adc	r24, r1
    1bca:	91 1d       	adc	r25, r1
    1bcc:	a1 1d       	adc	r26, r1
    1bce:	20 d0       	rcall	.+64     	; 0x1c10 <__ultoa_invert+0x84>
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <__ultoa_invert+0x48>
    1bd2:	68 94       	set
    1bd4:	3f 91       	pop	r19
    1bd6:	2a e0       	ldi	r18, 0x0A	; 10
    1bd8:	26 9f       	mul	r18, r22
    1bda:	11 24       	eor	r1, r1
    1bdc:	30 19       	sub	r19, r0
    1bde:	30 5d       	subi	r19, 0xD0	; 208
    1be0:	31 93       	st	Z+, r19
    1be2:	de f6       	brtc	.-74     	; 0x1b9a <__ultoa_invert+0xe>
    1be4:	cf 01       	movw	r24, r30
    1be6:	08 95       	ret
    1be8:	46 2f       	mov	r20, r22
    1bea:	47 70       	andi	r20, 0x07	; 7
    1bec:	40 5d       	subi	r20, 0xD0	; 208
    1bee:	41 93       	st	Z+, r20
    1bf0:	b3 e0       	ldi	r27, 0x03	; 3
    1bf2:	0f d0       	rcall	.+30     	; 0x1c12 <__ultoa_invert+0x86>
    1bf4:	c9 f7       	brne	.-14     	; 0x1be8 <__ultoa_invert+0x5c>
    1bf6:	f6 cf       	rjmp	.-20     	; 0x1be4 <__ultoa_invert+0x58>
    1bf8:	46 2f       	mov	r20, r22
    1bfa:	4f 70       	andi	r20, 0x0F	; 15
    1bfc:	40 5d       	subi	r20, 0xD0	; 208
    1bfe:	4a 33       	cpi	r20, 0x3A	; 58
    1c00:	18 f0       	brcs	.+6      	; 0x1c08 <__ultoa_invert+0x7c>
    1c02:	49 5d       	subi	r20, 0xD9	; 217
    1c04:	31 fd       	sbrc	r19, 1
    1c06:	40 52       	subi	r20, 0x20	; 32
    1c08:	41 93       	st	Z+, r20
    1c0a:	02 d0       	rcall	.+4      	; 0x1c10 <__ultoa_invert+0x84>
    1c0c:	a9 f7       	brne	.-22     	; 0x1bf8 <__ultoa_invert+0x6c>
    1c0e:	ea cf       	rjmp	.-44     	; 0x1be4 <__ultoa_invert+0x58>
    1c10:	b4 e0       	ldi	r27, 0x04	; 4
    1c12:	a6 95       	lsr	r26
    1c14:	97 95       	ror	r25
    1c16:	87 95       	ror	r24
    1c18:	77 95       	ror	r23
    1c1a:	67 95       	ror	r22
    1c1c:	ba 95       	dec	r27
    1c1e:	c9 f7       	brne	.-14     	; 0x1c12 <__ultoa_invert+0x86>
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	61 05       	cpc	r22, r1
    1c24:	71 05       	cpc	r23, r1
    1c26:	08 95       	ret
    1c28:	9b 01       	movw	r18, r22
    1c2a:	ac 01       	movw	r20, r24
    1c2c:	0a 2e       	mov	r0, r26
    1c2e:	06 94       	lsr	r0
    1c30:	57 95       	ror	r21
    1c32:	47 95       	ror	r20
    1c34:	37 95       	ror	r19
    1c36:	27 95       	ror	r18
    1c38:	ba 95       	dec	r27
    1c3a:	c9 f7       	brne	.-14     	; 0x1c2e <__ultoa_invert+0xa2>
    1c3c:	62 0f       	add	r22, r18
    1c3e:	73 1f       	adc	r23, r19
    1c40:	84 1f       	adc	r24, r20
    1c42:	95 1f       	adc	r25, r21
    1c44:	a0 1d       	adc	r26, r0
    1c46:	08 95       	ret

00001c48 <_exit>:
    1c48:	f8 94       	cli

00001c4a <__stop_program>:
    1c4a:	ff cf       	rjmp	.-2      	; 0x1c4a <__stop_program>
