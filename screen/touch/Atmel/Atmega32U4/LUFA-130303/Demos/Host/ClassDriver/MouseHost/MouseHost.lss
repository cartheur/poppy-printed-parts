
MouseHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001b56  00001bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800128  00800128  00001c12  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00001c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ddb  00000000  00000000  00003f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000788  00000000  00000000  00004cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000114a  00000000  00000000  00005487  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ceb5  00000000  00000000  000065d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cae  00000000  00000000  00013486  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009939  00000000  00000000  00016134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c70  00000000  00000000  0001fa70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004dc0  00000000  00000000  000206e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000718d  00000000  00000000  000254a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001f96  00000000  00000000  0002c62d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a18  00000000  00000000  0002e5c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
	}
}
       0:	1a c1       	rjmp	.+564    	; 0x236 <__ctors_end>
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       2:	00 00       	nop
       4:	36 c1       	rjmp	.+620    	; 0x272 <__bad_interrupt>
       6:	00 00       	nop
       8:	34 c1       	rjmp	.+616    	; 0x272 <__bad_interrupt>
       a:	00 00       	nop
       c:	32 c1       	rjmp	.+612    	; 0x272 <__bad_interrupt>
       e:	00 00       	nop
      10:	30 c1       	rjmp	.+608    	; 0x272 <__bad_interrupt>
      12:	00 00       	nop
      14:	2e c1       	rjmp	.+604    	; 0x272 <__bad_interrupt>
      16:	00 00       	nop
      18:	2c c1       	rjmp	.+600    	; 0x272 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2a c1       	rjmp	.+596    	; 0x272 <__bad_interrupt>
      1e:	00 00       	nop
      20:	28 c1       	rjmp	.+592    	; 0x272 <__bad_interrupt>
      22:	00 00       	nop
      24:	26 c1       	rjmp	.+588    	; 0x272 <__bad_interrupt>
      26:	00 00       	nop
      28:	4b c6       	rjmp	.+3222   	; 0xcc0 <__vector_10>
      2a:	00 00       	nop
      2c:	22 c1       	rjmp	.+580    	; 0x272 <__bad_interrupt>
      2e:	00 00       	nop
      30:	20 c1       	rjmp	.+576    	; 0x272 <__bad_interrupt>
      32:	00 00       	nop
      34:	1e c1       	rjmp	.+572    	; 0x272 <__bad_interrupt>
      36:	00 00       	nop
      38:	1c c1       	rjmp	.+568    	; 0x272 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1a c1       	rjmp	.+564    	; 0x272 <__bad_interrupt>
      3e:	00 00       	nop
      40:	18 c1       	rjmp	.+560    	; 0x272 <__bad_interrupt>
      42:	00 00       	nop
      44:	16 c1       	rjmp	.+556    	; 0x272 <__bad_interrupt>
      46:	00 00       	nop
      48:	14 c1       	rjmp	.+552    	; 0x272 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	12 c1       	rjmp	.+548    	; 0x272 <__bad_interrupt>
      4e:	00 00       	nop
      50:	10 c1       	rjmp	.+544    	; 0x272 <__bad_interrupt>
      52:	00 00       	nop
      54:	0e c1       	rjmp	.+540    	; 0x272 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c c1       	rjmp	.+536    	; 0x272 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0a c1       	rjmp	.+532    	; 0x272 <__bad_interrupt>
      5e:	00 00       	nop
      60:	08 c1       	rjmp	.+528    	; 0x272 <__bad_interrupt>
      62:	00 00       	nop
      64:	06 c1       	rjmp	.+524    	; 0x272 <__bad_interrupt>
      66:	00 00       	nop
      68:	04 c1       	rjmp	.+520    	; 0x272 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	02 c1       	rjmp	.+516    	; 0x272 <__bad_interrupt>
      6e:	00 00       	nop
      70:	00 c1       	rjmp	.+512    	; 0x272 <__bad_interrupt>
      72:	00 00       	nop
      74:	fe c0       	rjmp	.+508    	; 0x272 <__bad_interrupt>
      76:	00 00       	nop
      78:	fc c0       	rjmp	.+504    	; 0x272 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fa c0       	rjmp	.+500    	; 0x272 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f8 c0       	rjmp	.+496    	; 0x272 <__bad_interrupt>
      82:	00 00       	nop
      84:	f6 c0       	rjmp	.+492    	; 0x272 <__bad_interrupt>
      86:	00 00       	nop
      88:	f4 c0       	rjmp	.+488    	; 0x272 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f2 c0       	rjmp	.+484    	; 0x272 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f0 c0       	rjmp	.+480    	; 0x272 <__bad_interrupt>
      92:	00 00       	nop
      94:	ee c0       	rjmp	.+476    	; 0x272 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4285>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4278>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4273>:
     11d:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     12d:	2e 0d 0a 00                                         ....

00000131 <__c.4271>:
     131:	43 6f 75 6c 64 20 6e 6f 74 20 53 65 74 20 42 6f     Could not Set Bo
     141:	6f 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f 64 65     ot Protocol Mode
     151:	2e 0d 0a 00                                         ....

00000155 <__c.4269>:
     155:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     165:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     175:	6f 6e 2e 0d 0a 00                                   on....

0000017b <__c.4267>:
     17b:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     18b:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 6f 75 73     Not a Valid Mous
     19b:	65 2e 0d 0a 00                                      e....

000001a0 <__c.4265>:
     1a0:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1b0:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1c0:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001cd <__c.4258>:
     1cd:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1dd:	68 65 64 2e 0d 0a 00                                hed....

000001e4 <__c.4253>:
     1e4:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1f4:	0d 0a 00                                            ...

000001f7 <__c.4248>:
     1f7:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
     207:	74 74 6f 6e 3a 25 64 0d 0a 00                       tton:%d...

00000211 <__c.4237>:
     211:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 20     .[36mMouse Host 
     221:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     231:	5b 33 37 6d 00                                      [37m.

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d0 e2       	ldi	r29, 0x20	; 32
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	11 e0       	ldi	r17, 0x01	; 1
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b1 e0       	ldi	r27, 0x01	; 1
     248:	e6 e5       	ldi	r30, 0x56	; 86
     24a:	fb e1       	ldi	r31, 0x1B	; 27
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	0b bf       	out	0x3b, r16	; 59
     250:	02 c0       	rjmp	.+4      	; 0x256 <__do_copy_data+0x14>
     252:	07 90       	elpm	r0, Z+
     254:	0d 92       	st	X+, r0
     256:	a8 32       	cpi	r26, 0x28	; 40
     258:	b1 07       	cpc	r27, r17
     25a:	d9 f7       	brne	.-10     	; 0x252 <__do_copy_data+0x10>

0000025c <__do_clear_bss>:
     25c:	11 e0       	ldi	r17, 0x01	; 1
     25e:	a8 e2       	ldi	r26, 0x28	; 40
     260:	b1 e0       	ldi	r27, 0x01	; 1
     262:	01 c0       	rjmp	.+2      	; 0x266 <.do_clear_bss_start>

00000264 <.do_clear_bss_loop>:
     264:	1d 92       	st	X+, r1

00000266 <.do_clear_bss_start>:
     266:	aa 34       	cpi	r26, 0x4A	; 74
     268:	b1 07       	cpc	r27, r17
     26a:	e1 f7       	brne	.-8      	; 0x264 <.do_clear_bss_loop>
     26c:	97 d0       	rcall	.+302    	; 0x39c <main>
     26e:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <_exit>

00000272 <__bad_interrupt>:
     272:	c6 ce       	rjmp	.-628    	; 0x0 <__vectors>

00000274 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     274:	9b b1       	in	r25, 0x0b	; 11
     276:	9f 70       	andi	r25, 0x0F	; 15
     278:	98 2b       	or	r25, r24
     27a:	9b b9       	out	0x0b, r25	; 11
			}
     27c:	08 95       	ret

0000027e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     27e:	84 b7       	in	r24, 0x34	; 52
     280:	87 7f       	andi	r24, 0xF7	; 247
     282:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     284:	28 e1       	ldi	r18, 0x18	; 24
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	20 93 60 00 	sts	0x0060, r18
     28e:	10 92 60 00 	sts	0x0060, r1
     292:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	80 e8       	ldi	r24, 0x80	; 128
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	80 93 61 00 	sts	0x0061, r24
     2a0:	90 93 61 00 	sts	0x0061, r25
     2a4:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2a6:	83 e3       	ldi	r24, 0x33	; 51
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	90 93 cd 00 	sts	0x00CD, r25
     2ae:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2b2:	86 e0       	ldi	r24, 0x06	; 6
     2b4:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2b8:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2bc:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2c0:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2c2:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2c4:	8a b1       	in	r24, 0x0a	; 10
     2c6:	80 6f       	ori	r24, 0xF0	; 240
     2c8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2ca:	8b b1       	in	r24, 0x0b	; 11
     2cc:	8f 70       	andi	r24, 0x0F	; 15
     2ce:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2d0:	dc d4       	rcall	.+2488   	; 0xc8a <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <Serial_CreateStream>

000002da <MouseHost_Task>:

/** Task to manage an enumerated USB mouse once connected, to display movement
 *  data as it is received.
 */
void MouseHost_Task(void)
{
     2da:	df 93       	push	r29
     2dc:	cf 93       	push	r28
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <MouseHost_Task+0x6>
     2e0:	0f 92       	push	r0
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     2e6:	80 91 35 01 	lds	r24, 0x0135
     2ea:	8b 30       	cpi	r24, 0x0B	; 11
     2ec:	09 f0       	breq	.+2      	; 0x2f0 <MouseHost_Task+0x16>
     2ee:	50 c0       	rjmp	.+160    	; 0x390 <MouseHost_Task+0xb6>
	  return;

	if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	0e 94 2f 0a 	call	0x145e	; 0x145e <HID_Host_IsReportReceived>
     2f8:	88 23       	and	r24, r24
     2fa:	09 f4       	brne	.+2      	; 0x2fe <MouseHost_Task+0x24>
     2fc:	49 c0       	rjmp	.+146    	; 0x390 <MouseHost_Task+0xb6>
	{
		uint8_t LEDMask = LEDS_NO_LEDS;

		USB_MouseReport_Data_t MouseReport;
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	be 01       	movw	r22, r28
     304:	6f 5f       	subi	r22, 0xFF	; 255
     306:	7f 4f       	sbci	r23, 0xFF	; 255
     308:	0e 94 e5 09 	call	0x13ca	; 0x13ca <HID_Host_ReceiveReport>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     30c:	2d b7       	in	r18, 0x3d	; 61
     30e:	3e b7       	in	r19, 0x3e	; 62
     310:	28 50       	subi	r18, 0x08	; 8
     312:	30 40       	sbci	r19, 0x00	; 0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	3e bf       	out	0x3e, r19	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	2d bf       	out	0x3d, r18	; 61
     31e:	ed b7       	in	r30, 0x3d	; 61
     320:	fe b7       	in	r31, 0x3e	; 62
     322:	31 96       	adiw	r30, 0x01	; 1
     324:	87 ef       	ldi	r24, 0xF7	; 247
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	ad b7       	in	r26, 0x3d	; 61
     32a:	be b7       	in	r27, 0x3e	; 62
     32c:	12 96       	adiw	r26, 0x02	; 2
     32e:	9c 93       	st	X, r25
     330:	8e 93       	st	-X, r24
     332:	11 97       	sbiw	r26, 0x01	; 1
     334:	8a 81       	ldd	r24, Y+2	; 0x02
     336:	99 27       	eor	r25, r25
     338:	87 fd       	sbrc	r24, 7
     33a:	90 95       	com	r25
     33c:	93 83       	std	Z+3, r25	; 0x03
     33e:	82 83       	std	Z+2, r24	; 0x02
     340:	8b 81       	ldd	r24, Y+3	; 0x03
     342:	99 27       	eor	r25, r25
     344:	87 fd       	sbrc	r24, 7
     346:	90 95       	com	r25
     348:	95 83       	std	Z+5, r25	; 0x05
     34a:	84 83       	std	Z+4, r24	; 0x04
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	86 83       	std	Z+6, r24	; 0x06
     350:	17 82       	std	Z+7, r1	; 0x07
     352:	0e 94 af 0a 	call	0x155e	; 0x155e <printf_P>
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
     356:	8a 81       	ldd	r24, Y+2	; 0x02
     358:	2d b7       	in	r18, 0x3d	; 61
     35a:	3e b7       	in	r19, 0x3e	; 62
     35c:	28 5f       	subi	r18, 0xF8	; 248
     35e:	3f 4f       	sbci	r19, 0xFF	; 255
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	3e bf       	out	0x3e, r19	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	2d bf       	out	0x3d, r18	; 61
     36a:	18 16       	cp	r1, r24
     36c:	1c f0       	brlt	.+6      	; 0x374 <MouseHost_Task+0x9a>
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
     36e:	88 23       	and	r24, r24
     370:	21 f0       	breq	.+8      	; 0x37a <MouseHost_Task+0xa0>
     372:	02 c0       	rjmp	.+4      	; 0x378 <MouseHost_Task+0x9e>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
		  LEDMask |= LEDS_LED1;
     374:	80 e1       	ldi	r24, 0x10	; 16
     376:	01 c0       	rjmp	.+2      	; 0x37a <MouseHost_Task+0xa0>
		else if (MouseReport.X < 0)
		  LEDMask |= LEDS_LED2;
     378:	80 e2       	ldi	r24, 0x20	; 32

		if (MouseReport.Y > 0)
     37a:	9b 81       	ldd	r25, Y+3	; 0x03
     37c:	19 16       	cp	r1, r25
     37e:	14 f4       	brge	.+4      	; 0x384 <MouseHost_Task+0xaa>
		  LEDMask |= LEDS_LED3;
     380:	80 68       	ori	r24, 0x80	; 128
     382:	02 c0       	rjmp	.+4      	; 0x388 <MouseHost_Task+0xae>
		else if (MouseReport.Y < 0)
     384:	91 11       	cpse	r25, r1
		  LEDMask |= LEDS_LED4;
     386:	80 64       	ori	r24, 0x40	; 64

		if (MouseReport.Button)
     388:	99 81       	ldd	r25, Y+1	; 0x01
     38a:	91 11       	cpse	r25, r1
		  LEDMask  = LEDS_ALL_LEDS;
     38c:	80 ef       	ldi	r24, 0xF0	; 240

		LEDs_SetAllLEDs(LEDMask);
     38e:	72 df       	rcall	.-284    	; 0x274 <LEDs_SetAllLEDs>
	}
}
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	cf 91       	pop	r28
     398:	df 91       	pop	r29
     39a:	08 95       	ret

0000039c <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     39c:	70 df       	rcall	.-288    	; 0x27e <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host Demo running.\r\n" ESC_FG_WHITE));
     39e:	81 e1       	ldi	r24, 0x11	; 17
     3a0:	92 e0       	ldi	r25, 0x02	; 2
     3a2:	0e 94 ce 0a 	call	0x159c	; 0x159c <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3a6:	80 e1       	ldi	r24, 0x10	; 16
     3a8:	65 df       	rcall	.-310    	; 0x274 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     3aa:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		MouseHost_Task();
     3ac:	96 df       	rcall	.-212    	; 0x2da <MouseHost_Task>

		HID_Host_USBTask(&Mouse_HID_Interface);
		USB_USBTask();
     3ae:	03 d7       	rcall	.+3590   	; 0x11b6 <USB_USBTask>
     3b0:	fd cf       	rjmp	.-6      	; 0x3ac <main+0x10>

000003b2 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     3b2:	84 ee       	ldi	r24, 0xE4	; 228
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	0e 94 ce 0a 	call	0x159c	; 0x159c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3ba:	80 ea       	ldi	r24, 0xA0	; 160
}
     3bc:	5b cf       	rjmp	.-330    	; 0x274 <LEDs_SetAllLEDs>

000003be <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     3be:	8d ec       	ldi	r24, 0xCD	; 205
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0e 94 ce 0a 	call	0x159c	; 0x159c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3c6:	80 e1       	ldi	r24, 0x10	; 16
}
     3c8:	55 cf       	rjmp	.-342    	; 0x274 <LEDs_SetAllLEDs>

000003ca <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	df 93       	push	r29
     3d0:	cf 93       	push	r28
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
     3d6:	c2 50       	subi	r28, 0x02	; 2
     3d8:	d2 40       	sbci	r29, 0x02	; 2
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3e4:	80 ea       	ldi	r24, 0xA0	; 160
     3e6:	46 df       	rcall	.-372    	; 0x274 <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3e8:	8e 01       	movw	r16, r28
     3ea:	0d 5f       	subi	r16, 0xFD	; 253
     3ec:	1f 4f       	sbci	r17, 0xFF	; 255
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	be 01       	movw	r22, r28
     3f2:	6f 5f       	subi	r22, 0xFF	; 255
     3f4:	7f 4f       	sbci	r23, 0xFF	; 255
     3f6:	a8 01       	movw	r20, r16
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	32 e0       	ldi	r19, 0x02	; 2
     3fc:	f4 d4       	rcall	.+2536   	; 0xde6 <USB_Host_GetDeviceConfigDescriptor>
     3fe:	88 23       	and	r24, r24
     400:	19 f0       	breq	.+6      	; 0x408 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     402:	80 ea       	ldi	r24, 0xA0	; 160
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	11 c0       	rjmp	.+34     	; 0x42a <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Mouse_HID_Interface,
     408:	69 81       	ldd	r22, Y+1	; 0x01
     40a:	7a 81       	ldd	r23, Y+2	; 0x02
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	a8 01       	movw	r20, r16
     412:	06 d7       	rcall	.+3596   	; 0x1220 <HID_Host_ConfigurePipes>
     414:	88 23       	and	r24, r24
     416:	19 f0       	breq	.+6      	; 0x41e <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Mouse.\r\n"));
     418:	8b e7       	ldi	r24, 0x7B	; 123
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	06 c0       	rjmp	.+12     	; 0x42a <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	a5 d6       	rcall	.+3402   	; 0x116c <USB_Host_SetDeviceConfiguration>
     422:	88 23       	and	r24, r24
     424:	31 f0       	breq	.+12     	; 0x432 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     426:	85 e5       	ldi	r24, 0x55	; 85
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 ce 0a 	call	0x159c	; 0x159c <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     42e:	80 e9       	ldi	r24, 0x90	; 144
     430:	14 c0       	rjmp	.+40     	; 0x45a <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
		return;
	}

	if (HID_Host_SetBootProtocol(&Mouse_HID_Interface) != 0)
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 4d 0a 	call	0x149a	; 0x149a <HID_Host_SetBootProtocol>
     43a:	88 23       	and	r24, r24
     43c:	49 f0       	breq	.+18     	; 0x450 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
	{
		puts_P(PSTR("Could not Set Boot Protocol Mode.\r\n"));
     43e:	81 e3       	ldi	r24, 0x31	; 49
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	0e 94 ce 0a 	call	0x159c	; 0x159c <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     446:	80 e9       	ldi	r24, 0x90	; 144
     448:	15 df       	rcall	.-470    	; 0x274 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	8f d6       	rcall	.+3358   	; 0x116c <USB_Host_SetDeviceConfiguration>
		return;
     44e:	06 c0       	rjmp	.+12     	; 0x45c <EVENT_USB_Host_DeviceEnumerationComplete+0x92>
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     450:	8d e1       	ldi	r24, 0x1D	; 29
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 ce 0a 	call	0x159c	; 0x159c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     458:	80 e6       	ldi	r24, 0x60	; 96
     45a:	0c df       	rcall	.-488    	; 0x274 <LEDs_SetAllLEDs>
}
     45c:	ce 5f       	subi	r28, 0xFE	; 254
     45e:	dd 4f       	sbci	r29, 0xFD	; 253
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61
     46a:	cf 91       	pop	r28
     46c:	df 91       	pop	r29
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     474:	df 93       	push	r29
     476:	cf 93       	push	r28
     478:	0f 92       	push	r0
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     47e:	89 83       	std	Y+1, r24	; 0x01
     480:	9c d3       	rcall	.+1848   	; 0xbba <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     482:	00 d0       	rcall	.+0      	; 0x484 <EVENT_USB_Host_HostError+0x10>
     484:	00 d0       	rcall	.+0      	; 0x486 <EVENT_USB_Host_HostError+0x12>
     486:	ed b7       	in	r30, 0x3d	; 61
     488:	fe b7       	in	r31, 0x3e	; 62
     48a:	31 96       	adiw	r30, 0x01	; 1
     48c:	2e ee       	ldi	r18, 0xEE	; 238
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	ad b7       	in	r26, 0x3d	; 61
     492:	be b7       	in	r27, 0x3e	; 62
     494:	12 96       	adiw	r26, 0x02	; 2
     496:	3c 93       	st	X, r19
     498:	2e 93       	st	-X, r18
     49a:	11 97       	sbiw	r26, 0x01	; 1
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	82 83       	std	Z+2, r24	; 0x02
     4a0:	13 82       	std	Z+3, r1	; 0x03
     4a2:	0e 94 af 0a 	call	0x155e	; 0x155e <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	80 e9       	ldi	r24, 0x90	; 144
     4b0:	e1 de       	rcall	.-574    	; 0x274 <LEDs_SetAllLEDs>
     4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <EVENT_USB_Host_HostError+0x3e>

000004b4 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4b4:	90 91 35 01 	lds	r25, 0x0135
     4b8:	2d b7       	in	r18, 0x3d	; 61
     4ba:	3e b7       	in	r19, 0x3e	; 62
     4bc:	28 50       	subi	r18, 0x08	; 8
     4be:	30 40       	sbci	r19, 0x00	; 0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	3e bf       	out	0x3e, r19	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	2d bf       	out	0x3d, r18	; 61
     4ca:	ed b7       	in	r30, 0x3d	; 61
     4cc:	fe b7       	in	r31, 0x3e	; 62
     4ce:	31 96       	adiw	r30, 0x01	; 1
     4d0:	28 e9       	ldi	r18, 0x98	; 152
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	ad b7       	in	r26, 0x3d	; 61
     4d6:	be b7       	in	r27, 0x3e	; 62
     4d8:	12 96       	adiw	r26, 0x02	; 2
     4da:	3c 93       	st	X, r19
     4dc:	2e 93       	st	-X, r18
     4de:	11 97       	sbiw	r26, 0x01	; 1
     4e0:	82 83       	std	Z+2, r24	; 0x02
     4e2:	13 82       	std	Z+3, r1	; 0x03
     4e4:	64 83       	std	Z+4, r22	; 0x04
     4e6:	15 82       	std	Z+5, r1	; 0x05
     4e8:	96 83       	std	Z+6, r25	; 0x06
     4ea:	17 82       	std	Z+7, r1	; 0x07
     4ec:	0e 94 af 0a 	call	0x155e	; 0x155e <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4f0:	2d b7       	in	r18, 0x3d	; 61
     4f2:	3e b7       	in	r19, 0x3e	; 62
     4f4:	28 5f       	subi	r18, 0xF8	; 248
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	3e bf       	out	0x3e, r19	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	2d bf       	out	0x3d, r18	; 61
     502:	80 e9       	ldi	r24, 0x90	; 144
}
     504:	b7 ce       	rjmp	.-658    	; 0x274 <LEDs_SetAllLEDs>

00000506 <USB_GetHIDReportSize>:
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     506:	e4 2f       	mov	r30, r20
     508:	f0 e0       	ldi	r31, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
     50a:	ee 0f       	add	r30, r30
     50c:	ff 1f       	adc	r31, r31
     50e:	ef 56       	subi	r30, 0x6F	; 111
     510:	fc 4f       	sbci	r31, 0xFC	; 252
     512:	e8 0f       	add	r30, r24
     514:	f9 1f       	adc	r31, r25
     516:	80 57       	subi	r24, 0x70	; 112
     518:	9c 4f       	sbci	r25, 0xFC	; 252
     51a:	4a e0       	ldi	r20, 0x0A	; 10
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     51c:	20 81       	ld	r18, Z
     51e:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
     520:	dc 01       	movw	r26, r24
     522:	5c 91       	ld	r21, X
     524:	56 17       	cp	r21, r22
     526:	91 f4       	brne	.+36     	; 0x54c <USB_GetHIDReportSize+0x46>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
     528:	a9 01       	movw	r20, r18
     52a:	47 70       	andi	r20, 0x07	; 7
     52c:	50 70       	andi	r21, 0x00	; 0
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	41 15       	cp	r20, r1
     534:	51 05       	cpc	r21, r1
     536:	11 f4       	brne	.+4      	; 0x53c <USB_GetHIDReportSize+0x36>
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	43 e0       	ldi	r20, 0x03	; 3
     53e:	36 95       	lsr	r19
     540:	27 95       	ror	r18
     542:	4a 95       	dec	r20
     544:	e1 f7       	brne	.-8      	; 0x53e <USB_GetHIDReportSize+0x38>
     546:	28 0f       	add	r18, r24
     548:	39 1f       	adc	r19, r25
     54a:	07 c0       	rjmp	.+14     	; 0x55a <USB_GetHIDReportSize+0x54>
     54c:	41 50       	subi	r20, 0x01	; 1
     54e:	37 96       	adiw	r30, 0x07	; 7
     550:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
     552:	44 23       	and	r20, r20
     554:	19 f7       	brne	.-58     	; 0x51c <USB_GetHIDReportSize+0x16>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	30 e0       	ldi	r19, 0x00	; 0
}
     55a:	c9 01       	movw	r24, r18
     55c:	08 95       	ret

0000055e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     55e:	80 91 9e 00 	lds	r24, 0x009E
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	81 70       	andi	r24, 0x01	; 1
     566:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     568:	20 91 a0 00 	lds	r18, 0x00A0
     56c:	2d 7f       	andi	r18, 0xFD	; 253
     56e:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     572:	20 91 9e 00 	lds	r18, 0x009E
     576:	22 60       	ori	r18, 0x02	; 2
     578:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     57c:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     580:	21 fd       	sbrc	r18, 1
     582:	fc cf       	rjmp	.-8      	; 0x57c <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     584:	20 91 9e 00 	lds	r18, 0x009E
     588:	21 60       	ori	r18, 0x01	; 1
     58a:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     58e:	10 92 2b 01 	sts	0x012B, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     592:	20 91 a0 00 	lds	r18, 0x00A0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	20 72       	andi	r18, 0x20	; 32
     59a:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     59c:	40 91 a0 00 	lds	r20, 0x00A0
     5a0:	4f 7d       	andi	r20, 0xDF	; 223
     5a2:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5a6:	40 91 9f 00 	lds	r20, 0x009F
     5aa:	4f 7d       	andi	r20, 0xDF	; 223
     5ac:	40 93 9f 00 	sts	0x009F, r20
     5b0:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     5b2:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     5b6:	55 ff       	sbrs	r21, 5
     5b8:	0b c0       	rjmp	.+22     	; 0x5d0 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5ba:	40 91 9f 00 	lds	r20, 0x009F
     5be:	4f 7d       	andi	r20, 0xDF	; 223
     5c0:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     5c4:	40 91 9f 00 	lds	r20, 0x009F
     5c8:	4d 7f       	andi	r20, 0xFD	; 253
     5ca:	40 93 9f 00 	sts	0x009F, r20
     5ce:	08 c0       	rjmp	.+16     	; 0x5e0 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d0:	ef ec       	ldi	r30, 0xCF	; 207
     5d2:	f7 e0       	ldi	r31, 0x07	; 7
     5d4:	31 97       	sbiw	r30, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <USB_Host_ResetDevice+0x76>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <USB_Host_ResetDevice+0x7c>
     5da:	00 00       	nop
     5dc:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     5de:	49 f7       	brne	.-46     	; 0x5b2 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     5e0:	21 15       	cp	r18, r1
     5e2:	31 05       	cpc	r19, r1
     5e4:	29 f0       	breq	.+10     	; 0x5f0 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     5e6:	20 91 a0 00 	lds	r18, 0x00A0
     5ea:	20 62       	ori	r18, 0x20	; 32
     5ec:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     5f0:	00 97       	sbiw	r24, 0x00	; 0
     5f2:	29 f4       	brne	.+10     	; 0x5fe <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5f4:	80 91 9e 00 	lds	r24, 0x009E
     5f8:	8e 7f       	andi	r24, 0xFE	; 254
     5fa:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     5fe:	80 91 a0 00 	lds	r24, 0x00A0
     602:	82 60       	ori	r24, 0x02	; 2
     604:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     608:	08 95       	ret

0000060a <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     60a:	40 91 9e 00 	lds	r20, 0x009E
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	41 70       	andi	r20, 0x01	; 1
     612:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     614:	20 91 a0 00 	lds	r18, 0x00A0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	20 72       	andi	r18, 0x20	; 32
     61c:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     61e:	90 91 a0 00 	lds	r25, 0x00A0
     622:	9f 7d       	andi	r25, 0xDF	; 223
     624:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     628:	90 91 9f 00 	lds	r25, 0x009F
     62c:	9f 7d       	andi	r25, 0xDF	; 223
     62e:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     632:	90 91 9e 00 	lds	r25, 0x009E
     636:	91 60       	ori	r25, 0x01	; 1
     638:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     63c:	26 c0       	rjmp	.+76     	; 0x68a <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     63e:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     642:	95 ff       	sbrs	r25, 5
     644:	06 c0       	rjmp	.+12     	; 0x652 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     646:	90 91 9f 00 	lds	r25, 0x009F
     64a:	9f 7d       	andi	r25, 0xDF	; 223
     64c:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     650:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     652:	90 91 35 01 	lds	r25, 0x0135
     656:	91 30       	cpi	r25, 0x01	; 1
     658:	d9 f0       	breq	.+54     	; 0x690 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     65a:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     65e:	94 ff       	sbrs	r25, 4
     660:	09 c0       	rjmp	.+18     	; 0x674 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     662:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     666:	80 91 a6 00 	lds	r24, 0x00A6
     66a:	8f 7e       	andi	r24, 0xEF	; 239
     66c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     670:	82 e0       	ldi	r24, 0x02	; 2

			break;
     672:	0f c0       	rjmp	.+30     	; 0x692 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     674:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     678:	91 ff       	sbrs	r25, 1
     67a:	07 c0       	rjmp	.+14     	; 0x68a <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     67c:	80 91 a6 00 	lds	r24, 0x00A6
     680:	8d 7f       	andi	r24, 0xFD	; 253
     682:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     686:	83 e0       	ldi	r24, 0x03	; 3

			break;
     688:	04 c0       	rjmp	.+8      	; 0x692 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     68a:	88 23       	and	r24, r24
     68c:	c1 f6       	brne	.-80     	; 0x63e <USB_Host_WaitMS+0x34>
     68e:	01 c0       	rjmp	.+2      	; 0x692 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     690:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     692:	41 15       	cp	r20, r1
     694:	51 05       	cpc	r21, r1
     696:	29 f4       	brne	.+10     	; 0x6a2 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     698:	90 91 9e 00 	lds	r25, 0x009E
     69c:	9e 7f       	andi	r25, 0xFE	; 254
     69e:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6a2:	21 15       	cp	r18, r1
     6a4:	31 05       	cpc	r19, r1
     6a6:	29 f0       	breq	.+10     	; 0x6b2 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6a8:	90 91 a0 00 	lds	r25, 0x00A0
     6ac:	90 62       	ori	r25, 0x20	; 32
     6ae:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     6b2:	08 95       	ret

000006b4 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	df 93       	push	r29
     6ba:	cf 93       	push	r28
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	28 97       	sbiw	r28, 0x08	; 8
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     6cc:	80 91 35 01 	lds	r24, 0x0135
     6d0:	85 30       	cpi	r24, 0x05	; 5
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <USB_Host_ProcessNextHostState+0x22>
     6d4:	99 c0       	rjmp	.+306    	; 0x808 <USB_Host_ProcessNextHostState+0x154>
     6d6:	86 30       	cpi	r24, 0x06	; 6
     6d8:	68 f4       	brcc	.+26     	; 0x6f4 <USB_Host_ProcessNextHostState+0x40>
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	c1 f1       	breq	.+112    	; 0x74e <USB_Host_ProcessNextHostState+0x9a>
     6de:	83 30       	cpi	r24, 0x03	; 3
     6e0:	18 f4       	brcc	.+6      	; 0x6e8 <USB_Host_ProcessNextHostState+0x34>
     6e2:	88 23       	and	r24, r24
     6e4:	a1 f0       	breq	.+40     	; 0x70e <USB_Host_ProcessNextHostState+0x5a>
     6e6:	04 c1       	rjmp	.+520    	; 0x8f0 <USB_Host_ProcessNextHostState+0x23c>
     6e8:	83 30       	cpi	r24, 0x03	; 3
     6ea:	d9 f1       	breq	.+118    	; 0x762 <USB_Host_ProcessNextHostState+0xae>
     6ec:	84 30       	cpi	r24, 0x04	; 4
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <USB_Host_ProcessNextHostState+0x3e>
     6f0:	ff c0       	rjmp	.+510    	; 0x8f0 <USB_Host_ProcessNextHostState+0x23c>
     6f2:	62 c0       	rjmp	.+196    	; 0x7b8 <USB_Host_ProcessNextHostState+0x104>
     6f4:	87 30       	cpi	r24, 0x07	; 7
     6f6:	09 f4       	brne	.+2      	; 0x6fa <USB_Host_ProcessNextHostState+0x46>
     6f8:	9e c0       	rjmp	.+316    	; 0x836 <USB_Host_ProcessNextHostState+0x182>
     6fa:	87 30       	cpi	r24, 0x07	; 7
     6fc:	08 f4       	brcc	.+2      	; 0x700 <USB_Host_ProcessNextHostState+0x4c>
     6fe:	8f c0       	rjmp	.+286    	; 0x81e <USB_Host_ProcessNextHostState+0x16a>
     700:	88 30       	cpi	r24, 0x08	; 8
     702:	09 f4       	brne	.+2      	; 0x706 <USB_Host_ProcessNextHostState+0x52>
     704:	b8 c0       	rjmp	.+368    	; 0x876 <USB_Host_ProcessNextHostState+0x1c2>
     706:	89 30       	cpi	r24, 0x09	; 9
     708:	09 f0       	breq	.+2      	; 0x70c <USB_Host_ProcessNextHostState+0x58>
     70a:	f2 c0       	rjmp	.+484    	; 0x8f0 <USB_Host_ProcessNextHostState+0x23c>
     70c:	d9 c0       	rjmp	.+434    	; 0x8c0 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     70e:	00 91 29 01 	lds	r16, 0x0129
     712:	10 91 2a 01 	lds	r17, 0x012A
     716:	01 15       	cp	r16, r1
     718:	11 05       	cpc	r17, r1
     71a:	09 f4       	brne	.+2      	; 0x71e <USB_Host_ProcessNextHostState+0x6a>
     71c:	e9 c0       	rjmp	.+466    	; 0x8f0 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	74 df       	rcall	.-280    	; 0x60a <USB_Host_WaitMS>
     722:	68 2f       	mov	r22, r24
     724:	88 23       	and	r24, r24
     726:	31 f0       	breq	.+12     	; 0x734 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     728:	80 91 28 01 	lds	r24, 0x0128
     72c:	80 93 35 01 	sts	0x0135, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     730:	81 e0       	ldi	r24, 0x01	; 1
					break;
     732:	d2 c0       	rjmp	.+420    	; 0x8d8 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     734:	01 50       	subi	r16, 0x01	; 1
     736:	10 40       	sbci	r17, 0x00	; 0
     738:	10 93 2a 01 	sts	0x012A, r17
     73c:	00 93 29 01 	sts	0x0129, r16
     740:	01 15       	cp	r16, r1
     742:	11 05       	cpc	r17, r1
     744:	09 f0       	breq	.+2      	; 0x748 <USB_Host_ProcessNextHostState+0x94>
     746:	d4 c0       	rjmp	.+424    	; 0x8f0 <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     748:	80 91 28 01 	lds	r24, 0x0128
     74c:	07 c0       	rjmp	.+14     	; 0x75c <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     74e:	88 ee       	ldi	r24, 0xE8	; 232
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	90 93 2a 01 	sts	0x012A, r25
     756:	80 93 29 01 	sts	0x0129, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	80 93 35 01 	sts	0x0135, r24
			break;
     760:	c7 c0       	rjmp	.+398    	; 0x8f0 <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     762:	80 91 29 01 	lds	r24, 0x0129
     766:	90 91 2a 01 	lds	r25, 0x012A
     76a:	9c 01       	movw	r18, r24
     76c:	21 50       	subi	r18, 0x01	; 1
     76e:	30 40       	sbci	r19, 0x00	; 0
     770:	30 93 2a 01 	sts	0x012A, r19
     774:	20 93 29 01 	sts	0x0129, r18
     778:	00 97       	sbiw	r24, 0x00	; 0
     77a:	39 f0       	breq	.+14     	; 0x78a <USB_Host_ProcessNextHostState+0xd6>
     77c:	8f ec       	ldi	r24, 0xCF	; 207
     77e:	97 e0       	ldi	r25, 0x07	; 7
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <USB_Host_ProcessNextHostState+0xcc>
     784:	00 c0       	rjmp	.+0      	; 0x786 <USB_Host_ProcessNextHostState+0xd2>
     786:	00 00       	nop
     788:	b3 c0       	rjmp	.+358    	; 0x8f0 <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     78a:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     78c:	80 91 d8 00 	lds	r24, 0x00D8
     790:	80 61       	ori	r24, 0x10	; 16
     792:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     796:	80 91 dd 00 	lds	r24, 0x00DD
     79a:	8b 7f       	andi	r24, 0xFB	; 251
     79c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     7a0:	80 91 d7 00 	lds	r24, 0x00D7
     7a4:	80 61       	ori	r24, 0x10	; 16
     7a6:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     7aa:	80 91 dd 00 	lds	r24, 0x00DD
     7ae:	82 60       	ori	r24, 0x02	; 2
     7b0:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	d2 cf       	rjmp	.-92     	; 0x75c <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     7b8:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     7bc:	80 ff       	sbrs	r24, 0
     7be:	98 c0       	rjmp	.+304    	; 0x8f0 <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     7c0:	80 91 9f 00 	lds	r24, 0x009F
     7c4:	8e 7f       	andi	r24, 0xFE	; 254
     7c6:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7ca:	80 91 9f 00 	lds	r24, 0x009F
     7ce:	8d 7f       	andi	r24, 0xFD	; 253
     7d0:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7d4:	80 91 df 00 	lds	r24, 0x00DF
     7d8:	8d 7f       	andi	r24, 0xFD	; 253
     7da:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     7de:	80 91 de 00 	lds	r24, 0x00DE
     7e2:	82 60       	ori	r24, 0x02	; 2
     7e4:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7e8:	80 91 9e 00 	lds	r24, 0x009E
     7ec:	81 60       	ori	r24, 0x01	; 1
     7ee:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     7f2:	7a d1       	rcall	.+756    	; 0xae8 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7f4:	10 92 35 01 	sts	0x0135, r1
     7f8:	84 e6       	ldi	r24, 0x64	; 100
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	90 93 2a 01 	sts	0x012A, r25
     800:	80 93 29 01 	sts	0x0129, r24
     804:	85 e0       	ldi	r24, 0x05	; 5
     806:	59 c0       	rjmp	.+178    	; 0x8ba <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     808:	aa de       	rcall	.-684    	; 0x55e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     80a:	10 92 35 01 	sts	0x0135, r1
     80e:	88 ec       	ldi	r24, 0xC8	; 200
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	90 93 2a 01 	sts	0x012A, r25
     816:	80 93 29 01 	sts	0x0129, r24
     81a:	86 e0       	ldi	r24, 0x06	; 6
     81c:	4e c0       	rjmp	.+156    	; 0x8ba <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	20 e4       	ldi	r18, 0x40	; 64
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	01 e0       	ldi	r16, 0x01	; 1
     82a:	d0 d0       	rcall	.+416    	; 0x9cc <Pipe_ConfigurePipe>
     82c:	88 23       	and	r24, r24
     82e:	09 f4       	brne	.+2      	; 0x832 <USB_Host_ProcessNextHostState+0x17e>
     830:	4f c0       	rjmp	.+158    	; 0x8d0 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     832:	87 e0       	ldi	r24, 0x07	; 7
     834:	93 cf       	rjmp	.-218    	; 0x75c <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     836:	ad e2       	ldi	r26, 0x2D	; 45
     838:	b1 e0       	ldi	r27, 0x01	; 1
     83a:	ef e1       	ldi	r30, 0x1F	; 31
     83c:	f1 e0       	ldi	r31, 0x01	; 1
     83e:	88 e0       	ldi	r24, 0x08	; 8
     840:	01 90       	ld	r0, Z+
     842:	0d 92       	st	X+, r0
     844:	81 50       	subi	r24, 0x01	; 1
     846:	e1 f7       	brne	.-8      	; 0x840 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     848:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     84c:	ce 01       	movw	r24, r28
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	8e d3       	rcall	.+1820   	; 0xf6e <USB_Host_SendControlRequest>
     852:	68 2f       	mov	r22, r24
     854:	88 23       	and	r24, r24
     856:	09 f0       	breq	.+2      	; 0x85a <USB_Host_ProcessNextHostState+0x1a6>
     858:	3e c0       	rjmp	.+124    	; 0x8d6 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     85a:	88 85       	ldd	r24, Y+8	; 0x08
     85c:	80 93 27 01 	sts	0x0127, r24

			USB_Host_ResetDevice();
     860:	7e de       	rcall	.-772    	; 0x55e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     862:	10 92 35 01 	sts	0x0135, r1
     866:	88 ec       	ldi	r24, 0xC8	; 200
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	90 93 2a 01 	sts	0x012A, r25
     86e:	80 93 29 01 	sts	0x0129, r24
     872:	88 e0       	ldi	r24, 0x08	; 8
     874:	22 c0       	rjmp	.+68     	; 0x8ba <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     876:	20 91 27 01 	lds	r18, 0x0127
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	01 e0       	ldi	r16, 0x01	; 1
     884:	a3 d0       	rcall	.+326    	; 0x9cc <Pipe_ConfigurePipe>
     886:	88 23       	and	r24, r24
     888:	19 f1       	breq	.+70     	; 0x8d0 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     88a:	ad e2       	ldi	r26, 0x2D	; 45
     88c:	b1 e0       	ldi	r27, 0x01	; 1
     88e:	e7 e1       	ldi	r30, 0x17	; 23
     890:	f1 e0       	ldi	r31, 0x01	; 1
     892:	88 e0       	ldi	r24, 0x08	; 8
     894:	01 90       	ld	r0, Z+
     896:	0d 92       	st	X+, r0
     898:	81 50       	subi	r24, 0x01	; 1
     89a:	e1 f7       	brne	.-8      	; 0x894 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	66 d3       	rcall	.+1740   	; 0xf6e <USB_Host_SendControlRequest>
     8a2:	68 2f       	mov	r22, r24
     8a4:	88 23       	and	r24, r24
     8a6:	b9 f4       	brne	.+46     	; 0x8d6 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     8a8:	10 92 35 01 	sts	0x0135, r1
     8ac:	84 e6       	ldi	r24, 0x64	; 100
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	90 93 2a 01 	sts	0x012A, r25
     8b4:	80 93 29 01 	sts	0x0129, r24
     8b8:	89 e0       	ldi	r24, 0x09	; 9
     8ba:	80 93 28 01 	sts	0x0128, r24
			break;
     8be:	18 c0       	rjmp	.+48     	; 0x8f0 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8c6:	8a e0       	ldi	r24, 0x0A	; 10
     8c8:	80 93 35 01 	sts	0x0135, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     8cc:	7e dd       	rcall	.-1284   	; 0x3ca <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     8ce:	10 c0       	rjmp	.+32     	; 0x8f0 <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     8d0:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     8d2:	84 e0       	ldi	r24, 0x04	; 4
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     8d6:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8d8:	90 91 35 01 	lds	r25, 0x0135
     8dc:	91 30       	cpi	r25, 0x01	; 1
     8de:	41 f0       	breq	.+16     	; 0x8f0 <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8e0:	e9 dd       	rcall	.-1070   	; 0x4b4 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     8e2:	80 91 dd 00 	lds	r24, 0x00DD
     8e6:	81 60       	ori	r24, 0x01	; 1
     8e8:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     8ec:	68 dd       	rcall	.-1328   	; 0x3be <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     8ee:	7d d1       	rcall	.+762    	; 0xbea <USB_ResetInterface>
	}
}
     8f0:	28 96       	adiw	r28, 0x08	; 8
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	cf 91       	pop	r28
     8fe:	df 91       	pop	r29
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	08 95       	ret

00000906 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     906:	8f 92       	push	r8
     908:	9f 92       	push	r9
     90a:	bf 92       	push	r11
     90c:	cf 92       	push	r12
     90e:	df 92       	push	r13
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	df 93       	push	r29
     91a:	cf 93       	push	r28
     91c:	0f 92       	push	r0
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	e8 2e       	mov	r14, r24
     924:	4b 01       	movw	r8, r22
     926:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     928:	80 91 aa 00 	lds	r24, 0x00AA
     92c:	8f 7c       	andi	r24, 0xCF	; 207
     92e:	80 61       	ori	r24, 0x10	; 16
     930:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     934:	99 83       	std	Y+1, r25	; 0x01
     936:	12 d1       	rcall	.+548    	; 0xb5c <Pipe_WaitUntilReady>
     938:	b8 2e       	mov	r11, r24
     93a:	99 81       	ldd	r25, Y+1	; 0x01
     93c:	88 23       	and	r24, r24
     93e:	c1 f5       	brne	.+112    	; 0x9b0 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     940:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     942:	01 15       	cp	r16, r1
     944:	11 05       	cpc	r17, r1
     946:	39 f0       	breq	.+14     	; 0x956 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     948:	f8 01       	movw	r30, r16
     94a:	20 81       	ld	r18, Z
     94c:	31 81       	ldd	r19, Z+1	; 0x01
     94e:	82 1a       	sub	r8, r18
     950:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     952:	e2 0e       	add	r14, r18
     954:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     956:	cc 24       	eor	r12, r12
     958:	dd 24       	eor	r13, r13
     95a:	25 c0       	rjmp	.+74     	; 0x9a6 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     95c:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     960:	85 fd       	sbrc	r24, 5
     962:	16 c0       	rjmp	.+44     	; 0x990 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     964:	80 91 a6 00 	lds	r24, 0x00A6
     968:	8e 77       	andi	r24, 0x7E	; 126
     96a:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     96e:	01 15       	cp	r16, r1
     970:	11 05       	cpc	r17, r1
     972:	51 f0       	breq	.+20     	; 0x988 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     974:	f8 01       	movw	r30, r16
     976:	80 81       	ld	r24, Z
     978:	91 81       	ldd	r25, Z+1	; 0x01
     97a:	8c 0d       	add	r24, r12
     97c:	9d 1d       	adc	r25, r13
     97e:	91 83       	std	Z+1, r25	; 0x01
     980:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     982:	44 e0       	ldi	r20, 0x04	; 4
     984:	b4 2e       	mov	r11, r20
     986:	14 c0       	rjmp	.+40     	; 0x9b0 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     988:	e9 d0       	rcall	.+466    	; 0xb5c <Pipe_WaitUntilReady>
     98a:	88 23       	and	r24, r24
     98c:	61 f0       	breq	.+24     	; 0x9a6 <Pipe_Read_Stream_LE+0xa0>
     98e:	0f c0       	rjmp	.+30     	; 0x9ae <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     990:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     994:	f7 01       	movw	r30, r14
     996:	81 93       	st	Z+, r24
     998:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     99a:	08 94       	sec
     99c:	81 08       	sbc	r8, r1
     99e:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     9a0:	08 94       	sec
     9a2:	c1 1c       	adc	r12, r1
     9a4:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     9a6:	81 14       	cp	r8, r1
     9a8:	91 04       	cpc	r9, r1
     9aa:	c1 f6       	brne	.-80     	; 0x95c <Pipe_Read_Stream_LE+0x56>
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     9ae:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     9b0:	8b 2d       	mov	r24, r11
     9b2:	0f 90       	pop	r0
     9b4:	cf 91       	pop	r28
     9b6:	df 91       	pop	r29
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	cf 90       	pop	r12
     9c4:	bf 90       	pop	r11
     9c6:	9f 90       	pop	r9
     9c8:	8f 90       	pop	r8
     9ca:	08 95       	ret

000009cc <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9cc:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     9ce:	58 2f       	mov	r21, r24
     9d0:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     9d2:	87 ff       	sbrs	r24, 7
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <Pipe_ConfigurePipe+0xe>
     9d6:	80 e1       	ldi	r24, 0x10	; 16
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <Pipe_ConfigurePipe+0x10>
     9da:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     9dc:	57 30       	cpi	r21, 0x07	; 7
     9de:	08 f0       	brcs	.+2      	; 0x9e2 <Pipe_ConfigurePipe+0x16>
     9e0:	59 c0       	rjmp	.+178    	; 0xa94 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     9e2:	66 23       	and	r22, r22
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     9e6:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     9e8:	4f 70       	andi	r20, 0x0F	; 15
     9ea:	62 95       	swap	r22
     9ec:	66 0f       	add	r22, r22
     9ee:	66 0f       	add	r22, r22
     9f0:	60 7c       	andi	r22, 0xC0	; 192
     9f2:	64 2b       	or	r22, r20
     9f4:	68 2b       	or	r22, r24
     9f6:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9f8:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9fa:	84 2f       	mov	r24, r20
     9fc:	8f 70       	andi	r24, 0x0F	; 15
     9fe:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     a02:	45 17       	cp	r20, r21
     a04:	a1 f4       	brne	.+40     	; 0xa2e <Pipe_ConfigurePipe+0x62>
     a06:	88 e0       	ldi	r24, 0x08	; 8
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     a0e:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a14:	82 17       	cp	r24, r18
     a16:	93 07       	cpc	r25, r19
     a18:	10 f4       	brcc	.+4      	; 0xa1e <Pipe_ConfigurePipe+0x52>
     a1a:	75 30       	cpi	r23, 0x05	; 5
     a1c:	c1 f7       	brne	.-16     	; 0xa0e <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     a1e:	87 2f       	mov	r24, r23
     a20:	82 95       	swap	r24
     a22:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a24:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a26:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     a28:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     a2a:	e0 e0       	ldi	r30, 0x00	; 0
     a2c:	08 c0       	rjmp	.+16     	; 0xa3e <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a2e:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a32:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a36:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     a3a:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a3e:	81 ff       	sbrs	r24, 1
     a40:	20 c0       	rjmp	.+64     	; 0xa82 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a42:	90 91 a9 00 	lds	r25, 0x00A9
     a46:	9e 7f       	andi	r25, 0xFE	; 254
     a48:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a4c:	90 91 ab 00 	lds	r25, 0x00AB
     a50:	9d 7f       	andi	r25, 0xFD	; 253
     a52:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a56:	90 91 a9 00 	lds	r25, 0x00A9
     a5a:	91 60       	ori	r25, 0x01	; 1
     a5c:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a60:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     a64:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     a68:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     a6c:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a70:	80 91 a9 00 	lds	r24, 0x00A9
     a74:	80 62       	ori	r24, 0x20	; 32
     a76:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a7a:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     a7e:	87 ff       	sbrs	r24, 7
     a80:	09 c0       	rjmp	.+18     	; 0xa94 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a82:	4f 5f       	subi	r20, 0xFF	; 255
     a84:	47 30       	cpi	r20, 0x07	; 7
     a86:	09 f0       	breq	.+2      	; 0xa8a <Pipe_ConfigurePipe+0xbe>
     a88:	b8 cf       	rjmp	.-144    	; 0x9fa <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a8a:	5f 70       	andi	r21, 0x0F	; 15
     a8c:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     a94:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     a96:	0f 91       	pop	r16
     a98:	08 95       	ret

00000a9a <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     aa8:	e8 2e       	mov	r14, r24
     aaa:	e7 01       	movw	r28, r14
     aac:	7e 01       	movw	r14, r28
     aae:	f9 2e       	mov	r15, r25
     ab0:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     ab2:	ff 24       	eor	r15, r15
     ab4:	0d c0       	rjmp	.+26     	; 0xad0 <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
     ab6:	88 81       	ld	r24, Y
     ab8:	88 23       	and	r24, r24
     aba:	41 f0       	breq	.+16     	; 0xacc <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     abc:	29 81       	ldd	r18, Y+1	; 0x01
     abe:	3a 81       	ldd	r19, Y+2	; 0x02
     ac0:	6c 81       	ldd	r22, Y+4	; 0x04
     ac2:	4b 81       	ldd	r20, Y+3	; 0x03
     ac4:	0d 81       	ldd	r16, Y+5	; 0x05
     ac6:	82 df       	rcall	.-252    	; 0x9cc <Pipe_ConfigurePipe>
     ac8:	88 23       	and	r24, r24
     aca:	31 f0       	breq	.+12     	; 0xad8 <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     acc:	f3 94       	inc	r15
     ace:	26 96       	adiw	r28, 0x06	; 6
     ad0:	f1 16       	cp	r15, r17
     ad2:	88 f3       	brcs	.-30     	; 0xab6 <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	01 c0       	rjmp	.+2      	; 0xada <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     ad8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	08 95       	ret

00000ae8 <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     ae8:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	98 2f       	mov	r25, r24
     af0:	9f 70       	andi	r25, 0x0F	; 15
     af2:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     af6:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     afa:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     afe:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b02:	90 91 a9 00 	lds	r25, 0x00A9
     b06:	9e 7f       	andi	r25, 0xFE	; 254
     b08:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b0c:	8f 5f       	subi	r24, 0xFF	; 255
     b0e:	87 30       	cpi	r24, 0x07	; 7
     b10:	71 f7       	brne	.-36     	; 0xaee <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b12:	08 95       	ret

00000b14 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     b14:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     b18:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b1c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b1e:	29 2f       	mov	r18, r25
     b20:	2f 70       	andi	r18, 0x0F	; 15
     b22:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b26:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     b2a:	27 ff       	sbrs	r18, 7
     b2c:	0c c0       	rjmp	.+24     	; 0xb46 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     b2e:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     b32:	53 2f       	mov	r21, r19
     b34:	5f 70       	andi	r21, 0x0F	; 15
     b36:	30 ff       	sbrs	r19, 0
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <Pipe_IsEndpointBound+0x2a>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <Pipe_IsEndpointBound+0x2c>
     b3e:	20 e8       	ldi	r18, 0x80	; 128
     b40:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     b42:	28 17       	cp	r18, r24
     b44:	49 f0       	breq	.+18     	; 0xb58 <Pipe_IsEndpointBound+0x44>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b46:	9f 5f       	subi	r25, 0xFF	; 255
     b48:	97 30       	cpi	r25, 0x07	; 7
     b4a:	49 f7       	brne	.-46     	; 0xb1e <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b4c:	84 2f       	mov	r24, r20
     b4e:	8f 70       	andi	r24, 0x0F	; 15
     b50:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     b58:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     b5a:	08 95       	ret

00000b5c <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b5c:	80 91 a2 00 	lds	r24, 0x00A2
     b60:	90 91 a3 00 	lds	r25, 0x00A3

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     b64:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b66:	20 91 aa 00 	lds	r18, 0x00AA
     b6a:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b6c:	20 31       	cpi	r18, 0x10	; 16
     b6e:	29 f4       	brne	.+10     	; 0xb7a <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b70:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     b74:	20 ff       	sbrs	r18, 0
     b76:	05 c0       	rjmp	.+10     	; 0xb82 <Pipe_WaitUntilReady+0x26>
     b78:	18 c0       	rjmp	.+48     	; 0xbaa <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b7a:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b7e:	22 fd       	sbrc	r18, 2
     b80:	14 c0       	rjmp	.+40     	; 0xbaa <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b82:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b86:	21 fd       	sbrc	r18, 1
     b88:	12 c0       	rjmp	.+36     	; 0xbae <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b8a:	20 91 35 01 	lds	r18, 0x0135
     b8e:	21 30       	cpi	r18, 0x01	; 1
     b90:	81 f0       	breq	.+32     	; 0xbb2 <Pipe_WaitUntilReady+0x56>
     b92:	20 91 a2 00 	lds	r18, 0x00A2
     b96:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b9a:	28 17       	cp	r18, r24
     b9c:	39 07       	cpc	r19, r25
     b9e:	19 f3       	breq	.-58     	; 0xb66 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ba0:	44 23       	and	r20, r20
     ba2:	49 f0       	breq	.+18     	; 0xbb6 <Pipe_WaitUntilReady+0x5a>
     ba4:	41 50       	subi	r20, 0x01	; 1
     ba6:	c9 01       	movw	r24, r18
     ba8:	de cf       	rjmp	.-68     	; 0xb66 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     bb6:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     bb8:	08 95       	ret

00000bba <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bba:	75 d0       	rcall	.+234    	; 0xca6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bbc:	7c d0       	rcall	.+248    	; 0xcb6 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bbe:	e0 ee       	ldi	r30, 0xE0	; 224
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	81 60       	ori	r24, 0x01	; 1
     bc6:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     bc8:	e8 ed       	ldi	r30, 0xD8	; 216
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	8f 77       	andi	r24, 0x7F	; 127
     bd0:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bd2:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     bd4:	a7 ed       	ldi	r26, 0xD7	; 215
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	8c 91       	ld	r24, X
     bda:	8e 7f       	andi	r24, 0xFE	; 254
     bdc:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     bde:	80 81       	ld	r24, Z
     be0:	8f 7e       	andi	r24, 0xEF	; 239
     be2:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     be4:	10 92 2c 01 	sts	0x012C, r1
}
     be8:	08 95       	ret

00000bea <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     bea:	5d d0       	rcall	.+186    	; 0xca6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bec:	64 d0       	rcall	.+200    	; 0xcb6 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bee:	80 91 d8 00 	lds	r24, 0x00D8
     bf2:	8f 77       	andi	r24, 0x7F	; 127
     bf4:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     bf8:	80 91 d8 00 	lds	r24, 0x00D8
     bfc:	80 68       	ori	r24, 0x80	; 128
     bfe:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c02:	80 91 d8 00 	lds	r24, 0x00D8
     c06:	8f 7d       	andi	r24, 0xDF	; 223
     c08:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c0c:	80 91 d7 00 	lds	r24, 0x00D7
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c16:	8c e0       	ldi	r24, 0x0C	; 12
     c18:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c1a:	8e e0       	ldi	r24, 0x0E	; 14
     c1c:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c1e:	09 b4       	in	r0, 0x29	; 41
     c20:	00 fe       	sbrs	r0, 0
     c22:	fd cf       	rjmp	.-6      	; 0xc1e <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	80 93 35 01 	sts	0x0135, r24
	USB_Host_ConfigurationNumber = 0;
     c2a:	10 92 2b 01 	sts	0x012B, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c2e:	80 e4       	ldi	r24, 0x40	; 64
     c30:	80 93 27 01 	sts	0x0127, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c34:	80 91 d8 00 	lds	r24, 0x00D8
     c38:	80 64       	ori	r24, 0x40	; 64
     c3a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c3e:	80 91 dd 00 	lds	r24, 0x00DD
     c42:	81 60       	ori	r24, 0x01	; 1
     c44:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c48:	80 91 dd 00 	lds	r24, 0x00DD
     c4c:	84 60       	ori	r24, 0x04	; 4
     c4e:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     c52:	80 91 d7 00 	lds	r24, 0x00D7
     c56:	8f 7e       	andi	r24, 0xEF	; 239
     c58:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c5c:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     c5e:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     c60:	80 91 de 00 	lds	r24, 0x00DE
     c64:	81 60       	ori	r24, 0x01	; 1
     c66:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c6a:	80 91 de 00 	lds	r24, 0x00DE
     c6e:	84 60       	ori	r24, 0x04	; 4
     c70:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c74:	80 91 e0 00 	lds	r24, 0x00E0
     c78:	8e 7f       	andi	r24, 0xFE	; 254
     c7a:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c7e:	80 91 d8 00 	lds	r24, 0x00D8
     c82:	80 61       	ori	r24, 0x10	; 16
     c84:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c88:	08 95       	ret

00000c8a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c8a:	e8 ed       	ldi	r30, 0xD8	; 216
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	8f 7e       	andi	r24, 0xEF	; 239
     c92:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     c94:	e7 ed       	ldi	r30, 0xD7	; 215
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	81 60       	ori	r24, 0x01	; 1
     c9c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	80 93 2c 01 	sts	0x012C, r24

	USB_ResetInterface();
}
     ca4:	a2 cf       	rjmp	.-188    	; 0xbea <USB_ResetInterface>

00000ca6 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ca6:	e8 ed       	ldi	r30, 0xD8	; 216
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8c 7f       	andi	r24, 0xFC	; 252
     cae:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     cb0:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     cb4:	08 95       	ret

00000cb6 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cb6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     cba:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     cbe:	08 95       	ret

00000cc0 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cc0:	1f 92       	push	r1
     cc2:	0f 92       	push	r0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	0f 92       	push	r0
     cc8:	0b b6       	in	r0, 0x3b	; 59
     cca:	0f 92       	push	r0
     ccc:	11 24       	eor	r1, r1
     cce:	2f 93       	push	r18
     cd0:	3f 93       	push	r19
     cd2:	4f 93       	push	r20
     cd4:	5f 93       	push	r21
     cd6:	6f 93       	push	r22
     cd8:	7f 93       	push	r23
     cda:	8f 93       	push	r24
     cdc:	9f 93       	push	r25
     cde:	af 93       	push	r26
     ce0:	bf 93       	push	r27
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ce6:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     cea:	85 ff       	sbrs	r24, 5
     cec:	0a c0       	rjmp	.+20     	; 0xd02 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     cee:	80 91 a0 00 	lds	r24, 0x00A0
     cf2:	85 ff       	sbrs	r24, 5
     cf4:	06 c0       	rjmp	.+12     	; 0xd02 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     cf6:	80 91 9f 00 	lds	r24, 0x009F
     cfa:	8f 7d       	andi	r24, 0xDF	; 223
     cfc:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d00:	0c d1       	rcall	.+536    	; 0xf1a <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d02:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d06:	81 ff       	sbrs	r24, 1
     d08:	15 c0       	rjmp	.+42     	; 0xd34 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d0a:	80 91 a0 00 	lds	r24, 0x00A0
     d0e:	81 ff       	sbrs	r24, 1
     d10:	11 c0       	rjmp	.+34     	; 0xd34 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d12:	80 91 9f 00 	lds	r24, 0x009F
     d16:	8d 7f       	andi	r24, 0xFD	; 253
     d18:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d1c:	80 91 9f 00 	lds	r24, 0x009F
     d20:	8e 7f       	andi	r24, 0xFE	; 254
     d22:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d26:	80 91 a0 00 	lds	r24, 0x00A0
     d2a:	8d 7f       	andi	r24, 0xFD	; 253
     d2c:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d30:	46 db       	rcall	.-2420   	; 0x3be <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d32:	5b df       	rcall	.-330    	; 0xbea <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d34:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d38:	81 ff       	sbrs	r24, 1
     d3a:	15 c0       	rjmp	.+42     	; 0xd66 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d3c:	80 91 de 00 	lds	r24, 0x00DE
     d40:	81 ff       	sbrs	r24, 1
     d42:	11 c0       	rjmp	.+34     	; 0xd66 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d44:	80 91 df 00 	lds	r24, 0x00DF
     d48:	8d 7f       	andi	r24, 0xFD	; 253
     d4a:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     d4e:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d50:	80 91 dd 00 	lds	r24, 0x00DD
     d54:	81 60       	ori	r24, 0x01	; 1
     d56:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	8b db       	rcall	.-2282   	; 0x474 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d5e:	2f db       	rcall	.-2466   	; 0x3be <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	80 93 35 01 	sts	0x0135, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d66:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d6a:	80 ff       	sbrs	r24, 0
     d6c:	17 c0       	rjmp	.+46     	; 0xd9c <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d6e:	80 91 de 00 	lds	r24, 0x00DE
     d72:	80 ff       	sbrs	r24, 0
     d74:	13 c0       	rjmp	.+38     	; 0xd9c <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d76:	80 91 df 00 	lds	r24, 0x00DF
     d7a:	8e 7f       	andi	r24, 0xFE	; 254
     d7c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     d80:	80 91 de 00 	lds	r24, 0x00DE
     d84:	8e 7f       	andi	r24, 0xFE	; 254
     d86:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d8a:	13 db       	rcall	.-2522   	; 0x3b2 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d8c:	80 91 a0 00 	lds	r24, 0x00A0
     d90:	82 60       	ori	r24, 0x02	; 2
     d92:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	80 93 35 01 	sts	0x0135, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d9c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     da0:	82 ff       	sbrs	r24, 2
     da2:	0e c0       	rjmp	.+28     	; 0xdc0 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     da4:	80 91 de 00 	lds	r24, 0x00DE
     da8:	82 ff       	sbrs	r24, 2
     daa:	0a c0       	rjmp	.+20     	; 0xdc0 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     dac:	80 91 df 00 	lds	r24, 0x00DF
     db0:	8b 7f       	andi	r24, 0xFB	; 251
     db2:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	7c db       	rcall	.-2312   	; 0x4b4 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     dbc:	00 db       	rcall	.-2560   	; 0x3be <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     dbe:	15 df       	rcall	.-470    	; 0xbea <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	0f 90       	pop	r0
     dda:	0b be       	out	0x3b, r0	; 59
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     de6:	cf 92       	push	r12
     de8:	df 92       	push	r13
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	29 97       	sbiw	r28, 0x09	; 9
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	6b 01       	movw	r12, r22
     e08:	8a 01       	movw	r16, r20
     e0a:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e0c:	90 e8       	ldi	r25, 0x80	; 128
     e0e:	90 93 2d 01 	sts	0x012D, r25
     e12:	96 e0       	ldi	r25, 0x06	; 6
     e14:	90 93 2e 01 	sts	0x012E, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e1e:	90 93 30 01 	sts	0x0130, r25
     e22:	80 93 2f 01 	sts	0x012F, r24
     e26:	10 92 32 01 	sts	0x0132, r1
     e2a:	10 92 31 01 	sts	0x0131, r1
     e2e:	89 e0       	ldi	r24, 0x09	; 9
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	90 93 34 01 	sts	0x0134, r25
     e36:	80 93 33 01 	sts	0x0133, r24
     e3a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e3e:	ce 01       	movw	r24, r28
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	95 d0       	rcall	.+298    	; 0xf6e <USB_Host_SendControlRequest>
     e44:	88 23       	and	r24, r24
     e46:	b9 f4       	brne	.+46     	; 0xe76 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	f6 01       	movw	r30, r12
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     e52:	e8 16       	cp	r14, r24
     e54:	f9 06       	cpc	r15, r25
     e56:	70 f0       	brcs	.+28     	; 0xe74 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e58:	90 93 34 01 	sts	0x0134, r25
     e5c:	80 93 33 01 	sts	0x0133, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e60:	c8 01       	movw	r24, r16
     e62:	85 d0       	rcall	.+266    	; 0xf6e <USB_Host_SendControlRequest>
     e64:	88 23       	and	r24, r24
     e66:	39 f4       	brne	.+14     	; 0xe76 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e68:	f8 01       	movw	r30, r16
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	92 30       	cpi	r25, 0x02	; 2
     e6e:	19 f0       	breq	.+6      	; 0xe76 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     e70:	86 e0       	ldi	r24, 0x06	; 6
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     e74:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e76:	29 96       	adiw	r28, 0x09	; 9
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	08 95       	ret

00000e94 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e94:	af 92       	push	r10
     e96:	bf 92       	push	r11
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	8c 01       	movw	r16, r24
     eaa:	eb 01       	movw	r28, r22
     eac:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     eae:	23 c0       	rjmp	.+70     	; 0xef6 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     eb0:	e8 81       	ld	r30, Y
     eb2:	f9 81       	ldd	r31, Y+1	; 0x01
     eb4:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     eb6:	20 81       	ld	r18, Z
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	c7 01       	movw	r24, r14
     ebc:	2e 15       	cp	r18, r14
     ebe:	3f 05       	cpc	r19, r15
     ec0:	08 f4       	brcc	.+2      	; 0xec4 <USB_GetNextDescriptorComp+0x30>
     ec2:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     ec4:	e8 0f       	add	r30, r24
     ec6:	f9 1f       	adc	r31, r25
     ec8:	f9 83       	std	Y+1, r31	; 0x01
     eca:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     ecc:	f8 01       	movw	r30, r16
     ece:	20 81       	ld	r18, Z
     ed0:	31 81       	ldd	r19, Z+1	; 0x01
     ed2:	28 1b       	sub	r18, r24
     ed4:	39 0b       	sbc	r19, r25
     ed6:	31 83       	std	Z+1, r19	; 0x01
     ed8:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     eda:	88 81       	ld	r24, Y
     edc:	99 81       	ldd	r25, Y+1	; 0x01
     ede:	f6 01       	movw	r30, r12
     ee0:	09 95       	icall
     ee2:	82 30       	cpi	r24, 0x02	; 2
     ee4:	41 f0       	breq	.+16     	; 0xef6 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	69 f4       	brne	.+26     	; 0xf04 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
     eea:	a8 82       	st	Y, r10
     eec:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
     eee:	f8 01       	movw	r30, r16
     ef0:	f1 82       	std	Z+1, r15	; 0x01
     ef2:	e0 82       	st	Z, r14
     ef4:	07 c0       	rjmp	.+14     	; 0xf04 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     ef6:	f8 01       	movw	r30, r16
     ef8:	e0 80       	ld	r14, Z
     efa:	f1 80       	ldd	r15, Z+1	; 0x01
     efc:	e1 14       	cp	r14, r1
     efe:	f1 04       	cpc	r15, r1
     f00:	b9 f6       	brne	.-82     	; 0xeb0 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f02:	82 e0       	ldi	r24, 0x02	; 2
}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	bf 90       	pop	r11
     f16:	af 90       	pop	r10
     f18:	08 95       	ret

00000f1a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f1a:	08 95       	ret

00000f1c <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
     f24:	c8 ee       	ldi	r28, 0xE8	; 232
     f26:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f28:	07 c0       	rjmp	.+14     	; 0xf38 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	6e db       	rcall	.-2340   	; 0x60a <USB_Host_WaitMS>
     f2e:	88 23       	and	r24, r24
     f30:	d1 f4       	brne	.+52     	; 0xf66 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f32:	20 97       	sbiw	r28, 0x00	; 0
     f34:	b9 f0       	breq	.+46     	; 0xf64 <USB_Host_WaitForIOS+0x48>
     f36:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f38:	11 23       	and	r17, r17
     f3a:	29 f4       	brne	.+10     	; 0xf46 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f3c:	80 91 a6 00 	lds	r24, 0x00A6
     f40:	83 ff       	sbrs	r24, 3
     f42:	f3 cf       	rjmp	.-26     	; 0xf2a <USB_Host_WaitForIOS+0xe>
     f44:	0d c0       	rjmp	.+26     	; 0xf60 <USB_Host_WaitForIOS+0x44>
     f46:	11 30       	cpi	r17, 0x01	; 1
     f48:	29 f4       	brne	.+10     	; 0xf54 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f4a:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f4e:	80 ff       	sbrs	r24, 0
     f50:	ec cf       	rjmp	.-40     	; 0xf2a <USB_Host_WaitForIOS+0xe>
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f54:	12 30       	cpi	r17, 0x02	; 2
     f56:	49 f7       	brne	.-46     	; 0xf2a <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f58:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f5c:	82 ff       	sbrs	r24, 2
     f5e:	e5 cf       	rjmp	.-54     	; 0xf2a <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f64:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	08 95       	ret

00000f6e <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f7c:	e0 90 9e 00 	lds	r14, 0x009E
     f80:	ff 24       	eor	r15, r15
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	e8 22       	and	r14, r24
     f86:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f88:	c0 91 33 01 	lds	r28, 0x0133
     f8c:	d0 91 34 01 	lds	r29, 0x0134
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f90:	80 91 9e 00 	lds	r24, 0x009E
     f94:	81 60       	ori	r24, 0x01	; 1
     f96:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	36 db       	rcall	.-2452   	; 0x60a <USB_Host_WaitMS>
     f9e:	88 23       	and	r24, r24
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <USB_Host_SendControlRequest+0x36>
     fa2:	cb c0       	rjmp	.+406    	; 0x113a <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fa4:	80 91 aa 00 	lds	r24, 0x00AA
     fa8:	8f 7c       	andi	r24, 0xCF	; 207
     faa:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fae:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     fb2:	80 91 a6 00 	lds	r24, 0x00A6
     fb6:	8f 7e       	andi	r24, 0xEF	; 239
     fb8:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fbc:	80 91 a9 00 	lds	r24, 0x00A9
     fc0:	8f 7b       	andi	r24, 0xBF	; 191
     fc2:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     fc6:	ed e2       	ldi	r30, 0x2D	; 45
     fc8:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     fca:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fcc:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	e5 33       	cpi	r30, 0x35	; 53
     fd4:	f8 07       	cpc	r31, r24
     fd6:	c9 f7       	brne	.-14     	; 0xfca <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     fd8:	80 91 a6 00 	lds	r24, 0x00A6
     fdc:	87 77       	andi	r24, 0x77	; 119
     fde:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	9b df       	rcall	.-202    	; 0xf1c <USB_Host_WaitForIOS>
     fe6:	88 23       	and	r24, r24
     fe8:	09 f0       	breq	.+2      	; 0xfec <USB_Host_SendControlRequest+0x7e>
     fea:	a7 c0       	rjmp	.+334    	; 0x113a <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fec:	80 91 a9 00 	lds	r24, 0x00A9
     ff0:	80 64       	ori	r24, 0x40	; 64
     ff2:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	08 db       	rcall	.-2544   	; 0x60a <USB_Host_WaitMS>
     ffa:	88 23       	and	r24, r24
     ffc:	09 f0       	breq	.+2      	; 0x1000 <USB_Host_SendControlRequest+0x92>
     ffe:	9d c0       	rjmp	.+314    	; 0x113a <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1000:	80 91 2d 01 	lds	r24, 0x012D
    1004:	87 ff       	sbrs	r24, 7
    1006:	4f c0       	rjmp	.+158    	; 0x10a6 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1008:	80 91 aa 00 	lds	r24, 0x00AA
    100c:	8f 7c       	andi	r24, 0xCF	; 207
    100e:	80 61       	ori	r24, 0x10	; 16
    1010:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1014:	01 15       	cp	r16, r1
    1016:	11 05       	cpc	r17, r1
    1018:	61 f5       	brne	.+88     	; 0x1072 <USB_Host_SendControlRequest+0x104>
    101a:	2d c0       	rjmp	.+90     	; 0x1076 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    101c:	80 91 a9 00 	lds	r24, 0x00A9
    1020:	8f 7b       	andi	r24, 0xBF	; 191
    1022:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	79 df       	rcall	.-270    	; 0xf1c <USB_Host_WaitForIOS>
    102a:	88 23       	and	r24, r24
    102c:	09 f0       	breq	.+2      	; 0x1030 <USB_Host_SendControlRequest+0xc2>
    102e:	85 c0       	rjmp	.+266    	; 0x113a <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1030:	80 91 f6 00 	lds	r24, 0x00F6
    1034:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	49 f4       	brne	.+18     	; 0x104e <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    103c:	c0 e0       	ldi	r28, 0x00	; 0
    103e:	d0 e0       	ldi	r29, 0x00	; 0
    1040:	06 c0       	rjmp	.+12     	; 0x104e <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1042:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1046:	f8 01       	movw	r30, r16
    1048:	81 93       	st	Z+, r24
    104a:	8f 01       	movw	r16, r30
					DataLen--;
    104c:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    104e:	80 91 f6 00 	lds	r24, 0x00F6
    1052:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	11 f0       	breq	.+4      	; 0x105e <USB_Host_SendControlRequest+0xf0>
    105a:	20 97       	sbiw	r28, 0x00	; 0
    105c:	91 f7       	brne	.-28     	; 0x1042 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    105e:	80 91 a9 00 	lds	r24, 0x00A9
    1062:	80 64       	ori	r24, 0x40	; 64
    1064:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1068:	80 91 a6 00 	lds	r24, 0x00A6
    106c:	8e 77       	andi	r24, 0x7E	; 126
    106e:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1072:	20 97       	sbiw	r28, 0x00	; 0
    1074:	99 f6       	brne	.-90     	; 0x101c <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1076:	80 91 aa 00 	lds	r24, 0x00AA
    107a:	8f 7c       	andi	r24, 0xCF	; 207
    107c:	80 62       	ori	r24, 0x20	; 32
    107e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1082:	80 91 a9 00 	lds	r24, 0x00A9
    1086:	8f 7b       	andi	r24, 0xBF	; 191
    1088:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	46 df       	rcall	.-372    	; 0xf1c <USB_Host_WaitForIOS>
    1090:	88 23       	and	r24, r24
    1092:	09 f0       	breq	.+2      	; 0x1096 <USB_Host_SendControlRequest+0x128>
    1094:	52 c0       	rjmp	.+164    	; 0x113a <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1096:	80 91 a6 00 	lds	r24, 0x00A6
    109a:	8b 77       	andi	r24, 0x7B	; 123
    109c:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	3c df       	rcall	.-392    	; 0xf1c <USB_Host_WaitForIOS>
    10a4:	4a c0       	rjmp	.+148    	; 0x113a <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    10a6:	01 15       	cp	r16, r1
    10a8:	11 05       	cpc	r17, r1
    10aa:	99 f1       	breq	.+102    	; 0x1112 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10ac:	80 91 aa 00 	lds	r24, 0x00AA
    10b0:	8f 7c       	andi	r24, 0xCF	; 207
    10b2:	80 62       	ori	r24, 0x20	; 32
    10b4:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10b8:	80 91 a9 00 	lds	r24, 0x00A9
    10bc:	8f 7b       	andi	r24, 0xBF	; 191
    10be:	80 93 a9 00 	sts	0x00A9, r24
    10c2:	1c c0       	rjmp	.+56     	; 0x10fc <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	2a df       	rcall	.-428    	; 0xf1c <USB_Host_WaitForIOS>
    10c8:	88 23       	and	r24, r24
    10ca:	b9 f5       	brne	.+110    	; 0x113a <USB_Host_SendControlRequest+0x1cc>
    10cc:	f8 01       	movw	r30, r16
    10ce:	06 c0       	rjmp	.+12     	; 0x10dc <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    10d0:	81 91       	ld	r24, Z+
    10d2:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10d4:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    10d8:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10da:	59 f0       	breq	.+22     	; 0x10f2 <USB_Host_SendControlRequest+0x184>
    10dc:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10de:	20 91 f6 00 	lds	r18, 0x00F6
    10e2:	30 91 f7 00 	lds	r19, 0x00F7
    10e6:	80 91 27 01 	lds	r24, 0x0127
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	28 17       	cp	r18, r24
    10ee:	39 07       	cpc	r19, r25
    10f0:	78 f3       	brcs	.-34     	; 0x10d0 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10f2:	80 91 a6 00 	lds	r24, 0x00A6
    10f6:	8b 77       	andi	r24, 0x7B	; 123
    10f8:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10fc:	20 97       	sbiw	r28, 0x00	; 0
    10fe:	11 f7       	brne	.-60     	; 0x10c4 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	0c df       	rcall	.-488    	; 0xf1c <USB_Host_WaitForIOS>
    1104:	88 23       	and	r24, r24
    1106:	c9 f4       	brne	.+50     	; 0x113a <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1108:	80 91 a9 00 	lds	r24, 0x00A9
    110c:	80 64       	ori	r24, 0x40	; 64
    110e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1112:	80 91 aa 00 	lds	r24, 0x00AA
    1116:	8f 7c       	andi	r24, 0xCF	; 207
    1118:	80 61       	ori	r24, 0x10	; 16
    111a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    111e:	80 91 a9 00 	lds	r24, 0x00A9
    1122:	8f 7b       	andi	r24, 0xBF	; 191
    1124:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	f8 de       	rcall	.-528    	; 0xf1c <USB_Host_WaitForIOS>
    112c:	88 23       	and	r24, r24
    112e:	29 f4       	brne	.+10     	; 0x113a <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1130:	90 91 a6 00 	lds	r25, 0x00A6
    1134:	9e 77       	andi	r25, 0x7E	; 126
    1136:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    113a:	90 91 a9 00 	lds	r25, 0x00A9
    113e:	90 64       	ori	r25, 0x40	; 64
    1140:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1144:	e1 14       	cp	r14, r1
    1146:	f1 04       	cpc	r15, r1
    1148:	29 f4       	brne	.+10     	; 0x1154 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    114a:	90 91 9e 00 	lds	r25, 0x009E
    114e:	9e 7f       	andi	r25, 0xFE	; 254
    1150:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    115a:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	08 95       	ret

0000116c <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    116c:	1f 93       	push	r17
    116e:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1170:	10 92 2d 01 	sts	0x012D, r1
    1174:	89 e0       	ldi	r24, 0x09	; 9
    1176:	80 93 2e 01 	sts	0x012E, r24
    117a:	10 93 2f 01 	sts	0x012F, r17
    117e:	10 92 30 01 	sts	0x0130, r1
    1182:	10 92 32 01 	sts	0x0132, r1
    1186:	10 92 31 01 	sts	0x0131, r1
    118a:	10 92 34 01 	sts	0x0134, r1
    118e:	10 92 33 01 	sts	0x0133, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1192:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	e9 de       	rcall	.-558    	; 0xf6e <USB_Host_SendControlRequest>
    119c:	88 23       	and	r24, r24
    119e:	49 f4       	brne	.+18     	; 0x11b2 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11a0:	10 93 2b 01 	sts	0x012B, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    11a4:	11 23       	and	r17, r17
    11a6:	11 f0       	breq	.+4      	; 0x11ac <USB_Host_SetDeviceConfiguration+0x40>
    11a8:	9b e0       	ldi	r25, 0x0B	; 11
    11aa:	01 c0       	rjmp	.+2      	; 0x11ae <USB_Host_SetDeviceConfiguration+0x42>
    11ac:	9a e0       	ldi	r25, 0x0A	; 10
    11ae:	90 93 35 01 	sts	0x0135, r25
	}

	return ErrorCode;
}
    11b2:	1f 91       	pop	r17
    11b4:	08 95       	ret

000011b6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    11b6:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    11b8:	10 91 a7 00 	lds	r17, 0x00A7
    11bc:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    11be:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11c2:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    11c6:	76 da       	rcall	.-2836   	; 0x6b4 <USB_Host_ProcessNextHostState>
    11c8:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    11cc:	1f 91       	pop	r17
    11ce:	08 95       	ret

000011d0 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    11d0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    11d2:	81 81       	ldd	r24, Z+1	; 0x01
    11d4:	84 30       	cpi	r24, 0x04	; 4
    11d6:	19 f4       	brne	.+6      	; 0x11de <DCOMP_HID_Host_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    11d8:	85 81       	ldd	r24, Z+5	; 0x05
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	08 95       	ret
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
		  return DESCRIPTOR_SEARCH_Found;
    11e2:	80 e0       	ldi	r24, 0x00	; 0
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11e4:	08 95       	ret

000011e6 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    11e6:	fc 01       	movw	r30, r24
    11e8:	81 81       	ldd	r24, Z+1	; 0x01
    11ea:	81 32       	cpi	r24, 0x21	; 33
    11ec:	21 f0       	breq	.+8      	; 0x11f6 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    11ee:	84 30       	cpi	r24, 0x04	; 4
    11f0:	21 f4       	brne	.+8      	; 0x11fa <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    11fa:	82 e0       	ldi	r24, 0x02	; 2
}
    11fc:	08 95       	ret

000011fe <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    11fe:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1200:	81 81       	ldd	r24, Z+1	; 0x01
    1202:	85 30       	cpi	r24, 0x05	; 5
    1204:	29 f4       	brne	.+10     	; 0x1210 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1206:	82 81       	ldd	r24, Z+2	; 0x02
    1208:	85 dc       	rcall	.-1782   	; 0xb14 <Pipe_IsEndpointBound>
    120a:	88 23       	and	r24, r24
    120c:	19 f4       	brne	.+6      	; 0x1214 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x16>
    120e:	04 c0       	rjmp	.+8      	; 0x1218 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1210:	84 30       	cpi	r24, 0x04	; 4
    1212:	21 f0       	breq	.+8      	; 0x121c <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1214:	82 e0       	ldi	r24, 0x02	; 2
    1216:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    121c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    121e:	08 95       	ret

00001220 <HID_Host_ConfigurePipes>:
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1220:	4f 92       	push	r4
    1222:	5f 92       	push	r5
    1224:	6f 92       	push	r6
    1226:	7f 92       	push	r7
    1228:	8f 92       	push	r8
    122a:	9f 92       	push	r9
    122c:	af 92       	push	r10
    122e:	bf 92       	push	r11
    1230:	cf 92       	push	r12
    1232:	df 92       	push	r13
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <HID_Host_ConfigurePipes+0x22>
    1242:	00 d0       	rcall	.+0      	; 0x1244 <HID_Host_ConfigurePipes+0x24>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	8c 01       	movw	r16, r24
    124a:	7a 83       	std	Y+2, r23	; 0x02
    124c:	69 83       	std	Y+1, r22	; 0x01
    124e:	5c 83       	std	Y+4, r21	; 0x04
    1250:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1252:	0f 96       	adiw	r24, 0x0f	; 15
    1254:	fc 01       	movw	r30, r24
    1256:	88 e0       	ldi	r24, 0x08	; 8
    1258:	df 01       	movw	r26, r30
    125a:	1d 92       	st	X+, r1
    125c:	8a 95       	dec	r24
    125e:	e9 f7       	brne	.-6      	; 0x125a <HID_Host_ConfigurePipes+0x3a>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1260:	eb 81       	ldd	r30, Y+3	; 0x03
    1262:	fc 81       	ldd	r31, Y+4	; 0x04
    1264:	81 81       	ldd	r24, Z+1	; 0x01
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	09 f0       	breq	.+2      	; 0x126c <HID_Host_ConfigurePipes+0x4c>
    126a:	95 c0       	rjmp	.+298    	; 0x1396 <HID_Host_ConfigurePipes+0x176>
    126c:	44 24       	eor	r4, r4
    126e:	55 24       	eor	r5, r5
    1270:	aa 24       	eor	r10, r10
    1272:	bb 24       	eor	r11, r11
    1274:	ee 24       	eor	r14, r14
    1276:	ff 24       	eor	r15, r15
    1278:	cc 24       	eor	r12, r12
    127a:	dd 24       	eor	r13, r13
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    127c:	93 e0       	ldi	r25, 0x03	; 3
    127e:	69 2e       	mov	r6, r25
    1280:	71 2c       	mov	r7, r1
    1282:	6c 0e       	add	r6, r28
    1284:	7d 1e       	adc	r7, r29
    1286:	4e 01       	movw	r8, r28
    1288:	08 94       	sec
    128a:	81 1c       	adc	r8, r1
    128c:	91 1c       	adc	r9, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    128e:	a1 14       	cp	r10, r1
    1290:	b1 04       	cpc	r11, r1
    1292:	39 f0       	breq	.+14     	; 0x12a2 <HID_Host_ConfigurePipes+0x82>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1294:	c4 01       	movw	r24, r8
    1296:	b3 01       	movw	r22, r6
    1298:	4f ef       	ldi	r20, 0xFF	; 255
    129a:	58 e0       	ldi	r21, 0x08	; 8
    129c:	fb dd       	rcall	.-1034   	; 0xe94 <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    129e:	88 23       	and	r24, r24
    12a0:	21 f1       	breq	.+72     	; 0x12ea <HID_Host_ConfigurePipes+0xca>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    12a2:	c1 14       	cp	r12, r1
    12a4:	d1 04       	cpc	r13, r1
    12a6:	79 f5       	brne	.+94     	; 0x1306 <HID_Host_ConfigurePipes+0xe6>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12a8:	c4 01       	movw	r24, r8
    12aa:	b3 01       	movw	r22, r6
    12ac:	48 ee       	ldi	r20, 0xE8	; 232
    12ae:	58 e0       	ldi	r21, 0x08	; 8
    12b0:	f1 dd       	rcall	.-1054   	; 0xe94 <USB_GetNextDescriptorComp>
    12b2:	88 23       	and	r24, r24
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <HID_Host_ConfigurePipes+0x98>
    12b6:	71 c0       	rjmp	.+226    	; 0x139a <HID_Host_ConfigurePipes+0x17a>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    12b8:	ab 80       	ldd	r10, Y+3	; 0x03
    12ba:	bc 80       	ldd	r11, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    12bc:	f8 01       	movw	r30, r16
    12be:	84 85       	ldd	r24, Z+12	; 0x0c
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    12c0:	88 23       	and	r24, r24
    12c2:	31 f0       	breq	.+12     	; 0x12d0 <HID_Host_ConfigurePipes+0xb0>
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    12c4:	d5 01       	movw	r26, r10
    12c6:	17 96       	adiw	r26, 0x07	; 7
    12c8:	9c 91       	ld	r25, X
    12ca:	17 97       	sbiw	r26, 0x07	; 7
    12cc:	98 17       	cp	r25, r24
    12ce:	61 f7       	brne	.-40     	; 0x12a8 <HID_Host_ConfigurePipes+0x88>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12d0:	c4 01       	movw	r24, r8
    12d2:	b3 01       	movw	r22, r6
    12d4:	43 ef       	ldi	r20, 0xF3	; 243
    12d6:	58 e0       	ldi	r21, 0x08	; 8
    12d8:	dd dd       	rcall	.-1094   	; 0xe94 <USB_GetNextDescriptorComp>
    12da:	88 23       	and	r24, r24
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <HID_Host_ConfigurePipes+0xc0>
    12de:	5d c0       	rjmp	.+186    	; 0x139a <HID_Host_ConfigurePipes+0x17a>
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    12e0:	4b 80       	ldd	r4, Y+3	; 0x03
    12e2:	5c 80       	ldd	r5, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    12e4:	ee 24       	eor	r14, r14
    12e6:	ff 24       	eor	r15, r15
    12e8:	d2 cf       	rjmp	.-92     	; 0x128e <HID_Host_ConfigurePipes+0x6e>

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    12ea:	eb 81       	ldd	r30, Y+3	; 0x03
    12ec:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	87 ff       	sbrs	r24, 7
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <HID_Host_ConfigurePipes+0xd8>
		  DataINEndpoint  = EndpointData;
    12f4:	6f 01       	movw	r12, r30
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <HID_Host_ConfigurePipes+0xda>
		else
		  DataOUTEndpoint = EndpointData;
    12f8:	7f 01       	movw	r14, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    12fa:	c1 14       	cp	r12, r1
    12fc:	d1 04       	cpc	r13, r1
    12fe:	39 f2       	breq	.-114    	; 0x128e <HID_Host_ConfigurePipes+0x6e>
    1300:	e1 14       	cp	r14, r1
    1302:	f1 04       	cpc	r15, r1
    1304:	21 f2       	breq	.-120    	; 0x128e <HID_Host_ConfigurePipes+0x6e>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1306:	f6 01       	movw	r30, r12
    1308:	84 81       	ldd	r24, Z+4	; 0x04
    130a:	95 81       	ldd	r25, Z+5	; 0x05
    130c:	d8 01       	movw	r26, r16
    130e:	12 96       	adiw	r26, 0x02	; 2
    1310:	9c 93       	st	X, r25
    1312:	8e 93       	st	-X, r24
    1314:	11 97       	sbiw	r26, 0x01	; 1
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1316:	82 81       	ldd	r24, Z+2	; 0x02
    1318:	13 96       	adiw	r26, 0x03	; 3
    131a:	8c 93       	st	X, r24
    131c:	13 97       	sbiw	r26, 0x03	; 3
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    131e:	83 e0       	ldi	r24, 0x03	; 3
    1320:	c8 2e       	mov	r12, r24
    1322:	14 96       	adiw	r26, 0x04	; 4
    1324:	cc 92       	st	X, r12

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    1326:	c8 01       	movw	r24, r16
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	b7 db       	rcall	.-2194   	; 0xa9a <Pipe_ConfigurePipeTable>
    132c:	88 23       	and	r24, r24
    132e:	b9 f1       	breq	.+110    	; 0x139e <HID_Host_ConfigurePipes+0x17e>
	  return false;

	if (DataOUTEndpoint)
    1330:	e1 14       	cp	r14, r1
    1332:	f1 04       	cpc	r15, r1
    1334:	a1 f0       	breq	.+40     	; 0x135e <HID_Host_ConfigurePipes+0x13e>
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1336:	f7 01       	movw	r30, r14
    1338:	84 81       	ldd	r24, Z+4	; 0x04
    133a:	95 81       	ldd	r25, Z+5	; 0x05
    133c:	d8 01       	movw	r26, r16
    133e:	18 96       	adiw	r26, 0x08	; 8
    1340:	9c 93       	st	X, r25
    1342:	8e 93       	st	-X, r24
    1344:	17 97       	sbiw	r26, 0x07	; 7
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1346:	82 81       	ldd	r24, Z+2	; 0x02
    1348:	19 96       	adiw	r26, 0x09	; 9
    134a:	8c 93       	st	X, r24
    134c:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    134e:	1a 96       	adiw	r26, 0x0a	; 10
    1350:	cc 92       	st	X, r12

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    1352:	c8 01       	movw	r24, r16
    1354:	06 96       	adiw	r24, 0x06	; 6
    1356:	61 e0       	ldi	r22, 0x01	; 1
    1358:	a0 db       	rcall	.-2240   	; 0xa9a <Pipe_ConfigurePipeTable>
    135a:	88 23       	and	r24, r24
    135c:	01 f1       	breq	.+64     	; 0x139e <HID_Host_ConfigurePipes+0x17e>
		  return false;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    135e:	f5 01       	movw	r30, r10
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	d8 01       	movw	r26, r16
    1364:	50 96       	adiw	r26, 0x10	; 16
    1366:	8c 93       	st	X, r24
    1368:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    136a:	f2 01       	movw	r30, r4
    136c:	87 81       	ldd	r24, Z+7	; 0x07
    136e:	90 85       	ldd	r25, Z+8	; 0x08
    1370:	55 96       	adiw	r26, 0x15	; 21
    1372:	9c 93       	st	X, r25
    1374:	8e 93       	st	-X, r24
    1376:	54 97       	sbiw	r26, 0x14	; 20
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	d5 01       	movw	r26, r10
    137c:	16 96       	adiw	r26, 0x06	; 6
    137e:	9c 91       	ld	r25, X
    1380:	16 97       	sbiw	r26, 0x06	; 6
    1382:	99 23       	and	r25, r25
    1384:	09 f4       	brne	.+2      	; 0x1388 <HID_Host_ConfigurePipes+0x168>
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	f8 01       	movw	r30, r16
    138a:	81 8b       	std	Z+17, r24	; 0x11
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    138c:	88 e0       	ldi	r24, 0x08	; 8
    138e:	86 8b       	std	Z+22, r24	; 0x16
	HIDInterfaceInfo->State.IsActive             = true;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	87 87       	std	Z+15, r24	; 0x0f
    1394:	04 c0       	rjmp	.+8      	; 0x139e <HID_Host_ConfigurePipes+0x17e>
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	03 c0       	rjmp	.+6      	; 0x13a0 <HID_Host_ConfigurePipes+0x180>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
    139a:	82 e0       	ldi	r24, 0x02	; 2
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <HID_Host_ConfigurePipes+0x180>
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return false;
    139e:	80 e0       	ldi	r24, 0x00	; 0
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	ff 90       	pop	r15
    13b2:	ef 90       	pop	r14
    13b4:	df 90       	pop	r13
    13b6:	cf 90       	pop	r12
    13b8:	bf 90       	pop	r11
    13ba:	af 90       	pop	r10
    13bc:	9f 90       	pop	r9
    13be:	8f 90       	pop	r8
    13c0:	7f 90       	pop	r7
    13c2:	6f 90       	pop	r6
    13c4:	5f 90       	pop	r5
    13c6:	4f 90       	pop	r4
    13c8:	08 95       	ret

000013ca <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    13d4:	80 91 35 01 	lds	r24, 0x0135
    13d8:	8b 30       	cpi	r24, 0x0B	; 11
    13da:	d9 f5       	brne	.+118    	; 0x1452 <HID_Host_ReceiveReport+0x88>
    13dc:	87 85       	ldd	r24, Z+15	; 0x0f
    13de:	88 23       	and	r24, r24
    13e0:	c1 f1       	breq	.+112    	; 0x1452 <HID_Host_ReceiveReport+0x88>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13e2:	80 81       	ld	r24, Z
    13e4:	8f 70       	andi	r24, 0x0F	; 15
    13e6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13ea:	80 91 a9 00 	lds	r24, 0x00A9
    13ee:	8f 7b       	andi	r24, 0xBF	; 191
    13f0:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    13f4:	e6 2e       	mov	r14, r22
    13f6:	e7 01       	movw	r28, r14
    13f8:	7e 01       	movw	r14, r28
    13fa:	f7 2e       	mov	r15, r23
    13fc:	e7 01       	movw	r28, r14

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    13fe:	83 89       	ldd	r24, Z+19	; 0x13
    1400:	88 23       	and	r24, r24
    1402:	91 f4       	brne	.+36     	; 0x1428 <HID_Host_ReceiveReport+0x5e>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1404:	a5 85       	ldd	r26, Z+13	; 0x0d
    1406:	b6 85       	ldd	r27, Z+14	; 0x0e
    1408:	a8 52       	subi	r26, 0x28	; 40
    140a:	bc 4f       	sbci	r27, 0xFC	; 252
    140c:	8c 91       	ld	r24, X
    140e:	88 23       	and	r24, r24
    1410:	21 f0       	breq	.+8      	; 0x141a <HID_Host_ReceiveReport+0x50>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1412:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    1416:	69 93       	st	Y+, r22
    1418:	01 c0       	rjmp	.+2      	; 0x141c <HID_Host_ReceiveReport+0x52>
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    141a:	60 e0       	ldi	r22, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    141c:	85 85       	ldd	r24, Z+13	; 0x0d
    141e:	96 85       	ldd	r25, Z+14	; 0x0e
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	71 d8       	rcall	.-3870   	; 0x506 <USB_GetHIDReportSize>
    1424:	bc 01       	movw	r22, r24
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <HID_Host_ReceiveReport+0x66>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1428:	60 91 f6 00 	lds	r22, 0x00F6
    142c:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1430:	ce 01       	movw	r24, r28
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	67 da       	rcall	.-2866   	; 0x906 <Pipe_Read_Stream_LE>
    1438:	88 23       	and	r24, r24
    143a:	61 f4       	brne	.+24     	; 0x1454 <HID_Host_ReceiveReport+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    143c:	90 91 a6 00 	lds	r25, 0x00A6
    1440:	9e 77       	andi	r25, 0x7E	; 126
    1442:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1446:	90 91 a9 00 	lds	r25, 0x00A9
    144a:	90 64       	ori	r25, 0x40	; 64
    144c:	90 93 a9 00 	sts	0x00A9, r25
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <HID_Host_ReceiveReport+0x8a>

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1452:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	08 95       	ret

0000145e <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    145e:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1460:	80 91 35 01 	lds	r24, 0x0135
    1464:	8b 30       	cpi	r24, 0x0B	; 11
    1466:	a9 f4       	brne	.+42     	; 0x1492 <HID_Host_IsReportReceived+0x34>
    1468:	87 85       	ldd	r24, Z+15	; 0x0f
    146a:	88 23       	and	r24, r24
    146c:	a1 f0       	breq	.+40     	; 0x1496 <HID_Host_IsReportReceived+0x38>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    146e:	80 81       	ld	r24, Z
    1470:	8f 70       	andi	r24, 0x0F	; 15
    1472:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1476:	80 91 a9 00 	lds	r24, 0x00A9
    147a:	8f 7b       	andi	r24, 0xBF	; 191
    147c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1480:	80 91 a6 00 	lds	r24, 0x00A6
    1484:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1486:	90 91 a9 00 	lds	r25, 0x00A9
    148a:	90 64       	ori	r25, 0x40	; 64
    148c:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1490:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	08 95       	ret
    1496:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    1498:	08 95       	ret

0000149a <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    14a0:	89 89       	ldd	r24, Y+17	; 0x11
    14a2:	88 23       	and	r24, r24
    14a4:	f9 f0       	breq	.+62     	; 0x14e4 <HID_Host_SetBootProtocol+0x4a>
	  return HID_ERROR_LOGICAL;

	USB_ControlRequest = (USB_Request_Header_t)
    14a6:	88 89       	ldd	r24, Y+16	; 0x10
    14a8:	91 e2       	ldi	r25, 0x21	; 33
    14aa:	90 93 2d 01 	sts	0x012D, r25
    14ae:	9b e0       	ldi	r25, 0x0B	; 11
    14b0:	90 93 2e 01 	sts	0x012E, r25
    14b4:	10 92 30 01 	sts	0x0130, r1
    14b8:	10 92 2f 01 	sts	0x012F, r1
    14bc:	80 93 31 01 	sts	0x0131, r24
    14c0:	10 92 32 01 	sts	0x0132, r1
    14c4:	10 92 34 01 	sts	0x0134, r1
    14c8:	10 92 33 01 	sts	0x0133, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14cc:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	4c dd       	rcall	.-1384   	; 0xf6e <USB_Host_SendControlRequest>
    14d6:	88 23       	and	r24, r24
    14d8:	31 f4       	brne	.+12     	; 0x14e6 <HID_Host_SetBootProtocol+0x4c>
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    14da:	98 e0       	ldi	r25, 0x08	; 8
    14dc:	9e 8b       	std	Y+22, r25	; 0x16
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    14de:	91 e0       	ldi	r25, 0x01	; 1
    14e0:	9b 8b       	std	Y+19, r25	; 0x13

	return HOST_SENDCONTROL_Successful;
    14e2:	01 c0       	rjmp	.+2      	; 0x14e6 <HID_Host_SetBootProtocol+0x4c>
uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
	  return HID_ERROR_LOGICAL;
    14e4:	80 e8       	ldi	r24, 0x80	; 128

	HIDInterfaceInfo->State.LargestReportSize = 8;
	HIDInterfaceInfo->State.UsingBootProtocol = true;

	return HOST_SENDCONTROL_Successful;
}
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	08 95       	ret

000014ec <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    14ec:	90 91 c8 00 	lds	r25, 0x00C8
    14f0:	95 ff       	sbrs	r25, 5
    14f2:	fc cf       	rjmp	.-8      	; 0x14ec <Serial_putchar>
				UDR1 = DataByte;
    14f4:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	08 95       	ret

000014fe <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    14fe:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1502:	87 ff       	sbrs	r24, 7
    1504:	08 c0       	rjmp	.+16     	; 0x1516 <Serial_getchar+0x18>
    1506:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    150a:	87 ff       	sbrs	r24, 7
    150c:	07 c0       	rjmp	.+14     	; 0x151c <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    150e:	20 91 ce 00 	lds	r18, 0x00CE
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	05 c0       	rjmp	.+10     	; 0x1520 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    1516:	2e ef       	ldi	r18, 0xFE	; 254
    1518:	3f ef       	ldi	r19, 0xFF	; 255
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    151c:	2f ef       	ldi	r18, 0xFF	; 255
    151e:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1520:	c9 01       	movw	r24, r18
    1522:	08 95       	ret

00001524 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1524:	fc 01       	movw	r30, r24
	if (!(Stream))
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	51 f4       	brne	.+20     	; 0x153e <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    152a:	e6 e3       	ldi	r30, 0x36	; 54
    152c:	f1 e0       	ldi	r31, 0x01	; 1
    152e:	f0 93 45 01 	sts	0x0145, r31
    1532:	e0 93 44 01 	sts	0x0144, r30
		stdout = Stream;
    1536:	f0 93 47 01 	sts	0x0147, r31
    153a:	e0 93 46 01 	sts	0x0146, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    153e:	8e e0       	ldi	r24, 0x0E	; 14
    1540:	df 01       	movw	r26, r30
    1542:	1d 92       	st	X+, r1
    1544:	8a 95       	dec	r24
    1546:	e9 f7       	brne	.-6      	; 0x1542 <Serial_CreateStream+0x1e>
    1548:	83 e0       	ldi	r24, 0x03	; 3
    154a:	83 83       	std	Z+3, r24	; 0x03
    154c:	86 e7       	ldi	r24, 0x76	; 118
    154e:	9a e0       	ldi	r25, 0x0A	; 10
    1550:	91 87       	std	Z+9, r25	; 0x09
    1552:	80 87       	std	Z+8, r24	; 0x08
    1554:	8f e7       	ldi	r24, 0x7F	; 127
    1556:	9a e0       	ldi	r25, 0x0A	; 10
    1558:	93 87       	std	Z+11, r25	; 0x0b
    155a:	82 87       	std	Z+10, r24	; 0x0a
}
    155c:	08 95       	ret

0000155e <printf_P>:
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	fe 01       	movw	r30, r28
    1568:	35 96       	adiw	r30, 0x05	; 5
    156a:	61 91       	ld	r22, Z+
    156c:	71 91       	ld	r23, Z+
    156e:	80 91 46 01 	lds	r24, 0x0146
    1572:	90 91 47 01 	lds	r25, 0x0147
    1576:	dc 01       	movw	r26, r24
    1578:	13 96       	adiw	r26, 0x03	; 3
    157a:	2c 91       	ld	r18, X
    157c:	13 97       	sbiw	r26, 0x03	; 3
    157e:	28 60       	ori	r18, 0x08	; 8
    1580:	13 96       	adiw	r26, 0x03	; 3
    1582:	2c 93       	st	X, r18
    1584:	af 01       	movw	r20, r30
    1586:	42 d0       	rcall	.+132    	; 0x160c <vfprintf>
    1588:	e0 91 46 01 	lds	r30, 0x0146
    158c:	f0 91 47 01 	lds	r31, 0x0147
    1590:	23 81       	ldd	r18, Z+3	; 0x03
    1592:	27 7f       	andi	r18, 0xF7	; 247
    1594:	23 83       	std	Z+3, r18	; 0x03
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <puts_P>:
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	8c 01       	movw	r16, r24
    15aa:	e0 91 46 01 	lds	r30, 0x0146
    15ae:	f0 91 47 01 	lds	r31, 0x0147
    15b2:	83 81       	ldd	r24, Z+3	; 0x03
    15b4:	81 ff       	sbrs	r24, 1
    15b6:	20 c0       	rjmp	.+64     	; 0x15f8 <puts_P+0x5c>
    15b8:	c0 e0       	ldi	r28, 0x00	; 0
    15ba:	d0 e0       	ldi	r29, 0x00	; 0
    15bc:	0c c0       	rjmp	.+24     	; 0x15d6 <puts_P+0x3a>
    15be:	db 01       	movw	r26, r22
    15c0:	18 96       	adiw	r26, 0x08	; 8
    15c2:	ed 91       	ld	r30, X+
    15c4:	fc 91       	ld	r31, X
    15c6:	19 97       	sbiw	r26, 0x09	; 9
    15c8:	09 95       	icall
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	11 f0       	breq	.+4      	; 0x15d2 <puts_P+0x36>
    15ce:	cf ef       	ldi	r28, 0xFF	; 255
    15d0:	df ef       	ldi	r29, 0xFF	; 255
    15d2:	0f 5f       	subi	r16, 0xFF	; 255
    15d4:	1f 4f       	sbci	r17, 0xFF	; 255
    15d6:	f8 01       	movw	r30, r16
    15d8:	84 91       	lpm	r24, Z+
    15da:	60 91 46 01 	lds	r22, 0x0146
    15de:	70 91 47 01 	lds	r23, 0x0147
    15e2:	88 23       	and	r24, r24
    15e4:	61 f7       	brne	.-40     	; 0x15be <puts_P+0x22>
    15e6:	db 01       	movw	r26, r22
    15e8:	18 96       	adiw	r26, 0x08	; 8
    15ea:	ed 91       	ld	r30, X+
    15ec:	fc 91       	ld	r31, X
    15ee:	19 97       	sbiw	r26, 0x09	; 9
    15f0:	8a e0       	ldi	r24, 0x0A	; 10
    15f2:	09 95       	icall
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	11 f0       	breq	.+4      	; 0x15fc <puts_P+0x60>
    15f8:	cf ef       	ldi	r28, 0xFF	; 255
    15fa:	df ef       	ldi	r29, 0xFF	; 255
    15fc:	ce 01       	movw	r24, r28
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	08 95       	ret

0000160c <vfprintf>:
    160c:	2f 92       	push	r2
    160e:	3f 92       	push	r3
    1610:	4f 92       	push	r4
    1612:	5f 92       	push	r5
    1614:	6f 92       	push	r6
    1616:	7f 92       	push	r7
    1618:	8f 92       	push	r8
    161a:	9f 92       	push	r9
    161c:	af 92       	push	r10
    161e:	bf 92       	push	r11
    1620:	cf 92       	push	r12
    1622:	df 92       	push	r13
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	2c 97       	sbiw	r28, 0x0c	; 12
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	6c 01       	movw	r12, r24
    1642:	1b 01       	movw	r2, r22
    1644:	8a 01       	movw	r16, r20
    1646:	fc 01       	movw	r30, r24
    1648:	17 82       	std	Z+7, r1	; 0x07
    164a:	16 82       	std	Z+6, r1	; 0x06
    164c:	83 81       	ldd	r24, Z+3	; 0x03
    164e:	81 ff       	sbrs	r24, 1
    1650:	c4 c1       	rjmp	.+904    	; 0x19da <vfprintf+0x3ce>
    1652:	2e 01       	movw	r4, r28
    1654:	08 94       	sec
    1656:	41 1c       	adc	r4, r1
    1658:	51 1c       	adc	r5, r1
    165a:	f6 01       	movw	r30, r12
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	f1 01       	movw	r30, r2
    1660:	93 fd       	sbrc	r25, 3
    1662:	85 91       	lpm	r24, Z+
    1664:	93 ff       	sbrs	r25, 3
    1666:	81 91       	ld	r24, Z+
    1668:	1f 01       	movw	r2, r30
    166a:	88 23       	and	r24, r24
    166c:	09 f4       	brne	.+2      	; 0x1670 <vfprintf+0x64>
    166e:	b1 c1       	rjmp	.+866    	; 0x19d2 <vfprintf+0x3c6>
    1670:	85 32       	cpi	r24, 0x25	; 37
    1672:	39 f4       	brne	.+14     	; 0x1682 <vfprintf+0x76>
    1674:	93 fd       	sbrc	r25, 3
    1676:	85 91       	lpm	r24, Z+
    1678:	93 ff       	sbrs	r25, 3
    167a:	81 91       	ld	r24, Z+
    167c:	1f 01       	movw	r2, r30
    167e:	85 32       	cpi	r24, 0x25	; 37
    1680:	21 f4       	brne	.+8      	; 0x168a <vfprintf+0x7e>
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	b6 01       	movw	r22, r12
    1686:	db d1       	rcall	.+950    	; 0x1a3e <fputc>
    1688:	e8 cf       	rjmp	.-48     	; 0x165a <vfprintf+0x4e>
    168a:	ee 24       	eor	r14, r14
    168c:	ff 24       	eor	r15, r15
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	20 32       	cpi	r18, 0x20	; 32
    1692:	b0 f4       	brcc	.+44     	; 0x16c0 <vfprintf+0xb4>
    1694:	8b 32       	cpi	r24, 0x2B	; 43
    1696:	69 f0       	breq	.+26     	; 0x16b2 <vfprintf+0xa6>
    1698:	8c 32       	cpi	r24, 0x2C	; 44
    169a:	28 f4       	brcc	.+10     	; 0x16a6 <vfprintf+0x9a>
    169c:	80 32       	cpi	r24, 0x20	; 32
    169e:	51 f0       	breq	.+20     	; 0x16b4 <vfprintf+0xa8>
    16a0:	83 32       	cpi	r24, 0x23	; 35
    16a2:	71 f4       	brne	.+28     	; 0x16c0 <vfprintf+0xb4>
    16a4:	0b c0       	rjmp	.+22     	; 0x16bc <vfprintf+0xb0>
    16a6:	8d 32       	cpi	r24, 0x2D	; 45
    16a8:	39 f0       	breq	.+14     	; 0x16b8 <vfprintf+0xac>
    16aa:	80 33       	cpi	r24, 0x30	; 48
    16ac:	49 f4       	brne	.+18     	; 0x16c0 <vfprintf+0xb4>
    16ae:	21 60       	ori	r18, 0x01	; 1
    16b0:	2c c0       	rjmp	.+88     	; 0x170a <vfprintf+0xfe>
    16b2:	22 60       	ori	r18, 0x02	; 2
    16b4:	24 60       	ori	r18, 0x04	; 4
    16b6:	29 c0       	rjmp	.+82     	; 0x170a <vfprintf+0xfe>
    16b8:	28 60       	ori	r18, 0x08	; 8
    16ba:	27 c0       	rjmp	.+78     	; 0x170a <vfprintf+0xfe>
    16bc:	20 61       	ori	r18, 0x10	; 16
    16be:	25 c0       	rjmp	.+74     	; 0x170a <vfprintf+0xfe>
    16c0:	27 fd       	sbrc	r18, 7
    16c2:	2c c0       	rjmp	.+88     	; 0x171c <vfprintf+0x110>
    16c4:	38 2f       	mov	r19, r24
    16c6:	30 53       	subi	r19, 0x30	; 48
    16c8:	3a 30       	cpi	r19, 0x0A	; 10
    16ca:	98 f4       	brcc	.+38     	; 0x16f2 <vfprintf+0xe6>
    16cc:	26 ff       	sbrs	r18, 6
    16ce:	08 c0       	rjmp	.+16     	; 0x16e0 <vfprintf+0xd4>
    16d0:	8e 2d       	mov	r24, r14
    16d2:	88 0f       	add	r24, r24
    16d4:	e8 2e       	mov	r14, r24
    16d6:	ee 0c       	add	r14, r14
    16d8:	ee 0c       	add	r14, r14
    16da:	e8 0e       	add	r14, r24
    16dc:	e3 0e       	add	r14, r19
    16de:	15 c0       	rjmp	.+42     	; 0x170a <vfprintf+0xfe>
    16e0:	8f 2d       	mov	r24, r15
    16e2:	88 0f       	add	r24, r24
    16e4:	f8 2e       	mov	r15, r24
    16e6:	ff 0c       	add	r15, r15
    16e8:	ff 0c       	add	r15, r15
    16ea:	f8 0e       	add	r15, r24
    16ec:	f3 0e       	add	r15, r19
    16ee:	20 62       	ori	r18, 0x20	; 32
    16f0:	0c c0       	rjmp	.+24     	; 0x170a <vfprintf+0xfe>
    16f2:	8e 32       	cpi	r24, 0x2E	; 46
    16f4:	21 f4       	brne	.+8      	; 0x16fe <vfprintf+0xf2>
    16f6:	26 fd       	sbrc	r18, 6
    16f8:	6c c1       	rjmp	.+728    	; 0x19d2 <vfprintf+0x3c6>
    16fa:	20 64       	ori	r18, 0x40	; 64
    16fc:	06 c0       	rjmp	.+12     	; 0x170a <vfprintf+0xfe>
    16fe:	8c 36       	cpi	r24, 0x6C	; 108
    1700:	11 f4       	brne	.+4      	; 0x1706 <vfprintf+0xfa>
    1702:	20 68       	ori	r18, 0x80	; 128
    1704:	02 c0       	rjmp	.+4      	; 0x170a <vfprintf+0xfe>
    1706:	88 36       	cpi	r24, 0x68	; 104
    1708:	49 f4       	brne	.+18     	; 0x171c <vfprintf+0x110>
    170a:	f1 01       	movw	r30, r2
    170c:	93 fd       	sbrc	r25, 3
    170e:	85 91       	lpm	r24, Z+
    1710:	93 ff       	sbrs	r25, 3
    1712:	81 91       	ld	r24, Z+
    1714:	1f 01       	movw	r2, r30
    1716:	88 23       	and	r24, r24
    1718:	09 f0       	breq	.+2      	; 0x171c <vfprintf+0x110>
    171a:	ba cf       	rjmp	.-140    	; 0x1690 <vfprintf+0x84>
    171c:	98 2f       	mov	r25, r24
    171e:	95 54       	subi	r25, 0x45	; 69
    1720:	93 30       	cpi	r25, 0x03	; 3
    1722:	18 f0       	brcs	.+6      	; 0x172a <vfprintf+0x11e>
    1724:	90 52       	subi	r25, 0x20	; 32
    1726:	93 30       	cpi	r25, 0x03	; 3
    1728:	28 f4       	brcc	.+10     	; 0x1734 <vfprintf+0x128>
    172a:	0c 5f       	subi	r16, 0xFC	; 252
    172c:	1f 4f       	sbci	r17, 0xFF	; 255
    172e:	ff e3       	ldi	r31, 0x3F	; 63
    1730:	f9 83       	std	Y+1, r31	; 0x01
    1732:	0d c0       	rjmp	.+26     	; 0x174e <vfprintf+0x142>
    1734:	83 36       	cpi	r24, 0x63	; 99
    1736:	31 f0       	breq	.+12     	; 0x1744 <vfprintf+0x138>
    1738:	83 37       	cpi	r24, 0x73	; 115
    173a:	71 f0       	breq	.+28     	; 0x1758 <vfprintf+0x14c>
    173c:	83 35       	cpi	r24, 0x53	; 83
    173e:	09 f0       	breq	.+2      	; 0x1742 <vfprintf+0x136>
    1740:	5c c0       	rjmp	.+184    	; 0x17fa <vfprintf+0x1ee>
    1742:	21 c0       	rjmp	.+66     	; 0x1786 <vfprintf+0x17a>
    1744:	f8 01       	movw	r30, r16
    1746:	80 81       	ld	r24, Z
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	0e 5f       	subi	r16, 0xFE	; 254
    174c:	1f 4f       	sbci	r17, 0xFF	; 255
    174e:	42 01       	movw	r8, r4
    1750:	71 e0       	ldi	r23, 0x01	; 1
    1752:	a7 2e       	mov	r10, r23
    1754:	b1 2c       	mov	r11, r1
    1756:	15 c0       	rjmp	.+42     	; 0x1782 <vfprintf+0x176>
    1758:	62 e0       	ldi	r22, 0x02	; 2
    175a:	66 2e       	mov	r6, r22
    175c:	71 2c       	mov	r7, r1
    175e:	60 0e       	add	r6, r16
    1760:	71 1e       	adc	r7, r17
    1762:	f8 01       	movw	r30, r16
    1764:	80 80       	ld	r8, Z
    1766:	91 80       	ldd	r9, Z+1	; 0x01
    1768:	26 ff       	sbrs	r18, 6
    176a:	03 c0       	rjmp	.+6      	; 0x1772 <vfprintf+0x166>
    176c:	6e 2d       	mov	r22, r14
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <vfprintf+0x16a>
    1772:	6f ef       	ldi	r22, 0xFF	; 255
    1774:	7f ef       	ldi	r23, 0xFF	; 255
    1776:	c4 01       	movw	r24, r8
    1778:	2c 87       	std	Y+12, r18	; 0x0c
    177a:	56 d1       	rcall	.+684    	; 0x1a28 <strnlen>
    177c:	5c 01       	movw	r10, r24
    177e:	83 01       	movw	r16, r6
    1780:	2c 85       	ldd	r18, Y+12	; 0x0c
    1782:	2f 77       	andi	r18, 0x7F	; 127
    1784:	16 c0       	rjmp	.+44     	; 0x17b2 <vfprintf+0x1a6>
    1786:	52 e0       	ldi	r21, 0x02	; 2
    1788:	65 2e       	mov	r6, r21
    178a:	71 2c       	mov	r7, r1
    178c:	60 0e       	add	r6, r16
    178e:	71 1e       	adc	r7, r17
    1790:	f8 01       	movw	r30, r16
    1792:	80 80       	ld	r8, Z
    1794:	91 80       	ldd	r9, Z+1	; 0x01
    1796:	26 ff       	sbrs	r18, 6
    1798:	03 c0       	rjmp	.+6      	; 0x17a0 <vfprintf+0x194>
    179a:	6e 2d       	mov	r22, r14
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <vfprintf+0x198>
    17a0:	6f ef       	ldi	r22, 0xFF	; 255
    17a2:	7f ef       	ldi	r23, 0xFF	; 255
    17a4:	c4 01       	movw	r24, r8
    17a6:	2c 87       	std	Y+12, r18	; 0x0c
    17a8:	34 d1       	rcall	.+616    	; 0x1a12 <strnlen_P>
    17aa:	5c 01       	movw	r10, r24
    17ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    17ae:	20 68       	ori	r18, 0x80	; 128
    17b0:	83 01       	movw	r16, r6
    17b2:	23 fd       	sbrc	r18, 3
    17b4:	1e c0       	rjmp	.+60     	; 0x17f2 <vfprintf+0x1e6>
    17b6:	07 c0       	rjmp	.+14     	; 0x17c6 <vfprintf+0x1ba>
    17b8:	80 e2       	ldi	r24, 0x20	; 32
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	b6 01       	movw	r22, r12
    17be:	2c 87       	std	Y+12, r18	; 0x0c
    17c0:	3e d1       	rcall	.+636    	; 0x1a3e <fputc>
    17c2:	fa 94       	dec	r15
    17c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    17c6:	8f 2d       	mov	r24, r15
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a8 16       	cp	r10, r24
    17cc:	b9 06       	cpc	r11, r25
    17ce:	a0 f3       	brcs	.-24     	; 0x17b8 <vfprintf+0x1ac>
    17d0:	10 c0       	rjmp	.+32     	; 0x17f2 <vfprintf+0x1e6>
    17d2:	f4 01       	movw	r30, r8
    17d4:	27 fd       	sbrc	r18, 7
    17d6:	85 91       	lpm	r24, Z+
    17d8:	27 ff       	sbrs	r18, 7
    17da:	81 91       	ld	r24, Z+
    17dc:	4f 01       	movw	r8, r30
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	b6 01       	movw	r22, r12
    17e2:	2c 87       	std	Y+12, r18	; 0x0c
    17e4:	2c d1       	rcall	.+600    	; 0x1a3e <fputc>
    17e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    17e8:	f1 10       	cpse	r15, r1
    17ea:	fa 94       	dec	r15
    17ec:	08 94       	sec
    17ee:	a1 08       	sbc	r10, r1
    17f0:	b1 08       	sbc	r11, r1
    17f2:	a1 14       	cp	r10, r1
    17f4:	b1 04       	cpc	r11, r1
    17f6:	69 f7       	brne	.-38     	; 0x17d2 <vfprintf+0x1c6>
    17f8:	e9 c0       	rjmp	.+466    	; 0x19cc <vfprintf+0x3c0>
    17fa:	84 36       	cpi	r24, 0x64	; 100
    17fc:	11 f0       	breq	.+4      	; 0x1802 <vfprintf+0x1f6>
    17fe:	89 36       	cpi	r24, 0x69	; 105
    1800:	41 f5       	brne	.+80     	; 0x1852 <vfprintf+0x246>
    1802:	27 ff       	sbrs	r18, 7
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <vfprintf+0x20a>
    1806:	f8 01       	movw	r30, r16
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	0c 5f       	subi	r16, 0xFC	; 252
    1812:	1f 4f       	sbci	r17, 0xFF	; 255
    1814:	09 c0       	rjmp	.+18     	; 0x1828 <vfprintf+0x21c>
    1816:	f8 01       	movw	r30, r16
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	88 27       	eor	r24, r24
    181e:	77 fd       	sbrc	r23, 7
    1820:	80 95       	com	r24
    1822:	98 2f       	mov	r25, r24
    1824:	0e 5f       	subi	r16, 0xFE	; 254
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	4f e6       	ldi	r20, 0x6F	; 111
    182a:	b4 2e       	mov	r11, r20
    182c:	b2 22       	and	r11, r18
    182e:	97 ff       	sbrs	r25, 7
    1830:	09 c0       	rjmp	.+18     	; 0x1844 <vfprintf+0x238>
    1832:	90 95       	com	r25
    1834:	80 95       	com	r24
    1836:	70 95       	com	r23
    1838:	61 95       	neg	r22
    183a:	7f 4f       	sbci	r23, 0xFF	; 255
    183c:	8f 4f       	sbci	r24, 0xFF	; 255
    183e:	9f 4f       	sbci	r25, 0xFF	; 255
    1840:	f0 e8       	ldi	r31, 0x80	; 128
    1842:	bf 2a       	or	r11, r31
    1844:	a2 01       	movw	r20, r4
    1846:	2a e0       	ldi	r18, 0x0A	; 10
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	25 d1       	rcall	.+586    	; 0x1a96 <__ultoa_invert>
    184c:	78 2e       	mov	r7, r24
    184e:	74 18       	sub	r7, r4
    1850:	44 c0       	rjmp	.+136    	; 0x18da <vfprintf+0x2ce>
    1852:	85 37       	cpi	r24, 0x75	; 117
    1854:	31 f4       	brne	.+12     	; 0x1862 <vfprintf+0x256>
    1856:	3f ee       	ldi	r19, 0xEF	; 239
    1858:	b3 2e       	mov	r11, r19
    185a:	b2 22       	and	r11, r18
    185c:	2a e0       	ldi	r18, 0x0A	; 10
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	25 c0       	rjmp	.+74     	; 0x18ac <vfprintf+0x2a0>
    1862:	99 ef       	ldi	r25, 0xF9	; 249
    1864:	b9 2e       	mov	r11, r25
    1866:	b2 22       	and	r11, r18
    1868:	8f 36       	cpi	r24, 0x6F	; 111
    186a:	c1 f0       	breq	.+48     	; 0x189c <vfprintf+0x290>
    186c:	80 37       	cpi	r24, 0x70	; 112
    186e:	20 f4       	brcc	.+8      	; 0x1878 <vfprintf+0x26c>
    1870:	88 35       	cpi	r24, 0x58	; 88
    1872:	09 f0       	breq	.+2      	; 0x1876 <vfprintf+0x26a>
    1874:	ae c0       	rjmp	.+348    	; 0x19d2 <vfprintf+0x3c6>
    1876:	0d c0       	rjmp	.+26     	; 0x1892 <vfprintf+0x286>
    1878:	80 37       	cpi	r24, 0x70	; 112
    187a:	21 f0       	breq	.+8      	; 0x1884 <vfprintf+0x278>
    187c:	88 37       	cpi	r24, 0x78	; 120
    187e:	09 f0       	breq	.+2      	; 0x1882 <vfprintf+0x276>
    1880:	a8 c0       	rjmp	.+336    	; 0x19d2 <vfprintf+0x3c6>
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <vfprintf+0x27c>
    1884:	20 e1       	ldi	r18, 0x10	; 16
    1886:	b2 2a       	or	r11, r18
    1888:	b4 fe       	sbrs	r11, 4
    188a:	0b c0       	rjmp	.+22     	; 0x18a2 <vfprintf+0x296>
    188c:	84 e0       	ldi	r24, 0x04	; 4
    188e:	b8 2a       	or	r11, r24
    1890:	08 c0       	rjmp	.+16     	; 0x18a2 <vfprintf+0x296>
    1892:	b4 fe       	sbrs	r11, 4
    1894:	09 c0       	rjmp	.+18     	; 0x18a8 <vfprintf+0x29c>
    1896:	e6 e0       	ldi	r30, 0x06	; 6
    1898:	be 2a       	or	r11, r30
    189a:	06 c0       	rjmp	.+12     	; 0x18a8 <vfprintf+0x29c>
    189c:	28 e0       	ldi	r18, 0x08	; 8
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	05 c0       	rjmp	.+10     	; 0x18ac <vfprintf+0x2a0>
    18a2:	20 e1       	ldi	r18, 0x10	; 16
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <vfprintf+0x2a0>
    18a8:	20 e1       	ldi	r18, 0x10	; 16
    18aa:	32 e0       	ldi	r19, 0x02	; 2
    18ac:	b7 fe       	sbrs	r11, 7
    18ae:	08 c0       	rjmp	.+16     	; 0x18c0 <vfprintf+0x2b4>
    18b0:	f8 01       	movw	r30, r16
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	0c 5f       	subi	r16, 0xFC	; 252
    18bc:	1f 4f       	sbci	r17, 0xFF	; 255
    18be:	07 c0       	rjmp	.+14     	; 0x18ce <vfprintf+0x2c2>
    18c0:	f8 01       	movw	r30, r16
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 5f       	subi	r16, 0xFE	; 254
    18cc:	1f 4f       	sbci	r17, 0xFF	; 255
    18ce:	a2 01       	movw	r20, r4
    18d0:	e2 d0       	rcall	.+452    	; 0x1a96 <__ultoa_invert>
    18d2:	78 2e       	mov	r7, r24
    18d4:	74 18       	sub	r7, r4
    18d6:	ff e7       	ldi	r31, 0x7F	; 127
    18d8:	bf 22       	and	r11, r31
    18da:	b6 fe       	sbrs	r11, 6
    18dc:	0b c0       	rjmp	.+22     	; 0x18f4 <vfprintf+0x2e8>
    18de:	2e ef       	ldi	r18, 0xFE	; 254
    18e0:	b2 22       	and	r11, r18
    18e2:	7e 14       	cp	r7, r14
    18e4:	38 f4       	brcc	.+14     	; 0x18f4 <vfprintf+0x2e8>
    18e6:	b4 fe       	sbrs	r11, 4
    18e8:	07 c0       	rjmp	.+14     	; 0x18f8 <vfprintf+0x2ec>
    18ea:	b2 fc       	sbrc	r11, 2
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <vfprintf+0x2ec>
    18ee:	8f ee       	ldi	r24, 0xEF	; 239
    18f0:	b8 22       	and	r11, r24
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <vfprintf+0x2ec>
    18f4:	a7 2c       	mov	r10, r7
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <vfprintf+0x2ee>
    18f8:	ae 2c       	mov	r10, r14
    18fa:	8b 2d       	mov	r24, r11
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	b4 fe       	sbrs	r11, 4
    1900:	0d c0       	rjmp	.+26     	; 0x191c <vfprintf+0x310>
    1902:	fe 01       	movw	r30, r28
    1904:	e7 0d       	add	r30, r7
    1906:	f1 1d       	adc	r31, r1
    1908:	20 81       	ld	r18, Z
    190a:	20 33       	cpi	r18, 0x30	; 48
    190c:	19 f4       	brne	.+6      	; 0x1914 <vfprintf+0x308>
    190e:	e9 ee       	ldi	r30, 0xE9	; 233
    1910:	be 22       	and	r11, r30
    1912:	09 c0       	rjmp	.+18     	; 0x1926 <vfprintf+0x31a>
    1914:	a3 94       	inc	r10
    1916:	b2 fe       	sbrs	r11, 2
    1918:	06 c0       	rjmp	.+12     	; 0x1926 <vfprintf+0x31a>
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <vfprintf+0x318>
    191c:	86 78       	andi	r24, 0x86	; 134
    191e:	90 70       	andi	r25, 0x00	; 0
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	09 f0       	breq	.+2      	; 0x1926 <vfprintf+0x31a>
    1924:	a3 94       	inc	r10
    1926:	8b 2c       	mov	r8, r11
    1928:	99 24       	eor	r9, r9
    192a:	b3 fc       	sbrc	r11, 3
    192c:	13 c0       	rjmp	.+38     	; 0x1954 <vfprintf+0x348>
    192e:	b0 fe       	sbrs	r11, 0
    1930:	0e c0       	rjmp	.+28     	; 0x194e <vfprintf+0x342>
    1932:	af 14       	cp	r10, r15
    1934:	28 f4       	brcc	.+10     	; 0x1940 <vfprintf+0x334>
    1936:	e7 2c       	mov	r14, r7
    1938:	ef 0c       	add	r14, r15
    193a:	ea 18       	sub	r14, r10
    193c:	af 2c       	mov	r10, r15
    193e:	07 c0       	rjmp	.+14     	; 0x194e <vfprintf+0x342>
    1940:	e7 2c       	mov	r14, r7
    1942:	05 c0       	rjmp	.+10     	; 0x194e <vfprintf+0x342>
    1944:	80 e2       	ldi	r24, 0x20	; 32
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	b6 01       	movw	r22, r12
    194a:	79 d0       	rcall	.+242    	; 0x1a3e <fputc>
    194c:	a3 94       	inc	r10
    194e:	af 14       	cp	r10, r15
    1950:	c8 f3       	brcs	.-14     	; 0x1944 <vfprintf+0x338>
    1952:	04 c0       	rjmp	.+8      	; 0x195c <vfprintf+0x350>
    1954:	af 14       	cp	r10, r15
    1956:	10 f4       	brcc	.+4      	; 0x195c <vfprintf+0x350>
    1958:	fa 18       	sub	r15, r10
    195a:	01 c0       	rjmp	.+2      	; 0x195e <vfprintf+0x352>
    195c:	ff 24       	eor	r15, r15
    195e:	84 fe       	sbrs	r8, 4
    1960:	0e c0       	rjmp	.+28     	; 0x197e <vfprintf+0x372>
    1962:	80 e3       	ldi	r24, 0x30	; 48
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	b6 01       	movw	r22, r12
    1968:	6a d0       	rcall	.+212    	; 0x1a3e <fputc>
    196a:	82 fe       	sbrs	r8, 2
    196c:	1d c0       	rjmp	.+58     	; 0x19a8 <vfprintf+0x39c>
    196e:	81 fe       	sbrs	r8, 1
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <vfprintf+0x36c>
    1972:	88 e5       	ldi	r24, 0x58	; 88
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	10 c0       	rjmp	.+32     	; 0x1998 <vfprintf+0x38c>
    1978:	88 e7       	ldi	r24, 0x78	; 120
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	0d c0       	rjmp	.+26     	; 0x1998 <vfprintf+0x38c>
    197e:	c4 01       	movw	r24, r8
    1980:	86 78       	andi	r24, 0x86	; 134
    1982:	90 70       	andi	r25, 0x00	; 0
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	81 f0       	breq	.+32     	; 0x19a8 <vfprintf+0x39c>
    1988:	81 fc       	sbrc	r8, 1
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <vfprintf+0x384>
    198c:	80 e2       	ldi	r24, 0x20	; 32
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <vfprintf+0x386>
    1990:	8b e2       	ldi	r24, 0x2B	; 43
    1992:	b7 fc       	sbrc	r11, 7
    1994:	8d e2       	ldi	r24, 0x2D	; 45
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	b6 01       	movw	r22, r12
    199a:	51 d0       	rcall	.+162    	; 0x1a3e <fputc>
    199c:	05 c0       	rjmp	.+10     	; 0x19a8 <vfprintf+0x39c>
    199e:	80 e3       	ldi	r24, 0x30	; 48
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	b6 01       	movw	r22, r12
    19a4:	4c d0       	rcall	.+152    	; 0x1a3e <fputc>
    19a6:	ea 94       	dec	r14
    19a8:	7e 14       	cp	r7, r14
    19aa:	c8 f3       	brcs	.-14     	; 0x199e <vfprintf+0x392>
    19ac:	7a 94       	dec	r7
    19ae:	f2 01       	movw	r30, r4
    19b0:	e7 0d       	add	r30, r7
    19b2:	f1 1d       	adc	r31, r1
    19b4:	80 81       	ld	r24, Z
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	b6 01       	movw	r22, r12
    19ba:	41 d0       	rcall	.+130    	; 0x1a3e <fputc>
    19bc:	77 20       	and	r7, r7
    19be:	b1 f7       	brne	.-20     	; 0x19ac <vfprintf+0x3a0>
    19c0:	05 c0       	rjmp	.+10     	; 0x19cc <vfprintf+0x3c0>
    19c2:	80 e2       	ldi	r24, 0x20	; 32
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	b6 01       	movw	r22, r12
    19c8:	3a d0       	rcall	.+116    	; 0x1a3e <fputc>
    19ca:	fa 94       	dec	r15
    19cc:	ff 20       	and	r15, r15
    19ce:	c9 f7       	brne	.-14     	; 0x19c2 <vfprintf+0x3b6>
    19d0:	44 ce       	rjmp	.-888    	; 0x165a <vfprintf+0x4e>
    19d2:	f6 01       	movw	r30, r12
    19d4:	26 81       	ldd	r18, Z+6	; 0x06
    19d6:	37 81       	ldd	r19, Z+7	; 0x07
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <vfprintf+0x3d2>
    19da:	2f ef       	ldi	r18, 0xFF	; 255
    19dc:	3f ef       	ldi	r19, 0xFF	; 255
    19de:	c9 01       	movw	r24, r18
    19e0:	2c 96       	adiw	r28, 0x0c	; 12
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	ff 90       	pop	r15
    19f6:	ef 90       	pop	r14
    19f8:	df 90       	pop	r13
    19fa:	cf 90       	pop	r12
    19fc:	bf 90       	pop	r11
    19fe:	af 90       	pop	r10
    1a00:	9f 90       	pop	r9
    1a02:	8f 90       	pop	r8
    1a04:	7f 90       	pop	r7
    1a06:	6f 90       	pop	r6
    1a08:	5f 90       	pop	r5
    1a0a:	4f 90       	pop	r4
    1a0c:	3f 90       	pop	r3
    1a0e:	2f 90       	pop	r2
    1a10:	08 95       	ret

00001a12 <strnlen_P>:
    1a12:	fc 01       	movw	r30, r24
    1a14:	05 90       	lpm	r0, Z+
    1a16:	61 50       	subi	r22, 0x01	; 1
    1a18:	70 40       	sbci	r23, 0x00	; 0
    1a1a:	01 10       	cpse	r0, r1
    1a1c:	d8 f7       	brcc	.-10     	; 0x1a14 <strnlen_P+0x2>
    1a1e:	80 95       	com	r24
    1a20:	90 95       	com	r25
    1a22:	8e 0f       	add	r24, r30
    1a24:	9f 1f       	adc	r25, r31
    1a26:	08 95       	ret

00001a28 <strnlen>:
    1a28:	fc 01       	movw	r30, r24
    1a2a:	61 50       	subi	r22, 0x01	; 1
    1a2c:	70 40       	sbci	r23, 0x00	; 0
    1a2e:	01 90       	ld	r0, Z+
    1a30:	01 10       	cpse	r0, r1
    1a32:	d8 f7       	brcc	.-10     	; 0x1a2a <strnlen+0x2>
    1a34:	80 95       	com	r24
    1a36:	90 95       	com	r25
    1a38:	8e 0f       	add	r24, r30
    1a3a:	9f 1f       	adc	r25, r31
    1a3c:	08 95       	ret

00001a3e <fputc>:
    1a3e:	0f 93       	push	r16
    1a40:	1f 93       	push	r17
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	8c 01       	movw	r16, r24
    1a48:	eb 01       	movw	r28, r22
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	81 ff       	sbrs	r24, 1
    1a4e:	1b c0       	rjmp	.+54     	; 0x1a86 <fputc+0x48>
    1a50:	82 ff       	sbrs	r24, 2
    1a52:	0d c0       	rjmp	.+26     	; 0x1a6e <fputc+0x30>
    1a54:	2e 81       	ldd	r18, Y+6	; 0x06
    1a56:	3f 81       	ldd	r19, Y+7	; 0x07
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5c:	28 17       	cp	r18, r24
    1a5e:	39 07       	cpc	r19, r25
    1a60:	64 f4       	brge	.+24     	; 0x1a7a <fputc+0x3c>
    1a62:	e8 81       	ld	r30, Y
    1a64:	f9 81       	ldd	r31, Y+1	; 0x01
    1a66:	01 93       	st	Z+, r16
    1a68:	f9 83       	std	Y+1, r31	; 0x01
    1a6a:	e8 83       	st	Y, r30
    1a6c:	06 c0       	rjmp	.+12     	; 0x1a7a <fputc+0x3c>
    1a6e:	e8 85       	ldd	r30, Y+8	; 0x08
    1a70:	f9 85       	ldd	r31, Y+9	; 0x09
    1a72:	80 2f       	mov	r24, r16
    1a74:	09 95       	icall
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	31 f4       	brne	.+12     	; 0x1a86 <fputc+0x48>
    1a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	9f 83       	std	Y+7, r25	; 0x07
    1a82:	8e 83       	std	Y+6, r24	; 0x06
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <fputc+0x4c>
    1a86:	0f ef       	ldi	r16, 0xFF	; 255
    1a88:	1f ef       	ldi	r17, 0xFF	; 255
    1a8a:	c8 01       	movw	r24, r16
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	08 95       	ret

00001a96 <__ultoa_invert>:
    1a96:	fa 01       	movw	r30, r20
    1a98:	aa 27       	eor	r26, r26
    1a9a:	28 30       	cpi	r18, 0x08	; 8
    1a9c:	51 f1       	breq	.+84     	; 0x1af2 <__ultoa_invert+0x5c>
    1a9e:	20 31       	cpi	r18, 0x10	; 16
    1aa0:	81 f1       	breq	.+96     	; 0x1b02 <__ultoa_invert+0x6c>
    1aa2:	e8 94       	clt
    1aa4:	6f 93       	push	r22
    1aa6:	6e 7f       	andi	r22, 0xFE	; 254
    1aa8:	6e 5f       	subi	r22, 0xFE	; 254
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	8f 4f       	sbci	r24, 0xFF	; 255
    1aae:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab0:	af 4f       	sbci	r26, 0xFF	; 255
    1ab2:	b1 e0       	ldi	r27, 0x01	; 1
    1ab4:	3e d0       	rcall	.+124    	; 0x1b32 <__ultoa_invert+0x9c>
    1ab6:	b4 e0       	ldi	r27, 0x04	; 4
    1ab8:	3c d0       	rcall	.+120    	; 0x1b32 <__ultoa_invert+0x9c>
    1aba:	67 0f       	add	r22, r23
    1abc:	78 1f       	adc	r23, r24
    1abe:	89 1f       	adc	r24, r25
    1ac0:	9a 1f       	adc	r25, r26
    1ac2:	a1 1d       	adc	r26, r1
    1ac4:	68 0f       	add	r22, r24
    1ac6:	79 1f       	adc	r23, r25
    1ac8:	8a 1f       	adc	r24, r26
    1aca:	91 1d       	adc	r25, r1
    1acc:	a1 1d       	adc	r26, r1
    1ace:	6a 0f       	add	r22, r26
    1ad0:	71 1d       	adc	r23, r1
    1ad2:	81 1d       	adc	r24, r1
    1ad4:	91 1d       	adc	r25, r1
    1ad6:	a1 1d       	adc	r26, r1
    1ad8:	20 d0       	rcall	.+64     	; 0x1b1a <__ultoa_invert+0x84>
    1ada:	09 f4       	brne	.+2      	; 0x1ade <__ultoa_invert+0x48>
    1adc:	68 94       	set
    1ade:	3f 91       	pop	r19
    1ae0:	2a e0       	ldi	r18, 0x0A	; 10
    1ae2:	26 9f       	mul	r18, r22
    1ae4:	11 24       	eor	r1, r1
    1ae6:	30 19       	sub	r19, r0
    1ae8:	30 5d       	subi	r19, 0xD0	; 208
    1aea:	31 93       	st	Z+, r19
    1aec:	de f6       	brtc	.-74     	; 0x1aa4 <__ultoa_invert+0xe>
    1aee:	cf 01       	movw	r24, r30
    1af0:	08 95       	ret
    1af2:	46 2f       	mov	r20, r22
    1af4:	47 70       	andi	r20, 0x07	; 7
    1af6:	40 5d       	subi	r20, 0xD0	; 208
    1af8:	41 93       	st	Z+, r20
    1afa:	b3 e0       	ldi	r27, 0x03	; 3
    1afc:	0f d0       	rcall	.+30     	; 0x1b1c <__ultoa_invert+0x86>
    1afe:	c9 f7       	brne	.-14     	; 0x1af2 <__ultoa_invert+0x5c>
    1b00:	f6 cf       	rjmp	.-20     	; 0x1aee <__ultoa_invert+0x58>
    1b02:	46 2f       	mov	r20, r22
    1b04:	4f 70       	andi	r20, 0x0F	; 15
    1b06:	40 5d       	subi	r20, 0xD0	; 208
    1b08:	4a 33       	cpi	r20, 0x3A	; 58
    1b0a:	18 f0       	brcs	.+6      	; 0x1b12 <__ultoa_invert+0x7c>
    1b0c:	49 5d       	subi	r20, 0xD9	; 217
    1b0e:	31 fd       	sbrc	r19, 1
    1b10:	40 52       	subi	r20, 0x20	; 32
    1b12:	41 93       	st	Z+, r20
    1b14:	02 d0       	rcall	.+4      	; 0x1b1a <__ultoa_invert+0x84>
    1b16:	a9 f7       	brne	.-22     	; 0x1b02 <__ultoa_invert+0x6c>
    1b18:	ea cf       	rjmp	.-44     	; 0x1aee <__ultoa_invert+0x58>
    1b1a:	b4 e0       	ldi	r27, 0x04	; 4
    1b1c:	a6 95       	lsr	r26
    1b1e:	97 95       	ror	r25
    1b20:	87 95       	ror	r24
    1b22:	77 95       	ror	r23
    1b24:	67 95       	ror	r22
    1b26:	ba 95       	dec	r27
    1b28:	c9 f7       	brne	.-14     	; 0x1b1c <__ultoa_invert+0x86>
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	61 05       	cpc	r22, r1
    1b2e:	71 05       	cpc	r23, r1
    1b30:	08 95       	ret
    1b32:	9b 01       	movw	r18, r22
    1b34:	ac 01       	movw	r20, r24
    1b36:	0a 2e       	mov	r0, r26
    1b38:	06 94       	lsr	r0
    1b3a:	57 95       	ror	r21
    1b3c:	47 95       	ror	r20
    1b3e:	37 95       	ror	r19
    1b40:	27 95       	ror	r18
    1b42:	ba 95       	dec	r27
    1b44:	c9 f7       	brne	.-14     	; 0x1b38 <__ultoa_invert+0xa2>
    1b46:	62 0f       	add	r22, r18
    1b48:	73 1f       	adc	r23, r19
    1b4a:	84 1f       	adc	r24, r20
    1b4c:	95 1f       	adc	r25, r21
    1b4e:	a0 1d       	adc	r26, r0
    1b50:	08 95       	ret

00001b52 <_exit>:
    1b52:	f8 94       	cli

00001b54 <__stop_program>:
    1b54:	ff cf       	rjmp	.-2      	; 0x1b54 <__stop_program>
