
VirtualSerialHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00001ba2  00001c36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800130  00800130  00001c66  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ddb  00000000  00000000  00003f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000788  00000000  00000000  00004d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001150  00000000  00000000  000054db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cccc  00000000  00000000  0000662b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cba  00000000  00000000  000132f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000098eb  00000000  00000000  00015fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c70  00000000  00000000  0001f89c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004e7c  00000000  00000000  0002050c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007165  00000000  00000000  00025388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001eeb  00000000  00000000  0002c4ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a18  00000000  00000000  0002e3d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
       2:	00 00       	nop
       4:	31 c1       	rjmp	.+610    	; 0x268 <__bad_interrupt>
       6:	00 00       	nop
       8:	2f c1       	rjmp	.+606    	; 0x268 <__bad_interrupt>
       a:	00 00       	nop
       c:	2d c1       	rjmp	.+602    	; 0x268 <__bad_interrupt>
       e:	00 00       	nop
      10:	2b c1       	rjmp	.+598    	; 0x268 <__bad_interrupt>
      12:	00 00       	nop
      14:	29 c1       	rjmp	.+594    	; 0x268 <__bad_interrupt>
      16:	00 00       	nop
      18:	27 c1       	rjmp	.+590    	; 0x268 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	25 c1       	rjmp	.+586    	; 0x268 <__bad_interrupt>
      1e:	00 00       	nop
      20:	23 c1       	rjmp	.+582    	; 0x268 <__bad_interrupt>
      22:	00 00       	nop
      24:	21 c1       	rjmp	.+578    	; 0x268 <__bad_interrupt>
      26:	00 00       	nop
      28:	e0 c5       	rjmp	.+3008   	; 0xbea <__vector_10>
      2a:	00 00       	nop
      2c:	1d c1       	rjmp	.+570    	; 0x268 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1b c1       	rjmp	.+566    	; 0x268 <__bad_interrupt>
      32:	00 00       	nop
      34:	19 c1       	rjmp	.+562    	; 0x268 <__bad_interrupt>
      36:	00 00       	nop
      38:	17 c1       	rjmp	.+558    	; 0x268 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	15 c1       	rjmp	.+554    	; 0x268 <__bad_interrupt>
      3e:	00 00       	nop
      40:	13 c1       	rjmp	.+550    	; 0x268 <__bad_interrupt>
      42:	00 00       	nop
      44:	11 c1       	rjmp	.+546    	; 0x268 <__bad_interrupt>
      46:	00 00       	nop
      48:	0f c1       	rjmp	.+542    	; 0x268 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0d c1       	rjmp	.+538    	; 0x268 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0b c1       	rjmp	.+534    	; 0x268 <__bad_interrupt>
      52:	00 00       	nop
      54:	09 c1       	rjmp	.+530    	; 0x268 <__bad_interrupt>
      56:	00 00       	nop
      58:	07 c1       	rjmp	.+526    	; 0x268 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	05 c1       	rjmp	.+522    	; 0x268 <__bad_interrupt>
      5e:	00 00       	nop
      60:	03 c1       	rjmp	.+518    	; 0x268 <__bad_interrupt>
      62:	00 00       	nop
      64:	01 c1       	rjmp	.+514    	; 0x268 <__bad_interrupt>
      66:	00 00       	nop
      68:	ff c0       	rjmp	.+510    	; 0x268 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fd c0       	rjmp	.+506    	; 0x268 <__bad_interrupt>
      6e:	00 00       	nop
      70:	fb c0       	rjmp	.+502    	; 0x268 <__bad_interrupt>
      72:	00 00       	nop
      74:	f9 c0       	rjmp	.+498    	; 0x268 <__bad_interrupt>
      76:	00 00       	nop
      78:	f7 c0       	rjmp	.+494    	; 0x268 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f5 c0       	rjmp	.+490    	; 0x268 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f3 c0       	rjmp	.+486    	; 0x268 <__bad_interrupt>
      82:	00 00       	nop
      84:	f1 c0       	rjmp	.+482    	; 0x268 <__bad_interrupt>
      86:	00 00       	nop
      88:	ef c0       	rjmp	.+478    	; 0x268 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ed c0       	rjmp	.+474    	; 0x268 <__bad_interrupt>
      8e:	00 00       	nop
      90:	eb c0       	rjmp	.+470    	; 0x268 <__bad_interrupt>
      92:	00 00       	nop
      94:	e9 c0       	rjmp	.+466    	; 0x268 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4282>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4275>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4270>:
     11d:	43 44 43 20 44 65 76 69 63 65 20 45 6e 75 6d 65     CDC Device Enume
     12d:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000136 <__c.4268>:
     136:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     146:	76 69 63 65 20 4c 69 6e 65 20 45 6e 63 6f 64 69     vice Line Encodi
     156:	6e 67 2e 0d 0a 00                                   ng....

0000015c <__c.4266>:
     15c:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     16c:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     17c:	6f 6e 2e 0d 0a 00                                   on....

00000182 <__c.4264>:
     182:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     192:	4e 6f 74 20 61 20 56 61 6c 69 64 20 43 44 43 20     Not a Valid CDC 
     1a2:	43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d 0a 00     Class Device....

000001b2 <__c.4262>:
     1b2:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1c2:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1d2:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001df <__c.4255>:
     1df:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1ef:	68 65 64 2e 0d 0a 00                                hed....

000001f6 <__c.4250>:
     1f6:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     206:	0d 0a 00                                            ...

00000209 <__c.4237>:
     209:	1b 5b 33 36 6d 43 44 43 20 48 6f 73 74 20 44 65     .[36mCDC Host De
     219:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     229:	37 6d 00                                            7m.

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	d0 e2       	ldi	r29, 0x20	; 32
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61

00000238 <__do_copy_data>:
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	e2 ea       	ldi	r30, 0xA2	; 162
     240:	fb e1       	ldi	r31, 0x1B	; 27
     242:	00 e0       	ldi	r16, 0x00	; 0
     244:	0b bf       	out	0x3b, r16	; 59
     246:	02 c0       	rjmp	.+4      	; 0x24c <__do_copy_data+0x14>
     248:	07 90       	elpm	r0, Z+
     24a:	0d 92       	st	X+, r0
     24c:	a0 33       	cpi	r26, 0x30	; 48
     24e:	b1 07       	cpc	r27, r17
     250:	d9 f7       	brne	.-10     	; 0x248 <__do_copy_data+0x10>

00000252 <__do_clear_bss>:
     252:	11 e0       	ldi	r17, 0x01	; 1
     254:	a0 e3       	ldi	r26, 0x30	; 48
     256:	b1 e0       	ldi	r27, 0x01	; 1
     258:	01 c0       	rjmp	.+2      	; 0x25c <.do_clear_bss_start>

0000025a <.do_clear_bss_loop>:
     25a:	1d 92       	st	X+, r1

0000025c <.do_clear_bss_start>:
     25c:	a2 35       	cpi	r26, 0x52	; 82
     25e:	b1 07       	cpc	r27, r17
     260:	e1 f7       	brne	.-8      	; 0x25a <.do_clear_bss_loop>
     262:	4d d0       	rcall	.+154    	; 0x2fe <main>
     264:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <_exit>

00000268 <__bad_interrupt>:
     268:	cb ce       	rjmp	.-618    	; 0x0 <__vectors>

0000026a <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     26a:	9b b1       	in	r25, 0x0b	; 11
     26c:	9f 70       	andi	r25, 0x0F	; 15
     26e:	98 2b       	or	r25, r24
     270:	9b b9       	out	0x0b, r25	; 11
			}
     272:	08 95       	ret

00000274 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     274:	84 b7       	in	r24, 0x34	; 52
     276:	87 7f       	andi	r24, 0xF7	; 247
     278:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     27a:	28 e1       	ldi	r18, 0x18	; 24
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	20 93 60 00 	sts	0x0060, r18
     284:	10 92 60 00 	sts	0x0060, r1
     288:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	80 e8       	ldi	r24, 0x80	; 128
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	80 93 61 00 	sts	0x0061, r24
     296:	90 93 61 00 	sts	0x0061, r25
     29a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     29c:	83 e3       	ldi	r24, 0x33	; 51
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	90 93 cd 00 	sts	0x00CD, r25
     2a4:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2a8:	86 e0       	ldi	r24, 0x06	; 6
     2aa:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2ae:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2b2:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2b6:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2b8:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2ba:	8a b1       	in	r24, 0x0a	; 10
     2bc:	80 6f       	ori	r24, 0xF0	; 240
     2be:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2c0:	8b b1       	in	r24, 0x0b	; 11
     2c2:	8f 70       	andi	r24, 0x0F	; 15
     2c4:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2c6:	76 d4       	rcall	.+2284   	; 0xbb4 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <Serial_CreateStream>

000002d0 <CDCHost_Task>:
/** Task to manage an enumerated USB CDC device once connected, to print received data
 *  from the device to the serial port.
 */
void CDCHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     2d0:	80 91 3d 01 	lds	r24, 0x013D
     2d4:	8b 30       	cpi	r24, 0x0B	; 11
     2d6:	91 f4       	brne	.+36     	; 0x2fc <CDCHost_Task+0x2c>
	  return;

	if (CDC_Host_BytesReceived(&VirtualSerial_CDC_Interface))
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	0e 94 a6 09 	call	0x134c	; 0x134c <CDC_Host_BytesReceived>
     2e0:	00 97       	sbiw	r24, 0x00	; 0
     2e2:	61 f0       	breq	.+24     	; 0x2fc <CDCHost_Task+0x2c>
	{
		/* Echo received bytes from the attached device through the USART */
		int16_t ReceivedByte = CDC_Host_ReceiveByte(&VirtualSerial_CDC_Interface);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 da 09 	call	0x13b4	; 0x13b4 <CDC_Host_ReceiveByte>
		if (!(ReceivedByte < 0))
     2ec:	97 fd       	sbrc	r25, 7
     2ee:	06 c0       	rjmp	.+12     	; 0x2fc <CDCHost_Task+0x2c>
		  putchar(ReceivedByte);
     2f0:	60 91 4e 01 	lds	r22, 0x014E
     2f4:	70 91 4f 01 	lds	r23, 0x014F
     2f8:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <fputc>
     2fc:	08 95       	ret

000002fe <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     2fe:	ba df       	rcall	.-140    	; 0x274 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "CDC Host Demo running.\r\n" ESC_FG_WHITE));
     300:	89 e0       	ldi	r24, 0x09	; 9
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	0e 94 20 0b 	call	0x1640	; 0x1640 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     308:	80 e1       	ldi	r24, 0x10	; 16
     30a:	af df       	rcall	.-162    	; 0x26a <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     30c:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		CDCHost_Task();
     30e:	e0 df       	rcall	.-64     	; 0x2d0 <CDCHost_Task>

		CDC_Host_USBTask(&VirtualSerial_CDC_Interface);
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 46 0a 	call	0x148c	; 0x148c <CDC_Host_USBTask>
		USB_USBTask();
     318:	e3 d6       	rcall	.+3526   	; 0x10e0 <USB_USBTask>
     31a:	f9 cf       	rjmp	.-14     	; 0x30e <main+0x10>

0000031c <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     31c:	86 ef       	ldi	r24, 0xF6	; 246
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 20 0b 	call	0x1640	; 0x1640 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     324:	80 ea       	ldi	r24, 0xA0	; 160
}
     326:	a1 cf       	rjmp	.-190    	; 0x26a <LEDs_SetAllLEDs>

00000328 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     328:	8f ed       	ldi	r24, 0xDF	; 223
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0e 94 20 0b 	call	0x1640	; 0x1640 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     330:	80 e1       	ldi	r24, 0x10	; 16
}
     332:	9b cf       	rjmp	.-202    	; 0x26a <LEDs_SetAllLEDs>

00000334 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     334:	0f 93       	push	r16
     336:	1f 93       	push	r17
     338:	df 93       	push	r29
     33a:	cf 93       	push	r28
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	c2 50       	subi	r28, 0x02	; 2
     342:	d2 40       	sbci	r29, 0x02	; 2
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     34e:	80 ea       	ldi	r24, 0xA0	; 160
     350:	8c df       	rcall	.-232    	; 0x26a <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     352:	8e 01       	movw	r16, r28
     354:	0d 5f       	subi	r16, 0xFD	; 253
     356:	1f 4f       	sbci	r17, 0xFF	; 255
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	be 01       	movw	r22, r28
     35c:	6f 5f       	subi	r22, 0xFF	; 255
     35e:	7f 4f       	sbci	r23, 0xFF	; 255
     360:	a8 01       	movw	r20, r16
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	32 e0       	ldi	r19, 0x02	; 2
     366:	d4 d4       	rcall	.+2472   	; 0xd10 <USB_Host_GetDeviceConfigDescriptor>
     368:	88 23       	and	r24, r24
     36a:	19 f0       	breq	.+6      	; 0x372 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     36c:	82 eb       	ldi	r24, 0xB2	; 178
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	2c c0       	rjmp	.+88     	; 0x3ca <EVENT_USB_Host_DeviceEnumerationComplete+0x96>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (CDC_Host_ConfigurePipes(&VirtualSerial_CDC_Interface,
     372:	69 81       	ldd	r22, Y+1	; 0x01
     374:	7a 81       	ldd	r23, Y+2	; 0x02
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	a8 01       	movw	r20, r16
     37c:	f6 d6       	rcall	.+3564   	; 0x116a <CDC_Host_ConfigurePipes>
     37e:	88 23       	and	r24, r24
     380:	19 f0       	breq	.+6      	; 0x388 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
	                            ConfigDescriptorSize, ConfigDescriptorData) != CDC_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid CDC Class Device.\r\n"));
     382:	82 e8       	ldi	r24, 0x82	; 130
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	21 c0       	rjmp	.+66     	; 0x3ca <EVENT_USB_Host_DeviceEnumerationComplete+0x96>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	85 d6       	rcall	.+3338   	; 0x1096 <USB_Host_SetDeviceConfiguration>
     38c:	88 23       	and	r24, r24
     38e:	19 f0       	breq	.+6      	; 0x396 <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     390:	8c e5       	ldi	r24, 0x5C	; 92
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	1a c0       	rjmp	.+52     	; 0x3ca <EVENT_USB_Host_DeviceEnumerationComplete+0x96>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}
	
	VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
     396:	80 e8       	ldi	r24, 0x80	; 128
     398:	95 e2       	ldi	r25, 0x25	; 37
     39a:	a0 e0       	ldi	r26, 0x00	; 0
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	80 93 18 01 	sts	0x0118, r24
     3a2:	90 93 19 01 	sts	0x0119, r25
     3a6:	a0 93 1a 01 	sts	0x011A, r26
     3aa:	b0 93 1b 01 	sts	0x011B, r27
	VirtualSerial_CDC_Interface.State.LineEncoding.CharFormat  = CDC_LINEENCODING_OneStopBit;
     3ae:	10 92 1c 01 	sts	0x011C, r1
	VirtualSerial_CDC_Interface.State.LineEncoding.ParityType  = CDC_PARITY_None;
     3b2:	10 92 1d 01 	sts	0x011D, r1
	VirtualSerial_CDC_Interface.State.LineEncoding.DataBits    = 8;
     3b6:	88 e0       	ldi	r24, 0x08	; 8
     3b8:	80 93 1e 01 	sts	0x011E, r24
	
	if (CDC_Host_SetLineEncoding(&VirtualSerial_CDC_Interface))
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	ab d7       	rcall	.+3926   	; 0x1318 <CDC_Host_SetLineEncoding>
     3c2:	88 23       	and	r24, r24
     3c4:	31 f0       	breq	.+12     	; 0x3d2 <EVENT_USB_Host_DeviceEnumerationComplete+0x9e>
	{
		puts_P(PSTR("Error Setting Device Line Encoding.\r\n"));
     3c6:	86 e3       	ldi	r24, 0x36	; 54
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	0e 94 20 0b 	call	0x1640	; 0x1640 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3ce:	80 e9       	ldi	r24, 0x90	; 144
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <EVENT_USB_Host_DeviceEnumerationComplete+0xa8>
		return;	
	}

	puts_P(PSTR("CDC Device Enumerated.\r\n"));
     3d2:	8d e1       	ldi	r24, 0x1D	; 29
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 20 0b 	call	0x1640	; 0x1640 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3da:	80 e6       	ldi	r24, 0x60	; 96
     3dc:	46 df       	rcall	.-372    	; 0x26a <LEDs_SetAllLEDs>
}
     3de:	ce 5f       	subi	r28, 0xFE	; 254
     3e0:	dd 4f       	sbci	r29, 0xFD	; 253
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	cf 91       	pop	r28
     3ee:	df 91       	pop	r29
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	08 95       	ret

000003f6 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     3f6:	df 93       	push	r29
     3f8:	cf 93       	push	r28
     3fa:	0f 92       	push	r0
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     400:	89 83       	std	Y+1, r24	; 0x01
     402:	70 d3       	rcall	.+1760   	; 0xae4 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     404:	00 d0       	rcall	.+0      	; 0x406 <EVENT_USB_Host_HostError+0x10>
     406:	00 d0       	rcall	.+0      	; 0x408 <EVENT_USB_Host_HostError+0x12>
     408:	ed b7       	in	r30, 0x3d	; 61
     40a:	fe b7       	in	r31, 0x3e	; 62
     40c:	31 96       	adiw	r30, 0x01	; 1
     40e:	2e ee       	ldi	r18, 0xEE	; 238
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	ad b7       	in	r26, 0x3d	; 61
     414:	be b7       	in	r27, 0x3e	; 62
     416:	12 96       	adiw	r26, 0x02	; 2
     418:	3c 93       	st	X, r19
     41a:	2e 93       	st	-X, r18
     41c:	11 97       	sbiw	r26, 0x01	; 1
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	82 83       	std	Z+2, r24	; 0x02
     422:	13 82       	std	Z+3, r1	; 0x03
     424:	0e 94 01 0b 	call	0x1602	; 0x1602 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	80 e9       	ldi	r24, 0x90	; 144
     432:	1b df       	rcall	.-458    	; 0x26a <LEDs_SetAllLEDs>
     434:	ff cf       	rjmp	.-2      	; 0x434 <EVENT_USB_Host_HostError+0x3e>

00000436 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     436:	90 91 3d 01 	lds	r25, 0x013D
     43a:	2d b7       	in	r18, 0x3d	; 61
     43c:	3e b7       	in	r19, 0x3e	; 62
     43e:	28 50       	subi	r18, 0x08	; 8
     440:	30 40       	sbci	r19, 0x00	; 0
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	3e bf       	out	0x3e, r19	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	2d bf       	out	0x3d, r18	; 61
     44c:	ed b7       	in	r30, 0x3d	; 61
     44e:	fe b7       	in	r31, 0x3e	; 62
     450:	31 96       	adiw	r30, 0x01	; 1
     452:	28 e9       	ldi	r18, 0x98	; 152
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	ad b7       	in	r26, 0x3d	; 61
     458:	be b7       	in	r27, 0x3e	; 62
     45a:	12 96       	adiw	r26, 0x02	; 2
     45c:	3c 93       	st	X, r19
     45e:	2e 93       	st	-X, r18
     460:	11 97       	sbiw	r26, 0x01	; 1
     462:	82 83       	std	Z+2, r24	; 0x02
     464:	13 82       	std	Z+3, r1	; 0x03
     466:	64 83       	std	Z+4, r22	; 0x04
     468:	15 82       	std	Z+5, r1	; 0x05
     46a:	96 83       	std	Z+6, r25	; 0x06
     46c:	17 82       	std	Z+7, r1	; 0x07
     46e:	0e 94 01 0b 	call	0x1602	; 0x1602 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     472:	2d b7       	in	r18, 0x3d	; 61
     474:	3e b7       	in	r19, 0x3e	; 62
     476:	28 5f       	subi	r18, 0xF8	; 248
     478:	3f 4f       	sbci	r19, 0xFF	; 255
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	3e bf       	out	0x3e, r19	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	2d bf       	out	0x3d, r18	; 61
     484:	80 e9       	ldi	r24, 0x90	; 144
}
     486:	f1 ce       	rjmp	.-542    	; 0x26a <LEDs_SetAllLEDs>

00000488 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     488:	80 91 9e 00 	lds	r24, 0x009E
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	81 70       	andi	r24, 0x01	; 1
     490:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     492:	20 91 a0 00 	lds	r18, 0x00A0
     496:	2d 7f       	andi	r18, 0xFD	; 253
     498:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     49c:	20 91 9e 00 	lds	r18, 0x009E
     4a0:	22 60       	ori	r18, 0x02	; 2
     4a2:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     4a6:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     4aa:	21 fd       	sbrc	r18, 1
     4ac:	fc cf       	rjmp	.-8      	; 0x4a6 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     4ae:	20 91 9e 00 	lds	r18, 0x009E
     4b2:	21 60       	ori	r18, 0x01	; 1
     4b4:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     4b8:	10 92 33 01 	sts	0x0133, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     4bc:	20 91 a0 00 	lds	r18, 0x00A0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	20 72       	andi	r18, 0x20	; 32
     4c4:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     4c6:	40 91 a0 00 	lds	r20, 0x00A0
     4ca:	4f 7d       	andi	r20, 0xDF	; 223
     4cc:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     4d0:	40 91 9f 00 	lds	r20, 0x009F
     4d4:	4f 7d       	andi	r20, 0xDF	; 223
     4d6:	40 93 9f 00 	sts	0x009F, r20
     4da:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     4dc:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     4e0:	55 ff       	sbrs	r21, 5
     4e2:	0b c0       	rjmp	.+22     	; 0x4fa <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     4e4:	40 91 9f 00 	lds	r20, 0x009F
     4e8:	4f 7d       	andi	r20, 0xDF	; 223
     4ea:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     4ee:	40 91 9f 00 	lds	r20, 0x009F
     4f2:	4d 7f       	andi	r20, 0xFD	; 253
     4f4:	40 93 9f 00 	sts	0x009F, r20
     4f8:	08 c0       	rjmp	.+16     	; 0x50a <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fa:	ef ec       	ldi	r30, 0xCF	; 207
     4fc:	f7 e0       	ldi	r31, 0x07	; 7
     4fe:	31 97       	sbiw	r30, 0x01	; 1
     500:	f1 f7       	brne	.-4      	; 0x4fe <USB_Host_ResetDevice+0x76>
     502:	00 c0       	rjmp	.+0      	; 0x504 <USB_Host_ResetDevice+0x7c>
     504:	00 00       	nop
     506:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     508:	49 f7       	brne	.-46     	; 0x4dc <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     50a:	21 15       	cp	r18, r1
     50c:	31 05       	cpc	r19, r1
     50e:	29 f0       	breq	.+10     	; 0x51a <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     510:	20 91 a0 00 	lds	r18, 0x00A0
     514:	20 62       	ori	r18, 0x20	; 32
     516:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     51a:	00 97       	sbiw	r24, 0x00	; 0
     51c:	29 f4       	brne	.+10     	; 0x528 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     51e:	80 91 9e 00 	lds	r24, 0x009E
     522:	8e 7f       	andi	r24, 0xFE	; 254
     524:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     528:	80 91 a0 00 	lds	r24, 0x00A0
     52c:	82 60       	ori	r24, 0x02	; 2
     52e:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     532:	08 95       	ret

00000534 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     534:	40 91 9e 00 	lds	r20, 0x009E
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	41 70       	andi	r20, 0x01	; 1
     53c:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     53e:	20 91 a0 00 	lds	r18, 0x00A0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	20 72       	andi	r18, 0x20	; 32
     546:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     548:	90 91 a0 00 	lds	r25, 0x00A0
     54c:	9f 7d       	andi	r25, 0xDF	; 223
     54e:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     552:	90 91 9f 00 	lds	r25, 0x009F
     556:	9f 7d       	andi	r25, 0xDF	; 223
     558:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     55c:	90 91 9e 00 	lds	r25, 0x009E
     560:	91 60       	ori	r25, 0x01	; 1
     562:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     566:	26 c0       	rjmp	.+76     	; 0x5b4 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     568:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     56c:	95 ff       	sbrs	r25, 5
     56e:	06 c0       	rjmp	.+12     	; 0x57c <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     570:	90 91 9f 00 	lds	r25, 0x009F
     574:	9f 7d       	andi	r25, 0xDF	; 223
     576:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     57a:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     57c:	90 91 3d 01 	lds	r25, 0x013D
     580:	91 30       	cpi	r25, 0x01	; 1
     582:	d9 f0       	breq	.+54     	; 0x5ba <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     584:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     588:	94 ff       	sbrs	r25, 4
     58a:	09 c0       	rjmp	.+18     	; 0x59e <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     58c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     590:	80 91 a6 00 	lds	r24, 0x00A6
     594:	8f 7e       	andi	r24, 0xEF	; 239
     596:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     59a:	82 e0       	ldi	r24, 0x02	; 2

			break;
     59c:	0f c0       	rjmp	.+30     	; 0x5bc <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     59e:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     5a2:	91 ff       	sbrs	r25, 1
     5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     5a6:	80 91 a6 00 	lds	r24, 0x00A6
     5aa:	8d 7f       	andi	r24, 0xFD	; 253
     5ac:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     5b0:	83 e0       	ldi	r24, 0x03	; 3

			break;
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     5b4:	88 23       	and	r24, r24
     5b6:	c1 f6       	brne	.-80     	; 0x568 <USB_Host_WaitMS+0x34>
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     5ba:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     5bc:	41 15       	cp	r20, r1
     5be:	51 05       	cpc	r21, r1
     5c0:	29 f4       	brne	.+10     	; 0x5cc <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5c2:	90 91 9e 00 	lds	r25, 0x009E
     5c6:	9e 7f       	andi	r25, 0xFE	; 254
     5c8:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     5cc:	21 15       	cp	r18, r1
     5ce:	31 05       	cpc	r19, r1
     5d0:	29 f0       	breq	.+10     	; 0x5dc <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     5d2:	90 91 a0 00 	lds	r25, 0x00A0
     5d6:	90 62       	ori	r25, 0x20	; 32
     5d8:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     5dc:	08 95       	ret

000005de <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	df 93       	push	r29
     5e4:	cf 93       	push	r28
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	28 97       	sbiw	r28, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     5f6:	80 91 3d 01 	lds	r24, 0x013D
     5fa:	85 30       	cpi	r24, 0x05	; 5
     5fc:	09 f4       	brne	.+2      	; 0x600 <USB_Host_ProcessNextHostState+0x22>
     5fe:	99 c0       	rjmp	.+306    	; 0x732 <USB_Host_ProcessNextHostState+0x154>
     600:	86 30       	cpi	r24, 0x06	; 6
     602:	68 f4       	brcc	.+26     	; 0x61e <USB_Host_ProcessNextHostState+0x40>
     604:	82 30       	cpi	r24, 0x02	; 2
     606:	c1 f1       	breq	.+112    	; 0x678 <USB_Host_ProcessNextHostState+0x9a>
     608:	83 30       	cpi	r24, 0x03	; 3
     60a:	18 f4       	brcc	.+6      	; 0x612 <USB_Host_ProcessNextHostState+0x34>
     60c:	88 23       	and	r24, r24
     60e:	a1 f0       	breq	.+40     	; 0x638 <USB_Host_ProcessNextHostState+0x5a>
     610:	04 c1       	rjmp	.+520    	; 0x81a <USB_Host_ProcessNextHostState+0x23c>
     612:	83 30       	cpi	r24, 0x03	; 3
     614:	d9 f1       	breq	.+118    	; 0x68c <USB_Host_ProcessNextHostState+0xae>
     616:	84 30       	cpi	r24, 0x04	; 4
     618:	09 f0       	breq	.+2      	; 0x61c <USB_Host_ProcessNextHostState+0x3e>
     61a:	ff c0       	rjmp	.+510    	; 0x81a <USB_Host_ProcessNextHostState+0x23c>
     61c:	62 c0       	rjmp	.+196    	; 0x6e2 <USB_Host_ProcessNextHostState+0x104>
     61e:	87 30       	cpi	r24, 0x07	; 7
     620:	09 f4       	brne	.+2      	; 0x624 <USB_Host_ProcessNextHostState+0x46>
     622:	9e c0       	rjmp	.+316    	; 0x760 <USB_Host_ProcessNextHostState+0x182>
     624:	87 30       	cpi	r24, 0x07	; 7
     626:	08 f4       	brcc	.+2      	; 0x62a <USB_Host_ProcessNextHostState+0x4c>
     628:	8f c0       	rjmp	.+286    	; 0x748 <USB_Host_ProcessNextHostState+0x16a>
     62a:	88 30       	cpi	r24, 0x08	; 8
     62c:	09 f4       	brne	.+2      	; 0x630 <USB_Host_ProcessNextHostState+0x52>
     62e:	b8 c0       	rjmp	.+368    	; 0x7a0 <USB_Host_ProcessNextHostState+0x1c2>
     630:	89 30       	cpi	r24, 0x09	; 9
     632:	09 f0       	breq	.+2      	; 0x636 <USB_Host_ProcessNextHostState+0x58>
     634:	f2 c0       	rjmp	.+484    	; 0x81a <USB_Host_ProcessNextHostState+0x23c>
     636:	d9 c0       	rjmp	.+434    	; 0x7ea <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     638:	00 91 31 01 	lds	r16, 0x0131
     63c:	10 91 32 01 	lds	r17, 0x0132
     640:	01 15       	cp	r16, r1
     642:	11 05       	cpc	r17, r1
     644:	09 f4       	brne	.+2      	; 0x648 <USB_Host_ProcessNextHostState+0x6a>
     646:	e9 c0       	rjmp	.+466    	; 0x81a <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	74 df       	rcall	.-280    	; 0x534 <USB_Host_WaitMS>
     64c:	68 2f       	mov	r22, r24
     64e:	88 23       	and	r24, r24
     650:	31 f0       	breq	.+12     	; 0x65e <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     652:	80 91 30 01 	lds	r24, 0x0130
     656:	80 93 3d 01 	sts	0x013D, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     65a:	81 e0       	ldi	r24, 0x01	; 1
					break;
     65c:	d2 c0       	rjmp	.+420    	; 0x802 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     65e:	01 50       	subi	r16, 0x01	; 1
     660:	10 40       	sbci	r17, 0x00	; 0
     662:	10 93 32 01 	sts	0x0132, r17
     666:	00 93 31 01 	sts	0x0131, r16
     66a:	01 15       	cp	r16, r1
     66c:	11 05       	cpc	r17, r1
     66e:	09 f0       	breq	.+2      	; 0x672 <USB_Host_ProcessNextHostState+0x94>
     670:	d4 c0       	rjmp	.+424    	; 0x81a <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     672:	80 91 30 01 	lds	r24, 0x0130
     676:	07 c0       	rjmp	.+14     	; 0x686 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     678:	88 ee       	ldi	r24, 0xE8	; 232
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	90 93 32 01 	sts	0x0132, r25
     680:	80 93 31 01 	sts	0x0131, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	80 93 3d 01 	sts	0x013D, r24
			break;
     68a:	c7 c0       	rjmp	.+398    	; 0x81a <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     68c:	80 91 31 01 	lds	r24, 0x0131
     690:	90 91 32 01 	lds	r25, 0x0132
     694:	9c 01       	movw	r18, r24
     696:	21 50       	subi	r18, 0x01	; 1
     698:	30 40       	sbci	r19, 0x00	; 0
     69a:	30 93 32 01 	sts	0x0132, r19
     69e:	20 93 31 01 	sts	0x0131, r18
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	39 f0       	breq	.+14     	; 0x6b4 <USB_Host_ProcessNextHostState+0xd6>
     6a6:	8f ec       	ldi	r24, 0xCF	; 207
     6a8:	97 e0       	ldi	r25, 0x07	; 7
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <USB_Host_ProcessNextHostState+0xcc>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <USB_Host_ProcessNextHostState+0xd2>
     6b0:	00 00       	nop
     6b2:	b3 c0       	rjmp	.+358    	; 0x81a <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     6b4:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     6b6:	80 91 d8 00 	lds	r24, 0x00D8
     6ba:	80 61       	ori	r24, 0x10	; 16
     6bc:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     6c0:	80 91 dd 00 	lds	r24, 0x00DD
     6c4:	8b 7f       	andi	r24, 0xFB	; 251
     6c6:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     6ca:	80 91 d7 00 	lds	r24, 0x00D7
     6ce:	80 61       	ori	r24, 0x10	; 16
     6d0:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     6d4:	80 91 dd 00 	lds	r24, 0x00DD
     6d8:	82 60       	ori	r24, 0x02	; 2
     6da:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     6de:	84 e0       	ldi	r24, 0x04	; 4
     6e0:	d2 cf       	rjmp	.-92     	; 0x686 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     6e2:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     6e6:	80 ff       	sbrs	r24, 0
     6e8:	98 c0       	rjmp	.+304    	; 0x81a <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     6ea:	80 91 9f 00 	lds	r24, 0x009F
     6ee:	8e 7f       	andi	r24, 0xFE	; 254
     6f0:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     6f4:	80 91 9f 00 	lds	r24, 0x009F
     6f8:	8d 7f       	andi	r24, 0xFD	; 253
     6fa:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     6fe:	80 91 df 00 	lds	r24, 0x00DF
     702:	8d 7f       	andi	r24, 0xFD	; 253
     704:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     708:	80 91 de 00 	lds	r24, 0x00DE
     70c:	82 60       	ori	r24, 0x02	; 2
     70e:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     712:	80 91 9e 00 	lds	r24, 0x009E
     716:	81 60       	ori	r24, 0x01	; 1
     718:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     71c:	7a d1       	rcall	.+756    	; 0xa12 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     71e:	10 92 3d 01 	sts	0x013D, r1
     722:	84 e6       	ldi	r24, 0x64	; 100
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	90 93 32 01 	sts	0x0132, r25
     72a:	80 93 31 01 	sts	0x0131, r24
     72e:	85 e0       	ldi	r24, 0x05	; 5
     730:	59 c0       	rjmp	.+178    	; 0x7e4 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     732:	aa de       	rcall	.-684    	; 0x488 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     734:	10 92 3d 01 	sts	0x013D, r1
     738:	88 ec       	ldi	r24, 0xC8	; 200
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	90 93 32 01 	sts	0x0132, r25
     740:	80 93 31 01 	sts	0x0131, r24
     744:	86 e0       	ldi	r24, 0x06	; 6
     746:	4e c0       	rjmp	.+156    	; 0x7e4 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	20 e4       	ldi	r18, 0x40	; 64
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	01 e0       	ldi	r16, 0x01	; 1
     754:	d0 d0       	rcall	.+416    	; 0x8f6 <Pipe_ConfigurePipe>
     756:	88 23       	and	r24, r24
     758:	09 f4       	brne	.+2      	; 0x75c <USB_Host_ProcessNextHostState+0x17e>
     75a:	4f c0       	rjmp	.+158    	; 0x7fa <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     75c:	87 e0       	ldi	r24, 0x07	; 7
     75e:	93 cf       	rjmp	.-218    	; 0x686 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     760:	a5 e3       	ldi	r26, 0x35	; 53
     762:	b1 e0       	ldi	r27, 0x01	; 1
     764:	e7 e2       	ldi	r30, 0x27	; 39
     766:	f1 e0       	ldi	r31, 0x01	; 1
     768:	88 e0       	ldi	r24, 0x08	; 8
     76a:	01 90       	ld	r0, Z+
     76c:	0d 92       	st	X+, r0
     76e:	81 50       	subi	r24, 0x01	; 1
     770:	e1 f7       	brne	.-8      	; 0x76a <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     772:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     776:	ce 01       	movw	r24, r28
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	8e d3       	rcall	.+1820   	; 0xe98 <USB_Host_SendControlRequest>
     77c:	68 2f       	mov	r22, r24
     77e:	88 23       	and	r24, r24
     780:	09 f0       	breq	.+2      	; 0x784 <USB_Host_ProcessNextHostState+0x1a6>
     782:	3e c0       	rjmp	.+124    	; 0x800 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     784:	88 85       	ldd	r24, Y+8	; 0x08
     786:	80 93 2f 01 	sts	0x012F, r24

			USB_Host_ResetDevice();
     78a:	7e de       	rcall	.-772    	; 0x488 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     78c:	10 92 3d 01 	sts	0x013D, r1
     790:	88 ec       	ldi	r24, 0xC8	; 200
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	90 93 32 01 	sts	0x0132, r25
     798:	80 93 31 01 	sts	0x0131, r24
     79c:	88 e0       	ldi	r24, 0x08	; 8
     79e:	22 c0       	rjmp	.+68     	; 0x7e4 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     7a0:	20 91 2f 01 	lds	r18, 0x012F
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	01 e0       	ldi	r16, 0x01	; 1
     7ae:	a3 d0       	rcall	.+326    	; 0x8f6 <Pipe_ConfigurePipe>
     7b0:	88 23       	and	r24, r24
     7b2:	19 f1       	breq	.+70     	; 0x7fa <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     7b4:	a5 e3       	ldi	r26, 0x35	; 53
     7b6:	b1 e0       	ldi	r27, 0x01	; 1
     7b8:	ef e1       	ldi	r30, 0x1F	; 31
     7ba:	f1 e0       	ldi	r31, 0x01	; 1
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	01 90       	ld	r0, Z+
     7c0:	0d 92       	st	X+, r0
     7c2:	81 50       	subi	r24, 0x01	; 1
     7c4:	e1 f7       	brne	.-8      	; 0x7be <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	66 d3       	rcall	.+1740   	; 0xe98 <USB_Host_SendControlRequest>
     7cc:	68 2f       	mov	r22, r24
     7ce:	88 23       	and	r24, r24
     7d0:	b9 f4       	brne	.+46     	; 0x800 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     7d2:	10 92 3d 01 	sts	0x013D, r1
     7d6:	84 e6       	ldi	r24, 0x64	; 100
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	90 93 32 01 	sts	0x0132, r25
     7de:	80 93 31 01 	sts	0x0131, r24
     7e2:	89 e0       	ldi	r24, 0x09	; 9
     7e4:	80 93 30 01 	sts	0x0130, r24
			break;
     7e8:	18 c0       	rjmp	.+48     	; 0x81a <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     7f0:	8a e0       	ldi	r24, 0x0A	; 10
     7f2:	80 93 3d 01 	sts	0x013D, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     7f6:	9e dd       	rcall	.-1220   	; 0x334 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     7f8:	10 c0       	rjmp	.+32     	; 0x81a <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     7fa:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     7fc:	84 e0       	ldi	r24, 0x04	; 4
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     800:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     802:	90 91 3d 01 	lds	r25, 0x013D
     806:	91 30       	cpi	r25, 0x01	; 1
     808:	41 f0       	breq	.+16     	; 0x81a <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     80a:	15 de       	rcall	.-982    	; 0x436 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     80c:	80 91 dd 00 	lds	r24, 0x00DD
     810:	81 60       	ori	r24, 0x01	; 1
     812:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     816:	88 dd       	rcall	.-1264   	; 0x328 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     818:	7d d1       	rcall	.+762    	; 0xb14 <USB_ResetInterface>
	}
}
     81a:	28 96       	adiw	r28, 0x08	; 8
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
     826:	cf 91       	pop	r28
     828:	df 91       	pop	r29
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     830:	8f 92       	push	r8
     832:	9f 92       	push	r9
     834:	bf 92       	push	r11
     836:	cf 92       	push	r12
     838:	df 92       	push	r13
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	df 93       	push	r29
     844:	cf 93       	push	r28
     846:	0f 92       	push	r0
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	e8 2e       	mov	r14, r24
     84e:	4b 01       	movw	r8, r22
     850:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     852:	80 91 aa 00 	lds	r24, 0x00AA
     856:	8f 7c       	andi	r24, 0xCF	; 207
     858:	80 61       	ori	r24, 0x10	; 16
     85a:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     85e:	99 83       	std	Y+1, r25	; 0x01
     860:	12 d1       	rcall	.+548    	; 0xa86 <Pipe_WaitUntilReady>
     862:	b8 2e       	mov	r11, r24
     864:	99 81       	ldd	r25, Y+1	; 0x01
     866:	88 23       	and	r24, r24
     868:	c1 f5       	brne	.+112    	; 0x8da <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     86a:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     86c:	01 15       	cp	r16, r1
     86e:	11 05       	cpc	r17, r1
     870:	39 f0       	breq	.+14     	; 0x880 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     872:	f8 01       	movw	r30, r16
     874:	20 81       	ld	r18, Z
     876:	31 81       	ldd	r19, Z+1	; 0x01
     878:	82 1a       	sub	r8, r18
     87a:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     87c:	e2 0e       	add	r14, r18
     87e:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     880:	cc 24       	eor	r12, r12
     882:	dd 24       	eor	r13, r13
     884:	25 c0       	rjmp	.+74     	; 0x8d0 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     886:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     88a:	85 fd       	sbrc	r24, 5
     88c:	16 c0       	rjmp	.+44     	; 0x8ba <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     88e:	80 91 a6 00 	lds	r24, 0x00A6
     892:	8e 77       	andi	r24, 0x7E	; 126
     894:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     898:	01 15       	cp	r16, r1
     89a:	11 05       	cpc	r17, r1
     89c:	51 f0       	breq	.+20     	; 0x8b2 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     89e:	f8 01       	movw	r30, r16
     8a0:	80 81       	ld	r24, Z
     8a2:	91 81       	ldd	r25, Z+1	; 0x01
     8a4:	8c 0d       	add	r24, r12
     8a6:	9d 1d       	adc	r25, r13
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     8ac:	44 e0       	ldi	r20, 0x04	; 4
     8ae:	b4 2e       	mov	r11, r20
     8b0:	14 c0       	rjmp	.+40     	; 0x8da <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     8b2:	e9 d0       	rcall	.+466    	; 0xa86 <Pipe_WaitUntilReady>
     8b4:	88 23       	and	r24, r24
     8b6:	61 f0       	breq	.+24     	; 0x8d0 <Pipe_Read_Stream_LE+0xa0>
     8b8:	0f c0       	rjmp	.+30     	; 0x8d8 <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     8ba:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     8be:	f7 01       	movw	r30, r14
     8c0:	81 93       	st	Z+, r24
     8c2:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     8c4:	08 94       	sec
     8c6:	81 08       	sbc	r8, r1
     8c8:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     8ca:	08 94       	sec
     8cc:	c1 1c       	adc	r12, r1
     8ce:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     8d0:	81 14       	cp	r8, r1
     8d2:	91 04       	cpc	r9, r1
     8d4:	c1 f6       	brne	.-80     	; 0x886 <Pipe_Read_Stream_LE+0x56>
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     8d8:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     8da:	8b 2d       	mov	r24, r11
     8dc:	0f 90       	pop	r0
     8de:	cf 91       	pop	r28
     8e0:	df 91       	pop	r29
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
     8ee:	bf 90       	pop	r11
     8f0:	9f 90       	pop	r9
     8f2:	8f 90       	pop	r8
     8f4:	08 95       	ret

000008f6 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     8f6:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     8f8:	58 2f       	mov	r21, r24
     8fa:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     8fc:	87 ff       	sbrs	r24, 7
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <Pipe_ConfigurePipe+0xe>
     900:	80 e1       	ldi	r24, 0x10	; 16
     902:	01 c0       	rjmp	.+2      	; 0x906 <Pipe_ConfigurePipe+0x10>
     904:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     906:	57 30       	cpi	r21, 0x07	; 7
     908:	08 f0       	brcs	.+2      	; 0x90c <Pipe_ConfigurePipe+0x16>
     90a:	59 c0       	rjmp	.+178    	; 0x9be <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     90c:	66 23       	and	r22, r22
     90e:	09 f4       	brne	.+2      	; 0x912 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     910:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     912:	4f 70       	andi	r20, 0x0F	; 15
     914:	62 95       	swap	r22
     916:	66 0f       	add	r22, r22
     918:	66 0f       	add	r22, r22
     91a:	60 7c       	andi	r22, 0xC0	; 192
     91c:	64 2b       	or	r22, r20
     91e:	68 2b       	or	r22, r24
     920:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     922:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     924:	84 2f       	mov	r24, r20
     926:	8f 70       	andi	r24, 0x0F	; 15
     928:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     92c:	45 17       	cp	r20, r21
     92e:	a1 f4       	brne	.+40     	; 0x958 <Pipe_ConfigurePipe+0x62>
     930:	88 e0       	ldi	r24, 0x08	; 8
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	03 c0       	rjmp	.+6      	; 0x93e <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     938:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     93e:	82 17       	cp	r24, r18
     940:	93 07       	cpc	r25, r19
     942:	10 f4       	brcc	.+4      	; 0x948 <Pipe_ConfigurePipe+0x52>
     944:	75 30       	cpi	r23, 0x05	; 5
     946:	c1 f7       	brne	.-16     	; 0x938 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     948:	87 2f       	mov	r24, r23
     94a:	82 95       	swap	r24
     94c:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     94e:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     950:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     952:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     954:	e0 e0       	ldi	r30, 0x00	; 0
     956:	08 c0       	rjmp	.+16     	; 0x968 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     958:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     95c:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     960:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     964:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     968:	81 ff       	sbrs	r24, 1
     96a:	20 c0       	rjmp	.+64     	; 0x9ac <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     96c:	90 91 a9 00 	lds	r25, 0x00A9
     970:	9e 7f       	andi	r25, 0xFE	; 254
     972:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     976:	90 91 ab 00 	lds	r25, 0x00AB
     97a:	9d 7f       	andi	r25, 0xFD	; 253
     97c:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     980:	90 91 a9 00 	lds	r25, 0x00A9
     984:	91 60       	ori	r25, 0x01	; 1
     986:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     98a:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     98e:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     992:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     996:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     99a:	80 91 a9 00 	lds	r24, 0x00A9
     99e:	80 62       	ori	r24, 0x20	; 32
     9a0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9a4:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     9a8:	87 ff       	sbrs	r24, 7
     9aa:	09 c0       	rjmp	.+18     	; 0x9be <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     9ac:	4f 5f       	subi	r20, 0xFF	; 255
     9ae:	47 30       	cpi	r20, 0x07	; 7
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <Pipe_ConfigurePipe+0xbe>
     9b2:	b8 cf       	rjmp	.-144    	; 0x924 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9b4:	5f 70       	andi	r21, 0x0F	; 15
     9b6:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     9be:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     9c0:	0f 91       	pop	r16
     9c2:	08 95       	ret

000009c4 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     9d2:	e8 2e       	mov	r14, r24
     9d4:	e7 01       	movw	r28, r14
     9d6:	7e 01       	movw	r14, r28
     9d8:	f9 2e       	mov	r15, r25
     9da:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     9dc:	ff 24       	eor	r15, r15
     9de:	0d c0       	rjmp	.+26     	; 0x9fa <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
     9e0:	88 81       	ld	r24, Y
     9e2:	88 23       	and	r24, r24
     9e4:	41 f0       	breq	.+16     	; 0x9f6 <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     9e6:	29 81       	ldd	r18, Y+1	; 0x01
     9e8:	3a 81       	ldd	r19, Y+2	; 0x02
     9ea:	6c 81       	ldd	r22, Y+4	; 0x04
     9ec:	4b 81       	ldd	r20, Y+3	; 0x03
     9ee:	0d 81       	ldd	r16, Y+5	; 0x05
     9f0:	82 df       	rcall	.-252    	; 0x8f6 <Pipe_ConfigurePipe>
     9f2:	88 23       	and	r24, r24
     9f4:	31 f0       	breq	.+12     	; 0xa02 <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     9f6:	f3 94       	inc	r15
     9f8:	26 96       	adiw	r28, 0x06	; 6
     9fa:	f1 16       	cp	r15, r17
     9fc:	88 f3       	brcs	.-30     	; 0x9e0 <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     a02:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	08 95       	ret

00000a12 <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a12:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	98 2f       	mov	r25, r24
     a1a:	9f 70       	andi	r25, 0x0F	; 15
     a1c:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a20:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a24:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a28:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a2c:	90 91 a9 00 	lds	r25, 0x00A9
     a30:	9e 7f       	andi	r25, 0xFE	; 254
     a32:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a36:	8f 5f       	subi	r24, 0xFF	; 255
     a38:	87 30       	cpi	r24, 0x07	; 7
     a3a:	71 f7       	brne	.-36     	; 0xa18 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a3c:	08 95       	ret

00000a3e <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     a3e:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     a42:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a46:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a48:	29 2f       	mov	r18, r25
     a4a:	2f 70       	andi	r18, 0x0F	; 15
     a4c:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a50:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     a54:	27 ff       	sbrs	r18, 7
     a56:	0c c0       	rjmp	.+24     	; 0xa70 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     a58:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     a5c:	53 2f       	mov	r21, r19
     a5e:	5f 70       	andi	r21, 0x0F	; 15
     a60:	30 ff       	sbrs	r19, 0
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <Pipe_IsEndpointBound+0x2a>
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <Pipe_IsEndpointBound+0x2c>
     a68:	20 e8       	ldi	r18, 0x80	; 128
     a6a:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     a6c:	28 17       	cp	r18, r24
     a6e:	49 f0       	breq	.+18     	; 0xa82 <Pipe_IsEndpointBound+0x44>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a70:	9f 5f       	subi	r25, 0xFF	; 255
     a72:	97 30       	cpi	r25, 0x07	; 7
     a74:	49 f7       	brne	.-46     	; 0xa48 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a76:	84 2f       	mov	r24, r20
     a78:	8f 70       	andi	r24, 0x0F	; 15
     a7a:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     a82:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a84:	08 95       	ret

00000a86 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a86:	80 91 a2 00 	lds	r24, 0x00A2
     a8a:	90 91 a3 00 	lds	r25, 0x00A3

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     a8e:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a90:	20 91 aa 00 	lds	r18, 0x00AA
     a94:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a96:	20 31       	cpi	r18, 0x10	; 16
     a98:	29 f4       	brne	.+10     	; 0xaa4 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a9a:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     a9e:	20 ff       	sbrs	r18, 0
     aa0:	05 c0       	rjmp	.+10     	; 0xaac <Pipe_WaitUntilReady+0x26>
     aa2:	18 c0       	rjmp	.+48     	; 0xad4 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     aa4:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     aa8:	22 fd       	sbrc	r18, 2
     aaa:	14 c0       	rjmp	.+40     	; 0xad4 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     aac:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ab0:	21 fd       	sbrc	r18, 1
     ab2:	12 c0       	rjmp	.+36     	; 0xad8 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     ab4:	20 91 3d 01 	lds	r18, 0x013D
     ab8:	21 30       	cpi	r18, 0x01	; 1
     aba:	81 f0       	breq	.+32     	; 0xadc <Pipe_WaitUntilReady+0x56>
     abc:	20 91 a2 00 	lds	r18, 0x00A2
     ac0:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ac4:	28 17       	cp	r18, r24
     ac6:	39 07       	cpc	r19, r25
     ac8:	19 f3       	breq	.-58     	; 0xa90 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     aca:	44 23       	and	r20, r20
     acc:	49 f0       	breq	.+18     	; 0xae0 <Pipe_WaitUntilReady+0x5a>
     ace:	41 50       	subi	r20, 0x01	; 1
     ad0:	c9 01       	movw	r24, r18
     ad2:	de cf       	rjmp	.-68     	; 0xa90 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     ae0:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     ae2:	08 95       	ret

00000ae4 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     ae4:	75 d0       	rcall	.+234    	; 0xbd0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ae6:	7c d0       	rcall	.+248    	; 0xbe0 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     ae8:	e0 ee       	ldi	r30, 0xE0	; 224
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	81 60       	ori	r24, 0x01	; 1
     af0:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     af2:	e8 ed       	ldi	r30, 0xD8	; 216
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	8f 77       	andi	r24, 0x7F	; 127
     afa:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     afc:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     afe:	a7 ed       	ldi	r26, 0xD7	; 215
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	8c 91       	ld	r24, X
     b04:	8e 7f       	andi	r24, 0xFE	; 254
     b06:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b08:	80 81       	ld	r24, Z
     b0a:	8f 7e       	andi	r24, 0xEF	; 239
     b0c:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b0e:	10 92 34 01 	sts	0x0134, r1
}
     b12:	08 95       	ret

00000b14 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b14:	5d d0       	rcall	.+186    	; 0xbd0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b16:	64 d0       	rcall	.+200    	; 0xbe0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b18:	80 91 d8 00 	lds	r24, 0x00D8
     b1c:	8f 77       	andi	r24, 0x7F	; 127
     b1e:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     b22:	80 91 d8 00 	lds	r24, 0x00D8
     b26:	80 68       	ori	r24, 0x80	; 128
     b28:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b2c:	80 91 d8 00 	lds	r24, 0x00D8
     b30:	8f 7d       	andi	r24, 0xDF	; 223
     b32:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b36:	80 91 d7 00 	lds	r24, 0x00D7
     b3a:	8f 77       	andi	r24, 0x7F	; 127
     b3c:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b40:	8c e0       	ldi	r24, 0x0C	; 12
     b42:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b44:	8e e0       	ldi	r24, 0x0E	; 14
     b46:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b48:	09 b4       	in	r0, 0x29	; 41
     b4a:	00 fe       	sbrs	r0, 0
     b4c:	fd cf       	rjmp	.-6      	; 0xb48 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	80 93 3d 01 	sts	0x013D, r24
	USB_Host_ConfigurationNumber = 0;
     b54:	10 92 33 01 	sts	0x0133, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b58:	80 e4       	ldi	r24, 0x40	; 64
     b5a:	80 93 2f 01 	sts	0x012F, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b5e:	80 91 d8 00 	lds	r24, 0x00D8
     b62:	80 64       	ori	r24, 0x40	; 64
     b64:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b68:	80 91 dd 00 	lds	r24, 0x00DD
     b6c:	81 60       	ori	r24, 0x01	; 1
     b6e:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b72:	80 91 dd 00 	lds	r24, 0x00DD
     b76:	84 60       	ori	r24, 0x04	; 4
     b78:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b7c:	80 91 d7 00 	lds	r24, 0x00D7
     b80:	8f 7e       	andi	r24, 0xEF	; 239
     b82:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b86:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     b88:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     b8a:	80 91 de 00 	lds	r24, 0x00DE
     b8e:	81 60       	ori	r24, 0x01	; 1
     b90:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b94:	80 91 de 00 	lds	r24, 0x00DE
     b98:	84 60       	ori	r24, 0x04	; 4
     b9a:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b9e:	80 91 e0 00 	lds	r24, 0x00E0
     ba2:	8e 7f       	andi	r24, 0xFE	; 254
     ba4:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     ba8:	80 91 d8 00 	lds	r24, 0x00D8
     bac:	80 61       	ori	r24, 0x10	; 16
     bae:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     bb2:	08 95       	ret

00000bb4 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     bb4:	e8 ed       	ldi	r30, 0xD8	; 216
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 7e       	andi	r24, 0xEF	; 239
     bbc:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     bbe:	e7 ed       	ldi	r30, 0xD7	; 215
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	81 60       	ori	r24, 0x01	; 1
     bc6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	80 93 34 01 	sts	0x0134, r24

	USB_ResetInterface();
}
     bce:	a2 cf       	rjmp	.-188    	; 0xb14 <USB_ResetInterface>

00000bd0 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     bd0:	e8 ed       	ldi	r30, 0xD8	; 216
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8c 7f       	andi	r24, 0xFC	; 252
     bd8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     bda:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     bde:	08 95       	ret

00000be0 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     be0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     be4:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     be8:	08 95       	ret

00000bea <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     bea:	1f 92       	push	r1
     bec:	0f 92       	push	r0
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	0f 92       	push	r0
     bf2:	0b b6       	in	r0, 0x3b	; 59
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	2f 93       	push	r18
     bfa:	3f 93       	push	r19
     bfc:	4f 93       	push	r20
     bfe:	5f 93       	push	r21
     c00:	6f 93       	push	r22
     c02:	7f 93       	push	r23
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	af 93       	push	r26
     c0a:	bf 93       	push	r27
     c0c:	ef 93       	push	r30
     c0e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c10:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c14:	85 ff       	sbrs	r24, 5
     c16:	0a c0       	rjmp	.+20     	; 0xc2c <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c18:	80 91 a0 00 	lds	r24, 0x00A0
     c1c:	85 ff       	sbrs	r24, 5
     c1e:	06 c0       	rjmp	.+12     	; 0xc2c <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c20:	80 91 9f 00 	lds	r24, 0x009F
     c24:	8f 7d       	andi	r24, 0xDF	; 223
     c26:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c2a:	0c d1       	rcall	.+536    	; 0xe44 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c2c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c30:	81 ff       	sbrs	r24, 1
     c32:	15 c0       	rjmp	.+42     	; 0xc5e <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c34:	80 91 a0 00 	lds	r24, 0x00A0
     c38:	81 ff       	sbrs	r24, 1
     c3a:	11 c0       	rjmp	.+34     	; 0xc5e <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c3c:	80 91 9f 00 	lds	r24, 0x009F
     c40:	8d 7f       	andi	r24, 0xFD	; 253
     c42:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c46:	80 91 9f 00 	lds	r24, 0x009F
     c4a:	8e 7f       	andi	r24, 0xFE	; 254
     c4c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c50:	80 91 a0 00 	lds	r24, 0x00A0
     c54:	8d 7f       	andi	r24, 0xFD	; 253
     c56:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c5a:	66 db       	rcall	.-2356   	; 0x328 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c5c:	5b df       	rcall	.-330    	; 0xb14 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c5e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c62:	81 ff       	sbrs	r24, 1
     c64:	15 c0       	rjmp	.+42     	; 0xc90 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c66:	80 91 de 00 	lds	r24, 0x00DE
     c6a:	81 ff       	sbrs	r24, 1
     c6c:	11 c0       	rjmp	.+34     	; 0xc90 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c6e:	80 91 df 00 	lds	r24, 0x00DF
     c72:	8d 7f       	andi	r24, 0xFD	; 253
     c74:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     c78:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c7a:	80 91 dd 00 	lds	r24, 0x00DD
     c7e:	81 60       	ori	r24, 0x01	; 1
     c80:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	b7 db       	rcall	.-2194   	; 0x3f6 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c88:	4f db       	rcall	.-2402   	; 0x328 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	80 93 3d 01 	sts	0x013D, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c90:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c94:	80 ff       	sbrs	r24, 0
     c96:	17 c0       	rjmp	.+46     	; 0xcc6 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c98:	80 91 de 00 	lds	r24, 0x00DE
     c9c:	80 ff       	sbrs	r24, 0
     c9e:	13 c0       	rjmp	.+38     	; 0xcc6 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     ca0:	80 91 df 00 	lds	r24, 0x00DF
     ca4:	8e 7f       	andi	r24, 0xFE	; 254
     ca6:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     caa:	80 91 de 00 	lds	r24, 0x00DE
     cae:	8e 7f       	andi	r24, 0xFE	; 254
     cb0:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     cb4:	33 db       	rcall	.-2458   	; 0x31c <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     cb6:	80 91 a0 00 	lds	r24, 0x00A0
     cba:	82 60       	ori	r24, 0x02	; 2
     cbc:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	80 93 3d 01 	sts	0x013D, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     cc6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     cca:	82 ff       	sbrs	r24, 2
     ccc:	0e c0       	rjmp	.+28     	; 0xcea <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     cce:	80 91 de 00 	lds	r24, 0x00DE
     cd2:	82 ff       	sbrs	r24, 2
     cd4:	0a c0       	rjmp	.+20     	; 0xcea <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     cd6:	80 91 df 00 	lds	r24, 0x00DF
     cda:	8b 7f       	andi	r24, 0xFB	; 251
     cdc:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	a8 db       	rcall	.-2224   	; 0x436 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     ce6:	20 db       	rcall	.-2496   	; 0x328 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     ce8:	15 df       	rcall	.-470    	; 0xb14 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0b be       	out	0x3b, r0	; 59
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     d10:	cf 92       	push	r12
     d12:	df 92       	push	r13
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	29 97       	sbiw	r28, 0x09	; 9
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	6b 01       	movw	r12, r22
     d32:	8a 01       	movw	r16, r20
     d34:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d36:	90 e8       	ldi	r25, 0x80	; 128
     d38:	90 93 35 01 	sts	0x0135, r25
     d3c:	96 e0       	ldi	r25, 0x06	; 6
     d3e:	90 93 36 01 	sts	0x0136, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d48:	90 93 38 01 	sts	0x0138, r25
     d4c:	80 93 37 01 	sts	0x0137, r24
     d50:	10 92 3a 01 	sts	0x013A, r1
     d54:	10 92 39 01 	sts	0x0139, r1
     d58:	89 e0       	ldi	r24, 0x09	; 9
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	90 93 3c 01 	sts	0x013C, r25
     d60:	80 93 3b 01 	sts	0x013B, r24
     d64:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d68:	ce 01       	movw	r24, r28
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	95 d0       	rcall	.+298    	; 0xe98 <USB_Host_SendControlRequest>
     d6e:	88 23       	and	r24, r24
     d70:	b9 f4       	brne	.+46     	; 0xda0 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	f6 01       	movw	r30, r12
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     d7c:	e8 16       	cp	r14, r24
     d7e:	f9 06       	cpc	r15, r25
     d80:	70 f0       	brcs	.+28     	; 0xd9e <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d82:	90 93 3c 01 	sts	0x013C, r25
     d86:	80 93 3b 01 	sts	0x013B, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d8a:	c8 01       	movw	r24, r16
     d8c:	85 d0       	rcall	.+266    	; 0xe98 <USB_Host_SendControlRequest>
     d8e:	88 23       	and	r24, r24
     d90:	39 f4       	brne	.+14     	; 0xda0 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d92:	f8 01       	movw	r30, r16
     d94:	91 81       	ldd	r25, Z+1	; 0x01
     d96:	92 30       	cpi	r25, 0x02	; 2
     d98:	19 f0       	breq	.+6      	; 0xda0 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     d9a:	86 e0       	ldi	r24, 0x06	; 6
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     d9e:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     da0:	29 96       	adiw	r28, 0x09	; 9
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	cf 90       	pop	r12
     dbc:	08 95       	ret

00000dbe <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     dbe:	af 92       	push	r10
     dc0:	bf 92       	push	r11
     dc2:	cf 92       	push	r12
     dc4:	df 92       	push	r13
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	8c 01       	movw	r16, r24
     dd4:	eb 01       	movw	r28, r22
     dd6:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     dd8:	23 c0       	rjmp	.+70     	; 0xe20 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     dda:	e8 81       	ld	r30, Y
     ddc:	f9 81       	ldd	r31, Y+1	; 0x01
     dde:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     de0:	20 81       	ld	r18, Z
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	c7 01       	movw	r24, r14
     de6:	2e 15       	cp	r18, r14
     de8:	3f 05       	cpc	r19, r15
     dea:	08 f4       	brcc	.+2      	; 0xdee <USB_GetNextDescriptorComp+0x30>
     dec:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     dee:	e8 0f       	add	r30, r24
     df0:	f9 1f       	adc	r31, r25
     df2:	f9 83       	std	Y+1, r31	; 0x01
     df4:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     df6:	f8 01       	movw	r30, r16
     df8:	20 81       	ld	r18, Z
     dfa:	31 81       	ldd	r19, Z+1	; 0x01
     dfc:	28 1b       	sub	r18, r24
     dfe:	39 0b       	sbc	r19, r25
     e00:	31 83       	std	Z+1, r19	; 0x01
     e02:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e04:	88 81       	ld	r24, Y
     e06:	99 81       	ldd	r25, Y+1	; 0x01
     e08:	f6 01       	movw	r30, r12
     e0a:	09 95       	icall
     e0c:	82 30       	cpi	r24, 0x02	; 2
     e0e:	41 f0       	breq	.+16     	; 0xe20 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	69 f4       	brne	.+26     	; 0xe2e <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
     e14:	a8 82       	st	Y, r10
     e16:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
     e18:	f8 01       	movw	r30, r16
     e1a:	f1 82       	std	Z+1, r15	; 0x01
     e1c:	e0 82       	st	Z, r14
     e1e:	07 c0       	rjmp	.+14     	; 0xe2e <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     e20:	f8 01       	movw	r30, r16
     e22:	e0 80       	ld	r14, Z
     e24:	f1 80       	ldd	r15, Z+1	; 0x01
     e26:	e1 14       	cp	r14, r1
     e28:	f1 04       	cpc	r15, r1
     e2a:	b9 f6       	brne	.-82     	; 0xdda <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     e2c:	82 e0       	ldi	r24, 0x02	; 2
}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	df 90       	pop	r13
     e3c:	cf 90       	pop	r12
     e3e:	bf 90       	pop	r11
     e40:	af 90       	pop	r10
     e42:	08 95       	ret

00000e44 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e44:	08 95       	ret

00000e46 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
     e4e:	c8 ee       	ldi	r28, 0xE8	; 232
     e50:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e52:	07 c0       	rjmp	.+14     	; 0xe62 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	6e db       	rcall	.-2340   	; 0x534 <USB_Host_WaitMS>
     e58:	88 23       	and	r24, r24
     e5a:	d1 f4       	brne	.+52     	; 0xe90 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     e5c:	20 97       	sbiw	r28, 0x00	; 0
     e5e:	b9 f0       	breq	.+46     	; 0xe8e <USB_Host_WaitForIOS+0x48>
     e60:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e62:	11 23       	and	r17, r17
     e64:	29 f4       	brne	.+10     	; 0xe70 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     e66:	80 91 a6 00 	lds	r24, 0x00A6
     e6a:	83 ff       	sbrs	r24, 3
     e6c:	f3 cf       	rjmp	.-26     	; 0xe54 <USB_Host_WaitForIOS+0xe>
     e6e:	0d c0       	rjmp	.+26     	; 0xe8a <USB_Host_WaitForIOS+0x44>
     e70:	11 30       	cpi	r17, 0x01	; 1
     e72:	29 f4       	brne	.+10     	; 0xe7e <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e74:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     e78:	80 ff       	sbrs	r24, 0
     e7a:	ec cf       	rjmp	.-40     	; 0xe54 <USB_Host_WaitForIOS+0xe>
     e7c:	06 c0       	rjmp	.+12     	; 0xe8a <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e7e:	12 30       	cpi	r17, 0x02	; 2
     e80:	49 f7       	brne	.-46     	; 0xe54 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e82:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     e86:	82 ff       	sbrs	r24, 2
     e88:	e5 cf       	rjmp	.-54     	; 0xe54 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     e8e:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	08 95       	ret

00000e98 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ea6:	e0 90 9e 00 	lds	r14, 0x009E
     eaa:	ff 24       	eor	r15, r15
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	e8 22       	and	r14, r24
     eb0:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     eb2:	c0 91 3b 01 	lds	r28, 0x013B
     eb6:	d0 91 3c 01 	lds	r29, 0x013C
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     eba:	80 91 9e 00 	lds	r24, 0x009E
     ebe:	81 60       	ori	r24, 0x01	; 1
     ec0:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	36 db       	rcall	.-2452   	; 0x534 <USB_Host_WaitMS>
     ec8:	88 23       	and	r24, r24
     eca:	09 f0       	breq	.+2      	; 0xece <USB_Host_SendControlRequest+0x36>
     ecc:	cb c0       	rjmp	.+406    	; 0x1064 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ece:	80 91 aa 00 	lds	r24, 0x00AA
     ed2:	8f 7c       	andi	r24, 0xCF	; 207
     ed4:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     ed8:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     edc:	80 91 a6 00 	lds	r24, 0x00A6
     ee0:	8f 7e       	andi	r24, 0xEF	; 239
     ee2:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ee6:	80 91 a9 00 	lds	r24, 0x00A9
     eea:	8f 7b       	andi	r24, 0xBF	; 191
     eec:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     ef0:	e5 e3       	ldi	r30, 0x35	; 53
     ef2:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     ef4:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     ef6:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	ed 33       	cpi	r30, 0x3D	; 61
     efe:	f8 07       	cpc	r31, r24
     f00:	c9 f7       	brne	.-14     	; 0xef4 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f02:	80 91 a6 00 	lds	r24, 0x00A6
     f06:	87 77       	andi	r24, 0x77	; 119
     f08:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	9b df       	rcall	.-202    	; 0xe46 <USB_Host_WaitForIOS>
     f10:	88 23       	and	r24, r24
     f12:	09 f0       	breq	.+2      	; 0xf16 <USB_Host_SendControlRequest+0x7e>
     f14:	a7 c0       	rjmp	.+334    	; 0x1064 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f16:	80 91 a9 00 	lds	r24, 0x00A9
     f1a:	80 64       	ori	r24, 0x40	; 64
     f1c:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	08 db       	rcall	.-2544   	; 0x534 <USB_Host_WaitMS>
     f24:	88 23       	and	r24, r24
     f26:	09 f0       	breq	.+2      	; 0xf2a <USB_Host_SendControlRequest+0x92>
     f28:	9d c0       	rjmp	.+314    	; 0x1064 <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f2a:	80 91 35 01 	lds	r24, 0x0135
     f2e:	87 ff       	sbrs	r24, 7
     f30:	4f c0       	rjmp	.+158    	; 0xfd0 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f32:	80 91 aa 00 	lds	r24, 0x00AA
     f36:	8f 7c       	andi	r24, 0xCF	; 207
     f38:	80 61       	ori	r24, 0x10	; 16
     f3a:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     f3e:	01 15       	cp	r16, r1
     f40:	11 05       	cpc	r17, r1
     f42:	61 f5       	brne	.+88     	; 0xf9c <USB_Host_SendControlRequest+0x104>
     f44:	2d c0       	rjmp	.+90     	; 0xfa0 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f46:	80 91 a9 00 	lds	r24, 0x00A9
     f4a:	8f 7b       	andi	r24, 0xBF	; 191
     f4c:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	79 df       	rcall	.-270    	; 0xe46 <USB_Host_WaitForIOS>
     f54:	88 23       	and	r24, r24
     f56:	09 f0       	breq	.+2      	; 0xf5a <USB_Host_SendControlRequest+0xc2>
     f58:	85 c0       	rjmp	.+266    	; 0x1064 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f5a:	80 91 f6 00 	lds	r24, 0x00F6
     f5e:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	49 f4       	brne	.+18     	; 0xf78 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
     f66:	c0 e0       	ldi	r28, 0x00	; 0
     f68:	d0 e0       	ldi	r29, 0x00	; 0
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f6c:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
     f70:	f8 01       	movw	r30, r16
     f72:	81 93       	st	Z+, r24
     f74:	8f 01       	movw	r16, r30
					DataLen--;
     f76:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f78:	80 91 f6 00 	lds	r24, 0x00F6
     f7c:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	11 f0       	breq	.+4      	; 0xf88 <USB_Host_SendControlRequest+0xf0>
     f84:	20 97       	sbiw	r28, 0x00	; 0
     f86:	91 f7       	brne	.-28     	; 0xf6c <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f88:	80 91 a9 00 	lds	r24, 0x00A9
     f8c:	80 64       	ori	r24, 0x40	; 64
     f8e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f92:	80 91 a6 00 	lds	r24, 0x00A6
     f96:	8e 77       	andi	r24, 0x7E	; 126
     f98:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f9c:	20 97       	sbiw	r28, 0x00	; 0
     f9e:	99 f6       	brne	.-90     	; 0xf46 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fa0:	80 91 aa 00 	lds	r24, 0x00AA
     fa4:	8f 7c       	andi	r24, 0xCF	; 207
     fa6:	80 62       	ori	r24, 0x20	; 32
     fa8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fac:	80 91 a9 00 	lds	r24, 0x00A9
     fb0:	8f 7b       	andi	r24, 0xBF	; 191
     fb2:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fb6:	82 e0       	ldi	r24, 0x02	; 2
     fb8:	46 df       	rcall	.-372    	; 0xe46 <USB_Host_WaitForIOS>
     fba:	88 23       	and	r24, r24
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <USB_Host_SendControlRequest+0x128>
     fbe:	52 c0       	rjmp	.+164    	; 0x1064 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fc0:	80 91 a6 00 	lds	r24, 0x00A6
     fc4:	8b 77       	andi	r24, 0x7B	; 123
     fc6:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	3c df       	rcall	.-392    	; 0xe46 <USB_Host_WaitForIOS>
     fce:	4a c0       	rjmp	.+148    	; 0x1064 <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
     fd0:	01 15       	cp	r16, r1
     fd2:	11 05       	cpc	r17, r1
     fd4:	99 f1       	breq	.+102    	; 0x103c <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fd6:	80 91 aa 00 	lds	r24, 0x00AA
     fda:	8f 7c       	andi	r24, 0xCF	; 207
     fdc:	80 62       	ori	r24, 0x20	; 32
     fde:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fe2:	80 91 a9 00 	lds	r24, 0x00A9
     fe6:	8f 7b       	andi	r24, 0xBF	; 191
     fe8:	80 93 a9 00 	sts	0x00A9, r24
     fec:	1c c0       	rjmp	.+56     	; 0x1026 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	2a df       	rcall	.-428    	; 0xe46 <USB_Host_WaitForIOS>
     ff2:	88 23       	and	r24, r24
     ff4:	b9 f5       	brne	.+110    	; 0x1064 <USB_Host_SendControlRequest+0x1cc>
     ff6:	f8 01       	movw	r30, r16
     ff8:	06 c0       	rjmp	.+12     	; 0x1006 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
     ffa:	81 91       	ld	r24, Z+
     ffc:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     ffe:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1002:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1004:	59 f0       	breq	.+22     	; 0x101c <USB_Host_SendControlRequest+0x184>
    1006:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1008:	20 91 f6 00 	lds	r18, 0x00F6
    100c:	30 91 f7 00 	lds	r19, 0x00F7
    1010:	80 91 2f 01 	lds	r24, 0x012F
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	28 17       	cp	r18, r24
    1018:	39 07       	cpc	r19, r25
    101a:	78 f3       	brcs	.-34     	; 0xffa <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    101c:	80 91 a6 00 	lds	r24, 0x00A6
    1020:	8b 77       	andi	r24, 0x7B	; 123
    1022:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1026:	20 97       	sbiw	r28, 0x00	; 0
    1028:	11 f7       	brne	.-60     	; 0xfee <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	0c df       	rcall	.-488    	; 0xe46 <USB_Host_WaitForIOS>
    102e:	88 23       	and	r24, r24
    1030:	c9 f4       	brne	.+50     	; 0x1064 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1032:	80 91 a9 00 	lds	r24, 0x00A9
    1036:	80 64       	ori	r24, 0x40	; 64
    1038:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    103c:	80 91 aa 00 	lds	r24, 0x00AA
    1040:	8f 7c       	andi	r24, 0xCF	; 207
    1042:	80 61       	ori	r24, 0x10	; 16
    1044:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1048:	80 91 a9 00 	lds	r24, 0x00A9
    104c:	8f 7b       	andi	r24, 0xBF	; 191
    104e:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	f8 de       	rcall	.-528    	; 0xe46 <USB_Host_WaitForIOS>
    1056:	88 23       	and	r24, r24
    1058:	29 f4       	brne	.+10     	; 0x1064 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    105a:	90 91 a6 00 	lds	r25, 0x00A6
    105e:	9e 77       	andi	r25, 0x7E	; 126
    1060:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1064:	90 91 a9 00 	lds	r25, 0x00A9
    1068:	90 64       	ori	r25, 0x40	; 64
    106a:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    106e:	e1 14       	cp	r14, r1
    1070:	f1 04       	cpc	r15, r1
    1072:	29 f4       	brne	.+10     	; 0x107e <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1074:	90 91 9e 00 	lds	r25, 0x009E
    1078:	9e 7f       	andi	r25, 0xFE	; 254
    107a:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1084:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	08 95       	ret

00001096 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1096:	1f 93       	push	r17
    1098:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    109a:	10 92 35 01 	sts	0x0135, r1
    109e:	89 e0       	ldi	r24, 0x09	; 9
    10a0:	80 93 36 01 	sts	0x0136, r24
    10a4:	10 93 37 01 	sts	0x0137, r17
    10a8:	10 92 38 01 	sts	0x0138, r1
    10ac:	10 92 3a 01 	sts	0x013A, r1
    10b0:	10 92 39 01 	sts	0x0139, r1
    10b4:	10 92 3c 01 	sts	0x013C, r1
    10b8:	10 92 3b 01 	sts	0x013B, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10bc:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	e9 de       	rcall	.-558    	; 0xe98 <USB_Host_SendControlRequest>
    10c6:	88 23       	and	r24, r24
    10c8:	49 f4       	brne	.+18     	; 0x10dc <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    10ca:	10 93 33 01 	sts	0x0133, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    10ce:	11 23       	and	r17, r17
    10d0:	11 f0       	breq	.+4      	; 0x10d6 <USB_Host_SetDeviceConfiguration+0x40>
    10d2:	9b e0       	ldi	r25, 0x0B	; 11
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <USB_Host_SetDeviceConfiguration+0x42>
    10d6:	9a e0       	ldi	r25, 0x0A	; 10
    10d8:	90 93 3d 01 	sts	0x013D, r25
	}

	return ErrorCode;
}
    10dc:	1f 91       	pop	r17
    10de:	08 95       	ret

000010e0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    10e0:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    10e2:	10 91 a7 00 	lds	r17, 0x00A7
    10e6:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    10e8:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10ec:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    10f0:	76 da       	rcall	.-2836   	; 0x5de <USB_Host_ProcessNextHostState>
    10f2:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    10f6:	1f 91       	pop	r17
    10f8:	08 95       	ret

000010fa <DCOMP_CDC_Host_NextCDCControlInterface>:

	return CDC_ENUMERROR_NoError;
}

static uint8_t DCOMP_CDC_Host_NextCDCControlInterface(void* const CurrentDescriptor)
{
    10fa:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10fc:	81 81       	ldd	r24, Z+1	; 0x01
    10fe:	84 30       	cpi	r24, 0x04	; 4
    1100:	49 f4       	brne	.+18     	; 0x1114 <DCOMP_CDC_Host_NextCDCControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
    1102:	85 81       	ldd	r24, Z+5	; 0x05
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	31 f4       	brne	.+12     	; 0x1114 <DCOMP_CDC_Host_NextCDCControlInterface+0x1a>
    1108:	86 81       	ldd	r24, Z+6	; 0x06
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	19 f4       	brne	.+6      	; 0x1114 <DCOMP_CDC_Host_NextCDCControlInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
    110e:	87 81       	ldd	r24, Z+7	; 0x07
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	11 f0       	breq	.+4      	; 0x1118 <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	08 95       	ret

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
		    (Interface->Protocol == CDC_CSCP_ATCommandProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1118:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    111a:	08 95       	ret

0000111c <DCOMP_CDC_Host_NextCDCDataInterface>:

static uint8_t DCOMP_CDC_Host_NextCDCDataInterface(void* const CurrentDescriptor)
{
    111c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    111e:	81 81       	ldd	r24, Z+1	; 0x01
    1120:	84 30       	cpi	r24, 0x04	; 4
    1122:	49 f4       	brne	.+18     	; 0x1136 <DCOMP_CDC_Host_NextCDCDataInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
    1124:	85 81       	ldd	r24, Z+5	; 0x05
    1126:	8a 30       	cpi	r24, 0x0A	; 10
    1128:	31 f4       	brne	.+12     	; 0x1136 <DCOMP_CDC_Host_NextCDCDataInterface+0x1a>
    112a:	86 81       	ldd	r24, Z+6	; 0x06
    112c:	88 23       	and	r24, r24
    112e:	19 f4       	brne	.+6      	; 0x1136 <DCOMP_CDC_Host_NextCDCDataInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
    1130:	87 81       	ldd	r24, Z+7	; 0x07
    1132:	88 23       	and	r24, r24
    1134:	11 f0       	breq	.+4      	; 0x113a <DCOMP_CDC_Host_NextCDCDataInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	08 95       	ret

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
		    (Interface->Protocol == CDC_CSCP_NoDataProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    113a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    113c:	08 95       	ret

0000113e <DCOMP_CDC_Host_NextCDCInterfaceEndpoint>:

static uint8_t DCOMP_CDC_Host_NextCDCInterfaceEndpoint(void* const CurrentDescriptor)
{
    113e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1140:	81 81       	ldd	r24, Z+1	; 0x01
    1142:	85 30       	cpi	r24, 0x05	; 5
    1144:	51 f4       	brne	.+20     	; 0x115a <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    1146:	83 81       	ldd	r24, Z+3	; 0x03
    1148:	83 70       	andi	r24, 0x03	; 3

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    114a:	82 50       	subi	r24, 0x02	; 2
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	38 f4       	brcc	.+14     	; 0x115e <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x20>
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	75 dc       	rcall	.-1814   	; 0xa3e <Pipe_IsEndpointBound>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1154:	88 23       	and	r24, r24
    1156:	19 f4       	brne	.+6      	; 0x115e <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x20>
    1158:	04 c0       	rjmp	.+8      	; 0x1162 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x24>
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    115a:	84 30       	cpi	r24, 0x04	; 4
    115c:	21 f0       	breq	.+8      	; 0x1166 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x28>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	08 95       	ret
		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1166:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1168:	08 95       	ret

0000116a <CDC_Host_ConfigurePipes>:
#include "CDCClassHost.h"

uint8_t CDC_Host_ConfigurePipes(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    116a:	4f 92       	push	r4
    116c:	5f 92       	push	r5
    116e:	6f 92       	push	r6
    1170:	7f 92       	push	r7
    1172:	8f 92       	push	r8
    1174:	9f 92       	push	r9
    1176:	af 92       	push	r10
    1178:	bf 92       	push	r11
    117a:	cf 92       	push	r12
    117c:	df 92       	push	r13
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <CDC_Host_ConfigurePipes+0x22>
    118c:	00 d0       	rcall	.+0      	; 0x118e <CDC_Host_ConfigurePipes+0x24>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	8c 01       	movw	r16, r24
    1194:	7a 83       	std	Y+2, r23	; 0x02
    1196:	69 83       	std	Y+1, r22	; 0x01
    1198:	5c 83       	std	Y+4, r21	; 0x04
    119a:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint = NULL;
	USB_Descriptor_Interface_t* CDCControlInterface  = NULL;

	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    119c:	42 96       	adiw	r24, 0x12	; 18
    119e:	fc 01       	movw	r30, r24
    11a0:	8d e0       	ldi	r24, 0x0D	; 13
    11a2:	df 01       	movw	r26, r30
    11a4:	1d 92       	st	X+, r1
    11a6:	8a 95       	dec	r24
    11a8:	e9 f7       	brne	.-6      	; 0x11a4 <CDC_Host_ConfigurePipes+0x3a>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    11aa:	eb 81       	ldd	r30, Y+3	; 0x03
    11ac:	fc 81       	ldd	r31, Y+4	; 0x04
    11ae:	81 81       	ldd	r24, Z+1	; 0x01
    11b0:	82 30       	cpi	r24, 0x02	; 2
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <CDC_Host_ConfigurePipes+0x4c>
    11b4:	97 c0       	rjmp	.+302    	; 0x12e4 <CDC_Host_ConfigurePipes+0x17a>
    11b6:	44 24       	eor	r4, r4
    11b8:	55 24       	eor	r5, r5
    11ba:	aa 24       	eor	r10, r10
    11bc:	bb 24       	eor	r11, r11
    11be:	cc 24       	eor	r12, r12
    11c0:	dd 24       	eor	r13, r13
    11c2:	ee 24       	eor	r14, r14
    11c4:	ff 24       	eor	r15, r15
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(CDCControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	68 2e       	mov	r6, r24
    11ca:	71 2c       	mov	r7, r1
    11cc:	6c 0e       	add	r6, r28
    11ce:	7d 1e       	adc	r7, r29
    11d0:	4e 01       	movw	r8, r28
    11d2:	08 94       	sec
    11d4:	81 1c       	adc	r8, r1
    11d6:	91 1c       	adc	r9, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(CDCControlInterface) ||
    11d8:	41 14       	cp	r4, r1
    11da:	51 04       	cpc	r5, r1
    11dc:	39 f0       	breq	.+14     	; 0x11ec <CDC_Host_ConfigurePipes+0x82>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11de:	c4 01       	movw	r24, r8
    11e0:	b3 01       	movw	r22, r6
    11e2:	4f e9       	ldi	r20, 0x9F	; 159
    11e4:	58 e0       	ldi	r21, 0x08	; 8
    11e6:	eb dd       	rcall	.-1066   	; 0xdbe <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(CDCControlInterface) ||
    11e8:	88 23       	and	r24, r24
    11ea:	d9 f0       	breq	.+54     	; 0x1222 <CDC_Host_ConfigurePipes+0xb8>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_CDC_Host_NextCDCInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
    11ec:	a1 14       	cp	r10, r1
    11ee:	b1 04       	cpc	r11, r1
    11f0:	69 f0       	breq	.+26     	; 0x120c <CDC_Host_ConfigurePipes+0xa2>
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11f2:	c4 01       	movw	r24, r8
    11f4:	b3 01       	movw	r22, r6
    11f6:	4e e8       	ldi	r20, 0x8E	; 142
    11f8:	58 e0       	ldi	r21, 0x08	; 8
    11fa:	e1 dd       	rcall	.-1086   	; 0xdbe <USB_GetNextDescriptorComp>
    11fc:	88 23       	and	r24, r24
    11fe:	09 f0       	breq	.+2      	; 0x1202 <CDC_Host_ConfigurePipes+0x98>
    1200:	73 c0       	rjmp	.+230    	; 0x12e8 <CDC_Host_ConfigurePipes+0x17e>
				{
					return CDC_ENUMERROR_NoCompatibleInterfaceFound;
				}

				DataINEndpoint  = NULL;
				DataOUTEndpoint = NULL;
    1202:	cc 24       	eor	r12, r12
    1204:	dd 24       	eor	r13, r13
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_CDC_Host_NextCDCInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1206:	ee 24       	eor	r14, r14
    1208:	ff 24       	eor	r15, r15
    120a:	e6 cf       	rjmp	.-52     	; 0x11d8 <CDC_Host_ConfigurePipes+0x6e>
				DataINEndpoint  = NULL;
				DataOUTEndpoint = NULL;
			}
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    120c:	c4 01       	movw	r24, r8
    120e:	b3 01       	movw	r22, r6
    1210:	4d e7       	ldi	r20, 0x7D	; 125
    1212:	58 e0       	ldi	r21, 0x08	; 8
    1214:	d4 dd       	rcall	.-1112   	; 0xdbe <USB_GetNextDescriptorComp>
    1216:	88 23       	and	r24, r24
    1218:	09 f0       	breq	.+2      	; 0x121c <CDC_Host_ConfigurePipes+0xb2>
    121a:	66 c0       	rjmp	.+204    	; 0x12e8 <CDC_Host_ConfigurePipes+0x17e>
				                              DCOMP_CDC_Host_NextCDCControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return CDC_ENUMERROR_NoCompatibleInterfaceFound;
				}

				CDCControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    121c:	4b 80       	ldd	r4, Y+3	; 0x03
    121e:	5c 80       	ldd	r5, Y+4	; 0x04
    1220:	0e c0       	rjmp	.+28     	; 0x123e <CDC_Host_ConfigurePipes+0xd4>
			}

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1222:	eb 81       	ldd	r30, Y+3	; 0x03
    1224:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	87 ff       	sbrs	r24, 7
    122a:	06 c0       	rjmp	.+12     	; 0x1238 <CDC_Host_ConfigurePipes+0xce>
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    122c:	83 81       	ldd	r24, Z+3	; 0x03
    122e:	83 70       	andi	r24, 0x03	; 3
    1230:	83 30       	cpi	r24, 0x03	; 3
    1232:	21 f4       	brne	.+8      	; 0x123c <CDC_Host_ConfigurePipes+0xd2>
			  NotificationEndpoint = EndpointData;
    1234:	5f 01       	movw	r10, r30
    1236:	03 c0       	rjmp	.+6      	; 0x123e <CDC_Host_ConfigurePipes+0xd4>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
    1238:	6f 01       	movw	r12, r30
    123a:	01 c0       	rjmp	.+2      	; 0x123e <CDC_Host_ConfigurePipes+0xd4>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  NotificationEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
    123c:	7f 01       	movw	r14, r30
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
    123e:	e1 14       	cp	r14, r1
    1240:	f1 04       	cpc	r15, r1
    1242:	51 f2       	breq	.-108    	; 0x11d8 <CDC_Host_ConfigurePipes+0x6e>
    1244:	c1 14       	cp	r12, r1
    1246:	d1 04       	cpc	r13, r1
    1248:	39 f2       	breq	.-114    	; 0x11d8 <CDC_Host_ConfigurePipes+0x6e>
    124a:	a1 14       	cp	r10, r1
    124c:	b1 04       	cpc	r11, r1
    124e:	21 f2       	breq	.-120    	; 0x11d8 <CDC_Host_ConfigurePipes+0x6e>
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	CDCInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1250:	f7 01       	movw	r30, r14
    1252:	84 81       	ldd	r24, Z+4	; 0x04
    1254:	95 81       	ldd	r25, Z+5	; 0x05
    1256:	d8 01       	movw	r26, r16
    1258:	12 96       	adiw	r26, 0x02	; 2
    125a:	9c 93       	st	X, r25
    125c:	8e 93       	st	-X, r24
    125e:	11 97       	sbiw	r26, 0x01	; 1
	CDCInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	13 96       	adiw	r26, 0x03	; 3
    1264:	8c 93       	st	X, r24
    1266:	13 97       	sbiw	r26, 0x03	; 3
	CDCInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    1268:	22 e0       	ldi	r18, 0x02	; 2
    126a:	14 96       	adiw	r26, 0x04	; 4
    126c:	2c 93       	st	X, r18
    126e:	14 97       	sbiw	r26, 0x04	; 4

	CDCInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1270:	f6 01       	movw	r30, r12
    1272:	84 81       	ldd	r24, Z+4	; 0x04
    1274:	95 81       	ldd	r25, Z+5	; 0x05
    1276:	18 96       	adiw	r26, 0x08	; 8
    1278:	9c 93       	st	X, r25
    127a:	8e 93       	st	-X, r24
    127c:	17 97       	sbiw	r26, 0x07	; 7
	CDCInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	19 96       	adiw	r26, 0x09	; 9
    1282:	8c 93       	st	X, r24
    1284:	19 97       	sbiw	r26, 0x09	; 9
	CDCInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    1286:	1a 96       	adiw	r26, 0x0a	; 10
    1288:	2c 93       	st	X, r18

	CDCInterfaceInfo->Config.NotificationPipe.Size = le16_to_cpu(NotificationEndpoint->EndpointSize);
    128a:	d5 01       	movw	r26, r10
    128c:	14 96       	adiw	r26, 0x04	; 4
    128e:	8d 91       	ld	r24, X+
    1290:	9c 91       	ld	r25, X
    1292:	15 97       	sbiw	r26, 0x05	; 5
    1294:	f8 01       	movw	r30, r16
    1296:	96 87       	std	Z+14, r25	; 0x0e
    1298:	85 87       	std	Z+13, r24	; 0x0d
	CDCInterfaceInfo->Config.NotificationPipe.EndpointAddress = NotificationEndpoint->EndpointAddress;
    129a:	12 96       	adiw	r26, 0x02	; 2
    129c:	8c 91       	ld	r24, X
    129e:	87 87       	std	Z+15, r24	; 0x0f
	CDCInterfaceInfo->Config.NotificationPipe.Type = EP_TYPE_INTERRUPT;
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	80 8b       	std	Z+16, r24	; 0x10

	if (!(Pipe_ConfigurePipeTable(&CDCInterfaceInfo->Config.DataINPipe, 1)))
    12a4:	c8 01       	movw	r24, r16
    12a6:	61 e0       	ldi	r22, 0x01	; 1
    12a8:	8d db       	rcall	.-2278   	; 0x9c4 <Pipe_ConfigurePipeTable>
    12aa:	88 23       	and	r24, r24
    12ac:	f9 f0       	breq	.+62     	; 0x12ec <CDC_Host_ConfigurePipes+0x182>
	  return false;

	if (!(Pipe_ConfigurePipeTable(&CDCInterfaceInfo->Config.DataOUTPipe, 1)))
    12ae:	c8 01       	movw	r24, r16
    12b0:	06 96       	adiw	r24, 0x06	; 6
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	87 db       	rcall	.-2290   	; 0x9c4 <Pipe_ConfigurePipeTable>
    12b6:	88 23       	and	r24, r24
    12b8:	c9 f0       	breq	.+50     	; 0x12ec <CDC_Host_ConfigurePipes+0x182>
	  return false;

	if (!(Pipe_ConfigurePipeTable(&CDCInterfaceInfo->Config.NotificationPipe, 1)))
    12ba:	c8 01       	movw	r24, r16
    12bc:	0c 96       	adiw	r24, 0x0c	; 12
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	81 db       	rcall	.-2302   	; 0x9c4 <Pipe_ConfigurePipeTable>
    12c2:	88 23       	and	r24, r24
    12c4:	99 f0       	breq	.+38     	; 0x12ec <CDC_Host_ConfigurePipes+0x182>
	  return false;

	CDCInterfaceInfo->State.ControlInterfaceNumber = CDCControlInterface->InterfaceNumber;
    12c6:	d2 01       	movw	r26, r4
    12c8:	12 96       	adiw	r26, 0x02	; 2
    12ca:	8c 91       	ld	r24, X
    12cc:	12 97       	sbiw	r26, 0x02	; 2
    12ce:	f8 01       	movw	r30, r16
    12d0:	83 8b       	std	Z+19, r24	; 0x13
	CDCInterfaceInfo->State.ControlLineStates.HostToDevice = (CDC_CONTROL_LINE_OUT_RTS | CDC_CONTROL_LINE_OUT_DTR);
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	95 8b       	std	Z+21, r25	; 0x15
    12d8:	84 8b       	std	Z+20, r24	; 0x14
	CDCInterfaceInfo->State.ControlLineStates.DeviceToHost = (CDC_CONTROL_LINE_IN_DCD  | CDC_CONTROL_LINE_IN_DSR);
    12da:	97 8b       	std	Z+23, r25	; 0x17
    12dc:	86 8b       	std	Z+22, r24	; 0x16
	CDCInterfaceInfo->State.IsActive = true;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	82 8b       	std	Z+18, r24	; 0x12
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <CDC_Host_ConfigurePipes+0x182>
	USB_Descriptor_Interface_t* CDCControlInterface  = NULL;

	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return CDC_ENUMERROR_InvalidConfigDescriptor;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	03 c0       	rjmp	.+6      	; 0x12ee <CDC_Host_ConfigurePipes+0x184>
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
				                              DCOMP_CDC_Host_NextCDCControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return CDC_ENUMERROR_NoCompatibleInterfaceFound;
    12e8:	82 e0       	ldi	r24, 0x02	; 2
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <CDC_Host_ConfigurePipes+0x184>

	if (!(Pipe_ConfigurePipeTable(&CDCInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;

	if (!(Pipe_ConfigurePipeTable(&CDCInterfaceInfo->Config.NotificationPipe, 1)))
	  return false;
    12ec:	80 e0       	ldi	r24, 0x00	; 0
	CDCInterfaceInfo->State.ControlLineStates.HostToDevice = (CDC_CONTROL_LINE_OUT_RTS | CDC_CONTROL_LINE_OUT_DTR);
	CDCInterfaceInfo->State.ControlLineStates.DeviceToHost = (CDC_CONTROL_LINE_IN_DCD  | CDC_CONTROL_LINE_IN_DSR);
	CDCInterfaceInfo->State.IsActive = true;

	return CDC_ENUMERROR_NoError;
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
    1306:	bf 90       	pop	r11
    1308:	af 90       	pop	r10
    130a:	9f 90       	pop	r9
    130c:	8f 90       	pop	r8
    130e:	7f 90       	pop	r7
    1310:	6f 90       	pop	r6
    1312:	5f 90       	pop	r5
    1314:	4f 90       	pop	r4
    1316:	08 95       	ret

00001318 <CDC_Host_SetLineEncoding>:
	#endif
}

uint8_t CDC_Host_SetLineEncoding(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1318:	fc 01       	movw	r30, r24
    131a:	23 89       	ldd	r18, Z+19	; 0x13
    131c:	31 e2       	ldi	r19, 0x21	; 33
    131e:	30 93 35 01 	sts	0x0135, r19
    1322:	30 e2       	ldi	r19, 0x20	; 32
    1324:	30 93 36 01 	sts	0x0136, r19
    1328:	10 92 38 01 	sts	0x0138, r1
    132c:	10 92 37 01 	sts	0x0137, r1
    1330:	20 93 39 01 	sts	0x0139, r18
    1334:	10 92 3a 01 	sts	0x013A, r1
    1338:	27 e0       	ldi	r18, 0x07	; 7
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	30 93 3c 01 	sts	0x013C, r19
    1340:	20 93 3b 01 	sts	0x013B, r18
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1344:	10 92 a7 00 	sts	0x00A7, r1
		.wLength       = sizeof(CDCInterfaceInfo->State.LineEncoding),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(&CDCInterfaceInfo->State.LineEncoding);
    1348:	48 96       	adiw	r24, 0x18	; 24
}
    134a:	a6 cd       	rjmp	.-1204   	; 0xe98 <USB_Host_SendControlRequest>

0000134c <CDC_Host_BytesReceived>:

	return PIPE_READYWAIT_NoError;
}

uint16_t CDC_Host_BytesReceived(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    134c:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    134e:	80 91 3d 01 	lds	r24, 0x013D
    1352:	8b 30       	cpi	r24, 0x0B	; 11
    1354:	59 f5       	brne	.+86     	; 0x13ac <CDC_Host_BytesReceived+0x60>
    1356:	82 89       	ldd	r24, Z+18	; 0x12
    1358:	88 23       	and	r24, r24
    135a:	41 f1       	breq	.+80     	; 0x13ac <CDC_Host_BytesReceived+0x60>
    135c:	80 81       	ld	r24, Z
    135e:	8f 70       	andi	r24, 0x0F	; 15
    1360:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1364:	80 91 a9 00 	lds	r24, 0x00A9
    1368:	8f 7b       	andi	r24, 0xBF	; 191
    136a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    136e:	80 91 a6 00 	lds	r24, 0x00A6
	  return 0;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    1372:	80 ff       	sbrs	r24, 0
    1374:	16 c0       	rjmp	.+44     	; 0x13a2 <CDC_Host_BytesReceived+0x56>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1376:	80 91 f6 00 	lds	r24, 0x00F6
    137a:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (!(Pipe_BytesInPipe()))
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	31 f4       	brne	.+12     	; 0x138e <CDC_Host_BytesReceived+0x42>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1382:	80 91 a6 00 	lds	r24, 0x00A6
    1386:	8e 77       	andi	r24, 0x7E	; 126
    1388:	80 93 a6 00 	sts	0x00A6, r24
    138c:	0a c0       	rjmp	.+20     	; 0x13a2 <CDC_Host_BytesReceived+0x56>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    138e:	80 91 a9 00 	lds	r24, 0x00A9
    1392:	80 64       	ori	r24, 0x40	; 64
    1394:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1398:	20 91 f6 00 	lds	r18, 0x00F6
    139c:	30 91 f7 00 	lds	r19, 0x00F7
			return 0;
		}
		else
		{
			Pipe_Freeze();
			return Pipe_BytesInPipe();
    13a0:	07 c0       	rjmp	.+14     	; 0x13b0 <CDC_Host_BytesReceived+0x64>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13a2:	80 91 a9 00 	lds	r24, 0x00A9
    13a6:	80 64       	ori	r24, 0x40	; 64
    13a8:	80 93 a9 00 	sts	0x00A9, r24
}

uint16_t CDC_Host_BytesReceived(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return 0;
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
	{
		Pipe_Freeze();

		return 0;
	}
}
    13b0:	c9 01       	movw	r24, r18
    13b2:	08 95       	ret

000013b4 <CDC_Host_ReceiveByte>:

int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    13b4:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    13b6:	80 91 3d 01 	lds	r24, 0x013D
    13ba:	8b 30       	cpi	r24, 0x0B	; 11
    13bc:	81 f5       	brne	.+96     	; 0x141e <CDC_Host_ReceiveByte+0x6a>
    13be:	82 89       	ldd	r24, Z+18	; 0x12
    13c0:	88 23       	and	r24, r24
    13c2:	69 f1       	breq	.+90     	; 0x141e <CDC_Host_ReceiveByte+0x6a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13c4:	80 81       	ld	r24, Z
    13c6:	8f 70       	andi	r24, 0x0F	; 15
    13c8:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13cc:	80 91 a9 00 	lds	r24, 0x00A9
    13d0:	8f 7b       	andi	r24, 0xBF	; 191
    13d2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    13d6:	80 91 a6 00 	lds	r24, 0x00A6
	int16_t ReceivedByte = -1;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    13da:	80 ff       	sbrs	r24, 0
    13dc:	18 c0       	rjmp	.+48     	; 0x140e <CDC_Host_ReceiveByte+0x5a>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13de:	80 91 f6 00 	lds	r24, 0x00F6
    13e2:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (Pipe_BytesInPipe())
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	21 f0       	breq	.+8      	; 0x13f2 <CDC_Host_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    13ea:	20 91 af 00 	lds	r18, 0x00AF
		  ReceivedByte = Pipe_Read_8();
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <CDC_Host_ReceiveByte+0x42>
int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return -1;

	int16_t ReceivedByte = -1;
    13f2:	2f ef       	ldi	r18, 0xFF	; 255
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13f6:	80 91 f6 00 	lds	r24, 0x00F6
    13fa:	90 91 f7 00 	lds	r25, 0x00F7
	if (Pipe_IsINReceived())
	{
		if (Pipe_BytesInPipe())
		  ReceivedByte = Pipe_Read_8();

		if (!(Pipe_BytesInPipe()))
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	41 f4       	brne	.+16     	; 0x1412 <CDC_Host_ReceiveByte+0x5e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1402:	80 91 a6 00 	lds	r24, 0x00A6
    1406:	8e 77       	andi	r24, 0x7E	; 126
    1408:	80 93 a6 00 	sts	0x00A6, r24
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <CDC_Host_ReceiveByte+0x5e>
int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return -1;

	int16_t ReceivedByte = -1;
    140e:	2f ef       	ldi	r18, 0xFF	; 255
    1410:	3f ef       	ldi	r19, 0xFF	; 255

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1412:	80 91 a9 00 	lds	r24, 0x00A9
    1416:	80 64       	ori	r24, 0x40	; 64
    1418:	80 93 a9 00 	sts	0x00A9, r24
		  Pipe_ClearIN();
	}

	Pipe_Freeze();

	return ReceivedByte;
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <CDC_Host_ReceiveByte+0x6e>
}

int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return -1;
    141e:	2f ef       	ldi	r18, 0xFF	; 255
    1420:	3f ef       	ldi	r19, 0xFF	; 255
	}

	Pipe_Freeze();

	return ReceivedByte;
}
    1422:	c9 01       	movw	r24, r18
    1424:	08 95       	ret

00001426 <CDC_Host_Flush>:

uint8_t CDC_Host_Flush(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    1426:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    1428:	80 91 3d 01 	lds	r24, 0x013D
    142c:	8b 30       	cpi	r24, 0x0B	; 11
    142e:	51 f5       	brne	.+84     	; 0x1484 <CDC_Host_Flush+0x5e>
    1430:	82 89       	ldd	r24, Z+18	; 0x12
    1432:	88 23       	and	r24, r24
    1434:	39 f1       	breq	.+78     	; 0x1484 <CDC_Host_Flush+0x5e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1436:	86 81       	ldd	r24, Z+6	; 0x06
    1438:	8f 70       	andi	r24, 0x0F	; 15
    143a:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    143e:	80 91 a9 00 	lds	r24, 0x00A9
    1442:	8f 7b       	andi	r24, 0xBF	; 191
    1444:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1448:	80 91 f6 00 	lds	r24, 0x00F6
    144c:	90 91 f7 00 	lds	r25, 0x00F7
	uint8_t ErrorCode;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	d1 f0       	breq	.+52     	; 0x1488 <CDC_Host_Flush+0x62>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1454:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1458:	80 91 a6 00 	lds	r24, 0x00A6
    145c:	8b 77       	andi	r24, 0x7B	; 123
    145e:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    1462:	95 fd       	sbrc	r25, 5
    1464:	08 c0       	rjmp	.+16     	; 0x1476 <CDC_Host_Flush+0x50>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    1466:	0f db       	rcall	.-2530   	; 0xa86 <Pipe_WaitUntilReady>
    1468:	88 23       	and	r24, r24
    146a:	79 f4       	brne	.+30     	; 0x148a <CDC_Host_Flush+0x64>
    146c:	80 91 a6 00 	lds	r24, 0x00A6
    1470:	8b 77       	andi	r24, 0x7B	; 123
    1472:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1476:	80 91 a9 00 	lds	r24, 0x00A9
    147a:	80 64       	ori	r24, 0x40	; 64
    147c:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearOUT();
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	08 95       	ret
}

uint8_t CDC_Host_Flush(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	08 95       	ret

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
	  return PIPE_READYWAIT_NoError;
    1488:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
}
    148a:	08 95       	ret

0000148c <CDC_Host_USBTask>:

	return DESCRIPTOR_SEARCH_NotFound;
}

void CDC_Host_USBTask(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	28 97       	sbiw	r28, 0x08	; 8
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    14a6:	80 91 3d 01 	lds	r24, 0x013D
    14aa:	8b 30       	cpi	r24, 0x0B	; 11
    14ac:	c9 f5       	brne	.+114    	; 0x1520 <CDC_Host_USBTask+0x94>
    14ae:	f8 01       	movw	r30, r16
    14b0:	82 89       	ldd	r24, Z+18	; 0x12
    14b2:	88 23       	and	r24, r24
    14b4:	a9 f1       	breq	.+106    	; 0x1520 <CDC_Host_USBTask+0x94>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14b6:	84 85       	ldd	r24, Z+12	; 0x0c
    14b8:	8f 70       	andi	r24, 0x0F	; 15
    14ba:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14be:	80 91 a9 00 	lds	r24, 0x00A9
    14c2:	8f 7b       	andi	r24, 0xBF	; 191
    14c4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    14c8:	80 91 a6 00 	lds	r24, 0x00A6
	  return;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.NotificationPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    14cc:	80 ff       	sbrs	r24, 0
    14ce:	21 c0       	rjmp	.+66     	; 0x1512 <CDC_Host_USBTask+0x86>
	{
		USB_Request_Header_t Notification;
		Pipe_Read_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
    14d0:	ce 01       	movw	r24, r28
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	68 e0       	ldi	r22, 0x08	; 8
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	a9 d9       	rcall	.-3246   	; 0x830 <Pipe_Read_Stream_LE>

		if ((Notification.bRequest      == CDC_NOTIF_SerialState) &&
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	80 32       	cpi	r24, 0x20	; 32
    14e2:	91 f4       	brne	.+36     	; 0x1508 <CDC_Host_USBTask+0x7c>
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	81 3a       	cpi	r24, 0xA1	; 161
    14e8:	79 f4       	brne	.+30     	; 0x1508 <CDC_Host_USBTask+0x7c>
		    (Notification.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)))
		{
			Pipe_Read_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
    14ea:	c8 01       	movw	r24, r16
    14ec:	46 96       	adiw	r24, 0x16	; 22
    14ee:	62 e0       	ldi	r22, 0x02	; 2
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	9c d9       	rcall	.-3272   	; 0x830 <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    14f8:	80 91 a6 00 	lds	r24, 0x00A6
    14fc:	8e 77       	andi	r24, 0x7E	; 126
    14fe:	80 93 a6 00 	sts	0x00A6, r24
			                    sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
			                    NULL);

			Pipe_ClearIN();

			EVENT_CDC_Host_ControLineStateChanged(CDCInterfaceInfo);
    1502:	c8 01       	movw	r24, r16
    1504:	18 d0       	rcall	.+48     	; 0x1536 <CDC_Host_Event_Stub>
    1506:	05 c0       	rjmp	.+10     	; 0x1512 <CDC_Host_USBTask+0x86>
    1508:	80 91 a6 00 	lds	r24, 0x00A6
    150c:	8e 77       	andi	r24, 0x7E	; 126
    150e:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1512:	80 91 a9 00 	lds	r24, 0x00A9
    1516:	80 64       	ori	r24, 0x40	; 64
    1518:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_Freeze();

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Host_Flush(CDCInterfaceInfo);
    151c:	c8 01       	movw	r24, r16
    151e:	83 df       	rcall	.-250    	; 0x1426 <CDC_Host_Flush>
	#endif
}
    1520:	28 96       	adiw	r28, 0x08	; 8
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	08 95       	ret

00001536 <CDC_Host_Event_Stub>:
#endif

void CDC_Host_Event_Stub(void)
{

}
    1536:	08 95       	ret

00001538 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1538:	90 91 c8 00 	lds	r25, 0x00C8
    153c:	95 ff       	sbrs	r25, 5
    153e:	fc cf       	rjmp	.-8      	; 0x1538 <Serial_putchar>
				UDR1 = DataByte;
    1540:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	08 95       	ret

0000154a <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    154a:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    154e:	87 ff       	sbrs	r24, 7
    1550:	08 c0       	rjmp	.+16     	; 0x1562 <Serial_getchar+0x18>
    1552:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1556:	87 ff       	sbrs	r24, 7
    1558:	07 c0       	rjmp	.+14     	; 0x1568 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    155a:	20 91 ce 00 	lds	r18, 0x00CE
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	05 c0       	rjmp	.+10     	; 0x156c <Serial_getchar+0x22>
	  return _FDEV_EOF;
    1562:	2e ef       	ldi	r18, 0xFE	; 254
    1564:	3f ef       	ldi	r19, 0xFF	; 255
    1566:	02 c0       	rjmp	.+4      	; 0x156c <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1568:	2f ef       	ldi	r18, 0xFF	; 255
    156a:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    156c:	c9 01       	movw	r24, r18
    156e:	08 95       	ret

00001570 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1570:	fc 01       	movw	r30, r24
	if (!(Stream))
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	51 f4       	brne	.+20     	; 0x158a <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1576:	ee e3       	ldi	r30, 0x3E	; 62
    1578:	f1 e0       	ldi	r31, 0x01	; 1
    157a:	f0 93 4d 01 	sts	0x014D, r31
    157e:	e0 93 4c 01 	sts	0x014C, r30
		stdout = Stream;
    1582:	f0 93 4f 01 	sts	0x014F, r31
    1586:	e0 93 4e 01 	sts	0x014E, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    158a:	8e e0       	ldi	r24, 0x0E	; 14
    158c:	df 01       	movw	r26, r30
    158e:	1d 92       	st	X+, r1
    1590:	8a 95       	dec	r24
    1592:	e9 f7       	brne	.-6      	; 0x158e <Serial_CreateStream+0x1e>
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	83 83       	std	Z+3, r24	; 0x03
    1598:	8c e9       	ldi	r24, 0x9C	; 156
    159a:	9a e0       	ldi	r25, 0x0A	; 10
    159c:	91 87       	std	Z+9, r25	; 0x09
    159e:	80 87       	std	Z+8, r24	; 0x08
    15a0:	85 ea       	ldi	r24, 0xA5	; 165
    15a2:	9a e0       	ldi	r25, 0x0A	; 10
    15a4:	93 87       	std	Z+11, r25	; 0x0b
    15a6:	82 87       	std	Z+10, r24	; 0x0a
}
    15a8:	08 95       	ret

000015aa <fputc>:
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	8c 01       	movw	r16, r24
    15b4:	eb 01       	movw	r28, r22
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	81 ff       	sbrs	r24, 1
    15ba:	1b c0       	rjmp	.+54     	; 0x15f2 <fputc+0x48>
    15bc:	82 ff       	sbrs	r24, 2
    15be:	0d c0       	rjmp	.+26     	; 0x15da <fputc+0x30>
    15c0:	2e 81       	ldd	r18, Y+6	; 0x06
    15c2:	3f 81       	ldd	r19, Y+7	; 0x07
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	28 17       	cp	r18, r24
    15ca:	39 07       	cpc	r19, r25
    15cc:	64 f4       	brge	.+24     	; 0x15e6 <fputc+0x3c>
    15ce:	e8 81       	ld	r30, Y
    15d0:	f9 81       	ldd	r31, Y+1	; 0x01
    15d2:	01 93       	st	Z+, r16
    15d4:	f9 83       	std	Y+1, r31	; 0x01
    15d6:	e8 83       	st	Y, r30
    15d8:	06 c0       	rjmp	.+12     	; 0x15e6 <fputc+0x3c>
    15da:	e8 85       	ldd	r30, Y+8	; 0x08
    15dc:	f9 85       	ldd	r31, Y+9	; 0x09
    15de:	80 2f       	mov	r24, r16
    15e0:	09 95       	icall
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	31 f4       	brne	.+12     	; 0x15f2 <fputc+0x48>
    15e6:	8e 81       	ldd	r24, Y+6	; 0x06
    15e8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	9f 83       	std	Y+7, r25	; 0x07
    15ee:	8e 83       	std	Y+6, r24	; 0x06
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <fputc+0x4c>
    15f2:	0f ef       	ldi	r16, 0xFF	; 255
    15f4:	1f ef       	ldi	r17, 0xFF	; 255
    15f6:	c8 01       	movw	r24, r16
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	08 95       	ret

00001602 <printf_P>:
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	fe 01       	movw	r30, r28
    160c:	35 96       	adiw	r30, 0x05	; 5
    160e:	61 91       	ld	r22, Z+
    1610:	71 91       	ld	r23, Z+
    1612:	80 91 4e 01 	lds	r24, 0x014E
    1616:	90 91 4f 01 	lds	r25, 0x014F
    161a:	dc 01       	movw	r26, r24
    161c:	13 96       	adiw	r26, 0x03	; 3
    161e:	2c 91       	ld	r18, X
    1620:	13 97       	sbiw	r26, 0x03	; 3
    1622:	28 60       	ori	r18, 0x08	; 8
    1624:	13 96       	adiw	r26, 0x03	; 3
    1626:	2c 93       	st	X, r18
    1628:	af 01       	movw	r20, r30
    162a:	42 d0       	rcall	.+132    	; 0x16b0 <vfprintf>
    162c:	e0 91 4e 01 	lds	r30, 0x014E
    1630:	f0 91 4f 01 	lds	r31, 0x014F
    1634:	23 81       	ldd	r18, Z+3	; 0x03
    1636:	27 7f       	andi	r18, 0xF7	; 247
    1638:	23 83       	std	Z+3, r18	; 0x03
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <puts_P>:
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	8c 01       	movw	r16, r24
    164e:	e0 91 4e 01 	lds	r30, 0x014E
    1652:	f0 91 4f 01 	lds	r31, 0x014F
    1656:	83 81       	ldd	r24, Z+3	; 0x03
    1658:	81 ff       	sbrs	r24, 1
    165a:	20 c0       	rjmp	.+64     	; 0x169c <puts_P+0x5c>
    165c:	c0 e0       	ldi	r28, 0x00	; 0
    165e:	d0 e0       	ldi	r29, 0x00	; 0
    1660:	0c c0       	rjmp	.+24     	; 0x167a <puts_P+0x3a>
    1662:	db 01       	movw	r26, r22
    1664:	18 96       	adiw	r26, 0x08	; 8
    1666:	ed 91       	ld	r30, X+
    1668:	fc 91       	ld	r31, X
    166a:	19 97       	sbiw	r26, 0x09	; 9
    166c:	09 95       	icall
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	11 f0       	breq	.+4      	; 0x1676 <puts_P+0x36>
    1672:	cf ef       	ldi	r28, 0xFF	; 255
    1674:	df ef       	ldi	r29, 0xFF	; 255
    1676:	0f 5f       	subi	r16, 0xFF	; 255
    1678:	1f 4f       	sbci	r17, 0xFF	; 255
    167a:	f8 01       	movw	r30, r16
    167c:	84 91       	lpm	r24, Z+
    167e:	60 91 4e 01 	lds	r22, 0x014E
    1682:	70 91 4f 01 	lds	r23, 0x014F
    1686:	88 23       	and	r24, r24
    1688:	61 f7       	brne	.-40     	; 0x1662 <puts_P+0x22>
    168a:	db 01       	movw	r26, r22
    168c:	18 96       	adiw	r26, 0x08	; 8
    168e:	ed 91       	ld	r30, X+
    1690:	fc 91       	ld	r31, X
    1692:	19 97       	sbiw	r26, 0x09	; 9
    1694:	8a e0       	ldi	r24, 0x0A	; 10
    1696:	09 95       	icall
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	11 f0       	breq	.+4      	; 0x16a0 <puts_P+0x60>
    169c:	cf ef       	ldi	r28, 0xFF	; 255
    169e:	df ef       	ldi	r29, 0xFF	; 255
    16a0:	ce 01       	movw	r24, r28
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	08 95       	ret

000016b0 <vfprintf>:
    16b0:	2f 92       	push	r2
    16b2:	3f 92       	push	r3
    16b4:	4f 92       	push	r4
    16b6:	5f 92       	push	r5
    16b8:	6f 92       	push	r6
    16ba:	7f 92       	push	r7
    16bc:	8f 92       	push	r8
    16be:	9f 92       	push	r9
    16c0:	af 92       	push	r10
    16c2:	bf 92       	push	r11
    16c4:	cf 92       	push	r12
    16c6:	df 92       	push	r13
    16c8:	ef 92       	push	r14
    16ca:	ff 92       	push	r15
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	2c 97       	sbiw	r28, 0x0c	; 12
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	6c 01       	movw	r12, r24
    16e6:	1b 01       	movw	r2, r22
    16e8:	8a 01       	movw	r16, r20
    16ea:	fc 01       	movw	r30, r24
    16ec:	17 82       	std	Z+7, r1	; 0x07
    16ee:	16 82       	std	Z+6, r1	; 0x06
    16f0:	83 81       	ldd	r24, Z+3	; 0x03
    16f2:	81 ff       	sbrs	r24, 1
    16f4:	c4 c1       	rjmp	.+904    	; 0x1a7e <vfprintf+0x3ce>
    16f6:	2e 01       	movw	r4, r28
    16f8:	08 94       	sec
    16fa:	41 1c       	adc	r4, r1
    16fc:	51 1c       	adc	r5, r1
    16fe:	f6 01       	movw	r30, r12
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	f1 01       	movw	r30, r2
    1704:	93 fd       	sbrc	r25, 3
    1706:	85 91       	lpm	r24, Z+
    1708:	93 ff       	sbrs	r25, 3
    170a:	81 91       	ld	r24, Z+
    170c:	1f 01       	movw	r2, r30
    170e:	88 23       	and	r24, r24
    1710:	09 f4       	brne	.+2      	; 0x1714 <vfprintf+0x64>
    1712:	b1 c1       	rjmp	.+866    	; 0x1a76 <vfprintf+0x3c6>
    1714:	85 32       	cpi	r24, 0x25	; 37
    1716:	39 f4       	brne	.+14     	; 0x1726 <vfprintf+0x76>
    1718:	93 fd       	sbrc	r25, 3
    171a:	85 91       	lpm	r24, Z+
    171c:	93 ff       	sbrs	r25, 3
    171e:	81 91       	ld	r24, Z+
    1720:	1f 01       	movw	r2, r30
    1722:	85 32       	cpi	r24, 0x25	; 37
    1724:	21 f4       	brne	.+8      	; 0x172e <vfprintf+0x7e>
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	b6 01       	movw	r22, r12
    172a:	3f df       	rcall	.-386    	; 0x15aa <fputc>
    172c:	e8 cf       	rjmp	.-48     	; 0x16fe <vfprintf+0x4e>
    172e:	ee 24       	eor	r14, r14
    1730:	ff 24       	eor	r15, r15
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	20 32       	cpi	r18, 0x20	; 32
    1736:	b0 f4       	brcc	.+44     	; 0x1764 <vfprintf+0xb4>
    1738:	8b 32       	cpi	r24, 0x2B	; 43
    173a:	69 f0       	breq	.+26     	; 0x1756 <vfprintf+0xa6>
    173c:	8c 32       	cpi	r24, 0x2C	; 44
    173e:	28 f4       	brcc	.+10     	; 0x174a <vfprintf+0x9a>
    1740:	80 32       	cpi	r24, 0x20	; 32
    1742:	51 f0       	breq	.+20     	; 0x1758 <vfprintf+0xa8>
    1744:	83 32       	cpi	r24, 0x23	; 35
    1746:	71 f4       	brne	.+28     	; 0x1764 <vfprintf+0xb4>
    1748:	0b c0       	rjmp	.+22     	; 0x1760 <vfprintf+0xb0>
    174a:	8d 32       	cpi	r24, 0x2D	; 45
    174c:	39 f0       	breq	.+14     	; 0x175c <vfprintf+0xac>
    174e:	80 33       	cpi	r24, 0x30	; 48
    1750:	49 f4       	brne	.+18     	; 0x1764 <vfprintf+0xb4>
    1752:	21 60       	ori	r18, 0x01	; 1
    1754:	2c c0       	rjmp	.+88     	; 0x17ae <vfprintf+0xfe>
    1756:	22 60       	ori	r18, 0x02	; 2
    1758:	24 60       	ori	r18, 0x04	; 4
    175a:	29 c0       	rjmp	.+82     	; 0x17ae <vfprintf+0xfe>
    175c:	28 60       	ori	r18, 0x08	; 8
    175e:	27 c0       	rjmp	.+78     	; 0x17ae <vfprintf+0xfe>
    1760:	20 61       	ori	r18, 0x10	; 16
    1762:	25 c0       	rjmp	.+74     	; 0x17ae <vfprintf+0xfe>
    1764:	27 fd       	sbrc	r18, 7
    1766:	2c c0       	rjmp	.+88     	; 0x17c0 <vfprintf+0x110>
    1768:	38 2f       	mov	r19, r24
    176a:	30 53       	subi	r19, 0x30	; 48
    176c:	3a 30       	cpi	r19, 0x0A	; 10
    176e:	98 f4       	brcc	.+38     	; 0x1796 <vfprintf+0xe6>
    1770:	26 ff       	sbrs	r18, 6
    1772:	08 c0       	rjmp	.+16     	; 0x1784 <vfprintf+0xd4>
    1774:	8e 2d       	mov	r24, r14
    1776:	88 0f       	add	r24, r24
    1778:	e8 2e       	mov	r14, r24
    177a:	ee 0c       	add	r14, r14
    177c:	ee 0c       	add	r14, r14
    177e:	e8 0e       	add	r14, r24
    1780:	e3 0e       	add	r14, r19
    1782:	15 c0       	rjmp	.+42     	; 0x17ae <vfprintf+0xfe>
    1784:	8f 2d       	mov	r24, r15
    1786:	88 0f       	add	r24, r24
    1788:	f8 2e       	mov	r15, r24
    178a:	ff 0c       	add	r15, r15
    178c:	ff 0c       	add	r15, r15
    178e:	f8 0e       	add	r15, r24
    1790:	f3 0e       	add	r15, r19
    1792:	20 62       	ori	r18, 0x20	; 32
    1794:	0c c0       	rjmp	.+24     	; 0x17ae <vfprintf+0xfe>
    1796:	8e 32       	cpi	r24, 0x2E	; 46
    1798:	21 f4       	brne	.+8      	; 0x17a2 <vfprintf+0xf2>
    179a:	26 fd       	sbrc	r18, 6
    179c:	6c c1       	rjmp	.+728    	; 0x1a76 <vfprintf+0x3c6>
    179e:	20 64       	ori	r18, 0x40	; 64
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <vfprintf+0xfe>
    17a2:	8c 36       	cpi	r24, 0x6C	; 108
    17a4:	11 f4       	brne	.+4      	; 0x17aa <vfprintf+0xfa>
    17a6:	20 68       	ori	r18, 0x80	; 128
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <vfprintf+0xfe>
    17aa:	88 36       	cpi	r24, 0x68	; 104
    17ac:	49 f4       	brne	.+18     	; 0x17c0 <vfprintf+0x110>
    17ae:	f1 01       	movw	r30, r2
    17b0:	93 fd       	sbrc	r25, 3
    17b2:	85 91       	lpm	r24, Z+
    17b4:	93 ff       	sbrs	r25, 3
    17b6:	81 91       	ld	r24, Z+
    17b8:	1f 01       	movw	r2, r30
    17ba:	88 23       	and	r24, r24
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <vfprintf+0x110>
    17be:	ba cf       	rjmp	.-140    	; 0x1734 <vfprintf+0x84>
    17c0:	98 2f       	mov	r25, r24
    17c2:	95 54       	subi	r25, 0x45	; 69
    17c4:	93 30       	cpi	r25, 0x03	; 3
    17c6:	18 f0       	brcs	.+6      	; 0x17ce <vfprintf+0x11e>
    17c8:	90 52       	subi	r25, 0x20	; 32
    17ca:	93 30       	cpi	r25, 0x03	; 3
    17cc:	28 f4       	brcc	.+10     	; 0x17d8 <vfprintf+0x128>
    17ce:	0c 5f       	subi	r16, 0xFC	; 252
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	ff e3       	ldi	r31, 0x3F	; 63
    17d4:	f9 83       	std	Y+1, r31	; 0x01
    17d6:	0d c0       	rjmp	.+26     	; 0x17f2 <vfprintf+0x142>
    17d8:	83 36       	cpi	r24, 0x63	; 99
    17da:	31 f0       	breq	.+12     	; 0x17e8 <vfprintf+0x138>
    17dc:	83 37       	cpi	r24, 0x73	; 115
    17de:	71 f0       	breq	.+28     	; 0x17fc <vfprintf+0x14c>
    17e0:	83 35       	cpi	r24, 0x53	; 83
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <vfprintf+0x136>
    17e4:	5c c0       	rjmp	.+184    	; 0x189e <vfprintf+0x1ee>
    17e6:	21 c0       	rjmp	.+66     	; 0x182a <vfprintf+0x17a>
    17e8:	f8 01       	movw	r30, r16
    17ea:	80 81       	ld	r24, Z
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	0e 5f       	subi	r16, 0xFE	; 254
    17f0:	1f 4f       	sbci	r17, 0xFF	; 255
    17f2:	42 01       	movw	r8, r4
    17f4:	71 e0       	ldi	r23, 0x01	; 1
    17f6:	a7 2e       	mov	r10, r23
    17f8:	b1 2c       	mov	r11, r1
    17fa:	15 c0       	rjmp	.+42     	; 0x1826 <vfprintf+0x176>
    17fc:	62 e0       	ldi	r22, 0x02	; 2
    17fe:	66 2e       	mov	r6, r22
    1800:	71 2c       	mov	r7, r1
    1802:	60 0e       	add	r6, r16
    1804:	71 1e       	adc	r7, r17
    1806:	f8 01       	movw	r30, r16
    1808:	80 80       	ld	r8, Z
    180a:	91 80       	ldd	r9, Z+1	; 0x01
    180c:	26 ff       	sbrs	r18, 6
    180e:	03 c0       	rjmp	.+6      	; 0x1816 <vfprintf+0x166>
    1810:	6e 2d       	mov	r22, r14
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	02 c0       	rjmp	.+4      	; 0x181a <vfprintf+0x16a>
    1816:	6f ef       	ldi	r22, 0xFF	; 255
    1818:	7f ef       	ldi	r23, 0xFF	; 255
    181a:	c4 01       	movw	r24, r8
    181c:	2c 87       	std	Y+12, r18	; 0x0c
    181e:	56 d1       	rcall	.+684    	; 0x1acc <strnlen>
    1820:	5c 01       	movw	r10, r24
    1822:	83 01       	movw	r16, r6
    1824:	2c 85       	ldd	r18, Y+12	; 0x0c
    1826:	2f 77       	andi	r18, 0x7F	; 127
    1828:	16 c0       	rjmp	.+44     	; 0x1856 <vfprintf+0x1a6>
    182a:	52 e0       	ldi	r21, 0x02	; 2
    182c:	65 2e       	mov	r6, r21
    182e:	71 2c       	mov	r7, r1
    1830:	60 0e       	add	r6, r16
    1832:	71 1e       	adc	r7, r17
    1834:	f8 01       	movw	r30, r16
    1836:	80 80       	ld	r8, Z
    1838:	91 80       	ldd	r9, Z+1	; 0x01
    183a:	26 ff       	sbrs	r18, 6
    183c:	03 c0       	rjmp	.+6      	; 0x1844 <vfprintf+0x194>
    183e:	6e 2d       	mov	r22, r14
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <vfprintf+0x198>
    1844:	6f ef       	ldi	r22, 0xFF	; 255
    1846:	7f ef       	ldi	r23, 0xFF	; 255
    1848:	c4 01       	movw	r24, r8
    184a:	2c 87       	std	Y+12, r18	; 0x0c
    184c:	34 d1       	rcall	.+616    	; 0x1ab6 <strnlen_P>
    184e:	5c 01       	movw	r10, r24
    1850:	2c 85       	ldd	r18, Y+12	; 0x0c
    1852:	20 68       	ori	r18, 0x80	; 128
    1854:	83 01       	movw	r16, r6
    1856:	23 fd       	sbrc	r18, 3
    1858:	1e c0       	rjmp	.+60     	; 0x1896 <vfprintf+0x1e6>
    185a:	07 c0       	rjmp	.+14     	; 0x186a <vfprintf+0x1ba>
    185c:	80 e2       	ldi	r24, 0x20	; 32
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	b6 01       	movw	r22, r12
    1862:	2c 87       	std	Y+12, r18	; 0x0c
    1864:	a2 de       	rcall	.-700    	; 0x15aa <fputc>
    1866:	fa 94       	dec	r15
    1868:	2c 85       	ldd	r18, Y+12	; 0x0c
    186a:	8f 2d       	mov	r24, r15
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	a8 16       	cp	r10, r24
    1870:	b9 06       	cpc	r11, r25
    1872:	a0 f3       	brcs	.-24     	; 0x185c <vfprintf+0x1ac>
    1874:	10 c0       	rjmp	.+32     	; 0x1896 <vfprintf+0x1e6>
    1876:	f4 01       	movw	r30, r8
    1878:	27 fd       	sbrc	r18, 7
    187a:	85 91       	lpm	r24, Z+
    187c:	27 ff       	sbrs	r18, 7
    187e:	81 91       	ld	r24, Z+
    1880:	4f 01       	movw	r8, r30
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	b6 01       	movw	r22, r12
    1886:	2c 87       	std	Y+12, r18	; 0x0c
    1888:	90 de       	rcall	.-736    	; 0x15aa <fputc>
    188a:	2c 85       	ldd	r18, Y+12	; 0x0c
    188c:	f1 10       	cpse	r15, r1
    188e:	fa 94       	dec	r15
    1890:	08 94       	sec
    1892:	a1 08       	sbc	r10, r1
    1894:	b1 08       	sbc	r11, r1
    1896:	a1 14       	cp	r10, r1
    1898:	b1 04       	cpc	r11, r1
    189a:	69 f7       	brne	.-38     	; 0x1876 <vfprintf+0x1c6>
    189c:	e9 c0       	rjmp	.+466    	; 0x1a70 <vfprintf+0x3c0>
    189e:	84 36       	cpi	r24, 0x64	; 100
    18a0:	11 f0       	breq	.+4      	; 0x18a6 <vfprintf+0x1f6>
    18a2:	89 36       	cpi	r24, 0x69	; 105
    18a4:	41 f5       	brne	.+80     	; 0x18f6 <vfprintf+0x246>
    18a6:	27 ff       	sbrs	r18, 7
    18a8:	08 c0       	rjmp	.+16     	; 0x18ba <vfprintf+0x20a>
    18aa:	f8 01       	movw	r30, r16
    18ac:	60 81       	ld	r22, Z
    18ae:	71 81       	ldd	r23, Z+1	; 0x01
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	93 81       	ldd	r25, Z+3	; 0x03
    18b4:	0c 5f       	subi	r16, 0xFC	; 252
    18b6:	1f 4f       	sbci	r17, 0xFF	; 255
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <vfprintf+0x21c>
    18ba:	f8 01       	movw	r30, r16
    18bc:	60 81       	ld	r22, Z
    18be:	71 81       	ldd	r23, Z+1	; 0x01
    18c0:	88 27       	eor	r24, r24
    18c2:	77 fd       	sbrc	r23, 7
    18c4:	80 95       	com	r24
    18c6:	98 2f       	mov	r25, r24
    18c8:	0e 5f       	subi	r16, 0xFE	; 254
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
    18cc:	4f e6       	ldi	r20, 0x6F	; 111
    18ce:	b4 2e       	mov	r11, r20
    18d0:	b2 22       	and	r11, r18
    18d2:	97 ff       	sbrs	r25, 7
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <vfprintf+0x238>
    18d6:	90 95       	com	r25
    18d8:	80 95       	com	r24
    18da:	70 95       	com	r23
    18dc:	61 95       	neg	r22
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	8f 4f       	sbci	r24, 0xFF	; 255
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	f0 e8       	ldi	r31, 0x80	; 128
    18e6:	bf 2a       	or	r11, r31
    18e8:	a2 01       	movw	r20, r4
    18ea:	2a e0       	ldi	r18, 0x0A	; 10
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	f9 d0       	rcall	.+498    	; 0x1ae2 <__ultoa_invert>
    18f0:	78 2e       	mov	r7, r24
    18f2:	74 18       	sub	r7, r4
    18f4:	44 c0       	rjmp	.+136    	; 0x197e <vfprintf+0x2ce>
    18f6:	85 37       	cpi	r24, 0x75	; 117
    18f8:	31 f4       	brne	.+12     	; 0x1906 <vfprintf+0x256>
    18fa:	3f ee       	ldi	r19, 0xEF	; 239
    18fc:	b3 2e       	mov	r11, r19
    18fe:	b2 22       	and	r11, r18
    1900:	2a e0       	ldi	r18, 0x0A	; 10
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	25 c0       	rjmp	.+74     	; 0x1950 <vfprintf+0x2a0>
    1906:	99 ef       	ldi	r25, 0xF9	; 249
    1908:	b9 2e       	mov	r11, r25
    190a:	b2 22       	and	r11, r18
    190c:	8f 36       	cpi	r24, 0x6F	; 111
    190e:	c1 f0       	breq	.+48     	; 0x1940 <vfprintf+0x290>
    1910:	80 37       	cpi	r24, 0x70	; 112
    1912:	20 f4       	brcc	.+8      	; 0x191c <vfprintf+0x26c>
    1914:	88 35       	cpi	r24, 0x58	; 88
    1916:	09 f0       	breq	.+2      	; 0x191a <vfprintf+0x26a>
    1918:	ae c0       	rjmp	.+348    	; 0x1a76 <vfprintf+0x3c6>
    191a:	0d c0       	rjmp	.+26     	; 0x1936 <vfprintf+0x286>
    191c:	80 37       	cpi	r24, 0x70	; 112
    191e:	21 f0       	breq	.+8      	; 0x1928 <vfprintf+0x278>
    1920:	88 37       	cpi	r24, 0x78	; 120
    1922:	09 f0       	breq	.+2      	; 0x1926 <vfprintf+0x276>
    1924:	a8 c0       	rjmp	.+336    	; 0x1a76 <vfprintf+0x3c6>
    1926:	02 c0       	rjmp	.+4      	; 0x192c <vfprintf+0x27c>
    1928:	20 e1       	ldi	r18, 0x10	; 16
    192a:	b2 2a       	or	r11, r18
    192c:	b4 fe       	sbrs	r11, 4
    192e:	0b c0       	rjmp	.+22     	; 0x1946 <vfprintf+0x296>
    1930:	84 e0       	ldi	r24, 0x04	; 4
    1932:	b8 2a       	or	r11, r24
    1934:	08 c0       	rjmp	.+16     	; 0x1946 <vfprintf+0x296>
    1936:	b4 fe       	sbrs	r11, 4
    1938:	09 c0       	rjmp	.+18     	; 0x194c <vfprintf+0x29c>
    193a:	e6 e0       	ldi	r30, 0x06	; 6
    193c:	be 2a       	or	r11, r30
    193e:	06 c0       	rjmp	.+12     	; 0x194c <vfprintf+0x29c>
    1940:	28 e0       	ldi	r18, 0x08	; 8
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	05 c0       	rjmp	.+10     	; 0x1950 <vfprintf+0x2a0>
    1946:	20 e1       	ldi	r18, 0x10	; 16
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <vfprintf+0x2a0>
    194c:	20 e1       	ldi	r18, 0x10	; 16
    194e:	32 e0       	ldi	r19, 0x02	; 2
    1950:	b7 fe       	sbrs	r11, 7
    1952:	08 c0       	rjmp	.+16     	; 0x1964 <vfprintf+0x2b4>
    1954:	f8 01       	movw	r30, r16
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	0c 5f       	subi	r16, 0xFC	; 252
    1960:	1f 4f       	sbci	r17, 0xFF	; 255
    1962:	07 c0       	rjmp	.+14     	; 0x1972 <vfprintf+0x2c2>
    1964:	f8 01       	movw	r30, r16
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 5f       	subi	r16, 0xFE	; 254
    1970:	1f 4f       	sbci	r17, 0xFF	; 255
    1972:	a2 01       	movw	r20, r4
    1974:	b6 d0       	rcall	.+364    	; 0x1ae2 <__ultoa_invert>
    1976:	78 2e       	mov	r7, r24
    1978:	74 18       	sub	r7, r4
    197a:	ff e7       	ldi	r31, 0x7F	; 127
    197c:	bf 22       	and	r11, r31
    197e:	b6 fe       	sbrs	r11, 6
    1980:	0b c0       	rjmp	.+22     	; 0x1998 <vfprintf+0x2e8>
    1982:	2e ef       	ldi	r18, 0xFE	; 254
    1984:	b2 22       	and	r11, r18
    1986:	7e 14       	cp	r7, r14
    1988:	38 f4       	brcc	.+14     	; 0x1998 <vfprintf+0x2e8>
    198a:	b4 fe       	sbrs	r11, 4
    198c:	07 c0       	rjmp	.+14     	; 0x199c <vfprintf+0x2ec>
    198e:	b2 fc       	sbrc	r11, 2
    1990:	05 c0       	rjmp	.+10     	; 0x199c <vfprintf+0x2ec>
    1992:	8f ee       	ldi	r24, 0xEF	; 239
    1994:	b8 22       	and	r11, r24
    1996:	02 c0       	rjmp	.+4      	; 0x199c <vfprintf+0x2ec>
    1998:	a7 2c       	mov	r10, r7
    199a:	01 c0       	rjmp	.+2      	; 0x199e <vfprintf+0x2ee>
    199c:	ae 2c       	mov	r10, r14
    199e:	8b 2d       	mov	r24, r11
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	b4 fe       	sbrs	r11, 4
    19a4:	0d c0       	rjmp	.+26     	; 0x19c0 <vfprintf+0x310>
    19a6:	fe 01       	movw	r30, r28
    19a8:	e7 0d       	add	r30, r7
    19aa:	f1 1d       	adc	r31, r1
    19ac:	20 81       	ld	r18, Z
    19ae:	20 33       	cpi	r18, 0x30	; 48
    19b0:	19 f4       	brne	.+6      	; 0x19b8 <vfprintf+0x308>
    19b2:	e9 ee       	ldi	r30, 0xE9	; 233
    19b4:	be 22       	and	r11, r30
    19b6:	09 c0       	rjmp	.+18     	; 0x19ca <vfprintf+0x31a>
    19b8:	a3 94       	inc	r10
    19ba:	b2 fe       	sbrs	r11, 2
    19bc:	06 c0       	rjmp	.+12     	; 0x19ca <vfprintf+0x31a>
    19be:	04 c0       	rjmp	.+8      	; 0x19c8 <vfprintf+0x318>
    19c0:	86 78       	andi	r24, 0x86	; 134
    19c2:	90 70       	andi	r25, 0x00	; 0
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	09 f0       	breq	.+2      	; 0x19ca <vfprintf+0x31a>
    19c8:	a3 94       	inc	r10
    19ca:	8b 2c       	mov	r8, r11
    19cc:	99 24       	eor	r9, r9
    19ce:	b3 fc       	sbrc	r11, 3
    19d0:	13 c0       	rjmp	.+38     	; 0x19f8 <vfprintf+0x348>
    19d2:	b0 fe       	sbrs	r11, 0
    19d4:	0e c0       	rjmp	.+28     	; 0x19f2 <vfprintf+0x342>
    19d6:	af 14       	cp	r10, r15
    19d8:	28 f4       	brcc	.+10     	; 0x19e4 <vfprintf+0x334>
    19da:	e7 2c       	mov	r14, r7
    19dc:	ef 0c       	add	r14, r15
    19de:	ea 18       	sub	r14, r10
    19e0:	af 2c       	mov	r10, r15
    19e2:	07 c0       	rjmp	.+14     	; 0x19f2 <vfprintf+0x342>
    19e4:	e7 2c       	mov	r14, r7
    19e6:	05 c0       	rjmp	.+10     	; 0x19f2 <vfprintf+0x342>
    19e8:	80 e2       	ldi	r24, 0x20	; 32
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	b6 01       	movw	r22, r12
    19ee:	dd dd       	rcall	.-1094   	; 0x15aa <fputc>
    19f0:	a3 94       	inc	r10
    19f2:	af 14       	cp	r10, r15
    19f4:	c8 f3       	brcs	.-14     	; 0x19e8 <vfprintf+0x338>
    19f6:	04 c0       	rjmp	.+8      	; 0x1a00 <vfprintf+0x350>
    19f8:	af 14       	cp	r10, r15
    19fa:	10 f4       	brcc	.+4      	; 0x1a00 <vfprintf+0x350>
    19fc:	fa 18       	sub	r15, r10
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <vfprintf+0x352>
    1a00:	ff 24       	eor	r15, r15
    1a02:	84 fe       	sbrs	r8, 4
    1a04:	0e c0       	rjmp	.+28     	; 0x1a22 <vfprintf+0x372>
    1a06:	80 e3       	ldi	r24, 0x30	; 48
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	b6 01       	movw	r22, r12
    1a0c:	ce dd       	rcall	.-1124   	; 0x15aa <fputc>
    1a0e:	82 fe       	sbrs	r8, 2
    1a10:	1d c0       	rjmp	.+58     	; 0x1a4c <vfprintf+0x39c>
    1a12:	81 fe       	sbrs	r8, 1
    1a14:	03 c0       	rjmp	.+6      	; 0x1a1c <vfprintf+0x36c>
    1a16:	88 e5       	ldi	r24, 0x58	; 88
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	10 c0       	rjmp	.+32     	; 0x1a3c <vfprintf+0x38c>
    1a1c:	88 e7       	ldi	r24, 0x78	; 120
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0d c0       	rjmp	.+26     	; 0x1a3c <vfprintf+0x38c>
    1a22:	c4 01       	movw	r24, r8
    1a24:	86 78       	andi	r24, 0x86	; 134
    1a26:	90 70       	andi	r25, 0x00	; 0
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	81 f0       	breq	.+32     	; 0x1a4c <vfprintf+0x39c>
    1a2c:	81 fc       	sbrc	r8, 1
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <vfprintf+0x384>
    1a30:	80 e2       	ldi	r24, 0x20	; 32
    1a32:	01 c0       	rjmp	.+2      	; 0x1a36 <vfprintf+0x386>
    1a34:	8b e2       	ldi	r24, 0x2B	; 43
    1a36:	b7 fc       	sbrc	r11, 7
    1a38:	8d e2       	ldi	r24, 0x2D	; 45
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	b6 01       	movw	r22, r12
    1a3e:	b5 dd       	rcall	.-1174   	; 0x15aa <fputc>
    1a40:	05 c0       	rjmp	.+10     	; 0x1a4c <vfprintf+0x39c>
    1a42:	80 e3       	ldi	r24, 0x30	; 48
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	b6 01       	movw	r22, r12
    1a48:	b0 dd       	rcall	.-1184   	; 0x15aa <fputc>
    1a4a:	ea 94       	dec	r14
    1a4c:	7e 14       	cp	r7, r14
    1a4e:	c8 f3       	brcs	.-14     	; 0x1a42 <vfprintf+0x392>
    1a50:	7a 94       	dec	r7
    1a52:	f2 01       	movw	r30, r4
    1a54:	e7 0d       	add	r30, r7
    1a56:	f1 1d       	adc	r31, r1
    1a58:	80 81       	ld	r24, Z
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	b6 01       	movw	r22, r12
    1a5e:	a5 dd       	rcall	.-1206   	; 0x15aa <fputc>
    1a60:	77 20       	and	r7, r7
    1a62:	b1 f7       	brne	.-20     	; 0x1a50 <vfprintf+0x3a0>
    1a64:	05 c0       	rjmp	.+10     	; 0x1a70 <vfprintf+0x3c0>
    1a66:	80 e2       	ldi	r24, 0x20	; 32
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	9e dd       	rcall	.-1220   	; 0x15aa <fputc>
    1a6e:	fa 94       	dec	r15
    1a70:	ff 20       	and	r15, r15
    1a72:	c9 f7       	brne	.-14     	; 0x1a66 <vfprintf+0x3b6>
    1a74:	44 ce       	rjmp	.-888    	; 0x16fe <vfprintf+0x4e>
    1a76:	f6 01       	movw	r30, r12
    1a78:	26 81       	ldd	r18, Z+6	; 0x06
    1a7a:	37 81       	ldd	r19, Z+7	; 0x07
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <vfprintf+0x3d2>
    1a7e:	2f ef       	ldi	r18, 0xFF	; 255
    1a80:	3f ef       	ldi	r19, 0xFF	; 255
    1a82:	c9 01       	movw	r24, r18
    1a84:	2c 96       	adiw	r28, 0x0c	; 12
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	ff 90       	pop	r15
    1a9a:	ef 90       	pop	r14
    1a9c:	df 90       	pop	r13
    1a9e:	cf 90       	pop	r12
    1aa0:	bf 90       	pop	r11
    1aa2:	af 90       	pop	r10
    1aa4:	9f 90       	pop	r9
    1aa6:	8f 90       	pop	r8
    1aa8:	7f 90       	pop	r7
    1aaa:	6f 90       	pop	r6
    1aac:	5f 90       	pop	r5
    1aae:	4f 90       	pop	r4
    1ab0:	3f 90       	pop	r3
    1ab2:	2f 90       	pop	r2
    1ab4:	08 95       	ret

00001ab6 <strnlen_P>:
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	05 90       	lpm	r0, Z+
    1aba:	61 50       	subi	r22, 0x01	; 1
    1abc:	70 40       	sbci	r23, 0x00	; 0
    1abe:	01 10       	cpse	r0, r1
    1ac0:	d8 f7       	brcc	.-10     	; 0x1ab8 <strnlen_P+0x2>
    1ac2:	80 95       	com	r24
    1ac4:	90 95       	com	r25
    1ac6:	8e 0f       	add	r24, r30
    1ac8:	9f 1f       	adc	r25, r31
    1aca:	08 95       	ret

00001acc <strnlen>:
    1acc:	fc 01       	movw	r30, r24
    1ace:	61 50       	subi	r22, 0x01	; 1
    1ad0:	70 40       	sbci	r23, 0x00	; 0
    1ad2:	01 90       	ld	r0, Z+
    1ad4:	01 10       	cpse	r0, r1
    1ad6:	d8 f7       	brcc	.-10     	; 0x1ace <strnlen+0x2>
    1ad8:	80 95       	com	r24
    1ada:	90 95       	com	r25
    1adc:	8e 0f       	add	r24, r30
    1ade:	9f 1f       	adc	r25, r31
    1ae0:	08 95       	ret

00001ae2 <__ultoa_invert>:
    1ae2:	fa 01       	movw	r30, r20
    1ae4:	aa 27       	eor	r26, r26
    1ae6:	28 30       	cpi	r18, 0x08	; 8
    1ae8:	51 f1       	breq	.+84     	; 0x1b3e <__ultoa_invert+0x5c>
    1aea:	20 31       	cpi	r18, 0x10	; 16
    1aec:	81 f1       	breq	.+96     	; 0x1b4e <__ultoa_invert+0x6c>
    1aee:	e8 94       	clt
    1af0:	6f 93       	push	r22
    1af2:	6e 7f       	andi	r22, 0xFE	; 254
    1af4:	6e 5f       	subi	r22, 0xFE	; 254
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255
    1af8:	8f 4f       	sbci	r24, 0xFF	; 255
    1afa:	9f 4f       	sbci	r25, 0xFF	; 255
    1afc:	af 4f       	sbci	r26, 0xFF	; 255
    1afe:	b1 e0       	ldi	r27, 0x01	; 1
    1b00:	3e d0       	rcall	.+124    	; 0x1b7e <__ultoa_invert+0x9c>
    1b02:	b4 e0       	ldi	r27, 0x04	; 4
    1b04:	3c d0       	rcall	.+120    	; 0x1b7e <__ultoa_invert+0x9c>
    1b06:	67 0f       	add	r22, r23
    1b08:	78 1f       	adc	r23, r24
    1b0a:	89 1f       	adc	r24, r25
    1b0c:	9a 1f       	adc	r25, r26
    1b0e:	a1 1d       	adc	r26, r1
    1b10:	68 0f       	add	r22, r24
    1b12:	79 1f       	adc	r23, r25
    1b14:	8a 1f       	adc	r24, r26
    1b16:	91 1d       	adc	r25, r1
    1b18:	a1 1d       	adc	r26, r1
    1b1a:	6a 0f       	add	r22, r26
    1b1c:	71 1d       	adc	r23, r1
    1b1e:	81 1d       	adc	r24, r1
    1b20:	91 1d       	adc	r25, r1
    1b22:	a1 1d       	adc	r26, r1
    1b24:	20 d0       	rcall	.+64     	; 0x1b66 <__ultoa_invert+0x84>
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <__ultoa_invert+0x48>
    1b28:	68 94       	set
    1b2a:	3f 91       	pop	r19
    1b2c:	2a e0       	ldi	r18, 0x0A	; 10
    1b2e:	26 9f       	mul	r18, r22
    1b30:	11 24       	eor	r1, r1
    1b32:	30 19       	sub	r19, r0
    1b34:	30 5d       	subi	r19, 0xD0	; 208
    1b36:	31 93       	st	Z+, r19
    1b38:	de f6       	brtc	.-74     	; 0x1af0 <__ultoa_invert+0xe>
    1b3a:	cf 01       	movw	r24, r30
    1b3c:	08 95       	ret
    1b3e:	46 2f       	mov	r20, r22
    1b40:	47 70       	andi	r20, 0x07	; 7
    1b42:	40 5d       	subi	r20, 0xD0	; 208
    1b44:	41 93       	st	Z+, r20
    1b46:	b3 e0       	ldi	r27, 0x03	; 3
    1b48:	0f d0       	rcall	.+30     	; 0x1b68 <__ultoa_invert+0x86>
    1b4a:	c9 f7       	brne	.-14     	; 0x1b3e <__ultoa_invert+0x5c>
    1b4c:	f6 cf       	rjmp	.-20     	; 0x1b3a <__ultoa_invert+0x58>
    1b4e:	46 2f       	mov	r20, r22
    1b50:	4f 70       	andi	r20, 0x0F	; 15
    1b52:	40 5d       	subi	r20, 0xD0	; 208
    1b54:	4a 33       	cpi	r20, 0x3A	; 58
    1b56:	18 f0       	brcs	.+6      	; 0x1b5e <__ultoa_invert+0x7c>
    1b58:	49 5d       	subi	r20, 0xD9	; 217
    1b5a:	31 fd       	sbrc	r19, 1
    1b5c:	40 52       	subi	r20, 0x20	; 32
    1b5e:	41 93       	st	Z+, r20
    1b60:	02 d0       	rcall	.+4      	; 0x1b66 <__ultoa_invert+0x84>
    1b62:	a9 f7       	brne	.-22     	; 0x1b4e <__ultoa_invert+0x6c>
    1b64:	ea cf       	rjmp	.-44     	; 0x1b3a <__ultoa_invert+0x58>
    1b66:	b4 e0       	ldi	r27, 0x04	; 4
    1b68:	a6 95       	lsr	r26
    1b6a:	97 95       	ror	r25
    1b6c:	87 95       	ror	r24
    1b6e:	77 95       	ror	r23
    1b70:	67 95       	ror	r22
    1b72:	ba 95       	dec	r27
    1b74:	c9 f7       	brne	.-14     	; 0x1b68 <__ultoa_invert+0x86>
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	61 05       	cpc	r22, r1
    1b7a:	71 05       	cpc	r23, r1
    1b7c:	08 95       	ret
    1b7e:	9b 01       	movw	r18, r22
    1b80:	ac 01       	movw	r20, r24
    1b82:	0a 2e       	mov	r0, r26
    1b84:	06 94       	lsr	r0
    1b86:	57 95       	ror	r21
    1b88:	47 95       	ror	r20
    1b8a:	37 95       	ror	r19
    1b8c:	27 95       	ror	r18
    1b8e:	ba 95       	dec	r27
    1b90:	c9 f7       	brne	.-14     	; 0x1b84 <__ultoa_invert+0xa2>
    1b92:	62 0f       	add	r22, r18
    1b94:	73 1f       	adc	r23, r19
    1b96:	84 1f       	adc	r24, r20
    1b98:	95 1f       	adc	r25, r21
    1b9a:	a0 1d       	adc	r26, r0
    1b9c:	08 95       	ret

00001b9e <_exit>:
    1b9e:	f8 94       	cli

00001ba0 <__stop_program>:
    1ba0:	ff cf       	rjmp	.-2      	; 0x1ba0 <__stop_program>
