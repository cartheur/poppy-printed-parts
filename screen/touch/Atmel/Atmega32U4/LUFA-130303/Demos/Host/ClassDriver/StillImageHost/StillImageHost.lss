
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00001f54  00001fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080012a  0080012a  00002012  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00002014  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ddb  00000000  00000000  00004324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000788  00000000  00000000  000050ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001156  00000000  00000000  00005887  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cb4b  00000000  00000000  000069dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002c40  00000000  00000000  00013528  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000098fe  00000000  00000000  00016168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c70  00000000  00000000  0001fa68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004dab  00000000  00000000  000206d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000714d  00000000  00000000  00025483  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001ea0  00000000  00000000  0002c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a18  00000000  00000000  0002e470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	64 c1       	rjmp	.+712    	; 0x2ca <__ctors_end>
       2:	00 00       	nop
       4:	80 c1       	rjmp	.+768    	; 0x306 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c1       	rjmp	.+764    	; 0x306 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c1       	rjmp	.+760    	; 0x306 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c1       	rjmp	.+756    	; 0x306 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c1       	rjmp	.+752    	; 0x306 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c1       	rjmp	.+748    	; 0x306 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c1       	rjmp	.+744    	; 0x306 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c1       	rjmp	.+740    	; 0x306 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c1       	rjmp	.+736    	; 0x306 <__bad_interrupt>
      26:	00 00       	nop
      28:	9d c6       	rjmp	.+3386   	; 0xd64 <__vector_10>
      2a:	00 00       	nop
      2c:	6c c1       	rjmp	.+728    	; 0x306 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6a c1       	rjmp	.+724    	; 0x306 <__bad_interrupt>
      32:	00 00       	nop
      34:	68 c1       	rjmp	.+720    	; 0x306 <__bad_interrupt>
      36:	00 00       	nop
      38:	66 c1       	rjmp	.+716    	; 0x306 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c1       	rjmp	.+712    	; 0x306 <__bad_interrupt>
      3e:	00 00       	nop
      40:	62 c1       	rjmp	.+708    	; 0x306 <__bad_interrupt>
      42:	00 00       	nop
      44:	60 c1       	rjmp	.+704    	; 0x306 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c1       	rjmp	.+700    	; 0x306 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c1       	rjmp	.+696    	; 0x306 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5a c1       	rjmp	.+692    	; 0x306 <__bad_interrupt>
      52:	00 00       	nop
      54:	58 c1       	rjmp	.+688    	; 0x306 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c1       	rjmp	.+684    	; 0x306 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c1       	rjmp	.+680    	; 0x306 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c1       	rjmp	.+676    	; 0x306 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c1       	rjmp	.+672    	; 0x306 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c1       	rjmp	.+668    	; 0x306 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c1       	rjmp	.+664    	; 0x306 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c1       	rjmp	.+660    	; 0x306 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c1       	rjmp	.+656    	; 0x306 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c1       	rjmp	.+652    	; 0x306 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c1       	rjmp	.+648    	; 0x306 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c1       	rjmp	.+644    	; 0x306 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c1       	rjmp	.+640    	; 0x306 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c1       	rjmp	.+636    	; 0x306 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3c c1       	rjmp	.+632    	; 0x306 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3a c1       	rjmp	.+628    	; 0x306 <__bad_interrupt>
      92:	00 00       	nop
      94:	38 c1       	rjmp	.+624    	; 0x306 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4293>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4286>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4281>:
     11d:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     12d:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     13d:	00                                                  .

0000013e <__c.4279>:
     13e:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     14e:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     15e:	6f 6e 2e 0d 0a 00                                   on....

00000164 <__c.4277>:
     164:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     174:	4e 6f 74 20 61 20 56 61 6c 69 64 20 53 74 69 6c     Not a Valid Stil
     184:	6c 20 49 6d 61 67 65 20 43 6c 61 73 73 20 44 65     l Image Class De
     194:	76 69 63 65 2e 0d 0a 00                             vice....

0000019c <__c.4275>:
     19c:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1ac:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1bc:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001c9 <__c.4268>:
     1c9:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1d9:	68 65 64 2e 0d 0a 00                                hed....

000001e0 <__c.4263>:
     1e0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1f0:	0d 0a 00                                            ...

000001f3 <__c.4258>:
     1f3:	43 6f 75 6c 64 20 6e 6f 74 20 63 6c 6f 73 65 20     Could not close 
     203:	50 49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00     PIMA session....

00000213 <__c.4256>:
     213:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     223:	2e 2e 0d 0a 00                                      .....

00000228 <__c.4254>:
     228:	44 65 76 69 63 65 20 4f 66 66 2e 0d 0a 00           Device Off....

00000236 <__c.4252>:
     236:	43 6f 75 6c 64 20 6e 6f 74 20 74 75 72 6e 20 6f     Could not turn o
     246:	66 66 20 64 65 76 69 63 65 2e 0d 0a 00              ff device....

00000253 <__c.4250>:
     253:	54 75 72 6e 69 6e 67 20 6f 66 66 20 44 65 76 69     Turning off Devi
     263:	63 65 2e 2e 2e 0d 0a 00                             ce......

0000026b <__c.4248>:
     26b:	43 6f 75 6c 64 20 6e 6f 74 20 6f 70 65 6e 20 50     Could not open P
     27b:	49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00        IMA session....

0000028a <__c.4246>:
     28a:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
     29a:	2e 2e 0d 0a 00                                      .....

0000029f <__c.4237>:
     29f:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
     2af:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     2bf:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00                    ng....[37m.

000002ca <__ctors_end>:
     2ca:	11 24       	eor	r1, r1
     2cc:	1f be       	out	0x3f, r1	; 63
     2ce:	cf ef       	ldi	r28, 0xFF	; 255
     2d0:	d0 e2       	ldi	r29, 0x20	; 32
     2d2:	de bf       	out	0x3e, r29	; 62
     2d4:	cd bf       	out	0x3d, r28	; 61

000002d6 <__do_copy_data>:
     2d6:	11 e0       	ldi	r17, 0x01	; 1
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b1 e0       	ldi	r27, 0x01	; 1
     2dc:	e4 e5       	ldi	r30, 0x54	; 84
     2de:	ff e1       	ldi	r31, 0x1F	; 31
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	0b bf       	out	0x3b, r16	; 59
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__do_copy_data+0x14>
     2e6:	07 90       	elpm	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	aa 32       	cpi	r26, 0x2A	; 42
     2ec:	b1 07       	cpc	r27, r17
     2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__do_copy_data+0x10>

000002f0 <__do_clear_bss>:
     2f0:	11 e0       	ldi	r17, 0x01	; 1
     2f2:	aa e2       	ldi	r26, 0x2A	; 42
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <.do_clear_bss_start>

000002f8 <.do_clear_bss_loop>:
     2f8:	1d 92       	st	X+, r1

000002fa <.do_clear_bss_start>:
     2fa:	ac 34       	cpi	r26, 0x4C	; 76
     2fc:	b1 07       	cpc	r27, r17
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <.do_clear_bss_loop>
     300:	77 d0       	rcall	.+238    	; 0x3f0 <main>
     302:	0c 94 a8 0f 	jmp	0x1f50	; 0x1f50 <_exit>

00000306 <__bad_interrupt>:
     306:	7c ce       	rjmp	.-776    	; 0x0 <__vectors>

00000308 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     308:	9b b1       	in	r25, 0x0b	; 11
     30a:	9f 70       	andi	r25, 0x0F	; 15
     30c:	98 2b       	or	r25, r24
     30e:	9b b9       	out	0x0b, r25	; 11
			}
     310:	08 95       	ret

00000312 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     312:	84 b7       	in	r24, 0x34	; 52
     314:	87 7f       	andi	r24, 0xF7	; 247
     316:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     318:	28 e1       	ldi	r18, 0x18	; 24
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	20 93 60 00 	sts	0x0060, r18
     322:	10 92 60 00 	sts	0x0060, r1
     326:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	80 e8       	ldi	r24, 0x80	; 128
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	80 93 61 00 	sts	0x0061, r24
     334:	90 93 61 00 	sts	0x0061, r25
     338:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     33a:	83 e3       	ldi	r24, 0x33	; 51
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	90 93 cd 00 	sts	0x00CD, r25
     342:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     346:	86 e0       	ldi	r24, 0x06	; 6
     348:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     34c:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     350:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     354:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     356:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     358:	8a b1       	in	r24, 0x0a	; 10
     35a:	80 6f       	ori	r24, 0xF0	; 240
     35c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     35e:	8b b1       	in	r24, 0x0b	; 11
     360:	8f 70       	andi	r24, 0x0F	; 15
     362:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     364:	e4 d4       	rcall	.+2504   	; 0xd2e <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <Serial_CreateStream>

0000036e <StillImageHost_Task>:
/** Task to manage an enumerated USB Still Image device once connected, to manage a
 *  new PIMA session in order to send commands to the attached device.
 */
void StillImageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     36e:	80 91 37 01 	lds	r24, 0x0137
     372:	8b 30       	cpi	r24, 0x0B	; 11
     374:	09 f0       	breq	.+2      	; 0x378 <StillImageHost_Task+0xa>
     376:	3b c0       	rjmp	.+118    	; 0x3ee <StillImageHost_Task+0x80>
	  return;

	puts_P(PSTR("Opening Session...\r\n"));
     378:	8a e8       	ldi	r24, 0x8A	; 138
     37a:	92 e0       	ldi	r25, 0x02	; 2
     37c:	0e 94 cd 0c 	call	0x199a	; 0x199a <puts_P>

	if (SI_Host_OpenSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 17 0b 	call	0x162e	; 0x162e <SI_Host_OpenSession>
     388:	88 23       	and	r24, r24
     38a:	19 f0       	breq	.+6      	; 0x392 <StillImageHost_Task+0x24>
	{
		puts_P(PSTR("Could not open PIMA session.\r\n"));
     38c:	8b e6       	ldi	r24, 0x6B	; 107
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	26 c0       	rjmp	.+76     	; 0x3de <StillImageHost_Task+0x70>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Turning off Device...\r\n"));
     392:	83 e5       	ldi	r24, 0x53	; 83
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	0e 94 cd 0c 	call	0x199a	; 0x199a <puts_P>

	SI_Host_SendCommand(&DigitalCamera_SI_Interface, 0x1013, 0, NULL);
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	63 e1       	ldi	r22, 0x13	; 19
     3a0:	70 e1       	ldi	r23, 0x10	; 16
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <SI_Host_SendCommand>
	if (SI_Host_ReceiveResponse(&DigitalCamera_SI_Interface))
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <SI_Host_ReceiveResponse>
     3b4:	88 23       	and	r24, r24
     3b6:	19 f0       	breq	.+6      	; 0x3be <StillImageHost_Task+0x50>
	{
		puts_P(PSTR("Could not turn off device.\r\n"));
     3b8:	86 e3       	ldi	r24, 0x36	; 54
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	10 c0       	rjmp	.+32     	; 0x3de <StillImageHost_Task+0x70>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Device Off.\r\n"));
     3be:	88 e2       	ldi	r24, 0x28	; 40
     3c0:	92 e0       	ldi	r25, 0x02	; 2
     3c2:	0e 94 cd 0c 	call	0x199a	; 0x199a <puts_P>

	puts_P(PSTR("Closing Session...\r\n"));
     3c6:	83 e1       	ldi	r24, 0x13	; 19
     3c8:	92 e0       	ldi	r25, 0x02	; 2
     3ca:	0e 94 cd 0c 	call	0x199a	; 0x199a <puts_P>

	if (SI_Host_CloseSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <SI_Host_CloseSession>
     3d6:	88 23       	and	r24, r24
     3d8:	31 f0       	breq	.+12     	; 0x3e6 <StillImageHost_Task+0x78>
	{
		puts_P(PSTR("Could not close PIMA session.\r\n"));
     3da:	83 ef       	ldi	r24, 0xF3	; 243
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 cd 0c 	call	0x199a	; 0x199a <puts_P>
		USB_Host_SetDeviceConfiguration(0);
     3e2:	80 e0       	ldi	r24, 0x00	; 0
		return;
     3e4:	15 c7       	rjmp	.+3626   	; 0x1210 <USB_Host_SetDeviceConfiguration>
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3e6:	80 e6       	ldi	r24, 0x60	; 96
     3e8:	8f df       	rcall	.-226    	; 0x308 <LEDs_SetAllLEDs>
	USB_Host_SetDeviceConfiguration(0);
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	11 c7       	rjmp	.+3618   	; 0x1210 <USB_Host_SetDeviceConfiguration>
     3ee:	08 95       	ret

000003f0 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     3f0:	90 df       	rcall	.-224    	; 0x312 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Still Image Host Demo running.\r\n" ESC_FG_WHITE));
     3f2:	8f e9       	ldi	r24, 0x9F	; 159
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0e 94 cd 0c 	call	0x199a	; 0x199a <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3fa:	80 e1       	ldi	r24, 0x10	; 16
     3fc:	85 df       	rcall	.-246    	; 0x308 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     3fe:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		StillImageHost_Task();
     400:	b6 df       	rcall	.-148    	; 0x36e <StillImageHost_Task>

		SI_Host_USBTask(&DigitalCamera_SI_Interface);
		USB_USBTask();
     402:	42 d7       	rcall	.+3716   	; 0x1288 <USB_USBTask>
     404:	fd cf       	rjmp	.-6      	; 0x400 <main+0x10>

00000406 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     406:	80 ee       	ldi	r24, 0xE0	; 224
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 cd 0c 	call	0x199a	; 0x199a <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     40e:	80 ea       	ldi	r24, 0xA0	; 160
}
     410:	7b cf       	rjmp	.-266    	; 0x308 <LEDs_SetAllLEDs>

00000412 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     412:	89 ec       	ldi	r24, 0xC9	; 201
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	0e 94 cd 0c 	call	0x199a	; 0x199a <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     41a:	80 e1       	ldi	r24, 0x10	; 16
}
     41c:	75 cf       	rjmp	.-278    	; 0x308 <LEDs_SetAllLEDs>

0000041e <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	df 93       	push	r29
     424:	cf 93       	push	r28
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	c2 50       	subi	r28, 0x02	; 2
     42c:	d2 40       	sbci	r29, 0x02	; 2
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     438:	80 ea       	ldi	r24, 0xA0	; 160
     43a:	66 df       	rcall	.-308    	; 0x308 <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     43c:	8e 01       	movw	r16, r28
     43e:	0d 5f       	subi	r16, 0xFD	; 253
     440:	1f 4f       	sbci	r17, 0xFF	; 255
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	be 01       	movw	r22, r28
     446:	6f 5f       	subi	r22, 0xFF	; 255
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	a8 01       	movw	r20, r16
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	32 e0       	ldi	r19, 0x02	; 2
     450:	1c d5       	rcall	.+2616   	; 0xe8a <USB_Host_GetDeviceConfigDescriptor>
     452:	88 23       	and	r24, r24
     454:	19 f0       	breq	.+6      	; 0x45c <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     456:	8c e9       	ldi	r24, 0x9C	; 156
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	11 c0       	rjmp	.+34     	; 0x47e <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (SI_Host_ConfigurePipes(&DigitalCamera_SI_Interface,
     45c:	69 81       	ldd	r22, Y+1	; 0x01
     45e:	7a 81       	ldd	r23, Y+2	; 0x02
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	a8 01       	movw	r20, r16
     466:	44 d7       	rcall	.+3720   	; 0x12f0 <SI_Host_ConfigurePipes>
     468:	88 23       	and	r24, r24
     46a:	19 f0       	breq	.+6      	; 0x472 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
	                           ConfigDescriptorSize, ConfigDescriptorData) != SI_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Still Image Class Device.\r\n"));
     46c:	84 e6       	ldi	r24, 0x64	; 100
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	06 c0       	rjmp	.+12     	; 0x47e <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	cd d6       	rcall	.+3482   	; 0x1210 <USB_Host_SetDeviceConfiguration>
     476:	88 23       	and	r24, r24
     478:	31 f0       	breq	.+12     	; 0x486 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     47a:	8e e3       	ldi	r24, 0x3E	; 62
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 cd 0c 	call	0x199a	; 0x199a <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     482:	80 e9       	ldi	r24, 0x90	; 144
     484:	05 c0       	rjmp	.+10     	; 0x490 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
		return;
	}

	puts_P(PSTR("Still Image Device Enumerated.\r\n"));
     486:	8d e1       	ldi	r24, 0x1D	; 29
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 cd 0c 	call	0x199a	; 0x199a <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     48e:	80 e6       	ldi	r24, 0x60	; 96
     490:	3b df       	rcall	.-394    	; 0x308 <LEDs_SetAllLEDs>
}
     492:	ce 5f       	subi	r28, 0xFE	; 254
     494:	dd 4f       	sbci	r29, 0xFD	; 253
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	cf 91       	pop	r28
     4a2:	df 91       	pop	r29
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	08 95       	ret

000004aa <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	0f 92       	push	r0
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     4b4:	89 83       	std	Y+1, r24	; 0x01
     4b6:	d3 d3       	rcall	.+1958   	; 0xc5e <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4b8:	00 d0       	rcall	.+0      	; 0x4ba <EVENT_USB_Host_HostError+0x10>
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <EVENT_USB_Host_HostError+0x12>
     4bc:	ed b7       	in	r30, 0x3d	; 61
     4be:	fe b7       	in	r31, 0x3e	; 62
     4c0:	31 96       	adiw	r30, 0x01	; 1
     4c2:	2e ee       	ldi	r18, 0xEE	; 238
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	ad b7       	in	r26, 0x3d	; 61
     4c8:	be b7       	in	r27, 0x3e	; 62
     4ca:	12 96       	adiw	r26, 0x02	; 2
     4cc:	3c 93       	st	X, r19
     4ce:	2e 93       	st	-X, r18
     4d0:	11 97       	sbiw	r26, 0x01	; 1
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	82 83       	std	Z+2, r24	; 0x02
     4d6:	13 82       	std	Z+3, r1	; 0x03
     4d8:	0e 94 ae 0c 	call	0x195c	; 0x195c <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	80 e9       	ldi	r24, 0x90	; 144
     4e6:	10 df       	rcall	.-480    	; 0x308 <LEDs_SetAllLEDs>
     4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <EVENT_USB_Host_HostError+0x3e>

000004ea <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4ea:	90 91 37 01 	lds	r25, 0x0137
     4ee:	2d b7       	in	r18, 0x3d	; 61
     4f0:	3e b7       	in	r19, 0x3e	; 62
     4f2:	28 50       	subi	r18, 0x08	; 8
     4f4:	30 40       	sbci	r19, 0x00	; 0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	3e bf       	out	0x3e, r19	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	2d bf       	out	0x3d, r18	; 61
     500:	ed b7       	in	r30, 0x3d	; 61
     502:	fe b7       	in	r31, 0x3e	; 62
     504:	31 96       	adiw	r30, 0x01	; 1
     506:	28 e9       	ldi	r18, 0x98	; 152
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	ad b7       	in	r26, 0x3d	; 61
     50c:	be b7       	in	r27, 0x3e	; 62
     50e:	12 96       	adiw	r26, 0x02	; 2
     510:	3c 93       	st	X, r19
     512:	2e 93       	st	-X, r18
     514:	11 97       	sbiw	r26, 0x01	; 1
     516:	82 83       	std	Z+2, r24	; 0x02
     518:	13 82       	std	Z+3, r1	; 0x03
     51a:	64 83       	std	Z+4, r22	; 0x04
     51c:	15 82       	std	Z+5, r1	; 0x05
     51e:	96 83       	std	Z+6, r25	; 0x06
     520:	17 82       	std	Z+7, r1	; 0x07
     522:	0e 94 ae 0c 	call	0x195c	; 0x195c <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     526:	2d b7       	in	r18, 0x3d	; 61
     528:	3e b7       	in	r19, 0x3e	; 62
     52a:	28 5f       	subi	r18, 0xF8	; 248
     52c:	3f 4f       	sbci	r19, 0xFF	; 255
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	3e bf       	out	0x3e, r19	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	2d bf       	out	0x3d, r18	; 61
     538:	80 e9       	ldi	r24, 0x90	; 144
}
     53a:	e6 ce       	rjmp	.-564    	; 0x308 <LEDs_SetAllLEDs>

0000053c <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     53c:	80 91 9e 00 	lds	r24, 0x009E
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	81 70       	andi	r24, 0x01	; 1
     544:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     546:	20 91 a0 00 	lds	r18, 0x00A0
     54a:	2d 7f       	andi	r18, 0xFD	; 253
     54c:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     550:	20 91 9e 00 	lds	r18, 0x009E
     554:	22 60       	ori	r18, 0x02	; 2
     556:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     55a:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     55e:	21 fd       	sbrc	r18, 1
     560:	fc cf       	rjmp	.-8      	; 0x55a <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     562:	20 91 9e 00 	lds	r18, 0x009E
     566:	21 60       	ori	r18, 0x01	; 1
     568:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     56c:	10 92 2d 01 	sts	0x012D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     570:	20 91 a0 00 	lds	r18, 0x00A0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	20 72       	andi	r18, 0x20	; 32
     578:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     57a:	40 91 a0 00 	lds	r20, 0x00A0
     57e:	4f 7d       	andi	r20, 0xDF	; 223
     580:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     584:	40 91 9f 00 	lds	r20, 0x009F
     588:	4f 7d       	andi	r20, 0xDF	; 223
     58a:	40 93 9f 00 	sts	0x009F, r20
     58e:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     590:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     594:	55 ff       	sbrs	r21, 5
     596:	0b c0       	rjmp	.+22     	; 0x5ae <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     598:	40 91 9f 00 	lds	r20, 0x009F
     59c:	4f 7d       	andi	r20, 0xDF	; 223
     59e:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     5a2:	40 91 9f 00 	lds	r20, 0x009F
     5a6:	4d 7f       	andi	r20, 0xFD	; 253
     5a8:	40 93 9f 00 	sts	0x009F, r20
     5ac:	08 c0       	rjmp	.+16     	; 0x5be <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ae:	ef ec       	ldi	r30, 0xCF	; 207
     5b0:	f7 e0       	ldi	r31, 0x07	; 7
     5b2:	31 97       	sbiw	r30, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <USB_Host_ResetDevice+0x76>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <USB_Host_ResetDevice+0x7c>
     5b8:	00 00       	nop
     5ba:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     5bc:	49 f7       	brne	.-46     	; 0x590 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     5be:	21 15       	cp	r18, r1
     5c0:	31 05       	cpc	r19, r1
     5c2:	29 f0       	breq	.+10     	; 0x5ce <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     5c4:	20 91 a0 00 	lds	r18, 0x00A0
     5c8:	20 62       	ori	r18, 0x20	; 32
     5ca:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     5ce:	00 97       	sbiw	r24, 0x00	; 0
     5d0:	29 f4       	brne	.+10     	; 0x5dc <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5d2:	80 91 9e 00 	lds	r24, 0x009E
     5d6:	8e 7f       	andi	r24, 0xFE	; 254
     5d8:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     5dc:	80 91 a0 00 	lds	r24, 0x00A0
     5e0:	82 60       	ori	r24, 0x02	; 2
     5e2:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     5e6:	08 95       	ret

000005e8 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5e8:	40 91 9e 00 	lds	r20, 0x009E
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	41 70       	andi	r20, 0x01	; 1
     5f0:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5f2:	20 91 a0 00 	lds	r18, 0x00A0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	20 72       	andi	r18, 0x20	; 32
     5fa:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5fc:	90 91 a0 00 	lds	r25, 0x00A0
     600:	9f 7d       	andi	r25, 0xDF	; 223
     602:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     606:	90 91 9f 00 	lds	r25, 0x009F
     60a:	9f 7d       	andi	r25, 0xDF	; 223
     60c:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     610:	90 91 9e 00 	lds	r25, 0x009E
     614:	91 60       	ori	r25, 0x01	; 1
     616:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     61a:	26 c0       	rjmp	.+76     	; 0x668 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     61c:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     620:	95 ff       	sbrs	r25, 5
     622:	06 c0       	rjmp	.+12     	; 0x630 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     624:	90 91 9f 00 	lds	r25, 0x009F
     628:	9f 7d       	andi	r25, 0xDF	; 223
     62a:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     62e:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     630:	90 91 37 01 	lds	r25, 0x0137
     634:	91 30       	cpi	r25, 0x01	; 1
     636:	d9 f0       	breq	.+54     	; 0x66e <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     638:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     63c:	94 ff       	sbrs	r25, 4
     63e:	09 c0       	rjmp	.+18     	; 0x652 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     640:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     644:	80 91 a6 00 	lds	r24, 0x00A6
     648:	8f 7e       	andi	r24, 0xEF	; 239
     64a:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     64e:	82 e0       	ldi	r24, 0x02	; 2

			break;
     650:	0f c0       	rjmp	.+30     	; 0x670 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     652:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     656:	91 ff       	sbrs	r25, 1
     658:	07 c0       	rjmp	.+14     	; 0x668 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     65a:	80 91 a6 00 	lds	r24, 0x00A6
     65e:	8d 7f       	andi	r24, 0xFD	; 253
     660:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     664:	83 e0       	ldi	r24, 0x03	; 3

			break;
     666:	04 c0       	rjmp	.+8      	; 0x670 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     668:	88 23       	and	r24, r24
     66a:	c1 f6       	brne	.-80     	; 0x61c <USB_Host_WaitMS+0x34>
     66c:	01 c0       	rjmp	.+2      	; 0x670 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     66e:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     670:	41 15       	cp	r20, r1
     672:	51 05       	cpc	r21, r1
     674:	29 f4       	brne	.+10     	; 0x680 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     676:	90 91 9e 00 	lds	r25, 0x009E
     67a:	9e 7f       	andi	r25, 0xFE	; 254
     67c:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     680:	21 15       	cp	r18, r1
     682:	31 05       	cpc	r19, r1
     684:	29 f0       	breq	.+10     	; 0x690 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     686:	90 91 a0 00 	lds	r25, 0x00A0
     68a:	90 62       	ori	r25, 0x20	; 32
     68c:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     690:	08 95       	ret

00000692 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	df 93       	push	r29
     698:	cf 93       	push	r28
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	28 97       	sbiw	r28, 0x08	; 8
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     6aa:	80 91 37 01 	lds	r24, 0x0137
     6ae:	85 30       	cpi	r24, 0x05	; 5
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <USB_Host_ProcessNextHostState+0x22>
     6b2:	99 c0       	rjmp	.+306    	; 0x7e6 <USB_Host_ProcessNextHostState+0x154>
     6b4:	86 30       	cpi	r24, 0x06	; 6
     6b6:	68 f4       	brcc	.+26     	; 0x6d2 <USB_Host_ProcessNextHostState+0x40>
     6b8:	82 30       	cpi	r24, 0x02	; 2
     6ba:	c1 f1       	breq	.+112    	; 0x72c <USB_Host_ProcessNextHostState+0x9a>
     6bc:	83 30       	cpi	r24, 0x03	; 3
     6be:	18 f4       	brcc	.+6      	; 0x6c6 <USB_Host_ProcessNextHostState+0x34>
     6c0:	88 23       	and	r24, r24
     6c2:	a1 f0       	breq	.+40     	; 0x6ec <USB_Host_ProcessNextHostState+0x5a>
     6c4:	04 c1       	rjmp	.+520    	; 0x8ce <USB_Host_ProcessNextHostState+0x23c>
     6c6:	83 30       	cpi	r24, 0x03	; 3
     6c8:	d9 f1       	breq	.+118    	; 0x740 <USB_Host_ProcessNextHostState+0xae>
     6ca:	84 30       	cpi	r24, 0x04	; 4
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <USB_Host_ProcessNextHostState+0x3e>
     6ce:	ff c0       	rjmp	.+510    	; 0x8ce <USB_Host_ProcessNextHostState+0x23c>
     6d0:	62 c0       	rjmp	.+196    	; 0x796 <USB_Host_ProcessNextHostState+0x104>
     6d2:	87 30       	cpi	r24, 0x07	; 7
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <USB_Host_ProcessNextHostState+0x46>
     6d6:	9e c0       	rjmp	.+316    	; 0x814 <USB_Host_ProcessNextHostState+0x182>
     6d8:	87 30       	cpi	r24, 0x07	; 7
     6da:	08 f4       	brcc	.+2      	; 0x6de <USB_Host_ProcessNextHostState+0x4c>
     6dc:	8f c0       	rjmp	.+286    	; 0x7fc <USB_Host_ProcessNextHostState+0x16a>
     6de:	88 30       	cpi	r24, 0x08	; 8
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <USB_Host_ProcessNextHostState+0x52>
     6e2:	b8 c0       	rjmp	.+368    	; 0x854 <USB_Host_ProcessNextHostState+0x1c2>
     6e4:	89 30       	cpi	r24, 0x09	; 9
     6e6:	09 f0       	breq	.+2      	; 0x6ea <USB_Host_ProcessNextHostState+0x58>
     6e8:	f2 c0       	rjmp	.+484    	; 0x8ce <USB_Host_ProcessNextHostState+0x23c>
     6ea:	d9 c0       	rjmp	.+434    	; 0x89e <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     6ec:	00 91 2b 01 	lds	r16, 0x012B
     6f0:	10 91 2c 01 	lds	r17, 0x012C
     6f4:	01 15       	cp	r16, r1
     6f6:	11 05       	cpc	r17, r1
     6f8:	09 f4       	brne	.+2      	; 0x6fc <USB_Host_ProcessNextHostState+0x6a>
     6fa:	e9 c0       	rjmp	.+466    	; 0x8ce <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	74 df       	rcall	.-280    	; 0x5e8 <USB_Host_WaitMS>
     700:	68 2f       	mov	r22, r24
     702:	88 23       	and	r24, r24
     704:	31 f0       	breq	.+12     	; 0x712 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     706:	80 91 2a 01 	lds	r24, 0x012A
     70a:	80 93 37 01 	sts	0x0137, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     70e:	81 e0       	ldi	r24, 0x01	; 1
					break;
     710:	d2 c0       	rjmp	.+420    	; 0x8b6 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     712:	01 50       	subi	r16, 0x01	; 1
     714:	10 40       	sbci	r17, 0x00	; 0
     716:	10 93 2c 01 	sts	0x012C, r17
     71a:	00 93 2b 01 	sts	0x012B, r16
     71e:	01 15       	cp	r16, r1
     720:	11 05       	cpc	r17, r1
     722:	09 f0       	breq	.+2      	; 0x726 <USB_Host_ProcessNextHostState+0x94>
     724:	d4 c0       	rjmp	.+424    	; 0x8ce <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     726:	80 91 2a 01 	lds	r24, 0x012A
     72a:	07 c0       	rjmp	.+14     	; 0x73a <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     72c:	88 ee       	ldi	r24, 0xE8	; 232
     72e:	93 e0       	ldi	r25, 0x03	; 3
     730:	90 93 2c 01 	sts	0x012C, r25
     734:	80 93 2b 01 	sts	0x012B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	80 93 37 01 	sts	0x0137, r24
			break;
     73e:	c7 c0       	rjmp	.+398    	; 0x8ce <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     740:	80 91 2b 01 	lds	r24, 0x012B
     744:	90 91 2c 01 	lds	r25, 0x012C
     748:	9c 01       	movw	r18, r24
     74a:	21 50       	subi	r18, 0x01	; 1
     74c:	30 40       	sbci	r19, 0x00	; 0
     74e:	30 93 2c 01 	sts	0x012C, r19
     752:	20 93 2b 01 	sts	0x012B, r18
     756:	00 97       	sbiw	r24, 0x00	; 0
     758:	39 f0       	breq	.+14     	; 0x768 <USB_Host_ProcessNextHostState+0xd6>
     75a:	8f ec       	ldi	r24, 0xCF	; 207
     75c:	97 e0       	ldi	r25, 0x07	; 7
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <USB_Host_ProcessNextHostState+0xcc>
     762:	00 c0       	rjmp	.+0      	; 0x764 <USB_Host_ProcessNextHostState+0xd2>
     764:	00 00       	nop
     766:	b3 c0       	rjmp	.+358    	; 0x8ce <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     768:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     76a:	80 91 d8 00 	lds	r24, 0x00D8
     76e:	80 61       	ori	r24, 0x10	; 16
     770:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     774:	80 91 dd 00 	lds	r24, 0x00DD
     778:	8b 7f       	andi	r24, 0xFB	; 251
     77a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     77e:	80 91 d7 00 	lds	r24, 0x00D7
     782:	80 61       	ori	r24, 0x10	; 16
     784:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     788:	80 91 dd 00 	lds	r24, 0x00DD
     78c:	82 60       	ori	r24, 0x02	; 2
     78e:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     792:	84 e0       	ldi	r24, 0x04	; 4
     794:	d2 cf       	rjmp	.-92     	; 0x73a <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     796:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     79a:	80 ff       	sbrs	r24, 0
     79c:	98 c0       	rjmp	.+304    	; 0x8ce <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     79e:	80 91 9f 00 	lds	r24, 0x009F
     7a2:	8e 7f       	andi	r24, 0xFE	; 254
     7a4:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7a8:	80 91 9f 00 	lds	r24, 0x009F
     7ac:	8d 7f       	andi	r24, 0xFD	; 253
     7ae:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7b2:	80 91 df 00 	lds	r24, 0x00DF
     7b6:	8d 7f       	andi	r24, 0xFD	; 253
     7b8:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     7bc:	80 91 de 00 	lds	r24, 0x00DE
     7c0:	82 60       	ori	r24, 0x02	; 2
     7c2:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7c6:	80 91 9e 00 	lds	r24, 0x009E
     7ca:	81 60       	ori	r24, 0x01	; 1
     7cc:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     7d0:	dd d1       	rcall	.+954    	; 0xb8c <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7d2:	10 92 37 01 	sts	0x0137, r1
     7d6:	84 e6       	ldi	r24, 0x64	; 100
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	90 93 2c 01 	sts	0x012C, r25
     7de:	80 93 2b 01 	sts	0x012B, r24
     7e2:	85 e0       	ldi	r24, 0x05	; 5
     7e4:	59 c0       	rjmp	.+178    	; 0x898 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7e6:	aa de       	rcall	.-684    	; 0x53c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7e8:	10 92 37 01 	sts	0x0137, r1
     7ec:	88 ec       	ldi	r24, 0xC8	; 200
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	90 93 2c 01 	sts	0x012C, r25
     7f4:	80 93 2b 01 	sts	0x012B, r24
     7f8:	86 e0       	ldi	r24, 0x06	; 6
     7fa:	4e c0       	rjmp	.+156    	; 0x898 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	20 e4       	ldi	r18, 0x40	; 64
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	01 e0       	ldi	r16, 0x01	; 1
     808:	33 d1       	rcall	.+614    	; 0xa70 <Pipe_ConfigurePipe>
     80a:	88 23       	and	r24, r24
     80c:	09 f4       	brne	.+2      	; 0x810 <USB_Host_ProcessNextHostState+0x17e>
     80e:	4f c0       	rjmp	.+158    	; 0x8ae <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     810:	87 e0       	ldi	r24, 0x07	; 7
     812:	93 cf       	rjmp	.-218    	; 0x73a <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     814:	af e2       	ldi	r26, 0x2F	; 47
     816:	b1 e0       	ldi	r27, 0x01	; 1
     818:	e1 e2       	ldi	r30, 0x21	; 33
     81a:	f1 e0       	ldi	r31, 0x01	; 1
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	01 90       	ld	r0, Z+
     820:	0d 92       	st	X+, r0
     822:	81 50       	subi	r24, 0x01	; 1
     824:	e1 f7       	brne	.-8      	; 0x81e <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     826:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     82a:	ce 01       	movw	r24, r28
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	f1 d3       	rcall	.+2018   	; 0x1012 <USB_Host_SendControlRequest>
     830:	68 2f       	mov	r22, r24
     832:	88 23       	and	r24, r24
     834:	09 f0       	breq	.+2      	; 0x838 <USB_Host_ProcessNextHostState+0x1a6>
     836:	3e c0       	rjmp	.+124    	; 0x8b4 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     838:	88 85       	ldd	r24, Y+8	; 0x08
     83a:	80 93 29 01 	sts	0x0129, r24

			USB_Host_ResetDevice();
     83e:	7e de       	rcall	.-772    	; 0x53c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     840:	10 92 37 01 	sts	0x0137, r1
     844:	88 ec       	ldi	r24, 0xC8	; 200
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	90 93 2c 01 	sts	0x012C, r25
     84c:	80 93 2b 01 	sts	0x012B, r24
     850:	88 e0       	ldi	r24, 0x08	; 8
     852:	22 c0       	rjmp	.+68     	; 0x898 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     854:	20 91 29 01 	lds	r18, 0x0129
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	01 e0       	ldi	r16, 0x01	; 1
     862:	06 d1       	rcall	.+524    	; 0xa70 <Pipe_ConfigurePipe>
     864:	88 23       	and	r24, r24
     866:	19 f1       	breq	.+70     	; 0x8ae <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     868:	af e2       	ldi	r26, 0x2F	; 47
     86a:	b1 e0       	ldi	r27, 0x01	; 1
     86c:	e9 e1       	ldi	r30, 0x19	; 25
     86e:	f1 e0       	ldi	r31, 0x01	; 1
     870:	88 e0       	ldi	r24, 0x08	; 8
     872:	01 90       	ld	r0, Z+
     874:	0d 92       	st	X+, r0
     876:	81 50       	subi	r24, 0x01	; 1
     878:	e1 f7       	brne	.-8      	; 0x872 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	c9 d3       	rcall	.+1938   	; 0x1012 <USB_Host_SendControlRequest>
     880:	68 2f       	mov	r22, r24
     882:	88 23       	and	r24, r24
     884:	b9 f4       	brne	.+46     	; 0x8b4 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     886:	10 92 37 01 	sts	0x0137, r1
     88a:	84 e6       	ldi	r24, 0x64	; 100
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	90 93 2c 01 	sts	0x012C, r25
     892:	80 93 2b 01 	sts	0x012B, r24
     896:	89 e0       	ldi	r24, 0x09	; 9
     898:	80 93 2a 01 	sts	0x012A, r24
			break;
     89c:	18 c0       	rjmp	.+48     	; 0x8ce <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8a4:	8a e0       	ldi	r24, 0x0A	; 10
     8a6:	80 93 37 01 	sts	0x0137, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     8aa:	b9 dd       	rcall	.-1166   	; 0x41e <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     8ac:	10 c0       	rjmp	.+32     	; 0x8ce <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     8ae:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     8b0:	84 e0       	ldi	r24, 0x04	; 4
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     8b4:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8b6:	90 91 37 01 	lds	r25, 0x0137
     8ba:	91 30       	cpi	r25, 0x01	; 1
     8bc:	41 f0       	breq	.+16     	; 0x8ce <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8be:	15 de       	rcall	.-982    	; 0x4ea <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     8c0:	80 91 dd 00 	lds	r24, 0x00DD
     8c4:	81 60       	ori	r24, 0x01	; 1
     8c6:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     8ca:	a3 dd       	rcall	.-1210   	; 0x412 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     8cc:	e0 d1       	rcall	.+960    	; 0xc8e <USB_ResetInterface>
	}
}
     8ce:	28 96       	adiw	r28, 0x08	; 8
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	cf 91       	pop	r28
     8dc:	df 91       	pop	r29
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     8e4:	8f 92       	push	r8
     8e6:	9f 92       	push	r9
     8e8:	bf 92       	push	r11
     8ea:	cf 92       	push	r12
     8ec:	df 92       	push	r13
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	df 93       	push	r29
     8f8:	cf 93       	push	r28
     8fa:	0f 92       	push	r0
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	e8 2e       	mov	r14, r24
     902:	4b 01       	movw	r8, r22
     904:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     906:	80 91 aa 00 	lds	r24, 0x00AA
     90a:	8f 7c       	andi	r24, 0xCF	; 207
     90c:	80 62       	ori	r24, 0x20	; 32
     90e:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     912:	99 83       	std	Y+1, r25	; 0x01
     914:	75 d1       	rcall	.+746    	; 0xc00 <Pipe_WaitUntilReady>
     916:	b8 2e       	mov	r11, r24
     918:	99 81       	ldd	r25, Y+1	; 0x01
     91a:	88 23       	and	r24, r24
     91c:	c1 f5       	brne	.+112    	; 0x98e <Pipe_Write_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     91e:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     920:	01 15       	cp	r16, r1
     922:	11 05       	cpc	r17, r1
     924:	39 f0       	breq	.+14     	; 0x934 <Pipe_Write_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     926:	f8 01       	movw	r30, r16
     928:	20 81       	ld	r18, Z
     92a:	31 81       	ldd	r19, Z+1	; 0x01
     92c:	82 1a       	sub	r8, r18
     92e:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     930:	e2 0e       	add	r14, r18
     932:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     934:	cc 24       	eor	r12, r12
     936:	dd 24       	eor	r13, r13
     938:	25 c0       	rjmp	.+74     	; 0x984 <Pipe_Write_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     93a:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     93e:	85 fd       	sbrc	r24, 5
     940:	16 c0       	rjmp	.+44     	; 0x96e <Pipe_Write_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     942:	80 91 a6 00 	lds	r24, 0x00A6
     946:	8b 77       	andi	r24, 0x7B	; 123
     948:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     94c:	01 15       	cp	r16, r1
     94e:	11 05       	cpc	r17, r1
     950:	51 f0       	breq	.+20     	; 0x966 <Pipe_Write_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     952:	f8 01       	movw	r30, r16
     954:	80 81       	ld	r24, Z
     956:	91 81       	ldd	r25, Z+1	; 0x01
     958:	8c 0d       	add	r24, r12
     95a:	9d 1d       	adc	r25, r13
     95c:	91 83       	std	Z+1, r25	; 0x01
     95e:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     960:	24 e0       	ldi	r18, 0x04	; 4
     962:	b2 2e       	mov	r11, r18
     964:	14 c0       	rjmp	.+40     	; 0x98e <Pipe_Write_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     966:	4c d1       	rcall	.+664    	; 0xc00 <Pipe_WaitUntilReady>
     968:	88 23       	and	r24, r24
     96a:	61 f0       	breq	.+24     	; 0x984 <Pipe_Write_Stream_LE+0xa0>
     96c:	0f c0       	rjmp	.+30     	; 0x98c <Pipe_Write_Stream_LE+0xa8>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     96e:	f7 01       	movw	r30, r14
     970:	81 91       	ld	r24, Z+
     972:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     974:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     978:	08 94       	sec
     97a:	81 08       	sbc	r8, r1
     97c:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     97e:	08 94       	sec
     980:	c1 1c       	adc	r12, r1
     982:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     984:	81 14       	cp	r8, r1
     986:	91 04       	cpc	r9, r1
     988:	c1 f6       	brne	.-80     	; 0x93a <Pipe_Write_Stream_LE+0x56>
     98a:	01 c0       	rjmp	.+2      	; 0x98e <Pipe_Write_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     98c:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     98e:	8b 2d       	mov	r24, r11
     990:	0f 90       	pop	r0
     992:	cf 91       	pop	r28
     994:	df 91       	pop	r29
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	9f 90       	pop	r9
     9a6:	8f 90       	pop	r8
     9a8:	08 95       	ret

000009aa <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     9aa:	8f 92       	push	r8
     9ac:	9f 92       	push	r9
     9ae:	bf 92       	push	r11
     9b0:	cf 92       	push	r12
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	df 93       	push	r29
     9be:	cf 93       	push	r28
     9c0:	0f 92       	push	r0
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	e8 2e       	mov	r14, r24
     9c8:	4b 01       	movw	r8, r22
     9ca:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     9cc:	80 91 aa 00 	lds	r24, 0x00AA
     9d0:	8f 7c       	andi	r24, 0xCF	; 207
     9d2:	80 61       	ori	r24, 0x10	; 16
     9d4:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     9d8:	99 83       	std	Y+1, r25	; 0x01
     9da:	12 d1       	rcall	.+548    	; 0xc00 <Pipe_WaitUntilReady>
     9dc:	b8 2e       	mov	r11, r24
     9de:	99 81       	ldd	r25, Y+1	; 0x01
     9e0:	88 23       	and	r24, r24
     9e2:	c1 f5       	brne	.+112    	; 0xa54 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     9e4:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     9e6:	01 15       	cp	r16, r1
     9e8:	11 05       	cpc	r17, r1
     9ea:	39 f0       	breq	.+14     	; 0x9fa <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     9ec:	f8 01       	movw	r30, r16
     9ee:	20 81       	ld	r18, Z
     9f0:	31 81       	ldd	r19, Z+1	; 0x01
     9f2:	82 1a       	sub	r8, r18
     9f4:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     9f6:	e2 0e       	add	r14, r18
     9f8:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     9fa:	cc 24       	eor	r12, r12
     9fc:	dd 24       	eor	r13, r13
     9fe:	25 c0       	rjmp	.+74     	; 0xa4a <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     a00:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     a04:	85 fd       	sbrc	r24, 5
     a06:	16 c0       	rjmp	.+44     	; 0xa34 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     a08:	80 91 a6 00 	lds	r24, 0x00A6
     a0c:	8e 77       	andi	r24, 0x7E	; 126
     a0e:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     a12:	01 15       	cp	r16, r1
     a14:	11 05       	cpc	r17, r1
     a16:	51 f0       	breq	.+20     	; 0xa2c <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     a18:	f8 01       	movw	r30, r16
     a1a:	80 81       	ld	r24, Z
     a1c:	91 81       	ldd	r25, Z+1	; 0x01
     a1e:	8c 0d       	add	r24, r12
     a20:	9d 1d       	adc	r25, r13
     a22:	91 83       	std	Z+1, r25	; 0x01
     a24:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     a26:	44 e0       	ldi	r20, 0x04	; 4
     a28:	b4 2e       	mov	r11, r20
     a2a:	14 c0       	rjmp	.+40     	; 0xa54 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a2c:	e9 d0       	rcall	.+466    	; 0xc00 <Pipe_WaitUntilReady>
     a2e:	88 23       	and	r24, r24
     a30:	61 f0       	breq	.+24     	; 0xa4a <Pipe_Read_Stream_LE+0xa0>
     a32:	0f c0       	rjmp	.+30     	; 0xa52 <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     a34:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     a38:	f7 01       	movw	r30, r14
     a3a:	81 93       	st	Z+, r24
     a3c:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     a3e:	08 94       	sec
     a40:	81 08       	sbc	r8, r1
     a42:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     a44:	08 94       	sec
     a46:	c1 1c       	adc	r12, r1
     a48:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     a4a:	81 14       	cp	r8, r1
     a4c:	91 04       	cpc	r9, r1
     a4e:	c1 f6       	brne	.-80     	; 0xa00 <Pipe_Read_Stream_LE+0x56>
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a52:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     a54:	8b 2d       	mov	r24, r11
     a56:	0f 90       	pop	r0
     a58:	cf 91       	pop	r28
     a5a:	df 91       	pop	r29
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	bf 90       	pop	r11
     a6a:	9f 90       	pop	r9
     a6c:	8f 90       	pop	r8
     a6e:	08 95       	ret

00000a70 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     a70:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     a72:	58 2f       	mov	r21, r24
     a74:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     a76:	87 ff       	sbrs	r24, 7
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <Pipe_ConfigurePipe+0xe>
     a7a:	80 e1       	ldi	r24, 0x10	; 16
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <Pipe_ConfigurePipe+0x10>
     a7e:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     a80:	57 30       	cpi	r21, 0x07	; 7
     a82:	08 f0       	brcs	.+2      	; 0xa86 <Pipe_ConfigurePipe+0x16>
     a84:	59 c0       	rjmp	.+178    	; 0xb38 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     a86:	66 23       	and	r22, r22
     a88:	09 f4       	brne	.+2      	; 0xa8c <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     a8a:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a8c:	4f 70       	andi	r20, 0x0F	; 15
     a8e:	62 95       	swap	r22
     a90:	66 0f       	add	r22, r22
     a92:	66 0f       	add	r22, r22
     a94:	60 7c       	andi	r22, 0xC0	; 192
     a96:	64 2b       	or	r22, r20
     a98:	68 2b       	or	r22, r24
     a9a:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a9c:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a9e:	84 2f       	mov	r24, r20
     aa0:	8f 70       	andi	r24, 0x0F	; 15
     aa2:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     aa6:	45 17       	cp	r20, r21
     aa8:	a1 f4       	brne	.+40     	; 0xad2 <Pipe_ConfigurePipe+0x62>
     aaa:	88 e0       	ldi	r24, 0x08	; 8
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     ab2:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     ab4:	88 0f       	add	r24, r24
     ab6:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     ab8:	82 17       	cp	r24, r18
     aba:	93 07       	cpc	r25, r19
     abc:	10 f4       	brcc	.+4      	; 0xac2 <Pipe_ConfigurePipe+0x52>
     abe:	75 30       	cpi	r23, 0x05	; 5
     ac0:	c1 f7       	brne	.-16     	; 0xab2 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     ac2:	87 2f       	mov	r24, r23
     ac4:	82 95       	swap	r24
     ac6:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ac8:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     aca:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     acc:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     ace:	e0 e0       	ldi	r30, 0x00	; 0
     ad0:	08 c0       	rjmp	.+16     	; 0xae2 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     ad2:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     ad6:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     ada:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     ade:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     ae2:	81 ff       	sbrs	r24, 1
     ae4:	20 c0       	rjmp	.+64     	; 0xb26 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ae6:	90 91 a9 00 	lds	r25, 0x00A9
     aea:	9e 7f       	andi	r25, 0xFE	; 254
     aec:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     af0:	90 91 ab 00 	lds	r25, 0x00AB
     af4:	9d 7f       	andi	r25, 0xFD	; 253
     af6:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     afa:	90 91 a9 00 	lds	r25, 0x00A9
     afe:	91 60       	ori	r25, 0x01	; 1
     b00:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     b04:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     b08:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     b0c:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     b10:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     b14:	80 91 a9 00 	lds	r24, 0x00A9
     b18:	80 62       	ori	r24, 0x20	; 32
     b1a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b1e:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     b22:	87 ff       	sbrs	r24, 7
     b24:	09 c0       	rjmp	.+18     	; 0xb38 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b26:	4f 5f       	subi	r20, 0xFF	; 255
     b28:	47 30       	cpi	r20, 0x07	; 7
     b2a:	09 f0       	breq	.+2      	; 0xb2e <Pipe_ConfigurePipe+0xbe>
     b2c:	b8 cf       	rjmp	.-144    	; 0xa9e <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b2e:	5f 70       	andi	r21, 0x0F	; 15
     b30:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     b38:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     b3a:	0f 91       	pop	r16
     b3c:	08 95       	ret

00000b3e <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     b4c:	e8 2e       	mov	r14, r24
     b4e:	e7 01       	movw	r28, r14
     b50:	7e 01       	movw	r14, r28
     b52:	f9 2e       	mov	r15, r25
     b54:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     b56:	ff 24       	eor	r15, r15
     b58:	0d c0       	rjmp	.+26     	; 0xb74 <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
     b5a:	88 81       	ld	r24, Y
     b5c:	88 23       	and	r24, r24
     b5e:	41 f0       	breq	.+16     	; 0xb70 <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     b60:	29 81       	ldd	r18, Y+1	; 0x01
     b62:	3a 81       	ldd	r19, Y+2	; 0x02
     b64:	6c 81       	ldd	r22, Y+4	; 0x04
     b66:	4b 81       	ldd	r20, Y+3	; 0x03
     b68:	0d 81       	ldd	r16, Y+5	; 0x05
     b6a:	82 df       	rcall	.-252    	; 0xa70 <Pipe_ConfigurePipe>
     b6c:	88 23       	and	r24, r24
     b6e:	31 f0       	breq	.+12     	; 0xb7c <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     b70:	f3 94       	inc	r15
     b72:	26 96       	adiw	r28, 0x06	; 6
     b74:	f1 16       	cp	r15, r17
     b76:	88 f3       	brcs	.-30     	; 0xb5a <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	01 c0       	rjmp	.+2      	; 0xb7e <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     b7c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	ff 90       	pop	r15
     b88:	ef 90       	pop	r14
     b8a:	08 95       	ret

00000b8c <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     b8c:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	98 2f       	mov	r25, r24
     b94:	9f 70       	andi	r25, 0x0F	; 15
     b96:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b9a:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b9e:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     ba2:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ba6:	90 91 a9 00 	lds	r25, 0x00A9
     baa:	9e 7f       	andi	r25, 0xFE	; 254
     bac:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     bb0:	8f 5f       	subi	r24, 0xFF	; 255
     bb2:	87 30       	cpi	r24, 0x07	; 7
     bb4:	71 f7       	brne	.-36     	; 0xb92 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     bb6:	08 95       	ret

00000bb8 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     bb8:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     bbc:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     bc0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bc2:	29 2f       	mov	r18, r25
     bc4:	2f 70       	andi	r18, 0x0F	; 15
     bc6:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     bca:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     bce:	27 ff       	sbrs	r18, 7
     bd0:	0c c0       	rjmp	.+24     	; 0xbea <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     bd2:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     bd6:	53 2f       	mov	r21, r19
     bd8:	5f 70       	andi	r21, 0x0F	; 15
     bda:	30 ff       	sbrs	r19, 0
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <Pipe_IsEndpointBound+0x2a>
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <Pipe_IsEndpointBound+0x2c>
     be2:	20 e8       	ldi	r18, 0x80	; 128
     be4:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     be6:	28 17       	cp	r18, r24
     be8:	49 f0       	breq	.+18     	; 0xbfc <Pipe_IsEndpointBound+0x44>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     bea:	9f 5f       	subi	r25, 0xFF	; 255
     bec:	97 30       	cpi	r25, 0x07	; 7
     bee:	49 f7       	brne	.-46     	; 0xbc2 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bf0:	84 2f       	mov	r24, r20
     bf2:	8f 70       	andi	r24, 0x0F	; 15
     bf4:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     bfe:	08 95       	ret

00000c00 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     c00:	80 91 a2 00 	lds	r24, 0x00A2
     c04:	90 91 a3 00 	lds	r25, 0x00A3

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     c08:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     c0a:	20 91 aa 00 	lds	r18, 0x00AA
     c0e:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     c10:	20 31       	cpi	r18, 0x10	; 16
     c12:	29 f4       	brne	.+10     	; 0xc1e <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c14:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     c18:	20 ff       	sbrs	r18, 0
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <Pipe_WaitUntilReady+0x26>
     c1c:	18 c0       	rjmp	.+48     	; 0xc4e <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     c1e:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     c22:	22 fd       	sbrc	r18, 2
     c24:	14 c0       	rjmp	.+40     	; 0xc4e <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c26:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     c2a:	21 fd       	sbrc	r18, 1
     c2c:	12 c0       	rjmp	.+36     	; 0xc52 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     c2e:	20 91 37 01 	lds	r18, 0x0137
     c32:	21 30       	cpi	r18, 0x01	; 1
     c34:	81 f0       	breq	.+32     	; 0xc56 <Pipe_WaitUntilReady+0x56>
     c36:	20 91 a2 00 	lds	r18, 0x00A2
     c3a:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c3e:	28 17       	cp	r18, r24
     c40:	39 07       	cpc	r19, r25
     c42:	19 f3       	breq	.-58     	; 0xc0a <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c44:	44 23       	and	r20, r20
     c46:	49 f0       	breq	.+18     	; 0xc5a <Pipe_WaitUntilReady+0x5a>
     c48:	41 50       	subi	r20, 0x01	; 1
     c4a:	c9 01       	movw	r24, r18
     c4c:	de cf       	rjmp	.-68     	; 0xc0a <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     c5a:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     c5c:	08 95       	ret

00000c5e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     c5e:	75 d0       	rcall	.+234    	; 0xd4a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c60:	7c d0       	rcall	.+248    	; 0xd5a <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c62:	e0 ee       	ldi	r30, 0xE0	; 224
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	81 60       	ori	r24, 0x01	; 1
     c6a:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     c6c:	e8 ed       	ldi	r30, 0xD8	; 216
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8f 77       	andi	r24, 0x7F	; 127
     c74:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c76:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     c78:	a7 ed       	ldi	r26, 0xD7	; 215
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	8c 91       	ld	r24, X
     c7e:	8e 7f       	andi	r24, 0xFE	; 254
     c80:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c82:	80 81       	ld	r24, Z
     c84:	8f 7e       	andi	r24, 0xEF	; 239
     c86:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c88:	10 92 2e 01 	sts	0x012E, r1
}
     c8c:	08 95       	ret

00000c8e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c8e:	5d d0       	rcall	.+186    	; 0xd4a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c90:	64 d0       	rcall	.+200    	; 0xd5a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c92:	80 91 d8 00 	lds	r24, 0x00D8
     c96:	8f 77       	andi	r24, 0x7F	; 127
     c98:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     c9c:	80 91 d8 00 	lds	r24, 0x00D8
     ca0:	80 68       	ori	r24, 0x80	; 128
     ca2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     ca6:	80 91 d8 00 	lds	r24, 0x00D8
     caa:	8f 7d       	andi	r24, 0xDF	; 223
     cac:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     cb0:	80 91 d7 00 	lds	r24, 0x00D7
     cb4:	8f 77       	andi	r24, 0x7F	; 127
     cb6:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     cba:	8c e0       	ldi	r24, 0x0C	; 12
     cbc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     cbe:	8e e0       	ldi	r24, 0x0E	; 14
     cc0:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     cc2:	09 b4       	in	r0, 0x29	; 41
     cc4:	00 fe       	sbrs	r0, 0
     cc6:	fd cf       	rjmp	.-6      	; 0xcc2 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	80 93 37 01 	sts	0x0137, r24
	USB_Host_ConfigurationNumber = 0;
     cce:	10 92 2d 01 	sts	0x012D, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     cd2:	80 e4       	ldi	r24, 0x40	; 64
     cd4:	80 93 29 01 	sts	0x0129, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     cd8:	80 91 d8 00 	lds	r24, 0x00D8
     cdc:	80 64       	ori	r24, 0x40	; 64
     cde:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ce2:	80 91 dd 00 	lds	r24, 0x00DD
     ce6:	81 60       	ori	r24, 0x01	; 1
     ce8:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     cec:	80 91 dd 00 	lds	r24, 0x00DD
     cf0:	84 60       	ori	r24, 0x04	; 4
     cf2:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     cf6:	80 91 d7 00 	lds	r24, 0x00D7
     cfa:	8f 7e       	andi	r24, 0xEF	; 239
     cfc:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     d00:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     d02:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     d04:	80 91 de 00 	lds	r24, 0x00DE
     d08:	81 60       	ori	r24, 0x01	; 1
     d0a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     d0e:	80 91 de 00 	lds	r24, 0x00DE
     d12:	84 60       	ori	r24, 0x04	; 4
     d14:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     d18:	80 91 e0 00 	lds	r24, 0x00E0
     d1c:	8e 7f       	andi	r24, 0xFE	; 254
     d1e:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     d22:	80 91 d8 00 	lds	r24, 0x00D8
     d26:	80 61       	ori	r24, 0x10	; 16
     d28:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     d2c:	08 95       	ret

00000d2e <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d2e:	e8 ed       	ldi	r30, 0xD8	; 216
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8f 7e       	andi	r24, 0xEF	; 239
     d36:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     d38:	e7 ed       	ldi	r30, 0xD7	; 215
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	81 60       	ori	r24, 0x01	; 1
     d40:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	80 93 2e 01 	sts	0x012E, r24

	USB_ResetInterface();
}
     d48:	a2 cf       	rjmp	.-188    	; 0xc8e <USB_ResetInterface>

00000d4a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d4a:	e8 ed       	ldi	r30, 0xD8	; 216
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8c 7f       	andi	r24, 0xFC	; 252
     d52:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     d54:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     d58:	08 95       	ret

00000d5a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d5a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     d5e:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     d62:	08 95       	ret

00000d64 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d64:	1f 92       	push	r1
     d66:	0f 92       	push	r0
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	0f 92       	push	r0
     d6c:	0b b6       	in	r0, 0x3b	; 59
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d8a:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d8e:	85 ff       	sbrs	r24, 5
     d90:	0a c0       	rjmp	.+20     	; 0xda6 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d92:	80 91 a0 00 	lds	r24, 0x00A0
     d96:	85 ff       	sbrs	r24, 5
     d98:	06 c0       	rjmp	.+12     	; 0xda6 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d9a:	80 91 9f 00 	lds	r24, 0x009F
     d9e:	8f 7d       	andi	r24, 0xDF	; 223
     da0:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     da4:	0c d1       	rcall	.+536    	; 0xfbe <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     da6:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     daa:	81 ff       	sbrs	r24, 1
     dac:	15 c0       	rjmp	.+42     	; 0xdd8 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     dae:	80 91 a0 00 	lds	r24, 0x00A0
     db2:	81 ff       	sbrs	r24, 1
     db4:	11 c0       	rjmp	.+34     	; 0xdd8 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     db6:	80 91 9f 00 	lds	r24, 0x009F
     dba:	8d 7f       	andi	r24, 0xFD	; 253
     dbc:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     dc0:	80 91 9f 00 	lds	r24, 0x009F
     dc4:	8e 7f       	andi	r24, 0xFE	; 254
     dc6:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     dca:	80 91 a0 00 	lds	r24, 0x00A0
     dce:	8d 7f       	andi	r24, 0xFD	; 253
     dd0:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     dd4:	1e db       	rcall	.-2500   	; 0x412 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     dd6:	5b df       	rcall	.-330    	; 0xc8e <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     dd8:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     ddc:	81 ff       	sbrs	r24, 1
     dde:	15 c0       	rjmp	.+42     	; 0xe0a <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     de0:	80 91 de 00 	lds	r24, 0x00DE
     de4:	81 ff       	sbrs	r24, 1
     de6:	11 c0       	rjmp	.+34     	; 0xe0a <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     de8:	80 91 df 00 	lds	r24, 0x00DF
     dec:	8d 7f       	andi	r24, 0xFD	; 253
     dee:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     df2:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     df4:	80 91 dd 00 	lds	r24, 0x00DD
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	54 db       	rcall	.-2392   	; 0x4aa <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     e02:	07 db       	rcall	.-2546   	; 0x412 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	80 93 37 01 	sts	0x0137, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     e0a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     e0e:	80 ff       	sbrs	r24, 0
     e10:	17 c0       	rjmp	.+46     	; 0xe40 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     e12:	80 91 de 00 	lds	r24, 0x00DE
     e16:	80 ff       	sbrs	r24, 0
     e18:	13 c0       	rjmp	.+38     	; 0xe40 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     e1a:	80 91 df 00 	lds	r24, 0x00DF
     e1e:	8e 7f       	andi	r24, 0xFE	; 254
     e20:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     e24:	80 91 de 00 	lds	r24, 0x00DE
     e28:	8e 7f       	andi	r24, 0xFE	; 254
     e2a:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     e2e:	eb da       	rcall	.-2602   	; 0x406 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e30:	80 91 a0 00 	lds	r24, 0x00A0
     e34:	82 60       	ori	r24, 0x02	; 2
     e36:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	80 93 37 01 	sts	0x0137, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     e40:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     e44:	82 ff       	sbrs	r24, 2
     e46:	0e c0       	rjmp	.+28     	; 0xe64 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     e48:	80 91 de 00 	lds	r24, 0x00DE
     e4c:	82 ff       	sbrs	r24, 2
     e4e:	0a c0       	rjmp	.+20     	; 0xe64 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     e50:	80 91 df 00 	lds	r24, 0x00DF
     e54:	8b 7f       	andi	r24, 0xFB	; 251
     e56:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	45 db       	rcall	.-2422   	; 0x4ea <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     e60:	d8 da       	rcall	.-2640   	; 0x412 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     e62:	15 df       	rcall	.-470    	; 0xc8e <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e64:	ff 91       	pop	r31
     e66:	ef 91       	pop	r30
     e68:	bf 91       	pop	r27
     e6a:	af 91       	pop	r26
     e6c:	9f 91       	pop	r25
     e6e:	8f 91       	pop	r24
     e70:	7f 91       	pop	r23
     e72:	6f 91       	pop	r22
     e74:	5f 91       	pop	r21
     e76:	4f 91       	pop	r20
     e78:	3f 91       	pop	r19
     e7a:	2f 91       	pop	r18
     e7c:	0f 90       	pop	r0
     e7e:	0b be       	out	0x3b, r0	; 59
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	0f 90       	pop	r0
     e86:	1f 90       	pop	r1
     e88:	18 95       	reti

00000e8a <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	29 97       	sbiw	r28, 0x09	; 9
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	6b 01       	movw	r12, r22
     eac:	8a 01       	movw	r16, r20
     eae:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     eb0:	90 e8       	ldi	r25, 0x80	; 128
     eb2:	90 93 2f 01 	sts	0x012F, r25
     eb6:	96 e0       	ldi	r25, 0x06	; 6
     eb8:	90 93 30 01 	sts	0x0130, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ec2:	90 93 32 01 	sts	0x0132, r25
     ec6:	80 93 31 01 	sts	0x0131, r24
     eca:	10 92 34 01 	sts	0x0134, r1
     ece:	10 92 33 01 	sts	0x0133, r1
     ed2:	89 e0       	ldi	r24, 0x09	; 9
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	90 93 36 01 	sts	0x0136, r25
     eda:	80 93 35 01 	sts	0x0135, r24
     ede:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     ee2:	ce 01       	movw	r24, r28
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	95 d0       	rcall	.+298    	; 0x1012 <USB_Host_SendControlRequest>
     ee8:	88 23       	and	r24, r24
     eea:	b9 f4       	brne	.+46     	; 0xf1a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
     ef0:	f6 01       	movw	r30, r12
     ef2:	91 83       	std	Z+1, r25	; 0x01
     ef4:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     ef6:	e8 16       	cp	r14, r24
     ef8:	f9 06       	cpc	r15, r25
     efa:	70 f0       	brcs	.+28     	; 0xf18 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     efc:	90 93 36 01 	sts	0x0136, r25
     f00:	80 93 35 01 	sts	0x0135, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f04:	c8 01       	movw	r24, r16
     f06:	85 d0       	rcall	.+266    	; 0x1012 <USB_Host_SendControlRequest>
     f08:	88 23       	and	r24, r24
     f0a:	39 f4       	brne	.+14     	; 0xf1a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f0c:	f8 01       	movw	r30, r16
     f0e:	91 81       	ldd	r25, Z+1	; 0x01
     f10:	92 30       	cpi	r25, 0x02	; 2
     f12:	19 f0       	breq	.+6      	; 0xf1a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     f14:	86 e0       	ldi	r24, 0x06	; 6
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     f18:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f1a:	29 96       	adiw	r28, 0x09	; 9
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	08 95       	ret

00000f38 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     f38:	af 92       	push	r10
     f3a:	bf 92       	push	r11
     f3c:	cf 92       	push	r12
     f3e:	df 92       	push	r13
     f40:	ef 92       	push	r14
     f42:	ff 92       	push	r15
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	8c 01       	movw	r16, r24
     f4e:	eb 01       	movw	r28, r22
     f50:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     f52:	23 c0       	rjmp	.+70     	; 0xf9a <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f54:	e8 81       	ld	r30, Y
     f56:	f9 81       	ldd	r31, Y+1	; 0x01
     f58:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     f5a:	20 81       	ld	r18, Z
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	c7 01       	movw	r24, r14
     f60:	2e 15       	cp	r18, r14
     f62:	3f 05       	cpc	r19, r15
     f64:	08 f4       	brcc	.+2      	; 0xf68 <USB_GetNextDescriptorComp+0x30>
     f66:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     f68:	e8 0f       	add	r30, r24
     f6a:	f9 1f       	adc	r31, r25
     f6c:	f9 83       	std	Y+1, r31	; 0x01
     f6e:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     f70:	f8 01       	movw	r30, r16
     f72:	20 81       	ld	r18, Z
     f74:	31 81       	ldd	r19, Z+1	; 0x01
     f76:	28 1b       	sub	r18, r24
     f78:	39 0b       	sbc	r19, r25
     f7a:	31 83       	std	Z+1, r19	; 0x01
     f7c:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f7e:	88 81       	ld	r24, Y
     f80:	99 81       	ldd	r25, Y+1	; 0x01
     f82:	f6 01       	movw	r30, r12
     f84:	09 95       	icall
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	41 f0       	breq	.+16     	; 0xf9a <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	69 f4       	brne	.+26     	; 0xfa8 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
     f8e:	a8 82       	st	Y, r10
     f90:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
     f92:	f8 01       	movw	r30, r16
     f94:	f1 82       	std	Z+1, r15	; 0x01
     f96:	e0 82       	st	Z, r14
     f98:	07 c0       	rjmp	.+14     	; 0xfa8 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     f9a:	f8 01       	movw	r30, r16
     f9c:	e0 80       	ld	r14, Z
     f9e:	f1 80       	ldd	r15, Z+1	; 0x01
     fa0:	e1 14       	cp	r14, r1
     fa2:	f1 04       	cpc	r15, r1
     fa4:	b9 f6       	brne	.-82     	; 0xf54 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     fa6:	82 e0       	ldi	r24, 0x02	; 2
}
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	df 90       	pop	r13
     fb6:	cf 90       	pop	r12
     fb8:	bf 90       	pop	r11
     fba:	af 90       	pop	r10
     fbc:	08 95       	ret

00000fbe <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     fbe:	08 95       	ret

00000fc0 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
     fc8:	c8 ee       	ldi	r28, 0xE8	; 232
     fca:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     fcc:	07 c0       	rjmp	.+14     	; 0xfdc <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	0b db       	rcall	.-2538   	; 0x5e8 <USB_Host_WaitMS>
     fd2:	88 23       	and	r24, r24
     fd4:	d1 f4       	brne	.+52     	; 0x100a <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     fd6:	20 97       	sbiw	r28, 0x00	; 0
     fd8:	b9 f0       	breq	.+46     	; 0x1008 <USB_Host_WaitForIOS+0x48>
     fda:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     fdc:	11 23       	and	r17, r17
     fde:	29 f4       	brne	.+10     	; 0xfea <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     fe0:	80 91 a6 00 	lds	r24, 0x00A6
     fe4:	83 ff       	sbrs	r24, 3
     fe6:	f3 cf       	rjmp	.-26     	; 0xfce <USB_Host_WaitForIOS+0xe>
     fe8:	0d c0       	rjmp	.+26     	; 0x1004 <USB_Host_WaitForIOS+0x44>
     fea:	11 30       	cpi	r17, 0x01	; 1
     fec:	29 f4       	brne	.+10     	; 0xff8 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     fee:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     ff2:	80 ff       	sbrs	r24, 0
     ff4:	ec cf       	rjmp	.-40     	; 0xfce <USB_Host_WaitForIOS+0xe>
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ff8:	12 30       	cpi	r17, 0x02	; 2
     ffa:	49 f7       	brne	.-46     	; 0xfce <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ffc:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1000:	82 ff       	sbrs	r24, 2
    1002:	e5 cf       	rjmp	.-54     	; 0xfce <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	01 c0       	rjmp	.+2      	; 0x100a <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1008:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	08 95       	ret

00001012 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1020:	e0 90 9e 00 	lds	r14, 0x009E
    1024:	ff 24       	eor	r15, r15
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	e8 22       	and	r14, r24
    102a:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    102c:	c0 91 35 01 	lds	r28, 0x0135
    1030:	d0 91 36 01 	lds	r29, 0x0136
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1034:	80 91 9e 00 	lds	r24, 0x009E
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	d3 da       	rcall	.-2650   	; 0x5e8 <USB_Host_WaitMS>
    1042:	88 23       	and	r24, r24
    1044:	09 f0       	breq	.+2      	; 0x1048 <USB_Host_SendControlRequest+0x36>
    1046:	cb c0       	rjmp	.+406    	; 0x11de <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1048:	80 91 aa 00 	lds	r24, 0x00AA
    104c:	8f 7c       	andi	r24, 0xCF	; 207
    104e:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1052:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1056:	80 91 a6 00 	lds	r24, 0x00A6
    105a:	8f 7e       	andi	r24, 0xEF	; 239
    105c:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1060:	80 91 a9 00 	lds	r24, 0x00A9
    1064:	8f 7b       	andi	r24, 0xBF	; 191
    1066:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    106a:	ef e2       	ldi	r30, 0x2F	; 47
    106c:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    106e:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1070:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	e7 33       	cpi	r30, 0x37	; 55
    1078:	f8 07       	cpc	r31, r24
    107a:	c9 f7       	brne	.-14     	; 0x106e <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    107c:	80 91 a6 00 	lds	r24, 0x00A6
    1080:	87 77       	andi	r24, 0x77	; 119
    1082:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	9b df       	rcall	.-202    	; 0xfc0 <USB_Host_WaitForIOS>
    108a:	88 23       	and	r24, r24
    108c:	09 f0       	breq	.+2      	; 0x1090 <USB_Host_SendControlRequest+0x7e>
    108e:	a7 c0       	rjmp	.+334    	; 0x11de <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1090:	80 91 a9 00 	lds	r24, 0x00A9
    1094:	80 64       	ori	r24, 0x40	; 64
    1096:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	a5 da       	rcall	.-2742   	; 0x5e8 <USB_Host_WaitMS>
    109e:	88 23       	and	r24, r24
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <USB_Host_SendControlRequest+0x92>
    10a2:	9d c0       	rjmp	.+314    	; 0x11de <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10a4:	80 91 2f 01 	lds	r24, 0x012F
    10a8:	87 ff       	sbrs	r24, 7
    10aa:	4f c0       	rjmp	.+158    	; 0x114a <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10ac:	80 91 aa 00 	lds	r24, 0x00AA
    10b0:	8f 7c       	andi	r24, 0xCF	; 207
    10b2:	80 61       	ori	r24, 0x10	; 16
    10b4:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    10b8:	01 15       	cp	r16, r1
    10ba:	11 05       	cpc	r17, r1
    10bc:	61 f5       	brne	.+88     	; 0x1116 <USB_Host_SendControlRequest+0x104>
    10be:	2d c0       	rjmp	.+90     	; 0x111a <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10c0:	80 91 a9 00 	lds	r24, 0x00A9
    10c4:	8f 7b       	andi	r24, 0xBF	; 191
    10c6:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	79 df       	rcall	.-270    	; 0xfc0 <USB_Host_WaitForIOS>
    10ce:	88 23       	and	r24, r24
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <USB_Host_SendControlRequest+0xc2>
    10d2:	85 c0       	rjmp	.+266    	; 0x11de <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10d4:	80 91 f6 00 	lds	r24, 0x00F6
    10d8:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	49 f4       	brne	.+18     	; 0x10f2 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    10e0:	c0 e0       	ldi	r28, 0x00	; 0
    10e2:	d0 e0       	ldi	r29, 0x00	; 0
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    10e6:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    10ea:	f8 01       	movw	r30, r16
    10ec:	81 93       	st	Z+, r24
    10ee:	8f 01       	movw	r16, r30
					DataLen--;
    10f0:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10f2:	80 91 f6 00 	lds	r24, 0x00F6
    10f6:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	11 f0       	breq	.+4      	; 0x1102 <USB_Host_SendControlRequest+0xf0>
    10fe:	20 97       	sbiw	r28, 0x00	; 0
    1100:	91 f7       	brne	.-28     	; 0x10e6 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1102:	80 91 a9 00 	lds	r24, 0x00A9
    1106:	80 64       	ori	r24, 0x40	; 64
    1108:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    110c:	80 91 a6 00 	lds	r24, 0x00A6
    1110:	8e 77       	andi	r24, 0x7E	; 126
    1112:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1116:	20 97       	sbiw	r28, 0x00	; 0
    1118:	99 f6       	brne	.-90     	; 0x10c0 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    111a:	80 91 aa 00 	lds	r24, 0x00AA
    111e:	8f 7c       	andi	r24, 0xCF	; 207
    1120:	80 62       	ori	r24, 0x20	; 32
    1122:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1126:	80 91 a9 00 	lds	r24, 0x00A9
    112a:	8f 7b       	andi	r24, 0xBF	; 191
    112c:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	46 df       	rcall	.-372    	; 0xfc0 <USB_Host_WaitForIOS>
    1134:	88 23       	and	r24, r24
    1136:	09 f0       	breq	.+2      	; 0x113a <USB_Host_SendControlRequest+0x128>
    1138:	52 c0       	rjmp	.+164    	; 0x11de <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    113a:	80 91 a6 00 	lds	r24, 0x00A6
    113e:	8b 77       	andi	r24, 0x7B	; 123
    1140:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	3c df       	rcall	.-392    	; 0xfc0 <USB_Host_WaitForIOS>
    1148:	4a c0       	rjmp	.+148    	; 0x11de <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    114a:	01 15       	cp	r16, r1
    114c:	11 05       	cpc	r17, r1
    114e:	99 f1       	breq	.+102    	; 0x11b6 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1150:	80 91 aa 00 	lds	r24, 0x00AA
    1154:	8f 7c       	andi	r24, 0xCF	; 207
    1156:	80 62       	ori	r24, 0x20	; 32
    1158:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    115c:	80 91 a9 00 	lds	r24, 0x00A9
    1160:	8f 7b       	andi	r24, 0xBF	; 191
    1162:	80 93 a9 00 	sts	0x00A9, r24
    1166:	1c c0       	rjmp	.+56     	; 0x11a0 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	2a df       	rcall	.-428    	; 0xfc0 <USB_Host_WaitForIOS>
    116c:	88 23       	and	r24, r24
    116e:	b9 f5       	brne	.+110    	; 0x11de <USB_Host_SendControlRequest+0x1cc>
    1170:	f8 01       	movw	r30, r16
    1172:	06 c0       	rjmp	.+12     	; 0x1180 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1174:	81 91       	ld	r24, Z+
    1176:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1178:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    117c:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    117e:	59 f0       	breq	.+22     	; 0x1196 <USB_Host_SendControlRequest+0x184>
    1180:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1182:	20 91 f6 00 	lds	r18, 0x00F6
    1186:	30 91 f7 00 	lds	r19, 0x00F7
    118a:	80 91 29 01 	lds	r24, 0x0129
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	28 17       	cp	r18, r24
    1192:	39 07       	cpc	r19, r25
    1194:	78 f3       	brcs	.-34     	; 0x1174 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1196:	80 91 a6 00 	lds	r24, 0x00A6
    119a:	8b 77       	andi	r24, 0x7B	; 123
    119c:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11a0:	20 97       	sbiw	r28, 0x00	; 0
    11a2:	11 f7       	brne	.-60     	; 0x1168 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11a4:	82 e0       	ldi	r24, 0x02	; 2
    11a6:	0c df       	rcall	.-488    	; 0xfc0 <USB_Host_WaitForIOS>
    11a8:	88 23       	and	r24, r24
    11aa:	c9 f4       	brne	.+50     	; 0x11de <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11ac:	80 91 a9 00 	lds	r24, 0x00A9
    11b0:	80 64       	ori	r24, 0x40	; 64
    11b2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11b6:	80 91 aa 00 	lds	r24, 0x00AA
    11ba:	8f 7c       	andi	r24, 0xCF	; 207
    11bc:	80 61       	ori	r24, 0x10	; 16
    11be:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11c2:	80 91 a9 00 	lds	r24, 0x00A9
    11c6:	8f 7b       	andi	r24, 0xBF	; 191
    11c8:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	f8 de       	rcall	.-528    	; 0xfc0 <USB_Host_WaitForIOS>
    11d0:	88 23       	and	r24, r24
    11d2:	29 f4       	brne	.+10     	; 0x11de <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11d4:	90 91 a6 00 	lds	r25, 0x00A6
    11d8:	9e 77       	andi	r25, 0x7E	; 126
    11da:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11de:	90 91 a9 00 	lds	r25, 0x00A9
    11e2:	90 64       	ori	r25, 0x40	; 64
    11e4:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    11e8:	e1 14       	cp	r14, r1
    11ea:	f1 04       	cpc	r15, r1
    11ec:	29 f4       	brne	.+10     	; 0x11f8 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    11ee:	90 91 9e 00 	lds	r25, 0x009E
    11f2:	9e 7f       	andi	r25, 0xFE	; 254
    11f4:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    11fe:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	08 95       	ret

00001210 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1210:	1f 93       	push	r17
    1212:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1214:	10 92 2f 01 	sts	0x012F, r1
    1218:	89 e0       	ldi	r24, 0x09	; 9
    121a:	80 93 30 01 	sts	0x0130, r24
    121e:	10 93 31 01 	sts	0x0131, r17
    1222:	10 92 32 01 	sts	0x0132, r1
    1226:	10 92 34 01 	sts	0x0134, r1
    122a:	10 92 33 01 	sts	0x0133, r1
    122e:	10 92 36 01 	sts	0x0136, r1
    1232:	10 92 35 01 	sts	0x0135, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1236:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	e9 de       	rcall	.-558    	; 0x1012 <USB_Host_SendControlRequest>
    1240:	88 23       	and	r24, r24
    1242:	49 f4       	brne	.+18     	; 0x1256 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1244:	10 93 2d 01 	sts	0x012D, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1248:	11 23       	and	r17, r17
    124a:	11 f0       	breq	.+4      	; 0x1250 <USB_Host_SetDeviceConfiguration+0x40>
    124c:	9b e0       	ldi	r25, 0x0B	; 11
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <USB_Host_SetDeviceConfiguration+0x42>
    1250:	9a e0       	ldi	r25, 0x0A	; 10
    1252:	90 93 37 01 	sts	0x0137, r25
	}

	return ErrorCode;
}
    1256:	1f 91       	pop	r17
    1258:	08 95       	ret

0000125a <USB_Host_ClearEndpointStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    125a:	92 e0       	ldi	r25, 0x02	; 2
    125c:	90 93 2f 01 	sts	0x012F, r25
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	90 93 30 01 	sts	0x0130, r25
    1266:	10 92 32 01 	sts	0x0132, r1
    126a:	10 92 31 01 	sts	0x0131, r1
    126e:	80 93 33 01 	sts	0x0133, r24
    1272:	10 92 34 01 	sts	0x0134, r1
    1276:	10 92 36 01 	sts	0x0136, r1
    127a:	10 92 35 01 	sts	0x0135, r1
    127e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
}
    1286:	c5 ce       	rjmp	.-630    	; 0x1012 <USB_Host_SendControlRequest>

00001288 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1288:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    128a:	10 91 a7 00 	lds	r17, 0x00A7
    128e:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1290:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1294:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1298:	fc d9       	rcall	.-3080   	; 0x692 <USB_Host_ProcessNextHostState>
    129a:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    129e:	1f 91       	pop	r17
    12a0:	08 95       	ret

000012a2 <DCOMP_SI_Host_NextSIInterface>:

	return SI_ENUMERROR_NoError;
}

uint8_t DCOMP_SI_Host_NextSIInterface(void* const CurrentDescriptor)
{
    12a2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    12a4:	81 81       	ldd	r24, Z+1	; 0x01
    12a6:	84 30       	cpi	r24, 0x04	; 4
    12a8:	49 f4       	brne	.+18     	; 0x12bc <DCOMP_SI_Host_NextSIInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
    12aa:	85 81       	ldd	r24, Z+5	; 0x05
    12ac:	86 30       	cpi	r24, 0x06	; 6
    12ae:	31 f4       	brne	.+12     	; 0x12bc <DCOMP_SI_Host_NextSIInterface+0x1a>
    12b0:	86 81       	ldd	r24, Z+6	; 0x06
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	19 f4       	brne	.+6      	; 0x12bc <DCOMP_SI_Host_NextSIInterface+0x1a>
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
    12b6:	87 81       	ldd	r24, Z+7	; 0x07
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <DCOMP_SI_Host_NextSIInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    12be:	08 95       	ret

		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
		    (Interface->Protocol == SI_CSCP_BulkOnlyProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    12c0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    12c2:	08 95       	ret

000012c4 <DCOMP_SI_Host_NextSIInterfaceEndpoint>:

uint8_t DCOMP_SI_Host_NextSIInterfaceEndpoint(void* const CurrentDescriptor)
{
    12c4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    12c6:	81 81       	ldd	r24, Z+1	; 0x01
    12c8:	85 30       	cpi	r24, 0x05	; 5
    12ca:	51 f4       	brne	.+20     	; 0x12e0 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    12cc:	83 81       	ldd	r24, Z+3	; 0x03
    12ce:	83 70       	andi	r24, 0x03	; 3

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    12d0:	82 50       	subi	r24, 0x02	; 2
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	38 f4       	brcc	.+14     	; 0x12e4 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x20>
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    12d6:	82 81       	ldd	r24, Z+2	; 0x02
    12d8:	6f dc       	rcall	.-1826   	; 0xbb8 <Pipe_IsEndpointBound>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    12da:	88 23       	and	r24, r24
    12dc:	19 f4       	brne	.+6      	; 0x12e4 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x20>
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    12e0:	84 30       	cpi	r24, 0x04	; 4
    12e2:	21 f0       	breq	.+8      	; 0x12ec <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x28>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	08 95       	ret
		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    12ee:	08 95       	ret

000012f0 <SI_Host_ConfigurePipes>:
#include "StillImageClassHost.h"

uint8_t SI_Host_ConfigurePipes(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
                               void* ConfigDescriptorData)
{
    12f0:	4f 92       	push	r4
    12f2:	5f 92       	push	r5
    12f4:	6f 92       	push	r6
    12f6:	7f 92       	push	r7
    12f8:	8f 92       	push	r8
    12fa:	9f 92       	push	r9
    12fc:	af 92       	push	r10
    12fe:	bf 92       	push	r11
    1300:	cf 92       	push	r12
    1302:	df 92       	push	r13
    1304:	ef 92       	push	r14
    1306:	ff 92       	push	r15
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <SI_Host_ConfigurePipes+0x22>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <SI_Host_ConfigurePipes+0x24>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	8c 01       	movw	r16, r24
    131a:	7a 83       	std	Y+2, r23	; 0x02
    131c:	69 83       	std	Y+1, r22	; 0x01
    131e:	5c 83       	std	Y+4, r21	; 0x04
    1320:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));
    1322:	42 96       	adiw	r24, 0x12	; 18
    1324:	fc 01       	movw	r30, r24
    1326:	87 e0       	ldi	r24, 0x07	; 7
    1328:	df 01       	movw	r26, r30
    132a:	1d 92       	st	X+, r1
    132c:	8a 95       	dec	r24
    132e:	e9 f7       	brne	.-6      	; 0x132a <SI_Host_ConfigurePipes+0x3a>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1330:	eb 81       	ldd	r30, Y+3	; 0x03
    1332:	fc 81       	ldd	r31, Y+4	; 0x04
    1334:	81 81       	ldd	r24, Z+1	; 0x01
    1336:	82 30       	cpi	r24, 0x02	; 2
    1338:	09 f0       	breq	.+2      	; 0x133c <SI_Host_ConfigurePipes+0x4c>
    133a:	87 c0       	rjmp	.+270    	; 0x144a <SI_Host_ConfigurePipes+0x15a>
    133c:	88 24       	eor	r8, r8
    133e:	99 24       	eor	r9, r9
    1340:	aa 24       	eor	r10, r10
    1342:	bb 24       	eor	r11, r11
    1344:	cc 24       	eor	r12, r12
    1346:	dd 24       	eor	r13, r13
    1348:	ee 24       	eor	r14, r14
    134a:	ff 24       	eor	r15, r15
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    134c:	83 e0       	ldi	r24, 0x03	; 3
    134e:	48 2e       	mov	r4, r24
    1350:	51 2c       	mov	r5, r1
    1352:	4c 0e       	add	r4, r28
    1354:	5d 1e       	adc	r5, r29
    1356:	3e 01       	movw	r6, r28
    1358:	08 94       	sec
    135a:	61 1c       	adc	r6, r1
    135c:	71 1c       	adc	r7, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    135e:	81 14       	cp	r8, r1
    1360:	91 04       	cpc	r9, r1
    1362:	39 f0       	breq	.+14     	; 0x1372 <SI_Host_ConfigurePipes+0x82>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1364:	c3 01       	movw	r24, r6
    1366:	b2 01       	movw	r22, r4
    1368:	42 e6       	ldi	r20, 0x62	; 98
    136a:	59 e0       	ldi	r21, 0x09	; 9
    136c:	e5 dd       	rcall	.-1078   	; 0xf38 <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    136e:	88 23       	and	r24, r24
    1370:	89 f0       	breq	.+34     	; 0x1394 <SI_Host_ConfigurePipes+0xa4>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1372:	c3 01       	movw	r24, r6
    1374:	b2 01       	movw	r22, r4
    1376:	41 e5       	ldi	r20, 0x51	; 81
    1378:	59 e0       	ldi	r21, 0x09	; 9
    137a:	de dd       	rcall	.-1092   	; 0xf38 <USB_GetNextDescriptorComp>
    137c:	88 23       	and	r24, r24
    137e:	09 f0       	breq	.+2      	; 0x1382 <SI_Host_ConfigurePipes+0x92>
    1380:	66 c0       	rjmp	.+204    	; 0x144e <SI_Host_ConfigurePipes+0x15e>
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1382:	8b 80       	ldd	r8, Y+3	; 0x03
    1384:	9c 80       	ldd	r9, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
			EventsEndpoint  = NULL;
    1386:	aa 24       	eor	r10, r10
    1388:	bb 24       	eor	r11, r11
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    138a:	cc 24       	eor	r12, r12
    138c:	dd 24       	eor	r13, r13
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    138e:	ee 24       	eor	r14, r14
    1390:	ff 24       	eor	r15, r15
    1392:	e5 cf       	rjmp	.-54     	; 0x135e <SI_Host_ConfigurePipes+0x6e>
			EventsEndpoint  = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1394:	eb 81       	ldd	r30, Y+3	; 0x03
    1396:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	87 ff       	sbrs	r24, 7
    139c:	06 c0       	rjmp	.+12     	; 0x13aa <SI_Host_ConfigurePipes+0xba>
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    139e:	83 81       	ldd	r24, Z+3	; 0x03
    13a0:	83 70       	andi	r24, 0x03	; 3
    13a2:	83 30       	cpi	r24, 0x03	; 3
    13a4:	21 f4       	brne	.+8      	; 0x13ae <SI_Host_ConfigurePipes+0xbe>
			  EventsEndpoint = EndpointData;
    13a6:	5f 01       	movw	r10, r30
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <SI_Host_ConfigurePipes+0xc0>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
    13aa:	6f 01       	movw	r12, r30
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <SI_Host_ConfigurePipes+0xc0>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  EventsEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
    13ae:	7f 01       	movw	r14, r30
	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
    13b0:	e1 14       	cp	r14, r1
    13b2:	f1 04       	cpc	r15, r1
    13b4:	a1 f2       	breq	.-88     	; 0x135e <SI_Host_ConfigurePipes+0x6e>
    13b6:	c1 14       	cp	r12, r1
    13b8:	d1 04       	cpc	r13, r1
    13ba:	89 f2       	breq	.-94     	; 0x135e <SI_Host_ConfigurePipes+0x6e>
    13bc:	a1 14       	cp	r10, r1
    13be:	b1 04       	cpc	r11, r1
    13c0:	71 f2       	breq	.-100    	; 0x135e <SI_Host_ConfigurePipes+0x6e>
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	SIInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    13c2:	f7 01       	movw	r30, r14
    13c4:	84 81       	ldd	r24, Z+4	; 0x04
    13c6:	95 81       	ldd	r25, Z+5	; 0x05
    13c8:	d8 01       	movw	r26, r16
    13ca:	12 96       	adiw	r26, 0x02	; 2
    13cc:	9c 93       	st	X, r25
    13ce:	8e 93       	st	-X, r24
    13d0:	11 97       	sbiw	r26, 0x01	; 1
	SIInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    13d2:	82 81       	ldd	r24, Z+2	; 0x02
    13d4:	13 96       	adiw	r26, 0x03	; 3
    13d6:	8c 93       	st	X, r24
    13d8:	13 97       	sbiw	r26, 0x03	; 3
	SIInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    13da:	22 e0       	ldi	r18, 0x02	; 2
    13dc:	14 96       	adiw	r26, 0x04	; 4
    13de:	2c 93       	st	X, r18
    13e0:	14 97       	sbiw	r26, 0x04	; 4

	SIInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    13e2:	f6 01       	movw	r30, r12
    13e4:	84 81       	ldd	r24, Z+4	; 0x04
    13e6:	95 81       	ldd	r25, Z+5	; 0x05
    13e8:	18 96       	adiw	r26, 0x08	; 8
    13ea:	9c 93       	st	X, r25
    13ec:	8e 93       	st	-X, r24
    13ee:	17 97       	sbiw	r26, 0x07	; 7
	SIInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    13f0:	82 81       	ldd	r24, Z+2	; 0x02
    13f2:	19 96       	adiw	r26, 0x09	; 9
    13f4:	8c 93       	st	X, r24
    13f6:	19 97       	sbiw	r26, 0x09	; 9
	SIInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    13f8:	1a 96       	adiw	r26, 0x0a	; 10
    13fa:	2c 93       	st	X, r18

	SIInterfaceInfo->Config.EventsPipe.Size = le16_to_cpu(EventsEndpoint->EndpointSize);
    13fc:	d5 01       	movw	r26, r10
    13fe:	14 96       	adiw	r26, 0x04	; 4
    1400:	8d 91       	ld	r24, X+
    1402:	9c 91       	ld	r25, X
    1404:	15 97       	sbiw	r26, 0x05	; 5
    1406:	f8 01       	movw	r30, r16
    1408:	96 87       	std	Z+14, r25	; 0x0e
    140a:	85 87       	std	Z+13, r24	; 0x0d
	SIInterfaceInfo->Config.EventsPipe.EndpointAddress = EventsEndpoint->EndpointAddress;
    140c:	12 96       	adiw	r26, 0x02	; 2
    140e:	8c 91       	ld	r24, X
    1410:	87 87       	std	Z+15, r24	; 0x0f
	SIInterfaceInfo->Config.EventsPipe.Type = EP_TYPE_INTERRUPT;
    1412:	83 e0       	ldi	r24, 0x03	; 3
    1414:	80 8b       	std	Z+16, r24	; 0x10

	if (!(Pipe_ConfigurePipeTable(&SIInterfaceInfo->Config.DataINPipe, 1)))
    1416:	c8 01       	movw	r24, r16
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	91 db       	rcall	.-2270   	; 0xb3e <Pipe_ConfigurePipeTable>
    141c:	88 23       	and	r24, r24
    141e:	c9 f0       	breq	.+50     	; 0x1452 <SI_Host_ConfigurePipes+0x162>
	  return false;

	if (!(Pipe_ConfigurePipeTable(&SIInterfaceInfo->Config.DataOUTPipe, 1)))
    1420:	c8 01       	movw	r24, r16
    1422:	06 96       	adiw	r24, 0x06	; 6
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	8b db       	rcall	.-2282   	; 0xb3e <Pipe_ConfigurePipeTable>
    1428:	88 23       	and	r24, r24
    142a:	99 f0       	breq	.+38     	; 0x1452 <SI_Host_ConfigurePipes+0x162>
	  return false;

	if (!(Pipe_ConfigurePipeTable(&SIInterfaceInfo->Config.EventsPipe, 1)))
    142c:	c8 01       	movw	r24, r16
    142e:	0c 96       	adiw	r24, 0x0c	; 12
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	85 db       	rcall	.-2294   	; 0xb3e <Pipe_ConfigurePipeTable>
    1434:	88 23       	and	r24, r24
    1436:	69 f0       	breq	.+26     	; 0x1452 <SI_Host_ConfigurePipes+0x162>
	  return false;

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
    1438:	d4 01       	movw	r26, r8
    143a:	12 96       	adiw	r26, 0x02	; 2
    143c:	8c 91       	ld	r24, X
    143e:	12 97       	sbiw	r26, 0x02	; 2
    1440:	f8 01       	movw	r30, r16
    1442:	83 8b       	std	Z+19, r24	; 0x13
	SIInterfaceInfo->State.IsActive = true;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	82 8b       	std	Z+18, r24	; 0x12
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <SI_Host_ConfigurePipes+0x162>
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <SI_Host_ConfigurePipes+0x164>
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
    144e:	82 e0       	ldi	r24, 0x02	; 2
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <SI_Host_ConfigurePipes+0x164>

	if (!(Pipe_ConfigurePipeTable(&SIInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;

	if (!(Pipe_ConfigurePipeTable(&SIInterfaceInfo->Config.EventsPipe, 1)))
	  return false;
    1452:	80 e0       	ldi	r24, 0x00	; 0

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
	SIInterfaceInfo->State.IsActive = true;

	return SI_ENUMERROR_NoError;
}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	ff 90       	pop	r15
    1466:	ef 90       	pop	r14
    1468:	df 90       	pop	r13
    146a:	cf 90       	pop	r12
    146c:	bf 90       	pop	r11
    146e:	af 90       	pop	r10
    1470:	9f 90       	pop	r9
    1472:	8f 90       	pop	r8
    1474:	7f 90       	pop	r7
    1476:	6f 90       	pop	r6
    1478:	5f 90       	pop	r5
    147a:	4f 90       	pop	r4
    147c:	08 95       	ret

0000147e <SI_Host_SendBlockHeader>:
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t SI_Host_SendBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                PIMA_Container_t* const PIMAHeader)
{
    147e:	1f 93       	push	r17
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	fc 01       	movw	r30, r24
    1486:	eb 01       	movw	r28, r22
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1488:	80 91 37 01 	lds	r24, 0x0137
    148c:	8b 30       	cpi	r24, 0x0B	; 11
    148e:	09 f0       	breq	.+2      	; 0x1492 <SI_Host_SendBlockHeader+0x14>
    1490:	3e c0       	rjmp	.+124    	; 0x150e <SI_Host_SendBlockHeader+0x90>
    1492:	82 89       	ldd	r24, Z+18	; 0x12
    1494:	88 23       	and	r24, r24
    1496:	d9 f1       	breq	.+118    	; 0x150e <SI_Host_SendBlockHeader+0x90>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if (SIInterfaceInfo->State.IsSessionOpen)
    1498:	84 89       	ldd	r24, Z+20	; 0x14
    149a:	88 23       	and	r24, r24
    149c:	81 f0       	breq	.+32     	; 0x14be <SI_Host_SendBlockHeader+0x40>
	  PIMAHeader->TransactionID = cpu_to_le32(SIInterfaceInfo->State.TransactionID++);
    149e:	25 89       	ldd	r18, Z+21	; 0x15
    14a0:	36 89       	ldd	r19, Z+22	; 0x16
    14a2:	47 89       	ldd	r20, Z+23	; 0x17
    14a4:	50 8d       	ldd	r21, Z+24	; 0x18
    14a6:	28 87       	std	Y+8, r18	; 0x08
    14a8:	39 87       	std	Y+9, r19	; 0x09
    14aa:	4a 87       	std	Y+10, r20	; 0x0a
    14ac:	5b 87       	std	Y+11, r21	; 0x0b
    14ae:	2f 5f       	subi	r18, 0xFF	; 255
    14b0:	3f 4f       	sbci	r19, 0xFF	; 255
    14b2:	4f 4f       	sbci	r20, 0xFF	; 255
    14b4:	5f 4f       	sbci	r21, 0xFF	; 255
    14b6:	25 8b       	std	Z+21, r18	; 0x15
    14b8:	36 8b       	std	Z+22, r19	; 0x16
    14ba:	47 8b       	std	Z+23, r20	; 0x17
    14bc:	50 8f       	std	Z+24, r21	; 0x18
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14be:	86 81       	ldd	r24, Z+6	; 0x06
    14c0:	8f 70       	andi	r24, 0x0F	; 15
    14c2:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14c6:	80 91 a9 00 	lds	r24, 0x00A9
    14ca:	8f 7b       	andi	r24, 0xBF	; 191
    14cc:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL)) != PIPE_RWSTREAM_NoError)
    14d0:	ce 01       	movw	r24, r28
    14d2:	6c e0       	ldi	r22, 0x0C	; 12
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	04 da       	rcall	.-3064   	; 0x8e4 <Pipe_Write_Stream_LE>
    14dc:	18 2f       	mov	r17, r24
    14de:	88 23       	and	r24, r24
    14e0:	c9 f4       	brne	.+50     	; 0x1514 <SI_Host_SendBlockHeader+0x96>
	  return ErrorCode;

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    14e2:	68 81       	ld	r22, Y
    14e4:	6c 50       	subi	r22, 0x0C	; 12

	if (ParamBytes)
    14e6:	41 f0       	breq	.+16     	; 0x14f8 <SI_Host_SendBlockHeader+0x7a>
	{
		if ((ErrorCode = Pipe_Write_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL)) != PIPE_RWSTREAM_NoError)
    14e8:	ce 01       	movw	r24, r28
    14ea:	0c 96       	adiw	r24, 0x0c	; 12
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	f8 d9       	rcall	.-3088   	; 0x8e4 <Pipe_Write_Stream_LE>
    14f4:	88 23       	and	r24, r24
    14f6:	69 f4       	brne	.+26     	; 0x1512 <SI_Host_SendBlockHeader+0x94>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    14f8:	80 91 a6 00 	lds	r24, 0x00A6
    14fc:	8b 77       	andi	r24, 0x7B	; 123
    14fe:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1502:	80 91 a9 00 	lds	r24, 0x00A9
    1506:	80 64       	ori	r24, 0x40	; 64
    1508:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <SI_Host_SendBlockHeader+0x96>
                                PIMA_Container_t* const PIMAHeader)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    150e:	12 e0       	ldi	r17, 0x02	; 2
    1510:	01 c0       	rjmp	.+2      	; 0x1514 <SI_Host_SendBlockHeader+0x96>

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));

	if (ParamBytes)
	{
		if ((ErrorCode = Pipe_Write_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL)) != PIPE_RWSTREAM_NoError)
    1512:	18 2f       	mov	r17, r24

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1514:	81 2f       	mov	r24, r17
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	08 95       	ret

0000151e <SI_Host_ReceiveBlockHeader>:

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	fc 01       	movw	r30, r24
    1524:	eb 01       	movw	r28, r22
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1526:	20 91 a2 00 	lds	r18, 0x00A2
    152a:	30 91 a3 00 	lds	r19, 0x00A3
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    152e:	80 91 37 01 	lds	r24, 0x0137
    1532:	8b 30       	cpi	r24, 0x0B	; 11
    1534:	09 f0       	breq	.+2      	; 0x1538 <SI_Host_ReceiveBlockHeader+0x1a>
    1536:	77 c0       	rjmp	.+238    	; 0x1626 <SI_Host_ReceiveBlockHeader+0x108>
    1538:	82 89       	ldd	r24, Z+18	; 0x12
    153a:	88 23       	and	r24, r24
    153c:	09 f4       	brne	.+2      	; 0x1540 <SI_Host_ReceiveBlockHeader+0x22>
    153e:	73 c0       	rjmp	.+230    	; 0x1626 <SI_Host_ReceiveBlockHeader+0x108>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1540:	80 81       	ld	r24, Z
    1542:	8f 70       	andi	r24, 0x0F	; 15
    1544:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1548:	80 91 a9 00 	lds	r24, 0x00A9
    154c:	8f 7b       	andi	r24, 0xBF	; 191
    154e:	80 93 a9 00 	sts	0x00A9, r24
}

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
    1552:	80 e1       	ldi	r24, 0x10	; 16
    1554:	97 e2       	ldi	r25, 0x27	; 39
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    1556:	41 c0       	rjmp	.+130    	; 0x15da <SI_Host_ReceiveBlockHeader+0xbc>
    1558:	40 91 a2 00 	lds	r20, 0x00A2
    155c:	50 91 a3 00 	lds	r21, 0x00A3
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1560:	42 17       	cp	r20, r18
    1562:	53 07       	cpc	r21, r19
    1564:	29 f0       	breq	.+10     	; 0x1570 <SI_Host_ReceiveBlockHeader+0x52>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	09 f4       	brne	.+2      	; 0x156c <SI_Host_ReceiveBlockHeader+0x4e>
    156a:	5b c0       	rjmp	.+182    	; 0x1622 <SI_Host_ReceiveBlockHeader+0x104>
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	9a 01       	movw	r18, r20

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1570:	40 91 a9 00 	lds	r20, 0x00A9
    1574:	40 64       	ori	r20, 0x40	; 64
    1576:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    157a:	46 81       	ldd	r20, Z+6	; 0x06
    157c:	4f 70       	andi	r20, 0x0F	; 15
    157e:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1582:	40 91 a9 00 	lds	r20, 0x00A9
    1586:	4f 7b       	andi	r20, 0xBF	; 191
    1588:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    158c:	40 91 a6 00 	lds	r20, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipe.Address);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1590:	41 fd       	sbrc	r20, 1
    1592:	12 c0       	rjmp	.+36     	; 0x15b8 <SI_Host_ReceiveBlockHeader+0x9a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1594:	40 91 a9 00 	lds	r20, 0x00A9
    1598:	40 64       	ori	r20, 0x40	; 64
    159a:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    159e:	40 81       	ld	r20, Z
    15a0:	4f 70       	andi	r20, 0x0F	; 15
    15a2:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    15a6:	40 91 a9 00 	lds	r20, 0x00A9
    15aa:	4f 7b       	andi	r20, 0xBF	; 191
    15ac:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    15b0:	40 91 a6 00 	lds	r20, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipe.Address);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    15b4:	41 ff       	sbrs	r20, 1
    15b6:	0d c0       	rjmp	.+26     	; 0x15d2 <SI_Host_ReceiveBlockHeader+0xb4>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    15b8:	90 91 aa 00 	lds	r25, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    15bc:	29 2f       	mov	r18, r25
    15be:	2f 70       	andi	r18, 0x0F	; 15
    15c0:	90 ff       	sbrs	r25, 0
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <SI_Host_ReceiveBlockHeader+0xaa>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	01 c0       	rjmp	.+2      	; 0x15ca <SI_Host_ReceiveBlockHeader+0xac>
    15c8:	80 e8       	ldi	r24, 0x80	; 128
		{
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
    15ca:	82 2b       	or	r24, r18
    15cc:	46 de       	rcall	.-884    	; 0x125a <USB_Host_ClearEndpointStall>
			return PIPE_RWSTREAM_PipeStalled;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	2b c0       	rjmp	.+86     	; 0x1628 <SI_Host_ReceiveBlockHeader+0x10a>
		}

		if (USB_HostState == HOST_STATE_Unattached)
    15d2:	40 91 37 01 	lds	r20, 0x0137
    15d6:	41 30       	cpi	r20, 0x01	; 1
    15d8:	31 f1       	breq	.+76     	; 0x1626 <SI_Host_ReceiveBlockHeader+0x108>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    15da:	40 91 a6 00 	lds	r20, 0x00A6
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    15de:	40 ff       	sbrs	r20, 0
    15e0:	bb cf       	rjmp	.-138    	; 0x1558 <SI_Host_ReceiveBlockHeader+0x3a>

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	Pipe_Read_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL);
    15e2:	ce 01       	movw	r24, r28
    15e4:	6c e0       	ldi	r22, 0x0C	; 12
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	de d9       	rcall	.-3140   	; 0x9aa <Pipe_Read_Stream_LE>

	if (PIMAHeader->Type == CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock))
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	9d 81       	ldd	r25, Y+5	; 0x05
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	91 05       	cpc	r25, r1
    15f6:	71 f4       	brne	.+28     	; 0x1614 <SI_Host_ReceiveBlockHeader+0xf6>
	{
		uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    15f8:	68 81       	ld	r22, Y
    15fa:	6c 50       	subi	r22, 0x0C	; 12

		if (ParamBytes)
    15fc:	31 f0       	breq	.+12     	; 0x160a <SI_Host_ReceiveBlockHeader+0xec>
		  Pipe_Read_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL);
    15fe:	ce 01       	movw	r24, r28
    1600:	0c 96       	adiw	r24, 0x0c	; 12
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	d0 d9       	rcall	.-3168   	; 0x9aa <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    160a:	80 91 a6 00 	lds	r24, 0x00A6
    160e:	8e 77       	andi	r24, 0x7E	; 126
    1610:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1614:	80 91 a9 00 	lds	r24, 0x00A9
    1618:	80 64       	ori	r24, 0x40	; 64
    161a:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearIN();
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	03 c0       	rjmp	.+6      	; 0x1628 <SI_Host_ReceiveBlockHeader+0x10a>
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_RWSTREAM_Timeout;
    1622:	83 e0       	ldi	r24, 0x03	; 3
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <SI_Host_ReceiveBlockHeader+0x10a>
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
    1626:	82 e0       	ldi	r24, 0x02	; 2
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <SI_Host_OpenSession>:

	return ErrorCode;
}

uint8_t SI_Host_OpenSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	68 97       	sbiw	r28, 0x18	; 24
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    164c:	80 91 37 01 	lds	r24, 0x0137
    1650:	8b 30       	cpi	r24, 0x0B	; 11
    1652:	09 f0       	breq	.+2      	; 0x1656 <SI_Host_OpenSession+0x28>
    1654:	44 c0       	rjmp	.+136    	; 0x16de <SI_Host_OpenSession+0xb0>
    1656:	f8 01       	movw	r30, r16
    1658:	82 89       	ldd	r24, Z+18	; 0x12
    165a:	88 23       	and	r24, r24
    165c:	09 f4       	brne	.+2      	; 0x1660 <SI_Host_OpenSession+0x32>
    165e:	3f c0       	rjmp	.+126    	; 0x16de <SI_Host_OpenSession+0xb0>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	SIInterfaceInfo->State.TransactionID = 0;
    1660:	15 8a       	std	Z+21, r1	; 0x15
    1662:	16 8a       	std	Z+22, r1	; 0x16
    1664:	17 8a       	std	Z+23, r1	; 0x17
    1666:	10 8e       	std	Z+24, r1	; 0x18
	SIInterfaceInfo->State.IsSessionOpen = false;
    1668:	14 8a       	std	Z+20, r1	; 0x14

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    166a:	7e 01       	movw	r14, r28
    166c:	08 94       	sec
    166e:	e1 1c       	adc	r14, r1
    1670:	f1 1c       	adc	r15, r1
    1672:	88 e1       	ldi	r24, 0x18	; 24
    1674:	f7 01       	movw	r30, r14
    1676:	11 92       	st	Z+, r1
    1678:	8a 95       	dec	r24
    167a:	e9 f7       	brne	.-6      	; 0x1676 <SI_Host_OpenSession+0x48>
    167c:	80 e1       	ldi	r24, 0x10	; 16
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a0 e0       	ldi	r26, 0x00	; 0
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	ab 83       	std	Y+3, r26	; 0x03
    168a:	bc 83       	std	Y+4, r27	; 0x04
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9e 83       	std	Y+6, r25	; 0x06
    1692:	8d 83       	std	Y+5, r24	; 0x05
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	90 e1       	ldi	r25, 0x10	; 16
    1698:	98 87       	std	Y+8, r25	; 0x08
    169a:	8f 83       	std	Y+7, r24	; 0x07
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a0 e0       	ldi	r26, 0x00	; 0
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	8d 87       	std	Y+13, r24	; 0x0d
    16a6:	9e 87       	std	Y+14, r25	; 0x0e
    16a8:	af 87       	std	Y+15, r26	; 0x0f
    16aa:	b8 8b       	std	Y+16, r27	; 0x10
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1002),
			.Params        = {CPU_TO_LE32(1)},
		};

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    16ac:	c8 01       	movw	r24, r16
    16ae:	b7 01       	movw	r22, r14
    16b0:	e6 de       	rcall	.-564    	; 0x147e <SI_Host_SendBlockHeader>
    16b2:	88 23       	and	r24, r24
    16b4:	b9 f4       	brne	.+46     	; 0x16e4 <SI_Host_OpenSession+0xb6>
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    16b6:	c8 01       	movw	r24, r16
    16b8:	b7 01       	movw	r22, r14
    16ba:	31 df       	rcall	.-414    	; 0x151e <SI_Host_ReceiveBlockHeader>
    16bc:	88 23       	and	r24, r24
    16be:	91 f4       	brne	.+36     	; 0x16e4 <SI_Host_OpenSession+0xb6>
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    16c0:	2d 81       	ldd	r18, Y+5	; 0x05
    16c2:	3e 81       	ldd	r19, Y+6	; 0x06
    16c4:	23 30       	cpi	r18, 0x03	; 3
    16c6:	31 05       	cpc	r19, r1
    16c8:	61 f4       	brne	.+24     	; 0x16e2 <SI_Host_OpenSession+0xb4>
    16ca:	2f 81       	ldd	r18, Y+7	; 0x07
    16cc:	38 85       	ldd	r19, Y+8	; 0x08
    16ce:	f0 e2       	ldi	r31, 0x20	; 32
    16d0:	21 30       	cpi	r18, 0x01	; 1
    16d2:	3f 07       	cpc	r19, r31
    16d4:	31 f4       	brne	.+12     	; 0x16e2 <SI_Host_OpenSession+0xb4>
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	SIInterfaceInfo->State.IsSessionOpen = true;
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	f8 01       	movw	r30, r16
    16da:	94 8b       	std	Z+20, r25	; 0x14

	return PIPE_RWSTREAM_NoError;
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <SI_Host_OpenSession+0xb6>
}

uint8_t SI_Host_OpenSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <SI_Host_OpenSession+0xb6>

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    16e2:	80 e8       	ldi	r24, 0x80	; 128

	SIInterfaceInfo->State.IsSessionOpen = true;

	return PIPE_RWSTREAM_NoError;
}
    16e4:	68 96       	adiw	r28, 0x18	; 24
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	ff 90       	pop	r15
    16fa:	ef 90       	pop	r14
    16fc:	08 95       	ret

000016fe <SI_Host_CloseSession>:

uint8_t SI_Host_CloseSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	68 97       	sbiw	r28, 0x18	; 24
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    171c:	80 91 37 01 	lds	r24, 0x0137
    1720:	8b 30       	cpi	r24, 0x0B	; 11
    1722:	09 f0       	breq	.+2      	; 0x1726 <SI_Host_CloseSession+0x28>
    1724:	3d c0       	rjmp	.+122    	; 0x17a0 <SI_Host_CloseSession+0xa2>
    1726:	f8 01       	movw	r30, r16
    1728:	82 89       	ldd	r24, Z+18	; 0x12
    172a:	88 23       	and	r24, r24
    172c:	c9 f1       	breq	.+114    	; 0x17a0 <SI_Host_CloseSession+0xa2>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    172e:	7e 01       	movw	r14, r28
    1730:	08 94       	sec
    1732:	e1 1c       	adc	r14, r1
    1734:	f1 1c       	adc	r15, r1
    1736:	88 e1       	ldi	r24, 0x18	; 24
    1738:	f7 01       	movw	r30, r14
    173a:	11 92       	st	Z+, r1
    173c:	8a 95       	dec	r24
    173e:	e9 f7       	brne	.-6      	; 0x173a <SI_Host_CloseSession+0x3c>
    1740:	80 e1       	ldi	r24, 0x10	; 16
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e0       	ldi	r26, 0x00	; 0
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	ab 83       	std	Y+3, r26	; 0x03
    174e:	bc 83       	std	Y+4, r27	; 0x04
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9e 83       	std	Y+6, r25	; 0x06
    1756:	8d 83       	std	Y+5, r24	; 0x05
    1758:	83 e0       	ldi	r24, 0x03	; 3
    175a:	90 e1       	ldi	r25, 0x10	; 16
    175c:	98 87       	std	Y+8, r25	; 0x08
    175e:	8f 83       	std	Y+7, r24	; 0x07
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 e0       	ldi	r26, 0x00	; 0
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	8d 87       	std	Y+13, r24	; 0x0d
    176a:	9e 87       	std	Y+14, r25	; 0x0e
    176c:	af 87       	std	Y+15, r26	; 0x0f
    176e:	b8 8b       	std	Y+16, r27	; 0x10
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1003),
			.Params        = {CPU_TO_LE32(1)},
		};

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1770:	c8 01       	movw	r24, r16
    1772:	b7 01       	movw	r22, r14
    1774:	84 de       	rcall	.-760    	; 0x147e <SI_Host_SendBlockHeader>
    1776:	88 23       	and	r24, r24
    1778:	b1 f4       	brne	.+44     	; 0x17a6 <SI_Host_CloseSession+0xa8>
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    177a:	c8 01       	movw	r24, r16
    177c:	b7 01       	movw	r22, r14
    177e:	cf de       	rcall	.-610    	; 0x151e <SI_Host_ReceiveBlockHeader>
    1780:	88 23       	and	r24, r24
    1782:	89 f4       	brne	.+34     	; 0x17a6 <SI_Host_CloseSession+0xa8>
	  return ErrorCode;

	SIInterfaceInfo->State.IsSessionOpen = false;
    1784:	f8 01       	movw	r30, r16
    1786:	14 8a       	std	Z+20, r1	; 0x14

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    1788:	2d 81       	ldd	r18, Y+5	; 0x05
    178a:	3e 81       	ldd	r19, Y+6	; 0x06
    178c:	23 30       	cpi	r18, 0x03	; 3
    178e:	31 05       	cpc	r19, r1
    1790:	49 f4       	brne	.+18     	; 0x17a4 <SI_Host_CloseSession+0xa6>
    1792:	2f 81       	ldd	r18, Y+7	; 0x07
    1794:	38 85       	ldd	r19, Y+8	; 0x08
    1796:	f0 e2       	ldi	r31, 0x20	; 32
    1798:	21 30       	cpi	r18, 0x01	; 1
    179a:	3f 07       	cpc	r19, r31
    179c:	19 f4       	brne	.+6      	; 0x17a4 <SI_Host_CloseSession+0xa6>
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <SI_Host_CloseSession+0xa8>
}

uint8_t SI_Host_CloseSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    17a0:	82 e0       	ldi	r24, 0x02	; 2
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <SI_Host_CloseSession+0xa8>
	  return ErrorCode;

	SIInterfaceInfo->State.IsSessionOpen = false;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    17a4:	80 e8       	ldi	r24, 0x80	; 128

	return PIPE_RWSTREAM_NoError;
}
    17a6:	68 96       	adiw	r28, 0x18	; 24
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	08 95       	ret

000017c0 <SI_Host_SendCommand>:

uint8_t SI_Host_SendCommand(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                            const uint16_t Operation,
                            const uint8_t TotalParams,
                            uint32_t* const Params)
{
    17c0:	af 92       	push	r10
    17c2:	bf 92       	push	r11
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	68 97       	sbiw	r28, 0x18	; 24
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	7c 01       	movw	r14, r24
    17e6:	cb 01       	movw	r24, r22
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    17e8:	50 91 37 01 	lds	r21, 0x0137
    17ec:	5b 30       	cpi	r21, 0x0B	; 11
    17ee:	91 f5       	brne	.+100    	; 0x1854 <SI_Host_SendCommand+0x94>
    17f0:	d7 01       	movw	r26, r14
    17f2:	52 96       	adiw	r26, 0x12	; 18
    17f4:	5c 91       	ld	r21, X
    17f6:	52 97       	sbiw	r26, 0x12	; 18
    17f8:	55 23       	and	r21, r21
    17fa:	61 f1       	breq	.+88     	; 0x1854 <SI_Host_SendCommand+0x94>

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
		{
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
    17fc:	e4 2f       	mov	r30, r20
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    1800:	8e 01       	movw	r16, r28
    1802:	0f 5f       	subi	r16, 0xFF	; 255
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	48 e1       	ldi	r20, 0x18	; 24
    1808:	d8 01       	movw	r26, r16
    180a:	1d 92       	st	X+, r1
    180c:	4a 95       	dec	r20
    180e:	e9 f7       	brne	.-6      	; 0x180a <SI_Host_SendCommand+0x4a>
		{
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
    1810:	af 01       	movw	r20, r30
    1812:	4d 5f       	subi	r20, 0xFD	; 253
    1814:	5f 4f       	sbci	r21, 0xFF	; 255
    1816:	44 0f       	add	r20, r20
    1818:	55 1f       	adc	r21, r21
    181a:	44 0f       	add	r20, r20
    181c:	55 1f       	adc	r21, r21
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    181e:	5a 01       	movw	r10, r20
    1820:	cc 24       	eor	r12, r12
    1822:	dd 24       	eor	r13, r13
    1824:	a9 82       	std	Y+1, r10	; 0x01
    1826:	ba 82       	std	Y+2, r11	; 0x02
    1828:	cb 82       	std	Y+3, r12	; 0x03
    182a:	dc 82       	std	Y+4, r13	; 0x04
    182c:	41 e0       	ldi	r20, 0x01	; 1
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	5e 83       	std	Y+6, r21	; 0x06
    1832:	4d 83       	std	Y+5, r20	; 0x05
    1834:	98 87       	std	Y+8, r25	; 0x08
    1836:	8f 83       	std	Y+7, r24	; 0x07
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = cpu_to_le16(Operation),
		};

	memcpy(&PIMABlock.Params, Params, sizeof(uint32_t) * TotalParams);
    1838:	de 01       	movw	r26, r28
    183a:	1d 96       	adiw	r26, 0x0d	; 13
    183c:	ee 0f       	add	r30, r30
    183e:	ff 1f       	adc	r31, r31
    1840:	ee 0f       	add	r30, r30
    1842:	ff 1f       	adc	r31, r31
    1844:	cd 01       	movw	r24, r26
    1846:	b9 01       	movw	r22, r18
    1848:	af 01       	movw	r20, r30
    184a:	7f d0       	rcall	.+254    	; 0x194a <memcpy>

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    184c:	c7 01       	movw	r24, r14
    184e:	b8 01       	movw	r22, r16
    1850:	16 de       	rcall	.-980    	; 0x147e <SI_Host_SendBlockHeader>
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <SI_Host_SendCommand+0x96>
                            const uint16_t Operation,
                            const uint8_t TotalParams,
                            uint32_t* const Params)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    1854:	82 e0       	ldi	r24, 0x02	; 2

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1856:	68 96       	adiw	r28, 0x18	; 24
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	ff 90       	pop	r15
    186c:	ef 90       	pop	r14
    186e:	df 90       	pop	r13
    1870:	cf 90       	pop	r12
    1872:	bf 90       	pop	r11
    1874:	af 90       	pop	r10
    1876:	08 95       	ret

00001878 <SI_Host_ReceiveResponse>:

uint8_t SI_Host_ReceiveResponse(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	68 97       	sbiw	r28, 0x18	; 24
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrorCode;
	PIMA_Container_t PIMABlock;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    188c:	20 91 37 01 	lds	r18, 0x0137
    1890:	2b 30       	cpi	r18, 0x0B	; 11
    1892:	b1 f4       	brne	.+44     	; 0x18c0 <SI_Host_ReceiveResponse+0x48>
    1894:	fc 01       	movw	r30, r24
    1896:	22 89       	ldd	r18, Z+18	; 0x12
    1898:	22 23       	and	r18, r18
    189a:	91 f0       	breq	.+36     	; 0x18c0 <SI_Host_ReceiveResponse+0x48>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    189c:	be 01       	movw	r22, r28
    189e:	6f 5f       	subi	r22, 0xFF	; 255
    18a0:	7f 4f       	sbci	r23, 0xFF	; 255
    18a2:	3d de       	rcall	.-902    	; 0x151e <SI_Host_ReceiveBlockHeader>
    18a4:	88 23       	and	r24, r24
    18a6:	79 f4       	brne	.+30     	; 0x18c6 <SI_Host_ReceiveResponse+0x4e>
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    18a8:	2d 81       	ldd	r18, Y+5	; 0x05
    18aa:	3e 81       	ldd	r19, Y+6	; 0x06
    18ac:	23 30       	cpi	r18, 0x03	; 3
    18ae:	31 05       	cpc	r19, r1
    18b0:	49 f4       	brne	.+18     	; 0x18c4 <SI_Host_ReceiveResponse+0x4c>
    18b2:	2f 81       	ldd	r18, Y+7	; 0x07
    18b4:	38 85       	ldd	r19, Y+8	; 0x08
    18b6:	f0 e2       	ldi	r31, 0x20	; 32
    18b8:	21 30       	cpi	r18, 0x01	; 1
    18ba:	3f 07       	cpc	r19, r31
    18bc:	19 f4       	brne	.+6      	; 0x18c4 <SI_Host_ReceiveResponse+0x4c>
    18be:	03 c0       	rjmp	.+6      	; 0x18c6 <SI_Host_ReceiveResponse+0x4e>
{
	uint8_t ErrorCode;
	PIMA_Container_t PIMABlock;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <SI_Host_ReceiveResponse+0x4e>

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    18c4:	80 e8       	ldi	r24, 0x80	; 128

	return PIPE_RWSTREAM_NoError;
}
    18c6:	68 96       	adiw	r28, 0x18	; 24
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    18d8:	90 91 c8 00 	lds	r25, 0x00C8
    18dc:	95 ff       	sbrs	r25, 5
    18de:	fc cf       	rjmp	.-8      	; 0x18d8 <Serial_putchar>
				UDR1 = DataByte;
    18e0:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	08 95       	ret

000018ea <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    18ea:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    18ee:	87 ff       	sbrs	r24, 7
    18f0:	08 c0       	rjmp	.+16     	; 0x1902 <Serial_getchar+0x18>
    18f2:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    18f6:	87 ff       	sbrs	r24, 7
    18f8:	07 c0       	rjmp	.+14     	; 0x1908 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    18fa:	20 91 ce 00 	lds	r18, 0x00CE
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	05 c0       	rjmp	.+10     	; 0x190c <Serial_getchar+0x22>
	  return _FDEV_EOF;
    1902:	2e ef       	ldi	r18, 0xFE	; 254
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	02 c0       	rjmp	.+4      	; 0x190c <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1908:	2f ef       	ldi	r18, 0xFF	; 255
    190a:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    190c:	c9 01       	movw	r24, r18
    190e:	08 95       	ret

00001910 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1910:	fc 01       	movw	r30, r24
	if (!(Stream))
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	51 f4       	brne	.+20     	; 0x192a <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1916:	e8 e3       	ldi	r30, 0x38	; 56
    1918:	f1 e0       	ldi	r31, 0x01	; 1
    191a:	f0 93 47 01 	sts	0x0147, r31
    191e:	e0 93 46 01 	sts	0x0146, r30
		stdout = Stream;
    1922:	f0 93 49 01 	sts	0x0149, r31
    1926:	e0 93 48 01 	sts	0x0148, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    192a:	8e e0       	ldi	r24, 0x0E	; 14
    192c:	df 01       	movw	r26, r30
    192e:	1d 92       	st	X+, r1
    1930:	8a 95       	dec	r24
    1932:	e9 f7       	brne	.-6      	; 0x192e <Serial_CreateStream+0x1e>
    1934:	83 e0       	ldi	r24, 0x03	; 3
    1936:	83 83       	std	Z+3, r24	; 0x03
    1938:	8c e6       	ldi	r24, 0x6C	; 108
    193a:	9c e0       	ldi	r25, 0x0C	; 12
    193c:	91 87       	std	Z+9, r25	; 0x09
    193e:	80 87       	std	Z+8, r24	; 0x08
    1940:	85 e7       	ldi	r24, 0x75	; 117
    1942:	9c e0       	ldi	r25, 0x0C	; 12
    1944:	93 87       	std	Z+11, r25	; 0x0b
    1946:	82 87       	std	Z+10, r24	; 0x0a
}
    1948:	08 95       	ret

0000194a <memcpy>:
    194a:	fb 01       	movw	r30, r22
    194c:	dc 01       	movw	r26, r24
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <memcpy+0xa>
    1950:	01 90       	ld	r0, Z+
    1952:	0d 92       	st	X+, r0
    1954:	41 50       	subi	r20, 0x01	; 1
    1956:	50 40       	sbci	r21, 0x00	; 0
    1958:	d8 f7       	brcc	.-10     	; 0x1950 <memcpy+0x6>
    195a:	08 95       	ret

0000195c <printf_P>:
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	fe 01       	movw	r30, r28
    1966:	35 96       	adiw	r30, 0x05	; 5
    1968:	61 91       	ld	r22, Z+
    196a:	71 91       	ld	r23, Z+
    196c:	80 91 48 01 	lds	r24, 0x0148
    1970:	90 91 49 01 	lds	r25, 0x0149
    1974:	dc 01       	movw	r26, r24
    1976:	13 96       	adiw	r26, 0x03	; 3
    1978:	2c 91       	ld	r18, X
    197a:	13 97       	sbiw	r26, 0x03	; 3
    197c:	28 60       	ori	r18, 0x08	; 8
    197e:	13 96       	adiw	r26, 0x03	; 3
    1980:	2c 93       	st	X, r18
    1982:	af 01       	movw	r20, r30
    1984:	42 d0       	rcall	.+132    	; 0x1a0a <vfprintf>
    1986:	e0 91 48 01 	lds	r30, 0x0148
    198a:	f0 91 49 01 	lds	r31, 0x0149
    198e:	23 81       	ldd	r18, Z+3	; 0x03
    1990:	27 7f       	andi	r18, 0xF7	; 247
    1992:	23 83       	std	Z+3, r18	; 0x03
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <puts_P>:
    199a:	ef 92       	push	r14
    199c:	ff 92       	push	r15
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	8c 01       	movw	r16, r24
    19a8:	e0 91 48 01 	lds	r30, 0x0148
    19ac:	f0 91 49 01 	lds	r31, 0x0149
    19b0:	83 81       	ldd	r24, Z+3	; 0x03
    19b2:	81 ff       	sbrs	r24, 1
    19b4:	20 c0       	rjmp	.+64     	; 0x19f6 <puts_P+0x5c>
    19b6:	c0 e0       	ldi	r28, 0x00	; 0
    19b8:	d0 e0       	ldi	r29, 0x00	; 0
    19ba:	0c c0       	rjmp	.+24     	; 0x19d4 <puts_P+0x3a>
    19bc:	db 01       	movw	r26, r22
    19be:	18 96       	adiw	r26, 0x08	; 8
    19c0:	ed 91       	ld	r30, X+
    19c2:	fc 91       	ld	r31, X
    19c4:	19 97       	sbiw	r26, 0x09	; 9
    19c6:	09 95       	icall
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	11 f0       	breq	.+4      	; 0x19d0 <puts_P+0x36>
    19cc:	cf ef       	ldi	r28, 0xFF	; 255
    19ce:	df ef       	ldi	r29, 0xFF	; 255
    19d0:	0f 5f       	subi	r16, 0xFF	; 255
    19d2:	1f 4f       	sbci	r17, 0xFF	; 255
    19d4:	f8 01       	movw	r30, r16
    19d6:	84 91       	lpm	r24, Z+
    19d8:	60 91 48 01 	lds	r22, 0x0148
    19dc:	70 91 49 01 	lds	r23, 0x0149
    19e0:	88 23       	and	r24, r24
    19e2:	61 f7       	brne	.-40     	; 0x19bc <puts_P+0x22>
    19e4:	db 01       	movw	r26, r22
    19e6:	18 96       	adiw	r26, 0x08	; 8
    19e8:	ed 91       	ld	r30, X+
    19ea:	fc 91       	ld	r31, X
    19ec:	19 97       	sbiw	r26, 0x09	; 9
    19ee:	8a e0       	ldi	r24, 0x0A	; 10
    19f0:	09 95       	icall
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	11 f0       	breq	.+4      	; 0x19fa <puts_P+0x60>
    19f6:	cf ef       	ldi	r28, 0xFF	; 255
    19f8:	df ef       	ldi	r29, 0xFF	; 255
    19fa:	ce 01       	movw	r24, r28
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	08 95       	ret

00001a0a <vfprintf>:
    1a0a:	2f 92       	push	r2
    1a0c:	3f 92       	push	r3
    1a0e:	4f 92       	push	r4
    1a10:	5f 92       	push	r5
    1a12:	6f 92       	push	r6
    1a14:	7f 92       	push	r7
    1a16:	8f 92       	push	r8
    1a18:	9f 92       	push	r9
    1a1a:	af 92       	push	r10
    1a1c:	bf 92       	push	r11
    1a1e:	cf 92       	push	r12
    1a20:	df 92       	push	r13
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	2c 97       	sbiw	r28, 0x0c	; 12
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	6c 01       	movw	r12, r24
    1a40:	1b 01       	movw	r2, r22
    1a42:	8a 01       	movw	r16, r20
    1a44:	fc 01       	movw	r30, r24
    1a46:	17 82       	std	Z+7, r1	; 0x07
    1a48:	16 82       	std	Z+6, r1	; 0x06
    1a4a:	83 81       	ldd	r24, Z+3	; 0x03
    1a4c:	81 ff       	sbrs	r24, 1
    1a4e:	c4 c1       	rjmp	.+904    	; 0x1dd8 <vfprintf+0x3ce>
    1a50:	2e 01       	movw	r4, r28
    1a52:	08 94       	sec
    1a54:	41 1c       	adc	r4, r1
    1a56:	51 1c       	adc	r5, r1
    1a58:	f6 01       	movw	r30, r12
    1a5a:	93 81       	ldd	r25, Z+3	; 0x03
    1a5c:	f1 01       	movw	r30, r2
    1a5e:	93 fd       	sbrc	r25, 3
    1a60:	85 91       	lpm	r24, Z+
    1a62:	93 ff       	sbrs	r25, 3
    1a64:	81 91       	ld	r24, Z+
    1a66:	1f 01       	movw	r2, r30
    1a68:	88 23       	and	r24, r24
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <vfprintf+0x64>
    1a6c:	b1 c1       	rjmp	.+866    	; 0x1dd0 <vfprintf+0x3c6>
    1a6e:	85 32       	cpi	r24, 0x25	; 37
    1a70:	39 f4       	brne	.+14     	; 0x1a80 <vfprintf+0x76>
    1a72:	93 fd       	sbrc	r25, 3
    1a74:	85 91       	lpm	r24, Z+
    1a76:	93 ff       	sbrs	r25, 3
    1a78:	81 91       	ld	r24, Z+
    1a7a:	1f 01       	movw	r2, r30
    1a7c:	85 32       	cpi	r24, 0x25	; 37
    1a7e:	21 f4       	brne	.+8      	; 0x1a88 <vfprintf+0x7e>
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	b6 01       	movw	r22, r12
    1a84:	db d1       	rcall	.+950    	; 0x1e3c <fputc>
    1a86:	e8 cf       	rjmp	.-48     	; 0x1a58 <vfprintf+0x4e>
    1a88:	ee 24       	eor	r14, r14
    1a8a:	ff 24       	eor	r15, r15
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	20 32       	cpi	r18, 0x20	; 32
    1a90:	b0 f4       	brcc	.+44     	; 0x1abe <vfprintf+0xb4>
    1a92:	8b 32       	cpi	r24, 0x2B	; 43
    1a94:	69 f0       	breq	.+26     	; 0x1ab0 <vfprintf+0xa6>
    1a96:	8c 32       	cpi	r24, 0x2C	; 44
    1a98:	28 f4       	brcc	.+10     	; 0x1aa4 <vfprintf+0x9a>
    1a9a:	80 32       	cpi	r24, 0x20	; 32
    1a9c:	51 f0       	breq	.+20     	; 0x1ab2 <vfprintf+0xa8>
    1a9e:	83 32       	cpi	r24, 0x23	; 35
    1aa0:	71 f4       	brne	.+28     	; 0x1abe <vfprintf+0xb4>
    1aa2:	0b c0       	rjmp	.+22     	; 0x1aba <vfprintf+0xb0>
    1aa4:	8d 32       	cpi	r24, 0x2D	; 45
    1aa6:	39 f0       	breq	.+14     	; 0x1ab6 <vfprintf+0xac>
    1aa8:	80 33       	cpi	r24, 0x30	; 48
    1aaa:	49 f4       	brne	.+18     	; 0x1abe <vfprintf+0xb4>
    1aac:	21 60       	ori	r18, 0x01	; 1
    1aae:	2c c0       	rjmp	.+88     	; 0x1b08 <vfprintf+0xfe>
    1ab0:	22 60       	ori	r18, 0x02	; 2
    1ab2:	24 60       	ori	r18, 0x04	; 4
    1ab4:	29 c0       	rjmp	.+82     	; 0x1b08 <vfprintf+0xfe>
    1ab6:	28 60       	ori	r18, 0x08	; 8
    1ab8:	27 c0       	rjmp	.+78     	; 0x1b08 <vfprintf+0xfe>
    1aba:	20 61       	ori	r18, 0x10	; 16
    1abc:	25 c0       	rjmp	.+74     	; 0x1b08 <vfprintf+0xfe>
    1abe:	27 fd       	sbrc	r18, 7
    1ac0:	2c c0       	rjmp	.+88     	; 0x1b1a <vfprintf+0x110>
    1ac2:	38 2f       	mov	r19, r24
    1ac4:	30 53       	subi	r19, 0x30	; 48
    1ac6:	3a 30       	cpi	r19, 0x0A	; 10
    1ac8:	98 f4       	brcc	.+38     	; 0x1af0 <vfprintf+0xe6>
    1aca:	26 ff       	sbrs	r18, 6
    1acc:	08 c0       	rjmp	.+16     	; 0x1ade <vfprintf+0xd4>
    1ace:	8e 2d       	mov	r24, r14
    1ad0:	88 0f       	add	r24, r24
    1ad2:	e8 2e       	mov	r14, r24
    1ad4:	ee 0c       	add	r14, r14
    1ad6:	ee 0c       	add	r14, r14
    1ad8:	e8 0e       	add	r14, r24
    1ada:	e3 0e       	add	r14, r19
    1adc:	15 c0       	rjmp	.+42     	; 0x1b08 <vfprintf+0xfe>
    1ade:	8f 2d       	mov	r24, r15
    1ae0:	88 0f       	add	r24, r24
    1ae2:	f8 2e       	mov	r15, r24
    1ae4:	ff 0c       	add	r15, r15
    1ae6:	ff 0c       	add	r15, r15
    1ae8:	f8 0e       	add	r15, r24
    1aea:	f3 0e       	add	r15, r19
    1aec:	20 62       	ori	r18, 0x20	; 32
    1aee:	0c c0       	rjmp	.+24     	; 0x1b08 <vfprintf+0xfe>
    1af0:	8e 32       	cpi	r24, 0x2E	; 46
    1af2:	21 f4       	brne	.+8      	; 0x1afc <vfprintf+0xf2>
    1af4:	26 fd       	sbrc	r18, 6
    1af6:	6c c1       	rjmp	.+728    	; 0x1dd0 <vfprintf+0x3c6>
    1af8:	20 64       	ori	r18, 0x40	; 64
    1afa:	06 c0       	rjmp	.+12     	; 0x1b08 <vfprintf+0xfe>
    1afc:	8c 36       	cpi	r24, 0x6C	; 108
    1afe:	11 f4       	brne	.+4      	; 0x1b04 <vfprintf+0xfa>
    1b00:	20 68       	ori	r18, 0x80	; 128
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <vfprintf+0xfe>
    1b04:	88 36       	cpi	r24, 0x68	; 104
    1b06:	49 f4       	brne	.+18     	; 0x1b1a <vfprintf+0x110>
    1b08:	f1 01       	movw	r30, r2
    1b0a:	93 fd       	sbrc	r25, 3
    1b0c:	85 91       	lpm	r24, Z+
    1b0e:	93 ff       	sbrs	r25, 3
    1b10:	81 91       	ld	r24, Z+
    1b12:	1f 01       	movw	r2, r30
    1b14:	88 23       	and	r24, r24
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <vfprintf+0x110>
    1b18:	ba cf       	rjmp	.-140    	; 0x1a8e <vfprintf+0x84>
    1b1a:	98 2f       	mov	r25, r24
    1b1c:	95 54       	subi	r25, 0x45	; 69
    1b1e:	93 30       	cpi	r25, 0x03	; 3
    1b20:	18 f0       	brcs	.+6      	; 0x1b28 <vfprintf+0x11e>
    1b22:	90 52       	subi	r25, 0x20	; 32
    1b24:	93 30       	cpi	r25, 0x03	; 3
    1b26:	28 f4       	brcc	.+10     	; 0x1b32 <vfprintf+0x128>
    1b28:	0c 5f       	subi	r16, 0xFC	; 252
    1b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2c:	ff e3       	ldi	r31, 0x3F	; 63
    1b2e:	f9 83       	std	Y+1, r31	; 0x01
    1b30:	0d c0       	rjmp	.+26     	; 0x1b4c <vfprintf+0x142>
    1b32:	83 36       	cpi	r24, 0x63	; 99
    1b34:	31 f0       	breq	.+12     	; 0x1b42 <vfprintf+0x138>
    1b36:	83 37       	cpi	r24, 0x73	; 115
    1b38:	71 f0       	breq	.+28     	; 0x1b56 <vfprintf+0x14c>
    1b3a:	83 35       	cpi	r24, 0x53	; 83
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <vfprintf+0x136>
    1b3e:	5c c0       	rjmp	.+184    	; 0x1bf8 <vfprintf+0x1ee>
    1b40:	21 c0       	rjmp	.+66     	; 0x1b84 <vfprintf+0x17a>
    1b42:	f8 01       	movw	r30, r16
    1b44:	80 81       	ld	r24, Z
    1b46:	89 83       	std	Y+1, r24	; 0x01
    1b48:	0e 5f       	subi	r16, 0xFE	; 254
    1b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4c:	42 01       	movw	r8, r4
    1b4e:	71 e0       	ldi	r23, 0x01	; 1
    1b50:	a7 2e       	mov	r10, r23
    1b52:	b1 2c       	mov	r11, r1
    1b54:	15 c0       	rjmp	.+42     	; 0x1b80 <vfprintf+0x176>
    1b56:	62 e0       	ldi	r22, 0x02	; 2
    1b58:	66 2e       	mov	r6, r22
    1b5a:	71 2c       	mov	r7, r1
    1b5c:	60 0e       	add	r6, r16
    1b5e:	71 1e       	adc	r7, r17
    1b60:	f8 01       	movw	r30, r16
    1b62:	80 80       	ld	r8, Z
    1b64:	91 80       	ldd	r9, Z+1	; 0x01
    1b66:	26 ff       	sbrs	r18, 6
    1b68:	03 c0       	rjmp	.+6      	; 0x1b70 <vfprintf+0x166>
    1b6a:	6e 2d       	mov	r22, r14
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <vfprintf+0x16a>
    1b70:	6f ef       	ldi	r22, 0xFF	; 255
    1b72:	7f ef       	ldi	r23, 0xFF	; 255
    1b74:	c4 01       	movw	r24, r8
    1b76:	2c 87       	std	Y+12, r18	; 0x0c
    1b78:	56 d1       	rcall	.+684    	; 0x1e26 <strnlen>
    1b7a:	5c 01       	movw	r10, r24
    1b7c:	83 01       	movw	r16, r6
    1b7e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b80:	2f 77       	andi	r18, 0x7F	; 127
    1b82:	16 c0       	rjmp	.+44     	; 0x1bb0 <vfprintf+0x1a6>
    1b84:	52 e0       	ldi	r21, 0x02	; 2
    1b86:	65 2e       	mov	r6, r21
    1b88:	71 2c       	mov	r7, r1
    1b8a:	60 0e       	add	r6, r16
    1b8c:	71 1e       	adc	r7, r17
    1b8e:	f8 01       	movw	r30, r16
    1b90:	80 80       	ld	r8, Z
    1b92:	91 80       	ldd	r9, Z+1	; 0x01
    1b94:	26 ff       	sbrs	r18, 6
    1b96:	03 c0       	rjmp	.+6      	; 0x1b9e <vfprintf+0x194>
    1b98:	6e 2d       	mov	r22, r14
    1b9a:	70 e0       	ldi	r23, 0x00	; 0
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <vfprintf+0x198>
    1b9e:	6f ef       	ldi	r22, 0xFF	; 255
    1ba0:	7f ef       	ldi	r23, 0xFF	; 255
    1ba2:	c4 01       	movw	r24, r8
    1ba4:	2c 87       	std	Y+12, r18	; 0x0c
    1ba6:	34 d1       	rcall	.+616    	; 0x1e10 <strnlen_P>
    1ba8:	5c 01       	movw	r10, r24
    1baa:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bac:	20 68       	ori	r18, 0x80	; 128
    1bae:	83 01       	movw	r16, r6
    1bb0:	23 fd       	sbrc	r18, 3
    1bb2:	1e c0       	rjmp	.+60     	; 0x1bf0 <vfprintf+0x1e6>
    1bb4:	07 c0       	rjmp	.+14     	; 0x1bc4 <vfprintf+0x1ba>
    1bb6:	80 e2       	ldi	r24, 0x20	; 32
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	b6 01       	movw	r22, r12
    1bbc:	2c 87       	std	Y+12, r18	; 0x0c
    1bbe:	3e d1       	rcall	.+636    	; 0x1e3c <fputc>
    1bc0:	fa 94       	dec	r15
    1bc2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bc4:	8f 2d       	mov	r24, r15
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	a8 16       	cp	r10, r24
    1bca:	b9 06       	cpc	r11, r25
    1bcc:	a0 f3       	brcs	.-24     	; 0x1bb6 <vfprintf+0x1ac>
    1bce:	10 c0       	rjmp	.+32     	; 0x1bf0 <vfprintf+0x1e6>
    1bd0:	f4 01       	movw	r30, r8
    1bd2:	27 fd       	sbrc	r18, 7
    1bd4:	85 91       	lpm	r24, Z+
    1bd6:	27 ff       	sbrs	r18, 7
    1bd8:	81 91       	ld	r24, Z+
    1bda:	4f 01       	movw	r8, r30
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	b6 01       	movw	r22, r12
    1be0:	2c 87       	std	Y+12, r18	; 0x0c
    1be2:	2c d1       	rcall	.+600    	; 0x1e3c <fputc>
    1be4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1be6:	f1 10       	cpse	r15, r1
    1be8:	fa 94       	dec	r15
    1bea:	08 94       	sec
    1bec:	a1 08       	sbc	r10, r1
    1bee:	b1 08       	sbc	r11, r1
    1bf0:	a1 14       	cp	r10, r1
    1bf2:	b1 04       	cpc	r11, r1
    1bf4:	69 f7       	brne	.-38     	; 0x1bd0 <vfprintf+0x1c6>
    1bf6:	e9 c0       	rjmp	.+466    	; 0x1dca <vfprintf+0x3c0>
    1bf8:	84 36       	cpi	r24, 0x64	; 100
    1bfa:	11 f0       	breq	.+4      	; 0x1c00 <vfprintf+0x1f6>
    1bfc:	89 36       	cpi	r24, 0x69	; 105
    1bfe:	41 f5       	brne	.+80     	; 0x1c50 <vfprintf+0x246>
    1c00:	27 ff       	sbrs	r18, 7
    1c02:	08 c0       	rjmp	.+16     	; 0x1c14 <vfprintf+0x20a>
    1c04:	f8 01       	movw	r30, r16
    1c06:	60 81       	ld	r22, Z
    1c08:	71 81       	ldd	r23, Z+1	; 0x01
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	0c 5f       	subi	r16, 0xFC	; 252
    1c10:	1f 4f       	sbci	r17, 0xFF	; 255
    1c12:	09 c0       	rjmp	.+18     	; 0x1c26 <vfprintf+0x21c>
    1c14:	f8 01       	movw	r30, r16
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	88 27       	eor	r24, r24
    1c1c:	77 fd       	sbrc	r23, 7
    1c1e:	80 95       	com	r24
    1c20:	98 2f       	mov	r25, r24
    1c22:	0e 5f       	subi	r16, 0xFE	; 254
    1c24:	1f 4f       	sbci	r17, 0xFF	; 255
    1c26:	4f e6       	ldi	r20, 0x6F	; 111
    1c28:	b4 2e       	mov	r11, r20
    1c2a:	b2 22       	and	r11, r18
    1c2c:	97 ff       	sbrs	r25, 7
    1c2e:	09 c0       	rjmp	.+18     	; 0x1c42 <vfprintf+0x238>
    1c30:	90 95       	com	r25
    1c32:	80 95       	com	r24
    1c34:	70 95       	com	r23
    1c36:	61 95       	neg	r22
    1c38:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3e:	f0 e8       	ldi	r31, 0x80	; 128
    1c40:	bf 2a       	or	r11, r31
    1c42:	a2 01       	movw	r20, r4
    1c44:	2a e0       	ldi	r18, 0x0A	; 10
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	25 d1       	rcall	.+586    	; 0x1e94 <__ultoa_invert>
    1c4a:	78 2e       	mov	r7, r24
    1c4c:	74 18       	sub	r7, r4
    1c4e:	44 c0       	rjmp	.+136    	; 0x1cd8 <vfprintf+0x2ce>
    1c50:	85 37       	cpi	r24, 0x75	; 117
    1c52:	31 f4       	brne	.+12     	; 0x1c60 <vfprintf+0x256>
    1c54:	3f ee       	ldi	r19, 0xEF	; 239
    1c56:	b3 2e       	mov	r11, r19
    1c58:	b2 22       	and	r11, r18
    1c5a:	2a e0       	ldi	r18, 0x0A	; 10
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	25 c0       	rjmp	.+74     	; 0x1caa <vfprintf+0x2a0>
    1c60:	99 ef       	ldi	r25, 0xF9	; 249
    1c62:	b9 2e       	mov	r11, r25
    1c64:	b2 22       	and	r11, r18
    1c66:	8f 36       	cpi	r24, 0x6F	; 111
    1c68:	c1 f0       	breq	.+48     	; 0x1c9a <vfprintf+0x290>
    1c6a:	80 37       	cpi	r24, 0x70	; 112
    1c6c:	20 f4       	brcc	.+8      	; 0x1c76 <vfprintf+0x26c>
    1c6e:	88 35       	cpi	r24, 0x58	; 88
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <vfprintf+0x26a>
    1c72:	ae c0       	rjmp	.+348    	; 0x1dd0 <vfprintf+0x3c6>
    1c74:	0d c0       	rjmp	.+26     	; 0x1c90 <vfprintf+0x286>
    1c76:	80 37       	cpi	r24, 0x70	; 112
    1c78:	21 f0       	breq	.+8      	; 0x1c82 <vfprintf+0x278>
    1c7a:	88 37       	cpi	r24, 0x78	; 120
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <vfprintf+0x276>
    1c7e:	a8 c0       	rjmp	.+336    	; 0x1dd0 <vfprintf+0x3c6>
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <vfprintf+0x27c>
    1c82:	20 e1       	ldi	r18, 0x10	; 16
    1c84:	b2 2a       	or	r11, r18
    1c86:	b4 fe       	sbrs	r11, 4
    1c88:	0b c0       	rjmp	.+22     	; 0x1ca0 <vfprintf+0x296>
    1c8a:	84 e0       	ldi	r24, 0x04	; 4
    1c8c:	b8 2a       	or	r11, r24
    1c8e:	08 c0       	rjmp	.+16     	; 0x1ca0 <vfprintf+0x296>
    1c90:	b4 fe       	sbrs	r11, 4
    1c92:	09 c0       	rjmp	.+18     	; 0x1ca6 <vfprintf+0x29c>
    1c94:	e6 e0       	ldi	r30, 0x06	; 6
    1c96:	be 2a       	or	r11, r30
    1c98:	06 c0       	rjmp	.+12     	; 0x1ca6 <vfprintf+0x29c>
    1c9a:	28 e0       	ldi	r18, 0x08	; 8
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	05 c0       	rjmp	.+10     	; 0x1caa <vfprintf+0x2a0>
    1ca0:	20 e1       	ldi	r18, 0x10	; 16
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <vfprintf+0x2a0>
    1ca6:	20 e1       	ldi	r18, 0x10	; 16
    1ca8:	32 e0       	ldi	r19, 0x02	; 2
    1caa:	b7 fe       	sbrs	r11, 7
    1cac:	08 c0       	rjmp	.+16     	; 0x1cbe <vfprintf+0x2b4>
    1cae:	f8 01       	movw	r30, r16
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	0c 5f       	subi	r16, 0xFC	; 252
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	07 c0       	rjmp	.+14     	; 0x1ccc <vfprintf+0x2c2>
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 5f       	subi	r16, 0xFE	; 254
    1cca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ccc:	a2 01       	movw	r20, r4
    1cce:	e2 d0       	rcall	.+452    	; 0x1e94 <__ultoa_invert>
    1cd0:	78 2e       	mov	r7, r24
    1cd2:	74 18       	sub	r7, r4
    1cd4:	ff e7       	ldi	r31, 0x7F	; 127
    1cd6:	bf 22       	and	r11, r31
    1cd8:	b6 fe       	sbrs	r11, 6
    1cda:	0b c0       	rjmp	.+22     	; 0x1cf2 <vfprintf+0x2e8>
    1cdc:	2e ef       	ldi	r18, 0xFE	; 254
    1cde:	b2 22       	and	r11, r18
    1ce0:	7e 14       	cp	r7, r14
    1ce2:	38 f4       	brcc	.+14     	; 0x1cf2 <vfprintf+0x2e8>
    1ce4:	b4 fe       	sbrs	r11, 4
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <vfprintf+0x2ec>
    1ce8:	b2 fc       	sbrc	r11, 2
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <vfprintf+0x2ec>
    1cec:	8f ee       	ldi	r24, 0xEF	; 239
    1cee:	b8 22       	and	r11, r24
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <vfprintf+0x2ec>
    1cf2:	a7 2c       	mov	r10, r7
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <vfprintf+0x2ee>
    1cf6:	ae 2c       	mov	r10, r14
    1cf8:	8b 2d       	mov	r24, r11
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	b4 fe       	sbrs	r11, 4
    1cfe:	0d c0       	rjmp	.+26     	; 0x1d1a <vfprintf+0x310>
    1d00:	fe 01       	movw	r30, r28
    1d02:	e7 0d       	add	r30, r7
    1d04:	f1 1d       	adc	r31, r1
    1d06:	20 81       	ld	r18, Z
    1d08:	20 33       	cpi	r18, 0x30	; 48
    1d0a:	19 f4       	brne	.+6      	; 0x1d12 <vfprintf+0x308>
    1d0c:	e9 ee       	ldi	r30, 0xE9	; 233
    1d0e:	be 22       	and	r11, r30
    1d10:	09 c0       	rjmp	.+18     	; 0x1d24 <vfprintf+0x31a>
    1d12:	a3 94       	inc	r10
    1d14:	b2 fe       	sbrs	r11, 2
    1d16:	06 c0       	rjmp	.+12     	; 0x1d24 <vfprintf+0x31a>
    1d18:	04 c0       	rjmp	.+8      	; 0x1d22 <vfprintf+0x318>
    1d1a:	86 78       	andi	r24, 0x86	; 134
    1d1c:	90 70       	andi	r25, 0x00	; 0
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <vfprintf+0x31a>
    1d22:	a3 94       	inc	r10
    1d24:	8b 2c       	mov	r8, r11
    1d26:	99 24       	eor	r9, r9
    1d28:	b3 fc       	sbrc	r11, 3
    1d2a:	13 c0       	rjmp	.+38     	; 0x1d52 <vfprintf+0x348>
    1d2c:	b0 fe       	sbrs	r11, 0
    1d2e:	0e c0       	rjmp	.+28     	; 0x1d4c <vfprintf+0x342>
    1d30:	af 14       	cp	r10, r15
    1d32:	28 f4       	brcc	.+10     	; 0x1d3e <vfprintf+0x334>
    1d34:	e7 2c       	mov	r14, r7
    1d36:	ef 0c       	add	r14, r15
    1d38:	ea 18       	sub	r14, r10
    1d3a:	af 2c       	mov	r10, r15
    1d3c:	07 c0       	rjmp	.+14     	; 0x1d4c <vfprintf+0x342>
    1d3e:	e7 2c       	mov	r14, r7
    1d40:	05 c0       	rjmp	.+10     	; 0x1d4c <vfprintf+0x342>
    1d42:	80 e2       	ldi	r24, 0x20	; 32
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	b6 01       	movw	r22, r12
    1d48:	79 d0       	rcall	.+242    	; 0x1e3c <fputc>
    1d4a:	a3 94       	inc	r10
    1d4c:	af 14       	cp	r10, r15
    1d4e:	c8 f3       	brcs	.-14     	; 0x1d42 <vfprintf+0x338>
    1d50:	04 c0       	rjmp	.+8      	; 0x1d5a <vfprintf+0x350>
    1d52:	af 14       	cp	r10, r15
    1d54:	10 f4       	brcc	.+4      	; 0x1d5a <vfprintf+0x350>
    1d56:	fa 18       	sub	r15, r10
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <vfprintf+0x352>
    1d5a:	ff 24       	eor	r15, r15
    1d5c:	84 fe       	sbrs	r8, 4
    1d5e:	0e c0       	rjmp	.+28     	; 0x1d7c <vfprintf+0x372>
    1d60:	80 e3       	ldi	r24, 0x30	; 48
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	b6 01       	movw	r22, r12
    1d66:	6a d0       	rcall	.+212    	; 0x1e3c <fputc>
    1d68:	82 fe       	sbrs	r8, 2
    1d6a:	1d c0       	rjmp	.+58     	; 0x1da6 <vfprintf+0x39c>
    1d6c:	81 fe       	sbrs	r8, 1
    1d6e:	03 c0       	rjmp	.+6      	; 0x1d76 <vfprintf+0x36c>
    1d70:	88 e5       	ldi	r24, 0x58	; 88
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	10 c0       	rjmp	.+32     	; 0x1d96 <vfprintf+0x38c>
    1d76:	88 e7       	ldi	r24, 0x78	; 120
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0d c0       	rjmp	.+26     	; 0x1d96 <vfprintf+0x38c>
    1d7c:	c4 01       	movw	r24, r8
    1d7e:	86 78       	andi	r24, 0x86	; 134
    1d80:	90 70       	andi	r25, 0x00	; 0
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	81 f0       	breq	.+32     	; 0x1da6 <vfprintf+0x39c>
    1d86:	81 fc       	sbrc	r8, 1
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <vfprintf+0x384>
    1d8a:	80 e2       	ldi	r24, 0x20	; 32
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <vfprintf+0x386>
    1d8e:	8b e2       	ldi	r24, 0x2B	; 43
    1d90:	b7 fc       	sbrc	r11, 7
    1d92:	8d e2       	ldi	r24, 0x2D	; 45
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	b6 01       	movw	r22, r12
    1d98:	51 d0       	rcall	.+162    	; 0x1e3c <fputc>
    1d9a:	05 c0       	rjmp	.+10     	; 0x1da6 <vfprintf+0x39c>
    1d9c:	80 e3       	ldi	r24, 0x30	; 48
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	b6 01       	movw	r22, r12
    1da2:	4c d0       	rcall	.+152    	; 0x1e3c <fputc>
    1da4:	ea 94       	dec	r14
    1da6:	7e 14       	cp	r7, r14
    1da8:	c8 f3       	brcs	.-14     	; 0x1d9c <vfprintf+0x392>
    1daa:	7a 94       	dec	r7
    1dac:	f2 01       	movw	r30, r4
    1dae:	e7 0d       	add	r30, r7
    1db0:	f1 1d       	adc	r31, r1
    1db2:	80 81       	ld	r24, Z
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	b6 01       	movw	r22, r12
    1db8:	41 d0       	rcall	.+130    	; 0x1e3c <fputc>
    1dba:	77 20       	and	r7, r7
    1dbc:	b1 f7       	brne	.-20     	; 0x1daa <vfprintf+0x3a0>
    1dbe:	05 c0       	rjmp	.+10     	; 0x1dca <vfprintf+0x3c0>
    1dc0:	80 e2       	ldi	r24, 0x20	; 32
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	b6 01       	movw	r22, r12
    1dc6:	3a d0       	rcall	.+116    	; 0x1e3c <fputc>
    1dc8:	fa 94       	dec	r15
    1dca:	ff 20       	and	r15, r15
    1dcc:	c9 f7       	brne	.-14     	; 0x1dc0 <vfprintf+0x3b6>
    1dce:	44 ce       	rjmp	.-888    	; 0x1a58 <vfprintf+0x4e>
    1dd0:	f6 01       	movw	r30, r12
    1dd2:	26 81       	ldd	r18, Z+6	; 0x06
    1dd4:	37 81       	ldd	r19, Z+7	; 0x07
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <vfprintf+0x3d2>
    1dd8:	2f ef       	ldi	r18, 0xFF	; 255
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	c9 01       	movw	r24, r18
    1dde:	2c 96       	adiw	r28, 0x0c	; 12
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	ff 90       	pop	r15
    1df4:	ef 90       	pop	r14
    1df6:	df 90       	pop	r13
    1df8:	cf 90       	pop	r12
    1dfa:	bf 90       	pop	r11
    1dfc:	af 90       	pop	r10
    1dfe:	9f 90       	pop	r9
    1e00:	8f 90       	pop	r8
    1e02:	7f 90       	pop	r7
    1e04:	6f 90       	pop	r6
    1e06:	5f 90       	pop	r5
    1e08:	4f 90       	pop	r4
    1e0a:	3f 90       	pop	r3
    1e0c:	2f 90       	pop	r2
    1e0e:	08 95       	ret

00001e10 <strnlen_P>:
    1e10:	fc 01       	movw	r30, r24
    1e12:	05 90       	lpm	r0, Z+
    1e14:	61 50       	subi	r22, 0x01	; 1
    1e16:	70 40       	sbci	r23, 0x00	; 0
    1e18:	01 10       	cpse	r0, r1
    1e1a:	d8 f7       	brcc	.-10     	; 0x1e12 <strnlen_P+0x2>
    1e1c:	80 95       	com	r24
    1e1e:	90 95       	com	r25
    1e20:	8e 0f       	add	r24, r30
    1e22:	9f 1f       	adc	r25, r31
    1e24:	08 95       	ret

00001e26 <strnlen>:
    1e26:	fc 01       	movw	r30, r24
    1e28:	61 50       	subi	r22, 0x01	; 1
    1e2a:	70 40       	sbci	r23, 0x00	; 0
    1e2c:	01 90       	ld	r0, Z+
    1e2e:	01 10       	cpse	r0, r1
    1e30:	d8 f7       	brcc	.-10     	; 0x1e28 <strnlen+0x2>
    1e32:	80 95       	com	r24
    1e34:	90 95       	com	r25
    1e36:	8e 0f       	add	r24, r30
    1e38:	9f 1f       	adc	r25, r31
    1e3a:	08 95       	ret

00001e3c <fputc>:
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	8c 01       	movw	r16, r24
    1e46:	eb 01       	movw	r28, r22
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	81 ff       	sbrs	r24, 1
    1e4c:	1b c0       	rjmp	.+54     	; 0x1e84 <fputc+0x48>
    1e4e:	82 ff       	sbrs	r24, 2
    1e50:	0d c0       	rjmp	.+26     	; 0x1e6c <fputc+0x30>
    1e52:	2e 81       	ldd	r18, Y+6	; 0x06
    1e54:	3f 81       	ldd	r19, Y+7	; 0x07
    1e56:	8c 81       	ldd	r24, Y+4	; 0x04
    1e58:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5a:	28 17       	cp	r18, r24
    1e5c:	39 07       	cpc	r19, r25
    1e5e:	64 f4       	brge	.+24     	; 0x1e78 <fputc+0x3c>
    1e60:	e8 81       	ld	r30, Y
    1e62:	f9 81       	ldd	r31, Y+1	; 0x01
    1e64:	01 93       	st	Z+, r16
    1e66:	f9 83       	std	Y+1, r31	; 0x01
    1e68:	e8 83       	st	Y, r30
    1e6a:	06 c0       	rjmp	.+12     	; 0x1e78 <fputc+0x3c>
    1e6c:	e8 85       	ldd	r30, Y+8	; 0x08
    1e6e:	f9 85       	ldd	r31, Y+9	; 0x09
    1e70:	80 2f       	mov	r24, r16
    1e72:	09 95       	icall
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	31 f4       	brne	.+12     	; 0x1e84 <fputc+0x48>
    1e78:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e7c:	01 96       	adiw	r24, 0x01	; 1
    1e7e:	9f 83       	std	Y+7, r25	; 0x07
    1e80:	8e 83       	std	Y+6, r24	; 0x06
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <fputc+0x4c>
    1e84:	0f ef       	ldi	r16, 0xFF	; 255
    1e86:	1f ef       	ldi	r17, 0xFF	; 255
    1e88:	c8 01       	movw	r24, r16
    1e8a:	df 91       	pop	r29
    1e8c:	cf 91       	pop	r28
    1e8e:	1f 91       	pop	r17
    1e90:	0f 91       	pop	r16
    1e92:	08 95       	ret

00001e94 <__ultoa_invert>:
    1e94:	fa 01       	movw	r30, r20
    1e96:	aa 27       	eor	r26, r26
    1e98:	28 30       	cpi	r18, 0x08	; 8
    1e9a:	51 f1       	breq	.+84     	; 0x1ef0 <__ultoa_invert+0x5c>
    1e9c:	20 31       	cpi	r18, 0x10	; 16
    1e9e:	81 f1       	breq	.+96     	; 0x1f00 <__ultoa_invert+0x6c>
    1ea0:	e8 94       	clt
    1ea2:	6f 93       	push	r22
    1ea4:	6e 7f       	andi	r22, 0xFE	; 254
    1ea6:	6e 5f       	subi	r22, 0xFE	; 254
    1ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eaa:	8f 4f       	sbci	r24, 0xFF	; 255
    1eac:	9f 4f       	sbci	r25, 0xFF	; 255
    1eae:	af 4f       	sbci	r26, 0xFF	; 255
    1eb0:	b1 e0       	ldi	r27, 0x01	; 1
    1eb2:	3e d0       	rcall	.+124    	; 0x1f30 <__ultoa_invert+0x9c>
    1eb4:	b4 e0       	ldi	r27, 0x04	; 4
    1eb6:	3c d0       	rcall	.+120    	; 0x1f30 <__ultoa_invert+0x9c>
    1eb8:	67 0f       	add	r22, r23
    1eba:	78 1f       	adc	r23, r24
    1ebc:	89 1f       	adc	r24, r25
    1ebe:	9a 1f       	adc	r25, r26
    1ec0:	a1 1d       	adc	r26, r1
    1ec2:	68 0f       	add	r22, r24
    1ec4:	79 1f       	adc	r23, r25
    1ec6:	8a 1f       	adc	r24, r26
    1ec8:	91 1d       	adc	r25, r1
    1eca:	a1 1d       	adc	r26, r1
    1ecc:	6a 0f       	add	r22, r26
    1ece:	71 1d       	adc	r23, r1
    1ed0:	81 1d       	adc	r24, r1
    1ed2:	91 1d       	adc	r25, r1
    1ed4:	a1 1d       	adc	r26, r1
    1ed6:	20 d0       	rcall	.+64     	; 0x1f18 <__ultoa_invert+0x84>
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <__ultoa_invert+0x48>
    1eda:	68 94       	set
    1edc:	3f 91       	pop	r19
    1ede:	2a e0       	ldi	r18, 0x0A	; 10
    1ee0:	26 9f       	mul	r18, r22
    1ee2:	11 24       	eor	r1, r1
    1ee4:	30 19       	sub	r19, r0
    1ee6:	30 5d       	subi	r19, 0xD0	; 208
    1ee8:	31 93       	st	Z+, r19
    1eea:	de f6       	brtc	.-74     	; 0x1ea2 <__ultoa_invert+0xe>
    1eec:	cf 01       	movw	r24, r30
    1eee:	08 95       	ret
    1ef0:	46 2f       	mov	r20, r22
    1ef2:	47 70       	andi	r20, 0x07	; 7
    1ef4:	40 5d       	subi	r20, 0xD0	; 208
    1ef6:	41 93       	st	Z+, r20
    1ef8:	b3 e0       	ldi	r27, 0x03	; 3
    1efa:	0f d0       	rcall	.+30     	; 0x1f1a <__ultoa_invert+0x86>
    1efc:	c9 f7       	brne	.-14     	; 0x1ef0 <__ultoa_invert+0x5c>
    1efe:	f6 cf       	rjmp	.-20     	; 0x1eec <__ultoa_invert+0x58>
    1f00:	46 2f       	mov	r20, r22
    1f02:	4f 70       	andi	r20, 0x0F	; 15
    1f04:	40 5d       	subi	r20, 0xD0	; 208
    1f06:	4a 33       	cpi	r20, 0x3A	; 58
    1f08:	18 f0       	brcs	.+6      	; 0x1f10 <__ultoa_invert+0x7c>
    1f0a:	49 5d       	subi	r20, 0xD9	; 217
    1f0c:	31 fd       	sbrc	r19, 1
    1f0e:	40 52       	subi	r20, 0x20	; 32
    1f10:	41 93       	st	Z+, r20
    1f12:	02 d0       	rcall	.+4      	; 0x1f18 <__ultoa_invert+0x84>
    1f14:	a9 f7       	brne	.-22     	; 0x1f00 <__ultoa_invert+0x6c>
    1f16:	ea cf       	rjmp	.-44     	; 0x1eec <__ultoa_invert+0x58>
    1f18:	b4 e0       	ldi	r27, 0x04	; 4
    1f1a:	a6 95       	lsr	r26
    1f1c:	97 95       	ror	r25
    1f1e:	87 95       	ror	r24
    1f20:	77 95       	ror	r23
    1f22:	67 95       	ror	r22
    1f24:	ba 95       	dec	r27
    1f26:	c9 f7       	brne	.-14     	; 0x1f1a <__ultoa_invert+0x86>
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	61 05       	cpc	r22, r1
    1f2c:	71 05       	cpc	r23, r1
    1f2e:	08 95       	ret
    1f30:	9b 01       	movw	r18, r22
    1f32:	ac 01       	movw	r20, r24
    1f34:	0a 2e       	mov	r0, r26
    1f36:	06 94       	lsr	r0
    1f38:	57 95       	ror	r21
    1f3a:	47 95       	ror	r20
    1f3c:	37 95       	ror	r19
    1f3e:	27 95       	ror	r18
    1f40:	ba 95       	dec	r27
    1f42:	c9 f7       	brne	.-14     	; 0x1f36 <__ultoa_invert+0xa2>
    1f44:	62 0f       	add	r22, r18
    1f46:	73 1f       	adc	r23, r19
    1f48:	84 1f       	adc	r24, r20
    1f4a:	95 1f       	adc	r25, r21
    1f4c:	a0 1d       	adc	r26, r0
    1f4e:	08 95       	ret

00001f50 <_exit>:
    1f50:	f8 94       	cli

00001f52 <__stop_program>:
    1f52:	ff cf       	rjmp	.-2      	; 0x1f52 <__stop_program>
