
PrinterHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00001bf8  00001c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080014a  0080014a  00001cd6  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00001cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ddb  00000000  00000000  00003fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000788  00000000  00000000  00004dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000114f  00000000  00000000  0000554b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cb5a  00000000  00000000  0000669a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002c42  00000000  00000000  000131f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009928  00000000  00000000  00015e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c70  00000000  00000000  0001f760  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004daa  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007175  00000000  00000000  0002517a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001ea4  00000000  00000000  0002c2ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a18  00000000  00000000  0002e193  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
       2:	00 00       	nop
       4:	81 c1       	rjmp	.+770    	; 0x308 <__bad_interrupt>
       6:	00 00       	nop
       8:	7f c1       	rjmp	.+766    	; 0x308 <__bad_interrupt>
       a:	00 00       	nop
       c:	7d c1       	rjmp	.+762    	; 0x308 <__bad_interrupt>
       e:	00 00       	nop
      10:	7b c1       	rjmp	.+758    	; 0x308 <__bad_interrupt>
      12:	00 00       	nop
      14:	79 c1       	rjmp	.+754    	; 0x308 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c1       	rjmp	.+750    	; 0x308 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c1       	rjmp	.+746    	; 0x308 <__bad_interrupt>
      1e:	00 00       	nop
      20:	73 c1       	rjmp	.+742    	; 0x308 <__bad_interrupt>
      22:	00 00       	nop
      24:	71 c1       	rjmp	.+738    	; 0x308 <__bad_interrupt>
      26:	00 00       	nop
      28:	64 c6       	rjmp	.+3272   	; 0xcf2 <__vector_10>
      2a:	00 00       	nop
      2c:	6d c1       	rjmp	.+730    	; 0x308 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c1       	rjmp	.+726    	; 0x308 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c1       	rjmp	.+722    	; 0x308 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c1       	rjmp	.+718    	; 0x308 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c1       	rjmp	.+714    	; 0x308 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c1       	rjmp	.+710    	; 0x308 <__bad_interrupt>
      42:	00 00       	nop
      44:	61 c1       	rjmp	.+706    	; 0x308 <__bad_interrupt>
      46:	00 00       	nop
      48:	5f c1       	rjmp	.+702    	; 0x308 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c1       	rjmp	.+698    	; 0x308 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c1       	rjmp	.+694    	; 0x308 <__bad_interrupt>
      52:	00 00       	nop
      54:	59 c1       	rjmp	.+690    	; 0x308 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c1       	rjmp	.+686    	; 0x308 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c1       	rjmp	.+682    	; 0x308 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c1       	rjmp	.+678    	; 0x308 <__bad_interrupt>
      62:	00 00       	nop
      64:	51 c1       	rjmp	.+674    	; 0x308 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c1       	rjmp	.+670    	; 0x308 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4d c1       	rjmp	.+666    	; 0x308 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c1       	rjmp	.+662    	; 0x308 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c1       	rjmp	.+658    	; 0x308 <__bad_interrupt>
      76:	00 00       	nop
      78:	47 c1       	rjmp	.+654    	; 0x308 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	45 c1       	rjmp	.+650    	; 0x308 <__bad_interrupt>
      7e:	00 00       	nop
      80:	43 c1       	rjmp	.+646    	; 0x308 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c1       	rjmp	.+642    	; 0x308 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c1       	rjmp	.+638    	; 0x308 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3d c1       	rjmp	.+634    	; 0x308 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3b c1       	rjmp	.+630    	; 0x308 <__bad_interrupt>
      92:	00 00       	nop
      94:	39 c1       	rjmp	.+626    	; 0x308 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4296>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4289>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4284>:
     11d:	50 72 69 6e 74 65 72 20 44 65 76 69 63 65 20 45     Printer Device E
     12d:	6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00              numerated....

0000013a <__c.4282>:
     13a:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 42 69     Error Setting Bi
     14a:	64 69 72 65 63 74 69 6f 6e 61 6c 20 4d 6f 64 65     directional Mode
     15a:	2e 0d 0a 00                                         ....

0000015e <__c.4280>:
     15e:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     16e:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     17e:	6f 6e 2e 0d 0a 00                                   on....

00000184 <__c.4278>:
     184:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     194:	4e 6f 74 20 61 20 56 61 6c 69 64 20 50 72 69 6e     Not a Valid Prin
     1a4:	74 65 72 20 43 6c 61 73 73 20 44 65 76 69 63 65     ter Class Device
     1b4:	2e 0d 0a 00                                         ....

000001b8 <__c.4276>:
     1b8:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1c8:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1d8:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001e5 <__c.4269>:
     1e5:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1f5:	68 65 64 2e 0d 0a 00                                hed....

000001fc <__c.4264>:
     1fc:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     20c:	0d 0a 00                                            ...

0000020f <__c.4259>:
     20f:	54 65 73 74 20 50 61 67 65 20 53 65 6e 74 2e 0d     Test Page Sent..
     21f:	0a 00                                               ..

00000221 <__c.4257>:
     221:	45 72 72 6f 72 20 53 65 6e 64 69 6e 67 20 50 61     Error Sending Pa
     231:	67 65 20 44 61 74 61 2e 0d 0a 00                    ge Data....

0000023c <__c.4255>:
     23c:	53 65 6e 64 69 6e 67 20 54 65 73 74 20 50 61 67     Sending Test Pag
     24c:	65 20 28 25 64 20 62 79 74 65 73 29 2e 2e 2e 0d     e (%d bytes)....
     25c:	0a 00                                               ..

0000025e <__c.4251>:
     25e:	44 65 76 69 63 65 20 49 44 3a 20 25 73 2e 0d 0a     Device ID: %s...
     26e:	00                                                  .

0000026f <__c.4249>:
     26f:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 44 65     Error Getting De
     27f:	76 69 63 65 20 49 44 2e 0d 0a 00                    vice ID....

0000028a <__c.4246>:
     28a:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     29a:	65 20 49 44 2e 2e 2e 0d 0a 00                       e ID......

000002a4 <__c.4237>:
     2a4:	1b 5b 33 36 6d 50 72 69 6e 74 65 72 20 48 6f 73     .[36mPrinter Hos
     2b4:	74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d     t Demo running..
     2c4:	0a 1b 5b 33 37 6d 00 00                             ..[37m..

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d0 e2       	ldi	r29, 0x20	; 32
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	e8 ef       	ldi	r30, 0xF8	; 248
     2e0:	fb e1       	ldi	r31, 0x1B	; 27
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	0b bf       	out	0x3b, r16	; 59
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x14>
     2e8:	07 90       	elpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	aa 34       	cpi	r26, 0x4A	; 74
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0x10>

000002f2 <__do_clear_bss>:
     2f2:	11 e0       	ldi	r17, 0x01	; 1
     2f4:	aa e4       	ldi	r26, 0x4A	; 74
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	ac 36       	cpi	r26, 0x6C	; 108
     2fe:	b1 07       	cpc	r27, r17
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
     302:	b3 d0       	rcall	.+358    	; 0x46a <main>
     304:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <_exit>

00000308 <__bad_interrupt>:
     308:	7b ce       	rjmp	.-778    	; 0x0 <__vectors>

0000030a <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     30a:	9b b1       	in	r25, 0x0b	; 11
     30c:	9f 70       	andi	r25, 0x0F	; 15
     30e:	98 2b       	or	r25, r24
     310:	9b b9       	out	0x0b, r25	; 11
			}
     312:	08 95       	ret

00000314 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     314:	84 b7       	in	r24, 0x34	; 52
     316:	87 7f       	andi	r24, 0xF7	; 247
     318:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     31a:	28 e1       	ldi	r18, 0x18	; 24
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	20 93 60 00 	sts	0x0060, r18
     324:	10 92 60 00 	sts	0x0060, r1
     328:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	80 e8       	ldi	r24, 0x80	; 128
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	80 93 61 00 	sts	0x0061, r24
     336:	90 93 61 00 	sts	0x0061, r25
     33a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     33c:	83 e3       	ldi	r24, 0x33	; 51
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	90 93 cd 00 	sts	0x00CD, r25
     344:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     348:	86 e0       	ldi	r24, 0x06	; 6
     34a:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     34e:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     352:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     356:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     358:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     35a:	8a b1       	in	r24, 0x0a	; 10
     35c:	80 6f       	ori	r24, 0xF0	; 240
     35e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     360:	8b b1       	in	r24, 0x0b	; 11
     362:	8f 70       	andi	r24, 0x0F	; 15
     364:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     366:	aa d4       	rcall	.+2388   	; 0xcbc <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <Serial_CreateStream>

00000370 <PrinterHost_Task>:

/** Task to manage an enumerated USB printer once connected, to display device
 *  information and print a test PCL page.
 */
void PrinterHost_Task(void)
{
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	df 93       	push	r29
     37a:	cf 93       	push	r28
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	c5 55       	subi	r28, 0x55	; 85
     382:	d1 40       	sbci	r29, 0x01	; 1
     384:	0f b6       	in	r0, 0x3f	; 63
     386:	f8 94       	cli
     388:	de bf       	out	0x3e, r29	; 62
     38a:	0f be       	out	0x3f, r0	; 63
     38c:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     38e:	80 91 57 01 	lds	r24, 0x0157
     392:	8b 30       	cpi	r24, 0x0B	; 11
     394:	09 f0       	breq	.+2      	; 0x398 <PrinterHost_Task+0x28>
     396:	5b c0       	rjmp	.+182    	; 0x44e <PrinterHost_Task+0xde>
	  return;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     398:	80 e2       	ldi	r24, 0x20	; 32
     39a:	b7 df       	rcall	.-146    	; 0x30a <LEDs_SetAllLEDs>

	puts_P(PSTR("Retrieving Device ID...\r\n"));
     39c:	8a e8       	ldi	r24, 0x8A	; 138
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	0e 94 1f 0b 	call	0x163e	; 0x163e <puts_P>

	char DeviceIDString[300];
	if (PRNT_Host_GetDeviceID(&Printer_PRNT_Interface, DeviceIDString,
     3a4:	8e 01       	movw	r16, r28
     3a6:	06 5d       	subi	r16, 0xD6	; 214
     3a8:	1f 4f       	sbci	r17, 0xFF	; 255
     3aa:	89 e2       	ldi	r24, 0x29	; 41
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	b8 01       	movw	r22, r16
     3b0:	4c e2       	ldi	r20, 0x2C	; 44
     3b2:	51 e0       	ldi	r21, 0x01	; 1
     3b4:	0e 94 4e 0a 	call	0x149c	; 0x149c <PRNT_Host_GetDeviceID>
     3b8:	88 23       	and	r24, r24
     3ba:	19 f0       	breq	.+6      	; 0x3c2 <PrinterHost_Task+0x52>
	                          sizeof(DeviceIDString)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Getting Device ID.\r\n"));
     3bc:	8f e6       	ldi	r24, 0x6F	; 111
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	3a c0       	rjmp	.+116    	; 0x436 <PrinterHost_Task+0xc6>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device ID: %s.\r\n"), DeviceIDString);
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <PrinterHost_Task+0x54>
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <PrinterHost_Task+0x56>
     3c6:	8e e5       	ldi	r24, 0x5E	; 94
     3c8:	92 e0       	ldi	r25, 0x02	; 2
     3ca:	ed b7       	in	r30, 0x3d	; 61
     3cc:	fe b7       	in	r31, 0x3e	; 62
     3ce:	92 83       	std	Z+2, r25	; 0x02
     3d0:	81 83       	std	Z+1, r24	; 0x01
     3d2:	14 83       	std	Z+4, r17	; 0x04
     3d4:	03 83       	std	Z+3, r16	; 0x03
     3d6:	0e 94 00 0b 	call	0x1600	; 0x1600 <printf_P>

	char     TestPageData[] = "\033%-12345X\033E" "LUFA PCL Test Page" "\033E\033%-12345X";
     3da:	de 01       	movw	r26, r28
     3dc:	11 96       	adiw	r26, 0x01	; 1
     3de:	e0 e0       	ldi	r30, 0x00	; 0
     3e0:	f1 e0       	ldi	r31, 0x01	; 1
     3e2:	89 e2       	ldi	r24, 0x29	; 41
     3e4:	01 90       	ld	r0, Z+
     3e6:	0d 92       	st	X+, r0
     3e8:	81 50       	subi	r24, 0x01	; 1
     3ea:	e1 f7       	brne	.-8      	; 0x3e4 <PrinterHost_Task+0x74>
	uint16_t TestPageLength = strlen(TestPageData);
     3ec:	7e 01       	movw	r14, r28
     3ee:	08 94       	sec
     3f0:	e1 1c       	adc	r14, r1
     3f2:	f1 1c       	adc	r15, r1
     3f4:	f7 01       	movw	r30, r14
     3f6:	01 90       	ld	r0, Z+
     3f8:	00 20       	and	r0, r0
     3fa:	e9 f7       	brne	.-6      	; 0x3f6 <PrinterHost_Task+0x86>
     3fc:	8f 01       	movw	r16, r30
     3fe:	01 50       	subi	r16, 0x01	; 1
     400:	10 40       	sbci	r17, 0x00	; 0
     402:	0e 19       	sub	r16, r14
     404:	1f 09       	sbc	r17, r15

	printf_P(PSTR("Sending Test Page (%d bytes)...\r\n"), TestPageLength);
     406:	8c e3       	ldi	r24, 0x3C	; 60
     408:	92 e0       	ldi	r25, 0x02	; 2
     40a:	ed b7       	in	r30, 0x3d	; 61
     40c:	fe b7       	in	r31, 0x3e	; 62
     40e:	92 83       	std	Z+2, r25	; 0x02
     410:	81 83       	std	Z+1, r24	; 0x01
     412:	14 83       	std	Z+4, r17	; 0x04
     414:	03 83       	std	Z+3, r16	; 0x03
     416:	0e 94 00 0b 	call	0x1600	; 0x1600 <printf_P>

	if (PRNT_Host_SendData(&Printer_PRNT_Interface, &TestPageData, TestPageLength) != PIPE_RWSTREAM_NoError)
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	89 e2       	ldi	r24, 0x29	; 41
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	b7 01       	movw	r22, r14
     428:	a8 01       	movw	r20, r16
     42a:	0e 94 26 0a 	call	0x144c	; 0x144c <PRNT_Host_SendData>
     42e:	88 23       	and	r24, r24
     430:	31 f0       	breq	.+12     	; 0x43e <PrinterHost_Task+0xce>
	{
		puts_P(PSTR("Error Sending Page Data.\r\n"));
     432:	81 e2       	ldi	r24, 0x21	; 33
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	0e 94 1f 0b 	call	0x163e	; 0x163e <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     43a:	80 e9       	ldi	r24, 0x90	; 144
     43c:	05 c0       	rjmp	.+10     	; 0x448 <PrinterHost_Task+0xd8>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Test Page Sent.\r\n"));
     43e:	8f e0       	ldi	r24, 0x0F	; 15
     440:	92 e0       	ldi	r25, 0x02	; 2
     442:	0e 94 1f 0b 	call	0x163e	; 0x163e <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     446:	80 e6       	ldi	r24, 0x60	; 96
     448:	60 df       	rcall	.-320    	; 0x30a <LEDs_SetAllLEDs>
	USB_Host_SetDeviceConfiguration(0);
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	a8 d6       	rcall	.+3408   	; 0x119e <USB_Host_SetDeviceConfiguration>
}
     44e:	cb 5a       	subi	r28, 0xAB	; 171
     450:	de 4f       	sbci	r29, 0xFE	; 254
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	cf 91       	pop	r28
     45e:	df 91       	pop	r29
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	08 95       	ret

0000046a <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     46a:	54 df       	rcall	.-344    	; 0x314 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Printer Host Demo running.\r\n" ESC_FG_WHITE));
     46c:	84 ea       	ldi	r24, 0xA4	; 164
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	0e 94 1f 0b 	call	0x163e	; 0x163e <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     474:	80 e1       	ldi	r24, 0x10	; 16
     476:	49 df       	rcall	.-366    	; 0x30a <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     478:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		PrinterHost_Task();
     47a:	7a df       	rcall	.-268    	; 0x370 <PrinterHost_Task>

		PRNT_Host_USBTask(&Printer_PRNT_Interface);
     47c:	89 e2       	ldi	r24, 0x29	; 41
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	db d7       	rcall	.+4022   	; 0x1438 <PRNT_Host_USBTask>
		USB_USBTask();
     482:	c9 d6       	rcall	.+3474   	; 0x1216 <USB_USBTask>
     484:	fa cf       	rjmp	.-12     	; 0x47a <main+0x10>

00000486 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     486:	8c ef       	ldi	r24, 0xFC	; 252
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 1f 0b 	call	0x163e	; 0x163e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     48e:	80 ea       	ldi	r24, 0xA0	; 160
}
     490:	3c cf       	rjmp	.-392    	; 0x30a <LEDs_SetAllLEDs>

00000492 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     492:	85 ee       	ldi	r24, 0xE5	; 229
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 1f 0b 	call	0x163e	; 0x163e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     49a:	80 e1       	ldi	r24, 0x10	; 16
}
     49c:	36 cf       	rjmp	.-404    	; 0x30a <LEDs_SetAllLEDs>

0000049e <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	df 93       	push	r29
     4a4:	cf 93       	push	r28
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	c2 50       	subi	r28, 0x02	; 2
     4ac:	d2 40       	sbci	r29, 0x02	; 2
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4b8:	80 ea       	ldi	r24, 0xA0	; 160
     4ba:	27 df       	rcall	.-434    	; 0x30a <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4bc:	8e 01       	movw	r16, r28
     4be:	0d 5f       	subi	r16, 0xFD	; 253
     4c0:	1f 4f       	sbci	r17, 0xFF	; 255
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	be 01       	movw	r22, r28
     4c6:	6f 5f       	subi	r22, 0xFF	; 255
     4c8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ca:	a8 01       	movw	r20, r16
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	32 e0       	ldi	r19, 0x02	; 2
     4d0:	a3 d4       	rcall	.+2374   	; 0xe18 <USB_Host_GetDeviceConfigDescriptor>
     4d2:	88 23       	and	r24, r24
     4d4:	19 f0       	breq	.+6      	; 0x4dc <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4d6:	88 eb       	ldi	r24, 0xB8	; 184
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	11 c0       	rjmp	.+34     	; 0x4fe <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (PRNT_Host_ConfigurePipes(&Printer_PRNT_Interface,
     4dc:	69 81       	ldd	r22, Y+1	; 0x01
     4de:	7a 81       	ldd	r23, Y+2	; 0x02
     4e0:	89 e2       	ldi	r24, 0x29	; 41
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	a8 01       	movw	r20, r16
     4e6:	c6 d6       	rcall	.+3468   	; 0x1274 <PRNT_Host_ConfigurePipes>
     4e8:	88 23       	and	r24, r24
     4ea:	19 f0       	breq	.+6      	; 0x4f2 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
	                             ConfigDescriptorSize, ConfigDescriptorData) != PRNT_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Printer Class Device.\r\n"));
     4ec:	84 e8       	ldi	r24, 0x84	; 132
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	06 c0       	rjmp	.+12     	; 0x4fe <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	54 d6       	rcall	.+3240   	; 0x119e <USB_Host_SetDeviceConfiguration>
     4f6:	88 23       	and	r24, r24
     4f8:	31 f0       	breq	.+12     	; 0x506 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4fa:	8e e5       	ldi	r24, 0x5E	; 94
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0e 94 1f 0b 	call	0x163e	; 0x163e <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     502:	80 e9       	ldi	r24, 0x90	; 144
     504:	13 c0       	rjmp	.+38     	; 0x52c <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
		return;
	}

	if (PRNT_Host_SetBidirectionalMode(&Printer_PRNT_Interface) != HOST_SENDCONTROL_Successful)
     506:	89 e2       	ldi	r24, 0x29	; 41
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	5b d7       	rcall	.+3766   	; 0x13c2 <PRNT_Host_SetBidirectionalMode>
     50c:	88 23       	and	r24, r24
     50e:	49 f0       	breq	.+18     	; 0x522 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
	{
		puts_P(PSTR("Error Setting Bidirectional Mode.\r\n"));
     510:	8a e3       	ldi	r24, 0x3A	; 58
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 1f 0b 	call	0x163e	; 0x163e <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     518:	80 e9       	ldi	r24, 0x90	; 144
     51a:	f7 de       	rcall	.-530    	; 0x30a <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	3f d6       	rcall	.+3198   	; 0x119e <USB_Host_SetDeviceConfiguration>
		return;
     520:	06 c0       	rjmp	.+12     	; 0x52e <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
	}

	puts_P(PSTR("Printer Device Enumerated.\r\n"));
     522:	8d e1       	ldi	r24, 0x1D	; 29
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 1f 0b 	call	0x163e	; 0x163e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     52a:	80 e6       	ldi	r24, 0x60	; 96
     52c:	ee de       	rcall	.-548    	; 0x30a <LEDs_SetAllLEDs>
}
     52e:	ce 5f       	subi	r28, 0xFE	; 254
     530:	dd 4f       	sbci	r29, 0xFD	; 253
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	cf 91       	pop	r28
     53e:	df 91       	pop	r29
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     546:	df 93       	push	r29
     548:	cf 93       	push	r28
     54a:	0f 92       	push	r0
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	4c d3       	rcall	.+1688   	; 0xbec <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     554:	00 d0       	rcall	.+0      	; 0x556 <EVENT_USB_Host_HostError+0x10>
     556:	00 d0       	rcall	.+0      	; 0x558 <EVENT_USB_Host_HostError+0x12>
     558:	ed b7       	in	r30, 0x3d	; 61
     55a:	fe b7       	in	r31, 0x3e	; 62
     55c:	31 96       	adiw	r30, 0x01	; 1
     55e:	2e ee       	ldi	r18, 0xEE	; 238
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	ad b7       	in	r26, 0x3d	; 61
     564:	be b7       	in	r27, 0x3e	; 62
     566:	12 96       	adiw	r26, 0x02	; 2
     568:	3c 93       	st	X, r19
     56a:	2e 93       	st	-X, r18
     56c:	11 97       	sbiw	r26, 0x01	; 1
     56e:	89 81       	ldd	r24, Y+1	; 0x01
     570:	82 83       	std	Z+2, r24	; 0x02
     572:	13 82       	std	Z+3, r1	; 0x03
     574:	0e 94 00 0b 	call	0x1600	; 0x1600 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	80 e9       	ldi	r24, 0x90	; 144
     582:	c3 de       	rcall	.-634    	; 0x30a <LEDs_SetAllLEDs>
     584:	ff cf       	rjmp	.-2      	; 0x584 <EVENT_USB_Host_HostError+0x3e>

00000586 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     586:	90 91 57 01 	lds	r25, 0x0157
     58a:	2d b7       	in	r18, 0x3d	; 61
     58c:	3e b7       	in	r19, 0x3e	; 62
     58e:	28 50       	subi	r18, 0x08	; 8
     590:	30 40       	sbci	r19, 0x00	; 0
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	3e bf       	out	0x3e, r19	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	2d bf       	out	0x3d, r18	; 61
     59c:	ed b7       	in	r30, 0x3d	; 61
     59e:	fe b7       	in	r31, 0x3e	; 62
     5a0:	31 96       	adiw	r30, 0x01	; 1
     5a2:	28 e9       	ldi	r18, 0x98	; 152
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	ad b7       	in	r26, 0x3d	; 61
     5a8:	be b7       	in	r27, 0x3e	; 62
     5aa:	12 96       	adiw	r26, 0x02	; 2
     5ac:	3c 93       	st	X, r19
     5ae:	2e 93       	st	-X, r18
     5b0:	11 97       	sbiw	r26, 0x01	; 1
     5b2:	82 83       	std	Z+2, r24	; 0x02
     5b4:	13 82       	std	Z+3, r1	; 0x03
     5b6:	64 83       	std	Z+4, r22	; 0x04
     5b8:	15 82       	std	Z+5, r1	; 0x05
     5ba:	96 83       	std	Z+6, r25	; 0x06
     5bc:	17 82       	std	Z+7, r1	; 0x07
     5be:	0e 94 00 0b 	call	0x1600	; 0x1600 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5c2:	2d b7       	in	r18, 0x3d	; 61
     5c4:	3e b7       	in	r19, 0x3e	; 62
     5c6:	28 5f       	subi	r18, 0xF8	; 248
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	3e bf       	out	0x3e, r19	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	2d bf       	out	0x3d, r18	; 61
     5d4:	80 e9       	ldi	r24, 0x90	; 144
}
     5d6:	99 ce       	rjmp	.-718    	; 0x30a <LEDs_SetAllLEDs>

000005d8 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5d8:	80 91 9e 00 	lds	r24, 0x009E
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	81 70       	andi	r24, 0x01	; 1
     5e0:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     5e2:	20 91 a0 00 	lds	r18, 0x00A0
     5e6:	2d 7f       	andi	r18, 0xFD	; 253
     5e8:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     5ec:	20 91 9e 00 	lds	r18, 0x009E
     5f0:	22 60       	ori	r18, 0x02	; 2
     5f2:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     5f6:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     5fa:	21 fd       	sbrc	r18, 1
     5fc:	fc cf       	rjmp	.-8      	; 0x5f6 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5fe:	20 91 9e 00 	lds	r18, 0x009E
     602:	21 60       	ori	r18, 0x01	; 1
     604:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     608:	10 92 4d 01 	sts	0x014D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     60c:	20 91 a0 00 	lds	r18, 0x00A0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	20 72       	andi	r18, 0x20	; 32
     614:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     616:	40 91 a0 00 	lds	r20, 0x00A0
     61a:	4f 7d       	andi	r20, 0xDF	; 223
     61c:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     620:	40 91 9f 00 	lds	r20, 0x009F
     624:	4f 7d       	andi	r20, 0xDF	; 223
     626:	40 93 9f 00 	sts	0x009F, r20
     62a:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     62c:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     630:	55 ff       	sbrs	r21, 5
     632:	0b c0       	rjmp	.+22     	; 0x64a <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     634:	40 91 9f 00 	lds	r20, 0x009F
     638:	4f 7d       	andi	r20, 0xDF	; 223
     63a:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     63e:	40 91 9f 00 	lds	r20, 0x009F
     642:	4d 7f       	andi	r20, 0xFD	; 253
     644:	40 93 9f 00 	sts	0x009F, r20
     648:	08 c0       	rjmp	.+16     	; 0x65a <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     64a:	ef ec       	ldi	r30, 0xCF	; 207
     64c:	f7 e0       	ldi	r31, 0x07	; 7
     64e:	31 97       	sbiw	r30, 0x01	; 1
     650:	f1 f7       	brne	.-4      	; 0x64e <USB_Host_ResetDevice+0x76>
     652:	00 c0       	rjmp	.+0      	; 0x654 <USB_Host_ResetDevice+0x7c>
     654:	00 00       	nop
     656:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     658:	49 f7       	brne	.-46     	; 0x62c <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     65a:	21 15       	cp	r18, r1
     65c:	31 05       	cpc	r19, r1
     65e:	29 f0       	breq	.+10     	; 0x66a <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     660:	20 91 a0 00 	lds	r18, 0x00A0
     664:	20 62       	ori	r18, 0x20	; 32
     666:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	29 f4       	brne	.+10     	; 0x678 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     66e:	80 91 9e 00 	lds	r24, 0x009E
     672:	8e 7f       	andi	r24, 0xFE	; 254
     674:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     678:	80 91 a0 00 	lds	r24, 0x00A0
     67c:	82 60       	ori	r24, 0x02	; 2
     67e:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     682:	08 95       	ret

00000684 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     684:	40 91 9e 00 	lds	r20, 0x009E
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	41 70       	andi	r20, 0x01	; 1
     68c:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     68e:	20 91 a0 00 	lds	r18, 0x00A0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	20 72       	andi	r18, 0x20	; 32
     696:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     698:	90 91 a0 00 	lds	r25, 0x00A0
     69c:	9f 7d       	andi	r25, 0xDF	; 223
     69e:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6a2:	90 91 9f 00 	lds	r25, 0x009F
     6a6:	9f 7d       	andi	r25, 0xDF	; 223
     6a8:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6ac:	90 91 9e 00 	lds	r25, 0x009E
     6b0:	91 60       	ori	r25, 0x01	; 1
     6b2:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6b6:	26 c0       	rjmp	.+76     	; 0x704 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6b8:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6bc:	95 ff       	sbrs	r25, 5
     6be:	06 c0       	rjmp	.+12     	; 0x6cc <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6c0:	90 91 9f 00 	lds	r25, 0x009F
     6c4:	9f 7d       	andi	r25, 0xDF	; 223
     6c6:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     6ca:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     6cc:	90 91 57 01 	lds	r25, 0x0157
     6d0:	91 30       	cpi	r25, 0x01	; 1
     6d2:	d9 f0       	breq	.+54     	; 0x70a <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     6d4:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     6d8:	94 ff       	sbrs	r25, 4
     6da:	09 c0       	rjmp	.+18     	; 0x6ee <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     6dc:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     6e0:	80 91 a6 00 	lds	r24, 0x00A6
     6e4:	8f 7e       	andi	r24, 0xEF	; 239
     6e6:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     6ea:	82 e0       	ldi	r24, 0x02	; 2

			break;
     6ec:	0f c0       	rjmp	.+30     	; 0x70c <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     6ee:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     6f2:	91 ff       	sbrs	r25, 1
     6f4:	07 c0       	rjmp	.+14     	; 0x704 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     6f6:	80 91 a6 00 	lds	r24, 0x00A6
     6fa:	8d 7f       	andi	r24, 0xFD	; 253
     6fc:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     700:	83 e0       	ldi	r24, 0x03	; 3

			break;
     702:	04 c0       	rjmp	.+8      	; 0x70c <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     704:	88 23       	and	r24, r24
     706:	c1 f6       	brne	.-80     	; 0x6b8 <USB_Host_WaitMS+0x34>
     708:	01 c0       	rjmp	.+2      	; 0x70c <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     70a:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     70c:	41 15       	cp	r20, r1
     70e:	51 05       	cpc	r21, r1
     710:	29 f4       	brne	.+10     	; 0x71c <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     712:	90 91 9e 00 	lds	r25, 0x009E
     716:	9e 7f       	andi	r25, 0xFE	; 254
     718:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     71c:	21 15       	cp	r18, r1
     71e:	31 05       	cpc	r19, r1
     720:	29 f0       	breq	.+10     	; 0x72c <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     722:	90 91 a0 00 	lds	r25, 0x00A0
     726:	90 62       	ori	r25, 0x20	; 32
     728:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     72c:	08 95       	ret

0000072e <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	28 97       	sbiw	r28, 0x08	; 8
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     746:	80 91 57 01 	lds	r24, 0x0157
     74a:	85 30       	cpi	r24, 0x05	; 5
     74c:	09 f4       	brne	.+2      	; 0x750 <USB_Host_ProcessNextHostState+0x22>
     74e:	99 c0       	rjmp	.+306    	; 0x882 <USB_Host_ProcessNextHostState+0x154>
     750:	86 30       	cpi	r24, 0x06	; 6
     752:	68 f4       	brcc	.+26     	; 0x76e <USB_Host_ProcessNextHostState+0x40>
     754:	82 30       	cpi	r24, 0x02	; 2
     756:	c1 f1       	breq	.+112    	; 0x7c8 <USB_Host_ProcessNextHostState+0x9a>
     758:	83 30       	cpi	r24, 0x03	; 3
     75a:	18 f4       	brcc	.+6      	; 0x762 <USB_Host_ProcessNextHostState+0x34>
     75c:	88 23       	and	r24, r24
     75e:	a1 f0       	breq	.+40     	; 0x788 <USB_Host_ProcessNextHostState+0x5a>
     760:	04 c1       	rjmp	.+520    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
     762:	83 30       	cpi	r24, 0x03	; 3
     764:	d9 f1       	breq	.+118    	; 0x7dc <USB_Host_ProcessNextHostState+0xae>
     766:	84 30       	cpi	r24, 0x04	; 4
     768:	09 f0       	breq	.+2      	; 0x76c <USB_Host_ProcessNextHostState+0x3e>
     76a:	ff c0       	rjmp	.+510    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
     76c:	62 c0       	rjmp	.+196    	; 0x832 <USB_Host_ProcessNextHostState+0x104>
     76e:	87 30       	cpi	r24, 0x07	; 7
     770:	09 f4       	brne	.+2      	; 0x774 <USB_Host_ProcessNextHostState+0x46>
     772:	9e c0       	rjmp	.+316    	; 0x8b0 <USB_Host_ProcessNextHostState+0x182>
     774:	87 30       	cpi	r24, 0x07	; 7
     776:	08 f4       	brcc	.+2      	; 0x77a <USB_Host_ProcessNextHostState+0x4c>
     778:	8f c0       	rjmp	.+286    	; 0x898 <USB_Host_ProcessNextHostState+0x16a>
     77a:	88 30       	cpi	r24, 0x08	; 8
     77c:	09 f4       	brne	.+2      	; 0x780 <USB_Host_ProcessNextHostState+0x52>
     77e:	b8 c0       	rjmp	.+368    	; 0x8f0 <USB_Host_ProcessNextHostState+0x1c2>
     780:	89 30       	cpi	r24, 0x09	; 9
     782:	09 f0       	breq	.+2      	; 0x786 <USB_Host_ProcessNextHostState+0x58>
     784:	f2 c0       	rjmp	.+484    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
     786:	d9 c0       	rjmp	.+434    	; 0x93a <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     788:	00 91 4b 01 	lds	r16, 0x014B
     78c:	10 91 4c 01 	lds	r17, 0x014C
     790:	01 15       	cp	r16, r1
     792:	11 05       	cpc	r17, r1
     794:	09 f4       	brne	.+2      	; 0x798 <USB_Host_ProcessNextHostState+0x6a>
     796:	e9 c0       	rjmp	.+466    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	74 df       	rcall	.-280    	; 0x684 <USB_Host_WaitMS>
     79c:	68 2f       	mov	r22, r24
     79e:	88 23       	and	r24, r24
     7a0:	31 f0       	breq	.+12     	; 0x7ae <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     7a2:	80 91 4a 01 	lds	r24, 0x014A
     7a6:	80 93 57 01 	sts	0x0157, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
					break;
     7ac:	d2 c0       	rjmp	.+420    	; 0x952 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     7ae:	01 50       	subi	r16, 0x01	; 1
     7b0:	10 40       	sbci	r17, 0x00	; 0
     7b2:	10 93 4c 01 	sts	0x014C, r17
     7b6:	00 93 4b 01 	sts	0x014B, r16
     7ba:	01 15       	cp	r16, r1
     7bc:	11 05       	cpc	r17, r1
     7be:	09 f0       	breq	.+2      	; 0x7c2 <USB_Host_ProcessNextHostState+0x94>
     7c0:	d4 c0       	rjmp	.+424    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     7c2:	80 91 4a 01 	lds	r24, 0x014A
     7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7c8:	88 ee       	ldi	r24, 0xE8	; 232
     7ca:	93 e0       	ldi	r25, 0x03	; 3
     7cc:	90 93 4c 01 	sts	0x014C, r25
     7d0:	80 93 4b 01 	sts	0x014B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7d4:	83 e0       	ldi	r24, 0x03	; 3
     7d6:	80 93 57 01 	sts	0x0157, r24
			break;
     7da:	c7 c0       	rjmp	.+398    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7dc:	80 91 4b 01 	lds	r24, 0x014B
     7e0:	90 91 4c 01 	lds	r25, 0x014C
     7e4:	9c 01       	movw	r18, r24
     7e6:	21 50       	subi	r18, 0x01	; 1
     7e8:	30 40       	sbci	r19, 0x00	; 0
     7ea:	30 93 4c 01 	sts	0x014C, r19
     7ee:	20 93 4b 01 	sts	0x014B, r18
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	39 f0       	breq	.+14     	; 0x804 <USB_Host_ProcessNextHostState+0xd6>
     7f6:	8f ec       	ldi	r24, 0xCF	; 207
     7f8:	97 e0       	ldi	r25, 0x07	; 7
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <USB_Host_ProcessNextHostState+0xcc>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <USB_Host_ProcessNextHostState+0xd2>
     800:	00 00       	nop
     802:	b3 c0       	rjmp	.+358    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     804:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     806:	80 91 d8 00 	lds	r24, 0x00D8
     80a:	80 61       	ori	r24, 0x10	; 16
     80c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     810:	80 91 dd 00 	lds	r24, 0x00DD
     814:	8b 7f       	andi	r24, 0xFB	; 251
     816:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     81a:	80 91 d7 00 	lds	r24, 0x00D7
     81e:	80 61       	ori	r24, 0x10	; 16
     820:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     824:	80 91 dd 00 	lds	r24, 0x00DD
     828:	82 60       	ori	r24, 0x02	; 2
     82a:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     82e:	84 e0       	ldi	r24, 0x04	; 4
     830:	d2 cf       	rjmp	.-92     	; 0x7d6 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     832:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     836:	80 ff       	sbrs	r24, 0
     838:	98 c0       	rjmp	.+304    	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     83a:	80 91 9f 00 	lds	r24, 0x009F
     83e:	8e 7f       	andi	r24, 0xFE	; 254
     840:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     844:	80 91 9f 00 	lds	r24, 0x009F
     848:	8d 7f       	andi	r24, 0xFD	; 253
     84a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     84e:	80 91 df 00 	lds	r24, 0x00DF
     852:	8d 7f       	andi	r24, 0xFD	; 253
     854:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     858:	80 91 de 00 	lds	r24, 0x00DE
     85c:	82 60       	ori	r24, 0x02	; 2
     85e:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     862:	80 91 9e 00 	lds	r24, 0x009E
     866:	81 60       	ori	r24, 0x01	; 1
     868:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     86c:	7a d1       	rcall	.+756    	; 0xb62 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     86e:	10 92 57 01 	sts	0x0157, r1
     872:	84 e6       	ldi	r24, 0x64	; 100
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	90 93 4c 01 	sts	0x014C, r25
     87a:	80 93 4b 01 	sts	0x014B, r24
     87e:	85 e0       	ldi	r24, 0x05	; 5
     880:	59 c0       	rjmp	.+178    	; 0x934 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     882:	aa de       	rcall	.-684    	; 0x5d8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     884:	10 92 57 01 	sts	0x0157, r1
     888:	88 ec       	ldi	r24, 0xC8	; 200
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	90 93 4c 01 	sts	0x014C, r25
     890:	80 93 4b 01 	sts	0x014B, r24
     894:	86 e0       	ldi	r24, 0x06	; 6
     896:	4e c0       	rjmp	.+156    	; 0x934 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	20 e4       	ldi	r18, 0x40	; 64
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	01 e0       	ldi	r16, 0x01	; 1
     8a4:	d0 d0       	rcall	.+416    	; 0xa46 <Pipe_ConfigurePipe>
     8a6:	88 23       	and	r24, r24
     8a8:	09 f4       	brne	.+2      	; 0x8ac <USB_Host_ProcessNextHostState+0x17e>
     8aa:	4f c0       	rjmp	.+158    	; 0x94a <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8ac:	87 e0       	ldi	r24, 0x07	; 7
     8ae:	93 cf       	rjmp	.-218    	; 0x7d6 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8b0:	af e4       	ldi	r26, 0x4F	; 79
     8b2:	b1 e0       	ldi	r27, 0x01	; 1
     8b4:	e0 e4       	ldi	r30, 0x40	; 64
     8b6:	f1 e0       	ldi	r31, 0x01	; 1
     8b8:	88 e0       	ldi	r24, 0x08	; 8
     8ba:	01 90       	ld	r0, Z+
     8bc:	0d 92       	st	X+, r0
     8be:	81 50       	subi	r24, 0x01	; 1
     8c0:	e1 f7       	brne	.-8      	; 0x8ba <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8c2:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8c6:	ce 01       	movw	r24, r28
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	6a d3       	rcall	.+1748   	; 0xfa0 <USB_Host_SendControlRequest>
     8cc:	68 2f       	mov	r22, r24
     8ce:	88 23       	and	r24, r24
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <USB_Host_ProcessNextHostState+0x1a6>
     8d2:	3e c0       	rjmp	.+124    	; 0x950 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8d4:	88 85       	ldd	r24, Y+8	; 0x08
     8d6:	80 93 48 01 	sts	0x0148, r24

			USB_Host_ResetDevice();
     8da:	7e de       	rcall	.-772    	; 0x5d8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8dc:	10 92 57 01 	sts	0x0157, r1
     8e0:	88 ec       	ldi	r24, 0xC8	; 200
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	90 93 4c 01 	sts	0x014C, r25
     8e8:	80 93 4b 01 	sts	0x014B, r24
     8ec:	88 e0       	ldi	r24, 0x08	; 8
     8ee:	22 c0       	rjmp	.+68     	; 0x934 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     8f0:	20 91 48 01 	lds	r18, 0x0148
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	01 e0       	ldi	r16, 0x01	; 1
     8fe:	a3 d0       	rcall	.+326    	; 0xa46 <Pipe_ConfigurePipe>
     900:	88 23       	and	r24, r24
     902:	19 f1       	breq	.+70     	; 0x94a <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     904:	af e4       	ldi	r26, 0x4F	; 79
     906:	b1 e0       	ldi	r27, 0x01	; 1
     908:	e8 e3       	ldi	r30, 0x38	; 56
     90a:	f1 e0       	ldi	r31, 0x01	; 1
     90c:	88 e0       	ldi	r24, 0x08	; 8
     90e:	01 90       	ld	r0, Z+
     910:	0d 92       	st	X+, r0
     912:	81 50       	subi	r24, 0x01	; 1
     914:	e1 f7       	brne	.-8      	; 0x90e <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	42 d3       	rcall	.+1668   	; 0xfa0 <USB_Host_SendControlRequest>
     91c:	68 2f       	mov	r22, r24
     91e:	88 23       	and	r24, r24
     920:	b9 f4       	brne	.+46     	; 0x950 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     922:	10 92 57 01 	sts	0x0157, r1
     926:	84 e6       	ldi	r24, 0x64	; 100
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	90 93 4c 01 	sts	0x014C, r25
     92e:	80 93 4b 01 	sts	0x014B, r24
     932:	89 e0       	ldi	r24, 0x09	; 9
     934:	80 93 4a 01 	sts	0x014A, r24
			break;
     938:	18 c0       	rjmp	.+48     	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     940:	8a e0       	ldi	r24, 0x0A	; 10
     942:	80 93 57 01 	sts	0x0157, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     946:	ab dd       	rcall	.-1194   	; 0x49e <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     948:	10 c0       	rjmp	.+32     	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     94a:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     94c:	84 e0       	ldi	r24, 0x04	; 4
     94e:	01 c0       	rjmp	.+2      	; 0x952 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     950:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     952:	90 91 57 01 	lds	r25, 0x0157
     956:	91 30       	cpi	r25, 0x01	; 1
     958:	41 f0       	breq	.+16     	; 0x96a <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     95a:	15 de       	rcall	.-982    	; 0x586 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     95c:	80 91 dd 00 	lds	r24, 0x00DD
     960:	81 60       	ori	r24, 0x01	; 1
     962:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     966:	95 dd       	rcall	.-1238   	; 0x492 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     968:	59 d1       	rcall	.+690    	; 0xc1c <USB_ResetInterface>
	}
}
     96a:	28 96       	adiw	r28, 0x08	; 8
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	cf 91       	pop	r28
     978:	df 91       	pop	r29
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret

00000980 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     980:	8f 92       	push	r8
     982:	9f 92       	push	r9
     984:	bf 92       	push	r11
     986:	cf 92       	push	r12
     988:	df 92       	push	r13
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	df 93       	push	r29
     994:	cf 93       	push	r28
     996:	0f 92       	push	r0
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	e8 2e       	mov	r14, r24
     99e:	4b 01       	movw	r8, r22
     9a0:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     9a2:	80 91 aa 00 	lds	r24, 0x00AA
     9a6:	8f 7c       	andi	r24, 0xCF	; 207
     9a8:	80 62       	ori	r24, 0x20	; 32
     9aa:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     9ae:	99 83       	std	Y+1, r25	; 0x01
     9b0:	ee d0       	rcall	.+476    	; 0xb8e <Pipe_WaitUntilReady>
     9b2:	b8 2e       	mov	r11, r24
     9b4:	99 81       	ldd	r25, Y+1	; 0x01
     9b6:	88 23       	and	r24, r24
     9b8:	c1 f5       	brne	.+112    	; 0xa2a <Pipe_Write_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     9ba:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     9bc:	01 15       	cp	r16, r1
     9be:	11 05       	cpc	r17, r1
     9c0:	39 f0       	breq	.+14     	; 0x9d0 <Pipe_Write_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     9c2:	f8 01       	movw	r30, r16
     9c4:	20 81       	ld	r18, Z
     9c6:	31 81       	ldd	r19, Z+1	; 0x01
     9c8:	82 1a       	sub	r8, r18
     9ca:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     9cc:	e2 0e       	add	r14, r18
     9ce:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     9d0:	cc 24       	eor	r12, r12
     9d2:	dd 24       	eor	r13, r13
     9d4:	25 c0       	rjmp	.+74     	; 0xa20 <Pipe_Write_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     9d6:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     9da:	85 fd       	sbrc	r24, 5
     9dc:	16 c0       	rjmp	.+44     	; 0xa0a <Pipe_Write_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     9de:	80 91 a6 00 	lds	r24, 0x00A6
     9e2:	8b 77       	andi	r24, 0x7B	; 123
     9e4:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     9e8:	01 15       	cp	r16, r1
     9ea:	11 05       	cpc	r17, r1
     9ec:	51 f0       	breq	.+20     	; 0xa02 <Pipe_Write_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     9ee:	f8 01       	movw	r30, r16
     9f0:	80 81       	ld	r24, Z
     9f2:	91 81       	ldd	r25, Z+1	; 0x01
     9f4:	8c 0d       	add	r24, r12
     9f6:	9d 1d       	adc	r25, r13
     9f8:	91 83       	std	Z+1, r25	; 0x01
     9fa:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     9fc:	24 e0       	ldi	r18, 0x04	; 4
     9fe:	b2 2e       	mov	r11, r18
     a00:	14 c0       	rjmp	.+40     	; 0xa2a <Pipe_Write_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a02:	c5 d0       	rcall	.+394    	; 0xb8e <Pipe_WaitUntilReady>
     a04:	88 23       	and	r24, r24
     a06:	61 f0       	breq	.+24     	; 0xa20 <Pipe_Write_Stream_LE+0xa0>
     a08:	0f c0       	rjmp	.+30     	; 0xa28 <Pipe_Write_Stream_LE+0xa8>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     a0a:	f7 01       	movw	r30, r14
     a0c:	81 91       	ld	r24, Z+
     a0e:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     a10:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     a14:	08 94       	sec
     a16:	81 08       	sbc	r8, r1
     a18:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     a1a:	08 94       	sec
     a1c:	c1 1c       	adc	r12, r1
     a1e:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     a20:	81 14       	cp	r8, r1
     a22:	91 04       	cpc	r9, r1
     a24:	c1 f6       	brne	.-80     	; 0x9d6 <Pipe_Write_Stream_LE+0x56>
     a26:	01 c0       	rjmp	.+2      	; 0xa2a <Pipe_Write_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a28:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     a2a:	8b 2d       	mov	r24, r11
     a2c:	0f 90       	pop	r0
     a2e:	cf 91       	pop	r28
     a30:	df 91       	pop	r29
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	cf 90       	pop	r12
     a3e:	bf 90       	pop	r11
     a40:	9f 90       	pop	r9
     a42:	8f 90       	pop	r8
     a44:	08 95       	ret

00000a46 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     a46:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     a48:	58 2f       	mov	r21, r24
     a4a:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     a4c:	87 ff       	sbrs	r24, 7
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <Pipe_ConfigurePipe+0xe>
     a50:	80 e1       	ldi	r24, 0x10	; 16
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <Pipe_ConfigurePipe+0x10>
     a54:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     a56:	57 30       	cpi	r21, 0x07	; 7
     a58:	08 f0       	brcs	.+2      	; 0xa5c <Pipe_ConfigurePipe+0x16>
     a5a:	59 c0       	rjmp	.+178    	; 0xb0e <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     a5c:	66 23       	and	r22, r22
     a5e:	09 f4       	brne	.+2      	; 0xa62 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     a60:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a62:	4f 70       	andi	r20, 0x0F	; 15
     a64:	62 95       	swap	r22
     a66:	66 0f       	add	r22, r22
     a68:	66 0f       	add	r22, r22
     a6a:	60 7c       	andi	r22, 0xC0	; 192
     a6c:	64 2b       	or	r22, r20
     a6e:	68 2b       	or	r22, r24
     a70:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a72:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a74:	84 2f       	mov	r24, r20
     a76:	8f 70       	andi	r24, 0x0F	; 15
     a78:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     a7c:	45 17       	cp	r20, r21
     a7e:	a1 f4       	brne	.+40     	; 0xaa8 <Pipe_ConfigurePipe+0x62>
     a80:	88 e0       	ldi	r24, 0x08	; 8
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	03 c0       	rjmp	.+6      	; 0xa8e <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     a88:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a8e:	82 17       	cp	r24, r18
     a90:	93 07       	cpc	r25, r19
     a92:	10 f4       	brcc	.+4      	; 0xa98 <Pipe_ConfigurePipe+0x52>
     a94:	75 30       	cpi	r23, 0x05	; 5
     a96:	c1 f7       	brne	.-16     	; 0xa88 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     a98:	87 2f       	mov	r24, r23
     a9a:	82 95       	swap	r24
     a9c:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a9e:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     aa0:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     aa2:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     aa4:	e0 e0       	ldi	r30, 0x00	; 0
     aa6:	08 c0       	rjmp	.+16     	; 0xab8 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     aa8:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     aac:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     ab0:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     ab4:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     ab8:	81 ff       	sbrs	r24, 1
     aba:	20 c0       	rjmp	.+64     	; 0xafc <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     abc:	90 91 a9 00 	lds	r25, 0x00A9
     ac0:	9e 7f       	andi	r25, 0xFE	; 254
     ac2:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     ac6:	90 91 ab 00 	lds	r25, 0x00AB
     aca:	9d 7f       	andi	r25, 0xFD	; 253
     acc:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     ad0:	90 91 a9 00 	lds	r25, 0x00A9
     ad4:	91 60       	ori	r25, 0x01	; 1
     ad6:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     ada:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     ade:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     ae2:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     ae6:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     aea:	80 91 a9 00 	lds	r24, 0x00A9
     aee:	80 62       	ori	r24, 0x20	; 32
     af0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     af4:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     af8:	87 ff       	sbrs	r24, 7
     afa:	09 c0       	rjmp	.+18     	; 0xb0e <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     afc:	4f 5f       	subi	r20, 0xFF	; 255
     afe:	47 30       	cpi	r20, 0x07	; 7
     b00:	09 f0       	breq	.+2      	; 0xb04 <Pipe_ConfigurePipe+0xbe>
     b02:	b8 cf       	rjmp	.-144    	; 0xa74 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b04:	5f 70       	andi	r21, 0x0F	; 15
     b06:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     b0e:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret

00000b14 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     b22:	e8 2e       	mov	r14, r24
     b24:	e7 01       	movw	r28, r14
     b26:	7e 01       	movw	r14, r28
     b28:	f9 2e       	mov	r15, r25
     b2a:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     b2c:	ff 24       	eor	r15, r15
     b2e:	0d c0       	rjmp	.+26     	; 0xb4a <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
     b30:	88 81       	ld	r24, Y
     b32:	88 23       	and	r24, r24
     b34:	41 f0       	breq	.+16     	; 0xb46 <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     b36:	29 81       	ldd	r18, Y+1	; 0x01
     b38:	3a 81       	ldd	r19, Y+2	; 0x02
     b3a:	6c 81       	ldd	r22, Y+4	; 0x04
     b3c:	4b 81       	ldd	r20, Y+3	; 0x03
     b3e:	0d 81       	ldd	r16, Y+5	; 0x05
     b40:	82 df       	rcall	.-252    	; 0xa46 <Pipe_ConfigurePipe>
     b42:	88 23       	and	r24, r24
     b44:	31 f0       	breq	.+12     	; 0xb52 <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     b46:	f3 94       	inc	r15
     b48:	26 96       	adiw	r28, 0x06	; 6
     b4a:	f1 16       	cp	r15, r17
     b4c:	88 f3       	brcs	.-30     	; 0xb30 <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     b52:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	ff 90       	pop	r15
     b5e:	ef 90       	pop	r14
     b60:	08 95       	ret

00000b62 <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     b62:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	98 2f       	mov	r25, r24
     b6a:	9f 70       	andi	r25, 0x0F	; 15
     b6c:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b70:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b74:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b78:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b7c:	90 91 a9 00 	lds	r25, 0x00A9
     b80:	9e 7f       	andi	r25, 0xFE	; 254
     b82:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b86:	8f 5f       	subi	r24, 0xFF	; 255
     b88:	87 30       	cpi	r24, 0x07	; 7
     b8a:	71 f7       	brne	.-36     	; 0xb68 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b8c:	08 95       	ret

00000b8e <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b8e:	80 91 a2 00 	lds	r24, 0x00A2
     b92:	90 91 a3 00 	lds	r25, 0x00A3
}

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     b96:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b98:	20 91 aa 00 	lds	r18, 0x00AA
     b9c:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b9e:	20 31       	cpi	r18, 0x10	; 16
     ba0:	29 f4       	brne	.+10     	; 0xbac <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ba2:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     ba6:	20 ff       	sbrs	r18, 0
     ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <Pipe_WaitUntilReady+0x26>
     baa:	18 c0       	rjmp	.+48     	; 0xbdc <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     bac:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     bb0:	22 fd       	sbrc	r18, 2
     bb2:	14 c0       	rjmp	.+40     	; 0xbdc <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bb4:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     bb8:	21 fd       	sbrc	r18, 1
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     bbc:	20 91 57 01 	lds	r18, 0x0157
     bc0:	21 30       	cpi	r18, 0x01	; 1
     bc2:	81 f0       	breq	.+32     	; 0xbe4 <Pipe_WaitUntilReady+0x56>
     bc4:	20 91 a2 00 	lds	r18, 0x00A2
     bc8:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     bcc:	28 17       	cp	r18, r24
     bce:	39 07       	cpc	r19, r25
     bd0:	19 f3       	breq	.-58     	; 0xb98 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     bd2:	44 23       	and	r20, r20
     bd4:	49 f0       	breq	.+18     	; 0xbe8 <Pipe_WaitUntilReady+0x5a>
     bd6:	41 50       	subi	r20, 0x01	; 1
     bd8:	c9 01       	movw	r24, r18
     bda:	de cf       	rjmp	.-68     	; 0xb98 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     be8:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     bea:	08 95       	ret

00000bec <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bec:	75 d0       	rcall	.+234    	; 0xcd8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bee:	7c d0       	rcall	.+248    	; 0xce8 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bf0:	e0 ee       	ldi	r30, 0xE0	; 224
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	81 60       	ori	r24, 0x01	; 1
     bf8:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     bfa:	e8 ed       	ldi	r30, 0xD8	; 216
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8f 77       	andi	r24, 0x7F	; 127
     c02:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c04:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     c06:	a7 ed       	ldi	r26, 0xD7	; 215
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	8c 91       	ld	r24, X
     c0c:	8e 7f       	andi	r24, 0xFE	; 254
     c0e:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c10:	80 81       	ld	r24, Z
     c12:	8f 7e       	andi	r24, 0xEF	; 239
     c14:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c16:	10 92 4e 01 	sts	0x014E, r1
}
     c1a:	08 95       	ret

00000c1c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c1c:	5d d0       	rcall	.+186    	; 0xcd8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c1e:	64 d0       	rcall	.+200    	; 0xce8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c20:	80 91 d8 00 	lds	r24, 0x00D8
     c24:	8f 77       	andi	r24, 0x7F	; 127
     c26:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     c2a:	80 91 d8 00 	lds	r24, 0x00D8
     c2e:	80 68       	ori	r24, 0x80	; 128
     c30:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c34:	80 91 d8 00 	lds	r24, 0x00D8
     c38:	8f 7d       	andi	r24, 0xDF	; 223
     c3a:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c3e:	80 91 d7 00 	lds	r24, 0x00D7
     c42:	8f 77       	andi	r24, 0x7F	; 127
     c44:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c48:	8c e0       	ldi	r24, 0x0C	; 12
     c4a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c4c:	8e e0       	ldi	r24, 0x0E	; 14
     c4e:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c50:	09 b4       	in	r0, 0x29	; 41
     c52:	00 fe       	sbrs	r0, 0
     c54:	fd cf       	rjmp	.-6      	; 0xc50 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	80 93 57 01 	sts	0x0157, r24
	USB_Host_ConfigurationNumber = 0;
     c5c:	10 92 4d 01 	sts	0x014D, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c60:	80 e4       	ldi	r24, 0x40	; 64
     c62:	80 93 48 01 	sts	0x0148, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c66:	80 91 d8 00 	lds	r24, 0x00D8
     c6a:	80 64       	ori	r24, 0x40	; 64
     c6c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c70:	80 91 dd 00 	lds	r24, 0x00DD
     c74:	81 60       	ori	r24, 0x01	; 1
     c76:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c7a:	80 91 dd 00 	lds	r24, 0x00DD
     c7e:	84 60       	ori	r24, 0x04	; 4
     c80:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     c84:	80 91 d7 00 	lds	r24, 0x00D7
     c88:	8f 7e       	andi	r24, 0xEF	; 239
     c8a:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c8e:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     c90:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     c92:	80 91 de 00 	lds	r24, 0x00DE
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c9c:	80 91 de 00 	lds	r24, 0x00DE
     ca0:	84 60       	ori	r24, 0x04	; 4
     ca2:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     ca6:	80 91 e0 00 	lds	r24, 0x00E0
     caa:	8e 7f       	andi	r24, 0xFE	; 254
     cac:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     cb0:	80 91 d8 00 	lds	r24, 0x00D8
     cb4:	80 61       	ori	r24, 0x10	; 16
     cb6:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     cba:	08 95       	ret

00000cbc <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     cbc:	e8 ed       	ldi	r30, 0xD8	; 216
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8f 7e       	andi	r24, 0xEF	; 239
     cc4:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     cc6:	e7 ed       	ldi	r30, 0xD7	; 215
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	81 60       	ori	r24, 0x01	; 1
     cce:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	80 93 4e 01 	sts	0x014E, r24

	USB_ResetInterface();
}
     cd6:	a2 cf       	rjmp	.-188    	; 0xc1c <USB_ResetInterface>

00000cd8 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     cd8:	e8 ed       	ldi	r30, 0xD8	; 216
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8c 7f       	andi	r24, 0xFC	; 252
     ce0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ce2:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     ce6:	08 95       	ret

00000ce8 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ce8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     cec:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     cf0:	08 95       	ret

00000cf2 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cf2:	1f 92       	push	r1
     cf4:	0f 92       	push	r0
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	0f 92       	push	r0
     cfa:	0b b6       	in	r0, 0x3b	; 59
     cfc:	0f 92       	push	r0
     cfe:	11 24       	eor	r1, r1
     d00:	2f 93       	push	r18
     d02:	3f 93       	push	r19
     d04:	4f 93       	push	r20
     d06:	5f 93       	push	r21
     d08:	6f 93       	push	r22
     d0a:	7f 93       	push	r23
     d0c:	8f 93       	push	r24
     d0e:	9f 93       	push	r25
     d10:	af 93       	push	r26
     d12:	bf 93       	push	r27
     d14:	ef 93       	push	r30
     d16:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d18:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d1c:	85 ff       	sbrs	r24, 5
     d1e:	0a c0       	rjmp	.+20     	; 0xd34 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d20:	80 91 a0 00 	lds	r24, 0x00A0
     d24:	85 ff       	sbrs	r24, 5
     d26:	06 c0       	rjmp	.+12     	; 0xd34 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d28:	80 91 9f 00 	lds	r24, 0x009F
     d2c:	8f 7d       	andi	r24, 0xDF	; 223
     d2e:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d32:	0c d1       	rcall	.+536    	; 0xf4c <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d34:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d38:	81 ff       	sbrs	r24, 1
     d3a:	15 c0       	rjmp	.+42     	; 0xd66 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d3c:	80 91 a0 00 	lds	r24, 0x00A0
     d40:	81 ff       	sbrs	r24, 1
     d42:	11 c0       	rjmp	.+34     	; 0xd66 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d44:	80 91 9f 00 	lds	r24, 0x009F
     d48:	8d 7f       	andi	r24, 0xFD	; 253
     d4a:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d4e:	80 91 9f 00 	lds	r24, 0x009F
     d52:	8e 7f       	andi	r24, 0xFE	; 254
     d54:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d58:	80 91 a0 00 	lds	r24, 0x00A0
     d5c:	8d 7f       	andi	r24, 0xFD	; 253
     d5e:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d62:	97 db       	rcall	.-2258   	; 0x492 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d64:	5b df       	rcall	.-330    	; 0xc1c <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d66:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d6a:	81 ff       	sbrs	r24, 1
     d6c:	15 c0       	rjmp	.+42     	; 0xd98 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d6e:	80 91 de 00 	lds	r24, 0x00DE
     d72:	81 ff       	sbrs	r24, 1
     d74:	11 c0       	rjmp	.+34     	; 0xd98 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d76:	80 91 df 00 	lds	r24, 0x00DF
     d7a:	8d 7f       	andi	r24, 0xFD	; 253
     d7c:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     d80:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d82:	80 91 dd 00 	lds	r24, 0x00DD
     d86:	81 60       	ori	r24, 0x01	; 1
     d88:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	db db       	rcall	.-2122   	; 0x546 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d90:	80 db       	rcall	.-2304   	; 0x492 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 57 01 	sts	0x0157, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d98:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d9c:	80 ff       	sbrs	r24, 0
     d9e:	17 c0       	rjmp	.+46     	; 0xdce <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     da0:	80 91 de 00 	lds	r24, 0x00DE
     da4:	80 ff       	sbrs	r24, 0
     da6:	13 c0       	rjmp	.+38     	; 0xdce <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     da8:	80 91 df 00 	lds	r24, 0x00DF
     dac:	8e 7f       	andi	r24, 0xFE	; 254
     dae:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     db2:	80 91 de 00 	lds	r24, 0x00DE
     db6:	8e 7f       	andi	r24, 0xFE	; 254
     db8:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     dbc:	64 db       	rcall	.-2360   	; 0x486 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     dbe:	80 91 a0 00 	lds	r24, 0x00A0
     dc2:	82 60       	ori	r24, 0x02	; 2
     dc4:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	80 93 57 01 	sts	0x0157, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     dce:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     dd2:	82 ff       	sbrs	r24, 2
     dd4:	0e c0       	rjmp	.+28     	; 0xdf2 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     dd6:	80 91 de 00 	lds	r24, 0x00DE
     dda:	82 ff       	sbrs	r24, 2
     ddc:	0a c0       	rjmp	.+20     	; 0xdf2 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     dde:	80 91 df 00 	lds	r24, 0x00DF
     de2:	8b 7f       	andi	r24, 0xFB	; 251
     de4:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	cc db       	rcall	.-2152   	; 0x586 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     dee:	51 db       	rcall	.-2398   	; 0x492 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     df0:	15 df       	rcall	.-470    	; 0xc1c <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     df2:	ff 91       	pop	r31
     df4:	ef 91       	pop	r30
     df6:	bf 91       	pop	r27
     df8:	af 91       	pop	r26
     dfa:	9f 91       	pop	r25
     dfc:	8f 91       	pop	r24
     dfe:	7f 91       	pop	r23
     e00:	6f 91       	pop	r22
     e02:	5f 91       	pop	r21
     e04:	4f 91       	pop	r20
     e06:	3f 91       	pop	r19
     e08:	2f 91       	pop	r18
     e0a:	0f 90       	pop	r0
     e0c:	0b be       	out	0x3b, r0	; 59
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e18:	cf 92       	push	r12
     e1a:	df 92       	push	r13
     e1c:	ef 92       	push	r14
     e1e:	ff 92       	push	r15
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	29 97       	sbiw	r28, 0x09	; 9
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	6b 01       	movw	r12, r22
     e3a:	8a 01       	movw	r16, r20
     e3c:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e3e:	90 e8       	ldi	r25, 0x80	; 128
     e40:	90 93 4f 01 	sts	0x014F, r25
     e44:	96 e0       	ldi	r25, 0x06	; 6
     e46:	90 93 50 01 	sts	0x0150, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e50:	90 93 52 01 	sts	0x0152, r25
     e54:	80 93 51 01 	sts	0x0151, r24
     e58:	10 92 54 01 	sts	0x0154, r1
     e5c:	10 92 53 01 	sts	0x0153, r1
     e60:	89 e0       	ldi	r24, 0x09	; 9
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	90 93 56 01 	sts	0x0156, r25
     e68:	80 93 55 01 	sts	0x0155, r24
     e6c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e70:	ce 01       	movw	r24, r28
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	95 d0       	rcall	.+298    	; 0xfa0 <USB_Host_SendControlRequest>
     e76:	88 23       	and	r24, r24
     e78:	b9 f4       	brne	.+46     	; 0xea8 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	f6 01       	movw	r30, r12
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     e84:	e8 16       	cp	r14, r24
     e86:	f9 06       	cpc	r15, r25
     e88:	70 f0       	brcs	.+28     	; 0xea6 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e8a:	90 93 56 01 	sts	0x0156, r25
     e8e:	80 93 55 01 	sts	0x0155, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e92:	c8 01       	movw	r24, r16
     e94:	85 d0       	rcall	.+266    	; 0xfa0 <USB_Host_SendControlRequest>
     e96:	88 23       	and	r24, r24
     e98:	39 f4       	brne	.+14     	; 0xea8 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e9a:	f8 01       	movw	r30, r16
     e9c:	91 81       	ldd	r25, Z+1	; 0x01
     e9e:	92 30       	cpi	r25, 0x02	; 2
     ea0:	19 f0       	breq	.+6      	; 0xea8 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     ea2:	86 e0       	ldi	r24, 0x06	; 6
     ea4:	01 c0       	rjmp	.+2      	; 0xea8 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     ea6:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     ea8:	29 96       	adiw	r28, 0x09	; 9
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	cf 90       	pop	r12
     ec4:	08 95       	ret

00000ec6 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ec6:	af 92       	push	r10
     ec8:	bf 92       	push	r11
     eca:	cf 92       	push	r12
     ecc:	df 92       	push	r13
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	8c 01       	movw	r16, r24
     edc:	eb 01       	movw	r28, r22
     ede:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     ee0:	23 c0       	rjmp	.+70     	; 0xf28 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ee2:	e8 81       	ld	r30, Y
     ee4:	f9 81       	ldd	r31, Y+1	; 0x01
     ee6:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     ee8:	20 81       	ld	r18, Z
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	c7 01       	movw	r24, r14
     eee:	2e 15       	cp	r18, r14
     ef0:	3f 05       	cpc	r19, r15
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <USB_GetNextDescriptorComp+0x30>
     ef4:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     ef6:	e8 0f       	add	r30, r24
     ef8:	f9 1f       	adc	r31, r25
     efa:	f9 83       	std	Y+1, r31	; 0x01
     efc:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     efe:	f8 01       	movw	r30, r16
     f00:	20 81       	ld	r18, Z
     f02:	31 81       	ldd	r19, Z+1	; 0x01
     f04:	28 1b       	sub	r18, r24
     f06:	39 0b       	sbc	r19, r25
     f08:	31 83       	std	Z+1, r19	; 0x01
     f0a:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f0c:	88 81       	ld	r24, Y
     f0e:	99 81       	ldd	r25, Y+1	; 0x01
     f10:	f6 01       	movw	r30, r12
     f12:	09 95       	icall
     f14:	82 30       	cpi	r24, 0x02	; 2
     f16:	41 f0       	breq	.+16     	; 0xf28 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	69 f4       	brne	.+26     	; 0xf36 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
     f1c:	a8 82       	st	Y, r10
     f1e:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
     f20:	f8 01       	movw	r30, r16
     f22:	f1 82       	std	Z+1, r15	; 0x01
     f24:	e0 82       	st	Z, r14
     f26:	07 c0       	rjmp	.+14     	; 0xf36 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     f28:	f8 01       	movw	r30, r16
     f2a:	e0 80       	ld	r14, Z
     f2c:	f1 80       	ldd	r15, Z+1	; 0x01
     f2e:	e1 14       	cp	r14, r1
     f30:	f1 04       	cpc	r15, r1
     f32:	b9 f6       	brne	.-82     	; 0xee2 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f34:	82 e0       	ldi	r24, 0x02	; 2
}
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	bf 90       	pop	r11
     f48:	af 90       	pop	r10
     f4a:	08 95       	ret

00000f4c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f4c:	08 95       	ret

00000f4e <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
     f56:	c8 ee       	ldi	r28, 0xE8	; 232
     f58:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f5a:	07 c0       	rjmp	.+14     	; 0xf6a <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	92 db       	rcall	.-2268   	; 0x684 <USB_Host_WaitMS>
     f60:	88 23       	and	r24, r24
     f62:	d1 f4       	brne	.+52     	; 0xf98 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f64:	20 97       	sbiw	r28, 0x00	; 0
     f66:	b9 f0       	breq	.+46     	; 0xf96 <USB_Host_WaitForIOS+0x48>
     f68:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f6a:	11 23       	and	r17, r17
     f6c:	29 f4       	brne	.+10     	; 0xf78 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f6e:	80 91 a6 00 	lds	r24, 0x00A6
     f72:	83 ff       	sbrs	r24, 3
     f74:	f3 cf       	rjmp	.-26     	; 0xf5c <USB_Host_WaitForIOS+0xe>
     f76:	0d c0       	rjmp	.+26     	; 0xf92 <USB_Host_WaitForIOS+0x44>
     f78:	11 30       	cpi	r17, 0x01	; 1
     f7a:	29 f4       	brne	.+10     	; 0xf86 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f7c:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f80:	80 ff       	sbrs	r24, 0
     f82:	ec cf       	rjmp	.-40     	; 0xf5c <USB_Host_WaitForIOS+0xe>
     f84:	06 c0       	rjmp	.+12     	; 0xf92 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f86:	12 30       	cpi	r17, 0x02	; 2
     f88:	49 f7       	brne	.-46     	; 0xf5c <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f8a:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f8e:	82 ff       	sbrs	r24, 2
     f90:	e5 cf       	rjmp	.-54     	; 0xf5c <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f96:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	08 95       	ret

00000fa0 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     fa0:	ef 92       	push	r14
     fa2:	ff 92       	push	r15
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     fae:	e0 90 9e 00 	lds	r14, 0x009E
     fb2:	ff 24       	eor	r15, r15
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	e8 22       	and	r14, r24
     fb8:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     fba:	c0 91 55 01 	lds	r28, 0x0155
     fbe:	d0 91 56 01 	lds	r29, 0x0156
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fc2:	80 91 9e 00 	lds	r24, 0x009E
     fc6:	81 60       	ori	r24, 0x01	; 1
     fc8:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	5a db       	rcall	.-2380   	; 0x684 <USB_Host_WaitMS>
     fd0:	88 23       	and	r24, r24
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <USB_Host_SendControlRequest+0x36>
     fd4:	cb c0       	rjmp	.+406    	; 0x116c <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fd6:	80 91 aa 00 	lds	r24, 0x00AA
     fda:	8f 7c       	andi	r24, 0xCF	; 207
     fdc:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fe0:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     fe4:	80 91 a6 00 	lds	r24, 0x00A6
     fe8:	8f 7e       	andi	r24, 0xEF	; 239
     fea:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fee:	80 91 a9 00 	lds	r24, 0x00A9
     ff2:	8f 7b       	andi	r24, 0xBF	; 191
     ff4:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     ff8:	ef e4       	ldi	r30, 0x4F	; 79
     ffa:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     ffc:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     ffe:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	e7 35       	cpi	r30, 0x57	; 87
    1006:	f8 07       	cpc	r31, r24
    1008:	c9 f7       	brne	.-14     	; 0xffc <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    100a:	80 91 a6 00 	lds	r24, 0x00A6
    100e:	87 77       	andi	r24, 0x77	; 119
    1010:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	9b df       	rcall	.-202    	; 0xf4e <USB_Host_WaitForIOS>
    1018:	88 23       	and	r24, r24
    101a:	09 f0       	breq	.+2      	; 0x101e <USB_Host_SendControlRequest+0x7e>
    101c:	a7 c0       	rjmp	.+334    	; 0x116c <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    101e:	80 91 a9 00 	lds	r24, 0x00A9
    1022:	80 64       	ori	r24, 0x40	; 64
    1024:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	2c db       	rcall	.-2472   	; 0x684 <USB_Host_WaitMS>
    102c:	88 23       	and	r24, r24
    102e:	09 f0       	breq	.+2      	; 0x1032 <USB_Host_SendControlRequest+0x92>
    1030:	9d c0       	rjmp	.+314    	; 0x116c <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1032:	80 91 4f 01 	lds	r24, 0x014F
    1036:	87 ff       	sbrs	r24, 7
    1038:	4f c0       	rjmp	.+158    	; 0x10d8 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    103a:	80 91 aa 00 	lds	r24, 0x00AA
    103e:	8f 7c       	andi	r24, 0xCF	; 207
    1040:	80 61       	ori	r24, 0x10	; 16
    1042:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1046:	01 15       	cp	r16, r1
    1048:	11 05       	cpc	r17, r1
    104a:	61 f5       	brne	.+88     	; 0x10a4 <USB_Host_SendControlRequest+0x104>
    104c:	2d c0       	rjmp	.+90     	; 0x10a8 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    104e:	80 91 a9 00 	lds	r24, 0x00A9
    1052:	8f 7b       	andi	r24, 0xBF	; 191
    1054:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	79 df       	rcall	.-270    	; 0xf4e <USB_Host_WaitForIOS>
    105c:	88 23       	and	r24, r24
    105e:	09 f0       	breq	.+2      	; 0x1062 <USB_Host_SendControlRequest+0xc2>
    1060:	85 c0       	rjmp	.+266    	; 0x116c <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1062:	80 91 f6 00 	lds	r24, 0x00F6
    1066:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	49 f4       	brne	.+18     	; 0x1080 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    106e:	c0 e0       	ldi	r28, 0x00	; 0
    1070:	d0 e0       	ldi	r29, 0x00	; 0
    1072:	06 c0       	rjmp	.+12     	; 0x1080 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1074:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1078:	f8 01       	movw	r30, r16
    107a:	81 93       	st	Z+, r24
    107c:	8f 01       	movw	r16, r30
					DataLen--;
    107e:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1080:	80 91 f6 00 	lds	r24, 0x00F6
    1084:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	11 f0       	breq	.+4      	; 0x1090 <USB_Host_SendControlRequest+0xf0>
    108c:	20 97       	sbiw	r28, 0x00	; 0
    108e:	91 f7       	brne	.-28     	; 0x1074 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1090:	80 91 a9 00 	lds	r24, 0x00A9
    1094:	80 64       	ori	r24, 0x40	; 64
    1096:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    109a:	80 91 a6 00 	lds	r24, 0x00A6
    109e:	8e 77       	andi	r24, 0x7E	; 126
    10a0:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    10a4:	20 97       	sbiw	r28, 0x00	; 0
    10a6:	99 f6       	brne	.-90     	; 0x104e <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10a8:	80 91 aa 00 	lds	r24, 0x00AA
    10ac:	8f 7c       	andi	r24, 0xCF	; 207
    10ae:	80 62       	ori	r24, 0x20	; 32
    10b0:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10b4:	80 91 a9 00 	lds	r24, 0x00A9
    10b8:	8f 7b       	andi	r24, 0xBF	; 191
    10ba:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	46 df       	rcall	.-372    	; 0xf4e <USB_Host_WaitForIOS>
    10c2:	88 23       	and	r24, r24
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <USB_Host_SendControlRequest+0x128>
    10c6:	52 c0       	rjmp	.+164    	; 0x116c <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10c8:	80 91 a6 00 	lds	r24, 0x00A6
    10cc:	8b 77       	andi	r24, 0x7B	; 123
    10ce:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	3c df       	rcall	.-392    	; 0xf4e <USB_Host_WaitForIOS>
    10d6:	4a c0       	rjmp	.+148    	; 0x116c <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    10d8:	01 15       	cp	r16, r1
    10da:	11 05       	cpc	r17, r1
    10dc:	99 f1       	breq	.+102    	; 0x1144 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10de:	80 91 aa 00 	lds	r24, 0x00AA
    10e2:	8f 7c       	andi	r24, 0xCF	; 207
    10e4:	80 62       	ori	r24, 0x20	; 32
    10e6:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10ea:	80 91 a9 00 	lds	r24, 0x00A9
    10ee:	8f 7b       	andi	r24, 0xBF	; 191
    10f0:	80 93 a9 00 	sts	0x00A9, r24
    10f4:	1c c0       	rjmp	.+56     	; 0x112e <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	2a df       	rcall	.-428    	; 0xf4e <USB_Host_WaitForIOS>
    10fa:	88 23       	and	r24, r24
    10fc:	b9 f5       	brne	.+110    	; 0x116c <USB_Host_SendControlRequest+0x1cc>
    10fe:	f8 01       	movw	r30, r16
    1100:	06 c0       	rjmp	.+12     	; 0x110e <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1102:	81 91       	ld	r24, Z+
    1104:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1106:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    110a:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    110c:	59 f0       	breq	.+22     	; 0x1124 <USB_Host_SendControlRequest+0x184>
    110e:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1110:	20 91 f6 00 	lds	r18, 0x00F6
    1114:	30 91 f7 00 	lds	r19, 0x00F7
    1118:	80 91 48 01 	lds	r24, 0x0148
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	28 17       	cp	r18, r24
    1120:	39 07       	cpc	r19, r25
    1122:	78 f3       	brcs	.-34     	; 0x1102 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1124:	80 91 a6 00 	lds	r24, 0x00A6
    1128:	8b 77       	andi	r24, 0x7B	; 123
    112a:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    112e:	20 97       	sbiw	r28, 0x00	; 0
    1130:	11 f7       	brne	.-60     	; 0x10f6 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	0c df       	rcall	.-488    	; 0xf4e <USB_Host_WaitForIOS>
    1136:	88 23       	and	r24, r24
    1138:	c9 f4       	brne	.+50     	; 0x116c <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    113a:	80 91 a9 00 	lds	r24, 0x00A9
    113e:	80 64       	ori	r24, 0x40	; 64
    1140:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1144:	80 91 aa 00 	lds	r24, 0x00AA
    1148:	8f 7c       	andi	r24, 0xCF	; 207
    114a:	80 61       	ori	r24, 0x10	; 16
    114c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1150:	80 91 a9 00 	lds	r24, 0x00A9
    1154:	8f 7b       	andi	r24, 0xBF	; 191
    1156:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	f8 de       	rcall	.-528    	; 0xf4e <USB_Host_WaitForIOS>
    115e:	88 23       	and	r24, r24
    1160:	29 f4       	brne	.+10     	; 0x116c <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1162:	90 91 a6 00 	lds	r25, 0x00A6
    1166:	9e 77       	andi	r25, 0x7E	; 126
    1168:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    116c:	90 91 a9 00 	lds	r25, 0x00A9
    1170:	90 64       	ori	r25, 0x40	; 64
    1172:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1176:	e1 14       	cp	r14, r1
    1178:	f1 04       	cpc	r15, r1
    117a:	29 f4       	brne	.+10     	; 0x1186 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    117c:	90 91 9e 00 	lds	r25, 0x009E
    1180:	9e 7f       	andi	r25, 0xFE	; 254
    1182:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    118c:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	08 95       	ret

0000119e <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    119e:	1f 93       	push	r17
    11a0:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    11a2:	10 92 4f 01 	sts	0x014F, r1
    11a6:	89 e0       	ldi	r24, 0x09	; 9
    11a8:	80 93 50 01 	sts	0x0150, r24
    11ac:	10 93 51 01 	sts	0x0151, r17
    11b0:	10 92 52 01 	sts	0x0152, r1
    11b4:	10 92 54 01 	sts	0x0154, r1
    11b8:	10 92 53 01 	sts	0x0153, r1
    11bc:	10 92 56 01 	sts	0x0156, r1
    11c0:	10 92 55 01 	sts	0x0155, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11c4:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	e9 de       	rcall	.-558    	; 0xfa0 <USB_Host_SendControlRequest>
    11ce:	88 23       	and	r24, r24
    11d0:	49 f4       	brne	.+18     	; 0x11e4 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11d2:	10 93 4d 01 	sts	0x014D, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    11d6:	11 23       	and	r17, r17
    11d8:	11 f0       	breq	.+4      	; 0x11de <USB_Host_SetDeviceConfiguration+0x40>
    11da:	9b e0       	ldi	r25, 0x0B	; 11
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <USB_Host_SetDeviceConfiguration+0x42>
    11de:	9a e0       	ldi	r25, 0x0A	; 10
    11e0:	90 93 57 01 	sts	0x0157, r25
	}

	return ErrorCode;
}
    11e4:	1f 91       	pop	r17
    11e6:	08 95       	ret

000011e8 <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    11e8:	ef e4       	ldi	r30, 0x4F	; 79
    11ea:	f1 e0       	ldi	r31, 0x01	; 1
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	90 93 4f 01 	sts	0x014F, r25
    11f2:	9b e0       	ldi	r25, 0x0B	; 11
    11f4:	90 93 50 01 	sts	0x0150, r25
    11f8:	60 93 51 01 	sts	0x0151, r22
    11fc:	13 82       	std	Z+3, r1	; 0x03
    11fe:	80 93 53 01 	sts	0x0153, r24
    1202:	15 82       	std	Z+5, r1	; 0x05
    1204:	10 92 56 01 	sts	0x0156, r1
    1208:	10 92 55 01 	sts	0x0155, r1
    120c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
}
    1214:	c5 ce       	rjmp	.-630    	; 0xfa0 <USB_Host_SendControlRequest>

00001216 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1216:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1218:	10 91 a7 00 	lds	r17, 0x00A7
    121c:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    121e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1222:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1226:	83 da       	rcall	.-2810   	; 0x72e <USB_Host_ProcessNextHostState>
    1228:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    122c:	1f 91       	pop	r17
    122e:	08 95       	ret

00001230 <DCOMP_PRNT_Host_NextPRNTInterface>:

	return PRNT_ENUMERROR_NoError;
}

static uint8_t DCOMP_PRNT_Host_NextPRNTInterface(void* CurrentDescriptor)
{
    1230:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1232:	81 81       	ldd	r24, Z+1	; 0x01
    1234:	84 30       	cpi	r24, 0x04	; 4
    1236:	49 f4       	brne	.+18     	; 0x124a <DCOMP_PRNT_Host_NextPRNTInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
    1238:	85 81       	ldd	r24, Z+5	; 0x05
    123a:	87 30       	cpi	r24, 0x07	; 7
    123c:	31 f4       	brne	.+12     	; 0x124a <DCOMP_PRNT_Host_NextPRNTInterface+0x1a>
    123e:	86 81       	ldd	r24, Z+6	; 0x06
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	19 f4       	brne	.+6      	; 0x124a <DCOMP_PRNT_Host_NextPRNTInterface+0x1a>
		    (Interface->SubClass == PRNT_CSCP_PrinterSubclass) &&
    1244:	87 81       	ldd	r24, Z+7	; 0x07
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	11 f0       	breq	.+4      	; 0x124e <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	08 95       	ret

		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
		    (Interface->SubClass == PRNT_CSCP_PrinterSubclass) &&
		    (Interface->Protocol == PRNT_CSCP_BidirectionalProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    124e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1250:	08 95       	ret

00001252 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint>:

static uint8_t DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint(void* CurrentDescriptor)
{
    1252:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1254:	81 81       	ldd	r24, Z+1	; 0x01
    1256:	85 30       	cpi	r24, 0x05	; 5
    1258:	29 f4       	brne	.+10     	; 0x1264 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    125a:	83 81       	ldd	r24, Z+3	; 0x03
    125c:	83 70       	andi	r24, 0x03	; 3

		if (EndpointType == EP_TYPE_BULK)
    125e:	82 30       	cpi	r24, 0x02	; 2
    1260:	19 f4       	brne	.+6      	; 0x1268 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x16>
    1262:	04 c0       	rjmp	.+8      	; 0x126c <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1264:	84 30       	cpi	r24, 0x04	; 4
    1266:	21 f0       	breq	.+8      	; 0x1270 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	08 95       	ret
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (EndpointType == EP_TYPE_BULK)
		  return DESCRIPTOR_SEARCH_Found;
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1270:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1272:	08 95       	ret

00001274 <PRNT_Host_ConfigurePipes>:
#include "PrinterClassHost.h"

uint8_t PRNT_Host_ConfigurePipes(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
							     void* ConfigDescriptorData)
{
    1274:	6f 92       	push	r6
    1276:	7f 92       	push	r7
    1278:	8f 92       	push	r8
    127a:	9f 92       	push	r9
    127c:	af 92       	push	r10
    127e:	bf 92       	push	r11
    1280:	cf 92       	push	r12
    1282:	df 92       	push	r13
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <PRNT_Host_ConfigurePipes+0x1e>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <PRNT_Host_ConfigurePipes+0x20>
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	8c 01       	movw	r16, r24
    129a:	7a 83       	std	Y+2, r23	; 0x02
    129c:	69 83       	std	Y+1, r22	; 0x01
    129e:	5c 83       	std	Y+4, r21	; 0x04
    12a0:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;
	USB_Descriptor_Interface_t* PrinterInterface = NULL;

	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));
    12a2:	0c 96       	adiw	r24, 0x0c	; 12
    12a4:	fc 01       	movw	r30, r24
    12a6:	83 e0       	ldi	r24, 0x03	; 3
    12a8:	df 01       	movw	r26, r30
    12aa:	1d 92       	st	X+, r1
    12ac:	8a 95       	dec	r24
    12ae:	e9 f7       	brne	.-6      	; 0x12aa <PRNT_Host_ConfigurePipes+0x36>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    12b0:	eb 81       	ldd	r30, Y+3	; 0x03
    12b2:	fc 81       	ldd	r31, Y+4	; 0x04
    12b4:	81 81       	ldd	r24, Z+1	; 0x01
    12b6:	82 30       	cpi	r24, 0x02	; 2
    12b8:	09 f0       	breq	.+2      	; 0x12bc <PRNT_Host_ConfigurePipes+0x48>
    12ba:	6b c0       	rjmp	.+214    	; 0x1392 <PRNT_Host_ConfigurePipes+0x11e>
    12bc:	aa 24       	eor	r10, r10
    12be:	bb 24       	eor	r11, r11
    12c0:	cc 24       	eor	r12, r12
    12c2:	dd 24       	eor	r13, r13
    12c4:	ee 24       	eor	r14, r14
    12c6:	ff 24       	eor	r15, r15
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(PrinterInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12c8:	83 e0       	ldi	r24, 0x03	; 3
    12ca:	68 2e       	mov	r6, r24
    12cc:	71 2c       	mov	r7, r1
    12ce:	6c 0e       	add	r6, r28
    12d0:	7d 1e       	adc	r7, r29
    12d2:	4e 01       	movw	r8, r28
    12d4:	08 94       	sec
    12d6:	81 1c       	adc	r8, r1
    12d8:	91 1c       	adc	r9, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(PrinterInterface) ||
    12da:	a1 14       	cp	r10, r1
    12dc:	b1 04       	cpc	r11, r1
    12de:	39 f0       	breq	.+14     	; 0x12ee <PRNT_Host_ConfigurePipes+0x7a>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12e0:	c4 01       	movw	r24, r8
    12e2:	b3 01       	movw	r22, r6
    12e4:	49 e2       	ldi	r20, 0x29	; 41
    12e6:	59 e0       	ldi	r21, 0x09	; 9
    12e8:	ee dd       	rcall	.-1060   	; 0xec6 <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(PrinterInterface) ||
    12ea:	88 23       	and	r24, r24
    12ec:	79 f0       	breq	.+30     	; 0x130c <PRNT_Host_ConfigurePipes+0x98>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12ee:	c4 01       	movw	r24, r8
    12f0:	b3 01       	movw	r22, r6
    12f2:	48 e1       	ldi	r20, 0x18	; 24
    12f4:	59 e0       	ldi	r21, 0x09	; 9
    12f6:	e7 dd       	rcall	.-1074   	; 0xec6 <USB_GetNextDescriptorComp>
    12f8:	88 23       	and	r24, r24
    12fa:	09 f0       	breq	.+2      	; 0x12fe <PRNT_Host_ConfigurePipes+0x8a>
    12fc:	4c c0       	rjmp	.+152    	; 0x1396 <PRNT_Host_ConfigurePipes+0x122>
			                              DCOMP_PRNT_Host_NextPRNTInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return PRNT_ENUMERROR_NoCompatibleInterfaceFound;
			}

			PrinterInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    12fe:	ab 80       	ldd	r10, Y+3	; 0x03
    1300:	bc 80       	ldd	r11, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1302:	cc 24       	eor	r12, r12
    1304:	dd 24       	eor	r13, r13
			                              DCOMP_PRNT_Host_NextPRNTInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return PRNT_ENUMERROR_NoCompatibleInterfaceFound;
			}

			PrinterInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1306:	ee 24       	eor	r14, r14
    1308:	ff 24       	eor	r15, r15
    130a:	e7 cf       	rjmp	.-50     	; 0x12da <PRNT_Host_ConfigurePipes+0x66>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    130c:	eb 81       	ldd	r30, Y+3	; 0x03
    130e:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1310:	82 81       	ldd	r24, Z+2	; 0x02
    1312:	87 ff       	sbrs	r24, 7
    1314:	02 c0       	rjmp	.+4      	; 0x131a <PRNT_Host_ConfigurePipes+0xa6>
		  DataINEndpoint  = EndpointData;
    1316:	7f 01       	movw	r14, r30
    1318:	01 c0       	rjmp	.+2      	; 0x131c <PRNT_Host_ConfigurePipes+0xa8>
		else
		  DataOUTEndpoint = EndpointData;
    131a:	6f 01       	movw	r12, r30
	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    131c:	e1 14       	cp	r14, r1
    131e:	f1 04       	cpc	r15, r1
    1320:	e1 f2       	breq	.-72     	; 0x12da <PRNT_Host_ConfigurePipes+0x66>
    1322:	c1 14       	cp	r12, r1
    1324:	d1 04       	cpc	r13, r1
    1326:	c9 f2       	breq	.-78     	; 0x12da <PRNT_Host_ConfigurePipes+0x66>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	PRNTInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1328:	f7 01       	movw	r30, r14
    132a:	84 81       	ldd	r24, Z+4	; 0x04
    132c:	95 81       	ldd	r25, Z+5	; 0x05
    132e:	d8 01       	movw	r26, r16
    1330:	12 96       	adiw	r26, 0x02	; 2
    1332:	9c 93       	st	X, r25
    1334:	8e 93       	st	-X, r24
    1336:	11 97       	sbiw	r26, 0x01	; 1
	PRNTInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	13 96       	adiw	r26, 0x03	; 3
    133c:	8c 93       	st	X, r24
    133e:	13 97       	sbiw	r26, 0x03	; 3
	PRNTInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    1340:	22 e0       	ldi	r18, 0x02	; 2
    1342:	14 96       	adiw	r26, 0x04	; 4
    1344:	2c 93       	st	X, r18
    1346:	14 97       	sbiw	r26, 0x04	; 4

	PRNTInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1348:	f6 01       	movw	r30, r12
    134a:	84 81       	ldd	r24, Z+4	; 0x04
    134c:	95 81       	ldd	r25, Z+5	; 0x05
    134e:	18 96       	adiw	r26, 0x08	; 8
    1350:	9c 93       	st	X, r25
    1352:	8e 93       	st	-X, r24
    1354:	17 97       	sbiw	r26, 0x07	; 7
	PRNTInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1356:	82 81       	ldd	r24, Z+2	; 0x02
    1358:	19 96       	adiw	r26, 0x09	; 9
    135a:	8c 93       	st	X, r24
    135c:	19 97       	sbiw	r26, 0x09	; 9
	PRNTInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    135e:	1a 96       	adiw	r26, 0x0a	; 10
    1360:	2c 93       	st	X, r18

	if (!(Pipe_ConfigurePipeTable(&PRNTInterfaceInfo->Config.DataINPipe, 1)))
    1362:	c8 01       	movw	r24, r16
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	d6 db       	rcall	.-2132   	; 0xb14 <Pipe_ConfigurePipeTable>
    1368:	88 23       	and	r24, r24
    136a:	b9 f0       	breq	.+46     	; 0x139a <PRNT_Host_ConfigurePipes+0x126>
	  return false;

	if (!(Pipe_ConfigurePipeTable(&PRNTInterfaceInfo->Config.DataOUTPipe, 1)))
    136c:	c8 01       	movw	r24, r16
    136e:	06 96       	adiw	r24, 0x06	; 6
    1370:	61 e0       	ldi	r22, 0x01	; 1
    1372:	d0 db       	rcall	.-2144   	; 0xb14 <Pipe_ConfigurePipeTable>
    1374:	88 23       	and	r24, r24
    1376:	89 f0       	breq	.+34     	; 0x139a <PRNT_Host_ConfigurePipes+0x126>
	  return false;

	PRNTInterfaceInfo->State.InterfaceNumber  = PrinterInterface->InterfaceNumber;
    1378:	d5 01       	movw	r26, r10
    137a:	12 96       	adiw	r26, 0x02	; 2
    137c:	8c 91       	ld	r24, X
    137e:	12 97       	sbiw	r26, 0x02	; 2
    1380:	f8 01       	movw	r30, r16
    1382:	85 87       	std	Z+13, r24	; 0x0d
	PRNTInterfaceInfo->State.AlternateSetting = PrinterInterface->AlternateSetting;
    1384:	13 96       	adiw	r26, 0x03	; 3
    1386:	8c 91       	ld	r24, X
    1388:	13 97       	sbiw	r26, 0x03	; 3
    138a:	86 87       	std	Z+14, r24	; 0x0e
	PRNTInterfaceInfo->State.IsActive = true;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	84 87       	std	Z+12, r24	; 0x0c
    1390:	04 c0       	rjmp	.+8      	; 0x139a <PRNT_Host_ConfigurePipes+0x126>
	USB_Descriptor_Interface_t* PrinterInterface = NULL;

	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	03 c0       	rjmp	.+6      	; 0x139c <PRNT_Host_ConfigurePipes+0x128>
		                              DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_PRNT_Host_NextPRNTInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return PRNT_ENUMERROR_NoCompatibleInterfaceFound;
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	01 c0       	rjmp	.+2      	; 0x139c <PRNT_Host_ConfigurePipes+0x128>

	if (!(Pipe_ConfigurePipeTable(&PRNTInterfaceInfo->Config.DataINPipe, 1)))
	  return false;

	if (!(Pipe_ConfigurePipeTable(&PRNTInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;
    139a:	80 e0       	ldi	r24, 0x00	; 0
	PRNTInterfaceInfo->State.InterfaceNumber  = PrinterInterface->InterfaceNumber;
	PRNTInterfaceInfo->State.AlternateSetting = PrinterInterface->AlternateSetting;
	PRNTInterfaceInfo->State.IsActive = true;

	return PRNT_ENUMERROR_NoError;
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	ff 90       	pop	r15
    13ae:	ef 90       	pop	r14
    13b0:	df 90       	pop	r13
    13b2:	cf 90       	pop	r12
    13b4:	bf 90       	pop	r11
    13b6:	af 90       	pop	r10
    13b8:	9f 90       	pop	r9
    13ba:	8f 90       	pop	r8
    13bc:	7f 90       	pop	r7
    13be:	6f 90       	pop	r6
    13c0:	08 95       	ret

000013c2 <PRNT_Host_SetBidirectionalMode>:
	PRNT_Host_Flush(PRNTInterfaceInfo);
	#endif
}

uint8_t PRNT_Host_SetBidirectionalMode(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
    13c2:	fc 01       	movw	r30, r24
	if (PRNTInterfaceInfo->State.AlternateSetting)
    13c4:	66 85       	ldd	r22, Z+14	; 0x0e
    13c6:	66 23       	and	r22, r22
    13c8:	11 f0       	breq	.+4      	; 0x13ce <PRNT_Host_SetBidirectionalMode+0xc>
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_SetInterfaceAltSetting(PRNTInterfaceInfo->State.InterfaceNumber,
    13ca:	85 85       	ldd	r24, Z+13	; 0x0d
    13cc:	0d cf       	rjmp	.-486    	; 0x11e8 <USB_Host_SetInterfaceAltSetting>
		{
			return ErrorCode;
		}
	}

	return HOST_SENDCONTROL_Successful;
    13ce:	80 e0       	ldi	r24, 0x00	; 0
}
    13d0:	08 95       	ret

000013d2 <PRNT_Host_Flush>:
	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(NULL);
}

uint8_t PRNT_Host_Flush(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
    13d2:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    13d4:	80 91 57 01 	lds	r24, 0x0157
    13d8:	8b 30       	cpi	r24, 0x0B	; 11
    13da:	51 f5       	brne	.+84     	; 0x1430 <PRNT_Host_Flush+0x5e>
    13dc:	84 85       	ldd	r24, Z+12	; 0x0c
    13de:	88 23       	and	r24, r24
    13e0:	39 f1       	breq	.+78     	; 0x1430 <PRNT_Host_Flush+0x5e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13e2:	86 81       	ldd	r24, Z+6	; 0x06
    13e4:	8f 70       	andi	r24, 0x0F	; 15
    13e6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13ea:	80 91 a9 00 	lds	r24, 0x00A9
    13ee:	8f 7b       	andi	r24, 0xBF	; 191
    13f0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13f4:	80 91 f6 00 	lds	r24, 0x00F6
    13f8:	90 91 f7 00 	lds	r25, 0x00F7
	uint8_t ErrorCode;

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	d1 f0       	breq	.+52     	; 0x1434 <PRNT_Host_Flush+0x62>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1400:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1404:	80 91 a6 00 	lds	r24, 0x00A6
    1408:	8b 77       	andi	r24, 0x7B	; 123
    140a:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    140e:	95 fd       	sbrc	r25, 5
    1410:	08 c0       	rjmp	.+16     	; 0x1422 <PRNT_Host_Flush+0x50>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    1412:	bd db       	rcall	.-2182   	; 0xb8e <Pipe_WaitUntilReady>
    1414:	88 23       	and	r24, r24
    1416:	79 f4       	brne	.+30     	; 0x1436 <PRNT_Host_Flush+0x64>
    1418:	80 91 a6 00 	lds	r24, 0x00A6
    141c:	8b 77       	andi	r24, 0x7B	; 123
    141e:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1422:	80 91 a9 00 	lds	r24, 0x00A9
    1426:	80 64       	ori	r24, 0x40	; 64
    1428:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearOUT();
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	08 95       	ret
}

uint8_t PRNT_Host_Flush(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1430:	82 e0       	ldi	r24, 0x02	; 2
    1432:	08 95       	ret

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
	  return PIPE_READYWAIT_NoError;
    1434:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
}
    1436:	08 95       	ret

00001438 <PRNT_Host_USBTask>:
	return DESCRIPTOR_SEARCH_NotFound;
}

void PRNT_Host_USBTask(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    1438:	20 91 57 01 	lds	r18, 0x0157
    143c:	2b 30       	cpi	r18, 0x0B	; 11
    143e:	29 f4       	brne	.+10     	; 0x144a <PRNT_Host_USBTask+0x12>
    1440:	fc 01       	movw	r30, r24
    1442:	24 85       	ldd	r18, Z+12	; 0x0c
    1444:	22 23       	and	r18, r18
    1446:	09 f0       	breq	.+2      	; 0x144a <PRNT_Host_USBTask+0x12>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	PRNT_Host_Flush(PRNTInterfaceInfo);
    1448:	c4 cf       	rjmp	.-120    	; 0x13d2 <PRNT_Host_Flush>
    144a:	08 95       	ret

0000144c <PRNT_Host_SendData>:
}

uint8_t PRNT_Host_SendData(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                           const void* Buffer,
                           const uint16_t Length)
{
    144c:	fc 01       	movw	r30, r24
    144e:	cb 01       	movw	r24, r22
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    1450:	20 91 57 01 	lds	r18, 0x0157
    1454:	2b 30       	cpi	r18, 0x0B	; 11
    1456:	f1 f4       	brne	.+60     	; 0x1494 <PRNT_Host_SendData+0x48>
    1458:	24 85       	ldd	r18, Z+12	; 0x0c
    145a:	22 23       	and	r18, r18
    145c:	e9 f0       	breq	.+58     	; 0x1498 <PRNT_Host_SendData+0x4c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    145e:	26 81       	ldd	r18, Z+6	; 0x06
    1460:	2f 70       	andi	r18, 0x0F	; 15
    1462:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1466:	20 91 a9 00 	lds	r18, 0x00A9
    146a:	2f 7b       	andi	r18, 0xBF	; 191
    146c:	20 93 a9 00 	sts	0x00A9, r18
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(Buffer, Length, NULL)) != PIPE_RWSTREAM_NoError)
    1470:	ba 01       	movw	r22, r20
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	84 da       	rcall	.-2808   	; 0x980 <Pipe_Write_Stream_LE>
    1478:	88 23       	and	r24, r24
    147a:	79 f4       	brne	.+30     	; 0x149a <PRNT_Host_SendData+0x4e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    147c:	80 91 a6 00 	lds	r24, 0x00A6
    1480:	8b 77       	andi	r24, 0x7B	; 123
    1482:	80 93 a6 00 	sts	0x00A6, r24
	  return ErrorCode;

	Pipe_ClearOUT();

	ErrorCode = Pipe_WaitUntilReady();
    1486:	83 db       	rcall	.-2298   	; 0xb8e <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1488:	90 91 a9 00 	lds	r25, 0x00A9
    148c:	90 64       	ori	r25, 0x40	; 64
    148e:	90 93 a9 00 	sts	0x00A9, r25

	Pipe_Freeze();

	return ErrorCode;
    1492:	08 95       	ret
                           const uint16_t Length)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	08 95       	ret
    1498:	82 e0       	ldi	r24, 0x02	; 2
	ErrorCode = Pipe_WaitUntilReady();

	Pipe_Freeze();

	return ErrorCode;
}
    149a:	08 95       	ret

0000149c <PRNT_Host_GetDeviceID>:
}

uint8_t PRNT_Host_GetDeviceID(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                              char* const DeviceIDString,
                              const uint16_t BufferSize)
{
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <PRNT_Host_GetDeviceID+0x10>
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	8b 01       	movw	r16, r22
    14b2:	7a 01       	movw	r14, r20
	uint8_t  ErrorCode;
	uint16_t DeviceIDStringLength = 0;
    14b4:	1a 82       	std	Y+2, r1	; 0x02
    14b6:	19 82       	std	Y+1, r1	; 0x01

	USB_ControlRequest = (USB_Request_Header_t)
    14b8:	fc 01       	movw	r30, r24
    14ba:	85 85       	ldd	r24, Z+13	; 0x0d
    14bc:	91 ea       	ldi	r25, 0xA1	; 161
    14be:	90 93 4f 01 	sts	0x014F, r25
    14c2:	10 92 50 01 	sts	0x0150, r1
    14c6:	10 92 52 01 	sts	0x0152, r1
    14ca:	10 92 51 01 	sts	0x0151, r1
    14ce:	80 93 53 01 	sts	0x0153, r24
    14d2:	10 92 54 01 	sts	0x0154, r1
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	90 93 56 01 	sts	0x0156, r25
    14de:	80 93 55 01 	sts	0x0155, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14e2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(DeviceIDStringLength),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(&DeviceIDStringLength)) != HOST_SENDCONTROL_Successful)
    14e6:	ce 01       	movw	r24, r28
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	5a dd       	rcall	.-1356   	; 0xfa0 <USB_Host_SendControlRequest>
    14ec:	d8 2e       	mov	r13, r24
    14ee:	88 23       	and	r24, r24
    14f0:	49 f5       	brne	.+82     	; 0x1544 <PRNT_Host_GetDeviceID+0xa8>
	  return ErrorCode;

	if (!(DeviceIDStringLength))
    14f2:	29 81       	ldd	r18, Y+1	; 0x01
    14f4:	3a 81       	ldd	r19, Y+2	; 0x02
    14f6:	21 15       	cp	r18, r1
    14f8:	31 05       	cpc	r19, r1
    14fa:	11 f1       	breq	.+68     	; 0x1540 <PRNT_Host_GetDeviceID+0xa4>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    14fc:	83 2f       	mov	r24, r19
    14fe:	92 2f       	mov	r25, r18
	{
		DeviceIDString[0] = 0x00;
		return HOST_SENDCONTROL_Successful;
	}

	DeviceIDStringLength = be16_to_cpu(DeviceIDStringLength);
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	89 83       	std	Y+1, r24	; 0x01

	if (DeviceIDStringLength > BufferSize)
    1504:	e8 16       	cp	r14, r24
    1506:	f9 06       	cpc	r15, r25
    1508:	10 f4       	brcc	.+4      	; 0x150e <PRNT_Host_GetDeviceID+0x72>
	  DeviceIDStringLength = BufferSize;
    150a:	fa 82       	std	Y+2, r15	; 0x02
    150c:	e9 82       	std	Y+1, r14	; 0x01

	USB_ControlRequest.wLength = DeviceIDStringLength;
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
    1512:	90 93 56 01 	sts	0x0156, r25
    1516:	80 93 55 01 	sts	0x0155, r24

	if ((ErrorCode = USB_Host_SendControlRequest(DeviceIDString)) != HOST_SENDCONTROL_Successful)
    151a:	c8 01       	movw	r24, r16
    151c:	41 dd       	rcall	.-1406   	; 0xfa0 <USB_Host_SendControlRequest>
    151e:	d8 2e       	mov	r13, r24
    1520:	88 23       	and	r24, r24
    1522:	81 f4       	brne	.+32     	; 0x1544 <PRNT_Host_GetDeviceID+0xa8>
	  return ErrorCode;

	memmove(&DeviceIDString[0], &DeviceIDString[2], DeviceIDStringLength - 2);
    1524:	e9 80       	ldd	r14, Y+1	; 0x01
    1526:	fa 80       	ldd	r15, Y+2	; 0x02
    1528:	b8 01       	movw	r22, r16
    152a:	6e 5f       	subi	r22, 0xFE	; 254
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	a7 01       	movw	r20, r14
    1530:	42 50       	subi	r20, 0x02	; 2
    1532:	50 40       	sbci	r21, 0x00	; 0
    1534:	c8 01       	movw	r24, r16
    1536:	53 d0       	rcall	.+166    	; 0x15de <memmove>

	DeviceIDString[DeviceIDStringLength - 2] = 0x00;
    1538:	0e 0d       	add	r16, r14
    153a:	1f 1d       	adc	r17, r15
    153c:	02 50       	subi	r16, 0x02	; 2
    153e:	10 40       	sbci	r17, 0x00	; 0
    1540:	f8 01       	movw	r30, r16
    1542:	10 82       	st	Z, r1

	return HOST_SENDCONTROL_Successful;
}
    1544:	8d 2d       	mov	r24, r13
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	ff 90       	pop	r15
    1554:	ef 90       	pop	r14
    1556:	df 90       	pop	r13
    1558:	08 95       	ret

0000155a <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    155a:	90 91 c8 00 	lds	r25, 0x00C8
    155e:	95 ff       	sbrs	r25, 5
    1560:	fc cf       	rjmp	.-8      	; 0x155a <Serial_putchar>
				UDR1 = DataByte;
    1562:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	08 95       	ret

0000156c <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    156c:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1570:	87 ff       	sbrs	r24, 7
    1572:	08 c0       	rjmp	.+16     	; 0x1584 <Serial_getchar+0x18>
    1574:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1578:	87 ff       	sbrs	r24, 7
    157a:	07 c0       	rjmp	.+14     	; 0x158a <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    157c:	20 91 ce 00 	lds	r18, 0x00CE
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	05 c0       	rjmp	.+10     	; 0x158e <Serial_getchar+0x22>
	  return _FDEV_EOF;
    1584:	2e ef       	ldi	r18, 0xFE	; 254
    1586:	3f ef       	ldi	r19, 0xFF	; 255
    1588:	02 c0       	rjmp	.+4      	; 0x158e <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    158a:	2f ef       	ldi	r18, 0xFF	; 255
    158c:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    158e:	c9 01       	movw	r24, r18
    1590:	08 95       	ret

00001592 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1592:	fc 01       	movw	r30, r24
	if (!(Stream))
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	51 f4       	brne	.+20     	; 0x15ac <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1598:	e8 e5       	ldi	r30, 0x58	; 88
    159a:	f1 e0       	ldi	r31, 0x01	; 1
    159c:	f0 93 67 01 	sts	0x0167, r31
    15a0:	e0 93 66 01 	sts	0x0166, r30
		stdout = Stream;
    15a4:	f0 93 69 01 	sts	0x0169, r31
    15a8:	e0 93 68 01 	sts	0x0168, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    15ac:	8e e0       	ldi	r24, 0x0E	; 14
    15ae:	df 01       	movw	r26, r30
    15b0:	1d 92       	st	X+, r1
    15b2:	8a 95       	dec	r24
    15b4:	e9 f7       	brne	.-6      	; 0x15b0 <Serial_CreateStream+0x1e>
    15b6:	83 e0       	ldi	r24, 0x03	; 3
    15b8:	83 83       	std	Z+3, r24	; 0x03
    15ba:	8d ea       	ldi	r24, 0xAD	; 173
    15bc:	9a e0       	ldi	r25, 0x0A	; 10
    15be:	91 87       	std	Z+9, r25	; 0x09
    15c0:	80 87       	std	Z+8, r24	; 0x08
    15c2:	86 eb       	ldi	r24, 0xB6	; 182
    15c4:	9a e0       	ldi	r25, 0x0A	; 10
    15c6:	93 87       	std	Z+11, r25	; 0x0b
    15c8:	82 87       	std	Z+10, r24	; 0x0a
}
    15ca:	08 95       	ret

000015cc <memcpy>:
    15cc:	fb 01       	movw	r30, r22
    15ce:	dc 01       	movw	r26, r24
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <memcpy+0xa>
    15d2:	01 90       	ld	r0, Z+
    15d4:	0d 92       	st	X+, r0
    15d6:	41 50       	subi	r20, 0x01	; 1
    15d8:	50 40       	sbci	r21, 0x00	; 0
    15da:	d8 f7       	brcc	.-10     	; 0x15d2 <memcpy+0x6>
    15dc:	08 95       	ret

000015de <memmove>:
    15de:	68 17       	cp	r22, r24
    15e0:	79 07       	cpc	r23, r25
    15e2:	68 f4       	brcc	.+26     	; 0x15fe <memmove+0x20>
    15e4:	fb 01       	movw	r30, r22
    15e6:	dc 01       	movw	r26, r24
    15e8:	e4 0f       	add	r30, r20
    15ea:	f5 1f       	adc	r31, r21
    15ec:	a4 0f       	add	r26, r20
    15ee:	b5 1f       	adc	r27, r21
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <memmove+0x18>
    15f2:	02 90       	ld	r0, -Z
    15f4:	0e 92       	st	-X, r0
    15f6:	41 50       	subi	r20, 0x01	; 1
    15f8:	50 40       	sbci	r21, 0x00	; 0
    15fa:	d8 f7       	brcc	.-10     	; 0x15f2 <memmove+0x14>
    15fc:	08 95       	ret
    15fe:	e6 cf       	rjmp	.-52     	; 0x15cc <memcpy>

00001600 <printf_P>:
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	fe 01       	movw	r30, r28
    160a:	35 96       	adiw	r30, 0x05	; 5
    160c:	61 91       	ld	r22, Z+
    160e:	71 91       	ld	r23, Z+
    1610:	80 91 68 01 	lds	r24, 0x0168
    1614:	90 91 69 01 	lds	r25, 0x0169
    1618:	dc 01       	movw	r26, r24
    161a:	13 96       	adiw	r26, 0x03	; 3
    161c:	2c 91       	ld	r18, X
    161e:	13 97       	sbiw	r26, 0x03	; 3
    1620:	28 60       	ori	r18, 0x08	; 8
    1622:	13 96       	adiw	r26, 0x03	; 3
    1624:	2c 93       	st	X, r18
    1626:	af 01       	movw	r20, r30
    1628:	42 d0       	rcall	.+132    	; 0x16ae <vfprintf>
    162a:	e0 91 68 01 	lds	r30, 0x0168
    162e:	f0 91 69 01 	lds	r31, 0x0169
    1632:	23 81       	ldd	r18, Z+3	; 0x03
    1634:	27 7f       	andi	r18, 0xF7	; 247
    1636:	23 83       	std	Z+3, r18	; 0x03
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <puts_P>:
    163e:	ef 92       	push	r14
    1640:	ff 92       	push	r15
    1642:	0f 93       	push	r16
    1644:	1f 93       	push	r17
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	8c 01       	movw	r16, r24
    164c:	e0 91 68 01 	lds	r30, 0x0168
    1650:	f0 91 69 01 	lds	r31, 0x0169
    1654:	83 81       	ldd	r24, Z+3	; 0x03
    1656:	81 ff       	sbrs	r24, 1
    1658:	20 c0       	rjmp	.+64     	; 0x169a <puts_P+0x5c>
    165a:	c0 e0       	ldi	r28, 0x00	; 0
    165c:	d0 e0       	ldi	r29, 0x00	; 0
    165e:	0c c0       	rjmp	.+24     	; 0x1678 <puts_P+0x3a>
    1660:	db 01       	movw	r26, r22
    1662:	18 96       	adiw	r26, 0x08	; 8
    1664:	ed 91       	ld	r30, X+
    1666:	fc 91       	ld	r31, X
    1668:	19 97       	sbiw	r26, 0x09	; 9
    166a:	09 95       	icall
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	11 f0       	breq	.+4      	; 0x1674 <puts_P+0x36>
    1670:	cf ef       	ldi	r28, 0xFF	; 255
    1672:	df ef       	ldi	r29, 0xFF	; 255
    1674:	0f 5f       	subi	r16, 0xFF	; 255
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	f8 01       	movw	r30, r16
    167a:	84 91       	lpm	r24, Z+
    167c:	60 91 68 01 	lds	r22, 0x0168
    1680:	70 91 69 01 	lds	r23, 0x0169
    1684:	88 23       	and	r24, r24
    1686:	61 f7       	brne	.-40     	; 0x1660 <puts_P+0x22>
    1688:	db 01       	movw	r26, r22
    168a:	18 96       	adiw	r26, 0x08	; 8
    168c:	ed 91       	ld	r30, X+
    168e:	fc 91       	ld	r31, X
    1690:	19 97       	sbiw	r26, 0x09	; 9
    1692:	8a e0       	ldi	r24, 0x0A	; 10
    1694:	09 95       	icall
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	11 f0       	breq	.+4      	; 0x169e <puts_P+0x60>
    169a:	cf ef       	ldi	r28, 0xFF	; 255
    169c:	df ef       	ldi	r29, 0xFF	; 255
    169e:	ce 01       	movw	r24, r28
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	08 95       	ret

000016ae <vfprintf>:
    16ae:	2f 92       	push	r2
    16b0:	3f 92       	push	r3
    16b2:	4f 92       	push	r4
    16b4:	5f 92       	push	r5
    16b6:	6f 92       	push	r6
    16b8:	7f 92       	push	r7
    16ba:	8f 92       	push	r8
    16bc:	9f 92       	push	r9
    16be:	af 92       	push	r10
    16c0:	bf 92       	push	r11
    16c2:	cf 92       	push	r12
    16c4:	df 92       	push	r13
    16c6:	ef 92       	push	r14
    16c8:	ff 92       	push	r15
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	2c 97       	sbiw	r28, 0x0c	; 12
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	6c 01       	movw	r12, r24
    16e4:	1b 01       	movw	r2, r22
    16e6:	8a 01       	movw	r16, r20
    16e8:	fc 01       	movw	r30, r24
    16ea:	17 82       	std	Z+7, r1	; 0x07
    16ec:	16 82       	std	Z+6, r1	; 0x06
    16ee:	83 81       	ldd	r24, Z+3	; 0x03
    16f0:	81 ff       	sbrs	r24, 1
    16f2:	c4 c1       	rjmp	.+904    	; 0x1a7c <vfprintf+0x3ce>
    16f4:	2e 01       	movw	r4, r28
    16f6:	08 94       	sec
    16f8:	41 1c       	adc	r4, r1
    16fa:	51 1c       	adc	r5, r1
    16fc:	f6 01       	movw	r30, r12
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	f1 01       	movw	r30, r2
    1702:	93 fd       	sbrc	r25, 3
    1704:	85 91       	lpm	r24, Z+
    1706:	93 ff       	sbrs	r25, 3
    1708:	81 91       	ld	r24, Z+
    170a:	1f 01       	movw	r2, r30
    170c:	88 23       	and	r24, r24
    170e:	09 f4       	brne	.+2      	; 0x1712 <vfprintf+0x64>
    1710:	b1 c1       	rjmp	.+866    	; 0x1a74 <vfprintf+0x3c6>
    1712:	85 32       	cpi	r24, 0x25	; 37
    1714:	39 f4       	brne	.+14     	; 0x1724 <vfprintf+0x76>
    1716:	93 fd       	sbrc	r25, 3
    1718:	85 91       	lpm	r24, Z+
    171a:	93 ff       	sbrs	r25, 3
    171c:	81 91       	ld	r24, Z+
    171e:	1f 01       	movw	r2, r30
    1720:	85 32       	cpi	r24, 0x25	; 37
    1722:	21 f4       	brne	.+8      	; 0x172c <vfprintf+0x7e>
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	b6 01       	movw	r22, r12
    1728:	db d1       	rcall	.+950    	; 0x1ae0 <fputc>
    172a:	e8 cf       	rjmp	.-48     	; 0x16fc <vfprintf+0x4e>
    172c:	ee 24       	eor	r14, r14
    172e:	ff 24       	eor	r15, r15
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	20 32       	cpi	r18, 0x20	; 32
    1734:	b0 f4       	brcc	.+44     	; 0x1762 <vfprintf+0xb4>
    1736:	8b 32       	cpi	r24, 0x2B	; 43
    1738:	69 f0       	breq	.+26     	; 0x1754 <vfprintf+0xa6>
    173a:	8c 32       	cpi	r24, 0x2C	; 44
    173c:	28 f4       	brcc	.+10     	; 0x1748 <vfprintf+0x9a>
    173e:	80 32       	cpi	r24, 0x20	; 32
    1740:	51 f0       	breq	.+20     	; 0x1756 <vfprintf+0xa8>
    1742:	83 32       	cpi	r24, 0x23	; 35
    1744:	71 f4       	brne	.+28     	; 0x1762 <vfprintf+0xb4>
    1746:	0b c0       	rjmp	.+22     	; 0x175e <vfprintf+0xb0>
    1748:	8d 32       	cpi	r24, 0x2D	; 45
    174a:	39 f0       	breq	.+14     	; 0x175a <vfprintf+0xac>
    174c:	80 33       	cpi	r24, 0x30	; 48
    174e:	49 f4       	brne	.+18     	; 0x1762 <vfprintf+0xb4>
    1750:	21 60       	ori	r18, 0x01	; 1
    1752:	2c c0       	rjmp	.+88     	; 0x17ac <vfprintf+0xfe>
    1754:	22 60       	ori	r18, 0x02	; 2
    1756:	24 60       	ori	r18, 0x04	; 4
    1758:	29 c0       	rjmp	.+82     	; 0x17ac <vfprintf+0xfe>
    175a:	28 60       	ori	r18, 0x08	; 8
    175c:	27 c0       	rjmp	.+78     	; 0x17ac <vfprintf+0xfe>
    175e:	20 61       	ori	r18, 0x10	; 16
    1760:	25 c0       	rjmp	.+74     	; 0x17ac <vfprintf+0xfe>
    1762:	27 fd       	sbrc	r18, 7
    1764:	2c c0       	rjmp	.+88     	; 0x17be <vfprintf+0x110>
    1766:	38 2f       	mov	r19, r24
    1768:	30 53       	subi	r19, 0x30	; 48
    176a:	3a 30       	cpi	r19, 0x0A	; 10
    176c:	98 f4       	brcc	.+38     	; 0x1794 <vfprintf+0xe6>
    176e:	26 ff       	sbrs	r18, 6
    1770:	08 c0       	rjmp	.+16     	; 0x1782 <vfprintf+0xd4>
    1772:	8e 2d       	mov	r24, r14
    1774:	88 0f       	add	r24, r24
    1776:	e8 2e       	mov	r14, r24
    1778:	ee 0c       	add	r14, r14
    177a:	ee 0c       	add	r14, r14
    177c:	e8 0e       	add	r14, r24
    177e:	e3 0e       	add	r14, r19
    1780:	15 c0       	rjmp	.+42     	; 0x17ac <vfprintf+0xfe>
    1782:	8f 2d       	mov	r24, r15
    1784:	88 0f       	add	r24, r24
    1786:	f8 2e       	mov	r15, r24
    1788:	ff 0c       	add	r15, r15
    178a:	ff 0c       	add	r15, r15
    178c:	f8 0e       	add	r15, r24
    178e:	f3 0e       	add	r15, r19
    1790:	20 62       	ori	r18, 0x20	; 32
    1792:	0c c0       	rjmp	.+24     	; 0x17ac <vfprintf+0xfe>
    1794:	8e 32       	cpi	r24, 0x2E	; 46
    1796:	21 f4       	brne	.+8      	; 0x17a0 <vfprintf+0xf2>
    1798:	26 fd       	sbrc	r18, 6
    179a:	6c c1       	rjmp	.+728    	; 0x1a74 <vfprintf+0x3c6>
    179c:	20 64       	ori	r18, 0x40	; 64
    179e:	06 c0       	rjmp	.+12     	; 0x17ac <vfprintf+0xfe>
    17a0:	8c 36       	cpi	r24, 0x6C	; 108
    17a2:	11 f4       	brne	.+4      	; 0x17a8 <vfprintf+0xfa>
    17a4:	20 68       	ori	r18, 0x80	; 128
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <vfprintf+0xfe>
    17a8:	88 36       	cpi	r24, 0x68	; 104
    17aa:	49 f4       	brne	.+18     	; 0x17be <vfprintf+0x110>
    17ac:	f1 01       	movw	r30, r2
    17ae:	93 fd       	sbrc	r25, 3
    17b0:	85 91       	lpm	r24, Z+
    17b2:	93 ff       	sbrs	r25, 3
    17b4:	81 91       	ld	r24, Z+
    17b6:	1f 01       	movw	r2, r30
    17b8:	88 23       	and	r24, r24
    17ba:	09 f0       	breq	.+2      	; 0x17be <vfprintf+0x110>
    17bc:	ba cf       	rjmp	.-140    	; 0x1732 <vfprintf+0x84>
    17be:	98 2f       	mov	r25, r24
    17c0:	95 54       	subi	r25, 0x45	; 69
    17c2:	93 30       	cpi	r25, 0x03	; 3
    17c4:	18 f0       	brcs	.+6      	; 0x17cc <vfprintf+0x11e>
    17c6:	90 52       	subi	r25, 0x20	; 32
    17c8:	93 30       	cpi	r25, 0x03	; 3
    17ca:	28 f4       	brcc	.+10     	; 0x17d6 <vfprintf+0x128>
    17cc:	0c 5f       	subi	r16, 0xFC	; 252
    17ce:	1f 4f       	sbci	r17, 0xFF	; 255
    17d0:	ff e3       	ldi	r31, 0x3F	; 63
    17d2:	f9 83       	std	Y+1, r31	; 0x01
    17d4:	0d c0       	rjmp	.+26     	; 0x17f0 <vfprintf+0x142>
    17d6:	83 36       	cpi	r24, 0x63	; 99
    17d8:	31 f0       	breq	.+12     	; 0x17e6 <vfprintf+0x138>
    17da:	83 37       	cpi	r24, 0x73	; 115
    17dc:	71 f0       	breq	.+28     	; 0x17fa <vfprintf+0x14c>
    17de:	83 35       	cpi	r24, 0x53	; 83
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <vfprintf+0x136>
    17e2:	5c c0       	rjmp	.+184    	; 0x189c <vfprintf+0x1ee>
    17e4:	21 c0       	rjmp	.+66     	; 0x1828 <vfprintf+0x17a>
    17e6:	f8 01       	movw	r30, r16
    17e8:	80 81       	ld	r24, Z
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	0e 5f       	subi	r16, 0xFE	; 254
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	42 01       	movw	r8, r4
    17f2:	71 e0       	ldi	r23, 0x01	; 1
    17f4:	a7 2e       	mov	r10, r23
    17f6:	b1 2c       	mov	r11, r1
    17f8:	15 c0       	rjmp	.+42     	; 0x1824 <vfprintf+0x176>
    17fa:	62 e0       	ldi	r22, 0x02	; 2
    17fc:	66 2e       	mov	r6, r22
    17fe:	71 2c       	mov	r7, r1
    1800:	60 0e       	add	r6, r16
    1802:	71 1e       	adc	r7, r17
    1804:	f8 01       	movw	r30, r16
    1806:	80 80       	ld	r8, Z
    1808:	91 80       	ldd	r9, Z+1	; 0x01
    180a:	26 ff       	sbrs	r18, 6
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <vfprintf+0x166>
    180e:	6e 2d       	mov	r22, r14
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <vfprintf+0x16a>
    1814:	6f ef       	ldi	r22, 0xFF	; 255
    1816:	7f ef       	ldi	r23, 0xFF	; 255
    1818:	c4 01       	movw	r24, r8
    181a:	2c 87       	std	Y+12, r18	; 0x0c
    181c:	56 d1       	rcall	.+684    	; 0x1aca <strnlen>
    181e:	5c 01       	movw	r10, r24
    1820:	83 01       	movw	r16, r6
    1822:	2c 85       	ldd	r18, Y+12	; 0x0c
    1824:	2f 77       	andi	r18, 0x7F	; 127
    1826:	16 c0       	rjmp	.+44     	; 0x1854 <vfprintf+0x1a6>
    1828:	52 e0       	ldi	r21, 0x02	; 2
    182a:	65 2e       	mov	r6, r21
    182c:	71 2c       	mov	r7, r1
    182e:	60 0e       	add	r6, r16
    1830:	71 1e       	adc	r7, r17
    1832:	f8 01       	movw	r30, r16
    1834:	80 80       	ld	r8, Z
    1836:	91 80       	ldd	r9, Z+1	; 0x01
    1838:	26 ff       	sbrs	r18, 6
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <vfprintf+0x194>
    183c:	6e 2d       	mov	r22, r14
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <vfprintf+0x198>
    1842:	6f ef       	ldi	r22, 0xFF	; 255
    1844:	7f ef       	ldi	r23, 0xFF	; 255
    1846:	c4 01       	movw	r24, r8
    1848:	2c 87       	std	Y+12, r18	; 0x0c
    184a:	34 d1       	rcall	.+616    	; 0x1ab4 <strnlen_P>
    184c:	5c 01       	movw	r10, r24
    184e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1850:	20 68       	ori	r18, 0x80	; 128
    1852:	83 01       	movw	r16, r6
    1854:	23 fd       	sbrc	r18, 3
    1856:	1e c0       	rjmp	.+60     	; 0x1894 <vfprintf+0x1e6>
    1858:	07 c0       	rjmp	.+14     	; 0x1868 <vfprintf+0x1ba>
    185a:	80 e2       	ldi	r24, 0x20	; 32
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	b6 01       	movw	r22, r12
    1860:	2c 87       	std	Y+12, r18	; 0x0c
    1862:	3e d1       	rcall	.+636    	; 0x1ae0 <fputc>
    1864:	fa 94       	dec	r15
    1866:	2c 85       	ldd	r18, Y+12	; 0x0c
    1868:	8f 2d       	mov	r24, r15
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a8 16       	cp	r10, r24
    186e:	b9 06       	cpc	r11, r25
    1870:	a0 f3       	brcs	.-24     	; 0x185a <vfprintf+0x1ac>
    1872:	10 c0       	rjmp	.+32     	; 0x1894 <vfprintf+0x1e6>
    1874:	f4 01       	movw	r30, r8
    1876:	27 fd       	sbrc	r18, 7
    1878:	85 91       	lpm	r24, Z+
    187a:	27 ff       	sbrs	r18, 7
    187c:	81 91       	ld	r24, Z+
    187e:	4f 01       	movw	r8, r30
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	b6 01       	movw	r22, r12
    1884:	2c 87       	std	Y+12, r18	; 0x0c
    1886:	2c d1       	rcall	.+600    	; 0x1ae0 <fputc>
    1888:	2c 85       	ldd	r18, Y+12	; 0x0c
    188a:	f1 10       	cpse	r15, r1
    188c:	fa 94       	dec	r15
    188e:	08 94       	sec
    1890:	a1 08       	sbc	r10, r1
    1892:	b1 08       	sbc	r11, r1
    1894:	a1 14       	cp	r10, r1
    1896:	b1 04       	cpc	r11, r1
    1898:	69 f7       	brne	.-38     	; 0x1874 <vfprintf+0x1c6>
    189a:	e9 c0       	rjmp	.+466    	; 0x1a6e <vfprintf+0x3c0>
    189c:	84 36       	cpi	r24, 0x64	; 100
    189e:	11 f0       	breq	.+4      	; 0x18a4 <vfprintf+0x1f6>
    18a0:	89 36       	cpi	r24, 0x69	; 105
    18a2:	41 f5       	brne	.+80     	; 0x18f4 <vfprintf+0x246>
    18a4:	27 ff       	sbrs	r18, 7
    18a6:	08 c0       	rjmp	.+16     	; 0x18b8 <vfprintf+0x20a>
    18a8:	f8 01       	movw	r30, r16
    18aa:	60 81       	ld	r22, Z
    18ac:	71 81       	ldd	r23, Z+1	; 0x01
    18ae:	82 81       	ldd	r24, Z+2	; 0x02
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	0c 5f       	subi	r16, 0xFC	; 252
    18b4:	1f 4f       	sbci	r17, 0xFF	; 255
    18b6:	09 c0       	rjmp	.+18     	; 0x18ca <vfprintf+0x21c>
    18b8:	f8 01       	movw	r30, r16
    18ba:	60 81       	ld	r22, Z
    18bc:	71 81       	ldd	r23, Z+1	; 0x01
    18be:	88 27       	eor	r24, r24
    18c0:	77 fd       	sbrc	r23, 7
    18c2:	80 95       	com	r24
    18c4:	98 2f       	mov	r25, r24
    18c6:	0e 5f       	subi	r16, 0xFE	; 254
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	4f e6       	ldi	r20, 0x6F	; 111
    18cc:	b4 2e       	mov	r11, r20
    18ce:	b2 22       	and	r11, r18
    18d0:	97 ff       	sbrs	r25, 7
    18d2:	09 c0       	rjmp	.+18     	; 0x18e6 <vfprintf+0x238>
    18d4:	90 95       	com	r25
    18d6:	80 95       	com	r24
    18d8:	70 95       	com	r23
    18da:	61 95       	neg	r22
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	8f 4f       	sbci	r24, 0xFF	; 255
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	f0 e8       	ldi	r31, 0x80	; 128
    18e4:	bf 2a       	or	r11, r31
    18e6:	a2 01       	movw	r20, r4
    18e8:	2a e0       	ldi	r18, 0x0A	; 10
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	25 d1       	rcall	.+586    	; 0x1b38 <__ultoa_invert>
    18ee:	78 2e       	mov	r7, r24
    18f0:	74 18       	sub	r7, r4
    18f2:	44 c0       	rjmp	.+136    	; 0x197c <vfprintf+0x2ce>
    18f4:	85 37       	cpi	r24, 0x75	; 117
    18f6:	31 f4       	brne	.+12     	; 0x1904 <vfprintf+0x256>
    18f8:	3f ee       	ldi	r19, 0xEF	; 239
    18fa:	b3 2e       	mov	r11, r19
    18fc:	b2 22       	and	r11, r18
    18fe:	2a e0       	ldi	r18, 0x0A	; 10
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	25 c0       	rjmp	.+74     	; 0x194e <vfprintf+0x2a0>
    1904:	99 ef       	ldi	r25, 0xF9	; 249
    1906:	b9 2e       	mov	r11, r25
    1908:	b2 22       	and	r11, r18
    190a:	8f 36       	cpi	r24, 0x6F	; 111
    190c:	c1 f0       	breq	.+48     	; 0x193e <vfprintf+0x290>
    190e:	80 37       	cpi	r24, 0x70	; 112
    1910:	20 f4       	brcc	.+8      	; 0x191a <vfprintf+0x26c>
    1912:	88 35       	cpi	r24, 0x58	; 88
    1914:	09 f0       	breq	.+2      	; 0x1918 <vfprintf+0x26a>
    1916:	ae c0       	rjmp	.+348    	; 0x1a74 <vfprintf+0x3c6>
    1918:	0d c0       	rjmp	.+26     	; 0x1934 <vfprintf+0x286>
    191a:	80 37       	cpi	r24, 0x70	; 112
    191c:	21 f0       	breq	.+8      	; 0x1926 <vfprintf+0x278>
    191e:	88 37       	cpi	r24, 0x78	; 120
    1920:	09 f0       	breq	.+2      	; 0x1924 <vfprintf+0x276>
    1922:	a8 c0       	rjmp	.+336    	; 0x1a74 <vfprintf+0x3c6>
    1924:	02 c0       	rjmp	.+4      	; 0x192a <vfprintf+0x27c>
    1926:	20 e1       	ldi	r18, 0x10	; 16
    1928:	b2 2a       	or	r11, r18
    192a:	b4 fe       	sbrs	r11, 4
    192c:	0b c0       	rjmp	.+22     	; 0x1944 <vfprintf+0x296>
    192e:	84 e0       	ldi	r24, 0x04	; 4
    1930:	b8 2a       	or	r11, r24
    1932:	08 c0       	rjmp	.+16     	; 0x1944 <vfprintf+0x296>
    1934:	b4 fe       	sbrs	r11, 4
    1936:	09 c0       	rjmp	.+18     	; 0x194a <vfprintf+0x29c>
    1938:	e6 e0       	ldi	r30, 0x06	; 6
    193a:	be 2a       	or	r11, r30
    193c:	06 c0       	rjmp	.+12     	; 0x194a <vfprintf+0x29c>
    193e:	28 e0       	ldi	r18, 0x08	; 8
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	05 c0       	rjmp	.+10     	; 0x194e <vfprintf+0x2a0>
    1944:	20 e1       	ldi	r18, 0x10	; 16
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	02 c0       	rjmp	.+4      	; 0x194e <vfprintf+0x2a0>
    194a:	20 e1       	ldi	r18, 0x10	; 16
    194c:	32 e0       	ldi	r19, 0x02	; 2
    194e:	b7 fe       	sbrs	r11, 7
    1950:	08 c0       	rjmp	.+16     	; 0x1962 <vfprintf+0x2b4>
    1952:	f8 01       	movw	r30, r16
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	0c 5f       	subi	r16, 0xFC	; 252
    195e:	1f 4f       	sbci	r17, 0xFF	; 255
    1960:	07 c0       	rjmp	.+14     	; 0x1970 <vfprintf+0x2c2>
    1962:	f8 01       	movw	r30, r16
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 5f       	subi	r16, 0xFE	; 254
    196e:	1f 4f       	sbci	r17, 0xFF	; 255
    1970:	a2 01       	movw	r20, r4
    1972:	e2 d0       	rcall	.+452    	; 0x1b38 <__ultoa_invert>
    1974:	78 2e       	mov	r7, r24
    1976:	74 18       	sub	r7, r4
    1978:	ff e7       	ldi	r31, 0x7F	; 127
    197a:	bf 22       	and	r11, r31
    197c:	b6 fe       	sbrs	r11, 6
    197e:	0b c0       	rjmp	.+22     	; 0x1996 <vfprintf+0x2e8>
    1980:	2e ef       	ldi	r18, 0xFE	; 254
    1982:	b2 22       	and	r11, r18
    1984:	7e 14       	cp	r7, r14
    1986:	38 f4       	brcc	.+14     	; 0x1996 <vfprintf+0x2e8>
    1988:	b4 fe       	sbrs	r11, 4
    198a:	07 c0       	rjmp	.+14     	; 0x199a <vfprintf+0x2ec>
    198c:	b2 fc       	sbrc	r11, 2
    198e:	05 c0       	rjmp	.+10     	; 0x199a <vfprintf+0x2ec>
    1990:	8f ee       	ldi	r24, 0xEF	; 239
    1992:	b8 22       	and	r11, r24
    1994:	02 c0       	rjmp	.+4      	; 0x199a <vfprintf+0x2ec>
    1996:	a7 2c       	mov	r10, r7
    1998:	01 c0       	rjmp	.+2      	; 0x199c <vfprintf+0x2ee>
    199a:	ae 2c       	mov	r10, r14
    199c:	8b 2d       	mov	r24, r11
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	b4 fe       	sbrs	r11, 4
    19a2:	0d c0       	rjmp	.+26     	; 0x19be <vfprintf+0x310>
    19a4:	fe 01       	movw	r30, r28
    19a6:	e7 0d       	add	r30, r7
    19a8:	f1 1d       	adc	r31, r1
    19aa:	20 81       	ld	r18, Z
    19ac:	20 33       	cpi	r18, 0x30	; 48
    19ae:	19 f4       	brne	.+6      	; 0x19b6 <vfprintf+0x308>
    19b0:	e9 ee       	ldi	r30, 0xE9	; 233
    19b2:	be 22       	and	r11, r30
    19b4:	09 c0       	rjmp	.+18     	; 0x19c8 <vfprintf+0x31a>
    19b6:	a3 94       	inc	r10
    19b8:	b2 fe       	sbrs	r11, 2
    19ba:	06 c0       	rjmp	.+12     	; 0x19c8 <vfprintf+0x31a>
    19bc:	04 c0       	rjmp	.+8      	; 0x19c6 <vfprintf+0x318>
    19be:	86 78       	andi	r24, 0x86	; 134
    19c0:	90 70       	andi	r25, 0x00	; 0
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <vfprintf+0x31a>
    19c6:	a3 94       	inc	r10
    19c8:	8b 2c       	mov	r8, r11
    19ca:	99 24       	eor	r9, r9
    19cc:	b3 fc       	sbrc	r11, 3
    19ce:	13 c0       	rjmp	.+38     	; 0x19f6 <vfprintf+0x348>
    19d0:	b0 fe       	sbrs	r11, 0
    19d2:	0e c0       	rjmp	.+28     	; 0x19f0 <vfprintf+0x342>
    19d4:	af 14       	cp	r10, r15
    19d6:	28 f4       	brcc	.+10     	; 0x19e2 <vfprintf+0x334>
    19d8:	e7 2c       	mov	r14, r7
    19da:	ef 0c       	add	r14, r15
    19dc:	ea 18       	sub	r14, r10
    19de:	af 2c       	mov	r10, r15
    19e0:	07 c0       	rjmp	.+14     	; 0x19f0 <vfprintf+0x342>
    19e2:	e7 2c       	mov	r14, r7
    19e4:	05 c0       	rjmp	.+10     	; 0x19f0 <vfprintf+0x342>
    19e6:	80 e2       	ldi	r24, 0x20	; 32
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	b6 01       	movw	r22, r12
    19ec:	79 d0       	rcall	.+242    	; 0x1ae0 <fputc>
    19ee:	a3 94       	inc	r10
    19f0:	af 14       	cp	r10, r15
    19f2:	c8 f3       	brcs	.-14     	; 0x19e6 <vfprintf+0x338>
    19f4:	04 c0       	rjmp	.+8      	; 0x19fe <vfprintf+0x350>
    19f6:	af 14       	cp	r10, r15
    19f8:	10 f4       	brcc	.+4      	; 0x19fe <vfprintf+0x350>
    19fa:	fa 18       	sub	r15, r10
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <vfprintf+0x352>
    19fe:	ff 24       	eor	r15, r15
    1a00:	84 fe       	sbrs	r8, 4
    1a02:	0e c0       	rjmp	.+28     	; 0x1a20 <vfprintf+0x372>
    1a04:	80 e3       	ldi	r24, 0x30	; 48
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	b6 01       	movw	r22, r12
    1a0a:	6a d0       	rcall	.+212    	; 0x1ae0 <fputc>
    1a0c:	82 fe       	sbrs	r8, 2
    1a0e:	1d c0       	rjmp	.+58     	; 0x1a4a <vfprintf+0x39c>
    1a10:	81 fe       	sbrs	r8, 1
    1a12:	03 c0       	rjmp	.+6      	; 0x1a1a <vfprintf+0x36c>
    1a14:	88 e5       	ldi	r24, 0x58	; 88
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	10 c0       	rjmp	.+32     	; 0x1a3a <vfprintf+0x38c>
    1a1a:	88 e7       	ldi	r24, 0x78	; 120
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0d c0       	rjmp	.+26     	; 0x1a3a <vfprintf+0x38c>
    1a20:	c4 01       	movw	r24, r8
    1a22:	86 78       	andi	r24, 0x86	; 134
    1a24:	90 70       	andi	r25, 0x00	; 0
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	81 f0       	breq	.+32     	; 0x1a4a <vfprintf+0x39c>
    1a2a:	81 fc       	sbrc	r8, 1
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <vfprintf+0x384>
    1a2e:	80 e2       	ldi	r24, 0x20	; 32
    1a30:	01 c0       	rjmp	.+2      	; 0x1a34 <vfprintf+0x386>
    1a32:	8b e2       	ldi	r24, 0x2B	; 43
    1a34:	b7 fc       	sbrc	r11, 7
    1a36:	8d e2       	ldi	r24, 0x2D	; 45
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	b6 01       	movw	r22, r12
    1a3c:	51 d0       	rcall	.+162    	; 0x1ae0 <fputc>
    1a3e:	05 c0       	rjmp	.+10     	; 0x1a4a <vfprintf+0x39c>
    1a40:	80 e3       	ldi	r24, 0x30	; 48
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	b6 01       	movw	r22, r12
    1a46:	4c d0       	rcall	.+152    	; 0x1ae0 <fputc>
    1a48:	ea 94       	dec	r14
    1a4a:	7e 14       	cp	r7, r14
    1a4c:	c8 f3       	brcs	.-14     	; 0x1a40 <vfprintf+0x392>
    1a4e:	7a 94       	dec	r7
    1a50:	f2 01       	movw	r30, r4
    1a52:	e7 0d       	add	r30, r7
    1a54:	f1 1d       	adc	r31, r1
    1a56:	80 81       	ld	r24, Z
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	b6 01       	movw	r22, r12
    1a5c:	41 d0       	rcall	.+130    	; 0x1ae0 <fputc>
    1a5e:	77 20       	and	r7, r7
    1a60:	b1 f7       	brne	.-20     	; 0x1a4e <vfprintf+0x3a0>
    1a62:	05 c0       	rjmp	.+10     	; 0x1a6e <vfprintf+0x3c0>
    1a64:	80 e2       	ldi	r24, 0x20	; 32
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	b6 01       	movw	r22, r12
    1a6a:	3a d0       	rcall	.+116    	; 0x1ae0 <fputc>
    1a6c:	fa 94       	dec	r15
    1a6e:	ff 20       	and	r15, r15
    1a70:	c9 f7       	brne	.-14     	; 0x1a64 <vfprintf+0x3b6>
    1a72:	44 ce       	rjmp	.-888    	; 0x16fc <vfprintf+0x4e>
    1a74:	f6 01       	movw	r30, r12
    1a76:	26 81       	ldd	r18, Z+6	; 0x06
    1a78:	37 81       	ldd	r19, Z+7	; 0x07
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <vfprintf+0x3d2>
    1a7c:	2f ef       	ldi	r18, 0xFF	; 255
    1a7e:	3f ef       	ldi	r19, 0xFF	; 255
    1a80:	c9 01       	movw	r24, r18
    1a82:	2c 96       	adiw	r28, 0x0c	; 12
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16
    1a96:	ff 90       	pop	r15
    1a98:	ef 90       	pop	r14
    1a9a:	df 90       	pop	r13
    1a9c:	cf 90       	pop	r12
    1a9e:	bf 90       	pop	r11
    1aa0:	af 90       	pop	r10
    1aa2:	9f 90       	pop	r9
    1aa4:	8f 90       	pop	r8
    1aa6:	7f 90       	pop	r7
    1aa8:	6f 90       	pop	r6
    1aaa:	5f 90       	pop	r5
    1aac:	4f 90       	pop	r4
    1aae:	3f 90       	pop	r3
    1ab0:	2f 90       	pop	r2
    1ab2:	08 95       	ret

00001ab4 <strnlen_P>:
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	05 90       	lpm	r0, Z+
    1ab8:	61 50       	subi	r22, 0x01	; 1
    1aba:	70 40       	sbci	r23, 0x00	; 0
    1abc:	01 10       	cpse	r0, r1
    1abe:	d8 f7       	brcc	.-10     	; 0x1ab6 <strnlen_P+0x2>
    1ac0:	80 95       	com	r24
    1ac2:	90 95       	com	r25
    1ac4:	8e 0f       	add	r24, r30
    1ac6:	9f 1f       	adc	r25, r31
    1ac8:	08 95       	ret

00001aca <strnlen>:
    1aca:	fc 01       	movw	r30, r24
    1acc:	61 50       	subi	r22, 0x01	; 1
    1ace:	70 40       	sbci	r23, 0x00	; 0
    1ad0:	01 90       	ld	r0, Z+
    1ad2:	01 10       	cpse	r0, r1
    1ad4:	d8 f7       	brcc	.-10     	; 0x1acc <strnlen+0x2>
    1ad6:	80 95       	com	r24
    1ad8:	90 95       	com	r25
    1ada:	8e 0f       	add	r24, r30
    1adc:	9f 1f       	adc	r25, r31
    1ade:	08 95       	ret

00001ae0 <fputc>:
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	8c 01       	movw	r16, r24
    1aea:	eb 01       	movw	r28, r22
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	81 ff       	sbrs	r24, 1
    1af0:	1b c0       	rjmp	.+54     	; 0x1b28 <fputc+0x48>
    1af2:	82 ff       	sbrs	r24, 2
    1af4:	0d c0       	rjmp	.+26     	; 0x1b10 <fputc+0x30>
    1af6:	2e 81       	ldd	r18, Y+6	; 0x06
    1af8:	3f 81       	ldd	r19, Y+7	; 0x07
    1afa:	8c 81       	ldd	r24, Y+4	; 0x04
    1afc:	9d 81       	ldd	r25, Y+5	; 0x05
    1afe:	28 17       	cp	r18, r24
    1b00:	39 07       	cpc	r19, r25
    1b02:	64 f4       	brge	.+24     	; 0x1b1c <fputc+0x3c>
    1b04:	e8 81       	ld	r30, Y
    1b06:	f9 81       	ldd	r31, Y+1	; 0x01
    1b08:	01 93       	st	Z+, r16
    1b0a:	f9 83       	std	Y+1, r31	; 0x01
    1b0c:	e8 83       	st	Y, r30
    1b0e:	06 c0       	rjmp	.+12     	; 0x1b1c <fputc+0x3c>
    1b10:	e8 85       	ldd	r30, Y+8	; 0x08
    1b12:	f9 85       	ldd	r31, Y+9	; 0x09
    1b14:	80 2f       	mov	r24, r16
    1b16:	09 95       	icall
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	31 f4       	brne	.+12     	; 0x1b28 <fputc+0x48>
    1b1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	9f 83       	std	Y+7, r25	; 0x07
    1b24:	8e 83       	std	Y+6, r24	; 0x06
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <fputc+0x4c>
    1b28:	0f ef       	ldi	r16, 0xFF	; 255
    1b2a:	1f ef       	ldi	r17, 0xFF	; 255
    1b2c:	c8 01       	movw	r24, r16
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	08 95       	ret

00001b38 <__ultoa_invert>:
    1b38:	fa 01       	movw	r30, r20
    1b3a:	aa 27       	eor	r26, r26
    1b3c:	28 30       	cpi	r18, 0x08	; 8
    1b3e:	51 f1       	breq	.+84     	; 0x1b94 <__ultoa_invert+0x5c>
    1b40:	20 31       	cpi	r18, 0x10	; 16
    1b42:	81 f1       	breq	.+96     	; 0x1ba4 <__ultoa_invert+0x6c>
    1b44:	e8 94       	clt
    1b46:	6f 93       	push	r22
    1b48:	6e 7f       	andi	r22, 0xFE	; 254
    1b4a:	6e 5f       	subi	r22, 0xFE	; 254
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b50:	9f 4f       	sbci	r25, 0xFF	; 255
    1b52:	af 4f       	sbci	r26, 0xFF	; 255
    1b54:	b1 e0       	ldi	r27, 0x01	; 1
    1b56:	3e d0       	rcall	.+124    	; 0x1bd4 <__ultoa_invert+0x9c>
    1b58:	b4 e0       	ldi	r27, 0x04	; 4
    1b5a:	3c d0       	rcall	.+120    	; 0x1bd4 <__ultoa_invert+0x9c>
    1b5c:	67 0f       	add	r22, r23
    1b5e:	78 1f       	adc	r23, r24
    1b60:	89 1f       	adc	r24, r25
    1b62:	9a 1f       	adc	r25, r26
    1b64:	a1 1d       	adc	r26, r1
    1b66:	68 0f       	add	r22, r24
    1b68:	79 1f       	adc	r23, r25
    1b6a:	8a 1f       	adc	r24, r26
    1b6c:	91 1d       	adc	r25, r1
    1b6e:	a1 1d       	adc	r26, r1
    1b70:	6a 0f       	add	r22, r26
    1b72:	71 1d       	adc	r23, r1
    1b74:	81 1d       	adc	r24, r1
    1b76:	91 1d       	adc	r25, r1
    1b78:	a1 1d       	adc	r26, r1
    1b7a:	20 d0       	rcall	.+64     	; 0x1bbc <__ultoa_invert+0x84>
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <__ultoa_invert+0x48>
    1b7e:	68 94       	set
    1b80:	3f 91       	pop	r19
    1b82:	2a e0       	ldi	r18, 0x0A	; 10
    1b84:	26 9f       	mul	r18, r22
    1b86:	11 24       	eor	r1, r1
    1b88:	30 19       	sub	r19, r0
    1b8a:	30 5d       	subi	r19, 0xD0	; 208
    1b8c:	31 93       	st	Z+, r19
    1b8e:	de f6       	brtc	.-74     	; 0x1b46 <__ultoa_invert+0xe>
    1b90:	cf 01       	movw	r24, r30
    1b92:	08 95       	ret
    1b94:	46 2f       	mov	r20, r22
    1b96:	47 70       	andi	r20, 0x07	; 7
    1b98:	40 5d       	subi	r20, 0xD0	; 208
    1b9a:	41 93       	st	Z+, r20
    1b9c:	b3 e0       	ldi	r27, 0x03	; 3
    1b9e:	0f d0       	rcall	.+30     	; 0x1bbe <__ultoa_invert+0x86>
    1ba0:	c9 f7       	brne	.-14     	; 0x1b94 <__ultoa_invert+0x5c>
    1ba2:	f6 cf       	rjmp	.-20     	; 0x1b90 <__ultoa_invert+0x58>
    1ba4:	46 2f       	mov	r20, r22
    1ba6:	4f 70       	andi	r20, 0x0F	; 15
    1ba8:	40 5d       	subi	r20, 0xD0	; 208
    1baa:	4a 33       	cpi	r20, 0x3A	; 58
    1bac:	18 f0       	brcs	.+6      	; 0x1bb4 <__ultoa_invert+0x7c>
    1bae:	49 5d       	subi	r20, 0xD9	; 217
    1bb0:	31 fd       	sbrc	r19, 1
    1bb2:	40 52       	subi	r20, 0x20	; 32
    1bb4:	41 93       	st	Z+, r20
    1bb6:	02 d0       	rcall	.+4      	; 0x1bbc <__ultoa_invert+0x84>
    1bb8:	a9 f7       	brne	.-22     	; 0x1ba4 <__ultoa_invert+0x6c>
    1bba:	ea cf       	rjmp	.-44     	; 0x1b90 <__ultoa_invert+0x58>
    1bbc:	b4 e0       	ldi	r27, 0x04	; 4
    1bbe:	a6 95       	lsr	r26
    1bc0:	97 95       	ror	r25
    1bc2:	87 95       	ror	r24
    1bc4:	77 95       	ror	r23
    1bc6:	67 95       	ror	r22
    1bc8:	ba 95       	dec	r27
    1bca:	c9 f7       	brne	.-14     	; 0x1bbe <__ultoa_invert+0x86>
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	61 05       	cpc	r22, r1
    1bd0:	71 05       	cpc	r23, r1
    1bd2:	08 95       	ret
    1bd4:	9b 01       	movw	r18, r22
    1bd6:	ac 01       	movw	r20, r24
    1bd8:	0a 2e       	mov	r0, r26
    1bda:	06 94       	lsr	r0
    1bdc:	57 95       	ror	r21
    1bde:	47 95       	ror	r20
    1be0:	37 95       	ror	r19
    1be2:	27 95       	ror	r18
    1be4:	ba 95       	dec	r27
    1be6:	c9 f7       	brne	.-14     	; 0x1bda <__ultoa_invert+0xa2>
    1be8:	62 0f       	add	r22, r18
    1bea:	73 1f       	adc	r23, r19
    1bec:	84 1f       	adc	r24, r20
    1bee:	95 1f       	adc	r25, r21
    1bf0:	a0 1d       	adc	r26, r0
    1bf2:	08 95       	ret

00001bf4 <_exit>:
    1bf4:	f8 94       	cli

00001bf6 <__stop_program>:
    1bf6:	ff cf       	rjmp	.-2      	; 0x1bf6 <__stop_program>
