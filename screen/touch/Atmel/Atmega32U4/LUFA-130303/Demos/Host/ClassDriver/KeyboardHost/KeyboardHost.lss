
KeyboardHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001b26  00001bba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800128  00800128  00001be2  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ddb  00000000  00000000  00003ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000788  00000000  00000000  00004ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001150  00000000  00000000  00005457  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000d03b  00000000  00000000  000065a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d04  00000000  00000000  000135e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000996f  00000000  00000000  000162e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c70  00000000  00000000  0001fc58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004e12  00000000  00000000  000208c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000071ea  00000000  00000000  000256da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001f99  00000000  00000000  0002c8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a18  00000000  00000000  0002e85d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
	}
}
       0:	12 c1       	rjmp	.+548    	; 0x226 <__ctors_end>
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       2:	00 00       	nop
       4:	2e c1       	rjmp	.+604    	; 0x262 <__bad_interrupt>
       6:	00 00       	nop
       8:	2c c1       	rjmp	.+600    	; 0x262 <__bad_interrupt>
       a:	00 00       	nop
       c:	2a c1       	rjmp	.+596    	; 0x262 <__bad_interrupt>
       e:	00 00       	nop
      10:	28 c1       	rjmp	.+592    	; 0x262 <__bad_interrupt>
      12:	00 00       	nop
      14:	26 c1       	rjmp	.+588    	; 0x262 <__bad_interrupt>
      16:	00 00       	nop
      18:	24 c1       	rjmp	.+584    	; 0x262 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	22 c1       	rjmp	.+580    	; 0x262 <__bad_interrupt>
      1e:	00 00       	nop
      20:	20 c1       	rjmp	.+576    	; 0x262 <__bad_interrupt>
      22:	00 00       	nop
      24:	1e c1       	rjmp	.+572    	; 0x262 <__bad_interrupt>
      26:	00 00       	nop
      28:	33 c6       	rjmp	.+3174   	; 0xc90 <__vector_10>
      2a:	00 00       	nop
      2c:	1a c1       	rjmp	.+564    	; 0x262 <__bad_interrupt>
      2e:	00 00       	nop
      30:	18 c1       	rjmp	.+560    	; 0x262 <__bad_interrupt>
      32:	00 00       	nop
      34:	16 c1       	rjmp	.+556    	; 0x262 <__bad_interrupt>
      36:	00 00       	nop
      38:	14 c1       	rjmp	.+552    	; 0x262 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	12 c1       	rjmp	.+548    	; 0x262 <__bad_interrupt>
      3e:	00 00       	nop
      40:	10 c1       	rjmp	.+544    	; 0x262 <__bad_interrupt>
      42:	00 00       	nop
      44:	0e c1       	rjmp	.+540    	; 0x262 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c c1       	rjmp	.+536    	; 0x262 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0a c1       	rjmp	.+532    	; 0x262 <__bad_interrupt>
      4e:	00 00       	nop
      50:	08 c1       	rjmp	.+528    	; 0x262 <__bad_interrupt>
      52:	00 00       	nop
      54:	06 c1       	rjmp	.+524    	; 0x262 <__bad_interrupt>
      56:	00 00       	nop
      58:	04 c1       	rjmp	.+520    	; 0x262 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	02 c1       	rjmp	.+516    	; 0x262 <__bad_interrupt>
      5e:	00 00       	nop
      60:	00 c1       	rjmp	.+512    	; 0x262 <__bad_interrupt>
      62:	00 00       	nop
      64:	fe c0       	rjmp	.+508    	; 0x262 <__bad_interrupt>
      66:	00 00       	nop
      68:	fc c0       	rjmp	.+504    	; 0x262 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fa c0       	rjmp	.+500    	; 0x262 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f8 c0       	rjmp	.+496    	; 0x262 <__bad_interrupt>
      72:	00 00       	nop
      74:	f6 c0       	rjmp	.+492    	; 0x262 <__bad_interrupt>
      76:	00 00       	nop
      78:	f4 c0       	rjmp	.+488    	; 0x262 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f2 c0       	rjmp	.+484    	; 0x262 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f0 c0       	rjmp	.+480    	; 0x262 <__bad_interrupt>
      82:	00 00       	nop
      84:	ee c0       	rjmp	.+476    	; 0x262 <__bad_interrupt>
      86:	00 00       	nop
      88:	ec c0       	rjmp	.+472    	; 0x262 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ea c0       	rjmp	.+468    	; 0x262 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e8 c0       	rjmp	.+464    	; 0x262 <__bad_interrupt>
      92:	00 00       	nop
      94:	e6 c0       	rjmp	.+460    	; 0x262 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4284>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4277>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4272>:
     11d:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4270>:
     134:	43 6f 75 6c 64 20 6e 6f 74 20 53 65 74 20 42 6f     Could not Set Bo
     144:	6f 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f 64 65     ot Protocol Mode
     154:	2e 0d 0a 00                                         ....

00000158 <__c.4268>:
     158:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     168:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     178:	6f 6e 2e 0d 0a 00                                   on....

0000017e <__c.4266>:
     17e:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     18e:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4b 65 79 62     Not a Valid Keyb
     19e:	6f 61 72 64 2e 0d 0a 00                             oard....

000001a6 <__c.4264>:
     1a6:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1b6:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1c6:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001d3 <__c.4257>:
     1d3:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1e3:	68 65 64 2e 0d 0a 00                                hed....

000001ea <__c.4252>:
     1ea:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1fa:	0d 0a 00                                            ...

000001fd <__c.4237>:
     1fd:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 6f     .[36mKeyboard Ho
     20d:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     21d:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

00000226 <__ctors_end>:
     226:	11 24       	eor	r1, r1
     228:	1f be       	out	0x3f, r1	; 63
     22a:	cf ef       	ldi	r28, 0xFF	; 255
     22c:	d0 e2       	ldi	r29, 0x20	; 32
     22e:	de bf       	out	0x3e, r29	; 62
     230:	cd bf       	out	0x3d, r28	; 61

00000232 <__do_copy_data>:
     232:	11 e0       	ldi	r17, 0x01	; 1
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b1 e0       	ldi	r27, 0x01	; 1
     238:	e6 e2       	ldi	r30, 0x26	; 38
     23a:	fb e1       	ldi	r31, 0x1B	; 27
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0b bf       	out	0x3b, r16	; 59
     240:	02 c0       	rjmp	.+4      	; 0x246 <__do_copy_data+0x14>
     242:	07 90       	elpm	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	a8 32       	cpi	r26, 0x28	; 40
     248:	b1 07       	cpc	r27, r17
     24a:	d9 f7       	brne	.-10     	; 0x242 <__do_copy_data+0x10>

0000024c <__do_clear_bss>:
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	a8 e2       	ldi	r26, 0x28	; 40
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	01 c0       	rjmp	.+2      	; 0x256 <.do_clear_bss_start>

00000254 <.do_clear_bss_loop>:
     254:	1d 92       	st	X+, r1

00000256 <.do_clear_bss_start>:
     256:	aa 34       	cpi	r26, 0x4A	; 74
     258:	b1 07       	cpc	r27, r17
     25a:	e1 f7       	brne	.-8      	; 0x254 <.do_clear_bss_loop>
     25c:	87 d0       	rcall	.+270    	; 0x36c <main>
     25e:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <_exit>

00000262 <__bad_interrupt>:
     262:	ce ce       	rjmp	.-612    	; 0x0 <__vectors>

00000264 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     264:	9b b1       	in	r25, 0x0b	; 11
     266:	9f 70       	andi	r25, 0x0F	; 15
     268:	98 2b       	or	r25, r24
     26a:	9b b9       	out	0x0b, r25	; 11
			}
     26c:	08 95       	ret

0000026e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     26e:	84 b7       	in	r24, 0x34	; 52
     270:	87 7f       	andi	r24, 0xF7	; 247
     272:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     274:	28 e1       	ldi	r18, 0x18	; 24
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	20 93 60 00 	sts	0x0060, r18
     27e:	10 92 60 00 	sts	0x0060, r1
     282:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	80 e8       	ldi	r24, 0x80	; 128
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	80 93 61 00 	sts	0x0061, r24
     290:	90 93 61 00 	sts	0x0061, r25
     294:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     296:	83 e3       	ldi	r24, 0x33	; 51
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	90 93 cd 00 	sts	0x00CD, r25
     29e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2a2:	86 e0       	ldi	r24, 0x06	; 6
     2a4:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2a8:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2ac:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2b0:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2b2:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2b4:	8a b1       	in	r24, 0x0a	; 10
     2b6:	80 6f       	ori	r24, 0xF0	; 240
     2b8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2ba:	8b b1       	in	r24, 0x0b	; 11
     2bc:	8f 70       	andi	r24, 0x0F	; 15
     2be:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2c0:	cc d4       	rcall	.+2456   	; 0xc5a <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <Serial_CreateStream>

000002ca <KeyboardHost_Task>:

/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
     2ca:	df 93       	push	r29
     2cc:	cf 93       	push	r28
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	28 97       	sbiw	r28, 0x08	; 8
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     2de:	80 91 35 01 	lds	r24, 0x0135
     2e2:	8b 30       	cpi	r24, 0x0B	; 11
     2e4:	d1 f5       	brne	.+116    	; 0x35a <KeyboardHost_Task+0x90>
	  return;

	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	0e 94 17 0a 	call	0x142e	; 0x142e <HID_Host_IsReportReceived>
     2ee:	88 23       	and	r24, r24
     2f0:	a1 f1       	breq	.+104    	; 0x35a <KeyboardHost_Task+0x90>
	{
		USB_KeyboardReport_Data_t KeyboardReport;
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	be 01       	movw	r22, r28
     2f8:	6f 5f       	subi	r22, 0xFF	; 255
     2fa:	7f 4f       	sbci	r23, 0xFF	; 255
     2fc:	0e 94 cd 09 	call	0x139a	; 0x139a <HID_Host_ReceiveReport>

		LEDs_ChangeLEDs(LEDS_LED1, (KeyboardReport.Modifier) ? LEDS_LED1 : 0);
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	88 23       	and	r24, r24
     304:	11 f0       	breq	.+4      	; 0x30a <KeyboardHost_Task+0x40>
     306:	90 e1       	ldi	r25, 0x10	; 16
     308:	01 c0       	rjmp	.+2      	; 0x30c <KeyboardHost_Task+0x42>
     30a:	90 e0       	ldi	r25, 0x00	; 0
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LEDMask,
			                                   const uint8_t ActiveMask)
			{
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
     30c:	8b b1       	in	r24, 0x0b	; 11
     30e:	8f 7e       	andi	r24, 0xEF	; 239
     310:	89 2b       	or	r24, r25
     312:	8b b9       	out	0x0b, r24	; 11

		uint8_t KeyCode = KeyboardReport.KeyCode[0];
     314:	8b 81       	ldd	r24, Y+3	; 0x03

		if (KeyCode)
     316:	88 23       	and	r24, r24
     318:	01 f1       	breq	.+64     	; 0x35a <KeyboardHost_Task+0x90>
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
     31a:	90 e2       	ldi	r25, 0x20	; 32
     31c:	99 b9       	out	0x09, r25	; 9
			char PressedKey = 0;

			LEDs_ToggleLEDs(LEDS_LED2);

			/* Retrieve pressed key character if alphanumeric */
			if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     31e:	98 2f       	mov	r25, r24
     320:	94 50       	subi	r25, 0x04	; 4
     322:	9a 31       	cpi	r25, 0x1A	; 26
     324:	10 f4       	brcc	.+4      	; 0x32a <KeyboardHost_Task+0x60>
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     326:	83 5c       	subi	r24, 0xC3	; 195
     328:	11 c0       	rjmp	.+34     	; 0x34c <KeyboardHost_Task+0x82>
			}
			else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     32a:	98 2f       	mov	r25, r24
     32c:	9e 51       	subi	r25, 0x1E	; 30
     32e:	99 30       	cpi	r25, 0x09	; 9
     330:	10 f4       	brcc	.+4      	; 0x336 <KeyboardHost_Task+0x6c>
			         (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     332:	8d 5e       	subi	r24, 0xED	; 237
     334:	0b c0       	rjmp	.+22     	; 0x34c <KeyboardHost_Task+0x82>
			}
			else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     336:	87 32       	cpi	r24, 0x27	; 39
     338:	31 f0       	breq	.+12     	; 0x346 <KeyboardHost_Task+0x7c>
			{
				PressedKey = '0';
			}
			else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     33a:	8c 32       	cpi	r24, 0x2C	; 44
     33c:	31 f0       	breq	.+12     	; 0x34a <KeyboardHost_Task+0x80>
			{
				PressedKey = ' ';
			}
			else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     33e:	88 32       	cpi	r24, 0x28	; 40
     340:	61 f4       	brne	.+24     	; 0x35a <KeyboardHost_Task+0x90>
			{
				PressedKey = '\n';
     342:	8a e0       	ldi	r24, 0x0A	; 10
     344:	03 c0       	rjmp	.+6      	; 0x34c <KeyboardHost_Task+0x82>
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
			}
			else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
			{
				PressedKey = '0';
     346:	80 e3       	ldi	r24, 0x30	; 48
     348:	01 c0       	rjmp	.+2      	; 0x34c <KeyboardHost_Task+0x82>
			}
			else if (KeyCode == HID_KEYBOARD_SC_SPACE)
			{
				PressedKey = ' ';
     34a:	80 e2       	ldi	r24, 0x20	; 32
			{
				PressedKey = '\n';
			}

			if (PressedKey)
			  putchar(PressedKey);
     34c:	60 91 46 01 	lds	r22, 0x0146
     350:	70 91 47 01 	lds	r23, 0x0147
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 97 0a 	call	0x152e	; 0x152e <fputc>
		}
	}
}
     35a:	28 96       	adiw	r28, 0x08	; 8
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	cf 91       	pop	r28
     368:	df 91       	pop	r29
     36a:	08 95       	ret

0000036c <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     36c:	80 df       	rcall	.-256    	; 0x26e <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Keyboard Host Demo running.\r\n" ESC_FG_WHITE));
     36e:	8d ef       	ldi	r24, 0xFD	; 253
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     376:	80 e1       	ldi	r24, 0x10	; 16
     378:	75 df       	rcall	.-278    	; 0x264 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     37a:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		KeyboardHost_Task();
     37c:	a6 df       	rcall	.-180    	; 0x2ca <KeyboardHost_Task>

		HID_Host_USBTask(&Keyboard_HID_Interface);
		USB_USBTask();
     37e:	03 d7       	rcall	.+3590   	; 0x1186 <USB_USBTask>
     380:	fd cf       	rjmp	.-6      	; 0x37c <main+0x10>

00000382 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     382:	8a ee       	ldi	r24, 0xEA	; 234
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     38a:	80 ea       	ldi	r24, 0xA0	; 160
}
     38c:	6b cf       	rjmp	.-298    	; 0x264 <LEDs_SetAllLEDs>

0000038e <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     38e:	83 ed       	ldi	r24, 0xD3	; 211
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     396:	80 e1       	ldi	r24, 0x10	; 16
}
     398:	65 cf       	rjmp	.-310    	; 0x264 <LEDs_SetAllLEDs>

0000039a <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	df 93       	push	r29
     3a0:	cf 93       	push	r28
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	c2 50       	subi	r28, 0x02	; 2
     3a8:	d2 40       	sbci	r29, 0x02	; 2
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3b4:	80 ea       	ldi	r24, 0xA0	; 160
     3b6:	56 df       	rcall	.-340    	; 0x264 <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3b8:	8e 01       	movw	r16, r28
     3ba:	0d 5f       	subi	r16, 0xFD	; 253
     3bc:	1f 4f       	sbci	r17, 0xFF	; 255
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	be 01       	movw	r22, r28
     3c2:	6f 5f       	subi	r22, 0xFF	; 255
     3c4:	7f 4f       	sbci	r23, 0xFF	; 255
     3c6:	a8 01       	movw	r20, r16
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	32 e0       	ldi	r19, 0x02	; 2
     3cc:	f4 d4       	rcall	.+2536   	; 0xdb6 <USB_Host_GetDeviceConfigDescriptor>
     3ce:	88 23       	and	r24, r24
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     3d2:	86 ea       	ldi	r24, 0xA6	; 166
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	11 c0       	rjmp	.+34     	; 0x3fa <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Keyboard_HID_Interface,
     3d8:	69 81       	ldd	r22, Y+1	; 0x01
     3da:	7a 81       	ldd	r23, Y+2	; 0x02
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	a8 01       	movw	r20, r16
     3e2:	06 d7       	rcall	.+3596   	; 0x11f0 <HID_Host_ConfigurePipes>
     3e4:	88 23       	and	r24, r24
     3e6:	19 f0       	breq	.+6      	; 0x3ee <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Keyboard.\r\n"));
     3e8:	8e e7       	ldi	r24, 0x7E	; 126
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	06 c0       	rjmp	.+12     	; 0x3fa <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	a5 d6       	rcall	.+3402   	; 0x113c <USB_Host_SetDeviceConfiguration>
     3f2:	88 23       	and	r24, r24
     3f4:	31 f0       	breq	.+12     	; 0x402 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     3f6:	88 e5       	ldi	r24, 0x58	; 88
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3fe:	80 e9       	ldi	r24, 0x90	; 144
     400:	14 c0       	rjmp	.+40     	; 0x42a <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
		return;
	}

	if (HID_Host_SetBootProtocol(&Keyboard_HID_Interface) != 0)
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 35 0a 	call	0x146a	; 0x146a <HID_Host_SetBootProtocol>
     40a:	88 23       	and	r24, r24
     40c:	49 f0       	breq	.+18     	; 0x420 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
	{
		puts_P(PSTR("Could not Set Boot Protocol Mode.\r\n"));
     40e:	84 e3       	ldi	r24, 0x34	; 52
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     416:	80 e9       	ldi	r24, 0x90	; 144
     418:	25 df       	rcall	.-438    	; 0x264 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	8f d6       	rcall	.+3358   	; 0x113c <USB_Host_SetDeviceConfiguration>
		return;
     41e:	06 c0       	rjmp	.+12     	; 0x42c <EVENT_USB_Host_DeviceEnumerationComplete+0x92>
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     420:	8d e1       	ldi	r24, 0x1D	; 29
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     428:	80 e6       	ldi	r24, 0x60	; 96
     42a:	1c df       	rcall	.-456    	; 0x264 <LEDs_SetAllLEDs>
}
     42c:	ce 5f       	subi	r28, 0xFE	; 254
     42e:	dd 4f       	sbci	r29, 0xFD	; 253
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	cf 91       	pop	r28
     43c:	df 91       	pop	r29
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	08 95       	ret

00000444 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     444:	df 93       	push	r29
     446:	cf 93       	push	r28
     448:	0f 92       	push	r0
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     44e:	89 83       	std	Y+1, r24	; 0x01
     450:	9c d3       	rcall	.+1848   	; 0xb8a <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     452:	00 d0       	rcall	.+0      	; 0x454 <EVENT_USB_Host_HostError+0x10>
     454:	00 d0       	rcall	.+0      	; 0x456 <EVENT_USB_Host_HostError+0x12>
     456:	ed b7       	in	r30, 0x3d	; 61
     458:	fe b7       	in	r31, 0x3e	; 62
     45a:	31 96       	adiw	r30, 0x01	; 1
     45c:	2e ee       	ldi	r18, 0xEE	; 238
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	ad b7       	in	r26, 0x3d	; 61
     462:	be b7       	in	r27, 0x3e	; 62
     464:	12 96       	adiw	r26, 0x02	; 2
     466:	3c 93       	st	X, r19
     468:	2e 93       	st	-X, r18
     46a:	11 97       	sbiw	r26, 0x01	; 1
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	82 83       	std	Z+2, r24	; 0x02
     470:	13 82       	std	Z+3, r1	; 0x03
     472:	0e 94 c3 0a 	call	0x1586	; 0x1586 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	80 e9       	ldi	r24, 0x90	; 144
     480:	f1 de       	rcall	.-542    	; 0x264 <LEDs_SetAllLEDs>
     482:	ff cf       	rjmp	.-2      	; 0x482 <EVENT_USB_Host_HostError+0x3e>

00000484 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     484:	90 91 35 01 	lds	r25, 0x0135
     488:	2d b7       	in	r18, 0x3d	; 61
     48a:	3e b7       	in	r19, 0x3e	; 62
     48c:	28 50       	subi	r18, 0x08	; 8
     48e:	30 40       	sbci	r19, 0x00	; 0
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	f8 94       	cli
     494:	3e bf       	out	0x3e, r19	; 62
     496:	0f be       	out	0x3f, r0	; 63
     498:	2d bf       	out	0x3d, r18	; 61
     49a:	ed b7       	in	r30, 0x3d	; 61
     49c:	fe b7       	in	r31, 0x3e	; 62
     49e:	31 96       	adiw	r30, 0x01	; 1
     4a0:	28 e9       	ldi	r18, 0x98	; 152
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	ad b7       	in	r26, 0x3d	; 61
     4a6:	be b7       	in	r27, 0x3e	; 62
     4a8:	12 96       	adiw	r26, 0x02	; 2
     4aa:	3c 93       	st	X, r19
     4ac:	2e 93       	st	-X, r18
     4ae:	11 97       	sbiw	r26, 0x01	; 1
     4b0:	82 83       	std	Z+2, r24	; 0x02
     4b2:	13 82       	std	Z+3, r1	; 0x03
     4b4:	64 83       	std	Z+4, r22	; 0x04
     4b6:	15 82       	std	Z+5, r1	; 0x05
     4b8:	96 83       	std	Z+6, r25	; 0x06
     4ba:	17 82       	std	Z+7, r1	; 0x07
     4bc:	0e 94 c3 0a 	call	0x1586	; 0x1586 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4c0:	2d b7       	in	r18, 0x3d	; 61
     4c2:	3e b7       	in	r19, 0x3e	; 62
     4c4:	28 5f       	subi	r18, 0xF8	; 248
     4c6:	3f 4f       	sbci	r19, 0xFF	; 255
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	3e bf       	out	0x3e, r19	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	2d bf       	out	0x3d, r18	; 61
     4d2:	80 e9       	ldi	r24, 0x90	; 144
}
     4d4:	c7 ce       	rjmp	.-626    	; 0x264 <LEDs_SetAllLEDs>

000004d6 <USB_GetHIDReportSize>:
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     4d6:	e4 2f       	mov	r30, r20
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
     4da:	ee 0f       	add	r30, r30
     4dc:	ff 1f       	adc	r31, r31
     4de:	ef 56       	subi	r30, 0x6F	; 111
     4e0:	fc 4f       	sbci	r31, 0xFC	; 252
     4e2:	e8 0f       	add	r30, r24
     4e4:	f9 1f       	adc	r31, r25
     4e6:	80 57       	subi	r24, 0x70	; 112
     4e8:	9c 4f       	sbci	r25, 0xFC	; 252
     4ea:	4a e0       	ldi	r20, 0x0A	; 10
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     4ec:	20 81       	ld	r18, Z
     4ee:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
     4f0:	dc 01       	movw	r26, r24
     4f2:	5c 91       	ld	r21, X
     4f4:	56 17       	cp	r21, r22
     4f6:	91 f4       	brne	.+36     	; 0x51c <USB_GetHIDReportSize+0x46>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
     4f8:	a9 01       	movw	r20, r18
     4fa:	47 70       	andi	r20, 0x07	; 7
     4fc:	50 70       	andi	r21, 0x00	; 0
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	41 15       	cp	r20, r1
     504:	51 05       	cpc	r21, r1
     506:	11 f4       	brne	.+4      	; 0x50c <USB_GetHIDReportSize+0x36>
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	43 e0       	ldi	r20, 0x03	; 3
     50e:	36 95       	lsr	r19
     510:	27 95       	ror	r18
     512:	4a 95       	dec	r20
     514:	e1 f7       	brne	.-8      	; 0x50e <USB_GetHIDReportSize+0x38>
     516:	28 0f       	add	r18, r24
     518:	39 1f       	adc	r19, r25
     51a:	07 c0       	rjmp	.+14     	; 0x52a <USB_GetHIDReportSize+0x54>
     51c:	41 50       	subi	r20, 0x01	; 1
     51e:	37 96       	adiw	r30, 0x07	; 7
     520:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
     522:	44 23       	and	r20, r20
     524:	19 f7       	brne	.-58     	; 0x4ec <USB_GetHIDReportSize+0x16>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
}
     52a:	c9 01       	movw	r24, r18
     52c:	08 95       	ret

0000052e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     52e:	80 91 9e 00 	lds	r24, 0x009E
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	81 70       	andi	r24, 0x01	; 1
     536:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     538:	20 91 a0 00 	lds	r18, 0x00A0
     53c:	2d 7f       	andi	r18, 0xFD	; 253
     53e:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     542:	20 91 9e 00 	lds	r18, 0x009E
     546:	22 60       	ori	r18, 0x02	; 2
     548:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     54c:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     550:	21 fd       	sbrc	r18, 1
     552:	fc cf       	rjmp	.-8      	; 0x54c <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     554:	20 91 9e 00 	lds	r18, 0x009E
     558:	21 60       	ori	r18, 0x01	; 1
     55a:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     55e:	10 92 2b 01 	sts	0x012B, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     562:	20 91 a0 00 	lds	r18, 0x00A0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	20 72       	andi	r18, 0x20	; 32
     56a:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     56c:	40 91 a0 00 	lds	r20, 0x00A0
     570:	4f 7d       	andi	r20, 0xDF	; 223
     572:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     576:	40 91 9f 00 	lds	r20, 0x009F
     57a:	4f 7d       	andi	r20, 0xDF	; 223
     57c:	40 93 9f 00 	sts	0x009F, r20
     580:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     582:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     586:	55 ff       	sbrs	r21, 5
     588:	0b c0       	rjmp	.+22     	; 0x5a0 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     58a:	40 91 9f 00 	lds	r20, 0x009F
     58e:	4f 7d       	andi	r20, 0xDF	; 223
     590:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     594:	40 91 9f 00 	lds	r20, 0x009F
     598:	4d 7f       	andi	r20, 0xFD	; 253
     59a:	40 93 9f 00 	sts	0x009F, r20
     59e:	08 c0       	rjmp	.+16     	; 0x5b0 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a0:	ef ec       	ldi	r30, 0xCF	; 207
     5a2:	f7 e0       	ldi	r31, 0x07	; 7
     5a4:	31 97       	sbiw	r30, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <USB_Host_ResetDevice+0x76>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <USB_Host_ResetDevice+0x7c>
     5aa:	00 00       	nop
     5ac:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     5ae:	49 f7       	brne	.-46     	; 0x582 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     5b0:	21 15       	cp	r18, r1
     5b2:	31 05       	cpc	r19, r1
     5b4:	29 f0       	breq	.+10     	; 0x5c0 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     5b6:	20 91 a0 00 	lds	r18, 0x00A0
     5ba:	20 62       	ori	r18, 0x20	; 32
     5bc:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     5c0:	00 97       	sbiw	r24, 0x00	; 0
     5c2:	29 f4       	brne	.+10     	; 0x5ce <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5c4:	80 91 9e 00 	lds	r24, 0x009E
     5c8:	8e 7f       	andi	r24, 0xFE	; 254
     5ca:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     5ce:	80 91 a0 00 	lds	r24, 0x00A0
     5d2:	82 60       	ori	r24, 0x02	; 2
     5d4:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     5d8:	08 95       	ret

000005da <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5da:	40 91 9e 00 	lds	r20, 0x009E
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	41 70       	andi	r20, 0x01	; 1
     5e2:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5e4:	20 91 a0 00 	lds	r18, 0x00A0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	20 72       	andi	r18, 0x20	; 32
     5ec:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5ee:	90 91 a0 00 	lds	r25, 0x00A0
     5f2:	9f 7d       	andi	r25, 0xDF	; 223
     5f4:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5f8:	90 91 9f 00 	lds	r25, 0x009F
     5fc:	9f 7d       	andi	r25, 0xDF	; 223
     5fe:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     602:	90 91 9e 00 	lds	r25, 0x009E
     606:	91 60       	ori	r25, 0x01	; 1
     608:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     60c:	26 c0       	rjmp	.+76     	; 0x65a <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     60e:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     612:	95 ff       	sbrs	r25, 5
     614:	06 c0       	rjmp	.+12     	; 0x622 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     616:	90 91 9f 00 	lds	r25, 0x009F
     61a:	9f 7d       	andi	r25, 0xDF	; 223
     61c:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     620:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     622:	90 91 35 01 	lds	r25, 0x0135
     626:	91 30       	cpi	r25, 0x01	; 1
     628:	d9 f0       	breq	.+54     	; 0x660 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     62a:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     62e:	94 ff       	sbrs	r25, 4
     630:	09 c0       	rjmp	.+18     	; 0x644 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     632:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     636:	80 91 a6 00 	lds	r24, 0x00A6
     63a:	8f 7e       	andi	r24, 0xEF	; 239
     63c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     640:	82 e0       	ldi	r24, 0x02	; 2

			break;
     642:	0f c0       	rjmp	.+30     	; 0x662 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     644:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     648:	91 ff       	sbrs	r25, 1
     64a:	07 c0       	rjmp	.+14     	; 0x65a <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     64c:	80 91 a6 00 	lds	r24, 0x00A6
     650:	8d 7f       	andi	r24, 0xFD	; 253
     652:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     656:	83 e0       	ldi	r24, 0x03	; 3

			break;
     658:	04 c0       	rjmp	.+8      	; 0x662 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     65a:	88 23       	and	r24, r24
     65c:	c1 f6       	brne	.-80     	; 0x60e <USB_Host_WaitMS+0x34>
     65e:	01 c0       	rjmp	.+2      	; 0x662 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     660:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     662:	41 15       	cp	r20, r1
     664:	51 05       	cpc	r21, r1
     666:	29 f4       	brne	.+10     	; 0x672 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     668:	90 91 9e 00 	lds	r25, 0x009E
     66c:	9e 7f       	andi	r25, 0xFE	; 254
     66e:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     672:	21 15       	cp	r18, r1
     674:	31 05       	cpc	r19, r1
     676:	29 f0       	breq	.+10     	; 0x682 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     678:	90 91 a0 00 	lds	r25, 0x00A0
     67c:	90 62       	ori	r25, 0x20	; 32
     67e:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     682:	08 95       	ret

00000684 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	28 97       	sbiw	r28, 0x08	; 8
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     69c:	80 91 35 01 	lds	r24, 0x0135
     6a0:	85 30       	cpi	r24, 0x05	; 5
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <USB_Host_ProcessNextHostState+0x22>
     6a4:	99 c0       	rjmp	.+306    	; 0x7d8 <USB_Host_ProcessNextHostState+0x154>
     6a6:	86 30       	cpi	r24, 0x06	; 6
     6a8:	68 f4       	brcc	.+26     	; 0x6c4 <USB_Host_ProcessNextHostState+0x40>
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	c1 f1       	breq	.+112    	; 0x71e <USB_Host_ProcessNextHostState+0x9a>
     6ae:	83 30       	cpi	r24, 0x03	; 3
     6b0:	18 f4       	brcc	.+6      	; 0x6b8 <USB_Host_ProcessNextHostState+0x34>
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f0       	breq	.+40     	; 0x6de <USB_Host_ProcessNextHostState+0x5a>
     6b6:	04 c1       	rjmp	.+520    	; 0x8c0 <USB_Host_ProcessNextHostState+0x23c>
     6b8:	83 30       	cpi	r24, 0x03	; 3
     6ba:	d9 f1       	breq	.+118    	; 0x732 <USB_Host_ProcessNextHostState+0xae>
     6bc:	84 30       	cpi	r24, 0x04	; 4
     6be:	09 f0       	breq	.+2      	; 0x6c2 <USB_Host_ProcessNextHostState+0x3e>
     6c0:	ff c0       	rjmp	.+510    	; 0x8c0 <USB_Host_ProcessNextHostState+0x23c>
     6c2:	62 c0       	rjmp	.+196    	; 0x788 <USB_Host_ProcessNextHostState+0x104>
     6c4:	87 30       	cpi	r24, 0x07	; 7
     6c6:	09 f4       	brne	.+2      	; 0x6ca <USB_Host_ProcessNextHostState+0x46>
     6c8:	9e c0       	rjmp	.+316    	; 0x806 <USB_Host_ProcessNextHostState+0x182>
     6ca:	87 30       	cpi	r24, 0x07	; 7
     6cc:	08 f4       	brcc	.+2      	; 0x6d0 <USB_Host_ProcessNextHostState+0x4c>
     6ce:	8f c0       	rjmp	.+286    	; 0x7ee <USB_Host_ProcessNextHostState+0x16a>
     6d0:	88 30       	cpi	r24, 0x08	; 8
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <USB_Host_ProcessNextHostState+0x52>
     6d4:	b8 c0       	rjmp	.+368    	; 0x846 <USB_Host_ProcessNextHostState+0x1c2>
     6d6:	89 30       	cpi	r24, 0x09	; 9
     6d8:	09 f0       	breq	.+2      	; 0x6dc <USB_Host_ProcessNextHostState+0x58>
     6da:	f2 c0       	rjmp	.+484    	; 0x8c0 <USB_Host_ProcessNextHostState+0x23c>
     6dc:	d9 c0       	rjmp	.+434    	; 0x890 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     6de:	00 91 29 01 	lds	r16, 0x0129
     6e2:	10 91 2a 01 	lds	r17, 0x012A
     6e6:	01 15       	cp	r16, r1
     6e8:	11 05       	cpc	r17, r1
     6ea:	09 f4       	brne	.+2      	; 0x6ee <USB_Host_ProcessNextHostState+0x6a>
     6ec:	e9 c0       	rjmp	.+466    	; 0x8c0 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	74 df       	rcall	.-280    	; 0x5da <USB_Host_WaitMS>
     6f2:	68 2f       	mov	r22, r24
     6f4:	88 23       	and	r24, r24
     6f6:	31 f0       	breq	.+12     	; 0x704 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     6f8:	80 91 28 01 	lds	r24, 0x0128
     6fc:	80 93 35 01 	sts	0x0135, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     700:	81 e0       	ldi	r24, 0x01	; 1
					break;
     702:	d2 c0       	rjmp	.+420    	; 0x8a8 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     704:	01 50       	subi	r16, 0x01	; 1
     706:	10 40       	sbci	r17, 0x00	; 0
     708:	10 93 2a 01 	sts	0x012A, r17
     70c:	00 93 29 01 	sts	0x0129, r16
     710:	01 15       	cp	r16, r1
     712:	11 05       	cpc	r17, r1
     714:	09 f0       	breq	.+2      	; 0x718 <USB_Host_ProcessNextHostState+0x94>
     716:	d4 c0       	rjmp	.+424    	; 0x8c0 <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     718:	80 91 28 01 	lds	r24, 0x0128
     71c:	07 c0       	rjmp	.+14     	; 0x72c <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     71e:	88 ee       	ldi	r24, 0xE8	; 232
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	90 93 2a 01 	sts	0x012A, r25
     726:	80 93 29 01 	sts	0x0129, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	80 93 35 01 	sts	0x0135, r24
			break;
     730:	c7 c0       	rjmp	.+398    	; 0x8c0 <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     732:	80 91 29 01 	lds	r24, 0x0129
     736:	90 91 2a 01 	lds	r25, 0x012A
     73a:	9c 01       	movw	r18, r24
     73c:	21 50       	subi	r18, 0x01	; 1
     73e:	30 40       	sbci	r19, 0x00	; 0
     740:	30 93 2a 01 	sts	0x012A, r19
     744:	20 93 29 01 	sts	0x0129, r18
     748:	00 97       	sbiw	r24, 0x00	; 0
     74a:	39 f0       	breq	.+14     	; 0x75a <USB_Host_ProcessNextHostState+0xd6>
     74c:	8f ec       	ldi	r24, 0xCF	; 207
     74e:	97 e0       	ldi	r25, 0x07	; 7
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <USB_Host_ProcessNextHostState+0xcc>
     754:	00 c0       	rjmp	.+0      	; 0x756 <USB_Host_ProcessNextHostState+0xd2>
     756:	00 00       	nop
     758:	b3 c0       	rjmp	.+358    	; 0x8c0 <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     75a:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     75c:	80 91 d8 00 	lds	r24, 0x00D8
     760:	80 61       	ori	r24, 0x10	; 16
     762:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     766:	80 91 dd 00 	lds	r24, 0x00DD
     76a:	8b 7f       	andi	r24, 0xFB	; 251
     76c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     770:	80 91 d7 00 	lds	r24, 0x00D7
     774:	80 61       	ori	r24, 0x10	; 16
     776:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     77a:	80 91 dd 00 	lds	r24, 0x00DD
     77e:	82 60       	ori	r24, 0x02	; 2
     780:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     784:	84 e0       	ldi	r24, 0x04	; 4
     786:	d2 cf       	rjmp	.-92     	; 0x72c <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     788:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     78c:	80 ff       	sbrs	r24, 0
     78e:	98 c0       	rjmp	.+304    	; 0x8c0 <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     790:	80 91 9f 00 	lds	r24, 0x009F
     794:	8e 7f       	andi	r24, 0xFE	; 254
     796:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     79a:	80 91 9f 00 	lds	r24, 0x009F
     79e:	8d 7f       	andi	r24, 0xFD	; 253
     7a0:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7a4:	80 91 df 00 	lds	r24, 0x00DF
     7a8:	8d 7f       	andi	r24, 0xFD	; 253
     7aa:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     7ae:	80 91 de 00 	lds	r24, 0x00DE
     7b2:	82 60       	ori	r24, 0x02	; 2
     7b4:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7b8:	80 91 9e 00 	lds	r24, 0x009E
     7bc:	81 60       	ori	r24, 0x01	; 1
     7be:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     7c2:	7a d1       	rcall	.+756    	; 0xab8 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7c4:	10 92 35 01 	sts	0x0135, r1
     7c8:	84 e6       	ldi	r24, 0x64	; 100
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	90 93 2a 01 	sts	0x012A, r25
     7d0:	80 93 29 01 	sts	0x0129, r24
     7d4:	85 e0       	ldi	r24, 0x05	; 5
     7d6:	59 c0       	rjmp	.+178    	; 0x88a <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7d8:	aa de       	rcall	.-684    	; 0x52e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7da:	10 92 35 01 	sts	0x0135, r1
     7de:	88 ec       	ldi	r24, 0xC8	; 200
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	90 93 2a 01 	sts	0x012A, r25
     7e6:	80 93 29 01 	sts	0x0129, r24
     7ea:	86 e0       	ldi	r24, 0x06	; 6
     7ec:	4e c0       	rjmp	.+156    	; 0x88a <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	20 e4       	ldi	r18, 0x40	; 64
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	01 e0       	ldi	r16, 0x01	; 1
     7fa:	d0 d0       	rcall	.+416    	; 0x99c <Pipe_ConfigurePipe>
     7fc:	88 23       	and	r24, r24
     7fe:	09 f4       	brne	.+2      	; 0x802 <USB_Host_ProcessNextHostState+0x17e>
     800:	4f c0       	rjmp	.+158    	; 0x8a0 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     802:	87 e0       	ldi	r24, 0x07	; 7
     804:	93 cf       	rjmp	.-218    	; 0x72c <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     806:	ad e2       	ldi	r26, 0x2D	; 45
     808:	b1 e0       	ldi	r27, 0x01	; 1
     80a:	ef e1       	ldi	r30, 0x1F	; 31
     80c:	f1 e0       	ldi	r31, 0x01	; 1
     80e:	88 e0       	ldi	r24, 0x08	; 8
     810:	01 90       	ld	r0, Z+
     812:	0d 92       	st	X+, r0
     814:	81 50       	subi	r24, 0x01	; 1
     816:	e1 f7       	brne	.-8      	; 0x810 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     818:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	8e d3       	rcall	.+1820   	; 0xf3e <USB_Host_SendControlRequest>
     822:	68 2f       	mov	r22, r24
     824:	88 23       	and	r24, r24
     826:	09 f0       	breq	.+2      	; 0x82a <USB_Host_ProcessNextHostState+0x1a6>
     828:	3e c0       	rjmp	.+124    	; 0x8a6 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     82a:	88 85       	ldd	r24, Y+8	; 0x08
     82c:	80 93 27 01 	sts	0x0127, r24

			USB_Host_ResetDevice();
     830:	7e de       	rcall	.-772    	; 0x52e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     832:	10 92 35 01 	sts	0x0135, r1
     836:	88 ec       	ldi	r24, 0xC8	; 200
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	90 93 2a 01 	sts	0x012A, r25
     83e:	80 93 29 01 	sts	0x0129, r24
     842:	88 e0       	ldi	r24, 0x08	; 8
     844:	22 c0       	rjmp	.+68     	; 0x88a <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     846:	20 91 27 01 	lds	r18, 0x0127
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	01 e0       	ldi	r16, 0x01	; 1
     854:	a3 d0       	rcall	.+326    	; 0x99c <Pipe_ConfigurePipe>
     856:	88 23       	and	r24, r24
     858:	19 f1       	breq	.+70     	; 0x8a0 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     85a:	ad e2       	ldi	r26, 0x2D	; 45
     85c:	b1 e0       	ldi	r27, 0x01	; 1
     85e:	e7 e1       	ldi	r30, 0x17	; 23
     860:	f1 e0       	ldi	r31, 0x01	; 1
     862:	88 e0       	ldi	r24, 0x08	; 8
     864:	01 90       	ld	r0, Z+
     866:	0d 92       	st	X+, r0
     868:	81 50       	subi	r24, 0x01	; 1
     86a:	e1 f7       	brne	.-8      	; 0x864 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	66 d3       	rcall	.+1740   	; 0xf3e <USB_Host_SendControlRequest>
     872:	68 2f       	mov	r22, r24
     874:	88 23       	and	r24, r24
     876:	b9 f4       	brne	.+46     	; 0x8a6 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     878:	10 92 35 01 	sts	0x0135, r1
     87c:	84 e6       	ldi	r24, 0x64	; 100
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	90 93 2a 01 	sts	0x012A, r25
     884:	80 93 29 01 	sts	0x0129, r24
     888:	89 e0       	ldi	r24, 0x09	; 9
     88a:	80 93 28 01 	sts	0x0128, r24
			break;
     88e:	18 c0       	rjmp	.+48     	; 0x8c0 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     896:	8a e0       	ldi	r24, 0x0A	; 10
     898:	80 93 35 01 	sts	0x0135, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     89c:	7e dd       	rcall	.-1284   	; 0x39a <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     89e:	10 c0       	rjmp	.+32     	; 0x8c0 <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     8a0:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     8a2:	84 e0       	ldi	r24, 0x04	; 4
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     8a6:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8a8:	90 91 35 01 	lds	r25, 0x0135
     8ac:	91 30       	cpi	r25, 0x01	; 1
     8ae:	41 f0       	breq	.+16     	; 0x8c0 <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8b0:	e9 dd       	rcall	.-1070   	; 0x484 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     8b2:	80 91 dd 00 	lds	r24, 0x00DD
     8b6:	81 60       	ori	r24, 0x01	; 1
     8b8:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     8bc:	68 dd       	rcall	.-1328   	; 0x38e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     8be:	7d d1       	rcall	.+762    	; 0xbba <USB_ResetInterface>
	}
}
     8c0:	28 96       	adiw	r28, 0x08	; 8
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	cf 91       	pop	r28
     8ce:	df 91       	pop	r29
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	08 95       	ret

000008d6 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     8d6:	8f 92       	push	r8
     8d8:	9f 92       	push	r9
     8da:	bf 92       	push	r11
     8dc:	cf 92       	push	r12
     8de:	df 92       	push	r13
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	df 93       	push	r29
     8ea:	cf 93       	push	r28
     8ec:	0f 92       	push	r0
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	e8 2e       	mov	r14, r24
     8f4:	4b 01       	movw	r8, r22
     8f6:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     8f8:	80 91 aa 00 	lds	r24, 0x00AA
     8fc:	8f 7c       	andi	r24, 0xCF	; 207
     8fe:	80 61       	ori	r24, 0x10	; 16
     900:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     904:	99 83       	std	Y+1, r25	; 0x01
     906:	12 d1       	rcall	.+548    	; 0xb2c <Pipe_WaitUntilReady>
     908:	b8 2e       	mov	r11, r24
     90a:	99 81       	ldd	r25, Y+1	; 0x01
     90c:	88 23       	and	r24, r24
     90e:	c1 f5       	brne	.+112    	; 0x980 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     910:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     912:	01 15       	cp	r16, r1
     914:	11 05       	cpc	r17, r1
     916:	39 f0       	breq	.+14     	; 0x926 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     918:	f8 01       	movw	r30, r16
     91a:	20 81       	ld	r18, Z
     91c:	31 81       	ldd	r19, Z+1	; 0x01
     91e:	82 1a       	sub	r8, r18
     920:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     922:	e2 0e       	add	r14, r18
     924:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     926:	cc 24       	eor	r12, r12
     928:	dd 24       	eor	r13, r13
     92a:	25 c0       	rjmp	.+74     	; 0x976 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     92c:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     930:	85 fd       	sbrc	r24, 5
     932:	16 c0       	rjmp	.+44     	; 0x960 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     934:	80 91 a6 00 	lds	r24, 0x00A6
     938:	8e 77       	andi	r24, 0x7E	; 126
     93a:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     93e:	01 15       	cp	r16, r1
     940:	11 05       	cpc	r17, r1
     942:	51 f0       	breq	.+20     	; 0x958 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     944:	f8 01       	movw	r30, r16
     946:	80 81       	ld	r24, Z
     948:	91 81       	ldd	r25, Z+1	; 0x01
     94a:	8c 0d       	add	r24, r12
     94c:	9d 1d       	adc	r25, r13
     94e:	91 83       	std	Z+1, r25	; 0x01
     950:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     952:	44 e0       	ldi	r20, 0x04	; 4
     954:	b4 2e       	mov	r11, r20
     956:	14 c0       	rjmp	.+40     	; 0x980 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     958:	e9 d0       	rcall	.+466    	; 0xb2c <Pipe_WaitUntilReady>
     95a:	88 23       	and	r24, r24
     95c:	61 f0       	breq	.+24     	; 0x976 <Pipe_Read_Stream_LE+0xa0>
     95e:	0f c0       	rjmp	.+30     	; 0x97e <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     960:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     964:	f7 01       	movw	r30, r14
     966:	81 93       	st	Z+, r24
     968:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     96a:	08 94       	sec
     96c:	81 08       	sbc	r8, r1
     96e:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     970:	08 94       	sec
     972:	c1 1c       	adc	r12, r1
     974:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     976:	81 14       	cp	r8, r1
     978:	91 04       	cpc	r9, r1
     97a:	c1 f6       	brne	.-80     	; 0x92c <Pipe_Read_Stream_LE+0x56>
     97c:	01 c0       	rjmp	.+2      	; 0x980 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     97e:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     980:	8b 2d       	mov	r24, r11
     982:	0f 90       	pop	r0
     984:	cf 91       	pop	r28
     986:	df 91       	pop	r29
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	bf 90       	pop	r11
     996:	9f 90       	pop	r9
     998:	8f 90       	pop	r8
     99a:	08 95       	ret

0000099c <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     99c:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     99e:	58 2f       	mov	r21, r24
     9a0:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     9a2:	87 ff       	sbrs	r24, 7
     9a4:	02 c0       	rjmp	.+4      	; 0x9aa <Pipe_ConfigurePipe+0xe>
     9a6:	80 e1       	ldi	r24, 0x10	; 16
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <Pipe_ConfigurePipe+0x10>
     9aa:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     9ac:	57 30       	cpi	r21, 0x07	; 7
     9ae:	08 f0       	brcs	.+2      	; 0x9b2 <Pipe_ConfigurePipe+0x16>
     9b0:	59 c0       	rjmp	.+178    	; 0xa64 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     9b2:	66 23       	and	r22, r22
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     9b6:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     9b8:	4f 70       	andi	r20, 0x0F	; 15
     9ba:	62 95       	swap	r22
     9bc:	66 0f       	add	r22, r22
     9be:	66 0f       	add	r22, r22
     9c0:	60 7c       	andi	r22, 0xC0	; 192
     9c2:	64 2b       	or	r22, r20
     9c4:	68 2b       	or	r22, r24
     9c6:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9c8:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9ca:	84 2f       	mov	r24, r20
     9cc:	8f 70       	andi	r24, 0x0F	; 15
     9ce:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     9d2:	45 17       	cp	r20, r21
     9d4:	a1 f4       	brne	.+40     	; 0x9fe <Pipe_ConfigurePipe+0x62>
     9d6:	88 e0       	ldi	r24, 0x08	; 8
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9de:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9e4:	82 17       	cp	r24, r18
     9e6:	93 07       	cpc	r25, r19
     9e8:	10 f4       	brcc	.+4      	; 0x9ee <Pipe_ConfigurePipe+0x52>
     9ea:	75 30       	cpi	r23, 0x05	; 5
     9ec:	c1 f7       	brne	.-16     	; 0x9de <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     9ee:	87 2f       	mov	r24, r23
     9f0:	82 95       	swap	r24
     9f2:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9f4:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     9f6:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     9f8:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     9fa:	e0 e0       	ldi	r30, 0x00	; 0
     9fc:	08 c0       	rjmp	.+16     	; 0xa0e <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     9fe:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a02:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a06:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     a0a:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a0e:	81 ff       	sbrs	r24, 1
     a10:	20 c0       	rjmp	.+64     	; 0xa52 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a12:	90 91 a9 00 	lds	r25, 0x00A9
     a16:	9e 7f       	andi	r25, 0xFE	; 254
     a18:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a1c:	90 91 ab 00 	lds	r25, 0x00AB
     a20:	9d 7f       	andi	r25, 0xFD	; 253
     a22:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a26:	90 91 a9 00 	lds	r25, 0x00A9
     a2a:	91 60       	ori	r25, 0x01	; 1
     a2c:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a30:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     a34:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     a38:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     a3c:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a40:	80 91 a9 00 	lds	r24, 0x00A9
     a44:	80 62       	ori	r24, 0x20	; 32
     a46:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a4a:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     a4e:	87 ff       	sbrs	r24, 7
     a50:	09 c0       	rjmp	.+18     	; 0xa64 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a52:	4f 5f       	subi	r20, 0xFF	; 255
     a54:	47 30       	cpi	r20, 0x07	; 7
     a56:	09 f0       	breq	.+2      	; 0xa5a <Pipe_ConfigurePipe+0xbe>
     a58:	b8 cf       	rjmp	.-144    	; 0x9ca <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a5a:	5f 70       	andi	r21, 0x0F	; 15
     a5c:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     a64:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     a66:	0f 91       	pop	r16
     a68:	08 95       	ret

00000a6a <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     a6a:	ef 92       	push	r14
     a6c:	ff 92       	push	r15
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     a78:	e8 2e       	mov	r14, r24
     a7a:	e7 01       	movw	r28, r14
     a7c:	7e 01       	movw	r14, r28
     a7e:	f9 2e       	mov	r15, r25
     a80:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a82:	ff 24       	eor	r15, r15
     a84:	0d c0       	rjmp	.+26     	; 0xaa0 <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
     a86:	88 81       	ld	r24, Y
     a88:	88 23       	and	r24, r24
     a8a:	41 f0       	breq	.+16     	; 0xa9c <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     a8c:	29 81       	ldd	r18, Y+1	; 0x01
     a8e:	3a 81       	ldd	r19, Y+2	; 0x02
     a90:	6c 81       	ldd	r22, Y+4	; 0x04
     a92:	4b 81       	ldd	r20, Y+3	; 0x03
     a94:	0d 81       	ldd	r16, Y+5	; 0x05
     a96:	82 df       	rcall	.-252    	; 0x99c <Pipe_ConfigurePipe>
     a98:	88 23       	and	r24, r24
     a9a:	31 f0       	breq	.+12     	; 0xaa8 <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a9c:	f3 94       	inc	r15
     a9e:	26 96       	adiw	r28, 0x06	; 6
     aa0:	f1 16       	cp	r15, r17
     aa2:	88 f3       	brcs	.-30     	; 0xa86 <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	08 95       	ret

00000ab8 <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     ab8:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	98 2f       	mov	r25, r24
     ac0:	9f 70       	andi	r25, 0x0F	; 15
     ac2:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     ac6:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     aca:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     ace:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ad2:	90 91 a9 00 	lds	r25, 0x00A9
     ad6:	9e 7f       	andi	r25, 0xFE	; 254
     ad8:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     adc:	8f 5f       	subi	r24, 0xFF	; 255
     ade:	87 30       	cpi	r24, 0x07	; 7
     ae0:	71 f7       	brne	.-36     	; 0xabe <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     ae2:	08 95       	ret

00000ae4 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     ae4:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     ae8:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     aec:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     aee:	29 2f       	mov	r18, r25
     af0:	2f 70       	andi	r18, 0x0F	; 15
     af2:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     af6:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     afa:	27 ff       	sbrs	r18, 7
     afc:	0c c0       	rjmp	.+24     	; 0xb16 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     afe:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     b02:	53 2f       	mov	r21, r19
     b04:	5f 70       	andi	r21, 0x0F	; 15
     b06:	30 ff       	sbrs	r19, 0
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <Pipe_IsEndpointBound+0x2a>
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <Pipe_IsEndpointBound+0x2c>
     b0e:	20 e8       	ldi	r18, 0x80	; 128
     b10:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     b12:	28 17       	cp	r18, r24
     b14:	49 f0       	breq	.+18     	; 0xb28 <Pipe_IsEndpointBound+0x44>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b16:	9f 5f       	subi	r25, 0xFF	; 255
     b18:	97 30       	cpi	r25, 0x07	; 7
     b1a:	49 f7       	brne	.-46     	; 0xaee <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b1c:	84 2f       	mov	r24, r20
     b1e:	8f 70       	andi	r24, 0x0F	; 15
     b20:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     b28:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     b2a:	08 95       	ret

00000b2c <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b2c:	80 91 a2 00 	lds	r24, 0x00A2
     b30:	90 91 a3 00 	lds	r25, 0x00A3

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     b34:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b36:	20 91 aa 00 	lds	r18, 0x00AA
     b3a:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b3c:	20 31       	cpi	r18, 0x10	; 16
     b3e:	29 f4       	brne	.+10     	; 0xb4a <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b40:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     b44:	20 ff       	sbrs	r18, 0
     b46:	05 c0       	rjmp	.+10     	; 0xb52 <Pipe_WaitUntilReady+0x26>
     b48:	18 c0       	rjmp	.+48     	; 0xb7a <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b4a:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b4e:	22 fd       	sbrc	r18, 2
     b50:	14 c0       	rjmp	.+40     	; 0xb7a <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b52:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b56:	21 fd       	sbrc	r18, 1
     b58:	12 c0       	rjmp	.+36     	; 0xb7e <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b5a:	20 91 35 01 	lds	r18, 0x0135
     b5e:	21 30       	cpi	r18, 0x01	; 1
     b60:	81 f0       	breq	.+32     	; 0xb82 <Pipe_WaitUntilReady+0x56>
     b62:	20 91 a2 00 	lds	r18, 0x00A2
     b66:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b6a:	28 17       	cp	r18, r24
     b6c:	39 07       	cpc	r19, r25
     b6e:	19 f3       	breq	.-58     	; 0xb36 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b70:	44 23       	and	r20, r20
     b72:	49 f0       	breq	.+18     	; 0xb86 <Pipe_WaitUntilReady+0x5a>
     b74:	41 50       	subi	r20, 0x01	; 1
     b76:	c9 01       	movw	r24, r18
     b78:	de cf       	rjmp	.-68     	; 0xb36 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     b86:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     b88:	08 95       	ret

00000b8a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b8a:	75 d0       	rcall	.+234    	; 0xc76 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b8c:	7c d0       	rcall	.+248    	; 0xc86 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b8e:	e0 ee       	ldi	r30, 0xE0	; 224
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	81 60       	ori	r24, 0x01	; 1
     b96:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     b98:	e8 ed       	ldi	r30, 0xD8	; 216
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 77       	andi	r24, 0x7F	; 127
     ba0:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ba2:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     ba4:	a7 ed       	ldi	r26, 0xD7	; 215
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	8c 91       	ld	r24, X
     baa:	8e 7f       	andi	r24, 0xFE	; 254
     bac:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     bae:	80 81       	ld	r24, Z
     bb0:	8f 7e       	andi	r24, 0xEF	; 239
     bb2:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     bb4:	10 92 2c 01 	sts	0x012C, r1
}
     bb8:	08 95       	ret

00000bba <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     bba:	5d d0       	rcall	.+186    	; 0xc76 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bbc:	64 d0       	rcall	.+200    	; 0xc86 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bbe:	80 91 d8 00 	lds	r24, 0x00D8
     bc2:	8f 77       	andi	r24, 0x7F	; 127
     bc4:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     bc8:	80 91 d8 00 	lds	r24, 0x00D8
     bcc:	80 68       	ori	r24, 0x80	; 128
     bce:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     bd2:	80 91 d8 00 	lds	r24, 0x00D8
     bd6:	8f 7d       	andi	r24, 0xDF	; 223
     bd8:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     bdc:	80 91 d7 00 	lds	r24, 0x00D7
     be0:	8f 77       	andi	r24, 0x7F	; 127
     be2:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     be6:	8c e0       	ldi	r24, 0x0C	; 12
     be8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     bea:	8e e0       	ldi	r24, 0x0E	; 14
     bec:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     bee:	09 b4       	in	r0, 0x29	; 41
     bf0:	00 fe       	sbrs	r0, 0
     bf2:	fd cf       	rjmp	.-6      	; 0xbee <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 35 01 	sts	0x0135, r24
	USB_Host_ConfigurationNumber = 0;
     bfa:	10 92 2b 01 	sts	0x012B, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     bfe:	80 e4       	ldi	r24, 0x40	; 64
     c00:	80 93 27 01 	sts	0x0127, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c04:	80 91 d8 00 	lds	r24, 0x00D8
     c08:	80 64       	ori	r24, 0x40	; 64
     c0a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c0e:	80 91 dd 00 	lds	r24, 0x00DD
     c12:	81 60       	ori	r24, 0x01	; 1
     c14:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c18:	80 91 dd 00 	lds	r24, 0x00DD
     c1c:	84 60       	ori	r24, 0x04	; 4
     c1e:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     c22:	80 91 d7 00 	lds	r24, 0x00D7
     c26:	8f 7e       	andi	r24, 0xEF	; 239
     c28:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c2c:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     c2e:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     c30:	80 91 de 00 	lds	r24, 0x00DE
     c34:	81 60       	ori	r24, 0x01	; 1
     c36:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c3a:	80 91 de 00 	lds	r24, 0x00DE
     c3e:	84 60       	ori	r24, 0x04	; 4
     c40:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c44:	80 91 e0 00 	lds	r24, 0x00E0
     c48:	8e 7f       	andi	r24, 0xFE	; 254
     c4a:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c4e:	80 91 d8 00 	lds	r24, 0x00D8
     c52:	80 61       	ori	r24, 0x10	; 16
     c54:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c58:	08 95       	ret

00000c5a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c5a:	e8 ed       	ldi	r30, 0xD8	; 216
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	8f 7e       	andi	r24, 0xEF	; 239
     c62:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     c64:	e7 ed       	ldi	r30, 0xD7	; 215
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	81 60       	ori	r24, 0x01	; 1
     c6c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	80 93 2c 01 	sts	0x012C, r24

	USB_ResetInterface();
}
     c74:	a2 cf       	rjmp	.-188    	; 0xbba <USB_ResetInterface>

00000c76 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c76:	e8 ed       	ldi	r30, 0xD8	; 216
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	8c 7f       	andi	r24, 0xFC	; 252
     c7e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c80:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     c84:	08 95       	ret

00000c86 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c86:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c8a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     c8e:	08 95       	ret

00000c90 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	0b b6       	in	r0, 0x3b	; 59
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	2f 93       	push	r18
     ca0:	3f 93       	push	r19
     ca2:	4f 93       	push	r20
     ca4:	5f 93       	push	r21
     ca6:	6f 93       	push	r22
     ca8:	7f 93       	push	r23
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	af 93       	push	r26
     cb0:	bf 93       	push	r27
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     cb6:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     cba:	85 ff       	sbrs	r24, 5
     cbc:	0a c0       	rjmp	.+20     	; 0xcd2 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     cbe:	80 91 a0 00 	lds	r24, 0x00A0
     cc2:	85 ff       	sbrs	r24, 5
     cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     cc6:	80 91 9f 00 	lds	r24, 0x009F
     cca:	8f 7d       	andi	r24, 0xDF	; 223
     ccc:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     cd0:	0c d1       	rcall	.+536    	; 0xeea <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     cd2:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     cd6:	81 ff       	sbrs	r24, 1
     cd8:	15 c0       	rjmp	.+42     	; 0xd04 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     cda:	80 91 a0 00 	lds	r24, 0x00A0
     cde:	81 ff       	sbrs	r24, 1
     ce0:	11 c0       	rjmp	.+34     	; 0xd04 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ce2:	80 91 9f 00 	lds	r24, 0x009F
     ce6:	8d 7f       	andi	r24, 0xFD	; 253
     ce8:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     cec:	80 91 9f 00 	lds	r24, 0x009F
     cf0:	8e 7f       	andi	r24, 0xFE	; 254
     cf2:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     cf6:	80 91 a0 00 	lds	r24, 0x00A0
     cfa:	8d 7f       	andi	r24, 0xFD	; 253
     cfc:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d00:	46 db       	rcall	.-2420   	; 0x38e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d02:	5b df       	rcall	.-330    	; 0xbba <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d04:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d08:	81 ff       	sbrs	r24, 1
     d0a:	15 c0       	rjmp	.+42     	; 0xd36 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d0c:	80 91 de 00 	lds	r24, 0x00DE
     d10:	81 ff       	sbrs	r24, 1
     d12:	11 c0       	rjmp	.+34     	; 0xd36 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d14:	80 91 df 00 	lds	r24, 0x00DF
     d18:	8d 7f       	andi	r24, 0xFD	; 253
     d1a:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     d1e:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d20:	80 91 dd 00 	lds	r24, 0x00DD
     d24:	81 60       	ori	r24, 0x01	; 1
     d26:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	8b db       	rcall	.-2282   	; 0x444 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d2e:	2f db       	rcall	.-2466   	; 0x38e <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	80 93 35 01 	sts	0x0135, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d36:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d3a:	80 ff       	sbrs	r24, 0
     d3c:	17 c0       	rjmp	.+46     	; 0xd6c <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d3e:	80 91 de 00 	lds	r24, 0x00DE
     d42:	80 ff       	sbrs	r24, 0
     d44:	13 c0       	rjmp	.+38     	; 0xd6c <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d46:	80 91 df 00 	lds	r24, 0x00DF
     d4a:	8e 7f       	andi	r24, 0xFE	; 254
     d4c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     d50:	80 91 de 00 	lds	r24, 0x00DE
     d54:	8e 7f       	andi	r24, 0xFE	; 254
     d56:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d5a:	13 db       	rcall	.-2522   	; 0x382 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d5c:	80 91 a0 00 	lds	r24, 0x00A0
     d60:	82 60       	ori	r24, 0x02	; 2
     d62:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	80 93 35 01 	sts	0x0135, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d6c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d70:	82 ff       	sbrs	r24, 2
     d72:	0e c0       	rjmp	.+28     	; 0xd90 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d74:	80 91 de 00 	lds	r24, 0x00DE
     d78:	82 ff       	sbrs	r24, 2
     d7a:	0a c0       	rjmp	.+20     	; 0xd90 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d7c:	80 91 df 00 	lds	r24, 0x00DF
     d80:	8b 7f       	andi	r24, 0xFB	; 251
     d82:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	7c db       	rcall	.-2312   	; 0x484 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d8c:	00 db       	rcall	.-2560   	; 0x38e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d8e:	15 df       	rcall	.-470    	; 0xbba <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d90:	ff 91       	pop	r31
     d92:	ef 91       	pop	r30
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	0f 90       	pop	r0
     daa:	0b be       	out	0x3b, r0	; 59
     dac:	0f 90       	pop	r0
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	0f 90       	pop	r0
     db2:	1f 90       	pop	r1
     db4:	18 95       	reti

00000db6 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	29 97       	sbiw	r28, 0x09	; 9
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	6b 01       	movw	r12, r22
     dd8:	8a 01       	movw	r16, r20
     dda:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ddc:	90 e8       	ldi	r25, 0x80	; 128
     dde:	90 93 2d 01 	sts	0x012D, r25
     de2:	96 e0       	ldi	r25, 0x06	; 6
     de4:	90 93 2e 01 	sts	0x012E, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     dee:	90 93 30 01 	sts	0x0130, r25
     df2:	80 93 2f 01 	sts	0x012F, r24
     df6:	10 92 32 01 	sts	0x0132, r1
     dfa:	10 92 31 01 	sts	0x0131, r1
     dfe:	89 e0       	ldi	r24, 0x09	; 9
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	90 93 34 01 	sts	0x0134, r25
     e06:	80 93 33 01 	sts	0x0133, r24
     e0a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	95 d0       	rcall	.+298    	; 0xf3e <USB_Host_SendControlRequest>
     e14:	88 23       	and	r24, r24
     e16:	b9 f4       	brne	.+46     	; 0xe46 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	9c 81       	ldd	r25, Y+4	; 0x04
     e1c:	f6 01       	movw	r30, r12
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     e22:	e8 16       	cp	r14, r24
     e24:	f9 06       	cpc	r15, r25
     e26:	70 f0       	brcs	.+28     	; 0xe44 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e28:	90 93 34 01 	sts	0x0134, r25
     e2c:	80 93 33 01 	sts	0x0133, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e30:	c8 01       	movw	r24, r16
     e32:	85 d0       	rcall	.+266    	; 0xf3e <USB_Host_SendControlRequest>
     e34:	88 23       	and	r24, r24
     e36:	39 f4       	brne	.+14     	; 0xe46 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e38:	f8 01       	movw	r30, r16
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	92 30       	cpi	r25, 0x02	; 2
     e3e:	19 f0       	breq	.+6      	; 0xe46 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     e40:	86 e0       	ldi	r24, 0x06	; 6
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     e44:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e46:	29 96       	adiw	r28, 0x09	; 9
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	df 90       	pop	r13
     e60:	cf 90       	pop	r12
     e62:	08 95       	ret

00000e64 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e64:	af 92       	push	r10
     e66:	bf 92       	push	r11
     e68:	cf 92       	push	r12
     e6a:	df 92       	push	r13
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	8c 01       	movw	r16, r24
     e7a:	eb 01       	movw	r28, r22
     e7c:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     e7e:	23 c0       	rjmp	.+70     	; 0xec6 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e80:	e8 81       	ld	r30, Y
     e82:	f9 81       	ldd	r31, Y+1	; 0x01
     e84:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     e86:	20 81       	ld	r18, Z
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	c7 01       	movw	r24, r14
     e8c:	2e 15       	cp	r18, r14
     e8e:	3f 05       	cpc	r19, r15
     e90:	08 f4       	brcc	.+2      	; 0xe94 <USB_GetNextDescriptorComp+0x30>
     e92:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e94:	e8 0f       	add	r30, r24
     e96:	f9 1f       	adc	r31, r25
     e98:	f9 83       	std	Y+1, r31	; 0x01
     e9a:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     e9c:	f8 01       	movw	r30, r16
     e9e:	20 81       	ld	r18, Z
     ea0:	31 81       	ldd	r19, Z+1	; 0x01
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	31 83       	std	Z+1, r19	; 0x01
     ea8:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     eaa:	88 81       	ld	r24, Y
     eac:	99 81       	ldd	r25, Y+1	; 0x01
     eae:	f6 01       	movw	r30, r12
     eb0:	09 95       	icall
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	41 f0       	breq	.+16     	; 0xec6 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	69 f4       	brne	.+26     	; 0xed4 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
     eba:	a8 82       	st	Y, r10
     ebc:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
     ebe:	f8 01       	movw	r30, r16
     ec0:	f1 82       	std	Z+1, r15	; 0x01
     ec2:	e0 82       	st	Z, r14
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     ec6:	f8 01       	movw	r30, r16
     ec8:	e0 80       	ld	r14, Z
     eca:	f1 80       	ldd	r15, Z+1	; 0x01
     ecc:	e1 14       	cp	r14, r1
     ece:	f1 04       	cpc	r15, r1
     ed0:	b9 f6       	brne	.-82     	; 0xe80 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     ed2:	82 e0       	ldi	r24, 0x02	; 2
}
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	df 90       	pop	r13
     ee2:	cf 90       	pop	r12
     ee4:	bf 90       	pop	r11
     ee6:	af 90       	pop	r10
     ee8:	08 95       	ret

00000eea <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     eea:	08 95       	ret

00000eec <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
     ef4:	c8 ee       	ldi	r28, 0xE8	; 232
     ef6:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ef8:	07 c0       	rjmp	.+14     	; 0xf08 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	6e db       	rcall	.-2340   	; 0x5da <USB_Host_WaitMS>
     efe:	88 23       	and	r24, r24
     f00:	d1 f4       	brne	.+52     	; 0xf36 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f02:	20 97       	sbiw	r28, 0x00	; 0
     f04:	b9 f0       	breq	.+46     	; 0xf34 <USB_Host_WaitForIOS+0x48>
     f06:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f08:	11 23       	and	r17, r17
     f0a:	29 f4       	brne	.+10     	; 0xf16 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f0c:	80 91 a6 00 	lds	r24, 0x00A6
     f10:	83 ff       	sbrs	r24, 3
     f12:	f3 cf       	rjmp	.-26     	; 0xefa <USB_Host_WaitForIOS+0xe>
     f14:	0d c0       	rjmp	.+26     	; 0xf30 <USB_Host_WaitForIOS+0x44>
     f16:	11 30       	cpi	r17, 0x01	; 1
     f18:	29 f4       	brne	.+10     	; 0xf24 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f1a:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f1e:	80 ff       	sbrs	r24, 0
     f20:	ec cf       	rjmp	.-40     	; 0xefa <USB_Host_WaitForIOS+0xe>
     f22:	06 c0       	rjmp	.+12     	; 0xf30 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f24:	12 30       	cpi	r17, 0x02	; 2
     f26:	49 f7       	brne	.-46     	; 0xefa <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f28:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f2c:	82 ff       	sbrs	r24, 2
     f2e:	e5 cf       	rjmp	.-54     	; 0xefa <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f34:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	08 95       	ret

00000f3e <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f4c:	e0 90 9e 00 	lds	r14, 0x009E
     f50:	ff 24       	eor	r15, r15
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	e8 22       	and	r14, r24
     f56:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f58:	c0 91 33 01 	lds	r28, 0x0133
     f5c:	d0 91 34 01 	lds	r29, 0x0134
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f60:	80 91 9e 00 	lds	r24, 0x009E
     f64:	81 60       	ori	r24, 0x01	; 1
     f66:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	36 db       	rcall	.-2452   	; 0x5da <USB_Host_WaitMS>
     f6e:	88 23       	and	r24, r24
     f70:	09 f0       	breq	.+2      	; 0xf74 <USB_Host_SendControlRequest+0x36>
     f72:	cb c0       	rjmp	.+406    	; 0x110a <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f74:	80 91 aa 00 	lds	r24, 0x00AA
     f78:	8f 7c       	andi	r24, 0xCF	; 207
     f7a:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f7e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     f82:	80 91 a6 00 	lds	r24, 0x00A6
     f86:	8f 7e       	andi	r24, 0xEF	; 239
     f88:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f8c:	80 91 a9 00 	lds	r24, 0x00A9
     f90:	8f 7b       	andi	r24, 0xBF	; 191
     f92:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     f96:	ed e2       	ldi	r30, 0x2D	; 45
     f98:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     f9a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f9c:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	e5 33       	cpi	r30, 0x35	; 53
     fa4:	f8 07       	cpc	r31, r24
     fa6:	c9 f7       	brne	.-14     	; 0xf9a <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     fa8:	80 91 a6 00 	lds	r24, 0x00A6
     fac:	87 77       	andi	r24, 0x77	; 119
     fae:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	9b df       	rcall	.-202    	; 0xeec <USB_Host_WaitForIOS>
     fb6:	88 23       	and	r24, r24
     fb8:	09 f0       	breq	.+2      	; 0xfbc <USB_Host_SendControlRequest+0x7e>
     fba:	a7 c0       	rjmp	.+334    	; 0x110a <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fbc:	80 91 a9 00 	lds	r24, 0x00A9
     fc0:	80 64       	ori	r24, 0x40	; 64
     fc2:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	08 db       	rcall	.-2544   	; 0x5da <USB_Host_WaitMS>
     fca:	88 23       	and	r24, r24
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <USB_Host_SendControlRequest+0x92>
     fce:	9d c0       	rjmp	.+314    	; 0x110a <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     fd0:	80 91 2d 01 	lds	r24, 0x012D
     fd4:	87 ff       	sbrs	r24, 7
     fd6:	4f c0       	rjmp	.+158    	; 0x1076 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fd8:	80 91 aa 00 	lds	r24, 0x00AA
     fdc:	8f 7c       	andi	r24, 0xCF	; 207
     fde:	80 61       	ori	r24, 0x10	; 16
     fe0:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     fe4:	01 15       	cp	r16, r1
     fe6:	11 05       	cpc	r17, r1
     fe8:	61 f5       	brne	.+88     	; 0x1042 <USB_Host_SendControlRequest+0x104>
     fea:	2d c0       	rjmp	.+90     	; 0x1046 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fec:	80 91 a9 00 	lds	r24, 0x00A9
     ff0:	8f 7b       	andi	r24, 0xBF	; 191
     ff2:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	79 df       	rcall	.-270    	; 0xeec <USB_Host_WaitForIOS>
     ffa:	88 23       	and	r24, r24
     ffc:	09 f0       	breq	.+2      	; 0x1000 <USB_Host_SendControlRequest+0xc2>
     ffe:	85 c0       	rjmp	.+266    	; 0x110a <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1000:	80 91 f6 00 	lds	r24, 0x00F6
    1004:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	49 f4       	brne	.+18     	; 0x101e <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    100c:	c0 e0       	ldi	r28, 0x00	; 0
    100e:	d0 e0       	ldi	r29, 0x00	; 0
    1010:	06 c0       	rjmp	.+12     	; 0x101e <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1012:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1016:	f8 01       	movw	r30, r16
    1018:	81 93       	st	Z+, r24
    101a:	8f 01       	movw	r16, r30
					DataLen--;
    101c:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    101e:	80 91 f6 00 	lds	r24, 0x00F6
    1022:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	11 f0       	breq	.+4      	; 0x102e <USB_Host_SendControlRequest+0xf0>
    102a:	20 97       	sbiw	r28, 0x00	; 0
    102c:	91 f7       	brne	.-28     	; 0x1012 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    102e:	80 91 a9 00 	lds	r24, 0x00A9
    1032:	80 64       	ori	r24, 0x40	; 64
    1034:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1038:	80 91 a6 00 	lds	r24, 0x00A6
    103c:	8e 77       	andi	r24, 0x7E	; 126
    103e:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1042:	20 97       	sbiw	r28, 0x00	; 0
    1044:	99 f6       	brne	.-90     	; 0xfec <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1046:	80 91 aa 00 	lds	r24, 0x00AA
    104a:	8f 7c       	andi	r24, 0xCF	; 207
    104c:	80 62       	ori	r24, 0x20	; 32
    104e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1052:	80 91 a9 00 	lds	r24, 0x00A9
    1056:	8f 7b       	andi	r24, 0xBF	; 191
    1058:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	46 df       	rcall	.-372    	; 0xeec <USB_Host_WaitForIOS>
    1060:	88 23       	and	r24, r24
    1062:	09 f0       	breq	.+2      	; 0x1066 <USB_Host_SendControlRequest+0x128>
    1064:	52 c0       	rjmp	.+164    	; 0x110a <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1066:	80 91 a6 00 	lds	r24, 0x00A6
    106a:	8b 77       	andi	r24, 0x7B	; 123
    106c:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	3c df       	rcall	.-392    	; 0xeec <USB_Host_WaitForIOS>
    1074:	4a c0       	rjmp	.+148    	; 0x110a <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1076:	01 15       	cp	r16, r1
    1078:	11 05       	cpc	r17, r1
    107a:	99 f1       	breq	.+102    	; 0x10e2 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    107c:	80 91 aa 00 	lds	r24, 0x00AA
    1080:	8f 7c       	andi	r24, 0xCF	; 207
    1082:	80 62       	ori	r24, 0x20	; 32
    1084:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1088:	80 91 a9 00 	lds	r24, 0x00A9
    108c:	8f 7b       	andi	r24, 0xBF	; 191
    108e:	80 93 a9 00 	sts	0x00A9, r24
    1092:	1c c0       	rjmp	.+56     	; 0x10cc <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	2a df       	rcall	.-428    	; 0xeec <USB_Host_WaitForIOS>
    1098:	88 23       	and	r24, r24
    109a:	b9 f5       	brne	.+110    	; 0x110a <USB_Host_SendControlRequest+0x1cc>
    109c:	f8 01       	movw	r30, r16
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    10a0:	81 91       	ld	r24, Z+
    10a2:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10a4:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    10a8:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10aa:	59 f0       	breq	.+22     	; 0x10c2 <USB_Host_SendControlRequest+0x184>
    10ac:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10ae:	20 91 f6 00 	lds	r18, 0x00F6
    10b2:	30 91 f7 00 	lds	r19, 0x00F7
    10b6:	80 91 27 01 	lds	r24, 0x0127
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	28 17       	cp	r18, r24
    10be:	39 07       	cpc	r19, r25
    10c0:	78 f3       	brcs	.-34     	; 0x10a0 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10c2:	80 91 a6 00 	lds	r24, 0x00A6
    10c6:	8b 77       	andi	r24, 0x7B	; 123
    10c8:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10cc:	20 97       	sbiw	r28, 0x00	; 0
    10ce:	11 f7       	brne	.-60     	; 0x1094 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	0c df       	rcall	.-488    	; 0xeec <USB_Host_WaitForIOS>
    10d4:	88 23       	and	r24, r24
    10d6:	c9 f4       	brne	.+50     	; 0x110a <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10d8:	80 91 a9 00 	lds	r24, 0x00A9
    10dc:	80 64       	ori	r24, 0x40	; 64
    10de:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10e2:	80 91 aa 00 	lds	r24, 0x00AA
    10e6:	8f 7c       	andi	r24, 0xCF	; 207
    10e8:	80 61       	ori	r24, 0x10	; 16
    10ea:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10ee:	80 91 a9 00 	lds	r24, 0x00A9
    10f2:	8f 7b       	andi	r24, 0xBF	; 191
    10f4:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	f8 de       	rcall	.-528    	; 0xeec <USB_Host_WaitForIOS>
    10fc:	88 23       	and	r24, r24
    10fe:	29 f4       	brne	.+10     	; 0x110a <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1100:	90 91 a6 00 	lds	r25, 0x00A6
    1104:	9e 77       	andi	r25, 0x7E	; 126
    1106:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    110a:	90 91 a9 00 	lds	r25, 0x00A9
    110e:	90 64       	ori	r25, 0x40	; 64
    1110:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1114:	e1 14       	cp	r14, r1
    1116:	f1 04       	cpc	r15, r1
    1118:	29 f4       	brne	.+10     	; 0x1124 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    111a:	90 91 9e 00 	lds	r25, 0x009E
    111e:	9e 7f       	andi	r25, 0xFE	; 254
    1120:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    112a:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	08 95       	ret

0000113c <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    113c:	1f 93       	push	r17
    113e:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1140:	10 92 2d 01 	sts	0x012D, r1
    1144:	89 e0       	ldi	r24, 0x09	; 9
    1146:	80 93 2e 01 	sts	0x012E, r24
    114a:	10 93 2f 01 	sts	0x012F, r17
    114e:	10 92 30 01 	sts	0x0130, r1
    1152:	10 92 32 01 	sts	0x0132, r1
    1156:	10 92 31 01 	sts	0x0131, r1
    115a:	10 92 34 01 	sts	0x0134, r1
    115e:	10 92 33 01 	sts	0x0133, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1162:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	e9 de       	rcall	.-558    	; 0xf3e <USB_Host_SendControlRequest>
    116c:	88 23       	and	r24, r24
    116e:	49 f4       	brne	.+18     	; 0x1182 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1170:	10 93 2b 01 	sts	0x012B, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1174:	11 23       	and	r17, r17
    1176:	11 f0       	breq	.+4      	; 0x117c <USB_Host_SetDeviceConfiguration+0x40>
    1178:	9b e0       	ldi	r25, 0x0B	; 11
    117a:	01 c0       	rjmp	.+2      	; 0x117e <USB_Host_SetDeviceConfiguration+0x42>
    117c:	9a e0       	ldi	r25, 0x0A	; 10
    117e:	90 93 35 01 	sts	0x0135, r25
	}

	return ErrorCode;
}
    1182:	1f 91       	pop	r17
    1184:	08 95       	ret

00001186 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1186:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1188:	10 91 a7 00 	lds	r17, 0x00A7
    118c:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    118e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1192:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1196:	76 da       	rcall	.-2836   	; 0x684 <USB_Host_ProcessNextHostState>
    1198:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    119c:	1f 91       	pop	r17
    119e:	08 95       	ret

000011a0 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    11a0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    11a2:	81 81       	ldd	r24, Z+1	; 0x01
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	19 f4       	brne	.+6      	; 0x11ae <DCOMP_HID_Host_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    11a8:	85 81       	ldd	r24, Z+5	; 0x05
    11aa:	83 30       	cpi	r24, 0x03	; 3
    11ac:	11 f0       	breq	.+4      	; 0x11b2 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	08 95       	ret
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
		  return DESCRIPTOR_SEARCH_Found;
    11b2:	80 e0       	ldi	r24, 0x00	; 0
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11b4:	08 95       	ret

000011b6 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    11b6:	fc 01       	movw	r30, r24
    11b8:	81 81       	ldd	r24, Z+1	; 0x01
    11ba:	81 32       	cpi	r24, 0x21	; 33
    11bc:	21 f0       	breq	.+8      	; 0x11c6 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    11be:	84 30       	cpi	r24, 0x04	; 4
    11c0:	21 f4       	brne	.+8      	; 0x11ca <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    11ca:	82 e0       	ldi	r24, 0x02	; 2
}
    11cc:	08 95       	ret

000011ce <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    11ce:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    11d0:	81 81       	ldd	r24, Z+1	; 0x01
    11d2:	85 30       	cpi	r24, 0x05	; 5
    11d4:	29 f4       	brne	.+10     	; 0x11e0 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    11d6:	82 81       	ldd	r24, Z+2	; 0x02
    11d8:	85 dc       	rcall	.-1782   	; 0xae4 <Pipe_IsEndpointBound>
    11da:	88 23       	and	r24, r24
    11dc:	19 f4       	brne	.+6      	; 0x11e4 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x16>
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    11e0:	84 30       	cpi	r24, 0x04	; 4
    11e2:	21 f0       	breq	.+8      	; 0x11ec <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11ee:	08 95       	ret

000011f0 <HID_Host_ConfigurePipes>:
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    11f0:	4f 92       	push	r4
    11f2:	5f 92       	push	r5
    11f4:	6f 92       	push	r6
    11f6:	7f 92       	push	r7
    11f8:	8f 92       	push	r8
    11fa:	9f 92       	push	r9
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <HID_Host_ConfigurePipes+0x22>
    1212:	00 d0       	rcall	.+0      	; 0x1214 <HID_Host_ConfigurePipes+0x24>
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	8c 01       	movw	r16, r24
    121a:	7a 83       	std	Y+2, r23	; 0x02
    121c:	69 83       	std	Y+1, r22	; 0x01
    121e:	5c 83       	std	Y+4, r21	; 0x04
    1220:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1222:	0f 96       	adiw	r24, 0x0f	; 15
    1224:	fc 01       	movw	r30, r24
    1226:	88 e0       	ldi	r24, 0x08	; 8
    1228:	df 01       	movw	r26, r30
    122a:	1d 92       	st	X+, r1
    122c:	8a 95       	dec	r24
    122e:	e9 f7       	brne	.-6      	; 0x122a <HID_Host_ConfigurePipes+0x3a>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1230:	eb 81       	ldd	r30, Y+3	; 0x03
    1232:	fc 81       	ldd	r31, Y+4	; 0x04
    1234:	81 81       	ldd	r24, Z+1	; 0x01
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	09 f0       	breq	.+2      	; 0x123c <HID_Host_ConfigurePipes+0x4c>
    123a:	95 c0       	rjmp	.+298    	; 0x1366 <HID_Host_ConfigurePipes+0x176>
    123c:	44 24       	eor	r4, r4
    123e:	55 24       	eor	r5, r5
    1240:	aa 24       	eor	r10, r10
    1242:	bb 24       	eor	r11, r11
    1244:	ee 24       	eor	r14, r14
    1246:	ff 24       	eor	r15, r15
    1248:	cc 24       	eor	r12, r12
    124a:	dd 24       	eor	r13, r13
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    124c:	93 e0       	ldi	r25, 0x03	; 3
    124e:	69 2e       	mov	r6, r25
    1250:	71 2c       	mov	r7, r1
    1252:	6c 0e       	add	r6, r28
    1254:	7d 1e       	adc	r7, r29
    1256:	4e 01       	movw	r8, r28
    1258:	08 94       	sec
    125a:	81 1c       	adc	r8, r1
    125c:	91 1c       	adc	r9, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    125e:	a1 14       	cp	r10, r1
    1260:	b1 04       	cpc	r11, r1
    1262:	39 f0       	breq	.+14     	; 0x1272 <HID_Host_ConfigurePipes+0x82>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1264:	c4 01       	movw	r24, r8
    1266:	b3 01       	movw	r22, r6
    1268:	47 ee       	ldi	r20, 0xE7	; 231
    126a:	58 e0       	ldi	r21, 0x08	; 8
    126c:	fb dd       	rcall	.-1034   	; 0xe64 <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    126e:	88 23       	and	r24, r24
    1270:	21 f1       	breq	.+72     	; 0x12ba <HID_Host_ConfigurePipes+0xca>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1272:	c1 14       	cp	r12, r1
    1274:	d1 04       	cpc	r13, r1
    1276:	79 f5       	brne	.+94     	; 0x12d6 <HID_Host_ConfigurePipes+0xe6>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1278:	c4 01       	movw	r24, r8
    127a:	b3 01       	movw	r22, r6
    127c:	40 ed       	ldi	r20, 0xD0	; 208
    127e:	58 e0       	ldi	r21, 0x08	; 8
    1280:	f1 dd       	rcall	.-1054   	; 0xe64 <USB_GetNextDescriptorComp>
    1282:	88 23       	and	r24, r24
    1284:	09 f0       	breq	.+2      	; 0x1288 <HID_Host_ConfigurePipes+0x98>
    1286:	71 c0       	rjmp	.+226    	; 0x136a <HID_Host_ConfigurePipes+0x17a>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1288:	ab 80       	ldd	r10, Y+3	; 0x03
    128a:	bc 80       	ldd	r11, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    128c:	f8 01       	movw	r30, r16
    128e:	84 85       	ldd	r24, Z+12	; 0x0c
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1290:	88 23       	and	r24, r24
    1292:	31 f0       	breq	.+12     	; 0x12a0 <HID_Host_ConfigurePipes+0xb0>
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1294:	d5 01       	movw	r26, r10
    1296:	17 96       	adiw	r26, 0x07	; 7
    1298:	9c 91       	ld	r25, X
    129a:	17 97       	sbiw	r26, 0x07	; 7
    129c:	98 17       	cp	r25, r24
    129e:	61 f7       	brne	.-40     	; 0x1278 <HID_Host_ConfigurePipes+0x88>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12a0:	c4 01       	movw	r24, r8
    12a2:	b3 01       	movw	r22, r6
    12a4:	4b ed       	ldi	r20, 0xDB	; 219
    12a6:	58 e0       	ldi	r21, 0x08	; 8
    12a8:	dd dd       	rcall	.-1094   	; 0xe64 <USB_GetNextDescriptorComp>
    12aa:	88 23       	and	r24, r24
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <HID_Host_ConfigurePipes+0xc0>
    12ae:	5d c0       	rjmp	.+186    	; 0x136a <HID_Host_ConfigurePipes+0x17a>
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    12b0:	4b 80       	ldd	r4, Y+3	; 0x03
    12b2:	5c 80       	ldd	r5, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    12b4:	ee 24       	eor	r14, r14
    12b6:	ff 24       	eor	r15, r15
    12b8:	d2 cf       	rjmp	.-92     	; 0x125e <HID_Host_ConfigurePipes+0x6e>

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    12ba:	eb 81       	ldd	r30, Y+3	; 0x03
    12bc:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    12be:	82 81       	ldd	r24, Z+2	; 0x02
    12c0:	87 ff       	sbrs	r24, 7
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <HID_Host_ConfigurePipes+0xd8>
		  DataINEndpoint  = EndpointData;
    12c4:	6f 01       	movw	r12, r30
    12c6:	01 c0       	rjmp	.+2      	; 0x12ca <HID_Host_ConfigurePipes+0xda>
		else
		  DataOUTEndpoint = EndpointData;
    12c8:	7f 01       	movw	r14, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    12ca:	c1 14       	cp	r12, r1
    12cc:	d1 04       	cpc	r13, r1
    12ce:	39 f2       	breq	.-114    	; 0x125e <HID_Host_ConfigurePipes+0x6e>
    12d0:	e1 14       	cp	r14, r1
    12d2:	f1 04       	cpc	r15, r1
    12d4:	21 f2       	breq	.-120    	; 0x125e <HID_Host_ConfigurePipes+0x6e>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    12d6:	f6 01       	movw	r30, r12
    12d8:	84 81       	ldd	r24, Z+4	; 0x04
    12da:	95 81       	ldd	r25, Z+5	; 0x05
    12dc:	d8 01       	movw	r26, r16
    12de:	12 96       	adiw	r26, 0x02	; 2
    12e0:	9c 93       	st	X, r25
    12e2:	8e 93       	st	-X, r24
    12e4:	11 97       	sbiw	r26, 0x01	; 1
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    12e6:	82 81       	ldd	r24, Z+2	; 0x02
    12e8:	13 96       	adiw	r26, 0x03	; 3
    12ea:	8c 93       	st	X, r24
    12ec:	13 97       	sbiw	r26, 0x03	; 3
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	c8 2e       	mov	r12, r24
    12f2:	14 96       	adiw	r26, 0x04	; 4
    12f4:	cc 92       	st	X, r12

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    12f6:	c8 01       	movw	r24, r16
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	b7 db       	rcall	.-2194   	; 0xa6a <Pipe_ConfigurePipeTable>
    12fc:	88 23       	and	r24, r24
    12fe:	b9 f1       	breq	.+110    	; 0x136e <HID_Host_ConfigurePipes+0x17e>
	  return false;

	if (DataOUTEndpoint)
    1300:	e1 14       	cp	r14, r1
    1302:	f1 04       	cpc	r15, r1
    1304:	a1 f0       	breq	.+40     	; 0x132e <HID_Host_ConfigurePipes+0x13e>
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1306:	f7 01       	movw	r30, r14
    1308:	84 81       	ldd	r24, Z+4	; 0x04
    130a:	95 81       	ldd	r25, Z+5	; 0x05
    130c:	d8 01       	movw	r26, r16
    130e:	18 96       	adiw	r26, 0x08	; 8
    1310:	9c 93       	st	X, r25
    1312:	8e 93       	st	-X, r24
    1314:	17 97       	sbiw	r26, 0x07	; 7
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1316:	82 81       	ldd	r24, Z+2	; 0x02
    1318:	19 96       	adiw	r26, 0x09	; 9
    131a:	8c 93       	st	X, r24
    131c:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    131e:	1a 96       	adiw	r26, 0x0a	; 10
    1320:	cc 92       	st	X, r12

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    1322:	c8 01       	movw	r24, r16
    1324:	06 96       	adiw	r24, 0x06	; 6
    1326:	61 e0       	ldi	r22, 0x01	; 1
    1328:	a0 db       	rcall	.-2240   	; 0xa6a <Pipe_ConfigurePipeTable>
    132a:	88 23       	and	r24, r24
    132c:	01 f1       	breq	.+64     	; 0x136e <HID_Host_ConfigurePipes+0x17e>
		  return false;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    132e:	f5 01       	movw	r30, r10
    1330:	82 81       	ldd	r24, Z+2	; 0x02
    1332:	d8 01       	movw	r26, r16
    1334:	50 96       	adiw	r26, 0x10	; 16
    1336:	8c 93       	st	X, r24
    1338:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    133a:	f2 01       	movw	r30, r4
    133c:	87 81       	ldd	r24, Z+7	; 0x07
    133e:	90 85       	ldd	r25, Z+8	; 0x08
    1340:	55 96       	adiw	r26, 0x15	; 21
    1342:	9c 93       	st	X, r25
    1344:	8e 93       	st	-X, r24
    1346:	54 97       	sbiw	r26, 0x14	; 20
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	d5 01       	movw	r26, r10
    134c:	16 96       	adiw	r26, 0x06	; 6
    134e:	9c 91       	ld	r25, X
    1350:	16 97       	sbiw	r26, 0x06	; 6
    1352:	99 23       	and	r25, r25
    1354:	09 f4       	brne	.+2      	; 0x1358 <HID_Host_ConfigurePipes+0x168>
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	f8 01       	movw	r30, r16
    135a:	81 8b       	std	Z+17, r24	; 0x11
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    135c:	88 e0       	ldi	r24, 0x08	; 8
    135e:	86 8b       	std	Z+22, r24	; 0x16
	HIDInterfaceInfo->State.IsActive             = true;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	87 87       	std	Z+15, r24	; 0x0f
    1364:	04 c0       	rjmp	.+8      	; 0x136e <HID_Host_ConfigurePipes+0x17e>
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <HID_Host_ConfigurePipes+0x180>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
    136a:	82 e0       	ldi	r24, 0x02	; 2
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <HID_Host_ConfigurePipes+0x180>
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return false;
    136e:	80 e0       	ldi	r24, 0x00	; 0
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	1f 91       	pop	r17
    137e:	0f 91       	pop	r16
    1380:	ff 90       	pop	r15
    1382:	ef 90       	pop	r14
    1384:	df 90       	pop	r13
    1386:	cf 90       	pop	r12
    1388:	bf 90       	pop	r11
    138a:	af 90       	pop	r10
    138c:	9f 90       	pop	r9
    138e:	8f 90       	pop	r8
    1390:	7f 90       	pop	r7
    1392:	6f 90       	pop	r6
    1394:	5f 90       	pop	r5
    1396:	4f 90       	pop	r4
    1398:	08 95       	ret

0000139a <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    13a4:	80 91 35 01 	lds	r24, 0x0135
    13a8:	8b 30       	cpi	r24, 0x0B	; 11
    13aa:	d9 f5       	brne	.+118    	; 0x1422 <HID_Host_ReceiveReport+0x88>
    13ac:	87 85       	ldd	r24, Z+15	; 0x0f
    13ae:	88 23       	and	r24, r24
    13b0:	c1 f1       	breq	.+112    	; 0x1422 <HID_Host_ReceiveReport+0x88>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13b2:	80 81       	ld	r24, Z
    13b4:	8f 70       	andi	r24, 0x0F	; 15
    13b6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13ba:	80 91 a9 00 	lds	r24, 0x00A9
    13be:	8f 7b       	andi	r24, 0xBF	; 191
    13c0:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    13c4:	e6 2e       	mov	r14, r22
    13c6:	e7 01       	movw	r28, r14
    13c8:	7e 01       	movw	r14, r28
    13ca:	f7 2e       	mov	r15, r23
    13cc:	e7 01       	movw	r28, r14

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    13ce:	83 89       	ldd	r24, Z+19	; 0x13
    13d0:	88 23       	and	r24, r24
    13d2:	91 f4       	brne	.+36     	; 0x13f8 <HID_Host_ReceiveReport+0x5e>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    13d4:	a5 85       	ldd	r26, Z+13	; 0x0d
    13d6:	b6 85       	ldd	r27, Z+14	; 0x0e
    13d8:	a8 52       	subi	r26, 0x28	; 40
    13da:	bc 4f       	sbci	r27, 0xFC	; 252
    13dc:	8c 91       	ld	r24, X
    13de:	88 23       	and	r24, r24
    13e0:	21 f0       	breq	.+8      	; 0x13ea <HID_Host_ReceiveReport+0x50>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    13e2:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    13e6:	69 93       	st	Y+, r22
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <HID_Host_ReceiveReport+0x52>
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    13ea:	60 e0       	ldi	r22, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    13ec:	85 85       	ldd	r24, Z+13	; 0x0d
    13ee:	96 85       	ldd	r25, Z+14	; 0x0e
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	71 d8       	rcall	.-3870   	; 0x4d6 <USB_GetHIDReportSize>
    13f4:	bc 01       	movw	r22, r24
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <HID_Host_ReceiveReport+0x66>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13f8:	60 91 f6 00 	lds	r22, 0x00F6
    13fc:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1400:	ce 01       	movw	r24, r28
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	67 da       	rcall	.-2866   	; 0x8d6 <Pipe_Read_Stream_LE>
    1408:	88 23       	and	r24, r24
    140a:	61 f4       	brne	.+24     	; 0x1424 <HID_Host_ReceiveReport+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    140c:	90 91 a6 00 	lds	r25, 0x00A6
    1410:	9e 77       	andi	r25, 0x7E	; 126
    1412:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1416:	90 91 a9 00 	lds	r25, 0x00A9
    141a:	90 64       	ori	r25, 0x40	; 64
    141c:	90 93 a9 00 	sts	0x00A9, r25
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <HID_Host_ReceiveReport+0x8a>

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1422:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	08 95       	ret

0000142e <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    142e:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1430:	80 91 35 01 	lds	r24, 0x0135
    1434:	8b 30       	cpi	r24, 0x0B	; 11
    1436:	a9 f4       	brne	.+42     	; 0x1462 <HID_Host_IsReportReceived+0x34>
    1438:	87 85       	ldd	r24, Z+15	; 0x0f
    143a:	88 23       	and	r24, r24
    143c:	a1 f0       	breq	.+40     	; 0x1466 <HID_Host_IsReportReceived+0x38>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    143e:	80 81       	ld	r24, Z
    1440:	8f 70       	andi	r24, 0x0F	; 15
    1442:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1446:	80 91 a9 00 	lds	r24, 0x00A9
    144a:	8f 7b       	andi	r24, 0xBF	; 191
    144c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1450:	80 91 a6 00 	lds	r24, 0x00A6
    1454:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1456:	90 91 a9 00 	lds	r25, 0x00A9
    145a:	90 64       	ori	r25, 0x40	; 64
    145c:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1460:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	08 95       	ret
    1466:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    1468:	08 95       	ret

0000146a <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    1470:	89 89       	ldd	r24, Y+17	; 0x11
    1472:	88 23       	and	r24, r24
    1474:	f9 f0       	breq	.+62     	; 0x14b4 <HID_Host_SetBootProtocol+0x4a>
	  return HID_ERROR_LOGICAL;

	USB_ControlRequest = (USB_Request_Header_t)
    1476:	88 89       	ldd	r24, Y+16	; 0x10
    1478:	91 e2       	ldi	r25, 0x21	; 33
    147a:	90 93 2d 01 	sts	0x012D, r25
    147e:	9b e0       	ldi	r25, 0x0B	; 11
    1480:	90 93 2e 01 	sts	0x012E, r25
    1484:	10 92 30 01 	sts	0x0130, r1
    1488:	10 92 2f 01 	sts	0x012F, r1
    148c:	80 93 31 01 	sts	0x0131, r24
    1490:	10 92 32 01 	sts	0x0132, r1
    1494:	10 92 34 01 	sts	0x0134, r1
    1498:	10 92 33 01 	sts	0x0133, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    149c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	4c dd       	rcall	.-1384   	; 0xf3e <USB_Host_SendControlRequest>
    14a6:	88 23       	and	r24, r24
    14a8:	31 f4       	brne	.+12     	; 0x14b6 <HID_Host_SetBootProtocol+0x4c>
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    14aa:	98 e0       	ldi	r25, 0x08	; 8
    14ac:	9e 8b       	std	Y+22, r25	; 0x16
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	9b 8b       	std	Y+19, r25	; 0x13

	return HOST_SENDCONTROL_Successful;
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <HID_Host_SetBootProtocol+0x4c>
uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
	  return HID_ERROR_LOGICAL;
    14b4:	80 e8       	ldi	r24, 0x80	; 128

	HIDInterfaceInfo->State.LargestReportSize = 8;
	HIDInterfaceInfo->State.UsingBootProtocol = true;

	return HOST_SENDCONTROL_Successful;
}
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	08 95       	ret

000014bc <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    14bc:	90 91 c8 00 	lds	r25, 0x00C8
    14c0:	95 ff       	sbrs	r25, 5
    14c2:	fc cf       	rjmp	.-8      	; 0x14bc <Serial_putchar>
				UDR1 = DataByte;
    14c4:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	08 95       	ret

000014ce <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    14ce:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    14d2:	87 ff       	sbrs	r24, 7
    14d4:	08 c0       	rjmp	.+16     	; 0x14e6 <Serial_getchar+0x18>
    14d6:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    14da:	87 ff       	sbrs	r24, 7
    14dc:	07 c0       	rjmp	.+14     	; 0x14ec <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    14de:	20 91 ce 00 	lds	r18, 0x00CE
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	05 c0       	rjmp	.+10     	; 0x14f0 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    14e6:	2e ef       	ldi	r18, 0xFE	; 254
    14e8:	3f ef       	ldi	r19, 0xFF	; 255
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    14ec:	2f ef       	ldi	r18, 0xFF	; 255
    14ee:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    14f0:	c9 01       	movw	r24, r18
    14f2:	08 95       	ret

000014f4 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    14f4:	fc 01       	movw	r30, r24
	if (!(Stream))
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	51 f4       	brne	.+20     	; 0x150e <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    14fa:	e6 e3       	ldi	r30, 0x36	; 54
    14fc:	f1 e0       	ldi	r31, 0x01	; 1
    14fe:	f0 93 45 01 	sts	0x0145, r31
    1502:	e0 93 44 01 	sts	0x0144, r30
		stdout = Stream;
    1506:	f0 93 47 01 	sts	0x0147, r31
    150a:	e0 93 46 01 	sts	0x0146, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    150e:	8e e0       	ldi	r24, 0x0E	; 14
    1510:	df 01       	movw	r26, r30
    1512:	1d 92       	st	X+, r1
    1514:	8a 95       	dec	r24
    1516:	e9 f7       	brne	.-6      	; 0x1512 <Serial_CreateStream+0x1e>
    1518:	83 e0       	ldi	r24, 0x03	; 3
    151a:	83 83       	std	Z+3, r24	; 0x03
    151c:	8e e5       	ldi	r24, 0x5E	; 94
    151e:	9a e0       	ldi	r25, 0x0A	; 10
    1520:	91 87       	std	Z+9, r25	; 0x09
    1522:	80 87       	std	Z+8, r24	; 0x08
    1524:	87 e6       	ldi	r24, 0x67	; 103
    1526:	9a e0       	ldi	r25, 0x0A	; 10
    1528:	93 87       	std	Z+11, r25	; 0x0b
    152a:	82 87       	std	Z+10, r24	; 0x0a
}
    152c:	08 95       	ret

0000152e <fputc>:
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	8c 01       	movw	r16, r24
    1538:	eb 01       	movw	r28, r22
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	81 ff       	sbrs	r24, 1
    153e:	1b c0       	rjmp	.+54     	; 0x1576 <fputc+0x48>
    1540:	82 ff       	sbrs	r24, 2
    1542:	0d c0       	rjmp	.+26     	; 0x155e <fputc+0x30>
    1544:	2e 81       	ldd	r18, Y+6	; 0x06
    1546:	3f 81       	ldd	r19, Y+7	; 0x07
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	9d 81       	ldd	r25, Y+5	; 0x05
    154c:	28 17       	cp	r18, r24
    154e:	39 07       	cpc	r19, r25
    1550:	64 f4       	brge	.+24     	; 0x156a <fputc+0x3c>
    1552:	e8 81       	ld	r30, Y
    1554:	f9 81       	ldd	r31, Y+1	; 0x01
    1556:	01 93       	st	Z+, r16
    1558:	f9 83       	std	Y+1, r31	; 0x01
    155a:	e8 83       	st	Y, r30
    155c:	06 c0       	rjmp	.+12     	; 0x156a <fputc+0x3c>
    155e:	e8 85       	ldd	r30, Y+8	; 0x08
    1560:	f9 85       	ldd	r31, Y+9	; 0x09
    1562:	80 2f       	mov	r24, r16
    1564:	09 95       	icall
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	31 f4       	brne	.+12     	; 0x1576 <fputc+0x48>
    156a:	8e 81       	ldd	r24, Y+6	; 0x06
    156c:	9f 81       	ldd	r25, Y+7	; 0x07
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	9f 83       	std	Y+7, r25	; 0x07
    1572:	8e 83       	std	Y+6, r24	; 0x06
    1574:	02 c0       	rjmp	.+4      	; 0x157a <fputc+0x4c>
    1576:	0f ef       	ldi	r16, 0xFF	; 255
    1578:	1f ef       	ldi	r17, 0xFF	; 255
    157a:	c8 01       	movw	r24, r16
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	08 95       	ret

00001586 <printf_P>:
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	fe 01       	movw	r30, r28
    1590:	35 96       	adiw	r30, 0x05	; 5
    1592:	61 91       	ld	r22, Z+
    1594:	71 91       	ld	r23, Z+
    1596:	80 91 46 01 	lds	r24, 0x0146
    159a:	90 91 47 01 	lds	r25, 0x0147
    159e:	dc 01       	movw	r26, r24
    15a0:	13 96       	adiw	r26, 0x03	; 3
    15a2:	2c 91       	ld	r18, X
    15a4:	13 97       	sbiw	r26, 0x03	; 3
    15a6:	28 60       	ori	r18, 0x08	; 8
    15a8:	13 96       	adiw	r26, 0x03	; 3
    15aa:	2c 93       	st	X, r18
    15ac:	af 01       	movw	r20, r30
    15ae:	42 d0       	rcall	.+132    	; 0x1634 <vfprintf>
    15b0:	e0 91 46 01 	lds	r30, 0x0146
    15b4:	f0 91 47 01 	lds	r31, 0x0147
    15b8:	23 81       	ldd	r18, Z+3	; 0x03
    15ba:	27 7f       	andi	r18, 0xF7	; 247
    15bc:	23 83       	std	Z+3, r18	; 0x03
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <puts_P>:
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	8c 01       	movw	r16, r24
    15d2:	e0 91 46 01 	lds	r30, 0x0146
    15d6:	f0 91 47 01 	lds	r31, 0x0147
    15da:	83 81       	ldd	r24, Z+3	; 0x03
    15dc:	81 ff       	sbrs	r24, 1
    15de:	20 c0       	rjmp	.+64     	; 0x1620 <puts_P+0x5c>
    15e0:	c0 e0       	ldi	r28, 0x00	; 0
    15e2:	d0 e0       	ldi	r29, 0x00	; 0
    15e4:	0c c0       	rjmp	.+24     	; 0x15fe <puts_P+0x3a>
    15e6:	db 01       	movw	r26, r22
    15e8:	18 96       	adiw	r26, 0x08	; 8
    15ea:	ed 91       	ld	r30, X+
    15ec:	fc 91       	ld	r31, X
    15ee:	19 97       	sbiw	r26, 0x09	; 9
    15f0:	09 95       	icall
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	11 f0       	breq	.+4      	; 0x15fa <puts_P+0x36>
    15f6:	cf ef       	ldi	r28, 0xFF	; 255
    15f8:	df ef       	ldi	r29, 0xFF	; 255
    15fa:	0f 5f       	subi	r16, 0xFF	; 255
    15fc:	1f 4f       	sbci	r17, 0xFF	; 255
    15fe:	f8 01       	movw	r30, r16
    1600:	84 91       	lpm	r24, Z+
    1602:	60 91 46 01 	lds	r22, 0x0146
    1606:	70 91 47 01 	lds	r23, 0x0147
    160a:	88 23       	and	r24, r24
    160c:	61 f7       	brne	.-40     	; 0x15e6 <puts_P+0x22>
    160e:	db 01       	movw	r26, r22
    1610:	18 96       	adiw	r26, 0x08	; 8
    1612:	ed 91       	ld	r30, X+
    1614:	fc 91       	ld	r31, X
    1616:	19 97       	sbiw	r26, 0x09	; 9
    1618:	8a e0       	ldi	r24, 0x0A	; 10
    161a:	09 95       	icall
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	11 f0       	breq	.+4      	; 0x1624 <puts_P+0x60>
    1620:	cf ef       	ldi	r28, 0xFF	; 255
    1622:	df ef       	ldi	r29, 0xFF	; 255
    1624:	ce 01       	movw	r24, r28
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	08 95       	ret

00001634 <vfprintf>:
    1634:	2f 92       	push	r2
    1636:	3f 92       	push	r3
    1638:	4f 92       	push	r4
    163a:	5f 92       	push	r5
    163c:	6f 92       	push	r6
    163e:	7f 92       	push	r7
    1640:	8f 92       	push	r8
    1642:	9f 92       	push	r9
    1644:	af 92       	push	r10
    1646:	bf 92       	push	r11
    1648:	cf 92       	push	r12
    164a:	df 92       	push	r13
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	2c 97       	sbiw	r28, 0x0c	; 12
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	6c 01       	movw	r12, r24
    166a:	1b 01       	movw	r2, r22
    166c:	8a 01       	movw	r16, r20
    166e:	fc 01       	movw	r30, r24
    1670:	17 82       	std	Z+7, r1	; 0x07
    1672:	16 82       	std	Z+6, r1	; 0x06
    1674:	83 81       	ldd	r24, Z+3	; 0x03
    1676:	81 ff       	sbrs	r24, 1
    1678:	c4 c1       	rjmp	.+904    	; 0x1a02 <vfprintf+0x3ce>
    167a:	2e 01       	movw	r4, r28
    167c:	08 94       	sec
    167e:	41 1c       	adc	r4, r1
    1680:	51 1c       	adc	r5, r1
    1682:	f6 01       	movw	r30, r12
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	f1 01       	movw	r30, r2
    1688:	93 fd       	sbrc	r25, 3
    168a:	85 91       	lpm	r24, Z+
    168c:	93 ff       	sbrs	r25, 3
    168e:	81 91       	ld	r24, Z+
    1690:	1f 01       	movw	r2, r30
    1692:	88 23       	and	r24, r24
    1694:	09 f4       	brne	.+2      	; 0x1698 <vfprintf+0x64>
    1696:	b1 c1       	rjmp	.+866    	; 0x19fa <vfprintf+0x3c6>
    1698:	85 32       	cpi	r24, 0x25	; 37
    169a:	39 f4       	brne	.+14     	; 0x16aa <vfprintf+0x76>
    169c:	93 fd       	sbrc	r25, 3
    169e:	85 91       	lpm	r24, Z+
    16a0:	93 ff       	sbrs	r25, 3
    16a2:	81 91       	ld	r24, Z+
    16a4:	1f 01       	movw	r2, r30
    16a6:	85 32       	cpi	r24, 0x25	; 37
    16a8:	21 f4       	brne	.+8      	; 0x16b2 <vfprintf+0x7e>
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	b6 01       	movw	r22, r12
    16ae:	3f df       	rcall	.-386    	; 0x152e <fputc>
    16b0:	e8 cf       	rjmp	.-48     	; 0x1682 <vfprintf+0x4e>
    16b2:	ee 24       	eor	r14, r14
    16b4:	ff 24       	eor	r15, r15
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	20 32       	cpi	r18, 0x20	; 32
    16ba:	b0 f4       	brcc	.+44     	; 0x16e8 <vfprintf+0xb4>
    16bc:	8b 32       	cpi	r24, 0x2B	; 43
    16be:	69 f0       	breq	.+26     	; 0x16da <vfprintf+0xa6>
    16c0:	8c 32       	cpi	r24, 0x2C	; 44
    16c2:	28 f4       	brcc	.+10     	; 0x16ce <vfprintf+0x9a>
    16c4:	80 32       	cpi	r24, 0x20	; 32
    16c6:	51 f0       	breq	.+20     	; 0x16dc <vfprintf+0xa8>
    16c8:	83 32       	cpi	r24, 0x23	; 35
    16ca:	71 f4       	brne	.+28     	; 0x16e8 <vfprintf+0xb4>
    16cc:	0b c0       	rjmp	.+22     	; 0x16e4 <vfprintf+0xb0>
    16ce:	8d 32       	cpi	r24, 0x2D	; 45
    16d0:	39 f0       	breq	.+14     	; 0x16e0 <vfprintf+0xac>
    16d2:	80 33       	cpi	r24, 0x30	; 48
    16d4:	49 f4       	brne	.+18     	; 0x16e8 <vfprintf+0xb4>
    16d6:	21 60       	ori	r18, 0x01	; 1
    16d8:	2c c0       	rjmp	.+88     	; 0x1732 <vfprintf+0xfe>
    16da:	22 60       	ori	r18, 0x02	; 2
    16dc:	24 60       	ori	r18, 0x04	; 4
    16de:	29 c0       	rjmp	.+82     	; 0x1732 <vfprintf+0xfe>
    16e0:	28 60       	ori	r18, 0x08	; 8
    16e2:	27 c0       	rjmp	.+78     	; 0x1732 <vfprintf+0xfe>
    16e4:	20 61       	ori	r18, 0x10	; 16
    16e6:	25 c0       	rjmp	.+74     	; 0x1732 <vfprintf+0xfe>
    16e8:	27 fd       	sbrc	r18, 7
    16ea:	2c c0       	rjmp	.+88     	; 0x1744 <vfprintf+0x110>
    16ec:	38 2f       	mov	r19, r24
    16ee:	30 53       	subi	r19, 0x30	; 48
    16f0:	3a 30       	cpi	r19, 0x0A	; 10
    16f2:	98 f4       	brcc	.+38     	; 0x171a <vfprintf+0xe6>
    16f4:	26 ff       	sbrs	r18, 6
    16f6:	08 c0       	rjmp	.+16     	; 0x1708 <vfprintf+0xd4>
    16f8:	8e 2d       	mov	r24, r14
    16fa:	88 0f       	add	r24, r24
    16fc:	e8 2e       	mov	r14, r24
    16fe:	ee 0c       	add	r14, r14
    1700:	ee 0c       	add	r14, r14
    1702:	e8 0e       	add	r14, r24
    1704:	e3 0e       	add	r14, r19
    1706:	15 c0       	rjmp	.+42     	; 0x1732 <vfprintf+0xfe>
    1708:	8f 2d       	mov	r24, r15
    170a:	88 0f       	add	r24, r24
    170c:	f8 2e       	mov	r15, r24
    170e:	ff 0c       	add	r15, r15
    1710:	ff 0c       	add	r15, r15
    1712:	f8 0e       	add	r15, r24
    1714:	f3 0e       	add	r15, r19
    1716:	20 62       	ori	r18, 0x20	; 32
    1718:	0c c0       	rjmp	.+24     	; 0x1732 <vfprintf+0xfe>
    171a:	8e 32       	cpi	r24, 0x2E	; 46
    171c:	21 f4       	brne	.+8      	; 0x1726 <vfprintf+0xf2>
    171e:	26 fd       	sbrc	r18, 6
    1720:	6c c1       	rjmp	.+728    	; 0x19fa <vfprintf+0x3c6>
    1722:	20 64       	ori	r18, 0x40	; 64
    1724:	06 c0       	rjmp	.+12     	; 0x1732 <vfprintf+0xfe>
    1726:	8c 36       	cpi	r24, 0x6C	; 108
    1728:	11 f4       	brne	.+4      	; 0x172e <vfprintf+0xfa>
    172a:	20 68       	ori	r18, 0x80	; 128
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <vfprintf+0xfe>
    172e:	88 36       	cpi	r24, 0x68	; 104
    1730:	49 f4       	brne	.+18     	; 0x1744 <vfprintf+0x110>
    1732:	f1 01       	movw	r30, r2
    1734:	93 fd       	sbrc	r25, 3
    1736:	85 91       	lpm	r24, Z+
    1738:	93 ff       	sbrs	r25, 3
    173a:	81 91       	ld	r24, Z+
    173c:	1f 01       	movw	r2, r30
    173e:	88 23       	and	r24, r24
    1740:	09 f0       	breq	.+2      	; 0x1744 <vfprintf+0x110>
    1742:	ba cf       	rjmp	.-140    	; 0x16b8 <vfprintf+0x84>
    1744:	98 2f       	mov	r25, r24
    1746:	95 54       	subi	r25, 0x45	; 69
    1748:	93 30       	cpi	r25, 0x03	; 3
    174a:	18 f0       	brcs	.+6      	; 0x1752 <vfprintf+0x11e>
    174c:	90 52       	subi	r25, 0x20	; 32
    174e:	93 30       	cpi	r25, 0x03	; 3
    1750:	28 f4       	brcc	.+10     	; 0x175c <vfprintf+0x128>
    1752:	0c 5f       	subi	r16, 0xFC	; 252
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	ff e3       	ldi	r31, 0x3F	; 63
    1758:	f9 83       	std	Y+1, r31	; 0x01
    175a:	0d c0       	rjmp	.+26     	; 0x1776 <vfprintf+0x142>
    175c:	83 36       	cpi	r24, 0x63	; 99
    175e:	31 f0       	breq	.+12     	; 0x176c <vfprintf+0x138>
    1760:	83 37       	cpi	r24, 0x73	; 115
    1762:	71 f0       	breq	.+28     	; 0x1780 <vfprintf+0x14c>
    1764:	83 35       	cpi	r24, 0x53	; 83
    1766:	09 f0       	breq	.+2      	; 0x176a <vfprintf+0x136>
    1768:	5c c0       	rjmp	.+184    	; 0x1822 <vfprintf+0x1ee>
    176a:	21 c0       	rjmp	.+66     	; 0x17ae <vfprintf+0x17a>
    176c:	f8 01       	movw	r30, r16
    176e:	80 81       	ld	r24, Z
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	0e 5f       	subi	r16, 0xFE	; 254
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
    1776:	42 01       	movw	r8, r4
    1778:	71 e0       	ldi	r23, 0x01	; 1
    177a:	a7 2e       	mov	r10, r23
    177c:	b1 2c       	mov	r11, r1
    177e:	15 c0       	rjmp	.+42     	; 0x17aa <vfprintf+0x176>
    1780:	62 e0       	ldi	r22, 0x02	; 2
    1782:	66 2e       	mov	r6, r22
    1784:	71 2c       	mov	r7, r1
    1786:	60 0e       	add	r6, r16
    1788:	71 1e       	adc	r7, r17
    178a:	f8 01       	movw	r30, r16
    178c:	80 80       	ld	r8, Z
    178e:	91 80       	ldd	r9, Z+1	; 0x01
    1790:	26 ff       	sbrs	r18, 6
    1792:	03 c0       	rjmp	.+6      	; 0x179a <vfprintf+0x166>
    1794:	6e 2d       	mov	r22, r14
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	02 c0       	rjmp	.+4      	; 0x179e <vfprintf+0x16a>
    179a:	6f ef       	ldi	r22, 0xFF	; 255
    179c:	7f ef       	ldi	r23, 0xFF	; 255
    179e:	c4 01       	movw	r24, r8
    17a0:	2c 87       	std	Y+12, r18	; 0x0c
    17a2:	56 d1       	rcall	.+684    	; 0x1a50 <strnlen>
    17a4:	5c 01       	movw	r10, r24
    17a6:	83 01       	movw	r16, r6
    17a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    17aa:	2f 77       	andi	r18, 0x7F	; 127
    17ac:	16 c0       	rjmp	.+44     	; 0x17da <vfprintf+0x1a6>
    17ae:	52 e0       	ldi	r21, 0x02	; 2
    17b0:	65 2e       	mov	r6, r21
    17b2:	71 2c       	mov	r7, r1
    17b4:	60 0e       	add	r6, r16
    17b6:	71 1e       	adc	r7, r17
    17b8:	f8 01       	movw	r30, r16
    17ba:	80 80       	ld	r8, Z
    17bc:	91 80       	ldd	r9, Z+1	; 0x01
    17be:	26 ff       	sbrs	r18, 6
    17c0:	03 c0       	rjmp	.+6      	; 0x17c8 <vfprintf+0x194>
    17c2:	6e 2d       	mov	r22, r14
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <vfprintf+0x198>
    17c8:	6f ef       	ldi	r22, 0xFF	; 255
    17ca:	7f ef       	ldi	r23, 0xFF	; 255
    17cc:	c4 01       	movw	r24, r8
    17ce:	2c 87       	std	Y+12, r18	; 0x0c
    17d0:	34 d1       	rcall	.+616    	; 0x1a3a <strnlen_P>
    17d2:	5c 01       	movw	r10, r24
    17d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    17d6:	20 68       	ori	r18, 0x80	; 128
    17d8:	83 01       	movw	r16, r6
    17da:	23 fd       	sbrc	r18, 3
    17dc:	1e c0       	rjmp	.+60     	; 0x181a <vfprintf+0x1e6>
    17de:	07 c0       	rjmp	.+14     	; 0x17ee <vfprintf+0x1ba>
    17e0:	80 e2       	ldi	r24, 0x20	; 32
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	b6 01       	movw	r22, r12
    17e6:	2c 87       	std	Y+12, r18	; 0x0c
    17e8:	a2 de       	rcall	.-700    	; 0x152e <fputc>
    17ea:	fa 94       	dec	r15
    17ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    17ee:	8f 2d       	mov	r24, r15
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a8 16       	cp	r10, r24
    17f4:	b9 06       	cpc	r11, r25
    17f6:	a0 f3       	brcs	.-24     	; 0x17e0 <vfprintf+0x1ac>
    17f8:	10 c0       	rjmp	.+32     	; 0x181a <vfprintf+0x1e6>
    17fa:	f4 01       	movw	r30, r8
    17fc:	27 fd       	sbrc	r18, 7
    17fe:	85 91       	lpm	r24, Z+
    1800:	27 ff       	sbrs	r18, 7
    1802:	81 91       	ld	r24, Z+
    1804:	4f 01       	movw	r8, r30
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	b6 01       	movw	r22, r12
    180a:	2c 87       	std	Y+12, r18	; 0x0c
    180c:	90 de       	rcall	.-736    	; 0x152e <fputc>
    180e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1810:	f1 10       	cpse	r15, r1
    1812:	fa 94       	dec	r15
    1814:	08 94       	sec
    1816:	a1 08       	sbc	r10, r1
    1818:	b1 08       	sbc	r11, r1
    181a:	a1 14       	cp	r10, r1
    181c:	b1 04       	cpc	r11, r1
    181e:	69 f7       	brne	.-38     	; 0x17fa <vfprintf+0x1c6>
    1820:	e9 c0       	rjmp	.+466    	; 0x19f4 <vfprintf+0x3c0>
    1822:	84 36       	cpi	r24, 0x64	; 100
    1824:	11 f0       	breq	.+4      	; 0x182a <vfprintf+0x1f6>
    1826:	89 36       	cpi	r24, 0x69	; 105
    1828:	41 f5       	brne	.+80     	; 0x187a <vfprintf+0x246>
    182a:	27 ff       	sbrs	r18, 7
    182c:	08 c0       	rjmp	.+16     	; 0x183e <vfprintf+0x20a>
    182e:	f8 01       	movw	r30, r16
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	0c 5f       	subi	r16, 0xFC	; 252
    183a:	1f 4f       	sbci	r17, 0xFF	; 255
    183c:	09 c0       	rjmp	.+18     	; 0x1850 <vfprintf+0x21c>
    183e:	f8 01       	movw	r30, r16
    1840:	60 81       	ld	r22, Z
    1842:	71 81       	ldd	r23, Z+1	; 0x01
    1844:	88 27       	eor	r24, r24
    1846:	77 fd       	sbrc	r23, 7
    1848:	80 95       	com	r24
    184a:	98 2f       	mov	r25, r24
    184c:	0e 5f       	subi	r16, 0xFE	; 254
    184e:	1f 4f       	sbci	r17, 0xFF	; 255
    1850:	4f e6       	ldi	r20, 0x6F	; 111
    1852:	b4 2e       	mov	r11, r20
    1854:	b2 22       	and	r11, r18
    1856:	97 ff       	sbrs	r25, 7
    1858:	09 c0       	rjmp	.+18     	; 0x186c <vfprintf+0x238>
    185a:	90 95       	com	r25
    185c:	80 95       	com	r24
    185e:	70 95       	com	r23
    1860:	61 95       	neg	r22
    1862:	7f 4f       	sbci	r23, 0xFF	; 255
    1864:	8f 4f       	sbci	r24, 0xFF	; 255
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	f0 e8       	ldi	r31, 0x80	; 128
    186a:	bf 2a       	or	r11, r31
    186c:	a2 01       	movw	r20, r4
    186e:	2a e0       	ldi	r18, 0x0A	; 10
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	f9 d0       	rcall	.+498    	; 0x1a66 <__ultoa_invert>
    1874:	78 2e       	mov	r7, r24
    1876:	74 18       	sub	r7, r4
    1878:	44 c0       	rjmp	.+136    	; 0x1902 <vfprintf+0x2ce>
    187a:	85 37       	cpi	r24, 0x75	; 117
    187c:	31 f4       	brne	.+12     	; 0x188a <vfprintf+0x256>
    187e:	3f ee       	ldi	r19, 0xEF	; 239
    1880:	b3 2e       	mov	r11, r19
    1882:	b2 22       	and	r11, r18
    1884:	2a e0       	ldi	r18, 0x0A	; 10
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	25 c0       	rjmp	.+74     	; 0x18d4 <vfprintf+0x2a0>
    188a:	99 ef       	ldi	r25, 0xF9	; 249
    188c:	b9 2e       	mov	r11, r25
    188e:	b2 22       	and	r11, r18
    1890:	8f 36       	cpi	r24, 0x6F	; 111
    1892:	c1 f0       	breq	.+48     	; 0x18c4 <vfprintf+0x290>
    1894:	80 37       	cpi	r24, 0x70	; 112
    1896:	20 f4       	brcc	.+8      	; 0x18a0 <vfprintf+0x26c>
    1898:	88 35       	cpi	r24, 0x58	; 88
    189a:	09 f0       	breq	.+2      	; 0x189e <vfprintf+0x26a>
    189c:	ae c0       	rjmp	.+348    	; 0x19fa <vfprintf+0x3c6>
    189e:	0d c0       	rjmp	.+26     	; 0x18ba <vfprintf+0x286>
    18a0:	80 37       	cpi	r24, 0x70	; 112
    18a2:	21 f0       	breq	.+8      	; 0x18ac <vfprintf+0x278>
    18a4:	88 37       	cpi	r24, 0x78	; 120
    18a6:	09 f0       	breq	.+2      	; 0x18aa <vfprintf+0x276>
    18a8:	a8 c0       	rjmp	.+336    	; 0x19fa <vfprintf+0x3c6>
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <vfprintf+0x27c>
    18ac:	20 e1       	ldi	r18, 0x10	; 16
    18ae:	b2 2a       	or	r11, r18
    18b0:	b4 fe       	sbrs	r11, 4
    18b2:	0b c0       	rjmp	.+22     	; 0x18ca <vfprintf+0x296>
    18b4:	84 e0       	ldi	r24, 0x04	; 4
    18b6:	b8 2a       	or	r11, r24
    18b8:	08 c0       	rjmp	.+16     	; 0x18ca <vfprintf+0x296>
    18ba:	b4 fe       	sbrs	r11, 4
    18bc:	09 c0       	rjmp	.+18     	; 0x18d0 <vfprintf+0x29c>
    18be:	e6 e0       	ldi	r30, 0x06	; 6
    18c0:	be 2a       	or	r11, r30
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <vfprintf+0x29c>
    18c4:	28 e0       	ldi	r18, 0x08	; 8
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	05 c0       	rjmp	.+10     	; 0x18d4 <vfprintf+0x2a0>
    18ca:	20 e1       	ldi	r18, 0x10	; 16
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <vfprintf+0x2a0>
    18d0:	20 e1       	ldi	r18, 0x10	; 16
    18d2:	32 e0       	ldi	r19, 0x02	; 2
    18d4:	b7 fe       	sbrs	r11, 7
    18d6:	08 c0       	rjmp	.+16     	; 0x18e8 <vfprintf+0x2b4>
    18d8:	f8 01       	movw	r30, r16
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	0c 5f       	subi	r16, 0xFC	; 252
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	07 c0       	rjmp	.+14     	; 0x18f6 <vfprintf+0x2c2>
    18e8:	f8 01       	movw	r30, r16
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 5f       	subi	r16, 0xFE	; 254
    18f4:	1f 4f       	sbci	r17, 0xFF	; 255
    18f6:	a2 01       	movw	r20, r4
    18f8:	b6 d0       	rcall	.+364    	; 0x1a66 <__ultoa_invert>
    18fa:	78 2e       	mov	r7, r24
    18fc:	74 18       	sub	r7, r4
    18fe:	ff e7       	ldi	r31, 0x7F	; 127
    1900:	bf 22       	and	r11, r31
    1902:	b6 fe       	sbrs	r11, 6
    1904:	0b c0       	rjmp	.+22     	; 0x191c <vfprintf+0x2e8>
    1906:	2e ef       	ldi	r18, 0xFE	; 254
    1908:	b2 22       	and	r11, r18
    190a:	7e 14       	cp	r7, r14
    190c:	38 f4       	brcc	.+14     	; 0x191c <vfprintf+0x2e8>
    190e:	b4 fe       	sbrs	r11, 4
    1910:	07 c0       	rjmp	.+14     	; 0x1920 <vfprintf+0x2ec>
    1912:	b2 fc       	sbrc	r11, 2
    1914:	05 c0       	rjmp	.+10     	; 0x1920 <vfprintf+0x2ec>
    1916:	8f ee       	ldi	r24, 0xEF	; 239
    1918:	b8 22       	and	r11, r24
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <vfprintf+0x2ec>
    191c:	a7 2c       	mov	r10, r7
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <vfprintf+0x2ee>
    1920:	ae 2c       	mov	r10, r14
    1922:	8b 2d       	mov	r24, r11
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	b4 fe       	sbrs	r11, 4
    1928:	0d c0       	rjmp	.+26     	; 0x1944 <vfprintf+0x310>
    192a:	fe 01       	movw	r30, r28
    192c:	e7 0d       	add	r30, r7
    192e:	f1 1d       	adc	r31, r1
    1930:	20 81       	ld	r18, Z
    1932:	20 33       	cpi	r18, 0x30	; 48
    1934:	19 f4       	brne	.+6      	; 0x193c <vfprintf+0x308>
    1936:	e9 ee       	ldi	r30, 0xE9	; 233
    1938:	be 22       	and	r11, r30
    193a:	09 c0       	rjmp	.+18     	; 0x194e <vfprintf+0x31a>
    193c:	a3 94       	inc	r10
    193e:	b2 fe       	sbrs	r11, 2
    1940:	06 c0       	rjmp	.+12     	; 0x194e <vfprintf+0x31a>
    1942:	04 c0       	rjmp	.+8      	; 0x194c <vfprintf+0x318>
    1944:	86 78       	andi	r24, 0x86	; 134
    1946:	90 70       	andi	r25, 0x00	; 0
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	09 f0       	breq	.+2      	; 0x194e <vfprintf+0x31a>
    194c:	a3 94       	inc	r10
    194e:	8b 2c       	mov	r8, r11
    1950:	99 24       	eor	r9, r9
    1952:	b3 fc       	sbrc	r11, 3
    1954:	13 c0       	rjmp	.+38     	; 0x197c <vfprintf+0x348>
    1956:	b0 fe       	sbrs	r11, 0
    1958:	0e c0       	rjmp	.+28     	; 0x1976 <vfprintf+0x342>
    195a:	af 14       	cp	r10, r15
    195c:	28 f4       	brcc	.+10     	; 0x1968 <vfprintf+0x334>
    195e:	e7 2c       	mov	r14, r7
    1960:	ef 0c       	add	r14, r15
    1962:	ea 18       	sub	r14, r10
    1964:	af 2c       	mov	r10, r15
    1966:	07 c0       	rjmp	.+14     	; 0x1976 <vfprintf+0x342>
    1968:	e7 2c       	mov	r14, r7
    196a:	05 c0       	rjmp	.+10     	; 0x1976 <vfprintf+0x342>
    196c:	80 e2       	ldi	r24, 0x20	; 32
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	b6 01       	movw	r22, r12
    1972:	dd dd       	rcall	.-1094   	; 0x152e <fputc>
    1974:	a3 94       	inc	r10
    1976:	af 14       	cp	r10, r15
    1978:	c8 f3       	brcs	.-14     	; 0x196c <vfprintf+0x338>
    197a:	04 c0       	rjmp	.+8      	; 0x1984 <vfprintf+0x350>
    197c:	af 14       	cp	r10, r15
    197e:	10 f4       	brcc	.+4      	; 0x1984 <vfprintf+0x350>
    1980:	fa 18       	sub	r15, r10
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <vfprintf+0x352>
    1984:	ff 24       	eor	r15, r15
    1986:	84 fe       	sbrs	r8, 4
    1988:	0e c0       	rjmp	.+28     	; 0x19a6 <vfprintf+0x372>
    198a:	80 e3       	ldi	r24, 0x30	; 48
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	b6 01       	movw	r22, r12
    1990:	ce dd       	rcall	.-1124   	; 0x152e <fputc>
    1992:	82 fe       	sbrs	r8, 2
    1994:	1d c0       	rjmp	.+58     	; 0x19d0 <vfprintf+0x39c>
    1996:	81 fe       	sbrs	r8, 1
    1998:	03 c0       	rjmp	.+6      	; 0x19a0 <vfprintf+0x36c>
    199a:	88 e5       	ldi	r24, 0x58	; 88
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	10 c0       	rjmp	.+32     	; 0x19c0 <vfprintf+0x38c>
    19a0:	88 e7       	ldi	r24, 0x78	; 120
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0d c0       	rjmp	.+26     	; 0x19c0 <vfprintf+0x38c>
    19a6:	c4 01       	movw	r24, r8
    19a8:	86 78       	andi	r24, 0x86	; 134
    19aa:	90 70       	andi	r25, 0x00	; 0
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	81 f0       	breq	.+32     	; 0x19d0 <vfprintf+0x39c>
    19b0:	81 fc       	sbrc	r8, 1
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <vfprintf+0x384>
    19b4:	80 e2       	ldi	r24, 0x20	; 32
    19b6:	01 c0       	rjmp	.+2      	; 0x19ba <vfprintf+0x386>
    19b8:	8b e2       	ldi	r24, 0x2B	; 43
    19ba:	b7 fc       	sbrc	r11, 7
    19bc:	8d e2       	ldi	r24, 0x2D	; 45
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	b6 01       	movw	r22, r12
    19c2:	b5 dd       	rcall	.-1174   	; 0x152e <fputc>
    19c4:	05 c0       	rjmp	.+10     	; 0x19d0 <vfprintf+0x39c>
    19c6:	80 e3       	ldi	r24, 0x30	; 48
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	b6 01       	movw	r22, r12
    19cc:	b0 dd       	rcall	.-1184   	; 0x152e <fputc>
    19ce:	ea 94       	dec	r14
    19d0:	7e 14       	cp	r7, r14
    19d2:	c8 f3       	brcs	.-14     	; 0x19c6 <vfprintf+0x392>
    19d4:	7a 94       	dec	r7
    19d6:	f2 01       	movw	r30, r4
    19d8:	e7 0d       	add	r30, r7
    19da:	f1 1d       	adc	r31, r1
    19dc:	80 81       	ld	r24, Z
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	b6 01       	movw	r22, r12
    19e2:	a5 dd       	rcall	.-1206   	; 0x152e <fputc>
    19e4:	77 20       	and	r7, r7
    19e6:	b1 f7       	brne	.-20     	; 0x19d4 <vfprintf+0x3a0>
    19e8:	05 c0       	rjmp	.+10     	; 0x19f4 <vfprintf+0x3c0>
    19ea:	80 e2       	ldi	r24, 0x20	; 32
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	b6 01       	movw	r22, r12
    19f0:	9e dd       	rcall	.-1220   	; 0x152e <fputc>
    19f2:	fa 94       	dec	r15
    19f4:	ff 20       	and	r15, r15
    19f6:	c9 f7       	brne	.-14     	; 0x19ea <vfprintf+0x3b6>
    19f8:	44 ce       	rjmp	.-888    	; 0x1682 <vfprintf+0x4e>
    19fa:	f6 01       	movw	r30, r12
    19fc:	26 81       	ldd	r18, Z+6	; 0x06
    19fe:	37 81       	ldd	r19, Z+7	; 0x07
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <vfprintf+0x3d2>
    1a02:	2f ef       	ldi	r18, 0xFF	; 255
    1a04:	3f ef       	ldi	r19, 0xFF	; 255
    1a06:	c9 01       	movw	r24, r18
    1a08:	2c 96       	adiw	r28, 0x0c	; 12
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	cf 90       	pop	r12
    1a24:	bf 90       	pop	r11
    1a26:	af 90       	pop	r10
    1a28:	9f 90       	pop	r9
    1a2a:	8f 90       	pop	r8
    1a2c:	7f 90       	pop	r7
    1a2e:	6f 90       	pop	r6
    1a30:	5f 90       	pop	r5
    1a32:	4f 90       	pop	r4
    1a34:	3f 90       	pop	r3
    1a36:	2f 90       	pop	r2
    1a38:	08 95       	ret

00001a3a <strnlen_P>:
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	05 90       	lpm	r0, Z+
    1a3e:	61 50       	subi	r22, 0x01	; 1
    1a40:	70 40       	sbci	r23, 0x00	; 0
    1a42:	01 10       	cpse	r0, r1
    1a44:	d8 f7       	brcc	.-10     	; 0x1a3c <strnlen_P+0x2>
    1a46:	80 95       	com	r24
    1a48:	90 95       	com	r25
    1a4a:	8e 0f       	add	r24, r30
    1a4c:	9f 1f       	adc	r25, r31
    1a4e:	08 95       	ret

00001a50 <strnlen>:
    1a50:	fc 01       	movw	r30, r24
    1a52:	61 50       	subi	r22, 0x01	; 1
    1a54:	70 40       	sbci	r23, 0x00	; 0
    1a56:	01 90       	ld	r0, Z+
    1a58:	01 10       	cpse	r0, r1
    1a5a:	d8 f7       	brcc	.-10     	; 0x1a52 <strnlen+0x2>
    1a5c:	80 95       	com	r24
    1a5e:	90 95       	com	r25
    1a60:	8e 0f       	add	r24, r30
    1a62:	9f 1f       	adc	r25, r31
    1a64:	08 95       	ret

00001a66 <__ultoa_invert>:
    1a66:	fa 01       	movw	r30, r20
    1a68:	aa 27       	eor	r26, r26
    1a6a:	28 30       	cpi	r18, 0x08	; 8
    1a6c:	51 f1       	breq	.+84     	; 0x1ac2 <__ultoa_invert+0x5c>
    1a6e:	20 31       	cpi	r18, 0x10	; 16
    1a70:	81 f1       	breq	.+96     	; 0x1ad2 <__ultoa_invert+0x6c>
    1a72:	e8 94       	clt
    1a74:	6f 93       	push	r22
    1a76:	6e 7f       	andi	r22, 0xFE	; 254
    1a78:	6e 5f       	subi	r22, 0xFE	; 254
    1a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	af 4f       	sbci	r26, 0xFF	; 255
    1a82:	b1 e0       	ldi	r27, 0x01	; 1
    1a84:	3e d0       	rcall	.+124    	; 0x1b02 <__ultoa_invert+0x9c>
    1a86:	b4 e0       	ldi	r27, 0x04	; 4
    1a88:	3c d0       	rcall	.+120    	; 0x1b02 <__ultoa_invert+0x9c>
    1a8a:	67 0f       	add	r22, r23
    1a8c:	78 1f       	adc	r23, r24
    1a8e:	89 1f       	adc	r24, r25
    1a90:	9a 1f       	adc	r25, r26
    1a92:	a1 1d       	adc	r26, r1
    1a94:	68 0f       	add	r22, r24
    1a96:	79 1f       	adc	r23, r25
    1a98:	8a 1f       	adc	r24, r26
    1a9a:	91 1d       	adc	r25, r1
    1a9c:	a1 1d       	adc	r26, r1
    1a9e:	6a 0f       	add	r22, r26
    1aa0:	71 1d       	adc	r23, r1
    1aa2:	81 1d       	adc	r24, r1
    1aa4:	91 1d       	adc	r25, r1
    1aa6:	a1 1d       	adc	r26, r1
    1aa8:	20 d0       	rcall	.+64     	; 0x1aea <__ultoa_invert+0x84>
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <__ultoa_invert+0x48>
    1aac:	68 94       	set
    1aae:	3f 91       	pop	r19
    1ab0:	2a e0       	ldi	r18, 0x0A	; 10
    1ab2:	26 9f       	mul	r18, r22
    1ab4:	11 24       	eor	r1, r1
    1ab6:	30 19       	sub	r19, r0
    1ab8:	30 5d       	subi	r19, 0xD0	; 208
    1aba:	31 93       	st	Z+, r19
    1abc:	de f6       	brtc	.-74     	; 0x1a74 <__ultoa_invert+0xe>
    1abe:	cf 01       	movw	r24, r30
    1ac0:	08 95       	ret
    1ac2:	46 2f       	mov	r20, r22
    1ac4:	47 70       	andi	r20, 0x07	; 7
    1ac6:	40 5d       	subi	r20, 0xD0	; 208
    1ac8:	41 93       	st	Z+, r20
    1aca:	b3 e0       	ldi	r27, 0x03	; 3
    1acc:	0f d0       	rcall	.+30     	; 0x1aec <__ultoa_invert+0x86>
    1ace:	c9 f7       	brne	.-14     	; 0x1ac2 <__ultoa_invert+0x5c>
    1ad0:	f6 cf       	rjmp	.-20     	; 0x1abe <__ultoa_invert+0x58>
    1ad2:	46 2f       	mov	r20, r22
    1ad4:	4f 70       	andi	r20, 0x0F	; 15
    1ad6:	40 5d       	subi	r20, 0xD0	; 208
    1ad8:	4a 33       	cpi	r20, 0x3A	; 58
    1ada:	18 f0       	brcs	.+6      	; 0x1ae2 <__ultoa_invert+0x7c>
    1adc:	49 5d       	subi	r20, 0xD9	; 217
    1ade:	31 fd       	sbrc	r19, 1
    1ae0:	40 52       	subi	r20, 0x20	; 32
    1ae2:	41 93       	st	Z+, r20
    1ae4:	02 d0       	rcall	.+4      	; 0x1aea <__ultoa_invert+0x84>
    1ae6:	a9 f7       	brne	.-22     	; 0x1ad2 <__ultoa_invert+0x6c>
    1ae8:	ea cf       	rjmp	.-44     	; 0x1abe <__ultoa_invert+0x58>
    1aea:	b4 e0       	ldi	r27, 0x04	; 4
    1aec:	a6 95       	lsr	r26
    1aee:	97 95       	ror	r25
    1af0:	87 95       	ror	r24
    1af2:	77 95       	ror	r23
    1af4:	67 95       	ror	r22
    1af6:	ba 95       	dec	r27
    1af8:	c9 f7       	brne	.-14     	; 0x1aec <__ultoa_invert+0x86>
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	61 05       	cpc	r22, r1
    1afe:	71 05       	cpc	r23, r1
    1b00:	08 95       	ret
    1b02:	9b 01       	movw	r18, r22
    1b04:	ac 01       	movw	r20, r24
    1b06:	0a 2e       	mov	r0, r26
    1b08:	06 94       	lsr	r0
    1b0a:	57 95       	ror	r21
    1b0c:	47 95       	ror	r20
    1b0e:	37 95       	ror	r19
    1b10:	27 95       	ror	r18
    1b12:	ba 95       	dec	r27
    1b14:	c9 f7       	brne	.-14     	; 0x1b08 <__ultoa_invert+0xa2>
    1b16:	62 0f       	add	r22, r18
    1b18:	73 1f       	adc	r23, r19
    1b1a:	84 1f       	adc	r24, r20
    1b1c:	95 1f       	adc	r25, r21
    1b1e:	a0 1d       	adc	r26, r0
    1b20:	08 95       	ret

00001b22 <_exit>:
    1b22:	f8 94       	cli

00001b24 <__stop_program>:
    1b24:	ff cf       	rjmp	.-2      	; 0x1b24 <__stop_program>
