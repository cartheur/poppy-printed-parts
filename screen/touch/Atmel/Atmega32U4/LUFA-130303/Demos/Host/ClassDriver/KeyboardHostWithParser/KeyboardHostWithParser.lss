
KeyboardHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000025d8  0000266c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800128  00800128  00002694  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00002694  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ddb  00000000  00000000  000049a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000790  00000000  00000000  0000577f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000117b  00000000  00000000  00005f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000d067  00000000  00000000  0000708a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d69  00000000  00000000  000140f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009a07  00000000  00000000  00016e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c80  00000000  00000000  00020864  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004e28  00000000  00000000  000214e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007253  00000000  00000000  0002630c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001f95  00000000  00000000  0002d55f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a38  00000000  00000000  0002f4f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	1f c1       	rjmp	.+574    	; 0x240 <__ctors_end>
       2:	00 00       	nop
       4:	3b c1       	rjmp	.+630    	; 0x27c <__bad_interrupt>
       6:	00 00       	nop
       8:	39 c1       	rjmp	.+626    	; 0x27c <__bad_interrupt>
       a:	00 00       	nop
       c:	37 c1       	rjmp	.+622    	; 0x27c <__bad_interrupt>
       e:	00 00       	nop
      10:	35 c1       	rjmp	.+618    	; 0x27c <__bad_interrupt>
      12:	00 00       	nop
      14:	33 c1       	rjmp	.+614    	; 0x27c <__bad_interrupt>
      16:	00 00       	nop
      18:	31 c1       	rjmp	.+610    	; 0x27c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2f c1       	rjmp	.+606    	; 0x27c <__bad_interrupt>
      1e:	00 00       	nop
      20:	2d c1       	rjmp	.+602    	; 0x27c <__bad_interrupt>
      22:	00 00       	nop
      24:	2b c1       	rjmp	.+598    	; 0x27c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__vector_10>
      2c:	27 c1       	rjmp	.+590    	; 0x27c <__bad_interrupt>
      2e:	00 00       	nop
      30:	25 c1       	rjmp	.+586    	; 0x27c <__bad_interrupt>
      32:	00 00       	nop
      34:	23 c1       	rjmp	.+582    	; 0x27c <__bad_interrupt>
      36:	00 00       	nop
      38:	21 c1       	rjmp	.+578    	; 0x27c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1f c1       	rjmp	.+574    	; 0x27c <__bad_interrupt>
      3e:	00 00       	nop
      40:	1d c1       	rjmp	.+570    	; 0x27c <__bad_interrupt>
      42:	00 00       	nop
      44:	1b c1       	rjmp	.+566    	; 0x27c <__bad_interrupt>
      46:	00 00       	nop
      48:	19 c1       	rjmp	.+562    	; 0x27c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	17 c1       	rjmp	.+558    	; 0x27c <__bad_interrupt>
      4e:	00 00       	nop
      50:	15 c1       	rjmp	.+554    	; 0x27c <__bad_interrupt>
      52:	00 00       	nop
      54:	13 c1       	rjmp	.+550    	; 0x27c <__bad_interrupt>
      56:	00 00       	nop
      58:	11 c1       	rjmp	.+546    	; 0x27c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0f c1       	rjmp	.+542    	; 0x27c <__bad_interrupt>
      5e:	00 00       	nop
      60:	0d c1       	rjmp	.+538    	; 0x27c <__bad_interrupt>
      62:	00 00       	nop
      64:	0b c1       	rjmp	.+534    	; 0x27c <__bad_interrupt>
      66:	00 00       	nop
      68:	09 c1       	rjmp	.+530    	; 0x27c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	07 c1       	rjmp	.+526    	; 0x27c <__bad_interrupt>
      6e:	00 00       	nop
      70:	05 c1       	rjmp	.+522    	; 0x27c <__bad_interrupt>
      72:	00 00       	nop
      74:	03 c1       	rjmp	.+518    	; 0x27c <__bad_interrupt>
      76:	00 00       	nop
      78:	01 c1       	rjmp	.+514    	; 0x27c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ff c0       	rjmp	.+510    	; 0x27c <__bad_interrupt>
      7e:	00 00       	nop
      80:	fd c0       	rjmp	.+506    	; 0x27c <__bad_interrupt>
      82:	00 00       	nop
      84:	fb c0       	rjmp	.+502    	; 0x27c <__bad_interrupt>
      86:	00 00       	nop
      88:	f9 c0       	rjmp	.+498    	; 0x27c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f7 c0       	rjmp	.+494    	; 0x27c <__bad_interrupt>
      8e:	00 00       	nop
      90:	f5 c0       	rjmp	.+490    	; 0x27c <__bad_interrupt>
      92:	00 00       	nop
      94:	f3 c0       	rjmp	.+486    	; 0x27c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4293>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4286>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4281>:
     11d:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4279>:
     134:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     144:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     154:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
     164:	64 20 4b 65 79 62 6f 61 72 64 2e 0d 0a 00           d Keyboard....

00000172 <__c.4277>:
     172:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     182:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     192:	6f 6e 2e 0d 0a 00                                   on....

00000198 <__c.4275>:
     198:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1a8:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4b 65 79 62     Not a Valid Keyb
     1b8:	6f 61 72 64 2e 0d 0a 00                             oard....

000001c0 <__c.4273>:
     1c0:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1d0:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1e0:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001ed <__c.4266>:
     1ed:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1fd:	68 65 64 2e 0d 0a 00                                hed....

00000204 <__c.4261>:
     204:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     214:	0d 0a 00                                            ...

00000217 <__c.4240>:
     217:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 6f     .[36mKeyboard Ho
     227:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     237:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	d0 e2       	ldi	r29, 0x20	; 32
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61

0000024c <__do_copy_data>:
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	e8 ed       	ldi	r30, 0xD8	; 216
     254:	f5 e2       	ldi	r31, 0x25	; 37
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	0b bf       	out	0x3b, r16	; 59
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x14>
     25c:	07 90       	elpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	a8 32       	cpi	r26, 0x28	; 40
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0x10>

00000266 <__do_clear_bss>:
     266:	15 e0       	ldi	r17, 0x05	; 5
     268:	a8 e2       	ldi	r26, 0x28	; 40
     26a:	b1 e0       	ldi	r27, 0x01	; 1
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	a3 32       	cpi	r26, 0x23	; 35
     272:	b1 07       	cpc	r27, r17
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	db d0       	rcall	.+438    	; 0x42e <main>
     278:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <_exit>

0000027c <__bad_interrupt>:
     27c:	c1 ce       	rjmp	.-638    	; 0x0 <__vectors>

0000027e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     27e:	9b b1       	in	r25, 0x0b	; 11
     280:	9f 70       	andi	r25, 0x0F	; 15
     282:	98 2b       	or	r25, r24
     284:	9b b9       	out	0x0b, r25	; 11
			}
     286:	08 95       	ret

00000288 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     288:	84 b7       	in	r24, 0x34	; 52
     28a:	87 7f       	andi	r24, 0xF7	; 247
     28c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     28e:	28 e1       	ldi	r18, 0x18	; 24
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	20 93 60 00 	sts	0x0060, r18
     298:	10 92 60 00 	sts	0x0060, r1
     29c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	80 93 61 00 	sts	0x0061, r24
     2aa:	90 93 61 00 	sts	0x0061, r25
     2ae:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2b0:	83 e3       	ldi	r24, 0x33	; 51
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	90 93 cd 00 	sts	0x00CD, r25
     2b8:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2bc:	86 e0       	ldi	r24, 0x06	; 6
     2be:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2c2:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2c6:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2ca:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2cc:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2ce:	8a b1       	in	r24, 0x0a	; 10
     2d0:	80 6f       	ori	r24, 0xF0	; 240
     2d2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2d4:	8b b1       	in	r24, 0x0b	; 11
     2d6:	8f 70       	andi	r24, 0x0F	; 15
     2d8:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2da:	0e 94 06 0b 	call	0x160c	; 0x160c <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <Serial_CreateStream>

000002e6 <KeyboardHost_Task>:

/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
     2e6:	7f 92       	push	r7
     2e8:	8f 92       	push	r8
     2ea:	9f 92       	push	r9
     2ec:	af 92       	push	r10
     2ee:	bf 92       	push	r11
     2f0:	cf 92       	push	r12
     2f2:	df 92       	push	r13
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	df 93       	push	r29
     2fe:	cf 93       	push	r28
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
				/* Once a scan-code is found, stop scanning through the report items */
				break;
			}
		}
	}
}
     304:	cd b6       	in	r12, 0x3d	; 61
     306:	de b6       	in	r13, 0x3e	; 62
/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     308:	80 91 0e 05 	lds	r24, 0x050E
     30c:	8b 30       	cpi	r24, 0x0B	; 11
     30e:	09 f0       	breq	.+2      	; 0x312 <KeyboardHost_Task+0x2c>
     310:	7b c0       	rjmp	.+246    	; 0x408 <KeyboardHost_Task+0x122>
	  return;

	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <HID_Host_IsReportReceived>
     31a:	88 23       	and	r24, r24
     31c:	09 f4       	brne	.+2      	; 0x320 <KeyboardHost_Task+0x3a>
     31e:	74 c0       	rjmp	.+232    	; 0x408 <KeyboardHost_Task+0x122>
     320:	ed b6       	in	r14, 0x3d	; 61
     322:	fe b6       	in	r15, 0x3e	; 62
     324:	ad b6       	in	r10, 0x3d	; 61
     326:	7f 2c       	mov	r7, r15
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
     328:	80 91 16 01 	lds	r24, 0x0116
     32c:	2d b7       	in	r18, 0x3d	; 61
     32e:	3e b7       	in	r19, 0x3e	; 62
     330:	28 1b       	sub	r18, r24
     332:	31 09       	sbc	r19, r1
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	3e bf       	out	0x3e, r19	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	2d bf       	out	0x3d, r18	; 61
     33e:	2f 5f       	subi	r18, 0xFF	; 255
     340:	3f 4f       	sbci	r19, 0xFF	; 255
     342:	49 01       	movw	r8, r18
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	b9 01       	movw	r22, r18
     34a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <HID_Host_ReceiveReport>

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     34e:	bb 24       	eor	r11, r11
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     350:	8a e2       	ldi	r24, 0x2A	; 42
     352:	e8 2e       	mov	r14, r24
     354:	f1 2c       	mov	r15, r1
	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     356:	4c c0       	rjmp	.+152    	; 0x3f0 <KeyboardHost_Task+0x10a>
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     358:	8b 2d       	mov	r24, r11
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	8e 9d       	mul	r24, r14
     35e:	80 01       	movw	r16, r0
     360:	8f 9d       	mul	r24, r15
     362:	10 0d       	add	r17, r0
     364:	9e 9d       	mul	r25, r14
     366:	10 0d       	add	r17, r0
     368:	11 24       	eor	r1, r1
     36a:	b8 01       	movw	r22, r16
     36c:	67 5d       	subi	r22, 0xD7	; 215
     36e:	7e 4f       	sbci	r23, 0xFE	; 254

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(KeyboardReport, ReportItem)))
     370:	c4 01       	movw	r24, r8
     372:	2c d5       	rcall	.+2648   	; 0xdcc <USB_GetHIDReportItemInfo>
     374:	88 23       	and	r24, r24
     376:	d9 f1       	breq	.+118    	; 0x3ee <KeyboardHost_Task+0x108>
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page      == USAGE_PAGE_KEYBOARD) &&
     378:	f8 01       	movw	r30, r16
     37a:	e8 5d       	subi	r30, 0xD8	; 216
     37c:	fe 4f       	sbci	r31, 0xFE	; 254
     37e:	82 85       	ldd	r24, Z+10	; 0x0a
     380:	93 85       	ldd	r25, Z+11	; 0x0b
     382:	87 30       	cpi	r24, 0x07	; 7
     384:	91 05       	cpc	r25, r1
     386:	99 f5       	brne	.+102    	; 0x3ee <KeyboardHost_Task+0x108>
     388:	81 85       	ldd	r24, Z+9	; 0x09
     38a:	88 30       	cpi	r24, 0x08	; 8
     38c:	81 f5       	brne	.+96     	; 0x3ee <KeyboardHost_Task+0x108>
				(ReportItem->Attributes.BitSize         == 8)                   &&
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	90 8d       	ldd	r25, Z+24	; 0x18
     392:	a1 8d       	ldd	r26, Z+25	; 0x19
     394:	b2 8d       	ldd	r27, Z+26	; 0x1a
     396:	82 30       	cpi	r24, 0x02	; 2
     398:	91 05       	cpc	r25, r1
     39a:	a1 05       	cpc	r26, r1
     39c:	b1 05       	cpc	r27, r1
     39e:	38 f1       	brcs	.+78     	; 0x3ee <KeyboardHost_Task+0x108>
				(ReportItem->Attributes.Logical.Maximum > 1)                    &&
     3a0:	83 81       	ldd	r24, Z+3	; 0x03
     3a2:	88 23       	and	r24, r24
     3a4:	21 f5       	brne	.+72     	; 0x3ee <KeyboardHost_Task+0x108>
				(ReportItem->ItemType                   == HID_REPORT_ITEM_In))
			{
				/* Key code is an unsigned char in length, cast to the appropriate type */
				uint8_t KeyCode = (uint8_t)ReportItem->Value;
     3a6:	83 a1       	ldd	r24, Z+35	; 0x23

				/* If scan-code is non-zero, a key is being pressed */
				if (KeyCode)
     3a8:	88 23       	and	r24, r24
     3aa:	39 f1       	breq	.+78     	; 0x3fa <KeyboardHost_Task+0x114>
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
     3ac:	90 e2       	ldi	r25, 0x20	; 32
     3ae:	99 b9       	out	0x09, r25	; 9
					LEDs_ToggleLEDs(LEDS_LED2);

					char PressedKey = 0;

					/* Convert scan-code to printable character if alphanumeric */
					if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     3b0:	98 2f       	mov	r25, r24
     3b2:	94 50       	subi	r25, 0x04	; 4
     3b4:	9a 31       	cpi	r25, 0x1A	; 26
     3b6:	10 f4       	brcc	.+4      	; 0x3bc <KeyboardHost_Task+0xd6>
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     3b8:	83 5c       	subi	r24, 0xC3	; 195
     3ba:	11 c0       	rjmp	.+34     	; 0x3de <KeyboardHost_Task+0xf8>
					}
					else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     3bc:	98 2f       	mov	r25, r24
     3be:	9e 51       	subi	r25, 0x1E	; 30
     3c0:	99 30       	cpi	r25, 0x09	; 9
     3c2:	10 f4       	brcc	.+4      	; 0x3c8 <KeyboardHost_Task+0xe2>
							 (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     3c4:	8d 5e       	subi	r24, 0xED	; 237
     3c6:	0b c0       	rjmp	.+22     	; 0x3de <KeyboardHost_Task+0xf8>
					}
					else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     3c8:	87 32       	cpi	r24, 0x27	; 39
     3ca:	31 f0       	breq	.+12     	; 0x3d8 <KeyboardHost_Task+0xf2>
					{
						PressedKey = '0';
					}
					else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     3cc:	8c 32       	cpi	r24, 0x2C	; 44
     3ce:	31 f0       	breq	.+12     	; 0x3dc <KeyboardHost_Task+0xf6>
					{
						PressedKey = ' ';
					}
					else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     3d0:	88 32       	cpi	r24, 0x28	; 40
     3d2:	99 f4       	brne	.+38     	; 0x3fa <KeyboardHost_Task+0x114>
					{
						PressedKey = '\n';
     3d4:	8a e0       	ldi	r24, 0x0A	; 10
     3d6:	03 c0       	rjmp	.+6      	; 0x3de <KeyboardHost_Task+0xf8>
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
					}
					else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
					{
						PressedKey = '0';
     3d8:	80 e3       	ldi	r24, 0x30	; 48
     3da:	01 c0       	rjmp	.+2      	; 0x3de <KeyboardHost_Task+0xf8>
					}
					else if (KeyCode == HID_KEYBOARD_SC_SPACE)
					{
						PressedKey = ' ';
     3dc:	80 e2       	ldi	r24, 0x20	; 32
						PressedKey = '\n';
					}

					/* Print the pressed key character out through the serial port if valid */
					if (PressedKey)
					  putchar(PressedKey);
     3de:	60 91 1f 05 	lds	r22, 0x051F
     3e2:	70 91 20 05 	lds	r23, 0x0520
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <fputc>
     3ec:	06 c0       	rjmp	.+12     	; 0x3fa <KeyboardHost_Task+0x114>
	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     3ee:	b3 94       	inc	r11
     3f0:	80 91 28 01 	lds	r24, 0x0128
     3f4:	b8 16       	cp	r11, r24
     3f6:	08 f4       	brcc	.+2      	; 0x3fa <KeyboardHost_Task+0x114>
     3f8:	af cf       	rjmp	.-162    	; 0x358 <KeyboardHost_Task+0x72>
     3fa:	8a 2d       	mov	r24, r10
     3fc:	97 2d       	mov	r25, r7
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	9e bf       	out	0x3e, r25	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	8d bf       	out	0x3d, r24	; 61
				/* Once a scan-code is found, stop scanning through the report items */
				break;
			}
		}
	}
}
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de be       	out	0x3e, r13	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd be       	out	0x3d, r12	; 61
     412:	cf 91       	pop	r28
     414:	df 91       	pop	r29
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	bf 90       	pop	r11
     424:	af 90       	pop	r10
     426:	9f 90       	pop	r9
     428:	8f 90       	pop	r8
     42a:	7f 90       	pop	r7
     42c:	08 95       	ret

0000042e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     42e:	2c df       	rcall	.-424    	; 0x288 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Keyboard Host Demo running.\r\n" ESC_FG_WHITE));
     430:	87 e1       	ldi	r24, 0x17	; 23
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	0e 94 3b 10 	call	0x2076	; 0x2076 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     438:	80 e1       	ldi	r24, 0x10	; 16
     43a:	21 df       	rcall	.-446    	; 0x27e <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     43c:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		KeyboardHost_Task();
     43e:	53 df       	rcall	.-346    	; 0x2e6 <KeyboardHost_Task>

		HID_Host_USBTask(&Keyboard_HID_Interface);
		USB_USBTask();
     440:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <USB_USBTask>
     444:	fc cf       	rjmp	.-8      	; 0x43e <main+0x10>

00000446 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     446:	84 e0       	ldi	r24, 0x04	; 4
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	0e 94 3b 10 	call	0x2076	; 0x2076 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     44e:	80 ea       	ldi	r24, 0xA0	; 160
}
     450:	16 cf       	rjmp	.-468    	; 0x27e <LEDs_SetAllLEDs>

00000452 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     452:	8d ee       	ldi	r24, 0xED	; 237
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 3b 10 	call	0x2076	; 0x2076 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     45a:	80 e1       	ldi	r24, 0x10	; 16
}
     45c:	10 cf       	rjmp	.-480    	; 0x27e <LEDs_SetAllLEDs>

0000045e <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	df 93       	push	r29
     464:	cf 93       	push	r28
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	c2 50       	subi	r28, 0x02	; 2
     46c:	d2 40       	sbci	r29, 0x02	; 2
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     478:	80 ea       	ldi	r24, 0xA0	; 160
     47a:	01 df       	rcall	.-510    	; 0x27e <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     47c:	8e 01       	movw	r16, r28
     47e:	0d 5f       	subi	r16, 0xFD	; 253
     480:	1f 4f       	sbci	r17, 0xFF	; 255
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	be 01       	movw	r22, r28
     486:	6f 5f       	subi	r22, 0xFF	; 255
     488:	7f 4f       	sbci	r23, 0xFF	; 255
     48a:	a8 01       	movw	r20, r16
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	32 e0       	ldi	r19, 0x02	; 2
     490:	0e 94 ba 0b 	call	0x1774	; 0x1774 <USB_Host_GetDeviceConfigDescriptor>
     494:	88 23       	and	r24, r24
     496:	19 f0       	breq	.+6      	; 0x49e <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     498:	80 ec       	ldi	r24, 0xC0	; 192
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	13 c0       	rjmp	.+38     	; 0x4c4 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Keyboard_HID_Interface,
     49e:	69 81       	ldd	r22, Y+1	; 0x01
     4a0:	7a 81       	ldd	r23, Y+2	; 0x02
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	a8 01       	movw	r20, r16
     4a8:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <HID_Host_ConfigurePipes>
     4ac:	88 23       	and	r24, r24
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Keyboard.\r\n"));
     4b0:	88 e9       	ldi	r24, 0x98	; 152
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <USB_Host_SetDeviceConfiguration>
     4bc:	88 23       	and	r24, r24
     4be:	31 f0       	breq	.+12     	; 0x4cc <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4c0:	82 e7       	ldi	r24, 0x72	; 114
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 3b 10 	call	0x2076	; 0x2076 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4c8:	80 e9       	ldi	r24, 0x90	; 144
     4ca:	15 c0       	rjmp	.+42     	; 0x4f6 <EVENT_USB_Host_DeviceEnumerationComplete+0x98>
		return;
	}

	if (HID_Host_SetReportProtocol(&Keyboard_HID_Interface) != 0)
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <HID_Host_SetReportProtocol>
     4d4:	88 23       	and	r24, r24
     4d6:	51 f0       	breq	.+20     	; 0x4ec <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Keyboard.\r\n"));
     4d8:	84 e3       	ldi	r24, 0x34	; 52
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 3b 10 	call	0x2076	; 0x2076 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4e0:	80 e9       	ldi	r24, 0x90	; 144
     4e2:	cd de       	rcall	.-614    	; 0x27e <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <USB_Host_SetDeviceConfiguration>
		return;
     4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <EVENT_USB_Host_DeviceEnumerationComplete+0x9a>
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     4ec:	8d e1       	ldi	r24, 0x1D	; 29
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	0e 94 3b 10 	call	0x2076	; 0x2076 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     4f4:	80 e6       	ldi	r24, 0x60	; 96
     4f6:	c3 de       	rcall	.-634    	; 0x27e <LEDs_SetAllLEDs>
}
     4f8:	ce 5f       	subi	r28, 0xFE	; 254
     4fa:	dd 4f       	sbci	r29, 0xFD	; 253
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
     506:	cf 91       	pop	r28
     508:	df 91       	pop	r29
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     510:	df 93       	push	r29
     512:	cf 93       	push	r28
     514:	0f 92       	push	r0
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     51a:	89 83       	std	Y+1, r24	; 0x01
     51c:	0e 94 9e 0a 	call	0x153c	; 0x153c <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     520:	00 d0       	rcall	.+0      	; 0x522 <EVENT_USB_Host_HostError+0x12>
     522:	00 d0       	rcall	.+0      	; 0x524 <EVENT_USB_Host_HostError+0x14>
     524:	ed b7       	in	r30, 0x3d	; 61
     526:	fe b7       	in	r31, 0x3e	; 62
     528:	31 96       	adiw	r30, 0x01	; 1
     52a:	2e ee       	ldi	r18, 0xEE	; 238
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	ad b7       	in	r26, 0x3d	; 61
     530:	be b7       	in	r27, 0x3e	; 62
     532:	12 96       	adiw	r26, 0x02	; 2
     534:	3c 93       	st	X, r19
     536:	2e 93       	st	-X, r18
     538:	11 97       	sbiw	r26, 0x01	; 1
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	82 83       	std	Z+2, r24	; 0x02
     53e:	13 82       	std	Z+3, r1	; 0x03
     540:	0e 94 1c 10 	call	0x2038	; 0x2038 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	80 e9       	ldi	r24, 0x90	; 144
     54e:	97 de       	rcall	.-722    	; 0x27e <LEDs_SetAllLEDs>
     550:	ff cf       	rjmp	.-2      	; 0x550 <EVENT_USB_Host_HostError+0x40>

00000552 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     552:	90 91 0e 05 	lds	r25, 0x050E
     556:	2d b7       	in	r18, 0x3d	; 61
     558:	3e b7       	in	r19, 0x3e	; 62
     55a:	28 50       	subi	r18, 0x08	; 8
     55c:	30 40       	sbci	r19, 0x00	; 0
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	3e bf       	out	0x3e, r19	; 62
     564:	0f be       	out	0x3f, r0	; 63
     566:	2d bf       	out	0x3d, r18	; 61
     568:	ed b7       	in	r30, 0x3d	; 61
     56a:	fe b7       	in	r31, 0x3e	; 62
     56c:	31 96       	adiw	r30, 0x01	; 1
     56e:	28 e9       	ldi	r18, 0x98	; 152
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	ad b7       	in	r26, 0x3d	; 61
     574:	be b7       	in	r27, 0x3e	; 62
     576:	12 96       	adiw	r26, 0x02	; 2
     578:	3c 93       	st	X, r19
     57a:	2e 93       	st	-X, r18
     57c:	11 97       	sbiw	r26, 0x01	; 1
     57e:	82 83       	std	Z+2, r24	; 0x02
     580:	13 82       	std	Z+3, r1	; 0x03
     582:	64 83       	std	Z+4, r22	; 0x04
     584:	15 82       	std	Z+5, r1	; 0x05
     586:	96 83       	std	Z+6, r25	; 0x06
     588:	17 82       	std	Z+7, r1	; 0x07
     58a:	0e 94 1c 10 	call	0x2038	; 0x2038 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     58e:	2d b7       	in	r18, 0x3d	; 61
     590:	3e b7       	in	r19, 0x3e	; 62
     592:	28 5f       	subi	r18, 0xF8	; 248
     594:	3f 4f       	sbci	r19, 0xFF	; 255
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	3e bf       	out	0x3e, r19	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	2d bf       	out	0x3d, r18	; 61
     5a0:	80 e9       	ldi	r24, 0x90	; 144
}
     5a2:	6d ce       	rjmp	.-806    	; 0x27e <LEDs_SetAllLEDs>

000005a4 <CALLBACK_HIDParser_FilterHIDReportItem>:
{
	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store KEYBOARD usage page items into the Processed HID Report structure to
	 * save RAM and ignore the rest
	 */
	return (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_KEYBOARD);
     5a4:	41 e0       	ldi	r20, 0x01	; 1
     5a6:	fc 01       	movw	r30, r24
     5a8:	21 85       	ldd	r18, Z+9	; 0x09
     5aa:	32 85       	ldd	r19, Z+10	; 0x0a
     5ac:	27 30       	cpi	r18, 0x07	; 7
     5ae:	31 05       	cpc	r19, r1
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <CALLBACK_HIDParser_FilterHIDReportItem+0x10>
     5b2:	40 e0       	ldi	r20, 0x00	; 0
}
     5b4:	84 2f       	mov	r24, r20
     5b6:	08 95       	ret

000005b8 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     5b8:	2f 92       	push	r2
     5ba:	3f 92       	push	r3
     5bc:	4f 92       	push	r4
     5be:	5f 92       	push	r5
     5c0:	6f 92       	push	r6
     5c2:	7f 92       	push	r7
     5c4:	8f 92       	push	r8
     5c6:	9f 92       	push	r9
     5c8:	af 92       	push	r10
     5ca:	bf 92       	push	r11
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	df 93       	push	r29
     5da:	cf 93       	push	r28
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	c9 59       	subi	r28, 0x99	; 153
     5e2:	d0 40       	sbci	r29, 0x00	; 0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	6c 01       	movw	r12, r24
     5f0:	1b 01       	movw	r2, r22
     5f2:	ba 01       	movw	r22, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
     5f4:	40 57       	subi	r20, 0x70	; 112
     5f6:	5c 4f       	sbci	r21, 0xFC	; 252
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     5f8:	89 ed       	ldi	r24, 0xD9	; 217
     5fa:	93 e0       	ldi	r25, 0x03	; 3
     5fc:	db 01       	movw	r26, r22
     5fe:	9c 01       	movw	r18, r24
     600:	1d 92       	st	X+, r1
     602:	21 50       	subi	r18, 0x01	; 1
     604:	30 40       	sbci	r19, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <USB_ProcessHIDReport+0x48>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     608:	9e 01       	movw	r18, r28
     60a:	25 5c       	subi	r18, 0xC5	; 197
     60c:	3f 4f       	sbci	r19, 0xFF	; 255
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     60e:	8c e1       	ldi	r24, 0x1C	; 28
     610:	d9 01       	movw	r26, r18
     612:	1d 92       	st	X+, r1
     614:	8a 95       	dec	r24
     616:	e9 f7       	brne	.-6      	; 0x612 <USB_ProcessHIDReport+0x5a>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     618:	87 e0       	ldi	r24, 0x07	; 7
     61a:	da 01       	movw	r26, r20
     61c:	1d 92       	st	X+, r1
     61e:	8a 95       	dec	r24
     620:	e9 f7       	brne	.-6      	; 0x61c <USB_ProcessHIDReport+0x64>

	ParserData->TotalDeviceReports = 1;
     622:	fb 01       	movw	r30, r22
     624:	e1 57       	subi	r30, 0x71	; 113
     626:	fc 4f       	sbci	r31, 0xFC	; 252
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 83       	st	Z, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
     62c:	e9 96       	adiw	r28, 0x39	; 57
     62e:	1c ae       	std	Y+60, r1	; 0x3c
     630:	1d ae       	std	Y+61, r1	; 0x3d
     632:	1e ae       	std	Y+62, r1	; 0x3e
     634:	1f ae       	std	Y+63, r1	; 0x3f
     636:	e9 97       	sbiw	r28, 0x39	; 57
     638:	44 24       	eor	r4, r4
     63a:	55 24       	eor	r5, r5
     63c:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
     63e:	bb 24       	eor	r11, r11
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
     640:	88 24       	eor	r8, r8
     642:	99 24       	eor	r9, r9

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     644:	cb 01       	movw	r24, r22
     646:	8a 52       	subi	r24, 0x2A	; 42
     648:	9c 4f       	sbci	r25, 0xFC	; 252
     64a:	c0 58       	subi	r28, 0x80	; 128
     64c:	df 4f       	sbci	r29, 0xFF	; 255
     64e:	99 83       	std	Y+1, r25	; 0x01
     650:	88 83       	st	Y, r24
     652:	c0 58       	subi	r28, 0x80	; 128
     654:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     656:	c8 56       	subi	r28, 0x68	; 104
     658:	df 4f       	sbci	r29, 0xFF	; 255
     65a:	39 83       	std	Y+1, r19	; 0x01
     65c:	28 83       	st	Y, r18
     65e:	c8 59       	subi	r28, 0x98	; 152
     660:	d0 40       	sbci	r29, 0x00	; 0
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     662:	db 01       	movw	r26, r22
     664:	a0 5b       	subi	r26, 0xB0	; 176
     666:	bc 4f       	sbci	r27, 0xFC	; 252
     668:	c6 57       	subi	r28, 0x76	; 118
     66a:	df 4f       	sbci	r29, 0xFF	; 255
     66c:	b9 83       	std	Y+1, r27	; 0x01
     66e:	a8 83       	st	Y, r26
     670:	ca 58       	subi	r28, 0x8A	; 138
     672:	d0 40       	sbci	r29, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     674:	cb 01       	movw	r24, r22
     676:	88 57       	subi	r24, 0x78	; 120
     678:	9c 4f       	sbci	r25, 0xFC	; 252
     67a:	c4 57       	subi	r28, 0x74	; 116
     67c:	df 4f       	sbci	r29, 0xFF	; 255
     67e:	99 83       	std	Y+1, r25	; 0x01
     680:	88 83       	st	Y, r24
     682:	cc 58       	subi	r28, 0x8C	; 140
     684:	d0 40       	sbci	r29, 0x00	; 0
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     686:	db 01       	movw	r26, r22
     688:	a7 5b       	subi	r26, 0xB7	; 183
     68a:	bc 4f       	sbci	r27, 0xFC	; 252
     68c:	c2 57       	subi	r28, 0x72	; 114
     68e:	df 4f       	sbci	r29, 0xFF	; 255
     690:	b9 83       	std	Y+1, r27	; 0x01
     692:	a8 83       	st	Y, r26
     694:	ce 58       	subi	r28, 0x8E	; 142
     696:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     698:	c9 01       	movw	r24, r18
     69a:	4c 96       	adiw	r24, 0x1c	; 28
     69c:	c0 57       	subi	r28, 0x70	; 112
     69e:	df 4f       	sbci	r29, 0xFF	; 255
     6a0:	99 83       	std	Y+1, r25	; 0x01
     6a2:	88 83       	st	Y, r24
     6a4:	c0 59       	subi	r28, 0x90	; 144
     6a6:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     6a8:	db 01       	movw	r26, r22
     6aa:	a8 52       	subi	r26, 0x28	; 40
     6ac:	bc 4f       	sbci	r27, 0xFC	; 252
     6ae:	ce 57       	subi	r28, 0x7E	; 126
     6b0:	df 4f       	sbci	r29, 0xFF	; 255
     6b2:	b9 83       	std	Y+1, r27	; 0x01
     6b4:	a8 83       	st	Y, r26
     6b6:	c2 58       	subi	r28, 0x82	; 130
     6b8:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     6ba:	cc 57       	subi	r28, 0x7C	; 124
     6bc:	df 4f       	sbci	r29, 0xFF	; 255
     6be:	f9 83       	std	Y+1, r31	; 0x01
     6c0:	e8 83       	st	Y, r30
     6c2:	c4 58       	subi	r28, 0x84	; 132
     6c4:	d0 40       	sbci	r29, 0x00	; 0

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     6c6:	ca 01       	movw	r24, r20
     6c8:	ce 56       	subi	r28, 0x6E	; 110
     6ca:	df 4f       	sbci	r29, 0xFF	; 255
     6cc:	48 83       	st	Y, r20
     6ce:	c2 59       	subi	r28, 0x92	; 146
     6d0:	d0 40       	sbci	r29, 0x00	; 0
     6d2:	cd 56       	subi	r28, 0x6D	; 109
     6d4:	df 4f       	sbci	r29, 0xFF	; 255
     6d6:	98 83       	st	Y, r25
     6d8:	c3 59       	subi	r28, 0x93	; 147
     6da:	d0 40       	sbci	r29, 0x00	; 0
     6dc:	e5 96       	adiw	r28, 0x35	; 53
     6de:	7f af       	std	Y+63, r23	; 0x3f
     6e0:	6e af       	std	Y+62, r22	; 0x3e
     6e2:	e5 97       	sbiw	r28, 0x35	; 53
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6e4:	38 c3       	rjmp	.+1648   	; 0xd56 <USB_ProcessHIDReport+0x79e>
	{
		uint8_t  HIDReportItem  = *ReportData;
     6e6:	f6 01       	movw	r30, r12
     6e8:	61 91       	ld	r22, Z+
     6ea:	6f 01       	movw	r12, r30
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     6ec:	08 94       	sec
     6ee:	21 08       	sbc	r2, r1
     6f0:	31 08       	sbc	r3, r1

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     6f2:	86 2f       	mov	r24, r22
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	eb 96       	adiw	r28, 0x3b	; 59
     6f8:	9f af       	std	Y+63, r25	; 0x3f
     6fa:	8e af       	std	Y+62, r24	; 0x3e
     6fc:	eb 97       	sbiw	r28, 0x3b	; 59
     6fe:	83 70       	andi	r24, 0x03	; 3
     700:	90 70       	andi	r25, 0x00	; 0
     702:	82 30       	cpi	r24, 0x02	; 2
     704:	91 05       	cpc	r25, r1
     706:	09 f4       	brne	.+2      	; 0x70a <USB_ProcessHIDReport+0x152>
     708:	3f c0       	rjmp	.+126    	; 0x788 <USB_ProcessHIDReport+0x1d0>
     70a:	83 30       	cpi	r24, 0x03	; 3
     70c:	91 05       	cpc	r25, r1
     70e:	29 f0       	breq	.+10     	; 0x71a <USB_ProcessHIDReport+0x162>
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	91 05       	cpc	r25, r1
     714:	09 f0       	breq	.+2      	; 0x718 <USB_ProcessHIDReport+0x160>
     716:	5c c0       	rjmp	.+184    	; 0x7d0 <USB_ProcessHIDReport+0x218>
     718:	52 c0       	rjmp	.+164    	; 0x7be <USB_ProcessHIDReport+0x206>
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     71a:	df 01       	movw	r26, r30
     71c:	e3 80       	ldd	r14, Z+3	; 0x03
     71e:	ff 24       	eor	r15, r15
     720:	00 e0       	ldi	r16, 0x00	; 0
     722:	10 e0       	ldi	r17, 0x00	; 0
     724:	1e 2d       	mov	r17, r14
     726:	00 27       	eor	r16, r16
     728:	ff 24       	eor	r15, r15
     72a:	ee 24       	eor	r14, r14
     72c:	12 96       	adiw	r26, 0x02	; 2
     72e:	8c 91       	ld	r24, X
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	a0 e0       	ldi	r26, 0x00	; 0
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	dc 01       	movw	r26, r24
     738:	99 27       	eor	r25, r25
     73a:	88 27       	eor	r24, r24
     73c:	e8 2a       	or	r14, r24
     73e:	f9 2a       	or	r15, r25
     740:	0a 2b       	or	r16, r26
     742:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     744:	f6 01       	movw	r30, r12
     746:	80 81       	ld	r24, Z
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	a0 e0       	ldi	r26, 0x00	; 0
     74c:	b0 e0       	ldi	r27, 0x00	; 0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     74e:	e8 2a       	or	r14, r24
     750:	f9 2a       	or	r15, r25
     752:	0a 2b       	or	r16, r26
     754:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     756:	f1 81       	ldd	r31, Z+1	; 0x01
     758:	ed 96       	adiw	r28, 0x3d	; 61
     75a:	ff af       	std	Y+63, r31	; 0x3f
     75c:	ed 97       	sbiw	r28, 0x3d	; 61
     75e:	ec 96       	adiw	r28, 0x3c	; 60
     760:	1f ae       	std	Y+63, r1	; 0x3f
     762:	ec 97       	sbiw	r28, 0x3c	; 60
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     764:	ed 96       	adiw	r28, 0x3d	; 61
     766:	ee ad       	ldd	r30, Y+62	; 0x3e
     768:	ff ad       	ldd	r31, Y+63	; 0x3f
     76a:	ed 97       	sbiw	r28, 0x3d	; 61
     76c:	cf 01       	movw	r24, r30
     76e:	a0 e0       	ldi	r26, 0x00	; 0
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	e8 2a       	or	r14, r24
     774:	f9 2a       	or	r15, r25
     776:	0a 2b       	or	r16, r26
     778:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     77a:	8c ef       	ldi	r24, 0xFC	; 252
     77c:	9f ef       	ldi	r25, 0xFF	; 255
     77e:	28 0e       	add	r2, r24
     780:	39 1e       	adc	r3, r25
				ReportData     += 4;
     782:	a4 e0       	ldi	r26, 0x04	; 4
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	18 c0       	rjmp	.+48     	; 0x7b8 <USB_ProcessHIDReport+0x200>
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     788:	f1 81       	ldd	r31, Z+1	; 0x01
     78a:	ef 96       	adiw	r28, 0x3f	; 63
     78c:	ff af       	std	Y+63, r31	; 0x3f
     78e:	ef 97       	sbiw	r28, 0x3f	; 63
     790:	ee 96       	adiw	r28, 0x3e	; 62
     792:	1f ae       	std	Y+63, r1	; 0x3f
     794:	ee 97       	sbiw	r28, 0x3e	; 62
     796:	d6 01       	movw	r26, r12
     798:	ec 90       	ld	r14, X
     79a:	ff 24       	eor	r15, r15
     79c:	ef 96       	adiw	r28, 0x3f	; 63
     79e:	ee ad       	ldd	r30, Y+62	; 0x3e
     7a0:	ff ad       	ldd	r31, Y+63	; 0x3f
     7a2:	ef 97       	sbiw	r28, 0x3f	; 63
     7a4:	ee 2a       	or	r14, r30
     7a6:	ff 2a       	or	r15, r31
     7a8:	00 e0       	ldi	r16, 0x00	; 0
     7aa:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
     7ac:	8e ef       	ldi	r24, 0xFE	; 254
     7ae:	9f ef       	ldi	r25, 0xFF	; 255
     7b0:	28 0e       	add	r2, r24
     7b2:	39 1e       	adc	r3, r25
				ReportData     += 2;
     7b4:	a2 e0       	ldi	r26, 0x02	; 2
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	ca 0e       	add	r12, r26
     7ba:	db 1e       	adc	r13, r27
				break;
     7bc:	0c c0       	rjmp	.+24     	; 0x7d6 <USB_ProcessHIDReport+0x21e>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     7be:	e1 90       	ld	r14, Z+
     7c0:	6f 01       	movw	r12, r30
     7c2:	ff 24       	eor	r15, r15
     7c4:	00 e0       	ldi	r16, 0x00	; 0
     7c6:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
     7c8:	08 94       	sec
     7ca:	21 08       	sbc	r2, r1
     7cc:	31 08       	sbc	r3, r1
				ReportData     += 1;
				break;
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <USB_ProcessHIDReport+0x21e>

			default:
				ReportItemData  = 0;
     7d0:	ee 24       	eor	r14, r14
     7d2:	ff 24       	eor	r15, r15
     7d4:	87 01       	movw	r16, r14
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     7d6:	eb 96       	adiw	r28, 0x3b	; 59
     7d8:	8e ad       	ldd	r24, Y+62	; 0x3e
     7da:	9f ad       	ldd	r25, Y+63	; 0x3f
     7dc:	eb 97       	sbiw	r28, 0x3b	; 59
     7de:	8c 7f       	andi	r24, 0xFC	; 252
     7e0:	90 70       	andi	r25, 0x00	; 0
     7e2:	84 36       	cpi	r24, 0x64	; 100
     7e4:	91 05       	cpc	r25, r1
     7e6:	09 f4       	brne	.+2      	; 0x7ea <USB_ProcessHIDReport+0x232>
     7e8:	c9 c0       	rjmp	.+402    	; 0x97c <USB_ProcessHIDReport+0x3c4>
     7ea:	85 36       	cpi	r24, 0x65	; 101
     7ec:	91 05       	cpc	r25, r1
     7ee:	8c f5       	brge	.+98     	; 0x852 <USB_ProcessHIDReport+0x29a>
     7f0:	84 32       	cpi	r24, 0x24	; 36
     7f2:	91 05       	cpc	r25, r1
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <USB_ProcessHIDReport+0x240>
     7f6:	a9 c0       	rjmp	.+338    	; 0x94a <USB_ProcessHIDReport+0x392>
     7f8:	85 32       	cpi	r24, 0x25	; 37
     7fa:	91 05       	cpc	r25, r1
     7fc:	ac f4       	brge	.+42     	; 0x828 <USB_ProcessHIDReport+0x270>
     7fe:	88 30       	cpi	r24, 0x08	; 8
     800:	91 05       	cpc	r25, r1
     802:	09 f4       	brne	.+2      	; 0x806 <USB_ProcessHIDReport+0x24e>
     804:	31 c1       	rjmp	.+610    	; 0xa68 <USB_ProcessHIDReport+0x4b0>
     806:	89 30       	cpi	r24, 0x09	; 9
     808:	91 05       	cpc	r25, r1
     80a:	2c f4       	brge	.+10     	; 0x816 <USB_ProcessHIDReport+0x25e>
     80c:	84 30       	cpi	r24, 0x04	; 4
     80e:	91 05       	cpc	r25, r1
     810:	09 f0       	breq	.+2      	; 0x814 <USB_ProcessHIDReport+0x25c>
     812:	8f c2       	rjmp	.+1310   	; 0xd32 <USB_ProcessHIDReport+0x77a>
     814:	8e c0       	rjmp	.+284    	; 0x932 <USB_ProcessHIDReport+0x37a>
     816:	84 31       	cpi	r24, 0x14	; 20
     818:	91 05       	cpc	r25, r1
     81a:	09 f4       	brne	.+2      	; 0x81e <USB_ProcessHIDReport+0x266>
     81c:	8e c0       	rjmp	.+284    	; 0x93a <USB_ProcessHIDReport+0x382>
     81e:	88 31       	cpi	r24, 0x18	; 24
     820:	91 05       	cpc	r25, r1
     822:	09 f0       	breq	.+2      	; 0x826 <USB_ProcessHIDReport+0x26e>
     824:	86 c2       	rjmp	.+1292   	; 0xd32 <USB_ProcessHIDReport+0x77a>
     826:	83 c2       	rjmp	.+1286   	; 0xd2e <USB_ProcessHIDReport+0x776>
     828:	84 33       	cpi	r24, 0x34	; 52
     82a:	91 05       	cpc	r25, r1
     82c:	09 f4       	brne	.+2      	; 0x830 <USB_ProcessHIDReport+0x278>
     82e:	93 c0       	rjmp	.+294    	; 0x956 <USB_ProcessHIDReport+0x39e>
     830:	85 33       	cpi	r24, 0x35	; 53
     832:	91 05       	cpc	r25, r1
     834:	2c f4       	brge	.+10     	; 0x840 <USB_ProcessHIDReport+0x288>
     836:	88 32       	cpi	r24, 0x28	; 40
     838:	91 05       	cpc	r25, r1
     83a:	09 f0       	breq	.+2      	; 0x83e <USB_ProcessHIDReport+0x286>
     83c:	7a c2       	rjmp	.+1268   	; 0xd32 <USB_ProcessHIDReport+0x77a>
     83e:	26 c1       	rjmp	.+588    	; 0xa8c <USB_ProcessHIDReport+0x4d4>
     840:	84 34       	cpi	r24, 0x44	; 68
     842:	91 05       	cpc	r25, r1
     844:	09 f4       	brne	.+2      	; 0x848 <USB_ProcessHIDReport+0x290>
     846:	8f c0       	rjmp	.+286    	; 0x966 <USB_ProcessHIDReport+0x3ae>
     848:	84 35       	cpi	r24, 0x54	; 84
     84a:	91 05       	cpc	r25, r1
     84c:	09 f0       	breq	.+2      	; 0x850 <USB_ProcessHIDReport+0x298>
     84e:	71 c2       	rjmp	.+1250   	; 0xd32 <USB_ProcessHIDReport+0x77a>
     850:	90 c0       	rjmp	.+288    	; 0x972 <USB_ProcessHIDReport+0x3ba>
     852:	84 39       	cpi	r24, 0x94	; 148
     854:	91 05       	cpc	r25, r1
     856:	09 f4       	brne	.+2      	; 0x85a <USB_ProcessHIDReport+0x2a2>
     858:	9a c0       	rjmp	.+308    	; 0x98e <USB_ProcessHIDReport+0x3d6>
     85a:	85 39       	cpi	r24, 0x95	; 149
     85c:	91 05       	cpc	r25, r1
     85e:	a4 f4       	brge	.+40     	; 0x888 <USB_ProcessHIDReport+0x2d0>
     860:	80 38       	cpi	r24, 0x80	; 128
     862:	91 05       	cpc	r25, r1
     864:	41 f1       	breq	.+80     	; 0x8b6 <USB_ProcessHIDReport+0x2fe>
     866:	81 38       	cpi	r24, 0x81	; 129
     868:	91 05       	cpc	r25, r1
     86a:	2c f4       	brge	.+10     	; 0x876 <USB_ProcessHIDReport+0x2be>
     86c:	84 37       	cpi	r24, 0x74	; 116
     86e:	91 05       	cpc	r25, r1
     870:	09 f0       	breq	.+2      	; 0x874 <USB_ProcessHIDReport+0x2bc>
     872:	5f c2       	rjmp	.+1214   	; 0xd32 <USB_ProcessHIDReport+0x77a>
     874:	89 c0       	rjmp	.+274    	; 0x988 <USB_ProcessHIDReport+0x3d0>
     876:	84 38       	cpi	r24, 0x84	; 132
     878:	91 05       	cpc	r25, r1
     87a:	09 f4       	brne	.+2      	; 0x87e <USB_ProcessHIDReport+0x2c6>
     87c:	8b c0       	rjmp	.+278    	; 0x994 <USB_ProcessHIDReport+0x3dc>
     87e:	80 39       	cpi	r24, 0x90	; 144
     880:	91 05       	cpc	r25, r1
     882:	09 f0       	breq	.+2      	; 0x886 <USB_ProcessHIDReport+0x2ce>
     884:	56 c2       	rjmp	.+1196   	; 0xd32 <USB_ProcessHIDReport+0x77a>
     886:	17 c0       	rjmp	.+46     	; 0x8b6 <USB_ProcessHIDReport+0x2fe>
     888:	80 3b       	cpi	r24, 0xB0	; 176
     88a:	91 05       	cpc	r25, r1
     88c:	a1 f0       	breq	.+40     	; 0x8b6 <USB_ProcessHIDReport+0x2fe>
     88e:	81 3b       	cpi	r24, 0xB1	; 177
     890:	91 05       	cpc	r25, r1
     892:	4c f4       	brge	.+18     	; 0x8a6 <USB_ProcessHIDReport+0x2ee>
     894:	80 3a       	cpi	r24, 0xA0	; 160
     896:	91 05       	cpc	r25, r1
     898:	09 f4       	brne	.+2      	; 0x89c <USB_ProcessHIDReport+0x2e4>
     89a:	ff c0       	rjmp	.+510    	; 0xa9a <USB_ProcessHIDReport+0x4e2>
     89c:	84 3a       	cpi	r24, 0xA4	; 164
     89e:	91 05       	cpc	r25, r1
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <USB_ProcessHIDReport+0x2ec>
     8a2:	47 c2       	rjmp	.+1166   	; 0xd32 <USB_ProcessHIDReport+0x77a>
     8a4:	24 c0       	rjmp	.+72     	; 0x8ee <USB_ProcessHIDReport+0x336>
     8a6:	84 3b       	cpi	r24, 0xB4	; 180
     8a8:	91 05       	cpc	r25, r1
     8aa:	b1 f1       	breq	.+108    	; 0x918 <USB_ProcessHIDReport+0x360>
     8ac:	80 3c       	cpi	r24, 0xC0	; 192
     8ae:	91 05       	cpc	r25, r1
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <USB_ProcessHIDReport+0x2fc>
     8b2:	3f c2       	rjmp	.+1150   	; 0xd32 <USB_ProcessHIDReport+0x77a>
     8b4:	4f c1       	rjmp	.+670    	; 0xb54 <USB_ProcessHIDReport+0x59c>
     8b6:	aa 24       	eor	r10, r10
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
     8b8:	6c 7f       	andi	r22, 0xFC	; 252
     8ba:	c1 58       	subi	r28, 0x81	; 129
     8bc:	df 4f       	sbci	r29, 0xFF	; 255
     8be:	68 83       	st	Y, r22
     8c0:	cf 57       	subi	r28, 0x7F	; 127
     8c2:	d0 40       	sbci	r29, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     8c4:	c8 01       	movw	r24, r16
     8c6:	b7 01       	movw	r22, r14
     8c8:	61 70       	andi	r22, 0x01	; 1
     8ca:	70 70       	andi	r23, 0x00	; 0
     8cc:	80 70       	andi	r24, 0x00	; 0
     8ce:	90 70       	andi	r25, 0x00	; 0
     8d0:	ca 57       	subi	r28, 0x7A	; 122
     8d2:	df 4f       	sbci	r29, 0xFF	; 255
     8d4:	68 83       	st	Y, r22
     8d6:	79 83       	std	Y+1, r23	; 0x01
     8d8:	8a 83       	std	Y+2, r24	; 0x02
     8da:	9b 83       	std	Y+3, r25	; 0x03
     8dc:	c6 58       	subi	r28, 0x86	; 134
     8de:	d0 40       	sbci	r29, 0x00	; 0
     8e0:	c6 01       	movw	r24, r12
     8e2:	6a 01       	movw	r12, r20
     8e4:	b8 01       	movw	r22, r16
     8e6:	a7 01       	movw	r20, r14
     8e8:	79 01       	movw	r14, r18
     8ea:	8c 01       	movw	r16, r24
     8ec:	17 c2       	rjmp	.+1070   	; 0xd1c <USB_ProcessHIDReport+0x764>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     8ee:	c0 57       	subi	r28, 0x70	; 112
     8f0:	df 4f       	sbci	r29, 0xFF	; 255
     8f2:	88 81       	ld	r24, Y
     8f4:	99 81       	ldd	r25, Y+1	; 0x01
     8f6:	c0 59       	subi	r28, 0x90	; 144
     8f8:	d0 40       	sbci	r29, 0x00	; 0
     8fa:	28 17       	cp	r18, r24
     8fc:	39 07       	cpc	r19, r25
     8fe:	09 f4       	brne	.+2      	; 0x902 <USB_ProcessHIDReport+0x34a>
     900:	38 c2       	rjmp	.+1136   	; 0xd72 <USB_ProcessHIDReport+0x7ba>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     902:	c9 01       	movw	r24, r18
     904:	4c 96       	adiw	r24, 0x1c	; 28
     906:	fc 01       	movw	r30, r24
     908:	d9 01       	movw	r26, r18
     90a:	2a e2       	ldi	r18, 0x2A	; 42
     90c:	0d 90       	ld	r0, X+
     90e:	01 92       	st	Z+, r0
     910:	21 50       	subi	r18, 0x01	; 1
     912:	e1 f7       	brne	.-8      	; 0x90c <USB_ProcessHIDReport+0x354>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     914:	9c 01       	movw	r18, r24
				break;
     916:	0d c2       	rjmp	.+1050   	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     918:	c8 56       	subi	r28, 0x68	; 104
     91a:	df 4f       	sbci	r29, 0xFF	; 255
     91c:	a8 81       	ld	r26, Y
     91e:	b9 81       	ldd	r27, Y+1	; 0x01
     920:	c8 59       	subi	r28, 0x98	; 152
     922:	d0 40       	sbci	r29, 0x00	; 0
     924:	2a 17       	cp	r18, r26
     926:	3b 07       	cpc	r19, r27
     928:	09 f4       	brne	.+2      	; 0x92c <USB_ProcessHIDReport+0x374>
     92a:	25 c2       	rjmp	.+1098   	; 0xd76 <USB_ProcessHIDReport+0x7be>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     92c:	2c 51       	subi	r18, 0x1C	; 28
     92e:	30 40       	sbci	r19, 0x00	; 0
				break;
     930:	00 c2       	rjmp	.+1024   	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     932:	f9 01       	movw	r30, r18
     934:	f2 82       	std	Z+2, r15	; 0x02
     936:	e1 82       	std	Z+1, r14	; 0x01
				break;
     938:	fc c1       	rjmp	.+1016   	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     93a:	d9 01       	movw	r26, r18
     93c:	1a 96       	adiw	r26, 0x0a	; 10
     93e:	ed 92       	st	X+, r14
     940:	fd 92       	st	X+, r15
     942:	0d 93       	st	X+, r16
     944:	1c 93       	st	X, r17
     946:	1d 97       	sbiw	r26, 0x0d	; 13
				break;
     948:	f4 c1       	rjmp	.+1000   	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     94a:	f9 01       	movw	r30, r18
     94c:	e6 86       	std	Z+14, r14	; 0x0e
     94e:	f7 86       	std	Z+15, r15	; 0x0f
     950:	00 8b       	std	Z+16, r16	; 0x10
     952:	11 8b       	std	Z+17, r17	; 0x11
				break;
     954:	ee c1       	rjmp	.+988    	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     956:	d9 01       	movw	r26, r18
     958:	52 96       	adiw	r26, 0x12	; 18
     95a:	ed 92       	st	X+, r14
     95c:	fd 92       	st	X+, r15
     95e:	0d 93       	st	X+, r16
     960:	1c 93       	st	X, r17
     962:	55 97       	sbiw	r26, 0x15	; 21
				break;
     964:	e6 c1       	rjmp	.+972    	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     966:	f9 01       	movw	r30, r18
     968:	e6 8a       	std	Z+22, r14	; 0x16
     96a:	f7 8a       	std	Z+23, r15	; 0x17
     96c:	00 8f       	std	Z+24, r16	; 0x18
     96e:	11 8f       	std	Z+25, r17	; 0x19
				break;
     970:	e0 c1       	rjmp	.+960    	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     972:	d9 01       	movw	r26, r18
     974:	19 96       	adiw	r26, 0x09	; 9
     976:	ec 92       	st	X, r14
     978:	19 97       	sbiw	r26, 0x09	; 9
				break;
     97a:	db c1       	rjmp	.+950    	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     97c:	f9 01       	movw	r30, r18
     97e:	e5 82       	std	Z+5, r14	; 0x05
     980:	f6 82       	std	Z+6, r15	; 0x06
     982:	07 83       	std	Z+7, r16	; 0x07
     984:	10 87       	std	Z+8, r17	; 0x08
				break;
     986:	d5 c1       	rjmp	.+938    	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     988:	d9 01       	movw	r26, r18
     98a:	ec 92       	st	X, r14
				break;
     98c:	d2 c1       	rjmp	.+932    	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     98e:	f9 01       	movw	r30, r18
     990:	e2 8e       	std	Z+26, r14	; 0x1a
				break;
     992:	cf c1       	rjmp	.+926    	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     994:	9e 2d       	mov	r25, r14
     996:	d9 01       	movw	r26, r18
     998:	5b 96       	adiw	r26, 0x1b	; 27
     99a:	ec 92       	st	X, r14
     99c:	5b 97       	sbiw	r26, 0x1b	; 27

				if (ParserData->UsingReportIDs)
     99e:	ce 57       	subi	r28, 0x7E	; 126
     9a0:	df 4f       	sbci	r29, 0xFF	; 255
     9a2:	e8 81       	ld	r30, Y
     9a4:	f9 81       	ldd	r31, Y+1	; 0x01
     9a6:	c2 58       	subi	r28, 0x82	; 130
     9a8:	d0 40       	sbci	r29, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	88 23       	and	r24, r24
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <USB_ProcessHIDReport+0x3fa>
     9b0:	4c c0       	rjmp	.+152    	; 0xa4a <USB_ProcessHIDReport+0x492>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     9b2:	cc 57       	subi	r28, 0x7C	; 124
     9b4:	df 4f       	sbci	r29, 0xFF	; 255
     9b6:	a8 81       	ld	r26, Y
     9b8:	b9 81       	ldd	r27, Y+1	; 0x01
     9ba:	c4 58       	subi	r28, 0x84	; 132
     9bc:	d0 40       	sbci	r29, 0x00	; 0
     9be:	6c 91       	ld	r22, X

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     9c0:	ce 56       	subi	r28, 0x6E	; 110
     9c2:	df 4f       	sbci	r29, 0xFF	; 255
     9c4:	e8 81       	ld	r30, Y
     9c6:	c2 59       	subi	r28, 0x92	; 146
     9c8:	d0 40       	sbci	r29, 0x00	; 0
     9ca:	cd 56       	subi	r28, 0x6D	; 109
     9cc:	df 4f       	sbci	r29, 0xFF	; 255
     9ce:	f8 81       	ld	r31, Y
     9d0:	c3 59       	subi	r28, 0x93	; 147
     9d2:	d0 40       	sbci	r29, 0x00	; 0
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	17 c0       	rjmp	.+46     	; 0xa06 <USB_ProcessHIDReport+0x44e>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     9d8:	40 81       	ld	r20, Z
     9da:	37 96       	adiw	r30, 0x07	; 7
     9dc:	49 17       	cp	r20, r25
     9de:	91 f4       	brne	.+36     	; 0xa04 <USB_ProcessHIDReport+0x44c>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	ac 01       	movw	r20, r24
     9e4:	f3 e0       	ldi	r31, 0x03	; 3
     9e6:	44 0f       	add	r20, r20
     9e8:	55 1f       	adc	r21, r21
     9ea:	fa 95       	dec	r31
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <USB_ProcessHIDReport+0x42e>
     9ee:	48 1b       	sub	r20, r24
     9f0:	59 0b       	sbc	r21, r25
     9f2:	40 57       	subi	r20, 0x70	; 112
     9f4:	5c 4f       	sbci	r21, 0xFC	; 252
     9f6:	e5 96       	adiw	r28, 0x35	; 53
     9f8:	ee ad       	ldd	r30, Y+62	; 0x3e
     9fa:	ff ad       	ldd	r31, Y+63	; 0x3f
     9fc:	e5 97       	sbiw	r28, 0x35	; 53
     9fe:	4e 0f       	add	r20, r30
     a00:	5f 1f       	adc	r21, r31
     a02:	23 c0       	rjmp	.+70     	; 0xa4a <USB_ProcessHIDReport+0x492>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     a04:	8f 5f       	subi	r24, 0xFF	; 255
     a06:	86 17       	cp	r24, r22
     a08:	38 f3       	brcs	.-50     	; 0x9d8 <USB_ProcessHIDReport+0x420>
     a0a:	dc c1       	rjmp	.+952    	; 0xdc4 <USB_ProcessHIDReport+0x80c>
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     a0c:	86 2f       	mov	r24, r22
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	ac 01       	movw	r20, r24
     a12:	e3 e0       	ldi	r30, 0x03	; 3
     a14:	44 0f       	add	r20, r20
     a16:	55 1f       	adc	r21, r21
     a18:	ea 95       	dec	r30
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <USB_ProcessHIDReport+0x45c>
     a1c:	48 1b       	sub	r20, r24
     a1e:	59 0b       	sbc	r21, r25
     a20:	40 57       	subi	r20, 0x70	; 112
     a22:	5c 4f       	sbci	r21, 0xFC	; 252
     a24:	e5 96       	adiw	r28, 0x35	; 53
     a26:	8e ad       	ldd	r24, Y+62	; 0x3e
     a28:	9f ad       	ldd	r25, Y+63	; 0x3f
     a2a:	e5 97       	sbiw	r28, 0x35	; 53
     a2c:	48 0f       	add	r20, r24
     a2e:	59 1f       	adc	r21, r25
     a30:	6f 5f       	subi	r22, 0xFF	; 255
     a32:	cc 57       	subi	r28, 0x7C	; 124
     a34:	df 4f       	sbci	r29, 0xFF	; 255
     a36:	a8 81       	ld	r26, Y
     a38:	b9 81       	ldd	r27, Y+1	; 0x01
     a3a:	c4 58       	subi	r28, 0x84	; 132
     a3c:	d0 40       	sbci	r29, 0x00	; 0
     a3e:	6c 93       	st	X, r22
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     a40:	87 e0       	ldi	r24, 0x07	; 7
     a42:	da 01       	movw	r26, r20
     a44:	1d 92       	st	X+, r1
     a46:	8a 95       	dec	r24
     a48:	e9 f7       	brne	.-6      	; 0xa44 <USB_ProcessHIDReport+0x48c>
					}
				}

				ParserData->UsingReportIDs = true;
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	ce 57       	subi	r28, 0x7E	; 126
     a4e:	df 4f       	sbci	r29, 0xFF	; 255
     a50:	e8 81       	ld	r30, Y
     a52:	f9 81       	ldd	r31, Y+1	; 0x01
     a54:	c2 58       	subi	r28, 0x82	; 130
     a56:	d0 40       	sbci	r29, 0x00	; 0
     a58:	60 83       	st	Z, r22

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     a5a:	d9 01       	movw	r26, r18
     a5c:	5b 96       	adiw	r26, 0x1b	; 27
     a5e:	8c 91       	ld	r24, X
     a60:	5b 97       	sbiw	r26, 0x1b	; 27
     a62:	fa 01       	movw	r30, r20
     a64:	80 83       	st	Z, r24
				break;
     a66:	65 c1       	rjmp	.+714    	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     a68:	fb 2d       	mov	r31, r11
     a6a:	f8 30       	cpi	r31, 0x08	; 8
     a6c:	09 f4       	brne	.+2      	; 0xa70 <USB_ProcessHIDReport+0x4b8>
     a6e:	85 c1       	rjmp	.+778    	; 0xd7a <USB_ProcessHIDReport+0x7c2>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     a70:	eb 2d       	mov	r30, r11
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	ee 0f       	add	r30, r30
     a76:	ff 1f       	adc	r31, r31
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	6c 0f       	add	r22, r28
     a7e:	7d 1f       	adc	r23, r29
     a80:	e6 0f       	add	r30, r22
     a82:	f7 1f       	adc	r31, r23
     a84:	f1 82       	std	Z+1, r15	; 0x01
     a86:	e0 82       	st	Z, r14
     a88:	b3 94       	inc	r11
				break;
     a8a:	53 c1       	rjmp	.+678    	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     a8c:	e9 96       	adiw	r28, 0x39	; 57
     a8e:	ec ae       	std	Y+60, r14	; 0x3c
     a90:	fd ae       	std	Y+61, r15	; 0x3d
     a92:	0e af       	std	Y+62, r16	; 0x3e
     a94:	1f af       	std	Y+63, r17	; 0x3f
     a96:	e9 97       	sbiw	r28, 0x39	; 57
     a98:	4c c1       	rjmp	.+664    	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     a9a:	81 14       	cp	r8, r1
     a9c:	91 04       	cpc	r9, r1
     a9e:	39 f4       	brne	.+14     	; 0xaae <USB_ProcessHIDReport+0x4f6>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     aa0:	c2 57       	subi	r28, 0x72	; 114
     aa2:	df 4f       	sbci	r29, 0xFF	; 255
     aa4:	88 80       	ld	r8, Y
     aa6:	99 80       	ldd	r9, Y+1	; 0x01
     aa8:	ce 58       	subi	r28, 0x8E	; 142
     aaa:	d0 40       	sbci	r29, 0x00	; 0
     aac:	19 c0       	rjmp	.+50     	; 0xae0 <USB_ProcessHIDReport+0x528>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     aae:	c6 57       	subi	r28, 0x76	; 118
     ab0:	df 4f       	sbci	r29, 0xFF	; 255
     ab2:	e8 81       	ld	r30, Y
     ab4:	f9 81       	ldd	r31, Y+1	; 0x01
     ab6:	ca 58       	subi	r28, 0x8A	; 138
     ab8:	d0 40       	sbci	r29, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
     aba:	0b c0       	rjmp	.+22     	; 0xad2 <USB_ProcessHIDReport+0x51a>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     abc:	c4 57       	subi	r28, 0x74	; 116
     abe:	df 4f       	sbci	r29, 0xFF	; 255
     ac0:	88 81       	ld	r24, Y
     ac2:	99 81       	ldd	r25, Y+1	; 0x01
     ac4:	cc 58       	subi	r28, 0x8C	; 140
     ac6:	d0 40       	sbci	r29, 0x00	; 0
     ac8:	e8 17       	cp	r30, r24
     aca:	f9 07       	cpc	r31, r25
     acc:	09 f4       	brne	.+2      	; 0xad0 <USB_ProcessHIDReport+0x518>
     ace:	57 c1       	rjmp	.+686    	; 0xd7e <USB_ProcessHIDReport+0x7c6>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     ad0:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     ad2:	85 81       	ldd	r24, Z+5	; 0x05
     ad4:	96 81       	ldd	r25, Z+6	; 0x06
     ad6:	00 97       	sbiw	r24, 0x00	; 0
     ad8:	89 f7       	brne	.-30     	; 0xabc <USB_ProcessHIDReport+0x504>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     ada:	96 82       	std	Z+6, r9	; 0x06
     adc:	85 82       	std	Z+5, r8	; 0x05
     ade:	4f 01       	movw	r8, r30
				}

				CurrCollectionPath->Type       = ReportItemData;
     ae0:	d4 01       	movw	r26, r8
     ae2:	ec 92       	st	X, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     ae4:	f9 01       	movw	r30, r18
     ae6:	81 81       	ldd	r24, Z+1	; 0x01
     ae8:	92 81       	ldd	r25, Z+2	; 0x02
     aea:	12 96       	adiw	r26, 0x02	; 2
     aec:	9c 93       	st	X, r25
     aee:	8e 93       	st	-X, r24
     af0:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
     af2:	bb 20       	and	r11, r11
     af4:	c1 f0       	breq	.+48     	; 0xb26 <USB_ProcessHIDReport+0x56e>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	14 96       	adiw	r26, 0x04	; 4
     afc:	9c 93       	st	X, r25
     afe:	8e 93       	st	-X, r24
     b00:	13 97       	sbiw	r26, 0x03	; 3
     b02:	fe 01       	movw	r30, r28
     b04:	31 96       	adiw	r30, 0x01	; 1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     b06:	8b 2d       	mov	r24, r11
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	88 0f       	add	r24, r24
     b0c:	99 1f       	adc	r25, r25
     b0e:	8e 0f       	add	r24, r30
     b10:	9f 1f       	adc	r25, r31

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <USB_ProcessHIDReport+0x564>
					  UsageList[i] = UsageList[i + 1];
     b14:	62 81       	ldd	r22, Z+2	; 0x02
     b16:	73 81       	ldd	r23, Z+3	; 0x03
     b18:	61 93       	st	Z+, r22
     b1a:	71 93       	st	Z+, r23

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     b1c:	e8 17       	cp	r30, r24
     b1e:	f9 07       	cpc	r31, r25
     b20:	c9 f7       	brne	.-14     	; 0xb14 <USB_ProcessHIDReport+0x55c>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     b22:	ba 94       	dec	r11
     b24:	06 c1       	rjmp	.+524    	; 0xd32 <USB_ProcessHIDReport+0x77a>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     b26:	e9 96       	adiw	r28, 0x39	; 57
     b28:	8c ad       	ldd	r24, Y+60	; 0x3c
     b2a:	9d ad       	ldd	r25, Y+61	; 0x3d
     b2c:	ae ad       	ldd	r26, Y+62	; 0x3e
     b2e:	bf ad       	ldd	r27, Y+63	; 0x3f
     b30:	e9 97       	sbiw	r28, 0x39	; 57
     b32:	84 15       	cp	r24, r4
     b34:	95 05       	cpc	r25, r5
     b36:	a6 05       	cpc	r26, r6
     b38:	b7 05       	cpc	r27, r7
     b3a:	08 f4       	brcc	.+2      	; 0xb3e <USB_ProcessHIDReport+0x586>
     b3c:	fa c0       	rjmp	.+500    	; 0xd32 <USB_ProcessHIDReport+0x77a>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     b3e:	d4 01       	movw	r26, r8
     b40:	14 96       	adiw	r26, 0x04	; 4
     b42:	5c 92       	st	X, r5
     b44:	4e 92       	st	-X, r4
     b46:	13 97       	sbiw	r26, 0x03	; 3
     b48:	08 94       	sec
     b4a:	41 1c       	adc	r4, r1
     b4c:	51 1c       	adc	r5, r1
     b4e:	61 1c       	adc	r6, r1
     b50:	71 1c       	adc	r7, r1
     b52:	ef c0       	rjmp	.+478    	; 0xd32 <USB_ProcessHIDReport+0x77a>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     b54:	81 14       	cp	r8, r1
     b56:	91 04       	cpc	r9, r1
     b58:	09 f4       	brne	.+2      	; 0xb5c <USB_ProcessHIDReport+0x5a4>
     b5a:	13 c1       	rjmp	.+550    	; 0xd82 <USB_ProcessHIDReport+0x7ca>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     b5c:	f4 01       	movw	r30, r8
     b5e:	85 80       	ldd	r8, Z+5	; 0x05
     b60:	96 80       	ldd	r9, Z+6	; 0x06
				break;
     b62:	e7 c0       	rjmp	.+462    	; 0xd32 <USB_ProcessHIDReport+0x77a>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     b64:	de 01       	movw	r26, r28
     b66:	59 96       	adiw	r26, 0x19	; 25
     b68:	f7 01       	movw	r30, r14
     b6a:	8a e1       	ldi	r24, 0x1A	; 26
     b6c:	01 90       	ld	r0, Z+
     b6e:	0d 92       	st	X+, r0
     b70:	81 50       	subi	r24, 0x01	; 1
     b72:	e1 f7       	brne	.-8      	; 0xb6c <USB_ProcessHIDReport+0x5b4>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     b74:	5d 8b       	std	Y+21, r21	; 0x15
     b76:	4c 8b       	std	Y+20, r20	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
     b78:	98 8e       	std	Y+24, r9	; 0x18
     b7a:	8f 8a       	std	Y+23, r8	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     b7c:	d7 01       	movw	r26, r14
     b7e:	5b 96       	adiw	r26, 0x1b	; 27
     b80:	8c 91       	ld	r24, X
     b82:	5b 97       	sbiw	r26, 0x1b	; 27
     b84:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
     b86:	bb 20       	and	r11, r11
     b88:	b1 f0       	breq	.+44     	; 0xbb6 <USB_ProcessHIDReport+0x5fe>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	9d 8f       	std	Y+29, r25	; 0x1d
     b90:	8c 8f       	std	Y+28, r24	; 0x1c
     b92:	fe 01       	movw	r30, r28
     b94:	31 96       	adiw	r30, 0x01	; 1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     b96:	8b 2d       	mov	r24, r11
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	8e 0f       	add	r24, r30
     ba0:	9f 1f       	adc	r25, r31

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <USB_ProcessHIDReport+0x5f4>
						  UsageList[i] = UsageList[i + 1];
     ba4:	22 81       	ldd	r18, Z+2	; 0x02
     ba6:	33 81       	ldd	r19, Z+3	; 0x03
     ba8:	21 93       	st	Z+, r18
     baa:	31 93       	st	Z+, r19

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     bac:	e8 17       	cp	r30, r24
     bae:	f9 07       	cpc	r31, r25
     bb0:	c9 f7       	brne	.-14     	; 0xba4 <USB_ProcessHIDReport+0x5ec>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     bb2:	ba 94       	dec	r11
     bb4:	12 c0       	rjmp	.+36     	; 0xbda <USB_ProcessHIDReport+0x622>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     bb6:	e9 96       	adiw	r28, 0x39	; 57
     bb8:	8c ad       	ldd	r24, Y+60	; 0x3c
     bba:	9d ad       	ldd	r25, Y+61	; 0x3d
     bbc:	ae ad       	ldd	r26, Y+62	; 0x3e
     bbe:	bf ad       	ldd	r27, Y+63	; 0x3f
     bc0:	e9 97       	sbiw	r28, 0x39	; 57
     bc2:	84 15       	cp	r24, r4
     bc4:	95 05       	cpc	r25, r5
     bc6:	a6 05       	cpc	r26, r6
     bc8:	b7 05       	cpc	r27, r7
     bca:	38 f0       	brcs	.+14     	; 0xbda <USB_ProcessHIDReport+0x622>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     bcc:	5d 8e       	std	Y+29, r5	; 0x1d
     bce:	4c 8e       	std	Y+28, r4	; 0x1c
     bd0:	08 94       	sec
     bd2:	41 1c       	adc	r4, r1
     bd4:	51 1c       	adc	r5, r1
     bd6:	61 1c       	adc	r6, r1
     bd8:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     bda:	c1 58       	subi	r28, 0x81	; 129
     bdc:	df 4f       	sbci	r29, 0xFF	; 255
     bde:	98 81       	ld	r25, Y
     be0:	cf 57       	subi	r28, 0x7F	; 127
     be2:	d0 40       	sbci	r29, 0x00	; 0
     be4:	90 38       	cpi	r25, 0x80	; 128
     be6:	11 f4       	brne	.+4      	; 0xbec <USB_ProcessHIDReport+0x634>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     be8:	1b 8a       	std	Y+19, r1	; 0x13
     bea:	0c c0       	rjmp	.+24     	; 0xc04 <USB_ProcessHIDReport+0x64c>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     bec:	c1 58       	subi	r28, 0x81	; 129
     bee:	df 4f       	sbci	r29, 0xFF	; 255
     bf0:	a8 81       	ld	r26, Y
     bf2:	cf 57       	subi	r28, 0x7F	; 127
     bf4:	d0 40       	sbci	r29, 0x00	; 0
     bf6:	a0 39       	cpi	r26, 0x90	; 144
     bf8:	19 f4       	brne	.+6      	; 0xc00 <USB_ProcessHIDReport+0x648>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     bfa:	b1 e0       	ldi	r27, 0x01	; 1
     bfc:	bb 8b       	std	Y+19, r27	; 0x13
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <USB_ProcessHIDReport+0x64c>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     c00:	e2 e0       	ldi	r30, 0x02	; 2
     c02:	eb 8b       	std	Y+19, r30	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     c04:	eb 89       	ldd	r30, Y+19	; 0x13
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	ec 0d       	add	r30, r12
     c0e:	fd 1d       	adc	r31, r13
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	92 81       	ldd	r25, Z+2	; 0x02
     c14:	9a 8b       	std	Y+18, r25	; 0x12
     c16:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     c18:	d7 01       	movw	r26, r14
     c1a:	2c 91       	ld	r18, X
     c1c:	81 81       	ldd	r24, Z+1	; 0x01
     c1e:	92 81       	ldd	r25, Z+2	; 0x02
     c20:	82 0f       	add	r24, r18
     c22:	91 1d       	adc	r25, r1
     c24:	92 83       	std	Z+2, r25	; 0x02
     c26:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     c28:	eb 89       	ldd	r30, Y+19	; 0x13
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	ec 0d       	add	r30, r12
     c32:	fd 1d       	adc	r31, r13
     c34:	c0 58       	subi	r28, 0x80	; 128
     c36:	df 4f       	sbci	r29, 0xFF	; 255
     c38:	a8 81       	ld	r26, Y
     c3a:	b9 81       	ldd	r27, Y+1	; 0x01
     c3c:	c0 58       	subi	r28, 0x80	; 128
     c3e:	d0 40       	sbci	r29, 0x00	; 0
     c40:	8d 91       	ld	r24, X+
     c42:	9c 91       	ld	r25, X
     c44:	11 97       	sbiw	r26, 0x01	; 1
     c46:	21 81       	ldd	r18, Z+1	; 0x01
     c48:	32 81       	ldd	r19, Z+2	; 0x02
     c4a:	28 17       	cp	r18, r24
     c4c:	39 07       	cpc	r19, r25
     c4e:	08 f4       	brcc	.+2      	; 0xc52 <USB_ProcessHIDReport+0x69a>
     c50:	9c 01       	movw	r18, r24
     c52:	c0 58       	subi	r28, 0x80	; 128
     c54:	df 4f       	sbci	r29, 0xFF	; 255
     c56:	e8 81       	ld	r30, Y
     c58:	f9 81       	ldd	r31, Y+1	; 0x01
     c5a:	c0 58       	subi	r28, 0x80	; 128
     c5c:	d0 40       	sbci	r29, 0x00	; 0
     c5e:	31 83       	std	Z+1, r19	; 0x01
     c60:	20 83       	st	Z, r18

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     c62:	e5 96       	adiw	r28, 0x35	; 53
     c64:	ae ad       	ldd	r26, Y+62	; 0x3e
     c66:	bf ad       	ldd	r27, Y+63	; 0x3f
     c68:	e5 97       	sbiw	r28, 0x35	; 53
     c6a:	8c 91       	ld	r24, X
     c6c:	84 31       	cpi	r24, 0x14	; 20
     c6e:	09 f4       	brne	.+2      	; 0xc72 <USB_ProcessHIDReport+0x6ba>
     c70:	8a c0       	rjmp	.+276    	; 0xd86 <USB_ProcessHIDReport+0x7ce>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	2a e2       	ldi	r18, 0x2A	; 42
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	82 9f       	mul	r24, r18
     c7a:	f0 01       	movw	r30, r0
     c7c:	83 9f       	mul	r24, r19
     c7e:	f0 0d       	add	r31, r0
     c80:	92 9f       	mul	r25, r18
     c82:	f0 0d       	add	r31, r0
     c84:	11 24       	eor	r1, r1
     c86:	ea 0f       	add	r30, r26
     c88:	fb 1f       	adc	r31, r27
     c8a:	31 96       	adiw	r30, 0x01	; 1
     c8c:	de 01       	movw	r26, r28
     c8e:	51 96       	adiw	r26, 0x11	; 17
     c90:	8a e2       	ldi	r24, 0x2A	; 42
     c92:	0d 90       	ld	r0, X+
     c94:	01 92       	st	Z+, r0
     c96:	81 50       	subi	r24, 0x01	; 1
     c98:	e1 f7       	brne	.-8      	; 0xc92 <USB_ProcessHIDReport+0x6da>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     c9a:	ca 57       	subi	r28, 0x7A	; 122
     c9c:	df 4f       	sbci	r29, 0xFF	; 255
     c9e:	88 81       	ld	r24, Y
     ca0:	99 81       	ldd	r25, Y+1	; 0x01
     ca2:	aa 81       	ldd	r26, Y+2	; 0x02
     ca4:	bb 81       	ldd	r27, Y+3	; 0x03
     ca6:	c6 58       	subi	r28, 0x86	; 134
     ca8:	d0 40       	sbci	r29, 0x00	; 0
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	a1 05       	cpc	r26, r1
     cae:	b1 05       	cpc	r27, r1
     cb0:	a1 f5       	brne	.+104    	; 0xd1a <USB_ProcessHIDReport+0x762>
     cb2:	ce 01       	movw	r24, r28
     cb4:	41 96       	adiw	r24, 0x11	; 17
     cb6:	cc 56       	subi	r28, 0x6C	; 108
     cb8:	df 4f       	sbci	r29, 0xFF	; 255
     cba:	48 83       	st	Y, r20
     cbc:	c4 59       	subi	r28, 0x94	; 148
     cbe:	d0 40       	sbci	r29, 0x00	; 0
     cc0:	cb 56       	subi	r28, 0x6B	; 107
     cc2:	df 4f       	sbci	r29, 0xFF	; 255
     cc4:	58 83       	st	Y, r21
     cc6:	c5 59       	subi	r28, 0x95	; 149
     cc8:	d0 40       	sbci	r29, 0x00	; 0
     cca:	ca 56       	subi	r28, 0x6A	; 106
     ccc:	df 4f       	sbci	r29, 0xFF	; 255
     cce:	68 83       	st	Y, r22
     cd0:	c6 59       	subi	r28, 0x96	; 150
     cd2:	d0 40       	sbci	r29, 0x00	; 0
     cd4:	c9 56       	subi	r28, 0x69	; 105
     cd6:	df 4f       	sbci	r29, 0xFF	; 255
     cd8:	78 83       	st	Y, r23
     cda:	c7 59       	subi	r28, 0x97	; 151
     cdc:	d0 40       	sbci	r29, 0x00	; 0
     cde:	62 dc       	rcall	.-1852   	; 0x5a4 <CALLBACK_HIDParser_FilterHIDReportItem>
     ce0:	cc 56       	subi	r28, 0x6C	; 108
     ce2:	df 4f       	sbci	r29, 0xFF	; 255
     ce4:	48 81       	ld	r20, Y
     ce6:	c4 59       	subi	r28, 0x94	; 148
     ce8:	d0 40       	sbci	r29, 0x00	; 0
     cea:	cb 56       	subi	r28, 0x6B	; 107
     cec:	df 4f       	sbci	r29, 0xFF	; 255
     cee:	58 81       	ld	r21, Y
     cf0:	c5 59       	subi	r28, 0x95	; 149
     cf2:	d0 40       	sbci	r29, 0x00	; 0
     cf4:	ca 56       	subi	r28, 0x6A	; 106
     cf6:	df 4f       	sbci	r29, 0xFF	; 255
     cf8:	68 81       	ld	r22, Y
     cfa:	c6 59       	subi	r28, 0x96	; 150
     cfc:	d0 40       	sbci	r29, 0x00	; 0
     cfe:	c9 56       	subi	r28, 0x69	; 105
     d00:	df 4f       	sbci	r29, 0xFF	; 255
     d02:	78 81       	ld	r23, Y
     d04:	c7 59       	subi	r28, 0x97	; 151
     d06:	d0 40       	sbci	r29, 0x00	; 0
     d08:	88 23       	and	r24, r24
     d0a:	39 f0       	breq	.+14     	; 0xd1a <USB_ProcessHIDReport+0x762>
					  ParserData->TotalReportItems++;
     d0c:	e5 96       	adiw	r28, 0x35	; 53
     d0e:	ae ad       	ldd	r26, Y+62	; 0x3e
     d10:	bf ad       	ldd	r27, Y+63	; 0x3f
     d12:	e5 97       	sbiw	r28, 0x35	; 53
     d14:	8c 91       	ld	r24, X
     d16:	8f 5f       	subi	r24, 0xFF	; 255
     d18:	8c 93       	st	X, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     d1a:	a3 94       	inc	r10
     d1c:	f7 01       	movw	r30, r14
     d1e:	82 8d       	ldd	r24, Z+26	; 0x1a
     d20:	a8 16       	cp	r10, r24
     d22:	08 f4       	brcc	.+2      	; 0xd26 <USB_ProcessHIDReport+0x76e>
     d24:	1f cf       	rjmp	.-450    	; 0xb64 <USB_ProcessHIDReport+0x5ac>
     d26:	97 01       	movw	r18, r14
     d28:	a6 01       	movw	r20, r12
     d2a:	68 01       	movw	r12, r16
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <USB_ProcessHIDReport+0x77a>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     d2e:	27 01       	movw	r4, r14
     d30:	38 01       	movw	r6, r16
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     d32:	eb 96       	adiw	r28, 0x3b	; 59
     d34:	8e ad       	ldd	r24, Y+62	; 0x3e
     d36:	9f ad       	ldd	r25, Y+63	; 0x3f
     d38:	eb 97       	sbiw	r28, 0x3b	; 59
     d3a:	8c 70       	andi	r24, 0x0C	; 12
     d3c:	90 70       	andi	r25, 0x00	; 0
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	51 f4       	brne	.+20     	; 0xd56 <USB_ProcessHIDReport+0x79e>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     d42:	e9 96       	adiw	r28, 0x39	; 57
     d44:	1c ae       	std	Y+60, r1	; 0x3c
     d46:	1d ae       	std	Y+61, r1	; 0x3d
     d48:	1e ae       	std	Y+62, r1	; 0x3e
     d4a:	1f ae       	std	Y+63, r1	; 0x3f
     d4c:	e9 97       	sbiw	r28, 0x39	; 57
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     d4e:	44 24       	eor	r4, r4
     d50:	55 24       	eor	r5, r5
     d52:	32 01       	movw	r6, r4
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     d54:	bb 24       	eor	r11, r11
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     d56:	21 14       	cp	r2, r1
     d58:	31 04       	cpc	r3, r1
     d5a:	09 f0       	breq	.+2      	; 0xd5e <USB_ProcessHIDReport+0x7a6>
     d5c:	c4 cc       	rjmp	.-1656   	; 0x6e6 <USB_ProcessHIDReport+0x12e>
     d5e:	e5 96       	adiw	r28, 0x35	; 53
     d60:	6e ad       	ldd	r22, Y+62	; 0x3e
     d62:	7f ad       	ldd	r23, Y+63	; 0x3f
     d64:	e5 97       	sbiw	r28, 0x35	; 53
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     d66:	db 01       	movw	r26, r22
     d68:	8c 91       	ld	r24, X
     d6a:	88 23       	and	r24, r24
     d6c:	71 f4       	brne	.+28     	; 0xd8a <USB_ProcessHIDReport+0x7d2>
	  return HID_PARSE_NoUnfilteredReportItems;
     d6e:	88 e0       	ldi	r24, 0x08	; 8
     d70:	0f c0       	rjmp	.+30     	; 0xd90 <USB_ProcessHIDReport+0x7d8>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	0d c0       	rjmp	.+26     	; 0xd90 <USB_ProcessHIDReport+0x7d8>

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	0b c0       	rjmp	.+22     	; 0xd90 <USB_ProcessHIDReport+0x7d8>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     d7a:	86 e0       	ldi	r24, 0x06	; 6
     d7c:	09 c0       	rjmp	.+18     	; 0xd90 <USB_ProcessHIDReport+0x7d8>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     d7e:	85 e0       	ldi	r24, 0x05	; 5
     d80:	07 c0       	rjmp	.+14     	; 0xd90 <USB_ProcessHIDReport+0x7d8>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     d82:	84 e0       	ldi	r24, 0x04	; 4
     d84:	05 c0       	rjmp	.+10     	; 0xd90 <USB_ProcessHIDReport+0x7d8>
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
     d86:	83 e0       	ldi	r24, 0x03	; 3
     d88:	03 c0       	rjmp	.+6      	; 0xd90 <USB_ProcessHIDReport+0x7d8>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	01 c0       	rjmp	.+2      	; 0xd90 <USB_ProcessHIDReport+0x7d8>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     d8e:	87 e0       	ldi	r24, 0x07	; 7

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     d90:	c7 56       	subi	r28, 0x67	; 103
     d92:	df 4f       	sbci	r29, 0xFF	; 255
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	bf 90       	pop	r11
     db0:	af 90       	pop	r10
     db2:	9f 90       	pop	r9
     db4:	8f 90       	pop	r8
     db6:	7f 90       	pop	r7
     db8:	6f 90       	pop	r6
     dba:	5f 90       	pop	r5
     dbc:	4f 90       	pop	r4
     dbe:	3f 90       	pop	r3
     dc0:	2f 90       	pop	r2
     dc2:	08 95       	ret
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     dc4:	6a 30       	cpi	r22, 0x0A	; 10
     dc6:	09 f0       	breq	.+2      	; 0xdca <USB_ProcessHIDReport+0x812>
     dc8:	21 ce       	rjmp	.-958    	; 0xa0c <USB_ProcessHIDReport+0x454>
     dca:	e1 cf       	rjmp	.-62     	; 0xd8e <USB_ProcessHIDReport+0x7d6>

00000dcc <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	fb 01       	movw	r30, r22
	if (ReportItem == NULL)
     dda:	30 97       	sbiw	r30, 0x00	; 0
     ddc:	09 f4       	brne	.+2      	; 0xde0 <USB_GetHIDReportItemInfo+0x14>
     dde:	4c c0       	rjmp	.+152    	; 0xe78 <USB_GetHIDReportItemInfo+0xac>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
     de0:	30 85       	ldd	r19, Z+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
     de6:	25 81       	ldd	r18, Z+5	; 0x05
     de8:	22 23       	and	r18, r18
     dea:	31 f0       	breq	.+12     	; 0xdf8 <USB_GetHIDReportItemInfo+0x2c>
	{
		if (ReportItem->ReportID != ReportData[0])
     dec:	dc 01       	movw	r26, r24
     dee:	4c 91       	ld	r20, X
     df0:	24 17       	cp	r18, r20
     df2:	09 f0       	breq	.+2      	; 0xdf6 <USB_GetHIDReportItemInfo+0x2a>
     df4:	41 c0       	rjmp	.+130    	; 0xe78 <USB_GetHIDReportItemInfo+0xac>
		  return false;

		ReportData++;
     df6:	01 96       	adiw	r24, 0x01	; 1
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
     df8:	c3 2f       	mov	r28, r19
     dfa:	d0 e0       	ldi	r29, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
     dfc:	22 a1       	ldd	r18, Z+34	; 0x22
     dfe:	33 a1       	ldd	r19, Z+35	; 0x23
     e00:	44 a1       	ldd	r20, Z+36	; 0x24
     e02:	55 a1       	ldd	r21, Z+37	; 0x25
     e04:	26 a3       	std	Z+38, r18	; 0x26
     e06:	37 a3       	std	Z+39, r19	; 0x27
     e08:	40 a7       	std	Z+40, r20	; 0x28
     e0a:	51 a7       	std	Z+41, r21	; 0x29
	ReportItem->Value = 0;
     e0c:	12 a2       	std	Z+34, r1	; 0x22
     e0e:	13 a2       	std	Z+35, r1	; 0x23
     e10:	14 a2       	std	Z+36, r1	; 0x24
     e12:	15 a2       	std	Z+37, r1	; 0x25
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
     e14:	21 e0       	ldi	r18, 0x01	; 1
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e0       	ldi	r20, 0x00	; 0
     e1a:	50 e0       	ldi	r21, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     e1c:	29 c0       	rjmp	.+82     	; 0xe70 <USB_GetHIDReportItemInfo+0xa4>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
     e1e:	db 01       	movw	r26, r22
     e20:	03 e0       	ldi	r16, 0x03	; 3
     e22:	b6 95       	lsr	r27
     e24:	a7 95       	ror	r26
     e26:	0a 95       	dec	r16
     e28:	e1 f7       	brne	.-8      	; 0xe22 <USB_GetHIDReportItemInfo+0x56>
     e2a:	a8 0f       	add	r26, r24
     e2c:	b9 1f       	adc	r27, r25
     e2e:	ac 91       	ld	r26, X
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	17 e0       	ldi	r17, 0x07	; 7
     e34:	e1 2e       	mov	r14, r17
     e36:	f1 2c       	mov	r15, r1
     e38:	e6 22       	and	r14, r22
     e3a:	f7 22       	and	r15, r23
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <USB_GetHIDReportItemInfo+0x76>
     e3e:	b5 95       	asr	r27
     e40:	a7 95       	ror	r26
     e42:	ea 94       	dec	r14
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <USB_GetHIDReportItemInfo+0x72>
     e46:	a0 ff       	sbrs	r26, 0
     e48:	0c c0       	rjmp	.+24     	; 0xe62 <USB_GetHIDReportItemInfo+0x96>
		  ReportItem->Value |= BitMask;
     e4a:	e2 a0       	ldd	r14, Z+34	; 0x22
     e4c:	f3 a0       	ldd	r15, Z+35	; 0x23
     e4e:	04 a1       	ldd	r16, Z+36	; 0x24
     e50:	15 a1       	ldd	r17, Z+37	; 0x25
     e52:	e2 2a       	or	r14, r18
     e54:	f3 2a       	or	r15, r19
     e56:	04 2b       	or	r16, r20
     e58:	15 2b       	or	r17, r21
     e5a:	e2 a2       	std	Z+34, r14	; 0x22
     e5c:	f3 a2       	std	Z+35, r15	; 0x23
     e5e:	04 a3       	std	Z+36, r16	; 0x24
     e60:	15 a3       	std	Z+37, r17	; 0x25

		CurrentBit++;
     e62:	6f 5f       	subi	r22, 0xFF	; 255
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
		BitMask <<= 1;
     e66:	22 0f       	add	r18, r18
     e68:	33 1f       	adc	r19, r19
     e6a:	44 1f       	adc	r20, r20
     e6c:	55 1f       	adc	r21, r21
     e6e:	21 97       	sbiw	r28, 0x01	; 1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     e70:	20 97       	sbiw	r28, 0x00	; 0
     e72:	a9 f6       	brne	.-86     	; 0xe1e <USB_GetHIDReportItemInfo+0x52>

		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <USB_GetHIDReportItemInfo+0xae>
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;
     e78:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	08 95       	ret

00000e88 <USB_GetHIDReportSize>:
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     e88:	e4 2f       	mov	r30, r20
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
     e8c:	ee 0f       	add	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	ef 56       	subi	r30, 0x6F	; 111
     e92:	fc 4f       	sbci	r31, 0xFC	; 252
     e94:	e8 0f       	add	r30, r24
     e96:	f9 1f       	adc	r31, r25
     e98:	80 57       	subi	r24, 0x70	; 112
     e9a:	9c 4f       	sbci	r25, 0xFC	; 252
     e9c:	4a e0       	ldi	r20, 0x0A	; 10
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     e9e:	20 81       	ld	r18, Z
     ea0:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
     ea2:	dc 01       	movw	r26, r24
     ea4:	5c 91       	ld	r21, X
     ea6:	56 17       	cp	r21, r22
     ea8:	91 f4       	brne	.+36     	; 0xece <USB_GetHIDReportSize+0x46>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
     eaa:	a9 01       	movw	r20, r18
     eac:	47 70       	andi	r20, 0x07	; 7
     eae:	50 70       	andi	r21, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	41 15       	cp	r20, r1
     eb6:	51 05       	cpc	r21, r1
     eb8:	11 f4       	brne	.+4      	; 0xebe <USB_GetHIDReportSize+0x36>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	43 e0       	ldi	r20, 0x03	; 3
     ec0:	36 95       	lsr	r19
     ec2:	27 95       	ror	r18
     ec4:	4a 95       	dec	r20
     ec6:	e1 f7       	brne	.-8      	; 0xec0 <USB_GetHIDReportSize+0x38>
     ec8:	28 0f       	add	r18, r24
     eca:	39 1f       	adc	r19, r25
     ecc:	07 c0       	rjmp	.+14     	; 0xedc <USB_GetHIDReportSize+0x54>
     ece:	41 50       	subi	r20, 0x01	; 1
     ed0:	37 96       	adiw	r30, 0x07	; 7
     ed2:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
     ed4:	44 23       	and	r20, r20
     ed6:	19 f7       	brne	.-58     	; 0xe9e <USB_GetHIDReportSize+0x16>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
}
     edc:	c9 01       	movw	r24, r18
     ede:	08 95       	ret

00000ee0 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ee0:	80 91 9e 00 	lds	r24, 0x009E
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	81 70       	andi	r24, 0x01	; 1
     ee8:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     eea:	20 91 a0 00 	lds	r18, 0x00A0
     eee:	2d 7f       	andi	r18, 0xFD	; 253
     ef0:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     ef4:	20 91 9e 00 	lds	r18, 0x009E
     ef8:	22 60       	ori	r18, 0x02	; 2
     efa:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     efe:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     f02:	21 fd       	sbrc	r18, 1
     f04:	fc cf       	rjmp	.-8      	; 0xefe <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f06:	20 91 9e 00 	lds	r18, 0x009E
     f0a:	21 60       	ori	r18, 0x01	; 1
     f0c:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     f10:	10 92 04 05 	sts	0x0504, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f14:	20 91 a0 00 	lds	r18, 0x00A0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	20 72       	andi	r18, 0x20	; 32
     f1c:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     f1e:	40 91 a0 00 	lds	r20, 0x00A0
     f22:	4f 7d       	andi	r20, 0xDF	; 223
     f24:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f28:	40 91 9f 00 	lds	r20, 0x009F
     f2c:	4f 7d       	andi	r20, 0xDF	; 223
     f2e:	40 93 9f 00 	sts	0x009F, r20
     f32:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f34:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     f38:	55 ff       	sbrs	r21, 5
     f3a:	0b c0       	rjmp	.+22     	; 0xf52 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f3c:	40 91 9f 00 	lds	r20, 0x009F
     f40:	4f 7d       	andi	r20, 0xDF	; 223
     f42:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     f46:	40 91 9f 00 	lds	r20, 0x009F
     f4a:	4d 7f       	andi	r20, 0xFD	; 253
     f4c:	40 93 9f 00 	sts	0x009F, r20
     f50:	08 c0       	rjmp	.+16     	; 0xf62 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f52:	ef ec       	ldi	r30, 0xCF	; 207
     f54:	f7 e0       	ldi	r31, 0x07	; 7
     f56:	31 97       	sbiw	r30, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <USB_Host_ResetDevice+0x76>
     f5a:	00 c0       	rjmp	.+0      	; 0xf5c <USB_Host_ResetDevice+0x7c>
     f5c:	00 00       	nop
     f5e:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     f60:	49 f7       	brne	.-46     	; 0xf34 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     f62:	21 15       	cp	r18, r1
     f64:	31 05       	cpc	r19, r1
     f66:	29 f0       	breq	.+10     	; 0xf72 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     f68:	20 91 a0 00 	lds	r18, 0x00A0
     f6c:	20 62       	ori	r18, 0x20	; 32
     f6e:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	29 f4       	brne	.+10     	; 0xf80 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f76:	80 91 9e 00 	lds	r24, 0x009E
     f7a:	8e 7f       	andi	r24, 0xFE	; 254
     f7c:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     f80:	80 91 a0 00 	lds	r24, 0x00A0
     f84:	82 60       	ori	r24, 0x02	; 2
     f86:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     f8a:	08 95       	ret

00000f8c <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f8c:	40 91 9e 00 	lds	r20, 0x009E
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	41 70       	andi	r20, 0x01	; 1
     f94:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f96:	20 91 a0 00 	lds	r18, 0x00A0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	20 72       	andi	r18, 0x20	; 32
     f9e:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     fa0:	90 91 a0 00 	lds	r25, 0x00A0
     fa4:	9f 7d       	andi	r25, 0xDF	; 223
     fa6:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     faa:	90 91 9f 00 	lds	r25, 0x009F
     fae:	9f 7d       	andi	r25, 0xDF	; 223
     fb0:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fb4:	90 91 9e 00 	lds	r25, 0x009E
     fb8:	91 60       	ori	r25, 0x01	; 1
     fba:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     fbe:	26 c0       	rjmp	.+76     	; 0x100c <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     fc0:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     fc4:	95 ff       	sbrs	r25, 5
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     fc8:	90 91 9f 00 	lds	r25, 0x009F
     fcc:	9f 7d       	andi	r25, 0xDF	; 223
     fce:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     fd2:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     fd4:	90 91 0e 05 	lds	r25, 0x050E
     fd8:	91 30       	cpi	r25, 0x01	; 1
     fda:	d9 f0       	breq	.+54     	; 0x1012 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     fdc:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     fe0:	94 ff       	sbrs	r25, 4
     fe2:	09 c0       	rjmp	.+18     	; 0xff6 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fe4:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     fe8:	80 91 a6 00 	lds	r24, 0x00A6
     fec:	8f 7e       	andi	r24, 0xEF	; 239
     fee:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     ff2:	82 e0       	ldi	r24, 0x02	; 2

			break;
     ff4:	0f c0       	rjmp	.+30     	; 0x1014 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ff6:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     ffa:	91 ff       	sbrs	r25, 1
     ffc:	07 c0       	rjmp	.+14     	; 0x100c <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     ffe:	80 91 a6 00 	lds	r24, 0x00A6
    1002:	8d 7f       	andi	r24, 0xFD	; 253
    1004:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    1008:	83 e0       	ldi	r24, 0x03	; 3

			break;
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    100c:	88 23       	and	r24, r24
    100e:	c1 f6       	brne	.-80     	; 0xfc0 <USB_Host_WaitMS+0x34>
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    1012:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    1014:	41 15       	cp	r20, r1
    1016:	51 05       	cpc	r21, r1
    1018:	29 f4       	brne	.+10     	; 0x1024 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    101a:	90 91 9e 00 	lds	r25, 0x009E
    101e:	9e 7f       	andi	r25, 0xFE	; 254
    1020:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    1024:	21 15       	cp	r18, r1
    1026:	31 05       	cpc	r19, r1
    1028:	29 f0       	breq	.+10     	; 0x1034 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    102a:	90 91 a0 00 	lds	r25, 0x00A0
    102e:	90 62       	ori	r25, 0x20	; 32
    1030:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    1034:	08 95       	ret

00001036 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	28 97       	sbiw	r28, 0x08	; 8
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    104e:	80 91 0e 05 	lds	r24, 0x050E
    1052:	85 30       	cpi	r24, 0x05	; 5
    1054:	09 f4       	brne	.+2      	; 0x1058 <USB_Host_ProcessNextHostState+0x22>
    1056:	99 c0       	rjmp	.+306    	; 0x118a <USB_Host_ProcessNextHostState+0x154>
    1058:	86 30       	cpi	r24, 0x06	; 6
    105a:	68 f4       	brcc	.+26     	; 0x1076 <USB_Host_ProcessNextHostState+0x40>
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	c1 f1       	breq	.+112    	; 0x10d0 <USB_Host_ProcessNextHostState+0x9a>
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	18 f4       	brcc	.+6      	; 0x106a <USB_Host_ProcessNextHostState+0x34>
    1064:	88 23       	and	r24, r24
    1066:	a1 f0       	breq	.+40     	; 0x1090 <USB_Host_ProcessNextHostState+0x5a>
    1068:	04 c1       	rjmp	.+520    	; 0x1272 <USB_Host_ProcessNextHostState+0x23c>
    106a:	83 30       	cpi	r24, 0x03	; 3
    106c:	d9 f1       	breq	.+118    	; 0x10e4 <USB_Host_ProcessNextHostState+0xae>
    106e:	84 30       	cpi	r24, 0x04	; 4
    1070:	09 f0       	breq	.+2      	; 0x1074 <USB_Host_ProcessNextHostState+0x3e>
    1072:	ff c0       	rjmp	.+510    	; 0x1272 <USB_Host_ProcessNextHostState+0x23c>
    1074:	62 c0       	rjmp	.+196    	; 0x113a <USB_Host_ProcessNextHostState+0x104>
    1076:	87 30       	cpi	r24, 0x07	; 7
    1078:	09 f4       	brne	.+2      	; 0x107c <USB_Host_ProcessNextHostState+0x46>
    107a:	9e c0       	rjmp	.+316    	; 0x11b8 <USB_Host_ProcessNextHostState+0x182>
    107c:	87 30       	cpi	r24, 0x07	; 7
    107e:	08 f4       	brcc	.+2      	; 0x1082 <USB_Host_ProcessNextHostState+0x4c>
    1080:	8f c0       	rjmp	.+286    	; 0x11a0 <USB_Host_ProcessNextHostState+0x16a>
    1082:	88 30       	cpi	r24, 0x08	; 8
    1084:	09 f4       	brne	.+2      	; 0x1088 <USB_Host_ProcessNextHostState+0x52>
    1086:	b8 c0       	rjmp	.+368    	; 0x11f8 <USB_Host_ProcessNextHostState+0x1c2>
    1088:	89 30       	cpi	r24, 0x09	; 9
    108a:	09 f0       	breq	.+2      	; 0x108e <USB_Host_ProcessNextHostState+0x58>
    108c:	f2 c0       	rjmp	.+484    	; 0x1272 <USB_Host_ProcessNextHostState+0x23c>
    108e:	d9 c0       	rjmp	.+434    	; 0x1242 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1090:	00 91 02 05 	lds	r16, 0x0502
    1094:	10 91 03 05 	lds	r17, 0x0503
    1098:	01 15       	cp	r16, r1
    109a:	11 05       	cpc	r17, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <USB_Host_ProcessNextHostState+0x6a>
    109e:	e9 c0       	rjmp	.+466    	; 0x1272 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	74 df       	rcall	.-280    	; 0xf8c <USB_Host_WaitMS>
    10a4:	68 2f       	mov	r22, r24
    10a6:	88 23       	and	r24, r24
    10a8:	31 f0       	breq	.+12     	; 0x10b6 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
    10aa:	80 91 01 05 	lds	r24, 0x0501
    10ae:	80 93 0e 05 	sts	0x050E, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
					break;
    10b4:	d2 c0       	rjmp	.+420    	; 0x125a <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
    10b6:	01 50       	subi	r16, 0x01	; 1
    10b8:	10 40       	sbci	r17, 0x00	; 0
    10ba:	10 93 03 05 	sts	0x0503, r17
    10be:	00 93 02 05 	sts	0x0502, r16
    10c2:	01 15       	cp	r16, r1
    10c4:	11 05       	cpc	r17, r1
    10c6:	09 f0       	breq	.+2      	; 0x10ca <USB_Host_ProcessNextHostState+0x94>
    10c8:	d4 c0       	rjmp	.+424    	; 0x1272 <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
    10ca:	80 91 01 05 	lds	r24, 0x0501
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    10d0:	88 ee       	ldi	r24, 0xE8	; 232
    10d2:	93 e0       	ldi	r25, 0x03	; 3
    10d4:	90 93 03 05 	sts	0x0503, r25
    10d8:	80 93 02 05 	sts	0x0502, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	80 93 0e 05 	sts	0x050E, r24
			break;
    10e2:	c7 c0       	rjmp	.+398    	; 0x1272 <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    10e4:	80 91 02 05 	lds	r24, 0x0502
    10e8:	90 91 03 05 	lds	r25, 0x0503
    10ec:	9c 01       	movw	r18, r24
    10ee:	21 50       	subi	r18, 0x01	; 1
    10f0:	30 40       	sbci	r19, 0x00	; 0
    10f2:	30 93 03 05 	sts	0x0503, r19
    10f6:	20 93 02 05 	sts	0x0502, r18
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	39 f0       	breq	.+14     	; 0x110c <USB_Host_ProcessNextHostState+0xd6>
    10fe:	8f ec       	ldi	r24, 0xCF	; 207
    1100:	97 e0       	ldi	r25, 0x07	; 7
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <USB_Host_ProcessNextHostState+0xcc>
    1106:	00 c0       	rjmp	.+0      	; 0x1108 <USB_Host_ProcessNextHostState+0xd2>
    1108:	00 00       	nop
    110a:	b3 c0       	rjmp	.+358    	; 0x1272 <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    110c:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    110e:	80 91 d8 00 	lds	r24, 0x00D8
    1112:	80 61       	ori	r24, 0x10	; 16
    1114:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    1118:	80 91 dd 00 	lds	r24, 0x00DD
    111c:	8b 7f       	andi	r24, 0xFB	; 251
    111e:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    1122:	80 91 d7 00 	lds	r24, 0x00D7
    1126:	80 61       	ori	r24, 0x10	; 16
    1128:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    112c:	80 91 dd 00 	lds	r24, 0x00DD
    1130:	82 60       	ori	r24, 0x02	; 2
    1132:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1136:	84 e0       	ldi	r24, 0x04	; 4
    1138:	d2 cf       	rjmp	.-92     	; 0x10de <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    113a:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    113e:	80 ff       	sbrs	r24, 0
    1140:	98 c0       	rjmp	.+304    	; 0x1272 <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1142:	80 91 9f 00 	lds	r24, 0x009F
    1146:	8e 7f       	andi	r24, 0xFE	; 254
    1148:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    114c:	80 91 9f 00 	lds	r24, 0x009F
    1150:	8d 7f       	andi	r24, 0xFD	; 253
    1152:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1156:	80 91 df 00 	lds	r24, 0x00DF
    115a:	8d 7f       	andi	r24, 0xFD	; 253
    115c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1160:	80 91 de 00 	lds	r24, 0x00DE
    1164:	82 60       	ori	r24, 0x02	; 2
    1166:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    116a:	80 91 9e 00 	lds	r24, 0x009E
    116e:	81 60       	ori	r24, 0x01	; 1
    1170:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    1174:	7a d1       	rcall	.+756    	; 0x146a <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    1176:	10 92 0e 05 	sts	0x050E, r1
    117a:	84 e6       	ldi	r24, 0x64	; 100
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	90 93 03 05 	sts	0x0503, r25
    1182:	80 93 02 05 	sts	0x0502, r24
    1186:	85 e0       	ldi	r24, 0x05	; 5
    1188:	59 c0       	rjmp	.+178    	; 0x123c <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    118a:	aa de       	rcall	.-684    	; 0xee0 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    118c:	10 92 0e 05 	sts	0x050E, r1
    1190:	88 ec       	ldi	r24, 0xC8	; 200
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	90 93 03 05 	sts	0x0503, r25
    1198:	80 93 02 05 	sts	0x0502, r24
    119c:	86 e0       	ldi	r24, 0x06	; 6
    119e:	4e c0       	rjmp	.+156    	; 0x123c <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	20 e4       	ldi	r18, 0x40	; 64
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	01 e0       	ldi	r16, 0x01	; 1
    11ac:	d0 d0       	rcall	.+416    	; 0x134e <Pipe_ConfigurePipe>
    11ae:	88 23       	and	r24, r24
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <USB_Host_ProcessNextHostState+0x17e>
    11b2:	4f c0       	rjmp	.+158    	; 0x1252 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    11b4:	87 e0       	ldi	r24, 0x07	; 7
    11b6:	93 cf       	rjmp	.-218    	; 0x10de <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    11b8:	a6 e0       	ldi	r26, 0x06	; 6
    11ba:	b5 e0       	ldi	r27, 0x05	; 5
    11bc:	ef e1       	ldi	r30, 0x1F	; 31
    11be:	f1 e0       	ldi	r31, 0x01	; 1
    11c0:	88 e0       	ldi	r24, 0x08	; 8
    11c2:	01 90       	ld	r0, Z+
    11c4:	0d 92       	st	X+, r0
    11c6:	81 50       	subi	r24, 0x01	; 1
    11c8:	e1 f7       	brne	.-8      	; 0x11c2 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11ca:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    11ce:	ce 01       	movw	r24, r28
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	94 d3       	rcall	.+1832   	; 0x18fc <USB_Host_SendControlRequest>
    11d4:	68 2f       	mov	r22, r24
    11d6:	88 23       	and	r24, r24
    11d8:	09 f0       	breq	.+2      	; 0x11dc <USB_Host_ProcessNextHostState+0x1a6>
    11da:	3e c0       	rjmp	.+124    	; 0x1258 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    11dc:	88 85       	ldd	r24, Y+8	; 0x08
    11de:	80 93 27 01 	sts	0x0127, r24

			USB_Host_ResetDevice();
    11e2:	7e de       	rcall	.-772    	; 0xee0 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    11e4:	10 92 0e 05 	sts	0x050E, r1
    11e8:	88 ec       	ldi	r24, 0xC8	; 200
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	90 93 03 05 	sts	0x0503, r25
    11f0:	80 93 02 05 	sts	0x0502, r24
    11f4:	88 e0       	ldi	r24, 0x08	; 8
    11f6:	22 c0       	rjmp	.+68     	; 0x123c <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    11f8:	20 91 27 01 	lds	r18, 0x0127
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	01 e0       	ldi	r16, 0x01	; 1
    1206:	a3 d0       	rcall	.+326    	; 0x134e <Pipe_ConfigurePipe>
    1208:	88 23       	and	r24, r24
    120a:	19 f1       	breq	.+70     	; 0x1252 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    120c:	a6 e0       	ldi	r26, 0x06	; 6
    120e:	b5 e0       	ldi	r27, 0x05	; 5
    1210:	e7 e1       	ldi	r30, 0x17	; 23
    1212:	f1 e0       	ldi	r31, 0x01	; 1
    1214:	88 e0       	ldi	r24, 0x08	; 8
    1216:	01 90       	ld	r0, Z+
    1218:	0d 92       	st	X+, r0
    121a:	81 50       	subi	r24, 0x01	; 1
    121c:	e1 f7       	brne	.-8      	; 0x1216 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	6c d3       	rcall	.+1752   	; 0x18fc <USB_Host_SendControlRequest>
    1224:	68 2f       	mov	r22, r24
    1226:	88 23       	and	r24, r24
    1228:	b9 f4       	brne	.+46     	; 0x1258 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    122a:	10 92 0e 05 	sts	0x050E, r1
    122e:	84 e6       	ldi	r24, 0x64	; 100
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	90 93 03 05 	sts	0x0503, r25
    1236:	80 93 02 05 	sts	0x0502, r24
    123a:	89 e0       	ldi	r24, 0x09	; 9
    123c:	80 93 01 05 	sts	0x0501, r24
			break;
    1240:	18 c0       	rjmp	.+48     	; 0x1272 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    1248:	8a e0       	ldi	r24, 0x0A	; 10
    124a:	80 93 0e 05 	sts	0x050E, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    124e:	07 d9       	rcall	.-3570   	; 0x45e <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    1250:	10 c0       	rjmp	.+32     	; 0x1272 <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    1252:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    1254:	84 e0       	ldi	r24, 0x04	; 4
    1256:	01 c0       	rjmp	.+2      	; 0x125a <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    1258:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    125a:	90 91 0e 05 	lds	r25, 0x050E
    125e:	91 30       	cpi	r25, 0x01	; 1
    1260:	41 f0       	breq	.+16     	; 0x1272 <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1262:	77 d9       	rcall	.-3346   	; 0x552 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1264:	80 91 dd 00 	lds	r24, 0x00DD
    1268:	81 60       	ori	r24, 0x01	; 1
    126a:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    126e:	f1 d8       	rcall	.-3614   	; 0x452 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1270:	7d d1       	rcall	.+762    	; 0x156c <USB_ResetInterface>
	}
}
    1272:	28 96       	adiw	r28, 0x08	; 8
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	08 95       	ret

00001288 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1288:	8f 92       	push	r8
    128a:	9f 92       	push	r9
    128c:	bf 92       	push	r11
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	e8 2e       	mov	r14, r24
    12a6:	4b 01       	movw	r8, r22
    12a8:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12aa:	80 91 aa 00 	lds	r24, 0x00AA
    12ae:	8f 7c       	andi	r24, 0xCF	; 207
    12b0:	80 61       	ori	r24, 0x10	; 16
    12b2:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    12b6:	99 83       	std	Y+1, r25	; 0x01
    12b8:	12 d1       	rcall	.+548    	; 0x14de <Pipe_WaitUntilReady>
    12ba:	b8 2e       	mov	r11, r24
    12bc:	99 81       	ldd	r25, Y+1	; 0x01
    12be:	88 23       	and	r24, r24
    12c0:	c1 f5       	brne	.+112    	; 0x1332 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    12c2:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    12c4:	01 15       	cp	r16, r1
    12c6:	11 05       	cpc	r17, r1
    12c8:	39 f0       	breq	.+14     	; 0x12d8 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    12ca:	f8 01       	movw	r30, r16
    12cc:	20 81       	ld	r18, Z
    12ce:	31 81       	ldd	r19, Z+1	; 0x01
    12d0:	82 1a       	sub	r8, r18
    12d2:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    12d4:	e2 0e       	add	r14, r18
    12d6:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    12d8:	cc 24       	eor	r12, r12
    12da:	dd 24       	eor	r13, r13
    12dc:	25 c0       	rjmp	.+74     	; 0x1328 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    12de:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    12e2:	85 fd       	sbrc	r24, 5
    12e4:	16 c0       	rjmp	.+44     	; 0x1312 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12e6:	80 91 a6 00 	lds	r24, 0x00A6
    12ea:	8e 77       	andi	r24, 0x7E	; 126
    12ec:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    12f0:	01 15       	cp	r16, r1
    12f2:	11 05       	cpc	r17, r1
    12f4:	51 f0       	breq	.+20     	; 0x130a <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    12f6:	f8 01       	movw	r30, r16
    12f8:	80 81       	ld	r24, Z
    12fa:	91 81       	ldd	r25, Z+1	; 0x01
    12fc:	8c 0d       	add	r24, r12
    12fe:	9d 1d       	adc	r25, r13
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    1304:	44 e0       	ldi	r20, 0x04	; 4
    1306:	b4 2e       	mov	r11, r20
    1308:	14 c0       	rjmp	.+40     	; 0x1332 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    130a:	e9 d0       	rcall	.+466    	; 0x14de <Pipe_WaitUntilReady>
    130c:	88 23       	and	r24, r24
    130e:	61 f0       	breq	.+24     	; 0x1328 <Pipe_Read_Stream_LE+0xa0>
    1310:	0f c0       	rjmp	.+30     	; 0x1330 <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1312:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1316:	f7 01       	movw	r30, r14
    1318:	81 93       	st	Z+, r24
    131a:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    131c:	08 94       	sec
    131e:	81 08       	sbc	r8, r1
    1320:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    1322:	08 94       	sec
    1324:	c1 1c       	adc	r12, r1
    1326:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1328:	81 14       	cp	r8, r1
    132a:	91 04       	cpc	r9, r1
    132c:	c1 f6       	brne	.-80     	; 0x12de <Pipe_Read_Stream_LE+0x56>
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1330:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1332:	8b 2d       	mov	r24, r11
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	df 90       	pop	r13
    1344:	cf 90       	pop	r12
    1346:	bf 90       	pop	r11
    1348:	9f 90       	pop	r9
    134a:	8f 90       	pop	r8
    134c:	08 95       	ret

0000134e <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    134e:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1350:	58 2f       	mov	r21, r24
    1352:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    1354:	87 ff       	sbrs	r24, 7
    1356:	02 c0       	rjmp	.+4      	; 0x135c <Pipe_ConfigurePipe+0xe>
    1358:	80 e1       	ldi	r24, 0x10	; 16
    135a:	01 c0       	rjmp	.+2      	; 0x135e <Pipe_ConfigurePipe+0x10>
    135c:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    135e:	57 30       	cpi	r21, 0x07	; 7
    1360:	08 f0       	brcs	.+2      	; 0x1364 <Pipe_ConfigurePipe+0x16>
    1362:	59 c0       	rjmp	.+178    	; 0x1416 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    1364:	66 23       	and	r22, r22
    1366:	09 f4       	brne	.+2      	; 0x136a <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    1368:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    136a:	4f 70       	andi	r20, 0x0F	; 15
    136c:	62 95       	swap	r22
    136e:	66 0f       	add	r22, r22
    1370:	66 0f       	add	r22, r22
    1372:	60 7c       	andi	r22, 0xC0	; 192
    1374:	64 2b       	or	r22, r20
    1376:	68 2b       	or	r22, r24
    1378:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    137a:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    137c:	84 2f       	mov	r24, r20
    137e:	8f 70       	andi	r24, 0x0F	; 15
    1380:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1384:	45 17       	cp	r20, r21
    1386:	a1 f4       	brne	.+40     	; 0x13b0 <Pipe_ConfigurePipe+0x62>
    1388:	88 e0       	ldi	r24, 0x08	; 8
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    1390:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1396:	82 17       	cp	r24, r18
    1398:	93 07       	cpc	r25, r19
    139a:	10 f4       	brcc	.+4      	; 0x13a0 <Pipe_ConfigurePipe+0x52>
    139c:	75 30       	cpi	r23, 0x05	; 5
    139e:	c1 f7       	brne	.-16     	; 0x1390 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    13a0:	87 2f       	mov	r24, r23
    13a2:	82 95       	swap	r24
    13a4:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    13a6:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    13a8:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    13aa:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    13ac:	e0 e0       	ldi	r30, 0x00	; 0
    13ae:	08 c0       	rjmp	.+16     	; 0x13c0 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    13b0:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    13b4:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    13b8:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    13bc:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    13c0:	81 ff       	sbrs	r24, 1
    13c2:	20 c0       	rjmp	.+64     	; 0x1404 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    13c4:	90 91 a9 00 	lds	r25, 0x00A9
    13c8:	9e 7f       	andi	r25, 0xFE	; 254
    13ca:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    13ce:	90 91 ab 00 	lds	r25, 0x00AB
    13d2:	9d 7f       	andi	r25, 0xFD	; 253
    13d4:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    13d8:	90 91 a9 00 	lds	r25, 0x00A9
    13dc:	91 60       	ori	r25, 0x01	; 1
    13de:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    13e2:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    13e6:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    13ea:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    13ee:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    13f2:	80 91 a9 00 	lds	r24, 0x00A9
    13f6:	80 62       	ori	r24, 0x20	; 32
    13f8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    13fc:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    1400:	87 ff       	sbrs	r24, 7
    1402:	09 c0       	rjmp	.+18     	; 0x1416 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1404:	4f 5f       	subi	r20, 0xFF	; 255
    1406:	47 30       	cpi	r20, 0x07	; 7
    1408:	09 f0       	breq	.+2      	; 0x140c <Pipe_ConfigurePipe+0xbe>
    140a:	b8 cf       	rjmp	.-144    	; 0x137c <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    140c:	5f 70       	andi	r21, 0x0F	; 15
    140e:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	01 c0       	rjmp	.+2      	; 0x1418 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    1416:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1418:	0f 91       	pop	r16
    141a:	08 95       	ret

0000141c <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
    141c:	ef 92       	push	r14
    141e:	ff 92       	push	r15
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
    142a:	e8 2e       	mov	r14, r24
    142c:	e7 01       	movw	r28, r14
    142e:	7e 01       	movw	r14, r28
    1430:	f9 2e       	mov	r15, r25
    1432:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1434:	ff 24       	eor	r15, r15
    1436:	0d c0       	rjmp	.+26     	; 0x1452 <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
    1438:	88 81       	ld	r24, Y
    143a:	88 23       	and	r24, r24
    143c:	41 f0       	breq	.+16     	; 0x144e <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
    143e:	29 81       	ldd	r18, Y+1	; 0x01
    1440:	3a 81       	ldd	r19, Y+2	; 0x02
    1442:	6c 81       	ldd	r22, Y+4	; 0x04
    1444:	4b 81       	ldd	r20, Y+3	; 0x03
    1446:	0d 81       	ldd	r16, Y+5	; 0x05
    1448:	82 df       	rcall	.-252    	; 0x134e <Pipe_ConfigurePipe>
    144a:	88 23       	and	r24, r24
    144c:	31 f0       	breq	.+12     	; 0x145a <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    144e:	f3 94       	inc	r15
    1450:	26 96       	adiw	r28, 0x06	; 6
    1452:	f1 16       	cp	r15, r17
    1454:	88 f3       	brcs	.-30     	; 0x1438 <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	01 c0       	rjmp	.+2      	; 0x145c <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
    145a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	ff 90       	pop	r15
    1466:	ef 90       	pop	r14
    1468:	08 95       	ret

0000146a <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    146a:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	98 2f       	mov	r25, r24
    1472:	9f 70       	andi	r25, 0x0F	; 15
    1474:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1478:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    147c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1480:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1484:	90 91 a9 00 	lds	r25, 0x00A9
    1488:	9e 7f       	andi	r25, 0xFE	; 254
    148a:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    148e:	8f 5f       	subi	r24, 0xFF	; 255
    1490:	87 30       	cpi	r24, 0x07	; 7
    1492:	71 f7       	brne	.-36     	; 0x1470 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1494:	08 95       	ret

00001496 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1496:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    149a:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    149e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14a0:	29 2f       	mov	r18, r25
    14a2:	2f 70       	andi	r18, 0x0F	; 15
    14a4:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    14a8:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    14ac:	27 ff       	sbrs	r18, 7
    14ae:	0c c0       	rjmp	.+24     	; 0x14c8 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    14b0:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    14b4:	53 2f       	mov	r21, r19
    14b6:	5f 70       	andi	r21, 0x0F	; 15
    14b8:	30 ff       	sbrs	r19, 0
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <Pipe_IsEndpointBound+0x2a>
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <Pipe_IsEndpointBound+0x2c>
    14c0:	20 e8       	ldi	r18, 0x80	; 128
    14c2:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    14c4:	28 17       	cp	r18, r24
    14c6:	49 f0       	breq	.+18     	; 0x14da <Pipe_IsEndpointBound+0x44>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    14c8:	9f 5f       	subi	r25, 0xFF	; 255
    14ca:	97 30       	cpi	r25, 0x07	; 7
    14cc:	49 f7       	brne	.-46     	; 0x14a0 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14ce:	84 2f       	mov	r24, r20
    14d0:	8f 70       	andi	r24, 0x0F	; 15
    14d2:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    14da:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    14dc:	08 95       	ret

000014de <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    14de:	80 91 a2 00 	lds	r24, 0x00A2
    14e2:	90 91 a3 00 	lds	r25, 0x00A3

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    14e6:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    14e8:	20 91 aa 00 	lds	r18, 0x00AA
    14ec:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    14ee:	20 31       	cpi	r18, 0x10	; 16
    14f0:	29 f4       	brne	.+10     	; 0x14fc <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    14f2:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    14f6:	20 ff       	sbrs	r18, 0
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <Pipe_WaitUntilReady+0x26>
    14fa:	18 c0       	rjmp	.+48     	; 0x152c <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    14fc:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1500:	22 fd       	sbrc	r18, 2
    1502:	14 c0       	rjmp	.+40     	; 0x152c <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1504:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1508:	21 fd       	sbrc	r18, 1
    150a:	12 c0       	rjmp	.+36     	; 0x1530 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    150c:	20 91 0e 05 	lds	r18, 0x050E
    1510:	21 30       	cpi	r18, 0x01	; 1
    1512:	81 f0       	breq	.+32     	; 0x1534 <Pipe_WaitUntilReady+0x56>
    1514:	20 91 a2 00 	lds	r18, 0x00A2
    1518:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    151c:	28 17       	cp	r18, r24
    151e:	39 07       	cpc	r19, r25
    1520:	19 f3       	breq	.-58     	; 0x14e8 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1522:	44 23       	and	r20, r20
    1524:	49 f0       	breq	.+18     	; 0x1538 <Pipe_WaitUntilReady+0x5a>
    1526:	41 50       	subi	r20, 0x01	; 1
    1528:	c9 01       	movw	r24, r18
    152a:	de cf       	rjmp	.-68     	; 0x14e8 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    1538:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    153a:	08 95       	ret

0000153c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    153c:	75 d0       	rcall	.+234    	; 0x1628 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    153e:	7c d0       	rcall	.+248    	; 0x1638 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1540:	e0 ee       	ldi	r30, 0xE0	; 224
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	81 60       	ori	r24, 0x01	; 1
    1548:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    154a:	e8 ed       	ldi	r30, 0xD8	; 216
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8f 77       	andi	r24, 0x7F	; 127
    1552:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1554:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1556:	a7 ed       	ldi	r26, 0xD7	; 215
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	8c 91       	ld	r24, X
    155c:	8e 7f       	andi	r24, 0xFE	; 254
    155e:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1560:	80 81       	ld	r24, Z
    1562:	8f 7e       	andi	r24, 0xEF	; 239
    1564:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1566:	10 92 05 05 	sts	0x0505, r1
}
    156a:	08 95       	ret

0000156c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    156c:	5d d0       	rcall	.+186    	; 0x1628 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    156e:	64 d0       	rcall	.+200    	; 0x1638 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1570:	80 91 d8 00 	lds	r24, 0x00D8
    1574:	8f 77       	andi	r24, 0x7F	; 127
    1576:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    157a:	80 91 d8 00 	lds	r24, 0x00D8
    157e:	80 68       	ori	r24, 0x80	; 128
    1580:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1584:	80 91 d8 00 	lds	r24, 0x00D8
    1588:	8f 7d       	andi	r24, 0xDF	; 223
    158a:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    158e:	80 91 d7 00 	lds	r24, 0x00D7
    1592:	8f 77       	andi	r24, 0x7F	; 127
    1594:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1598:	8c e0       	ldi	r24, 0x0C	; 12
    159a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    159c:	8e e0       	ldi	r24, 0x0E	; 14
    159e:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    15a0:	09 b4       	in	r0, 0x29	; 41
    15a2:	00 fe       	sbrs	r0, 0
    15a4:	fd cf       	rjmp	.-6      	; 0x15a0 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	80 93 0e 05 	sts	0x050E, r24
	USB_Host_ConfigurationNumber = 0;
    15ac:	10 92 04 05 	sts	0x0504, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    15b0:	80 e4       	ldi	r24, 0x40	; 64
    15b2:	80 93 27 01 	sts	0x0127, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    15b6:	80 91 d8 00 	lds	r24, 0x00D8
    15ba:	80 64       	ori	r24, 0x40	; 64
    15bc:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    15c0:	80 91 dd 00 	lds	r24, 0x00DD
    15c4:	81 60       	ori	r24, 0x01	; 1
    15c6:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    15ca:	80 91 dd 00 	lds	r24, 0x00DD
    15ce:	84 60       	ori	r24, 0x04	; 4
    15d0:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    15d4:	80 91 d7 00 	lds	r24, 0x00D7
    15d8:	8f 7e       	andi	r24, 0xEF	; 239
    15da:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    15de:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    15e0:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    15e2:	80 91 de 00 	lds	r24, 0x00DE
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    15ec:	80 91 de 00 	lds	r24, 0x00DE
    15f0:	84 60       	ori	r24, 0x04	; 4
    15f2:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    15f6:	80 91 e0 00 	lds	r24, 0x00E0
    15fa:	8e 7f       	andi	r24, 0xFE	; 254
    15fc:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1600:	80 91 d8 00 	lds	r24, 0x00D8
    1604:	80 61       	ori	r24, 0x10	; 16
    1606:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    160a:	08 95       	ret

0000160c <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    160c:	e8 ed       	ldi	r30, 0xD8	; 216
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8f 7e       	andi	r24, 0xEF	; 239
    1614:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1616:	e7 ed       	ldi	r30, 0xD7	; 215
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	81 60       	ori	r24, 0x01	; 1
    161e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	80 93 05 05 	sts	0x0505, r24

	USB_ResetInterface();
}
    1626:	a2 cf       	rjmp	.-188    	; 0x156c <USB_ResetInterface>

00001628 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1628:	e8 ed       	ldi	r30, 0xD8	; 216
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8c 7f       	andi	r24, 0xFC	; 252
    1630:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1632:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1636:	08 95       	ret

00001638 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1638:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    163c:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1640:	08 95       	ret

00001642 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1642:	1f 92       	push	r1
    1644:	0f 92       	push	r0
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	0f 92       	push	r0
    164a:	0b b6       	in	r0, 0x3b	; 59
    164c:	0f 92       	push	r0
    164e:	11 24       	eor	r1, r1
    1650:	2f 93       	push	r18
    1652:	3f 93       	push	r19
    1654:	4f 93       	push	r20
    1656:	5f 93       	push	r21
    1658:	6f 93       	push	r22
    165a:	7f 93       	push	r23
    165c:	8f 93       	push	r24
    165e:	9f 93       	push	r25
    1660:	af 93       	push	r26
    1662:	bf 93       	push	r27
    1664:	ef 93       	push	r30
    1666:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1668:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    166c:	85 ff       	sbrs	r24, 5
    166e:	0a c0       	rjmp	.+20     	; 0x1684 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1670:	80 91 a0 00 	lds	r24, 0x00A0
    1674:	85 ff       	sbrs	r24, 5
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1678:	80 91 9f 00 	lds	r24, 0x009F
    167c:	8f 7d       	andi	r24, 0xDF	; 223
    167e:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1682:	12 d1       	rcall	.+548    	; 0x18a8 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1684:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1688:	81 ff       	sbrs	r24, 1
    168a:	16 c0       	rjmp	.+44     	; 0x16b8 <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    168c:	80 91 a0 00 	lds	r24, 0x00A0
    1690:	81 ff       	sbrs	r24, 1
    1692:	12 c0       	rjmp	.+36     	; 0x16b8 <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1694:	80 91 9f 00 	lds	r24, 0x009F
    1698:	8d 7f       	andi	r24, 0xFD	; 253
    169a:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    169e:	80 91 9f 00 	lds	r24, 0x009F
    16a2:	8e 7f       	andi	r24, 0xFE	; 254
    16a4:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    16a8:	80 91 a0 00 	lds	r24, 0x00A0
    16ac:	8d 7f       	andi	r24, 0xFD	; 253
    16ae:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    16b2:	0e 94 29 02 	call	0x452	; 0x452 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    16b6:	5a df       	rcall	.-332    	; 0x156c <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    16b8:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    16bc:	81 ff       	sbrs	r24, 1
    16be:	17 c0       	rjmp	.+46     	; 0x16ee <__vector_10+0xac>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    16c0:	80 91 de 00 	lds	r24, 0x00DE
    16c4:	81 ff       	sbrs	r24, 1
    16c6:	13 c0       	rjmp	.+38     	; 0x16ee <__vector_10+0xac>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    16c8:	80 91 df 00 	lds	r24, 0x00DF
    16cc:	8d 7f       	andi	r24, 0xFD	; 253
    16ce:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    16d2:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    16d4:	80 91 dd 00 	lds	r24, 0x00DD
    16d8:	81 60       	ori	r24, 0x01	; 1
    16da:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	0e 94 88 02 	call	0x510	; 0x510 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    16e4:	0e 94 29 02 	call	0x452	; 0x452 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	80 93 0e 05 	sts	0x050E, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    16ee:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    16f2:	80 ff       	sbrs	r24, 0
    16f4:	18 c0       	rjmp	.+48     	; 0x1726 <__vector_10+0xe4>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    16f6:	80 91 de 00 	lds	r24, 0x00DE
    16fa:	80 ff       	sbrs	r24, 0
    16fc:	14 c0       	rjmp	.+40     	; 0x1726 <__vector_10+0xe4>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    16fe:	80 91 df 00 	lds	r24, 0x00DF
    1702:	8e 7f       	andi	r24, 0xFE	; 254
    1704:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    1708:	80 91 de 00 	lds	r24, 0x00DE
    170c:	8e 7f       	andi	r24, 0xFE	; 254
    170e:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1712:	0e 94 23 02 	call	0x446	; 0x446 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1716:	80 91 a0 00 	lds	r24, 0x00A0
    171a:	82 60       	ori	r24, 0x02	; 2
    171c:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	80 93 0e 05 	sts	0x050E, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1726:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    172a:	82 ff       	sbrs	r24, 2
    172c:	10 c0       	rjmp	.+32     	; 0x174e <__vector_10+0x10c>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    172e:	80 91 de 00 	lds	r24, 0x00DE
    1732:	82 ff       	sbrs	r24, 2
    1734:	0c c0       	rjmp	.+24     	; 0x174e <__vector_10+0x10c>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1736:	80 91 df 00 	lds	r24, 0x00DF
    173a:	8b 7f       	andi	r24, 0xFB	; 251
    173c:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	0e 94 a9 02 	call	0x552	; 0x552 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1748:	0e 94 29 02 	call	0x452	; 0x452 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    174c:	0f df       	rcall	.-482    	; 0x156c <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    174e:	ff 91       	pop	r31
    1750:	ef 91       	pop	r30
    1752:	bf 91       	pop	r27
    1754:	af 91       	pop	r26
    1756:	9f 91       	pop	r25
    1758:	8f 91       	pop	r24
    175a:	7f 91       	pop	r23
    175c:	6f 91       	pop	r22
    175e:	5f 91       	pop	r21
    1760:	4f 91       	pop	r20
    1762:	3f 91       	pop	r19
    1764:	2f 91       	pop	r18
    1766:	0f 90       	pop	r0
    1768:	0b be       	out	0x3b, r0	; 59
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	0f 90       	pop	r0
    1770:	1f 90       	pop	r1
    1772:	18 95       	reti

00001774 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1774:	cf 92       	push	r12
    1776:	df 92       	push	r13
    1778:	ef 92       	push	r14
    177a:	ff 92       	push	r15
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	29 97       	sbiw	r28, 0x09	; 9
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	6b 01       	movw	r12, r22
    1796:	8a 01       	movw	r16, r20
    1798:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    179a:	90 e8       	ldi	r25, 0x80	; 128
    179c:	90 93 06 05 	sts	0x0506, r25
    17a0:	96 e0       	ldi	r25, 0x06	; 6
    17a2:	90 93 07 05 	sts	0x0507, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    17ac:	90 93 09 05 	sts	0x0509, r25
    17b0:	80 93 08 05 	sts	0x0508, r24
    17b4:	10 92 0b 05 	sts	0x050B, r1
    17b8:	10 92 0a 05 	sts	0x050A, r1
    17bc:	89 e0       	ldi	r24, 0x09	; 9
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	90 93 0d 05 	sts	0x050D, r25
    17c4:	80 93 0c 05 	sts	0x050C, r24
    17c8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    17cc:	ce 01       	movw	r24, r28
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	95 d0       	rcall	.+298    	; 0x18fc <USB_Host_SendControlRequest>
    17d2:	88 23       	and	r24, r24
    17d4:	b9 f4       	brne	.+46     	; 0x1804 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	f6 01       	movw	r30, r12
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    17e0:	e8 16       	cp	r14, r24
    17e2:	f9 06       	cpc	r15, r25
    17e4:	70 f0       	brcs	.+28     	; 0x1802 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    17e6:	90 93 0d 05 	sts	0x050D, r25
    17ea:	80 93 0c 05 	sts	0x050C, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    17ee:	c8 01       	movw	r24, r16
    17f0:	85 d0       	rcall	.+266    	; 0x18fc <USB_Host_SendControlRequest>
    17f2:	88 23       	and	r24, r24
    17f4:	39 f4       	brne	.+14     	; 0x1804 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    17f6:	f8 01       	movw	r30, r16
    17f8:	91 81       	ldd	r25, Z+1	; 0x01
    17fa:	92 30       	cpi	r25, 0x02	; 2
    17fc:	19 f0       	breq	.+6      	; 0x1804 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    17fe:	86 e0       	ldi	r24, 0x06	; 6
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1802:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1804:	29 96       	adiw	r28, 0x09	; 9
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	df 90       	pop	r13
    181e:	cf 90       	pop	r12
    1820:	08 95       	ret

00001822 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1822:	af 92       	push	r10
    1824:	bf 92       	push	r11
    1826:	cf 92       	push	r12
    1828:	df 92       	push	r13
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	8c 01       	movw	r16, r24
    1838:	eb 01       	movw	r28, r22
    183a:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    183c:	23 c0       	rjmp	.+70     	; 0x1884 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    183e:	e8 81       	ld	r30, Y
    1840:	f9 81       	ldd	r31, Y+1	; 0x01
    1842:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1844:	20 81       	ld	r18, Z
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	c7 01       	movw	r24, r14
    184a:	2e 15       	cp	r18, r14
    184c:	3f 05       	cpc	r19, r15
    184e:	08 f4       	brcc	.+2      	; 0x1852 <USB_GetNextDescriptorComp+0x30>
    1850:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1852:	e8 0f       	add	r30, r24
    1854:	f9 1f       	adc	r31, r25
    1856:	f9 83       	std	Y+1, r31	; 0x01
    1858:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    185a:	f8 01       	movw	r30, r16
    185c:	20 81       	ld	r18, Z
    185e:	31 81       	ldd	r19, Z+1	; 0x01
    1860:	28 1b       	sub	r18, r24
    1862:	39 0b       	sbc	r19, r25
    1864:	31 83       	std	Z+1, r19	; 0x01
    1866:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1868:	88 81       	ld	r24, Y
    186a:	99 81       	ldd	r25, Y+1	; 0x01
    186c:	f6 01       	movw	r30, r12
    186e:	09 95       	icall
    1870:	82 30       	cpi	r24, 0x02	; 2
    1872:	41 f0       	breq	.+16     	; 0x1884 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	69 f4       	brne	.+26     	; 0x1892 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    1878:	a8 82       	st	Y, r10
    187a:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    187c:	f8 01       	movw	r30, r16
    187e:	f1 82       	std	Z+1, r15	; 0x01
    1880:	e0 82       	st	Z, r14
    1882:	07 c0       	rjmp	.+14     	; 0x1892 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1884:	f8 01       	movw	r30, r16
    1886:	e0 80       	ld	r14, Z
    1888:	f1 80       	ldd	r15, Z+1	; 0x01
    188a:	e1 14       	cp	r14, r1
    188c:	f1 04       	cpc	r15, r1
    188e:	b9 f6       	brne	.-82     	; 0x183e <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1890:	82 e0       	ldi	r24, 0x02	; 2
}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	bf 90       	pop	r11
    18a4:	af 90       	pop	r10
    18a6:	08 95       	ret

000018a8 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    18a8:	08 95       	ret

000018aa <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    18b2:	c8 ee       	ldi	r28, 0xE8	; 232
    18b4:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    18b6:	07 c0       	rjmp	.+14     	; 0x18c6 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	68 db       	rcall	.-2352   	; 0xf8c <USB_Host_WaitMS>
    18bc:	88 23       	and	r24, r24
    18be:	d1 f4       	brne	.+52     	; 0x18f4 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    18c0:	20 97       	sbiw	r28, 0x00	; 0
    18c2:	b9 f0       	breq	.+46     	; 0x18f2 <USB_Host_WaitForIOS+0x48>
    18c4:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    18c6:	11 23       	and	r17, r17
    18c8:	29 f4       	brne	.+10     	; 0x18d4 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    18ca:	80 91 a6 00 	lds	r24, 0x00A6
    18ce:	83 ff       	sbrs	r24, 3
    18d0:	f3 cf       	rjmp	.-26     	; 0x18b8 <USB_Host_WaitForIOS+0xe>
    18d2:	0d c0       	rjmp	.+26     	; 0x18ee <USB_Host_WaitForIOS+0x44>
    18d4:	11 30       	cpi	r17, 0x01	; 1
    18d6:	29 f4       	brne	.+10     	; 0x18e2 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    18d8:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    18dc:	80 ff       	sbrs	r24, 0
    18de:	ec cf       	rjmp	.-40     	; 0x18b8 <USB_Host_WaitForIOS+0xe>
    18e0:	06 c0       	rjmp	.+12     	; 0x18ee <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    18e2:	12 30       	cpi	r17, 0x02	; 2
    18e4:	49 f7       	brne	.-46     	; 0x18b8 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    18e6:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    18ea:	82 ff       	sbrs	r24, 2
    18ec:	e5 cf       	rjmp	.-54     	; 0x18b8 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    18f2:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	08 95       	ret

000018fc <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    18fc:	ef 92       	push	r14
    18fe:	ff 92       	push	r15
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    190a:	e0 90 9e 00 	lds	r14, 0x009E
    190e:	ff 24       	eor	r15, r15
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	e8 22       	and	r14, r24
    1914:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1916:	c0 91 0c 05 	lds	r28, 0x050C
    191a:	d0 91 0d 05 	lds	r29, 0x050D
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    191e:	80 91 9e 00 	lds	r24, 0x009E
    1922:	81 60       	ori	r24, 0x01	; 1
    1924:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	30 db       	rcall	.-2464   	; 0xf8c <USB_Host_WaitMS>
    192c:	88 23       	and	r24, r24
    192e:	09 f0       	breq	.+2      	; 0x1932 <USB_Host_SendControlRequest+0x36>
    1930:	cb c0       	rjmp	.+406    	; 0x1ac8 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1932:	80 91 aa 00 	lds	r24, 0x00AA
    1936:	8f 7c       	andi	r24, 0xCF	; 207
    1938:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    193c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1940:	80 91 a6 00 	lds	r24, 0x00A6
    1944:	8f 7e       	andi	r24, 0xEF	; 239
    1946:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    194a:	80 91 a9 00 	lds	r24, 0x00A9
    194e:	8f 7b       	andi	r24, 0xBF	; 191
    1950:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1954:	e6 e0       	ldi	r30, 0x06	; 6
    1956:	f5 e0       	ldi	r31, 0x05	; 5

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1958:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    195a:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    195e:	85 e0       	ldi	r24, 0x05	; 5
    1960:	ee 30       	cpi	r30, 0x0E	; 14
    1962:	f8 07       	cpc	r31, r24
    1964:	c9 f7       	brne	.-14     	; 0x1958 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1966:	80 91 a6 00 	lds	r24, 0x00A6
    196a:	87 77       	andi	r24, 0x77	; 119
    196c:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	9b df       	rcall	.-202    	; 0x18aa <USB_Host_WaitForIOS>
    1974:	88 23       	and	r24, r24
    1976:	09 f0       	breq	.+2      	; 0x197a <USB_Host_SendControlRequest+0x7e>
    1978:	a7 c0       	rjmp	.+334    	; 0x1ac8 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    197a:	80 91 a9 00 	lds	r24, 0x00A9
    197e:	80 64       	ori	r24, 0x40	; 64
    1980:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	02 db       	rcall	.-2556   	; 0xf8c <USB_Host_WaitMS>
    1988:	88 23       	and	r24, r24
    198a:	09 f0       	breq	.+2      	; 0x198e <USB_Host_SendControlRequest+0x92>
    198c:	9d c0       	rjmp	.+314    	; 0x1ac8 <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    198e:	80 91 06 05 	lds	r24, 0x0506
    1992:	87 ff       	sbrs	r24, 7
    1994:	4f c0       	rjmp	.+158    	; 0x1a34 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1996:	80 91 aa 00 	lds	r24, 0x00AA
    199a:	8f 7c       	andi	r24, 0xCF	; 207
    199c:	80 61       	ori	r24, 0x10	; 16
    199e:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    19a2:	01 15       	cp	r16, r1
    19a4:	11 05       	cpc	r17, r1
    19a6:	61 f5       	brne	.+88     	; 0x1a00 <USB_Host_SendControlRequest+0x104>
    19a8:	2d c0       	rjmp	.+90     	; 0x1a04 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19aa:	80 91 a9 00 	lds	r24, 0x00A9
    19ae:	8f 7b       	andi	r24, 0xBF	; 191
    19b0:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	79 df       	rcall	.-270    	; 0x18aa <USB_Host_WaitForIOS>
    19b8:	88 23       	and	r24, r24
    19ba:	09 f0       	breq	.+2      	; 0x19be <USB_Host_SendControlRequest+0xc2>
    19bc:	85 c0       	rjmp	.+266    	; 0x1ac8 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    19be:	80 91 f6 00 	lds	r24, 0x00F6
    19c2:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	49 f4       	brne	.+18     	; 0x19dc <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    19ca:	c0 e0       	ldi	r28, 0x00	; 0
    19cc:	d0 e0       	ldi	r29, 0x00	; 0
    19ce:	06 c0       	rjmp	.+12     	; 0x19dc <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    19d0:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    19d4:	f8 01       	movw	r30, r16
    19d6:	81 93       	st	Z+, r24
    19d8:	8f 01       	movw	r16, r30
					DataLen--;
    19da:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    19dc:	80 91 f6 00 	lds	r24, 0x00F6
    19e0:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	11 f0       	breq	.+4      	; 0x19ec <USB_Host_SendControlRequest+0xf0>
    19e8:	20 97       	sbiw	r28, 0x00	; 0
    19ea:	91 f7       	brne	.-28     	; 0x19d0 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19ec:	80 91 a9 00 	lds	r24, 0x00A9
    19f0:	80 64       	ori	r24, 0x40	; 64
    19f2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19f6:	80 91 a6 00 	lds	r24, 0x00A6
    19fa:	8e 77       	andi	r24, 0x7E	; 126
    19fc:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1a00:	20 97       	sbiw	r28, 0x00	; 0
    1a02:	99 f6       	brne	.-90     	; 0x19aa <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a04:	80 91 aa 00 	lds	r24, 0x00AA
    1a08:	8f 7c       	andi	r24, 0xCF	; 207
    1a0a:	80 62       	ori	r24, 0x20	; 32
    1a0c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a10:	80 91 a9 00 	lds	r24, 0x00A9
    1a14:	8f 7b       	andi	r24, 0xBF	; 191
    1a16:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	46 df       	rcall	.-372    	; 0x18aa <USB_Host_WaitForIOS>
    1a1e:	88 23       	and	r24, r24
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <USB_Host_SendControlRequest+0x128>
    1a22:	52 c0       	rjmp	.+164    	; 0x1ac8 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a24:	80 91 a6 00 	lds	r24, 0x00A6
    1a28:	8b 77       	andi	r24, 0x7B	; 123
    1a2a:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	3c df       	rcall	.-392    	; 0x18aa <USB_Host_WaitForIOS>
    1a32:	4a c0       	rjmp	.+148    	; 0x1ac8 <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1a34:	01 15       	cp	r16, r1
    1a36:	11 05       	cpc	r17, r1
    1a38:	99 f1       	breq	.+102    	; 0x1aa0 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a3a:	80 91 aa 00 	lds	r24, 0x00AA
    1a3e:	8f 7c       	andi	r24, 0xCF	; 207
    1a40:	80 62       	ori	r24, 0x20	; 32
    1a42:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a46:	80 91 a9 00 	lds	r24, 0x00A9
    1a4a:	8f 7b       	andi	r24, 0xBF	; 191
    1a4c:	80 93 a9 00 	sts	0x00A9, r24
    1a50:	1c c0       	rjmp	.+56     	; 0x1a8a <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a52:	82 e0       	ldi	r24, 0x02	; 2
    1a54:	2a df       	rcall	.-428    	; 0x18aa <USB_Host_WaitForIOS>
    1a56:	88 23       	and	r24, r24
    1a58:	b9 f5       	brne	.+110    	; 0x1ac8 <USB_Host_SendControlRequest+0x1cc>
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	06 c0       	rjmp	.+12     	; 0x1a6a <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1a5e:	81 91       	ld	r24, Z+
    1a60:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1a62:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1a66:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1a68:	59 f0       	breq	.+22     	; 0x1a80 <USB_Host_SendControlRequest+0x184>
    1a6a:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1a6c:	20 91 f6 00 	lds	r18, 0x00F6
    1a70:	30 91 f7 00 	lds	r19, 0x00F7
    1a74:	80 91 27 01 	lds	r24, 0x0127
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	28 17       	cp	r18, r24
    1a7c:	39 07       	cpc	r19, r25
    1a7e:	78 f3       	brcs	.-34     	; 0x1a5e <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a80:	80 91 a6 00 	lds	r24, 0x00A6
    1a84:	8b 77       	andi	r24, 0x7B	; 123
    1a86:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1a8a:	20 97       	sbiw	r28, 0x00	; 0
    1a8c:	11 f7       	brne	.-60     	; 0x1a52 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
    1a90:	0c df       	rcall	.-488    	; 0x18aa <USB_Host_WaitForIOS>
    1a92:	88 23       	and	r24, r24
    1a94:	c9 f4       	brne	.+50     	; 0x1ac8 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a96:	80 91 a9 00 	lds	r24, 0x00A9
    1a9a:	80 64       	ori	r24, 0x40	; 64
    1a9c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1aa0:	80 91 aa 00 	lds	r24, 0x00AA
    1aa4:	8f 7c       	andi	r24, 0xCF	; 207
    1aa6:	80 61       	ori	r24, 0x10	; 16
    1aa8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1aac:	80 91 a9 00 	lds	r24, 0x00A9
    1ab0:	8f 7b       	andi	r24, 0xBF	; 191
    1ab2:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	f8 de       	rcall	.-528    	; 0x18aa <USB_Host_WaitForIOS>
    1aba:	88 23       	and	r24, r24
    1abc:	29 f4       	brne	.+10     	; 0x1ac8 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1abe:	90 91 a6 00 	lds	r25, 0x00A6
    1ac2:	9e 77       	andi	r25, 0x7E	; 126
    1ac4:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1ac8:	90 91 a9 00 	lds	r25, 0x00A9
    1acc:	90 64       	ori	r25, 0x40	; 64
    1ace:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1ad2:	e1 14       	cp	r14, r1
    1ad4:	f1 04       	cpc	r15, r1
    1ad6:	29 f4       	brne	.+10     	; 0x1ae2 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1ad8:	90 91 9e 00 	lds	r25, 0x009E
    1adc:	9e 7f       	andi	r25, 0xFE	; 254
    1ade:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1ae2:	91 e0       	ldi	r25, 0x01	; 1
    1ae4:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1ae8:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	08 95       	ret

00001afa <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1afa:	1f 93       	push	r17
    1afc:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1afe:	10 92 06 05 	sts	0x0506, r1
    1b02:	89 e0       	ldi	r24, 0x09	; 9
    1b04:	80 93 07 05 	sts	0x0507, r24
    1b08:	10 93 08 05 	sts	0x0508, r17
    1b0c:	10 92 09 05 	sts	0x0509, r1
    1b10:	10 92 0b 05 	sts	0x050B, r1
    1b14:	10 92 0a 05 	sts	0x050A, r1
    1b18:	10 92 0d 05 	sts	0x050D, r1
    1b1c:	10 92 0c 05 	sts	0x050C, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1b20:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	e9 de       	rcall	.-558    	; 0x18fc <USB_Host_SendControlRequest>
    1b2a:	88 23       	and	r24, r24
    1b2c:	49 f4       	brne	.+18     	; 0x1b40 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1b2e:	10 93 04 05 	sts	0x0504, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1b32:	11 23       	and	r17, r17
    1b34:	11 f0       	breq	.+4      	; 0x1b3a <USB_Host_SetDeviceConfiguration+0x40>
    1b36:	9b e0       	ldi	r25, 0x0B	; 11
    1b38:	01 c0       	rjmp	.+2      	; 0x1b3c <USB_Host_SetDeviceConfiguration+0x42>
    1b3a:	9a e0       	ldi	r25, 0x0A	; 10
    1b3c:	90 93 0e 05 	sts	0x050E, r25
	}

	return ErrorCode;
}
    1b40:	1f 91       	pop	r17
    1b42:	08 95       	ret

00001b44 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1b44:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1b46:	10 91 a7 00 	lds	r17, 0x00A7
    1b4a:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1b4c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1b50:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1b54:	70 da       	rcall	.-2848   	; 0x1036 <USB_Host_ProcessNextHostState>
    1b56:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1b5a:	1f 91       	pop	r17
    1b5c:	08 95       	ret

00001b5e <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1b5e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1b60:	81 81       	ldd	r24, Z+1	; 0x01
    1b62:	84 30       	cpi	r24, 0x04	; 4
    1b64:	19 f4       	brne	.+6      	; 0x1b6c <DCOMP_HID_Host_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1b66:	85 81       	ldd	r24, Z+5	; 0x05
    1b68:	83 30       	cpi	r24, 0x03	; 3
    1b6a:	11 f0       	breq	.+4      	; 0x1b70 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	08 95       	ret
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
		  return DESCRIPTOR_SEARCH_Found;
    1b70:	80 e0       	ldi	r24, 0x00	; 0
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1b72:	08 95       	ret

00001b74 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1b74:	fc 01       	movw	r30, r24
    1b76:	81 81       	ldd	r24, Z+1	; 0x01
    1b78:	81 32       	cpi	r24, 0x21	; 33
    1b7a:	21 f0       	breq	.+8      	; 0x1b84 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1b7c:	84 30       	cpi	r24, 0x04	; 4
    1b7e:	21 f4       	brne	.+8      	; 0x1b88 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    1b88:	82 e0       	ldi	r24, 0x02	; 2
}
    1b8a:	08 95       	ret

00001b8c <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    1b8c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1b8e:	81 81       	ldd	r24, Z+1	; 0x01
    1b90:	85 30       	cpi	r24, 0x05	; 5
    1b92:	29 f4       	brne	.+10     	; 0x1b9e <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1b94:	82 81       	ldd	r24, Z+2	; 0x02
    1b96:	7f dc       	rcall	.-1794   	; 0x1496 <Pipe_IsEndpointBound>
    1b98:	88 23       	and	r24, r24
    1b9a:	19 f4       	brne	.+6      	; 0x1ba2 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x16>
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1b9e:	84 30       	cpi	r24, 0x04	; 4
    1ba0:	21 f0       	breq	.+8      	; 0x1baa <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1bac:	08 95       	ret

00001bae <HID_Host_ConfigurePipes>:
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1bae:	4f 92       	push	r4
    1bb0:	5f 92       	push	r5
    1bb2:	6f 92       	push	r6
    1bb4:	7f 92       	push	r7
    1bb6:	8f 92       	push	r8
    1bb8:	9f 92       	push	r9
    1bba:	af 92       	push	r10
    1bbc:	bf 92       	push	r11
    1bbe:	cf 92       	push	r12
    1bc0:	df 92       	push	r13
    1bc2:	ef 92       	push	r14
    1bc4:	ff 92       	push	r15
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <HID_Host_ConfigurePipes+0x22>
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <HID_Host_ConfigurePipes+0x24>
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	8c 01       	movw	r16, r24
    1bd8:	7a 83       	std	Y+2, r23	; 0x02
    1bda:	69 83       	std	Y+1, r22	; 0x01
    1bdc:	5c 83       	std	Y+4, r21	; 0x04
    1bde:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1be0:	0f 96       	adiw	r24, 0x0f	; 15
    1be2:	fc 01       	movw	r30, r24
    1be4:	88 e0       	ldi	r24, 0x08	; 8
    1be6:	df 01       	movw	r26, r30
    1be8:	1d 92       	st	X+, r1
    1bea:	8a 95       	dec	r24
    1bec:	e9 f7       	brne	.-6      	; 0x1be8 <HID_Host_ConfigurePipes+0x3a>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1bee:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf0:	fc 81       	ldd	r31, Y+4	; 0x04
    1bf2:	81 81       	ldd	r24, Z+1	; 0x01
    1bf4:	82 30       	cpi	r24, 0x02	; 2
    1bf6:	09 f0       	breq	.+2      	; 0x1bfa <HID_Host_ConfigurePipes+0x4c>
    1bf8:	95 c0       	rjmp	.+298    	; 0x1d24 <HID_Host_ConfigurePipes+0x176>
    1bfa:	44 24       	eor	r4, r4
    1bfc:	55 24       	eor	r5, r5
    1bfe:	aa 24       	eor	r10, r10
    1c00:	bb 24       	eor	r11, r11
    1c02:	ee 24       	eor	r14, r14
    1c04:	ff 24       	eor	r15, r15
    1c06:	cc 24       	eor	r12, r12
    1c08:	dd 24       	eor	r13, r13
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1c0a:	93 e0       	ldi	r25, 0x03	; 3
    1c0c:	69 2e       	mov	r6, r25
    1c0e:	71 2c       	mov	r7, r1
    1c10:	6c 0e       	add	r6, r28
    1c12:	7d 1e       	adc	r7, r29
    1c14:	4e 01       	movw	r8, r28
    1c16:	08 94       	sec
    1c18:	81 1c       	adc	r8, r1
    1c1a:	91 1c       	adc	r9, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1c1c:	a1 14       	cp	r10, r1
    1c1e:	b1 04       	cpc	r11, r1
    1c20:	39 f0       	breq	.+14     	; 0x1c30 <HID_Host_ConfigurePipes+0x82>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1c22:	c4 01       	movw	r24, r8
    1c24:	b3 01       	movw	r22, r6
    1c26:	46 ec       	ldi	r20, 0xC6	; 198
    1c28:	5d e0       	ldi	r21, 0x0D	; 13
    1c2a:	fb dd       	rcall	.-1034   	; 0x1822 <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1c2c:	88 23       	and	r24, r24
    1c2e:	21 f1       	breq	.+72     	; 0x1c78 <HID_Host_ConfigurePipes+0xca>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1c30:	c1 14       	cp	r12, r1
    1c32:	d1 04       	cpc	r13, r1
    1c34:	79 f5       	brne	.+94     	; 0x1c94 <HID_Host_ConfigurePipes+0xe6>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1c36:	c4 01       	movw	r24, r8
    1c38:	b3 01       	movw	r22, r6
    1c3a:	4f ea       	ldi	r20, 0xAF	; 175
    1c3c:	5d e0       	ldi	r21, 0x0D	; 13
    1c3e:	f1 dd       	rcall	.-1054   	; 0x1822 <USB_GetNextDescriptorComp>
    1c40:	88 23       	and	r24, r24
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <HID_Host_ConfigurePipes+0x98>
    1c44:	71 c0       	rjmp	.+226    	; 0x1d28 <HID_Host_ConfigurePipes+0x17a>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1c46:	ab 80       	ldd	r10, Y+3	; 0x03
    1c48:	bc 80       	ldd	r11, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	84 85       	ldd	r24, Z+12	; 0x0c
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1c4e:	88 23       	and	r24, r24
    1c50:	31 f0       	breq	.+12     	; 0x1c5e <HID_Host_ConfigurePipes+0xb0>
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1c52:	d5 01       	movw	r26, r10
    1c54:	17 96       	adiw	r26, 0x07	; 7
    1c56:	9c 91       	ld	r25, X
    1c58:	17 97       	sbiw	r26, 0x07	; 7
    1c5a:	98 17       	cp	r25, r24
    1c5c:	61 f7       	brne	.-40     	; 0x1c36 <HID_Host_ConfigurePipes+0x88>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1c5e:	c4 01       	movw	r24, r8
    1c60:	b3 01       	movw	r22, r6
    1c62:	4a eb       	ldi	r20, 0xBA	; 186
    1c64:	5d e0       	ldi	r21, 0x0D	; 13
    1c66:	dd dd       	rcall	.-1094   	; 0x1822 <USB_GetNextDescriptorComp>
    1c68:	88 23       	and	r24, r24
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <HID_Host_ConfigurePipes+0xc0>
    1c6c:	5d c0       	rjmp	.+186    	; 0x1d28 <HID_Host_ConfigurePipes+0x17a>
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1c6e:	4b 80       	ldd	r4, Y+3	; 0x03
    1c70:	5c 80       	ldd	r5, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1c72:	ee 24       	eor	r14, r14
    1c74:	ff 24       	eor	r15, r15
    1c76:	d2 cf       	rjmp	.-92     	; 0x1c1c <HID_Host_ConfigurePipes+0x6e>

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1c78:	eb 81       	ldd	r30, Y+3	; 0x03
    1c7a:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	87 ff       	sbrs	r24, 7
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <HID_Host_ConfigurePipes+0xd8>
		  DataINEndpoint  = EndpointData;
    1c82:	6f 01       	movw	r12, r30
    1c84:	01 c0       	rjmp	.+2      	; 0x1c88 <HID_Host_ConfigurePipes+0xda>
		else
		  DataOUTEndpoint = EndpointData;
    1c86:	7f 01       	movw	r14, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1c88:	c1 14       	cp	r12, r1
    1c8a:	d1 04       	cpc	r13, r1
    1c8c:	39 f2       	breq	.-114    	; 0x1c1c <HID_Host_ConfigurePipes+0x6e>
    1c8e:	e1 14       	cp	r14, r1
    1c90:	f1 04       	cpc	r15, r1
    1c92:	21 f2       	breq	.-120    	; 0x1c1c <HID_Host_ConfigurePipes+0x6e>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1c94:	f6 01       	movw	r30, r12
    1c96:	84 81       	ldd	r24, Z+4	; 0x04
    1c98:	95 81       	ldd	r25, Z+5	; 0x05
    1c9a:	d8 01       	movw	r26, r16
    1c9c:	12 96       	adiw	r26, 0x02	; 2
    1c9e:	9c 93       	st	X, r25
    1ca0:	8e 93       	st	-X, r24
    1ca2:	11 97       	sbiw	r26, 0x01	; 1
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	13 96       	adiw	r26, 0x03	; 3
    1ca8:	8c 93       	st	X, r24
    1caa:	13 97       	sbiw	r26, 0x03	; 3
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	c8 2e       	mov	r12, r24
    1cb0:	14 96       	adiw	r26, 0x04	; 4
    1cb2:	cc 92       	st	X, r12

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	b1 db       	rcall	.-2206   	; 0x141c <Pipe_ConfigurePipeTable>
    1cba:	88 23       	and	r24, r24
    1cbc:	b9 f1       	breq	.+110    	; 0x1d2c <HID_Host_ConfigurePipes+0x17e>
	  return false;

	if (DataOUTEndpoint)
    1cbe:	e1 14       	cp	r14, r1
    1cc0:	f1 04       	cpc	r15, r1
    1cc2:	a1 f0       	breq	.+40     	; 0x1cec <HID_Host_ConfigurePipes+0x13e>
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1cc4:	f7 01       	movw	r30, r14
    1cc6:	84 81       	ldd	r24, Z+4	; 0x04
    1cc8:	95 81       	ldd	r25, Z+5	; 0x05
    1cca:	d8 01       	movw	r26, r16
    1ccc:	18 96       	adiw	r26, 0x08	; 8
    1cce:	9c 93       	st	X, r25
    1cd0:	8e 93       	st	-X, r24
    1cd2:	17 97       	sbiw	r26, 0x07	; 7
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	19 96       	adiw	r26, 0x09	; 9
    1cd8:	8c 93       	st	X, r24
    1cda:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    1cdc:	1a 96       	adiw	r26, 0x0a	; 10
    1cde:	cc 92       	st	X, r12

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    1ce0:	c8 01       	movw	r24, r16
    1ce2:	06 96       	adiw	r24, 0x06	; 6
    1ce4:	61 e0       	ldi	r22, 0x01	; 1
    1ce6:	9a db       	rcall	.-2252   	; 0x141c <Pipe_ConfigurePipeTable>
    1ce8:	88 23       	and	r24, r24
    1cea:	01 f1       	breq	.+64     	; 0x1d2c <HID_Host_ConfigurePipes+0x17e>
		  return false;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1cec:	f5 01       	movw	r30, r10
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	d8 01       	movw	r26, r16
    1cf2:	50 96       	adiw	r26, 0x10	; 16
    1cf4:	8c 93       	st	X, r24
    1cf6:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1cf8:	f2 01       	movw	r30, r4
    1cfa:	87 81       	ldd	r24, Z+7	; 0x07
    1cfc:	90 85       	ldd	r25, Z+8	; 0x08
    1cfe:	55 96       	adiw	r26, 0x15	; 21
    1d00:	9c 93       	st	X, r25
    1d02:	8e 93       	st	-X, r24
    1d04:	54 97       	sbiw	r26, 0x14	; 20
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	d5 01       	movw	r26, r10
    1d0a:	16 96       	adiw	r26, 0x06	; 6
    1d0c:	9c 91       	ld	r25, X
    1d0e:	16 97       	sbiw	r26, 0x06	; 6
    1d10:	99 23       	and	r25, r25
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <HID_Host_ConfigurePipes+0x168>
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	f8 01       	movw	r30, r16
    1d18:	81 8b       	std	Z+17, r24	; 0x11
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1d1a:	88 e0       	ldi	r24, 0x08	; 8
    1d1c:	86 8b       	std	Z+22, r24	; 0x16
	HIDInterfaceInfo->State.IsActive             = true;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	87 87       	std	Z+15, r24	; 0x0f
    1d22:	04 c0       	rjmp	.+8      	; 0x1d2c <HID_Host_ConfigurePipes+0x17e>
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	03 c0       	rjmp	.+6      	; 0x1d2e <HID_Host_ConfigurePipes+0x180>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <HID_Host_ConfigurePipes+0x180>
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return false;
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ff 90       	pop	r15
    1d40:	ef 90       	pop	r14
    1d42:	df 90       	pop	r13
    1d44:	cf 90       	pop	r12
    1d46:	bf 90       	pop	r11
    1d48:	af 90       	pop	r10
    1d4a:	9f 90       	pop	r9
    1d4c:	8f 90       	pop	r8
    1d4e:	7f 90       	pop	r7
    1d50:	6f 90       	pop	r6
    1d52:	5f 90       	pop	r5
    1d54:	4f 90       	pop	r4
    1d56:	08 95       	ret

00001d58 <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    1d58:	ef 92       	push	r14
    1d5a:	ff 92       	push	r15
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1d62:	80 91 0e 05 	lds	r24, 0x050E
    1d66:	8b 30       	cpi	r24, 0x0B	; 11
    1d68:	d9 f5       	brne	.+118    	; 0x1de0 <HID_Host_ReceiveReport+0x88>
    1d6a:	87 85       	ldd	r24, Z+15	; 0x0f
    1d6c:	88 23       	and	r24, r24
    1d6e:	c1 f1       	breq	.+112    	; 0x1de0 <HID_Host_ReceiveReport+0x88>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d70:	80 81       	ld	r24, Z
    1d72:	8f 70       	andi	r24, 0x0F	; 15
    1d74:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d78:	80 91 a9 00 	lds	r24, 0x00A9
    1d7c:	8f 7b       	andi	r24, 0xBF	; 191
    1d7e:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1d82:	e6 2e       	mov	r14, r22
    1d84:	e7 01       	movw	r28, r14
    1d86:	7e 01       	movw	r14, r28
    1d88:	f7 2e       	mov	r15, r23
    1d8a:	e7 01       	movw	r28, r14

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1d8c:	83 89       	ldd	r24, Z+19	; 0x13
    1d8e:	88 23       	and	r24, r24
    1d90:	91 f4       	brne	.+36     	; 0x1db6 <HID_Host_ReceiveReport+0x5e>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1d92:	a5 85       	ldd	r26, Z+13	; 0x0d
    1d94:	b6 85       	ldd	r27, Z+14	; 0x0e
    1d96:	a8 52       	subi	r26, 0x28	; 40
    1d98:	bc 4f       	sbci	r27, 0xFC	; 252
    1d9a:	8c 91       	ld	r24, X
    1d9c:	88 23       	and	r24, r24
    1d9e:	21 f0       	breq	.+8      	; 0x1da8 <HID_Host_ReceiveReport+0x50>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1da0:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    1da4:	69 93       	st	Y+, r22
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <HID_Host_ReceiveReport+0x52>
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    1da8:	60 e0       	ldi	r22, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    1daa:	85 85       	ldd	r24, Z+13	; 0x0d
    1dac:	96 85       	ldd	r25, Z+14	; 0x0e
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	6b d8       	rcall	.-3882   	; 0xe88 <USB_GetHIDReportSize>
    1db2:	bc 01       	movw	r22, r24
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <HID_Host_ReceiveReport+0x66>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1db6:	60 91 f6 00 	lds	r22, 0x00F6
    1dba:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	50 e0       	ldi	r21, 0x00	; 0
    1dc4:	61 da       	rcall	.-2878   	; 0x1288 <Pipe_Read_Stream_LE>
    1dc6:	88 23       	and	r24, r24
    1dc8:	61 f4       	brne	.+24     	; 0x1de2 <HID_Host_ReceiveReport+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1dca:	90 91 a6 00 	lds	r25, 0x00A6
    1dce:	9e 77       	andi	r25, 0x7E	; 126
    1dd0:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1dd4:	90 91 a9 00 	lds	r25, 0x00A9
    1dd8:	90 64       	ori	r25, 0x40	; 64
    1dda:	90 93 a9 00 	sts	0x00A9, r25
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <HID_Host_ReceiveReport+0x8a>

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1de0:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	ff 90       	pop	r15
    1de8:	ef 90       	pop	r14
    1dea:	08 95       	ret

00001dec <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1dec:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1dee:	80 91 0e 05 	lds	r24, 0x050E
    1df2:	8b 30       	cpi	r24, 0x0B	; 11
    1df4:	a9 f4       	brne	.+42     	; 0x1e20 <HID_Host_IsReportReceived+0x34>
    1df6:	87 85       	ldd	r24, Z+15	; 0x0f
    1df8:	88 23       	and	r24, r24
    1dfa:	a1 f0       	breq	.+40     	; 0x1e24 <HID_Host_IsReportReceived+0x38>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1dfc:	80 81       	ld	r24, Z
    1dfe:	8f 70       	andi	r24, 0x0F	; 15
    1e00:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1e04:	80 91 a9 00 	lds	r24, 0x00A9
    1e08:	8f 7b       	andi	r24, 0xBF	; 191
    1e0a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1e0e:	80 91 a6 00 	lds	r24, 0x00A6
    1e12:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1e14:	90 91 a9 00 	lds	r25, 0x00A9
    1e18:	90 64       	ori	r25, 0x40	; 64
    1e1a:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1e1e:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	08 95       	ret
    1e24:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    1e26:	08 95       	ret

00001e28 <HID_Host_SetReportProtocol>:
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1e28:	af 92       	push	r10
    1e2a:	bf 92       	push	r11
    1e2c:	cf 92       	push	r12
    1e2e:	df 92       	push	r13
    1e30:	ef 92       	push	r14
    1e32:	ff 92       	push	r15
    1e34:	0f 93       	push	r16
    1e36:	1f 93       	push	r17
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1e42:	cd b6       	in	r12, 0x3d	; 61
    1e44:	de b6       	in	r13, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1e46:	dc 01       	movw	r26, r24
    1e48:	54 96       	adiw	r26, 0x14	; 20
    1e4a:	4d 91       	ld	r20, X+
    1e4c:	5c 91       	ld	r21, X
    1e4e:	55 97       	sbiw	r26, 0x15	; 21
    1e50:	ed b7       	in	r30, 0x3d	; 61
    1e52:	fe b7       	in	r31, 0x3e	; 62
    1e54:	e4 1b       	sub	r30, r20
    1e56:	f5 0b       	sbc	r31, r21
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	fe bf       	out	0x3e, r31	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	ed bf       	out	0x3d, r30	; 61
    1e62:	2d b7       	in	r18, 0x3d	; 61
    1e64:	3e b7       	in	r19, 0x3e	; 62
    1e66:	2f 5f       	subi	r18, 0xFF	; 255
    1e68:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6a:	59 01       	movw	r10, r18

	USB_ControlRequest = (USB_Request_Header_t)
    1e6c:	50 96       	adiw	r26, 0x10	; 16
    1e6e:	6c 91       	ld	r22, X
    1e70:	81 e8       	ldi	r24, 0x81	; 129
    1e72:	80 93 06 05 	sts	0x0506, r24
    1e76:	86 e0       	ldi	r24, 0x06	; 6
    1e78:	80 93 07 05 	sts	0x0507, r24
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	92 e2       	ldi	r25, 0x22	; 34
    1e80:	90 93 09 05 	sts	0x0509, r25
    1e84:	80 93 08 05 	sts	0x0508, r24
    1e88:	7a e0       	ldi	r23, 0x0A	; 10
    1e8a:	e7 2e       	mov	r14, r23
    1e8c:	75 e0       	ldi	r23, 0x05	; 5
    1e8e:	f7 2e       	mov	r15, r23
    1e90:	60 93 0a 05 	sts	0x050A, r22
    1e94:	d7 01       	movw	r26, r14
    1e96:	11 96       	adiw	r26, 0x01	; 1
    1e98:	1c 92       	st	X, r1
    1e9a:	50 93 0d 05 	sts	0x050D, r21
    1e9e:	40 93 0c 05 	sts	0x050C, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1ea2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1ea6:	c9 01       	movw	r24, r18
    1ea8:	29 dd       	rcall	.-1454   	; 0x18fc <USB_Host_SendControlRequest>
    1eaa:	88 23       	and	r24, r24
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <HID_Host_SetReportProtocol+0x88>
    1eae:	4f c0       	rjmp	.+158    	; 0x1f4e <HID_Host_SetReportProtocol+0x126>
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	83 89       	ldd	r24, Z+19	; 0x13
    1eb4:	88 23       	and	r24, r24
    1eb6:	e9 f0       	breq	.+58     	; 0x1ef2 <HID_Host_SetReportProtocol+0xca>
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1eb8:	20 89       	ldd	r18, Z+16	; 0x10
    1eba:	81 e2       	ldi	r24, 0x21	; 33
    1ebc:	80 93 06 05 	sts	0x0506, r24
    1ec0:	8b e0       	ldi	r24, 0x0B	; 11
    1ec2:	80 93 07 05 	sts	0x0507, r24
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	90 93 09 05 	sts	0x0509, r25
    1ece:	80 93 08 05 	sts	0x0508, r24
    1ed2:	20 93 0a 05 	sts	0x050A, r18
    1ed6:	d7 01       	movw	r26, r14
    1ed8:	11 96       	adiw	r26, 0x01	; 1
    1eda:	1c 92       	st	X, r1
    1edc:	10 92 0d 05 	sts	0x050D, r1
    1ee0:	10 92 0c 05 	sts	0x050C, r1
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	09 dd       	rcall	.-1518   	; 0x18fc <USB_Host_SendControlRequest>
    1eea:	88 23       	and	r24, r24
    1eec:	81 f5       	brne	.+96     	; 0x1f4e <HID_Host_SetReportProtocol+0x126>
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1eee:	f8 01       	movw	r30, r16
    1ef0:	13 8a       	std	Z+19, r1	; 0x13
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1ef2:	d8 01       	movw	r26, r16
    1ef4:	1d 96       	adiw	r26, 0x0d	; 13
    1ef6:	4d 91       	ld	r20, X+
    1ef8:	5c 91       	ld	r21, X
    1efa:	1e 97       	sbiw	r26, 0x0e	; 14
    1efc:	41 15       	cp	r20, r1
    1efe:	51 05       	cpc	r21, r1
    1f00:	29 f1       	breq	.+74     	; 0x1f4c <HID_Host_SetReportProtocol+0x124>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1f02:	54 96       	adiw	r26, 0x14	; 20
    1f04:	6d 91       	ld	r22, X+
    1f06:	7c 91       	ld	r23, X
    1f08:	55 97       	sbiw	r26, 0x15	; 21
    1f0a:	c5 01       	movw	r24, r10
    1f0c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <USB_ProcessHIDReport>
    1f10:	88 23       	and	r24, r24
    1f12:	11 f0       	breq	.+4      	; 0x1f18 <HID_Host_SetReportProtocol+0xf0>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1f14:	80 68       	ori	r24, 0x80	; 128
    1f16:	1b c0       	rjmp	.+54     	; 0x1f4e <HID_Host_SetReportProtocol+0x126>
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1f18:	d8 01       	movw	r26, r16
    1f1a:	1d 96       	adiw	r26, 0x0d	; 13
    1f1c:	ed 91       	ld	r30, X+
    1f1e:	fc 91       	ld	r31, X
    1f20:	1e 97       	sbiw	r26, 0x0e	; 14
    1f22:	ea 52       	subi	r30, 0x2A	; 42
    1f24:	fc 4f       	sbci	r31, 0xFC	; 252
    1f26:	20 81       	ld	r18, Z
    1f28:	31 81       	ldd	r19, Z+1	; 0x01
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1f2a:	a9 01       	movw	r20, r18
    1f2c:	47 70       	andi	r20, 0x07	; 7
    1f2e:	50 70       	andi	r21, 0x00	; 0
    1f30:	91 e0       	ldi	r25, 0x01	; 1
    1f32:	41 15       	cp	r20, r1
    1f34:	51 05       	cpc	r21, r1
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <HID_Host_SetReportProtocol+0x112>
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	43 e0       	ldi	r20, 0x03	; 3
    1f3c:	36 95       	lsr	r19
    1f3e:	27 95       	ror	r18
    1f40:	4a 95       	dec	r20
    1f42:	e1 f7       	brne	.-8      	; 0x1f3c <HID_Host_SetReportProtocol+0x114>
    1f44:	29 0f       	add	r18, r25
    1f46:	f8 01       	movw	r30, r16
    1f48:	26 8b       	std	Z+22, r18	; 0x16
    1f4a:	01 c0       	rjmp	.+2      	; 0x1f4e <HID_Host_SetReportProtocol+0x126>

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    1f4c:	80 e8       	ldi	r24, 0x80	; 128

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de be       	out	0x3e, r13	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd be       	out	0x3d, r12	; 61
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	1f 91       	pop	r17
    1f5e:	0f 91       	pop	r16
    1f60:	ff 90       	pop	r15
    1f62:	ef 90       	pop	r14
    1f64:	df 90       	pop	r13
    1f66:	cf 90       	pop	r12
    1f68:	bf 90       	pop	r11
    1f6a:	af 90       	pop	r10
    1f6c:	08 95       	ret

00001f6e <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1f6e:	90 91 c8 00 	lds	r25, 0x00C8
    1f72:	95 ff       	sbrs	r25, 5
    1f74:	fc cf       	rjmp	.-8      	; 0x1f6e <Serial_putchar>
				UDR1 = DataByte;
    1f76:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	08 95       	ret

00001f80 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1f80:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1f84:	87 ff       	sbrs	r24, 7
    1f86:	08 c0       	rjmp	.+16     	; 0x1f98 <Serial_getchar+0x18>
    1f88:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1f8c:	87 ff       	sbrs	r24, 7
    1f8e:	07 c0       	rjmp	.+14     	; 0x1f9e <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1f90:	20 91 ce 00 	lds	r18, 0x00CE
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	05 c0       	rjmp	.+10     	; 0x1fa2 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    1f98:	2e ef       	ldi	r18, 0xFE	; 254
    1f9a:	3f ef       	ldi	r19, 0xFF	; 255
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1f9e:	2f ef       	ldi	r18, 0xFF	; 255
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1fa2:	c9 01       	movw	r24, r18
    1fa4:	08 95       	ret

00001fa6 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1fa6:	fc 01       	movw	r30, r24
	if (!(Stream))
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	51 f4       	brne	.+20     	; 0x1fc0 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1fac:	ef e0       	ldi	r30, 0x0F	; 15
    1fae:	f5 e0       	ldi	r31, 0x05	; 5
    1fb0:	f0 93 1e 05 	sts	0x051E, r31
    1fb4:	e0 93 1d 05 	sts	0x051D, r30
		stdout = Stream;
    1fb8:	f0 93 20 05 	sts	0x0520, r31
    1fbc:	e0 93 1f 05 	sts	0x051F, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1fc0:	8e e0       	ldi	r24, 0x0E	; 14
    1fc2:	df 01       	movw	r26, r30
    1fc4:	1d 92       	st	X+, r1
    1fc6:	8a 95       	dec	r24
    1fc8:	e9 f7       	brne	.-6      	; 0x1fc4 <Serial_CreateStream+0x1e>
    1fca:	83 e0       	ldi	r24, 0x03	; 3
    1fcc:	83 83       	std	Z+3, r24	; 0x03
    1fce:	87 eb       	ldi	r24, 0xB7	; 183
    1fd0:	9f e0       	ldi	r25, 0x0F	; 15
    1fd2:	91 87       	std	Z+9, r25	; 0x09
    1fd4:	80 87       	std	Z+8, r24	; 0x08
    1fd6:	80 ec       	ldi	r24, 0xC0	; 192
    1fd8:	9f e0       	ldi	r25, 0x0F	; 15
    1fda:	93 87       	std	Z+11, r25	; 0x0b
    1fdc:	82 87       	std	Z+10, r24	; 0x0a
}
    1fde:	08 95       	ret

00001fe0 <fputc>:
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	8c 01       	movw	r16, r24
    1fea:	eb 01       	movw	r28, r22
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	81 ff       	sbrs	r24, 1
    1ff0:	1b c0       	rjmp	.+54     	; 0x2028 <fputc+0x48>
    1ff2:	82 ff       	sbrs	r24, 2
    1ff4:	0d c0       	rjmp	.+26     	; 0x2010 <fputc+0x30>
    1ff6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ff8:	3f 81       	ldd	r19, Y+7	; 0x07
    1ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffe:	28 17       	cp	r18, r24
    2000:	39 07       	cpc	r19, r25
    2002:	64 f4       	brge	.+24     	; 0x201c <fputc+0x3c>
    2004:	e8 81       	ld	r30, Y
    2006:	f9 81       	ldd	r31, Y+1	; 0x01
    2008:	01 93       	st	Z+, r16
    200a:	f9 83       	std	Y+1, r31	; 0x01
    200c:	e8 83       	st	Y, r30
    200e:	06 c0       	rjmp	.+12     	; 0x201c <fputc+0x3c>
    2010:	e8 85       	ldd	r30, Y+8	; 0x08
    2012:	f9 85       	ldd	r31, Y+9	; 0x09
    2014:	80 2f       	mov	r24, r16
    2016:	09 95       	icall
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	31 f4       	brne	.+12     	; 0x2028 <fputc+0x48>
    201c:	8e 81       	ldd	r24, Y+6	; 0x06
    201e:	9f 81       	ldd	r25, Y+7	; 0x07
    2020:	01 96       	adiw	r24, 0x01	; 1
    2022:	9f 83       	std	Y+7, r25	; 0x07
    2024:	8e 83       	std	Y+6, r24	; 0x06
    2026:	02 c0       	rjmp	.+4      	; 0x202c <fputc+0x4c>
    2028:	0f ef       	ldi	r16, 0xFF	; 255
    202a:	1f ef       	ldi	r17, 0xFF	; 255
    202c:	c8 01       	movw	r24, r16
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	08 95       	ret

00002038 <printf_P>:
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	fe 01       	movw	r30, r28
    2042:	35 96       	adiw	r30, 0x05	; 5
    2044:	61 91       	ld	r22, Z+
    2046:	71 91       	ld	r23, Z+
    2048:	80 91 1f 05 	lds	r24, 0x051F
    204c:	90 91 20 05 	lds	r25, 0x0520
    2050:	dc 01       	movw	r26, r24
    2052:	13 96       	adiw	r26, 0x03	; 3
    2054:	2c 91       	ld	r18, X
    2056:	13 97       	sbiw	r26, 0x03	; 3
    2058:	28 60       	ori	r18, 0x08	; 8
    205a:	13 96       	adiw	r26, 0x03	; 3
    205c:	2c 93       	st	X, r18
    205e:	af 01       	movw	r20, r30
    2060:	42 d0       	rcall	.+132    	; 0x20e6 <vfprintf>
    2062:	e0 91 1f 05 	lds	r30, 0x051F
    2066:	f0 91 20 05 	lds	r31, 0x0520
    206a:	23 81       	ldd	r18, Z+3	; 0x03
    206c:	27 7f       	andi	r18, 0xF7	; 247
    206e:	23 83       	std	Z+3, r18	; 0x03
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <puts_P>:
    2076:	ef 92       	push	r14
    2078:	ff 92       	push	r15
    207a:	0f 93       	push	r16
    207c:	1f 93       	push	r17
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	8c 01       	movw	r16, r24
    2084:	e0 91 1f 05 	lds	r30, 0x051F
    2088:	f0 91 20 05 	lds	r31, 0x0520
    208c:	83 81       	ldd	r24, Z+3	; 0x03
    208e:	81 ff       	sbrs	r24, 1
    2090:	20 c0       	rjmp	.+64     	; 0x20d2 <puts_P+0x5c>
    2092:	c0 e0       	ldi	r28, 0x00	; 0
    2094:	d0 e0       	ldi	r29, 0x00	; 0
    2096:	0c c0       	rjmp	.+24     	; 0x20b0 <puts_P+0x3a>
    2098:	db 01       	movw	r26, r22
    209a:	18 96       	adiw	r26, 0x08	; 8
    209c:	ed 91       	ld	r30, X+
    209e:	fc 91       	ld	r31, X
    20a0:	19 97       	sbiw	r26, 0x09	; 9
    20a2:	09 95       	icall
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	11 f0       	breq	.+4      	; 0x20ac <puts_P+0x36>
    20a8:	cf ef       	ldi	r28, 0xFF	; 255
    20aa:	df ef       	ldi	r29, 0xFF	; 255
    20ac:	0f 5f       	subi	r16, 0xFF	; 255
    20ae:	1f 4f       	sbci	r17, 0xFF	; 255
    20b0:	f8 01       	movw	r30, r16
    20b2:	84 91       	lpm	r24, Z+
    20b4:	60 91 1f 05 	lds	r22, 0x051F
    20b8:	70 91 20 05 	lds	r23, 0x0520
    20bc:	88 23       	and	r24, r24
    20be:	61 f7       	brne	.-40     	; 0x2098 <puts_P+0x22>
    20c0:	db 01       	movw	r26, r22
    20c2:	18 96       	adiw	r26, 0x08	; 8
    20c4:	ed 91       	ld	r30, X+
    20c6:	fc 91       	ld	r31, X
    20c8:	19 97       	sbiw	r26, 0x09	; 9
    20ca:	8a e0       	ldi	r24, 0x0A	; 10
    20cc:	09 95       	icall
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	11 f0       	breq	.+4      	; 0x20d6 <puts_P+0x60>
    20d2:	cf ef       	ldi	r28, 0xFF	; 255
    20d4:	df ef       	ldi	r29, 0xFF	; 255
    20d6:	ce 01       	movw	r24, r28
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	08 95       	ret

000020e6 <vfprintf>:
    20e6:	2f 92       	push	r2
    20e8:	3f 92       	push	r3
    20ea:	4f 92       	push	r4
    20ec:	5f 92       	push	r5
    20ee:	6f 92       	push	r6
    20f0:	7f 92       	push	r7
    20f2:	8f 92       	push	r8
    20f4:	9f 92       	push	r9
    20f6:	af 92       	push	r10
    20f8:	bf 92       	push	r11
    20fa:	cf 92       	push	r12
    20fc:	df 92       	push	r13
    20fe:	ef 92       	push	r14
    2100:	ff 92       	push	r15
    2102:	0f 93       	push	r16
    2104:	1f 93       	push	r17
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	2c 97       	sbiw	r28, 0x0c	; 12
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	de bf       	out	0x3e, r29	; 62
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	cd bf       	out	0x3d, r28	; 61
    211a:	6c 01       	movw	r12, r24
    211c:	1b 01       	movw	r2, r22
    211e:	8a 01       	movw	r16, r20
    2120:	fc 01       	movw	r30, r24
    2122:	17 82       	std	Z+7, r1	; 0x07
    2124:	16 82       	std	Z+6, r1	; 0x06
    2126:	83 81       	ldd	r24, Z+3	; 0x03
    2128:	81 ff       	sbrs	r24, 1
    212a:	c4 c1       	rjmp	.+904    	; 0x24b4 <__stack+0x3b5>
    212c:	2e 01       	movw	r4, r28
    212e:	08 94       	sec
    2130:	41 1c       	adc	r4, r1
    2132:	51 1c       	adc	r5, r1
    2134:	f6 01       	movw	r30, r12
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	f1 01       	movw	r30, r2
    213a:	93 fd       	sbrc	r25, 3
    213c:	85 91       	lpm	r24, Z+
    213e:	93 ff       	sbrs	r25, 3
    2140:	81 91       	ld	r24, Z+
    2142:	1f 01       	movw	r2, r30
    2144:	88 23       	and	r24, r24
    2146:	09 f4       	brne	.+2      	; 0x214a <__stack+0x4b>
    2148:	b1 c1       	rjmp	.+866    	; 0x24ac <__stack+0x3ad>
    214a:	85 32       	cpi	r24, 0x25	; 37
    214c:	39 f4       	brne	.+14     	; 0x215c <__stack+0x5d>
    214e:	93 fd       	sbrc	r25, 3
    2150:	85 91       	lpm	r24, Z+
    2152:	93 ff       	sbrs	r25, 3
    2154:	81 91       	ld	r24, Z+
    2156:	1f 01       	movw	r2, r30
    2158:	85 32       	cpi	r24, 0x25	; 37
    215a:	21 f4       	brne	.+8      	; 0x2164 <__stack+0x65>
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	b6 01       	movw	r22, r12
    2160:	3f df       	rcall	.-386    	; 0x1fe0 <fputc>
    2162:	e8 cf       	rjmp	.-48     	; 0x2134 <__stack+0x35>
    2164:	ee 24       	eor	r14, r14
    2166:	ff 24       	eor	r15, r15
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	20 32       	cpi	r18, 0x20	; 32
    216c:	b0 f4       	brcc	.+44     	; 0x219a <__stack+0x9b>
    216e:	8b 32       	cpi	r24, 0x2B	; 43
    2170:	69 f0       	breq	.+26     	; 0x218c <__stack+0x8d>
    2172:	8c 32       	cpi	r24, 0x2C	; 44
    2174:	28 f4       	brcc	.+10     	; 0x2180 <__stack+0x81>
    2176:	80 32       	cpi	r24, 0x20	; 32
    2178:	51 f0       	breq	.+20     	; 0x218e <__stack+0x8f>
    217a:	83 32       	cpi	r24, 0x23	; 35
    217c:	71 f4       	brne	.+28     	; 0x219a <__stack+0x9b>
    217e:	0b c0       	rjmp	.+22     	; 0x2196 <__stack+0x97>
    2180:	8d 32       	cpi	r24, 0x2D	; 45
    2182:	39 f0       	breq	.+14     	; 0x2192 <__stack+0x93>
    2184:	80 33       	cpi	r24, 0x30	; 48
    2186:	49 f4       	brne	.+18     	; 0x219a <__stack+0x9b>
    2188:	21 60       	ori	r18, 0x01	; 1
    218a:	2c c0       	rjmp	.+88     	; 0x21e4 <__stack+0xe5>
    218c:	22 60       	ori	r18, 0x02	; 2
    218e:	24 60       	ori	r18, 0x04	; 4
    2190:	29 c0       	rjmp	.+82     	; 0x21e4 <__stack+0xe5>
    2192:	28 60       	ori	r18, 0x08	; 8
    2194:	27 c0       	rjmp	.+78     	; 0x21e4 <__stack+0xe5>
    2196:	20 61       	ori	r18, 0x10	; 16
    2198:	25 c0       	rjmp	.+74     	; 0x21e4 <__stack+0xe5>
    219a:	27 fd       	sbrc	r18, 7
    219c:	2c c0       	rjmp	.+88     	; 0x21f6 <__stack+0xf7>
    219e:	38 2f       	mov	r19, r24
    21a0:	30 53       	subi	r19, 0x30	; 48
    21a2:	3a 30       	cpi	r19, 0x0A	; 10
    21a4:	98 f4       	brcc	.+38     	; 0x21cc <__stack+0xcd>
    21a6:	26 ff       	sbrs	r18, 6
    21a8:	08 c0       	rjmp	.+16     	; 0x21ba <__stack+0xbb>
    21aa:	8e 2d       	mov	r24, r14
    21ac:	88 0f       	add	r24, r24
    21ae:	e8 2e       	mov	r14, r24
    21b0:	ee 0c       	add	r14, r14
    21b2:	ee 0c       	add	r14, r14
    21b4:	e8 0e       	add	r14, r24
    21b6:	e3 0e       	add	r14, r19
    21b8:	15 c0       	rjmp	.+42     	; 0x21e4 <__stack+0xe5>
    21ba:	8f 2d       	mov	r24, r15
    21bc:	88 0f       	add	r24, r24
    21be:	f8 2e       	mov	r15, r24
    21c0:	ff 0c       	add	r15, r15
    21c2:	ff 0c       	add	r15, r15
    21c4:	f8 0e       	add	r15, r24
    21c6:	f3 0e       	add	r15, r19
    21c8:	20 62       	ori	r18, 0x20	; 32
    21ca:	0c c0       	rjmp	.+24     	; 0x21e4 <__stack+0xe5>
    21cc:	8e 32       	cpi	r24, 0x2E	; 46
    21ce:	21 f4       	brne	.+8      	; 0x21d8 <__stack+0xd9>
    21d0:	26 fd       	sbrc	r18, 6
    21d2:	6c c1       	rjmp	.+728    	; 0x24ac <__stack+0x3ad>
    21d4:	20 64       	ori	r18, 0x40	; 64
    21d6:	06 c0       	rjmp	.+12     	; 0x21e4 <__stack+0xe5>
    21d8:	8c 36       	cpi	r24, 0x6C	; 108
    21da:	11 f4       	brne	.+4      	; 0x21e0 <__stack+0xe1>
    21dc:	20 68       	ori	r18, 0x80	; 128
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <__stack+0xe5>
    21e0:	88 36       	cpi	r24, 0x68	; 104
    21e2:	49 f4       	brne	.+18     	; 0x21f6 <__stack+0xf7>
    21e4:	f1 01       	movw	r30, r2
    21e6:	93 fd       	sbrc	r25, 3
    21e8:	85 91       	lpm	r24, Z+
    21ea:	93 ff       	sbrs	r25, 3
    21ec:	81 91       	ld	r24, Z+
    21ee:	1f 01       	movw	r2, r30
    21f0:	88 23       	and	r24, r24
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <__stack+0xf7>
    21f4:	ba cf       	rjmp	.-140    	; 0x216a <__stack+0x6b>
    21f6:	98 2f       	mov	r25, r24
    21f8:	95 54       	subi	r25, 0x45	; 69
    21fa:	93 30       	cpi	r25, 0x03	; 3
    21fc:	18 f0       	brcs	.+6      	; 0x2204 <__stack+0x105>
    21fe:	90 52       	subi	r25, 0x20	; 32
    2200:	93 30       	cpi	r25, 0x03	; 3
    2202:	28 f4       	brcc	.+10     	; 0x220e <__stack+0x10f>
    2204:	0c 5f       	subi	r16, 0xFC	; 252
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
    2208:	ff e3       	ldi	r31, 0x3F	; 63
    220a:	f9 83       	std	Y+1, r31	; 0x01
    220c:	0d c0       	rjmp	.+26     	; 0x2228 <__stack+0x129>
    220e:	83 36       	cpi	r24, 0x63	; 99
    2210:	31 f0       	breq	.+12     	; 0x221e <__stack+0x11f>
    2212:	83 37       	cpi	r24, 0x73	; 115
    2214:	71 f0       	breq	.+28     	; 0x2232 <__stack+0x133>
    2216:	83 35       	cpi	r24, 0x53	; 83
    2218:	09 f0       	breq	.+2      	; 0x221c <__stack+0x11d>
    221a:	5c c0       	rjmp	.+184    	; 0x22d4 <__stack+0x1d5>
    221c:	21 c0       	rjmp	.+66     	; 0x2260 <__stack+0x161>
    221e:	f8 01       	movw	r30, r16
    2220:	80 81       	ld	r24, Z
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	0e 5f       	subi	r16, 0xFE	; 254
    2226:	1f 4f       	sbci	r17, 0xFF	; 255
    2228:	42 01       	movw	r8, r4
    222a:	71 e0       	ldi	r23, 0x01	; 1
    222c:	a7 2e       	mov	r10, r23
    222e:	b1 2c       	mov	r11, r1
    2230:	15 c0       	rjmp	.+42     	; 0x225c <__stack+0x15d>
    2232:	62 e0       	ldi	r22, 0x02	; 2
    2234:	66 2e       	mov	r6, r22
    2236:	71 2c       	mov	r7, r1
    2238:	60 0e       	add	r6, r16
    223a:	71 1e       	adc	r7, r17
    223c:	f8 01       	movw	r30, r16
    223e:	80 80       	ld	r8, Z
    2240:	91 80       	ldd	r9, Z+1	; 0x01
    2242:	26 ff       	sbrs	r18, 6
    2244:	03 c0       	rjmp	.+6      	; 0x224c <__stack+0x14d>
    2246:	6e 2d       	mov	r22, r14
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <__stack+0x151>
    224c:	6f ef       	ldi	r22, 0xFF	; 255
    224e:	7f ef       	ldi	r23, 0xFF	; 255
    2250:	c4 01       	movw	r24, r8
    2252:	2c 87       	std	Y+12, r18	; 0x0c
    2254:	56 d1       	rcall	.+684    	; 0x2502 <strnlen>
    2256:	5c 01       	movw	r10, r24
    2258:	83 01       	movw	r16, r6
    225a:	2c 85       	ldd	r18, Y+12	; 0x0c
    225c:	2f 77       	andi	r18, 0x7F	; 127
    225e:	16 c0       	rjmp	.+44     	; 0x228c <__stack+0x18d>
    2260:	52 e0       	ldi	r21, 0x02	; 2
    2262:	65 2e       	mov	r6, r21
    2264:	71 2c       	mov	r7, r1
    2266:	60 0e       	add	r6, r16
    2268:	71 1e       	adc	r7, r17
    226a:	f8 01       	movw	r30, r16
    226c:	80 80       	ld	r8, Z
    226e:	91 80       	ldd	r9, Z+1	; 0x01
    2270:	26 ff       	sbrs	r18, 6
    2272:	03 c0       	rjmp	.+6      	; 0x227a <__stack+0x17b>
    2274:	6e 2d       	mov	r22, r14
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	02 c0       	rjmp	.+4      	; 0x227e <__stack+0x17f>
    227a:	6f ef       	ldi	r22, 0xFF	; 255
    227c:	7f ef       	ldi	r23, 0xFF	; 255
    227e:	c4 01       	movw	r24, r8
    2280:	2c 87       	std	Y+12, r18	; 0x0c
    2282:	34 d1       	rcall	.+616    	; 0x24ec <strnlen_P>
    2284:	5c 01       	movw	r10, r24
    2286:	2c 85       	ldd	r18, Y+12	; 0x0c
    2288:	20 68       	ori	r18, 0x80	; 128
    228a:	83 01       	movw	r16, r6
    228c:	23 fd       	sbrc	r18, 3
    228e:	1e c0       	rjmp	.+60     	; 0x22cc <__stack+0x1cd>
    2290:	07 c0       	rjmp	.+14     	; 0x22a0 <__stack+0x1a1>
    2292:	80 e2       	ldi	r24, 0x20	; 32
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	b6 01       	movw	r22, r12
    2298:	2c 87       	std	Y+12, r18	; 0x0c
    229a:	a2 de       	rcall	.-700    	; 0x1fe0 <fputc>
    229c:	fa 94       	dec	r15
    229e:	2c 85       	ldd	r18, Y+12	; 0x0c
    22a0:	8f 2d       	mov	r24, r15
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	a8 16       	cp	r10, r24
    22a6:	b9 06       	cpc	r11, r25
    22a8:	a0 f3       	brcs	.-24     	; 0x2292 <__stack+0x193>
    22aa:	10 c0       	rjmp	.+32     	; 0x22cc <__stack+0x1cd>
    22ac:	f4 01       	movw	r30, r8
    22ae:	27 fd       	sbrc	r18, 7
    22b0:	85 91       	lpm	r24, Z+
    22b2:	27 ff       	sbrs	r18, 7
    22b4:	81 91       	ld	r24, Z+
    22b6:	4f 01       	movw	r8, r30
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	b6 01       	movw	r22, r12
    22bc:	2c 87       	std	Y+12, r18	; 0x0c
    22be:	90 de       	rcall	.-736    	; 0x1fe0 <fputc>
    22c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    22c2:	f1 10       	cpse	r15, r1
    22c4:	fa 94       	dec	r15
    22c6:	08 94       	sec
    22c8:	a1 08       	sbc	r10, r1
    22ca:	b1 08       	sbc	r11, r1
    22cc:	a1 14       	cp	r10, r1
    22ce:	b1 04       	cpc	r11, r1
    22d0:	69 f7       	brne	.-38     	; 0x22ac <__stack+0x1ad>
    22d2:	e9 c0       	rjmp	.+466    	; 0x24a6 <__stack+0x3a7>
    22d4:	84 36       	cpi	r24, 0x64	; 100
    22d6:	11 f0       	breq	.+4      	; 0x22dc <__stack+0x1dd>
    22d8:	89 36       	cpi	r24, 0x69	; 105
    22da:	41 f5       	brne	.+80     	; 0x232c <__stack+0x22d>
    22dc:	27 ff       	sbrs	r18, 7
    22de:	08 c0       	rjmp	.+16     	; 0x22f0 <__stack+0x1f1>
    22e0:	f8 01       	movw	r30, r16
    22e2:	60 81       	ld	r22, Z
    22e4:	71 81       	ldd	r23, Z+1	; 0x01
    22e6:	82 81       	ldd	r24, Z+2	; 0x02
    22e8:	93 81       	ldd	r25, Z+3	; 0x03
    22ea:	0c 5f       	subi	r16, 0xFC	; 252
    22ec:	1f 4f       	sbci	r17, 0xFF	; 255
    22ee:	09 c0       	rjmp	.+18     	; 0x2302 <__stack+0x203>
    22f0:	f8 01       	movw	r30, r16
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	88 27       	eor	r24, r24
    22f8:	77 fd       	sbrc	r23, 7
    22fa:	80 95       	com	r24
    22fc:	98 2f       	mov	r25, r24
    22fe:	0e 5f       	subi	r16, 0xFE	; 254
    2300:	1f 4f       	sbci	r17, 0xFF	; 255
    2302:	4f e6       	ldi	r20, 0x6F	; 111
    2304:	b4 2e       	mov	r11, r20
    2306:	b2 22       	and	r11, r18
    2308:	97 ff       	sbrs	r25, 7
    230a:	09 c0       	rjmp	.+18     	; 0x231e <__stack+0x21f>
    230c:	90 95       	com	r25
    230e:	80 95       	com	r24
    2310:	70 95       	com	r23
    2312:	61 95       	neg	r22
    2314:	7f 4f       	sbci	r23, 0xFF	; 255
    2316:	8f 4f       	sbci	r24, 0xFF	; 255
    2318:	9f 4f       	sbci	r25, 0xFF	; 255
    231a:	f0 e8       	ldi	r31, 0x80	; 128
    231c:	bf 2a       	or	r11, r31
    231e:	a2 01       	movw	r20, r4
    2320:	2a e0       	ldi	r18, 0x0A	; 10
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	f9 d0       	rcall	.+498    	; 0x2518 <__ultoa_invert>
    2326:	78 2e       	mov	r7, r24
    2328:	74 18       	sub	r7, r4
    232a:	44 c0       	rjmp	.+136    	; 0x23b4 <__stack+0x2b5>
    232c:	85 37       	cpi	r24, 0x75	; 117
    232e:	31 f4       	brne	.+12     	; 0x233c <__stack+0x23d>
    2330:	3f ee       	ldi	r19, 0xEF	; 239
    2332:	b3 2e       	mov	r11, r19
    2334:	b2 22       	and	r11, r18
    2336:	2a e0       	ldi	r18, 0x0A	; 10
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	25 c0       	rjmp	.+74     	; 0x2386 <__stack+0x287>
    233c:	99 ef       	ldi	r25, 0xF9	; 249
    233e:	b9 2e       	mov	r11, r25
    2340:	b2 22       	and	r11, r18
    2342:	8f 36       	cpi	r24, 0x6F	; 111
    2344:	c1 f0       	breq	.+48     	; 0x2376 <__stack+0x277>
    2346:	80 37       	cpi	r24, 0x70	; 112
    2348:	20 f4       	brcc	.+8      	; 0x2352 <__stack+0x253>
    234a:	88 35       	cpi	r24, 0x58	; 88
    234c:	09 f0       	breq	.+2      	; 0x2350 <__stack+0x251>
    234e:	ae c0       	rjmp	.+348    	; 0x24ac <__stack+0x3ad>
    2350:	0d c0       	rjmp	.+26     	; 0x236c <__stack+0x26d>
    2352:	80 37       	cpi	r24, 0x70	; 112
    2354:	21 f0       	breq	.+8      	; 0x235e <__stack+0x25f>
    2356:	88 37       	cpi	r24, 0x78	; 120
    2358:	09 f0       	breq	.+2      	; 0x235c <__stack+0x25d>
    235a:	a8 c0       	rjmp	.+336    	; 0x24ac <__stack+0x3ad>
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <__stack+0x263>
    235e:	20 e1       	ldi	r18, 0x10	; 16
    2360:	b2 2a       	or	r11, r18
    2362:	b4 fe       	sbrs	r11, 4
    2364:	0b c0       	rjmp	.+22     	; 0x237c <__stack+0x27d>
    2366:	84 e0       	ldi	r24, 0x04	; 4
    2368:	b8 2a       	or	r11, r24
    236a:	08 c0       	rjmp	.+16     	; 0x237c <__stack+0x27d>
    236c:	b4 fe       	sbrs	r11, 4
    236e:	09 c0       	rjmp	.+18     	; 0x2382 <__stack+0x283>
    2370:	e6 e0       	ldi	r30, 0x06	; 6
    2372:	be 2a       	or	r11, r30
    2374:	06 c0       	rjmp	.+12     	; 0x2382 <__stack+0x283>
    2376:	28 e0       	ldi	r18, 0x08	; 8
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	05 c0       	rjmp	.+10     	; 0x2386 <__stack+0x287>
    237c:	20 e1       	ldi	r18, 0x10	; 16
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <__stack+0x287>
    2382:	20 e1       	ldi	r18, 0x10	; 16
    2384:	32 e0       	ldi	r19, 0x02	; 2
    2386:	b7 fe       	sbrs	r11, 7
    2388:	08 c0       	rjmp	.+16     	; 0x239a <__stack+0x29b>
    238a:	f8 01       	movw	r30, r16
    238c:	60 81       	ld	r22, Z
    238e:	71 81       	ldd	r23, Z+1	; 0x01
    2390:	82 81       	ldd	r24, Z+2	; 0x02
    2392:	93 81       	ldd	r25, Z+3	; 0x03
    2394:	0c 5f       	subi	r16, 0xFC	; 252
    2396:	1f 4f       	sbci	r17, 0xFF	; 255
    2398:	07 c0       	rjmp	.+14     	; 0x23a8 <__stack+0x2a9>
    239a:	f8 01       	movw	r30, r16
    239c:	60 81       	ld	r22, Z
    239e:	71 81       	ldd	r23, Z+1	; 0x01
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	0e 5f       	subi	r16, 0xFE	; 254
    23a6:	1f 4f       	sbci	r17, 0xFF	; 255
    23a8:	a2 01       	movw	r20, r4
    23aa:	b6 d0       	rcall	.+364    	; 0x2518 <__ultoa_invert>
    23ac:	78 2e       	mov	r7, r24
    23ae:	74 18       	sub	r7, r4
    23b0:	ff e7       	ldi	r31, 0x7F	; 127
    23b2:	bf 22       	and	r11, r31
    23b4:	b6 fe       	sbrs	r11, 6
    23b6:	0b c0       	rjmp	.+22     	; 0x23ce <__stack+0x2cf>
    23b8:	2e ef       	ldi	r18, 0xFE	; 254
    23ba:	b2 22       	and	r11, r18
    23bc:	7e 14       	cp	r7, r14
    23be:	38 f4       	brcc	.+14     	; 0x23ce <__stack+0x2cf>
    23c0:	b4 fe       	sbrs	r11, 4
    23c2:	07 c0       	rjmp	.+14     	; 0x23d2 <__stack+0x2d3>
    23c4:	b2 fc       	sbrc	r11, 2
    23c6:	05 c0       	rjmp	.+10     	; 0x23d2 <__stack+0x2d3>
    23c8:	8f ee       	ldi	r24, 0xEF	; 239
    23ca:	b8 22       	and	r11, r24
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <__stack+0x2d3>
    23ce:	a7 2c       	mov	r10, r7
    23d0:	01 c0       	rjmp	.+2      	; 0x23d4 <__stack+0x2d5>
    23d2:	ae 2c       	mov	r10, r14
    23d4:	8b 2d       	mov	r24, r11
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	b4 fe       	sbrs	r11, 4
    23da:	0d c0       	rjmp	.+26     	; 0x23f6 <__stack+0x2f7>
    23dc:	fe 01       	movw	r30, r28
    23de:	e7 0d       	add	r30, r7
    23e0:	f1 1d       	adc	r31, r1
    23e2:	20 81       	ld	r18, Z
    23e4:	20 33       	cpi	r18, 0x30	; 48
    23e6:	19 f4       	brne	.+6      	; 0x23ee <__stack+0x2ef>
    23e8:	e9 ee       	ldi	r30, 0xE9	; 233
    23ea:	be 22       	and	r11, r30
    23ec:	09 c0       	rjmp	.+18     	; 0x2400 <__stack+0x301>
    23ee:	a3 94       	inc	r10
    23f0:	b2 fe       	sbrs	r11, 2
    23f2:	06 c0       	rjmp	.+12     	; 0x2400 <__stack+0x301>
    23f4:	04 c0       	rjmp	.+8      	; 0x23fe <__stack+0x2ff>
    23f6:	86 78       	andi	r24, 0x86	; 134
    23f8:	90 70       	andi	r25, 0x00	; 0
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	09 f0       	breq	.+2      	; 0x2400 <__stack+0x301>
    23fe:	a3 94       	inc	r10
    2400:	8b 2c       	mov	r8, r11
    2402:	99 24       	eor	r9, r9
    2404:	b3 fc       	sbrc	r11, 3
    2406:	13 c0       	rjmp	.+38     	; 0x242e <__stack+0x32f>
    2408:	b0 fe       	sbrs	r11, 0
    240a:	0e c0       	rjmp	.+28     	; 0x2428 <__stack+0x329>
    240c:	af 14       	cp	r10, r15
    240e:	28 f4       	brcc	.+10     	; 0x241a <__stack+0x31b>
    2410:	e7 2c       	mov	r14, r7
    2412:	ef 0c       	add	r14, r15
    2414:	ea 18       	sub	r14, r10
    2416:	af 2c       	mov	r10, r15
    2418:	07 c0       	rjmp	.+14     	; 0x2428 <__stack+0x329>
    241a:	e7 2c       	mov	r14, r7
    241c:	05 c0       	rjmp	.+10     	; 0x2428 <__stack+0x329>
    241e:	80 e2       	ldi	r24, 0x20	; 32
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	b6 01       	movw	r22, r12
    2424:	dd dd       	rcall	.-1094   	; 0x1fe0 <fputc>
    2426:	a3 94       	inc	r10
    2428:	af 14       	cp	r10, r15
    242a:	c8 f3       	brcs	.-14     	; 0x241e <__stack+0x31f>
    242c:	04 c0       	rjmp	.+8      	; 0x2436 <__stack+0x337>
    242e:	af 14       	cp	r10, r15
    2430:	10 f4       	brcc	.+4      	; 0x2436 <__stack+0x337>
    2432:	fa 18       	sub	r15, r10
    2434:	01 c0       	rjmp	.+2      	; 0x2438 <__stack+0x339>
    2436:	ff 24       	eor	r15, r15
    2438:	84 fe       	sbrs	r8, 4
    243a:	0e c0       	rjmp	.+28     	; 0x2458 <__stack+0x359>
    243c:	80 e3       	ldi	r24, 0x30	; 48
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	b6 01       	movw	r22, r12
    2442:	ce dd       	rcall	.-1124   	; 0x1fe0 <fputc>
    2444:	82 fe       	sbrs	r8, 2
    2446:	1d c0       	rjmp	.+58     	; 0x2482 <__stack+0x383>
    2448:	81 fe       	sbrs	r8, 1
    244a:	03 c0       	rjmp	.+6      	; 0x2452 <__stack+0x353>
    244c:	88 e5       	ldi	r24, 0x58	; 88
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	10 c0       	rjmp	.+32     	; 0x2472 <__stack+0x373>
    2452:	88 e7       	ldi	r24, 0x78	; 120
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	0d c0       	rjmp	.+26     	; 0x2472 <__stack+0x373>
    2458:	c4 01       	movw	r24, r8
    245a:	86 78       	andi	r24, 0x86	; 134
    245c:	90 70       	andi	r25, 0x00	; 0
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	81 f0       	breq	.+32     	; 0x2482 <__stack+0x383>
    2462:	81 fc       	sbrc	r8, 1
    2464:	02 c0       	rjmp	.+4      	; 0x246a <__stack+0x36b>
    2466:	80 e2       	ldi	r24, 0x20	; 32
    2468:	01 c0       	rjmp	.+2      	; 0x246c <__stack+0x36d>
    246a:	8b e2       	ldi	r24, 0x2B	; 43
    246c:	b7 fc       	sbrc	r11, 7
    246e:	8d e2       	ldi	r24, 0x2D	; 45
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	b6 01       	movw	r22, r12
    2474:	b5 dd       	rcall	.-1174   	; 0x1fe0 <fputc>
    2476:	05 c0       	rjmp	.+10     	; 0x2482 <__stack+0x383>
    2478:	80 e3       	ldi	r24, 0x30	; 48
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	b6 01       	movw	r22, r12
    247e:	b0 dd       	rcall	.-1184   	; 0x1fe0 <fputc>
    2480:	ea 94       	dec	r14
    2482:	7e 14       	cp	r7, r14
    2484:	c8 f3       	brcs	.-14     	; 0x2478 <__stack+0x379>
    2486:	7a 94       	dec	r7
    2488:	f2 01       	movw	r30, r4
    248a:	e7 0d       	add	r30, r7
    248c:	f1 1d       	adc	r31, r1
    248e:	80 81       	ld	r24, Z
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	b6 01       	movw	r22, r12
    2494:	a5 dd       	rcall	.-1206   	; 0x1fe0 <fputc>
    2496:	77 20       	and	r7, r7
    2498:	b1 f7       	brne	.-20     	; 0x2486 <__stack+0x387>
    249a:	05 c0       	rjmp	.+10     	; 0x24a6 <__stack+0x3a7>
    249c:	80 e2       	ldi	r24, 0x20	; 32
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	b6 01       	movw	r22, r12
    24a2:	9e dd       	rcall	.-1220   	; 0x1fe0 <fputc>
    24a4:	fa 94       	dec	r15
    24a6:	ff 20       	and	r15, r15
    24a8:	c9 f7       	brne	.-14     	; 0x249c <__stack+0x39d>
    24aa:	44 ce       	rjmp	.-888    	; 0x2134 <__stack+0x35>
    24ac:	f6 01       	movw	r30, r12
    24ae:	26 81       	ldd	r18, Z+6	; 0x06
    24b0:	37 81       	ldd	r19, Z+7	; 0x07
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <__stack+0x3b9>
    24b4:	2f ef       	ldi	r18, 0xFF	; 255
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	c9 01       	movw	r24, r18
    24ba:	2c 96       	adiw	r28, 0x0c	; 12
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	ff 90       	pop	r15
    24d0:	ef 90       	pop	r14
    24d2:	df 90       	pop	r13
    24d4:	cf 90       	pop	r12
    24d6:	bf 90       	pop	r11
    24d8:	af 90       	pop	r10
    24da:	9f 90       	pop	r9
    24dc:	8f 90       	pop	r8
    24de:	7f 90       	pop	r7
    24e0:	6f 90       	pop	r6
    24e2:	5f 90       	pop	r5
    24e4:	4f 90       	pop	r4
    24e6:	3f 90       	pop	r3
    24e8:	2f 90       	pop	r2
    24ea:	08 95       	ret

000024ec <strnlen_P>:
    24ec:	fc 01       	movw	r30, r24
    24ee:	05 90       	lpm	r0, Z+
    24f0:	61 50       	subi	r22, 0x01	; 1
    24f2:	70 40       	sbci	r23, 0x00	; 0
    24f4:	01 10       	cpse	r0, r1
    24f6:	d8 f7       	brcc	.-10     	; 0x24ee <strnlen_P+0x2>
    24f8:	80 95       	com	r24
    24fa:	90 95       	com	r25
    24fc:	8e 0f       	add	r24, r30
    24fe:	9f 1f       	adc	r25, r31
    2500:	08 95       	ret

00002502 <strnlen>:
    2502:	fc 01       	movw	r30, r24
    2504:	61 50       	subi	r22, 0x01	; 1
    2506:	70 40       	sbci	r23, 0x00	; 0
    2508:	01 90       	ld	r0, Z+
    250a:	01 10       	cpse	r0, r1
    250c:	d8 f7       	brcc	.-10     	; 0x2504 <strnlen+0x2>
    250e:	80 95       	com	r24
    2510:	90 95       	com	r25
    2512:	8e 0f       	add	r24, r30
    2514:	9f 1f       	adc	r25, r31
    2516:	08 95       	ret

00002518 <__ultoa_invert>:
    2518:	fa 01       	movw	r30, r20
    251a:	aa 27       	eor	r26, r26
    251c:	28 30       	cpi	r18, 0x08	; 8
    251e:	51 f1       	breq	.+84     	; 0x2574 <__ultoa_invert+0x5c>
    2520:	20 31       	cpi	r18, 0x10	; 16
    2522:	81 f1       	breq	.+96     	; 0x2584 <__ultoa_invert+0x6c>
    2524:	e8 94       	clt
    2526:	6f 93       	push	r22
    2528:	6e 7f       	andi	r22, 0xFE	; 254
    252a:	6e 5f       	subi	r22, 0xFE	; 254
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	8f 4f       	sbci	r24, 0xFF	; 255
    2530:	9f 4f       	sbci	r25, 0xFF	; 255
    2532:	af 4f       	sbci	r26, 0xFF	; 255
    2534:	b1 e0       	ldi	r27, 0x01	; 1
    2536:	3e d0       	rcall	.+124    	; 0x25b4 <__ultoa_invert+0x9c>
    2538:	b4 e0       	ldi	r27, 0x04	; 4
    253a:	3c d0       	rcall	.+120    	; 0x25b4 <__ultoa_invert+0x9c>
    253c:	67 0f       	add	r22, r23
    253e:	78 1f       	adc	r23, r24
    2540:	89 1f       	adc	r24, r25
    2542:	9a 1f       	adc	r25, r26
    2544:	a1 1d       	adc	r26, r1
    2546:	68 0f       	add	r22, r24
    2548:	79 1f       	adc	r23, r25
    254a:	8a 1f       	adc	r24, r26
    254c:	91 1d       	adc	r25, r1
    254e:	a1 1d       	adc	r26, r1
    2550:	6a 0f       	add	r22, r26
    2552:	71 1d       	adc	r23, r1
    2554:	81 1d       	adc	r24, r1
    2556:	91 1d       	adc	r25, r1
    2558:	a1 1d       	adc	r26, r1
    255a:	20 d0       	rcall	.+64     	; 0x259c <__ultoa_invert+0x84>
    255c:	09 f4       	brne	.+2      	; 0x2560 <__ultoa_invert+0x48>
    255e:	68 94       	set
    2560:	3f 91       	pop	r19
    2562:	2a e0       	ldi	r18, 0x0A	; 10
    2564:	26 9f       	mul	r18, r22
    2566:	11 24       	eor	r1, r1
    2568:	30 19       	sub	r19, r0
    256a:	30 5d       	subi	r19, 0xD0	; 208
    256c:	31 93       	st	Z+, r19
    256e:	de f6       	brtc	.-74     	; 0x2526 <__ultoa_invert+0xe>
    2570:	cf 01       	movw	r24, r30
    2572:	08 95       	ret
    2574:	46 2f       	mov	r20, r22
    2576:	47 70       	andi	r20, 0x07	; 7
    2578:	40 5d       	subi	r20, 0xD0	; 208
    257a:	41 93       	st	Z+, r20
    257c:	b3 e0       	ldi	r27, 0x03	; 3
    257e:	0f d0       	rcall	.+30     	; 0x259e <__ultoa_invert+0x86>
    2580:	c9 f7       	brne	.-14     	; 0x2574 <__ultoa_invert+0x5c>
    2582:	f6 cf       	rjmp	.-20     	; 0x2570 <__ultoa_invert+0x58>
    2584:	46 2f       	mov	r20, r22
    2586:	4f 70       	andi	r20, 0x0F	; 15
    2588:	40 5d       	subi	r20, 0xD0	; 208
    258a:	4a 33       	cpi	r20, 0x3A	; 58
    258c:	18 f0       	brcs	.+6      	; 0x2594 <__ultoa_invert+0x7c>
    258e:	49 5d       	subi	r20, 0xD9	; 217
    2590:	31 fd       	sbrc	r19, 1
    2592:	40 52       	subi	r20, 0x20	; 32
    2594:	41 93       	st	Z+, r20
    2596:	02 d0       	rcall	.+4      	; 0x259c <__ultoa_invert+0x84>
    2598:	a9 f7       	brne	.-22     	; 0x2584 <__ultoa_invert+0x6c>
    259a:	ea cf       	rjmp	.-44     	; 0x2570 <__ultoa_invert+0x58>
    259c:	b4 e0       	ldi	r27, 0x04	; 4
    259e:	a6 95       	lsr	r26
    25a0:	97 95       	ror	r25
    25a2:	87 95       	ror	r24
    25a4:	77 95       	ror	r23
    25a6:	67 95       	ror	r22
    25a8:	ba 95       	dec	r27
    25aa:	c9 f7       	brne	.-14     	; 0x259e <__ultoa_invert+0x86>
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	61 05       	cpc	r22, r1
    25b0:	71 05       	cpc	r23, r1
    25b2:	08 95       	ret
    25b4:	9b 01       	movw	r18, r22
    25b6:	ac 01       	movw	r20, r24
    25b8:	0a 2e       	mov	r0, r26
    25ba:	06 94       	lsr	r0
    25bc:	57 95       	ror	r21
    25be:	47 95       	ror	r20
    25c0:	37 95       	ror	r19
    25c2:	27 95       	ror	r18
    25c4:	ba 95       	dec	r27
    25c6:	c9 f7       	brne	.-14     	; 0x25ba <__ultoa_invert+0xa2>
    25c8:	62 0f       	add	r22, r18
    25ca:	73 1f       	adc	r23, r19
    25cc:	84 1f       	adc	r24, r20
    25ce:	95 1f       	adc	r25, r21
    25d0:	a0 1d       	adc	r26, r0
    25d2:	08 95       	ret

000025d4 <_exit>:
    25d4:	f8 94       	cli

000025d6 <__stop_program>:
    25d6:	ff cf       	rjmp	.-2      	; 0x25d6 <__stop_program>
