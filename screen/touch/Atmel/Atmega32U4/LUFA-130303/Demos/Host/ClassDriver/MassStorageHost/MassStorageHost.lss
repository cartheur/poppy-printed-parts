
MassStorageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000026aa  0000273e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800124  00800124  00002762  2**0
                  ALLOC
  3 .stab         0000240c  00000000  00000000  00002764  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e36  00000000  00000000  00004b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000788  00000000  00000000  000059a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001153  00000000  00000000  0000612e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000d02a  00000000  00000000  00007281  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d4f  00000000  00000000  000142ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009a76  00000000  00000000  00016ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c70  00000000  00000000  00020a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004dd1  00000000  00000000  000216e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007290  00000000  00000000  000264b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001edd  00000000  00000000  0002d741  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a60  00000000  00000000  0002f61e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
       2:	00 00       	nop
       4:	22 c2       	rjmp	.+1092   	; 0x44a <__bad_interrupt>
       6:	00 00       	nop
       8:	20 c2       	rjmp	.+1088   	; 0x44a <__bad_interrupt>
       a:	00 00       	nop
       c:	1e c2       	rjmp	.+1084   	; 0x44a <__bad_interrupt>
       e:	00 00       	nop
      10:	1c c2       	rjmp	.+1080   	; 0x44a <__bad_interrupt>
      12:	00 00       	nop
      14:	1a c2       	rjmp	.+1076   	; 0x44a <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c2       	rjmp	.+1072   	; 0x44a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	16 c2       	rjmp	.+1068   	; 0x44a <__bad_interrupt>
      1e:	00 00       	nop
      20:	14 c2       	rjmp	.+1064   	; 0x44a <__bad_interrupt>
      22:	00 00       	nop
      24:	12 c2       	rjmp	.+1060   	; 0x44a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_10>
      2c:	0e c2       	rjmp	.+1052   	; 0x44a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c c2       	rjmp	.+1048   	; 0x44a <__bad_interrupt>
      32:	00 00       	nop
      34:	0a c2       	rjmp	.+1044   	; 0x44a <__bad_interrupt>
      36:	00 00       	nop
      38:	08 c2       	rjmp	.+1040   	; 0x44a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	06 c2       	rjmp	.+1036   	; 0x44a <__bad_interrupt>
      3e:	00 00       	nop
      40:	04 c2       	rjmp	.+1032   	; 0x44a <__bad_interrupt>
      42:	00 00       	nop
      44:	02 c2       	rjmp	.+1028   	; 0x44a <__bad_interrupt>
      46:	00 00       	nop
      48:	00 c2       	rjmp	.+1024   	; 0x44a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fe c1       	rjmp	.+1020   	; 0x44a <__bad_interrupt>
      4e:	00 00       	nop
      50:	fc c1       	rjmp	.+1016   	; 0x44a <__bad_interrupt>
      52:	00 00       	nop
      54:	fa c1       	rjmp	.+1012   	; 0x44a <__bad_interrupt>
      56:	00 00       	nop
      58:	f8 c1       	rjmp	.+1008   	; 0x44a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f6 c1       	rjmp	.+1004   	; 0x44a <__bad_interrupt>
      5e:	00 00       	nop
      60:	f4 c1       	rjmp	.+1000   	; 0x44a <__bad_interrupt>
      62:	00 00       	nop
      64:	f2 c1       	rjmp	.+996    	; 0x44a <__bad_interrupt>
      66:	00 00       	nop
      68:	f0 c1       	rjmp	.+992    	; 0x44a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ee c1       	rjmp	.+988    	; 0x44a <__bad_interrupt>
      6e:	00 00       	nop
      70:	ec c1       	rjmp	.+984    	; 0x44a <__bad_interrupt>
      72:	00 00       	nop
      74:	ea c1       	rjmp	.+980    	; 0x44a <__bad_interrupt>
      76:	00 00       	nop
      78:	e8 c1       	rjmp	.+976    	; 0x44a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e6 c1       	rjmp	.+972    	; 0x44a <__bad_interrupt>
      7e:	00 00       	nop
      80:	e4 c1       	rjmp	.+968    	; 0x44a <__bad_interrupt>
      82:	00 00       	nop
      84:	e2 c1       	rjmp	.+964    	; 0x44a <__bad_interrupt>
      86:	00 00       	nop
      88:	e0 c1       	rjmp	.+960    	; 0x44a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	de c1       	rjmp	.+956    	; 0x44a <__bad_interrupt>
      8e:	00 00       	nop
      90:	dc c1       	rjmp	.+952    	; 0x44a <__bad_interrupt>
      92:	00 00       	nop
      94:	da c1       	rjmp	.+948    	; 0x44a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4368>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4361>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4356>:
     11d:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 44 65 76     Mass Storage Dev
     12d:	69 63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d     ice Enumerated..
     13d:	0a 00                                               ..

0000013f <__c.4354>:
     13f:	56 65 6e 64 6f 72 20 22 25 2e 38 73 22 2c 20 50     Vendor "%.8s", P
     14f:	72 6f 64 75 63 74 20 22 25 2e 31 36 73 22 0d 0a     roduct "%.16s"..
     15f:	00                                                  .

00000160 <__c.4352>:
     160:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     170:	20 64 65 76 69 63 65 20 49 6e 71 75 69 72 79 20      device Inquiry 
     180:	64 61 74 61 2e 0d 0a 00                             data....

00000188 <__c.4349>:
     188:	45 72 72 6f 72 20 73 65 74 74 69 6e 67 20 50 72     Error setting Pr
     198:	65 76 65 6e 74 20 44 65 76 69 63 65 20 52 65 6d     event Device Rem
     1a8:	6f 76 61 6c 20 62 69 74 2e 0d 0a 00                 oval bit....

000001b4 <__c.4347>:
     1b4:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     1c4:	20 64 65 76 69 63 65 20 73 65 6e 73 65 2e 0d 0a      device sense...
     1d4:	00                                                  .

000001d5 <__c.4344>:
     1d5:	45 72 72 6f 72 20 72 65 73 65 74 74 69 6e 67 20     Error resetting 
     1e5:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 69 6e 74     Mass Storage int
     1f5:	65 72 66 61 63 65 2e 0d 0a 00                       erface....

000001ff <__c.4342>:
     1ff:	54 6f 74 61 6c 20 4c 55 4e 73 3a 20 25 64 20 2d     Total LUNs: %d -
     20f:	20 55 73 69 6e 67 20 66 69 72 73 74 20 4c 55 4e      Using first LUN
     21f:	20 69 6e 20 64 65 76 69 63 65 2e 0d 0a 00            in device....

0000022d <__c.4340>:
     22d:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     23d:	20 6d 61 78 20 4c 55 4e 20 69 6e 64 65 78 2e 0d      max LUN index..
     24d:	0a 00                                               ..

0000024f <__c.4337>:
     24f:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     25f:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     26f:	6f 6e 2e 0d 0a 00                                   on....

00000275 <__c.4335>:
     275:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     285:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 61 73 73     Not a Valid Mass
     295:	20 53 74 6f 72 61 67 65 20 44 65 76 69 63 65 2e      Storage Device.
     2a5:	0d 0a 00                                            ...

000002a8 <__c.4333>:
     2a8:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     2b8:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     2c8:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000002d5 <__c.4326>:
     2d5:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     2e5:	68 65 64 2e 0d 0a 00                                hed....

000002ec <__c.4321>:
     2ec:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     2fc:	0d 0a 00                                            ...

000002ff <__c.4313>:
     2ff:	0d 0a 00                                            ...

00000302 <__c.4306>:
     302:	20 20 20 20 00                                          .

00000307 <__c.4301>:
     307:	25 2e 32 58 20 00                                   %.2X .

0000030d <__c.4295>:
     30d:	0d 0a 43 6f 6e 74 65 6e 74 73 20 6f 66 20 66 69     ..Contents of fi
     31d:	72 73 74 20 62 6c 6f 63 6b 3a 0d 0a 00              rst block:...

0000032a <__c.4293>:
     32a:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 65     Error reading de
     33a:	76 69 63 65 20 62 6c 6f 63 6b 2e 0d 0a 00           vice block....

00000348 <__c.4290>:
     348:	25 6c 75 20 62 6c 6f 63 6b 73 20 6f 66 20 25 6c     %lu blocks of %l
     358:	75 20 62 79 74 65 73 2e 0d 0a 00                    u bytes....

00000363 <__c.4288>:
     363:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     373:	20 64 65 76 69 63 65 20 63 61 70 61 63 69 74 79      device capacity
     383:	2e 0d 0a 00                                         ....

00000387 <__c.4285>:
     387:	52 65 74 72 69 65 76 69 6e 67 20 43 61 70 61 63     Retrieving Capac
     397:	69 74 79 2e 2e 2e 0d 0a 00                          ity......

000003a0 <__c.4282>:
     3a0:	45 72 72 6f 72 20 77 61 69 74 69 6e 67 20 66 6f     Error waiting fo
     3b0:	72 20 64 65 76 69 63 65 20 74 6f 20 62 65 20 72     r device to be r
     3c0:	65 61 64 79 2e 0d 0a 00                             eady....

000003c8 <__c.4278>:
     3c8:	57 61 69 74 69 6e 67 20 75 6e 74 69 6c 20 72 65     Waiting until re
     3d8:	61 64 79 2e 2e 2e 0d 0a 00                          ady......

000003e1 <__c.4269>:
     3e1:	1b 5b 33 36 6d 4d 61 73 73 20 53 74 6f 72 61 67     .[36mMass Storag
     3f1:	65 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     e Host Demo runn
     401:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

0000040e <__ctors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d0 e2       	ldi	r29, 0x20	; 32
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61

0000041a <__do_copy_data>:
     41a:	11 e0       	ldi	r17, 0x01	; 1
     41c:	a0 e0       	ldi	r26, 0x00	; 0
     41e:	b1 e0       	ldi	r27, 0x01	; 1
     420:	ea ea       	ldi	r30, 0xAA	; 170
     422:	f6 e2       	ldi	r31, 0x26	; 38
     424:	00 e0       	ldi	r16, 0x00	; 0
     426:	0b bf       	out	0x3b, r16	; 59
     428:	02 c0       	rjmp	.+4      	; 0x42e <__do_copy_data+0x14>
     42a:	07 90       	elpm	r0, Z+
     42c:	0d 92       	st	X+, r0
     42e:	a4 32       	cpi	r26, 0x24	; 36
     430:	b1 07       	cpc	r27, r17
     432:	d9 f7       	brne	.-10     	; 0x42a <__do_copy_data+0x10>

00000434 <__do_clear_bss>:
     434:	11 e0       	ldi	r17, 0x01	; 1
     436:	a4 e2       	ldi	r26, 0x24	; 36
     438:	b1 e0       	ldi	r27, 0x01	; 1
     43a:	01 c0       	rjmp	.+2      	; 0x43e <.do_clear_bss_start>

0000043c <.do_clear_bss_loop>:
     43c:	1d 92       	st	X+, r1

0000043e <.do_clear_bss_start>:
     43e:	a6 34       	cpi	r26, 0x46	; 70
     440:	b1 07       	cpc	r27, r17
     442:	e1 f7       	brne	.-8      	; 0x43c <.do_clear_bss_loop>
     444:	87 d1       	rcall	.+782    	; 0x754 <main>
     446:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <_exit>

0000044a <__bad_interrupt>:
     44a:	da cd       	rjmp	.-1100   	; 0x0 <__vectors>

0000044c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     44c:	9b b1       	in	r25, 0x0b	; 11
     44e:	9f 70       	andi	r25, 0x0F	; 15
     450:	98 2b       	or	r25, r24
     452:	9b b9       	out	0x0b, r25	; 11
			}
     454:	08 95       	ret

00000456 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     456:	84 b7       	in	r24, 0x34	; 52
     458:	87 7f       	andi	r24, 0xF7	; 247
     45a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     45c:	28 e1       	ldi	r18, 0x18	; 24
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	20 93 60 00 	sts	0x0060, r18
     466:	10 92 60 00 	sts	0x0060, r1
     46a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	80 e8       	ldi	r24, 0x80	; 128
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	80 93 61 00 	sts	0x0061, r24
     478:	90 93 61 00 	sts	0x0061, r25
     47c:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     47e:	83 e3       	ldi	r24, 0x33	; 51
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	90 93 cd 00 	sts	0x00CD, r25
     486:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     48a:	86 e0       	ldi	r24, 0x06	; 6
     48c:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     490:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     494:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     498:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     49a:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     49c:	8a b1       	in	r24, 0x0a	; 10
     49e:	80 6f       	ori	r24, 0xF0	; 240
     4a0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     4a2:	8b b1       	in	r24, 0x0b	; 11
     4a4:	8f 70       	andi	r24, 0x0F	; 15
     4a6:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     4a8:	6d d6       	rcall	.+3290   	; 0x1184 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0c 94 12 10 	jmp	0x2024	; 0x2024 <Serial_CreateStream>

000004b2 <MassStorageHost_Task>:

/** Task to manage an enumerated USB Mass Storage device once connected, to print out
 *  data from the device.
 */
void MassStorageHost_Task(void)
{
     4b2:	2f 92       	push	r2
     4b4:	3f 92       	push	r3
     4b6:	4f 92       	push	r4
     4b8:	5f 92       	push	r5
     4ba:	6f 92       	push	r6
     4bc:	7f 92       	push	r7
     4be:	8f 92       	push	r8
     4c0:	9f 92       	push	r9
     4c2:	af 92       	push	r10
     4c4:	bf 92       	push	r11
     4c6:	cf 92       	push	r12
     4c8:	df 92       	push	r13
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	df 93       	push	r29
     4d4:	cf 93       	push	r28
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
     4da:	2c 97       	sbiw	r28, 0x0c	; 12
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	cd bf       	out	0x3d, r28	; 61
		printf_P(PSTR("\r\n"));
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     4e6:	ed b6       	in	r14, 0x3d	; 61
     4e8:	fe b6       	in	r15, 0x3e	; 62
     4ea:	fa 86       	std	Y+10, r15	; 0x0a
     4ec:	e9 86       	std	Y+9, r14	; 0x09
/** Task to manage an enumerated USB Mass Storage device once connected, to print out
 *  data from the device.
 */
void MassStorageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     4ee:	80 91 31 01 	lds	r24, 0x0131
     4f2:	8b 30       	cpi	r24, 0x0B	; 11
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <MassStorageHost_Task+0x46>
     4f6:	0e c1       	rjmp	.+540    	; 0x714 <MassStorageHost_Task+0x262>
	  return;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     4f8:	80 e2       	ldi	r24, 0x20	; 32
     4fa:	a8 df       	rcall	.-176    	; 0x44c <LEDs_SetAllLEDs>

	puts_P(PSTR("Waiting until ready...\r\n"));
     4fc:	88 ec       	ldi	r24, 0xC8	; 200
     4fe:	93 e0       	ldi	r25, 0x03	; 3
     500:	0e 94 a1 10 	call	0x2142	; 0x2142 <puts_P>

	for (;;)
	{
		uint8_t ErrorCode = MS_Host_TestUnitReady(&FlashDisk_MS_Interface, 0);
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <MS_Host_TestUnitReady>

		if (!(ErrorCode))
     50e:	88 23       	and	r24, r24
     510:	29 f0       	breq	.+10     	; 0x51c <MassStorageHost_Task+0x6a>
		  break;

		/* Check if an error other than a logical command error (device busy) received */
		if (ErrorCode != MS_ERROR_LOGICAL_CMD_FAILED)
     512:	80 38       	cpi	r24, 0x80	; 128
     514:	b9 f3       	breq	.-18     	; 0x504 <MassStorageHost_Task+0x52>
		{
			puts_P(PSTR("Error waiting for device to be ready.\r\n"));
     516:	80 ea       	ldi	r24, 0xA0	; 160
     518:	93 e0       	ldi	r25, 0x03	; 3
     51a:	10 c0       	rjmp	.+32     	; 0x53c <MassStorageHost_Task+0x8a>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("Retrieving Capacity...\r\n"));
     51c:	87 e8       	ldi	r24, 0x87	; 135
     51e:	93 e0       	ldi	r25, 0x03	; 3
     520:	0e 94 a1 10 	call	0x2142	; 0x2142 <puts_P>

	SCSI_Capacity_t DiskCapacity;
	if (MS_Host_ReadDeviceCapacity(&FlashDisk_MS_Interface, 0, &DiskCapacity))
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	ae 01       	movw	r20, r28
     52c:	4f 5f       	subi	r20, 0xFF	; 255
     52e:	5f 4f       	sbci	r21, 0xFF	; 255
     530:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <MS_Host_ReadDeviceCapacity>
     534:	88 23       	and	r24, r24
     536:	51 f0       	breq	.+20     	; 0x54c <MassStorageHost_Task+0x9a>
	{
		puts_P(PSTR("Error retrieving device capacity.\r\n"));
     538:	83 e6       	ldi	r24, 0x63	; 99
     53a:	93 e0       	ldi	r25, 0x03	; 3
     53c:	0e 94 a1 10 	call	0x2142	; 0x2142 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     540:	80 e9       	ldi	r24, 0x90	; 144
     542:	84 df       	rcall	.-248    	; 0x44c <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	0e 94 33 0b 	call	0x1666	; 0x1666 <USB_Host_SetDeviceConfiguration>
		return;
     54a:	e4 c0       	rjmp	.+456    	; 0x714 <MassStorageHost_Task+0x262>
	}

	printf_P(PSTR("%lu blocks of %lu bytes.\r\n"), DiskCapacity.Blocks, DiskCapacity.BlockSize);
     54c:	2d b7       	in	r18, 0x3d	; 61
     54e:	3e b7       	in	r19, 0x3e	; 62
     550:	2a 50       	subi	r18, 0x0A	; 10
     552:	30 40       	sbci	r19, 0x00	; 0
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	3e bf       	out	0x3e, r19	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	2d bf       	out	0x3d, r18	; 61
     55e:	ed b7       	in	r30, 0x3d	; 61
     560:	fe b7       	in	r31, 0x3e	; 62
     562:	31 96       	adiw	r30, 0x01	; 1
     564:	88 e4       	ldi	r24, 0x48	; 72
     566:	93 e0       	ldi	r25, 0x03	; 3
     568:	ad b7       	in	r26, 0x3d	; 61
     56a:	be b7       	in	r27, 0x3e	; 62
     56c:	12 96       	adiw	r26, 0x02	; 2
     56e:	9c 93       	st	X, r25
     570:	8e 93       	st	-X, r24
     572:	11 97       	sbiw	r26, 0x01	; 1
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	9a 81       	ldd	r25, Y+2	; 0x02
     578:	ab 81       	ldd	r26, Y+3	; 0x03
     57a:	bc 81       	ldd	r27, Y+4	; 0x04
     57c:	82 83       	std	Z+2, r24	; 0x02
     57e:	93 83       	std	Z+3, r25	; 0x03
     580:	a4 83       	std	Z+4, r26	; 0x04
     582:	b5 83       	std	Z+5, r27	; 0x05
     584:	8d 81       	ldd	r24, Y+5	; 0x05
     586:	9e 81       	ldd	r25, Y+6	; 0x06
     588:	af 81       	ldd	r26, Y+7	; 0x07
     58a:	b8 85       	ldd	r27, Y+8	; 0x08
     58c:	86 83       	std	Z+6, r24	; 0x06
     58e:	97 83       	std	Z+7, r25	; 0x07
     590:	a0 87       	std	Z+8, r26	; 0x08
     592:	b1 87       	std	Z+9, r27	; 0x09
     594:	0e 94 82 10 	call	0x2104	; 0x2104 <printf_P>

	uint8_t BlockBuffer[DiskCapacity.BlockSize];
     598:	8d 81       	ldd	r24, Y+5	; 0x05
     59a:	9e 81       	ldd	r25, Y+6	; 0x06
     59c:	af 81       	ldd	r26, Y+7	; 0x07
     59e:	b8 85       	ldd	r27, Y+8	; 0x08
     5a0:	ed b7       	in	r30, 0x3d	; 61
     5a2:	fe b7       	in	r31, 0x3e	; 62
     5a4:	3a 96       	adiw	r30, 0x0a	; 10
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	fe bf       	out	0x3e, r31	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	ed bf       	out	0x3d, r30	; 61
     5b0:	ae 2e       	mov	r10, r30
     5b2:	1f 2f       	mov	r17, r31
     5b4:	8e 2e       	mov	r8, r30
     5b6:	fb 87       	std	Y+11, r31	; 0x0b
     5b8:	2d b7       	in	r18, 0x3d	; 61
     5ba:	3e b7       	in	r19, 0x3e	; 62
     5bc:	28 1b       	sub	r18, r24
     5be:	39 0b       	sbc	r19, r25
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	3e bf       	out	0x3e, r19	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	2d bf       	out	0x3d, r18	; 61
     5ca:	2d b6       	in	r2, 0x3d	; 61
     5cc:	3e b6       	in	r3, 0x3e	; 62
     5ce:	08 94       	sec
     5d0:	21 1c       	adc	r2, r1
     5d2:	31 1c       	adc	r3, r1

	if (MS_Host_ReadDeviceBlocks(&FlashDisk_MS_Interface, 0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer))
     5d4:	ed 80       	ldd	r14, Y+5	; 0x05
     5d6:	fe 80       	ldd	r15, Y+6	; 0x06
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	a9 01       	movw	r20, r18
     5e4:	01 e0       	ldi	r16, 0x01	; 1
     5e6:	61 01       	movw	r12, r2
     5e8:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <MS_Host_ReadDeviceBlocks>
     5ec:	88 23       	and	r24, r24
     5ee:	61 f0       	breq	.+24     	; 0x608 <MassStorageHost_Task+0x156>
	{
		puts_P(PSTR("Error reading device block.\r\n"));
     5f0:	8a e2       	ldi	r24, 0x2A	; 42
     5f2:	93 e0       	ldi	r25, 0x03	; 3
     5f4:	0e 94 a1 10 	call	0x2142	; 0x2142 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5f8:	80 e9       	ldi	r24, 0x90	; 144
     5fa:	28 df       	rcall	.-432    	; 0x44c <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	0e 94 33 0b 	call	0x1666	; 0x1666 <USB_Host_SetDeviceConfiguration>
     602:	3a 2d       	mov	r19, r10
     604:	21 2f       	mov	r18, r17
     606:	7f c0       	rjmp	.+254    	; 0x706 <MassStorageHost_Task+0x254>
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));
     608:	8d e0       	ldi	r24, 0x0D	; 13
     60a:	93 e0       	ldi	r25, 0x03	; 3
     60c:	0e 94 a1 10 	call	0x2142	; 0x2142 <puts_P>

	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     610:	ee 24       	eor	r14, r14
     612:	ff 24       	eor	r15, r15

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			printf_P(PSTR("%.2X "), CurrByte);
     614:	b7 e0       	ldi	r27, 0x07	; 7
     616:	ab 2e       	mov	r10, r27
     618:	b3 e0       	ldi	r27, 0x03	; 3
     61a:	bb 2e       	mov	r11, r27
		}

		printf_P(PSTR("    "));
     61c:	a2 e0       	ldi	r26, 0x02	; 2
     61e:	6a 2e       	mov	r6, r26
     620:	a3 e0       	ldi	r26, 0x03	; 3
     622:	7a 2e       	mov	r7, r26
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			putchar(isprint(CurrByte) ? CurrByte : '.');
		}

		printf_P(PSTR("\r\n"));
     624:	ff ef       	ldi	r31, 0xFF	; 255
     626:	4f 2e       	mov	r4, r31
     628:	f2 e0       	ldi	r31, 0x02	; 2
     62a:	5f 2e       	mov	r5, r31
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     62c:	52 c0       	rjmp	.+164    	; 0x6d2 <MassStorageHost_Task+0x220>
	{
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];
     62e:	87 01       	movw	r16, r14
     630:	e4 e0       	ldi	r30, 0x04	; 4
     632:	00 0f       	add	r16, r16
     634:	11 1f       	adc	r17, r17
     636:	ea 95       	dec	r30
     638:	e1 f7       	brne	.-8      	; 0x632 <MassStorageHost_Task+0x180>
     63a:	02 0d       	add	r16, r2
     63c:	13 1d       	adc	r17, r3
     63e:	68 01       	movw	r12, r16

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     640:	20 e0       	ldi	r18, 0x00	; 0
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     642:	d6 01       	movw	r26, r12
     644:	8d 91       	ld	r24, X+
     646:	6d 01       	movw	r12, r26
			printf_P(PSTR("%.2X "), CurrByte);
     648:	00 d0       	rcall	.+0      	; 0x64a <MassStorageHost_Task+0x198>
     64a:	00 d0       	rcall	.+0      	; 0x64c <MassStorageHost_Task+0x19a>
     64c:	ed b7       	in	r30, 0x3d	; 61
     64e:	fe b7       	in	r31, 0x3e	; 62
     650:	31 96       	adiw	r30, 0x01	; 1
     652:	ad b7       	in	r26, 0x3d	; 61
     654:	be b7       	in	r27, 0x3e	; 62
     656:	12 96       	adiw	r26, 0x02	; 2
     658:	bc 92       	st	X, r11
     65a:	ae 92       	st	-X, r10
     65c:	11 97       	sbiw	r26, 0x01	; 1
     65e:	82 83       	std	Z+2, r24	; 0x02
     660:	13 82       	std	Z+3, r1	; 0x03
     662:	2c 87       	std	Y+12, r18	; 0x0c
     664:	0e 94 82 10 	call	0x2104	; 0x2104 <printf_P>
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
	{
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     668:	2c 85       	ldd	r18, Y+12	; 0x0c
     66a:	2f 5f       	subi	r18, 0xFF	; 255
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	20 31       	cpi	r18, 0x10	; 16
     676:	29 f7       	brne	.-54     	; 0x642 <MassStorageHost_Task+0x190>
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			printf_P(PSTR("%.2X "), CurrByte);
		}

		printf_P(PSTR("    "));
     678:	00 d0       	rcall	.+0      	; 0x67a <MassStorageHost_Task+0x1c8>
     67a:	ed b7       	in	r30, 0x3d	; 61
     67c:	fe b7       	in	r31, 0x3e	; 62
     67e:	72 82       	std	Z+2, r7	; 0x02
     680:	61 82       	std	Z+1, r6	; 0x01
     682:	0e 94 82 10 	call	0x2104	; 0x2104 <printf_P>
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     68a:	99 24       	eor	r9, r9
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     68c:	d8 01       	movw	r26, r16
     68e:	cd 90       	ld	r12, X+
     690:	8d 01       	movw	r16, r26
			putchar(isprint(CurrByte) ? CurrByte : '.');
     692:	dd 24       	eor	r13, r13
     694:	c6 01       	movw	r24, r12
     696:	0e 94 50 10 	call	0x20a0	; 0x20a0 <isprint>
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	19 f4       	brne	.+6      	; 0x6a4 <MassStorageHost_Task+0x1f2>
     69e:	7e e2       	ldi	r23, 0x2E	; 46
     6a0:	c7 2e       	mov	r12, r23
     6a2:	d1 2c       	mov	r13, r1
     6a4:	60 91 42 01 	lds	r22, 0x0142
     6a8:	70 91 43 01 	lds	r23, 0x0143
     6ac:	c6 01       	movw	r24, r12
     6ae:	0e 94 56 10 	call	0x20ac	; 0x20ac <fputc>
		}

		printf_P(PSTR("    "));

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     6b2:	93 94       	inc	r9
     6b4:	b9 2d       	mov	r27, r9
     6b6:	b0 31       	cpi	r27, 0x10	; 16
     6b8:	49 f7       	brne	.-46     	; 0x68c <MassStorageHost_Task+0x1da>
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			putchar(isprint(CurrByte) ? CurrByte : '.');
		}

		printf_P(PSTR("\r\n"));
     6ba:	00 d0       	rcall	.+0      	; 0x6bc <MassStorageHost_Task+0x20a>
     6bc:	ed b7       	in	r30, 0x3d	; 61
     6be:	fe b7       	in	r31, 0x3e	; 62
     6c0:	52 82       	std	Z+2, r5	; 0x02
     6c2:	41 82       	std	Z+1, r4	; 0x01
     6c4:	0e 94 82 10 	call	0x2104	; 0x2104 <printf_P>
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     6c8:	08 94       	sec
     6ca:	e1 1c       	adc	r14, r1
     6cc:	f1 1c       	adc	r15, r1
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	97 01       	movw	r18, r14
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	8d 81       	ldd	r24, Y+5	; 0x05
     6da:	9e 81       	ldd	r25, Y+6	; 0x06
     6dc:	af 81       	ldd	r26, Y+7	; 0x07
     6de:	b8 85       	ldd	r27, Y+8	; 0x08
     6e0:	64 e0       	ldi	r22, 0x04	; 4
     6e2:	b6 95       	lsr	r27
     6e4:	a7 95       	ror	r26
     6e6:	97 95       	ror	r25
     6e8:	87 95       	ror	r24
     6ea:	6a 95       	dec	r22
     6ec:	d1 f7       	brne	.-12     	; 0x6e2 <MassStorageHost_Task+0x230>
     6ee:	28 17       	cp	r18, r24
     6f0:	39 07       	cpc	r19, r25
     6f2:	4a 07       	cpc	r20, r26
     6f4:	5b 07       	cpc	r21, r27
     6f6:	08 f4       	brcc	.+2      	; 0x6fa <MassStorageHost_Task+0x248>
     6f8:	9a cf       	rjmp	.-204    	; 0x62e <MassStorageHost_Task+0x17c>
		}

		printf_P(PSTR("\r\n"));
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     6fa:	80 e6       	ldi	r24, 0x60	; 96
     6fc:	a7 de       	rcall	.-690    	; 0x44c <LEDs_SetAllLEDs>
	USB_Host_SetDeviceConfiguration(0);
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	b2 d7       	rcall	.+3940   	; 0x1666 <USB_Host_SetDeviceConfiguration>
     702:	38 2d       	mov	r19, r8
     704:	2b 85       	ldd	r18, Y+11	; 0x0b
     706:	83 2f       	mov	r24, r19
     708:	92 2f       	mov	r25, r18
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	9e bf       	out	0x3e, r25	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	8d bf       	out	0x3d, r24	; 61
}
     714:	e9 84       	ldd	r14, Y+9	; 0x09
     716:	fa 84       	ldd	r15, Y+10	; 0x0a
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	fe be       	out	0x3e, r15	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	ed be       	out	0x3d, r14	; 61
     722:	2c 96       	adiw	r28, 0x0c	; 12
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	de bf       	out	0x3e, r29	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	cd bf       	out	0x3d, r28	; 61
     72e:	cf 91       	pop	r28
     730:	df 91       	pop	r29
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	bf 90       	pop	r11
     740:	af 90       	pop	r10
     742:	9f 90       	pop	r9
     744:	8f 90       	pop	r8
     746:	7f 90       	pop	r7
     748:	6f 90       	pop	r6
     74a:	5f 90       	pop	r5
     74c:	4f 90       	pop	r4
     74e:	3f 90       	pop	r3
     750:	2f 90       	pop	r2
     752:	08 95       	ret

00000754 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     754:	80 de       	rcall	.-768    	; 0x456 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mass Storage Host Demo running.\r\n" ESC_FG_WHITE));
     756:	81 ee       	ldi	r24, 0xE1	; 225
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	0e 94 a1 10 	call	0x2142	; 0x2142 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     75e:	80 e1       	ldi	r24, 0x10	; 16
     760:	75 de       	rcall	.-790    	; 0x44c <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     762:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		MassStorageHost_Task();
     764:	a6 de       	rcall	.-692    	; 0x4b2 <MassStorageHost_Task>

		MS_Host_USBTask(&FlashDisk_MS_Interface);
		USB_USBTask();
     766:	bb d7       	rcall	.+3958   	; 0x16de <USB_USBTask>
     768:	fd cf       	rjmp	.-6      	; 0x764 <main+0x10>

0000076a <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     76a:	8c ee       	ldi	r24, 0xEC	; 236
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	0e 94 a1 10 	call	0x2142	; 0x2142 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     772:	80 ea       	ldi	r24, 0xA0	; 160
}
     774:	6b ce       	rjmp	.-810    	; 0x44c <LEDs_SetAllLEDs>

00000776 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     776:	85 ed       	ldi	r24, 0xD5	; 213
     778:	92 e0       	ldi	r25, 0x02	; 2
     77a:	0e 94 a1 10 	call	0x2142	; 0x2142 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     77e:	80 e1       	ldi	r24, 0x10	; 16
}
     780:	65 ce       	rjmp	.-822    	; 0x44c <LEDs_SetAllLEDs>

00000782 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	df 93       	push	r29
     788:	cf 93       	push	r28
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	c9 53       	subi	r28, 0x39	; 57
     790:	d2 40       	sbci	r29, 0x02	; 2
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     79c:	80 ea       	ldi	r24, 0xA0	; 160
     79e:	56 de       	rcall	.-852    	; 0x44c <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     7a0:	8e 01       	movw	r16, r28
     7a2:	06 5c       	subi	r16, 0xC6	; 198
     7a4:	1f 4f       	sbci	r17, 0xFF	; 255
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	be 01       	movw	r22, r28
     7aa:	6e 5f       	subi	r22, 0xFE	; 254
     7ac:	7f 4f       	sbci	r23, 0xFF	; 255
     7ae:	a8 01       	movw	r20, r16
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	32 e0       	ldi	r19, 0x02	; 2
     7b4:	95 d5       	rcall	.+2858   	; 0x12e0 <USB_Host_GetDeviceConfigDescriptor>
     7b6:	88 23       	and	r24, r24
     7b8:	19 f0       	breq	.+6      	; 0x7c0 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     7ba:	88 ea       	ldi	r24, 0xA8	; 168
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	12 c0       	rjmp	.+36     	; 0x7e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (MS_Host_ConfigurePipes(&FlashDisk_MS_Interface,
     7c0:	6a 81       	ldd	r22, Y+2	; 0x02
     7c2:	7b 81       	ldd	r23, Y+3	; 0x03
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	a8 01       	movw	r20, r16
     7ca:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <MS_Host_ConfigurePipes>
     7ce:	88 23       	and	r24, r24
     7d0:	19 f0       	breq	.+6      	; 0x7d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x56>
	                           ConfigDescriptorSize, ConfigDescriptorData) != MS_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Mass Storage Device.\r\n"));
     7d2:	85 e7       	ldi	r24, 0x75	; 117
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	45 d7       	rcall	.+3722   	; 0x1666 <USB_Host_SetDeviceConfiguration>
     7dc:	88 23       	and	r24, r24
     7de:	31 f0       	breq	.+12     	; 0x7ec <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     7e0:	8f e4       	ldi	r24, 0x4F	; 79
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	0e 94 a1 10 	call	0x2142	; 0x2142 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     7e8:	80 e9       	ldi	r24, 0x90	; 144
     7ea:	7c c0       	rjmp	.+248    	; 0x8e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x162>
		return;
	}

	uint8_t MaxLUNIndex;
	if (MS_Host_GetMaxLUN(&FlashDisk_MS_Interface, &MaxLUNIndex))
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	be 01       	movw	r22, r28
     7f2:	6f 5f       	subi	r22, 0xFF	; 255
     7f4:	7f 4f       	sbci	r23, 0xFF	; 255
     7f6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <MS_Host_GetMaxLUN>
     7fa:	88 23       	and	r24, r24
     7fc:	19 f0       	breq	.+6      	; 0x804 <EVENT_USB_Host_DeviceEnumerationComplete+0x82>
	{
		puts_P(PSTR("Error retrieving max LUN index.\r\n"));
     7fe:	8d e2       	ldi	r24, 0x2D	; 45
     800:	92 e0       	ldi	r25, 0x02	; 2
     802:	44 c0       	rjmp	.+136    	; 0x88c <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Total LUNs: %d - Using first LUN in device.\r\n"), (MaxLUNIndex + 1));
     804:	00 d0       	rcall	.+0      	; 0x806 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
     806:	00 d0       	rcall	.+0      	; 0x808 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
     808:	8f ef       	ldi	r24, 0xFF	; 255
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	ad b7       	in	r26, 0x3d	; 61
     80e:	be b7       	in	r27, 0x3e	; 62
     810:	12 96       	adiw	r26, 0x02	; 2
     812:	9c 93       	st	X, r25
     814:	8e 93       	st	-X, r24
     816:	11 97       	sbiw	r26, 0x01	; 1
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	14 96       	adiw	r26, 0x04	; 4
     820:	9c 93       	st	X, r25
     822:	8e 93       	st	-X, r24
     824:	13 97       	sbiw	r26, 0x03	; 3
     826:	0e 94 82 10 	call	0x2104	; 0x2104 <printf_P>

	if (MS_Host_ResetMSInterface(&FlashDisk_MS_Interface))
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <MS_Host_ResetMSInterface>
     83a:	88 23       	and	r24, r24
     83c:	19 f0       	breq	.+6      	; 0x844 <EVENT_USB_Host_DeviceEnumerationComplete+0xc2>
	{
		puts_P(PSTR("Error resetting Mass Storage interface.\r\n"));
     83e:	85 ed       	ldi	r24, 0xD5	; 213
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	24 c0       	rjmp	.+72     	; 0x88c <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	SCSI_Request_Sense_Response_t SenseData;
	if (MS_Host_RequestSense(&FlashDisk_MS_Interface, 0, &SenseData) != 0)
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	ae 01       	movw	r20, r28
     84c:	4c 5f       	subi	r20, 0xFC	; 252
     84e:	5f 4f       	sbci	r21, 0xFF	; 255
     850:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <MS_Host_RequestSense>
     854:	88 23       	and	r24, r24
     856:	19 f0       	breq	.+6      	; 0x85e <EVENT_USB_Host_DeviceEnumerationComplete+0xdc>
	{
		puts_P(PSTR("Error retrieving device sense.\r\n"));
     858:	84 eb       	ldi	r24, 0xB4	; 180
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	17 c0       	rjmp	.+46     	; 0x88c <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	if (MS_Host_PreventAllowMediumRemoval(&FlashDisk_MS_Interface, 0, true))
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	41 e0       	ldi	r20, 0x01	; 1
     866:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <MS_Host_PreventAllowMediumRemoval>
     86a:	88 23       	and	r24, r24
     86c:	19 f0       	breq	.+6      	; 0x874 <EVENT_USB_Host_DeviceEnumerationComplete+0xf2>
	{
		puts_P(PSTR("Error setting Prevent Device Removal bit.\r\n"));
     86e:	88 e8       	ldi	r24, 0x88	; 136
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0c c0       	rjmp	.+24     	; 0x88c <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	SCSI_Inquiry_Response_t InquiryData;
	if (MS_Host_GetInquiryData(&FlashDisk_MS_Interface, 0, &InquiryData))
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	ae 01       	movw	r20, r28
     87c:	4a 5e       	subi	r20, 0xEA	; 234
     87e:	5f 4f       	sbci	r21, 0xFF	; 255
     880:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MS_Host_GetInquiryData>
     884:	88 23       	and	r24, r24
     886:	49 f0       	breq	.+18     	; 0x89a <EVENT_USB_Host_DeviceEnumerationComplete+0x118>
	{
		puts_P(PSTR("Error retrieving device Inquiry data.\r\n"));
     888:	80 e6       	ldi	r24, 0x60	; 96
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 a1 10 	call	0x2142	; 0x2142 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     890:	80 e9       	ldi	r24, 0x90	; 144
     892:	dc dd       	rcall	.-1096   	; 0x44c <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	e7 d6       	rcall	.+3534   	; 0x1666 <USB_Host_SetDeviceConfiguration>
		return;
     898:	26 c0       	rjmp	.+76     	; 0x8e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x164>
	}

	printf_P(PSTR("Vendor \"%.8s\", Product \"%.16s\"\r\n"), InquiryData.VendorID, InquiryData.ProductID);
     89a:	00 d0       	rcall	.+0      	; 0x89c <EVENT_USB_Host_DeviceEnumerationComplete+0x11a>
     89c:	00 d0       	rcall	.+0      	; 0x89e <EVENT_USB_Host_DeviceEnumerationComplete+0x11c>
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <EVENT_USB_Host_DeviceEnumerationComplete+0x11e>
     8a0:	ed b7       	in	r30, 0x3d	; 61
     8a2:	fe b7       	in	r31, 0x3e	; 62
     8a4:	31 96       	adiw	r30, 0x01	; 1
     8a6:	8f e3       	ldi	r24, 0x3F	; 63
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	ad b7       	in	r26, 0x3d	; 61
     8ac:	be b7       	in	r27, 0x3e	; 62
     8ae:	12 96       	adiw	r26, 0x02	; 2
     8b0:	9c 93       	st	X, r25
     8b2:	8e 93       	st	-X, r24
     8b4:	11 97       	sbiw	r26, 0x01	; 1
     8b6:	ce 01       	movw	r24, r28
     8b8:	4e 96       	adiw	r24, 0x1e	; 30
     8ba:	93 83       	std	Z+3, r25	; 0x03
     8bc:	82 83       	std	Z+2, r24	; 0x02
     8be:	ce 01       	movw	r24, r28
     8c0:	86 96       	adiw	r24, 0x26	; 38
     8c2:	95 83       	std	Z+5, r25	; 0x05
     8c4:	84 83       	std	Z+4, r24	; 0x04
     8c6:	0e 94 82 10 	call	0x2104	; 0x2104 <printf_P>

	puts_P(PSTR("Mass Storage Device Enumerated.\r\n"));
     8ca:	ed b7       	in	r30, 0x3d	; 61
     8cc:	fe b7       	in	r31, 0x3e	; 62
     8ce:	36 96       	adiw	r30, 0x06	; 6
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	fe bf       	out	0x3e, r31	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	ed bf       	out	0x3d, r30	; 61
     8da:	8d e1       	ldi	r24, 0x1D	; 29
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 a1 10 	call	0x2142	; 0x2142 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     8e2:	80 e6       	ldi	r24, 0x60	; 96
     8e4:	b3 dd       	rcall	.-1178   	; 0x44c <LEDs_SetAllLEDs>
}
     8e6:	c7 5c       	subi	r28, 0xC7	; 199
     8e8:	dd 4f       	sbci	r29, 0xFD	; 253
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	08 95       	ret

000008fe <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     8fe:	df 93       	push	r29
     900:	cf 93       	push	r28
     902:	0f 92       	push	r0
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     908:	89 83       	std	Y+1, r24	; 0x01
     90a:	d4 d3       	rcall	.+1960   	; 0x10b4 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     90c:	00 d0       	rcall	.+0      	; 0x90e <EVENT_USB_Host_HostError+0x10>
     90e:	00 d0       	rcall	.+0      	; 0x910 <EVENT_USB_Host_HostError+0x12>
     910:	ed b7       	in	r30, 0x3d	; 61
     912:	fe b7       	in	r31, 0x3e	; 62
     914:	31 96       	adiw	r30, 0x01	; 1
     916:	2e ee       	ldi	r18, 0xEE	; 238
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	ad b7       	in	r26, 0x3d	; 61
     91c:	be b7       	in	r27, 0x3e	; 62
     91e:	12 96       	adiw	r26, 0x02	; 2
     920:	3c 93       	st	X, r19
     922:	2e 93       	st	-X, r18
     924:	11 97       	sbiw	r26, 0x01	; 1
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	82 83       	std	Z+2, r24	; 0x02
     92a:	13 82       	std	Z+3, r1	; 0x03
     92c:	0e 94 82 10 	call	0x2104	; 0x2104 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	80 e9       	ldi	r24, 0x90	; 144
     93a:	88 dd       	rcall	.-1264   	; 0x44c <LEDs_SetAllLEDs>
     93c:	ff cf       	rjmp	.-2      	; 0x93c <EVENT_USB_Host_HostError+0x3e>

0000093e <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     93e:	90 91 31 01 	lds	r25, 0x0131
     942:	2d b7       	in	r18, 0x3d	; 61
     944:	3e b7       	in	r19, 0x3e	; 62
     946:	28 50       	subi	r18, 0x08	; 8
     948:	30 40       	sbci	r19, 0x00	; 0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	3e bf       	out	0x3e, r19	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	2d bf       	out	0x3d, r18	; 61
     954:	ed b7       	in	r30, 0x3d	; 61
     956:	fe b7       	in	r31, 0x3e	; 62
     958:	31 96       	adiw	r30, 0x01	; 1
     95a:	28 e9       	ldi	r18, 0x98	; 152
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	ad b7       	in	r26, 0x3d	; 61
     960:	be b7       	in	r27, 0x3e	; 62
     962:	12 96       	adiw	r26, 0x02	; 2
     964:	3c 93       	st	X, r19
     966:	2e 93       	st	-X, r18
     968:	11 97       	sbiw	r26, 0x01	; 1
     96a:	82 83       	std	Z+2, r24	; 0x02
     96c:	13 82       	std	Z+3, r1	; 0x03
     96e:	64 83       	std	Z+4, r22	; 0x04
     970:	15 82       	std	Z+5, r1	; 0x05
     972:	96 83       	std	Z+6, r25	; 0x06
     974:	17 82       	std	Z+7, r1	; 0x07
     976:	0e 94 82 10 	call	0x2104	; 0x2104 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     97a:	2d b7       	in	r18, 0x3d	; 61
     97c:	3e b7       	in	r19, 0x3e	; 62
     97e:	28 5f       	subi	r18, 0xF8	; 248
     980:	3f 4f       	sbci	r19, 0xFF	; 255
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	3e bf       	out	0x3e, r19	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	2d bf       	out	0x3d, r18	; 61
     98c:	80 e9       	ldi	r24, 0x90	; 144
}
     98e:	5e cd       	rjmp	.-1348   	; 0x44c <LEDs_SetAllLEDs>

00000990 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     990:	80 91 9e 00 	lds	r24, 0x009E
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	81 70       	andi	r24, 0x01	; 1
     998:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     99a:	20 91 a0 00 	lds	r18, 0x00A0
     99e:	2d 7f       	andi	r18, 0xFD	; 253
     9a0:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     9a4:	20 91 9e 00 	lds	r18, 0x009E
     9a8:	22 60       	ori	r18, 0x02	; 2
     9aa:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     9ae:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     9b2:	21 fd       	sbrc	r18, 1
     9b4:	fc cf       	rjmp	.-8      	; 0x9ae <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     9b6:	20 91 9e 00 	lds	r18, 0x009E
     9ba:	21 60       	ori	r18, 0x01	; 1
     9bc:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     9c0:	10 92 27 01 	sts	0x0127, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     9c4:	20 91 a0 00 	lds	r18, 0x00A0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	20 72       	andi	r18, 0x20	; 32
     9cc:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     9ce:	40 91 a0 00 	lds	r20, 0x00A0
     9d2:	4f 7d       	andi	r20, 0xDF	; 223
     9d4:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9d8:	40 91 9f 00 	lds	r20, 0x009F
     9dc:	4f 7d       	andi	r20, 0xDF	; 223
     9de:	40 93 9f 00 	sts	0x009F, r20
     9e2:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     9e4:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     9e8:	55 ff       	sbrs	r21, 5
     9ea:	0b c0       	rjmp	.+22     	; 0xa02 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9ec:	40 91 9f 00 	lds	r20, 0x009F
     9f0:	4f 7d       	andi	r20, 0xDF	; 223
     9f2:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     9f6:	40 91 9f 00 	lds	r20, 0x009F
     9fa:	4d 7f       	andi	r20, 0xFD	; 253
     9fc:	40 93 9f 00 	sts	0x009F, r20
     a00:	08 c0       	rjmp	.+16     	; 0xa12 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a02:	ef ec       	ldi	r30, 0xCF	; 207
     a04:	f7 e0       	ldi	r31, 0x07	; 7
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <USB_Host_ResetDevice+0x76>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <USB_Host_ResetDevice+0x7c>
     a0c:	00 00       	nop
     a0e:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     a10:	49 f7       	brne	.-46     	; 0x9e4 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     a12:	21 15       	cp	r18, r1
     a14:	31 05       	cpc	r19, r1
     a16:	29 f0       	breq	.+10     	; 0xa22 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a18:	20 91 a0 00 	lds	r18, 0x00A0
     a1c:	20 62       	ori	r18, 0x20	; 32
     a1e:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	29 f4       	brne	.+10     	; 0xa30 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a26:	80 91 9e 00 	lds	r24, 0x009E
     a2a:	8e 7f       	andi	r24, 0xFE	; 254
     a2c:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     a30:	80 91 a0 00 	lds	r24, 0x00A0
     a34:	82 60       	ori	r24, 0x02	; 2
     a36:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     a3a:	08 95       	ret

00000a3c <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     a3c:	40 91 9e 00 	lds	r20, 0x009E
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	41 70       	andi	r20, 0x01	; 1
     a44:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     a46:	20 91 a0 00 	lds	r18, 0x00A0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	20 72       	andi	r18, 0x20	; 32
     a4e:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     a50:	90 91 a0 00 	lds	r25, 0x00A0
     a54:	9f 7d       	andi	r25, 0xDF	; 223
     a56:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a5a:	90 91 9f 00 	lds	r25, 0x009F
     a5e:	9f 7d       	andi	r25, 0xDF	; 223
     a60:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a64:	90 91 9e 00 	lds	r25, 0x009E
     a68:	91 60       	ori	r25, 0x01	; 1
     a6a:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     a6e:	26 c0       	rjmp	.+76     	; 0xabc <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     a70:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     a74:	95 ff       	sbrs	r25, 5
     a76:	06 c0       	rjmp	.+12     	; 0xa84 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a78:	90 91 9f 00 	lds	r25, 0x009F
     a7c:	9f 7d       	andi	r25, 0xDF	; 223
     a7e:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     a82:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     a84:	90 91 31 01 	lds	r25, 0x0131
     a88:	91 30       	cpi	r25, 0x01	; 1
     a8a:	d9 f0       	breq	.+54     	; 0xac2 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     a8c:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     a90:	94 ff       	sbrs	r25, 4
     a92:	09 c0       	rjmp	.+18     	; 0xaa6 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     a94:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     a98:	80 91 a6 00 	lds	r24, 0x00A6
     a9c:	8f 7e       	andi	r24, 0xEF	; 239
     a9e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     aa2:	82 e0       	ldi	r24, 0x02	; 2

			break;
     aa4:	0f c0       	rjmp	.+30     	; 0xac4 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     aa6:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     aaa:	91 ff       	sbrs	r25, 1
     aac:	07 c0       	rjmp	.+14     	; 0xabc <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     aae:	80 91 a6 00 	lds	r24, 0x00A6
     ab2:	8d 7f       	andi	r24, 0xFD	; 253
     ab4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     ab8:	83 e0       	ldi	r24, 0x03	; 3

			break;
     aba:	04 c0       	rjmp	.+8      	; 0xac4 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     abc:	88 23       	and	r24, r24
     abe:	c1 f6       	brne	.-80     	; 0xa70 <USB_Host_WaitMS+0x34>
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     ac2:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     ac4:	41 15       	cp	r20, r1
     ac6:	51 05       	cpc	r21, r1
     ac8:	29 f4       	brne	.+10     	; 0xad4 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     aca:	90 91 9e 00 	lds	r25, 0x009E
     ace:	9e 7f       	andi	r25, 0xFE	; 254
     ad0:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     ad4:	21 15       	cp	r18, r1
     ad6:	31 05       	cpc	r19, r1
     ad8:	29 f0       	breq	.+10     	; 0xae4 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     ada:	90 91 a0 00 	lds	r25, 0x00A0
     ade:	90 62       	ori	r25, 0x20	; 32
     ae0:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     ae4:	08 95       	ret

00000ae6 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	df 93       	push	r29
     aec:	cf 93       	push	r28
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	28 97       	sbiw	r28, 0x08	; 8
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     afe:	80 91 31 01 	lds	r24, 0x0131
     b02:	85 30       	cpi	r24, 0x05	; 5
     b04:	09 f4       	brne	.+2      	; 0xb08 <USB_Host_ProcessNextHostState+0x22>
     b06:	99 c0       	rjmp	.+306    	; 0xc3a <USB_Host_ProcessNextHostState+0x154>
     b08:	86 30       	cpi	r24, 0x06	; 6
     b0a:	68 f4       	brcc	.+26     	; 0xb26 <USB_Host_ProcessNextHostState+0x40>
     b0c:	82 30       	cpi	r24, 0x02	; 2
     b0e:	c1 f1       	breq	.+112    	; 0xb80 <USB_Host_ProcessNextHostState+0x9a>
     b10:	83 30       	cpi	r24, 0x03	; 3
     b12:	18 f4       	brcc	.+6      	; 0xb1a <USB_Host_ProcessNextHostState+0x34>
     b14:	88 23       	and	r24, r24
     b16:	a1 f0       	breq	.+40     	; 0xb40 <USB_Host_ProcessNextHostState+0x5a>
     b18:	04 c1       	rjmp	.+520    	; 0xd22 <USB_Host_ProcessNextHostState+0x23c>
     b1a:	83 30       	cpi	r24, 0x03	; 3
     b1c:	d9 f1       	breq	.+118    	; 0xb94 <USB_Host_ProcessNextHostState+0xae>
     b1e:	84 30       	cpi	r24, 0x04	; 4
     b20:	09 f0       	breq	.+2      	; 0xb24 <USB_Host_ProcessNextHostState+0x3e>
     b22:	ff c0       	rjmp	.+510    	; 0xd22 <USB_Host_ProcessNextHostState+0x23c>
     b24:	62 c0       	rjmp	.+196    	; 0xbea <USB_Host_ProcessNextHostState+0x104>
     b26:	87 30       	cpi	r24, 0x07	; 7
     b28:	09 f4       	brne	.+2      	; 0xb2c <USB_Host_ProcessNextHostState+0x46>
     b2a:	9e c0       	rjmp	.+316    	; 0xc68 <USB_Host_ProcessNextHostState+0x182>
     b2c:	87 30       	cpi	r24, 0x07	; 7
     b2e:	08 f4       	brcc	.+2      	; 0xb32 <USB_Host_ProcessNextHostState+0x4c>
     b30:	8f c0       	rjmp	.+286    	; 0xc50 <USB_Host_ProcessNextHostState+0x16a>
     b32:	88 30       	cpi	r24, 0x08	; 8
     b34:	09 f4       	brne	.+2      	; 0xb38 <USB_Host_ProcessNextHostState+0x52>
     b36:	b8 c0       	rjmp	.+368    	; 0xca8 <USB_Host_ProcessNextHostState+0x1c2>
     b38:	89 30       	cpi	r24, 0x09	; 9
     b3a:	09 f0       	breq	.+2      	; 0xb3e <USB_Host_ProcessNextHostState+0x58>
     b3c:	f2 c0       	rjmp	.+484    	; 0xd22 <USB_Host_ProcessNextHostState+0x23c>
     b3e:	d9 c0       	rjmp	.+434    	; 0xcf2 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     b40:	00 91 25 01 	lds	r16, 0x0125
     b44:	10 91 26 01 	lds	r17, 0x0126
     b48:	01 15       	cp	r16, r1
     b4a:	11 05       	cpc	r17, r1
     b4c:	09 f4       	brne	.+2      	; 0xb50 <USB_Host_ProcessNextHostState+0x6a>
     b4e:	e9 c0       	rjmp	.+466    	; 0xd22 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	74 df       	rcall	.-280    	; 0xa3c <USB_Host_WaitMS>
     b54:	68 2f       	mov	r22, r24
     b56:	88 23       	and	r24, r24
     b58:	31 f0       	breq	.+12     	; 0xb66 <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
     b5a:	80 91 24 01 	lds	r24, 0x0124
     b5e:	80 93 31 01 	sts	0x0131, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     b62:	81 e0       	ldi	r24, 0x01	; 1
					break;
     b64:	d2 c0       	rjmp	.+420    	; 0xd0a <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
     b66:	01 50       	subi	r16, 0x01	; 1
     b68:	10 40       	sbci	r17, 0x00	; 0
     b6a:	10 93 26 01 	sts	0x0126, r17
     b6e:	00 93 25 01 	sts	0x0125, r16
     b72:	01 15       	cp	r16, r1
     b74:	11 05       	cpc	r17, r1
     b76:	09 f0       	breq	.+2      	; 0xb7a <USB_Host_ProcessNextHostState+0x94>
     b78:	d4 c0       	rjmp	.+424    	; 0xd22 <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
     b7a:	80 91 24 01 	lds	r24, 0x0124
     b7e:	07 c0       	rjmp	.+14     	; 0xb8e <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     b80:	88 ee       	ldi	r24, 0xE8	; 232
     b82:	93 e0       	ldi	r25, 0x03	; 3
     b84:	90 93 26 01 	sts	0x0126, r25
     b88:	80 93 25 01 	sts	0x0125, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	80 93 31 01 	sts	0x0131, r24
			break;
     b92:	c7 c0       	rjmp	.+398    	; 0xd22 <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     b94:	80 91 25 01 	lds	r24, 0x0125
     b98:	90 91 26 01 	lds	r25, 0x0126
     b9c:	9c 01       	movw	r18, r24
     b9e:	21 50       	subi	r18, 0x01	; 1
     ba0:	30 40       	sbci	r19, 0x00	; 0
     ba2:	30 93 26 01 	sts	0x0126, r19
     ba6:	20 93 25 01 	sts	0x0125, r18
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	39 f0       	breq	.+14     	; 0xbbc <USB_Host_ProcessNextHostState+0xd6>
     bae:	8f ec       	ldi	r24, 0xCF	; 207
     bb0:	97 e0       	ldi	r25, 0x07	; 7
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <USB_Host_ProcessNextHostState+0xcc>
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <USB_Host_ProcessNextHostState+0xd2>
     bb8:	00 00       	nop
     bba:	b3 c0       	rjmp	.+358    	; 0xd22 <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     bbc:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     bbe:	80 91 d8 00 	lds	r24, 0x00D8
     bc2:	80 61       	ori	r24, 0x10	; 16
     bc4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     bc8:	80 91 dd 00 	lds	r24, 0x00DD
     bcc:	8b 7f       	andi	r24, 0xFB	; 251
     bce:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     bd2:	80 91 d7 00 	lds	r24, 0x00D7
     bd6:	80 61       	ori	r24, 0x10	; 16
     bd8:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     bdc:	80 91 dd 00 	lds	r24, 0x00DD
     be0:	82 60       	ori	r24, 0x02	; 2
     be2:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     be6:	84 e0       	ldi	r24, 0x04	; 4
     be8:	d2 cf       	rjmp	.-92     	; 0xb8e <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     bea:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     bee:	80 ff       	sbrs	r24, 0
     bf0:	98 c0       	rjmp	.+304    	; 0xd22 <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bf2:	80 91 9f 00 	lds	r24, 0x009F
     bf6:	8e 7f       	andi	r24, 0xFE	; 254
     bf8:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bfc:	80 91 9f 00 	lds	r24, 0x009F
     c00:	8d 7f       	andi	r24, 0xFD	; 253
     c02:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c06:	80 91 df 00 	lds	r24, 0x00DF
     c0a:	8d 7f       	andi	r24, 0xFD	; 253
     c0c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     c10:	80 91 de 00 	lds	r24, 0x00DE
     c14:	82 60       	ori	r24, 0x02	; 2
     c16:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     c1a:	80 91 9e 00 	lds	r24, 0x009E
     c1e:	81 60       	ori	r24, 0x01	; 1
     c20:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     c24:	dd d1       	rcall	.+954    	; 0xfe0 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     c26:	10 92 31 01 	sts	0x0131, r1
     c2a:	84 e6       	ldi	r24, 0x64	; 100
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	90 93 26 01 	sts	0x0126, r25
     c32:	80 93 25 01 	sts	0x0125, r24
     c36:	85 e0       	ldi	r24, 0x05	; 5
     c38:	59 c0       	rjmp	.+178    	; 0xcec <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     c3a:	aa de       	rcall	.-684    	; 0x990 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     c3c:	10 92 31 01 	sts	0x0131, r1
     c40:	88 ec       	ldi	r24, 0xC8	; 200
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	90 93 26 01 	sts	0x0126, r25
     c48:	80 93 25 01 	sts	0x0125, r24
     c4c:	86 e0       	ldi	r24, 0x06	; 6
     c4e:	4e c0       	rjmp	.+156    	; 0xcec <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	20 e4       	ldi	r18, 0x40	; 64
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	01 e0       	ldi	r16, 0x01	; 1
     c5c:	33 d1       	rcall	.+614    	; 0xec4 <Pipe_ConfigurePipe>
     c5e:	88 23       	and	r24, r24
     c60:	09 f4       	brne	.+2      	; 0xc64 <USB_Host_ProcessNextHostState+0x17e>
     c62:	4f c0       	rjmp	.+158    	; 0xd02 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     c64:	87 e0       	ldi	r24, 0x07	; 7
     c66:	93 cf       	rjmp	.-218    	; 0xb8e <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     c68:	a9 e2       	ldi	r26, 0x29	; 41
     c6a:	b1 e0       	ldi	r27, 0x01	; 1
     c6c:	ea e1       	ldi	r30, 0x1A	; 26
     c6e:	f1 e0       	ldi	r31, 0x01	; 1
     c70:	88 e0       	ldi	r24, 0x08	; 8
     c72:	01 90       	ld	r0, Z+
     c74:	0d 92       	st	X+, r0
     c76:	81 50       	subi	r24, 0x01	; 1
     c78:	e1 f7       	brne	.-8      	; 0xc72 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c7a:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     c7e:	ce 01       	movw	r24, r28
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	f2 d3       	rcall	.+2020   	; 0x1468 <USB_Host_SendControlRequest>
     c84:	68 2f       	mov	r22, r24
     c86:	88 23       	and	r24, r24
     c88:	09 f0       	breq	.+2      	; 0xc8c <USB_Host_ProcessNextHostState+0x1a6>
     c8a:	3e c0       	rjmp	.+124    	; 0xd08 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     c8c:	88 85       	ldd	r24, Y+8	; 0x08
     c8e:	80 93 22 01 	sts	0x0122, r24

			USB_Host_ResetDevice();
     c92:	7e de       	rcall	.-772    	; 0x990 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     c94:	10 92 31 01 	sts	0x0131, r1
     c98:	88 ec       	ldi	r24, 0xC8	; 200
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	90 93 26 01 	sts	0x0126, r25
     ca0:	80 93 25 01 	sts	0x0125, r24
     ca4:	88 e0       	ldi	r24, 0x08	; 8
     ca6:	22 c0       	rjmp	.+68     	; 0xcec <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     ca8:	20 91 22 01 	lds	r18, 0x0122
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	01 e0       	ldi	r16, 0x01	; 1
     cb6:	06 d1       	rcall	.+524    	; 0xec4 <Pipe_ConfigurePipe>
     cb8:	88 23       	and	r24, r24
     cba:	19 f1       	breq	.+70     	; 0xd02 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     cbc:	a9 e2       	ldi	r26, 0x29	; 41
     cbe:	b1 e0       	ldi	r27, 0x01	; 1
     cc0:	e2 e1       	ldi	r30, 0x12	; 18
     cc2:	f1 e0       	ldi	r31, 0x01	; 1
     cc4:	88 e0       	ldi	r24, 0x08	; 8
     cc6:	01 90       	ld	r0, Z+
     cc8:	0d 92       	st	X+, r0
     cca:	81 50       	subi	r24, 0x01	; 1
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	ca d3       	rcall	.+1940   	; 0x1468 <USB_Host_SendControlRequest>
     cd4:	68 2f       	mov	r22, r24
     cd6:	88 23       	and	r24, r24
     cd8:	b9 f4       	brne	.+46     	; 0xd08 <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     cda:	10 92 31 01 	sts	0x0131, r1
     cde:	84 e6       	ldi	r24, 0x64	; 100
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	90 93 26 01 	sts	0x0126, r25
     ce6:	80 93 25 01 	sts	0x0125, r24
     cea:	89 e0       	ldi	r24, 0x09	; 9
     cec:	80 93 24 01 	sts	0x0124, r24
			break;
     cf0:	18 c0       	rjmp	.+48     	; 0xd22 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     cf8:	8a e0       	ldi	r24, 0x0A	; 10
     cfa:	80 93 31 01 	sts	0x0131, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     cfe:	41 dd       	rcall	.-1406   	; 0x782 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     d00:	10 c0       	rjmp	.+32     	; 0xd22 <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     d02:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     d08:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     d0a:	90 91 31 01 	lds	r25, 0x0131
     d0e:	91 30       	cpi	r25, 0x01	; 1
     d10:	41 f0       	breq	.+16     	; 0xd22 <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     d12:	15 de       	rcall	.-982    	; 0x93e <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d14:	80 91 dd 00 	lds	r24, 0x00DD
     d18:	81 60       	ori	r24, 0x01	; 1
     d1a:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     d1e:	2b dd       	rcall	.-1450   	; 0x776 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d20:	e1 d1       	rcall	.+962    	; 0x10e4 <USB_ResetInterface>
	}
}
     d22:	28 96       	adiw	r28, 0x08	; 8
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	08 95       	ret

00000d38 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	bf 92       	push	r11
     d3e:	cf 92       	push	r12
     d40:	df 92       	push	r13
     d42:	ef 92       	push	r14
     d44:	ff 92       	push	r15
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	0f 92       	push	r0
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	e8 2e       	mov	r14, r24
     d56:	4b 01       	movw	r8, r22
     d58:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d5a:	80 91 aa 00 	lds	r24, 0x00AA
     d5e:	8f 7c       	andi	r24, 0xCF	; 207
     d60:	80 62       	ori	r24, 0x20	; 32
     d62:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d66:	99 83       	std	Y+1, r25	; 0x01
     d68:	75 d1       	rcall	.+746    	; 0x1054 <Pipe_WaitUntilReady>
     d6a:	b8 2e       	mov	r11, r24
     d6c:	99 81       	ldd	r25, Y+1	; 0x01
     d6e:	88 23       	and	r24, r24
     d70:	c1 f5       	brne	.+112    	; 0xde2 <Pipe_Write_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d72:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d74:	01 15       	cp	r16, r1
     d76:	11 05       	cpc	r17, r1
     d78:	39 f0       	breq	.+14     	; 0xd88 <Pipe_Write_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     d7a:	f8 01       	movw	r30, r16
     d7c:	20 81       	ld	r18, Z
     d7e:	31 81       	ldd	r19, Z+1	; 0x01
     d80:	82 1a       	sub	r8, r18
     d82:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d84:	e2 0e       	add	r14, r18
     d86:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d88:	cc 24       	eor	r12, r12
     d8a:	dd 24       	eor	r13, r13
     d8c:	25 c0       	rjmp	.+74     	; 0xdd8 <Pipe_Write_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d8e:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d92:	85 fd       	sbrc	r24, 5
     d94:	16 c0       	rjmp	.+44     	; 0xdc2 <Pipe_Write_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     d96:	80 91 a6 00 	lds	r24, 0x00A6
     d9a:	8b 77       	andi	r24, 0x7B	; 123
     d9c:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     da0:	01 15       	cp	r16, r1
     da2:	11 05       	cpc	r17, r1
     da4:	51 f0       	breq	.+20     	; 0xdba <Pipe_Write_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     da6:	f8 01       	movw	r30, r16
     da8:	80 81       	ld	r24, Z
     daa:	91 81       	ldd	r25, Z+1	; 0x01
     dac:	8c 0d       	add	r24, r12
     dae:	9d 1d       	adc	r25, r13
     db0:	91 83       	std	Z+1, r25	; 0x01
     db2:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     db4:	24 e0       	ldi	r18, 0x04	; 4
     db6:	b2 2e       	mov	r11, r18
     db8:	14 c0       	rjmp	.+40     	; 0xde2 <Pipe_Write_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     dba:	4c d1       	rcall	.+664    	; 0x1054 <Pipe_WaitUntilReady>
     dbc:	88 23       	and	r24, r24
     dbe:	61 f0       	breq	.+24     	; 0xdd8 <Pipe_Write_Stream_LE+0xa0>
     dc0:	0f c0       	rjmp	.+30     	; 0xde0 <Pipe_Write_Stream_LE+0xa8>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     dc2:	f7 01       	movw	r30, r14
     dc4:	81 91       	ld	r24, Z+
     dc6:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     dc8:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     dcc:	08 94       	sec
     dce:	81 08       	sbc	r8, r1
     dd0:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     dd2:	08 94       	sec
     dd4:	c1 1c       	adc	r12, r1
     dd6:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     dd8:	81 14       	cp	r8, r1
     dda:	91 04       	cpc	r9, r1
     ddc:	c1 f6       	brne	.-80     	; 0xd8e <Pipe_Write_Stream_LE+0x56>
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <Pipe_Write_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     de0:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     de2:	8b 2d       	mov	r24, r11
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	bf 90       	pop	r11
     df8:	9f 90       	pop	r9
     dfa:	8f 90       	pop	r8
     dfc:	08 95       	ret

00000dfe <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     dfe:	8f 92       	push	r8
     e00:	9f 92       	push	r9
     e02:	bf 92       	push	r11
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	0f 92       	push	r0
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	e8 2e       	mov	r14, r24
     e1c:	4b 01       	movw	r8, r22
     e1e:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e20:	80 91 aa 00 	lds	r24, 0x00AA
     e24:	8f 7c       	andi	r24, 0xCF	; 207
     e26:	80 61       	ori	r24, 0x10	; 16
     e28:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     e2c:	99 83       	std	Y+1, r25	; 0x01
     e2e:	12 d1       	rcall	.+548    	; 0x1054 <Pipe_WaitUntilReady>
     e30:	b8 2e       	mov	r11, r24
     e32:	99 81       	ldd	r25, Y+1	; 0x01
     e34:	88 23       	and	r24, r24
     e36:	c1 f5       	brne	.+112    	; 0xea8 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e38:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e3a:	01 15       	cp	r16, r1
     e3c:	11 05       	cpc	r17, r1
     e3e:	39 f0       	breq	.+14     	; 0xe4e <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     e40:	f8 01       	movw	r30, r16
     e42:	20 81       	ld	r18, Z
     e44:	31 81       	ldd	r19, Z+1	; 0x01
     e46:	82 1a       	sub	r8, r18
     e48:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e4a:	e2 0e       	add	r14, r18
     e4c:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e4e:	cc 24       	eor	r12, r12
     e50:	dd 24       	eor	r13, r13
     e52:	25 c0       	rjmp	.+74     	; 0xe9e <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e54:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e58:	85 fd       	sbrc	r24, 5
     e5a:	16 c0       	rjmp	.+44     	; 0xe88 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e5c:	80 91 a6 00 	lds	r24, 0x00A6
     e60:	8e 77       	andi	r24, 0x7E	; 126
     e62:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     e66:	01 15       	cp	r16, r1
     e68:	11 05       	cpc	r17, r1
     e6a:	51 f0       	breq	.+20     	; 0xe80 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     e6c:	f8 01       	movw	r30, r16
     e6e:	80 81       	ld	r24, Z
     e70:	91 81       	ldd	r25, Z+1	; 0x01
     e72:	8c 0d       	add	r24, r12
     e74:	9d 1d       	adc	r25, r13
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     e7a:	44 e0       	ldi	r20, 0x04	; 4
     e7c:	b4 2e       	mov	r11, r20
     e7e:	14 c0       	rjmp	.+40     	; 0xea8 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e80:	e9 d0       	rcall	.+466    	; 0x1054 <Pipe_WaitUntilReady>
     e82:	88 23       	and	r24, r24
     e84:	61 f0       	breq	.+24     	; 0xe9e <Pipe_Read_Stream_LE+0xa0>
     e86:	0f c0       	rjmp	.+30     	; 0xea6 <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     e88:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e8c:	f7 01       	movw	r30, r14
     e8e:	81 93       	st	Z+, r24
     e90:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e92:	08 94       	sec
     e94:	81 08       	sbc	r8, r1
     e96:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     e98:	08 94       	sec
     e9a:	c1 1c       	adc	r12, r1
     e9c:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     e9e:	81 14       	cp	r8, r1
     ea0:	91 04       	cpc	r9, r1
     ea2:	c1 f6       	brne	.-80     	; 0xe54 <Pipe_Read_Stream_LE+0x56>
     ea4:	01 c0       	rjmp	.+2      	; 0xea8 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     ea6:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     ea8:	8b 2d       	mov	r24, r11
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	9f 90       	pop	r9
     ec0:	8f 90       	pop	r8
     ec2:	08 95       	ret

00000ec4 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     ec4:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     ec6:	58 2f       	mov	r21, r24
     ec8:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     eca:	87 ff       	sbrs	r24, 7
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <Pipe_ConfigurePipe+0xe>
     ece:	80 e1       	ldi	r24, 0x10	; 16
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <Pipe_ConfigurePipe+0x10>
     ed2:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     ed4:	57 30       	cpi	r21, 0x07	; 7
     ed6:	08 f0       	brcs	.+2      	; 0xeda <Pipe_ConfigurePipe+0x16>
     ed8:	59 c0       	rjmp	.+178    	; 0xf8c <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     eda:	66 23       	and	r22, r22
     edc:	09 f4       	brne	.+2      	; 0xee0 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     ede:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     ee0:	4f 70       	andi	r20, 0x0F	; 15
     ee2:	62 95       	swap	r22
     ee4:	66 0f       	add	r22, r22
     ee6:	66 0f       	add	r22, r22
     ee8:	60 7c       	andi	r22, 0xC0	; 192
     eea:	64 2b       	or	r22, r20
     eec:	68 2b       	or	r22, r24
     eee:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ef0:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ef2:	84 2f       	mov	r24, r20
     ef4:	8f 70       	andi	r24, 0x0F	; 15
     ef6:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     efa:	45 17       	cp	r20, r21
     efc:	a1 f4       	brne	.+40     	; 0xf26 <Pipe_ConfigurePipe+0x62>
     efe:	88 e0       	ldi	r24, 0x08	; 8
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     f06:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     f0c:	82 17       	cp	r24, r18
     f0e:	93 07       	cpc	r25, r19
     f10:	10 f4       	brcc	.+4      	; 0xf16 <Pipe_ConfigurePipe+0x52>
     f12:	75 30       	cpi	r23, 0x05	; 5
     f14:	c1 f7       	brne	.-16     	; 0xf06 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     f16:	87 2f       	mov	r24, r23
     f18:	82 95       	swap	r24
     f1a:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     f1c:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     f1e:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     f20:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     f22:	e0 e0       	ldi	r30, 0x00	; 0
     f24:	08 c0       	rjmp	.+16     	; 0xf36 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     f26:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     f2a:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     f2e:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     f32:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     f36:	81 ff       	sbrs	r24, 1
     f38:	20 c0       	rjmp	.+64     	; 0xf7a <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     f3a:	90 91 a9 00 	lds	r25, 0x00A9
     f3e:	9e 7f       	andi	r25, 0xFE	; 254
     f40:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     f44:	90 91 ab 00 	lds	r25, 0x00AB
     f48:	9d 7f       	andi	r25, 0xFD	; 253
     f4a:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     f4e:	90 91 a9 00 	lds	r25, 0x00A9
     f52:	91 60       	ori	r25, 0x01	; 1
     f54:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     f58:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     f5c:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     f60:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     f64:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     f68:	80 91 a9 00 	lds	r24, 0x00A9
     f6c:	80 62       	ori	r24, 0x20	; 32
     f6e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     f72:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     f76:	87 ff       	sbrs	r24, 7
     f78:	09 c0       	rjmp	.+18     	; 0xf8c <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     f7a:	4f 5f       	subi	r20, 0xFF	; 255
     f7c:	47 30       	cpi	r20, 0x07	; 7
     f7e:	09 f0       	breq	.+2      	; 0xf82 <Pipe_ConfigurePipe+0xbe>
     f80:	b8 cf       	rjmp	.-144    	; 0xef2 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     f82:	5f 70       	andi	r21, 0x0F	; 15
     f84:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     f8c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     f8e:	0f 91       	pop	r16
     f90:	08 95       	ret

00000f92 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     fa0:	e8 2e       	mov	r14, r24
     fa2:	e7 01       	movw	r28, r14
     fa4:	7e 01       	movw	r14, r28
     fa6:	f9 2e       	mov	r15, r25
     fa8:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     faa:	ff 24       	eor	r15, r15
     fac:	0d c0       	rjmp	.+26     	; 0xfc8 <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
     fae:	88 81       	ld	r24, Y
     fb0:	88 23       	and	r24, r24
     fb2:	41 f0       	breq	.+16     	; 0xfc4 <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     fb4:	29 81       	ldd	r18, Y+1	; 0x01
     fb6:	3a 81       	ldd	r19, Y+2	; 0x02
     fb8:	6c 81       	ldd	r22, Y+4	; 0x04
     fba:	4b 81       	ldd	r20, Y+3	; 0x03
     fbc:	0d 81       	ldd	r16, Y+5	; 0x05
     fbe:	82 df       	rcall	.-252    	; 0xec4 <Pipe_ConfigurePipe>
     fc0:	88 23       	and	r24, r24
     fc2:	31 f0       	breq	.+12     	; 0xfd0 <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     fc4:	f3 94       	inc	r15
     fc6:	26 96       	adiw	r28, 0x06	; 6
     fc8:	f1 16       	cp	r15, r17
     fca:	88 f3       	brcs	.-30     	; 0xfae <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     fd0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	08 95       	ret

00000fe0 <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     fe0:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	98 2f       	mov	r25, r24
     fe8:	9f 70       	andi	r25, 0x0F	; 15
     fea:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     fee:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     ff2:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     ff6:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ffa:	90 91 a9 00 	lds	r25, 0x00A9
     ffe:	9e 7f       	andi	r25, 0xFE	; 254
    1000:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1004:	8f 5f       	subi	r24, 0xFF	; 255
    1006:	87 30       	cpi	r24, 0x07	; 7
    1008:	71 f7       	brne	.-36     	; 0xfe6 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    100a:	08 95       	ret

0000100c <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    100c:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1010:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1014:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1016:	29 2f       	mov	r18, r25
    1018:	2f 70       	andi	r18, 0x0F	; 15
    101a:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    101e:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    1022:	27 ff       	sbrs	r18, 7
    1024:	0c c0       	rjmp	.+24     	; 0x103e <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    1026:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    102a:	53 2f       	mov	r21, r19
    102c:	5f 70       	andi	r21, 0x0F	; 15
    102e:	30 ff       	sbrs	r19, 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <Pipe_IsEndpointBound+0x2a>
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <Pipe_IsEndpointBound+0x2c>
    1036:	20 e8       	ldi	r18, 0x80	; 128
    1038:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    103a:	28 17       	cp	r18, r24
    103c:	49 f0       	breq	.+18     	; 0x1050 <Pipe_IsEndpointBound+0x44>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    103e:	9f 5f       	subi	r25, 0xFF	; 255
    1040:	97 30       	cpi	r25, 0x07	; 7
    1042:	49 f7       	brne	.-46     	; 0x1016 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1044:	84 2f       	mov	r24, r20
    1046:	8f 70       	andi	r24, 0x0F	; 15
    1048:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    1050:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    1052:	08 95       	ret

00001054 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1054:	20 91 a2 00 	lds	r18, 0x00A2
    1058:	30 91 a3 00 	lds	r19, 0x00A3
uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    105c:	88 e8       	ldi	r24, 0x88	; 136
    105e:	93 e1       	ldi	r25, 0x13	; 19
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1060:	40 91 aa 00 	lds	r20, 0x00AA
    1064:	40 73       	andi	r20, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1066:	40 31       	cpi	r20, 0x10	; 16
    1068:	29 f4       	brne	.+10     	; 0x1074 <Pipe_WaitUntilReady+0x20>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    106a:	40 91 a6 00 	lds	r20, 0x00A6
		{
			if (Pipe_IsINReceived())
    106e:	40 ff       	sbrs	r20, 0
    1070:	05 c0       	rjmp	.+10     	; 0x107c <Pipe_WaitUntilReady+0x28>
    1072:	18 c0       	rjmp	.+48     	; 0x10a4 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1074:	40 91 a6 00 	lds	r20, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1078:	42 fd       	sbrc	r20, 2
    107a:	14 c0       	rjmp	.+40     	; 0x10a4 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    107c:	40 91 a6 00 	lds	r20, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1080:	41 fd       	sbrc	r20, 1
    1082:	12 c0       	rjmp	.+36     	; 0x10a8 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1084:	40 91 31 01 	lds	r20, 0x0131
    1088:	41 30       	cpi	r20, 0x01	; 1
    108a:	81 f0       	breq	.+32     	; 0x10ac <Pipe_WaitUntilReady+0x58>
    108c:	40 91 a2 00 	lds	r20, 0x00A2
    1090:	50 91 a3 00 	lds	r21, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1094:	42 17       	cp	r20, r18
    1096:	53 07       	cpc	r21, r19
    1098:	19 f3       	breq	.-58     	; 0x1060 <Pipe_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	49 f0       	breq	.+18     	; 0x10b0 <Pipe_WaitUntilReady+0x5c>
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	9a 01       	movw	r18, r20
    10a2:	de cf       	rjmp	.-68     	; 0x1060 <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    10b0:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    10b2:	08 95       	ret

000010b4 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    10b4:	75 d0       	rcall	.+234    	; 0x11a0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    10b6:	7c d0       	rcall	.+248    	; 0x11b0 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    10b8:	e0 ee       	ldi	r30, 0xE0	; 224
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	81 60       	ori	r24, 0x01	; 1
    10c0:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    10c2:	e8 ed       	ldi	r30, 0xD8	; 216
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	8f 77       	andi	r24, 0x7F	; 127
    10ca:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    10cc:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    10ce:	a7 ed       	ldi	r26, 0xD7	; 215
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	8c 91       	ld	r24, X
    10d4:	8e 7f       	andi	r24, 0xFE	; 254
    10d6:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    10d8:	80 81       	ld	r24, Z
    10da:	8f 7e       	andi	r24, 0xEF	; 239
    10dc:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    10de:	10 92 28 01 	sts	0x0128, r1
}
    10e2:	08 95       	ret

000010e4 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    10e4:	5d d0       	rcall	.+186    	; 0x11a0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    10e6:	64 d0       	rcall	.+200    	; 0x11b0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    10e8:	80 91 d8 00 	lds	r24, 0x00D8
    10ec:	8f 77       	andi	r24, 0x7F	; 127
    10ee:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    10f2:	80 91 d8 00 	lds	r24, 0x00D8
    10f6:	80 68       	ori	r24, 0x80	; 128
    10f8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    10fc:	80 91 d8 00 	lds	r24, 0x00D8
    1100:	8f 7d       	andi	r24, 0xDF	; 223
    1102:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1106:	80 91 d7 00 	lds	r24, 0x00D7
    110a:	8f 77       	andi	r24, 0x7F	; 127
    110c:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1110:	8c e0       	ldi	r24, 0x0C	; 12
    1112:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1114:	8e e0       	ldi	r24, 0x0E	; 14
    1116:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1118:	09 b4       	in	r0, 0x29	; 41
    111a:	00 fe       	sbrs	r0, 0
    111c:	fd cf       	rjmp	.-6      	; 0x1118 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	80 93 31 01 	sts	0x0131, r24
	USB_Host_ConfigurationNumber = 0;
    1124:	10 92 27 01 	sts	0x0127, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1128:	80 e4       	ldi	r24, 0x40	; 64
    112a:	80 93 22 01 	sts	0x0122, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    112e:	80 91 d8 00 	lds	r24, 0x00D8
    1132:	80 64       	ori	r24, 0x40	; 64
    1134:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1138:	80 91 dd 00 	lds	r24, 0x00DD
    113c:	81 60       	ori	r24, 0x01	; 1
    113e:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1142:	80 91 dd 00 	lds	r24, 0x00DD
    1146:	84 60       	ori	r24, 0x04	; 4
    1148:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    114c:	80 91 d7 00 	lds	r24, 0x00D7
    1150:	8f 7e       	andi	r24, 0xEF	; 239
    1152:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1156:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    1158:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    115a:	80 91 de 00 	lds	r24, 0x00DE
    115e:	81 60       	ori	r24, 0x01	; 1
    1160:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1164:	80 91 de 00 	lds	r24, 0x00DE
    1168:	84 60       	ori	r24, 0x04	; 4
    116a:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    116e:	80 91 e0 00 	lds	r24, 0x00E0
    1172:	8e 7f       	andi	r24, 0xFE	; 254
    1174:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1178:	80 91 d8 00 	lds	r24, 0x00D8
    117c:	80 61       	ori	r24, 0x10	; 16
    117e:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1182:	08 95       	ret

00001184 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1184:	e8 ed       	ldi	r30, 0xD8	; 216
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8f 7e       	andi	r24, 0xEF	; 239
    118c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    118e:	e7 ed       	ldi	r30, 0xD7	; 215
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	81 60       	ori	r24, 0x01	; 1
    1196:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	80 93 28 01 	sts	0x0128, r24

	USB_ResetInterface();
}
    119e:	a2 cf       	rjmp	.-188    	; 0x10e4 <USB_ResetInterface>

000011a0 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    11a0:	e8 ed       	ldi	r30, 0xD8	; 216
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8c 7f       	andi	r24, 0xFC	; 252
    11a8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    11aa:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    11ae:	08 95       	ret

000011b0 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    11b0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    11b4:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    11b8:	08 95       	ret

000011ba <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	0b b6       	in	r0, 0x3b	; 59
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	2f 93       	push	r18
    11ca:	3f 93       	push	r19
    11cc:	4f 93       	push	r20
    11ce:	5f 93       	push	r21
    11d0:	6f 93       	push	r22
    11d2:	7f 93       	push	r23
    11d4:	8f 93       	push	r24
    11d6:	9f 93       	push	r25
    11d8:	af 93       	push	r26
    11da:	bf 93       	push	r27
    11dc:	ef 93       	push	r30
    11de:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    11e0:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    11e4:	85 ff       	sbrs	r24, 5
    11e6:	0a c0       	rjmp	.+20     	; 0x11fc <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    11e8:	80 91 a0 00 	lds	r24, 0x00A0
    11ec:	85 ff       	sbrs	r24, 5
    11ee:	06 c0       	rjmp	.+12     	; 0x11fc <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    11f0:	80 91 9f 00 	lds	r24, 0x009F
    11f4:	8f 7d       	andi	r24, 0xDF	; 223
    11f6:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    11fa:	0c d1       	rcall	.+536    	; 0x1414 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    11fc:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1200:	81 ff       	sbrs	r24, 1
    1202:	15 c0       	rjmp	.+42     	; 0x122e <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1204:	80 91 a0 00 	lds	r24, 0x00A0
    1208:	81 ff       	sbrs	r24, 1
    120a:	11 c0       	rjmp	.+34     	; 0x122e <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    120c:	80 91 9f 00 	lds	r24, 0x009F
    1210:	8d 7f       	andi	r24, 0xFD	; 253
    1212:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1216:	80 91 9f 00 	lds	r24, 0x009F
    121a:	8e 7f       	andi	r24, 0xFE	; 254
    121c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1220:	80 91 a0 00 	lds	r24, 0x00A0
    1224:	8d 7f       	andi	r24, 0xFD	; 253
    1226:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    122a:	a5 da       	rcall	.-2742   	; 0x776 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    122c:	5b df       	rcall	.-330    	; 0x10e4 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    122e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1232:	81 ff       	sbrs	r24, 1
    1234:	15 c0       	rjmp	.+42     	; 0x1260 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1236:	80 91 de 00 	lds	r24, 0x00DE
    123a:	81 ff       	sbrs	r24, 1
    123c:	11 c0       	rjmp	.+34     	; 0x1260 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    123e:	80 91 df 00 	lds	r24, 0x00DF
    1242:	8d 7f       	andi	r24, 0xFD	; 253
    1244:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    1248:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    124a:	80 91 dd 00 	lds	r24, 0x00DD
    124e:	81 60       	ori	r24, 0x01	; 1
    1250:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	53 db       	rcall	.-2394   	; 0x8fe <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    1258:	8e da       	rcall	.-2788   	; 0x776 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	80 93 31 01 	sts	0x0131, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1260:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1264:	80 ff       	sbrs	r24, 0
    1266:	17 c0       	rjmp	.+46     	; 0x1296 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1268:	80 91 de 00 	lds	r24, 0x00DE
    126c:	80 ff       	sbrs	r24, 0
    126e:	13 c0       	rjmp	.+38     	; 0x1296 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1270:	80 91 df 00 	lds	r24, 0x00DF
    1274:	8e 7f       	andi	r24, 0xFE	; 254
    1276:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    127a:	80 91 de 00 	lds	r24, 0x00DE
    127e:	8e 7f       	andi	r24, 0xFE	; 254
    1280:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1284:	72 da       	rcall	.-2844   	; 0x76a <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1286:	80 91 a0 00 	lds	r24, 0x00A0
    128a:	82 60       	ori	r24, 0x02	; 2
    128c:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1290:	82 e0       	ldi	r24, 0x02	; 2
    1292:	80 93 31 01 	sts	0x0131, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1296:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    129a:	82 ff       	sbrs	r24, 2
    129c:	0e c0       	rjmp	.+28     	; 0x12ba <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    129e:	80 91 de 00 	lds	r24, 0x00DE
    12a2:	82 ff       	sbrs	r24, 2
    12a4:	0a c0       	rjmp	.+20     	; 0x12ba <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    12a6:	80 91 df 00 	lds	r24, 0x00DF
    12aa:	8b 7f       	andi	r24, 0xFB	; 251
    12ac:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	44 db       	rcall	.-2424   	; 0x93e <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    12b6:	5f da       	rcall	.-2882   	; 0x776 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    12b8:	15 df       	rcall	.-470    	; 0x10e4 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    12ba:	ff 91       	pop	r31
    12bc:	ef 91       	pop	r30
    12be:	bf 91       	pop	r27
    12c0:	af 91       	pop	r26
    12c2:	9f 91       	pop	r25
    12c4:	8f 91       	pop	r24
    12c6:	7f 91       	pop	r23
    12c8:	6f 91       	pop	r22
    12ca:	5f 91       	pop	r21
    12cc:	4f 91       	pop	r20
    12ce:	3f 91       	pop	r19
    12d0:	2f 91       	pop	r18
    12d2:	0f 90       	pop	r0
    12d4:	0b be       	out	0x3b, r0	; 59
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    12e0:	cf 92       	push	r12
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	29 97       	sbiw	r28, 0x09	; 9
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	6b 01       	movw	r12, r22
    1302:	8a 01       	movw	r16, r20
    1304:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1306:	90 e8       	ldi	r25, 0x80	; 128
    1308:	90 93 29 01 	sts	0x0129, r25
    130c:	96 e0       	ldi	r25, 0x06	; 6
    130e:	90 93 2a 01 	sts	0x012A, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1318:	90 93 2c 01 	sts	0x012C, r25
    131c:	80 93 2b 01 	sts	0x012B, r24
    1320:	10 92 2e 01 	sts	0x012E, r1
    1324:	10 92 2d 01 	sts	0x012D, r1
    1328:	89 e0       	ldi	r24, 0x09	; 9
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	90 93 30 01 	sts	0x0130, r25
    1330:	80 93 2f 01 	sts	0x012F, r24
    1334:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1338:	ce 01       	movw	r24, r28
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	95 d0       	rcall	.+298    	; 0x1468 <USB_Host_SendControlRequest>
    133e:	88 23       	and	r24, r24
    1340:	b9 f4       	brne	.+46     	; 0x1370 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	9c 81       	ldd	r25, Y+4	; 0x04
    1346:	f6 01       	movw	r30, r12
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    134c:	e8 16       	cp	r14, r24
    134e:	f9 06       	cpc	r15, r25
    1350:	70 f0       	brcs	.+28     	; 0x136e <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1352:	90 93 30 01 	sts	0x0130, r25
    1356:	80 93 2f 01 	sts	0x012F, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    135a:	c8 01       	movw	r24, r16
    135c:	85 d0       	rcall	.+266    	; 0x1468 <USB_Host_SendControlRequest>
    135e:	88 23       	and	r24, r24
    1360:	39 f4       	brne	.+14     	; 0x1370 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1362:	f8 01       	movw	r30, r16
    1364:	91 81       	ldd	r25, Z+1	; 0x01
    1366:	92 30       	cpi	r25, 0x02	; 2
    1368:	19 f0       	breq	.+6      	; 0x1370 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    136a:	86 e0       	ldi	r24, 0x06	; 6
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    136e:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1370:	29 96       	adiw	r28, 0x09	; 9
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	08 95       	ret

0000138e <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    138e:	af 92       	push	r10
    1390:	bf 92       	push	r11
    1392:	cf 92       	push	r12
    1394:	df 92       	push	r13
    1396:	ef 92       	push	r14
    1398:	ff 92       	push	r15
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	8c 01       	movw	r16, r24
    13a4:	eb 01       	movw	r28, r22
    13a6:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    13a8:	23 c0       	rjmp	.+70     	; 0x13f0 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    13aa:	e8 81       	ld	r30, Y
    13ac:	f9 81       	ldd	r31, Y+1	; 0x01
    13ae:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    13b0:	20 81       	ld	r18, Z
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	c7 01       	movw	r24, r14
    13b6:	2e 15       	cp	r18, r14
    13b8:	3f 05       	cpc	r19, r15
    13ba:	08 f4       	brcc	.+2      	; 0x13be <USB_GetNextDescriptorComp+0x30>
    13bc:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    13be:	e8 0f       	add	r30, r24
    13c0:	f9 1f       	adc	r31, r25
    13c2:	f9 83       	std	Y+1, r31	; 0x01
    13c4:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    13c6:	f8 01       	movw	r30, r16
    13c8:	20 81       	ld	r18, Z
    13ca:	31 81       	ldd	r19, Z+1	; 0x01
    13cc:	28 1b       	sub	r18, r24
    13ce:	39 0b       	sbc	r19, r25
    13d0:	31 83       	std	Z+1, r19	; 0x01
    13d2:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    13d4:	88 81       	ld	r24, Y
    13d6:	99 81       	ldd	r25, Y+1	; 0x01
    13d8:	f6 01       	movw	r30, r12
    13da:	09 95       	icall
    13dc:	82 30       	cpi	r24, 0x02	; 2
    13de:	41 f0       	breq	.+16     	; 0x13f0 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	69 f4       	brne	.+26     	; 0x13fe <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    13e4:	a8 82       	st	Y, r10
    13e6:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    13e8:	f8 01       	movw	r30, r16
    13ea:	f1 82       	std	Z+1, r15	; 0x01
    13ec:	e0 82       	st	Z, r14
    13ee:	07 c0       	rjmp	.+14     	; 0x13fe <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    13f0:	f8 01       	movw	r30, r16
    13f2:	e0 80       	ld	r14, Z
    13f4:	f1 80       	ldd	r15, Z+1	; 0x01
    13f6:	e1 14       	cp	r14, r1
    13f8:	f1 04       	cpc	r15, r1
    13fa:	b9 f6       	brne	.-82     	; 0x13aa <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    13fc:	82 e0       	ldi	r24, 0x02	; 2
}
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	df 90       	pop	r13
    140c:	cf 90       	pop	r12
    140e:	bf 90       	pop	r11
    1410:	af 90       	pop	r10
    1412:	08 95       	ret

00001414 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1414:	08 95       	ret

00001416 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    141e:	c8 ee       	ldi	r28, 0xE8	; 232
    1420:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1422:	07 c0       	rjmp	.+14     	; 0x1432 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	0a db       	rcall	.-2540   	; 0xa3c <USB_Host_WaitMS>
    1428:	88 23       	and	r24, r24
    142a:	d1 f4       	brne	.+52     	; 0x1460 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    142c:	20 97       	sbiw	r28, 0x00	; 0
    142e:	b9 f0       	breq	.+46     	; 0x145e <USB_Host_WaitForIOS+0x48>
    1430:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1432:	11 23       	and	r17, r17
    1434:	29 f4       	brne	.+10     	; 0x1440 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1436:	80 91 a6 00 	lds	r24, 0x00A6
    143a:	83 ff       	sbrs	r24, 3
    143c:	f3 cf       	rjmp	.-26     	; 0x1424 <USB_Host_WaitForIOS+0xe>
    143e:	0d c0       	rjmp	.+26     	; 0x145a <USB_Host_WaitForIOS+0x44>
    1440:	11 30       	cpi	r17, 0x01	; 1
    1442:	29 f4       	brne	.+10     	; 0x144e <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1444:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1448:	80 ff       	sbrs	r24, 0
    144a:	ec cf       	rjmp	.-40     	; 0x1424 <USB_Host_WaitForIOS+0xe>
    144c:	06 c0       	rjmp	.+12     	; 0x145a <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    144e:	12 30       	cpi	r17, 0x02	; 2
    1450:	49 f7       	brne	.-46     	; 0x1424 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1452:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1456:	82 ff       	sbrs	r24, 2
    1458:	e5 cf       	rjmp	.-54     	; 0x1424 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    145e:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	08 95       	ret

00001468 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1476:	e0 90 9e 00 	lds	r14, 0x009E
    147a:	ff 24       	eor	r15, r15
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	e8 22       	and	r14, r24
    1480:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1482:	c0 91 2f 01 	lds	r28, 0x012F
    1486:	d0 91 30 01 	lds	r29, 0x0130
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    148a:	80 91 9e 00 	lds	r24, 0x009E
    148e:	81 60       	ori	r24, 0x01	; 1
    1490:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	d2 da       	rcall	.-2652   	; 0xa3c <USB_Host_WaitMS>
    1498:	88 23       	and	r24, r24
    149a:	09 f0       	breq	.+2      	; 0x149e <USB_Host_SendControlRequest+0x36>
    149c:	cb c0       	rjmp	.+406    	; 0x1634 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    149e:	80 91 aa 00 	lds	r24, 0x00AA
    14a2:	8f 7c       	andi	r24, 0xCF	; 207
    14a4:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    14a8:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    14ac:	80 91 a6 00 	lds	r24, 0x00A6
    14b0:	8f 7e       	andi	r24, 0xEF	; 239
    14b2:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14b6:	80 91 a9 00 	lds	r24, 0x00A9
    14ba:	8f 7b       	andi	r24, 0xBF	; 191
    14bc:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    14c0:	e9 e2       	ldi	r30, 0x29	; 41
    14c2:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    14c4:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    14c6:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	e1 33       	cpi	r30, 0x31	; 49
    14ce:	f8 07       	cpc	r31, r24
    14d0:	c9 f7       	brne	.-14     	; 0x14c4 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    14d2:	80 91 a6 00 	lds	r24, 0x00A6
    14d6:	87 77       	andi	r24, 0x77	; 119
    14d8:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	9b df       	rcall	.-202    	; 0x1416 <USB_Host_WaitForIOS>
    14e0:	88 23       	and	r24, r24
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <USB_Host_SendControlRequest+0x7e>
    14e4:	a7 c0       	rjmp	.+334    	; 0x1634 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14e6:	80 91 a9 00 	lds	r24, 0x00A9
    14ea:	80 64       	ori	r24, 0x40	; 64
    14ec:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	a4 da       	rcall	.-2744   	; 0xa3c <USB_Host_WaitMS>
    14f4:	88 23       	and	r24, r24
    14f6:	09 f0       	breq	.+2      	; 0x14fa <USB_Host_SendControlRequest+0x92>
    14f8:	9d c0       	rjmp	.+314    	; 0x1634 <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    14fa:	80 91 29 01 	lds	r24, 0x0129
    14fe:	87 ff       	sbrs	r24, 7
    1500:	4f c0       	rjmp	.+158    	; 0x15a0 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1502:	80 91 aa 00 	lds	r24, 0x00AA
    1506:	8f 7c       	andi	r24, 0xCF	; 207
    1508:	80 61       	ori	r24, 0x10	; 16
    150a:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    150e:	01 15       	cp	r16, r1
    1510:	11 05       	cpc	r17, r1
    1512:	61 f5       	brne	.+88     	; 0x156c <USB_Host_SendControlRequest+0x104>
    1514:	2d c0       	rjmp	.+90     	; 0x1570 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1516:	80 91 a9 00 	lds	r24, 0x00A9
    151a:	8f 7b       	andi	r24, 0xBF	; 191
    151c:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	79 df       	rcall	.-270    	; 0x1416 <USB_Host_WaitForIOS>
    1524:	88 23       	and	r24, r24
    1526:	09 f0       	breq	.+2      	; 0x152a <USB_Host_SendControlRequest+0xc2>
    1528:	85 c0       	rjmp	.+266    	; 0x1634 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    152a:	80 91 f6 00 	lds	r24, 0x00F6
    152e:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	49 f4       	brne	.+18     	; 0x1548 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1536:	c0 e0       	ldi	r28, 0x00	; 0
    1538:	d0 e0       	ldi	r29, 0x00	; 0
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    153c:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1540:	f8 01       	movw	r30, r16
    1542:	81 93       	st	Z+, r24
    1544:	8f 01       	movw	r16, r30
					DataLen--;
    1546:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1548:	80 91 f6 00 	lds	r24, 0x00F6
    154c:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	11 f0       	breq	.+4      	; 0x1558 <USB_Host_SendControlRequest+0xf0>
    1554:	20 97       	sbiw	r28, 0x00	; 0
    1556:	91 f7       	brne	.-28     	; 0x153c <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1558:	80 91 a9 00 	lds	r24, 0x00A9
    155c:	80 64       	ori	r24, 0x40	; 64
    155e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1562:	80 91 a6 00 	lds	r24, 0x00A6
    1566:	8e 77       	andi	r24, 0x7E	; 126
    1568:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    156c:	20 97       	sbiw	r28, 0x00	; 0
    156e:	99 f6       	brne	.-90     	; 0x1516 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1570:	80 91 aa 00 	lds	r24, 0x00AA
    1574:	8f 7c       	andi	r24, 0xCF	; 207
    1576:	80 62       	ori	r24, 0x20	; 32
    1578:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    157c:	80 91 a9 00 	lds	r24, 0x00A9
    1580:	8f 7b       	andi	r24, 0xBF	; 191
    1582:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	46 df       	rcall	.-372    	; 0x1416 <USB_Host_WaitForIOS>
    158a:	88 23       	and	r24, r24
    158c:	09 f0       	breq	.+2      	; 0x1590 <USB_Host_SendControlRequest+0x128>
    158e:	52 c0       	rjmp	.+164    	; 0x1634 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1590:	80 91 a6 00 	lds	r24, 0x00A6
    1594:	8b 77       	andi	r24, 0x7B	; 123
    1596:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    159a:	82 e0       	ldi	r24, 0x02	; 2
    159c:	3c df       	rcall	.-392    	; 0x1416 <USB_Host_WaitForIOS>
    159e:	4a c0       	rjmp	.+148    	; 0x1634 <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    15a0:	01 15       	cp	r16, r1
    15a2:	11 05       	cpc	r17, r1
    15a4:	99 f1       	breq	.+102    	; 0x160c <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    15a6:	80 91 aa 00 	lds	r24, 0x00AA
    15aa:	8f 7c       	andi	r24, 0xCF	; 207
    15ac:	80 62       	ori	r24, 0x20	; 32
    15ae:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    15b2:	80 91 a9 00 	lds	r24, 0x00A9
    15b6:	8f 7b       	andi	r24, 0xBF	; 191
    15b8:	80 93 a9 00 	sts	0x00A9, r24
    15bc:	1c c0       	rjmp	.+56     	; 0x15f6 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	2a df       	rcall	.-428    	; 0x1416 <USB_Host_WaitForIOS>
    15c2:	88 23       	and	r24, r24
    15c4:	b9 f5       	brne	.+110    	; 0x1634 <USB_Host_SendControlRequest+0x1cc>
    15c6:	f8 01       	movw	r30, r16
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    15ca:	81 91       	ld	r24, Z+
    15cc:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    15ce:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    15d2:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    15d4:	59 f0       	breq	.+22     	; 0x15ec <USB_Host_SendControlRequest+0x184>
    15d6:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    15d8:	20 91 f6 00 	lds	r18, 0x00F6
    15dc:	30 91 f7 00 	lds	r19, 0x00F7
    15e0:	80 91 22 01 	lds	r24, 0x0122
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	28 17       	cp	r18, r24
    15e8:	39 07       	cpc	r19, r25
    15ea:	78 f3       	brcs	.-34     	; 0x15ca <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    15ec:	80 91 a6 00 	lds	r24, 0x00A6
    15f0:	8b 77       	andi	r24, 0x7B	; 123
    15f2:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    15f6:	20 97       	sbiw	r28, 0x00	; 0
    15f8:	11 f7       	brne	.-60     	; 0x15be <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	0c df       	rcall	.-488    	; 0x1416 <USB_Host_WaitForIOS>
    15fe:	88 23       	and	r24, r24
    1600:	c9 f4       	brne	.+50     	; 0x1634 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1602:	80 91 a9 00 	lds	r24, 0x00A9
    1606:	80 64       	ori	r24, 0x40	; 64
    1608:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    160c:	80 91 aa 00 	lds	r24, 0x00AA
    1610:	8f 7c       	andi	r24, 0xCF	; 207
    1612:	80 61       	ori	r24, 0x10	; 16
    1614:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1618:	80 91 a9 00 	lds	r24, 0x00A9
    161c:	8f 7b       	andi	r24, 0xBF	; 191
    161e:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	f8 de       	rcall	.-528    	; 0x1416 <USB_Host_WaitForIOS>
    1626:	88 23       	and	r24, r24
    1628:	29 f4       	brne	.+10     	; 0x1634 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    162a:	90 91 a6 00 	lds	r25, 0x00A6
    162e:	9e 77       	andi	r25, 0x7E	; 126
    1630:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1634:	90 91 a9 00 	lds	r25, 0x00A9
    1638:	90 64       	ori	r25, 0x40	; 64
    163a:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    163e:	e1 14       	cp	r14, r1
    1640:	f1 04       	cpc	r15, r1
    1642:	29 f4       	brne	.+10     	; 0x164e <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1644:	90 91 9e 00 	lds	r25, 0x009E
    1648:	9e 7f       	andi	r25, 0xFE	; 254
    164a:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    164e:	91 e0       	ldi	r25, 0x01	; 1
    1650:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1654:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	08 95       	ret

00001666 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1666:	1f 93       	push	r17
    1668:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    166a:	10 92 29 01 	sts	0x0129, r1
    166e:	89 e0       	ldi	r24, 0x09	; 9
    1670:	80 93 2a 01 	sts	0x012A, r24
    1674:	10 93 2b 01 	sts	0x012B, r17
    1678:	10 92 2c 01 	sts	0x012C, r1
    167c:	10 92 2e 01 	sts	0x012E, r1
    1680:	10 92 2d 01 	sts	0x012D, r1
    1684:	10 92 30 01 	sts	0x0130, r1
    1688:	10 92 2f 01 	sts	0x012F, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    168c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	e9 de       	rcall	.-558    	; 0x1468 <USB_Host_SendControlRequest>
    1696:	88 23       	and	r24, r24
    1698:	49 f4       	brne	.+18     	; 0x16ac <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    169a:	10 93 27 01 	sts	0x0127, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    169e:	11 23       	and	r17, r17
    16a0:	11 f0       	breq	.+4      	; 0x16a6 <USB_Host_SetDeviceConfiguration+0x40>
    16a2:	9b e0       	ldi	r25, 0x0B	; 11
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <USB_Host_SetDeviceConfiguration+0x42>
    16a6:	9a e0       	ldi	r25, 0x0A	; 10
    16a8:	90 93 31 01 	sts	0x0131, r25
	}

	return ErrorCode;
}
    16ac:	1f 91       	pop	r17
    16ae:	08 95       	ret

000016b0 <USB_Host_ClearEndpointStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    16b0:	92 e0       	ldi	r25, 0x02	; 2
    16b2:	90 93 29 01 	sts	0x0129, r25
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	90 93 2a 01 	sts	0x012A, r25
    16bc:	10 92 2c 01 	sts	0x012C, r1
    16c0:	10 92 2b 01 	sts	0x012B, r1
    16c4:	80 93 2d 01 	sts	0x012D, r24
    16c8:	10 92 2e 01 	sts	0x012E, r1
    16cc:	10 92 30 01 	sts	0x0130, r1
    16d0:	10 92 2f 01 	sts	0x012F, r1
    16d4:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
}
    16dc:	c5 ce       	rjmp	.-630    	; 0x1468 <USB_Host_SendControlRequest>

000016de <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    16de:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    16e0:	10 91 a7 00 	lds	r17, 0x00A7
    16e4:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    16e6:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    16ea:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    16ee:	fb d9       	rcall	.-3082   	; 0xae6 <USB_Host_ProcessNextHostState>
    16f0:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    16f4:	1f 91       	pop	r17
    16f6:	08 95       	ret

000016f8 <DCOMP_MS_Host_NextMSInterface>:

	return MS_ENUMERROR_NoError;
}

static uint8_t DCOMP_MS_Host_NextMSInterface(void* const CurrentDescriptor)
{
    16f8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    16fa:	81 81       	ldd	r24, Z+1	; 0x01
    16fc:	84 30       	cpi	r24, 0x04	; 4
    16fe:	49 f4       	brne	.+18     	; 0x1712 <DCOMP_MS_Host_NextMSInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == MS_CSCP_MassStorageClass)        &&
    1700:	85 81       	ldd	r24, Z+5	; 0x05
    1702:	88 30       	cpi	r24, 0x08	; 8
    1704:	31 f4       	brne	.+12     	; 0x1712 <DCOMP_MS_Host_NextMSInterface+0x1a>
    1706:	86 81       	ldd	r24, Z+6	; 0x06
    1708:	86 30       	cpi	r24, 0x06	; 6
    170a:	19 f4       	brne	.+6      	; 0x1712 <DCOMP_MS_Host_NextMSInterface+0x1a>
		    (Interface->SubClass == MS_CSCP_SCSITransparentSubclass) &&
    170c:	87 81       	ldd	r24, Z+7	; 0x07
    170e:	80 35       	cpi	r24, 0x50	; 80
    1710:	11 f0       	breq	.+4      	; 0x1716 <DCOMP_MS_Host_NextMSInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	08 95       	ret

		if ((Interface->Class    == MS_CSCP_MassStorageClass)        &&
		    (Interface->SubClass == MS_CSCP_SCSITransparentSubclass) &&
		    (Interface->Protocol == MS_CSCP_BulkOnlyTransportProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1716:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1718:	08 95       	ret

0000171a <MS_Host_WaitForDataReceived>:
	MS_CommandStatusWrapper_t SCSIStatusBlock;
	return MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSIStatusBlock);
}

static uint8_t MS_Host_WaitForDataReceived(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo)
{
    171a:	fc 01       	movw	r30, r24
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    171c:	20 91 a2 00 	lds	r18, 0x00A2
    1720:	30 91 a3 00 	lds	r19, 0x00A3
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1724:	80 81       	ld	r24, Z
    1726:	8f 70       	andi	r24, 0x0F	; 15
    1728:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    172c:	80 91 a9 00 	lds	r24, 0x00A9
    1730:	8f 7b       	andi	r24, 0xBF	; 191
    1732:	80 93 a9 00 	sts	0x00A9, r24
	uint16_t TimeoutMSRem        = MS_COMMAND_DATA_TIMEOUT_MS;
    1736:	80 e1       	ldi	r24, 0x10	; 16
    1738:	97 e2       	ldi	r25, 0x27	; 39
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    173a:	41 c0       	rjmp	.+130    	; 0x17be <MS_Host_WaitForDataReceived+0xa4>
    173c:	40 91 a2 00 	lds	r20, 0x00A2
    1740:	50 91 a3 00 	lds	r21, 0x00A3
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1744:	42 17       	cp	r20, r18
    1746:	53 07       	cpc	r21, r19
    1748:	29 f0       	breq	.+10     	; 0x1754 <MS_Host_WaitForDataReceived+0x3a>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	09 f4       	brne	.+2      	; 0x1750 <MS_Host_WaitForDataReceived+0x36>
    174e:	4f c0       	rjmp	.+158    	; 0x17ee <MS_Host_WaitForDataReceived+0xd4>
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	9a 01       	movw	r18, r20

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1754:	40 91 a9 00 	lds	r20, 0x00A9
    1758:	40 64       	ori	r20, 0x40	; 64
    175a:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    175e:	46 81       	ldd	r20, Z+6	; 0x06
    1760:	4f 70       	andi	r20, 0x0F	; 15
    1762:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1766:	40 91 a9 00 	lds	r20, 0x00A9
    176a:	4f 7b       	andi	r20, 0xBF	; 191
    176c:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1770:	40 91 a6 00 	lds	r20, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1774:	41 fd       	sbrc	r20, 1
    1776:	12 c0       	rjmp	.+36     	; 0x179c <MS_Host_WaitForDataReceived+0x82>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1778:	40 91 a9 00 	lds	r20, 0x00A9
    177c:	40 64       	ori	r20, 0x40	; 64
    177e:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1782:	40 81       	ld	r20, Z
    1784:	4f 70       	andi	r20, 0x0F	; 15
    1786:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    178a:	40 91 a9 00 	lds	r20, 0x00A9
    178e:	4f 7b       	andi	r20, 0xBF	; 191
    1790:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1794:	40 91 a6 00 	lds	r20, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1798:	41 ff       	sbrs	r20, 1
    179a:	0d c0       	rjmp	.+26     	; 0x17b6 <MS_Host_WaitForDataReceived+0x9c>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    179c:	90 91 aa 00 	lds	r25, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    17a0:	29 2f       	mov	r18, r25
    17a2:	2f 70       	andi	r18, 0x0F	; 15
    17a4:	90 ff       	sbrs	r25, 0
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <MS_Host_WaitForDataReceived+0x92>
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <MS_Host_WaitForDataReceived+0x94>
    17ac:	80 e8       	ldi	r24, 0x80	; 128
		{
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
    17ae:	82 2b       	or	r24, r18
    17b0:	7f df       	rcall	.-258    	; 0x16b0 <USB_Host_ClearEndpointStall>
			return PIPE_RWSTREAM_PipeStalled;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	08 95       	ret
		}

		if (USB_HostState == HOST_STATE_Unattached)
    17b6:	40 91 31 01 	lds	r20, 0x0131
    17ba:	41 30       	cpi	r20, 0x01	; 1
    17bc:	d1 f0       	breq	.+52     	; 0x17f2 <MS_Host_WaitForDataReceived+0xd8>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    17be:	40 91 a6 00 	lds	r20, 0x00A6
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    17c2:	40 ff       	sbrs	r20, 0
    17c4:	bb cf       	rjmp	.-138    	; 0x173c <MS_Host_WaitForDataReceived+0x22>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 70       	andi	r24, 0x0F	; 15
    17ca:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    17ce:	80 91 a9 00 	lds	r24, 0x00A9
    17d2:	80 64       	ori	r24, 0x40	; 64
    17d4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    17d8:	86 81       	ldd	r24, Z+6	; 0x06
    17da:	8f 70       	andi	r24, 0x0F	; 15
    17dc:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    17e0:	80 91 a9 00 	lds	r24, 0x00A9
    17e4:	80 64       	ori	r24, 0x40	; 64
    17e6:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Freeze();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_RWSTREAM_Timeout;
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	08 95       	ret
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
    17f2:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    17f4:	08 95       	ret

000017f6 <MS_Host_SendCommand>:
}

static uint8_t MS_Host_SendCommand(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                   const void* const BufferPtr)
{
    17f6:	cf 92       	push	r12
    17f8:	df 92       	push	r13
    17fa:	ef 92       	push	r14
    17fc:	ff 92       	push	r15
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	2f 97       	sbiw	r28, 0x0f	; 15
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	8c 01       	movw	r16, r24
    1818:	7b 01       	movw	r14, r22
    181a:	6a 01       	movw	r12, r20
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	if (++MSInterfaceInfo->State.TransactionTag == 0xFFFFFFFF)
    181c:	fc 01       	movw	r30, r24
    181e:	86 85       	ldd	r24, Z+14	; 0x0e
    1820:	97 85       	ldd	r25, Z+15	; 0x0f
    1822:	a0 89       	ldd	r26, Z+16	; 0x10
    1824:	b1 89       	ldd	r27, Z+17	; 0x11
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	a1 1d       	adc	r26, r1
    182a:	b1 1d       	adc	r27, r1
    182c:	86 87       	std	Z+14, r24	; 0x0e
    182e:	97 87       	std	Z+15, r25	; 0x0f
    1830:	a0 8b       	std	Z+16, r26	; 0x10
    1832:	b1 8b       	std	Z+17, r27	; 0x11
    1834:	8f 3f       	cpi	r24, 0xFF	; 255
    1836:	ff ef       	ldi	r31, 0xFF	; 255
    1838:	9f 07       	cpc	r25, r31
    183a:	ff ef       	ldi	r31, 0xFF	; 255
    183c:	af 07       	cpc	r26, r31
    183e:	ff ef       	ldi	r31, 0xFF	; 255
    1840:	bf 07       	cpc	r27, r31
    1842:	49 f4       	brne	.+18     	; 0x1856 <MS_Host_SendCommand+0x60>
	  MSInterfaceInfo->State.TransactionTag = 1;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a0 e0       	ldi	r26, 0x00	; 0
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	f8 01       	movw	r30, r16
    184e:	86 87       	std	Z+14, r24	; 0x0e
    1850:	97 87       	std	Z+15, r25	; 0x0f
    1852:	a0 8b       	std	Z+16, r26	; 0x10
    1854:	b1 8b       	std	Z+17, r27	; 0x11

	SCSICommandBlock->Signature = CPU_TO_LE32(MS_CBW_SIGNATURE);
    1856:	85 e5       	ldi	r24, 0x55	; 85
    1858:	93 e5       	ldi	r25, 0x53	; 83
    185a:	a2 e4       	ldi	r26, 0x42	; 66
    185c:	b3 e4       	ldi	r27, 0x43	; 67
    185e:	f7 01       	movw	r30, r14
    1860:	80 83       	st	Z, r24
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	a2 83       	std	Z+2, r26	; 0x02
    1866:	b3 83       	std	Z+3, r27	; 0x03
	SCSICommandBlock->Tag       = cpu_to_le32(MSInterfaceInfo->State.TransactionTag);
    1868:	f8 01       	movw	r30, r16
    186a:	86 85       	ldd	r24, Z+14	; 0x0e
    186c:	97 85       	ldd	r25, Z+15	; 0x0f
    186e:	a0 89       	ldd	r26, Z+16	; 0x10
    1870:	b1 89       	ldd	r27, Z+17	; 0x11
    1872:	f7 01       	movw	r30, r14
    1874:	84 83       	std	Z+4, r24	; 0x04
    1876:	95 83       	std	Z+5, r25	; 0x05
    1878:	a6 83       	std	Z+6, r26	; 0x06
    187a:	b7 83       	std	Z+7, r27	; 0x07
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    187c:	f8 01       	movw	r30, r16
    187e:	86 81       	ldd	r24, Z+6	; 0x06
    1880:	8f 70       	andi	r24, 0x0F	; 15
    1882:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1886:	80 91 a9 00 	lds	r24, 0x00A9
    188a:	8f 7b       	andi	r24, 0xBF	; 191
    188c:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(SCSICommandBlock, sizeof(MS_CommandBlockWrapper_t),
    1890:	c7 01       	movw	r24, r14
    1892:	6f e1       	ldi	r22, 0x1F	; 31
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	4e da       	rcall	.-2916   	; 0xd38 <Pipe_Write_Stream_LE>
    189c:	88 23       	and	r24, r24
    189e:	09 f0       	breq	.+2      	; 0x18a2 <MS_Host_SendCommand+0xac>
    18a0:	8b c0       	rjmp	.+278    	; 0x19b8 <MS_Host_SendCommand+0x1c2>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    18a2:	80 91 a6 00 	lds	r24, 0x00A6
    18a6:	8b 77       	andi	r24, 0x7B	; 123
    18a8:	80 93 a6 00 	sts	0x00A6, r24
	{
		return ErrorCode;
	}

	Pipe_ClearOUT();
	Pipe_WaitUntilReady();
    18ac:	d3 db       	rcall	.-2138   	; 0x1054 <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    18ae:	80 91 a9 00 	lds	r24, 0x00A9
    18b2:	80 64       	ori	r24, 0x40	; 64
    18b4:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_Freeze();

	if (BufferPtr != NULL)
    18b8:	c1 14       	cp	r12, r1
    18ba:	d1 04       	cpc	r13, r1
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <MS_Host_SendCommand+0xca>
    18be:	58 c0       	rjmp	.+176    	; 0x1970 <MS_Host_SendCommand+0x17a>
static uint8_t MS_Host_SendReceiveData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                       MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                       void* BufferPtr)
{
	uint8_t  ErrorCode = PIPE_RWSTREAM_NoError;
	uint16_t BytesRem  = le32_to_cpu(SCSICommandBlock->DataTransferLength);
    18c0:	f7 01       	movw	r30, r14
    18c2:	60 85       	ldd	r22, Z+8	; 0x08
    18c4:	71 85       	ldd	r23, Z+9	; 0x09

	if (SCSICommandBlock->Flags & MS_COMMAND_DIR_DATA_IN)
    18c6:	84 85       	ldd	r24, Z+12	; 0x0c
    18c8:	87 ff       	sbrs	r24, 7
    18ca:	24 c0       	rjmp	.+72     	; 0x1914 <MS_Host_SendCommand+0x11e>
	{
		if ((ErrorCode = MS_Host_WaitForDataReceived(MSInterfaceInfo)) != PIPE_RWSTREAM_NoError)
    18cc:	c8 01       	movw	r24, r16
    18ce:	6e 87       	std	Y+14, r22	; 0x0e
    18d0:	7f 87       	std	Y+15, r23	; 0x0f
    18d2:	23 df       	rcall	.-442    	; 0x171a <MS_Host_WaitForDataReceived>
    18d4:	6e 85       	ldd	r22, Y+14	; 0x0e
    18d6:	7f 85       	ldd	r23, Y+15	; 0x0f
    18d8:	88 23       	and	r24, r24
    18da:	31 f0       	breq	.+12     	; 0x18e8 <MS_Host_SendCommand+0xf2>
    18dc:	90 91 a9 00 	lds	r25, 0x00A9
    18e0:	90 64       	ori	r25, 0x40	; 64
    18e2:	90 93 a9 00 	sts	0x00A9, r25
    18e6:	3a c0       	rjmp	.+116    	; 0x195c <MS_Host_SendCommand+0x166>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    18e8:	f8 01       	movw	r30, r16
    18ea:	80 81       	ld	r24, Z
    18ec:	8f 70       	andi	r24, 0x0F	; 15
    18ee:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18f2:	80 91 a9 00 	lds	r24, 0x00A9
    18f6:	8f 7b       	andi	r24, 0xBF	; 191
    18f8:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
		Pipe_Unfreeze();

		if ((ErrorCode = Pipe_Read_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
    18fc:	c6 01       	movw	r24, r12
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	7d da       	rcall	.-2822   	; 0xdfe <Pipe_Read_Stream_LE>
    1904:	88 23       	and	r24, r24
    1906:	51 f5       	brne	.+84     	; 0x195c <MS_Host_SendCommand+0x166>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1908:	80 91 a6 00 	lds	r24, 0x00A6
    190c:	8e 77       	andi	r24, 0x7E	; 126
    190e:	80 93 a6 00 	sts	0x00A6, r24
    1912:	1e c0       	rjmp	.+60     	; 0x1950 <MS_Host_SendCommand+0x15a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1914:	f8 01       	movw	r30, r16
    1916:	86 81       	ldd	r24, Z+6	; 0x06
    1918:	8f 70       	andi	r24, 0x0F	; 15
    191a:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    191e:	80 91 a9 00 	lds	r24, 0x00A9
    1922:	8f 7b       	andi	r24, 0xBF	; 191
    1924:	80 93 a9 00 	sts	0x00A9, r24
	else
	{
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
		Pipe_Unfreeze();

		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
    1928:	c6 01       	movw	r24, r12
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	04 da       	rcall	.-3064   	; 0xd38 <Pipe_Write_Stream_LE>
    1930:	88 23       	and	r24, r24
    1932:	a1 f4       	brne	.+40     	; 0x195c <MS_Host_SendCommand+0x166>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1934:	80 91 a6 00 	lds	r24, 0x00A6
    1938:	8b 77       	andi	r24, 0x7B	; 123
    193a:	80 93 a6 00 	sts	0x00A6, r24
    193e:	04 c0       	rjmp	.+8      	; 0x1948 <MS_Host_SendCommand+0x152>

		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
		{
			if (USB_HostState == HOST_STATE_Unattached)
    1940:	80 91 31 01 	lds	r24, 0x0131
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	69 f0       	breq	.+26     	; 0x1962 <MS_Host_SendCommand+0x16c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1948:	80 91 a6 00 	lds	r24, 0x00A6
		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
		  return ErrorCode;

		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
    194c:	82 ff       	sbrs	r24, 2
    194e:	f8 cf       	rjmp	.-16     	; 0x1940 <MS_Host_SendCommand+0x14a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1950:	80 91 a9 00 	lds	r24, 0x00A9
    1954:	80 64       	ori	r24, 0x40	; 64
    1956:	80 93 a9 00 	sts	0x00A9, r24
    195a:	0a c0       	rjmp	.+20     	; 0x1970 <MS_Host_SendCommand+0x17a>

	if (BufferPtr != NULL)
	{
		ErrorCode = MS_Host_SendReceiveData(MSInterfaceInfo, SCSICommandBlock, (void*)BufferPtr);

		if ((ErrorCode != PIPE_RWSTREAM_NoError) && (ErrorCode != PIPE_RWSTREAM_PipeStalled))
    195c:	82 30       	cpi	r24, 0x02	; 2
    195e:	10 f4       	brcc	.+4      	; 0x1964 <MS_Host_SendCommand+0x16e>
    1960:	07 c0       	rjmp	.+14     	; 0x1970 <MS_Host_SendCommand+0x17a>
		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
		{
			if (USB_HostState == HOST_STATE_Unattached)
			  return PIPE_RWSTREAM_DeviceDisconnected;
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	90 91 a9 00 	lds	r25, 0x00A9
    1968:	90 64       	ori	r25, 0x40	; 64
    196a:	90 93 a9 00 	sts	0x00A9, r25
		ErrorCode = MS_Host_SendReceiveData(MSInterfaceInfo, SCSICommandBlock, (void*)BufferPtr);

		if ((ErrorCode != PIPE_RWSTREAM_NoError) && (ErrorCode != PIPE_RWSTREAM_PipeStalled))
		{
			Pipe_Freeze();
			return ErrorCode;
    196e:	24 c0       	rjmp	.+72     	; 0x19b8 <MS_Host_SendCommand+0x1c2>
static uint8_t MS_Host_GetReturnedStatus(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                         MS_CommandStatusWrapper_t* const SCSICommandStatus)
{
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	if ((ErrorCode = MS_Host_WaitForDataReceived(MSInterfaceInfo)) != PIPE_RWSTREAM_NoError)
    1970:	c8 01       	movw	r24, r16
    1972:	d3 de       	rcall	.-602    	; 0x171a <MS_Host_WaitForDataReceived>
    1974:	88 23       	and	r24, r24
    1976:	01 f5       	brne	.+64     	; 0x19b8 <MS_Host_SendCommand+0x1c2>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1978:	f8 01       	movw	r30, r16
    197a:	80 81       	ld	r24, Z
    197c:	8f 70       	andi	r24, 0x0F	; 15
    197e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1982:	80 91 a9 00 	lds	r24, 0x00A9
    1986:	8f 7b       	andi	r24, 0xBF	; 191
    1988:	80 93 a9 00 	sts	0x00A9, r24
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t),
    198c:	ce 01       	movw	r24, r28
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	6d e0       	ldi	r22, 0x0D	; 13
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	32 da       	rcall	.-2972   	; 0xdfe <Pipe_Read_Stream_LE>
    199a:	88 23       	and	r24, r24
    199c:	69 f4       	brne	.+26     	; 0x19b8 <MS_Host_SendCommand+0x1c2>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    199e:	90 91 a6 00 	lds	r25, 0x00A6
    19a2:	9e 77       	andi	r25, 0x7E	; 126
    19a4:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19a8:	90 91 a9 00 	lds	r25, 0x00A9
    19ac:	90 64       	ori	r25, 0x40	; 64
    19ae:	90 93 a9 00 	sts	0x00A9, r25
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
    19b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    19b4:	91 11       	cpse	r25, r1
	  ErrorCode = MS_ERROR_LOGICAL_CMD_FAILED;
    19b6:	80 e8       	ldi	r24, 0x80	; 128
		}
	}

	MS_CommandStatusWrapper_t SCSIStatusBlock;
	return MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSIStatusBlock);
}
    19b8:	2f 96       	adiw	r28, 0x0f	; 15
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	ff 90       	pop	r15
    19ce:	ef 90       	pop	r14
    19d0:	df 90       	pop	r13
    19d2:	cf 90       	pop	r12
    19d4:	08 95       	ret

000019d6 <DCOMP_MS_Host_NextMSInterfaceEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_MS_Host_NextMSInterfaceEndpoint(void* const CurrentDescriptor)
{
    19d6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    19d8:	81 81       	ldd	r24, Z+1	; 0x01
    19da:	85 30       	cpi	r24, 0x05	; 5
    19dc:	49 f4       	brne	.+18     	; 0x19f0 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    19de:	83 81       	ldd	r24, Z+3	; 0x03
    19e0:	83 70       	andi	r24, 0x03	; 3

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    19e2:	82 30       	cpi	r24, 0x02	; 2
    19e4:	39 f4       	brne	.+14     	; 0x19f4 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x1e>
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	11 db       	rcall	.-2526   	; 0x100c <Pipe_IsEndpointBound>
    19ea:	88 23       	and	r24, r24
    19ec:	19 f4       	brne	.+6      	; 0x19f4 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x1e>
    19ee:	04 c0       	rjmp	.+8      	; 0x19f8 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x22>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    19f0:	84 30       	cpi	r24, 0x04	; 4
    19f2:	21 f0       	breq	.+8      	; 0x19fc <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x26>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	08 95       	ret

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    19fe:	08 95       	ret

00001a00 <MS_Host_ConfigurePipes>:
#include "MassStorageClassHost.h"

uint8_t MS_Host_ConfigurePipes(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
							   void* ConfigDescriptorData)
{
    1a00:	6f 92       	push	r6
    1a02:	7f 92       	push	r7
    1a04:	8f 92       	push	r8
    1a06:	9f 92       	push	r9
    1a08:	af 92       	push	r10
    1a0a:	bf 92       	push	r11
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <MS_Host_ConfigurePipes+0x1e>
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <MS_Host_ConfigurePipes+0x20>
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	8c 01       	movw	r16, r24
    1a26:	7a 83       	std	Y+2, r23	; 0x02
    1a28:	69 83       	std	Y+1, r22	; 0x01
    1a2a:	5c 83       	std	Y+4, r21	; 0x04
    1a2c:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Interface_t* MassStorageInterface = NULL;

	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1a2e:	0c 96       	adiw	r24, 0x0c	; 12
    1a30:	fc 01       	movw	r30, r24
    1a32:	86 e0       	ldi	r24, 0x06	; 6
    1a34:	df 01       	movw	r26, r30
    1a36:	1d 92       	st	X+, r1
    1a38:	8a 95       	dec	r24
    1a3a:	e9 f7       	brne	.-6      	; 0x1a36 <MS_Host_ConfigurePipes+0x36>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1a3c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a3e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a40:	81 81       	ldd	r24, Z+1	; 0x01
    1a42:	82 30       	cpi	r24, 0x02	; 2
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <MS_Host_ConfigurePipes+0x48>
    1a46:	67 c0       	rjmp	.+206    	; 0x1b16 <MS_Host_ConfigurePipes+0x116>
    1a48:	aa 24       	eor	r10, r10
    1a4a:	bb 24       	eor	r11, r11
    1a4c:	cc 24       	eor	r12, r12
    1a4e:	dd 24       	eor	r13, r13
    1a50:	ee 24       	eor	r14, r14
    1a52:	ff 24       	eor	r15, r15
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MassStorageInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1a54:	83 e0       	ldi	r24, 0x03	; 3
    1a56:	68 2e       	mov	r6, r24
    1a58:	71 2c       	mov	r7, r1
    1a5a:	6c 0e       	add	r6, r28
    1a5c:	7d 1e       	adc	r7, r29
    1a5e:	4e 01       	movw	r8, r28
    1a60:	08 94       	sec
    1a62:	81 1c       	adc	r8, r1
    1a64:	91 1c       	adc	r9, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MassStorageInterface) ||
    1a66:	a1 14       	cp	r10, r1
    1a68:	b1 04       	cpc	r11, r1
    1a6a:	39 f0       	breq	.+14     	; 0x1a7a <MS_Host_ConfigurePipes+0x7a>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1a6c:	c4 01       	movw	r24, r8
    1a6e:	b3 01       	movw	r22, r6
    1a70:	4b ee       	ldi	r20, 0xEB	; 235
    1a72:	5c e0       	ldi	r21, 0x0C	; 12
    1a74:	8c dc       	rcall	.-1768   	; 0x138e <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MassStorageInterface) ||
    1a76:	88 23       	and	r24, r24
    1a78:	79 f0       	breq	.+30     	; 0x1a98 <MS_Host_ConfigurePipes+0x98>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_MS_Host_NextMSInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1a7a:	c4 01       	movw	r24, r8
    1a7c:	b3 01       	movw	r22, r6
    1a7e:	4c e7       	ldi	r20, 0x7C	; 124
    1a80:	5b e0       	ldi	r21, 0x0B	; 11
    1a82:	85 dc       	rcall	.-1782   	; 0x138e <USB_GetNextDescriptorComp>
    1a84:	88 23       	and	r24, r24
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <MS_Host_ConfigurePipes+0x8a>
    1a88:	48 c0       	rjmp	.+144    	; 0x1b1a <MS_Host_ConfigurePipes+0x11a>
			                              DCOMP_MS_Host_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MS_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MassStorageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1a8a:	ab 80       	ldd	r10, Y+3	; 0x03
    1a8c:	bc 80       	ldd	r11, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1a8e:	cc 24       	eor	r12, r12
    1a90:	dd 24       	eor	r13, r13
			                              DCOMP_MS_Host_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MS_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MassStorageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1a92:	ee 24       	eor	r14, r14
    1a94:	ff 24       	eor	r15, r15
    1a96:	e7 cf       	rjmp	.-50     	; 0x1a66 <MS_Host_ConfigurePipes+0x66>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1a98:	eb 81       	ldd	r30, Y+3	; 0x03
    1a9a:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1a9c:	82 81       	ldd	r24, Z+2	; 0x02
    1a9e:	87 ff       	sbrs	r24, 7
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <MS_Host_ConfigurePipes+0xa6>
		  DataINEndpoint  = EndpointData;
    1aa2:	7f 01       	movw	r14, r30
    1aa4:	01 c0       	rjmp	.+2      	; 0x1aa8 <MS_Host_ConfigurePipes+0xa8>
		else
		  DataOUTEndpoint = EndpointData;
    1aa6:	6f 01       	movw	r12, r30
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1aa8:	e1 14       	cp	r14, r1
    1aaa:	f1 04       	cpc	r15, r1
    1aac:	e1 f2       	breq	.-72     	; 0x1a66 <MS_Host_ConfigurePipes+0x66>
    1aae:	c1 14       	cp	r12, r1
    1ab0:	d1 04       	cpc	r13, r1
    1ab2:	c9 f2       	breq	.-78     	; 0x1a66 <MS_Host_ConfigurePipes+0x66>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	MSInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1ab4:	f7 01       	movw	r30, r14
    1ab6:	84 81       	ldd	r24, Z+4	; 0x04
    1ab8:	95 81       	ldd	r25, Z+5	; 0x05
    1aba:	d8 01       	movw	r26, r16
    1abc:	12 96       	adiw	r26, 0x02	; 2
    1abe:	9c 93       	st	X, r25
    1ac0:	8e 93       	st	-X, r24
    1ac2:	11 97       	sbiw	r26, 0x01	; 1
	MSInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	13 96       	adiw	r26, 0x03	; 3
    1ac8:	8c 93       	st	X, r24
    1aca:	13 97       	sbiw	r26, 0x03	; 3
	MSInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    1acc:	22 e0       	ldi	r18, 0x02	; 2
    1ace:	14 96       	adiw	r26, 0x04	; 4
    1ad0:	2c 93       	st	X, r18
    1ad2:	14 97       	sbiw	r26, 0x04	; 4
	
	MSInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1ad4:	f6 01       	movw	r30, r12
    1ad6:	84 81       	ldd	r24, Z+4	; 0x04
    1ad8:	95 81       	ldd	r25, Z+5	; 0x05
    1ada:	18 96       	adiw	r26, 0x08	; 8
    1adc:	9c 93       	st	X, r25
    1ade:	8e 93       	st	-X, r24
    1ae0:	17 97       	sbiw	r26, 0x07	; 7
	MSInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	19 96       	adiw	r26, 0x09	; 9
    1ae6:	8c 93       	st	X, r24
    1ae8:	19 97       	sbiw	r26, 0x09	; 9
	MSInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    1aea:	1a 96       	adiw	r26, 0x0a	; 10
    1aec:	2c 93       	st	X, r18
	
	if (!(Pipe_ConfigurePipeTable(&MSInterfaceInfo->Config.DataINPipe, 1)))
    1aee:	c8 01       	movw	r24, r16
    1af0:	61 e0       	ldi	r22, 0x01	; 1
    1af2:	4f da       	rcall	.-2914   	; 0xf92 <Pipe_ConfigurePipeTable>
    1af4:	88 23       	and	r24, r24
    1af6:	99 f0       	breq	.+38     	; 0x1b1e <MS_Host_ConfigurePipes+0x11e>
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&MSInterfaceInfo->Config.DataOUTPipe, 1)))
    1af8:	c8 01       	movw	r24, r16
    1afa:	06 96       	adiw	r24, 0x06	; 6
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	49 da       	rcall	.-2926   	; 0xf92 <Pipe_ConfigurePipeTable>
    1b00:	88 23       	and	r24, r24
    1b02:	69 f0       	breq	.+26     	; 0x1b1e <MS_Host_ConfigurePipes+0x11e>
	  return false;

	MSInterfaceInfo->State.InterfaceNumber = MassStorageInterface->InterfaceNumber;
    1b04:	d5 01       	movw	r26, r10
    1b06:	12 96       	adiw	r26, 0x02	; 2
    1b08:	8c 91       	ld	r24, X
    1b0a:	12 97       	sbiw	r26, 0x02	; 2
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	85 87       	std	Z+13, r24	; 0x0d
	MSInterfaceInfo->State.IsActive = true;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	84 87       	std	Z+12, r24	; 0x0c
    1b14:	04 c0       	rjmp	.+8      	; 0x1b1e <MS_Host_ConfigurePipes+0x11e>
	USB_Descriptor_Interface_t* MassStorageInterface = NULL;

	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <MS_Host_ConfigurePipes+0x120>
		                              DCOMP_MS_Host_NextMSInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_MS_Host_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MS_ENUMERROR_NoCompatibleInterfaceFound;
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	01 c0       	rjmp	.+2      	; 0x1b20 <MS_Host_ConfigurePipes+0x120>
	
	if (!(Pipe_ConfigurePipeTable(&MSInterfaceInfo->Config.DataINPipe, 1)))
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&MSInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;
    1b1e:	80 e0       	ldi	r24, 0x00	; 0

	MSInterfaceInfo->State.InterfaceNumber = MassStorageInterface->InterfaceNumber;
	MSInterfaceInfo->State.IsActive = true;

	return MS_ENUMERROR_NoError;
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	df 90       	pop	r13
    1b36:	cf 90       	pop	r12
    1b38:	bf 90       	pop	r11
    1b3a:	af 90       	pop	r10
    1b3c:	9f 90       	pop	r9
    1b3e:	8f 90       	pop	r8
    1b40:	7f 90       	pop	r7
    1b42:	6f 90       	pop	r6
    1b44:	08 95       	ret

00001b46 <MS_Host_ResetMSInterface>:

	return ErrorCode;
}

uint8_t MS_Host_ResetMSInterface(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo)
{
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4e:	91 e2       	ldi	r25, 0x21	; 33
    1b50:	90 93 29 01 	sts	0x0129, r25
    1b54:	9f ef       	ldi	r25, 0xFF	; 255
    1b56:	90 93 2a 01 	sts	0x012A, r25
    1b5a:	10 92 2c 01 	sts	0x012C, r1
    1b5e:	10 92 2b 01 	sts	0x012B, r1
    1b62:	80 93 2d 01 	sts	0x012D, r24
    1b66:	10 92 2e 01 	sts	0x012E, r1
    1b6a:	10 92 30 01 	sts	0x0130, r1
    1b6e:	10 92 2f 01 	sts	0x012F, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1b72:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	76 dc       	rcall	.-1812   	; 0x1468 <USB_Host_SendControlRequest>
    1b7c:	88 23       	and	r24, r24
    1b7e:	01 f5       	brne	.+64     	; 0x1bc0 <MS_Host_ResetMSInterface+0x7a>
    1b80:	88 81       	ld	r24, Y
    1b82:	8f 70       	andi	r24, 0x0F	; 15
    1b84:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    1b88:	90 91 aa 00 	lds	r25, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    1b8c:	29 2f       	mov	r18, r25
    1b8e:	2f 70       	andi	r18, 0x0F	; 15
    1b90:	90 ff       	sbrs	r25, 0
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <MS_Host_ResetMSInterface+0x52>
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	01 c0       	rjmp	.+2      	; 0x1b9a <MS_Host_ResetMSInterface+0x54>
    1b98:	80 e8       	ldi	r24, 0x80	; 128
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    1b9a:	82 2b       	or	r24, r18
    1b9c:	89 dd       	rcall	.-1262   	; 0x16b0 <USB_Host_ClearEndpointStall>
    1b9e:	88 23       	and	r24, r24
    1ba0:	79 f4       	brne	.+30     	; 0x1bc0 <MS_Host_ResetMSInterface+0x7a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba4:	8f 70       	andi	r24, 0x0F	; 15
    1ba6:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    1baa:	90 91 aa 00 	lds	r25, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    1bae:	29 2f       	mov	r18, r25
    1bb0:	2f 70       	andi	r18, 0x0F	; 15
    1bb2:	90 ff       	sbrs	r25, 0
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <MS_Host_ResetMSInterface+0x74>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <MS_Host_ResetMSInterface+0x76>
    1bba:	80 e8       	ldi	r24, 0x80	; 128
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    1bbc:	82 2b       	or	r24, r18
    1bbe:	78 dd       	rcall	.-1296   	; 0x16b0 <USB_Host_ClearEndpointStall>
	  return ErrorCode;

	return HOST_SENDCONTROL_Successful;
}
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	08 95       	ret

00001bc6 <MS_Host_GetMaxLUN>:

uint8_t MS_Host_GetMaxLUN(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                          uint8_t* const MaxLUNIndex)
{
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	eb 01       	movw	r28, r22
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1bcc:	fc 01       	movw	r30, r24
    1bce:	85 85       	ldd	r24, Z+13	; 0x0d
    1bd0:	91 ea       	ldi	r25, 0xA1	; 161
    1bd2:	90 93 29 01 	sts	0x0129, r25
    1bd6:	9e ef       	ldi	r25, 0xFE	; 254
    1bd8:	90 93 2a 01 	sts	0x012A, r25
    1bdc:	10 92 2c 01 	sts	0x012C, r1
    1be0:	10 92 2b 01 	sts	0x012B, r1
    1be4:	80 93 2d 01 	sts	0x012D, r24
    1be8:	10 92 2e 01 	sts	0x012E, r1
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	90 93 30 01 	sts	0x0130, r25
    1bf4:	80 93 2f 01 	sts	0x012F, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1bf8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 1,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(MaxLUNIndex)) == HOST_SENDCONTROL_SetupStalled)
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	34 dc       	rcall	.-1944   	; 0x1468 <USB_Host_SendControlRequest>
    1c00:	83 30       	cpi	r24, 0x03	; 3
    1c02:	11 f4       	brne	.+4      	; 0x1c08 <MS_Host_GetMaxLUN+0x42>
	{
		*MaxLUNIndex = 0;
    1c04:	18 82       	st	Y, r1
		ErrorCode    = HOST_SENDCONTROL_Successful;
    1c06:	80 e0       	ldi	r24, 0x00	; 0
	}

	return ErrorCode;
}
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	08 95       	ret

00001c0e <MS_Host_GetInquiryData>:

uint8_t MS_Host_GetInquiryData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               const uint8_t LUNIndex,
                               SCSI_Inquiry_Response_t* const InquiryData)
{
    1c0e:	0f 93       	push	r16
    1c10:	1f 93       	push	r17
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	6f 97       	sbiw	r28, 0x1f	; 31
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1c26:	20 91 31 01 	lds	r18, 0x0131
    1c2a:	2b 30       	cpi	r18, 0x0B	; 11
    1c2c:	09 f5       	brne	.+66     	; 0x1c70 <MS_Host_GetInquiryData+0x62>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	1c 96       	adiw	r26, 0x0c	; 12
    1c32:	2c 91       	ld	r18, X
    1c34:	1c 97       	sbiw	r26, 0x0c	; 12
    1c36:	22 23       	and	r18, r18
    1c38:	d9 f0       	breq	.+54     	; 0x1c70 <MS_Host_GetInquiryData+0x62>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	31 96       	adiw	r30, 0x01	; 1
    1c3e:	2f e1       	ldi	r18, 0x1F	; 31
    1c40:	df 01       	movw	r26, r30
    1c42:	1d 92       	st	X+, r1
    1c44:	2a 95       	dec	r18
    1c46:	e9 f7       	brne	.-6      	; 0x1c42 <MS_Host_GetInquiryData+0x34>
    1c48:	04 e2       	ldi	r16, 0x24	; 36
    1c4a:	10 e0       	ldi	r17, 0x00	; 0
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	09 87       	std	Y+9, r16	; 0x09
    1c52:	1a 87       	std	Y+10, r17	; 0x0a
    1c54:	2b 87       	std	Y+11, r18	; 0x0b
    1c56:	3c 87       	std	Y+12, r19	; 0x0c
    1c58:	20 e8       	ldi	r18, 0x80	; 128
    1c5a:	2d 87       	std	Y+13, r18	; 0x0d
    1c5c:	6e 87       	std	Y+14, r22	; 0x0e
    1c5e:	26 e0       	ldi	r18, 0x06	; 6
    1c60:	2f 87       	std	Y+15, r18	; 0x0f
    1c62:	22 e1       	ldi	r18, 0x12	; 18
    1c64:	28 8b       	std	Y+16, r18	; 0x10
    1c66:	24 e2       	ldi	r18, 0x24	; 36
    1c68:	2c 8b       	std	Y+20, r18	; 0x14
					sizeof(SCSI_Inquiry_Response_t), // Allocation Length
					0x00                             // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, InquiryData);
    1c6a:	bf 01       	movw	r22, r30
    1c6c:	c4 dd       	rcall	.-1144   	; 0x17f6 <MS_Host_SendCommand>
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <MS_Host_GetInquiryData+0x64>
uint8_t MS_Host_GetInquiryData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               const uint8_t LUNIndex,
                               SCSI_Inquiry_Response_t* const InquiryData)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
					0x00                             // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, InquiryData);
}
    1c72:	6f 96       	adiw	r28, 0x1f	; 31
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	08 95       	ret

00001c88 <MS_Host_TestUnitReady>:

uint8_t MS_Host_TestUnitReady(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                              const uint8_t LUNIndex)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	6f 97       	sbiw	r28, 0x1f	; 31
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1c9c:	20 91 31 01 	lds	r18, 0x0131
    1ca0:	2b 30       	cpi	r18, 0x0B	; 11
    1ca2:	b9 f4       	brne	.+46     	; 0x1cd2 <MS_Host_TestUnitReady+0x4a>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	1c 96       	adiw	r26, 0x0c	; 12
    1ca8:	2c 91       	ld	r18, X
    1caa:	1c 97       	sbiw	r26, 0x0c	; 12
    1cac:	22 23       	and	r18, r18
    1cae:	89 f0       	breq	.+34     	; 0x1cd2 <MS_Host_TestUnitReady+0x4a>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	31 96       	adiw	r30, 0x01	; 1
    1cb4:	2f e1       	ldi	r18, 0x1F	; 31
    1cb6:	df 01       	movw	r26, r30
    1cb8:	1d 92       	st	X+, r1
    1cba:	2a 95       	dec	r18
    1cbc:	e9 f7       	brne	.-6      	; 0x1cb8 <MS_Host_TestUnitReady+0x30>
    1cbe:	20 e8       	ldi	r18, 0x80	; 128
    1cc0:	2d 87       	std	Y+13, r18	; 0x0d
    1cc2:	6e 87       	std	Y+14, r22	; 0x0e
    1cc4:	26 e0       	ldi	r18, 0x06	; 6
    1cc6:	2f 87       	std	Y+15, r18	; 0x0f
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL);
    1cc8:	bf 01       	movw	r22, r30
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	93 dd       	rcall	.-1242   	; 0x17f6 <MS_Host_SendCommand>
    1cd0:	01 c0       	rjmp	.+2      	; 0x1cd4 <MS_Host_TestUnitReady+0x4c>

uint8_t MS_Host_TestUnitReady(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                              const uint8_t LUNIndex)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL);
}
    1cd4:	6f 96       	adiw	r28, 0x1f	; 31
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <MS_Host_ReadDeviceCapacity>:

uint8_t MS_Host_ReadDeviceCapacity(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   const uint8_t LUNIndex,
                                   SCSI_Capacity_t* const DeviceCapacity)
{
    1ce6:	cf 92       	push	r12
    1ce8:	df 92       	push	r13
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	6f 97       	sbiw	r28, 0x1f	; 31
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	6a 01       	movw	r12, r20
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1d08:	20 91 31 01 	lds	r18, 0x0131
    1d0c:	2b 30       	cpi	r18, 0x0B	; 11
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <MS_Host_ReadDeviceCapacity+0x2c>
    1d10:	8c c0       	rjmp	.+280    	; 0x1e2a <MS_Host_ReadDeviceCapacity+0x144>
    1d12:	dc 01       	movw	r26, r24
    1d14:	1c 96       	adiw	r26, 0x0c	; 12
    1d16:	2c 91       	ld	r18, X
    1d18:	1c 97       	sbiw	r26, 0x0c	; 12
    1d1a:	22 23       	and	r18, r18
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <MS_Host_ReadDeviceCapacity+0x3a>
    1d1e:	85 c0       	rjmp	.+266    	; 0x1e2a <MS_Host_ReadDeviceCapacity+0x144>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1d20:	fe 01       	movw	r30, r28
    1d22:	31 96       	adiw	r30, 0x01	; 1
    1d24:	2f e1       	ldi	r18, 0x1F	; 31
    1d26:	df 01       	movw	r26, r30
    1d28:	1d 92       	st	X+, r1
    1d2a:	2a 95       	dec	r18
    1d2c:	e9 f7       	brne	.-6      	; 0x1d28 <MS_Host_ReadDeviceCapacity+0x42>
    1d2e:	28 e0       	ldi	r18, 0x08	; 8
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	29 87       	std	Y+9, r18	; 0x09
    1d38:	3a 87       	std	Y+10, r19	; 0x0a
    1d3a:	4b 87       	std	Y+11, r20	; 0x0b
    1d3c:	5c 87       	std	Y+12, r21	; 0x0c
    1d3e:	20 e8       	ldi	r18, 0x80	; 128
    1d40:	2d 87       	std	Y+13, r18	; 0x0d
    1d42:	6e 87       	std	Y+14, r22	; 0x0e
    1d44:	2a e0       	ldi	r18, 0x0A	; 10
    1d46:	2f 87       	std	Y+15, r18	; 0x0f
    1d48:	25 e2       	ldi	r18, 0x25	; 37
    1d4a:	28 8b       	std	Y+16, r18	; 0x10
					0x00,                   // Partial Medium Indicator
					0x00                    // Unused (control)
				}
		};

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, DeviceCapacity)) != PIPE_RWSTREAM_NoError)
    1d4c:	bf 01       	movw	r22, r30
    1d4e:	a6 01       	movw	r20, r12
    1d50:	52 dd       	rcall	.-1372   	; 0x17f6 <MS_Host_SendCommand>
    1d52:	e8 2f       	mov	r30, r24
    1d54:	88 23       	and	r24, r24
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <MS_Host_ReadDeviceCapacity+0x74>
    1d58:	69 c0       	rjmp	.+210    	; 0x1e2c <MS_Host_ReadDeviceCapacity+0x146>
	  return ErrorCode;

	DeviceCapacity->Blocks    = BE32_TO_CPU(DeviceCapacity->Blocks);
    1d5a:	d6 01       	movw	r26, r12
    1d5c:	6d 91       	ld	r22, X+
    1d5e:	7d 91       	ld	r23, X+
    1d60:	8d 91       	ld	r24, X+
    1d62:	9c 91       	ld	r25, X
    1d64:	13 97       	sbiw	r26, 0x03	; 3
    1d66:	56 2f       	mov	r21, r22
    1d68:	44 27       	eor	r20, r20
    1d6a:	33 27       	eor	r19, r19
    1d6c:	22 27       	eor	r18, r18
    1d6e:	e9 2e       	mov	r14, r25
    1d70:	ff 24       	eor	r15, r15
    1d72:	00 27       	eor	r16, r16
    1d74:	11 27       	eor	r17, r17
    1d76:	2e 29       	or	r18, r14
    1d78:	3f 29       	or	r19, r15
    1d7a:	40 2b       	or	r20, r16
    1d7c:	51 2b       	or	r21, r17
    1d7e:	e1 2c       	mov	r14, r1
    1d80:	f1 2c       	mov	r15, r1
    1d82:	ff ef       	ldi	r31, 0xFF	; 255
    1d84:	0f 2f       	mov	r16, r31
    1d86:	11 2d       	mov	r17, r1
    1d88:	e6 22       	and	r14, r22
    1d8a:	f7 22       	and	r15, r23
    1d8c:	08 23       	and	r16, r24
    1d8e:	19 23       	and	r17, r25
    1d90:	ef 2c       	mov	r14, r15
    1d92:	f0 2e       	mov	r15, r16
    1d94:	01 2f       	mov	r16, r17
    1d96:	11 27       	eor	r17, r17
    1d98:	2e 29       	or	r18, r14
    1d9a:	3f 29       	or	r19, r15
    1d9c:	40 2b       	or	r20, r16
    1d9e:	51 2b       	or	r21, r17
    1da0:	60 70       	andi	r22, 0x00	; 0
    1da2:	80 70       	andi	r24, 0x00	; 0
    1da4:	90 70       	andi	r25, 0x00	; 0
    1da6:	98 2f       	mov	r25, r24
    1da8:	87 2f       	mov	r24, r23
    1daa:	76 2f       	mov	r23, r22
    1dac:	66 27       	eor	r22, r22
    1dae:	26 2b       	or	r18, r22
    1db0:	37 2b       	or	r19, r23
    1db2:	48 2b       	or	r20, r24
    1db4:	59 2b       	or	r21, r25
    1db6:	2d 93       	st	X+, r18
    1db8:	3d 93       	st	X+, r19
    1dba:	4d 93       	st	X+, r20
    1dbc:	5c 93       	st	X, r21
    1dbe:	13 97       	sbiw	r26, 0x03	; 3
	DeviceCapacity->BlockSize = BE32_TO_CPU(DeviceCapacity->BlockSize);
    1dc0:	14 96       	adiw	r26, 0x04	; 4
    1dc2:	6d 91       	ld	r22, X+
    1dc4:	7d 91       	ld	r23, X+
    1dc6:	8d 91       	ld	r24, X+
    1dc8:	9c 91       	ld	r25, X
    1dca:	17 97       	sbiw	r26, 0x07	; 7
    1dcc:	56 2f       	mov	r21, r22
    1dce:	44 27       	eor	r20, r20
    1dd0:	33 27       	eor	r19, r19
    1dd2:	22 27       	eor	r18, r18
    1dd4:	e9 2e       	mov	r14, r25
    1dd6:	ff 24       	eor	r15, r15
    1dd8:	00 27       	eor	r16, r16
    1dda:	11 27       	eor	r17, r17
    1ddc:	2e 29       	or	r18, r14
    1dde:	3f 29       	or	r19, r15
    1de0:	40 2b       	or	r20, r16
    1de2:	51 2b       	or	r21, r17
    1de4:	e1 2c       	mov	r14, r1
    1de6:	f1 2c       	mov	r15, r1
    1de8:	ff ef       	ldi	r31, 0xFF	; 255
    1dea:	0f 2f       	mov	r16, r31
    1dec:	11 2d       	mov	r17, r1
    1dee:	e6 22       	and	r14, r22
    1df0:	f7 22       	and	r15, r23
    1df2:	08 23       	and	r16, r24
    1df4:	19 23       	and	r17, r25
    1df6:	ef 2c       	mov	r14, r15
    1df8:	f0 2e       	mov	r15, r16
    1dfa:	01 2f       	mov	r16, r17
    1dfc:	11 27       	eor	r17, r17
    1dfe:	2e 29       	or	r18, r14
    1e00:	3f 29       	or	r19, r15
    1e02:	40 2b       	or	r20, r16
    1e04:	51 2b       	or	r21, r17
    1e06:	60 70       	andi	r22, 0x00	; 0
    1e08:	80 70       	andi	r24, 0x00	; 0
    1e0a:	90 70       	andi	r25, 0x00	; 0
    1e0c:	98 2f       	mov	r25, r24
    1e0e:	87 2f       	mov	r24, r23
    1e10:	76 2f       	mov	r23, r22
    1e12:	66 27       	eor	r22, r22
    1e14:	26 2b       	or	r18, r22
    1e16:	37 2b       	or	r19, r23
    1e18:	48 2b       	or	r20, r24
    1e1a:	59 2b       	or	r21, r25
    1e1c:	14 96       	adiw	r26, 0x04	; 4
    1e1e:	2d 93       	st	X+, r18
    1e20:	3d 93       	st	X+, r19
    1e22:	4d 93       	st	X+, r20
    1e24:	5c 93       	st	X, r21
    1e26:	17 97       	sbiw	r26, 0x07	; 7

	return PIPE_RWSTREAM_NoError;
    1e28:	01 c0       	rjmp	.+2      	; 0x1e2c <MS_Host_ReadDeviceCapacity+0x146>
uint8_t MS_Host_ReadDeviceCapacity(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   const uint8_t LUNIndex,
                                   SCSI_Capacity_t* const DeviceCapacity)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1e2a:	e1 e0       	ldi	r30, 0x01	; 1

	DeviceCapacity->Blocks    = BE32_TO_CPU(DeviceCapacity->Blocks);
	DeviceCapacity->BlockSize = BE32_TO_CPU(DeviceCapacity->BlockSize);

	return PIPE_RWSTREAM_NoError;
}
    1e2c:	8e 2f       	mov	r24, r30
    1e2e:	6f 96       	adiw	r28, 0x1f	; 31
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	1f 91       	pop	r17
    1e40:	0f 91       	pop	r16
    1e42:	ff 90       	pop	r15
    1e44:	ef 90       	pop	r14
    1e46:	df 90       	pop	r13
    1e48:	cf 90       	pop	r12
    1e4a:	08 95       	ret

00001e4c <MS_Host_RequestSense>:

uint8_t MS_Host_RequestSense(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                             const uint8_t LUNIndex,
                             SCSI_Request_Sense_Response_t* const SenseData)
{
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	6f 97       	sbiw	r28, 0x1f	; 31
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1e64:	20 91 31 01 	lds	r18, 0x0131
    1e68:	2b 30       	cpi	r18, 0x0B	; 11
    1e6a:	09 f5       	brne	.+66     	; 0x1eae <MS_Host_RequestSense+0x62>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	1c 96       	adiw	r26, 0x0c	; 12
    1e70:	2c 91       	ld	r18, X
    1e72:	1c 97       	sbiw	r26, 0x0c	; 12
    1e74:	22 23       	and	r18, r18
    1e76:	d9 f0       	breq	.+54     	; 0x1eae <MS_Host_RequestSense+0x62>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1e78:	fe 01       	movw	r30, r28
    1e7a:	31 96       	adiw	r30, 0x01	; 1
    1e7c:	2f e1       	ldi	r18, 0x1F	; 31
    1e7e:	df 01       	movw	r26, r30
    1e80:	1d 92       	st	X+, r1
    1e82:	2a 95       	dec	r18
    1e84:	e9 f7       	brne	.-6      	; 0x1e80 <MS_Host_RequestSense+0x34>
    1e86:	02 e1       	ldi	r16, 0x12	; 18
    1e88:	10 e0       	ldi	r17, 0x00	; 0
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	09 87       	std	Y+9, r16	; 0x09
    1e90:	1a 87       	std	Y+10, r17	; 0x0a
    1e92:	2b 87       	std	Y+11, r18	; 0x0b
    1e94:	3c 87       	std	Y+12, r19	; 0x0c
    1e96:	20 e8       	ldi	r18, 0x80	; 128
    1e98:	2d 87       	std	Y+13, r18	; 0x0d
    1e9a:	6e 87       	std	Y+14, r22	; 0x0e
    1e9c:	26 e0       	ldi	r18, 0x06	; 6
    1e9e:	2f 87       	std	Y+15, r18	; 0x0f
    1ea0:	23 e0       	ldi	r18, 0x03	; 3
    1ea2:	28 8b       	std	Y+16, r18	; 0x10
    1ea4:	22 e1       	ldi	r18, 0x12	; 18
    1ea6:	2c 8b       	std	Y+20, r18	; 0x14
					sizeof(SCSI_Request_Sense_Response_t), // Allocation Length
					0x00                                   // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, SenseData);
    1ea8:	bf 01       	movw	r22, r30
    1eaa:	a5 dc       	rcall	.-1718   	; 0x17f6 <MS_Host_SendCommand>
    1eac:	01 c0       	rjmp	.+2      	; 0x1eb0 <MS_Host_RequestSense+0x64>
uint8_t MS_Host_RequestSense(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                             const uint8_t LUNIndex,
                             SCSI_Request_Sense_Response_t* const SenseData)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
					0x00                                   // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, SenseData);
}
    1eb0:	6f 96       	adiw	r28, 0x1f	; 31
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	08 95       	ret

00001ec6 <MS_Host_PreventAllowMediumRemoval>:

uint8_t MS_Host_PreventAllowMediumRemoval(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                          const uint8_t LUNIndex,
                                          const bool PreventRemoval)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	6f 97       	sbiw	r28, 0x1f	; 31
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1eda:	20 91 31 01 	lds	r18, 0x0131
    1ede:	2b 30       	cpi	r18, 0x0B	; 11
    1ee0:	c1 f4       	brne	.+48     	; 0x1f12 <MS_Host_PreventAllowMediumRemoval+0x4c>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	1c 96       	adiw	r26, 0x0c	; 12
    1ee6:	2c 91       	ld	r18, X
    1ee8:	1c 97       	sbiw	r26, 0x0c	; 12
    1eea:	22 23       	and	r18, r18
    1eec:	91 f0       	breq	.+36     	; 0x1f12 <MS_Host_PreventAllowMediumRemoval+0x4c>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1eee:	fe 01       	movw	r30, r28
    1ef0:	31 96       	adiw	r30, 0x01	; 1
    1ef2:	2f e1       	ldi	r18, 0x1F	; 31
    1ef4:	df 01       	movw	r26, r30
    1ef6:	1d 92       	st	X+, r1
    1ef8:	2a 95       	dec	r18
    1efa:	e9 f7       	brne	.-6      	; 0x1ef6 <MS_Host_PreventAllowMediumRemoval+0x30>
    1efc:	6e 87       	std	Y+14, r22	; 0x0e
    1efe:	26 e0       	ldi	r18, 0x06	; 6
    1f00:	2f 87       	std	Y+15, r18	; 0x0f
    1f02:	2e e1       	ldi	r18, 0x1E	; 30
    1f04:	28 8b       	std	Y+16, r18	; 0x10
    1f06:	4b 8b       	std	Y+19, r20	; 0x13
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL);
    1f08:	bf 01       	movw	r22, r30
    1f0a:	40 e0       	ldi	r20, 0x00	; 0
    1f0c:	50 e0       	ldi	r21, 0x00	; 0
    1f0e:	73 dc       	rcall	.-1818   	; 0x17f6 <MS_Host_SendCommand>
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <MS_Host_PreventAllowMediumRemoval+0x4e>
uint8_t MS_Host_PreventAllowMediumRemoval(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                          const uint8_t LUNIndex,
                                          const bool PreventRemoval)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL);
}
    1f14:	6f 96       	adiw	r28, 0x1f	; 31
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <MS_Host_ReadDeviceBlocks>:
                                 const uint8_t LUNIndex,
                                 const uint32_t BlockAddress,
                                 const uint8_t Blocks,
                                 const uint16_t BlockSize,
                                 void* BlockBuffer)
{
    1f26:	4f 92       	push	r4
    1f28:	5f 92       	push	r5
    1f2a:	6f 92       	push	r6
    1f2c:	7f 92       	push	r7
    1f2e:	8f 92       	push	r8
    1f30:	9f 92       	push	r9
    1f32:	af 92       	push	r10
    1f34:	bf 92       	push	r11
    1f36:	cf 92       	push	r12
    1f38:	df 92       	push	r13
    1f3a:	ef 92       	push	r14
    1f3c:	ff 92       	push	r15
    1f3e:	0f 93       	push	r16
    1f40:	1f 93       	push	r17
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	6f 97       	sbiw	r28, 0x1f	; 31
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	5c 01       	movw	r10, r24
    1f58:	16 2f       	mov	r17, r22
    1f5a:	39 01       	movw	r6, r18
    1f5c:	4a 01       	movw	r8, r20
    1f5e:	26 01       	movw	r4, r12
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1f60:	80 91 31 01 	lds	r24, 0x0131
    1f64:	8b 30       	cpi	r24, 0x0B	; 11
    1f66:	51 f5       	brne	.+84     	; 0x1fbc <MS_Host_ReadDeviceBlocks+0x96>
    1f68:	f5 01       	movw	r30, r10
    1f6a:	84 85       	ldd	r24, Z+12	; 0x0c
    1f6c:	88 23       	and	r24, r24
    1f6e:	31 f1       	breq	.+76     	; 0x1fbc <MS_Host_ReadDeviceBlocks+0x96>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1f70:	6e 01       	movw	r12, r28
    1f72:	08 94       	sec
    1f74:	c1 1c       	adc	r12, r1
    1f76:	d1 1c       	adc	r13, r1
    1f78:	8f e1       	ldi	r24, 0x1F	; 31
    1f7a:	f6 01       	movw	r30, r12
    1f7c:	11 92       	st	Z+, r1
    1f7e:	8a 95       	dec	r24
    1f80:	e9 f7       	brne	.-6      	; 0x1f7c <MS_Host_ReadDeviceBlocks+0x56>
		{
			.DataTransferLength = cpu_to_le32((uint32_t)Blocks * BlockSize),
    1f82:	b7 01       	movw	r22, r14
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	20 2f       	mov	r18, r16
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	66 d0       	rcall	.+204    	; 0x205e <__mulsi3>
                                 void* BlockBuffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1f92:	69 87       	std	Y+9, r22	; 0x09
    1f94:	7a 87       	std	Y+10, r23	; 0x0a
    1f96:	8b 87       	std	Y+11, r24	; 0x0b
    1f98:	9c 87       	std	Y+12, r25	; 0x0c
    1f9a:	80 e8       	ldi	r24, 0x80	; 128
    1f9c:	8d 87       	std	Y+13, r24	; 0x0d
    1f9e:	1e 87       	std	Y+14, r17	; 0x0e
    1fa0:	8a e0       	ldi	r24, 0x0A	; 10
    1fa2:	8f 87       	std	Y+15, r24	; 0x0f
    1fa4:	88 e2       	ldi	r24, 0x28	; 40
    1fa6:	88 8b       	std	Y+16, r24	; 0x10
    1fa8:	9a 8a       	std	Y+18, r9	; 0x12
    1faa:	8b 8a       	std	Y+19, r8	; 0x13
    1fac:	7c 8a       	std	Y+20, r7	; 0x14
    1fae:	6d 8a       	std	Y+21, r6	; 0x15
    1fb0:	08 8f       	std	Y+24, r16	; 0x18
					Blocks,                 // LSB of Total Blocks to Read
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, BlockBuffer);
    1fb2:	c5 01       	movw	r24, r10
    1fb4:	b6 01       	movw	r22, r12
    1fb6:	a2 01       	movw	r20, r4
    1fb8:	1e dc       	rcall	.-1988   	; 0x17f6 <MS_Host_SendCommand>
    1fba:	01 c0       	rjmp	.+2      	; 0x1fbe <MS_Host_ReadDeviceBlocks+0x98>
                                 const uint8_t Blocks,
                                 const uint16_t BlockSize,
                                 void* BlockBuffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, BlockBuffer);
}
    1fbe:	6f 96       	adiw	r28, 0x1f	; 31
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	1f 91       	pop	r17
    1fd0:	0f 91       	pop	r16
    1fd2:	ff 90       	pop	r15
    1fd4:	ef 90       	pop	r14
    1fd6:	df 90       	pop	r13
    1fd8:	cf 90       	pop	r12
    1fda:	bf 90       	pop	r11
    1fdc:	af 90       	pop	r10
    1fde:	9f 90       	pop	r9
    1fe0:	8f 90       	pop	r8
    1fe2:	7f 90       	pop	r7
    1fe4:	6f 90       	pop	r6
    1fe6:	5f 90       	pop	r5
    1fe8:	4f 90       	pop	r4
    1fea:	08 95       	ret

00001fec <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1fec:	90 91 c8 00 	lds	r25, 0x00C8
    1ff0:	95 ff       	sbrs	r25, 5
    1ff2:	fc cf       	rjmp	.-8      	; 0x1fec <Serial_putchar>
				UDR1 = DataByte;
    1ff4:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	08 95       	ret

00001ffe <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1ffe:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    2002:	87 ff       	sbrs	r24, 7
    2004:	08 c0       	rjmp	.+16     	; 0x2016 <Serial_getchar+0x18>
    2006:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    200a:	87 ff       	sbrs	r24, 7
    200c:	07 c0       	rjmp	.+14     	; 0x201c <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    200e:	20 91 ce 00 	lds	r18, 0x00CE
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	05 c0       	rjmp	.+10     	; 0x2020 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    2016:	2e ef       	ldi	r18, 0xFE	; 254
    2018:	3f ef       	ldi	r19, 0xFF	; 255
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    201c:	2f ef       	ldi	r18, 0xFF	; 255
    201e:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    2020:	c9 01       	movw	r24, r18
    2022:	08 95       	ret

00002024 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    2024:	fc 01       	movw	r30, r24
	if (!(Stream))
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	51 f4       	brne	.+20     	; 0x203e <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    202a:	e2 e3       	ldi	r30, 0x32	; 50
    202c:	f1 e0       	ldi	r31, 0x01	; 1
    202e:	f0 93 41 01 	sts	0x0141, r31
    2032:	e0 93 40 01 	sts	0x0140, r30
		stdout = Stream;
    2036:	f0 93 43 01 	sts	0x0143, r31
    203a:	e0 93 42 01 	sts	0x0142, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    203e:	8e e0       	ldi	r24, 0x0E	; 14
    2040:	df 01       	movw	r26, r30
    2042:	1d 92       	st	X+, r1
    2044:	8a 95       	dec	r24
    2046:	e9 f7       	brne	.-6      	; 0x2042 <Serial_CreateStream+0x1e>
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	83 83       	std	Z+3, r24	; 0x03
    204c:	86 ef       	ldi	r24, 0xF6	; 246
    204e:	9f e0       	ldi	r25, 0x0F	; 15
    2050:	91 87       	std	Z+9, r25	; 0x09
    2052:	80 87       	std	Z+8, r24	; 0x08
    2054:	8f ef       	ldi	r24, 0xFF	; 255
    2056:	9f e0       	ldi	r25, 0x0F	; 15
    2058:	93 87       	std	Z+11, r25	; 0x0b
    205a:	82 87       	std	Z+10, r24	; 0x0a
}
    205c:	08 95       	ret

0000205e <__mulsi3>:
    205e:	62 9f       	mul	r22, r18
    2060:	d0 01       	movw	r26, r0
    2062:	73 9f       	mul	r23, r19
    2064:	f0 01       	movw	r30, r0
    2066:	82 9f       	mul	r24, r18
    2068:	e0 0d       	add	r30, r0
    206a:	f1 1d       	adc	r31, r1
    206c:	64 9f       	mul	r22, r20
    206e:	e0 0d       	add	r30, r0
    2070:	f1 1d       	adc	r31, r1
    2072:	92 9f       	mul	r25, r18
    2074:	f0 0d       	add	r31, r0
    2076:	83 9f       	mul	r24, r19
    2078:	f0 0d       	add	r31, r0
    207a:	74 9f       	mul	r23, r20
    207c:	f0 0d       	add	r31, r0
    207e:	65 9f       	mul	r22, r21
    2080:	f0 0d       	add	r31, r0
    2082:	99 27       	eor	r25, r25
    2084:	72 9f       	mul	r23, r18
    2086:	b0 0d       	add	r27, r0
    2088:	e1 1d       	adc	r30, r1
    208a:	f9 1f       	adc	r31, r25
    208c:	63 9f       	mul	r22, r19
    208e:	b0 0d       	add	r27, r0
    2090:	e1 1d       	adc	r30, r1
    2092:	f9 1f       	adc	r31, r25
    2094:	bd 01       	movw	r22, r26
    2096:	cf 01       	movw	r24, r30
    2098:	11 24       	eor	r1, r1
    209a:	08 95       	ret

0000209c <isgraph>:
    209c:	80 32       	cpi	r24, 0x20	; 32
    209e:	09 f0       	breq	.+2      	; 0x20a2 <isprint+0x2>

000020a0 <isprint>:
    20a0:	91 11       	cpse	r25, r1
    20a2:	8a c2       	rjmp	.+1300   	; 0x25b8 <__ctype_isfalse>
    20a4:	80 52       	subi	r24, 0x20	; 32
    20a6:	8f 55       	subi	r24, 0x5F	; 95
    20a8:	e0 f7       	brcc	.-8      	; 0x20a2 <isprint+0x2>
    20aa:	08 95       	ret

000020ac <fputc>:
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	8c 01       	movw	r16, r24
    20b6:	eb 01       	movw	r28, r22
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	81 ff       	sbrs	r24, 1
    20bc:	1b c0       	rjmp	.+54     	; 0x20f4 <fputc+0x48>
    20be:	82 ff       	sbrs	r24, 2
    20c0:	0d c0       	rjmp	.+26     	; 0x20dc <fputc+0x30>
    20c2:	2e 81       	ldd	r18, Y+6	; 0x06
    20c4:	3f 81       	ldd	r19, Y+7	; 0x07
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
    20c8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ca:	28 17       	cp	r18, r24
    20cc:	39 07       	cpc	r19, r25
    20ce:	64 f4       	brge	.+24     	; 0x20e8 <fputc+0x3c>
    20d0:	e8 81       	ld	r30, Y
    20d2:	f9 81       	ldd	r31, Y+1	; 0x01
    20d4:	01 93       	st	Z+, r16
    20d6:	f9 83       	std	Y+1, r31	; 0x01
    20d8:	e8 83       	st	Y, r30
    20da:	06 c0       	rjmp	.+12     	; 0x20e8 <fputc+0x3c>
    20dc:	e8 85       	ldd	r30, Y+8	; 0x08
    20de:	f9 85       	ldd	r31, Y+9	; 0x09
    20e0:	80 2f       	mov	r24, r16
    20e2:	09 95       	icall
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	31 f4       	brne	.+12     	; 0x20f4 <fputc+0x48>
    20e8:	8e 81       	ldd	r24, Y+6	; 0x06
    20ea:	9f 81       	ldd	r25, Y+7	; 0x07
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	9f 83       	std	Y+7, r25	; 0x07
    20f0:	8e 83       	std	Y+6, r24	; 0x06
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <fputc+0x4c>
    20f4:	0f ef       	ldi	r16, 0xFF	; 255
    20f6:	1f ef       	ldi	r17, 0xFF	; 255
    20f8:	c8 01       	movw	r24, r16
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	1f 91       	pop	r17
    2100:	0f 91       	pop	r16
    2102:	08 95       	ret

00002104 <printf_P>:
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	fe 01       	movw	r30, r28
    210e:	35 96       	adiw	r30, 0x05	; 5
    2110:	61 91       	ld	r22, Z+
    2112:	71 91       	ld	r23, Z+
    2114:	80 91 42 01 	lds	r24, 0x0142
    2118:	90 91 43 01 	lds	r25, 0x0143
    211c:	dc 01       	movw	r26, r24
    211e:	13 96       	adiw	r26, 0x03	; 3
    2120:	2c 91       	ld	r18, X
    2122:	13 97       	sbiw	r26, 0x03	; 3
    2124:	28 60       	ori	r18, 0x08	; 8
    2126:	13 96       	adiw	r26, 0x03	; 3
    2128:	2c 93       	st	X, r18
    212a:	af 01       	movw	r20, r30
    212c:	42 d0       	rcall	.+132    	; 0x21b2 <vfprintf>
    212e:	e0 91 42 01 	lds	r30, 0x0142
    2132:	f0 91 43 01 	lds	r31, 0x0143
    2136:	23 81       	ldd	r18, Z+3	; 0x03
    2138:	27 7f       	andi	r18, 0xF7	; 247
    213a:	23 83       	std	Z+3, r18	; 0x03
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <puts_P>:
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	8c 01       	movw	r16, r24
    2150:	e0 91 42 01 	lds	r30, 0x0142
    2154:	f0 91 43 01 	lds	r31, 0x0143
    2158:	83 81       	ldd	r24, Z+3	; 0x03
    215a:	81 ff       	sbrs	r24, 1
    215c:	20 c0       	rjmp	.+64     	; 0x219e <puts_P+0x5c>
    215e:	c0 e0       	ldi	r28, 0x00	; 0
    2160:	d0 e0       	ldi	r29, 0x00	; 0
    2162:	0c c0       	rjmp	.+24     	; 0x217c <puts_P+0x3a>
    2164:	db 01       	movw	r26, r22
    2166:	18 96       	adiw	r26, 0x08	; 8
    2168:	ed 91       	ld	r30, X+
    216a:	fc 91       	ld	r31, X
    216c:	19 97       	sbiw	r26, 0x09	; 9
    216e:	09 95       	icall
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	11 f0       	breq	.+4      	; 0x2178 <puts_P+0x36>
    2174:	cf ef       	ldi	r28, 0xFF	; 255
    2176:	df ef       	ldi	r29, 0xFF	; 255
    2178:	0f 5f       	subi	r16, 0xFF	; 255
    217a:	1f 4f       	sbci	r17, 0xFF	; 255
    217c:	f8 01       	movw	r30, r16
    217e:	84 91       	lpm	r24, Z+
    2180:	60 91 42 01 	lds	r22, 0x0142
    2184:	70 91 43 01 	lds	r23, 0x0143
    2188:	88 23       	and	r24, r24
    218a:	61 f7       	brne	.-40     	; 0x2164 <puts_P+0x22>
    218c:	db 01       	movw	r26, r22
    218e:	18 96       	adiw	r26, 0x08	; 8
    2190:	ed 91       	ld	r30, X+
    2192:	fc 91       	ld	r31, X
    2194:	19 97       	sbiw	r26, 0x09	; 9
    2196:	8a e0       	ldi	r24, 0x0A	; 10
    2198:	09 95       	icall
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	11 f0       	breq	.+4      	; 0x21a2 <puts_P+0x60>
    219e:	cf ef       	ldi	r28, 0xFF	; 255
    21a0:	df ef       	ldi	r29, 0xFF	; 255
    21a2:	ce 01       	movw	r24, r28
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	08 95       	ret

000021b2 <vfprintf>:
    21b2:	2f 92       	push	r2
    21b4:	3f 92       	push	r3
    21b6:	4f 92       	push	r4
    21b8:	5f 92       	push	r5
    21ba:	6f 92       	push	r6
    21bc:	7f 92       	push	r7
    21be:	8f 92       	push	r8
    21c0:	9f 92       	push	r9
    21c2:	af 92       	push	r10
    21c4:	bf 92       	push	r11
    21c6:	cf 92       	push	r12
    21c8:	df 92       	push	r13
    21ca:	ef 92       	push	r14
    21cc:	ff 92       	push	r15
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	2c 97       	sbiw	r28, 0x0c	; 12
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	6c 01       	movw	r12, r24
    21e8:	1b 01       	movw	r2, r22
    21ea:	8a 01       	movw	r16, r20
    21ec:	fc 01       	movw	r30, r24
    21ee:	17 82       	std	Z+7, r1	; 0x07
    21f0:	16 82       	std	Z+6, r1	; 0x06
    21f2:	83 81       	ldd	r24, Z+3	; 0x03
    21f4:	81 ff       	sbrs	r24, 1
    21f6:	c4 c1       	rjmp	.+904    	; 0x2580 <vfprintf+0x3ce>
    21f8:	2e 01       	movw	r4, r28
    21fa:	08 94       	sec
    21fc:	41 1c       	adc	r4, r1
    21fe:	51 1c       	adc	r5, r1
    2200:	f6 01       	movw	r30, r12
    2202:	93 81       	ldd	r25, Z+3	; 0x03
    2204:	f1 01       	movw	r30, r2
    2206:	93 fd       	sbrc	r25, 3
    2208:	85 91       	lpm	r24, Z+
    220a:	93 ff       	sbrs	r25, 3
    220c:	81 91       	ld	r24, Z+
    220e:	1f 01       	movw	r2, r30
    2210:	88 23       	and	r24, r24
    2212:	09 f4       	brne	.+2      	; 0x2216 <vfprintf+0x64>
    2214:	b1 c1       	rjmp	.+866    	; 0x2578 <vfprintf+0x3c6>
    2216:	85 32       	cpi	r24, 0x25	; 37
    2218:	39 f4       	brne	.+14     	; 0x2228 <vfprintf+0x76>
    221a:	93 fd       	sbrc	r25, 3
    221c:	85 91       	lpm	r24, Z+
    221e:	93 ff       	sbrs	r25, 3
    2220:	81 91       	ld	r24, Z+
    2222:	1f 01       	movw	r2, r30
    2224:	85 32       	cpi	r24, 0x25	; 37
    2226:	21 f4       	brne	.+8      	; 0x2230 <vfprintf+0x7e>
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	b6 01       	movw	r22, r12
    222c:	3f df       	rcall	.-386    	; 0x20ac <fputc>
    222e:	e8 cf       	rjmp	.-48     	; 0x2200 <vfprintf+0x4e>
    2230:	ee 24       	eor	r14, r14
    2232:	ff 24       	eor	r15, r15
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	20 32       	cpi	r18, 0x20	; 32
    2238:	b0 f4       	brcc	.+44     	; 0x2266 <vfprintf+0xb4>
    223a:	8b 32       	cpi	r24, 0x2B	; 43
    223c:	69 f0       	breq	.+26     	; 0x2258 <vfprintf+0xa6>
    223e:	8c 32       	cpi	r24, 0x2C	; 44
    2240:	28 f4       	brcc	.+10     	; 0x224c <vfprintf+0x9a>
    2242:	80 32       	cpi	r24, 0x20	; 32
    2244:	51 f0       	breq	.+20     	; 0x225a <vfprintf+0xa8>
    2246:	83 32       	cpi	r24, 0x23	; 35
    2248:	71 f4       	brne	.+28     	; 0x2266 <vfprintf+0xb4>
    224a:	0b c0       	rjmp	.+22     	; 0x2262 <vfprintf+0xb0>
    224c:	8d 32       	cpi	r24, 0x2D	; 45
    224e:	39 f0       	breq	.+14     	; 0x225e <vfprintf+0xac>
    2250:	80 33       	cpi	r24, 0x30	; 48
    2252:	49 f4       	brne	.+18     	; 0x2266 <vfprintf+0xb4>
    2254:	21 60       	ori	r18, 0x01	; 1
    2256:	2c c0       	rjmp	.+88     	; 0x22b0 <vfprintf+0xfe>
    2258:	22 60       	ori	r18, 0x02	; 2
    225a:	24 60       	ori	r18, 0x04	; 4
    225c:	29 c0       	rjmp	.+82     	; 0x22b0 <vfprintf+0xfe>
    225e:	28 60       	ori	r18, 0x08	; 8
    2260:	27 c0       	rjmp	.+78     	; 0x22b0 <vfprintf+0xfe>
    2262:	20 61       	ori	r18, 0x10	; 16
    2264:	25 c0       	rjmp	.+74     	; 0x22b0 <vfprintf+0xfe>
    2266:	27 fd       	sbrc	r18, 7
    2268:	2c c0       	rjmp	.+88     	; 0x22c2 <vfprintf+0x110>
    226a:	38 2f       	mov	r19, r24
    226c:	30 53       	subi	r19, 0x30	; 48
    226e:	3a 30       	cpi	r19, 0x0A	; 10
    2270:	98 f4       	brcc	.+38     	; 0x2298 <vfprintf+0xe6>
    2272:	26 ff       	sbrs	r18, 6
    2274:	08 c0       	rjmp	.+16     	; 0x2286 <vfprintf+0xd4>
    2276:	8e 2d       	mov	r24, r14
    2278:	88 0f       	add	r24, r24
    227a:	e8 2e       	mov	r14, r24
    227c:	ee 0c       	add	r14, r14
    227e:	ee 0c       	add	r14, r14
    2280:	e8 0e       	add	r14, r24
    2282:	e3 0e       	add	r14, r19
    2284:	15 c0       	rjmp	.+42     	; 0x22b0 <vfprintf+0xfe>
    2286:	8f 2d       	mov	r24, r15
    2288:	88 0f       	add	r24, r24
    228a:	f8 2e       	mov	r15, r24
    228c:	ff 0c       	add	r15, r15
    228e:	ff 0c       	add	r15, r15
    2290:	f8 0e       	add	r15, r24
    2292:	f3 0e       	add	r15, r19
    2294:	20 62       	ori	r18, 0x20	; 32
    2296:	0c c0       	rjmp	.+24     	; 0x22b0 <vfprintf+0xfe>
    2298:	8e 32       	cpi	r24, 0x2E	; 46
    229a:	21 f4       	brne	.+8      	; 0x22a4 <vfprintf+0xf2>
    229c:	26 fd       	sbrc	r18, 6
    229e:	6c c1       	rjmp	.+728    	; 0x2578 <vfprintf+0x3c6>
    22a0:	20 64       	ori	r18, 0x40	; 64
    22a2:	06 c0       	rjmp	.+12     	; 0x22b0 <vfprintf+0xfe>
    22a4:	8c 36       	cpi	r24, 0x6C	; 108
    22a6:	11 f4       	brne	.+4      	; 0x22ac <vfprintf+0xfa>
    22a8:	20 68       	ori	r18, 0x80	; 128
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <vfprintf+0xfe>
    22ac:	88 36       	cpi	r24, 0x68	; 104
    22ae:	49 f4       	brne	.+18     	; 0x22c2 <vfprintf+0x110>
    22b0:	f1 01       	movw	r30, r2
    22b2:	93 fd       	sbrc	r25, 3
    22b4:	85 91       	lpm	r24, Z+
    22b6:	93 ff       	sbrs	r25, 3
    22b8:	81 91       	ld	r24, Z+
    22ba:	1f 01       	movw	r2, r30
    22bc:	88 23       	and	r24, r24
    22be:	09 f0       	breq	.+2      	; 0x22c2 <vfprintf+0x110>
    22c0:	ba cf       	rjmp	.-140    	; 0x2236 <vfprintf+0x84>
    22c2:	98 2f       	mov	r25, r24
    22c4:	95 54       	subi	r25, 0x45	; 69
    22c6:	93 30       	cpi	r25, 0x03	; 3
    22c8:	18 f0       	brcs	.+6      	; 0x22d0 <vfprintf+0x11e>
    22ca:	90 52       	subi	r25, 0x20	; 32
    22cc:	93 30       	cpi	r25, 0x03	; 3
    22ce:	28 f4       	brcc	.+10     	; 0x22da <vfprintf+0x128>
    22d0:	0c 5f       	subi	r16, 0xFC	; 252
    22d2:	1f 4f       	sbci	r17, 0xFF	; 255
    22d4:	ff e3       	ldi	r31, 0x3F	; 63
    22d6:	f9 83       	std	Y+1, r31	; 0x01
    22d8:	0d c0       	rjmp	.+26     	; 0x22f4 <vfprintf+0x142>
    22da:	83 36       	cpi	r24, 0x63	; 99
    22dc:	31 f0       	breq	.+12     	; 0x22ea <vfprintf+0x138>
    22de:	83 37       	cpi	r24, 0x73	; 115
    22e0:	71 f0       	breq	.+28     	; 0x22fe <vfprintf+0x14c>
    22e2:	83 35       	cpi	r24, 0x53	; 83
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <vfprintf+0x136>
    22e6:	5c c0       	rjmp	.+184    	; 0x23a0 <vfprintf+0x1ee>
    22e8:	21 c0       	rjmp	.+66     	; 0x232c <vfprintf+0x17a>
    22ea:	f8 01       	movw	r30, r16
    22ec:	80 81       	ld	r24, Z
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	0e 5f       	subi	r16, 0xFE	; 254
    22f2:	1f 4f       	sbci	r17, 0xFF	; 255
    22f4:	42 01       	movw	r8, r4
    22f6:	71 e0       	ldi	r23, 0x01	; 1
    22f8:	a7 2e       	mov	r10, r23
    22fa:	b1 2c       	mov	r11, r1
    22fc:	15 c0       	rjmp	.+42     	; 0x2328 <vfprintf+0x176>
    22fe:	62 e0       	ldi	r22, 0x02	; 2
    2300:	66 2e       	mov	r6, r22
    2302:	71 2c       	mov	r7, r1
    2304:	60 0e       	add	r6, r16
    2306:	71 1e       	adc	r7, r17
    2308:	f8 01       	movw	r30, r16
    230a:	80 80       	ld	r8, Z
    230c:	91 80       	ldd	r9, Z+1	; 0x01
    230e:	26 ff       	sbrs	r18, 6
    2310:	03 c0       	rjmp	.+6      	; 0x2318 <vfprintf+0x166>
    2312:	6e 2d       	mov	r22, r14
    2314:	70 e0       	ldi	r23, 0x00	; 0
    2316:	02 c0       	rjmp	.+4      	; 0x231c <vfprintf+0x16a>
    2318:	6f ef       	ldi	r22, 0xFF	; 255
    231a:	7f ef       	ldi	r23, 0xFF	; 255
    231c:	c4 01       	movw	r24, r8
    231e:	2c 87       	std	Y+12, r18	; 0x0c
    2320:	59 d1       	rcall	.+690    	; 0x25d4 <strnlen>
    2322:	5c 01       	movw	r10, r24
    2324:	83 01       	movw	r16, r6
    2326:	2c 85       	ldd	r18, Y+12	; 0x0c
    2328:	2f 77       	andi	r18, 0x7F	; 127
    232a:	16 c0       	rjmp	.+44     	; 0x2358 <vfprintf+0x1a6>
    232c:	52 e0       	ldi	r21, 0x02	; 2
    232e:	65 2e       	mov	r6, r21
    2330:	71 2c       	mov	r7, r1
    2332:	60 0e       	add	r6, r16
    2334:	71 1e       	adc	r7, r17
    2336:	f8 01       	movw	r30, r16
    2338:	80 80       	ld	r8, Z
    233a:	91 80       	ldd	r9, Z+1	; 0x01
    233c:	26 ff       	sbrs	r18, 6
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <vfprintf+0x194>
    2340:	6e 2d       	mov	r22, r14
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	02 c0       	rjmp	.+4      	; 0x234a <vfprintf+0x198>
    2346:	6f ef       	ldi	r22, 0xFF	; 255
    2348:	7f ef       	ldi	r23, 0xFF	; 255
    234a:	c4 01       	movw	r24, r8
    234c:	2c 87       	std	Y+12, r18	; 0x0c
    234e:	37 d1       	rcall	.+622    	; 0x25be <strnlen_P>
    2350:	5c 01       	movw	r10, r24
    2352:	2c 85       	ldd	r18, Y+12	; 0x0c
    2354:	20 68       	ori	r18, 0x80	; 128
    2356:	83 01       	movw	r16, r6
    2358:	23 fd       	sbrc	r18, 3
    235a:	1e c0       	rjmp	.+60     	; 0x2398 <vfprintf+0x1e6>
    235c:	07 c0       	rjmp	.+14     	; 0x236c <vfprintf+0x1ba>
    235e:	80 e2       	ldi	r24, 0x20	; 32
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	b6 01       	movw	r22, r12
    2364:	2c 87       	std	Y+12, r18	; 0x0c
    2366:	a2 de       	rcall	.-700    	; 0x20ac <fputc>
    2368:	fa 94       	dec	r15
    236a:	2c 85       	ldd	r18, Y+12	; 0x0c
    236c:	8f 2d       	mov	r24, r15
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	a8 16       	cp	r10, r24
    2372:	b9 06       	cpc	r11, r25
    2374:	a0 f3       	brcs	.-24     	; 0x235e <vfprintf+0x1ac>
    2376:	10 c0       	rjmp	.+32     	; 0x2398 <vfprintf+0x1e6>
    2378:	f4 01       	movw	r30, r8
    237a:	27 fd       	sbrc	r18, 7
    237c:	85 91       	lpm	r24, Z+
    237e:	27 ff       	sbrs	r18, 7
    2380:	81 91       	ld	r24, Z+
    2382:	4f 01       	movw	r8, r30
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	b6 01       	movw	r22, r12
    2388:	2c 87       	std	Y+12, r18	; 0x0c
    238a:	90 de       	rcall	.-736    	; 0x20ac <fputc>
    238c:	2c 85       	ldd	r18, Y+12	; 0x0c
    238e:	f1 10       	cpse	r15, r1
    2390:	fa 94       	dec	r15
    2392:	08 94       	sec
    2394:	a1 08       	sbc	r10, r1
    2396:	b1 08       	sbc	r11, r1
    2398:	a1 14       	cp	r10, r1
    239a:	b1 04       	cpc	r11, r1
    239c:	69 f7       	brne	.-38     	; 0x2378 <vfprintf+0x1c6>
    239e:	e9 c0       	rjmp	.+466    	; 0x2572 <vfprintf+0x3c0>
    23a0:	84 36       	cpi	r24, 0x64	; 100
    23a2:	11 f0       	breq	.+4      	; 0x23a8 <vfprintf+0x1f6>
    23a4:	89 36       	cpi	r24, 0x69	; 105
    23a6:	41 f5       	brne	.+80     	; 0x23f8 <vfprintf+0x246>
    23a8:	27 ff       	sbrs	r18, 7
    23aa:	08 c0       	rjmp	.+16     	; 0x23bc <vfprintf+0x20a>
    23ac:	f8 01       	movw	r30, r16
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	0c 5f       	subi	r16, 0xFC	; 252
    23b8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ba:	09 c0       	rjmp	.+18     	; 0x23ce <vfprintf+0x21c>
    23bc:	f8 01       	movw	r30, r16
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	88 27       	eor	r24, r24
    23c4:	77 fd       	sbrc	r23, 7
    23c6:	80 95       	com	r24
    23c8:	98 2f       	mov	r25, r24
    23ca:	0e 5f       	subi	r16, 0xFE	; 254
    23cc:	1f 4f       	sbci	r17, 0xFF	; 255
    23ce:	4f e6       	ldi	r20, 0x6F	; 111
    23d0:	b4 2e       	mov	r11, r20
    23d2:	b2 22       	and	r11, r18
    23d4:	97 ff       	sbrs	r25, 7
    23d6:	09 c0       	rjmp	.+18     	; 0x23ea <vfprintf+0x238>
    23d8:	90 95       	com	r25
    23da:	80 95       	com	r24
    23dc:	70 95       	com	r23
    23de:	61 95       	neg	r22
    23e0:	7f 4f       	sbci	r23, 0xFF	; 255
    23e2:	8f 4f       	sbci	r24, 0xFF	; 255
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	f0 e8       	ldi	r31, 0x80	; 128
    23e8:	bf 2a       	or	r11, r31
    23ea:	a2 01       	movw	r20, r4
    23ec:	2a e0       	ldi	r18, 0x0A	; 10
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	fc d0       	rcall	.+504    	; 0x25ea <__ultoa_invert>
    23f2:	78 2e       	mov	r7, r24
    23f4:	74 18       	sub	r7, r4
    23f6:	44 c0       	rjmp	.+136    	; 0x2480 <vfprintf+0x2ce>
    23f8:	85 37       	cpi	r24, 0x75	; 117
    23fa:	31 f4       	brne	.+12     	; 0x2408 <vfprintf+0x256>
    23fc:	3f ee       	ldi	r19, 0xEF	; 239
    23fe:	b3 2e       	mov	r11, r19
    2400:	b2 22       	and	r11, r18
    2402:	2a e0       	ldi	r18, 0x0A	; 10
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	25 c0       	rjmp	.+74     	; 0x2452 <vfprintf+0x2a0>
    2408:	99 ef       	ldi	r25, 0xF9	; 249
    240a:	b9 2e       	mov	r11, r25
    240c:	b2 22       	and	r11, r18
    240e:	8f 36       	cpi	r24, 0x6F	; 111
    2410:	c1 f0       	breq	.+48     	; 0x2442 <vfprintf+0x290>
    2412:	80 37       	cpi	r24, 0x70	; 112
    2414:	20 f4       	brcc	.+8      	; 0x241e <vfprintf+0x26c>
    2416:	88 35       	cpi	r24, 0x58	; 88
    2418:	09 f0       	breq	.+2      	; 0x241c <vfprintf+0x26a>
    241a:	ae c0       	rjmp	.+348    	; 0x2578 <vfprintf+0x3c6>
    241c:	0d c0       	rjmp	.+26     	; 0x2438 <vfprintf+0x286>
    241e:	80 37       	cpi	r24, 0x70	; 112
    2420:	21 f0       	breq	.+8      	; 0x242a <vfprintf+0x278>
    2422:	88 37       	cpi	r24, 0x78	; 120
    2424:	09 f0       	breq	.+2      	; 0x2428 <vfprintf+0x276>
    2426:	a8 c0       	rjmp	.+336    	; 0x2578 <vfprintf+0x3c6>
    2428:	02 c0       	rjmp	.+4      	; 0x242e <vfprintf+0x27c>
    242a:	20 e1       	ldi	r18, 0x10	; 16
    242c:	b2 2a       	or	r11, r18
    242e:	b4 fe       	sbrs	r11, 4
    2430:	0b c0       	rjmp	.+22     	; 0x2448 <vfprintf+0x296>
    2432:	84 e0       	ldi	r24, 0x04	; 4
    2434:	b8 2a       	or	r11, r24
    2436:	08 c0       	rjmp	.+16     	; 0x2448 <vfprintf+0x296>
    2438:	b4 fe       	sbrs	r11, 4
    243a:	09 c0       	rjmp	.+18     	; 0x244e <vfprintf+0x29c>
    243c:	e6 e0       	ldi	r30, 0x06	; 6
    243e:	be 2a       	or	r11, r30
    2440:	06 c0       	rjmp	.+12     	; 0x244e <vfprintf+0x29c>
    2442:	28 e0       	ldi	r18, 0x08	; 8
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	05 c0       	rjmp	.+10     	; 0x2452 <vfprintf+0x2a0>
    2448:	20 e1       	ldi	r18, 0x10	; 16
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <vfprintf+0x2a0>
    244e:	20 e1       	ldi	r18, 0x10	; 16
    2450:	32 e0       	ldi	r19, 0x02	; 2
    2452:	b7 fe       	sbrs	r11, 7
    2454:	08 c0       	rjmp	.+16     	; 0x2466 <vfprintf+0x2b4>
    2456:	f8 01       	movw	r30, r16
    2458:	60 81       	ld	r22, Z
    245a:	71 81       	ldd	r23, Z+1	; 0x01
    245c:	82 81       	ldd	r24, Z+2	; 0x02
    245e:	93 81       	ldd	r25, Z+3	; 0x03
    2460:	0c 5f       	subi	r16, 0xFC	; 252
    2462:	1f 4f       	sbci	r17, 0xFF	; 255
    2464:	07 c0       	rjmp	.+14     	; 0x2474 <vfprintf+0x2c2>
    2466:	f8 01       	movw	r30, r16
    2468:	60 81       	ld	r22, Z
    246a:	71 81       	ldd	r23, Z+1	; 0x01
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	0e 5f       	subi	r16, 0xFE	; 254
    2472:	1f 4f       	sbci	r17, 0xFF	; 255
    2474:	a2 01       	movw	r20, r4
    2476:	b9 d0       	rcall	.+370    	; 0x25ea <__ultoa_invert>
    2478:	78 2e       	mov	r7, r24
    247a:	74 18       	sub	r7, r4
    247c:	ff e7       	ldi	r31, 0x7F	; 127
    247e:	bf 22       	and	r11, r31
    2480:	b6 fe       	sbrs	r11, 6
    2482:	0b c0       	rjmp	.+22     	; 0x249a <vfprintf+0x2e8>
    2484:	2e ef       	ldi	r18, 0xFE	; 254
    2486:	b2 22       	and	r11, r18
    2488:	7e 14       	cp	r7, r14
    248a:	38 f4       	brcc	.+14     	; 0x249a <vfprintf+0x2e8>
    248c:	b4 fe       	sbrs	r11, 4
    248e:	07 c0       	rjmp	.+14     	; 0x249e <vfprintf+0x2ec>
    2490:	b2 fc       	sbrc	r11, 2
    2492:	05 c0       	rjmp	.+10     	; 0x249e <vfprintf+0x2ec>
    2494:	8f ee       	ldi	r24, 0xEF	; 239
    2496:	b8 22       	and	r11, r24
    2498:	02 c0       	rjmp	.+4      	; 0x249e <vfprintf+0x2ec>
    249a:	a7 2c       	mov	r10, r7
    249c:	01 c0       	rjmp	.+2      	; 0x24a0 <vfprintf+0x2ee>
    249e:	ae 2c       	mov	r10, r14
    24a0:	8b 2d       	mov	r24, r11
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	b4 fe       	sbrs	r11, 4
    24a6:	0d c0       	rjmp	.+26     	; 0x24c2 <vfprintf+0x310>
    24a8:	fe 01       	movw	r30, r28
    24aa:	e7 0d       	add	r30, r7
    24ac:	f1 1d       	adc	r31, r1
    24ae:	20 81       	ld	r18, Z
    24b0:	20 33       	cpi	r18, 0x30	; 48
    24b2:	19 f4       	brne	.+6      	; 0x24ba <vfprintf+0x308>
    24b4:	e9 ee       	ldi	r30, 0xE9	; 233
    24b6:	be 22       	and	r11, r30
    24b8:	09 c0       	rjmp	.+18     	; 0x24cc <vfprintf+0x31a>
    24ba:	a3 94       	inc	r10
    24bc:	b2 fe       	sbrs	r11, 2
    24be:	06 c0       	rjmp	.+12     	; 0x24cc <vfprintf+0x31a>
    24c0:	04 c0       	rjmp	.+8      	; 0x24ca <vfprintf+0x318>
    24c2:	86 78       	andi	r24, 0x86	; 134
    24c4:	90 70       	andi	r25, 0x00	; 0
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	09 f0       	breq	.+2      	; 0x24cc <vfprintf+0x31a>
    24ca:	a3 94       	inc	r10
    24cc:	8b 2c       	mov	r8, r11
    24ce:	99 24       	eor	r9, r9
    24d0:	b3 fc       	sbrc	r11, 3
    24d2:	13 c0       	rjmp	.+38     	; 0x24fa <vfprintf+0x348>
    24d4:	b0 fe       	sbrs	r11, 0
    24d6:	0e c0       	rjmp	.+28     	; 0x24f4 <vfprintf+0x342>
    24d8:	af 14       	cp	r10, r15
    24da:	28 f4       	brcc	.+10     	; 0x24e6 <vfprintf+0x334>
    24dc:	e7 2c       	mov	r14, r7
    24de:	ef 0c       	add	r14, r15
    24e0:	ea 18       	sub	r14, r10
    24e2:	af 2c       	mov	r10, r15
    24e4:	07 c0       	rjmp	.+14     	; 0x24f4 <vfprintf+0x342>
    24e6:	e7 2c       	mov	r14, r7
    24e8:	05 c0       	rjmp	.+10     	; 0x24f4 <vfprintf+0x342>
    24ea:	80 e2       	ldi	r24, 0x20	; 32
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	b6 01       	movw	r22, r12
    24f0:	dd dd       	rcall	.-1094   	; 0x20ac <fputc>
    24f2:	a3 94       	inc	r10
    24f4:	af 14       	cp	r10, r15
    24f6:	c8 f3       	brcs	.-14     	; 0x24ea <vfprintf+0x338>
    24f8:	04 c0       	rjmp	.+8      	; 0x2502 <vfprintf+0x350>
    24fa:	af 14       	cp	r10, r15
    24fc:	10 f4       	brcc	.+4      	; 0x2502 <vfprintf+0x350>
    24fe:	fa 18       	sub	r15, r10
    2500:	01 c0       	rjmp	.+2      	; 0x2504 <vfprintf+0x352>
    2502:	ff 24       	eor	r15, r15
    2504:	84 fe       	sbrs	r8, 4
    2506:	0e c0       	rjmp	.+28     	; 0x2524 <vfprintf+0x372>
    2508:	80 e3       	ldi	r24, 0x30	; 48
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	b6 01       	movw	r22, r12
    250e:	ce dd       	rcall	.-1124   	; 0x20ac <fputc>
    2510:	82 fe       	sbrs	r8, 2
    2512:	1d c0       	rjmp	.+58     	; 0x254e <vfprintf+0x39c>
    2514:	81 fe       	sbrs	r8, 1
    2516:	03 c0       	rjmp	.+6      	; 0x251e <vfprintf+0x36c>
    2518:	88 e5       	ldi	r24, 0x58	; 88
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	10 c0       	rjmp	.+32     	; 0x253e <vfprintf+0x38c>
    251e:	88 e7       	ldi	r24, 0x78	; 120
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0d c0       	rjmp	.+26     	; 0x253e <vfprintf+0x38c>
    2524:	c4 01       	movw	r24, r8
    2526:	86 78       	andi	r24, 0x86	; 134
    2528:	90 70       	andi	r25, 0x00	; 0
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	81 f0       	breq	.+32     	; 0x254e <vfprintf+0x39c>
    252e:	81 fc       	sbrc	r8, 1
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <vfprintf+0x384>
    2532:	80 e2       	ldi	r24, 0x20	; 32
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <vfprintf+0x386>
    2536:	8b e2       	ldi	r24, 0x2B	; 43
    2538:	b7 fc       	sbrc	r11, 7
    253a:	8d e2       	ldi	r24, 0x2D	; 45
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	b6 01       	movw	r22, r12
    2540:	b5 dd       	rcall	.-1174   	; 0x20ac <fputc>
    2542:	05 c0       	rjmp	.+10     	; 0x254e <vfprintf+0x39c>
    2544:	80 e3       	ldi	r24, 0x30	; 48
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	b6 01       	movw	r22, r12
    254a:	b0 dd       	rcall	.-1184   	; 0x20ac <fputc>
    254c:	ea 94       	dec	r14
    254e:	7e 14       	cp	r7, r14
    2550:	c8 f3       	brcs	.-14     	; 0x2544 <vfprintf+0x392>
    2552:	7a 94       	dec	r7
    2554:	f2 01       	movw	r30, r4
    2556:	e7 0d       	add	r30, r7
    2558:	f1 1d       	adc	r31, r1
    255a:	80 81       	ld	r24, Z
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	b6 01       	movw	r22, r12
    2560:	a5 dd       	rcall	.-1206   	; 0x20ac <fputc>
    2562:	77 20       	and	r7, r7
    2564:	b1 f7       	brne	.-20     	; 0x2552 <vfprintf+0x3a0>
    2566:	05 c0       	rjmp	.+10     	; 0x2572 <vfprintf+0x3c0>
    2568:	80 e2       	ldi	r24, 0x20	; 32
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	b6 01       	movw	r22, r12
    256e:	9e dd       	rcall	.-1220   	; 0x20ac <fputc>
    2570:	fa 94       	dec	r15
    2572:	ff 20       	and	r15, r15
    2574:	c9 f7       	brne	.-14     	; 0x2568 <vfprintf+0x3b6>
    2576:	44 ce       	rjmp	.-888    	; 0x2200 <vfprintf+0x4e>
    2578:	f6 01       	movw	r30, r12
    257a:	26 81       	ldd	r18, Z+6	; 0x06
    257c:	37 81       	ldd	r19, Z+7	; 0x07
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <vfprintf+0x3d2>
    2580:	2f ef       	ldi	r18, 0xFF	; 255
    2582:	3f ef       	ldi	r19, 0xFF	; 255
    2584:	c9 01       	movw	r24, r18
    2586:	2c 96       	adiw	r28, 0x0c	; 12
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	1f 91       	pop	r17
    2598:	0f 91       	pop	r16
    259a:	ff 90       	pop	r15
    259c:	ef 90       	pop	r14
    259e:	df 90       	pop	r13
    25a0:	cf 90       	pop	r12
    25a2:	bf 90       	pop	r11
    25a4:	af 90       	pop	r10
    25a6:	9f 90       	pop	r9
    25a8:	8f 90       	pop	r8
    25aa:	7f 90       	pop	r7
    25ac:	6f 90       	pop	r6
    25ae:	5f 90       	pop	r5
    25b0:	4f 90       	pop	r4
    25b2:	3f 90       	pop	r3
    25b4:	2f 90       	pop	r2
    25b6:	08 95       	ret

000025b8 <__ctype_isfalse>:
    25b8:	99 27       	eor	r25, r25
    25ba:	88 27       	eor	r24, r24

000025bc <__ctype_istrue>:
    25bc:	08 95       	ret

000025be <strnlen_P>:
    25be:	fc 01       	movw	r30, r24
    25c0:	05 90       	lpm	r0, Z+
    25c2:	61 50       	subi	r22, 0x01	; 1
    25c4:	70 40       	sbci	r23, 0x00	; 0
    25c6:	01 10       	cpse	r0, r1
    25c8:	d8 f7       	brcc	.-10     	; 0x25c0 <strnlen_P+0x2>
    25ca:	80 95       	com	r24
    25cc:	90 95       	com	r25
    25ce:	8e 0f       	add	r24, r30
    25d0:	9f 1f       	adc	r25, r31
    25d2:	08 95       	ret

000025d4 <strnlen>:
    25d4:	fc 01       	movw	r30, r24
    25d6:	61 50       	subi	r22, 0x01	; 1
    25d8:	70 40       	sbci	r23, 0x00	; 0
    25da:	01 90       	ld	r0, Z+
    25dc:	01 10       	cpse	r0, r1
    25de:	d8 f7       	brcc	.-10     	; 0x25d6 <strnlen+0x2>
    25e0:	80 95       	com	r24
    25e2:	90 95       	com	r25
    25e4:	8e 0f       	add	r24, r30
    25e6:	9f 1f       	adc	r25, r31
    25e8:	08 95       	ret

000025ea <__ultoa_invert>:
    25ea:	fa 01       	movw	r30, r20
    25ec:	aa 27       	eor	r26, r26
    25ee:	28 30       	cpi	r18, 0x08	; 8
    25f0:	51 f1       	breq	.+84     	; 0x2646 <__ultoa_invert+0x5c>
    25f2:	20 31       	cpi	r18, 0x10	; 16
    25f4:	81 f1       	breq	.+96     	; 0x2656 <__ultoa_invert+0x6c>
    25f6:	e8 94       	clt
    25f8:	6f 93       	push	r22
    25fa:	6e 7f       	andi	r22, 0xFE	; 254
    25fc:	6e 5f       	subi	r22, 0xFE	; 254
    25fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2600:	8f 4f       	sbci	r24, 0xFF	; 255
    2602:	9f 4f       	sbci	r25, 0xFF	; 255
    2604:	af 4f       	sbci	r26, 0xFF	; 255
    2606:	b1 e0       	ldi	r27, 0x01	; 1
    2608:	3e d0       	rcall	.+124    	; 0x2686 <__ultoa_invert+0x9c>
    260a:	b4 e0       	ldi	r27, 0x04	; 4
    260c:	3c d0       	rcall	.+120    	; 0x2686 <__ultoa_invert+0x9c>
    260e:	67 0f       	add	r22, r23
    2610:	78 1f       	adc	r23, r24
    2612:	89 1f       	adc	r24, r25
    2614:	9a 1f       	adc	r25, r26
    2616:	a1 1d       	adc	r26, r1
    2618:	68 0f       	add	r22, r24
    261a:	79 1f       	adc	r23, r25
    261c:	8a 1f       	adc	r24, r26
    261e:	91 1d       	adc	r25, r1
    2620:	a1 1d       	adc	r26, r1
    2622:	6a 0f       	add	r22, r26
    2624:	71 1d       	adc	r23, r1
    2626:	81 1d       	adc	r24, r1
    2628:	91 1d       	adc	r25, r1
    262a:	a1 1d       	adc	r26, r1
    262c:	20 d0       	rcall	.+64     	; 0x266e <__ultoa_invert+0x84>
    262e:	09 f4       	brne	.+2      	; 0x2632 <__ultoa_invert+0x48>
    2630:	68 94       	set
    2632:	3f 91       	pop	r19
    2634:	2a e0       	ldi	r18, 0x0A	; 10
    2636:	26 9f       	mul	r18, r22
    2638:	11 24       	eor	r1, r1
    263a:	30 19       	sub	r19, r0
    263c:	30 5d       	subi	r19, 0xD0	; 208
    263e:	31 93       	st	Z+, r19
    2640:	de f6       	brtc	.-74     	; 0x25f8 <__ultoa_invert+0xe>
    2642:	cf 01       	movw	r24, r30
    2644:	08 95       	ret
    2646:	46 2f       	mov	r20, r22
    2648:	47 70       	andi	r20, 0x07	; 7
    264a:	40 5d       	subi	r20, 0xD0	; 208
    264c:	41 93       	st	Z+, r20
    264e:	b3 e0       	ldi	r27, 0x03	; 3
    2650:	0f d0       	rcall	.+30     	; 0x2670 <__ultoa_invert+0x86>
    2652:	c9 f7       	brne	.-14     	; 0x2646 <__ultoa_invert+0x5c>
    2654:	f6 cf       	rjmp	.-20     	; 0x2642 <__ultoa_invert+0x58>
    2656:	46 2f       	mov	r20, r22
    2658:	4f 70       	andi	r20, 0x0F	; 15
    265a:	40 5d       	subi	r20, 0xD0	; 208
    265c:	4a 33       	cpi	r20, 0x3A	; 58
    265e:	18 f0       	brcs	.+6      	; 0x2666 <__ultoa_invert+0x7c>
    2660:	49 5d       	subi	r20, 0xD9	; 217
    2662:	31 fd       	sbrc	r19, 1
    2664:	40 52       	subi	r20, 0x20	; 32
    2666:	41 93       	st	Z+, r20
    2668:	02 d0       	rcall	.+4      	; 0x266e <__ultoa_invert+0x84>
    266a:	a9 f7       	brne	.-22     	; 0x2656 <__ultoa_invert+0x6c>
    266c:	ea cf       	rjmp	.-44     	; 0x2642 <__ultoa_invert+0x58>
    266e:	b4 e0       	ldi	r27, 0x04	; 4
    2670:	a6 95       	lsr	r26
    2672:	97 95       	ror	r25
    2674:	87 95       	ror	r24
    2676:	77 95       	ror	r23
    2678:	67 95       	ror	r22
    267a:	ba 95       	dec	r27
    267c:	c9 f7       	brne	.-14     	; 0x2670 <__ultoa_invert+0x86>
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	61 05       	cpc	r22, r1
    2682:	71 05       	cpc	r23, r1
    2684:	08 95       	ret
    2686:	9b 01       	movw	r18, r22
    2688:	ac 01       	movw	r20, r24
    268a:	0a 2e       	mov	r0, r26
    268c:	06 94       	lsr	r0
    268e:	57 95       	ror	r21
    2690:	47 95       	ror	r20
    2692:	37 95       	ror	r19
    2694:	27 95       	ror	r18
    2696:	ba 95       	dec	r27
    2698:	c9 f7       	brne	.-14     	; 0x268c <__ultoa_invert+0xa2>
    269a:	62 0f       	add	r22, r18
    269c:	73 1f       	adc	r23, r19
    269e:	84 1f       	adc	r24, r20
    26a0:	95 1f       	adc	r25, r21
    26a2:	a0 1d       	adc	r26, r0
    26a4:	08 95       	ret

000026a6 <_exit>:
    26a6:	f8 94       	cli

000026a8 <__stop_program>:
    26a8:	ff cf       	rjmp	.-2      	; 0x26a8 <__stop_program>
