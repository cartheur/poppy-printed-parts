
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000182c  000018c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000182c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800144  00800144  00001904  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00001904  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b3  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000370  00000000  00000000  00002227  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000982  00000000  00000000  00002597  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007365  00000000  00000000  00002f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000177b  00000000  00000000  0000a27e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005e47  00000000  00000000  0000b9f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000520  00000000  00000000  00011840  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000028c0  00000000  00000000  00011d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004135  00000000  00000000  00014620  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000907  00000000  00000000  00018755  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000668  00000000  00000000  0001905c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__vector_10>
      2c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_11>
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      ba:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

000000ca <LanguageString>:
      ca:	04 03 09 04                                         ....

000000ce <ManufacturerString>:
      ce:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      de:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e8 <ProductString>:
      e8:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      f8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     108:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e2       	ldi	r29, 0x20	; 32
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	ec e2       	ldi	r30, 0x2C	; 44
     12c:	f8 e1       	ldi	r31, 0x18	; 24
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	a4 34       	cpi	r26, 0x44	; 68
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	11 e0       	ldi	r17, 0x01	; 1
     140:	a4 e4       	ldi	r26, 0x44	; 68
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	a1 37       	cpi	r26, 0x71	; 113
     14a:	b1 07       	cpc	r27, r17
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	8b d1       	rcall	.+790    	; 0x466 <main>
     150:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     156:	9b b1       	in	r25, 0x0b	; 11
     158:	9f 70       	andi	r25, 0x0F	; 15
     15a:	98 2b       	or	r25, r24
     15c:	9b b9       	out	0x0b, r25	; 11
			}
     15e:	08 95       	ret

00000160 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     160:	84 b7       	in	r24, 0x34	; 52
     162:	87 7f       	andi	r24, 0xF7	; 247
     164:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     166:	88 e1       	ldi	r24, 0x18	; 24
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	f8 94       	cli
     16c:	80 93 60 00 	sts	0x0060, r24
     170:	10 92 60 00 	sts	0x0060, r1
     174:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	80 e8       	ldi	r24, 0x80	; 128
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	80 93 61 00 	sts	0x0061, r24
     182:	90 93 61 00 	sts	0x0061, r25
     186:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     188:	8a b1       	in	r24, 0x0a	; 10
     18a:	80 6f       	ori	r24, 0xF0	; 240
     18c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     18e:	8b b1       	in	r24, 0x0b	; 11
     190:	8f 70       	andi	r24, 0x0F	; 15
     192:	8b b9       	out	0x0b, r24	; 11
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     194:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     196:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     198:	84 b1       	in	r24, 0x04	; 4
     19a:	86 60       	ori	r24, 0x06	; 6
     19c:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     19e:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     1a0:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     1a2:	8d b5       	in	r24, 0x2d	; 45
     1a4:	81 60       	ori	r24, 0x01	; 1
     1a6:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     1a8:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     1aa:	8c e5       	ldi	r24, 0x5C	; 92
     1ac:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     1ae:	8d b1       	in	r24, 0x0d	; 13
     1b0:	83 60       	ori	r24, 0x03	; 3
     1b2:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     1b4:	8e b1       	in	r24, 0x0e	; 14
     1b6:	83 60       	ori	r24, 0x03	; 3
     1b8:	8e b9       	out	0x0e, r24	; 14

	/* Hardware Initialization */
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     1ba:	0e 94 68 09 	call	0x12d0	; 0x12d0 <USB_Init>

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     1be:	52 d4       	rcall	.+2212   	; 0xa64 <DataflashManager_CheckDataflashOperation>
     1c0:	88 23       	and	r24, r24
     1c2:	19 f4       	brne	.+6      	; 0x1ca <SetupHardware+0x6a>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     1c4:	80 e9       	ldi	r24, 0x90	; 144
     1c6:	c7 df       	rcall	.-114    	; 0x156 <LEDs_SetAllLEDs>
     1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <SetupHardware+0x68>
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     1ca:	fe c3       	rjmp	.+2044   	; 0x9c8 <DataflashManager_ResetDataflashProtections>

000001cc <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1cc:	80 ea       	ldi	r24, 0xA0	; 160
     1ce:	c3 df       	rcall	.-122    	; 0x156 <LEDs_SetAllLEDs>

	/* Reset the MSReset flag upon connection */
	IsMassStoreReset = false;
     1d0:	10 92 44 01 	sts	0x0144, r1
}
     1d4:	08 95       	ret

000001d6 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1d6:	80 e1       	ldi	r24, 0x10	; 16
}
     1d8:	be cf       	rjmp	.-132    	; 0x156 <LEDs_SetAllLEDs>

000001da <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the Mass Storage management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     1da:	1f 93       	push	r17
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     1dc:	83 e0       	ldi	r24, 0x03	; 3
     1de:	61 e8       	ldi	r22, 0x81	; 129
     1e0:	42 e3       	ldi	r20, 0x32	; 50
     1e2:	a5 d7       	rcall	.+3914   	; 0x112e <Endpoint_ConfigureEndpoint_Prv>
     1e4:	18 2f       	mov	r17, r24
     1e6:	84 e0       	ldi	r24, 0x04	; 4
     1e8:	60 e8       	ldi	r22, 0x80	; 128
     1ea:	42 e3       	ldi	r20, 0x32	; 50
     1ec:	a0 d7       	rcall	.+3904   	; 0x112e <Endpoint_ConfigureEndpoint_Prv>
	bool ConfigSuccess = true;

	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_IN_EPADDR,  EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
     1ee:	21 2f       	mov	r18, r17
     1f0:	30 e0       	ldi	r19, 0x00	; 0
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPADDR, EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
     1f2:	90 e0       	ldi	r25, 0x00	; 0
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_IN_EPADDR,  EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
     1f4:	28 23       	and	r18, r24
     1f6:	39 23       	and	r19, r25
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPADDR, EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1f8:	20 ff       	sbrs	r18, 0
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <EVENT_USB_Device_ConfigurationChanged+0x26>
     1fc:	80 e6       	ldi	r24, 0x60	; 96
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <EVENT_USB_Device_ConfigurationChanged+0x28>
     200:	80 e9       	ldi	r24, 0x90	; 144
     202:	a9 df       	rcall	.-174    	; 0x156 <LEDs_SetAllLEDs>
}
     204:	1f 91       	pop	r17
     206:	08 95       	ret

00000208 <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Process UFI specific control requests */
	switch (USB_ControlRequest.bRequest)
     208:	80 91 6a 01 	lds	r24, 0x016A
     20c:	8e 3f       	cpi	r24, 0xFE	; 254
     20e:	81 f0       	breq	.+32     	; 0x230 <EVENT_USB_Device_ControlRequest+0x28>
     210:	8f 3f       	cpi	r24, 0xFF	; 255
     212:	f9 f4       	brne	.+62     	; 0x252 <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     214:	80 91 69 01 	lds	r24, 0x0169
     218:	81 32       	cpi	r24, 0x21	; 33
     21a:	d9 f4       	brne	.+54     	; 0x252 <EVENT_USB_Device_ControlRequest+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     21c:	80 91 e8 00 	lds	r24, 0x00E8
     220:	87 7f       	andi	r24, 0xF7	; 247
     222:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     226:	ba d7       	rcall	.+3956   	; 0x119c <Endpoint_ClearStatusStage>

				/* Indicate that the current transfer should be aborted */
				IsMassStoreReset = true;
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	80 93 44 01 	sts	0x0144, r24
     22e:	08 95       	ret
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     230:	80 91 69 01 	lds	r24, 0x0169
     234:	81 3a       	cpi	r24, 0xA1	; 161
     236:	69 f4       	brne	.+26     	; 0x252 <EVENT_USB_Device_ControlRequest+0x4a>
     238:	80 91 e8 00 	lds	r24, 0x00E8
     23c:	87 7f       	andi	r24, 0xF7	; 247
     23e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     242:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     246:	80 91 e8 00 	lds	r24, 0x00E8
     24a:	8e 77       	andi	r24, 0x7E	; 126
     24c:	80 93 e8 00 	sts	0x00E8, r24

				/* Indicate to the host the number of supported LUNs (virtual disks) on the device */
				Endpoint_Write_8(TOTAL_LUNS - 1);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     250:	a5 c7       	rjmp	.+3914   	; 0x119c <Endpoint_ClearStatusStage>
     252:	08 95       	ret

00000254 <MassStorage_Task>:

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
{
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	df 93       	push	r29
     25a:	cf 93       	push	r28
     25c:	00 d0       	rcall	.+0      	; 0x25e <MassStorage_Task+0xa>
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     262:	80 91 68 01 	lds	r24, 0x0168
     266:	84 30       	cpi	r24, 0x04	; 4
     268:	09 f0       	breq	.+2      	; 0x26c <MassStorage_Task+0x18>
     26a:	f6 c0       	rjmp	.+492    	; 0x458 <MassStorage_Task+0x204>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     26c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     270:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     274:	82 ff       	sbrs	r24, 2
     276:	c6 c0       	rjmp	.+396    	; 0x404 <MassStorage_Task+0x1b0>
	  return false;

	/* Read in command block header */
	BytesTransferred = 0;
     278:	1a 82       	std	Y+2, r1	; 0x02
     27a:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     27c:	8e 01       	movw	r16, r28
     27e:	0f 5f       	subi	r16, 0xFF	; 255
     280:	1f 4f       	sbci	r17, 0xFF	; 255
     282:	05 c0       	rjmp	.+10     	; 0x28e <MassStorage_Task+0x3a>
	                               &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     284:	80 91 44 01 	lds	r24, 0x0144
     288:	88 23       	and	r24, r24
     28a:	09 f0       	breq	.+2      	; 0x28e <MassStorage_Task+0x3a>
     28c:	bb c0       	rjmp	.+374    	; 0x404 <MassStorage_Task+0x1b0>
	if (!(Endpoint_IsOUTReceived()))
	  return false;

	/* Read in command block header */
	BytesTransferred = 0;
	while (Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     28e:	85 e4       	ldi	r24, 0x45	; 69
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	6f e0       	ldi	r22, 0x0F	; 15
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	a8 01       	movw	r20, r16
     298:	31 d6       	rcall	.+3170   	; 0xefc <Endpoint_Read_Stream_LE>
     29a:	85 30       	cpi	r24, 0x05	; 5
     29c:	99 f3       	breq	.-26     	; 0x284 <MassStorage_Task+0x30>
		if (IsMassStoreReset)
		  return false;
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
     29e:	80 91 45 01 	lds	r24, 0x0145
     2a2:	90 91 46 01 	lds	r25, 0x0146
     2a6:	a0 91 47 01 	lds	r26, 0x0147
     2aa:	b0 91 48 01 	lds	r27, 0x0148
     2ae:	85 35       	cpi	r24, 0x55	; 85
     2b0:	23 e5       	ldi	r18, 0x53	; 83
     2b2:	92 07       	cpc	r25, r18
     2b4:	22 e4       	ldi	r18, 0x42	; 66
     2b6:	a2 07       	cpc	r26, r18
     2b8:	23 e4       	ldi	r18, 0x43	; 67
     2ba:	b2 07       	cpc	r27, r18
     2bc:	89 f4       	brne	.+34     	; 0x2e0 <MassStorage_Task+0x8c>
     2be:	80 91 52 01 	lds	r24, 0x0152
     2c2:	88 23       	and	r24, r24
     2c4:	69 f4       	brne	.+26     	; 0x2e0 <MassStorage_Task+0x8c>
	    (CommandBlock.LUN               >= TOTAL_LUNS)       ||
		(CommandBlock.Flags              & 0x1F)             ||
     2c6:	80 91 51 01 	lds	r24, 0x0151
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	8f 71       	andi	r24, 0x1F	; 31
     2ce:	90 70       	andi	r25, 0x00	; 0
		  return false;
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
	    (CommandBlock.LUN               >= TOTAL_LUNS)       ||
     2d0:	00 97       	sbiw	r24, 0x00	; 0
     2d2:	31 f4       	brne	.+12     	; 0x2e0 <MassStorage_Task+0x8c>
		(CommandBlock.Flags              & 0x1F)             ||
		(CommandBlock.SCSICommandLength == 0)                ||
     2d4:	80 91 53 01 	lds	r24, 0x0153
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
	    (CommandBlock.LUN               >= TOTAL_LUNS)       ||
		(CommandBlock.Flags              & 0x1F)             ||
     2d8:	88 23       	and	r24, r24
     2da:	11 f0       	breq	.+4      	; 0x2e0 <MassStorage_Task+0x8c>
		(CommandBlock.SCSICommandLength == 0)                ||
     2dc:	81 31       	cpi	r24, 0x11	; 17
     2de:	70 f0       	brcs	.+28     	; 0x2fc <MassStorage_Task+0xa8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     2e0:	80 91 eb 00 	lds	r24, 0x00EB
     2e4:	80 62       	ori	r24, 0x20	; 32
     2e6:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2ea:	83 e0       	ldi	r24, 0x03	; 3
     2ec:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     2f0:	80 91 eb 00 	lds	r24, 0x00EB
     2f4:	80 62       	ori	r24, 0x20	; 32
     2f6:	80 93 eb 00 	sts	0x00EB, r24
     2fa:	84 c0       	rjmp	.+264    	; 0x404 <MassStorage_Task+0x1b0>

		return false;
	}

	/* Read in command block command data */
	BytesTransferred = 0;
     2fc:	1a 82       	std	Y+2, r1	; 0x02
     2fe:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData, CommandBlock.SCSICommandLength,
     300:	8e 01       	movw	r16, r28
     302:	0f 5f       	subi	r16, 0xFF	; 255
     304:	1f 4f       	sbci	r17, 0xFF	; 255
     306:	05 c0       	rjmp	.+10     	; 0x312 <MassStorage_Task+0xbe>
	                               &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     308:	80 91 44 01 	lds	r24, 0x0144
     30c:	88 23       	and	r24, r24
     30e:	09 f0       	breq	.+2      	; 0x312 <MassStorage_Task+0xbe>
     310:	79 c0       	rjmp	.+242    	; 0x404 <MassStorage_Task+0x1b0>
		return false;
	}

	/* Read in command block command data */
	BytesTransferred = 0;
	while (Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData, CommandBlock.SCSICommandLength,
     312:	60 91 53 01 	lds	r22, 0x0153
     316:	84 e5       	ldi	r24, 0x54	; 84
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	a8 01       	movw	r20, r16
     31e:	ee d5       	rcall	.+3036   	; 0xefc <Endpoint_Read_Stream_LE>
     320:	85 30       	cpi	r24, 0x05	; 5
     322:	91 f3       	breq	.-28     	; 0x308 <MassStorage_Task+0xb4>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     324:	80 91 e8 00 	lds	r24, 0x00E8
     328:	8b 77       	andi	r24, 0x7B	; 123
     32a:	80 93 e8 00 	sts	0x00E8, r24

	/* Process sent command block from the host if one has been sent */
	if (ReadInCommandBlock())
	{
		/* Indicate busy */
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     32e:	80 e2       	ldi	r24, 0x20	; 32
     330:	12 df       	rcall	.-476    	; 0x156 <LEDs_SetAllLEDs>

		/* Check direction of command, select Data IN endpoint if data is from the device */
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
     332:	80 91 51 01 	lds	r24, 0x0151
     336:	87 ff       	sbrs	r24, 7
     338:	03 c0       	rjmp	.+6      	; 0x340 <MassStorage_Task+0xec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     33a:	83 e0       	ldi	r24, 0x03	; 3
     33c:	80 93 e9 00 	sts	0x00E9, r24
		  Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);

		/* Decode the received SCSI command, set returned status code */
		CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
     340:	1e d4       	rcall	.+2108   	; 0xb7e <SCSI_DecodeSCSICommand>
}

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	98 27       	eor	r25, r24
		/* Check direction of command, select Data IN endpoint if data is from the device */
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
		  Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);

		/* Decode the received SCSI command, set returned status code */
		CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
     346:	90 93 0c 01 	sts	0x010C, r25

		/* Load in the CBW tag into the CSW to link them together */
		CommandStatus.Tag = CommandBlock.Tag;
     34a:	20 91 49 01 	lds	r18, 0x0149
     34e:	30 91 4a 01 	lds	r19, 0x014A
     352:	40 91 4b 01 	lds	r20, 0x014B
     356:	50 91 4c 01 	lds	r21, 0x014C
     35a:	20 93 04 01 	sts	0x0104, r18
     35e:	30 93 05 01 	sts	0x0105, r19
     362:	40 93 06 01 	sts	0x0106, r20
     366:	50 93 07 01 	sts	0x0107, r21

		/* Load in the data residue counter into the CSW */
		CommandStatus.DataTransferResidue = CommandBlock.DataTransferLength;
     36a:	20 91 4d 01 	lds	r18, 0x014D
     36e:	30 91 4e 01 	lds	r19, 0x014E
     372:	40 91 4f 01 	lds	r20, 0x014F
     376:	50 91 50 01 	lds	r21, 0x0150
     37a:	20 93 08 01 	sts	0x0108, r18
     37e:	30 93 09 01 	sts	0x0109, r19
     382:	40 93 0a 01 	sts	0x010A, r20
     386:	50 93 0b 01 	sts	0x010B, r21

		/* Stall the selected data pipe if command failed (if data is still to be transferred) */
		if ((CommandStatus.Status == MS_SCSI_COMMAND_Fail) && (CommandStatus.DataTransferResidue))
     38a:	91 30       	cpi	r25, 0x01	; 1
     38c:	51 f4       	brne	.+20     	; 0x3a2 <MassStorage_Task+0x14e>
     38e:	21 15       	cp	r18, r1
     390:	31 05       	cpc	r19, r1
     392:	41 05       	cpc	r20, r1
     394:	51 05       	cpc	r21, r1
     396:	29 f0       	breq	.+10     	; 0x3a2 <MassStorage_Task+0x14e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     398:	80 91 eb 00 	lds	r24, 0x00EB
     39c:	80 62       	ori	r24, 0x20	; 32
     39e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3a2:	84 e0       	ldi	r24, 0x04	; 4
     3a4:	80 93 e9 00 	sts	0x00E9, r24
     3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <MassStorage_Task+0x15e>

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     3aa:	80 91 44 01 	lds	r24, 0x0144
     3ae:	88 23       	and	r24, r24
     3b0:	39 f5       	brne	.+78     	; 0x400 <MassStorage_Task+0x1ac>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3b2:	80 91 eb 00 	lds	r24, 0x00EB

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3b6:	85 fd       	sbrc	r24, 5
     3b8:	f8 cf       	rjmp	.-16     	; 0x3aa <MassStorage_Task+0x156>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3ba:	83 e0       	ldi	r24, 0x03	; 3
     3bc:	80 93 e9 00 	sts	0x00E9, r24
     3c0:	04 c0       	rjmp	.+8      	; 0x3ca <MassStorage_Task+0x176>

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     3c2:	80 91 44 01 	lds	r24, 0x0144
     3c6:	88 23       	and	r24, r24
     3c8:	d9 f4       	brne	.+54     	; 0x400 <MassStorage_Task+0x1ac>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3ca:	80 91 eb 00 	lds	r24, 0x00EB

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3ce:	85 fd       	sbrc	r24, 5
     3d0:	f8 cf       	rjmp	.-16     	; 0x3c2 <MassStorage_Task+0x16e>
		if (IsMassStoreReset)
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
     3d2:	1a 82       	std	Y+2, r1	; 0x02
     3d4:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     3d6:	8e 01       	movw	r16, r28
     3d8:	0f 5f       	subi	r16, 0xFF	; 255
     3da:	1f 4f       	sbci	r17, 0xFF	; 255
     3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <MassStorage_Task+0x192>
	                                &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     3de:	80 91 44 01 	lds	r24, 0x0144
     3e2:	88 23       	and	r24, r24
     3e4:	69 f4       	brne	.+26     	; 0x400 <MassStorage_Task+0x1ac>
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	6d e0       	ldi	r22, 0x0D	; 13
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	a8 01       	movw	r20, r16
     3f0:	28 d5       	rcall	.+2640   	; 0xe42 <Endpoint_Write_Stream_LE>
     3f2:	85 30       	cpi	r24, 0x05	; 5
     3f4:	a1 f3       	breq	.-24     	; 0x3de <MassStorage_Task+0x18a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3f6:	80 91 e8 00 	lds	r24, 0x00E8
     3fa:	8e 77       	andi	r24, 0x7E	; 126
     3fc:	80 93 e8 00 	sts	0x00E8, r24

		/* Return command status block to the host */
		ReturnCommandStatus();

		/* Indicate ready */
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     400:	80 e6       	ldi	r24, 0x60	; 96
     402:	a9 de       	rcall	.-686    	; 0x156 <LEDs_SetAllLEDs>
	}

	/* Check if a Mass Storage Reset occurred */
	if (IsMassStoreReset)
     404:	80 91 44 01 	lds	r24, 0x0144
     408:	88 23       	and	r24, r24
     40a:	31 f1       	breq	.+76     	; 0x458 <MassStorage_Task+0x204>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     40c:	80 e1       	ldi	r24, 0x10	; 16
     40e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     412:	10 92 ea 00 	sts	0x00EA, r1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     416:	88 e0       	ldi	r24, 0x08	; 8
     418:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     41c:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     420:	84 e0       	ldi	r24, 0x04	; 4
     422:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     426:	80 91 eb 00 	lds	r24, 0x00EB
     42a:	80 61       	ori	r24, 0x10	; 16
     42c:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     430:	80 91 eb 00 	lds	r24, 0x00EB
     434:	88 60       	ori	r24, 0x08	; 8
     436:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     43a:	83 e0       	ldi	r24, 0x03	; 3
     43c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     440:	80 91 eb 00 	lds	r24, 0x00EB
     444:	80 61       	ori	r24, 0x10	; 16
     446:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     44a:	80 91 eb 00 	lds	r24, 0x00EB
     44e:	88 60       	ori	r24, 0x08	; 8
     450:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		/* Clear the abort transfer flag */
		IsMassStoreReset = false;
     454:	10 92 44 01 	sts	0x0144, r1
	}
}
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	cf 91       	pop	r28
     45e:	df 91       	pop	r29
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret

00000466 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     466:	7c de       	rcall	.-776    	; 0x160 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     468:	80 e1       	ldi	r24, 0x10	; 16
     46a:	75 de       	rcall	.-790    	; 0x156 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     46c:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		MassStorage_Task();
     46e:	f2 de       	rcall	.-540    	; 0x254 <MassStorage_Task>
		USB_USBTask();
     470:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <USB_USBTask>
     474:	fc cf       	rjmp	.-8      	; 0x46e <main+0x8>

00000476 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     476:	92 30       	cpi	r25, 0x02	; 2
     478:	29 f0       	breq	.+10     	; 0x484 <CALLBACK_USB_GetDescriptor+0xe>
     47a:	93 30       	cpi	r25, 0x03	; 3
     47c:	41 f0       	breq	.+16     	; 0x48e <CALLBACK_USB_GetDescriptor+0x18>
     47e:	91 30       	cpi	r25, 0x01	; 1
     480:	e9 f4       	brne	.+58     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x46>
     482:	17 c0       	rjmp	.+46     	; 0x4b2 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     484:	20 e2       	ldi	r18, 0x20	; 32
     486:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     488:	ea ea       	ldi	r30, 0xAA	; 170
     48a:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     48c:	1b c0       	rjmp	.+54     	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	41 f0       	breq	.+16     	; 0x4a2 <CALLBACK_USB_GetDescriptor+0x2c>
     492:	81 30       	cpi	r24, 0x01	; 1
     494:	18 f0       	brcs	.+6      	; 0x49c <CALLBACK_USB_GetDescriptor+0x26>
     496:	82 30       	cpi	r24, 0x02	; 2
     498:	89 f4       	brne	.+34     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x46>
     49a:	06 c0       	rjmp	.+12     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     49c:	ea ec       	ldi	r30, 0xCA	; 202
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     4a2:	ee ec       	ldi	r30, 0xCE	; 206
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4a8:	e8 ee       	ldi	r30, 0xE8	; 232
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	24 91       	lpm	r18, Z+
     4ae:	30 e0       	ldi	r19, 0x00	; 0
					break;
     4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     4b2:	22 e1       	ldi	r18, 0x12	; 18
     4b4:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     4b6:	e8 e9       	ldi	r30, 0x98	; 152
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     4c0:	e0 e0       	ldi	r30, 0x00	; 0
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     4c4:	da 01       	movw	r26, r20
     4c6:	11 96       	adiw	r26, 0x01	; 1
     4c8:	fc 93       	st	X, r31
     4ca:	ee 93       	st	-X, r30
	return Size;
}
     4cc:	c9 01       	movw	r24, r18
     4ce:	08 95       	ret

000004d0 <Dataflash_SelectChipFromPage>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     4d0:	2e b1       	in	r18, 0x0e	; 14
     4d2:	23 60       	ori	r18, 0x03	; 3
     4d4:	2e b9       	out	0x0e, r18	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     4d6:	20 e4       	ldi	r18, 0x40	; 64
     4d8:	80 30       	cpi	r24, 0x00	; 0
     4da:	92 07       	cpc	r25, r18
     4dc:	58 f4       	brcc	.+22     	; 0x4f4 <Dataflash_SelectChipFromPage+0x24>
				  return;

				#if (DATAFLASH_TOTALCHIPS == 2)
					if (PageAddress & 0x01)
     4de:	80 ff       	sbrs	r24, 0
     4e0:	05 c0       	rjmp	.+10     	; 0x4ec <Dataflash_SelectChipFromPage+0x1c>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     4e2:	8e b1       	in	r24, 0x0e	; 14
     4e4:	83 60       	ori	r24, 0x03	; 3
     4e6:	8d 7f       	andi	r24, 0xFD	; 253
     4e8:	8e b9       	out	0x0e, r24	; 14
     4ea:	08 95       	ret
     4ec:	8e b1       	in	r24, 0x0e	; 14
     4ee:	83 60       	ori	r24, 0x03	; 3
     4f0:	8e 7f       	andi	r24, 0xFE	; 254
     4f2:	8e b9       	out	0x0e, r24	; 14
     4f4:	08 95       	ret

000004f6 <Dataflash_ToggleSelectedChipCS>:
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     4f6:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     4f8:	9e b1       	in	r25, 0x0e	; 14
     4fa:	93 60       	ori	r25, 0x03	; 3
     4fc:	9e b9       	out	0x0e, r25	; 14
     4fe:	9e b1       	in	r25, 0x0e	; 14
     500:	8c 6f       	ori	r24, 0xFC	; 252
     502:	93 60       	ori	r25, 0x03	; 3
     504:	89 23       	and	r24, r25
     506:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     508:	08 95       	ret

0000050a <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     50a:	f5 df       	rcall	.-22     	; 0x4f6 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     50c:	87 ed       	ldi	r24, 0xD7	; 215
     50e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     510:	0d b4       	in	r0, 0x2d	; 45
     512:	07 fe       	sbrs	r0, 7
     514:	fd cf       	rjmp	.-6      	; 0x510 <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     516:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     518:	0d b4       	in	r0, 0x2d	; 45
     51a:	07 fe       	sbrs	r0, 7
     51c:	fd cf       	rjmp	.-6      	; 0x518 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     51e:	0e b4       	in	r0, 0x2e	; 46
     520:	07 fe       	sbrs	r0, 7
     522:	f9 cf       	rjmp	.-14     	; 0x516 <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     524:	e8 cf       	rjmp	.-48     	; 0x4f6 <Dataflash_ToggleSelectedChipCS>

00000526 <Dataflash_SendAddressBytes>:
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				#if (DATAFLASH_TOTALCHIPS == 2)
					PageAddress >>= 1;
     526:	9c 01       	movw	r18, r24
     528:	36 95       	lsr	r19
     52a:	27 95       	ror	r18
				#endif
				
				Dataflash_SendByte(PageAddress >> 5);
     52c:	36 e0       	ldi	r19, 0x06	; 6
     52e:	96 95       	lsr	r25
     530:	87 95       	ror	r24
     532:	3a 95       	dec	r19
     534:	e1 f7       	brne	.-8      	; 0x52e <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     536:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     538:	0d b4       	in	r0, 0x2d	; 45
     53a:	07 fe       	sbrs	r0, 7
     53c:	fd cf       	rjmp	.-6      	; 0x538 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     53e:	22 0f       	add	r18, r18
     540:	22 0f       	add	r18, r18
     542:	22 0f       	add	r18, r18
     544:	27 2b       	or	r18, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     546:	2e bd       	out	0x2e, r18	; 46
				while (!(SPSR & (1 << SPIF)));
     548:	0d b4       	in	r0, 0x2d	; 45
     54a:	07 fe       	sbrs	r0, 7
     54c:	fd cf       	rjmp	.-6      	; 0x548 <Dataflash_SendAddressBytes+0x22>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     54e:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     550:	0d b4       	in	r0, 0x2d	; 45
     552:	07 fe       	sbrs	r0, 7
     554:	fd cf       	rjmp	.-6      	; 0x550 <Dataflash_SendAddressBytes+0x2a>
				Dataflash_SendByte(BufferByte);
			}
     556:	08 95       	ret

00000558 <DataflashManager_WriteBlocks>:
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     558:	8f 92       	push	r8
     55a:	9f 92       	push	r9
     55c:	bf 92       	push	r11
     55e:	cf 92       	push	r12
     560:	df 92       	push	r13
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	0f 92       	push	r0
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	7a 01       	movw	r14, r20
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	a9 e0       	ldi	r26, 0x09	; 9
     57c:	22 0f       	add	r18, r18
     57e:	33 1f       	adc	r19, r19
     580:	44 1f       	adc	r20, r20
     582:	55 1f       	adc	r21, r21
     584:	aa 95       	dec	r26
     586:	d1 f7       	brne	.-12     	; 0x57c <DataflashManager_WriteBlocks+0x24>
     588:	fa e0       	ldi	r31, 0x0A	; 10
     58a:	56 95       	lsr	r21
     58c:	47 95       	ror	r20
     58e:	37 95       	ror	r19
     590:	27 95       	ror	r18
     592:	fa 95       	dec	r31
     594:	d1 f7       	brne	.-12     	; 0x58a <DataflashManager_WriteBlocks+0x32>
     596:	49 01       	movw	r8, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     598:	8b 01       	movw	r16, r22
     59a:	10 2f       	mov	r17, r16
     59c:	00 27       	eor	r16, r16
     59e:	11 0f       	add	r17, r17
     5a0:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     5a2:	c9 01       	movw	r24, r18
     5a4:	95 df       	rcall	.-214    	; 0x4d0 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5a6:	83 e5       	ldi	r24, 0x53	; 83
     5a8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5aa:	0d b4       	in	r0, 0x2d	; 45
     5ac:	07 fe       	sbrs	r0, 7
     5ae:	fd cf       	rjmp	.-6      	; 0x5aa <DataflashManager_WriteBlocks+0x52>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     5b0:	c4 01       	movw	r24, r8
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	b7 df       	rcall	.-146    	; 0x526 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     5b8:	a8 df       	rcall	.-176    	; 0x50a <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ba:	84 e8       	ldi	r24, 0x84	; 132
     5bc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5be:	0d b4       	in	r0, 0x2d	; 45
     5c0:	07 fe       	sbrs	r0, 7
     5c2:	fd cf       	rjmp	.-6      	; 0x5be <DataflashManager_WriteBlocks+0x66>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	b8 01       	movw	r22, r16
     5ca:	ad df       	rcall	.-166    	; 0x526 <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     5cc:	08 d6       	rcall	.+3088   	; 0x11de <Endpoint_WaitUntilReady>
     5ce:	88 23       	and	r24, r24
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <DataflashManager_WriteBlocks+0x7c>
     5d2:	ea c0       	rjmp	.+468    	; 0x7a8 <DataflashManager_WriteBlocks+0x250>
void DataflashManager_WriteBlocks(const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     5d4:	74 e0       	ldi	r23, 0x04	; 4
     5d6:	16 95       	lsr	r17
     5d8:	07 95       	ror	r16
     5da:	7a 95       	dec	r23
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <DataflashManager_WriteBlocks+0x7e>
     5de:	90 2f       	mov	r25, r16
     5e0:	87 01       	movw	r16, r14
     5e2:	65 e0       	ldi	r22, 0x05	; 5
     5e4:	00 0f       	add	r16, r16
     5e6:	11 1f       	adc	r17, r17
     5e8:	6a 95       	dec	r22
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <DataflashManager_WriteBlocks+0x8c>
     5ec:	dd 24       	eor	r13, r13
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     5ee:	bb 24       	eor	r11, r11
     5f0:	b3 94       	inc	r11
     5f2:	bb c0       	rjmp	.+374    	; 0x76a <DataflashManager_WriteBlocks+0x212>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     5f4:	50 e2       	ldi	r21, 0x20	; 32
     5f6:	c5 2e       	mov	r12, r21
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     5f8:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     5fc:	85 fd       	sbrc	r24, 5
     5fe:	0b c0       	rjmp	.+22     	; 0x616 <DataflashManager_WriteBlocks+0xbe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     600:	80 91 e8 00 	lds	r24, 0x00E8
     604:	8b 77       	andi	r24, 0x7B	; 123
     606:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     60a:	99 83       	std	Y+1, r25	; 0x01
     60c:	e8 d5       	rcall	.+3024   	; 0x11de <Endpoint_WaitUntilReady>
     60e:	99 81       	ldd	r25, Y+1	; 0x01
     610:	88 23       	and	r24, r24
     612:	09 f0       	breq	.+2      	; 0x616 <DataflashManager_WriteBlocks+0xbe>
     614:	c9 c0       	rjmp	.+402    	; 0x7a8 <DataflashManager_WriteBlocks+0x250>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     616:	90 34       	cpi	r25, 0x40	; 64
     618:	09 f0       	breq	.+2      	; 0x61c <DataflashManager_WriteBlocks+0xc4>
     61a:	3a c0       	rjmp	.+116    	; 0x690 <DataflashManager_WriteBlocks+0x138>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     61c:	76 df       	rcall	.-276    	; 0x50a <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     61e:	dd 20       	and	r13, r13
     620:	11 f0       	breq	.+4      	; 0x626 <DataflashManager_WriteBlocks+0xce>
     622:	86 e8       	ldi	r24, 0x86	; 134
     624:	01 c0       	rjmp	.+2      	; 0x628 <DataflashManager_WriteBlocks+0xd0>
     626:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     628:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     62a:	0d b4       	in	r0, 0x2d	; 45
     62c:	07 fe       	sbrs	r0, 7
     62e:	fd cf       	rjmp	.-6      	; 0x62a <DataflashManager_WriteBlocks+0xd2>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     630:	c4 01       	movw	r24, r8
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	77 df       	rcall	.-274    	; 0x526 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     638:	08 94       	sec
     63a:	81 1c       	adc	r8, r1
     63c:	91 1c       	adc	r9, r1
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     63e:	8e b1       	in	r24, 0x0e	; 14
     640:	80 95       	com	r24
     642:	83 70       	andi	r24, 0x03	; 3

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     644:	82 30       	cpi	r24, 0x02	; 2
     646:	09 f4       	brne	.+2      	; 0x64a <DataflashManager_WriteBlocks+0xf2>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     648:	db 24       	eor	r13, r11

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     64a:	c4 01       	movw	r24, r8
     64c:	41 df       	rcall	.-382    	; 0x4d0 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     64e:	00 34       	cpi	r16, 0x40	; 64
     650:	11 05       	cpc	r17, r1
     652:	78 f4       	brcc	.+30     	; 0x672 <DataflashManager_WriteBlocks+0x11a>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     654:	5a df       	rcall	.-332    	; 0x50a <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     656:	dd 20       	and	r13, r13
     658:	11 f0       	breq	.+4      	; 0x65e <DataflashManager_WriteBlocks+0x106>
     65a:	85 e5       	ldi	r24, 0x55	; 85
     65c:	01 c0       	rjmp	.+2      	; 0x660 <DataflashManager_WriteBlocks+0x108>
     65e:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     660:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     662:	0d b4       	in	r0, 0x2d	; 45
     664:	07 fe       	sbrs	r0, 7
     666:	fd cf       	rjmp	.-6      	; 0x662 <DataflashManager_WriteBlocks+0x10a>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     668:	c4 01       	movw	r24, r8
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	5b df       	rcall	.-330    	; 0x526 <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     670:	4c df       	rcall	.-360    	; 0x50a <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     672:	dd 20       	and	r13, r13
     674:	11 f0       	breq	.+4      	; 0x67a <DataflashManager_WriteBlocks+0x122>
     676:	87 e8       	ldi	r24, 0x87	; 135
     678:	01 c0       	rjmp	.+2      	; 0x67c <DataflashManager_WriteBlocks+0x124>
     67a:	84 e8       	ldi	r24, 0x84	; 132
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     67c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     67e:	0d b4       	in	r0, 0x2d	; 45
     680:	07 fe       	sbrs	r0, 7
     682:	fd cf       	rjmp	.-6      	; 0x67e <DataflashManager_WriteBlocks+0x126>
				Dataflash_SendAddressBytes(0, 0);
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	4c df       	rcall	.-360    	; 0x526 <Dataflash_SendAddressBytes>
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     68e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     690:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     694:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     696:	0d b4       	in	r0, 0x2d	; 45
     698:	07 fe       	sbrs	r0, 7
     69a:	fd cf       	rjmp	.-6      	; 0x696 <DataflashManager_WriteBlocks+0x13e>
     69c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6a0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6a2:	0d b4       	in	r0, 0x2d	; 45
     6a4:	07 fe       	sbrs	r0, 7
     6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <DataflashManager_WriteBlocks+0x14a>
     6a8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6ac:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6ae:	0d b4       	in	r0, 0x2d	; 45
     6b0:	07 fe       	sbrs	r0, 7
     6b2:	fd cf       	rjmp	.-6      	; 0x6ae <DataflashManager_WriteBlocks+0x156>
     6b4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6b8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6ba:	0d b4       	in	r0, 0x2d	; 45
     6bc:	07 fe       	sbrs	r0, 7
     6be:	fd cf       	rjmp	.-6      	; 0x6ba <DataflashManager_WriteBlocks+0x162>
     6c0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6c4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6c6:	0d b4       	in	r0, 0x2d	; 45
     6c8:	07 fe       	sbrs	r0, 7
     6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <DataflashManager_WriteBlocks+0x16e>
     6cc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6d0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6d2:	0d b4       	in	r0, 0x2d	; 45
     6d4:	07 fe       	sbrs	r0, 7
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <DataflashManager_WriteBlocks+0x17a>
     6d8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6dc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6de:	0d b4       	in	r0, 0x2d	; 45
     6e0:	07 fe       	sbrs	r0, 7
     6e2:	fd cf       	rjmp	.-6      	; 0x6de <DataflashManager_WriteBlocks+0x186>
     6e4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6e8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6ea:	0d b4       	in	r0, 0x2d	; 45
     6ec:	07 fe       	sbrs	r0, 7
     6ee:	fd cf       	rjmp	.-6      	; 0x6ea <DataflashManager_WriteBlocks+0x192>
     6f0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6f6:	0d b4       	in	r0, 0x2d	; 45
     6f8:	07 fe       	sbrs	r0, 7
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <DataflashManager_WriteBlocks+0x19e>
     6fc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     700:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     702:	0d b4       	in	r0, 0x2d	; 45
     704:	07 fe       	sbrs	r0, 7
     706:	fd cf       	rjmp	.-6      	; 0x702 <DataflashManager_WriteBlocks+0x1aa>
     708:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     70c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     70e:	0d b4       	in	r0, 0x2d	; 45
     710:	07 fe       	sbrs	r0, 7
     712:	fd cf       	rjmp	.-6      	; 0x70e <DataflashManager_WriteBlocks+0x1b6>
     714:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     718:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     71a:	0d b4       	in	r0, 0x2d	; 45
     71c:	07 fe       	sbrs	r0, 7
     71e:	fd cf       	rjmp	.-6      	; 0x71a <DataflashManager_WriteBlocks+0x1c2>
     720:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     724:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     726:	0d b4       	in	r0, 0x2d	; 45
     728:	07 fe       	sbrs	r0, 7
     72a:	fd cf       	rjmp	.-6      	; 0x726 <DataflashManager_WriteBlocks+0x1ce>
     72c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     730:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     732:	0d b4       	in	r0, 0x2d	; 45
     734:	07 fe       	sbrs	r0, 7
     736:	fd cf       	rjmp	.-6      	; 0x732 <DataflashManager_WriteBlocks+0x1da>
     738:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     73c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     73e:	0d b4       	in	r0, 0x2d	; 45
     740:	07 fe       	sbrs	r0, 7
     742:	fd cf       	rjmp	.-6      	; 0x73e <DataflashManager_WriteBlocks+0x1e6>
     744:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     748:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     74a:	0d b4       	in	r0, 0x2d	; 45
     74c:	07 fe       	sbrs	r0, 7
     74e:	fd cf       	rjmp	.-6      	; 0x74a <DataflashManager_WriteBlocks+0x1f2>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (IsMassStoreReset)
     750:	80 91 44 01 	lds	r24, 0x0144
     754:	88 23       	and	r24, r24
     756:	41 f5       	brne	.+80     	; 0x7a8 <DataflashManager_WriteBlocks+0x250>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     758:	9f 5f       	subi	r25, 0xFF	; 255
     75a:	ca 94       	dec	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     75c:	09 f0       	breq	.+2      	; 0x760 <DataflashManager_WriteBlocks+0x208>
     75e:	4c cf       	rjmp	.-360    	; 0x5f8 <DataflashManager_WriteBlocks+0xa0>
			if (IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     760:	08 94       	sec
     762:	e1 08       	sbc	r14, r1
     764:	f1 08       	sbc	r15, r1
     766:	00 52       	subi	r16, 0x20	; 32
     768:	10 40       	sbci	r17, 0x00	; 0

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     76a:	e1 14       	cp	r14, r1
     76c:	f1 04       	cpc	r15, r1
     76e:	09 f0       	breq	.+2      	; 0x772 <DataflashManager_WriteBlocks+0x21a>
     770:	41 cf       	rjmp	.-382    	; 0x5f4 <DataflashManager_WriteBlocks+0x9c>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     772:	cb de       	rcall	.-618    	; 0x50a <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     774:	dd 20       	and	r13, r13
     776:	11 f0       	breq	.+4      	; 0x77c <DataflashManager_WriteBlocks+0x224>
     778:	86 e8       	ldi	r24, 0x86	; 134
     77a:	01 c0       	rjmp	.+2      	; 0x77e <DataflashManager_WriteBlocks+0x226>
     77c:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     77e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     780:	0d b4       	in	r0, 0x2d	; 45
     782:	07 fe       	sbrs	r0, 7
     784:	fd cf       	rjmp	.-6      	; 0x780 <DataflashManager_WriteBlocks+0x228>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     786:	c4 01       	movw	r24, r8
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	cc de       	rcall	.-616    	; 0x526 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     78e:	bd de       	rcall	.-646    	; 0x50a <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     790:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     794:	85 fd       	sbrc	r24, 5
     796:	05 c0       	rjmp	.+10     	; 0x7a2 <DataflashManager_WriteBlocks+0x24a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     798:	80 91 e8 00 	lds	r24, 0x00E8
     79c:	8b 77       	andi	r24, 0x7B	; 123
     79e:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     7a2:	8e b1       	in	r24, 0x0e	; 14
     7a4:	83 60       	ori	r24, 0x03	; 3
     7a6:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     7a8:	0f 90       	pop	r0
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
     7ba:	bf 90       	pop	r11
     7bc:	9f 90       	pop	r9
     7be:	8f 90       	pop	r8
     7c0:	08 95       	ret

000007c2 <DataflashManager_ReadBlocks>:
 *  \param[in] BlockAddress  Data block starting address for the read sequence
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	7a 01       	movw	r14, r20
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     7d2:	9b 01       	movw	r18, r22
     7d4:	ac 01       	movw	r20, r24
     7d6:	f9 e0       	ldi	r31, 0x09	; 9
     7d8:	22 0f       	add	r18, r18
     7da:	33 1f       	adc	r19, r19
     7dc:	44 1f       	adc	r20, r20
     7de:	55 1f       	adc	r21, r21
     7e0:	fa 95       	dec	r31
     7e2:	d1 f7       	brne	.-12     	; 0x7d8 <DataflashManager_ReadBlocks+0x16>
     7e4:	ea e0       	ldi	r30, 0x0A	; 10
     7e6:	56 95       	lsr	r21
     7e8:	47 95       	ror	r20
     7ea:	37 95       	ror	r19
     7ec:	27 95       	ror	r18
     7ee:	ea 95       	dec	r30
     7f0:	d1 f7       	brne	.-12     	; 0x7e6 <DataflashManager_ReadBlocks+0x24>
     7f2:	e9 01       	movw	r28, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     7f4:	8b 01       	movw	r16, r22
     7f6:	10 2f       	mov	r17, r16
     7f8:	00 27       	eor	r16, r16
     7fa:	11 0f       	add	r17, r17
     7fc:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     7fe:	c9 01       	movw	r24, r18
     800:	67 de       	rcall	.-818    	; 0x4d0 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     802:	82 ed       	ldi	r24, 0xD2	; 210
     804:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     806:	0d b4       	in	r0, 0x2d	; 45
     808:	07 fe       	sbrs	r0, 7
     80a:	fd cf       	rjmp	.-6      	; 0x806 <DataflashManager_ReadBlocks+0x44>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     80c:	ce 01       	movw	r24, r28
     80e:	b8 01       	movw	r22, r16
     810:	8a de       	rcall	.-748    	; 0x526 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     812:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     814:	0d b4       	in	r0, 0x2d	; 45
     816:	07 fe       	sbrs	r0, 7
     818:	fd cf       	rjmp	.-6      	; 0x814 <DataflashManager_ReadBlocks+0x52>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     81a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     81c:	0d b4       	in	r0, 0x2d	; 45
     81e:	07 fe       	sbrs	r0, 7
     820:	fd cf       	rjmp	.-6      	; 0x81c <DataflashManager_ReadBlocks+0x5a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     822:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     824:	0d b4       	in	r0, 0x2d	; 45
     826:	07 fe       	sbrs	r0, 7
     828:	fd cf       	rjmp	.-6      	; 0x824 <DataflashManager_ReadBlocks+0x62>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     82a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     82c:	0d b4       	in	r0, 0x2d	; 45
     82e:	07 fe       	sbrs	r0, 7
     830:	fd cf       	rjmp	.-6      	; 0x82c <DataflashManager_ReadBlocks+0x6a>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     832:	d5 d4       	rcall	.+2474   	; 0x11de <Endpoint_WaitUntilReady>
     834:	88 23       	and	r24, r24
     836:	09 f0       	breq	.+2      	; 0x83a <DataflashManager_ReadBlocks+0x78>
     838:	bf c0       	rjmp	.+382    	; 0x9b8 <DataflashManager_ReadBlocks+0x1f6>
void DataflashManager_ReadBlocks(const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	16 95       	lsr	r17
     83e:	07 95       	ror	r16
     840:	8a 95       	dec	r24
     842:	e1 f7       	brne	.-8      	; 0x83c <DataflashManager_ReadBlocks+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     844:	b2 ed       	ldi	r27, 0xD2	; 210
     846:	db 2e       	mov	r13, r27
     848:	a7 c0       	rjmp	.+334    	; 0x998 <DataflashManager_ReadBlocks+0x1d6>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     84a:	10 e2       	ldi	r17, 0x20	; 32
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     84c:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     850:	85 fd       	sbrc	r24, 5
     852:	09 c0       	rjmp	.+18     	; 0x866 <DataflashManager_ReadBlocks+0xa4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     854:	80 91 e8 00 	lds	r24, 0x00E8
     858:	8e 77       	andi	r24, 0x7E	; 126
     85a:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     85e:	bf d4       	rcall	.+2430   	; 0x11de <Endpoint_WaitUntilReady>
     860:	88 23       	and	r24, r24
     862:	09 f0       	breq	.+2      	; 0x866 <DataflashManager_ReadBlocks+0xa4>
     864:	a9 c0       	rjmp	.+338    	; 0x9b8 <DataflashManager_ReadBlocks+0x1f6>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     866:	00 34       	cpi	r16, 0x40	; 64
     868:	e1 f4       	brne	.+56     	; 0x8a2 <DataflashManager_ReadBlocks+0xe0>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     86a:	21 96       	adiw	r28, 0x01	; 1

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     86c:	ce 01       	movw	r24, r28
     86e:	30 de       	rcall	.-928    	; 0x4d0 <Dataflash_SelectChipFromPage>
     870:	de bc       	out	0x2e, r13	; 46
				while (!(SPSR & (1 << SPIF)));
     872:	0d b4       	in	r0, 0x2d	; 45
     874:	07 fe       	sbrs	r0, 7
     876:	fd cf       	rjmp	.-6      	; 0x872 <DataflashManager_ReadBlocks+0xb0>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     878:	ce 01       	movw	r24, r28
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	53 de       	rcall	.-858    	; 0x526 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     880:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     882:	0d b4       	in	r0, 0x2d	; 45
     884:	07 fe       	sbrs	r0, 7
     886:	fd cf       	rjmp	.-6      	; 0x882 <DataflashManager_ReadBlocks+0xc0>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     888:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     88a:	0d b4       	in	r0, 0x2d	; 45
     88c:	07 fe       	sbrs	r0, 7
     88e:	fd cf       	rjmp	.-6      	; 0x88a <DataflashManager_ReadBlocks+0xc8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     890:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     892:	0d b4       	in	r0, 0x2d	; 45
     894:	07 fe       	sbrs	r0, 7
     896:	fd cf       	rjmp	.-6      	; 0x892 <DataflashManager_ReadBlocks+0xd0>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     898:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     89a:	0d b4       	in	r0, 0x2d	; 45
     89c:	07 fe       	sbrs	r0, 7
     89e:	fd cf       	rjmp	.-6      	; 0x89a <DataflashManager_ReadBlocks+0xd8>

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     8a0:	00 e0       	ldi	r16, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8a2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8a4:	0d b4       	in	r0, 0x2d	; 45
     8a6:	07 fe       	sbrs	r0, 7
     8a8:	fd cf       	rjmp	.-6      	; 0x8a4 <DataflashManager_ReadBlocks+0xe2>
				return SPDR;
     8aa:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8ac:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8b0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8b2:	0d b4       	in	r0, 0x2d	; 45
     8b4:	07 fe       	sbrs	r0, 7
     8b6:	fd cf       	rjmp	.-6      	; 0x8b2 <DataflashManager_ReadBlocks+0xf0>
				return SPDR;
     8b8:	8e b5       	in	r24, 0x2e	; 46
     8ba:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8be:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8c0:	0d b4       	in	r0, 0x2d	; 45
     8c2:	07 fe       	sbrs	r0, 7
     8c4:	fd cf       	rjmp	.-6      	; 0x8c0 <DataflashManager_ReadBlocks+0xfe>
				return SPDR;
     8c6:	8e b5       	in	r24, 0x2e	; 46
     8c8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8cc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8ce:	0d b4       	in	r0, 0x2d	; 45
     8d0:	07 fe       	sbrs	r0, 7
     8d2:	fd cf       	rjmp	.-6      	; 0x8ce <DataflashManager_ReadBlocks+0x10c>
				return SPDR;
     8d4:	8e b5       	in	r24, 0x2e	; 46
     8d6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8da:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8dc:	0d b4       	in	r0, 0x2d	; 45
     8de:	07 fe       	sbrs	r0, 7
     8e0:	fd cf       	rjmp	.-6      	; 0x8dc <DataflashManager_ReadBlocks+0x11a>
				return SPDR;
     8e2:	8e b5       	in	r24, 0x2e	; 46
     8e4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8e8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8ea:	0d b4       	in	r0, 0x2d	; 45
     8ec:	07 fe       	sbrs	r0, 7
     8ee:	fd cf       	rjmp	.-6      	; 0x8ea <DataflashManager_ReadBlocks+0x128>
				return SPDR;
     8f0:	8e b5       	in	r24, 0x2e	; 46
     8f2:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8f6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8f8:	0d b4       	in	r0, 0x2d	; 45
     8fa:	07 fe       	sbrs	r0, 7
     8fc:	fd cf       	rjmp	.-6      	; 0x8f8 <DataflashManager_ReadBlocks+0x136>
				return SPDR;
     8fe:	8e b5       	in	r24, 0x2e	; 46
     900:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     904:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     906:	0d b4       	in	r0, 0x2d	; 45
     908:	07 fe       	sbrs	r0, 7
     90a:	fd cf       	rjmp	.-6      	; 0x906 <DataflashManager_ReadBlocks+0x144>
				return SPDR;
     90c:	8e b5       	in	r24, 0x2e	; 46
     90e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     912:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     914:	0d b4       	in	r0, 0x2d	; 45
     916:	07 fe       	sbrs	r0, 7
     918:	fd cf       	rjmp	.-6      	; 0x914 <DataflashManager_ReadBlocks+0x152>
				return SPDR;
     91a:	8e b5       	in	r24, 0x2e	; 46
     91c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     920:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     922:	0d b4       	in	r0, 0x2d	; 45
     924:	07 fe       	sbrs	r0, 7
     926:	fd cf       	rjmp	.-6      	; 0x922 <DataflashManager_ReadBlocks+0x160>
				return SPDR;
     928:	8e b5       	in	r24, 0x2e	; 46
     92a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     92e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     930:	0d b4       	in	r0, 0x2d	; 45
     932:	07 fe       	sbrs	r0, 7
     934:	fd cf       	rjmp	.-6      	; 0x930 <DataflashManager_ReadBlocks+0x16e>
				return SPDR;
     936:	8e b5       	in	r24, 0x2e	; 46
     938:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     93c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     93e:	0d b4       	in	r0, 0x2d	; 45
     940:	07 fe       	sbrs	r0, 7
     942:	fd cf       	rjmp	.-6      	; 0x93e <DataflashManager_ReadBlocks+0x17c>
				return SPDR;
     944:	8e b5       	in	r24, 0x2e	; 46
     946:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     94a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     94c:	0d b4       	in	r0, 0x2d	; 45
     94e:	07 fe       	sbrs	r0, 7
     950:	fd cf       	rjmp	.-6      	; 0x94c <DataflashManager_ReadBlocks+0x18a>
				return SPDR;
     952:	8e b5       	in	r24, 0x2e	; 46
     954:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     958:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     95a:	0d b4       	in	r0, 0x2d	; 45
     95c:	07 fe       	sbrs	r0, 7
     95e:	fd cf       	rjmp	.-6      	; 0x95a <DataflashManager_ReadBlocks+0x198>
				return SPDR;
     960:	8e b5       	in	r24, 0x2e	; 46
     962:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     966:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     968:	0d b4       	in	r0, 0x2d	; 45
     96a:	07 fe       	sbrs	r0, 7
     96c:	fd cf       	rjmp	.-6      	; 0x968 <DataflashManager_ReadBlocks+0x1a6>
				return SPDR;
     96e:	8e b5       	in	r24, 0x2e	; 46
     970:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     974:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     976:	0d b4       	in	r0, 0x2d	; 45
     978:	07 fe       	sbrs	r0, 7
     97a:	fd cf       	rjmp	.-6      	; 0x976 <DataflashManager_ReadBlocks+0x1b4>
				return SPDR;
     97c:	8e b5       	in	r24, 0x2e	; 46
     97e:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (IsMassStoreReset)
     982:	80 91 44 01 	lds	r24, 0x0144
     986:	88 23       	and	r24, r24
     988:	b9 f4       	brne	.+46     	; 0x9b8 <DataflashManager_ReadBlocks+0x1f6>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     98a:	0f 5f       	subi	r16, 0xFF	; 255
     98c:	11 50       	subi	r17, 0x01	; 1
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     98e:	09 f0       	breq	.+2      	; 0x992 <DataflashManager_ReadBlocks+0x1d0>
     990:	5d cf       	rjmp	.-326    	; 0x84c <DataflashManager_ReadBlocks+0x8a>
			if (IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     992:	08 94       	sec
     994:	e1 08       	sbc	r14, r1
     996:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     998:	e1 14       	cp	r14, r1
     99a:	f1 04       	cpc	r15, r1
     99c:	09 f0       	breq	.+2      	; 0x9a0 <DataflashManager_ReadBlocks+0x1de>
     99e:	55 cf       	rjmp	.-342    	; 0x84a <DataflashManager_ReadBlocks+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     9a0:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     9a4:	85 fd       	sbrc	r24, 5
     9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <DataflashManager_ReadBlocks+0x1f0>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9a8:	80 91 e8 00 	lds	r24, 0x00E8
     9ac:	8e 77       	andi	r24, 0x7E	; 126
     9ae:	80 93 e8 00 	sts	0x00E8, r24
     9b2:	8e b1       	in	r24, 0x0e	; 14
     9b4:	83 60       	ori	r24, 0x03	; 3
     9b6:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	08 95       	ret

000009c8 <DataflashManager_ResetDataflashProtections>:
     9c8:	8e b1       	in	r24, 0x0e	; 14
     9ca:	83 60       	ori	r24, 0x03	; 3
     9cc:	8e 7f       	andi	r24, 0xFE	; 254
     9ce:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9d0:	87 ed       	ldi	r24, 0xD7	; 215
     9d2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9d4:	0d b4       	in	r0, 0x2d	; 45
     9d6:	07 fe       	sbrs	r0, 7
     9d8:	fd cf       	rjmp	.-6      	; 0x9d4 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9da:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9dc:	0d b4       	in	r0, 0x2d	; 45
     9de:	07 fe       	sbrs	r0, 7
     9e0:	fd cf       	rjmp	.-6      	; 0x9dc <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     9e2:	0e b4       	in	r0, 0x2e	; 46
     9e4:	01 fe       	sbrs	r0, 1
     9e6:	15 c0       	rjmp	.+42     	; 0xa12 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     9e8:	86 dd       	rcall	.-1268   	; 0x4f6 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9ea:	8d e3       	ldi	r24, 0x3D	; 61
     9ec:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9ee:	0d b4       	in	r0, 0x2d	; 45
     9f0:	07 fe       	sbrs	r0, 7
     9f2:	fd cf       	rjmp	.-6      	; 0x9ee <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9f4:	8a e2       	ldi	r24, 0x2A	; 42
     9f6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9f8:	0d b4       	in	r0, 0x2d	; 45
     9fa:	07 fe       	sbrs	r0, 7
     9fc:	fd cf       	rjmp	.-6      	; 0x9f8 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9fe:	8f e7       	ldi	r24, 0x7F	; 127
     a00:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a02:	0d b4       	in	r0, 0x2d	; 45
     a04:	07 fe       	sbrs	r0, 7
     a06:	fd cf       	rjmp	.-6      	; 0xa02 <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a08:	8a e9       	ldi	r24, 0x9A	; 154
     a0a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a0c:	0d b4       	in	r0, 0x2d	; 45
     a0e:	07 fe       	sbrs	r0, 7
     a10:	fd cf       	rjmp	.-6      	; 0xa0c <DataflashManager_ResetDataflashProtections+0x44>
     a12:	8e b1       	in	r24, 0x0e	; 14
     a14:	83 60       	ori	r24, 0x03	; 3
     a16:	8d 7f       	andi	r24, 0xFD	; 253
     a18:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a1a:	87 ed       	ldi	r24, 0xD7	; 215
     a1c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a1e:	0d b4       	in	r0, 0x2d	; 45
     a20:	07 fe       	sbrs	r0, 7
     a22:	fd cf       	rjmp	.-6      	; 0xa1e <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a24:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a26:	0d b4       	in	r0, 0x2d	; 45
     a28:	07 fe       	sbrs	r0, 7
     a2a:	fd cf       	rjmp	.-6      	; 0xa26 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     a2c:	0e b4       	in	r0, 0x2e	; 46
     a2e:	01 fe       	sbrs	r0, 1
     a30:	15 c0       	rjmp	.+42     	; 0xa5c <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     a32:	61 dd       	rcall	.-1342   	; 0x4f6 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a34:	8d e3       	ldi	r24, 0x3D	; 61
     a36:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a38:	0d b4       	in	r0, 0x2d	; 45
     a3a:	07 fe       	sbrs	r0, 7
     a3c:	fd cf       	rjmp	.-6      	; 0xa38 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a3e:	8a e2       	ldi	r24, 0x2A	; 42
     a40:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a42:	0d b4       	in	r0, 0x2d	; 45
     a44:	07 fe       	sbrs	r0, 7
     a46:	fd cf       	rjmp	.-6      	; 0xa42 <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a48:	8f e7       	ldi	r24, 0x7F	; 127
     a4a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a4c:	0d b4       	in	r0, 0x2d	; 45
     a4e:	07 fe       	sbrs	r0, 7
     a50:	fd cf       	rjmp	.-6      	; 0xa4c <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a52:	8a e9       	ldi	r24, 0x9A	; 154
     a54:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a56:	0d b4       	in	r0, 0x2d	; 45
     a58:	07 fe       	sbrs	r0, 7
     a5a:	fd cf       	rjmp	.-6      	; 0xa56 <DataflashManager_ResetDataflashProtections+0x8e>
     a5c:	8e b1       	in	r24, 0x0e	; 14
     a5e:	83 60       	ori	r24, 0x03	; 3
     a60:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     a62:	08 95       	ret

00000a64 <DataflashManager_CheckDataflashOperation>:
     a64:	8e b1       	in	r24, 0x0e	; 14
     a66:	83 60       	ori	r24, 0x03	; 3
     a68:	8e 7f       	andi	r24, 0xFE	; 254
     a6a:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a6c:	8f e9       	ldi	r24, 0x9F	; 159
     a6e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a70:	0d b4       	in	r0, 0x2d	; 45
     a72:	07 fe       	sbrs	r0, 7
     a74:	fd cf       	rjmp	.-6      	; 0xa70 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a76:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a78:	0d b4       	in	r0, 0x2d	; 45
     a7a:	07 fe       	sbrs	r0, 7
     a7c:	fd cf       	rjmp	.-6      	; 0xa78 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     a7e:	9e b5       	in	r25, 0x2e	; 46
     a80:	8e b1       	in	r24, 0x0e	; 14
     a82:	83 60       	ori	r24, 0x03	; 3
     a84:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     a86:	9f 31       	cpi	r25, 0x1F	; 31
     a88:	b1 f4       	brne	.+44     	; 0xab6 <DataflashManager_CheckDataflashOperation+0x52>
     a8a:	8e b1       	in	r24, 0x0e	; 14
     a8c:	83 60       	ori	r24, 0x03	; 3
     a8e:	8d 7f       	andi	r24, 0xFD	; 253
     a90:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a92:	8f e9       	ldi	r24, 0x9F	; 159
     a94:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a96:	0d b4       	in	r0, 0x2d	; 45
     a98:	07 fe       	sbrs	r0, 7
     a9a:	fd cf       	rjmp	.-6      	; 0xa96 <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a9c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a9e:	0d b4       	in	r0, 0x2d	; 45
     aa0:	07 fe       	sbrs	r0, 7
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     aa4:	9e b5       	in	r25, 0x2e	; 46
     aa6:	8e b1       	in	r24, 0x0e	; 14
     aa8:	83 60       	ori	r24, 0x03	; 3
     aaa:	8e b9       	out	0x0e, r24	; 14

/** Performs a simple test on the attached Dataflash IC(s) to ensure that they are working.
 *
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool DataflashManager_CheckDataflashOperation(void)
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	9f 31       	cpi	r25, 0x1F	; 31
     ab0:	19 f0       	breq	.+6      	; 0xab8 <DataflashManager_CheckDataflashOperation+0x54>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	08 95       	ret
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     ab6:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     ab8:	08 95       	ret

00000aba <SwapEndian_16>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint16_t SwapEndian_16(const uint16_t Word) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint16_t SwapEndian_16(const uint16_t Word)
			{
     aba:	28 2f       	mov	r18, r24
				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
			}
     abc:	89 2f       	mov	r24, r25
     abe:	92 2f       	mov	r25, r18
     ac0:	08 95       	ret

00000ac2 <SCSI_Command_ReadWrite_10>:
 *  \param[in] IsDataRead  Indicates if the command is a READ (10) command or WRITE (10) command (DATA_READ or DATA_WRITE)
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(const bool IsDataRead)
{
     ac2:	df 92       	push	r13
     ac4:	ef 92       	push	r14
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	d8 2e       	mov	r13, r24

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     ad2:	e0 90 59 01 	lds	r14, 0x0159
     ad6:	f0 90 58 01 	lds	r15, 0x0158
     ada:	00 91 57 01 	lds	r16, 0x0157
     ade:	10 91 56 01 	lds	r17, 0x0156

		return false;
	}

	BlockAddress = SwapEndian_32(*(uint32_t*)&CommandBlock.SCSICommandData[2]);
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[7]);
     ae2:	80 91 5b 01 	lds	r24, 0x015B
     ae6:	90 91 5c 01 	lds	r25, 0x015C
     aea:	e7 df       	rcall	.-50     	; 0xaba <SwapEndian_16>
     aec:	ec 01       	movw	r28, r24

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	e8 16       	cp	r14, r24
     af2:	80 e8       	ldi	r24, 0x80	; 128
     af4:	f8 06       	cpc	r15, r24
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	08 07       	cpc	r16, r24
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	18 07       	cpc	r17, r24
     afe:	68 f0       	brcs	.+26     	; 0xb1a <SCSI_Command_ReadWrite_10+0x58>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b00:	80 91 0f 01 	lds	r24, 0x010F
     b04:	80 7f       	andi	r24, 0xF0	; 240
     b06:	85 60       	ori	r24, 0x05	; 5
     b08:	80 93 0f 01 	sts	0x010F, r24
     b0c:	81 e2       	ldi	r24, 0x21	; 33
     b0e:	80 93 19 01 	sts	0x0119, r24
     b12:	10 92 1a 01 	sts	0x011A, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	2a c0       	rjmp	.+84     	; 0xb6e <SCSI_Command_ReadWrite_10+0xac>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     b1a:	dd 20       	and	r13, r13
     b1c:	29 f0       	breq	.+10     	; 0xb28 <SCSI_Command_ReadWrite_10+0x66>
	  DataflashManager_ReadBlocks(BlockAddress, TotalBlocks);
     b1e:	c8 01       	movw	r24, r16
     b20:	b7 01       	movw	r22, r14
     b22:	ae 01       	movw	r20, r28
     b24:	4e de       	rcall	.-868    	; 0x7c2 <DataflashManager_ReadBlocks>
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <SCSI_Command_ReadWrite_10+0x6e>
	else
	  DataflashManager_WriteBlocks(BlockAddress, TotalBlocks);
     b28:	c8 01       	movw	r24, r16
     b2a:	b7 01       	movw	r22, r14
     b2c:	ae 01       	movw	r20, r28
     b2e:	14 dd       	rcall	.-1496   	; 0x558 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     b30:	9e 01       	movw	r18, r28
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	89 e0       	ldi	r24, 0x09	; 9
     b38:	22 0f       	add	r18, r18
     b3a:	33 1f       	adc	r19, r19
     b3c:	44 1f       	adc	r20, r20
     b3e:	55 1f       	adc	r21, r21
     b40:	8a 95       	dec	r24
     b42:	d1 f7       	brne	.-12     	; 0xb38 <SCSI_Command_ReadWrite_10+0x76>
     b44:	80 91 4d 01 	lds	r24, 0x014D
     b48:	90 91 4e 01 	lds	r25, 0x014E
     b4c:	a0 91 4f 01 	lds	r26, 0x014F
     b50:	b0 91 50 01 	lds	r27, 0x0150
     b54:	82 1b       	sub	r24, r18
     b56:	93 0b       	sbc	r25, r19
     b58:	a4 0b       	sbc	r26, r20
     b5a:	b5 0b       	sbc	r27, r21
     b5c:	80 93 4d 01 	sts	0x014D, r24
     b60:	90 93 4e 01 	sts	0x014E, r25
     b64:	a0 93 4f 01 	sts	0x014F, r26
     b68:	b0 93 50 01 	sts	0x0150, r27

	return true;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	ff 90       	pop	r15
     b78:	ef 90       	pop	r14
     b7a:	df 90       	pop	r13
     b7c:	08 95       	ret

00000b7e <SCSI_DecodeSCSICommand>:
 *  a command failure due to a ILLEGAL REQUEST.
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(void)
{
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (CommandBlock.SCSICommandData[0])
     b86:	80 91 54 01 	lds	r24, 0x0154
     b8a:	8d 31       	cpi	r24, 0x1D	; 29
     b8c:	09 f4       	brne	.+2      	; 0xb90 <SCSI_DecodeSCSICommand+0x12>
     b8e:	ad c0       	rjmp	.+346    	; 0xcea <SCSI_DecodeSCSICommand+0x16c>
     b90:	8e 31       	cpi	r24, 0x1E	; 30
     b92:	78 f4       	brcc	.+30     	; 0xbb2 <SCSI_DecodeSCSICommand+0x34>
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	09 f4       	brne	.+2      	; 0xb9a <SCSI_DecodeSCSICommand+0x1c>
     b98:	59 c0       	rjmp	.+178    	; 0xc4c <SCSI_DecodeSCSICommand+0xce>
     b9a:	84 30       	cpi	r24, 0x04	; 4
     b9c:	20 f4       	brcc	.+8      	; 0xba6 <SCSI_DecodeSCSICommand+0x28>
     b9e:	88 23       	and	r24, r24
     ba0:	09 f4       	brne	.+2      	; 0xba4 <SCSI_DecodeSCSICommand+0x26>
     ba2:	e6 c0       	rjmp	.+460    	; 0xd70 <SCSI_DecodeSCSICommand+0x1f2>
     ba4:	ee c0       	rjmp	.+476    	; 0xd82 <SCSI_DecodeSCSICommand+0x204>
     ba6:	82 31       	cpi	r24, 0x12	; 18
     ba8:	b9 f0       	breq	.+46     	; 0xbd8 <SCSI_DecodeSCSICommand+0x5a>
     baa:	8a 31       	cpi	r24, 0x1A	; 26
     bac:	09 f0       	breq	.+2      	; 0xbb0 <SCSI_DecodeSCSICommand+0x32>
     bae:	e9 c0       	rjmp	.+466    	; 0xd82 <SCSI_DecodeSCSICommand+0x204>
     bb0:	be c0       	rjmp	.+380    	; 0xd2e <SCSI_DecodeSCSICommand+0x1b0>
     bb2:	88 32       	cpi	r24, 0x28	; 40
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <SCSI_DecodeSCSICommand+0x3a>
     bb6:	b5 c0       	rjmp	.+362    	; 0xd22 <SCSI_DecodeSCSICommand+0x1a4>
     bb8:	89 32       	cpi	r24, 0x29	; 41
     bba:	38 f4       	brcc	.+14     	; 0xbca <SCSI_DecodeSCSICommand+0x4c>
     bbc:	8e 31       	cpi	r24, 0x1E	; 30
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <SCSI_DecodeSCSICommand+0x44>
     bc0:	d7 c0       	rjmp	.+430    	; 0xd70 <SCSI_DecodeSCSICommand+0x1f2>
     bc2:	85 32       	cpi	r24, 0x25	; 37
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <SCSI_DecodeSCSICommand+0x4a>
     bc6:	dd c0       	rjmp	.+442    	; 0xd82 <SCSI_DecodeSCSICommand+0x204>
     bc8:	67 c0       	rjmp	.+206    	; 0xc98 <SCSI_DecodeSCSICommand+0x11a>
     bca:	8a 32       	cpi	r24, 0x2A	; 42
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <SCSI_DecodeSCSICommand+0x52>
     bce:	a7 c0       	rjmp	.+334    	; 0xd1e <SCSI_DecodeSCSICommand+0x1a0>
     bd0:	8f 32       	cpi	r24, 0x2F	; 47
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <SCSI_DecodeSCSICommand+0x58>
     bd4:	d6 c0       	rjmp	.+428    	; 0xd82 <SCSI_DecodeSCSICommand+0x204>
     bd6:	cc c0       	rjmp	.+408    	; 0xd70 <SCSI_DecodeSCSICommand+0x1f2>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(void)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[3]);
     bd8:	80 91 57 01 	lds	r24, 0x0157
     bdc:	90 91 58 01 	lds	r25, 0x0158
     be0:	6c df       	rcall	.-296    	; 0xaba <SwapEndian_16>
     be2:	8c 01       	movw	r16, r24
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     be4:	80 91 55 01 	lds	r24, 0x0155
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	83 70       	andi	r24, 0x03	; 3
     bec:	90 70       	andi	r25, 0x00	; 0
     bee:	00 97       	sbiw	r24, 0x00	; 0
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <SCSI_DecodeSCSICommand+0x76>
     bf2:	7f c0       	rjmp	.+254    	; 0xcf2 <SCSI_DecodeSCSICommand+0x174>
     bf4:	80 91 56 01 	lds	r24, 0x0156
     bf8:	88 23       	and	r24, r24
     bfa:	09 f0       	breq	.+2      	; 0xbfe <SCSI_DecodeSCSICommand+0x80>
     bfc:	7a c0       	rjmp	.+244    	; 0xcf2 <SCSI_DecodeSCSICommand+0x174>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(void)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     bfe:	e8 01       	movw	r28, r16
     c00:	05 32       	cpi	r16, 0x25	; 37
     c02:	11 05       	cpc	r17, r1
     c04:	10 f0       	brcs	.+4      	; 0xc0a <SCSI_DecodeSCSICommand+0x8c>
     c06:	c4 e2       	ldi	r28, 0x24	; 36
     c08:	d0 e0       	ldi	r29, 0x00	; 0

		return false;
	}

	/* Write the INQUIRY data to the endpoint */
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     c0a:	8f e1       	ldi	r24, 0x1F	; 31
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	be 01       	movw	r22, r28
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	16 d1       	rcall	.+556    	; 0xe42 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c16:	c8 01       	movw	r24, r16
     c18:	8c 1b       	sub	r24, r28
     c1a:	9d 0b       	sbc	r25, r29
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	cb d0       	rcall	.+406    	; 0xdb8 <Endpoint_Null_Stream>
     c22:	80 91 e8 00 	lds	r24, 0x00E8
     c26:	8e 77       	andi	r24, 0x7E	; 126
     c28:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     c2c:	9e 01       	movw	r18, r28
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	80 91 4d 01 	lds	r24, 0x014D
     c36:	90 91 4e 01 	lds	r25, 0x014E
     c3a:	a0 91 4f 01 	lds	r26, 0x014F
     c3e:	b0 91 50 01 	lds	r27, 0x0150
     c42:	82 1b       	sub	r24, r18
     c44:	93 0b       	sbc	r25, r19
     c46:	a4 0b       	sbc	r26, r20
     c48:	b5 0b       	sbc	r27, r21
     c4a:	89 c0       	rjmp	.+274    	; 0xd5e <SCSI_DecodeSCSICommand+0x1e0>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(void)
{
	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
     c4c:	10 91 58 01 	lds	r17, 0x0158
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     c50:	01 2f       	mov	r16, r17
     c52:	13 31       	cpi	r17, 0x13	; 19
     c54:	08 f0       	brcs	.+2      	; 0xc58 <SCSI_DecodeSCSICommand+0xda>
     c56:	02 e1       	ldi	r16, 0x12	; 18

	/* Send the SENSE data - this indicates to the host the status of the last command */
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     c58:	8d e0       	ldi	r24, 0x0D	; 13
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	60 2f       	mov	r22, r16
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	ee d0       	rcall	.+476    	; 0xe42 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c66:	81 2f       	mov	r24, r17
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	80 1b       	sub	r24, r16
     c6c:	91 09       	sbc	r25, r1
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	a2 d0       	rcall	.+324    	; 0xdb8 <Endpoint_Null_Stream>
     c74:	80 91 e8 00 	lds	r24, 0x00E8
     c78:	8e 77       	andi	r24, 0x7E	; 126
     c7a:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     c7e:	80 91 4d 01 	lds	r24, 0x014D
     c82:	90 91 4e 01 	lds	r25, 0x014E
     c86:	a0 91 4f 01 	lds	r26, 0x014F
     c8a:	b0 91 50 01 	lds	r27, 0x0150
     c8e:	80 1b       	sub	r24, r16
     c90:	91 09       	sbc	r25, r1
     c92:	a1 09       	sbc	r26, r1
     c94:	b1 09       	sbc	r27, r1
     c96:	63 c0       	rjmp	.+198    	; 0xd5e <SCSI_DecodeSCSICommand+0x1e0>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     c98:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 16);
     c9c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     ca0:	8f e7       	ldi	r24, 0x7F	; 127
     ca2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data &  0xFF);
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     cac:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 16);
     cb0:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data &  0xFF);
     cba:	10 92 f1 00 	sts	0x00F1, r1

	/* Send the logical block size of the device (must be 512 bytes) */
	Endpoint_Write_32_BE(VIRTUAL_MEMORY_BLOCK_SIZE);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     cbe:	80 91 44 01 	lds	r24, 0x0144
     cc2:	88 23       	and	r24, r24
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <SCSI_DecodeSCSICommand+0x14a>
     cc6:	72 c0       	rjmp	.+228    	; 0xdac <SCSI_DecodeSCSICommand+0x22e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cc8:	80 91 e8 00 	lds	r24, 0x00E8
     ccc:	8e 77       	andi	r24, 0x7E	; 126
     cce:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data packet to the host */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= 8;
     cd2:	80 91 4d 01 	lds	r24, 0x014D
     cd6:	90 91 4e 01 	lds	r25, 0x014E
     cda:	a0 91 4f 01 	lds	r26, 0x014F
     cde:	b0 91 50 01 	lds	r27, 0x0150
     ce2:	08 97       	sbiw	r24, 0x08	; 8
     ce4:	a1 09       	sbc	r26, r1
     ce6:	b1 09       	sbc	r27, r1
     ce8:	3a c0       	rjmp	.+116    	; 0xd5e <SCSI_DecodeSCSICommand+0x1e0>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(void)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(CommandBlock.SCSICommandData[1] & (1 << 2)))
     cea:	80 91 55 01 	lds	r24, 0x0155
     cee:	82 fd       	sbrc	r24, 2
     cf0:	08 c0       	rjmp	.+16     	; 0xd02 <SCSI_DecodeSCSICommand+0x184>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     cf2:	80 91 0f 01 	lds	r24, 0x010F
     cf6:	80 7f       	andi	r24, 0xF0	; 240
     cf8:	85 60       	ori	r24, 0x05	; 5
     cfa:	80 93 0f 01 	sts	0x010F, r24
     cfe:	84 e2       	ldi	r24, 0x24	; 36
     d00:	47 c0       	rjmp	.+142    	; 0xd90 <SCSI_DecodeSCSICommand+0x212>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     d02:	b0 de       	rcall	.-672    	; 0xa64 <DataflashManager_CheckDataflashOperation>
     d04:	88 23       	and	r24, r24
     d06:	a1 f5       	brne	.+104    	; 0xd70 <SCSI_DecodeSCSICommand+0x1f2>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     d08:	80 91 0f 01 	lds	r24, 0x010F
     d0c:	80 7f       	andi	r24, 0xF0	; 240
     d0e:	84 60       	ori	r24, 0x04	; 4
     d10:	80 93 0f 01 	sts	0x010F, r24
     d14:	10 92 19 01 	sts	0x0119, r1
     d18:	10 92 1a 01 	sts	0x011A, r1
     d1c:	47 c0       	rjmp	.+142    	; 0xdac <SCSI_DecodeSCSICommand+0x22e>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic();
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_WRITE);
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	01 c0       	rjmp	.+2      	; 0xd24 <SCSI_DecodeSCSICommand+0x1a6>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_READ);
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	ce de       	rcall	.-612    	; 0xac2 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     d26:	88 23       	and	r24, r24
     d28:	09 f4       	brne	.+2      	; 0xd2c <SCSI_DecodeSCSICommand+0x1ae>
     d2a:	40 c0       	rjmp	.+128    	; 0xdac <SCSI_DecodeSCSICommand+0x22e>
     d2c:	34 c0       	rjmp	.+104    	; 0xd96 <SCSI_DecodeSCSICommand+0x218>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d2e:	10 92 f1 00 	sts	0x00F1, r1
     d32:	10 92 f1 00 	sts	0x00F1, r1
     d36:	10 92 f1 00 	sts	0x00F1, r1
     d3a:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d3e:	80 91 e8 00 	lds	r24, 0x00E8
     d42:	8e 77       	andi	r24, 0x7E	; 126
     d44:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= 4;
     d48:	80 91 4d 01 	lds	r24, 0x014D
     d4c:	90 91 4e 01 	lds	r25, 0x014E
     d50:	a0 91 4f 01 	lds	r26, 0x014F
     d54:	b0 91 50 01 	lds	r27, 0x0150
     d58:	04 97       	sbiw	r24, 0x04	; 4
     d5a:	a1 09       	sbc	r26, r1
     d5c:	b1 09       	sbc	r27, r1
     d5e:	80 93 4d 01 	sts	0x014D, r24
     d62:	90 93 4e 01 	sts	0x014E, r25
     d66:	a0 93 4f 01 	sts	0x014F, r26
     d6a:	b0 93 50 01 	sts	0x0150, r27
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6();
			break;
     d6e:	13 c0       	rjmp	.+38     	; 0xd96 <SCSI_DecodeSCSICommand+0x218>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			CommandBlock.DataTransferLength = 0;
     d70:	10 92 4d 01 	sts	0x014D, r1
     d74:	10 92 4e 01 	sts	0x014E, r1
     d78:	10 92 4f 01 	sts	0x014F, r1
     d7c:	10 92 50 01 	sts	0x0150, r1
     d80:	0a c0       	rjmp	.+20     	; 0xd96 <SCSI_DecodeSCSICommand+0x218>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     d82:	80 91 0f 01 	lds	r24, 0x010F
     d86:	80 7f       	andi	r24, 0xF0	; 240
     d88:	85 60       	ori	r24, 0x05	; 5
     d8a:	80 93 0f 01 	sts	0x010F, r24
     d8e:	80 e2       	ldi	r24, 0x20	; 32
     d90:	80 93 19 01 	sts	0x0119, r24
     d94:	c1 cf       	rjmp	.-126    	; 0xd18 <SCSI_DecodeSCSICommand+0x19a>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     d96:	80 91 0f 01 	lds	r24, 0x010F
     d9a:	80 7f       	andi	r24, 0xF0	; 240
     d9c:	80 93 0f 01 	sts	0x010F, r24
     da0:	10 92 19 01 	sts	0x0119, r1
     da4:	10 92 1a 01 	sts	0x011A, r1
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	01 c0       	rjmp	.+2      	; 0xdae <SCSI_DecodeSCSICommand+0x230>
	}

	return false;
     dac:	80 e0       	ldi	r24, 0x00	; 0
}
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	08 95       	ret

00000db8 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	ec 01       	movw	r28, r24
     dc8:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
     dca:	09 d2       	rcall	.+1042   	; 0x11de <Endpoint_WaitUntilReady>
     dcc:	d8 2e       	mov	r13, r24
     dce:	88 23       	and	r24, r24
     dd0:	79 f5       	brne	.+94     	; 0xe30 <Endpoint_Null_Stream+0x78>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
     dd2:	01 15       	cp	r16, r1
     dd4:	11 05       	cpc	r17, r1
     dd6:	29 f0       	breq	.+10     	; 0xde2 <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
     dd8:	f8 01       	movw	r30, r16
     dda:	20 81       	ld	r18, Z
     ddc:	31 81       	ldd	r19, Z+1	; 0x01
     dde:	c2 1b       	sub	r28, r18
     de0:	d3 0b       	sbc	r29, r19
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     de2:	ee 24       	eor	r14, r14
     de4:	ff 24       	eor	r15, r15
     de6:	20 c0       	rjmp	.+64     	; 0xe28 <Endpoint_Null_Stream+0x70>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     de8:	80 91 e8 00 	lds	r24, 0x00E8
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     dec:	85 fd       	sbrc	r24, 5
     dee:	16 c0       	rjmp	.+44     	; 0xe1c <Endpoint_Null_Stream+0x64>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     df0:	80 91 e8 00 	lds	r24, 0x00E8
     df4:	8e 77       	andi	r24, 0x7E	; 126
     df6:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
     dfa:	01 15       	cp	r16, r1
     dfc:	11 05       	cpc	r17, r1
     dfe:	51 f0       	breq	.+20     	; 0xe14 <Endpoint_Null_Stream+0x5c>
			{
				*BytesProcessed += BytesInTransfer;
     e00:	f8 01       	movw	r30, r16
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	8e 0d       	add	r24, r14
     e08:	9f 1d       	adc	r25, r15
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     e0e:	95 e0       	ldi	r25, 0x05	; 5
     e10:	d9 2e       	mov	r13, r25
     e12:	0e c0       	rjmp	.+28     	; 0xe30 <Endpoint_Null_Stream+0x78>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e14:	e4 d1       	rcall	.+968    	; 0x11de <Endpoint_WaitUntilReady>
     e16:	88 23       	and	r24, r24
     e18:	39 f0       	breq	.+14     	; 0xe28 <Endpoint_Null_Stream+0x70>
     e1a:	09 c0       	rjmp	.+18     	; 0xe2e <Endpoint_Null_Stream+0x76>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e1c:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
     e20:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
     e22:	08 94       	sec
     e24:	e1 1c       	adc	r14, r1
     e26:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     e28:	20 97       	sbiw	r28, 0x00	; 0
     e2a:	f1 f6       	brne	.-68     	; 0xde8 <Endpoint_Null_Stream+0x30>
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <Endpoint_Null_Stream+0x78>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e2e:	d8 2e       	mov	r13, r24
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
     e30:	8d 2d       	mov	r24, r13
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	08 95       	ret

00000e42 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e42:	8f 92       	push	r8
     e44:	9f 92       	push	r9
     e46:	bf 92       	push	r11
     e48:	cf 92       	push	r12
     e4a:	df 92       	push	r13
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	0f 92       	push	r0
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	e8 2e       	mov	r14, r24
     e60:	4b 01       	movw	r8, r22
     e62:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     e64:	99 83       	std	Y+1, r25	; 0x01
     e66:	bb d1       	rcall	.+886    	; 0x11de <Endpoint_WaitUntilReady>
     e68:	b8 2e       	mov	r11, r24
     e6a:	99 81       	ldd	r25, Y+1	; 0x01
     e6c:	88 23       	and	r24, r24
     e6e:	c1 f5       	brne	.+112    	; 0xee0 <Endpoint_Write_Stream_LE+0x9e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e70:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e72:	01 15       	cp	r16, r1
     e74:	11 05       	cpc	r17, r1
     e76:	39 f0       	breq	.+14     	; 0xe86 <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     e78:	f8 01       	movw	r30, r16
     e7a:	20 81       	ld	r18, Z
     e7c:	31 81       	ldd	r19, Z+1	; 0x01
     e7e:	82 1a       	sub	r8, r18
     e80:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e82:	e2 0e       	add	r14, r18
     e84:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e86:	cc 24       	eor	r12, r12
     e88:	dd 24       	eor	r13, r13
     e8a:	25 c0       	rjmp	.+74     	; 0xed6 <Endpoint_Write_Stream_LE+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e8c:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     e90:	85 fd       	sbrc	r24, 5
     e92:	16 c0       	rjmp	.+44     	; 0xec0 <Endpoint_Write_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e94:	80 91 e8 00 	lds	r24, 0x00E8
     e98:	8e 77       	andi	r24, 0x7E	; 126
     e9a:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     e9e:	01 15       	cp	r16, r1
     ea0:	11 05       	cpc	r17, r1
     ea2:	51 f0       	breq	.+20     	; 0xeb8 <Endpoint_Write_Stream_LE+0x76>
			{
				*BytesProcessed += BytesInTransfer;
     ea4:	f8 01       	movw	r30, r16
     ea6:	80 81       	ld	r24, Z
     ea8:	91 81       	ldd	r25, Z+1	; 0x01
     eaa:	8c 0d       	add	r24, r12
     eac:	9d 1d       	adc	r25, r13
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     eb2:	25 e0       	ldi	r18, 0x05	; 5
     eb4:	b2 2e       	mov	r11, r18
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <Endpoint_Write_Stream_LE+0x9e>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     eb8:	92 d1       	rcall	.+804    	; 0x11de <Endpoint_WaitUntilReady>
     eba:	88 23       	and	r24, r24
     ebc:	61 f0       	breq	.+24     	; 0xed6 <Endpoint_Write_Stream_LE+0x94>
     ebe:	0f c0       	rjmp	.+30     	; 0xede <Endpoint_Write_Stream_LE+0x9c>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     ec0:	f7 01       	movw	r30, r14
     ec2:	81 91       	ld	r24, Z+
     ec4:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ec6:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     eca:	08 94       	sec
     ecc:	81 08       	sbc	r8, r1
     ece:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     ed0:	08 94       	sec
     ed2:	c1 1c       	adc	r12, r1
     ed4:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     ed6:	81 14       	cp	r8, r1
     ed8:	91 04       	cpc	r9, r1
     eda:	c1 f6       	brne	.-80     	; 0xe8c <Endpoint_Write_Stream_LE+0x4a>
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <Endpoint_Write_Stream_LE+0x9e>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     ede:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     ee0:	8b 2d       	mov	r24, r11
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	cf 90       	pop	r12
     ef4:	bf 90       	pop	r11
     ef6:	9f 90       	pop	r9
     ef8:	8f 90       	pop	r8
     efa:	08 95       	ret

00000efc <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     efc:	8f 92       	push	r8
     efe:	9f 92       	push	r9
     f00:	bf 92       	push	r11
     f02:	cf 92       	push	r12
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	0f 92       	push	r0
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	e8 2e       	mov	r14, r24
     f1a:	4b 01       	movw	r8, r22
     f1c:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     f1e:	99 83       	std	Y+1, r25	; 0x01
     f20:	5e d1       	rcall	.+700    	; 0x11de <Endpoint_WaitUntilReady>
     f22:	b8 2e       	mov	r11, r24
     f24:	99 81       	ldd	r25, Y+1	; 0x01
     f26:	88 23       	and	r24, r24
     f28:	c1 f5       	brne	.+112    	; 0xf9a <Endpoint_Read_Stream_LE+0x9e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     f2a:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     f2c:	01 15       	cp	r16, r1
     f2e:	11 05       	cpc	r17, r1
     f30:	39 f0       	breq	.+14     	; 0xf40 <Endpoint_Read_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     f32:	f8 01       	movw	r30, r16
     f34:	20 81       	ld	r18, Z
     f36:	31 81       	ldd	r19, Z+1	; 0x01
     f38:	82 1a       	sub	r8, r18
     f3a:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     f3c:	e2 0e       	add	r14, r18
     f3e:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     f40:	cc 24       	eor	r12, r12
     f42:	dd 24       	eor	r13, r13
     f44:	25 c0       	rjmp	.+74     	; 0xf90 <Endpoint_Read_Stream_LE+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f46:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     f4a:	85 fd       	sbrc	r24, 5
     f4c:	16 c0       	rjmp	.+44     	; 0xf7a <Endpoint_Read_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f4e:	80 91 e8 00 	lds	r24, 0x00E8
     f52:	8b 77       	andi	r24, 0x7B	; 123
     f54:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     f58:	01 15       	cp	r16, r1
     f5a:	11 05       	cpc	r17, r1
     f5c:	51 f0       	breq	.+20     	; 0xf72 <Endpoint_Read_Stream_LE+0x76>
			{
				*BytesProcessed += BytesInTransfer;
     f5e:	f8 01       	movw	r30, r16
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	8c 0d       	add	r24, r12
     f66:	9d 1d       	adc	r25, r13
     f68:	91 83       	std	Z+1, r25	; 0x01
     f6a:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     f6c:	45 e0       	ldi	r20, 0x05	; 5
     f6e:	b4 2e       	mov	r11, r20
     f70:	14 c0       	rjmp	.+40     	; 0xf9a <Endpoint_Read_Stream_LE+0x9e>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     f72:	35 d1       	rcall	.+618    	; 0x11de <Endpoint_WaitUntilReady>
     f74:	88 23       	and	r24, r24
     f76:	61 f0       	breq	.+24     	; 0xf90 <Endpoint_Read_Stream_LE+0x94>
     f78:	0f c0       	rjmp	.+30     	; 0xf98 <Endpoint_Read_Stream_LE+0x9c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f7a:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     f7e:	f7 01       	movw	r30, r14
     f80:	81 93       	st	Z+, r24
     f82:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     f84:	08 94       	sec
     f86:	81 08       	sbc	r8, r1
     f88:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     f8a:	08 94       	sec
     f8c:	c1 1c       	adc	r12, r1
     f8e:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     f90:	81 14       	cp	r8, r1
     f92:	91 04       	cpc	r9, r1
     f94:	c1 f6       	brne	.-80     	; 0xf46 <Endpoint_Read_Stream_LE+0x4a>
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <Endpoint_Read_Stream_LE+0x9e>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     f98:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     f9a:	8b 2d       	mov	r24, r11
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	ef 90       	pop	r14
     faa:	df 90       	pop	r13
     fac:	cf 90       	pop	r12
     fae:	bf 90       	pop	r11
     fb0:	9f 90       	pop	r9
     fb2:	8f 90       	pop	r8
     fb4:	08 95       	ret

00000fb6 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     fb6:	28 2f       	mov	r18, r24
     fb8:	39 2f       	mov	r19, r25
     fba:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     fbc:	80 91 6f 01 	lds	r24, 0x016F
     fc0:	90 91 70 01 	lds	r25, 0x0170
     fc4:	86 17       	cp	r24, r22
     fc6:	97 07       	cpc	r25, r23
     fc8:	18 f4       	brcc	.+6      	; 0xfd0 <Endpoint_Write_Control_Stream_LE+0x1a>
     fca:	bc 01       	movw	r22, r24
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	37 c0       	rjmp	.+110    	; 0x103e <Endpoint_Write_Control_Stream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     fd0:	61 15       	cp	r22, r1
     fd2:	71 05       	cpc	r23, r1
     fd4:	d9 f7       	brne	.-10     	; 0xfcc <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fd6:	80 91 e8 00 	lds	r24, 0x00E8
     fda:	8e 77       	andi	r24, 0x7E	; 126
     fdc:	80 93 e8 00 	sts	0x00E8, r24
     fe0:	f5 cf       	rjmp	.-22     	; 0xfcc <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fe2:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fe6:	88 23       	and	r24, r24
     fe8:	09 f4       	brne	.+2      	; 0xfec <Endpoint_Write_Control_Stream_LE+0x36>
     fea:	3f c0       	rjmp	.+126    	; 0x106a <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fec:	85 30       	cpi	r24, 0x05	; 5
     fee:	c9 f1       	breq	.+114    	; 0x1062 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ff0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     ff4:	83 fd       	sbrc	r24, 3
     ff6:	37 c0       	rjmp	.+110    	; 0x1066 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ff8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     ffc:	82 fd       	sbrc	r24, 2
     ffe:	2b c0       	rjmp	.+86     	; 0x1056 <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1000:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1004:	80 ff       	sbrs	r24, 0
    1006:	1b c0       	rjmp	.+54     	; 0x103e <Endpoint_Write_Control_Stream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1008:	80 91 f2 00 	lds	r24, 0x00F2
    100c:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1010:	06 c0       	rjmp	.+12     	; 0x101e <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1012:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1014:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1018:	61 50       	subi	r22, 0x01	; 1
    101a:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    101c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    101e:	61 15       	cp	r22, r1
    1020:	71 05       	cpc	r23, r1
    1022:	19 f0       	breq	.+6      	; 0x102a <Endpoint_Write_Control_Stream_LE+0x74>
    1024:	88 30       	cpi	r24, 0x08	; 8
    1026:	91 05       	cpc	r25, r1
    1028:	a0 f3       	brcs	.-24     	; 0x1012 <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    102a:	21 e0       	ldi	r18, 0x01	; 1
    102c:	88 30       	cpi	r24, 0x08	; 8
    102e:	91 05       	cpc	r25, r1
    1030:	09 f0       	breq	.+2      	; 0x1034 <Endpoint_Write_Control_Stream_LE+0x7e>
    1032:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1034:	80 91 e8 00 	lds	r24, 0x00E8
    1038:	8e 77       	andi	r24, 0x7E	; 126
    103a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    103e:	61 15       	cp	r22, r1
    1040:	71 05       	cpc	r23, r1
    1042:	79 f6       	brne	.-98     	; 0xfe2 <Endpoint_Write_Control_Stream_LE+0x2c>
    1044:	22 23       	and	r18, r18
    1046:	69 f6       	brne	.-102    	; 0xfe2 <Endpoint_Write_Control_Stream_LE+0x2c>
    1048:	06 c0       	rjmp	.+12     	; 0x1056 <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    104a:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    104e:	88 23       	and	r24, r24
    1050:	61 f0       	breq	.+24     	; 0x106a <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1052:	85 30       	cpi	r24, 0x05	; 5
    1054:	61 f0       	breq	.+24     	; 0x106e <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1056:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    105a:	82 ff       	sbrs	r24, 2
    105c:	f6 cf       	rjmp	.-20     	; 0x104a <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    106e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1070:	08 95       	ret

00001072 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1072:	e8 2f       	mov	r30, r24
    1074:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1076:	80 91 6f 01 	lds	r24, 0x016F
    107a:	90 91 70 01 	lds	r25, 0x0170
    107e:	86 17       	cp	r24, r22
    1080:	97 07       	cpc	r25, r23
    1082:	18 f4       	brcc	.+6      	; 0x108a <Endpoint_Write_Control_PStream_LE+0x18>
    1084:	bc 01       	movw	r22, r24
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	38 c0       	rjmp	.+112    	; 0x10fa <Endpoint_Write_Control_PStream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    108a:	61 15       	cp	r22, r1
    108c:	71 05       	cpc	r23, r1
    108e:	d9 f7       	brne	.-10     	; 0x1086 <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1090:	80 91 e8 00 	lds	r24, 0x00E8
    1094:	8e 77       	andi	r24, 0x7E	; 126
    1096:	80 93 e8 00 	sts	0x00E8, r24
    109a:	f5 cf       	rjmp	.-22     	; 0x1086 <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    109c:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10a0:	88 23       	and	r24, r24
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <Endpoint_Write_Control_PStream_LE+0x34>
    10a4:	40 c0       	rjmp	.+128    	; 0x1126 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10a6:	85 30       	cpi	r24, 0x05	; 5
    10a8:	d1 f1       	breq	.+116    	; 0x111e <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    10aa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    10ae:	83 fd       	sbrc	r24, 3
    10b0:	38 c0       	rjmp	.+112    	; 0x1122 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10b2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    10b6:	82 fd       	sbrc	r24, 2
    10b8:	2c c0       	rjmp	.+88     	; 0x1112 <Endpoint_Write_Control_PStream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10ba:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    10be:	80 ff       	sbrs	r24, 0
    10c0:	1c c0       	rjmp	.+56     	; 0x10fa <Endpoint_Write_Control_PStream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    10c2:	80 91 f2 00 	lds	r24, 0x00F2
    10c6:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    10ca:	07 c0       	rjmp	.+14     	; 0x10da <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    10cc:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10ce:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    10d2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    10d4:	61 50       	subi	r22, 0x01	; 1
    10d6:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    10d8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    10da:	61 15       	cp	r22, r1
    10dc:	71 05       	cpc	r23, r1
    10de:	19 f0       	breq	.+6      	; 0x10e6 <Endpoint_Write_Control_PStream_LE+0x74>
    10e0:	88 30       	cpi	r24, 0x08	; 8
    10e2:	91 05       	cpc	r25, r1
    10e4:	98 f3       	brcs	.-26     	; 0x10cc <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    10e6:	21 e0       	ldi	r18, 0x01	; 1
    10e8:	88 30       	cpi	r24, 0x08	; 8
    10ea:	91 05       	cpc	r25, r1
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <Endpoint_Write_Control_PStream_LE+0x7e>
    10ee:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10f0:	80 91 e8 00 	lds	r24, 0x00E8
    10f4:	8e 77       	andi	r24, 0x7E	; 126
    10f6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    10fa:	61 15       	cp	r22, r1
    10fc:	71 05       	cpc	r23, r1
    10fe:	71 f6       	brne	.-100    	; 0x109c <Endpoint_Write_Control_PStream_LE+0x2a>
    1100:	22 23       	and	r18, r18
    1102:	61 f6       	brne	.-104    	; 0x109c <Endpoint_Write_Control_PStream_LE+0x2a>
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <Endpoint_Write_Control_PStream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1106:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    110a:	88 23       	and	r24, r24
    110c:	61 f0       	breq	.+24     	; 0x1126 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    110e:	85 30       	cpi	r24, 0x05	; 5
    1110:	61 f0       	breq	.+24     	; 0x112a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1112:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1116:	82 ff       	sbrs	r24, 2
    1118:	f6 cf       	rjmp	.-20     	; 0x1106 <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    112a:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    112c:	08 95       	ret

0000112e <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    112e:	98 2f       	mov	r25, r24
    1130:	2c c0       	rjmp	.+88     	; 0x118a <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1132:	29 2f       	mov	r18, r25
    1134:	2f 70       	andi	r18, 0x0F	; 15
    1136:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    113a:	98 17       	cp	r25, r24
    113c:	39 f0       	breq	.+14     	; 0x114c <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    113e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1142:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1146:	50 91 f0 00 	lds	r21, 0x00F0
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    114c:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    114e:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1150:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1152:	21 ff       	sbrs	r18, 1
    1154:	19 c0       	rjmp	.+50     	; 0x1188 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1156:	30 91 eb 00 	lds	r19, 0x00EB
    115a:	3e 7f       	andi	r19, 0xFE	; 254
    115c:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1160:	30 91 ed 00 	lds	r19, 0x00ED
    1164:	3d 7f       	andi	r19, 0xFD	; 253
    1166:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    116a:	30 91 eb 00 	lds	r19, 0x00EB
    116e:	31 60       	ori	r19, 0x01	; 1
    1170:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1174:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1178:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    117c:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1180:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1184:	27 ff       	sbrs	r18, 7
    1186:	08 c0       	rjmp	.+16     	; 0x1198 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1188:	9f 5f       	subi	r25, 0xFF	; 255
    118a:	97 30       	cpi	r25, 0x07	; 7
    118c:	90 f2       	brcs	.-92     	; 0x1132 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    118e:	8f 70       	andi	r24, 0x0F	; 15
    1190:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1198:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    119a:	08 95       	ret

0000119c <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    119c:	80 91 69 01 	lds	r24, 0x0169
    11a0:	87 ff       	sbrs	r24, 7
    11a2:	13 c0       	rjmp	.+38     	; 0x11ca <Endpoint_ClearStatusStage+0x2e>
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    11a6:	80 91 68 01 	lds	r24, 0x0168
    11aa:	88 23       	and	r24, r24
    11ac:	b9 f0       	breq	.+46     	; 0x11dc <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11ae:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    11b2:	82 ff       	sbrs	r24, 2
    11b4:	f8 cf       	rjmp	.-16     	; 0x11a6 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11b6:	80 91 e8 00 	lds	r24, 0x00E8
    11ba:	8b 77       	andi	r24, 0x7B	; 123
    11bc:	80 93 e8 00 	sts	0x00E8, r24
    11c0:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    11c2:	80 91 68 01 	lds	r24, 0x0168
    11c6:	88 23       	and	r24, r24
    11c8:	49 f0       	breq	.+18     	; 0x11dc <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11ca:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    11ce:	80 ff       	sbrs	r24, 0
    11d0:	f8 cf       	rjmp	.-16     	; 0x11c2 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11d2:	80 91 e8 00 	lds	r24, 0x00E8
    11d6:	8e 77       	andi	r24, 0x7E	; 126
    11d8:	80 93 e8 00 	sts	0x00E8, r24
    11dc:	08 95       	ret

000011de <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    11de:	80 91 e4 00 	lds	r24, 0x00E4
    11e2:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    11e6:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11e8:	20 91 ec 00 	lds	r18, 0x00EC
    11ec:	20 ff       	sbrs	r18, 0
    11ee:	26 c0       	rjmp	.+76     	; 0x123c <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11f0:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    11f4:	20 fd       	sbrc	r18, 0
    11f6:	16 c0       	rjmp	.+44     	; 0x1224 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    11f8:	20 91 68 01 	lds	r18, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    11fc:	22 23       	and	r18, r18
    11fe:	a1 f0       	breq	.+40     	; 0x1228 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1200:	25 30       	cpi	r18, 0x05	; 5
    1202:	a1 f0       	breq	.+40     	; 0x122c <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1204:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1208:	25 fd       	sbrc	r18, 5
    120a:	12 c0       	rjmp	.+36     	; 0x1230 <Endpoint_WaitUntilReady+0x52>
    120c:	20 91 e4 00 	lds	r18, 0x00E4
    1210:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1214:	28 17       	cp	r18, r24
    1216:	39 07       	cpc	r19, r25
    1218:	39 f3       	breq	.-50     	; 0x11e8 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    121a:	44 23       	and	r20, r20
    121c:	59 f0       	breq	.+22     	; 0x1234 <Endpoint_WaitUntilReady+0x56>
    121e:	41 50       	subi	r20, 0x01	; 1
    1220:	c9 01       	movw	r24, r18
    1222:	e2 cf       	rjmp	.-60     	; 0x11e8 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1234:	84 e0       	ldi	r24, 0x04	; 4
    1236:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1238:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    123a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    123c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1240:	22 ff       	sbrs	r18, 2
    1242:	da cf       	rjmp	.-76     	; 0x11f8 <Endpoint_WaitUntilReady+0x1a>
    1244:	f9 cf       	rjmp	.-14     	; 0x1238 <Endpoint_WaitUntilReady+0x5a>

00001246 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    124e:	4e d0       	rcall	.+156    	; 0x12ec <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1250:	55 d0       	rcall	.+170    	; 0x12fc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1252:	c8 ed       	ldi	r28, 0xD8	; 216
    1254:	d0 e0       	ldi	r29, 0x00	; 0
    1256:	88 81       	ld	r24, Y
    1258:	8f 77       	andi	r24, 0x7F	; 127
    125a:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    125c:	88 81       	ld	r24, Y
    125e:	80 68       	ori	r24, 0x80	; 128
    1260:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1262:	88 81       	ld	r24, Y
    1264:	8f 7d       	andi	r24, 0xDF	; 223
    1266:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1268:	e7 ed       	ldi	r30, 0xD7	; 215
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	80 68       	ori	r24, 0x80	; 128
    1270:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1272:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1274:	10 92 68 01 	sts	0x0168, r1
	USB_Device_ConfigurationNumber  = 0;
    1278:	10 92 64 01 	sts	0x0164, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    127c:	10 92 66 01 	sts	0x0166, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1280:	10 92 65 01 	sts	0x0165, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1284:	00 ee       	ldi	r16, 0xE0	; 224
    1286:	10 e0       	ldi	r17, 0x00	; 0
    1288:	f8 01       	movw	r30, r16
    128a:	80 81       	ld	r24, Z
    128c:	8b 7f       	andi	r24, 0xFB	; 251
    128e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1290:	88 81       	ld	r24, Y
    1292:	81 60       	ori	r24, 0x01	; 1
    1294:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	42 e0       	ldi	r20, 0x02	; 2
    129c:	48 df       	rcall	.-368    	; 0x112e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    129e:	e1 ee       	ldi	r30, 0xE1	; 225
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	8e 7f       	andi	r24, 0xFE	; 254
    12a6:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    12a8:	e2 ee       	ldi	r30, 0xE2	; 226
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	81 60       	ori	r24, 0x01	; 1
    12b0:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    12b2:	80 81       	ld	r24, Z
    12b4:	88 60       	ori	r24, 0x08	; 8
    12b6:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    12b8:	f8 01       	movw	r30, r16
    12ba:	80 81       	ld	r24, Z
    12bc:	8e 7f       	andi	r24, 0xFE	; 254
    12be:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    12c0:	88 81       	ld	r24, Y
    12c2:	80 61       	ori	r24, 0x10	; 16
    12c4:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	08 95       	ret

000012d0 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    12d0:	e8 ed       	ldi	r30, 0xD8	; 216
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8f 7e       	andi	r24, 0xEF	; 239
    12d8:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    12da:	e7 ed       	ldi	r30, 0xD7	; 215
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	81 60       	ori	r24, 0x01	; 1
    12e2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	80 93 67 01 	sts	0x0167, r24

	USB_ResetInterface();
}
    12ea:	ad cf       	rjmp	.-166    	; 0x1246 <USB_ResetInterface>

000012ec <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    12ec:	e8 ed       	ldi	r30, 0xD8	; 216
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	8c 7f       	andi	r24, 0xFC	; 252
    12f4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    12f6:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    12fa:	08 95       	ret

000012fc <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    12fc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1300:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1304:	08 95       	ret

00001306 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1306:	1f 92       	push	r1
    1308:	0f 92       	push	r0
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	0f 92       	push	r0
    130e:	0b b6       	in	r0, 0x3b	; 59
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	2f 93       	push	r18
    1316:	3f 93       	push	r19
    1318:	4f 93       	push	r20
    131a:	5f 93       	push	r21
    131c:	6f 93       	push	r22
    131e:	7f 93       	push	r23
    1320:	8f 93       	push	r24
    1322:	9f 93       	push	r25
    1324:	af 93       	push	r26
    1326:	bf 93       	push	r27
    1328:	ef 93       	push	r30
    132a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    132c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1330:	82 ff       	sbrs	r24, 2
    1332:	0a c0       	rjmp	.+20     	; 0x1348 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1334:	80 91 e2 00 	lds	r24, 0x00E2
    1338:	82 ff       	sbrs	r24, 2
    133a:	06 c0       	rjmp	.+12     	; 0x1348 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    133c:	80 91 e1 00 	lds	r24, 0x00E1
    1340:	8b 7f       	andi	r24, 0xFB	; 251
    1342:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1346:	53 d2       	rcall	.+1190   	; 0x17ee <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1348:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    134c:	80 ff       	sbrs	r24, 0
    134e:	1f c0       	rjmp	.+62     	; 0x138e <__vector_10+0x88>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1350:	80 91 d8 00 	lds	r24, 0x00D8
    1354:	80 ff       	sbrs	r24, 0
    1356:	1b c0       	rjmp	.+54     	; 0x138e <__vector_10+0x88>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1358:	80 91 da 00 	lds	r24, 0x00DA
    135c:	8e 7f       	andi	r24, 0xFE	; 254
    135e:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1362:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1366:	80 ff       	sbrs	r24, 0
    1368:	0d c0       	rjmp	.+26     	; 0x1384 <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    136a:	8c e0       	ldi	r24, 0x0C	; 12
    136c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    136e:	8e e0       	ldi	r24, 0x0E	; 14
    1370:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1372:	09 b4       	in	r0, 0x29	; 41
    1374:	00 fe       	sbrs	r0, 0
    1376:	fd cf       	rjmp	.-6      	; 0x1372 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	80 93 68 01 	sts	0x0168, r24
			EVENT_USB_Device_Connect();
    137e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <EVENT_USB_Device_Connect>
    1382:	05 c0       	rjmp	.+10     	; 0x138e <__vector_10+0x88>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1384:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1386:	10 92 68 01 	sts	0x0168, r1
			EVENT_USB_Device_Disconnect();
    138a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    138e:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1392:	80 ff       	sbrs	r24, 0
    1394:	18 c0       	rjmp	.+48     	; 0x13c6 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1396:	80 91 e2 00 	lds	r24, 0x00E2
    139a:	80 ff       	sbrs	r24, 0
    139c:	14 c0       	rjmp	.+40     	; 0x13c6 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    139e:	80 91 e2 00 	lds	r24, 0x00E2
    13a2:	8e 7f       	andi	r24, 0xFE	; 254
    13a4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    13a8:	80 91 e2 00 	lds	r24, 0x00E2
    13ac:	80 61       	ori	r24, 0x10	; 16
    13ae:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    13b2:	80 91 d8 00 	lds	r24, 0x00D8
    13b6:	80 62       	ori	r24, 0x20	; 32
    13b8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    13bc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    13be:	85 e0       	ldi	r24, 0x05	; 5
    13c0:	80 93 68 01 	sts	0x0168, r24
		EVENT_USB_Device_Suspend();
    13c4:	14 d2       	rcall	.+1064   	; 0x17ee <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    13c6:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    13ca:	84 ff       	sbrs	r24, 4
    13cc:	2d c0       	rjmp	.+90     	; 0x1428 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    13ce:	80 91 e2 00 	lds	r24, 0x00E2
    13d2:	84 ff       	sbrs	r24, 4
    13d4:	29 c0       	rjmp	.+82     	; 0x1428 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    13d6:	8c e0       	ldi	r24, 0x0C	; 12
    13d8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    13da:	8e e0       	ldi	r24, 0x0E	; 14
    13dc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    13de:	09 b4       	in	r0, 0x29	; 41
    13e0:	00 fe       	sbrs	r0, 0
    13e2:	fd cf       	rjmp	.-6      	; 0x13de <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    13e4:	80 91 d8 00 	lds	r24, 0x00D8
    13e8:	8f 7d       	andi	r24, 0xDF	; 223
    13ea:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    13ee:	80 91 e1 00 	lds	r24, 0x00E1
    13f2:	8f 7e       	andi	r24, 0xEF	; 239
    13f4:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    13f8:	80 91 e2 00 	lds	r24, 0x00E2
    13fc:	8f 7e       	andi	r24, 0xEF	; 239
    13fe:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1402:	80 91 e2 00 	lds	r24, 0x00E2
    1406:	81 60       	ori	r24, 0x01	; 1
    1408:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    140c:	80 91 64 01 	lds	r24, 0x0164
    1410:	88 23       	and	r24, r24
    1412:	21 f4       	brne	.+8      	; 0x141c <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1414:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1418:	87 ff       	sbrs	r24, 7
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <__vector_10+0x11a>
    141c:	84 e0       	ldi	r24, 0x04	; 4
    141e:	01 c0       	rjmp	.+2      	; 0x1422 <__vector_10+0x11c>
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	80 93 68 01 	sts	0x0168, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1426:	e3 d1       	rcall	.+966    	; 0x17ee <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1428:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    142c:	83 ff       	sbrs	r24, 3
    142e:	27 c0       	rjmp	.+78     	; 0x147e <__vector_10+0x178>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1430:	80 91 e2 00 	lds	r24, 0x00E2
    1434:	83 ff       	sbrs	r24, 3
    1436:	23 c0       	rjmp	.+70     	; 0x147e <__vector_10+0x178>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1438:	80 91 e1 00 	lds	r24, 0x00E1
    143c:	87 7f       	andi	r24, 0xF7	; 247
    143e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	80 93 68 01 	sts	0x0168, r24
		USB_Device_ConfigurationNumber = 0;
    1448:	10 92 64 01 	sts	0x0164, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    144c:	80 91 e1 00 	lds	r24, 0x00E1
    1450:	8e 7f       	andi	r24, 0xFE	; 254
    1452:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1456:	80 91 e2 00 	lds	r24, 0x00E2
    145a:	8e 7f       	andi	r24, 0xFE	; 254
    145c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1460:	80 91 e2 00 	lds	r24, 0x00E2
    1464:	80 61       	ori	r24, 0x10	; 16
    1466:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	42 e0       	ldi	r20, 0x02	; 2
    1470:	5e de       	rcall	.-836    	; 0x112e <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1472:	80 91 f0 00 	lds	r24, 0x00F0
    1476:	88 60       	ori	r24, 0x08	; 8
    1478:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    147c:	b8 d1       	rcall	.+880    	; 0x17ee <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    147e:	ff 91       	pop	r31
    1480:	ef 91       	pop	r30
    1482:	bf 91       	pop	r27
    1484:	af 91       	pop	r26
    1486:	9f 91       	pop	r25
    1488:	8f 91       	pop	r24
    148a:	7f 91       	pop	r23
    148c:	6f 91       	pop	r22
    148e:	5f 91       	pop	r21
    1490:	4f 91       	pop	r20
    1492:	3f 91       	pop	r19
    1494:	2f 91       	pop	r18
    1496:	0f 90       	pop	r0
    1498:	0b be       	out	0x3b, r0	; 59
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 90       	pop	r0
    14a0:	1f 90       	pop	r1
    14a2:	18 95       	reti

000014a4 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	0b b6       	in	r0, 0x3b	; 59
    14ae:	0f 92       	push	r0
    14b0:	11 24       	eor	r1, r1
    14b2:	1f 93       	push	r17
    14b4:	2f 93       	push	r18
    14b6:	3f 93       	push	r19
    14b8:	4f 93       	push	r20
    14ba:	5f 93       	push	r21
    14bc:	6f 93       	push	r22
    14be:	7f 93       	push	r23
    14c0:	8f 93       	push	r24
    14c2:	9f 93       	push	r25
    14c4:	af 93       	push	r26
    14c6:	bf 93       	push	r27
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14cc:	10 91 e9 00 	lds	r17, 0x00E9
    14d0:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    14d2:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14d6:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    14da:	80 91 f0 00 	lds	r24, 0x00F0
    14de:	87 7f       	andi	r24, 0xF7	; 247
    14e0:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    14e4:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    14e6:	1d d0       	rcall	.+58     	; 0x1522 <USB_Device_ProcessControlRequest>
    14e8:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    14ec:	80 91 f0 00 	lds	r24, 0x00F0
    14f0:	88 60       	ori	r24, 0x08	; 8
    14f2:	80 93 f0 00 	sts	0x00F0, r24
    14f6:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    14fa:	ff 91       	pop	r31
    14fc:	ef 91       	pop	r30
    14fe:	bf 91       	pop	r27
    1500:	af 91       	pop	r26
    1502:	9f 91       	pop	r25
    1504:	8f 91       	pop	r24
    1506:	7f 91       	pop	r23
    1508:	6f 91       	pop	r22
    150a:	5f 91       	pop	r21
    150c:	4f 91       	pop	r20
    150e:	3f 91       	pop	r19
    1510:	2f 91       	pop	r18
    1512:	1f 91       	pop	r17
    1514:	0f 90       	pop	r0
    1516:	0b be       	out	0x3b, r0	; 59
    1518:	0f 90       	pop	r0
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	0f 90       	pop	r0
    151e:	1f 90       	pop	r1
    1520:	18 95       	reti

00001522 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1522:	1f 93       	push	r17
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	ac 97       	sbiw	r28, 0x2c	; 44
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1538:	e9 e6       	ldi	r30, 0x69	; 105
    153a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    153c:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1540:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1542:	21 e0       	ldi	r18, 0x01	; 1
    1544:	e1 37       	cpi	r30, 0x71	; 113
    1546:	f2 07       	cpc	r31, r18
    1548:	c9 f7       	brne	.-14     	; 0x153c <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    154a:	0e 94 04 01 	call	0x208	; 0x208 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    154e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1552:	83 ff       	sbrs	r24, 3
    1554:	34 c1       	rjmp	.+616    	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1556:	80 91 69 01 	lds	r24, 0x0169

		switch (USB_ControlRequest.bRequest)
    155a:	20 91 6a 01 	lds	r18, 0x016A
    155e:	25 30       	cpi	r18, 0x05	; 5
    1560:	09 f4       	brne	.+2      	; 0x1564 <USB_Device_ProcessControlRequest+0x42>
    1562:	84 c0       	rjmp	.+264    	; 0x166c <USB_Device_ProcessControlRequest+0x14a>
    1564:	26 30       	cpi	r18, 0x06	; 6
    1566:	40 f4       	brcc	.+16     	; 0x1578 <USB_Device_ProcessControlRequest+0x56>
    1568:	21 30       	cpi	r18, 0x01	; 1
    156a:	a1 f1       	breq	.+104    	; 0x15d4 <USB_Device_ProcessControlRequest+0xb2>
    156c:	21 30       	cpi	r18, 0x01	; 1
    156e:	70 f0       	brcs	.+28     	; 0x158c <USB_Device_ProcessControlRequest+0x6a>
    1570:	23 30       	cpi	r18, 0x03	; 3
    1572:	09 f0       	breq	.+2      	; 0x1576 <USB_Device_ProcessControlRequest+0x54>
    1574:	24 c1       	rjmp	.+584    	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
    1576:	2e c0       	rjmp	.+92     	; 0x15d4 <USB_Device_ProcessControlRequest+0xb2>
    1578:	28 30       	cpi	r18, 0x08	; 8
    157a:	09 f4       	brne	.+2      	; 0x157e <USB_Device_ProcessControlRequest+0x5c>
    157c:	f1 c0       	rjmp	.+482    	; 0x1760 <USB_Device_ProcessControlRequest+0x23e>
    157e:	29 30       	cpi	r18, 0x09	; 9
    1580:	09 f4       	brne	.+2      	; 0x1584 <USB_Device_ProcessControlRequest+0x62>
    1582:	00 c1       	rjmp	.+512    	; 0x1784 <USB_Device_ProcessControlRequest+0x262>
    1584:	26 30       	cpi	r18, 0x06	; 6
    1586:	09 f0       	breq	.+2      	; 0x158a <USB_Device_ProcessControlRequest+0x68>
    1588:	1a c1       	rjmp	.+564    	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
    158a:	93 c0       	rjmp	.+294    	; 0x16b2 <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    158c:	80 38       	cpi	r24, 0x80	; 128
    158e:	21 f0       	breq	.+8      	; 0x1598 <USB_Device_ProcessControlRequest+0x76>
    1590:	82 38       	cpi	r24, 0x82	; 130
    1592:	09 f0       	breq	.+2      	; 0x1596 <USB_Device_ProcessControlRequest+0x74>
    1594:	14 c1       	rjmp	.+552    	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
    1596:	08 c0       	rjmp	.+16     	; 0x15a8 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1598:	80 91 65 01 	lds	r24, 0x0165
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    159c:	90 91 66 01 	lds	r25, 0x0166
    15a0:	99 23       	and	r25, r25
    15a2:	71 f0       	breq	.+28     	; 0x15c0 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    15a4:	82 60       	ori	r24, 0x02	; 2
    15a6:	0c c0       	rjmp	.+24     	; 0x15c0 <USB_Device_ProcessControlRequest+0x9e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15a8:	80 91 6d 01 	lds	r24, 0x016D
    15ac:	8f 70       	andi	r24, 0x0F	; 15
    15ae:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    15b2:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	95 ff       	sbrs	r25, 5
    15ba:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15bc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15c0:	90 91 e8 00 	lds	r25, 0x00E8
    15c4:	97 7f       	andi	r25, 0xF7	; 247
    15c6:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    15ca:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    15ce:	10 92 f1 00 	sts	0x00F1, r1
    15d2:	d1 c0       	rjmp	.+418    	; 0x1776 <USB_Device_ProcessControlRequest+0x254>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15d4:	88 23       	and	r24, r24
    15d6:	19 f0       	breq	.+6      	; 0x15de <USB_Device_ProcessControlRequest+0xbc>
    15d8:	82 30       	cpi	r24, 0x02	; 2
    15da:	09 f0       	breq	.+2      	; 0x15de <USB_Device_ProcessControlRequest+0xbc>
    15dc:	f0 c0       	rjmp	.+480    	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	8f 71       	andi	r24, 0x1F	; 31
    15e2:	90 70       	andi	r25, 0x00	; 0
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	29 f0       	breq	.+10     	; 0x15f2 <USB_Device_ProcessControlRequest+0xd0>
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	91 05       	cpc	r25, r1
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <USB_Device_ProcessControlRequest+0xce>
    15ee:	e7 c0       	rjmp	.+462    	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
    15f0:	0b c0       	rjmp	.+22     	; 0x1608 <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    15f2:	80 91 6b 01 	lds	r24, 0x016B
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	09 f0       	breq	.+2      	; 0x15fc <USB_Device_ProcessControlRequest+0xda>
    15fa:	e1 c0       	rjmp	.+450    	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    15fc:	23 30       	cpi	r18, 0x03	; 3
    15fe:	09 f0       	breq	.+2      	; 0x1602 <USB_Device_ProcessControlRequest+0xe0>
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	80 93 66 01 	sts	0x0166, r24
    1606:	2c c0       	rjmp	.+88     	; 0x1660 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1608:	80 91 6b 01 	lds	r24, 0x016B
    160c:	88 23       	and	r24, r24
    160e:	41 f5       	brne	.+80     	; 0x1660 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1610:	20 91 6d 01 	lds	r18, 0x016D
    1614:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1616:	09 f4       	brne	.+2      	; 0x161a <USB_Device_ProcessControlRequest+0xf8>
    1618:	d2 c0       	rjmp	.+420    	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    161a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    161e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1622:	80 ff       	sbrs	r24, 0
    1624:	1d c0       	rjmp	.+58     	; 0x1660 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1626:	80 91 6a 01 	lds	r24, 0x016A
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	21 f4       	brne	.+8      	; 0x1636 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    162e:	80 91 eb 00 	lds	r24, 0x00EB
    1632:	80 62       	ori	r24, 0x20	; 32
    1634:	13 c0       	rjmp	.+38     	; 0x165c <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1636:	80 91 eb 00 	lds	r24, 0x00EB
    163a:	80 61       	ori	r24, 0x10	; 16
    163c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 c0       	rjmp	.+4      	; 0x164a <USB_Device_ProcessControlRequest+0x128>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	2a 95       	dec	r18
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <USB_Device_ProcessControlRequest+0x124>
    164e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1652:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1656:	80 91 eb 00 	lds	r24, 0x00EB
    165a:	88 60       	ori	r24, 0x08	; 8
    165c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1660:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1664:	80 91 e8 00 	lds	r24, 0x00E8
    1668:	87 7f       	andi	r24, 0xF7	; 247
    166a:	88 c0       	rjmp	.+272    	; 0x177c <USB_Device_ProcessControlRequest+0x25a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    166c:	88 23       	and	r24, r24
    166e:	09 f0       	breq	.+2      	; 0x1672 <USB_Device_ProcessControlRequest+0x150>
    1670:	a6 c0       	rjmp	.+332    	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1672:	10 91 6b 01 	lds	r17, 0x016B
    1676:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1678:	80 91 e3 00 	lds	r24, 0x00E3
    167c:	80 78       	andi	r24, 0x80	; 128
    167e:	81 2b       	or	r24, r17
    1680:	80 93 e3 00 	sts	0x00E3, r24
    1684:	80 91 e8 00 	lds	r24, 0x00E8
    1688:	87 7f       	andi	r24, 0xF7	; 247
    168a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    168e:	86 dd       	rcall	.-1268   	; 0x119c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1690:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1694:	80 ff       	sbrs	r24, 0
    1696:	fc cf       	rjmp	.-8      	; 0x1690 <USB_Device_ProcessControlRequest+0x16e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    1698:	80 91 e3 00 	lds	r24, 0x00E3
    169c:	80 68       	ori	r24, 0x80	; 128
    169e:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    16a2:	11 23       	and	r17, r17
    16a4:	11 f0       	breq	.+4      	; 0x16aa <USB_Device_ProcessControlRequest+0x188>
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	01 c0       	rjmp	.+2      	; 0x16ac <USB_Device_ProcessControlRequest+0x18a>
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	80 93 68 01 	sts	0x0168, r24
    16b0:	86 c0       	rjmp	.+268    	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    16b2:	80 58       	subi	r24, 0x80	; 128
    16b4:	82 30       	cpi	r24, 0x02	; 2
    16b6:	08 f0       	brcs	.+2      	; 0x16ba <USB_Device_ProcessControlRequest+0x198>
    16b8:	82 c0       	rjmp	.+260    	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    16ba:	80 91 6b 01 	lds	r24, 0x016B
    16be:	90 91 6c 01 	lds	r25, 0x016C
    16c2:	23 e0       	ldi	r18, 0x03	; 3
    16c4:	8c 3d       	cpi	r24, 0xDC	; 220
    16c6:	92 07       	cpc	r25, r18
    16c8:	91 f5       	brne	.+100    	; 0x172e <USB_Device_ProcessControlRequest+0x20c>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    16ca:	83 e0       	ldi	r24, 0x03	; 3
    16cc:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    16ce:	8a e2       	ldi	r24, 0x2A	; 42
    16d0:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    16d2:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    16d4:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    16d6:	de 01       	movw	r26, r28
    16d8:	15 96       	adiw	r26, 0x05	; 5
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    16de:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    16e0:	61 e2       	ldi	r22, 0x21	; 33
    16e2:	e4 2f       	mov	r30, r20
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	60 93 57 00 	sts	0x0057, r22
    16ea:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
    16ec:	80 ff       	sbrs	r24, 0
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <USB_Device_ProcessControlRequest+0x1d4>
					{
						SerialByte >>= 4;
    16f0:	e2 95       	swap	r30
    16f2:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    16f4:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    16f6:	ef 70       	andi	r30, 0x0F	; 15
    16f8:	2e 2f       	mov	r18, r30
    16fa:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    16fc:	ea 30       	cpi	r30, 0x0A	; 10
    16fe:	18 f0       	brcs	.+6      	; 0x1706 <USB_Device_ProcessControlRequest+0x1e4>
    1700:	29 5c       	subi	r18, 0xC9	; 201
    1702:	3f 4f       	sbci	r19, 0xFF	; 255
    1704:	02 c0       	rjmp	.+4      	; 0x170a <USB_Device_ProcessControlRequest+0x1e8>
    1706:	20 5d       	subi	r18, 0xD0	; 208
    1708:	3f 4f       	sbci	r19, 0xFF	; 255
    170a:	2d 93       	st	X+, r18
    170c:	3d 93       	st	X+, r19
    170e:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1710:	84 31       	cpi	r24, 0x14	; 20
    1712:	91 05       	cpc	r25, r1
    1714:	31 f7       	brne	.-52     	; 0x16e2 <USB_Device_ProcessControlRequest+0x1c0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1716:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1718:	80 91 e8 00 	lds	r24, 0x00E8
    171c:	87 7f       	andi	r24, 0xF7	; 247
    171e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1722:	ce 01       	movw	r24, r28
    1724:	03 96       	adiw	r24, 0x03	; 3
    1726:	6a e2       	ldi	r22, 0x2A	; 42
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	45 dc       	rcall	.-1910   	; 0xfb6 <Endpoint_Write_Control_Stream_LE>
    172c:	13 c0       	rjmp	.+38     	; 0x1754 <USB_Device_ProcessControlRequest+0x232>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    172e:	60 91 6d 01 	lds	r22, 0x016D
    1732:	ae 01       	movw	r20, r28
    1734:	4f 5f       	subi	r20, 0xFF	; 255
    1736:	5f 4f       	sbci	r21, 0xFF	; 255
    1738:	0e 94 3b 02 	call	0x476	; 0x476 <CALLBACK_USB_GetDescriptor>
    173c:	bc 01       	movw	r22, r24
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	09 f4       	brne	.+2      	; 0x1744 <USB_Device_ProcessControlRequest+0x222>
    1742:	3d c0       	rjmp	.+122    	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
    1744:	80 91 e8 00 	lds	r24, 0x00E8
    1748:	87 7f       	andi	r24, 0xF7	; 247
    174a:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	8f dc       	rcall	.-1762   	; 0x1072 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1754:	80 91 e8 00 	lds	r24, 0x00E8
    1758:	8b 77       	andi	r24, 0x7B	; 123
    175a:	80 93 e8 00 	sts	0x00E8, r24
    175e:	2f c0       	rjmp	.+94     	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1760:	80 38       	cpi	r24, 0x80	; 128
    1762:	69 f5       	brne	.+90     	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1764:	80 91 e8 00 	lds	r24, 0x00E8
    1768:	87 7f       	andi	r24, 0xF7	; 247
    176a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    176e:	80 91 64 01 	lds	r24, 0x0164
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1772:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1776:	80 91 e8 00 	lds	r24, 0x00E8
    177a:	8e 77       	andi	r24, 0x7E	; 126
    177c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1780:	0d dd       	rcall	.-1510   	; 0x119c <Endpoint_ClearStatusStage>
    1782:	1d c0       	rjmp	.+58     	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1784:	88 23       	and	r24, r24
    1786:	d9 f4       	brne	.+54     	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1788:	90 91 6b 01 	lds	r25, 0x016B
    178c:	92 30       	cpi	r25, 0x02	; 2
    178e:	b8 f4       	brcc	.+46     	; 0x17be <USB_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1790:	80 91 e8 00 	lds	r24, 0x00E8
    1794:	87 7f       	andi	r24, 0xF7	; 247
    1796:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    179a:	90 93 64 01 	sts	0x0164, r25

	Endpoint_ClearStatusStage();
    179e:	fe dc       	rcall	.-1540   	; 0x119c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    17a0:	80 91 64 01 	lds	r24, 0x0164
    17a4:	88 23       	and	r24, r24
    17a6:	21 f4       	brne	.+8      	; 0x17b0 <USB_Device_ProcessControlRequest+0x28e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    17a8:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    17ac:	87 ff       	sbrs	r24, 7
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <USB_Device_ProcessControlRequest+0x292>
    17b0:	84 e0       	ldi	r24, 0x04	; 4
    17b2:	01 c0       	rjmp	.+2      	; 0x17b6 <USB_Device_ProcessControlRequest+0x294>
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	80 93 68 01 	sts	0x0168, r24

	EVENT_USB_Device_ConfigurationChanged();
    17ba:	0e 94 ed 00 	call	0x1da	; 0x1da <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17be:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    17c2:	83 ff       	sbrs	r24, 3
    17c4:	0a c0       	rjmp	.+20     	; 0x17da <USB_Device_ProcessControlRequest+0x2b8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17c6:	80 91 e8 00 	lds	r24, 0x00E8
    17ca:	87 7f       	andi	r24, 0xF7	; 247
    17cc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    17d0:	80 91 eb 00 	lds	r24, 0x00EB
    17d4:	80 62       	ori	r24, 0x20	; 32
    17d6:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    17da:	ac 96       	adiw	r28, 0x2c	; 44
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	1f 91       	pop	r17
    17ec:	08 95       	ret

000017ee <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    17ee:	08 95       	ret

000017f0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    17f0:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    17f2:	80 91 68 01 	lds	r24, 0x0168
    17f6:	88 23       	and	r24, r24
    17f8:	a9 f0       	breq	.+42     	; 0x1824 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    17fa:	80 91 e9 00 	lds	r24, 0x00E9
    17fe:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1800:	90 91 ec 00 	lds	r25, 0x00EC
    1804:	90 ff       	sbrs	r25, 0
    1806:	02 c0       	rjmp	.+4      	; 0x180c <USB_USBTask+0x1c>
    1808:	10 e8       	ldi	r17, 0x80	; 128
    180a:	01 c0       	rjmp	.+2      	; 0x180e <USB_USBTask+0x1e>
    180c:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    180e:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1810:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1814:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1818:	83 ff       	sbrs	r24, 3
    181a:	01 c0       	rjmp	.+2      	; 0x181e <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
    181c:	82 de       	rcall	.-764    	; 0x1522 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    181e:	1f 70       	andi	r17, 0x0F	; 15
    1820:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1824:	1f 91       	pop	r17
    1826:	08 95       	ret

00001828 <_exit>:
    1828:	f8 94       	cli

0000182a <__stop_program>:
    182a:	ff cf       	rjmp	.-2      	; 0x182a <__stop_program>
