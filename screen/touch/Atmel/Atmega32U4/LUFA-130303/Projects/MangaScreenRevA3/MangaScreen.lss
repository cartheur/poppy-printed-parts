
MangaScreen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000048c  00800100  00003308  0000339c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003308  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011a  0080058c  0080058c  00003828  2**0
                  ALLOC
  3 .stab         00003798  00000000  00000000  00003828  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013b4  00000000  00000000  00006fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008374  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000798  00000000  00000000  00008385  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cc2f  00000000  00000000  00008b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000316e  00000000  00000000  0001574c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000044a1  00000000  00000000  000188ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015c0  00000000  00000000  0001cd5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000466f  00000000  00000000  0001e31c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008904  00000000  00000000  0002298b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008b8  00000000  00000000  0002b28f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	e7 c0       	rjmp	.+462    	; 0x1d0 <__ctors_end>
       2:	00 00       	nop
       4:	01 c1       	rjmp	.+514    	; 0x208 <__bad_interrupt>
       6:	00 00       	nop
       8:	ff c0       	rjmp	.+510    	; 0x208 <__bad_interrupt>
       a:	00 00       	nop
       c:	fd c0       	rjmp	.+506    	; 0x208 <__bad_interrupt>
       e:	00 00       	nop
      10:	fb c0       	rjmp	.+502    	; 0x208 <__bad_interrupt>
      12:	00 00       	nop
      14:	f9 c0       	rjmp	.+498    	; 0x208 <__bad_interrupt>
      16:	00 00       	nop
      18:	f7 c0       	rjmp	.+494    	; 0x208 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f5 c0       	rjmp	.+490    	; 0x208 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f3 c0       	rjmp	.+486    	; 0x208 <__bad_interrupt>
      22:	00 00       	nop
      24:	f1 c0       	rjmp	.+482    	; 0x208 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__vector_10>
      2c:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__vector_11>
      30:	eb c0       	rjmp	.+470    	; 0x208 <__bad_interrupt>
      32:	00 00       	nop
      34:	e9 c0       	rjmp	.+466    	; 0x208 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
      38:	e7 c0       	rjmp	.+462    	; 0x208 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e5 c0       	rjmp	.+458    	; 0x208 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e3 c0       	rjmp	.+454    	; 0x208 <__bad_interrupt>
      42:	00 00       	nop
      44:	e1 c0       	rjmp	.+450    	; 0x208 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	df c0       	rjmp	.+446    	; 0x208 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	dd c0       	rjmp	.+442    	; 0x208 <__bad_interrupt>
      4e:	00 00       	nop
      50:	db c0       	rjmp	.+438    	; 0x208 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	d9 c0       	rjmp	.+434    	; 0x208 <__bad_interrupt>
      56:	00 00       	nop
      58:	d7 c0       	rjmp	.+430    	; 0x208 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d5 c0       	rjmp	.+426    	; 0x208 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d3 c0       	rjmp	.+422    	; 0x208 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	d1 c0       	rjmp	.+418    	; 0x208 <__bad_interrupt>
      66:	00 00       	nop
      68:	cf c0       	rjmp	.+414    	; 0x208 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	cd c0       	rjmp	.+410    	; 0x208 <__bad_interrupt>
      6e:	00 00       	nop
      70:	cb c0       	rjmp	.+406    	; 0x208 <__bad_interrupt>
      72:	00 00       	nop
      74:	c9 c0       	rjmp	.+402    	; 0x208 <__bad_interrupt>
      76:	00 00       	nop
      78:	c7 c0       	rjmp	.+398    	; 0x208 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c5 c0       	rjmp	.+394    	; 0x208 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      80:	c3 c0       	rjmp	.+390    	; 0x208 <__bad_interrupt>
      82:	00 00       	nop
      84:	c1 c0       	rjmp	.+386    	; 0x208 <__bad_interrupt>
      86:	00 00       	nop
      88:	bf c0       	rjmp	.+382    	; 0x208 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      8c:	bd c0       	rjmp	.+378    	; 0x208 <__bad_interrupt>
      8e:	00 00       	nop
      90:	bb c0       	rjmp	.+374    	; 0x208 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      92:	00 00       	nop
      94:	b9 c0       	rjmp	.+370    	; 0x208 <__bad_interrupt>
      96:	00 00       	nop
      98:	b7 c0       	rjmp	.+366    	; 0x208 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      9a:	00 00       	nop

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	b5 c0       	rjmp	.+362    	; 0x208 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	b3 c0       	rjmp	.+358    	; 0x208 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b1 c0       	rjmp	.+354    	; 0x208 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	af c0       	rjmp	.+350    	; 0x208 <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      aa:	00 00       	nop
      ac:	42 10       	cpse	r4, r2
      ae:	64 10       	cpse	r6, r4
      b0:	4a 11       	cpse	r20, r10
      b2:	64 10       	cpse	r6, r4
      b4:	4a 11       	cpse	r20, r10
      b6:	a6 10       	cpse	r10, r6
      b8:	c8 10       	cpse	r12, r8
      ba:	4a 11       	cpse	r20, r10
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      bc:	1b 11       	cpse	r17, r11
      be:	2d 11       	cpse	r18, r13

000000c0 <ProductString>:
      c0:	24 03 43 00 44 00 43 00 20 00 61 00 6e 00 64 00     $.C.D.C. .a.n.d.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      d0:	20 00 44 00 69 00 67 00 69 00 74 00 69 00 7a 00      .D.i.g.i.t.i.z.

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      e0:	65 00 72 00 00 00                                   e.r...

000000e6 <ManufacturerString>:
      e6:	24 03 49 00 6e 00 74 00 65 00 6c 00 6c 00 69 00     $.I.n.t.e.l.l.i.
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f6:	67 00 65 00 6e 00 74 00 20 00 41 00 67 00 65 00     g.e.n.t. .A.g.e.
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     106:	6e 00 74 00 00 00                                   n.t...

0000010c <LanguageString>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10c:	04 03 09 04                                         ....

00000110 <ConfigurationDescriptor>:
     110:	09 02 5f 00 03 01 00 c0 7d 08 0b 00 02 02 02 01     .._.....}.......
     120:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     130:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     140:	04 01 00 02 0a 00 00 00 07 05 04 02 10 00 05 07     ................
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	05 83 02 10 00 05 09 04 02 00 01 03 00 00 00 09     ................
     160:	21 11 01 00 01 22 4e 00 07 05 81 03 08 00 05        !...."N........

0000016f <DeviceDescriptor>:
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16f:	12 01 10 01 00 00 00 08 eb 03 18 21 01 00 01 02     ...........!....
				ReportSize     -= 1;
				ReportData     += 1;
     17f:	dc 01                                               ..

00000181 <DigitizerReport>:
     181:	05 0d 09 04 a1 01 09 22 a1 02 09 42 15 00 25 01     ......."...B..%.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     191:	75 01 95 01 81 02 09 32 81 02 95 06 81 01 75 08     u......2......u.
     1a1:	95 01 09 30 81 02 09 51 81 02 09 55 81 02 05 01     ...0...Q...U....
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1b1:	26 ff 0f 75 10 55 0e 65 33 09 30 35 00 46 5b 04     &..u.U.e3.05.F[.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1c1:	81 02 46 8a 03 26 00 04 09 31 81 02 c0 c0 00        ..F..&...1.....

000001d0 <__ctors_end>:
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf ef       	ldi	r28, 0xFF	; 255
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	da e0       	ldi	r29, 0x0A	; 10
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dc:	15 e0       	ldi	r17, 0x05	; 5
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b1 e0       	ldi	r27, 0x01	; 1
     1e2:	e8 e0       	ldi	r30, 0x08	; 8
     1e4:	f3 e3       	ldi	r31, 0x33	; 51
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__do_copy_data+0x10>
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	05 90       	lpm	r0, Z+
     1ea:	0d 92       	st	X+, r0
				break;
     1ec:	ac 38       	cpi	r26, 0x8C	; 140
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__do_copy_data+0xc>

000001f2 <__do_clear_bss>:
     1f2:	16 e0       	ldi	r17, 0x06	; 6
     1f4:	ac e8       	ldi	r26, 0x8C	; 140
     1f6:	b5 e0       	ldi	r27, 0x05	; 5
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	a6 3a       	cpi	r26, 0xA6	; 166
     1fe:	b1 07       	cpc	r27, r17
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     202:	87 d1       	rcall	.+782    	; 0x512 <main>
     204:	0c 94 82 19 	jmp	0x3304	; 0x3304 <_exit>

00000208 <__bad_interrupt>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	fb ce       	rjmp	.-522    	; 0x0 <__vectors>

0000020a <LEDs_Init>:
     20a:	27 9a       	sbi	0x04, 7	; 4
     20c:	2f 98       	cbi	0x05, 7	; 5
     20e:	08 95       	ret

00000210 <LEDs_SetAllLEDs>:
     210:	95 b1       	in	r25, 0x05	; 5
     212:	9f 77       	andi	r25, 0x7F	; 127
     214:	98 2b       	or	r25, r24
     216:	95 b9       	out	0x05, r25	; 5
     218:	08 95       	ret

0000021a <putchar_printf>:
     21a:	cf 93       	push	r28
     21c:	c8 2f       	mov	r28, r24
     21e:	8a 30       	cpi	r24, 0x0A	; 10
     220:	29 f4       	brne	.+10     	; 0x22c <putchar_printf+0x12>
     222:	6d e0       	ldi	r22, 0x0D	; 13
     224:	8e e1       	ldi	r24, 0x1E	; 30
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	0e 94 a4 11 	call	0x2348	; 0x2348 <CDC_Device_SendByte>
     22c:	6c 2f       	mov	r22, r28
     22e:	8e e1       	ldi	r24, 0x1E	; 30
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	0e 94 a4 11 	call	0x2348	; 0x2348 <CDC_Device_SendByte>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <SetupHardware>:
     23e:	cf 93       	push	r28
     240:	84 b7       	in	r24, 0x34	; 52
     242:	87 7f       	andi	r24, 0xF7	; 247
     244:	84 bf       	out	0x34, r24	; 52
     246:	88 e1       	ldi	r24, 0x18	; 24
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	f8 94       	cli
     24c:	80 93 60 00 	sts	0x0060, r24
     250:	10 92 60 00 	sts	0x0060, r1
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     254:	0f be       	out	0x3f, r0	; 63
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	80 e8       	ldi	r24, 0x80	; 128
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	80 93 61 00 	sts	0x0061, r24
     262:	90 93 61 00 	sts	0x0061, r25
     266:	0f be       	out	0x3f, r0	; 63
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	9f d2       	rcall	.+1342   	; 0x7aa <BL_on>
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	9c e9       	ldi	r25, 0x9C	; 156
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	01 97       	sbiw	r24, 0x01	; 1
				break;
     272:	f1 f7       	brne	.-4      	; 0x270 <SetupHardware+0x32>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	00 c0       	rjmp	.+0      	; 0x276 <SetupHardware+0x38>
     276:	00 00       	nop
     278:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <USB_Init>
     27c:	3c d2       	rcall	.+1144   	; 0x6f6 <LCD_Init>
     27e:	00 97       	sbiw	r24, 0x00	; 0
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	61 f0       	breq	.+24     	; 0x29a <SetupHardware+0x5c>
     282:	9f 93       	push	r25
				break;
     284:	8f 93       	push	r24
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	84 e4       	ldi	r24, 0x44	; 68
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	9f 93       	push	r25
     28c:	8f 93       	push	r24
     28e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0e 94 30 0c 	call	0x1860	; 0x1860 <Digitizer_Init>
     29e:	00 97       	sbiw	r24, 0x00	; 0
				break;
     2a0:	61 f1       	breq	.+88     	; 0x2fa <SetupHardware+0xbc>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	9f 93       	push	r25
     2a4:	8f 93       	push	r24
     2a6:	83 e5       	ldi	r24, 0x53	; 83
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	9f 93       	push	r25
				break;
     2ac:	8f 93       	push	r24
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
     2b2:	ab df       	rcall	.-170    	; 0x20a <LEDs_Init>
     2b4:	2f 9a       	sbi	0x05, 7	; 5
     2b6:	9f ef       	ldi	r25, 0xFF	; 255
     2b8:	21 ee       	ldi	r18, 0xE1	; 225
     2ba:	84 e0       	ldi	r24, 0x04	; 4
				break;
     2bc:	91 50       	subi	r25, 0x01	; 1
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	80 40       	sbci	r24, 0x00	; 0
     2c2:	e1 f7       	brne	.-8      	; 0x2bc <SetupHardware+0x7e>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <SetupHardware+0x88>
     2c6:	00 00       	nop
     2c8:	2f 98       	cbi	0x05, 7	; 5
     2ca:	9f ef       	ldi	r25, 0xFF	; 255
				break;
     2cc:	21 ee       	ldi	r18, 0xE1	; 225
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	84 e0       	ldi	r24, 0x04	; 4
     2d0:	91 50       	subi	r25, 0x01	; 1
     2d2:	20 40       	sbci	r18, 0x00	; 0
				break;
     2d4:	80 40       	sbci	r24, 0x00	; 0
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <SetupHardware+0x92>
     2d8:	00 c0       	rjmp	.+0      	; 0x2da <SetupHardware+0x9c>
     2da:	00 00       	nop

				if (ParserData->UsingReportIDs)
     2dc:	2f 9a       	sbi	0x05, 7	; 5
     2de:	9f ef       	ldi	r25, 0xFF	; 255
     2e0:	21 ee       	ldi	r18, 0xE1	; 225
     2e2:	84 e0       	ldi	r24, 0x04	; 4
     2e4:	91 50       	subi	r25, 0x01	; 1
     2e6:	20 40       	sbci	r18, 0x00	; 0
     2e8:	80 40       	sbci	r24, 0x00	; 0
     2ea:	e1 f7       	brne	.-8      	; 0x2e4 <SetupHardware+0xa6>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <SetupHardware+0xb0>
     2ee:	00 00       	nop
     2f0:	2f 98       	cbi	0x05, 7	; 5
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	3f 9a       	sbi	0x07, 7	; 7
     2fc:	47 9a       	sbi	0x08, 7	; 8
     2fe:	25 9a       	sbi	0x04, 5	; 4
     300:	2d 9a       	sbi	0x05, 5	; 5
     302:	8a b1       	in	r24, 0x0a	; 10
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	8c 7f       	andi	r24, 0xFC	; 252
     306:	8a b9       	out	0x0a, r24	; 10
     308:	8a b1       	in	r24, 0x0a	; 10
     30a:	8a 7f       	andi	r24, 0xFA	; 250
     30c:	8a b9       	out	0x0a, r24	; 10
     30e:	c0 e0       	ldi	r28, 0x00	; 0
     310:	8c 2f       	mov	r24, r28
     312:	4b d2       	rcall	.+1174   	; 0x7aa <BL_on>
     314:	8f e3       	ldi	r24, 0x3F	; 63
     316:	9c e9       	ldi	r25, 0x9C	; 156
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <SetupHardware+0xda>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <SetupHardware+0xe0>
     31e:	00 00       	nop
     320:	cf 5f       	subi	r28, 0xFF	; 255
     322:	cf 3f       	cpi	r28, 0xFF	; 255
     324:	a9 f7       	brne	.-22     	; 0x310 <SetupHardware+0xd2>
     326:	cf 91       	pop	r28
     328:	70 cf       	rjmp	.-288    	; 0x20a <LEDs_Init>

0000032a <execute_command>:
     32a:	68 e6       	ldi	r22, 0x68	; 104
     32c:	71 e0       	ldi	r23, 0x01	; 1
     32e:	89 e2       	ldi	r24, 0x29	; 41
     330:	96 e0       	ldi	r25, 0x06	; 6
     332:	0e 94 80 16 	call	0x2d00	; 0x2d00 <strcmp>
     336:	89 2b       	or	r24, r25
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	11 f4       	brne	.+4      	; 0x33e <execute_command+0x14>
     33a:	dd d1       	rcall	.+954    	; 0x6f6 <LCD_Init>
     33c:	4c c0       	rjmp	.+152    	; 0x3d6 <execute_command+0xac>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	67 e7       	ldi	r22, 0x77	; 119
     340:	71 e0       	ldi	r23, 0x01	; 1
     342:	89 e2       	ldi	r24, 0x29	; 41
     344:	96 e0       	ldi	r25, 0x06	; 6
     346:	0e 94 80 16 	call	0x2d00	; 0x2d00 <strcmp>
     34a:	89 2b       	or	r24, r25
     34c:	11 f4       	brne	.+4      	; 0x352 <execute_command+0x28>
     34e:	1c d2       	rcall	.+1080   	; 0x788 <LCD_UnInit>
     350:	42 c0       	rjmp	.+132    	; 0x3d6 <execute_command+0xac>
     352:	4e e0       	ldi	r20, 0x0E	; 14
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	67 e8       	ldi	r22, 0x87	; 135
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	89 e2       	ldi	r24, 0x29	; 41
     35c:	96 e0       	ldi	r25, 0x06	; 6
     35e:	0e 94 89 16 	call	0x2d12	; 0x2d12 <strncmp>
     362:	89 2b       	or	r24, r25
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	79 f4       	brne	.+30     	; 0x384 <execute_command+0x5a>
     366:	87 e3       	ldi	r24, 0x37	; 55
     368:	96 e0       	ldi	r25, 0x06	; 6
     36a:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <atoi>
					}
				}

				ParserData->UsingReportIDs = true;
     36e:	8f 3f       	cpi	r24, 0xFF	; 255
     370:	91 05       	cpc	r25, r1
     372:	09 f0       	breq	.+2      	; 0x376 <execute_command+0x4c>
     374:	10 f4       	brcc	.+4      	; 0x37a <execute_command+0x50>
     376:	19 d2       	rcall	.+1074   	; 0x7aa <BL_on>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	2e c0       	rjmp	.+92     	; 0x3d6 <execute_command+0xac>
     37a:	9f 93       	push	r25
     37c:	8f 93       	push	r24
     37e:	86 e9       	ldi	r24, 0x96	; 150
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	10 c0       	rjmp	.+32     	; 0x3a4 <execute_command+0x7a>
     384:	6e ee       	ldi	r22, 0xEE	; 238
     386:	72 e0       	ldi	r23, 0x02	; 2
				break;
     388:	89 e2       	ldi	r24, 0x29	; 41
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	96 e0       	ldi	r25, 0x06	; 6
     38c:	0e 94 80 16 	call	0x2d00	; 0x2d00 <strcmp>
     390:	89 2b       	or	r24, r25
     392:	89 f4       	brne	.+34     	; 0x3b6 <execute_command+0x8c>
     394:	0e 94 30 0c 	call	0x1860	; 0x1860 <Digitizer_Init>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     398:	00 97       	sbiw	r24, 0x00	; 0
     39a:	e9 f0       	breq	.+58     	; 0x3d6 <execute_command+0xac>
     39c:	9f 93       	push	r25
     39e:	8f 93       	push	r24
     3a0:	83 e5       	ldi	r24, 0x53	; 83
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	9f 93       	push	r25
     3a6:	8f 93       	push	r24
     3a8:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
				break;
     3b0:	0f 90       	pop	r0
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	0f 90       	pop	r0
     3b4:	10 c0       	rjmp	.+32     	; 0x3d6 <execute_command+0xac>
     3b6:	87 ec       	ldi	r24, 0xC7	; 199
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <puts>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	86 ed       	ldi	r24, 0xD6	; 214
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <puts>
     3c6:	88 ee       	ldi	r24, 0xE8	; 232
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <puts>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <puts>

					while (CurrCollectionPath->Parent != NULL)
     3d6:	84 e1       	ldi	r24, 0x14	; 20
     3d8:	92 e0       	ldi	r25, 0x02	; 2
     3da:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <puts>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3de:	8e e3       	ldi	r24, 0x3E	; 62
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <putchar>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	08 95       	ret

000003ec <HandleSerial>:
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	8f b7       	in	r24, 0x3f	; 63
     3f2:	f8 94       	cli
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	20 91 17 06 	lds	r18, 0x0617
     3f8:	30 91 18 06 	lds	r19, 0x0618
     3fc:	8f bf       	out	0x3f, r24	; 63
     3fe:	80 91 15 06 	lds	r24, 0x0615
     402:	90 91 16 06 	lds	r25, 0x0616
     406:	28 17       	cp	r18, r24
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	39 07       	cpc	r19, r25
     40a:	41 f1       	breq	.+80     	; 0x45c <HandleSerial+0x70>
     40c:	8e e1       	ldi	r24, 0x1E	; 30
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 0f 12 	call	0x241e	; 0x241e <CDC_Device_ReceiveByte>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     414:	97 fd       	sbrc	r25, 7
     416:	22 c0       	rjmp	.+68     	; 0x45c <HandleSerial+0x70>
     418:	ed e0       	ldi	r30, 0x0D	; 13
     41a:	f6 e0       	ldi	r31, 0x06	; 6
     41c:	a0 81       	ld	r26, Z
     41e:	b1 81       	ldd	r27, Z+1	; 0x01

				if (UsageListSize)
     420:	8c 93       	st	X, r24
     422:	20 81       	ld	r18, Z
     424:	31 81       	ldd	r19, Z+1	; 0x01
     426:	2f 5f       	subi	r18, 0xFF	; 255
     428:	3f 4f       	sbci	r19, 0xFF	; 255
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	31 83       	std	Z+1, r19	; 0x01
     42c:	20 83       	st	Z, r18
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	24 17       	cp	r18, r20
     434:	35 07       	cpc	r19, r21
     436:	21 f4       	brne	.+8      	; 0x440 <HandleSerial+0x54>
     438:	24 81       	ldd	r18, Z+4	; 0x04
     43a:	35 81       	ldd	r19, Z+5	; 0x05
     43c:	31 83       	std	Z+1, r19	; 0x01
     43e:	20 83       	st	Z, r18

					for (uint8_t i = 0; i < UsageListSize; i++)
     440:	9f b7       	in	r25, 0x3f	; 63
					  UsageList[i] = UsageList[i + 1];
     442:	f8 94       	cli
     444:	22 85       	ldd	r18, Z+10	; 0x0a
     446:	33 85       	ldd	r19, Z+11	; 0x0b
     448:	2f 5f       	subi	r18, 0xFF	; 255

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     44a:	3f 4f       	sbci	r19, 0xFF	; 255
     44c:	33 87       	std	Z+11, r19	; 0x0b
     44e:	22 87       	std	Z+10, r18	; 0x0a
     450:	9f bf       	out	0x3f, r25	; 63
     452:	68 2f       	mov	r22, r24
     454:	8e e1       	ldi	r24, 0x1E	; 30
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	0e 94 a4 11 	call	0x2348	; 0x2348 <CDC_Device_SendByte>
     45c:	cd e0       	ldi	r28, 0x0D	; 13
     45e:	d6 e0       	ldi	r29, 0x06	; 6
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     460:	2f b7       	in	r18, 0x3f	; 63
     462:	f8 94       	cli
     464:	80 91 17 06 	lds	r24, 0x0617
     468:	90 91 18 06 	lds	r25, 0x0618
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46c:	2f bf       	out	0x3f, r18	; 63
     46e:	89 2b       	or	r24, r25
     470:	09 f4       	brne	.+2      	; 0x474 <HandleSerial+0x88>
     472:	4c c0       	rjmp	.+152    	; 0x50c <HandleSerial+0x120>
     474:	fe 01       	movw	r30, r28
     476:	a2 81       	ldd	r26, Z+2	; 0x02
     478:	b3 81       	ldd	r27, Z+3	; 0x03
     47a:	4d 91       	ld	r20, X+
     47c:	b3 83       	std	Z+3, r27	; 0x03
     47e:	a2 83       	std	Z+2, r26	; 0x02
     480:	86 81       	ldd	r24, Z+6	; 0x06
     482:	97 81       	ldd	r25, Z+7	; 0x07
     484:	a8 17       	cp	r26, r24
     486:	b9 07       	cpc	r27, r25
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     488:	21 f4       	brne	.+8      	; 0x492 <HandleSerial+0xa6>
     48a:	84 81       	ldd	r24, Z+4	; 0x04
     48c:	95 81       	ldd	r25, Z+5	; 0x05
     48e:	93 83       	std	Z+3, r25	; 0x03
     490:	82 83       	std	Z+2, r24	; 0x02
     492:	2f b7       	in	r18, 0x3f	; 63
     494:	f8 94       	cli
     496:	82 85       	ldd	r24, Z+10	; 0x0a
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     498:	93 85       	ldd	r25, Z+11	; 0x0b
     49a:	01 97       	sbiw	r24, 0x01	; 1
     49c:	93 87       	std	Z+11, r25	; 0x0b
     49e:	82 87       	std	Z+10, r24	; 0x0a
     4a0:	2f bf       	out	0x3f, r18	; 63
     4a2:	24 2f       	mov	r18, r20
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	80 91 27 06 	lds	r24, 0x0627
				break;
     4aa:	90 91 28 06 	lds	r25, 0x0628
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	2a 30       	cpi	r18, 0x0A	; 10
     4b0:	31 05       	cpc	r19, r1
     4b2:	19 f0       	breq	.+6      	; 0x4ba <HandleSerial+0xce>
     4b4:	2d 30       	cpi	r18, 0x0D	; 13
     4b6:	31 05       	cpc	r19, r1
     4b8:	e9 f4       	brne	.+58     	; 0x4f4 <HandleSerial+0x108>
     4ba:	18 16       	cp	r1, r24
     4bc:	19 06       	cpc	r1, r25
     4be:	6c f4       	brge	.+26     	; 0x4da <HandleSerial+0xee>
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	fc 01       	movw	r30, r24
     4c4:	e7 5d       	subi	r30, 0xD7	; 215
     4c6:	f9 4f       	sbci	r31, 0xF9	; 249
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c8:	20 81       	ld	r18, Z
     4ca:	2a 30       	cpi	r18, 0x0A	; 10
     4cc:	11 f0       	breq	.+4      	; 0x4d2 <HandleSerial+0xe6>
     4ce:	2d 30       	cpi	r18, 0x0D	; 13
     4d0:	21 f4       	brne	.+8      	; 0x4da <HandleSerial+0xee>
     4d2:	90 93 28 06 	sts	0x0628, r25
     4d6:	80 93 27 06 	sts	0x0627, r24
     4da:	e0 91 27 06 	lds	r30, 0x0627
     4de:	f0 91 28 06 	lds	r31, 0x0628
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e2:	e7 5d       	subi	r30, 0xD7	; 215
     4e4:	f9 4f       	sbci	r31, 0xF9	; 249
     4e6:	10 82       	st	Z, r1
     4e8:	20 df       	rcall	.-448    	; 0x32a <execute_command>
     4ea:	10 92 28 06 	sts	0x0628, r1
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4ee:	10 92 27 06 	sts	0x0627, r1
     4f2:	b6 cf       	rjmp	.-148    	; 0x460 <HandleSerial+0x74>
     4f4:	9c 01       	movw	r18, r24
     4f6:	2f 5f       	subi	r18, 0xFF	; 255
     4f8:	3f 4f       	sbci	r19, 0xFF	; 255
     4fa:	30 93 28 06 	sts	0x0628, r19
     4fe:	20 93 27 06 	sts	0x0627, r18
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	fc 01       	movw	r30, r24
					NewReportItem.CollectionPath = CurrCollectionPath;
     504:	e7 5d       	subi	r30, 0xD7	; 215
     506:	f9 4f       	sbci	r31, 0xF9	; 249
     508:	40 83       	st	Z, r20
     50a:	aa cf       	rjmp	.-172    	; 0x460 <HandleSerial+0x74>
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <main>:
     512:	80 e0       	ldi	r24, 0x00	; 0
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	90 93 a3 06 	sts	0x06A3, r25
     51a:	80 93 a2 06 	sts	0x06A2, r24

					if (UsageListSize)
     51e:	8f de       	rcall	.-738    	; 0x23e <SetupHardware>
     520:	ed e0       	ldi	r30, 0x0D	; 13
     522:	f6 e0       	ldi	r31, 0x06	; 6
     524:	2f b7       	in	r18, 0x3f	; 63
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     526:	f8 94       	cli
     528:	8d e8       	ldi	r24, 0x8D	; 141
     52a:	95 e0       	ldi	r25, 0x05	; 5
     52c:	91 83       	std	Z+1, r25	; 0x01
     52e:	80 83       	st	Z, r24
     530:	93 83       	std	Z+3, r25	; 0x03
     532:	82 83       	std	Z+2, r24	; 0x02
     534:	95 83       	std	Z+5, r25	; 0x05
     536:	84 83       	std	Z+4, r24	; 0x04
     538:	8d e0       	ldi	r24, 0x0D	; 13
     53a:	96 e0       	ldi	r25, 0x06	; 6

						for (uint8_t i = 0; i < UsageListSize; i++)
     53c:	97 83       	std	Z+7, r25	; 0x07
						  UsageList[i] = UsageList[i + 1];
     53e:	86 83       	std	Z+6, r24	; 0x06
     540:	80 e8       	ldi	r24, 0x80	; 128
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	91 87       	std	Z+9, r25	; 0x09

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     546:	80 87       	std	Z+8, r24	; 0x08
     548:	13 86       	std	Z+11, r1	; 0x0b
     54a:	12 86       	std	Z+10, r1	; 0x0a
     54c:	2f bf       	out	0x3f, r18	; 63
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	5f de       	rcall	.-834    	; 0x210 <LEDs_SetAllLEDs>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     552:	78 94       	sei
     554:	4b df       	rcall	.-362    	; 0x3ec <HandleSerial>
     556:	8e e1       	ldi	r24, 0x1E	; 30
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <CDC_Device_USBTask>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     55e:	8e e0       	ldi	r24, 0x0E	; 14
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	0e 94 38 14 	call	0x2870	; 0x2870 <HID_Device_USBTask>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     566:	0e 94 63 11 	call	0x22c6	; 0x22c6 <USB_USBTask>
     56a:	f4 cf       	rjmp	.-24     	; 0x554 <main+0x42>

0000056c <EVENT_USB_Device_Connect>:
     56c:	80 e8       	ldi	r24, 0x80	; 128
     56e:	50 ce       	rjmp	.-864    	; 0x210 <LEDs_SetAllLEDs>

00000570 <EVENT_USB_Device_Disconnect>:
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	4e ce       	rjmp	.-868    	; 0x210 <LEDs_SetAllLEDs>

00000574 <EVENT_USB_Device_ConfigurationChanged>:
     574:	cf 93       	push	r28
     576:	8e e0       	ldi	r24, 0x0E	; 14
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 25 14 	call	0x284a	; 0x284a <HID_Device_ConfigureEndpoints>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     57e:	c8 2f       	mov	r28, r24
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     580:	8e e1       	ldi	r24, 0x1E	; 30
     582:	91 e0       	ldi	r25, 0x01	; 1
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     584:	0e 94 7f 11 	call	0x22fe	; 0x22fe <CDC_Device_ConfigureEndpoints>
     588:	90 91 e2 00 	lds	r25, 0x00E2
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58c:	94 60       	ori	r25, 0x04	; 4

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     58e:	90 93 e2 00 	sts	0x00E2, r25
     592:	88 23       	and	r24, r24
     594:	21 f0       	breq	.+8      	; 0x59e <EVENT_USB_Device_ConfigurationChanged+0x2a>
     596:	cc 23       	and	r28, r28
     598:	11 f0       	breq	.+4      	; 0x59e <EVENT_USB_Device_ConfigurationChanged+0x2a>
     59a:	80 e8       	ldi	r24, 0x80	; 128
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <EVENT_USB_Device_ConfigurationChanged+0x2c>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	cf 91       	pop	r28
     5a2:	36 ce       	rjmp	.-916    	; 0x210 <LEDs_SetAllLEDs>

000005a4 <EVENT_USB_Device_ControlRequest>:
     5a4:	8e e1       	ldi	r24, 0x1E	; 30
     5a6:	91 e0       	ldi	r25, 0x01	; 1

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a8:	0e 94 45 12 	call	0x248a	; 0x248a <CDC_Device_ProcessControlRequest>
     5ac:	8e e0       	ldi	r24, 0x0E	; 14
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <HID_Device_ProcessControlRequest>

000005b4 <EVENT_USB_Device_StartOfFrame>:
     5b4:	80 91 1c 01 	lds	r24, 0x011C

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b8:	90 91 1d 01 	lds	r25, 0x011D
     5bc:	00 97       	sbiw	r24, 0x00	; 0
     5be:	29 f0       	breq	.+10     	; 0x5ca <EVENT_USB_Device_StartOfFrame+0x16>
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	90 93 1d 01 	sts	0x011D, r25
     5c6:	80 93 1c 01 	sts	0x011C, r24
     5ca:	08 95       	ret

000005cc <CALLBACK_HID_Device_CreateHIDReport>:
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	c9 01       	movw	r24, r18
     5d6:	e8 01       	movw	r28, r16
     5d8:	bb d6       	rcall	.+3446   	; 0x1350 <Digitizer_get_report>
     5da:	89 2b       	or	r24, r25
     5dc:	19 f0       	breq	.+6      	; 0x5e4 <CALLBACK_HID_Device_CreateHIDReport+0x18>
     5de:	19 82       	std	Y+1, r1	; 0x01
     5e0:	18 82       	st	Y, r1
     5e2:	04 c0       	rjmp	.+8      	; 0x5ec <CALLBACK_HID_Device_CreateHIDReport+0x20>
     5e4:	88 e0       	ldi	r24, 0x08	; 8
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	99 83       	std	Y+1, r25	; 0x01
     5ea:	88 83       	st	Y, r24
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	df 91       	pop	r29

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	08 95       	ret

000005f8 <CALLBACK_HID_Device_ProcessHIDReport>:
     5f8:	08 95       	ret

000005fa <CALLBACK_USB_GetDescriptor>:
					  return HID_PARSE_InsufficientReportItems;
     5fa:	29 2f       	mov	r18, r25
     5fc:	33 27       	eor	r19, r19

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5fe:	23 30       	cpi	r18, 0x03	; 3
     600:	31 05       	cpc	r19, r1
     602:	b9 f0       	breq	.+46     	; 0x632 <CALLBACK_USB_GetDescriptor+0x38>
     604:	5c f4       	brge	.+22     	; 0x61c <CALLBACK_USB_GetDescriptor+0x22>
     606:	21 30       	cpi	r18, 0x01	; 1
     608:	31 05       	cpc	r19, r1
     60a:	69 f1       	breq	.+90     	; 0x666 <CALLBACK_USB_GetDescriptor+0x6c>
     60c:	22 30       	cpi	r18, 0x02	; 2
     60e:	31 05       	cpc	r19, r1
     610:	79 f5       	brne	.+94     	; 0x670 <CALLBACK_USB_GetDescriptor+0x76>
     612:	8f e5       	ldi	r24, 0x5F	; 95
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	20 e1       	ldi	r18, 0x10	; 16
     618:	31 e0       	ldi	r19, 0x01	; 1
     61a:	2e c0       	rjmp	.+92     	; 0x678 <CALLBACK_USB_GetDescriptor+0x7e>
     61c:	21 32       	cpi	r18, 0x21	; 33
     61e:	31 05       	cpc	r19, r1
     620:	e9 f0       	breq	.+58     	; 0x65c <CALLBACK_USB_GetDescriptor+0x62>
     622:	22 32       	cpi	r18, 0x22	; 34
     624:	31 05       	cpc	r19, r1
     626:	21 f5       	brne	.+72     	; 0x670 <CALLBACK_USB_GetDescriptor+0x76>
     628:	8e e4       	ldi	r24, 0x4E	; 78
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	21 e8       	ldi	r18, 0x81	; 129
     62e:	31 e0       	ldi	r19, 0x01	; 1
     630:	23 c0       	rjmp	.+70     	; 0x678 <CALLBACK_USB_GetDescriptor+0x7e>
     632:	99 27       	eor	r25, r25
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	91 05       	cpc	r25, r1
     638:	41 f0       	breq	.+16     	; 0x64a <CALLBACK_USB_GetDescriptor+0x50>
     63a:	82 30       	cpi	r24, 0x02	; 2
     63c:	91 05       	cpc	r25, r1
     63e:	41 f0       	breq	.+16     	; 0x650 <CALLBACK_USB_GetDescriptor+0x56>
     640:	89 2b       	or	r24, r25
     642:	b1 f4       	brne	.+44     	; 0x670 <CALLBACK_USB_GetDescriptor+0x76>
     644:	ec e0       	ldi	r30, 0x0C	; 12
     646:	f1 e0       	ldi	r31, 0x01	; 1
     648:	05 c0       	rjmp	.+10     	; 0x654 <CALLBACK_USB_GetDescriptor+0x5a>
     64a:	e6 ee       	ldi	r30, 0xE6	; 230
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	02 c0       	rjmp	.+4      	; 0x654 <CALLBACK_USB_GetDescriptor+0x5a>
     650:	e0 ec       	ldi	r30, 0xC0	; 192
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	84 91       	lpm	r24, Z
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	9f 01       	movw	r18, r30
     65a:	0e c0       	rjmp	.+28     	; 0x678 <CALLBACK_USB_GetDescriptor+0x7e>
     65c:	89 e0       	ldi	r24, 0x09	; 9
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	2f e5       	ldi	r18, 0x5F	; 95
     662:	31 e0       	ldi	r19, 0x01	; 1
     664:	09 c0       	rjmp	.+18     	; 0x678 <CALLBACK_USB_GetDescriptor+0x7e>
     666:	82 e1       	ldi	r24, 0x12	; 18
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	2f e6       	ldi	r18, 0x6F	; 111
     66c:	31 e0       	ldi	r19, 0x01	; 1
     66e:	04 c0       	rjmp	.+8      	; 0x678 <CALLBACK_USB_GetDescriptor+0x7e>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	fa 01       	movw	r30, r20
     67a:	31 83       	std	Z+1, r19	; 0x01
     67c:	20 83       	st	Z, r18
     67e:	08 95       	ret

00000680 <LCD_CS_Low>:
     680:	28 98       	cbi	0x05, 0	; 5
     682:	08 95       	ret

00000684 <LCD_CS_High>:
					  ParserData->TotalReportItems++;
     684:	28 9a       	sbi	0x05, 0	; 5
     686:	08 95       	ret

00000688 <LcdWrite>:
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	00 d0       	rcall	.+0      	; 0x68e <LcdWrite+0x6>
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     68e:	1f 92       	push	r1
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	44 23       	and	r20, r20
     696:	39 f0       	breq	.+14     	; 0x6a6 <LcdWrite+0x1e>
     698:	4b 83       	std	Y+3, r20	; 0x03
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69a:	6a 83       	std	Y+2, r22	; 0x02
     69c:	89 83       	std	Y+1, r24	; 0x01
     69e:	f0 df       	rcall	.-32     	; 0x680 <LCD_CS_Low>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	6a 81       	ldd	r22, Y+2	; 0x02
     6a4:	4b 81       	ldd	r20, Y+3	; 0x03
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6a6:	88 23       	and	r24, r24
     6a8:	11 f0       	breq	.+4      	; 0x6ae <LcdWrite+0x26>
     6aa:	2a 9a       	sbi	0x05, 2	; 5
     6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <LcdWrite+0x28>
		}
	}

	if (!(ParserData->TotalReportItems))
     6ae:	2a 98       	cbi	0x05, 2	; 5
     6b0:	29 98       	cbi	0x05, 1	; 5
     6b2:	29 9a       	sbi	0x05, 1	; 5
     6b4:	87 e0       	ldi	r24, 0x07	; 7
	  return HID_PARSE_NoUnfilteredReportItems;
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6ba:	9b 01       	movw	r18, r22
     6bc:	08 2e       	mov	r0, r24

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <LcdWrite+0x3c>
     6c0:	35 95       	asr	r19

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c2:	27 95       	ror	r18
     6c4:	0a 94       	dec	r0
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <LcdWrite+0x38>
     6c8:	20 ff       	sbrs	r18, 0
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <LcdWrite+0x48>
     6cc:	2a 9a       	sbi	0x05, 2	; 5
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <LcdWrite+0x4a>
     6d0:	2a 98       	cbi	0x05, 2	; 5
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d2:	29 98       	cbi	0x05, 1	; 5

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d4:	29 9a       	sbi	0x05, 1	; 5
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	80 f7       	brcc	.-32     	; 0x6ba <LcdWrite+0x32>
     6da:	44 23       	and	r20, r20
     6dc:	31 f0       	breq	.+12     	; 0x6ea <LcdWrite+0x62>
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	cd cf       	rjmp	.-102    	; 0x684 <LCD_CS_High>
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <LCD_Init>:
     6f6:	20 9a       	sbi	0x04, 0	; 4
     6f8:	21 9a       	sbi	0x04, 1	; 4
     6fa:	22 9a       	sbi	0x04, 2	; 4
     6fc:	23 98       	cbi	0x04, 3	; 4
     6fe:	24 9a       	sbi	0x04, 4	; 4
     700:	3f 9a       	sbi	0x07, 7	; 7
     702:	56 9a       	sbi	0x0a, 6	; 10
     704:	6e 9a       	sbi	0x0d, 6	; 13
     706:	57 9a       	sbi	0x0a, 7	; 10
	DDRC |=  PIN_PD;	// PC7
	DDRD |=  PIN_SCDT;	// PD6	
	DDRE |=  PIN_RESET;	// PE6
	DDRD |=  PIN_BL;   	// PD7
	
	PORTE |= PIN_RESET; 	//Reset high				
     708:	76 9a       	sbi	0x0e, 6	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70a:	2f ef       	ldi	r18, 0xFF	; 255
     70c:	81 ee       	ldi	r24, 0xE1	; 225
     70e:	94 e0       	ldi	r25, 0x04	; 4
     710:	21 50       	subi	r18, 0x01	; 1
     712:	80 40       	sbci	r24, 0x00	; 0
     714:	90 40       	sbci	r25, 0x00	; 0
     716:	e1 f7       	brne	.-8      	; 0x710 <LCD_Init+0x1a>
     718:	00 c0       	rjmp	.+0      	; 0x71a <LCD_Init+0x24>
     71a:	00 00       	nop
	_delay_ms(100); 			// Wait for power to become stable.
	PORTE &= ~PIN_RESET; 	// Reset low
     71c:	76 98       	cbi	0x0e, 6	; 14
     71e:	8f e9       	ldi	r24, 0x9F	; 159
     720:	9f e0       	ldi	r25, 0x0F	; 15
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <LCD_Init+0x2c>
     726:	00 c0       	rjmp	.+0      	; 0x728 <LCD_Init+0x32>
     728:	00 00       	nop
	_delay_ms(1); 			// Page 13 in manual for LCD
	PORTE |= PIN_RESET;		// Reset high
     72a:	76 9a       	sbi	0x0e, 6	; 14
     72c:	8f eb       	ldi	r24, 0xBF	; 191
     72e:	9d e5       	ldi	r25, 0x5D	; 93
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <LCD_Init+0x3a>
     734:	00 c0       	rjmp	.+0      	; 0x736 <LCD_Init+0x40>
     736:	00 00       	nop
	_delay_ms(6); 			// Page 13 in manual for LCD

	LcdWrite(LCD_C, 0x11, 1); // Sleep out command
     738:	41 e0       	ldi	r20, 0x01	; 1
     73a:	61 e1       	ldi	r22, 0x11	; 17
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	a4 df       	rcall	.-184    	; 0x688 <LcdWrite>
     740:	9f ef       	ldi	r25, 0xFF	; 255
     742:	2e e5       	ldi	r18, 0x5E	; 94
     744:	85 e0       	ldi	r24, 0x05	; 5
     746:	91 50       	subi	r25, 0x01	; 1
     748:	20 40       	sbci	r18, 0x00	; 0
     74a:	80 40       	sbci	r24, 0x00	; 0
     74c:	e1 f7       	brne	.-8      	; 0x746 <LCD_Init+0x50>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <LCD_Init+0x5a>
     750:	00 00       	nop
     752:	41 e0       	ldi	r20, 0x01	; 1
	_delay_ms(110);
	LcdWrite(LCD_C, 0x29, 1); // Display on command
     754:	69 e2       	ldi	r22, 0x29	; 41
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	97 df       	rcall	.-210    	; 0x688 <LcdWrite>
     75a:	92 df       	rcall	.-220    	; 0x680 <LCD_CS_Low>
     75c:	40 e0       	ldi	r20, 0x00	; 0

	LCD_CS_Low();
     75e:	6a e3       	ldi	r22, 0x3A	; 58
     760:	80 e0       	ldi	r24, 0x00	; 0
	LcdWrite(LCD_C, 0x3A, 0); // Interface pixel format
     762:	92 df       	rcall	.-220    	; 0x688 <LcdWrite>
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	60 e7       	ldi	r22, 0x70	; 112
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	8e df       	rcall	.-228    	; 0x688 <LcdWrite>
	LcdWrite(LCD_D, 0x70, 0); // 24 bit
     76c:	8b df       	rcall	.-234    	; 0x684 <LCD_CS_High>
     76e:	88 df       	rcall	.-240    	; 0x680 <LCD_CS_Low>
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	66 e3       	ldi	r22, 0x36	; 54
     774:	80 e0       	ldi	r24, 0x00	; 0
	LCD_CS_High();
     776:	88 df       	rcall	.-240    	; 0x688 <LcdWrite>
     778:	40 e0       	ldi	r20, 0x00	; 0

	LCD_CS_Low();
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	81 e0       	ldi	r24, 0x01	; 1
	LcdWrite(LCD_C, 0x36, 0); // Memory Access Control
     77e:	84 df       	rcall	.-248    	; 0x688 <LcdWrite>
     780:	81 df       	rcall	.-254    	; 0x684 <LCD_CS_High>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	08 95       	ret

00000788 <LCD_UnInit>:
	LcdWrite(LCD_D, 0x00, 0); // 24 bit
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	68 e2       	ldi	r22, 0x28	; 40
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	7c df       	rcall	.-264    	; 0x688 <LcdWrite>
     790:	2f ef       	ldi	r18, 0xFF	; 255
	LCD_CS_High();
     792:	8e e5       	ldi	r24, 0x5E	; 94
     794:	95 e0       	ldi	r25, 0x05	; 5

	return 0;		
}
     796:	21 50       	subi	r18, 0x01	; 1
     798:	80 40       	sbci	r24, 0x00	; 0
     79a:	90 40       	sbci	r25, 0x00	; 0
     79c:	e1 f7       	brne	.-8      	; 0x796 <LCD_UnInit+0xe>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <LCD_UnInit+0x18>
     7a0:	00 00       	nop
     7a2:	41 e0       	ldi	r20, 0x01	; 1

void LCD_UnInit(void){
	LcdWrite(LCD_C, 0x28, 1); // Sleep out command
	_delay_ms(110);
	LcdWrite(LCD_C, 0x10, 1); // Display on command
     7a4:	60 e1       	ldi	r22, 0x10	; 16
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	6f cf       	rjmp	.-290    	; 0x688 <LcdWrite>

000007aa <BL_on>:
     7aa:	99 e0       	ldi	r25, 0x09	; 9
     7ac:	90 93 c1 00 	sts	0x00C1, r25

/* Setup PWM on pin PD7, see page 162 in the Datasheet */
void BL_on(char duty){

	TCCR4B = (0<<PWM4X)  | (0<<PSR4) | (0<<DTPS41) | (0<<DTPS40) | (1<<CS43) | (0<<CS42) | (0<<CS41) | (1<<CS40); 
	TCCR4C = (1<<COM4D1) | (0<<COM4D0) | (0<<FOC4D) | (1<<PWM4D); 
     7b0:	90 93 c2 00 	sts	0x00C2, r25
	TCCR4D = (0<<WGM41)  | (0<<WGM40); // Count up -mode, Fast PWM if PWM4D == 1
     7b4:	10 92 c3 00 	sts	0x00C3, r1
	TCCR4E = (0<<TLOCK4) | (0<<ENHC4) | (0<<OC4OE5) | (0<<OC4OE4) | (0<<OC4OE3) | (0<<OC4OE2) | (0<<OC4OE1) | (0<<OC4OE0); 
     7b8:	10 92 c4 00 	sts	0x00C4, r1

	OCR4C = 0xFF;		// Top value of counter 
     7bc:	9f ef       	ldi	r25, 0xFF	; 255
     7be:	90 93 d1 00 	sts	0x00D1, r25
   	OCR4D = (0xFF-duty); 		//set 75% duty cycle 
     7c2:	80 95       	com	r24
     7c4:	80 93 d2 00 	sts	0x00D2, r24
     7c8:	08 95       	ret

000007ca <mxt_is_T9_message>:
unsigned mxt_extract_T6_csum(const u32 *csum){
	return csum[0] | (csum[1] << 8) | (csum[2] << 16);
}

bool mxt_is_T9_message(struct mxt_data *data, struct mxt_message *msg){
	u8 id = msg->reportid;
     7ca:	fb 01       	movw	r30, r22
     7cc:	20 81       	ld	r18, Z
	return (id >= data->T9_reportid_min && id <= data->T9_reportid_max);
     7ce:	fc 01       	movw	r30, r24
     7d0:	ec 59       	subi	r30, 0x9C	; 156
     7d2:	ff 4f       	sbci	r31, 0xFF	; 255
     7d4:	30 81       	ld	r19, Z
     7d6:	23 17       	cp	r18, r19
     7d8:	38 f0       	brcs	.+14     	; 0x7e8 <mxt_is_T9_message+0x1e>
     7da:	fc 01       	movw	r30, r24
     7dc:	eb 59       	subi	r30, 0x9B	; 155
     7de:	ff 4f       	sbci	r31, 0xFF	; 255
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 81       	ld	r25, Z
     7e4:	92 17       	cp	r25, r18
     7e6:	08 f4       	brcc	.+2      	; 0x7ea <mxt_is_T9_message+0x20>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
}
     7ea:	81 70       	andi	r24, 0x01	; 1
     7ec:	08 95       	ret

000007ee <mxt_object_writable>:
	return ret;
}


bool mxt_object_writable(unsigned int type){
	switch (type) {
     7ee:	8c 32       	cpi	r24, 0x2C	; 44
     7f0:	91 05       	cpc	r25, r1
     7f2:	e0 f4       	brcc	.+56     	; 0x82c <mxt_object_writable+0x3e>
     7f4:	88 32       	cpi	r24, 0x28	; 40
     7f6:	91 05       	cpc	r25, r1
     7f8:	88 f5       	brcc	.+98     	; 0x85c <mxt_object_writable+0x6e>
     7fa:	85 31       	cpi	r24, 0x15	; 21
     7fc:	91 05       	cpc	r25, r1
     7fe:	60 f4       	brcc	.+24     	; 0x818 <mxt_object_writable+0x2a>
     800:	82 31       	cpi	r24, 0x12	; 18
     802:	91 05       	cpc	r25, r1
     804:	58 f5       	brcc	.+86     	; 0x85c <mxt_object_writable+0x6e>
     806:	86 30       	cpi	r24, 0x06	; 6
     808:	91 05       	cpc	r25, r1
     80a:	50 f1       	brcs	.+84     	; 0x860 <mxt_object_writable+0x72>
     80c:	8a 30       	cpi	r24, 0x0A	; 10
     80e:	91 05       	cpc	r25, r1
     810:	28 f1       	brcs	.+74     	; 0x85c <mxt_object_writable+0x6e>
     812:	0f 97       	sbiw	r24, 0x0f	; 15
     814:	29 f5       	brne	.+74     	; 0x860 <mxt_object_writable+0x72>
     816:	22 c0       	rjmp	.+68     	; 0x85c <mxt_object_writable+0x6e>
     818:	86 31       	cpi	r24, 0x16	; 22
     81a:	91 05       	cpc	r25, r1
     81c:	08 f1       	brcs	.+66     	; 0x860 <mxt_object_writable+0x72>
     81e:	8a 31       	cpi	r24, 0x1A	; 26
     820:	91 05       	cpc	r25, r1
     822:	e0 f0       	brcs	.+56     	; 0x85c <mxt_object_writable+0x6e>
     824:	4b 97       	sbiw	r24, 0x1b	; 27
     826:	02 97       	sbiw	r24, 0x02	; 2
     828:	d8 f4       	brcc	.+54     	; 0x860 <mxt_object_writable+0x72>
     82a:	18 c0       	rjmp	.+48     	; 0x85c <mxt_object_writable+0x6e>
     82c:	8a 33       	cpi	r24, 0x3A	; 58
     82e:	91 05       	cpc	r25, r1
     830:	60 f4       	brcc	.+24     	; 0x84a <mxt_object_writable+0x5c>
     832:	87 33       	cpi	r24, 0x37	; 55
     834:	91 05       	cpc	r25, r1
     836:	90 f4       	brcc	.+36     	; 0x85c <mxt_object_writable+0x6e>
     838:	8e 32       	cpi	r24, 0x2E	; 46
     83a:	91 05       	cpc	r25, r1
     83c:	88 f0       	brcs	.+34     	; 0x860 <mxt_object_writable+0x72>
     83e:	81 33       	cpi	r24, 0x31	; 49
     840:	91 05       	cpc	r25, r1
     842:	60 f0       	brcs	.+24     	; 0x85c <mxt_object_writable+0x6e>
     844:	c4 97       	sbiw	r24, 0x34	; 52
     846:	61 f4       	brne	.+24     	; 0x860 <mxt_object_writable+0x72>
     848:	09 c0       	rjmp	.+18     	; 0x85c <mxt_object_writable+0x6e>
     84a:	8d 33       	cpi	r24, 0x3D	; 61
     84c:	91 05       	cpc	r25, r1
     84e:	40 f0       	brcs	.+16     	; 0x860 <mxt_object_writable+0x72>
     850:	8f 33       	cpi	r24, 0x3F	; 63
     852:	91 05       	cpc	r25, r1
     854:	18 f0       	brcs	.+6      	; 0x85c <mxt_object_writable+0x6e>
     856:	81 34       	cpi	r24, 0x41	; 65
     858:	91 05       	cpc	r25, r1
     85a:	11 f4       	brne	.+4      	; 0x860 <mxt_object_writable+0x72>
	case MXT_SPT_SELFTEST_T25:
	case MXT_SPT_CTECONFIG_T28:
	case MXT_SPT_DIGITIZER_T43:
	case MXT_SPT_CTECONFIG_T46:
	case MXT_SPT_TIMER_T61:
		return true;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	08 95       	ret
	default:
		return false;
     860:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     862:	08 95       	ret

00000864 <mxt_free_object_table>:
inline size_t mxt_obj_instances(const struct mxt_object *obj){
	return obj->instances + 1;
}


void mxt_free_object_table(struct mxt_data *data){
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	ec 01       	movw	r28, r24
	free(data->object_table);
     86e:	8c 01       	movw	r16, r24
     870:	0c 5b       	subi	r16, 0xBC	; 188
     872:	1f 4f       	sbci	r17, 0xFF	; 255
     874:	f8 01       	movw	r30, r16
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <free>
	data->object_table = NULL;
     87e:	f8 01       	movw	r30, r16
     880:	11 82       	std	Z+1, r1	; 0x01
     882:	10 82       	st	Z, r1
	data->T6_reportid = 0;
     884:	fe 01       	movw	r30, r28
     886:	ed 59       	subi	r30, 0x9D	; 157
     888:	ff 4f       	sbci	r31, 0xFF	; 255
     88a:	10 82       	st	Z, r1
	data->T9_reportid_min = 0;
     88c:	fe 01       	movw	r30, r28
     88e:	ec 59       	subi	r30, 0x9C	; 156
     890:	ff 4f       	sbci	r31, 0xFF	; 255
     892:	10 82       	st	Z, r1
	data->T9_reportid_max = 0;
     894:	cb 59       	subi	r28, 0x9B	; 155
     896:	df 4f       	sbci	r29, 0xFF	; 255
     898:	18 82       	st	Y, r1

}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	08 95       	ret

000008a4 <crc24_step>:
	return 0;
}


/* Update 24-bit CRC with two new bytes of data */
u32 crc24_step(u32 crc, u8 byte1, u8 byte2){
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
	const u32 crcpoly = 0x80001b;
	u16 data = byte1 | (byte2 << 8);
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	52 2b       	or	r21, r18
	u32 result = data ^ (crc << 1);
     8ac:	8a 01       	movw	r16, r20
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	66 0f       	add	r22, r22
     8b4:	77 1f       	adc	r23, r23
     8b6:	88 1f       	adc	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	06 27       	eor	r16, r22
     8bc:	17 27       	eor	r17, r23
     8be:	28 27       	eor	r18, r24
     8c0:	39 27       	eor	r19, r25

	/* XOR result with crcpoly if bit 25 is set (overflow occurred) */
	if (result & 0x01000000)
     8c2:	30 ff       	sbrs	r19, 0
     8c4:	03 c0       	rjmp	.+6      	; 0x8cc <crc24_step+0x28>
		result ^= crcpoly;
     8c6:	8b e1       	ldi	r24, 0x1B	; 27
     8c8:	08 27       	eor	r16, r24
     8ca:	20 58       	subi	r18, 0x80	; 128

	return result & 0x00ffffff;
     8cc:	c9 01       	movw	r24, r18
     8ce:	b8 01       	movw	r22, r16
     8d0:	99 27       	eor	r25, r25
}
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	08 95       	ret

000008d8 <crc24>:

u32 crc24(u32 crc, const u8 *data, size_t len){
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	8a 01       	movw	r16, r20
     8ea:	79 01       	movw	r14, r18
	size_t i;

	for (i = 0; i < len - 1; i += 2)
     8ec:	c0 e0       	ldi	r28, 0x00	; 0
     8ee:	d0 e0       	ldi	r29, 0x00	; 0
     8f0:	69 01       	movw	r12, r18
     8f2:	21 e0       	ldi	r18, 0x01	; 1
     8f4:	c2 1a       	sub	r12, r18
     8f6:	d1 08       	sbc	r13, r1
     8f8:	cc 15       	cp	r28, r12
     8fa:	dd 05       	cpc	r29, r13
     8fc:	40 f4       	brcc	.+16     	; 0x90e <crc24+0x36>
     8fe:	f8 01       	movw	r30, r16
     900:	ec 0f       	add	r30, r28
     902:	fd 1f       	adc	r31, r29
		crc = crc24_step(crc, data[i], data[i + 1]);
     904:	21 81       	ldd	r18, Z+1	; 0x01
     906:	40 81       	ld	r20, Z
     908:	cd df       	rcall	.-102    	; 0x8a4 <crc24_step>
     90a:	22 96       	adiw	r28, 0x02	; 2
}

u32 crc24(u32 crc, const u8 *data, size_t len){
	size_t i;

	for (i = 0; i < len - 1; i += 2)
     90c:	f5 cf       	rjmp	.-22     	; 0x8f8 <crc24+0x20>
     90e:	ce 15       	cp	r28, r14
		crc = crc24_step(crc, data[i], data[i + 1]);

	/* If there were an odd number of bytes pad with 0 */
	if (i < len)
     910:	df 05       	cpc	r29, r15
     912:	68 f4       	brcc	.+26     	; 0x92e <crc24+0x56>
     914:	c0 0f       	add	r28, r16
		crc = crc24_step(crc, data[i], 0);
     916:	d1 1f       	adc	r29, r17
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	48 81       	ld	r20, Y
     91c:	df 91       	pop	r29

	return crc;
}
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	df 90       	pop	r13
     92a:	cf 90       	pop	r12
     92c:	bb cf       	rjmp	.-138    	; 0x8a4 <crc24_step>
	for (i = 0; i < len - 1; i += 2)
		crc = crc24_step(crc, data[i], data[i + 1]);

	/* If there were an odd number of bytes pad with 0 */
	if (i < len)
		crc = crc24_step(crc, data[i], 0);
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28

	return crc;
}
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	df 90       	pop	r13
     93c:	cf 90       	pop	r12
     93e:	08 95       	ret

00000940 <mxt_verify_info_block_csum>:
     940:	cf 92       	push	r12
     942:	df 92       	push	r13

int mxt_verify_info_block_csum(struct mxt_data *data){
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	8c 01       	movw	r16, r24
	size_t object_table_size, info_block_size;
	u32 crc = 0;
	u8 *info_block;
	int ret = 0;

	object_table_size = data->info.object_num * MXT_OBJECT_SIZE;
     952:	fc 01       	movw	r30, r24
     954:	e4 5b       	subi	r30, 0xB4	; 180
     956:	ff 4f       	sbci	r31, 0xFF	; 255
     958:	c0 80       	ld	r12, Z
     95a:	86 e0       	ldi	r24, 0x06	; 6
     95c:	c8 9e       	mul	r12, r24
     95e:	60 01       	movw	r12, r0
     960:	11 24       	eor	r1, r1
	info_block_size = sizeof(data->info) + object_table_size;
     962:	76 01       	movw	r14, r12
     964:	97 e0       	ldi	r25, 0x07	; 7
     966:	e9 0e       	add	r14, r25
     968:	f1 1c       	adc	r15, r1
	info_block = malloc(info_block_size);
     96a:	c7 01       	movw	r24, r14
     96c:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <malloc>
     970:	ec 01       	movw	r28, r24
	if (!info_block)
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	09 f4       	brne	.+2      	; 0x978 <mxt_verify_info_block_csum+0x38>
     976:	45 c0       	rjmp	.+138    	; 0xa02 <mxt_verify_info_block_csum+0xc2>
	 * Information Block CRC is computed over both ID info and Object Table
	 * So concat them in a temporary buffer, before computing CRC.
	 * TODO: refactor how the info block is read from the device such
	 * that it ends up in a single buffer and this copy is not needed.
	 */
	memcpy(info_block, &data->info, sizeof(data->info));
     978:	f8 01       	movw	r30, r16
     97a:	ea 5b       	subi	r30, 0xBA	; 186
     97c:	ff 4f       	sbci	r31, 0xFF	; 255
     97e:	87 e0       	ldi	r24, 0x07	; 7
     980:	de 01       	movw	r26, r28
     982:	01 90       	ld	r0, Z+
     984:	0d 92       	st	X+, r0
     986:	8a 95       	dec	r24
     988:	e1 f7       	brne	.-8      	; 0x982 <mxt_verify_info_block_csum+0x42>
	memcpy(&info_block[sizeof(data->info)], data->object_table,
     98a:	f8 01       	movw	r30, r16
     98c:	ec 5b       	subi	r30, 0xBC	; 188
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	60 81       	ld	r22, Z
     992:	71 81       	ldd	r23, Z+1	; 0x01
     994:	a6 01       	movw	r20, r12
     996:	ce 01       	movw	r24, r28
     998:	07 96       	adiw	r24, 0x07	; 7
     99a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <memcpy>
			object_table_size);

	crc = crc24(crc, info_block, info_block_size);
     99e:	97 01       	movw	r18, r14
     9a0:	ae 01       	movw	r20, r28
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	cb 01       	movw	r24, r22
     9a8:	97 df       	rcall	.-210    	; 0x8d8 <crc24>
     9aa:	f8 01       	movw	r30, r16

	if (crc != data->info_csum) {
     9ac:	e7 5a       	subi	r30, 0xA7	; 167
     9ae:	ff 4f       	sbci	r31, 0xFF	; 255
     9b0:	00 81       	ld	r16, Z
     9b2:	11 81       	ldd	r17, Z+1	; 0x01
     9b4:	22 81       	ldd	r18, Z+2	; 0x02
     9b6:	33 81       	ldd	r19, Z+3	; 0x03
     9b8:	60 17       	cp	r22, r16
     9ba:	71 07       	cpc	r23, r17
     9bc:	82 07       	cpc	r24, r18
     9be:	93 07       	cpc	r25, r19
     9c0:	c9 f0       	breq	.+50     	; 0x9f4 <mxt_verify_info_block_csum+0xb4>
     9c2:	9f 93       	push	r25
		dev_err("Information Block CRC mismatch: %06lx != %06lx\n", data->info_csum, crc);
     9c4:	8f 93       	push	r24
     9c6:	7f 93       	push	r23
     9c8:	6f 93       	push	r22
     9ca:	3f 93       	push	r19
     9cc:	2f 93       	push	r18
     9ce:	1f 93       	push	r17
     9d0:	0f 93       	push	r16
     9d2:	80 e2       	ldi	r24, 0x20	; 32
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	9f 93       	push	r25
     9d8:	8f 93       	push	r24
     9da:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
     9de:	8d b7       	in	r24, 0x3d	; 61
     9e0:	9e b7       	in	r25, 0x3e	; 62
     9e2:	0a 96       	adiw	r24, 0x0a	; 10
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	9e bf       	out	0x3e, r25	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	8d bf       	out	0x3d, r24	; 61
     9ee:	0a ee       	ldi	r16, 0xEA	; 234
		ret = -EINVAL;
     9f0:	1f ef       	ldi	r17, 0xFF	; 255
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <mxt_verify_info_block_csum+0xb8>
     9f4:	00 e0       	ldi	r16, 0x00	; 0

int mxt_verify_info_block_csum(struct mxt_data *data){
	size_t object_table_size, info_block_size;
	u32 crc = 0;
	u8 *info_block;
	int ret = 0;
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	ce 01       	movw	r24, r28
	if (crc != data->info_csum) {
		dev_err("Information Block CRC mismatch: %06lx != %06lx\n", data->info_csum, crc);
		ret = -EINVAL;
	}

	free(info_block);
     9fa:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <free>
     9fe:	c8 01       	movw	r24, r16
	return ret;
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <mxt_verify_info_block_csum+0xc6>
     a02:	84 ef       	ldi	r24, 0xF4	; 244

	object_table_size = data->info.object_num * MXT_OBJECT_SIZE;
	info_block_size = sizeof(data->info) + object_table_size;
	info_block = malloc(info_block_size);
	if (!info_block)
		return -ENOMEM;
     a04:	9f ef       	ldi	r25, 0xFF	; 255
     a06:	df 91       	pop	r29
		ret = -EINVAL;
	}

	free(info_block);
	return ret;
}
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	08 95       	ret

00000a18 <mxt_get_object>:
     a18:	cf 93       	push	r28
	return mxt_write_obj_instance(data, type, 0, offset, val);
}



struct mxt_object *mxt_get_object(struct mxt_data *data, u8 type){
     a1a:	df 93       	push	r29
	struct mxt_object *object;
	int i;

	for (i = 0; i < data->info.object_num; i++) {
     a1c:	fc 01       	movw	r30, r24
     a1e:	e4 5b       	subi	r30, 0xB4	; 180
     a20:	ff 4f       	sbci	r31, 0xFF	; 255
     a22:	a0 81       	ld	r26, Z
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
		object = data->object_table + i;
     a2e:	ec 01       	movw	r28, r24
     a30:	cc 5b       	subi	r28, 0xBC	; 188
     a32:	df 4f       	sbci	r29, 0xFF	; 255

struct mxt_object *mxt_get_object(struct mxt_data *data, u8 type){
	struct mxt_object *object;
	int i;

	for (i = 0; i < data->info.object_num; i++) {
     a34:	2a 17       	cp	r18, r26
     a36:	3b 07       	cpc	r19, r27
     a38:	64 f4       	brge	.+24     	; 0xa52 <mxt_get_object+0x3a>
		object = data->object_table + i;
     a3a:	e8 81       	ld	r30, Y
     a3c:	f9 81       	ldd	r31, Y+1	; 0x01
     a3e:	e4 0f       	add	r30, r20
     a40:	f5 1f       	adc	r31, r21
     a42:	4a 5f       	subi	r20, 0xFA	; 250
     a44:	5f 4f       	sbci	r21, 0xFF	; 255
		if (object->type == type)
     a46:	70 81       	ld	r23, Z
     a48:	76 17       	cp	r23, r22
     a4a:	51 f0       	breq	.+20     	; 0xa60 <mxt_get_object+0x48>

struct mxt_object *mxt_get_object(struct mxt_data *data, u8 type){
	struct mxt_object *object;
	int i;

	for (i = 0; i < data->info.object_num; i++) {
     a4c:	2f 5f       	subi	r18, 0xFF	; 255
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
     a50:	f1 cf       	rjmp	.-30     	; 0xa34 <mxt_get_object+0x1c>
		object = data->object_table + i;
		if (object->type == type)
			return object;
	}

	dev_err("Invalid object type\n");
     a52:	80 e5       	ldi	r24, 0x50	; 80
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <puts>

	return NULL;
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	01 c0       	rjmp	.+2      	; 0xa62 <mxt_get_object+0x4a>
struct mxt_object *mxt_get_object(struct mxt_data *data, u8 type){
	struct mxt_object *object;
	int i;

	for (i = 0; i < data->info.object_num; i++) {
		object = data->object_table + i;
     a60:	cf 01       	movw	r24, r30
	}

	dev_err("Invalid object type\n");

	return NULL;
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <mxt_input_touchevent>:
					 data->max_area_channels);
	return int_sqrt(DIV_ROUND_CLOSEST(touch_pixels * 100, 314)) * 2;
}


void mxt_input_touchevent(struct mxt_data *data, struct mxt_message *message, int id){
     a68:	4f 92       	push	r4
     a6a:	5f 92       	push	r5
     a6c:	6f 92       	push	r6
     a6e:	7f 92       	push	r7
     a70:	8f 92       	push	r8
     a72:	9f 92       	push	r9
     a74:	af 92       	push	r10
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	1f 92       	push	r1
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	2c 01       	movw	r4, r24
     a90:	fb 01       	movw	r30, r22
	u8 status = message->message[0];
     a92:	c1 80       	ldd	r12, Z+1	; 0x01
	int area;
	int pressure;
	int touch_major;
	int vector1, vector2;

	x = (message->message[1] << 4) | ((message->message[3] >> 4) & 0xf);
     a94:	84 81       	ldd	r24, Z+4	; 0x04
     a96:	98 2f       	mov	r25, r24
     a98:	92 95       	swap	r25
     a9a:	9f 70       	andi	r25, 0x0F	; 15
     a9c:	e2 80       	ldd	r14, Z+2	; 0x02
     a9e:	20 e1       	ldi	r18, 0x10	; 16
     aa0:	e2 9e       	mul	r14, r18
     aa2:	70 01       	movw	r14, r0
     aa4:	11 24       	eor	r1, r1
     aa6:	e9 2a       	or	r14, r25
	y = (message->message[2] << 4) | ((message->message[3] & 0xf));
     aa8:	8f 70       	andi	r24, 0x0F	; 15
     aaa:	03 81       	ldd	r16, Z+3	; 0x03
     aac:	30 e1       	ldi	r19, 0x10	; 16
     aae:	03 9f       	mul	r16, r19
     ab0:	80 01       	movw	r16, r0
     ab2:	11 24       	eor	r1, r1
     ab4:	08 2b       	or	r16, r24
	if (data->max_x < 1024)
     ab6:	d2 01       	movw	r26, r4
     ab8:	af 5a       	subi	r26, 0xAF	; 175
     aba:	bf 4f       	sbci	r27, 0xFF	; 255
     abc:	8d 91       	ld	r24, X+
     abe:	9c 91       	ld	r25, X
     ac0:	81 15       	cp	r24, r1
     ac2:	94 40       	sbci	r25, 0x04	; 4
     ac4:	20 f4       	brcc	.+8      	; 0xace <mxt_input_touchevent+0x66>
		x = x >> 2;
     ac6:	f5 94       	asr	r15
     ac8:	e7 94       	ror	r14
     aca:	f5 94       	asr	r15
     acc:	e7 94       	ror	r14
	if (data->max_y < 1024)
     ace:	d2 01       	movw	r26, r4
     ad0:	ad 5a       	subi	r26, 0xAD	; 173
     ad2:	bf 4f       	sbci	r27, 0xFF	; 255
     ad4:	8d 91       	ld	r24, X+
     ad6:	9c 91       	ld	r25, X
     ad8:	81 15       	cp	r24, r1
     ada:	94 40       	sbci	r25, 0x04	; 4
     adc:	20 f4       	brcc	.+8      	; 0xae6 <mxt_input_touchevent+0x7e>
		y = y >> 2;
     ade:	15 95       	asr	r17
     ae0:	07 95       	ror	r16
     ae2:	15 95       	asr	r17
     ae4:	07 95       	ror	r16

	area = message->message[4];
     ae6:	65 80       	ldd	r6, Z+5	; 0x05
	touch_major = get_touch_major_pixels(data, area);
	pressure = message->message[5];
     ae8:	d6 80       	ldd	r13, Z+6	; 0x06

	/* The two vector components are 4-bit signed ints (2s complement) */
	vector1 = (signed)((signed char)message->message[6]) >> 4;
     aea:	27 81       	ldd	r18, Z+7	; 0x07
     aec:	82 2e       	mov	r8, r18
     aee:	85 94       	asr	r8
     af0:	85 94       	asr	r8
     af2:	85 94       	asr	r8
     af4:	85 94       	asr	r8
     af6:	88 2d       	mov	r24, r8
     af8:	99 27       	eor	r25, r25
     afa:	87 fd       	sbrc	r24, 7
     afc:	90 95       	com	r25
	vector2 = (signed)((signed char)(message->message[6] << 4)) >> 4;
     afe:	b0 e1       	ldi	r27, 0x10	; 16
     b00:	2b 9f       	mul	r18, r27
     b02:	90 01       	movw	r18, r0
     b04:	11 24       	eor	r1, r1
     b06:	72 2e       	mov	r7, r18
     b08:	75 94       	asr	r7
     b0a:	75 94       	asr	r7
     b0c:	75 94       	asr	r7
     b0e:	75 94       	asr	r7
     b10:	27 2d       	mov	r18, r7
     b12:	33 27       	eor	r19, r19
     b14:	27 fd       	sbrc	r18, 7
     b16:	30 95       	com	r19

	dev_dbg("[%u] %c%c%c%c%c%c%c%c x: %5u y: %5u area: %3u amp: %3u vector: [%d,%d]\n",
     b18:	c0 fe       	sbrs	r12, 0
     b1a:	03 c0       	rjmp	.+6      	; 0xb22 <__stack+0x23>
     b1c:	a5 e5       	ldi	r26, 0x55	; 85
     b1e:	9a 2e       	mov	r9, r26
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <__stack+0x27>
     b22:	fe e2       	ldi	r31, 0x2E	; 46
     b24:	9f 2e       	mov	r9, r31
     b26:	c1 fe       	sbrs	r12, 1
     b28:	03 c0       	rjmp	.+6      	; 0xb30 <__stack+0x31>
     b2a:	e3 e5       	ldi	r30, 0x53	; 83
     b2c:	ae 2e       	mov	r10, r30
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <__stack+0x35>
     b30:	7e e2       	ldi	r23, 0x2E	; 46
     b32:	a7 2e       	mov	r10, r23
     b34:	c2 fe       	sbrs	r12, 2
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <__stack+0x3d>
     b38:	b1 e4       	ldi	r27, 0x41	; 65
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <__stack+0x3f>
     b3c:	be e2       	ldi	r27, 0x2E	; 46
     b3e:	c3 fe       	sbrs	r12, 3
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <__stack+0x47>
     b42:	a6 e5       	ldi	r26, 0x56	; 86
     b44:	01 c0       	rjmp	.+2      	; 0xb48 <__stack+0x49>
     b46:	ae e2       	ldi	r26, 0x2E	; 46
     b48:	c4 fe       	sbrs	r12, 4
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <__stack+0x51>
     b4c:	fd e4       	ldi	r31, 0x4D	; 77
     b4e:	01 c0       	rjmp	.+2      	; 0xb52 <__stack+0x53>
     b50:	fe e2       	ldi	r31, 0x2E	; 46
     b52:	c5 fe       	sbrs	r12, 5
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <__stack+0x5b>
     b56:	e2 e5       	ldi	r30, 0x52	; 82
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <__stack+0x5d>
     b5a:	ee e2       	ldi	r30, 0x2E	; 46
     b5c:	6c 2d       	mov	r22, r12
     b5e:	60 74       	andi	r22, 0x40	; 64
     b60:	b6 2e       	mov	r11, r22
     b62:	c6 fe       	sbrs	r12, 6
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <__stack+0x6b>
     b66:	70 e5       	ldi	r23, 0x50	; 80
     b68:	01 c0       	rjmp	.+2      	; 0xb6c <__stack+0x6d>
     b6a:	7e e2       	ldi	r23, 0x2E	; 46
     b6c:	c7 fe       	sbrs	r12, 7
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__stack+0x75>
     b70:	64 e4       	ldi	r22, 0x44	; 68
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <__stack+0x77>
     b74:	6e e2       	ldi	r22, 0x2E	; 46
     b76:	3f 93       	push	r19
     b78:	7f 92       	push	r7
     b7a:	9f 93       	push	r25
     b7c:	8f 92       	push	r8
     b7e:	1f 92       	push	r1
     b80:	df 92       	push	r13
     b82:	1f 92       	push	r1
     b84:	6f 92       	push	r6
     b86:	1f 93       	push	r17
     b88:	0f 93       	push	r16
     b8a:	ff 92       	push	r15
     b8c:	ef 92       	push	r14
     b8e:	1f 92       	push	r1
     b90:	9f 92       	push	r9
     b92:	1f 92       	push	r1
     b94:	af 92       	push	r10
     b96:	1f 92       	push	r1
     b98:	bf 93       	push	r27
     b9a:	1f 92       	push	r1
     b9c:	af 93       	push	r26
     b9e:	1f 92       	push	r1
     ba0:	ff 93       	push	r31
     ba2:	1f 92       	push	r1
     ba4:	ef 93       	push	r30
     ba6:	1f 92       	push	r1
     ba8:	7f 93       	push	r23
     baa:	1f 92       	push	r1
     bac:	6f 93       	push	r22
     bae:	5f 93       	push	r21
     bb0:	4f 93       	push	r20
     bb2:	84 e6       	ldi	r24, 0x64	; 100
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	9f 93       	push	r25
     bb8:	8f 93       	push	r24
     bba:	49 83       	std	Y+1, r20	; 0x01
     bbc:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
	//input_mt_slot(input_dev, id);
	//input_mt_report_slot_state(input_dev, MT_TOOL_FINGER,
	//			   status & MXT_DETECT);
	//data->current_id[id] = status & MXT_DETECT;

    data->report->Tip_and_InRange       = (status & MXT_PRESS)  ? 0x0 : 0x1;
     bc0:	d2 01       	movw	r26, r4
     bc2:	ed 91       	ld	r30, X+
     bc4:	fc 91       	ld	r31, X
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	49 81       	ldd	r20, Y+1	; 0x01
     bd4:	b1 10       	cpse	r11, r1
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	80 83       	st	Z, r24
    data->report->Tip_and_InRange      |= (status & MXT_DETECT) ? 0x0 : 0x3; 
     bda:	d2 01       	movw	r26, r4
     bdc:	ed 91       	ld	r30, X+
     bde:	fc 91       	ld	r31, X
     be0:	90 81       	ld	r25, Z
     be2:	c7 fe       	sbrs	r12, 7
     be4:	02 c0       	rjmp	.+4      	; 0xbea <__stack+0xeb>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	01 c0       	rjmp	.+2      	; 0xbec <__stack+0xed>
     bea:	83 e0       	ldi	r24, 0x03	; 3
     bec:	89 2b       	or	r24, r25
     bee:	80 83       	st	Z, r24
    data->report->Pressure              = pressure;
     bf0:	d2 01       	movw	r26, r4
     bf2:	ed 91       	ld	r30, X+
     bf4:	fc 91       	ld	r31, X
     bf6:	11 97       	sbiw	r26, 0x01	; 1
     bf8:	d1 82       	std	Z+1, r13	; 0x01
    data->report->Contact_identifier    = id;
     bfa:	ed 91       	ld	r30, X+
     bfc:	fc 91       	ld	r31, X
     bfe:	11 97       	sbiw	r26, 0x01	; 1
     c00:	42 83       	std	Z+2, r20	; 0x02
	data->report->Contact_count_max     = MXT_MAX_FINGER;	
     c02:	ed 91       	ld	r30, X+
     c04:	fc 91       	ld	r31, X
     c06:	11 97       	sbiw	r26, 0x01	; 1
     c08:	8a e0       	ldi	r24, 0x0A	; 10
     c0a:	83 83       	std	Z+3, r24	; 0x03
	data->report->X 				    = x;
     c0c:	ed 91       	ld	r30, X+
     c0e:	fc 91       	ld	r31, X
     c10:	11 97       	sbiw	r26, 0x01	; 1
     c12:	f5 82       	std	Z+5, r15	; 0x05
     c14:	e4 82       	std	Z+4, r14	; 0x04
	data->report->Y 				    = y;
     c16:	ed 91       	ld	r30, X+
     c18:	fc 91       	ld	r31, X
     c1a:	17 83       	std	Z+7, r17	; 0x07
     c1c:	06 83       	std	Z+6, r16	; 0x06
}
     c1e:	0f 90       	pop	r0
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	df 90       	pop	r13
     c2e:	cf 90       	pop	r12
     c30:	bf 90       	pop	r11
     c32:	af 90       	pop	r10
     c34:	9f 90       	pop	r9
     c36:	8f 90       	pop	r8
     c38:	7f 90       	pop	r7
     c3a:	6f 90       	pop	r6
     c3c:	5f 90       	pop	r5
     c3e:	4f 90       	pop	r4
     c40:	08 95       	ret

00000c42 <TWI_Init>:
 * Low level I2C stuff
 **************************************/

void TWI_Init(void){
    //set SCL to 400kHz
    TWSR = 0x00;
     c42:	10 92 b9 00 	sts	0x00B9, r1
    TWBR = 0x0C;
     c46:	8c e0       	ldi	r24, 0x0C	; 12
     c48:	80 93 b8 00 	sts	0x00B8, r24
    //enable TWI
    TWCR = (1<<TWEN);
     c4c:	84 e0       	ldi	r24, 0x04	; 4
     c4e:	80 93 bc 00 	sts	0x00BC, r24
     c52:	08 95       	ret

00000c54 <TWI_Start>:
}

// Send start signal 
void TWI_Start(void){
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     c54:	84 ea       	ldi	r24, 0xA4	; 164
     c56:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
     c5a:	80 91 bc 00 	lds	r24, 0x00BC
     c5e:	87 ff       	sbrs	r24, 7
     c60:	fc cf       	rjmp	.-8      	; 0xc5a <TWI_Start+0x6>
}
     c62:	08 95       	ret

00000c64 <TWI_Write>:
    TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
}

// Write a byte
void TWI_Write(uint8_t u8data){
    TWDR = u8data;
     c64:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWINT)|(1<<TWEN);
     c68:	84 e8       	ldi	r24, 0x84	; 132
     c6a:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
     c6e:	80 91 bc 00 	lds	r24, 0x00BC
     c72:	87 ff       	sbrs	r24, 7
     c74:	fc cf       	rjmp	.-8      	; 0xc6e <TWI_Write+0xa>
}
     c76:	08 95       	ret

00000c78 <i2c_send>:
	return 0;
}


// Send a message via I2C
int i2c_send(uint16_t addr, const u8 *buf, int count){
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	c8 2f       	mov	r28, r24
     c86:	8b 01       	movw	r16, r22
     c88:	7a 01       	movw	r14, r20
	int i;
	int stat;

	TWI_Start();						// First start condition 
     c8a:	e4 df       	rcall	.-56     	; 0xc54 <TWI_Start>
     c8c:	20 91 b9 00 	lds	r18, 0x00B9
    return TWDR;
}

// Get TWI status
uint8_t TWI_GetStatus(void){
    return TWSR & 0xF8;
     c90:	28 7f       	andi	r18, 0xF8	; 248
     c92:	30 e0       	ldi	r19, 0x00	; 0
int i2c_send(uint16_t addr, const u8 *buf, int count){
	int i;
	int stat;

	TWI_Start();						// First start condition 
	stat = TWI_GetStatus();
     c94:	28 30       	cpi	r18, 0x08	; 8
    if (stat != 0x08)
     c96:	31 05       	cpc	r19, r1
     c98:	91 f5       	brne	.+100    	; 0xcfe <i2c_send+0x86>
     c9a:	84 e9       	ldi	r24, 0x94	; 148
        return stat;

	TWI_Write((MXT_APP_LOW<<1));		// Chip address + write
     c9c:	e3 df       	rcall	.-58     	; 0xc64 <TWI_Write>
     c9e:	20 91 b9 00 	lds	r18, 0x00B9
    return TWDR;
}

// Get TWI status
uint8_t TWI_GetStatus(void){
    return TWSR & 0xF8;
     ca2:	28 7f       	andi	r18, 0xF8	; 248
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	28 31       	cpi	r18, 0x18	; 24
	stat = TWI_GetStatus();
    if (stat != 0x08)
        return stat;

	TWI_Write((MXT_APP_LOW<<1));		// Chip address + write
	stat = TWI_GetStatus();
     ca8:	31 05       	cpc	r19, r1
    if (stat != 0x18)
     caa:	49 f5       	brne	.+82     	; 0xcfe <i2c_send+0x86>
     cac:	8c 2f       	mov	r24, r28
     cae:	da df       	rcall	.-76     	; 0xc64 <TWI_Write>
        return stat;

	TWI_Write((addr & 0x00FF));			// Address low byte
     cb0:	20 91 b9 00 	lds	r18, 0x00B9
     cb4:	28 7f       	andi	r18, 0xF8	; 248
    return TWDR;
}

// Get TWI status
uint8_t TWI_GetStatus(void){
    return TWSR & 0xF8;
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	28 32       	cpi	r18, 0x28	; 40
     cba:	31 05       	cpc	r19, r1
	stat = TWI_GetStatus();
    if (stat != 0x18)
        return stat;

	TWI_Write((addr & 0x00FF));			// Address low byte
	stat = TWI_GetStatus();
     cbc:	01 f5       	brne	.+64     	; 0xcfe <i2c_send+0x86>
    if (stat != 0x28)
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	d1 df       	rcall	.-94     	; 0xc64 <TWI_Write>
     cc2:	20 91 b9 00 	lds	r18, 0x00B9
        return stat;

	TWI_Write((addr<<8 & 0xFF00));		// Address high byte
     cc6:	28 7f       	andi	r18, 0xF8	; 248
     cc8:	30 e0       	ldi	r19, 0x00	; 0
    return TWDR;
}

// Get TWI status
uint8_t TWI_GetStatus(void){
    return TWSR & 0xF8;
     cca:	28 32       	cpi	r18, 0x28	; 40
     ccc:	31 05       	cpc	r19, r1
     cce:	b9 f4       	brne	.+46     	; 0xcfe <i2c_send+0x86>
	stat = TWI_GetStatus();
    if (stat != 0x28)
        return stat;

	TWI_Write((addr<<8 & 0xFF00));		// Address high byte
	stat = TWI_GetStatus();
     cd0:	e8 01       	movw	r28, r16
    if (stat != 0x28)
     cd2:	ce 01       	movw	r24, r28
     cd4:	80 1b       	sub	r24, r16
     cd6:	91 0b       	sbc	r25, r17
     cd8:	8e 15       	cp	r24, r14
     cda:	9f 05       	cpc	r25, r15
     cdc:	54 f4       	brge	.+20     	; 0xcf2 <i2c_send+0x7a>
     cde:	89 91       	ld	r24, Y+
        return stat;

	for(i=0; i<count; i++){				// write the data
     ce0:	c1 df       	rcall	.-126    	; 0xc64 <TWI_Write>
     ce2:	20 91 b9 00 	lds	r18, 0x00B9
		TWI_Write(buf[i]);
     ce6:	28 7f       	andi	r18, 0xF8	; 248
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	28 32       	cpi	r18, 0x28	; 40
    return TWDR;
}

// Get TWI status
uint8_t TWI_GetStatus(void){
    return TWSR & 0xF8;
     cec:	31 05       	cpc	r19, r1
     cee:	89 f3       	breq	.-30     	; 0xcd2 <i2c_send+0x5a>
     cf0:	06 c0       	rjmp	.+12     	; 0xcfe <i2c_send+0x86>
    if (stat != 0x28)
        return stat;

	for(i=0; i<count; i++){				// write the data
		TWI_Write(buf[i]);
		stat = TWI_GetStatus();
     cf2:	84 e9       	ldi	r24, 0x94	; 148
		if (stat != 0x28)
     cf4:	80 93 bc 00 	sts	0x00BC, r24
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
    while ((TWCR & (1<<TWINT)) == 0);
}

//send stop signal
void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <i2c_send+0x88>
     cfe:	c9 01       	movw	r24, r18
     d00:	df 91       	pop	r29
		if (stat != 0x28)
		    return stat;
	}
	TWI_Stop();							// Send stop condition 

	return 0;
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
    if (stat != 0x28)
        return stat;

	for(i=0; i<count; i++){				// write the data
		TWI_Write(buf[i]);
		stat = TWI_GetStatus();
     d08:	ff 90       	pop	r15
		    return stat;
	}
	TWI_Stop();							// Send stop condition 

	return 0;
}
     d0a:	ef 90       	pop	r14
     d0c:	08 95       	ret

00000d0e <__mxt_write_reg>:
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	9a 01       	movw	r18, r20
     d14:	ab 01       	movw	r20, r22
     d16:	b9 01       	movw	r22, r18
}

int __mxt_write_reg(u16 reg, u16 len, const void *val){
	int ret;

	ret = i2c_send(reg, val, len);
     d18:	af df       	rcall	.-162    	; 0xc78 <i2c_send>
     d1a:	ec 01       	movw	r28, r24
     d1c:	00 97       	sbiw	r24, 0x00	; 0
	if (ret)
     d1e:	61 f0       	breq	.+24     	; 0xd38 <__mxt_write_reg+0x2a>
     d20:	df 93       	push	r29
		dev_err("__mxt_write_reg() failed: %04x\n", ret);
     d22:	cf 93       	push	r28
     d24:	8c ea       	ldi	r24, 0xAC	; 172
     d26:	92 e0       	ldi	r25, 0x02	; 2
     d28:	9f 93       	push	r25
     d2a:	8f 93       	push	r24
     d2c:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	ce 01       	movw	r24, r28

	return ret;
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	08 95       	ret

00000d40 <mxt_apply_pdata_config>:
     d40:	4f 92       	push	r4
	}

	return 0;
}

int mxt_apply_pdata_config(struct mxt_data *data){
     d42:	5f 92       	push	r5
     d44:	6f 92       	push	r6
     d46:	7f 92       	push	r7
     d48:	8f 92       	push	r8
     d4a:	9f 92       	push	r9
     d4c:	af 92       	push	r10
     d4e:	bf 92       	push	r11
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
	const struct mxt_platform_data *pdata = data->pdata;
     d60:	fc 01       	movw	r30, r24
     d62:	ee 5b       	subi	r30, 0xBE	; 190
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	00 81       	ld	r16, Z
     d68:	11 81       	ldd	r17, Z+1	; 0x01
	struct mxt_object *object;
	int index = 0;
	int i, size;
	int ret;

	if (!pdata->config) {
     d6a:	f8 01       	movw	r30, r16
     d6c:	20 81       	ld	r18, Z
     d6e:	31 81       	ldd	r19, Z+1	; 0x01
     d70:	23 2b       	or	r18, r19
     d72:	79 f0       	breq	.+30     	; 0xd92 <mxt_apply_pdata_config+0x52>
     d74:	c1 2c       	mov	r12, r1
     d76:	d1 2c       	mov	r13, r1
     d78:	e1 2c       	mov	r14, r1
     d7a:	f1 2c       	mov	r15, r1
     d7c:	41 2c       	mov	r4, r1
     d7e:	51 2c       	mov	r5, r1
		dev_info("No cfg data defined, skipping reg init\n");
		return 0;
	}

	for (i = 0; i < data->info.object_num; i++) {
     d80:	5c 01       	movw	r10, r24
     d82:	fc e4       	ldi	r31, 0x4C	; 76
     d84:	af 0e       	add	r10, r31
     d86:	b1 1c       	adc	r11, r1
		object = data->object_table + i;
     d88:	4c 01       	movw	r8, r24
     d8a:	24 e4       	ldi	r18, 0x44	; 68
     d8c:	82 0e       	add	r8, r18
     d8e:	91 1c       	adc	r9, r1
     d90:	17 c0       	rjmp	.+46     	; 0xdc0 <mxt_apply_pdata_config+0x80>
	int index = 0;
	int i, size;
	int ret;

	if (!pdata->config) {
		dev_info("No cfg data defined, skipping reg init\n");
     d92:	8c ec       	ldi	r24, 0xCC	; 204
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <puts>
     d9a:	48 c0       	rjmp	.+144    	; 0xe2c <mxt_apply_pdata_config+0xec>
		return 0;
	}

	for (i = 0; i < data->info.object_num; i++) {
		object = data->object_table + i;
     d9c:	f4 01       	movw	r30, r8
     d9e:	c0 81       	ld	r28, Z
     da0:	d1 81       	ldd	r29, Z+1	; 0x01
     da2:	cc 0d       	add	r28, r12
     da4:	dd 1d       	adc	r29, r13

		if (!mxt_object_writable(object->type))
     da6:	88 81       	ld	r24, Y
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	21 dd       	rcall	.-1470   	; 0x7ee <mxt_object_writable>
     dac:	81 11       	cpse	r24, r1
     dae:	0f c0       	rjmp	.+30     	; 0xdce <mxt_apply_pdata_config+0x8e>
     db0:	32 01       	movw	r6, r4
     db2:	ff ef       	ldi	r31, 0xFF	; 255
	if (!pdata->config) {
		dev_info("No cfg data defined, skipping reg init\n");
		return 0;
	}

	for (i = 0; i < data->info.object_num; i++) {
     db4:	ef 1a       	sub	r14, r31
     db6:	ff 0a       	sbc	r15, r31
     db8:	26 e0       	ldi	r18, 0x06	; 6
     dba:	c2 0e       	add	r12, r18
     dbc:	d1 1c       	adc	r13, r1
     dbe:	23 01       	movw	r4, r6
     dc0:	f5 01       	movw	r30, r10
     dc2:	80 81       	ld	r24, Z
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	e8 16       	cp	r14, r24
     dc8:	f9 06       	cpc	r15, r25
     dca:	44 f3       	brlt	.-48     	; 0xd9c <mxt_apply_pdata_config+0x5c>
     dcc:	2f c0       	rjmp	.+94     	; 0xe2c <mxt_apply_pdata_config+0xec>
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
inline size_t mxt_obj_size(const struct mxt_object *obj){
	return obj->size + 1;
}

inline size_t mxt_obj_instances(const struct mxt_object *obj){
	return obj->instances + 1;
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	2f 5f       	subi	r18, 0xFF	; 255
     dd4:	3f 4f       	sbci	r19, 0xFF	; 255
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
	//dev_dbg("reportid: %u\tmessage: %*ph\n", message->reportid, 7, message->message);
}


inline size_t mxt_obj_size(const struct mxt_object *obj){
	return obj->size + 1;
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	28 9f       	mul	r18, r24
		object = data->object_table + i;

		if (!mxt_object_writable(object->type))
			continue;

		size = mxt_obj_size(object) * mxt_obj_instances(object);
     dde:	b0 01       	movw	r22, r0
     de0:	29 9f       	mul	r18, r25
     de2:	70 0d       	add	r23, r0
     de4:	38 9f       	mul	r19, r24
     de6:	70 0d       	add	r23, r0
     de8:	11 24       	eor	r1, r1
     dea:	32 01       	movw	r6, r4
		if (index + size > pdata->config_length) {
     dec:	66 0e       	add	r6, r22
     dee:	77 1e       	adc	r7, r23
     df0:	f8 01       	movw	r30, r16
     df2:	82 81       	ldd	r24, Z+2	; 0x02
     df4:	93 81       	ldd	r25, Z+3	; 0x03
     df6:	86 15       	cp	r24, r6
     df8:	97 05       	cpc	r25, r7
     dfa:	38 f4       	brcc	.+14     	; 0xe0a <mxt_apply_pdata_config+0xca>
     dfc:	83 ef       	ldi	r24, 0xF3	; 243
			dev_err("Not enough config data!\n");
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <puts>
     e04:	8a ee       	ldi	r24, 0xEA	; 234
			return -EINVAL;
     e06:	9f ef       	ldi	r25, 0xFF	; 255
     e08:	13 c0       	rjmp	.+38     	; 0xe30 <mxt_apply_pdata_config+0xf0>
     e0a:	f8 01       	movw	r30, r16
		}

		ret = __mxt_write_reg(object->start_address,
     e0c:	40 81       	ld	r20, Z
     e0e:	51 81       	ldd	r21, Z+1	; 0x01
     e10:	44 0d       	add	r20, r4
     e12:	55 1d       	adc	r21, r5
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	7a df       	rcall	.-268    	; 0xd0e <__mxt_write_reg>
     e1a:	ec 01       	movw	r28, r24
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	49 f2       	breq	.-110    	; 0xdb2 <mxt_apply_pdata_config+0x72>
				size, &pdata->config[index]);
		if (ret){
     e20:	8b e0       	ldi	r24, 0x0B	; 11
     e22:	93 e0       	ldi	r25, 0x03	; 3
			dev_err("Failed to apply config\n");
     e24:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <puts>
     e28:	ce 01       	movw	r24, r28
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <mxt_apply_pdata_config+0xf0>
		if (index + size > pdata->config_length) {
			dev_err("Not enough config data!\n");
			return -EINVAL;
		}

		ret = __mxt_write_reg(object->start_address,
     e2c:	80 e0       	ldi	r24, 0x00	; 0
				size, &pdata->config[index]);
		if (ret){
			dev_err("Failed to apply config\n");
			return ret;
     e2e:	90 e0       	ldi	r25, 0x00	; 0
		}
		index += size;
	}

	return 0;
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
}
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	bf 90       	pop	r11
     e42:	af 90       	pop	r10
     e44:	9f 90       	pop	r9
     e46:	8f 90       	pop	r8
     e48:	7f 90       	pop	r7
     e4a:	6f 90       	pop	r6
     e4c:	5f 90       	pop	r5
     e4e:	4f 90       	pop	r4
     e50:	08 95       	ret

00000e52 <mxt_write_obj_instance>:
     e52:	0f 93       	push	r16
     e54:	cf 93       	push	r28

	return ret;
}


int mxt_write_obj_instance(struct mxt_data *data, u8 type, u8 instance, u8 offset, u8 val){
     e56:	df 93       	push	r29
     e58:	00 d0       	rcall	.+0      	; 0xe5a <mxt_write_obj_instance+0x8>
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	struct mxt_object *object;
	u16 reg;

	object = mxt_get_object(data, type);
     e5e:	2a 83       	std	Y+2, r18	; 0x02
     e60:	49 83       	std	Y+1, r20	; 0x01
     e62:	da dd       	rcall	.-1100   	; 0xa18 <mxt_get_object>
     e64:	fc 01       	movw	r30, r24
     e66:	2a 81       	ldd	r18, Y+2	; 0x02
	if (!object || offset >= mxt_obj_size(object) ||
     e68:	49 81       	ldd	r20, Y+1	; 0x01
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	39 f1       	breq	.+78     	; 0xebc <mxt_write_obj_instance+0x6a>
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	63 81       	ldd	r22, Z+3	; 0x03
	//dev_dbg("reportid: %u\tmessage: %*ph\n", message->reportid, 7, message->message);
}


inline size_t mxt_obj_size(const struct mxt_object *obj){
	return obj->size + 1;
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	6f 5f       	subi	r22, 0xFF	; 255
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	26 17       	cp	r18, r22
int mxt_write_obj_instance(struct mxt_data *data, u8 type, u8 instance, u8 offset, u8 val){
	struct mxt_object *object;
	u16 reg;

	object = mxt_get_object(data, type);
	if (!object || offset >= mxt_obj_size(object) ||
     e7a:	37 07       	cpc	r19, r23
     e7c:	f8 f4       	brcc	.+62     	; 0xebc <mxt_write_obj_instance+0x6a>
     e7e:	a4 2f       	mov	r26, r20
	    instance >= mxt_obj_instances(object))
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	84 81       	ldd	r24, Z+4	; 0x04
inline size_t mxt_obj_size(const struct mxt_object *obj){
	return obj->size + 1;
}

inline size_t mxt_obj_instances(const struct mxt_object *obj){
	return obj->instances + 1;
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	a8 17       	cp	r26, r24
int mxt_write_obj_instance(struct mxt_data *data, u8 type, u8 instance, u8 offset, u8 val){
	struct mxt_object *object;
	u16 reg;

	object = mxt_get_object(data, type);
	if (!object || offset >= mxt_obj_size(object) ||
     e8a:	b9 07       	cpc	r27, r25
     e8c:	b8 f4       	brcc	.+46     	; 0xebc <mxt_write_obj_instance+0x6a>
     e8e:	40 2f       	mov	r20, r16
	    instance >= mxt_obj_instances(object))
		return -EINVAL;

	reg = object->start_address + instance * mxt_obj_size(object) + offset;
	return __mxt_write_reg(reg, 1, val);
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	81 81       	ldd	r24, Z+1	; 0x01
	object = mxt_get_object(data, type);
	if (!object || offset >= mxt_obj_size(object) ||
	    instance >= mxt_obj_instances(object))
		return -EINVAL;

	reg = object->start_address + instance * mxt_obj_size(object) + offset;
     e94:	92 81       	ldd	r25, Z+2	; 0x02
     e96:	82 0f       	add	r24, r18
     e98:	93 1f       	adc	r25, r19
     e9a:	6a 9f       	mul	r22, r26
     e9c:	90 01       	movw	r18, r0
     e9e:	6b 9f       	mul	r22, r27
     ea0:	30 0d       	add	r19, r0
     ea2:	7a 9f       	mul	r23, r26
     ea4:	30 0d       	add	r19, r0
     ea6:	11 24       	eor	r1, r1
     ea8:	61 e0       	ldi	r22, 0x01	; 1
	return __mxt_write_reg(reg, 1, val);
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	82 0f       	add	r24, r18
     eae:	93 1f       	adc	r25, r19
     eb0:	0f 90       	pop	r0
}
     eb2:	0f 90       	pop	r0
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	0f 91       	pop	r16
     eba:	29 cf       	rjmp	.-430    	; 0xd0e <__mxt_write_reg>
	if (!object || offset >= mxt_obj_size(object) ||
	    instance >= mxt_obj_instances(object))
		return -EINVAL;

	reg = object->start_address + instance * mxt_obj_size(object) + offset;
	return __mxt_write_reg(reg, 1, val);
     ebc:	8a ee       	ldi	r24, 0xEA	; 234
     ebe:	9f ef       	ldi	r25, 0xFF	; 255
}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	0f 91       	pop	r16
     eca:	08 95       	ret

00000ecc <mxt_write_object>:
     ecc:	0f 93       	push	r16
     ece:	02 2f       	mov	r16, r18

int mxt_write_object(struct mxt_data *data, u8 type, u8 offset, u8 val){
	
	return mxt_write_obj_instance(data, type, 0, offset, val);
     ed0:	24 2f       	mov	r18, r20
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	be df       	rcall	.-132    	; 0xe52 <mxt_write_obj_instance>
     ed6:	0f 91       	pop	r16
}
     ed8:	08 95       	ret

00000eda <mxt_handle_pdata>:
     eda:	0f 93       	push	r16
	}

	return 0;
}

int mxt_handle_pdata(struct mxt_data *data){
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ec 01       	movw	r28, r24
	const struct mxt_platform_data *pdata = data->pdata;
     ee4:	fc 01       	movw	r30, r24
     ee6:	ee 5b       	subi	r30, 0xBE	; 190
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	00 81       	ld	r16, Z
     eec:	11 81       	ldd	r17, Z+1	; 0x01
	u8 voltage;
	int ret;

	ret = mxt_apply_pdata_config(data);
     eee:	28 df       	rcall	.-432    	; 0xd40 <mxt_apply_pdata_config>
     ef0:	00 97       	sbiw	r24, 0x00	; 0
	if (ret)
     ef2:	09 f0       	breq	.+2      	; 0xef6 <mxt_handle_pdata+0x1c>
     ef4:	81 c0       	rjmp	.+258    	; 0xff8 <mxt_handle_pdata+0x11e>
     ef6:	f8 01       	movw	r30, r16
		return ret;

	/* Set touchscreen lines */
	mxt_write_object(data, MXT_TOUCH_MULTI_T9, MXT_TOUCH_XSIZE,
     ef8:	24 81       	ldd	r18, Z+4	; 0x04
     efa:	43 e0       	ldi	r20, 0x03	; 3
     efc:	69 e0       	ldi	r22, 0x09	; 9
     efe:	ce 01       	movw	r24, r28
     f00:	e5 df       	rcall	.-54     	; 0xecc <mxt_write_object>
     f02:	f8 01       	movw	r30, r16
     f04:	26 81       	ldd	r18, Z+6	; 0x06
			pdata->x_line);
	mxt_write_object(data, MXT_TOUCH_MULTI_T9, MXT_TOUCH_YSIZE,
     f06:	44 e0       	ldi	r20, 0x04	; 4
     f08:	69 e0       	ldi	r22, 0x09	; 9
     f0a:	ce 01       	movw	r24, r28
     f0c:	df df       	rcall	.-66     	; 0xecc <mxt_write_object>
     f0e:	f8 01       	movw	r30, r16
     f10:	24 89       	ldd	r18, Z+20	; 0x14
     f12:	49 e0       	ldi	r20, 0x09	; 9
			pdata->y_line);

	/* Set touchscreen orient */
	mxt_write_object(data, MXT_TOUCH_MULTI_T9, MXT_TOUCH_ORIENT,
     f14:	69 e0       	ldi	r22, 0x09	; 9
     f16:	ce 01       	movw	r24, r28
     f18:	d9 df       	rcall	.-78     	; 0xecc <mxt_write_object>
     f1a:	f8 01       	movw	r30, r16
     f1c:	24 85       	ldd	r18, Z+12	; 0x0c
     f1e:	46 e0       	ldi	r20, 0x06	; 6
     f20:	69 e0       	ldi	r22, 0x09	; 9
			pdata->orient);

	/* Set touchscreen burst length */
	mxt_write_object(data, MXT_TOUCH_MULTI_T9,
     f22:	ce 01       	movw	r24, r28
     f24:	d3 df       	rcall	.-90     	; 0xecc <mxt_write_object>
     f26:	f8 01       	movw	r30, r16
     f28:	26 85       	ldd	r18, Z+14	; 0x0e
     f2a:	47 e0       	ldi	r20, 0x07	; 7
     f2c:	69 e0       	ldi	r22, 0x09	; 9
     f2e:	ce 01       	movw	r24, r28
			MXT_TOUCH_BLEN, pdata->blen);

	/* Set touchscreen threshold */
	mxt_write_object(data, MXT_TOUCH_MULTI_T9,
     f30:	cd df       	rcall	.-102    	; 0xecc <mxt_write_object>
     f32:	f8 01       	movw	r30, r16
     f34:	20 85       	ldd	r18, Z+8	; 0x08
     f36:	21 50       	subi	r18, 0x01	; 1
     f38:	42 e1       	ldi	r20, 0x12	; 18
     f3a:	69 e0       	ldi	r22, 0x09	; 9
     f3c:	ce 01       	movw	r24, r28
			MXT_TOUCH_TCHTHR, pdata->threshold);

	/* Set touchscreen resolution */
	mxt_write_object(data, MXT_TOUCH_MULTI_T9,
     f3e:	c6 df       	rcall	.-116    	; 0xecc <mxt_write_object>
     f40:	f8 01       	movw	r30, r16
     f42:	80 85       	ldd	r24, Z+8	; 0x08
     f44:	91 85       	ldd	r25, Z+9	; 0x09
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	29 2f       	mov	r18, r25
     f4a:	43 e1       	ldi	r20, 0x13	; 19
     f4c:	69 e0       	ldi	r22, 0x09	; 9
			MXT_TOUCH_XRANGE_LSB, (pdata->x_size - 1) & 0xff);
	mxt_write_object(data, MXT_TOUCH_MULTI_T9,
			MXT_TOUCH_XRANGE_MSB, (pdata->x_size - 1) >> 8);
     f4e:	ce 01       	movw	r24, r28
     f50:	bd df       	rcall	.-134    	; 0xecc <mxt_write_object>
     f52:	f8 01       	movw	r30, r16
     f54:	22 85       	ldd	r18, Z+10	; 0x0a
			MXT_TOUCH_TCHTHR, pdata->threshold);

	/* Set touchscreen resolution */
	mxt_write_object(data, MXT_TOUCH_MULTI_T9,
			MXT_TOUCH_XRANGE_LSB, (pdata->x_size - 1) & 0xff);
	mxt_write_object(data, MXT_TOUCH_MULTI_T9,
     f56:	21 50       	subi	r18, 0x01	; 1
     f58:	44 e1       	ldi	r20, 0x14	; 20
     f5a:	69 e0       	ldi	r22, 0x09	; 9
     f5c:	ce 01       	movw	r24, r28
     f5e:	b6 df       	rcall	.-148    	; 0xecc <mxt_write_object>
     f60:	f8 01       	movw	r30, r16
			MXT_TOUCH_XRANGE_MSB, (pdata->x_size - 1) >> 8);
	mxt_write_object(data, MXT_TOUCH_MULTI_T9,
     f62:	82 85       	ldd	r24, Z+10	; 0x0a
     f64:	93 85       	ldd	r25, Z+11	; 0x0b
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	29 2f       	mov	r18, r25
     f6a:	45 e1       	ldi	r20, 0x15	; 21
     f6c:	69 e0       	ldi	r22, 0x09	; 9
     f6e:	ce 01       	movw	r24, r28
     f70:	ad df       	rcall	.-166    	; 0xecc <mxt_write_object>
			MXT_TOUCH_YRANGE_LSB, (pdata->y_size - 1) & 0xff);
	mxt_write_object(data, MXT_TOUCH_MULTI_T9,
			MXT_TOUCH_YRANGE_MSB, (pdata->y_size - 1) >> 8);
     f72:	f8 01       	movw	r30, r16
     f74:	00 89       	ldd	r16, Z+16	; 0x10
     f76:	11 89       	ldd	r17, Z+17	; 0x11
     f78:	22 89       	ldd	r18, Z+18	; 0x12
			MXT_TOUCH_XRANGE_LSB, (pdata->x_size - 1) & 0xff);
	mxt_write_object(data, MXT_TOUCH_MULTI_T9,
			MXT_TOUCH_XRANGE_MSB, (pdata->x_size - 1) >> 8);
	mxt_write_object(data, MXT_TOUCH_MULTI_T9,
			MXT_TOUCH_YRANGE_LSB, (pdata->y_size - 1) & 0xff);
	mxt_write_object(data, MXT_TOUCH_MULTI_T9,
     f7a:	33 89       	ldd	r19, Z+19	; 0x13
     f7c:	01 15       	cp	r16, r1
     f7e:	11 05       	cpc	r17, r1
     f80:	21 05       	cpc	r18, r1
     f82:	31 05       	cpc	r19, r1
     f84:	39 f1       	breq	.+78     	; 0xfd4 <mxt_handle_pdata+0xfa>
			MXT_TOUCH_YRANGE_MSB, (pdata->y_size - 1) >> 8);

	/* Set touchscreen voltage */
	if (pdata->voltage) {
     f86:	00 3e       	cpi	r16, 0xE0	; 224
     f88:	f2 e3       	ldi	r31, 0x32	; 50
     f8a:	1f 07       	cpc	r17, r31
     f8c:	f9 e2       	ldi	r31, 0x29	; 41
     f8e:	2f 07       	cpc	r18, r31
     f90:	31 05       	cpc	r19, r1
     f92:	80 f4       	brcc	.+32     	; 0xfb4 <mxt_handle_pdata+0xda>
     f94:	60 ee       	ldi	r22, 0xE0	; 224
     f96:	72 e3       	ldi	r23, 0x32	; 50
     f98:	89 e2       	ldi	r24, 0x29	; 41
		if (pdata->voltage < MXT_VOLTAGE_DEFAULT) {
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	60 1b       	sub	r22, r16
     f9e:	71 0b       	sbc	r23, r17
     fa0:	82 0b       	sbc	r24, r18
     fa2:	93 0b       	sbc	r25, r19
     fa4:	20 e1       	ldi	r18, 0x10	; 16
     fa6:	37 e2       	ldi	r19, 0x27	; 39
			voltage = (MXT_VOLTAGE_DEFAULT - pdata->voltage) /
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__udivmodsi4>
     fb0:	21 95       	neg	r18
     fb2:	0c c0       	rjmp	.+24     	; 0xfcc <mxt_handle_pdata+0xf2>
     fb4:	c9 01       	movw	r24, r18
     fb6:	b8 01       	movw	r22, r16
     fb8:	60 5e       	subi	r22, 0xE0	; 224
     fba:	72 43       	sbci	r23, 0x32	; 50
     fbc:	89 42       	sbci	r24, 0x29	; 41
     fbe:	91 09       	sbc	r25, r1
     fc0:	20 e1       	ldi	r18, 0x10	; 16
     fc2:	37 e2       	ldi	r19, 0x27	; 39
				MXT_VOLTAGE_STEP;
			voltage = 0xff - voltage + 1;
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	50 e0       	ldi	r21, 0x00	; 0
		} else
			voltage = (pdata->voltage - MXT_VOLTAGE_DEFAULT) /
     fc8:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__udivmodsi4>
     fcc:	45 e0       	ldi	r20, 0x05	; 5
     fce:	6c e1       	ldi	r22, 0x1C	; 28
     fd0:	ce 01       	movw	r24, r28
     fd2:	7c df       	rcall	.-264    	; 0xecc <mxt_write_object>
     fd4:	25 e5       	ldi	r18, 0x55	; 85
     fd6:	41 e0       	ldi	r20, 0x01	; 1
     fd8:	66 e0       	ldi	r22, 0x06	; 6
     fda:	ce 01       	movw	r24, r28
     fdc:	77 df       	rcall	.-274    	; 0xecc <mxt_write_object>
     fde:	00 97       	sbiw	r24, 0x00	; 0
				MXT_VOLTAGE_STEP;

		mxt_write_object(data, MXT_SPT_CTECONFIG_T28,
     fe0:	59 f4       	brne	.+22     	; 0xff8 <mxt_handle_pdata+0x11e>
     fe2:	2f ef       	ldi	r18, 0xFF	; 255
     fe4:	8e e2       	ldi	r24, 0x2E	; 46
     fe6:	9d e0       	ldi	r25, 0x0D	; 13
     fe8:	21 50       	subi	r18, 0x01	; 1
				MXT_CTE_VOLTAGE, voltage);
	}

	/* Backup to memory */
	ret = mxt_write_object(data, MXT_GEN_COMMAND_T6,
     fea:	80 40       	sbci	r24, 0x00	; 0
     fec:	90 40       	sbci	r25, 0x00	; 0
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <mxt_handle_pdata+0x10e>
     ff0:	00 c0       	rjmp	.+0      	; 0xff2 <mxt_handle_pdata+0x118>
     ff2:	00 00       	nop
     ff4:	80 e0       	ldi	r24, 0x00	; 0
			       MXT_COMMAND_BACKUPNV, MXT_BACKUP_VALUE);
	if (ret)
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	08 95       	ret

00001002 <TWI_Read>:
    1002:	88 23       	and	r24, r24
    1004:	11 f0       	breq	.+4      	; 0x100a <TWI_Read+0x8>
    1006:	84 ec       	ldi	r24, 0xC4	; 196
    1008:	01 c0       	rjmp	.+2      	; 0x100c <TWI_Read+0xa>
    100a:	84 e8       	ldi	r24, 0x84	; 132
		return ret;
	_delay_ms(MXT_BACKUP_TIME);

	return 0;
    100c:	80 93 bc 00 	sts	0x00BC, r24
}
    1010:	80 91 bc 00 	lds	r24, 0x00BC
    1014:	87 ff       	sbrs	r24, 7
    1016:	fc cf       	rjmp	.-8      	; 0x1010 <TWI_Read+0xe>
    1018:	80 91 bb 00 	lds	r24, 0x00BB
//read byte with NACK
uint8_t TWI_Read(char ack){
    TWCR = (1<<TWINT)|(1<<TWEN)|((ack?1:0)<<TWEA);
    while ((TWCR & (1<<TWINT)) == 0);
    return TWDR;
}
    101c:	08 95       	ret

0000101e <i2c_recv>:
/**************************************
 * A bit higher level stuff 
 **************************************/

// Receive count bytes from addr
int i2c_recv(uint16_t addr, u8 *buf, int count){
    101e:	ef 92       	push	r14
    1020:	ff 92       	push	r15
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	18 2f       	mov	r17, r24
    102c:	eb 01       	movw	r28, r22
    102e:	7a 01       	movw	r14, r20
	int i;
	int stat;

	TWI_Start();						// First start condition 
    1030:	11 de       	rcall	.-990    	; 0xc54 <TWI_Start>
    1032:	20 91 b9 00 	lds	r18, 0x00B9
    return TWDR;
}

// Get TWI status
uint8_t TWI_GetStatus(void){
    return TWSR & 0xF8;
    1036:	28 7f       	andi	r18, 0xF8	; 248
    1038:	30 e0       	ldi	r19, 0x00	; 0
int i2c_recv(uint16_t addr, u8 *buf, int count){
	int i;
	int stat;

	TWI_Start();						// First start condition 
	stat = TWI_GetStatus();
    103a:	28 30       	cpi	r18, 0x08	; 8
    if (stat != 0x08)
    103c:	31 05       	cpc	r19, r1
    103e:	09 f0       	breq	.+2      	; 0x1042 <i2c_recv+0x24>
    1040:	48 c0       	rjmp	.+144    	; 0x10d2 <i2c_recv+0xb4>
    1042:	84 e9       	ldi	r24, 0x94	; 148
        return stat;

	TWI_Write((MXT_APP_LOW<<1));		// Chip address + write
    1044:	0f de       	rcall	.-994    	; 0xc64 <TWI_Write>
    1046:	20 91 b9 00 	lds	r18, 0x00B9
    return TWDR;
}

// Get TWI status
uint8_t TWI_GetStatus(void){
    return TWSR & 0xF8;
    104a:	28 7f       	andi	r18, 0xF8	; 248
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	28 31       	cpi	r18, 0x18	; 24
	stat = TWI_GetStatus();
    if (stat != 0x08)
        return stat;

	TWI_Write((MXT_APP_LOW<<1));		// Chip address + write
	stat = TWI_GetStatus();
    1050:	31 05       	cpc	r19, r1
    if (stat != 0x18)
    1052:	09 f0       	breq	.+2      	; 0x1056 <i2c_recv+0x38>
    1054:	3e c0       	rjmp	.+124    	; 0x10d2 <i2c_recv+0xb4>
    1056:	81 2f       	mov	r24, r17
    1058:	05 de       	rcall	.-1014   	; 0xc64 <TWI_Write>
        return stat;

	TWI_Write((addr & 0x00FF));			// Address low byte
    105a:	20 91 b9 00 	lds	r18, 0x00B9
    105e:	28 7f       	andi	r18, 0xF8	; 248
    return TWDR;
}

// Get TWI status
uint8_t TWI_GetStatus(void){
    return TWSR & 0xF8;
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	28 32       	cpi	r18, 0x28	; 40
    1064:	31 05       	cpc	r19, r1
	stat = TWI_GetStatus();
    if (stat != 0x18)
        return stat;

	TWI_Write((addr & 0x00FF));			// Address low byte
	stat = TWI_GetStatus();
    1066:	a9 f5       	brne	.+106    	; 0x10d2 <i2c_recv+0xb4>
    if (stat != 0x28)
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	fc dd       	rcall	.-1032   	; 0xc64 <TWI_Write>
    106c:	20 91 b9 00 	lds	r18, 0x00B9
        return stat;

	TWI_Write((addr<<8 & 0xFF00));		// Address high byte
    1070:	28 7f       	andi	r18, 0xF8	; 248
    1072:	30 e0       	ldi	r19, 0x00	; 0
    return TWDR;
}

// Get TWI status
uint8_t TWI_GetStatus(void){
    return TWSR & 0xF8;
    1074:	28 32       	cpi	r18, 0x28	; 40
    1076:	31 05       	cpc	r19, r1
    1078:	61 f5       	brne	.+88     	; 0x10d2 <i2c_recv+0xb4>
	stat = TWI_GetStatus();
    if (stat != 0x28)
        return stat;

	TWI_Write((addr<<8 & 0xFF00));		// Address high byte
	stat = TWI_GetStatus();
    107a:	ec dd       	rcall	.-1064   	; 0xc54 <TWI_Start>
    if (stat != 0x28)
    107c:	20 91 b9 00 	lds	r18, 0x00B9
    1080:	28 7f       	andi	r18, 0xF8	; 248
        return stat;

	TWI_Start();						// Second start condition 	
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	20 31       	cpi	r18, 0x10	; 16
    return TWDR;
}

// Get TWI status
uint8_t TWI_GetStatus(void){
    return TWSR & 0xF8;
    1086:	31 05       	cpc	r19, r1
    1088:	21 f5       	brne	.+72     	; 0x10d2 <i2c_recv+0xb4>
    108a:	85 e9       	ldi	r24, 0x95	; 149
	stat = TWI_GetStatus();
    if (stat != 0x28)
        return stat;

	TWI_Start();						// Second start condition 	
	stat = TWI_GetStatus();
    108c:	eb dd       	rcall	.-1066   	; 0xc64 <TWI_Write>
    if (stat != 0x10)
    108e:	20 91 b9 00 	lds	r18, 0x00B9
    1092:	28 7f       	andi	r18, 0xF8	; 248
        return stat;

	TWI_Write((MXT_APP_LOW<<1) | 0x01);	// Chip address + read
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	20 34       	cpi	r18, 0x40	; 64
    1098:	31 05       	cpc	r19, r1
    return TWDR;
}

// Get TWI status
uint8_t TWI_GetStatus(void){
    return TWSR & 0xF8;
    109a:	d9 f4       	brne	.+54     	; 0x10d2 <i2c_recv+0xb4>
    109c:	8e 01       	movw	r16, r28
    109e:	81 e0       	ldi	r24, 0x01	; 1
	stat = TWI_GetStatus();
    if (stat != 0x10)
        return stat;

	TWI_Write((MXT_APP_LOW<<1) | 0x01);	// Chip address + read
	stat = TWI_GetStatus();
    10a0:	e8 1a       	sub	r14, r24
    if (stat != 0x40)
    10a2:	f1 08       	sbc	r15, r1
    10a4:	c8 01       	movw	r24, r16
    10a6:	8c 1b       	sub	r24, r28
    10a8:	9d 0b       	sbc	r25, r29
        return stat;

	for(i=0; i<count-1; i++){			
    10aa:	8e 15       	cp	r24, r14
    10ac:	9f 05       	cpc	r25, r15
    10ae:	34 f4       	brge	.+12     	; 0x10bc <i2c_recv+0x9e>
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	a7 df       	rcall	.-178    	; 0x1002 <TWI_Read>
    10b4:	f8 01       	movw	r30, r16
    10b6:	81 93       	st	Z+, r24
    10b8:	8f 01       	movw	r16, r30
    10ba:	f4 cf       	rjmp	.-24     	; 0x10a4 <i2c_recv+0x86>
		buf[i] = TWI_Read(1);			// Read the data and ACK
    10bc:	ce 0d       	add	r28, r14
    10be:	df 1d       	adc	r29, r15
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	9f df       	rcall	.-194    	; 0x1002 <TWI_Read>
    10c4:	88 83       	st	Y, r24
    10c6:	84 e9       	ldi	r24, 0x94	; 148
    10c8:	80 93 bc 00 	sts	0x00BC, r24
	}
	buf[count-1] = TWI_Read(0);			// No ack on last byte
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <i2c_recv+0xb6>
    10d2:	c9 01       	movw	r24, r18
    10d4:	df 91       	pop	r29
    while ((TWCR & (1<<TWINT)) == 0);
}

//send stop signal
void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
		buf[i] = TWI_Read(1);			// Read the data and ACK
	}
	buf[count-1] = TWI_Read(0);			// No ack on last byte
	TWI_Stop();							// Send stop condition 
	
	return 0;
    10dc:	ff 90       	pop	r15
    10de:	ef 90       	pop	r14
    10e0:	08 95       	ret

000010e2 <__mxt_read_reg>:
    10e2:	cf 92       	push	r12
}
    10e4:	df 92       	push	r13
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29

	return 0;
}


int __mxt_read_reg(uint16_t reg, uint16_t len, void *val){
    10f2:	18 2f       	mov	r17, r24
    10f4:	09 2f       	mov	r16, r25
    10f6:	f6 2e       	mov	r15, r22
    10f8:	e7 2e       	mov	r14, r23
    10fa:	d4 2e       	mov	r13, r20
    10fc:	c5 2e       	mov	r12, r21
	int ret;

	ret = i2c_recv(reg, val, len);
    10fe:	46 2f       	mov	r20, r22
    1100:	57 2f       	mov	r21, r23
    1102:	6d 2d       	mov	r22, r13
    1104:	7c 2d       	mov	r23, r12
    1106:	8b df       	rcall	.-234    	; 0x101e <i2c_recv>
    1108:	ec 01       	movw	r28, r24
    110a:	00 97       	sbiw	r24, 0x00	; 0
	if (ret)
    110c:	b1 f0       	breq	.+44     	; 0x113a <__mxt_read_reg+0x58>
    110e:	df 93       	push	r29
		dev_err("__mxt_read_reg(%04x, %04x, %04x) failed: %04x\n", reg, len, (unsigned int) val, ret);
    1110:	cf 93       	push	r28
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	82 e2       	ldi	r24, 0x22	; 34
    1120:	93 e0       	ldi	r25, 0x03	; 3
    1122:	9f 93       	push	r25
    1124:	8f 93       	push	r24
    1126:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    112a:	8d b7       	in	r24, 0x3d	; 61
    112c:	9e b7       	in	r25, 0x3e	; 62
    112e:	0a 96       	adiw	r24, 0x0a	; 10
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	9e bf       	out	0x3e, r25	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	8d bf       	out	0x3d, r24	; 61
    113a:	ce 01       	movw	r24, r28

	return ret;
}
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	08 95       	ret

0000114e <mxt_read_num_messages>:
    114e:	ab 01       	movw	r20, r22



int mxt_read_num_messages(struct mxt_data *data, u8 *count){
	/* TODO: Optimization: read first message along with message count */
	return __mxt_read_reg(data->T44_address, 1, count);
    1150:	89 59       	subi	r24, 0x99	; 153
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	61 e0       	ldi	r22, 0x01	; 1
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	fc 01       	movw	r30, r24
    115a:	80 81       	ld	r24, Z
    115c:	91 81       	ldd	r25, Z+1	; 0x01
    115e:	c1 cf       	rjmp	.-126    	; 0x10e2 <__mxt_read_reg>

00001160 <mxt_read_messages>:
    1160:	28 e0       	ldi	r18, 0x08	; 8
}

int mxt_read_messages(struct mxt_data *data, u8 count, struct mxt_message *messages){
	return __mxt_read_reg(data->T5_address, sizeof(struct mxt_message) * count, messages);
    1162:	62 9f       	mul	r22, r18
    1164:	b0 01       	movw	r22, r0
    1166:	11 24       	eor	r1, r1
    1168:	8f 59       	subi	r24, 0x9F	; 159
    116a:	9f 4f       	sbci	r25, 0xFF	; 255
    116c:	fc 01       	movw	r30, r24
    116e:	80 81       	ld	r24, Z
    1170:	91 81       	ldd	r25, Z+1	; 0x01
    1172:	b7 cf       	rjmp	.-146    	; 0x10e2 <__mxt_read_reg>

00001174 <mxt_proc_messages>:
    1174:	2f 92       	push	r2
bool mxt_is_T9_message(struct mxt_data *data, struct mxt_message *msg){
	u8 id = msg->reportid;
	return (id >= data->T9_reportid_min && id <= data->T9_reportid_max);
}

int mxt_proc_messages(struct mxt_data *data, u8 count, bool report){
    1176:	3f 92       	push	r3
    1178:	4f 92       	push	r4
    117a:	5f 92       	push	r5
    117c:	6f 92       	push	r6
    117e:	7f 92       	push	r7
    1180:	8f 92       	push	r8
    1182:	9f 92       	push	r9
    1184:	af 92       	push	r10
    1186:	bf 92       	push	r11
    1188:	cf 92       	push	r12
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	00 d0       	rcall	.+0      	; 0x119a <mxt_proc_messages+0x26>
    119a:	1f 92       	push	r1
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	9b 83       	std	Y+3, r25	; 0x03
    11a2:	8a 83       	std	Y+2, r24	; 0x02
    11a4:	d6 2e       	mov	r13, r22
    11a6:	c4 2e       	mov	r12, r20
	u8 reportid;
	struct mxt_message *messages, *msg;
	int ret;

	messages = malloc(count * sizeof(*messages));
    11a8:	88 e0       	ldi	r24, 0x08	; 8
    11aa:	68 9f       	mul	r22, r24
    11ac:	10 01       	movw	r2, r0
    11ae:	11 24       	eor	r1, r1
    11b0:	c1 01       	movw	r24, r2
    11b2:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <malloc>
    11b6:	7c 01       	movw	r14, r24
	if (!messages)
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	09 f4       	brne	.+2      	; 0x11be <mxt_proc_messages+0x4a>
    11bc:	71 c0       	rjmp	.+226    	; 0x12a0 <mxt_proc_messages+0x12c>
		return -ENOMEM;

	ret = mxt_read_messages(data, count, messages);
    11be:	ac 01       	movw	r20, r24
    11c0:	6d 2d       	mov	r22, r13
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	9b 81       	ldd	r25, Y+3	; 0x03
    11c6:	cc df       	rcall	.-104    	; 0x1160 <mxt_read_messages>
    11c8:	8c 01       	movw	r16, r24
    11ca:	00 97       	sbiw	r24, 0x00	; 0
	if (ret) {
    11cc:	89 f0       	breq	.+34     	; 0x11f0 <mxt_proc_messages+0x7c>
    11ce:	1f 93       	push	r17
		dev_err("Failed to read %u messages (%d).\n", count, ret);
    11d0:	8f 93       	push	r24
    11d2:	1f 92       	push	r1
    11d4:	df 92       	push	r13
    11d6:	81 e5       	ldi	r24, 0x51	; 81
    11d8:	93 e0       	ldi	r25, 0x03	; 3
    11da:	9f 93       	push	r25
    11dc:	8f 93       	push	r24
    11de:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    11e2:	0f 90       	pop	r0
		goto out;
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	53 c0       	rjmp	.+166    	; 0x1296 <mxt_proc_messages+0x122>
    11f0:	cc 20       	and	r12, r12
	}
	if (!report)
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <mxt_proc_messages+0x82>
    11f4:	50 c0       	rjmp	.+160    	; 0x1296 <mxt_proc_messages+0x122>
    11f6:	67 01       	movw	r12, r14
    11f8:	2e 0c       	add	r2, r14
		goto out;

	for (msg = messages; msg < &messages[count]; msg++) {
    11fa:	3f 1c       	adc	r3, r15
    11fc:	6a 80       	ldd	r6, Y+2	; 0x02
		mxt_dump_message(msg);
		reportid = msg->reportid;

		if (reportid == data->T6_reportid) {
    11fe:	7b 80       	ldd	r7, Y+3	; 0x03
    1200:	93 e6       	ldi	r25, 0x63	; 99
    1202:	69 0e       	add	r6, r25
    1204:	71 1c       	adc	r7, r1
    1206:	aa 80       	ldd	r10, Y+2	; 0x02
			dev_dbg("Status: %02x Config Checksum: %08lx\n", status, data->config_csum);
            /* TODO: Calibration */
			//if (status == 0x00)
			//	complete(&data->auto_cal_completion);
		} else if (mxt_is_T9_message(data, msg)) {
			int id = reportid - data->T9_reportid_min;
    1208:	bb 80       	ldd	r11, Y+3	; 0x03
    120a:	a4 e6       	ldi	r26, 0x64	; 100
    120c:	aa 0e       	add	r10, r26
    120e:	b1 1c       	adc	r11, r1
    1210:	8a 80       	ldd	r8, Y+2	; 0x02
		reportid = msg->reportid;

		if (reportid == data->T6_reportid) {
			const u32 *payload = (u32*) &msg->message[0];
			u8 status = payload[0];
			data->config_csum = mxt_extract_T6_csum(&payload[1]);
    1212:	9b 80       	ldd	r9, Y+3	; 0x03
    1214:	bd e5       	ldi	r27, 0x5D	; 93
    1216:	8b 0e       	add	r8, r27
    1218:	91 1c       	adc	r9, r1
    121a:	c2 14       	cp	r12, r2
		goto out;
	}
	if (!report)
		goto out;

	for (msg = messages; msg < &messages[count]; msg++) {
    121c:	d3 04       	cpc	r13, r3
    121e:	d8 f5       	brcc	.+118    	; 0x1296 <mxt_proc_messages+0x122>
    1220:	f6 01       	movw	r30, r12
		mxt_dump_message(msg);
		reportid = msg->reportid;
    1222:	40 81       	ld	r20, Z
    1224:	d3 01       	movw	r26, r6

		if (reportid == data->T6_reportid) {
    1226:	8c 91       	ld	r24, X
    1228:	48 13       	cpse	r20, r24
    122a:	20 c0       	rjmp	.+64     	; 0x126c <mxt_proc_messages+0xf8>
    122c:	41 81       	ldd	r20, Z+1	; 0x01
			const u32 *payload = (u32*) &msg->message[0];
			u8 status = payload[0];
    122e:	51 84       	ldd	r5, Z+9	; 0x09
int mxt_read_messages(struct mxt_data *data, u8 count, struct mxt_message *messages){
	return __mxt_read_reg(data->T5_address, sizeof(struct mxt_message) * count, messages);
}

unsigned mxt_extract_T6_csum(const u32 *csum){
	return csum[0] | (csum[1] << 8) | (csum[2] << 16);
    1230:	41 2c       	mov	r4, r1
    1232:	85 81       	ldd	r24, Z+5	; 0x05
    1234:	96 81       	ldd	r25, Z+6	; 0x06
    1236:	84 29       	or	r24, r4
    1238:	95 29       	or	r25, r5
    123a:	a0 e0       	ldi	r26, 0x00	; 0
		reportid = msg->reportid;

		if (reportid == data->T6_reportid) {
			const u32 *payload = (u32*) &msg->message[0];
			u8 status = payload[0];
			data->config_csum = mxt_extract_T6_csum(&payload[1]);
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	f4 01       	movw	r30, r8
    1240:	80 83       	st	Z, r24
    1242:	91 83       	std	Z+1, r25	; 0x01
    1244:	a2 83       	std	Z+2, r26	; 0x02
    1246:	b3 83       	std	Z+3, r27	; 0x03
    1248:	1f 92       	push	r1
			dev_dbg("Status: %02x Config Checksum: %08lx\n", status, data->config_csum);
    124a:	1f 92       	push	r1
    124c:	9f 93       	push	r25
    124e:	8f 93       	push	r24
    1250:	1f 92       	push	r1
    1252:	4f 93       	push	r20
    1254:	a3 e7       	ldi	r26, 0x73	; 115
    1256:	b3 e0       	ldi	r27, 0x03	; 3
    1258:	bf 93       	push	r27
    125a:	af 93       	push	r26
    125c:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	11 c0       	rjmp	.+34     	; 0x128e <mxt_proc_messages+0x11a>
    126c:	b6 01       	movw	r22, r12
            /* TODO: Calibration */
			//if (status == 0x00)
			//	complete(&data->auto_cal_completion);
		} else if (mxt_is_T9_message(data, msg)) {
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	9b 81       	ldd	r25, Y+3	; 0x03
    1272:	49 83       	std	Y+1, r20	; 0x01
    1274:	aa da       	rcall	.-2732   	; 0x7ca <mxt_is_T9_message>
    1276:	49 81       	ldd	r20, Y+1	; 0x01
    1278:	88 23       	and	r24, r24
    127a:	49 f0       	breq	.+18     	; 0x128e <mxt_proc_messages+0x11a>
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	d5 01       	movw	r26, r10
			int id = reportid - data->T9_reportid_min;
    1280:	8c 91       	ld	r24, X
    1282:	48 1b       	sub	r20, r24
    1284:	51 09       	sbc	r21, r1
    1286:	b6 01       	movw	r22, r12
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
			mxt_input_touchevent(data, msg, id);
    128a:	9b 81       	ldd	r25, Y+3	; 0x03
    128c:	ed db       	rcall	.-2086   	; 0xa68 <mxt_input_touchevent>
    128e:	b8 e0       	ldi	r27, 0x08	; 8
    1290:	cb 0e       	add	r12, r27
    1292:	d1 1c       	adc	r13, r1
		goto out;
	}
	if (!report)
		goto out;

	for (msg = messages; msg < &messages[count]; msg++) {
    1294:	c2 cf       	rjmp	.-124    	; 0x121a <mxt_proc_messages+0xa6>
    1296:	c7 01       	movw	r24, r14
    1298:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <free>
			//mxt_input_button(data, msg);
		}
	}

out:
	free(messages);
    129c:	c8 01       	movw	r24, r16
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <mxt_proc_messages+0x130>
    12a0:	84 ef       	ldi	r24, 0xF4	; 244

	messages = malloc(count * sizeof(*messages));
	if (!messages)
		return -ENOMEM;

	ret = mxt_read_messages(data, count, messages);
    12a2:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}

out:
	free(messages);
	return ret;
    12a4:	0f 90       	pop	r0
	struct mxt_message *messages, *msg;
	int ret;

	messages = malloc(count * sizeof(*messages));
	if (!messages)
		return -ENOMEM;
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
	}

out:
	free(messages);
	return ret;
}
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	df 90       	pop	r13
    12b8:	cf 90       	pop	r12
    12ba:	bf 90       	pop	r11
    12bc:	af 90       	pop	r10
    12be:	9f 90       	pop	r9
    12c0:	8f 90       	pop	r8
    12c2:	7f 90       	pop	r7
    12c4:	6f 90       	pop	r6
    12c6:	5f 90       	pop	r5
    12c8:	4f 90       	pop	r4
    12ca:	3f 90       	pop	r3
    12cc:	2f 90       	pop	r2
    12ce:	08 95       	ret

000012d0 <mxt_handle_messages>:
    12d0:	df 92       	push	r13
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
}
*/


/* Main method called for getting data */
int mxt_handle_messages(struct mxt_data *data, bool report){
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	1f 92       	push	r1
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	7c 01       	movw	r14, r24
    12e6:	d6 2e       	mov	r13, r22
	int ret;
	u8 count;

	ret = mxt_read_num_messages(data, &count);
    12e8:	be 01       	movw	r22, r28
    12ea:	6f 5f       	subi	r22, 0xFF	; 255
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	2f df       	rcall	.-418    	; 0x114e <mxt_read_num_messages>
    12f0:	8c 01       	movw	r16, r24
    12f2:	00 97       	sbiw	r24, 0x00	; 0
	if (ret) {
    12f4:	71 f0       	breq	.+28     	; 0x1312 <mxt_handle_messages+0x42>
    12f6:	1f 93       	push	r17
		dev_err("Failed to read message count (%d).\n", ret);
    12f8:	8f 93       	push	r24
    12fa:	88 e9       	ldi	r24, 0x98	; 152
    12fc:	93 e0       	ldi	r25, 0x03	; 3
    12fe:	9f 93       	push	r25
    1300:	8f 93       	push	r24
    1302:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    1306:	0f 90       	pop	r0
		return ret;
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	c8 01       	movw	r24, r16
    1310:	16 c0       	rjmp	.+44     	; 0x133e <mxt_handle_messages+0x6e>
    1312:	89 81       	ldd	r24, Y+1	; 0x01
	}

	if (count > 0) {
    1314:	88 23       	and	r24, r24
    1316:	89 f0       	breq	.+34     	; 0x133a <mxt_handle_messages+0x6a>
    1318:	1f 92       	push	r1
		dev_dbg("Processing %d messages\n", count);
    131a:	8f 93       	push	r24
    131c:	8c eb       	ldi	r24, 0xBC	; 188
    131e:	93 e0       	ldi	r25, 0x03	; 3
    1320:	9f 93       	push	r25
    1322:	8f 93       	push	r24
    1324:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    1328:	4d 2d       	mov	r20, r13
		ret = mxt_proc_messages(data, count, report);
    132a:	69 81       	ldd	r22, Y+1	; 0x01
    132c:	c7 01       	movw	r24, r14
    132e:	22 df       	rcall	.-444    	; 0x1174 <mxt_proc_messages>
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    }
	else {
	    //dev_dbg("No messages\n");
	    return 0;
	}
	return ret;
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	02 c0       	rjmp	.+4      	; 0x133e <mxt_handle_messages+0x6e>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
		dev_dbg("Processing %d messages\n", count);
		ret = mxt_proc_messages(data, count, report);
    }
	else {
	    //dev_dbg("No messages\n");
	    return 0;
    133e:	0f 90       	pop	r0
    1340:	df 91       	pop	r29
	}
	return ret;
}
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	08 95       	ret

00001350 <Digitizer_get_report>:
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29


int Digitizer_get_report(USB_DigitizerReport_Data_t* DigitizerReport){	
	int ret;

	data->report = DigitizerReport;
    1354:	e0 91 8d 06 	lds	r30, 0x068D
    1358:	f0 91 8e 06 	lds	r31, 0x068E
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	80 83       	st	Z, r24
	if(!data->initialized){
    1360:	80 91 8d 06 	lds	r24, 0x068D
    1364:	90 91 8e 06 	lds	r25, 0x068E
    1368:	fc 01       	movw	r30, r24
    136a:	e2 5b       	subi	r30, 0xB2	; 178
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	20 81       	ld	r18, Z
    1370:	21 11       	cpse	r18, r1
    1372:	0f c0       	rjmp	.+30     	; 0x1392 <Digitizer_get_report+0x42>
		dev_err("Digitizer is not initlialized = %x\n", ret);
    1374:	1f 92       	push	r1
    1376:	1f 92       	push	r1
    1378:	84 ed       	ldi	r24, 0xD4	; 212
    137a:	93 e0       	ldi	r25, 0x03	; 3
    137c:	9f 93       	push	r25
    137e:	8f 93       	push	r24
    1380:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
		return -1;
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	9f ef       	ldi	r25, 0xFF	; 255
    1390:	15 c0       	rjmp	.+42     	; 0x13bc <Digitizer_get_report+0x6c>
	}

	ret = mxt_handle_messages(data, true);
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	9d df       	rcall	.-198    	; 0x12d0 <mxt_handle_messages>
    1396:	ec 01       	movw	r28, r24
    1398:	00 97       	sbiw	r24, 0x00	; 0
	if (ret)
    139a:	71 f0       	breq	.+28     	; 0x13b8 <Digitizer_get_report+0x68>
    139c:	df 93       	push	r29
		dev_err("Failed to get Digitizer report. Err = %x\n", ret);
    139e:	cf 93       	push	r28
    13a0:	88 ef       	ldi	r24, 0xF8	; 248
    13a2:	93 e0       	ldi	r25, 0x03	; 3
    13a4:	9f 93       	push	r25
    13a6:	8f 93       	push	r24
    13a8:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	ce 01       	movw	r24, r28
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <Digitizer_get_report+0x6c>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	df 91       	pop	r29

	return ret;
}
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <mxt_calc_resolution>:
    13c2:	ef 92       	push	r14


	return 0;
}

int mxt_calc_resolution(struct mxt_data *data){
    13c4:	ff 92       	push	r15
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	27 97       	sbiw	r28, 0x07	; 7
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	8c 01       	movw	r16, r24
	u16 xyrange[2];
	unsigned int max_x, max_y;
	u8 xylines[2];
	int ret;

	struct mxt_object *T9 = mxt_get_object(data, MXT_TOUCH_MULTI_T9);
    13e0:	69 e0       	ldi	r22, 0x09	; 9
    13e2:	1a db       	rcall	.-2508   	; 0xa18 <mxt_get_object>
    13e4:	7c 01       	movw	r14, r24
    13e6:	00 97       	sbiw	r24, 0x00	; 0
	if (T9 == NULL)
    13e8:	09 f4       	brne	.+2      	; 0x13ec <mxt_calc_resolution+0x2a>
    13ea:	54 c0       	rjmp	.+168    	; 0x1494 <mxt_calc_resolution+0xd2>
    13ec:	fc 01       	movw	r30, r24
		return -EINVAL;

	/* Get touchscreen resolution */
	ret = __mxt_read_reg(T9->start_address + MXT_TOUCH_XRANGE_LSB,
    13ee:	81 81       	ldd	r24, Z+1	; 0x01
    13f0:	92 81       	ldd	r25, Z+2	; 0x02
    13f2:	ae 01       	movw	r20, r28
    13f4:	4f 5f       	subi	r20, 0xFF	; 255
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255
    13f8:	64 e0       	ldi	r22, 0x04	; 4
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	42 96       	adiw	r24, 0x12	; 18
    13fe:	71 de       	rcall	.-798    	; 0x10e2 <__mxt_read_reg>
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	09 f0       	breq	.+2      	; 0x1406 <mxt_calc_resolution+0x44>
			4, xyrange);
	if (ret)
    1404:	49 c0       	rjmp	.+146    	; 0x1498 <mxt_calc_resolution+0xd6>
    1406:	f7 01       	movw	r30, r14
    1408:	81 81       	ldd	r24, Z+1	; 0x01
		return ret;

	ret = __mxt_read_reg(T9->start_address + MXT_TOUCH_ORIENT,
    140a:	92 81       	ldd	r25, Z+2	; 0x02
    140c:	ae 01       	movw	r20, r28
    140e:	49 5f       	subi	r20, 0xF9	; 249
    1410:	5f 4f       	sbci	r21, 0xFF	; 255
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	09 96       	adiw	r24, 0x09	; 9
    1418:	64 de       	rcall	.-824    	; 0x10e2 <__mxt_read_reg>
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	e9 f5       	brne	.+122    	; 0x1498 <mxt_calc_resolution+0xd6>
    141e:	f7 01       	movw	r30, r14
			1, &orient);
	if (ret)
    1420:	81 81       	ldd	r24, Z+1	; 0x01
    1422:	92 81       	ldd	r25, Z+2	; 0x02
		return ret;

	ret = __mxt_read_reg(T9->start_address + MXT_TOUCH_XSIZE,
    1424:	ae 01       	movw	r20, r28
    1426:	4b 5f       	subi	r20, 0xFB	; 251
    1428:	5f 4f       	sbci	r21, 0xFF	; 255
    142a:	62 e0       	ldi	r22, 0x02	; 2
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	03 96       	adiw	r24, 0x03	; 3
    1430:	58 de       	rcall	.-848    	; 0x10e2 <__mxt_read_reg>
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	89 f5       	brne	.+98     	; 0x1498 <mxt_calc_resolution+0xd6>
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
			2, xylines);
	if (ret)
    143a:	2b 81       	ldd	r18, Y+3	; 0x03
    143c:	3c 81       	ldd	r19, Y+4	; 0x04
		return ret;

	max_x = le16_to_cpu(xyrange[0]);
    143e:	4f 81       	ldd	r20, Y+7	; 0x07
    1440:	d8 01       	movw	r26, r16
	max_y = le16_to_cpu(xyrange[1]);
    1442:	af 5a       	subi	r26, 0xAF	; 175
    1444:	bf 4f       	sbci	r27, 0xFF	; 255

	if (orient & MXT_XY_SWITCH) {
    1446:	f8 01       	movw	r30, r16
    1448:	ed 5a       	subi	r30, 0xAD	; 173
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	40 ff       	sbrs	r20, 0
    144e:	05 c0       	rjmp	.+10     	; 0x145a <mxt_calc_resolution+0x98>
    1450:	2d 93       	st	X+, r18
    1452:	3c 93       	st	X, r19
    1454:	91 83       	std	Z+1, r25	; 0x01
    1456:	80 83       	st	Z, r24
		data->max_x = max_y;
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <mxt_calc_resolution+0xa0>
    145a:	8d 93       	st	X+, r24
		data->max_y = max_x;
    145c:	9c 93       	st	X, r25
    145e:	31 83       	std	Z+1, r19	; 0x01
    1460:	20 83       	st	Z, r18
	} else {
		data->max_x = max_x;
    1462:	f8 01       	movw	r30, r16
    1464:	eb 5a       	subi	r30, 0xAB	; 171
		data->max_y = max_y;
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	28 9f       	mul	r18, r24
	}

	data->max_area_pixels = max_x * max_y;
    146a:	a0 01       	movw	r20, r0
    146c:	29 9f       	mul	r18, r25
    146e:	50 0d       	add	r21, r0
    1470:	38 9f       	mul	r19, r24
    1472:	50 0d       	add	r21, r0
    1474:	11 24       	eor	r1, r1
    1476:	51 83       	std	Z+1, r21	; 0x01
    1478:	40 83       	st	Z, r20
    147a:	9d 81       	ldd	r25, Y+5	; 0x05
    147c:	8e 81       	ldd	r24, Y+6	; 0x06
    147e:	f8 01       	movw	r30, r16
    1480:	e9 5a       	subi	r30, 0xA9	; 169
	data->max_area_channels = xylines[0] * xylines[1];
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	98 9f       	mul	r25, r24
    1486:	c0 01       	movw	r24, r0
    1488:	11 24       	eor	r1, r1
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	80 83       	st	Z, r24
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <mxt_calc_resolution+0xd6>
    1494:	8a ee       	ldi	r24, 0xEA	; 234

	return 0;
    1496:	9f ef       	ldi	r25, 0xFF	; 255
    1498:	27 96       	adiw	r28, 0x07	; 7
    149a:	0f b6       	in	r0, 0x3f	; 63
	u8 xylines[2];
	int ret;

	struct mxt_object *T9 = mxt_get_object(data, MXT_TOUCH_MULTI_T9);
	if (T9 == NULL)
		return -EINVAL;
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62

	data->max_area_pixels = max_x * max_y;
	data->max_area_channels = xylines[0] * xylines[1];

	return 0;
}
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	08 95       	ret

000014b2 <mxt_get_object_table>:
    14b2:	2f 92       	push	r2
    14b4:	3f 92       	push	r3
    14b6:	4f 92       	push	r4
    14b8:	5f 92       	push	r5



int mxt_get_object_table(struct mxt_data *data){
    14ba:	6f 92       	push	r6
    14bc:	7f 92       	push	r7
    14be:	8f 92       	push	r8
    14c0:	9f 92       	push	r9
    14c2:	af 92       	push	r10
    14c4:	bf 92       	push	r11
    14c6:	cf 92       	push	r12
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	69 97       	sbiw	r28, 0x19	; 25
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	8c 01       	movw	r16, r24
	int error;
	int i;
	u8 reportid;
	u32 csum[3];

	table_size = data->info.object_num * sizeof(struct mxt_object);
    14e8:	6c 01       	movw	r12, r24
    14ea:	8c e4       	ldi	r24, 0x4C	; 76
    14ec:	c8 0e       	add	r12, r24
    14ee:	d1 1c       	adc	r13, r1
    14f0:	d6 01       	movw	r26, r12
    14f2:	ec 90       	ld	r14, X
    14f4:	b6 e0       	ldi	r27, 0x06	; 6
    14f6:	eb 9e       	mul	r14, r27
    14f8:	70 01       	movw	r14, r0
    14fa:	11 24       	eor	r1, r1
	error = __mxt_read_reg(MXT_OBJECT_START, table_size,
			data->object_table);
    14fc:	58 01       	movw	r10, r16
    14fe:	e4 e4       	ldi	r30, 0x44	; 68
    1500:	ae 0e       	add	r10, r30
    1502:	b1 1c       	adc	r11, r1
	int i;
	u8 reportid;
	u32 csum[3];

	table_size = data->info.object_num * sizeof(struct mxt_object);
	error = __mxt_read_reg(MXT_OBJECT_START, table_size,
    1504:	d5 01       	movw	r26, r10
    1506:	4d 91       	ld	r20, X+
    1508:	5c 91       	ld	r21, X
    150a:	b7 01       	movw	r22, r14
    150c:	87 e0       	ldi	r24, 0x07	; 7
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	e8 dd       	rcall	.-1072   	; 0x10e2 <__mxt_read_reg>
    1512:	00 97       	sbiw	r24, 0x00	; 0
			data->object_table);
	if (error)
    1514:	09 f0       	breq	.+2      	; 0x1518 <mxt_get_object_table+0x66>
    1516:	fe c0       	rjmp	.+508    	; 0x1714 <mxt_get_object_table+0x262>
    1518:	ae 01       	movw	r20, r28

	/*
	 * Read Information Block checksum from 3 bytes immediately following
	 * info block
	 */
	error = __mxt_read_reg(MXT_OBJECT_START + table_size,
    151a:	4f 5f       	subi	r20, 0xFF	; 255
    151c:	5f 4f       	sbci	r21, 0xFF	; 255
    151e:	6c e0       	ldi	r22, 0x0C	; 12
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	c7 01       	movw	r24, r14
    1524:	07 96       	adiw	r24, 0x07	; 7
    1526:	dd dd       	rcall	.-1094   	; 0x10e2 <__mxt_read_reg>
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	09 f0       	breq	.+2      	; 0x152e <mxt_get_object_table+0x7c>
			sizeof(csum), csum);
	if (error)
    152c:	f3 c0       	rjmp	.+486    	; 0x1714 <mxt_get_object_table+0x262>
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
		return error;

	data->info_csum = csum[0] | (csum[1] << 8) | (csum[2] << 16);
    1532:	af 81       	ldd	r26, Y+7	; 0x07
    1534:	b8 85       	ldd	r27, Y+8	; 0x08
    1536:	ba 2f       	mov	r27, r26
    1538:	a9 2f       	mov	r26, r25
    153a:	98 2f       	mov	r25, r24
    153c:	88 27       	eor	r24, r24
    153e:	49 85       	ldd	r20, Y+9	; 0x09
    1540:	5a 85       	ldd	r21, Y+10	; 0x0a
    1542:	6b 85       	ldd	r22, Y+11	; 0x0b
    1544:	7c 85       	ldd	r23, Y+12	; 0x0c
    1546:	ba 01       	movw	r22, r20
    1548:	55 27       	eor	r21, r21
    154a:	44 27       	eor	r20, r20
    154c:	84 2b       	or	r24, r20
    154e:	95 2b       	or	r25, r21
    1550:	a6 2b       	or	r26, r22
    1552:	b7 2b       	or	r27, r23
    1554:	49 81       	ldd	r20, Y+1	; 0x01
    1556:	5a 81       	ldd	r21, Y+2	; 0x02
    1558:	6b 81       	ldd	r22, Y+3	; 0x03
    155a:	7c 81       	ldd	r23, Y+4	; 0x04
    155c:	84 2b       	or	r24, r20
    155e:	95 2b       	or	r25, r21
    1560:	a6 2b       	or	r26, r22
    1562:	b7 2b       	or	r27, r23
    1564:	f8 01       	movw	r30, r16
    1566:	e7 5a       	subi	r30, 0xA7	; 167
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	80 83       	st	Z, r24
    156c:	91 83       	std	Z+1, r25	; 0x01
    156e:	a2 83       	std	Z+2, r26	; 0x02
    1570:	b3 83       	std	Z+3, r27	; 0x03
    1572:	bf 93       	push	r27
    1574:	af 93       	push	r26
	dev_info("Information Block Checksum = %06lx\n", data->info_csum);
    1576:	9f 93       	push	r25
    1578:	8f 93       	push	r24
    157a:	82 e2       	ldi	r24, 0x22	; 34
    157c:	94 e0       	ldi	r25, 0x04	; 4
    157e:	9f 93       	push	r25
    1580:	8f 93       	push	r24
    1582:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    1586:	c8 01       	movw	r24, r16
    1588:	db d9       	rcall	.-3146   	; 0x940 <mxt_verify_info_block_csum>

	error = mxt_verify_info_block_csum(data);
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
	if (error)
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	09 f0       	breq	.+2      	; 0x159c <mxt_get_object_table+0xea>
    159a:	bc c0       	rjmp	.+376    	; 0x1714 <mxt_get_object_table+0x262>
    159c:	61 2c       	mov	r6, r1
    159e:	71 2c       	mov	r7, r1
    15a0:	31 e0       	ldi	r19, 0x01	; 1
    15a2:	81 2c       	mov	r8, r1
    15a4:	91 2c       	mov	r9, r1
    15a6:	96 e4       	ldi	r25, 0x46	; 70
    15a8:	29 2e       	mov	r2, r25
    15aa:	94 e0       	ldi	r25, 0x04	; 4
		} else {
			min_id = 0;
			max_id = 0;
		}

		dev_dbg("Type %2d, ", 		object->type);
    15ac:	39 2e       	mov	r3, r25
    15ae:	21 e5       	ldi	r18, 0x51	; 81
    15b0:	42 2e       	mov	r4, r18
    15b2:	24 e0       	ldi	r18, 0x04	; 4
		dev_dbg("Start %3d, ", 		object->start_address);
    15b4:	52 2e       	mov	r5, r18
    15b6:	f8 01       	movw	r30, r16
    15b8:	ec 59       	subi	r30, 0x9C	; 156
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
			break;
		case MXT_GEN_COMMAND_T6:
			data->T6_reportid = min_id;
			break;
		case MXT_TOUCH_MULTI_T9:
			data->T9_reportid_min = min_id;
    15bc:	fe 87       	std	Y+14, r31	; 0x0e
    15be:	ed 87       	std	Y+13, r30	; 0x0d
    15c0:	c8 01       	movw	r24, r16
    15c2:	8b 59       	subi	r24, 0x9B	; 155
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
			data->T9_reportid_max = max_id;
    15c6:	98 8b       	std	Y+16, r25	; 0x10
    15c8:	8f 87       	std	Y+15, r24	; 0x0f
    15ca:	d8 01       	movw	r26, r16
    15cc:	aa 59       	subi	r26, 0x9A	; 154
    15ce:	bf 4f       	sbci	r27, 0xFF	; 255
			break;
		case MXT_SPT_GPIOPWM_T19:
			data->T19_reportid = min_id;
    15d0:	ba 8b       	std	Y+18, r27	; 0x12
    15d2:	a9 8b       	std	Y+17, r26	; 0x11
    15d4:	f8 01       	movw	r30, r16
    15d6:	e9 59       	subi	r30, 0x99	; 153
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
			break;
		case MXT_SPT_MESSAGECOUNT_T44:
			data->T44_address = object->start_address;
    15da:	fc 8b       	std	Y+20, r31	; 0x14
    15dc:	eb 8b       	std	Y+19, r30	; 0x13
    15de:	c8 01       	movw	r24, r16
    15e0:	8f 59       	subi	r24, 0x9F	; 159
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
		dev_dbg("Instances %2u, ", mxt_obj_instances(object));
		dev_dbg("ReportIDs %3u : %3u\n", min_id, max_id);

		switch (object->type) {
		case MXT_GEN_MESSAGE_T5:
			data->T5_address = object->start_address;
    15e4:	9e 8b       	std	Y+22, r25	; 0x16
    15e6:	8d 8b       	std	Y+21, r24	; 0x15
    15e8:	d8 01       	movw	r26, r16
    15ea:	ad 59       	subi	r26, 0x9D	; 157
    15ec:	bf 4f       	sbci	r27, 0xFF	; 255
			break;
		case MXT_GEN_COMMAND_T6:
			data->T6_reportid = min_id;
    15ee:	b8 8f       	std	Y+24, r27	; 0x18
    15f0:	af 8b       	std	Y+23, r26	; 0x17
    15f2:	d6 01       	movw	r26, r12
    15f4:	8c 91       	ld	r24, X
    15f6:	90 e0       	ldi	r25, 0x00	; 0
	if (error)
		return error;

	/* Valid Report IDs start counting from 1 */
	reportid = 1;
	for (i = 0; i < data->info.object_num; i++) {
    15f8:	88 16       	cp	r8, r24
    15fa:	99 06       	cpc	r9, r25
    15fc:	0c f0       	brlt	.+2      	; 0x1600 <mxt_get_object_table+0x14e>
    15fe:	88 c0       	rjmp	.+272    	; 0x1710 <mxt_get_object_table+0x25e>
    1600:	f5 01       	movw	r30, r10
    1602:	00 81       	ld	r16, Z
    1604:	11 81       	ldd	r17, Z+1	; 0x01
		struct mxt_object *object = data->object_table + i;
    1606:	06 0d       	add	r16, r6
    1608:	17 1d       	adc	r17, r7
    160a:	d8 01       	movw	r26, r16
    160c:	15 96       	adiw	r26, 0x05	; 5
    160e:	8c 91       	ld	r24, X
		u8 min_id, max_id;

		le16_to_cpus(&object->start_address);

		if (object->num_report_ids) {
    1610:	15 97       	sbiw	r26, 0x05	; 5
    1612:	88 23       	and	r24, r24
    1614:	61 f0       	breq	.+24     	; 0x162e <mxt_get_object_table+0x17c>
    1616:	14 96       	adiw	r26, 0x04	; 4
    1618:	9c 91       	ld	r25, X
    161a:	89 9f       	mul	r24, r25
inline size_t mxt_obj_size(const struct mxt_object *obj){
	return obj->size + 1;
}

inline size_t mxt_obj_instances(const struct mxt_object *obj){
	return obj->instances + 1;
    161c:	80 0d       	add	r24, r0
    161e:	11 24       	eor	r1, r1

		le16_to_cpus(&object->start_address);

		if (object->num_report_ids) {
			min_id = reportid;
			reportid += object->num_report_ids *
    1620:	83 0f       	add	r24, r19
    1622:	ee 24       	eor	r14, r14
    1624:	ea 94       	dec	r14
    1626:	e8 0e       	add	r14, r24
					mxt_obj_instances(object);
			max_id = reportid - 1;
    1628:	f3 2e       	mov	r15, r19
    162a:	38 2f       	mov	r19, r24
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <mxt_get_object_table+0x180>
		u8 min_id, max_id;

		le16_to_cpus(&object->start_address);

		if (object->num_report_ids) {
			min_id = reportid;
    162e:	e1 2c       	mov	r14, r1
			reportid += object->num_report_ids *
    1630:	f1 2c       	mov	r15, r1
    1632:	f8 01       	movw	r30, r16
					mxt_obj_instances(object);
			max_id = reportid - 1;
		} else {
			min_id = 0;
			max_id = 0;
    1634:	80 81       	ld	r24, Z
			min_id = reportid;
			reportid += object->num_report_ids *
					mxt_obj_instances(object);
			max_id = reportid - 1;
		} else {
			min_id = 0;
    1636:	1f 92       	push	r1
			max_id = 0;
		}

		dev_dbg("Type %2d, ", 		object->type);
    1638:	8f 93       	push	r24
    163a:	3f 92       	push	r3
    163c:	2f 92       	push	r2
    163e:	39 8f       	std	Y+25, r19	; 0x19
    1640:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    1644:	d8 01       	movw	r26, r16
    1646:	12 96       	adiw	r26, 0x02	; 2
    1648:	8c 91       	ld	r24, X
		dev_dbg("Start %3d, ", 		object->start_address);
    164a:	12 97       	sbiw	r26, 0x02	; 2
    164c:	8f 93       	push	r24
    164e:	11 96       	adiw	r26, 0x01	; 1
    1650:	8c 91       	ld	r24, X
    1652:	8f 93       	push	r24
    1654:	5f 92       	push	r5
    1656:	4f 92       	push	r4
    1658:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    165c:	f8 01       	movw	r30, r16
    165e:	83 81       	ldd	r24, Z+3	; 0x03
    1660:	90 e0       	ldi	r25, 0x00	; 0
	//dev_dbg("reportid: %u\tmessage: %*ph\n", message->reportid, 7, message->message);
}


inline size_t mxt_obj_size(const struct mxt_object *obj){
	return obj->size + 1;
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	9f 93       	push	r25
    1666:	8f 93       	push	r24
    1668:	ad e5       	ldi	r26, 0x5D	; 93
			max_id = 0;
		}

		dev_dbg("Type %2d, ", 		object->type);
		dev_dbg("Start %3d, ", 		object->start_address);
		dev_dbg("Size %3d, ", 		mxt_obj_size(object));
    166a:	b4 e0       	ldi	r27, 0x04	; 4
    166c:	bf 93       	push	r27
    166e:	af 93       	push	r26
    1670:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    1674:	d8 01       	movw	r26, r16
    1676:	14 96       	adiw	r26, 0x04	; 4
    1678:	8c 91       	ld	r24, X
inline size_t mxt_obj_size(const struct mxt_object *obj){
	return obj->size + 1;
}

inline size_t mxt_obj_instances(const struct mxt_object *obj){
	return obj->instances + 1;
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	9f 93       	push	r25
    1680:	8f 93       	push	r24
    1682:	a8 e6       	ldi	r26, 0x68	; 104
		}

		dev_dbg("Type %2d, ", 		object->type);
		dev_dbg("Start %3d, ", 		object->start_address);
		dev_dbg("Size %3d, ", 		mxt_obj_size(object));
		dev_dbg("Instances %2u, ", mxt_obj_instances(object));
    1684:	b4 e0       	ldi	r27, 0x04	; 4
    1686:	bf 93       	push	r27
    1688:	af 93       	push	r26
    168a:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    168e:	1f 92       	push	r1
    1690:	ef 92       	push	r14
    1692:	1f 92       	push	r1
		dev_dbg("ReportIDs %3u : %3u\n", min_id, max_id);
    1694:	ff 92       	push	r15
    1696:	a8 e7       	ldi	r26, 0x78	; 120
    1698:	b4 e0       	ldi	r27, 0x04	; 4
    169a:	bf 93       	push	r27
    169c:	af 93       	push	r26
    169e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62

		switch (object->type) {
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	d8 01       	movw	r26, r16
    16ae:	8c 91       	ld	r24, X
    16b0:	39 8d       	ldd	r19, Y+25	; 0x19
    16b2:	89 30       	cpi	r24, 0x09	; 9
    16b4:	c9 f0       	breq	.+50     	; 0x16e8 <mxt_get_object_table+0x236>
    16b6:	40 f4       	brcc	.+16     	; 0x16c8 <mxt_get_object_table+0x216>
    16b8:	85 30       	cpi	r24, 0x05	; 5
    16ba:	81 f0       	breq	.+32     	; 0x16dc <mxt_get_object_table+0x22a>
    16bc:	86 30       	cpi	r24, 0x06	; 6
    16be:	09 f5       	brne	.+66     	; 0x1702 <mxt_get_object_table+0x250>
    16c0:	ef 89       	ldd	r30, Y+23	; 0x17
    16c2:	f8 8d       	ldd	r31, Y+24	; 0x18
    16c4:	f0 82       	st	Z, r15
		case MXT_GEN_MESSAGE_T5:
			data->T5_address = object->start_address;
			break;
		case MXT_GEN_COMMAND_T6:
			data->T6_reportid = min_id;
    16c6:	1d c0       	rjmp	.+58     	; 0x1702 <mxt_get_object_table+0x250>
    16c8:	83 31       	cpi	r24, 0x13	; 19
    16ca:	a9 f0       	breq	.+42     	; 0x16f6 <mxt_get_object_table+0x244>
			break;
    16cc:	8c 32       	cpi	r24, 0x2C	; 44
		dev_dbg("Start %3d, ", 		object->start_address);
		dev_dbg("Size %3d, ", 		mxt_obj_size(object));
		dev_dbg("Instances %2u, ", mxt_obj_instances(object));
		dev_dbg("ReportIDs %3u : %3u\n", min_id, max_id);

		switch (object->type) {
    16ce:	c9 f4       	brne	.+50     	; 0x1702 <mxt_get_object_table+0x250>
    16d0:	f8 01       	movw	r30, r16
    16d2:	81 81       	ldd	r24, Z+1	; 0x01
    16d4:	92 81       	ldd	r25, Z+2	; 0x02
			break;
		case MXT_SPT_GPIOPWM_T19:
			data->T19_reportid = min_id;
			break;
		case MXT_SPT_MESSAGECOUNT_T44:
			data->T44_address = object->start_address;
    16d6:	ab 89       	ldd	r26, Y+19	; 0x13
    16d8:	bc 89       	ldd	r27, Y+20	; 0x14
    16da:	11 c0       	rjmp	.+34     	; 0x16fe <mxt_get_object_table+0x24c>
    16dc:	f8 01       	movw	r30, r16
    16de:	81 81       	ldd	r24, Z+1	; 0x01
    16e0:	92 81       	ldd	r25, Z+2	; 0x02
		dev_dbg("Instances %2u, ", mxt_obj_instances(object));
		dev_dbg("ReportIDs %3u : %3u\n", min_id, max_id);

		switch (object->type) {
		case MXT_GEN_MESSAGE_T5:
			data->T5_address = object->start_address;
    16e2:	ad 89       	ldd	r26, Y+21	; 0x15
    16e4:	be 89       	ldd	r27, Y+22	; 0x16
    16e6:	0b c0       	rjmp	.+22     	; 0x16fe <mxt_get_object_table+0x24c>
    16e8:	ad 85       	ldd	r26, Y+13	; 0x0d
    16ea:	be 85       	ldd	r27, Y+14	; 0x0e
    16ec:	fc 92       	st	X, r15
			break;
		case MXT_GEN_COMMAND_T6:
			data->T6_reportid = min_id;
			break;
		case MXT_TOUCH_MULTI_T9:
			data->T9_reportid_min = min_id;
    16ee:	ef 85       	ldd	r30, Y+15	; 0x0f
    16f0:	f8 89       	ldd	r31, Y+16	; 0x10
    16f2:	e0 82       	st	Z, r14
			data->T9_reportid_max = max_id;
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <mxt_get_object_table+0x250>
    16f6:	a9 89       	ldd	r26, Y+17	; 0x11
    16f8:	ba 89       	ldd	r27, Y+18	; 0x12
			break;
    16fa:	fc 92       	st	X, r15
		case MXT_SPT_GPIOPWM_T19:
			data->T19_reportid = min_id;
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <mxt_get_object_table+0x250>
    16fe:	8d 93       	st	X+, r24
    1700:	9c 93       	st	X, r25
			break;
    1702:	bf ef       	ldi	r27, 0xFF	; 255
		case MXT_SPT_MESSAGECOUNT_T44:
			data->T44_address = object->start_address;
    1704:	8b 1a       	sub	r8, r27
    1706:	9b 0a       	sbc	r9, r27
	if (error)
		return error;

	/* Valid Report IDs start counting from 1 */
	reportid = 1;
	for (i = 0; i < data->info.object_num; i++) {
    1708:	e6 e0       	ldi	r30, 0x06	; 6
    170a:	6e 0e       	add	r6, r30
    170c:	71 1c       	adc	r7, r1
    170e:	71 cf       	rjmp	.-286    	; 0x15f2 <mxt_get_object_table+0x140>
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	69 96       	adiw	r28, 0x19	; 25
			data->T44_address = object->start_address;
			break;
		}
	}

	return 0;
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
}
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	df 90       	pop	r13
    172e:	cf 90       	pop	r12
    1730:	bf 90       	pop	r11
    1732:	af 90       	pop	r10
    1734:	9f 90       	pop	r9
    1736:	8f 90       	pop	r8
    1738:	7f 90       	pop	r7
    173a:	6f 90       	pop	r6
    173c:	5f 90       	pop	r5
    173e:	4f 90       	pop	r4
    1740:	3f 90       	pop	r3
    1742:	2f 90       	pop	r2
    1744:	08 95       	ret

00001746 <mxt_get_info>:
    1746:	ac 01       	movw	r20, r24
    1748:	4a 5b       	subi	r20, 0xBA	; 186
    174a:	5f 4f       	sbci	r21, 0xFF	; 255
int mxt_get_info(struct mxt_data *data){
	struct mxt_info *info = &data->info;
	int error;

	/* Read 7-byte info block starting at address 0 */
	error = __mxt_read_reg(MXT_INFO, sizeof(*info), info);
    174c:	67 e0       	ldi	r22, 0x07	; 7
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	c6 cc       	rjmp	.-1652   	; 0x10e2 <__mxt_read_reg>

00001756 <mxt_initialize>:
    1756:	ef 92       	push	r14
	data->T9_reportid_min = 0;
	data->T9_reportid_max = 0;

}

int mxt_initialize(struct mxt_data *data){
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	ec 01       	movw	r28, r24
	struct mxt_info *info = &data->info;
	int error;

	error = mxt_get_info(data);
    1764:	f0 df       	rcall	.-32     	; 0x1746 <mxt_get_info>
    1766:	00 97       	sbiw	r24, 0x00	; 0
	if (error)
    1768:	09 f0       	breq	.+2      	; 0x176c <mxt_initialize+0x16>
    176a:	73 c0       	rjmp	.+230    	; 0x1852 <mxt_initialize+0xfc>
    176c:	8e 01       	movw	r16, r28
		return error;

	data->object_table = malloc(info->object_num * sizeof(struct mxt_object));
    176e:	0a 5b       	subi	r16, 0xBA	; 186
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	f8 01       	movw	r30, r16
    1774:	86 81       	ldd	r24, Z+6	; 0x06
    1776:	f6 e0       	ldi	r31, 0x06	; 6
    1778:	8f 9f       	mul	r24, r31
    177a:	c0 01       	movw	r24, r0
    177c:	11 24       	eor	r1, r1
    177e:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <malloc>
    1782:	fe 01       	movw	r30, r28
    1784:	ec 5b       	subi	r30, 0xBC	; 188
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	91 83       	std	Z+1, r25	; 0x01
    178a:	80 83       	st	Z, r24
    178c:	89 2b       	or	r24, r25
	if (!data->object_table) {
    178e:	39 f4       	brne	.+14     	; 0x179e <mxt_initialize+0x48>
    1790:	8d e8       	ldi	r24, 0x8D	; 141
		dev_err("Failed to allocate memory\n");
    1792:	94 e0       	ldi	r25, 0x04	; 4
    1794:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <puts>
    1798:	84 ef       	ldi	r24, 0xF4	; 244
		return -ENOMEM;
    179a:	9f ef       	ldi	r25, 0xFF	; 255
    179c:	5a c0       	rjmp	.+180    	; 0x1852 <mxt_initialize+0xfc>
    179e:	ce 01       	movw	r24, r28
	}

	/* Get object table information */
	error = mxt_get_object_table(data);
    17a0:	88 de       	rcall	.-752    	; 0x14b2 <mxt_get_object_table>
    17a2:	7c 01       	movw	r14, r24
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	09 f0       	breq	.+2      	; 0x17aa <mxt_initialize+0x54>
	if (error)
    17a8:	51 c0       	rjmp	.+162    	; 0x184c <mxt_initialize+0xf6>
    17aa:	ce 01       	movw	r24, r28
    17ac:	96 db       	rcall	.-2260   	; 0xeda <mxt_handle_pdata>
		goto err_free_object_table;

	/* Apply config from platform data */
	error = mxt_handle_pdata(data);
    17ae:	7c 01       	movw	r14, r24
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <mxt_initialize+0x60>
    17b4:	4b c0       	rjmp	.+150    	; 0x184c <mxt_initialize+0xf6>
	if (error)
    17b6:	21 e0       	ldi	r18, 0x01	; 1
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	66 e0       	ldi	r22, 0x06	; 6
		goto err_free_object_table;

	/* Soft reset */
	error = mxt_write_object(data, MXT_GEN_COMMAND_T6,
    17bc:	ce 01       	movw	r24, r28
    17be:	86 db       	rcall	.-2292   	; 0xecc <mxt_write_object>
    17c0:	7c 01       	movw	r14, r24
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <mxt_initialize+0x72>
    17c6:	42 c0       	rjmp	.+132    	; 0x184c <mxt_initialize+0xf6>
    17c8:	2f ef       	ldi	r18, 0xFF	; 255
				 MXT_COMMAND_RESET, 1);
	if (error)
    17ca:	86 e1       	ldi	r24, 0x16	; 22
    17cc:	91 e1       	ldi	r25, 0x11	; 17
    17ce:	21 50       	subi	r18, 0x01	; 1
    17d0:	80 40       	sbci	r24, 0x00	; 0
    17d2:	90 40       	sbci	r25, 0x00	; 0
    17d4:	e1 f7       	brne	.-8      	; 0x17ce <mxt_initialize+0x78>
    17d6:	00 c0       	rjmp	.+0      	; 0x17d8 <mxt_initialize+0x82>
    17d8:	00 00       	nop
    17da:	f8 01       	movw	r30, r16
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	93 81       	ldd	r25, Z+3	; 0x03
    17e0:	1f 92       	push	r1
		goto err_free_object_table;
	_delay_ms(MXT_RESET_TIME);
	
	dev_info("Family ID: %u Variant ID: %u Major.Minor.Build: %u.%u.%02X\n",
    17e2:	9f 93       	push	r25
    17e4:	98 2f       	mov	r25, r24
    17e6:	9f 70       	andi	r25, 0x0F	; 15
    17e8:	1f 92       	push	r1
    17ea:	9f 93       	push	r25
    17ec:	82 95       	swap	r24
    17ee:	8f 70       	andi	r24, 0x0F	; 15
    17f0:	1f 92       	push	r1
    17f2:	8f 93       	push	r24
    17f4:	81 81       	ldd	r24, Z+1	; 0x01
    17f6:	1f 92       	push	r1
    17f8:	8f 93       	push	r24
    17fa:	80 81       	ld	r24, Z
    17fc:	1f 92       	push	r1
    17fe:	8f 93       	push	r24
    1800:	87 ea       	ldi	r24, 0xA7	; 167
    1802:	94 e0       	ldi	r25, 0x04	; 4
    1804:	9f 93       	push	r25
    1806:	8f 93       	push	r24
    1808:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    180c:	f8 01       	movw	r30, r16
    180e:	86 81       	ldd	r24, Z+6	; 0x06
    1810:	1f 92       	push	r1
    1812:	8f 93       	push	r24
			info->family_id, info->variant_id, info->version >> 4,
			info->version & 0xf, info->build);

	dev_info("Matrix X Size: %u Matrix Y Size: %u Object Num: %u\n",
    1814:	85 81       	ldd	r24, Z+5	; 0x05
    1816:	1f 92       	push	r1
    1818:	8f 93       	push	r24
    181a:	84 81       	ldd	r24, Z+4	; 0x04
    181c:	1f 92       	push	r1
    181e:	8f 93       	push	r24
    1820:	83 ee       	ldi	r24, 0xE3	; 227
    1822:	94 e0       	ldi	r25, 0x04	; 4
    1824:	9f 93       	push	r25
    1826:	8f 93       	push	r24
    1828:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <printf>
    182c:	8d b7       	in	r24, 0x3d	; 61
    182e:	9e b7       	in	r25, 0x3e	; 62
    1830:	44 96       	adiw	r24, 0x14	; 20
    1832:	0f b6       	in	r0, 0x3f	; 63
			info->matrix_xsize, info->matrix_ysize,
			info->object_num);
	
	error = mxt_calc_resolution(data);
    1834:	f8 94       	cli
    1836:	9e bf       	out	0x3e, r25	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	8d bf       	out	0x3d, r24	; 61
    183c:	ce 01       	movw	r24, r28
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
	mxt_free_object_table(data);
	return error;


	return 0;
}
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	bb cd       	rjmp	.-1162   	; 0x13c2 <mxt_calc_resolution>
    184c:	ce 01       	movw	r24, r28
    184e:	0a d8       	rcall	.-4076   	; 0x864 <mxt_free_object_table>
    1850:	c7 01       	movw	r24, r14

	dev_info("Matrix X Size: %u Matrix Y Size: %u Object Num: %u\n",
			info->matrix_xsize, info->matrix_ysize,
			info->object_num);
	
	error = mxt_calc_resolution(data);
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
		return error;

	return 0;

err_free_object_table:
	mxt_free_object_table(data);
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
	return error;
    185c:	ef 90       	pop	r14


	return 0;
}
    185e:	08 95       	ret

00001860 <Digitizer_Init>:
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	26 98       	cbi	0x04, 6	; 4
    1866:	52 98       	cbi	0x0a, 2	; 10
    1868:	87 e8       	ldi	r24, 0x87	; 135
    186a:	90 e0       	ldi	r25, 0x00	; 0
	int err; 

	DDRB &= ~PIN_S4;	// PB6
	DDRD &= ~PIN_S3;	// PD2

	data = malloc(sizeof(struct mxt_data));
    186c:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <malloc>
    1870:	ec 01       	movw	r28, r24
    1872:	90 93 8e 06 	sts	0x068E, r25
    1876:	80 93 8d 06 	sts	0x068D, r24
	if (!data) {
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	19 f4       	brne	.+6      	; 0x1884 <Digitizer_Init+0x24>
		dev_err("Failed to allocate memory\n");
    187e:	8d e8       	ldi	r24, 0x8D	; 141
    1880:	94 e0       	ldi	r25, 0x04	; 4
    1882:	09 c0       	rjmp	.+18     	; 0x1896 <Digitizer_Init+0x36>
		return -ENOMEM;
	}

	pdata = malloc(sizeof(struct mxt_platform_data));
    1884:	89 e1       	ldi	r24, 0x19	; 25
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <malloc>
    188c:	fc 01       	movw	r30, r24
	if (!pdata) {
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	39 f4       	brne	.+14     	; 0x18a0 <Digitizer_Init+0x40>
		dev_err("Failed to allocate memory for pdata\n");
    1892:	87 e1       	ldi	r24, 0x17	; 23
    1894:	95 e0       	ldi	r25, 0x05	; 5
    1896:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <puts>
		return -ENOMEM;
    189a:	84 ef       	ldi	r24, 0xF4	; 244
    189c:	9f ef       	ldi	r25, 0xFF	; 255
    189e:	60 c0       	rjmp	.+192    	; 0x1960 <Digitizer_Init+0x100>
	}

	data->initialized = false;
    18a0:	de 01       	movw	r26, r28
    18a2:	a2 5b       	subi	r26, 0xB2	; 178
    18a4:	bf 4f       	sbci	r27, 0xFF	; 255
    18a6:	1c 92       	st	X, r1

	pdata->x_line			= 18;
    18a8:	82 e1       	ldi	r24, 0x12	; 18
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	95 83       	std	Z+5, r25	; 0x05
    18ae:	84 83       	std	Z+4, r24	; 0x04
	pdata->y_line			= 11;
    18b0:	8b e0       	ldi	r24, 0x0B	; 11
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	97 83       	std	Z+7, r25	; 0x07
    18b6:	86 83       	std	Z+6, r24	; 0x06
	pdata->x_size			= 1024;
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	94 e0       	ldi	r25, 0x04	; 4
    18bc:	91 87       	std	Z+9, r25	; 0x09
    18be:	80 87       	std	Z+8, r24	; 0x08
	pdata->y_size			= 600;
    18c0:	88 e5       	ldi	r24, 0x58	; 88
    18c2:	92 e0       	ldi	r25, 0x02	; 2
    18c4:	93 87       	std	Z+11, r25	; 0x0b
    18c6:	82 87       	std	Z+10, r24	; 0x0a
	pdata->blen				= 0x1;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	95 87       	std	Z+13, r25	; 0x0d
    18ce:	84 87       	std	Z+12, r24	; 0x0c
	pdata->threshold		= 0x28;
    18d0:	88 e2       	ldi	r24, 0x28	; 40
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	97 87       	std	Z+15, r25	; 0x0f
    18d6:	86 87       	std	Z+14, r24	; 0x0e
	pdata->voltage			= 2800000;		/* 2.8V */
    18d8:	40 e8       	ldi	r20, 0x80	; 128
    18da:	59 eb       	ldi	r21, 0xB9	; 185
    18dc:	6a e2       	ldi	r22, 0x2A	; 42
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	40 8b       	std	Z+16, r20	; 0x10
    18e2:	51 8b       	std	Z+17, r21	; 0x11
    18e4:	62 8b       	std	Z+18, r22	; 0x12
    18e6:	73 8b       	std	Z+19, r23	; 0x13
	pdata->orient			= MXT_DIAGONAL_COUNTER;
    18e8:	87 e0       	ldi	r24, 0x07	; 7
    18ea:	84 8b       	std	Z+20, r24	; 0x14
	pdata->irqflags			= IRQF_TRIGGER_FALLING;
    18ec:	42 e0       	ldi	r20, 0x02	; 2
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	45 8b       	std	Z+21, r20	; 0x15
    18f6:	56 8b       	std	Z+22, r21	; 0x16
    18f8:	67 8b       	std	Z+23, r22	; 0x17
    18fa:	70 8f       	std	Z+24, r23	; 0x18
	pdata->config 			= NULL;
    18fc:	11 82       	std	Z+1, r1	; 0x01
    18fe:	10 82       	st	Z, r1
	pdata->config_length	= 0;
    1900:	13 82       	std	Z+3, r1	; 0x03
    1902:	12 82       	std	Z+2, r1	; 0x02

	data->pdata = pdata;
    1904:	ce 5b       	subi	r28, 0xBE	; 190
    1906:	df 4f       	sbci	r29, 0xFF	; 255
    1908:	f9 83       	std	Y+1, r31	; 0x01
    190a:	e8 83       	st	Y, r30

	TWI_Init();
    190c:	9a d9       	rcall	.-3276   	; 0xc42 <TWI_Init>
    190e:	8b e3       	ldi	r24, 0x3B	; 59
	dev_err("calling mxt_initialize\n");
    1910:	95 e0       	ldi	r25, 0x05	; 5
    1912:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <puts>
    1916:	80 91 8d 06 	lds	r24, 0x068D
	err = mxt_initialize(data);
    191a:	90 91 8e 06 	lds	r25, 0x068E
    191e:	1b df       	rcall	.-458    	; 0x1756 <mxt_initialize>
    1920:	89 2b       	or	r24, r25
    1922:	19 f0       	breq	.+6      	; 0x192a <Digitizer_Init+0xca>
	if (err) {
    1924:	82 e5       	ldi	r24, 0x52	; 82
    1926:	95 e0       	ldi	r25, 0x05	; 5
		dev_err("Unable to initilize TP\n");
    1928:	0c c0       	rjmp	.+24     	; 0x1942 <Digitizer_Init+0xe2>
    192a:	21 e0       	ldi	r18, 0x01	; 1
    192c:	43 e0       	ldi	r20, 0x03	; 3
	}

	/* Force the device to report back status so we can cache the device
	 * config checksum
	 */
	err = mxt_write_object(data, MXT_GEN_COMMAND_T6,
    192e:	66 e0       	ldi	r22, 0x06	; 6
    1930:	80 91 8d 06 	lds	r24, 0x068D
    1934:	90 91 8e 06 	lds	r25, 0x068E
    1938:	c9 da       	rcall	.-2670   	; 0xecc <mxt_write_object>
    193a:	89 2b       	or	r24, r25
    193c:	39 f0       	breq	.+14     	; 0x194c <Digitizer_Init+0xec>
    193e:	89 e6       	ldi	r24, 0x69	; 105
				 MXT_COMMAND_REPORTALL, 1);
	if (err){
    1940:	95 e0       	ldi	r25, 0x05	; 5
    1942:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <puts>
		dev_warn("error making device report status.\n");
    1946:	8b ef       	ldi	r24, 0xFB	; 251
    1948:	9f ef       	ldi	r25, 0xFF	; 255
    194a:	0a c0       	rjmp	.+20     	; 0x1960 <Digitizer_Init+0x100>
		return -EIO;	
    194c:	e0 91 8d 06 	lds	r30, 0x068D
    1950:	f0 91 8e 06 	lds	r31, 0x068E
	}

	data->initialized = true;
    1954:	e2 5b       	subi	r30, 0xB2	; 178
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	80 83       	st	Z, r24
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	df 91       	pop	r29

	return 0;
    1962:	cf 91       	pop	r28
    1964:	08 95       	ret

00001966 <Endpoint_Write_Stream_LE>:
}
    1966:	cf 92       	push	r12
    1968:	df 92       	push	r13
    196a:	ef 92       	push	r14
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	7c 01       	movw	r14, r24
    1978:	8b 01       	movw	r16, r22
    197a:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    197c:	c7 d1       	rcall	.+910    	; 0x1d0c <Endpoint_WaitUntilReady>
    197e:	81 11       	cpse	r24, r1
    1980:	30 c0       	rjmp	.+96     	; 0x19e2 <Endpoint_Write_Stream_LE+0x7c>
    1982:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1984:	31 f0       	breq	.+12     	; 0x1992 <Endpoint_Write_Stream_LE+0x2c>
    1986:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1988:	99 81       	ldd	r25, Y+1	; 0x01
    198a:	08 1b       	sub	r16, r24
    198c:	19 0b       	sbc	r17, r25
    198e:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1990:	f9 1e       	adc	r15, r25
    1992:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1994:	d1 2c       	mov	r13, r1
    1996:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1998:	11 05       	cpc	r17, r1
    199a:	11 f1       	breq	.+68     	; 0x19e0 <Endpoint_Write_Stream_LE+0x7a>
    199c:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    19a0:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    19a2:	13 c0       	rjmp	.+38     	; 0x19ca <Endpoint_Write_Stream_LE+0x64>
    19a4:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19a8:	8e 77       	andi	r24, 0x7E	; 126
    19aa:	80 93 e8 00 	sts	0x00E8, r24
    19ae:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    19b0:	41 f0       	breq	.+16     	; 0x19c2 <Endpoint_Write_Stream_LE+0x5c>
    19b2:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    19b4:	99 81       	ldd	r25, Y+1	; 0x01
    19b6:	8c 0d       	add	r24, r12
    19b8:	9d 1d       	adc	r25, r13
    19ba:	99 83       	std	Y+1, r25	; 0x01
    19bc:	88 83       	st	Y, r24
    19be:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    19c0:	10 c0       	rjmp	.+32     	; 0x19e2 <Endpoint_Write_Stream_LE+0x7c>
    19c2:	a4 d1       	rcall	.+840    	; 0x1d0c <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    19c4:	88 23       	and	r24, r24
    19c6:	39 f3       	breq	.-50     	; 0x1996 <Endpoint_Write_Stream_LE+0x30>
    19c8:	0c c0       	rjmp	.+24     	; 0x19e2 <Endpoint_Write_Stream_LE+0x7c>
    19ca:	f7 01       	movw	r30, r14
    19cc:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    19ce:	7f 01       	movw	r14, r30
    19d0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19d4:	01 50       	subi	r16, 0x01	; 1
    19d6:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    19d8:	ff ef       	ldi	r31, 0xFF	; 255
    19da:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    19dc:	df 0a       	sbc	r13, r31
    19de:	db cf       	rjmp	.-74     	; 0x1996 <Endpoint_Write_Stream_LE+0x30>
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    19e4:	cf 91       	pop	r28
}
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	ff 90       	pop	r15
    19ec:	ef 90       	pop	r14
    19ee:	df 90       	pop	r13
    19f0:	cf 90       	pop	r12
    19f2:	08 95       	ret

000019f4 <Endpoint_Write_Control_Stream_LE>:
    19f4:	20 91 9a 06 	lds	r18, 0x069A
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    19f8:	30 91 9b 06 	lds	r19, 0x069B
    19fc:	26 17       	cp	r18, r22
    19fe:	37 07       	cpc	r19, r23
    1a00:	48 f0       	brcs	.+18     	; 0x1a14 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1a02:	61 15       	cp	r22, r1
    1a04:	71 05       	cpc	r23, r1
    1a06:	39 f4       	brne	.+14     	; 0x1a16 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a08:	20 91 e8 00 	lds	r18, 0x00E8
    1a0c:	2e 77       	andi	r18, 0x7E	; 126
    1a0e:	20 93 e8 00 	sts	0x00E8, r18
    1a12:	01 c0       	rjmp	.+2      	; 0x1a16 <Endpoint_Write_Control_Stream_LE+0x22>
    1a14:	b9 01       	movw	r22, r18
    1a16:	fc 01       	movw	r30, r24
    1a18:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a1a:	61 15       	cp	r22, r1
    1a1c:	71 05       	cpc	r23, r1
    1a1e:	a9 f1       	breq	.+106    	; 0x1a8a <Endpoint_Write_Control_Stream_LE+0x96>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a20:	80 91 93 06 	lds	r24, 0x0693

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a24:	88 23       	and	r24, r24
    1a26:	e9 f1       	breq	.+122    	; 0x1aa2 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a28:	85 30       	cpi	r24, 0x05	; 5
    1a2a:	e9 f1       	breq	.+122    	; 0x1aa6 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a2c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a30:	83 fd       	sbrc	r24, 3
    1a32:	35 c0       	rjmp	.+106    	; 0x1a9e <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a34:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1a38:	82 ff       	sbrs	r24, 2
    1a3a:	06 c0       	rjmp	.+12     	; 0x1a48 <Endpoint_Write_Control_Stream_LE+0x54>
    1a3c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1a40:	82 ff       	sbrs	r24, 2
    1a42:	26 c0       	rjmp	.+76     	; 0x1a90 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a48:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1a4c:	80 ff       	sbrs	r24, 0
    1a4e:	e5 cf       	rjmp	.-54     	; 0x1a1a <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1a50:	20 91 f3 00 	lds	r18, 0x00F3
    1a54:	80 91 f2 00 	lds	r24, 0x00F2
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a5c:	61 15       	cp	r22, r1
    1a5e:	71 05       	cpc	r23, r1
    1a60:	51 f0       	breq	.+20     	; 0x1a76 <Endpoint_Write_Control_Stream_LE+0x82>
    1a62:	88 30       	cpi	r24, 0x08	; 8
    1a64:	91 05       	cpc	r25, r1
    1a66:	38 f4       	brcc	.+14     	; 0x1a76 <Endpoint_Write_Control_Stream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a68:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a6a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1a6e:	61 50       	subi	r22, 0x01	; 1
    1a70:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1a72:	01 96       	adiw	r24, 0x01	; 1
    1a74:	f3 cf       	rjmp	.-26     	; 0x1a5c <Endpoint_Write_Control_Stream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a76:	21 e0       	ldi	r18, 0x01	; 1
    1a78:	08 97       	sbiw	r24, 0x08	; 8
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <Endpoint_Write_Control_Stream_LE+0x8a>
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a7e:	80 91 e8 00 	lds	r24, 0x00E8
    1a82:	8e 77       	andi	r24, 0x7E	; 126
    1a84:	80 93 e8 00 	sts	0x00E8, r24
    1a88:	c8 cf       	rjmp	.-112    	; 0x1a1a <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a8a:	21 11       	cpse	r18, r1
    1a8c:	c9 cf       	rjmp	.-110    	; 0x1a20 <Endpoint_Write_Control_Stream_LE+0x2c>
    1a8e:	d6 cf       	rjmp	.-84     	; 0x1a3c <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a90:	80 91 93 06 	lds	r24, 0x0693

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a94:	88 23       	and	r24, r24
    1a96:	29 f0       	breq	.+10     	; 0x1aa2 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a98:	85 30       	cpi	r24, 0x05	; 5
    1a9a:	81 f6       	brne	.-96     	; 0x1a3c <Endpoint_Write_Control_Stream_LE+0x48>
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <Endpoint_Write_Control_Stream_LE+0xb2>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1aa2:	82 e0       	ldi	r24, 0x02	; 2
    1aa4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1aa8:	08 95       	ret

00001aaa <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1aaa:	61 15       	cp	r22, r1
    1aac:	71 05       	cpc	r23, r1
    1aae:	29 f4       	brne	.+10     	; 0x1aba <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ab0:	20 91 e8 00 	lds	r18, 0x00E8
    1ab4:	2b 77       	andi	r18, 0x7B	; 123
    1ab6:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();

	while (Length)
    1aba:	61 15       	cp	r22, r1
    1abc:	71 05       	cpc	r23, r1
    1abe:	41 f1       	breq	.+80     	; 0x1b10 <Endpoint_Read_Control_Stream_LE+0x66>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ac0:	20 91 93 06 	lds	r18, 0x0693

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ac4:	22 23       	and	r18, r18
    1ac6:	69 f1       	breq	.+90     	; 0x1b22 <Endpoint_Read_Control_Stream_LE+0x78>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ac8:	25 30       	cpi	r18, 0x05	; 5
    1aca:	69 f1       	breq	.+90     	; 0x1b26 <Endpoint_Read_Control_Stream_LE+0x7c>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1acc:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1ad0:	23 fd       	sbrc	r18, 3
    1ad2:	23 c0       	rjmp	.+70     	; 0x1b1a <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ad4:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1ad8:	22 ff       	sbrs	r18, 2
    1ada:	f2 cf       	rjmp	.-28     	; 0x1ac0 <Endpoint_Read_Control_Stream_LE+0x16>
    1adc:	fc 01       	movw	r30, r24
    1ade:	cf 01       	movw	r24, r30
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1ae0:	40 91 f3 00 	lds	r20, 0x00F3
    1ae4:	20 91 f2 00 	lds	r18, 0x00F2
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	34 2b       	or	r19, r20
		{
			while (Length && Endpoint_BytesInEndpoint())
    1aec:	23 2b       	or	r18, r19
    1aee:	01 f3       	breq	.-64     	; 0x1ab0 <Endpoint_Read_Control_Stream_LE+0x6>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1af0:	80 91 f1 00 	lds	r24, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1af4:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1af6:	cf 01       	movw	r24, r30
				Length--;
    1af8:	61 50       	subi	r22, 0x01	; 1
    1afa:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1afc:	61 15       	cp	r22, r1
    1afe:	71 05       	cpc	r23, r1
    1b00:	71 f7       	brne	.-36     	; 0x1ade <Endpoint_Read_Control_Stream_LE+0x34>
    1b02:	d6 cf       	rjmp	.-84     	; 0x1ab0 <Endpoint_Read_Control_Stream_LE+0x6>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b04:	80 91 93 06 	lds	r24, 0x0693

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b08:	88 23       	and	r24, r24
    1b0a:	59 f0       	breq	.+22     	; 0x1b22 <Endpoint_Read_Control_Stream_LE+0x78>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b0c:	85 30       	cpi	r24, 0x05	; 5
    1b0e:	59 f0       	breq	.+22     	; 0x1b26 <Endpoint_Read_Control_Stream_LE+0x7c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b10:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1b14:	80 ff       	sbrs	r24, 0
    1b16:	f6 cf       	rjmp	.-20     	; 0x1b04 <Endpoint_Read_Control_Stream_LE+0x5a>
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <Endpoint_Read_Control_Stream_LE+0x74>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1b26:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b28:	08 95       	ret

00001b2a <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1b2a:	20 91 9a 06 	lds	r18, 0x069A
    1b2e:	30 91 9b 06 	lds	r19, 0x069B
    1b32:	26 17       	cp	r18, r22
    1b34:	37 07       	cpc	r19, r23
    1b36:	48 f0       	brcs	.+18     	; 0x1b4a <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1b38:	61 15       	cp	r22, r1
    1b3a:	71 05       	cpc	r23, r1
    1b3c:	39 f4       	brne	.+14     	; 0x1b4c <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b3e:	20 91 e8 00 	lds	r18, 0x00E8
    1b42:	2e 77       	andi	r18, 0x7E	; 126
    1b44:	20 93 e8 00 	sts	0x00E8, r18
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <Endpoint_Write_Control_PStream_LE+0x22>
    1b4a:	b9 01       	movw	r22, r18
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b50:	61 15       	cp	r22, r1
    1b52:	71 05       	cpc	r23, r1
    1b54:	c1 f1       	breq	.+112    	; 0x1bc6 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b56:	80 91 93 06 	lds	r24, 0x0693

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b5a:	88 23       	and	r24, r24
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <Endpoint_Write_Control_PStream_LE+0x36>
    1b5e:	3f c0       	rjmp	.+126    	; 0x1bde <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b60:	85 30       	cpi	r24, 0x05	; 5
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <Endpoint_Write_Control_PStream_LE+0x3c>
    1b64:	3e c0       	rjmp	.+124    	; 0x1be2 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b66:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b6a:	83 fd       	sbrc	r24, 3
    1b6c:	36 c0       	rjmp	.+108    	; 0x1bda <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b6e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1b72:	82 ff       	sbrs	r24, 2
    1b74:	06 c0       	rjmp	.+12     	; 0x1b82 <Endpoint_Write_Control_PStream_LE+0x58>
    1b76:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1b7a:	82 ff       	sbrs	r24, 2
    1b7c:	27 c0       	rjmp	.+78     	; 0x1bcc <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b82:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1b86:	80 ff       	sbrs	r24, 0
    1b88:	e3 cf       	rjmp	.-58     	; 0x1b50 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1b8a:	20 91 f3 00 	lds	r18, 0x00F3
    1b8e:	80 91 f2 00 	lds	r24, 0x00F2
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b96:	61 15       	cp	r22, r1
    1b98:	71 05       	cpc	r23, r1
    1b9a:	59 f0       	breq	.+22     	; 0x1bb2 <Endpoint_Write_Control_PStream_LE+0x88>
    1b9c:	88 30       	cpi	r24, 0x08	; 8
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	40 f4       	brcc	.+16     	; 0x1bb2 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1ba2:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ba4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1ba8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1baa:	61 50       	subi	r22, 0x01	; 1
    1bac:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	f2 cf       	rjmp	.-28     	; 0x1b96 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1bb2:	21 e0       	ldi	r18, 0x01	; 1
    1bb4:	08 97       	sbiw	r24, 0x08	; 8
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <Endpoint_Write_Control_PStream_LE+0x90>
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bba:	80 91 e8 00 	lds	r24, 0x00E8
    1bbe:	8e 77       	andi	r24, 0x7E	; 126
    1bc0:	80 93 e8 00 	sts	0x00E8, r24
    1bc4:	c5 cf       	rjmp	.-118    	; 0x1b50 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1bc6:	21 11       	cpse	r18, r1
    1bc8:	c6 cf       	rjmp	.-116    	; 0x1b56 <Endpoint_Write_Control_PStream_LE+0x2c>
    1bca:	d5 cf       	rjmp	.-86     	; 0x1b76 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bcc:	80 91 93 06 	lds	r24, 0x0693

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bd0:	88 23       	and	r24, r24
    1bd2:	29 f0       	breq	.+10     	; 0x1bde <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1bd4:	85 30       	cpi	r24, 0x05	; 5
    1bd6:	79 f6       	brne	.-98     	; 0x1b76 <Endpoint_Write_Control_PStream_LE+0x4c>
    1bd8:	04 c0       	rjmp	.+8      	; 0x1be2 <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1be2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1be4:	08 95       	ret

00001be6 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1be6:	98 2f       	mov	r25, r24
    1be8:	97 30       	cpi	r25, 0x07	; 7
    1bea:	58 f5       	brcc	.+86     	; 0x1c42 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bec:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1bf0:	98 17       	cp	r25, r24
    1bf2:	39 f0       	breq	.+14     	; 0x1c02 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1bf4:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1bf8:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1bfc:	50 91 f0 00 	lds	r21, 0x00F0
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1c02:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1c04:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1c06:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1c08:	21 ff       	sbrs	r18, 1
    1c0a:	19 c0       	rjmp	.+50     	; 0x1c3e <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1c0c:	30 91 eb 00 	lds	r19, 0x00EB
    1c10:	3e 7f       	andi	r19, 0xFE	; 254
    1c12:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1c16:	30 91 ed 00 	lds	r19, 0x00ED
    1c1a:	3d 7f       	andi	r19, 0xFD	; 253
    1c1c:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1c20:	30 91 eb 00 	lds	r19, 0x00EB
    1c24:	31 60       	ori	r19, 0x01	; 1
    1c26:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1c2a:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1c2e:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1c32:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1c36:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1c3a:	27 ff       	sbrs	r18, 7
    1c3c:	07 c0       	rjmp	.+14     	; 0x1c4c <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1c3e:	9f 5f       	subi	r25, 0xFF	; 255
    1c40:	d3 cf       	rjmp	.-90     	; 0x1be8 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c42:	8f 70       	andi	r24, 0x0F	; 15
    1c44:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1c4e:	08 95       	ret

00001c50 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	06 2f       	mov	r16, r22
    1c5a:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    1c5c:	10 e0       	ldi	r17, 0x00	; 0
    1c5e:	10 17       	cp	r17, r16
    1c60:	71 f1       	breq	.+92     	; 0x1cbe <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
    1c62:	98 81       	ld	r25, Y
    1c64:	99 23       	and	r25, r25
    1c66:	41 f1       	breq	.+80     	; 0x1cb8 <Endpoint_ConfigureEndpointTable+0x68>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1c68:	2c 81       	ldd	r18, Y+4	; 0x04
    1c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6e:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1c70:	89 2f       	mov	r24, r25
    1c72:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1c74:	87 30       	cpi	r24, 0x07	; 7
    1c76:	10 f0       	brcs	.+4      	; 0x1c7c <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	22 c0       	rjmp	.+68     	; 0x1cc0 <Endpoint_ConfigureEndpointTable+0x70>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c7c:	22 30       	cpi	r18, 0x02	; 2
    1c7e:	10 f0       	brcs	.+4      	; 0x1c84 <Endpoint_ConfigureEndpointTable+0x34>
    1c80:	56 e0       	ldi	r21, 0x06	; 6
    1c82:	01 c0       	rjmp	.+2      	; 0x1c86 <Endpoint_ConfigureEndpointTable+0x36>
    1c84:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1c86:	28 e0       	ldi	r18, 0x08	; 8
    1c88:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1c8c:	2e 17       	cp	r18, r30
    1c8e:	3f 07       	cpc	r19, r31
    1c90:	20 f4       	brcc	.+8      	; 0x1c9a <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
    1c92:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1c94:	22 0f       	add	r18, r18
    1c96:	33 1f       	adc	r19, r19
    1c98:	f9 cf       	rjmp	.-14     	; 0x1c8c <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
    1c9a:	42 95       	swap	r20
    1c9c:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c9e:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1ca0:	69 2f       	mov	r22, r25
    1ca2:	66 1f       	adc	r22, r22
    1ca4:	66 27       	eor	r22, r22
    1ca6:	66 1f       	adc	r22, r22
    1ca8:	90 e4       	ldi	r25, 0x40	; 64
    1caa:	79 9f       	mul	r23, r25
    1cac:	90 01       	movw	r18, r0
    1cae:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1cb0:	62 2b       	or	r22, r18
    1cb2:	99 df       	rcall	.-206    	; 0x1be6 <Endpoint_ConfigureEndpoint_Prv>
    1cb4:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1cb6:	01 f3       	breq	.-64     	; 0x1c78 <Endpoint_ConfigureEndpointTable+0x28>
    1cb8:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1cba:	25 96       	adiw	r28, 0x05	; 5
    1cbc:	d0 cf       	rjmp	.-96     	; 0x1c5e <Endpoint_ConfigureEndpointTable+0xe>
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    1cc0:	df 91       	pop	r29
}
    1cc2:	cf 91       	pop	r28
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
    1cc8:	08 95       	ret

00001cca <Endpoint_ClearStatusStage>:
    1cca:	80 91 94 06 	lds	r24, 0x0694
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1cce:	87 fd       	sbrc	r24, 7
    1cd0:	05 c0       	rjmp	.+10     	; 0x1cdc <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1cd2:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1cd6:	80 ff       	sbrs	r24, 0
    1cd8:	0e c0       	rjmp	.+28     	; 0x1cf6 <Endpoint_ClearStatusStage+0x2c>
    1cda:	12 c0       	rjmp	.+36     	; 0x1d00 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1cdc:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1ce0:	82 fd       	sbrc	r24, 2
    1ce2:	05 c0       	rjmp	.+10     	; 0x1cee <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1ce4:	80 91 93 06 	lds	r24, 0x0693
    1ce8:	81 11       	cpse	r24, r1
    1cea:	f8 cf       	rjmp	.-16     	; 0x1cdc <Endpoint_ClearStatusStage+0x12>
    1cec:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1cee:	80 91 e8 00 	lds	r24, 0x00E8
    1cf2:	8b 77       	andi	r24, 0x7B	; 123
    1cf4:	08 c0       	rjmp	.+16     	; 0x1d06 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1cf6:	80 91 93 06 	lds	r24, 0x0693
    1cfa:	81 11       	cpse	r24, r1
    1cfc:	ea cf       	rjmp	.-44     	; 0x1cd2 <Endpoint_ClearStatusStage+0x8>
    1cfe:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d00:	80 91 e8 00 	lds	r24, 0x00E8
    1d04:	8e 77       	andi	r24, 0x7E	; 126
    1d06:	80 93 e8 00 	sts	0x00E8, r24
    1d0a:	08 95       	ret

00001d0c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1d0c:	80 91 e4 00 	lds	r24, 0x00E4
    1d10:	90 91 e5 00 	lds	r25, 0x00E5
    1d14:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d16:	20 91 ec 00 	lds	r18, 0x00EC
    1d1a:	20 ff       	sbrs	r18, 0
    1d1c:	21 c0       	rjmp	.+66     	; 0x1d60 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d1e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1d22:	20 fd       	sbrc	r18, 0
    1d24:	21 c0       	rjmp	.+66     	; 0x1d68 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d26:	20 91 93 06 	lds	r18, 0x0693

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d2a:	22 23       	and	r18, r18
    1d2c:	89 f0       	breq	.+34     	; 0x1d50 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d2e:	25 30       	cpi	r18, 0x05	; 5
    1d30:	89 f0       	breq	.+34     	; 0x1d54 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d32:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1d36:	25 fd       	sbrc	r18, 5
    1d38:	0f c0       	rjmp	.+30     	; 0x1d58 <Endpoint_WaitUntilReady+0x4c>
    1d3a:	20 91 e4 00 	lds	r18, 0x00E4
    1d3e:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1d42:	28 17       	cp	r18, r24
    1d44:	39 07       	cpc	r19, r25
    1d46:	39 f3       	breq	.-50     	; 0x1d16 <Endpoint_WaitUntilReady+0xa>
    1d48:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1d4a:	41 f0       	breq	.+16     	; 0x1d5c <Endpoint_WaitUntilReady+0x50>
    1d4c:	c9 01       	movw	r24, r18
    1d4e:	e3 cf       	rjmp	.-58     	; 0x1d16 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1d50:	82 e0       	ldi	r24, 0x02	; 2
    1d52:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1d54:	83 e0       	ldi	r24, 0x03	; 3
    1d56:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1d5c:	84 e0       	ldi	r24, 0x04	; 4
    1d5e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d60:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1d64:	22 ff       	sbrs	r18, 2
    1d66:	df cf       	rjmp	.-66     	; 0x1d26 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	08 95       	ret

00001d6c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1d74:	4b d0       	rcall	.+150    	; 0x1e0c <USB_INT_DisableAllInterrupts>
    1d76:	52 d0       	rcall	.+164    	; 0x1e1c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1d78:	c8 ed       	ldi	r28, 0xD8	; 216
    1d7a:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1d7c:	88 81       	ld	r24, Y
    1d7e:	8f 77       	andi	r24, 0x7F	; 127
    1d80:	88 83       	st	Y, r24
    1d82:	88 81       	ld	r24, Y
    1d84:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    1d86:	88 83       	st	Y, r24
    1d88:	88 81       	ld	r24, Y
    1d8a:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d8c:	88 83       	st	Y, r24
    1d8e:	19 bc       	out	0x29, r1	; 41
    1d90:	10 92 93 06 	sts	0x0693, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1d94:	10 92 8f 06 	sts	0x068F, r1
	USB_Device_ConfigurationNumber  = 0;
    1d98:	10 92 91 06 	sts	0x0691, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1d9c:	10 92 90 06 	sts	0x0690, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1da0:	00 ee       	ldi	r16, 0xE0	; 224
    1da2:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1da4:	f8 01       	movw	r30, r16
    1da6:	80 81       	ld	r24, Z
    1da8:	8b 7f       	andi	r24, 0xFB	; 251
    1daa:	80 83       	st	Z, r24
    1dac:	88 81       	ld	r24, Y
    1dae:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1db0:	88 83       	st	Y, r24
    1db2:	42 e0       	ldi	r20, 0x02	; 2
    1db4:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	16 df       	rcall	.-468    	; 0x1be6 <Endpoint_ConfigureEndpoint_Prv>
    1dba:	e1 ee       	ldi	r30, 0xE1	; 225
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1dc0:	8e 7f       	andi	r24, 0xFE	; 254
    1dc2:	80 83       	st	Z, r24
    1dc4:	e2 ee       	ldi	r30, 0xE2	; 226
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1dca:	81 60       	ori	r24, 0x01	; 1
    1dcc:	80 83       	st	Z, r24
    1dce:	80 81       	ld	r24, Z
    1dd0:	88 60       	ori	r24, 0x08	; 8
    1dd2:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1dda:	80 83       	st	Z, r24
    1ddc:	88 81       	ld	r24, Y
    1dde:	80 61       	ori	r24, 0x10	; 16
    1de0:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1de8:	0f 91       	pop	r16
    1dea:	08 95       	ret

00001dec <USB_Init>:
    1dec:	e8 ed       	ldi	r30, 0xD8	; 216
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1df2:	8f 7e       	andi	r24, 0xEF	; 239
    1df4:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1df6:	e7 ed       	ldi	r30, 0xD7	; 215
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	81 60       	ori	r24, 0x01	; 1
    1dfe:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1e00:	84 e0       	ldi	r24, 0x04	; 4
    1e02:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	80 93 92 06 	sts	0x0692, r24

	USB_ResetInterface();
    1e0a:	b0 cf       	rjmp	.-160    	; 0x1d6c <USB_ResetInterface>

00001e0c <USB_INT_DisableAllInterrupts>:
    1e0c:	e8 ed       	ldi	r30, 0xD8	; 216
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	8e 7f       	andi	r24, 0xFE	; 254
    1e14:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1e16:	10 92 e2 00 	sts	0x00E2, r1
    1e1a:	08 95       	ret

00001e1c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1e1c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1e20:	10 92 e1 00 	sts	0x00E1, r1
    1e24:	08 95       	ret

00001e26 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1e26:	1f 92       	push	r1
    1e28:	0f 92       	push	r0
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	0f 92       	push	r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	2f 93       	push	r18
    1e32:	3f 93       	push	r19
    1e34:	4f 93       	push	r20
    1e36:	5f 93       	push	r21
    1e38:	6f 93       	push	r22
    1e3a:	7f 93       	push	r23
    1e3c:	8f 93       	push	r24
    1e3e:	9f 93       	push	r25
    1e40:	af 93       	push	r26
    1e42:	bf 93       	push	r27
    1e44:	ef 93       	push	r30
    1e46:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1e48:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1e4c:	82 ff       	sbrs	r24, 2
    1e4e:	0b c0       	rjmp	.+22     	; 0x1e66 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1e50:	80 91 e2 00 	lds	r24, 0x00E2
    1e54:	82 ff       	sbrs	r24, 2
    1e56:	07 c0       	rjmp	.+14     	; 0x1e66 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1e58:	80 91 e1 00 	lds	r24, 0x00E1
    1e5c:	8b 7f       	andi	r24, 0xFB	; 251
    1e5e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1e62:	0e 94 da 02 	call	0x5b4	; 0x5b4 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1e66:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1e6a:	80 ff       	sbrs	r24, 0
    1e6c:	1f c0       	rjmp	.+62     	; 0x1eac <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1e6e:	80 91 d8 00 	lds	r24, 0x00D8
    1e72:	80 ff       	sbrs	r24, 0
    1e74:	1b c0       	rjmp	.+54     	; 0x1eac <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1e76:	80 91 da 00 	lds	r24, 0x00DA
    1e7a:	8e 7f       	andi	r24, 0xFE	; 254
    1e7c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1e80:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1e84:	80 ff       	sbrs	r24, 0
    1e86:	0d c0       	rjmp	.+26     	; 0x1ea2 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1e88:	80 e1       	ldi	r24, 0x10	; 16
    1e8a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e8c:	82 e1       	ldi	r24, 0x12	; 18
    1e8e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1e90:	09 b4       	in	r0, 0x29	; 41
    1e92:	00 fe       	sbrs	r0, 0
    1e94:	fd cf       	rjmp	.-6      	; 0x1e90 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	80 93 93 06 	sts	0x0693, r24
			EVENT_USB_Device_Connect();
    1e9c:	0e 94 b6 02 	call	0x56c	; 0x56c <EVENT_USB_Device_Connect>
    1ea0:	05 c0       	rjmp	.+10     	; 0x1eac <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ea2:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1ea4:	10 92 93 06 	sts	0x0693, r1
			EVENT_USB_Device_Disconnect();
    1ea8:	0e 94 b8 02 	call	0x570	; 0x570 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1eac:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1eb0:	80 ff       	sbrs	r24, 0
    1eb2:	18 c0       	rjmp	.+48     	; 0x1ee4 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1eb4:	80 91 e2 00 	lds	r24, 0x00E2
    1eb8:	80 ff       	sbrs	r24, 0
    1eba:	14 c0       	rjmp	.+40     	; 0x1ee4 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1ebc:	80 91 e2 00 	lds	r24, 0x00E2
    1ec0:	8e 7f       	andi	r24, 0xFE	; 254
    1ec2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1ec6:	80 91 e2 00 	lds	r24, 0x00E2
    1eca:	80 61       	ori	r24, 0x10	; 16
    1ecc:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1ed0:	80 91 d8 00 	lds	r24, 0x00D8
    1ed4:	80 62       	ori	r24, 0x20	; 32
    1ed6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1eda:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1edc:	85 e0       	ldi	r24, 0x05	; 5
    1ede:	80 93 93 06 	sts	0x0693, r24
		EVENT_USB_Device_Suspend();
    1ee2:	f0 d1       	rcall	.+992    	; 0x22c4 <USB_Event_Stub>
    1ee4:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1ee8:	84 ff       	sbrs	r24, 4
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1eea:	2d c0       	rjmp	.+90     	; 0x1f46 <__vector_10+0x120>
    1eec:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1ef0:	84 ff       	sbrs	r24, 4
    1ef2:	29 c0       	rjmp	.+82     	; 0x1f46 <__vector_10+0x120>
    1ef4:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1ef6:	89 bd       	out	0x29, r24	; 41
    1ef8:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1efa:	89 bd       	out	0x29, r24	; 41
    1efc:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1efe:	00 fe       	sbrs	r0, 0
    1f00:	fd cf       	rjmp	.-6      	; 0x1efc <__vector_10+0xd6>
    1f02:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1f06:	8f 7d       	andi	r24, 0xDF	; 223
    1f08:	80 93 d8 00 	sts	0x00D8, r24
    1f0c:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1f10:	8f 7e       	andi	r24, 0xEF	; 239
    1f12:	80 93 e1 00 	sts	0x00E1, r24
    1f16:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1f1a:	8f 7e       	andi	r24, 0xEF	; 239
    1f1c:	80 93 e2 00 	sts	0x00E2, r24
    1f20:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1f24:	81 60       	ori	r24, 0x01	; 1
    1f26:	80 93 e2 00 	sts	0x00E2, r24
    1f2a:	80 91 8f 06 	lds	r24, 0x068F
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1f2e:	81 11       	cpse	r24, r1
    1f30:	04 c0       	rjmp	.+8      	; 0x1f3a <__vector_10+0x114>
    1f32:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f36:	87 ff       	sbrs	r24, 7
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <__vector_10+0x118>
    1f3a:	84 e0       	ldi	r24, 0x04	; 4
    1f3c:	01 c0       	rjmp	.+2      	; 0x1f40 <__vector_10+0x11a>
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	80 93 93 06 	sts	0x0693, r24
    1f44:	bf d1       	rcall	.+894    	; 0x22c4 <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1f46:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1f4a:	83 ff       	sbrs	r24, 3
    1f4c:	27 c0       	rjmp	.+78     	; 0x1f9c <__vector_10+0x176>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1f4e:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1f52:	83 ff       	sbrs	r24, 3
    1f54:	23 c0       	rjmp	.+70     	; 0x1f9c <__vector_10+0x176>
    1f56:	80 91 e1 00 	lds	r24, 0x00E1
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1f5a:	87 7f       	andi	r24, 0xF7	; 247
    1f5c:	80 93 e1 00 	sts	0x00E1, r24
    1f60:	82 e0       	ldi	r24, 0x02	; 2
    1f62:	80 93 93 06 	sts	0x0693, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1f66:	10 92 8f 06 	sts	0x068F, r1
		USB_Device_ConfigurationNumber = 0;
    1f6a:	80 91 e1 00 	lds	r24, 0x00E1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1f6e:	8e 7f       	andi	r24, 0xFE	; 254
    1f70:	80 93 e1 00 	sts	0x00E1, r24
    1f74:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1f78:	8e 7f       	andi	r24, 0xFE	; 254
    1f7a:	80 93 e2 00 	sts	0x00E2, r24
    1f7e:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1f82:	80 61       	ori	r24, 0x10	; 16
    1f84:	80 93 e2 00 	sts	0x00E2, r24
    1f88:	42 e0       	ldi	r20, 0x02	; 2
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	2b de       	rcall	.-938    	; 0x1be6 <Endpoint_ConfigureEndpoint_Prv>
    1f90:	80 91 f0 00 	lds	r24, 0x00F0
    1f94:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1f96:	80 93 f0 00 	sts	0x00F0, r24
    1f9a:	94 d1       	rcall	.+808    	; 0x22c4 <USB_Event_Stub>
    1f9c:	ff 91       	pop	r31
    1f9e:	ef 91       	pop	r30

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1fa0:	bf 91       	pop	r27
    1fa2:	af 91       	pop	r26
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1fa4:	9f 91       	pop	r25
    1fa6:	8f 91       	pop	r24
    1fa8:	7f 91       	pop	r23
    1faa:	6f 91       	pop	r22
    1fac:	5f 91       	pop	r21
    1fae:	4f 91       	pop	r20
    1fb0:	3f 91       	pop	r19
    1fb2:	2f 91       	pop	r18
    1fb4:	0f 90       	pop	r0
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	0f 90       	pop	r0
    1fba:	1f 90       	pop	r1
    1fbc:	18 95       	reti

00001fbe <__vector_11>:
    1fbe:	1f 92       	push	r1
    1fc0:	0f 92       	push	r0
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	0f 92       	push	r0

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1fc6:	11 24       	eor	r1, r1
    1fc8:	2f 93       	push	r18
    1fca:	3f 93       	push	r19
    1fcc:	4f 93       	push	r20
    1fce:	5f 93       	push	r21
    1fd0:	6f 93       	push	r22
    1fd2:	7f 93       	push	r23
    1fd4:	8f 93       	push	r24
    1fd6:	9f 93       	push	r25
    1fd8:	af 93       	push	r26
    1fda:	bf 93       	push	r27
    1fdc:	cf 93       	push	r28
    1fde:	ef 93       	push	r30
    1fe0:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1fe2:	c0 91 e9 00 	lds	r28, 0x00E9
    1fe6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1fe8:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fec:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1ff0:	80 91 f0 00 	lds	r24, 0x00F0
    1ff4:	87 7f       	andi	r24, 0xF7	; 247
    1ff6:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1ffa:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1ffc:	1b d0       	rcall	.+54     	; 0x2034 <USB_Device_ProcessControlRequest>
    1ffe:	10 92 e9 00 	sts	0x00E9, r1
    2002:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2006:	88 60       	ori	r24, 0x08	; 8
    2008:	80 93 f0 00 	sts	0x00F0, r24
    200c:	c0 93 e9 00 	sts	0x00E9, r28
    2010:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    2012:	ef 91       	pop	r30
    2014:	cf 91       	pop	r28
    2016:	bf 91       	pop	r27
    2018:	af 91       	pop	r26
    201a:	9f 91       	pop	r25
    201c:	8f 91       	pop	r24
    201e:	7f 91       	pop	r23
    2020:	6f 91       	pop	r22
    2022:	5f 91       	pop	r21
    2024:	4f 91       	pop	r20
    2026:	3f 91       	pop	r19
    2028:	2f 91       	pop	r18
    202a:	0f 90       	pop	r0
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	0f 90       	pop	r0
    2030:	1f 90       	pop	r1
    2032:	18 95       	reti

00002034 <USB_Device_ProcessControlRequest>:
    2034:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	aa 97       	sbiw	r28, 0x2a	; 42
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	e4 e9       	ldi	r30, 0x94	; 148
    204c:	f6 e0       	ldi	r31, 0x06	; 6
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    204e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2052:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2054:	26 e0       	ldi	r18, 0x06	; 6
    2056:	ec 39       	cpi	r30, 0x9C	; 156
    2058:	f2 07       	cpc	r31, r18
    205a:	c9 f7       	brne	.-14     	; 0x204e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    205c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2060:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2064:	83 ff       	sbrs	r24, 3
    2066:	16 c1       	rjmp	.+556    	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2068:	20 91 94 06 	lds	r18, 0x0694

		switch (USB_ControlRequest.bRequest)
    206c:	30 91 95 06 	lds	r19, 0x0695
    2070:	83 2f       	mov	r24, r19
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	8a 30       	cpi	r24, 0x0A	; 10
    2076:	91 05       	cpc	r25, r1
    2078:	08 f0       	brcs	.+2      	; 0x207c <USB_Device_ProcessControlRequest+0x48>
    207a:	0c c1       	rjmp	.+536    	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    207c:	fc 01       	movw	r30, r24
    207e:	ea 5a       	subi	r30, 0xAA	; 170
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	d7 c4       	rjmp	.+2478   	; 0x2a32 <__tablejump2__>
    2084:	20 38       	cpi	r18, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2086:	81 f0       	breq	.+32     	; 0x20a8 <USB_Device_ProcessControlRequest+0x74>
    2088:	22 38       	cpi	r18, 0x82	; 130
    208a:	09 f0       	breq	.+2      	; 0x208e <USB_Device_ProcessControlRequest+0x5a>
    208c:	03 c1       	rjmp	.+518    	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    208e:	80 91 98 06 	lds	r24, 0x0698
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2092:	8f 70       	andi	r24, 0x0F	; 15
    2094:	80 93 e9 00 	sts	0x00E9, r24
    2098:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    209c:	85 fb       	bst	r24, 5
    209e:	88 27       	eor	r24, r24
    20a0:	80 f9       	bld	r24, 0
    20a2:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20a6:	06 c0       	rjmp	.+12     	; 0x20b4 <USB_Device_ProcessControlRequest+0x80>
    20a8:	80 91 90 06 	lds	r24, 0x0690
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    20ac:	90 91 91 06 	lds	r25, 0x0691
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    20b0:	91 11       	cpse	r25, r1
    20b2:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    20b4:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20b8:	97 7f       	andi	r25, 0xF7	; 247
    20ba:	90 93 e8 00 	sts	0x00E8, r25
    20be:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    20c2:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    20c6:	c2 c0       	rjmp	.+388    	; 0x224c <USB_Device_ProcessControlRequest+0x218>
    20c8:	82 2f       	mov	r24, r18
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    20ca:	8d 7f       	andi	r24, 0xFD	; 253
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <USB_Device_ProcessControlRequest+0x9c>
    20ce:	e2 c0       	rjmp	.+452    	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    20d0:	22 23       	and	r18, r18
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    20d2:	19 f0       	breq	.+6      	; 0x20da <USB_Device_ProcessControlRequest+0xa6>
    20d4:	22 30       	cpi	r18, 0x02	; 2
    20d6:	61 f0       	breq	.+24     	; 0x20f0 <USB_Device_ProcessControlRequest+0xbc>
    20d8:	dd c0       	rjmp	.+442    	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    20da:	80 91 96 06 	lds	r24, 0x0696
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	09 f0       	breq	.+2      	; 0x20e4 <USB_Device_ProcessControlRequest+0xb0>
    20e2:	d8 c0       	rjmp	.+432    	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    20e4:	33 30       	cpi	r19, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    20e6:	09 f0       	breq	.+2      	; 0x20ea <USB_Device_ProcessControlRequest+0xb6>
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	80 93 91 06 	sts	0x0691, r24
    20ee:	28 c0       	rjmp	.+80     	; 0x2140 <USB_Device_ProcessControlRequest+0x10c>
    20f0:	80 91 96 06 	lds	r24, 0x0696

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    20f4:	81 11       	cpse	r24, r1
    20f6:	24 c0       	rjmp	.+72     	; 0x2140 <USB_Device_ProcessControlRequest+0x10c>
    20f8:	20 91 98 06 	lds	r18, 0x0698
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    20fc:	2f 70       	andi	r18, 0x0F	; 15
    20fe:	09 f4       	brne	.+2      	; 0x2102 <USB_Device_ProcessControlRequest+0xce>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2100:	c9 c0       	rjmp	.+402    	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    2102:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2106:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    210a:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    210c:	19 c0       	rjmp	.+50     	; 0x2140 <USB_Device_ProcessControlRequest+0x10c>
    210e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2112:	33 30       	cpi	r19, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2114:	11 f4       	brne	.+4      	; 0x211a <USB_Device_ProcessControlRequest+0xe6>
    2116:	80 62       	ori	r24, 0x20	; 32
    2118:	11 c0       	rjmp	.+34     	; 0x213c <USB_Device_ProcessControlRequest+0x108>
    211a:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    211c:	80 93 eb 00 	sts	0x00EB, r24
    2120:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	02 2e       	mov	r0, r18
    2126:	01 c0       	rjmp	.+2      	; 0x212a <USB_Device_ProcessControlRequest+0xf6>
    2128:	88 0f       	add	r24, r24
    212a:	0a 94       	dec	r0
    212c:	ea f7       	brpl	.-6      	; 0x2128 <USB_Device_ProcessControlRequest+0xf4>
    212e:	80 93 ea 00 	sts	0x00EA, r24
    2132:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    2136:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    213a:	88 60       	ori	r24, 0x08	; 8
    213c:	80 93 eb 00 	sts	0x00EB, r24
    2140:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2144:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2148:	87 7f       	andi	r24, 0xF7	; 247
    214a:	83 c0       	rjmp	.+262    	; 0x2252 <USB_Device_ProcessControlRequest+0x21e>
    214c:	21 11       	cpse	r18, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    214e:	a2 c0       	rjmp	.+324    	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    2150:	10 91 96 06 	lds	r17, 0x0696
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2154:	1f 77       	andi	r17, 0x7F	; 127
    2156:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    215a:	80 78       	andi	r24, 0x80	; 128
    215c:	81 2b       	or	r24, r17
    215e:	80 93 e3 00 	sts	0x00E3, r24
    2162:	80 91 e8 00 	lds	r24, 0x00E8
    2166:	87 7f       	andi	r24, 0xF7	; 247
    2168:	80 93 e8 00 	sts	0x00E8, r24
    216c:	ae dd       	rcall	.-1188   	; 0x1cca <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    216e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2172:	80 ff       	sbrs	r24, 0
    2174:	fc cf       	rjmp	.-8      	; 0x216e <USB_Device_ProcessControlRequest+0x13a>

	while (!(Endpoint_IsINReady()));
    2176:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    217a:	80 68       	ori	r24, 0x80	; 128
    217c:	80 93 e3 00 	sts	0x00E3, r24
    2180:	11 23       	and	r17, r17
    2182:	11 f0       	breq	.+4      	; 0x2188 <USB_Device_ProcessControlRequest+0x154>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	01 c0       	rjmp	.+2      	; 0x218a <USB_Device_ProcessControlRequest+0x156>
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	80 93 93 06 	sts	0x0693, r24
    218e:	82 c0       	rjmp	.+260    	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    2190:	20 58       	subi	r18, 0x80	; 128
    2192:	22 30       	cpi	r18, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2194:	08 f0       	brcs	.+2      	; 0x2198 <USB_Device_ProcessControlRequest+0x164>
    2196:	7e c0       	rjmp	.+252    	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    2198:	80 91 96 06 	lds	r24, 0x0696
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    219c:	90 91 97 06 	lds	r25, 0x0697
    21a0:	8c 3d       	cpi	r24, 0xDC	; 220
    21a2:	23 e0       	ldi	r18, 0x03	; 3
    21a4:	92 07       	cpc	r25, r18
    21a6:	71 f5       	brne	.+92     	; 0x2204 <USB_Device_ProcessControlRequest+0x1d0>
    21a8:	83 e0       	ldi	r24, 0x03	; 3
    21aa:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    21ac:	8a e2       	ldi	r24, 0x2A	; 42
    21ae:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    21b0:	4f b7       	in	r20, 0x3f	; 63
    21b2:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    21b4:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    21b6:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    21bc:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    21be:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	50 93 57 00 	sts	0x0057, r21
    21c6:	e4 91       	lpm	r30, Z
    21c8:	20 ff       	sbrs	r18, 0
    21ca:	03 c0       	rjmp	.+6      	; 0x21d2 <USB_Device_ProcessControlRequest+0x19e>

					if (SerialCharNum & 0x01)
    21cc:	e2 95       	swap	r30
    21ce:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
    21d0:	3f 5f       	subi	r19, 0xFF	; 255
    21d2:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    21d4:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	ea 30       	cpi	r30, 0x0A	; 10
    21da:	10 f0       	brcs	.+4      	; 0x21e0 <USB_Device_ProcessControlRequest+0x1ac>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    21dc:	c7 96       	adiw	r24, 0x37	; 55
    21de:	01 c0       	rjmp	.+2      	; 0x21e2 <USB_Device_ProcessControlRequest+0x1ae>
    21e0:	c0 96       	adiw	r24, 0x30	; 48
    21e2:	8d 93       	st	X+, r24
    21e4:	9d 93       	st	X+, r25
    21e6:	2f 5f       	subi	r18, 0xFF	; 255
    21e8:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    21ea:	49 f7       	brne	.-46     	; 0x21be <USB_Device_ProcessControlRequest+0x18a>
    21ec:	4f bf       	out	0x3f, r20	; 63
    21ee:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21f2:	87 7f       	andi	r24, 0xF7	; 247
    21f4:	80 93 e8 00 	sts	0x00E8, r24
    21f8:	6a e2       	ldi	r22, 0x2A	; 42
    21fa:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    21fc:	ce 01       	movw	r24, r28
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	f9 db       	rcall	.-2062   	; 0x19f4 <Endpoint_Write_Control_Stream_LE>
    2202:	13 c0       	rjmp	.+38     	; 0x222a <USB_Device_ProcessControlRequest+0x1f6>
    2204:	ae 01       	movw	r20, r28
    2206:	4f 5f       	subi	r20, 0xFF	; 255
    2208:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    220a:	60 91 98 06 	lds	r22, 0x0698
    220e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CALLBACK_USB_GetDescriptor>
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	09 f4       	brne	.+2      	; 0x2218 <USB_Device_ProcessControlRequest+0x1e4>
    2216:	3e c0       	rjmp	.+124    	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    2218:	20 91 e8 00 	lds	r18, 0x00E8
    221c:	27 7f       	andi	r18, 0xF7	; 247
    221e:	20 93 e8 00 	sts	0x00E8, r18
    2222:	bc 01       	movw	r22, r24
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2228:	80 dc       	rcall	.-1792   	; 0x1b2a <Endpoint_Write_Control_PStream_LE>
    222a:	80 91 e8 00 	lds	r24, 0x00E8
    222e:	8b 77       	andi	r24, 0x7B	; 123
    2230:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2234:	2f c0       	rjmp	.+94     	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    2236:	20 38       	cpi	r18, 0x80	; 128
    2238:	69 f5       	brne	.+90     	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    223a:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    223e:	87 7f       	andi	r24, 0xF7	; 247
    2240:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2244:	80 91 8f 06 	lds	r24, 0x068F
    2248:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    224c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2250:	8e 77       	andi	r24, 0x7E	; 126
    2252:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2256:	39 dd       	rcall	.-1422   	; 0x1cca <Endpoint_ClearStatusStage>
    2258:	1d c0       	rjmp	.+58     	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    225a:	21 11       	cpse	r18, r1
    225c:	1b c0       	rjmp	.+54     	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    225e:	90 91 96 06 	lds	r25, 0x0696
    2262:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2264:	b8 f4       	brcc	.+46     	; 0x2294 <USB_Device_ProcessControlRequest+0x260>
    2266:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    226a:	87 7f       	andi	r24, 0xF7	; 247
    226c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2270:	90 93 8f 06 	sts	0x068F, r25
    2274:	2a dd       	rcall	.-1452   	; 0x1cca <Endpoint_ClearStatusStage>
    2276:	80 91 8f 06 	lds	r24, 0x068F
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    227a:	81 11       	cpse	r24, r1
    227c:	04 c0       	rjmp	.+8      	; 0x2286 <USB_Device_ProcessControlRequest+0x252>

	Endpoint_ClearStatusStage();
    227e:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    2282:	87 ff       	sbrs	r24, 7
    2284:	02 c0       	rjmp	.+4      	; 0x228a <USB_Device_ProcessControlRequest+0x256>
    2286:	84 e0       	ldi	r24, 0x04	; 4
    2288:	01 c0       	rjmp	.+2      	; 0x228c <USB_Device_ProcessControlRequest+0x258>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	80 93 93 06 	sts	0x0693, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2290:	0e 94 ba 02 	call	0x574	; 0x574 <EVENT_USB_Device_ConfigurationChanged>
    2294:	80 91 e8 00 	lds	r24, 0x00E8
    2298:	83 ff       	sbrs	r24, 3
    229a:	0a c0       	rjmp	.+20     	; 0x22b0 <USB_Device_ProcessControlRequest+0x27c>

	EVENT_USB_Device_ConfigurationChanged();
    229c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    22a0:	87 7f       	andi	r24, 0xF7	; 247
    22a2:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    22a6:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22aa:	80 62       	ori	r24, 0x20	; 32
    22ac:	80 93 eb 00 	sts	0x00EB, r24
    22b0:	aa 96       	adiw	r28, 0x2a	; 42
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	1f 91       	pop	r17
    22c2:	08 95       	ret

000022c4 <USB_Event_Stub>:
    22c4:	08 95       	ret

000022c6 <USB_USBTask>:
    22c6:	cf 93       	push	r28
    22c8:	80 91 93 06 	lds	r24, 0x0693
    22cc:	88 23       	and	r24, r24
    22ce:	a9 f0       	breq	.+42     	; 0x22fa <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    22d0:	80 91 e9 00 	lds	r24, 0x00E9
    22d4:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    22d6:	90 91 ec 00 	lds	r25, 0x00EC
    22da:	90 ff       	sbrs	r25, 0
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <USB_USBTask+0x1c>
    22de:	90 e8       	ldi	r25, 0x80	; 128
    22e0:	01 c0       	rjmp	.+2      	; 0x22e4 <USB_USBTask+0x1e>
    22e2:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    22e4:	c9 2f       	mov	r28, r25
    22e6:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22e8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    22ec:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    22f0:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    22f2:	a0 de       	rcall	.-704    	; 0x2034 <USB_Device_ProcessControlRequest>
    22f4:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22f6:	c0 93 e9 00 	sts	0x00E9, r28
    22fa:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    22fc:	08 95       	ret

000022fe <CDC_Device_ConfigureEndpoints>:
    22fe:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2300:	df 93       	push	r29
    2302:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    2304:	fc 01       	movw	r30, r24
    2306:	70 96       	adiw	r30, 0x10	; 16
    2308:	8b e0       	ldi	r24, 0x0B	; 11
    230a:	df 01       	movw	r26, r30
    230c:	1d 92       	st	X+, r1
    230e:	8a 95       	dec	r24
    2310:	e9 f7       	brne	.-6      	; 0x230c <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    2312:	82 e0       	ldi	r24, 0x02	; 2
    2314:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    2316:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    2318:	83 e0       	ldi	r24, 0x03	; 3
    231a:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    231c:	61 e0       	ldi	r22, 0x01	; 1
    231e:	ce 01       	movw	r24, r28
    2320:	01 96       	adiw	r24, 0x01	; 1
    2322:	96 dc       	rcall	.-1748   	; 0x1c50 <Endpoint_ConfigureEndpointTable>
    2324:	88 23       	and	r24, r24
    2326:	61 f0       	breq	.+24     	; 0x2340 <CDC_Device_ConfigureEndpoints+0x42>
    2328:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    232a:	ce 01       	movw	r24, r28
    232c:	06 96       	adiw	r24, 0x06	; 6
    232e:	90 dc       	rcall	.-1760   	; 0x1c50 <Endpoint_ConfigureEndpointTable>
    2330:	88 23       	and	r24, r24
    2332:	31 f0       	breq	.+12     	; 0x2340 <CDC_Device_ConfigureEndpoints+0x42>
    2334:	61 e0       	ldi	r22, 0x01	; 1
    2336:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    2338:	0b 96       	adiw	r24, 0x0b	; 11
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
	  return false;

	return true;
}
    233e:	88 cc       	rjmp	.-1776   	; 0x1c50 <Endpoint_ConfigureEndpointTable>
    2340:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
	  return false;

	return true;
}
    2346:	08 95       	ret

00002348 <CDC_Device_SendByte>:
    2348:	cf 93       	push	r28
    234a:	c6 2f       	mov	r28, r22
    234c:	20 91 93 06 	lds	r18, 0x0693
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2350:	24 30       	cpi	r18, 0x04	; 4
    2352:	f1 f4       	brne	.+60     	; 0x2390 <CDC_Device_SendByte+0x48>
    2354:	fc 01       	movw	r30, r24
    2356:	44 89       	ldd	r20, Z+20	; 0x14
    2358:	55 89       	ldd	r21, Z+21	; 0x15
    235a:	66 89       	ldd	r22, Z+22	; 0x16
    235c:	77 89       	ldd	r23, Z+23	; 0x17
    235e:	45 2b       	or	r20, r21
    2360:	46 2b       	or	r20, r22
    2362:	47 2b       	or	r20, r23
    2364:	a9 f0       	breq	.+42     	; 0x2390 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2366:	81 81       	ldd	r24, Z+1	; 0x01
    2368:	8f 70       	andi	r24, 0x0F	; 15
    236a:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    236e:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    2372:	85 ff       	sbrs	r24, 5
    2374:	04 c0       	rjmp	.+8      	; 0x237e <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2376:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	0a c0       	rjmp	.+20     	; 0x2392 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    237e:	80 91 e8 00 	lds	r24, 0x00E8
    2382:	8e 77       	andi	r24, 0x7E	; 126
    2384:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    2388:	c1 dc       	rcall	.-1662   	; 0x1d0c <Endpoint_WaitUntilReady>
    238a:	88 23       	and	r24, r24
    238c:	a1 f3       	breq	.-24     	; 0x2376 <CDC_Device_SendByte+0x2e>
    238e:	01 c0       	rjmp	.+2      	; 0x2392 <CDC_Device_SendByte+0x4a>
    2390:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    2392:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    2394:	08 95       	ret

00002396 <CDC_Device_Flush>:
    2396:	20 91 93 06 	lds	r18, 0x0693

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    239a:	24 30       	cpi	r18, 0x04	; 4
    239c:	41 f5       	brne	.+80     	; 0x23ee <CDC_Device_Flush+0x58>
    239e:	fc 01       	movw	r30, r24
    23a0:	44 89       	ldd	r20, Z+20	; 0x14
    23a2:	55 89       	ldd	r21, Z+21	; 0x15
    23a4:	66 89       	ldd	r22, Z+22	; 0x16
    23a6:	77 89       	ldd	r23, Z+23	; 0x17
    23a8:	45 2b       	or	r20, r21
    23aa:	46 2b       	or	r20, r22
    23ac:	47 2b       	or	r20, r23
    23ae:	f9 f0       	breq	.+62     	; 0x23ee <CDC_Device_Flush+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23b0:	81 81       	ldd	r24, Z+1	; 0x01
    23b2:	8f 70       	andi	r24, 0x0F	; 15
    23b4:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    23b8:	20 91 f3 00 	lds	r18, 0x00F3
    23bc:	80 91 f2 00 	lds	r24, 0x00F2
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	92 2b       	or	r25, r18

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    23c4:	89 2b       	or	r24, r25
    23c6:	89 f0       	breq	.+34     	; 0x23ea <CDC_Device_Flush+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    23c8:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    23cc:	80 91 e8 00 	lds	r24, 0x00E8
    23d0:	8e 77       	andi	r24, 0x7E	; 126
    23d2:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    23d6:	95 fd       	sbrc	r25, 5
    23d8:	08 c0       	rjmp	.+16     	; 0x23ea <CDC_Device_Flush+0x54>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    23da:	98 dc       	rcall	.-1744   	; 0x1d0c <Endpoint_WaitUntilReady>
    23dc:	81 11       	cpse	r24, r1
    23de:	08 c0       	rjmp	.+16     	; 0x23f0 <CDC_Device_Flush+0x5a>
    23e0:	80 91 e8 00 	lds	r24, 0x00E8
    23e4:	8e 77       	andi	r24, 0x7E	; 126
    23e6:	80 93 e8 00 	sts	0x00E8, r24
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	08 95       	ret
    23ee:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    23f0:	08 95       	ret

000023f2 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    23f2:	20 91 93 06 	lds	r18, 0x0693
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    23f6:	24 30       	cpi	r18, 0x04	; 4
    23f8:	89 f4       	brne	.+34     	; 0x241c <CDC_Device_USBTask+0x2a>
    23fa:	fc 01       	movw	r30, r24
    23fc:	44 89       	ldd	r20, Z+20	; 0x14
    23fe:	55 89       	ldd	r21, Z+21	; 0x15
    2400:	66 89       	ldd	r22, Z+22	; 0x16
    2402:	77 89       	ldd	r23, Z+23	; 0x17
    2404:	45 2b       	or	r20, r21
    2406:	46 2b       	or	r20, r22
    2408:	47 2b       	or	r20, r23
    240a:	41 f0       	breq	.+16     	; 0x241c <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    240c:	21 81       	ldd	r18, Z+1	; 0x01
    240e:	2f 70       	andi	r18, 0x0F	; 15
    2410:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2414:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    2418:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    241a:	bd cf       	rjmp	.-134    	; 0x2396 <CDC_Device_Flush>
    241c:	08 95       	ret

0000241e <CDC_Device_ReceiveByte>:
    241e:	20 91 93 06 	lds	r18, 0x0693
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2422:	24 30       	cpi	r18, 0x04	; 4
    2424:	19 f0       	breq	.+6      	; 0x242c <CDC_Device_ReceiveByte+0xe>
	  return -1;
    2426:	8f ef       	ldi	r24, 0xFF	; 255
    2428:	9f ef       	ldi	r25, 0xFF	; 255
    242a:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    242c:	fc 01       	movw	r30, r24
    242e:	44 89       	ldd	r20, Z+20	; 0x14
    2430:	55 89       	ldd	r21, Z+21	; 0x15
    2432:	66 89       	ldd	r22, Z+22	; 0x16
    2434:	77 89       	ldd	r23, Z+23	; 0x17
    2436:	45 2b       	or	r20, r21
    2438:	46 2b       	or	r20, r22
    243a:	47 2b       	or	r20, r23
    243c:	a1 f3       	breq	.-24     	; 0x2426 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    243e:	86 81       	ldd	r24, Z+6	; 0x06
    2440:	8f 70       	andi	r24, 0x0F	; 15
    2442:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2446:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    244a:	82 ff       	sbrs	r24, 2
    244c:	ec cf       	rjmp	.-40     	; 0x2426 <CDC_Device_ReceiveByte+0x8>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    244e:	20 91 f3 00 	lds	r18, 0x00F3
    2452:	80 91 f2 00 	lds	r24, 0x00F2
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	92 2b       	or	r25, r18
	{
		if (Endpoint_BytesInEndpoint())
    245a:	89 2b       	or	r24, r25
    245c:	21 f0       	breq	.+8      	; 0x2466 <CDC_Device_ReceiveByte+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    245e:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	02 c0       	rjmp	.+4      	; 0x246a <CDC_Device_ReceiveByte+0x4c>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    2466:	2f ef       	ldi	r18, 0xFF	; 255
    2468:	3f ef       	ldi	r19, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    246a:	40 91 f3 00 	lds	r20, 0x00F3
    246e:	80 91 f2 00 	lds	r24, 0x00F2
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	94 2b       	or	r25, r20
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    2476:	89 2b       	or	r24, r25
    2478:	29 f4       	brne	.+10     	; 0x2484 <CDC_Device_ReceiveByte+0x66>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    247a:	80 91 e8 00 	lds	r24, 0x00E8
    247e:	8b 77       	andi	r24, 0x7B	; 123
    2480:	80 93 e8 00 	sts	0x00E8, r24
    2484:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    2486:	08 95       	ret

00002488 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    2488:	08 95       	ret

0000248a <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    248a:	cf 93       	push	r28
    248c:	df 93       	push	r29
    248e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2490:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    2494:	83 ff       	sbrs	r24, 3
    2496:	a6 c0       	rjmp	.+332    	; 0x25e4 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    2498:	88 81       	ld	r24, Y
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	20 91 98 06 	lds	r18, 0x0698
    24a0:	30 91 99 06 	lds	r19, 0x0699
    24a4:	28 17       	cp	r18, r24
    24a6:	39 07       	cpc	r19, r25
    24a8:	09 f0       	breq	.+2      	; 0x24ac <CDC_Device_ProcessControlRequest+0x22>
    24aa:	9c c0       	rjmp	.+312    	; 0x25e4 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
    24ac:	80 91 95 06 	lds	r24, 0x0695
    24b0:	81 32       	cpi	r24, 0x21	; 33
    24b2:	61 f0       	breq	.+24     	; 0x24cc <CDC_Device_ProcessControlRequest+0x42>
    24b4:	20 f4       	brcc	.+8      	; 0x24be <CDC_Device_ProcessControlRequest+0x34>
    24b6:	80 32       	cpi	r24, 0x20	; 32
    24b8:	09 f4       	brne	.+2      	; 0x24bc <CDC_Device_ProcessControlRequest+0x32>
    24ba:	3e c0       	rjmp	.+124    	; 0x2538 <CDC_Device_ProcessControlRequest+0xae>
    24bc:	93 c0       	rjmp	.+294    	; 0x25e4 <CDC_Device_ProcessControlRequest+0x15a>
    24be:	82 32       	cpi	r24, 0x22	; 34
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <CDC_Device_ProcessControlRequest+0x3a>
    24c2:	6c c0       	rjmp	.+216    	; 0x259c <CDC_Device_ProcessControlRequest+0x112>
    24c4:	83 32       	cpi	r24, 0x23	; 35
    24c6:	09 f4       	brne	.+2      	; 0x24ca <CDC_Device_ProcessControlRequest+0x40>
    24c8:	7d c0       	rjmp	.+250    	; 0x25c4 <CDC_Device_ProcessControlRequest+0x13a>
    24ca:	8c c0       	rjmp	.+280    	; 0x25e4 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    24cc:	80 91 94 06 	lds	r24, 0x0694
    24d0:	81 3a       	cpi	r24, 0xA1	; 161
    24d2:	09 f0       	breq	.+2      	; 0x24d6 <CDC_Device_ProcessControlRequest+0x4c>
    24d4:	87 c0       	rjmp	.+270    	; 0x25e4 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24d6:	80 91 e8 00 	lds	r24, 0x00E8
    24da:	87 7f       	andi	r24, 0xF7	; 247
    24dc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    24e0:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    24e4:	80 ff       	sbrs	r24, 0
    24e6:	fc cf       	rjmp	.-8      	; 0x24e0 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    24e8:	4c 89       	ldd	r20, Y+20	; 0x14
    24ea:	5d 89       	ldd	r21, Y+21	; 0x15
    24ec:	6e 89       	ldd	r22, Y+22	; 0x16
    24ee:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    24f0:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    24f4:	bb 27       	eor	r27, r27
    24f6:	a7 2f       	mov	r26, r23
    24f8:	96 2f       	mov	r25, r22
    24fa:	85 2f       	mov	r24, r21
    24fc:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    2500:	cb 01       	movw	r24, r22
    2502:	aa 27       	eor	r26, r26
    2504:	bb 27       	eor	r27, r27
    2506:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    250a:	47 2f       	mov	r20, r23
    250c:	55 27       	eor	r21, r21
    250e:	66 27       	eor	r22, r22
    2510:	77 27       	eor	r23, r23
    2512:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    2516:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2518:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    251c:	89 8d       	ldd	r24, Y+25	; 0x19
    251e:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    2522:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2524:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2528:	80 91 e8 00 	lds	r24, 0x00E8
    252c:	8e 77       	andi	r24, 0x7E	; 126
    252e:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2532:	df 91       	pop	r29
    2534:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2536:	c9 cb       	rjmp	.-2158   	; 0x1cca <Endpoint_ClearStatusStage>
    2538:	80 91 94 06 	lds	r24, 0x0694
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    253c:	81 32       	cpi	r24, 0x21	; 33
    253e:	09 f0       	breq	.+2      	; 0x2542 <CDC_Device_ProcessControlRequest+0xb8>
    2540:	51 c0       	rjmp	.+162    	; 0x25e4 <CDC_Device_ProcessControlRequest+0x15a>
    2542:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2546:	87 7f       	andi	r24, 0xF7	; 247
    2548:	80 93 e8 00 	sts	0x00E8, r24
    254c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2550:	82 fd       	sbrc	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    2552:	05 c0       	rjmp	.+10     	; 0x255e <CDC_Device_ProcessControlRequest+0xd4>
    2554:	80 91 93 06 	lds	r24, 0x0693
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    2558:	81 11       	cpse	r24, r1
    255a:	f8 cf       	rjmp	.-16     	; 0x254c <CDC_Device_ProcessControlRequest+0xc2>
    255c:	43 c0       	rjmp	.+134    	; 0x25e4 <CDC_Device_ProcessControlRequest+0x15a>
    255e:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    2562:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    2566:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    256a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    256e:	3c 8b       	std	Y+20, r19	; 0x14
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    2570:	2d 8b       	std	Y+21, r18	; 0x15
    2572:	9e 8b       	std	Y+22, r25	; 0x16
    2574:	8f 8b       	std	Y+23, r24	; 0x17
    2576:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    257a:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    257c:	80 91 f1 00 	lds	r24, 0x00F1
    2580:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    2582:	80 91 f1 00 	lds	r24, 0x00F1
    2586:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    2588:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    258c:	8b 77       	andi	r24, 0x7B	; 123
    258e:	80 93 e8 00 	sts	0x00E8, r24
    2592:	9b db       	rcall	.-2250   	; 0x1cca <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    2594:	ce 01       	movw	r24, r28
    2596:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2598:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    259a:	76 cf       	rjmp	.-276    	; 0x2488 <CDC_Device_Event_Stub>
    259c:	80 91 94 06 	lds	r24, 0x0694
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    25a0:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    25a2:	01 f5       	brne	.+64     	; 0x25e4 <CDC_Device_ProcessControlRequest+0x15a>
    25a4:	80 91 e8 00 	lds	r24, 0x00E8
    25a8:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    25aa:	80 93 e8 00 	sts	0x00E8, r24
    25ae:	8d db       	rcall	.-2278   	; 0x1cca <Endpoint_ClearStatusStage>
    25b0:	80 91 96 06 	lds	r24, 0x0696
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    25b4:	90 91 97 06 	lds	r25, 0x0697

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    25b8:	99 8b       	std	Y+17, r25	; 0x11
    25ba:	88 8b       	std	Y+16, r24	; 0x10
    25bc:	ce 01       	movw	r24, r28
    25be:	df 91       	pop	r29
    25c0:	cf 91       	pop	r28
    25c2:	62 cf       	rjmp	.-316    	; 0x2488 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    25c4:	80 91 94 06 	lds	r24, 0x0694
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    25c8:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    25ca:	61 f4       	brne	.+24     	; 0x25e4 <CDC_Device_ProcessControlRequest+0x15a>
    25cc:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    25d0:	87 7f       	andi	r24, 0xF7	; 247
    25d2:	80 93 e8 00 	sts	0x00E8, r24
    25d6:	79 db       	rcall	.-2318   	; 0x1cca <Endpoint_ClearStatusStage>
    25d8:	60 91 96 06 	lds	r22, 0x0696
    25dc:	ce 01       	movw	r24, r28
    25de:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    25e0:	cf 91       	pop	r28
    25e2:	52 cf       	rjmp	.-348    	; 0x2488 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	08 95       	ret

000025ea <HID_Device_ProcessControlRequest>:
			}

			break;
	}
}
    25ea:	6f 92       	push	r6
    25ec:	7f 92       	push	r7
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    25ee:	8f 92       	push	r8
    25f0:	9f 92       	push	r9
			}

			break;
	}
}
    25f2:	af 92       	push	r10
    25f4:	bf 92       	push	r11
    25f6:	cf 92       	push	r12
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    25f8:	df 92       	push	r13
    25fa:	ef 92       	push	r14
    25fc:	ff 92       	push	r15
    25fe:	0f 93       	push	r16
    2600:	1f 93       	push	r17
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	00 d0       	rcall	.+0      	; 0x2608 <HID_Device_ProcessControlRequest+0x1e>
    2608:	1f 92       	push	r1
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    2610:	ad b6       	in	r10, 0x3d	; 61
    2612:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2614:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    2618:	83 ff       	sbrs	r24, 3
    261a:	00 c1       	rjmp	.+512    	; 0x281c <HID_Device_ProcessControlRequest+0x232>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    261c:	f7 01       	movw	r30, r14
    261e:	80 81       	ld	r24, Z
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	20 91 98 06 	lds	r18, 0x0698
    2626:	30 91 99 06 	lds	r19, 0x0699
    262a:	28 17       	cp	r18, r24
    262c:	39 07       	cpc	r19, r25
    262e:	09 f0       	breq	.+2      	; 0x2632 <HID_Device_ProcessControlRequest+0x48>
    2630:	f5 c0       	rjmp	.+490    	; 0x281c <HID_Device_ProcessControlRequest+0x232>
	  return;

	switch (USB_ControlRequest.bRequest)
    2632:	80 91 95 06 	lds	r24, 0x0695
    2636:	83 30       	cpi	r24, 0x03	; 3
    2638:	09 f4       	brne	.+2      	; 0x263c <HID_Device_ProcessControlRequest+0x52>
    263a:	97 c0       	rjmp	.+302    	; 0x276a <HID_Device_ProcessControlRequest+0x180>
    263c:	30 f4       	brcc	.+12     	; 0x264a <HID_Device_ProcessControlRequest+0x60>
    263e:	81 30       	cpi	r24, 0x01	; 1
    2640:	71 f0       	breq	.+28     	; 0x265e <HID_Device_ProcessControlRequest+0x74>
    2642:	82 30       	cpi	r24, 0x02	; 2
    2644:	09 f4       	brne	.+2      	; 0x2648 <HID_Device_ProcessControlRequest+0x5e>
    2646:	ce c0       	rjmp	.+412    	; 0x27e4 <HID_Device_ProcessControlRequest+0x1fa>
    2648:	e9 c0       	rjmp	.+466    	; 0x281c <HID_Device_ProcessControlRequest+0x232>
    264a:	8a 30       	cpi	r24, 0x0A	; 10
    264c:	09 f4       	brne	.+2      	; 0x2650 <HID_Device_ProcessControlRequest+0x66>
    264e:	b2 c0       	rjmp	.+356    	; 0x27b4 <HID_Device_ProcessControlRequest+0x1ca>
    2650:	8b 30       	cpi	r24, 0x0B	; 11
    2652:	09 f4       	brne	.+2      	; 0x2656 <HID_Device_ProcessControlRequest+0x6c>
    2654:	9b c0       	rjmp	.+310    	; 0x278c <HID_Device_ProcessControlRequest+0x1a2>
    2656:	89 30       	cpi	r24, 0x09	; 9
    2658:	09 f0       	breq	.+2      	; 0x265c <HID_Device_ProcessControlRequest+0x72>
    265a:	e0 c0       	rjmp	.+448    	; 0x281c <HID_Device_ProcessControlRequest+0x232>
    265c:	48 c0       	rjmp	.+144    	; 0x26ee <HID_Device_ProcessControlRequest+0x104>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    265e:	80 91 94 06 	lds	r24, 0x0694
    2662:	81 3a       	cpi	r24, 0xA1	; 161
    2664:	09 f0       	breq	.+2      	; 0x2668 <HID_Device_ProcessControlRequest+0x7e>
    2666:	da c0       	rjmp	.+436    	; 0x281c <HID_Device_ProcessControlRequest+0x232>
    2668:	8d b6       	in	r8, 0x3d	; 61
    266a:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    266c:	1a 82       	std	Y+2, r1	; 0x02
    266e:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2670:	80 91 96 06 	lds	r24, 0x0696
    2674:	10 91 97 06 	lds	r17, 0x0697
    2678:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    267a:	f7 01       	movw	r30, r14
    267c:	40 85       	ldd	r20, Z+8	; 0x08
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	8d b7       	in	r24, 0x3d	; 61
    2682:	9e b7       	in	r25, 0x3e	; 62
    2684:	84 1b       	sub	r24, r20
    2686:	95 0b       	sbc	r25, r21
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	9e bf       	out	0x3e, r25	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	8d bf       	out	0x3d, r24	; 61
    2692:	ed b7       	in	r30, 0x3d	; 61
    2694:	fe b7       	in	r31, 0x3e	; 62
    2696:	31 96       	adiw	r30, 0x01	; 1
    2698:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	cf 01       	movw	r24, r30
    26a0:	28 d3       	rcall	.+1616   	; 0x2cf2 <memset>
    26a2:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    26a4:	41 0f       	add	r20, r17
    26a6:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    26a8:	0f 5f       	subi	r16, 0xFF	; 255
    26aa:	1f 4f       	sbci	r17, 0xFF	; 255
    26ac:	96 01       	movw	r18, r12
    26ae:	be 01       	movw	r22, r28
    26b0:	6d 5f       	subi	r22, 0xFD	; 253
    26b2:	7f 4f       	sbci	r23, 0xFF	; 255
    26b4:	c7 01       	movw	r24, r14
    26b6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <CALLBACK_HID_Device_CreateHIDReport>
    26ba:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    26bc:	86 81       	ldd	r24, Z+6	; 0x06
    26be:	97 81       	ldd	r25, Z+7	; 0x07
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	21 f0       	breq	.+8      	; 0x26cc <HID_Device_ProcessControlRequest+0xe2>
    26c4:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	b6 01       	movw	r22, r12
    26ca:	0a d3       	rcall	.+1556   	; 0x2ce0 <memcpy>
    26cc:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    26d0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    26d4:	87 7f       	andi	r24, 0xF7	; 247
    26d6:	80 93 e8 00 	sts	0x00E8, r24
    26da:	69 81       	ldd	r22, Y+1	; 0x01
    26dc:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    26de:	c6 01       	movw	r24, r12
    26e0:	89 d9       	rcall	.-3310   	; 0x19f4 <Endpoint_Write_Control_Stream_LE>
    26e2:	80 91 e8 00 	lds	r24, 0x00E8
    26e6:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    26e8:	80 93 e8 00 	sts	0x00E8, r24
    26ec:	38 c0       	rjmp	.+112    	; 0x275e <HID_Device_ProcessControlRequest+0x174>
    26ee:	80 91 94 06 	lds	r24, 0x0694
    26f2:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <HID_Device_ProcessControlRequest+0x10e>
    26f6:	92 c0       	rjmp	.+292    	; 0x281c <HID_Device_ProcessControlRequest+0x232>
    26f8:	8d b6       	in	r8, 0x3d	; 61
    26fa:	9e b6       	in	r9, 0x3e	; 62
    26fc:	00 91 9a 06 	lds	r16, 0x069A
    2700:	10 91 9b 06 	lds	r17, 0x069B
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    2704:	70 90 96 06 	lds	r7, 0x0696
    2708:	60 90 97 06 	lds	r6, 0x0697
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    270c:	8d b7       	in	r24, 0x3d	; 61
    270e:	9e b7       	in	r25, 0x3e	; 62
    2710:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    2712:	91 0b       	sbc	r25, r17
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	9e bf       	out	0x3e, r25	; 62
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	8d bf       	out	0x3d, r24	; 61
    271e:	ed b7       	in	r30, 0x3d	; 61
    2720:	fe b7       	in	r31, 0x3e	; 62
    2722:	31 96       	adiw	r30, 0x01	; 1
    2724:	6f 01       	movw	r12, r30
    2726:	80 91 e8 00 	lds	r24, 0x00E8
    272a:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    272c:	80 93 e8 00 	sts	0x00E8, r24
    2730:	b8 01       	movw	r22, r16
    2732:	cf 01       	movw	r24, r30
    2734:	ba d9       	rcall	.-3212   	; 0x1aaa <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    2736:	80 91 e8 00 	lds	r24, 0x00E8
    273a:	8e 77       	andi	r24, 0x7E	; 126
    273c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2740:	21 e0       	ldi	r18, 0x01	; 1
    2742:	71 10       	cpse	r7, r1
    2744:	01 c0       	rjmp	.+2      	; 0x2748 <HID_Device_ProcessControlRequest+0x15e>
    2746:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	02 1b       	sub	r16, r18
    274c:	13 0b       	sbc	r17, r19
    274e:	2c 0d       	add	r18, r12
    2750:	3d 1d       	adc	r19, r13
    2752:	4f ef       	ldi	r20, 0xFF	; 255
    2754:	46 0d       	add	r20, r6
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    2756:	67 2d       	mov	r22, r7
    2758:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    275a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	9e be       	out	0x3e, r9	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	8d be       	out	0x3d, r8	; 61
    2768:	59 c0       	rjmp	.+178    	; 0x281c <HID_Device_ProcessControlRequest+0x232>
    276a:	80 91 94 06 	lds	r24, 0x0694
    276e:	81 3a       	cpi	r24, 0xA1	; 161
    2770:	09 f0       	breq	.+2      	; 0x2774 <HID_Device_ProcessControlRequest+0x18a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2772:	54 c0       	rjmp	.+168    	; 0x281c <HID_Device_ProcessControlRequest+0x232>
    2774:	80 91 e8 00 	lds	r24, 0x00E8
    2778:	87 7f       	andi	r24, 0xF7	; 247
    277a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    277e:	80 91 e8 00 	lds	r24, 0x00E8
    2782:	80 ff       	sbrs	r24, 0
    2784:	fc cf       	rjmp	.-8      	; 0x277e <HID_Device_ProcessControlRequest+0x194>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2786:	f7 01       	movw	r30, r14
    2788:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    278a:	40 c0       	rjmp	.+128    	; 0x280c <HID_Device_ProcessControlRequest+0x222>
    278c:	80 91 94 06 	lds	r24, 0x0694
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    2790:	81 32       	cpi	r24, 0x21	; 33
    2792:	09 f0       	breq	.+2      	; 0x2796 <HID_Device_ProcessControlRequest+0x1ac>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2794:	43 c0       	rjmp	.+134    	; 0x281c <HID_Device_ProcessControlRequest+0x232>
    2796:	80 91 e8 00 	lds	r24, 0x00E8
    279a:	87 7f       	andi	r24, 0xF7	; 247
    279c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    27a0:	94 da       	rcall	.-2776   	; 0x1cca <Endpoint_ClearStatusStage>
    27a2:	90 91 96 06 	lds	r25, 0x0696
    27a6:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    27a8:	91 11       	cpse	r25, r1
    27aa:	01 c0       	rjmp	.+2      	; 0x27ae <HID_Device_ProcessControlRequest+0x1c4>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	f7 01       	movw	r30, r14
    27b0:	81 87       	std	Z+9, r24	; 0x09
    27b2:	34 c0       	rjmp	.+104    	; 0x281c <HID_Device_ProcessControlRequest+0x232>
    27b4:	80 91 94 06 	lds	r24, 0x0694
    27b8:	81 32       	cpi	r24, 0x21	; 33
    27ba:	81 f5       	brne	.+96     	; 0x281c <HID_Device_ProcessControlRequest+0x232>
    27bc:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    27c0:	87 7f       	andi	r24, 0xF7	; 247
    27c2:	80 93 e8 00 	sts	0x00E8, r24
    27c6:	81 da       	rcall	.-2814   	; 0x1cca <Endpoint_ClearStatusStage>
    27c8:	80 91 96 06 	lds	r24, 0x0696
    27cc:	90 91 97 06 	lds	r25, 0x0697
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    27d0:	88 27       	eor	r24, r24
    27d2:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    27d4:	96 95       	lsr	r25
    27d6:	87 95       	ror	r24
    27d8:	3a 95       	dec	r19
    27da:	e1 f7       	brne	.-8      	; 0x27d4 <HID_Device_ProcessControlRequest+0x1ea>
    27dc:	f7 01       	movw	r30, r14
    27de:	95 87       	std	Z+13, r25	; 0x0d
    27e0:	84 87       	std	Z+12, r24	; 0x0c
    27e2:	1c c0       	rjmp	.+56     	; 0x281c <HID_Device_ProcessControlRequest+0x232>
    27e4:	80 91 94 06 	lds	r24, 0x0694
    27e8:	81 3a       	cpi	r24, 0xA1	; 161
    27ea:	c1 f4       	brne	.+48     	; 0x281c <HID_Device_ProcessControlRequest+0x232>
    27ec:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    27f0:	87 7f       	andi	r24, 0xF7	; 247
    27f2:	80 93 e8 00 	sts	0x00E8, r24
    27f6:	80 91 e8 00 	lds	r24, 0x00E8
    27fa:	80 ff       	sbrs	r24, 0
    27fc:	fc cf       	rjmp	.-8      	; 0x27f6 <HID_Device_ProcessControlRequest+0x20c>
    27fe:	f7 01       	movw	r30, r14
    2800:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2802:	95 85       	ldd	r25, Z+13	; 0x0d
    2804:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2806:	87 95       	ror	r24
    2808:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    280a:	87 95       	ror	r24
    280c:	80 93 f1 00 	sts	0x00F1, r24
    2810:	80 91 e8 00 	lds	r24, 0x00E8
    2814:	8e 77       	andi	r24, 0x7E	; 126
    2816:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    281a:	57 da       	rcall	.-2898   	; 0x1cca <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	be be       	out	0x3e, r11	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
			}

			break;
	}
}
    282a:	0f 90       	pop	r0
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	df 90       	pop	r13
    283a:	cf 90       	pop	r12
    283c:	bf 90       	pop	r11
    283e:	af 90       	pop	r10
    2840:	9f 90       	pop	r9
    2842:	8f 90       	pop	r8
    2844:	7f 90       	pop	r7
    2846:	6f 90       	pop	r6
    2848:	08 95       	ret

0000284a <HID_Device_ConfigureEndpoints>:
    284a:	fc 01       	movw	r30, r24
    284c:	39 96       	adiw	r30, 0x09	; 9
    284e:	27 e0       	ldi	r18, 0x07	; 7
    2850:	df 01       	movw	r26, r30
    2852:	1d 92       	st	X+, r1
    2854:	2a 95       	dec	r18
    2856:	e9 f7       	brne	.-6      	; 0x2852 <HID_Device_ConfigureEndpoints+0x8>

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    2858:	21 e0       	ldi	r18, 0x01	; 1
    285a:	fc 01       	movw	r30, r24
    285c:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    285e:	24 ef       	ldi	r18, 0xF4	; 244
    2860:	31 e0       	ldi	r19, 0x01	; 1
    2862:	35 87       	std	Z+13, r19	; 0x0d
    2864:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    2866:	23 e0       	ldi	r18, 0x03	; 3
    2868:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    286a:	61 e0       	ldi	r22, 0x01	; 1
    286c:	01 96       	adiw	r24, 0x01	; 1
    286e:	f0 c9       	rjmp	.-3104   	; 0x1c50 <Endpoint_ConfigureEndpointTable>

00002870 <HID_Device_USBTask>:
    2870:	5f 92       	push	r5
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2872:	6f 92       	push	r6
    2874:	7f 92       	push	r7
    2876:	8f 92       	push	r8
    2878:	9f 92       	push	r9
    287a:	af 92       	push	r10
    287c:	bf 92       	push	r11
    287e:	cf 92       	push	r12
    2880:	df 92       	push	r13
    2882:	ef 92       	push	r14
    2884:	ff 92       	push	r15
    2886:	0f 93       	push	r16
    2888:	1f 93       	push	r17
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
    288e:	00 d0       	rcall	.+0      	; 0x2890 <HID_Device_USBTask+0x20>
    2890:	1f 92       	push	r1
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    2898:	ad b6       	in	r10, 0x3d	; 61
    289a:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    289c:	80 91 93 06 	lds	r24, 0x0693
    28a0:	84 30       	cpi	r24, 0x04	; 4
    28a2:	09 f0       	breq	.+2      	; 0x28a6 <HID_Device_USBTask+0x36>
    28a4:	8c c0       	rjmp	.+280    	; 0x29be <HID_Device_USBTask+0x14e>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    28a6:	80 91 e4 00 	lds	r24, 0x00E4
    28aa:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    28ae:	f7 01       	movw	r30, r14
    28b0:	22 85       	ldd	r18, Z+10	; 0x0a
    28b2:	33 85       	ldd	r19, Z+11	; 0x0b
    28b4:	28 17       	cp	r18, r24
    28b6:	39 07       	cpc	r19, r25
    28b8:	09 f4       	brne	.+2      	; 0x28bc <HID_Device_USBTask+0x4c>
    28ba:	81 c0       	rjmp	.+258    	; 0x29be <HID_Device_USBTask+0x14e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    28bc:	81 81       	ldd	r24, Z+1	; 0x01
    28be:	8f 70       	andi	r24, 0x0F	; 15
    28c0:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    28c4:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    28c8:	85 ff       	sbrs	r24, 5
    28ca:	79 c0       	rjmp	.+242    	; 0x29be <HID_Device_USBTask+0x14e>
    28cc:	8d b6       	in	r8, 0x3d	; 61
    28ce:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    28d0:	40 85       	ldd	r20, Z+8	; 0x08
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	8d b7       	in	r24, 0x3d	; 61
    28d6:	9e b7       	in	r25, 0x3e	; 62
    28d8:	84 1b       	sub	r24, r20
    28da:	95 0b       	sbc	r25, r21
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	9e bf       	out	0x3e, r25	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	8d bf       	out	0x3d, r24	; 61
    28e6:	ed b7       	in	r30, 0x3d	; 61
    28e8:	fe b7       	in	r31, 0x3e	; 62
    28ea:	31 96       	adiw	r30, 0x01	; 1
    28ec:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    28ee:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    28f0:	1a 82       	std	Y+2, r1	; 0x02
    28f2:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    28f4:	60 e0       	ldi	r22, 0x00	; 0
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	cf 01       	movw	r24, r30
    28fa:	fb d1       	rcall	.+1014   	; 0x2cf2 <memset>
    28fc:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    28fe:	0f 5f       	subi	r16, 0xFF	; 255
    2900:	1f 4f       	sbci	r17, 0xFF	; 255
    2902:	96 01       	movw	r18, r12
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	be 01       	movw	r22, r28
    2908:	6d 5f       	subi	r22, 0xFD	; 253
    290a:	7f 4f       	sbci	r23, 0xFF	; 255
    290c:	c7 01       	movw	r24, r14
    290e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <CALLBACK_HID_Device_CreateHIDReport>
    2912:	68 2e       	mov	r6, r24
    2914:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    2916:	84 85       	ldd	r24, Z+12	; 0x0c
    2918:	95 85       	ldd	r25, Z+13	; 0x0d
    291a:	89 2b       	or	r24, r25
    291c:	41 f0       	breq	.+16     	; 0x292e <HID_Device_USBTask+0xbe>
    291e:	21 e0       	ldi	r18, 0x01	; 1
    2920:	86 85       	ldd	r24, Z+14	; 0x0e
    2922:	97 85       	ldd	r25, Z+15	; 0x0f
    2924:	89 2b       	or	r24, r25
    2926:	09 f0       	breq	.+2      	; 0x292a <HID_Device_USBTask+0xba>
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	72 2e       	mov	r7, r18
    292c:	01 c0       	rjmp	.+2      	; 0x2930 <HID_Device_USBTask+0xc0>
    292e:	71 2c       	mov	r7, r1
    2930:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2932:	06 81       	ldd	r16, Z+6	; 0x06
    2934:	17 81       	ldd	r17, Z+7	; 0x07
    2936:	01 15       	cp	r16, r1
    2938:	11 05       	cpc	r17, r1
    293a:	89 f0       	breq	.+34     	; 0x295e <HID_Device_USBTask+0xee>
    293c:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    293e:	5a 81       	ldd	r21, Y+2	; 0x02
    2940:	b8 01       	movw	r22, r16
    2942:	c6 01       	movw	r24, r12
    2944:	c0 d1       	rcall	.+896    	; 0x2cc6 <memcmp>
    2946:	55 24       	eor	r5, r5
    2948:	53 94       	inc	r5
    294a:	89 2b       	or	r24, r25
    294c:	09 f4       	brne	.+2      	; 0x2950 <HID_Device_USBTask+0xe0>
    294e:	51 2c       	mov	r5, r1
    2950:	f7 01       	movw	r30, r14
    2952:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    2954:	50 e0       	ldi	r21, 0x00	; 0
    2956:	b6 01       	movw	r22, r12
    2958:	c8 01       	movw	r24, r16
    295a:	c2 d1       	rcall	.+900    	; 0x2ce0 <memcpy>
    295c:	01 c0       	rjmp	.+2      	; 0x2960 <HID_Device_USBTask+0xf0>
    295e:	51 2c       	mov	r5, r1
    2960:	29 81       	ldd	r18, Y+1	; 0x01
    2962:	3a 81       	ldd	r19, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    2964:	23 2b       	or	r18, r19
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    2966:	f9 f0       	breq	.+62     	; 0x29a6 <HID_Device_USBTask+0x136>
    2968:	61 10       	cpse	r6, r1
    296a:	04 c0       	rjmp	.+8      	; 0x2974 <HID_Device_USBTask+0x104>
    296c:	51 10       	cpse	r5, r1
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <HID_Device_USBTask+0x104>
    2970:	70 fe       	sbrs	r7, 0
    2972:	19 c0       	rjmp	.+50     	; 0x29a6 <HID_Device_USBTask+0x136>
    2974:	f7 01       	movw	r30, r14
    2976:	84 85       	ldd	r24, Z+12	; 0x0c
    2978:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    297a:	97 87       	std	Z+15, r25	; 0x0f
    297c:	86 87       	std	Z+14, r24	; 0x0e
    297e:	81 81       	ldd	r24, Z+1	; 0x01
    2980:	8f 70       	andi	r24, 0x0F	; 15
    2982:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	81 11       	cpse	r24, r1
    298a:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    298e:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2990:	7a 81       	ldd	r23, Y+2	; 0x02
    2992:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    2994:	50 e0       	ldi	r21, 0x00	; 0
    2996:	c6 01       	movw	r24, r12
    2998:	0e 94 b3 0c 	call	0x1966	; 0x1966 <Endpoint_Write_Stream_LE>
    299c:	80 91 e8 00 	lds	r24, 0x00E8
    29a0:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    29a2:	80 93 e8 00 	sts	0x00E8, r24
    29a6:	80 91 e4 00 	lds	r24, 0x00E4
    29aa:	90 91 e5 00 	lds	r25, 0x00E5
    29ae:	f7 01       	movw	r30, r14
    29b0:	93 87       	std	Z+11, r25	; 0x0b
    29b2:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	9e be       	out	0x3e, r9	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	8d be       	out	0x3d, r8	; 61
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	be be       	out	0x3e, r11	; 62
	}
}
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	ad be       	out	0x3d, r10	; 61
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	1f 91       	pop	r17
    29d4:	0f 91       	pop	r16
    29d6:	ff 90       	pop	r15
    29d8:	ef 90       	pop	r14
    29da:	df 90       	pop	r13
    29dc:	cf 90       	pop	r12
    29de:	bf 90       	pop	r11
    29e0:	af 90       	pop	r10
    29e2:	9f 90       	pop	r9
    29e4:	8f 90       	pop	r8
    29e6:	7f 90       	pop	r7
    29e8:	6f 90       	pop	r6
    29ea:	5f 90       	pop	r5
    29ec:	08 95       	ret

000029ee <__udivmodsi4>:
    29ee:	a1 e2       	ldi	r26, 0x21	; 33
    29f0:	1a 2e       	mov	r1, r26
    29f2:	aa 1b       	sub	r26, r26
    29f4:	bb 1b       	sub	r27, r27
    29f6:	fd 01       	movw	r30, r26
    29f8:	0d c0       	rjmp	.+26     	; 0x2a14 <__udivmodsi4_ep>

000029fa <__udivmodsi4_loop>:
    29fa:	aa 1f       	adc	r26, r26
    29fc:	bb 1f       	adc	r27, r27
    29fe:	ee 1f       	adc	r30, r30
    2a00:	ff 1f       	adc	r31, r31
    2a02:	a2 17       	cp	r26, r18
    2a04:	b3 07       	cpc	r27, r19
    2a06:	e4 07       	cpc	r30, r20
    2a08:	f5 07       	cpc	r31, r21
    2a0a:	20 f0       	brcs	.+8      	; 0x2a14 <__udivmodsi4_ep>
    2a0c:	a2 1b       	sub	r26, r18
    2a0e:	b3 0b       	sbc	r27, r19
    2a10:	e4 0b       	sbc	r30, r20
    2a12:	f5 0b       	sbc	r31, r21

00002a14 <__udivmodsi4_ep>:
    2a14:	66 1f       	adc	r22, r22
    2a16:	77 1f       	adc	r23, r23
    2a18:	88 1f       	adc	r24, r24
    2a1a:	99 1f       	adc	r25, r25
    2a1c:	1a 94       	dec	r1
    2a1e:	69 f7       	brne	.-38     	; 0x29fa <__udivmodsi4_loop>
    2a20:	60 95       	com	r22
    2a22:	70 95       	com	r23
    2a24:	80 95       	com	r24
    2a26:	90 95       	com	r25
    2a28:	9b 01       	movw	r18, r22
    2a2a:	ac 01       	movw	r20, r24
    2a2c:	bd 01       	movw	r22, r26
    2a2e:	cf 01       	movw	r24, r30
    2a30:	08 95       	ret

00002a32 <__tablejump2__>:
    2a32:	ee 0f       	add	r30, r30
    2a34:	ff 1f       	adc	r31, r31

00002a36 <__tablejump__>:
    2a36:	05 90       	lpm	r0, Z+
    2a38:	f4 91       	lpm	r31, Z
    2a3a:	e0 2d       	mov	r30, r0
    2a3c:	09 94       	ijmp

00002a3e <malloc>:
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	82 30       	cpi	r24, 0x02	; 2
    2a44:	91 05       	cpc	r25, r1
    2a46:	10 f4       	brcc	.+4      	; 0x2a4c <malloc+0xe>
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	e0 91 9e 06 	lds	r30, 0x069E
    2a50:	f0 91 9f 06 	lds	r31, 0x069F
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	a0 e0       	ldi	r26, 0x00	; 0
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	30 97       	sbiw	r30, 0x00	; 0
    2a5e:	39 f1       	breq	.+78     	; 0x2aae <malloc+0x70>
    2a60:	40 81       	ld	r20, Z
    2a62:	51 81       	ldd	r21, Z+1	; 0x01
    2a64:	48 17       	cp	r20, r24
    2a66:	59 07       	cpc	r21, r25
    2a68:	b8 f0       	brcs	.+46     	; 0x2a98 <malloc+0x5a>
    2a6a:	48 17       	cp	r20, r24
    2a6c:	59 07       	cpc	r21, r25
    2a6e:	71 f4       	brne	.+28     	; 0x2a8c <malloc+0x4e>
    2a70:	82 81       	ldd	r24, Z+2	; 0x02
    2a72:	93 81       	ldd	r25, Z+3	; 0x03
    2a74:	10 97       	sbiw	r26, 0x00	; 0
    2a76:	29 f0       	breq	.+10     	; 0x2a82 <malloc+0x44>
    2a78:	13 96       	adiw	r26, 0x03	; 3
    2a7a:	9c 93       	st	X, r25
    2a7c:	8e 93       	st	-X, r24
    2a7e:	12 97       	sbiw	r26, 0x02	; 2
    2a80:	2c c0       	rjmp	.+88     	; 0x2ada <malloc+0x9c>
    2a82:	90 93 9f 06 	sts	0x069F, r25
    2a86:	80 93 9e 06 	sts	0x069E, r24
    2a8a:	27 c0       	rjmp	.+78     	; 0x2ada <malloc+0x9c>
    2a8c:	21 15       	cp	r18, r1
    2a8e:	31 05       	cpc	r19, r1
    2a90:	31 f0       	breq	.+12     	; 0x2a9e <malloc+0x60>
    2a92:	42 17       	cp	r20, r18
    2a94:	53 07       	cpc	r21, r19
    2a96:	18 f0       	brcs	.+6      	; 0x2a9e <malloc+0x60>
    2a98:	a9 01       	movw	r20, r18
    2a9a:	db 01       	movw	r26, r22
    2a9c:	01 c0       	rjmp	.+2      	; 0x2aa0 <malloc+0x62>
    2a9e:	ef 01       	movw	r28, r30
    2aa0:	9a 01       	movw	r18, r20
    2aa2:	bd 01       	movw	r22, r26
    2aa4:	df 01       	movw	r26, r30
    2aa6:	02 80       	ldd	r0, Z+2	; 0x02
    2aa8:	f3 81       	ldd	r31, Z+3	; 0x03
    2aaa:	e0 2d       	mov	r30, r0
    2aac:	d7 cf       	rjmp	.-82     	; 0x2a5c <malloc+0x1e>
    2aae:	21 15       	cp	r18, r1
    2ab0:	31 05       	cpc	r19, r1
    2ab2:	f9 f0       	breq	.+62     	; 0x2af2 <malloc+0xb4>
    2ab4:	28 1b       	sub	r18, r24
    2ab6:	39 0b       	sbc	r19, r25
    2ab8:	24 30       	cpi	r18, 0x04	; 4
    2aba:	31 05       	cpc	r19, r1
    2abc:	80 f4       	brcc	.+32     	; 0x2ade <malloc+0xa0>
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac2:	61 15       	cp	r22, r1
    2ac4:	71 05       	cpc	r23, r1
    2ac6:	21 f0       	breq	.+8      	; 0x2ad0 <malloc+0x92>
    2ac8:	fb 01       	movw	r30, r22
    2aca:	93 83       	std	Z+3, r25	; 0x03
    2acc:	82 83       	std	Z+2, r24	; 0x02
    2ace:	04 c0       	rjmp	.+8      	; 0x2ad8 <malloc+0x9a>
    2ad0:	90 93 9f 06 	sts	0x069F, r25
    2ad4:	80 93 9e 06 	sts	0x069E, r24
    2ad8:	fe 01       	movw	r30, r28
    2ada:	32 96       	adiw	r30, 0x02	; 2
    2adc:	44 c0       	rjmp	.+136    	; 0x2b66 <malloc+0x128>
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e2 0f       	add	r30, r18
    2ae2:	f3 1f       	adc	r31, r19
    2ae4:	81 93       	st	Z+, r24
    2ae6:	91 93       	st	Z+, r25
    2ae8:	22 50       	subi	r18, 0x02	; 2
    2aea:	31 09       	sbc	r19, r1
    2aec:	39 83       	std	Y+1, r19	; 0x01
    2aee:	28 83       	st	Y, r18
    2af0:	3a c0       	rjmp	.+116    	; 0x2b66 <malloc+0x128>
    2af2:	20 91 9c 06 	lds	r18, 0x069C
    2af6:	30 91 9d 06 	lds	r19, 0x069D
    2afa:	23 2b       	or	r18, r19
    2afc:	41 f4       	brne	.+16     	; 0x2b0e <malloc+0xd0>
    2afe:	20 91 40 01 	lds	r18, 0x0140
    2b02:	30 91 41 01 	lds	r19, 0x0141
    2b06:	30 93 9d 06 	sts	0x069D, r19
    2b0a:	20 93 9c 06 	sts	0x069C, r18
    2b0e:	20 91 3e 01 	lds	r18, 0x013E
    2b12:	30 91 3f 01 	lds	r19, 0x013F
    2b16:	21 15       	cp	r18, r1
    2b18:	31 05       	cpc	r19, r1
    2b1a:	41 f4       	brne	.+16     	; 0x2b2c <malloc+0xee>
    2b1c:	2d b7       	in	r18, 0x3d	; 61
    2b1e:	3e b7       	in	r19, 0x3e	; 62
    2b20:	40 91 42 01 	lds	r20, 0x0142
    2b24:	50 91 43 01 	lds	r21, 0x0143
    2b28:	24 1b       	sub	r18, r20
    2b2a:	35 0b       	sbc	r19, r21
    2b2c:	e0 91 9c 06 	lds	r30, 0x069C
    2b30:	f0 91 9d 06 	lds	r31, 0x069D
    2b34:	e2 17       	cp	r30, r18
    2b36:	f3 07       	cpc	r31, r19
    2b38:	a0 f4       	brcc	.+40     	; 0x2b62 <malloc+0x124>
    2b3a:	2e 1b       	sub	r18, r30
    2b3c:	3f 0b       	sbc	r19, r31
    2b3e:	28 17       	cp	r18, r24
    2b40:	39 07       	cpc	r19, r25
    2b42:	78 f0       	brcs	.+30     	; 0x2b62 <malloc+0x124>
    2b44:	ac 01       	movw	r20, r24
    2b46:	4e 5f       	subi	r20, 0xFE	; 254
    2b48:	5f 4f       	sbci	r21, 0xFF	; 255
    2b4a:	24 17       	cp	r18, r20
    2b4c:	35 07       	cpc	r19, r21
    2b4e:	48 f0       	brcs	.+18     	; 0x2b62 <malloc+0x124>
    2b50:	4e 0f       	add	r20, r30
    2b52:	5f 1f       	adc	r21, r31
    2b54:	50 93 9d 06 	sts	0x069D, r21
    2b58:	40 93 9c 06 	sts	0x069C, r20
    2b5c:	81 93       	st	Z+, r24
    2b5e:	91 93       	st	Z+, r25
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <malloc+0x128>
    2b62:	e0 e0       	ldi	r30, 0x00	; 0
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	cf 01       	movw	r24, r30
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	08 95       	ret

00002b6e <free>:
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <free+0xa>
    2b76:	87 c0       	rjmp	.+270    	; 0x2c86 <free+0x118>
    2b78:	fc 01       	movw	r30, r24
    2b7a:	32 97       	sbiw	r30, 0x02	; 2
    2b7c:	13 82       	std	Z+3, r1	; 0x03
    2b7e:	12 82       	std	Z+2, r1	; 0x02
    2b80:	c0 91 9e 06 	lds	r28, 0x069E
    2b84:	d0 91 9f 06 	lds	r29, 0x069F
    2b88:	20 97       	sbiw	r28, 0x00	; 0
    2b8a:	81 f4       	brne	.+32     	; 0x2bac <free+0x3e>
    2b8c:	20 81       	ld	r18, Z
    2b8e:	31 81       	ldd	r19, Z+1	; 0x01
    2b90:	28 0f       	add	r18, r24
    2b92:	39 1f       	adc	r19, r25
    2b94:	80 91 9c 06 	lds	r24, 0x069C
    2b98:	90 91 9d 06 	lds	r25, 0x069D
    2b9c:	82 17       	cp	r24, r18
    2b9e:	93 07       	cpc	r25, r19
    2ba0:	79 f5       	brne	.+94     	; 0x2c00 <free+0x92>
    2ba2:	f0 93 9d 06 	sts	0x069D, r31
    2ba6:	e0 93 9c 06 	sts	0x069C, r30
    2baa:	6d c0       	rjmp	.+218    	; 0x2c86 <free+0x118>
    2bac:	de 01       	movw	r26, r28
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	ae 17       	cp	r26, r30
    2bb4:	bf 07       	cpc	r27, r31
    2bb6:	50 f4       	brcc	.+20     	; 0x2bcc <free+0x5e>
    2bb8:	12 96       	adiw	r26, 0x02	; 2
    2bba:	4d 91       	ld	r20, X+
    2bbc:	5c 91       	ld	r21, X
    2bbe:	13 97       	sbiw	r26, 0x03	; 3
    2bc0:	9d 01       	movw	r18, r26
    2bc2:	41 15       	cp	r20, r1
    2bc4:	51 05       	cpc	r21, r1
    2bc6:	09 f1       	breq	.+66     	; 0x2c0a <free+0x9c>
    2bc8:	da 01       	movw	r26, r20
    2bca:	f3 cf       	rjmp	.-26     	; 0x2bb2 <free+0x44>
    2bcc:	b3 83       	std	Z+3, r27	; 0x03
    2bce:	a2 83       	std	Z+2, r26	; 0x02
    2bd0:	40 81       	ld	r20, Z
    2bd2:	51 81       	ldd	r21, Z+1	; 0x01
    2bd4:	84 0f       	add	r24, r20
    2bd6:	95 1f       	adc	r25, r21
    2bd8:	8a 17       	cp	r24, r26
    2bda:	9b 07       	cpc	r25, r27
    2bdc:	71 f4       	brne	.+28     	; 0x2bfa <free+0x8c>
    2bde:	8d 91       	ld	r24, X+
    2be0:	9c 91       	ld	r25, X
    2be2:	11 97       	sbiw	r26, 0x01	; 1
    2be4:	84 0f       	add	r24, r20
    2be6:	95 1f       	adc	r25, r21
    2be8:	02 96       	adiw	r24, 0x02	; 2
    2bea:	91 83       	std	Z+1, r25	; 0x01
    2bec:	80 83       	st	Z, r24
    2bee:	12 96       	adiw	r26, 0x02	; 2
    2bf0:	8d 91       	ld	r24, X+
    2bf2:	9c 91       	ld	r25, X
    2bf4:	13 97       	sbiw	r26, 0x03	; 3
    2bf6:	93 83       	std	Z+3, r25	; 0x03
    2bf8:	82 83       	std	Z+2, r24	; 0x02
    2bfa:	21 15       	cp	r18, r1
    2bfc:	31 05       	cpc	r19, r1
    2bfe:	29 f4       	brne	.+10     	; 0x2c0a <free+0x9c>
    2c00:	f0 93 9f 06 	sts	0x069F, r31
    2c04:	e0 93 9e 06 	sts	0x069E, r30
    2c08:	3e c0       	rjmp	.+124    	; 0x2c86 <free+0x118>
    2c0a:	d9 01       	movw	r26, r18
    2c0c:	13 96       	adiw	r26, 0x03	; 3
    2c0e:	fc 93       	st	X, r31
    2c10:	ee 93       	st	-X, r30
    2c12:	12 97       	sbiw	r26, 0x02	; 2
    2c14:	4d 91       	ld	r20, X+
    2c16:	5d 91       	ld	r21, X+
    2c18:	a4 0f       	add	r26, r20
    2c1a:	b5 1f       	adc	r27, r21
    2c1c:	ea 17       	cp	r30, r26
    2c1e:	fb 07       	cpc	r31, r27
    2c20:	79 f4       	brne	.+30     	; 0x2c40 <free+0xd2>
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	84 0f       	add	r24, r20
    2c28:	95 1f       	adc	r25, r21
    2c2a:	02 96       	adiw	r24, 0x02	; 2
    2c2c:	d9 01       	movw	r26, r18
    2c2e:	11 96       	adiw	r26, 0x01	; 1
    2c30:	9c 93       	st	X, r25
    2c32:	8e 93       	st	-X, r24
    2c34:	82 81       	ldd	r24, Z+2	; 0x02
    2c36:	93 81       	ldd	r25, Z+3	; 0x03
    2c38:	13 96       	adiw	r26, 0x03	; 3
    2c3a:	9c 93       	st	X, r25
    2c3c:	8e 93       	st	-X, r24
    2c3e:	12 97       	sbiw	r26, 0x02	; 2
    2c40:	e0 e0       	ldi	r30, 0x00	; 0
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	9b 81       	ldd	r25, Y+3	; 0x03
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	19 f0       	breq	.+6      	; 0x2c52 <free+0xe4>
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	ec 01       	movw	r28, r24
    2c50:	f9 cf       	rjmp	.-14     	; 0x2c44 <free+0xd6>
    2c52:	ce 01       	movw	r24, r28
    2c54:	02 96       	adiw	r24, 0x02	; 2
    2c56:	28 81       	ld	r18, Y
    2c58:	39 81       	ldd	r19, Y+1	; 0x01
    2c5a:	82 0f       	add	r24, r18
    2c5c:	93 1f       	adc	r25, r19
    2c5e:	20 91 9c 06 	lds	r18, 0x069C
    2c62:	30 91 9d 06 	lds	r19, 0x069D
    2c66:	28 17       	cp	r18, r24
    2c68:	39 07       	cpc	r19, r25
    2c6a:	69 f4       	brne	.+26     	; 0x2c86 <free+0x118>
    2c6c:	30 97       	sbiw	r30, 0x00	; 0
    2c6e:	29 f4       	brne	.+10     	; 0x2c7a <free+0x10c>
    2c70:	10 92 9f 06 	sts	0x069F, r1
    2c74:	10 92 9e 06 	sts	0x069E, r1
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <free+0x110>
    2c7a:	13 82       	std	Z+3, r1	; 0x03
    2c7c:	12 82       	std	Z+2, r1	; 0x02
    2c7e:	d0 93 9d 06 	sts	0x069D, r29
    2c82:	c0 93 9c 06 	sts	0x069C, r28
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	08 95       	ret

00002c8c <atoi>:
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	88 27       	eor	r24, r24
    2c90:	99 27       	eor	r25, r25
    2c92:	e8 94       	clt
    2c94:	21 91       	ld	r18, Z+
    2c96:	20 32       	cpi	r18, 0x20	; 32
    2c98:	e9 f3       	breq	.-6      	; 0x2c94 <atoi+0x8>
    2c9a:	29 30       	cpi	r18, 0x09	; 9
    2c9c:	10 f0       	brcs	.+4      	; 0x2ca2 <atoi+0x16>
    2c9e:	2e 30       	cpi	r18, 0x0E	; 14
    2ca0:	c8 f3       	brcs	.-14     	; 0x2c94 <atoi+0x8>
    2ca2:	2b 32       	cpi	r18, 0x2B	; 43
    2ca4:	39 f0       	breq	.+14     	; 0x2cb4 <atoi+0x28>
    2ca6:	2d 32       	cpi	r18, 0x2D	; 45
    2ca8:	31 f4       	brne	.+12     	; 0x2cb6 <atoi+0x2a>
    2caa:	68 94       	set
    2cac:	03 c0       	rjmp	.+6      	; 0x2cb4 <atoi+0x28>
    2cae:	3f d0       	rcall	.+126    	; 0x2d2e <__mulhi_const_10>
    2cb0:	82 0f       	add	r24, r18
    2cb2:	91 1d       	adc	r25, r1
    2cb4:	21 91       	ld	r18, Z+
    2cb6:	20 53       	subi	r18, 0x30	; 48
    2cb8:	2a 30       	cpi	r18, 0x0A	; 10
    2cba:	c8 f3       	brcs	.-14     	; 0x2cae <atoi+0x22>
    2cbc:	1e f4       	brtc	.+6      	; 0x2cc4 <atoi+0x38>
    2cbe:	90 95       	com	r25
    2cc0:	81 95       	neg	r24
    2cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc4:	08 95       	ret

00002cc6 <memcmp>:
    2cc6:	fb 01       	movw	r30, r22
    2cc8:	dc 01       	movw	r26, r24
    2cca:	04 c0       	rjmp	.+8      	; 0x2cd4 <memcmp+0xe>
    2ccc:	8d 91       	ld	r24, X+
    2cce:	01 90       	ld	r0, Z+
    2cd0:	80 19       	sub	r24, r0
    2cd2:	21 f4       	brne	.+8      	; 0x2cdc <memcmp+0x16>
    2cd4:	41 50       	subi	r20, 0x01	; 1
    2cd6:	50 40       	sbci	r21, 0x00	; 0
    2cd8:	c8 f7       	brcc	.-14     	; 0x2ccc <memcmp+0x6>
    2cda:	88 1b       	sub	r24, r24
    2cdc:	99 0b       	sbc	r25, r25
    2cde:	08 95       	ret

00002ce0 <memcpy>:
    2ce0:	fb 01       	movw	r30, r22
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	02 c0       	rjmp	.+4      	; 0x2cea <memcpy+0xa>
    2ce6:	01 90       	ld	r0, Z+
    2ce8:	0d 92       	st	X+, r0
    2cea:	41 50       	subi	r20, 0x01	; 1
    2cec:	50 40       	sbci	r21, 0x00	; 0
    2cee:	d8 f7       	brcc	.-10     	; 0x2ce6 <memcpy+0x6>
    2cf0:	08 95       	ret

00002cf2 <memset>:
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	01 c0       	rjmp	.+2      	; 0x2cf8 <memset+0x6>
    2cf6:	6d 93       	st	X+, r22
    2cf8:	41 50       	subi	r20, 0x01	; 1
    2cfa:	50 40       	sbci	r21, 0x00	; 0
    2cfc:	e0 f7       	brcc	.-8      	; 0x2cf6 <memset+0x4>
    2cfe:	08 95       	ret

00002d00 <strcmp>:
    2d00:	fb 01       	movw	r30, r22
    2d02:	dc 01       	movw	r26, r24
    2d04:	8d 91       	ld	r24, X+
    2d06:	01 90       	ld	r0, Z+
    2d08:	80 19       	sub	r24, r0
    2d0a:	01 10       	cpse	r0, r1
    2d0c:	d9 f3       	breq	.-10     	; 0x2d04 <strcmp+0x4>
    2d0e:	99 0b       	sbc	r25, r25
    2d10:	08 95       	ret

00002d12 <strncmp>:
    2d12:	fb 01       	movw	r30, r22
    2d14:	dc 01       	movw	r26, r24
    2d16:	41 50       	subi	r20, 0x01	; 1
    2d18:	50 40       	sbci	r21, 0x00	; 0
    2d1a:	30 f0       	brcs	.+12     	; 0x2d28 <strncmp+0x16>
    2d1c:	8d 91       	ld	r24, X+
    2d1e:	01 90       	ld	r0, Z+
    2d20:	80 19       	sub	r24, r0
    2d22:	19 f4       	brne	.+6      	; 0x2d2a <strncmp+0x18>
    2d24:	00 20       	and	r0, r0
    2d26:	b9 f7       	brne	.-18     	; 0x2d16 <strncmp+0x4>
    2d28:	88 1b       	sub	r24, r24
    2d2a:	99 0b       	sbc	r25, r25
    2d2c:	08 95       	ret

00002d2e <__mulhi_const_10>:
    2d2e:	7a e0       	ldi	r23, 0x0A	; 10
    2d30:	97 9f       	mul	r25, r23
    2d32:	90 2d       	mov	r25, r0
    2d34:	87 9f       	mul	r24, r23
    2d36:	80 2d       	mov	r24, r0
    2d38:	91 0d       	add	r25, r1
    2d3a:	11 24       	eor	r1, r1
    2d3c:	08 95       	ret

00002d3e <printf>:
    2d3e:	a0 e0       	ldi	r26, 0x00	; 0
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	e4 ea       	ldi	r30, 0xA4	; 164
    2d44:	f6 e1       	ldi	r31, 0x16	; 22
    2d46:	b7 c2       	rjmp	.+1390   	; 0x32b6 <__prologue_saves__+0x20>
    2d48:	fe 01       	movw	r30, r28
    2d4a:	35 96       	adiw	r30, 0x05	; 5
    2d4c:	61 91       	ld	r22, Z+
    2d4e:	71 91       	ld	r23, Z+
    2d50:	af 01       	movw	r20, r30
    2d52:	80 91 a2 06 	lds	r24, 0x06A2
    2d56:	90 91 a3 06 	lds	r25, 0x06A3
    2d5a:	34 d0       	rcall	.+104    	; 0x2dc4 <vfprintf>
    2d5c:	e2 e0       	ldi	r30, 0x02	; 2
    2d5e:	c7 c2       	rjmp	.+1422   	; 0x32ee <__epilogue_restores__+0x20>

00002d60 <putchar>:
    2d60:	60 91 a2 06 	lds	r22, 0x06A2
    2d64:	70 91 a3 06 	lds	r23, 0x06A3
    2d68:	06 c2       	rjmp	.+1036   	; 0x3176 <fputc>

00002d6a <puts>:
    2d6a:	0f 93       	push	r16
    2d6c:	1f 93       	push	r17
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	e0 91 a2 06 	lds	r30, 0x06A2
    2d76:	f0 91 a3 06 	lds	r31, 0x06A3
    2d7a:	23 81       	ldd	r18, Z+3	; 0x03
    2d7c:	21 ff       	sbrs	r18, 1
    2d7e:	1b c0       	rjmp	.+54     	; 0x2db6 <puts+0x4c>
    2d80:	ec 01       	movw	r28, r24
    2d82:	00 e0       	ldi	r16, 0x00	; 0
    2d84:	10 e0       	ldi	r17, 0x00	; 0
    2d86:	89 91       	ld	r24, Y+
    2d88:	60 91 a2 06 	lds	r22, 0x06A2
    2d8c:	70 91 a3 06 	lds	r23, 0x06A3
    2d90:	db 01       	movw	r26, r22
    2d92:	18 96       	adiw	r26, 0x08	; 8
    2d94:	ed 91       	ld	r30, X+
    2d96:	fc 91       	ld	r31, X
    2d98:	19 97       	sbiw	r26, 0x09	; 9
    2d9a:	88 23       	and	r24, r24
    2d9c:	31 f0       	breq	.+12     	; 0x2daa <puts+0x40>
    2d9e:	09 95       	icall
    2da0:	89 2b       	or	r24, r25
    2da2:	89 f3       	breq	.-30     	; 0x2d86 <puts+0x1c>
    2da4:	0f ef       	ldi	r16, 0xFF	; 255
    2da6:	1f ef       	ldi	r17, 0xFF	; 255
    2da8:	ee cf       	rjmp	.-36     	; 0x2d86 <puts+0x1c>
    2daa:	8a e0       	ldi	r24, 0x0A	; 10
    2dac:	09 95       	icall
    2dae:	89 2b       	or	r24, r25
    2db0:	11 f4       	brne	.+4      	; 0x2db6 <puts+0x4c>
    2db2:	c8 01       	movw	r24, r16
    2db4:	02 c0       	rjmp	.+4      	; 0x2dba <puts+0x50>
    2db6:	8f ef       	ldi	r24, 0xFF	; 255
    2db8:	9f ef       	ldi	r25, 0xFF	; 255
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	1f 91       	pop	r17
    2dc0:	0f 91       	pop	r16
    2dc2:	08 95       	ret

00002dc4 <vfprintf>:
    2dc4:	ac e0       	ldi	r26, 0x0C	; 12
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	e7 ee       	ldi	r30, 0xE7	; 231
    2dca:	f6 e1       	ldi	r31, 0x16	; 22
    2dcc:	64 c2       	rjmp	.+1224   	; 0x3296 <__prologue_saves__>
    2dce:	7c 01       	movw	r14, r24
    2dd0:	6b 01       	movw	r12, r22
    2dd2:	8a 01       	movw	r16, r20
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	17 82       	std	Z+7, r1	; 0x07
    2dd8:	16 82       	std	Z+6, r1	; 0x06
    2dda:	83 81       	ldd	r24, Z+3	; 0x03
    2ddc:	81 ff       	sbrs	r24, 1
    2dde:	b0 c1       	rjmp	.+864    	; 0x3140 <vfprintf+0x37c>
    2de0:	ce 01       	movw	r24, r28
    2de2:	01 96       	adiw	r24, 0x01	; 1
    2de4:	4c 01       	movw	r8, r24
    2de6:	f7 01       	movw	r30, r14
    2de8:	93 81       	ldd	r25, Z+3	; 0x03
    2dea:	f6 01       	movw	r30, r12
    2dec:	93 fd       	sbrc	r25, 3
    2dee:	85 91       	lpm	r24, Z+
    2df0:	93 ff       	sbrs	r25, 3
    2df2:	81 91       	ld	r24, Z+
    2df4:	6f 01       	movw	r12, r30
    2df6:	88 23       	and	r24, r24
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <vfprintf+0x38>
    2dfa:	9e c1       	rjmp	.+828    	; 0x3138 <vfprintf+0x374>
    2dfc:	85 32       	cpi	r24, 0x25	; 37
    2dfe:	39 f4       	brne	.+14     	; 0x2e0e <vfprintf+0x4a>
    2e00:	93 fd       	sbrc	r25, 3
    2e02:	85 91       	lpm	r24, Z+
    2e04:	93 ff       	sbrs	r25, 3
    2e06:	81 91       	ld	r24, Z+
    2e08:	6f 01       	movw	r12, r30
    2e0a:	85 32       	cpi	r24, 0x25	; 37
    2e0c:	21 f4       	brne	.+8      	; 0x2e16 <vfprintf+0x52>
    2e0e:	b7 01       	movw	r22, r14
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	b1 d1       	rcall	.+866    	; 0x3176 <fputc>
    2e14:	e8 cf       	rjmp	.-48     	; 0x2de6 <vfprintf+0x22>
    2e16:	51 2c       	mov	r5, r1
    2e18:	31 2c       	mov	r3, r1
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	20 32       	cpi	r18, 0x20	; 32
    2e1e:	a0 f4       	brcc	.+40     	; 0x2e48 <vfprintf+0x84>
    2e20:	8b 32       	cpi	r24, 0x2B	; 43
    2e22:	69 f0       	breq	.+26     	; 0x2e3e <vfprintf+0x7a>
    2e24:	30 f4       	brcc	.+12     	; 0x2e32 <vfprintf+0x6e>
    2e26:	80 32       	cpi	r24, 0x20	; 32
    2e28:	59 f0       	breq	.+22     	; 0x2e40 <vfprintf+0x7c>
    2e2a:	83 32       	cpi	r24, 0x23	; 35
    2e2c:	69 f4       	brne	.+26     	; 0x2e48 <vfprintf+0x84>
    2e2e:	20 61       	ori	r18, 0x10	; 16
    2e30:	2c c0       	rjmp	.+88     	; 0x2e8a <vfprintf+0xc6>
    2e32:	8d 32       	cpi	r24, 0x2D	; 45
    2e34:	39 f0       	breq	.+14     	; 0x2e44 <vfprintf+0x80>
    2e36:	80 33       	cpi	r24, 0x30	; 48
    2e38:	39 f4       	brne	.+14     	; 0x2e48 <vfprintf+0x84>
    2e3a:	21 60       	ori	r18, 0x01	; 1
    2e3c:	26 c0       	rjmp	.+76     	; 0x2e8a <vfprintf+0xc6>
    2e3e:	22 60       	ori	r18, 0x02	; 2
    2e40:	24 60       	ori	r18, 0x04	; 4
    2e42:	23 c0       	rjmp	.+70     	; 0x2e8a <vfprintf+0xc6>
    2e44:	28 60       	ori	r18, 0x08	; 8
    2e46:	21 c0       	rjmp	.+66     	; 0x2e8a <vfprintf+0xc6>
    2e48:	27 fd       	sbrc	r18, 7
    2e4a:	27 c0       	rjmp	.+78     	; 0x2e9a <vfprintf+0xd6>
    2e4c:	30 ed       	ldi	r19, 0xD0	; 208
    2e4e:	38 0f       	add	r19, r24
    2e50:	3a 30       	cpi	r19, 0x0A	; 10
    2e52:	78 f4       	brcc	.+30     	; 0x2e72 <vfprintf+0xae>
    2e54:	26 ff       	sbrs	r18, 6
    2e56:	06 c0       	rjmp	.+12     	; 0x2e64 <vfprintf+0xa0>
    2e58:	fa e0       	ldi	r31, 0x0A	; 10
    2e5a:	5f 9e       	mul	r5, r31
    2e5c:	30 0d       	add	r19, r0
    2e5e:	11 24       	eor	r1, r1
    2e60:	53 2e       	mov	r5, r19
    2e62:	13 c0       	rjmp	.+38     	; 0x2e8a <vfprintf+0xc6>
    2e64:	8a e0       	ldi	r24, 0x0A	; 10
    2e66:	38 9e       	mul	r3, r24
    2e68:	30 0d       	add	r19, r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	33 2e       	mov	r3, r19
    2e6e:	20 62       	ori	r18, 0x20	; 32
    2e70:	0c c0       	rjmp	.+24     	; 0x2e8a <vfprintf+0xc6>
    2e72:	8e 32       	cpi	r24, 0x2E	; 46
    2e74:	21 f4       	brne	.+8      	; 0x2e7e <vfprintf+0xba>
    2e76:	26 fd       	sbrc	r18, 6
    2e78:	5f c1       	rjmp	.+702    	; 0x3138 <vfprintf+0x374>
    2e7a:	20 64       	ori	r18, 0x40	; 64
    2e7c:	06 c0       	rjmp	.+12     	; 0x2e8a <vfprintf+0xc6>
    2e7e:	8c 36       	cpi	r24, 0x6C	; 108
    2e80:	11 f4       	brne	.+4      	; 0x2e86 <vfprintf+0xc2>
    2e82:	20 68       	ori	r18, 0x80	; 128
    2e84:	02 c0       	rjmp	.+4      	; 0x2e8a <vfprintf+0xc6>
    2e86:	88 36       	cpi	r24, 0x68	; 104
    2e88:	41 f4       	brne	.+16     	; 0x2e9a <vfprintf+0xd6>
    2e8a:	f6 01       	movw	r30, r12
    2e8c:	93 fd       	sbrc	r25, 3
    2e8e:	85 91       	lpm	r24, Z+
    2e90:	93 ff       	sbrs	r25, 3
    2e92:	81 91       	ld	r24, Z+
    2e94:	6f 01       	movw	r12, r30
    2e96:	81 11       	cpse	r24, r1
    2e98:	c1 cf       	rjmp	.-126    	; 0x2e1c <vfprintf+0x58>
    2e9a:	98 2f       	mov	r25, r24
    2e9c:	9f 7d       	andi	r25, 0xDF	; 223
    2e9e:	95 54       	subi	r25, 0x45	; 69
    2ea0:	93 30       	cpi	r25, 0x03	; 3
    2ea2:	28 f4       	brcc	.+10     	; 0x2eae <vfprintf+0xea>
    2ea4:	0c 5f       	subi	r16, 0xFC	; 252
    2ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea8:	ff e3       	ldi	r31, 0x3F	; 63
    2eaa:	f9 83       	std	Y+1, r31	; 0x01
    2eac:	0d c0       	rjmp	.+26     	; 0x2ec8 <vfprintf+0x104>
    2eae:	83 36       	cpi	r24, 0x63	; 99
    2eb0:	31 f0       	breq	.+12     	; 0x2ebe <vfprintf+0xfa>
    2eb2:	83 37       	cpi	r24, 0x73	; 115
    2eb4:	71 f0       	breq	.+28     	; 0x2ed2 <vfprintf+0x10e>
    2eb6:	83 35       	cpi	r24, 0x53	; 83
    2eb8:	09 f0       	breq	.+2      	; 0x2ebc <vfprintf+0xf8>
    2eba:	57 c0       	rjmp	.+174    	; 0x2f6a <vfprintf+0x1a6>
    2ebc:	21 c0       	rjmp	.+66     	; 0x2f00 <vfprintf+0x13c>
    2ebe:	f8 01       	movw	r30, r16
    2ec0:	80 81       	ld	r24, Z
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	0e 5f       	subi	r16, 0xFE	; 254
    2ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec8:	44 24       	eor	r4, r4
    2eca:	43 94       	inc	r4
    2ecc:	51 2c       	mov	r5, r1
    2ece:	54 01       	movw	r10, r8
    2ed0:	14 c0       	rjmp	.+40     	; 0x2efa <vfprintf+0x136>
    2ed2:	38 01       	movw	r6, r16
    2ed4:	f2 e0       	ldi	r31, 0x02	; 2
    2ed6:	6f 0e       	add	r6, r31
    2ed8:	71 1c       	adc	r7, r1
    2eda:	f8 01       	movw	r30, r16
    2edc:	a0 80       	ld	r10, Z
    2ede:	b1 80       	ldd	r11, Z+1	; 0x01
    2ee0:	26 ff       	sbrs	r18, 6
    2ee2:	03 c0       	rjmp	.+6      	; 0x2eea <vfprintf+0x126>
    2ee4:	65 2d       	mov	r22, r5
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	02 c0       	rjmp	.+4      	; 0x2eee <vfprintf+0x12a>
    2eea:	6f ef       	ldi	r22, 0xFF	; 255
    2eec:	7f ef       	ldi	r23, 0xFF	; 255
    2eee:	c5 01       	movw	r24, r10
    2ef0:	2c 87       	std	Y+12, r18	; 0x0c
    2ef2:	36 d1       	rcall	.+620    	; 0x3160 <strnlen>
    2ef4:	2c 01       	movw	r4, r24
    2ef6:	83 01       	movw	r16, r6
    2ef8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2efa:	2f 77       	andi	r18, 0x7F	; 127
    2efc:	22 2e       	mov	r2, r18
    2efe:	16 c0       	rjmp	.+44     	; 0x2f2c <vfprintf+0x168>
    2f00:	38 01       	movw	r6, r16
    2f02:	f2 e0       	ldi	r31, 0x02	; 2
    2f04:	6f 0e       	add	r6, r31
    2f06:	71 1c       	adc	r7, r1
    2f08:	f8 01       	movw	r30, r16
    2f0a:	a0 80       	ld	r10, Z
    2f0c:	b1 80       	ldd	r11, Z+1	; 0x01
    2f0e:	26 ff       	sbrs	r18, 6
    2f10:	03 c0       	rjmp	.+6      	; 0x2f18 <vfprintf+0x154>
    2f12:	65 2d       	mov	r22, r5
    2f14:	70 e0       	ldi	r23, 0x00	; 0
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <vfprintf+0x158>
    2f18:	6f ef       	ldi	r22, 0xFF	; 255
    2f1a:	7f ef       	ldi	r23, 0xFF	; 255
    2f1c:	c5 01       	movw	r24, r10
    2f1e:	2c 87       	std	Y+12, r18	; 0x0c
    2f20:	14 d1       	rcall	.+552    	; 0x314a <strnlen_P>
    2f22:	2c 01       	movw	r4, r24
    2f24:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f26:	20 68       	ori	r18, 0x80	; 128
    2f28:	22 2e       	mov	r2, r18
    2f2a:	83 01       	movw	r16, r6
    2f2c:	23 fc       	sbrc	r2, 3
    2f2e:	19 c0       	rjmp	.+50     	; 0x2f62 <vfprintf+0x19e>
    2f30:	83 2d       	mov	r24, r3
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	48 16       	cp	r4, r24
    2f36:	59 06       	cpc	r5, r25
    2f38:	a0 f4       	brcc	.+40     	; 0x2f62 <vfprintf+0x19e>
    2f3a:	b7 01       	movw	r22, r14
    2f3c:	80 e2       	ldi	r24, 0x20	; 32
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	1a d1       	rcall	.+564    	; 0x3176 <fputc>
    2f42:	3a 94       	dec	r3
    2f44:	f5 cf       	rjmp	.-22     	; 0x2f30 <vfprintf+0x16c>
    2f46:	f5 01       	movw	r30, r10
    2f48:	27 fc       	sbrc	r2, 7
    2f4a:	85 91       	lpm	r24, Z+
    2f4c:	27 fe       	sbrs	r2, 7
    2f4e:	81 91       	ld	r24, Z+
    2f50:	5f 01       	movw	r10, r30
    2f52:	b7 01       	movw	r22, r14
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	0f d1       	rcall	.+542    	; 0x3176 <fputc>
    2f58:	31 10       	cpse	r3, r1
    2f5a:	3a 94       	dec	r3
    2f5c:	f1 e0       	ldi	r31, 0x01	; 1
    2f5e:	4f 1a       	sub	r4, r31
    2f60:	51 08       	sbc	r5, r1
    2f62:	41 14       	cp	r4, r1
    2f64:	51 04       	cpc	r5, r1
    2f66:	79 f7       	brne	.-34     	; 0x2f46 <vfprintf+0x182>
    2f68:	de c0       	rjmp	.+444    	; 0x3126 <vfprintf+0x362>
    2f6a:	84 36       	cpi	r24, 0x64	; 100
    2f6c:	11 f0       	breq	.+4      	; 0x2f72 <vfprintf+0x1ae>
    2f6e:	89 36       	cpi	r24, 0x69	; 105
    2f70:	31 f5       	brne	.+76     	; 0x2fbe <vfprintf+0x1fa>
    2f72:	f8 01       	movw	r30, r16
    2f74:	27 ff       	sbrs	r18, 7
    2f76:	07 c0       	rjmp	.+14     	; 0x2f86 <vfprintf+0x1c2>
    2f78:	60 81       	ld	r22, Z
    2f7a:	71 81       	ldd	r23, Z+1	; 0x01
    2f7c:	82 81       	ldd	r24, Z+2	; 0x02
    2f7e:	93 81       	ldd	r25, Z+3	; 0x03
    2f80:	0c 5f       	subi	r16, 0xFC	; 252
    2f82:	1f 4f       	sbci	r17, 0xFF	; 255
    2f84:	08 c0       	rjmp	.+16     	; 0x2f96 <vfprintf+0x1d2>
    2f86:	60 81       	ld	r22, Z
    2f88:	71 81       	ldd	r23, Z+1	; 0x01
    2f8a:	88 27       	eor	r24, r24
    2f8c:	77 fd       	sbrc	r23, 7
    2f8e:	80 95       	com	r24
    2f90:	98 2f       	mov	r25, r24
    2f92:	0e 5f       	subi	r16, 0xFE	; 254
    2f94:	1f 4f       	sbci	r17, 0xFF	; 255
    2f96:	2f 76       	andi	r18, 0x6F	; 111
    2f98:	b2 2e       	mov	r11, r18
    2f9a:	97 ff       	sbrs	r25, 7
    2f9c:	09 c0       	rjmp	.+18     	; 0x2fb0 <vfprintf+0x1ec>
    2f9e:	90 95       	com	r25
    2fa0:	80 95       	com	r24
    2fa2:	70 95       	com	r23
    2fa4:	61 95       	neg	r22
    2fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    2faa:	9f 4f       	sbci	r25, 0xFF	; 255
    2fac:	20 68       	ori	r18, 0x80	; 128
    2fae:	b2 2e       	mov	r11, r18
    2fb0:	2a e0       	ldi	r18, 0x0A	; 10
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	a4 01       	movw	r20, r8
    2fb6:	11 d1       	rcall	.+546    	; 0x31da <__ultoa_invert>
    2fb8:	a8 2e       	mov	r10, r24
    2fba:	a8 18       	sub	r10, r8
    2fbc:	43 c0       	rjmp	.+134    	; 0x3044 <vfprintf+0x280>
    2fbe:	85 37       	cpi	r24, 0x75	; 117
    2fc0:	29 f4       	brne	.+10     	; 0x2fcc <vfprintf+0x208>
    2fc2:	2f 7e       	andi	r18, 0xEF	; 239
    2fc4:	b2 2e       	mov	r11, r18
    2fc6:	2a e0       	ldi	r18, 0x0A	; 10
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	25 c0       	rjmp	.+74     	; 0x3016 <vfprintf+0x252>
    2fcc:	f2 2f       	mov	r31, r18
    2fce:	f9 7f       	andi	r31, 0xF9	; 249
    2fd0:	bf 2e       	mov	r11, r31
    2fd2:	8f 36       	cpi	r24, 0x6F	; 111
    2fd4:	c1 f0       	breq	.+48     	; 0x3006 <vfprintf+0x242>
    2fd6:	18 f4       	brcc	.+6      	; 0x2fde <vfprintf+0x21a>
    2fd8:	88 35       	cpi	r24, 0x58	; 88
    2fda:	79 f0       	breq	.+30     	; 0x2ffa <vfprintf+0x236>
    2fdc:	ad c0       	rjmp	.+346    	; 0x3138 <vfprintf+0x374>
    2fde:	80 37       	cpi	r24, 0x70	; 112
    2fe0:	19 f0       	breq	.+6      	; 0x2fe8 <vfprintf+0x224>
    2fe2:	88 37       	cpi	r24, 0x78	; 120
    2fe4:	21 f0       	breq	.+8      	; 0x2fee <vfprintf+0x22a>
    2fe6:	a8 c0       	rjmp	.+336    	; 0x3138 <vfprintf+0x374>
    2fe8:	2f 2f       	mov	r18, r31
    2fea:	20 61       	ori	r18, 0x10	; 16
    2fec:	b2 2e       	mov	r11, r18
    2fee:	b4 fe       	sbrs	r11, 4
    2ff0:	0d c0       	rjmp	.+26     	; 0x300c <vfprintf+0x248>
    2ff2:	8b 2d       	mov	r24, r11
    2ff4:	84 60       	ori	r24, 0x04	; 4
    2ff6:	b8 2e       	mov	r11, r24
    2ff8:	09 c0       	rjmp	.+18     	; 0x300c <vfprintf+0x248>
    2ffa:	24 ff       	sbrs	r18, 4
    2ffc:	0a c0       	rjmp	.+20     	; 0x3012 <vfprintf+0x24e>
    2ffe:	9f 2f       	mov	r25, r31
    3000:	96 60       	ori	r25, 0x06	; 6
    3002:	b9 2e       	mov	r11, r25
    3004:	06 c0       	rjmp	.+12     	; 0x3012 <vfprintf+0x24e>
    3006:	28 e0       	ldi	r18, 0x08	; 8
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	05 c0       	rjmp	.+10     	; 0x3016 <vfprintf+0x252>
    300c:	20 e1       	ldi	r18, 0x10	; 16
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <vfprintf+0x252>
    3012:	20 e1       	ldi	r18, 0x10	; 16
    3014:	32 e0       	ldi	r19, 0x02	; 2
    3016:	f8 01       	movw	r30, r16
    3018:	b7 fe       	sbrs	r11, 7
    301a:	07 c0       	rjmp	.+14     	; 0x302a <vfprintf+0x266>
    301c:	60 81       	ld	r22, Z
    301e:	71 81       	ldd	r23, Z+1	; 0x01
    3020:	82 81       	ldd	r24, Z+2	; 0x02
    3022:	93 81       	ldd	r25, Z+3	; 0x03
    3024:	0c 5f       	subi	r16, 0xFC	; 252
    3026:	1f 4f       	sbci	r17, 0xFF	; 255
    3028:	06 c0       	rjmp	.+12     	; 0x3036 <vfprintf+0x272>
    302a:	60 81       	ld	r22, Z
    302c:	71 81       	ldd	r23, Z+1	; 0x01
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	0e 5f       	subi	r16, 0xFE	; 254
    3034:	1f 4f       	sbci	r17, 0xFF	; 255
    3036:	a4 01       	movw	r20, r8
    3038:	d0 d0       	rcall	.+416    	; 0x31da <__ultoa_invert>
    303a:	a8 2e       	mov	r10, r24
    303c:	a8 18       	sub	r10, r8
    303e:	fb 2d       	mov	r31, r11
    3040:	ff 77       	andi	r31, 0x7F	; 127
    3042:	bf 2e       	mov	r11, r31
    3044:	b6 fe       	sbrs	r11, 6
    3046:	0b c0       	rjmp	.+22     	; 0x305e <vfprintf+0x29a>
    3048:	2b 2d       	mov	r18, r11
    304a:	2e 7f       	andi	r18, 0xFE	; 254
    304c:	a5 14       	cp	r10, r5
    304e:	50 f4       	brcc	.+20     	; 0x3064 <vfprintf+0x2a0>
    3050:	b4 fe       	sbrs	r11, 4
    3052:	0a c0       	rjmp	.+20     	; 0x3068 <vfprintf+0x2a4>
    3054:	b2 fc       	sbrc	r11, 2
    3056:	08 c0       	rjmp	.+16     	; 0x3068 <vfprintf+0x2a4>
    3058:	2b 2d       	mov	r18, r11
    305a:	2e 7e       	andi	r18, 0xEE	; 238
    305c:	05 c0       	rjmp	.+10     	; 0x3068 <vfprintf+0x2a4>
    305e:	7a 2c       	mov	r7, r10
    3060:	2b 2d       	mov	r18, r11
    3062:	03 c0       	rjmp	.+6      	; 0x306a <vfprintf+0x2a6>
    3064:	7a 2c       	mov	r7, r10
    3066:	01 c0       	rjmp	.+2      	; 0x306a <vfprintf+0x2a6>
    3068:	75 2c       	mov	r7, r5
    306a:	24 ff       	sbrs	r18, 4
    306c:	0d c0       	rjmp	.+26     	; 0x3088 <vfprintf+0x2c4>
    306e:	fe 01       	movw	r30, r28
    3070:	ea 0d       	add	r30, r10
    3072:	f1 1d       	adc	r31, r1
    3074:	80 81       	ld	r24, Z
    3076:	80 33       	cpi	r24, 0x30	; 48
    3078:	11 f4       	brne	.+4      	; 0x307e <vfprintf+0x2ba>
    307a:	29 7e       	andi	r18, 0xE9	; 233
    307c:	09 c0       	rjmp	.+18     	; 0x3090 <vfprintf+0x2cc>
    307e:	22 ff       	sbrs	r18, 2
    3080:	06 c0       	rjmp	.+12     	; 0x308e <vfprintf+0x2ca>
    3082:	73 94       	inc	r7
    3084:	73 94       	inc	r7
    3086:	04 c0       	rjmp	.+8      	; 0x3090 <vfprintf+0x2cc>
    3088:	82 2f       	mov	r24, r18
    308a:	86 78       	andi	r24, 0x86	; 134
    308c:	09 f0       	breq	.+2      	; 0x3090 <vfprintf+0x2cc>
    308e:	73 94       	inc	r7
    3090:	23 fd       	sbrc	r18, 3
    3092:	12 c0       	rjmp	.+36     	; 0x30b8 <vfprintf+0x2f4>
    3094:	20 ff       	sbrs	r18, 0
    3096:	06 c0       	rjmp	.+12     	; 0x30a4 <vfprintf+0x2e0>
    3098:	5a 2c       	mov	r5, r10
    309a:	73 14       	cp	r7, r3
    309c:	18 f4       	brcc	.+6      	; 0x30a4 <vfprintf+0x2e0>
    309e:	53 0c       	add	r5, r3
    30a0:	57 18       	sub	r5, r7
    30a2:	73 2c       	mov	r7, r3
    30a4:	73 14       	cp	r7, r3
    30a6:	60 f4       	brcc	.+24     	; 0x30c0 <vfprintf+0x2fc>
    30a8:	b7 01       	movw	r22, r14
    30aa:	80 e2       	ldi	r24, 0x20	; 32
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	2c 87       	std	Y+12, r18	; 0x0c
    30b0:	62 d0       	rcall	.+196    	; 0x3176 <fputc>
    30b2:	73 94       	inc	r7
    30b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    30b6:	f6 cf       	rjmp	.-20     	; 0x30a4 <vfprintf+0x2e0>
    30b8:	73 14       	cp	r7, r3
    30ba:	10 f4       	brcc	.+4      	; 0x30c0 <vfprintf+0x2fc>
    30bc:	37 18       	sub	r3, r7
    30be:	01 c0       	rjmp	.+2      	; 0x30c2 <vfprintf+0x2fe>
    30c0:	31 2c       	mov	r3, r1
    30c2:	24 ff       	sbrs	r18, 4
    30c4:	11 c0       	rjmp	.+34     	; 0x30e8 <vfprintf+0x324>
    30c6:	b7 01       	movw	r22, r14
    30c8:	80 e3       	ldi	r24, 0x30	; 48
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	2c 87       	std	Y+12, r18	; 0x0c
    30ce:	53 d0       	rcall	.+166    	; 0x3176 <fputc>
    30d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    30d2:	22 ff       	sbrs	r18, 2
    30d4:	16 c0       	rjmp	.+44     	; 0x3102 <vfprintf+0x33e>
    30d6:	21 ff       	sbrs	r18, 1
    30d8:	03 c0       	rjmp	.+6      	; 0x30e0 <vfprintf+0x31c>
    30da:	88 e5       	ldi	r24, 0x58	; 88
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	02 c0       	rjmp	.+4      	; 0x30e4 <vfprintf+0x320>
    30e0:	88 e7       	ldi	r24, 0x78	; 120
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	b7 01       	movw	r22, r14
    30e6:	0c c0       	rjmp	.+24     	; 0x3100 <vfprintf+0x33c>
    30e8:	82 2f       	mov	r24, r18
    30ea:	86 78       	andi	r24, 0x86	; 134
    30ec:	51 f0       	breq	.+20     	; 0x3102 <vfprintf+0x33e>
    30ee:	21 fd       	sbrc	r18, 1
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <vfprintf+0x332>
    30f2:	80 e2       	ldi	r24, 0x20	; 32
    30f4:	01 c0       	rjmp	.+2      	; 0x30f8 <vfprintf+0x334>
    30f6:	8b e2       	ldi	r24, 0x2B	; 43
    30f8:	27 fd       	sbrc	r18, 7
    30fa:	8d e2       	ldi	r24, 0x2D	; 45
    30fc:	b7 01       	movw	r22, r14
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	3a d0       	rcall	.+116    	; 0x3176 <fputc>
    3102:	a5 14       	cp	r10, r5
    3104:	30 f4       	brcc	.+12     	; 0x3112 <vfprintf+0x34e>
    3106:	b7 01       	movw	r22, r14
    3108:	80 e3       	ldi	r24, 0x30	; 48
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	34 d0       	rcall	.+104    	; 0x3176 <fputc>
    310e:	5a 94       	dec	r5
    3110:	f8 cf       	rjmp	.-16     	; 0x3102 <vfprintf+0x33e>
    3112:	aa 94       	dec	r10
    3114:	f4 01       	movw	r30, r8
    3116:	ea 0d       	add	r30, r10
    3118:	f1 1d       	adc	r31, r1
    311a:	80 81       	ld	r24, Z
    311c:	b7 01       	movw	r22, r14
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	2a d0       	rcall	.+84     	; 0x3176 <fputc>
    3122:	a1 10       	cpse	r10, r1
    3124:	f6 cf       	rjmp	.-20     	; 0x3112 <vfprintf+0x34e>
    3126:	33 20       	and	r3, r3
    3128:	09 f4       	brne	.+2      	; 0x312c <vfprintf+0x368>
    312a:	5d ce       	rjmp	.-838    	; 0x2de6 <vfprintf+0x22>
    312c:	b7 01       	movw	r22, r14
    312e:	80 e2       	ldi	r24, 0x20	; 32
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	21 d0       	rcall	.+66     	; 0x3176 <fputc>
    3134:	3a 94       	dec	r3
    3136:	f7 cf       	rjmp	.-18     	; 0x3126 <vfprintf+0x362>
    3138:	f7 01       	movw	r30, r14
    313a:	86 81       	ldd	r24, Z+6	; 0x06
    313c:	97 81       	ldd	r25, Z+7	; 0x07
    313e:	02 c0       	rjmp	.+4      	; 0x3144 <vfprintf+0x380>
    3140:	8f ef       	ldi	r24, 0xFF	; 255
    3142:	9f ef       	ldi	r25, 0xFF	; 255
    3144:	2c 96       	adiw	r28, 0x0c	; 12
    3146:	e2 e1       	ldi	r30, 0x12	; 18
    3148:	c2 c0       	rjmp	.+388    	; 0x32ce <__epilogue_restores__>

0000314a <strnlen_P>:
    314a:	fc 01       	movw	r30, r24
    314c:	05 90       	lpm	r0, Z+
    314e:	61 50       	subi	r22, 0x01	; 1
    3150:	70 40       	sbci	r23, 0x00	; 0
    3152:	01 10       	cpse	r0, r1
    3154:	d8 f7       	brcc	.-10     	; 0x314c <strnlen_P+0x2>
    3156:	80 95       	com	r24
    3158:	90 95       	com	r25
    315a:	8e 0f       	add	r24, r30
    315c:	9f 1f       	adc	r25, r31
    315e:	08 95       	ret

00003160 <strnlen>:
    3160:	fc 01       	movw	r30, r24
    3162:	61 50       	subi	r22, 0x01	; 1
    3164:	70 40       	sbci	r23, 0x00	; 0
    3166:	01 90       	ld	r0, Z+
    3168:	01 10       	cpse	r0, r1
    316a:	d8 f7       	brcc	.-10     	; 0x3162 <strnlen+0x2>
    316c:	80 95       	com	r24
    316e:	90 95       	com	r25
    3170:	8e 0f       	add	r24, r30
    3172:	9f 1f       	adc	r25, r31
    3174:	08 95       	ret

00003176 <fputc>:
    3176:	0f 93       	push	r16
    3178:	1f 93       	push	r17
    317a:	cf 93       	push	r28
    317c:	df 93       	push	r29
    317e:	18 2f       	mov	r17, r24
    3180:	09 2f       	mov	r16, r25
    3182:	eb 01       	movw	r28, r22
    3184:	8b 81       	ldd	r24, Y+3	; 0x03
    3186:	81 fd       	sbrc	r24, 1
    3188:	03 c0       	rjmp	.+6      	; 0x3190 <fputc+0x1a>
    318a:	8f ef       	ldi	r24, 0xFF	; 255
    318c:	9f ef       	ldi	r25, 0xFF	; 255
    318e:	20 c0       	rjmp	.+64     	; 0x31d0 <fputc+0x5a>
    3190:	82 ff       	sbrs	r24, 2
    3192:	10 c0       	rjmp	.+32     	; 0x31b4 <fputc+0x3e>
    3194:	4e 81       	ldd	r20, Y+6	; 0x06
    3196:	5f 81       	ldd	r21, Y+7	; 0x07
    3198:	2c 81       	ldd	r18, Y+4	; 0x04
    319a:	3d 81       	ldd	r19, Y+5	; 0x05
    319c:	42 17       	cp	r20, r18
    319e:	53 07       	cpc	r21, r19
    31a0:	7c f4       	brge	.+30     	; 0x31c0 <fputc+0x4a>
    31a2:	e8 81       	ld	r30, Y
    31a4:	f9 81       	ldd	r31, Y+1	; 0x01
    31a6:	9f 01       	movw	r18, r30
    31a8:	2f 5f       	subi	r18, 0xFF	; 255
    31aa:	3f 4f       	sbci	r19, 0xFF	; 255
    31ac:	39 83       	std	Y+1, r19	; 0x01
    31ae:	28 83       	st	Y, r18
    31b0:	10 83       	st	Z, r17
    31b2:	06 c0       	rjmp	.+12     	; 0x31c0 <fputc+0x4a>
    31b4:	e8 85       	ldd	r30, Y+8	; 0x08
    31b6:	f9 85       	ldd	r31, Y+9	; 0x09
    31b8:	81 2f       	mov	r24, r17
    31ba:	09 95       	icall
    31bc:	89 2b       	or	r24, r25
    31be:	29 f7       	brne	.-54     	; 0x318a <fputc+0x14>
    31c0:	2e 81       	ldd	r18, Y+6	; 0x06
    31c2:	3f 81       	ldd	r19, Y+7	; 0x07
    31c4:	2f 5f       	subi	r18, 0xFF	; 255
    31c6:	3f 4f       	sbci	r19, 0xFF	; 255
    31c8:	3f 83       	std	Y+7, r19	; 0x07
    31ca:	2e 83       	std	Y+6, r18	; 0x06
    31cc:	81 2f       	mov	r24, r17
    31ce:	90 2f       	mov	r25, r16
    31d0:	df 91       	pop	r29
    31d2:	cf 91       	pop	r28
    31d4:	1f 91       	pop	r17
    31d6:	0f 91       	pop	r16
    31d8:	08 95       	ret

000031da <__ultoa_invert>:
    31da:	fa 01       	movw	r30, r20
    31dc:	aa 27       	eor	r26, r26
    31de:	28 30       	cpi	r18, 0x08	; 8
    31e0:	51 f1       	breq	.+84     	; 0x3236 <__ultoa_invert+0x5c>
    31e2:	20 31       	cpi	r18, 0x10	; 16
    31e4:	81 f1       	breq	.+96     	; 0x3246 <__ultoa_invert+0x6c>
    31e6:	e8 94       	clt
    31e8:	6f 93       	push	r22
    31ea:	6e 7f       	andi	r22, 0xFE	; 254
    31ec:	6e 5f       	subi	r22, 0xFE	; 254
    31ee:	7f 4f       	sbci	r23, 0xFF	; 255
    31f0:	8f 4f       	sbci	r24, 0xFF	; 255
    31f2:	9f 4f       	sbci	r25, 0xFF	; 255
    31f4:	af 4f       	sbci	r26, 0xFF	; 255
    31f6:	b1 e0       	ldi	r27, 0x01	; 1
    31f8:	3e d0       	rcall	.+124    	; 0x3276 <__ultoa_invert+0x9c>
    31fa:	b4 e0       	ldi	r27, 0x04	; 4
    31fc:	3c d0       	rcall	.+120    	; 0x3276 <__ultoa_invert+0x9c>
    31fe:	67 0f       	add	r22, r23
    3200:	78 1f       	adc	r23, r24
    3202:	89 1f       	adc	r24, r25
    3204:	9a 1f       	adc	r25, r26
    3206:	a1 1d       	adc	r26, r1
    3208:	68 0f       	add	r22, r24
    320a:	79 1f       	adc	r23, r25
    320c:	8a 1f       	adc	r24, r26
    320e:	91 1d       	adc	r25, r1
    3210:	a1 1d       	adc	r26, r1
    3212:	6a 0f       	add	r22, r26
    3214:	71 1d       	adc	r23, r1
    3216:	81 1d       	adc	r24, r1
    3218:	91 1d       	adc	r25, r1
    321a:	a1 1d       	adc	r26, r1
    321c:	20 d0       	rcall	.+64     	; 0x325e <__ultoa_invert+0x84>
    321e:	09 f4       	brne	.+2      	; 0x3222 <__ultoa_invert+0x48>
    3220:	68 94       	set
    3222:	3f 91       	pop	r19
    3224:	2a e0       	ldi	r18, 0x0A	; 10
    3226:	26 9f       	mul	r18, r22
    3228:	11 24       	eor	r1, r1
    322a:	30 19       	sub	r19, r0
    322c:	30 5d       	subi	r19, 0xD0	; 208
    322e:	31 93       	st	Z+, r19
    3230:	de f6       	brtc	.-74     	; 0x31e8 <__ultoa_invert+0xe>
    3232:	cf 01       	movw	r24, r30
    3234:	08 95       	ret
    3236:	46 2f       	mov	r20, r22
    3238:	47 70       	andi	r20, 0x07	; 7
    323a:	40 5d       	subi	r20, 0xD0	; 208
    323c:	41 93       	st	Z+, r20
    323e:	b3 e0       	ldi	r27, 0x03	; 3
    3240:	0f d0       	rcall	.+30     	; 0x3260 <__ultoa_invert+0x86>
    3242:	c9 f7       	brne	.-14     	; 0x3236 <__ultoa_invert+0x5c>
    3244:	f6 cf       	rjmp	.-20     	; 0x3232 <__ultoa_invert+0x58>
    3246:	46 2f       	mov	r20, r22
    3248:	4f 70       	andi	r20, 0x0F	; 15
    324a:	40 5d       	subi	r20, 0xD0	; 208
    324c:	4a 33       	cpi	r20, 0x3A	; 58
    324e:	18 f0       	brcs	.+6      	; 0x3256 <__ultoa_invert+0x7c>
    3250:	49 5d       	subi	r20, 0xD9	; 217
    3252:	31 fd       	sbrc	r19, 1
    3254:	40 52       	subi	r20, 0x20	; 32
    3256:	41 93       	st	Z+, r20
    3258:	02 d0       	rcall	.+4      	; 0x325e <__ultoa_invert+0x84>
    325a:	a9 f7       	brne	.-22     	; 0x3246 <__ultoa_invert+0x6c>
    325c:	ea cf       	rjmp	.-44     	; 0x3232 <__ultoa_invert+0x58>
    325e:	b4 e0       	ldi	r27, 0x04	; 4
    3260:	a6 95       	lsr	r26
    3262:	97 95       	ror	r25
    3264:	87 95       	ror	r24
    3266:	77 95       	ror	r23
    3268:	67 95       	ror	r22
    326a:	ba 95       	dec	r27
    326c:	c9 f7       	brne	.-14     	; 0x3260 <__ultoa_invert+0x86>
    326e:	00 97       	sbiw	r24, 0x00	; 0
    3270:	61 05       	cpc	r22, r1
    3272:	71 05       	cpc	r23, r1
    3274:	08 95       	ret
    3276:	9b 01       	movw	r18, r22
    3278:	ac 01       	movw	r20, r24
    327a:	0a 2e       	mov	r0, r26
    327c:	06 94       	lsr	r0
    327e:	57 95       	ror	r21
    3280:	47 95       	ror	r20
    3282:	37 95       	ror	r19
    3284:	27 95       	ror	r18
    3286:	ba 95       	dec	r27
    3288:	c9 f7       	brne	.-14     	; 0x327c <__ultoa_invert+0xa2>
    328a:	62 0f       	add	r22, r18
    328c:	73 1f       	adc	r23, r19
    328e:	84 1f       	adc	r24, r20
    3290:	95 1f       	adc	r25, r21
    3292:	a0 1d       	adc	r26, r0
    3294:	08 95       	ret

00003296 <__prologue_saves__>:
    3296:	2f 92       	push	r2
    3298:	3f 92       	push	r3
    329a:	4f 92       	push	r4
    329c:	5f 92       	push	r5
    329e:	6f 92       	push	r6
    32a0:	7f 92       	push	r7
    32a2:	8f 92       	push	r8
    32a4:	9f 92       	push	r9
    32a6:	af 92       	push	r10
    32a8:	bf 92       	push	r11
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	ca 1b       	sub	r28, r26
    32c0:	db 0b       	sbc	r29, r27
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	de bf       	out	0x3e, r29	; 62
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	cd bf       	out	0x3d, r28	; 61
    32cc:	09 94       	ijmp

000032ce <__epilogue_restores__>:
    32ce:	2a 88       	ldd	r2, Y+18	; 0x12
    32d0:	39 88       	ldd	r3, Y+17	; 0x11
    32d2:	48 88       	ldd	r4, Y+16	; 0x10
    32d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    32d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    32d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    32da:	8c 84       	ldd	r8, Y+12	; 0x0c
    32dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    32de:	aa 84       	ldd	r10, Y+10	; 0x0a
    32e0:	b9 84       	ldd	r11, Y+9	; 0x09
    32e2:	c8 84       	ldd	r12, Y+8	; 0x08
    32e4:	df 80       	ldd	r13, Y+7	; 0x07
    32e6:	ee 80       	ldd	r14, Y+6	; 0x06
    32e8:	fd 80       	ldd	r15, Y+5	; 0x05
    32ea:	0c 81       	ldd	r16, Y+4	; 0x04
    32ec:	1b 81       	ldd	r17, Y+3	; 0x03
    32ee:	aa 81       	ldd	r26, Y+2	; 0x02
    32f0:	b9 81       	ldd	r27, Y+1	; 0x01
    32f2:	ce 0f       	add	r28, r30
    32f4:	d1 1d       	adc	r29, r1
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	f8 94       	cli
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	cd bf       	out	0x3d, r28	; 61
    3300:	ed 01       	movw	r28, r26
    3302:	08 95       	ret

00003304 <_exit>:
    3304:	f8 94       	cli

00003306 <__stop_program>:
    3306:	ff cf       	rjmp	.-2      	; 0x3306 <__stop_program>
