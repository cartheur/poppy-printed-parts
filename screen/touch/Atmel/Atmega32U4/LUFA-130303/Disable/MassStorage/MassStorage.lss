
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00001a50  00001ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800170  00800170  00001b54  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000520  00000000  00000000  0000275b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000dcd  00000000  00000000  00002c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000aa68  00000000  00000000  00003a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002543  00000000  00000000  0000e4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000858a  00000000  00000000  000109f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007c0  00000000  00000000  00018f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003bdb  00000000  00000000  00019740  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000055db  00000000  00000000  0001d31b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001196  00000000  00000000  000228f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000800  00000000  00000000  00023a8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__vector_10>
      2c:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__vector_11>
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      ba:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

000000ca <LanguageString>:
      ca:	04 03 09 04                                         ....

000000ce <ManufacturerString>:
      ce:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      de:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e8 <ProductString>:
      e8:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      f8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     108:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e2       	ldi	r29, 0x20	; 32
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	e0 e5       	ldi	r30, 0x50	; 80
     12c:	fa e1       	ldi	r31, 0x1A	; 26
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	a0 37       	cpi	r26, 0x70	; 112
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	11 e0       	ldi	r17, 0x01	; 1
     140:	a0 e7       	ldi	r26, 0x70	; 112
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	ad 37       	cpi	r26, 0x7D	; 125
     14a:	b1 07       	cpc	r27, r17
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	3e d0       	rcall	.+124    	; 0x1cc <main>
     150:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     156:	9b b1       	in	r25, 0x0b	; 11
     158:	9f 70       	andi	r25, 0x0F	; 15
     15a:	98 2b       	or	r25, r24
     15c:	9b b9       	out	0x0b, r25	; 11
			}
     15e:	08 95       	ret

00000160 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     160:	84 b7       	in	r24, 0x34	; 52
     162:	87 7f       	andi	r24, 0xF7	; 247
     164:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     166:	88 e1       	ldi	r24, 0x18	; 24
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	f8 94       	cli
     16c:	80 93 60 00 	sts	0x0060, r24
     170:	10 92 60 00 	sts	0x0060, r1
     174:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	80 e8       	ldi	r24, 0x80	; 128
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	80 93 61 00 	sts	0x0061, r24
     182:	90 93 61 00 	sts	0x0061, r25
     186:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     188:	8a b1       	in	r24, 0x0a	; 10
     18a:	80 6f       	ori	r24, 0xF0	; 240
     18c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     18e:	8b b1       	in	r24, 0x0b	; 11
     190:	8f 70       	andi	r24, 0x0F	; 15
     192:	8b b9       	out	0x0b, r24	; 11
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     194:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     196:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     198:	84 b1       	in	r24, 0x04	; 4
     19a:	86 60       	ori	r24, 0x06	; 6
     19c:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     19e:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     1a0:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     1a2:	8d b5       	in	r24, 0x2d	; 45
     1a4:	81 60       	ori	r24, 0x01	; 1
     1a6:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     1a8:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     1aa:	8c e5       	ldi	r24, 0x5C	; 92
     1ac:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     1ae:	8d b1       	in	r24, 0x0d	; 13
     1b0:	83 60       	ori	r24, 0x03	; 3
     1b2:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     1b4:	8e b1       	in	r24, 0x0e	; 14
     1b6:	83 60       	ori	r24, 0x03	; 3
     1b8:	8e b9       	out	0x0e, r24	; 14

	/* Hardware Initialization */
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     1ba:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <USB_Init>

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     1be:	32 d3       	rcall	.+1636   	; 0x824 <DataflashManager_CheckDataflashOperation>
     1c0:	88 23       	and	r24, r24
     1c2:	19 f4       	brne	.+6      	; 0x1ca <SetupHardware+0x6a>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     1c4:	80 e9       	ldi	r24, 0x90	; 144
     1c6:	c7 df       	rcall	.-114    	; 0x156 <LEDs_SetAllLEDs>
     1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <SetupHardware+0x68>
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     1ca:	de c2       	rjmp	.+1468   	; 0x788 <DataflashManager_ResetDataflashProtections>

000001cc <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     1cc:	c9 df       	rcall	.-110    	; 0x160 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1ce:	80 e1       	ldi	r24, 0x10	; 16
     1d0:	c2 df       	rcall	.-124    	; 0x156 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     1d2:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MS_Device_USBTask>
		USB_USBTask();
     1dc:	0e 94 80 0b 	call	0x1700	; 0x1700 <USB_USBTask>
     1e0:	f9 cf       	rjmp	.-14     	; 0x1d4 <main+0x8>

000001e2 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1e2:	80 ea       	ldi	r24, 0xA0	; 160
}
     1e4:	b8 cf       	rjmp	.-144    	; 0x156 <LEDs_SetAllLEDs>

000001e6 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1e6:	80 e1       	ldi	r24, 0x10	; 16
}
     1e8:	b6 cf       	rjmp	.-148    	; 0x156 <LEDs_SetAllLEDs>

000001ea <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1f2:	80 ff       	sbrs	r24, 0
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <EVENT_USB_Device_ConfigurationChanged+0x10>
     1f6:	80 e6       	ldi	r24, 0x60	; 96
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <EVENT_USB_Device_ConfigurationChanged+0x12>
     1fa:	80 e9       	ldi	r24, 0x90	; 144
}
     1fc:	ac cf       	rjmp	.-168    	; 0x156 <LEDs_SetAllLEDs>

000001fe <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <MS_Device_ProcessControlRequest>

00000206 <CALLBACK_MS_Device_SCSICommandReceived>:
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     20e:	80 e2       	ldi	r24, 0x20	; 32
     210:	a2 df       	rcall	.-188    	; 0x156 <LEDs_SetAllLEDs>
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     212:	ce 01       	movw	r24, r28
     214:	96 d3       	rcall	.+1836   	; 0x942 <SCSI_DecodeSCSICommand>
     216:	18 2f       	mov	r17, r24
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     218:	80 e6       	ldi	r24, 0x60	; 96
     21a:	9d df       	rcall	.-198    	; 0x156 <LEDs_SetAllLEDs>

	return CommandSuccess;
}
     21c:	81 2f       	mov	r24, r17
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	08 95       	ret

00000226 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     226:	92 30       	cpi	r25, 0x02	; 2
     228:	29 f0       	breq	.+10     	; 0x234 <CALLBACK_USB_GetDescriptor+0xe>
     22a:	93 30       	cpi	r25, 0x03	; 3
     22c:	41 f0       	breq	.+16     	; 0x23e <CALLBACK_USB_GetDescriptor+0x18>
     22e:	91 30       	cpi	r25, 0x01	; 1
     230:	e9 f4       	brne	.+58     	; 0x26c <CALLBACK_USB_GetDescriptor+0x46>
     232:	17 c0       	rjmp	.+46     	; 0x262 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     234:	20 e2       	ldi	r18, 0x20	; 32
     236:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     238:	ea ea       	ldi	r30, 0xAA	; 170
     23a:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     23c:	1b c0       	rjmp	.+54     	; 0x274 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	41 f0       	breq	.+16     	; 0x252 <CALLBACK_USB_GetDescriptor+0x2c>
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	18 f0       	brcs	.+6      	; 0x24c <CALLBACK_USB_GetDescriptor+0x26>
     246:	82 30       	cpi	r24, 0x02	; 2
     248:	89 f4       	brne	.+34     	; 0x26c <CALLBACK_USB_GetDescriptor+0x46>
     24a:	06 c0       	rjmp	.+12     	; 0x258 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     24c:	ea ec       	ldi	r30, 0xCA	; 202
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	05 c0       	rjmp	.+10     	; 0x25c <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     252:	ee ec       	ldi	r30, 0xCE	; 206
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	02 c0       	rjmp	.+4      	; 0x25c <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     258:	e8 ee       	ldi	r30, 0xE8	; 232
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	24 91       	lpm	r18, Z+
     25e:	30 e0       	ldi	r19, 0x00	; 0
					break;
     260:	09 c0       	rjmp	.+18     	; 0x274 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     262:	22 e1       	ldi	r18, 0x12	; 18
     264:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     266:	e8 e9       	ldi	r30, 0x98	; 152
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	04 c0       	rjmp	.+8      	; 0x274 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     270:	e0 e0       	ldi	r30, 0x00	; 0
     272:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     274:	da 01       	movw	r26, r20
     276:	11 96       	adiw	r26, 0x01	; 1
     278:	fc 93       	st	X, r31
     27a:	ee 93       	st	-X, r30
	return Size;
}
     27c:	c9 01       	movw	r24, r18
     27e:	08 95       	ret

00000280 <Dataflash_SelectChipFromPage>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     280:	2e b1       	in	r18, 0x0e	; 14
     282:	23 60       	ori	r18, 0x03	; 3
     284:	2e b9       	out	0x0e, r18	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     286:	20 e4       	ldi	r18, 0x40	; 64
     288:	80 30       	cpi	r24, 0x00	; 0
     28a:	92 07       	cpc	r25, r18
     28c:	58 f4       	brcc	.+22     	; 0x2a4 <Dataflash_SelectChipFromPage+0x24>
				  return;

				#if (DATAFLASH_TOTALCHIPS == 2)
					if (PageAddress & 0x01)
     28e:	80 ff       	sbrs	r24, 0
     290:	05 c0       	rjmp	.+10     	; 0x29c <Dataflash_SelectChipFromPage+0x1c>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     292:	8e b1       	in	r24, 0x0e	; 14
     294:	83 60       	ori	r24, 0x03	; 3
     296:	8d 7f       	andi	r24, 0xFD	; 253
     298:	8e b9       	out	0x0e, r24	; 14
     29a:	08 95       	ret
     29c:	8e b1       	in	r24, 0x0e	; 14
     29e:	83 60       	ori	r24, 0x03	; 3
     2a0:	8e 7f       	andi	r24, 0xFE	; 254
     2a2:	8e b9       	out	0x0e, r24	; 14
     2a4:	08 95       	ret

000002a6 <Dataflash_ToggleSelectedChipCS>:
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     2a6:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     2a8:	9e b1       	in	r25, 0x0e	; 14
     2aa:	93 60       	ori	r25, 0x03	; 3
     2ac:	9e b9       	out	0x0e, r25	; 14
     2ae:	9e b1       	in	r25, 0x0e	; 14
     2b0:	8c 6f       	ori	r24, 0xFC	; 252
     2b2:	93 60       	ori	r25, 0x03	; 3
     2b4:	89 23       	and	r24, r25
     2b6:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     2b8:	08 95       	ret

000002ba <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     2ba:	f5 df       	rcall	.-22     	; 0x2a6 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2bc:	87 ed       	ldi	r24, 0xD7	; 215
     2be:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2c0:	0d b4       	in	r0, 0x2d	; 45
     2c2:	07 fe       	sbrs	r0, 7
     2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     2c6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     2c8:	0d b4       	in	r0, 0x2d	; 45
     2ca:	07 fe       	sbrs	r0, 7
     2cc:	fd cf       	rjmp	.-6      	; 0x2c8 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     2ce:	0e b4       	in	r0, 0x2e	; 46
     2d0:	07 fe       	sbrs	r0, 7
     2d2:	f9 cf       	rjmp	.-14     	; 0x2c6 <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     2d4:	e8 cf       	rjmp	.-48     	; 0x2a6 <Dataflash_ToggleSelectedChipCS>

000002d6 <Dataflash_SendAddressBytes>:
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				#if (DATAFLASH_TOTALCHIPS == 2)
					PageAddress >>= 1;
     2d6:	9c 01       	movw	r18, r24
     2d8:	36 95       	lsr	r19
     2da:	27 95       	ror	r18
				#endif
				
				Dataflash_SendByte(PageAddress >> 5);
     2dc:	36 e0       	ldi	r19, 0x06	; 6
     2de:	96 95       	lsr	r25
     2e0:	87 95       	ror	r24
     2e2:	3a 95       	dec	r19
     2e4:	e1 f7       	brne	.-8      	; 0x2de <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2e6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2e8:	0d b4       	in	r0, 0x2d	; 45
     2ea:	07 fe       	sbrs	r0, 7
     2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     2ee:	22 0f       	add	r18, r18
     2f0:	22 0f       	add	r18, r18
     2f2:	22 0f       	add	r18, r18
     2f4:	27 2b       	or	r18, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2f6:	2e bd       	out	0x2e, r18	; 46
				while (!(SPSR & (1 << SPIF)));
     2f8:	0d b4       	in	r0, 0x2d	; 45
     2fa:	07 fe       	sbrs	r0, 7
     2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <Dataflash_SendAddressBytes+0x22>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2fe:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     300:	0d b4       	in	r0, 0x2d	; 45
     302:	07 fe       	sbrs	r0, 7
     304:	fd cf       	rjmp	.-6      	; 0x300 <Dataflash_SendAddressBytes+0x2a>
				Dataflash_SendByte(BufferByte);
			}
     306:	08 95       	ret

00000308 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     308:	6f 92       	push	r6
     30a:	7f 92       	push	r7
     30c:	9f 92       	push	r9
     30e:	af 92       	push	r10
     310:	bf 92       	push	r11
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	df 93       	push	r29
     320:	cf 93       	push	r28
     322:	0f 92       	push	r0
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	6c 01       	movw	r12, r24
     32a:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     32c:	db 01       	movw	r26, r22
     32e:	ca 01       	movw	r24, r20
     330:	19 e0       	ldi	r17, 0x09	; 9
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	aa 1f       	adc	r26, r26
     338:	bb 1f       	adc	r27, r27
     33a:	1a 95       	dec	r17
     33c:	d1 f7       	brne	.-12     	; 0x332 <DataflashManager_WriteBlocks+0x2a>
     33e:	fa e0       	ldi	r31, 0x0A	; 10
     340:	b6 95       	lsr	r27
     342:	a7 95       	ror	r26
     344:	97 95       	ror	r25
     346:	87 95       	ror	r24
     348:	fa 95       	dec	r31
     34a:	d1 f7       	brne	.-12     	; 0x340 <DataflashManager_WriteBlocks+0x38>
     34c:	3c 01       	movw	r6, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     34e:	8a 01       	movw	r16, r20
     350:	10 2f       	mov	r17, r16
     352:	00 27       	eor	r16, r16
     354:	11 0f       	add	r17, r17
     356:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     358:	93 df       	rcall	.-218    	; 0x280 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     35a:	83 e5       	ldi	r24, 0x53	; 83
     35c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     35e:	0d b4       	in	r0, 0x2d	; 45
     360:	07 fe       	sbrs	r0, 7
     362:	fd cf       	rjmp	.-6      	; 0x35e <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     364:	c3 01       	movw	r24, r6
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	b5 df       	rcall	.-150    	; 0x2d6 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     36c:	a6 df       	rcall	.-180    	; 0x2ba <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     36e:	84 e8       	ldi	r24, 0x84	; 132
     370:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     372:	0d b4       	in	r0, 0x2d	; 45
     374:	07 fe       	sbrs	r0, 7
     376:	fd cf       	rjmp	.-6      	; 0x372 <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	b8 01       	movw	r22, r16
     37e:	ab df       	rcall	.-170    	; 0x2d6 <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     380:	b6 d6       	rcall	.+3436   	; 0x10ee <Endpoint_WaitUntilReady>
     382:	88 23       	and	r24, r24
     384:	09 f0       	breq	.+2      	; 0x388 <DataflashManager_WriteBlocks+0x80>
     386:	ea c0       	rjmp	.+468    	; 0x55c <DataflashManager_WriteBlocks+0x254>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     388:	74 e0       	ldi	r23, 0x04	; 4
     38a:	16 95       	lsr	r17
     38c:	07 95       	ror	r16
     38e:	7a 95       	dec	r23
     390:	e1 f7       	brne	.-8      	; 0x38a <DataflashManager_WriteBlocks+0x82>
     392:	90 2f       	mov	r25, r16
     394:	87 01       	movw	r16, r14
     396:	65 e0       	ldi	r22, 0x05	; 5
     398:	00 0f       	add	r16, r16
     39a:	11 1f       	adc	r17, r17
     39c:	6a 95       	dec	r22
     39e:	e1 f7       	brne	.-8      	; 0x398 <DataflashManager_WriteBlocks+0x90>
     3a0:	bb 24       	eor	r11, r11
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     3a2:	99 24       	eor	r9, r9
     3a4:	93 94       	inc	r9
     3a6:	bb c0       	rjmp	.+374    	; 0x51e <DataflashManager_WriteBlocks+0x216>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     3a8:	50 e2       	ldi	r21, 0x20	; 32
     3aa:	a5 2e       	mov	r10, r21
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     3ac:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     3b0:	85 fd       	sbrc	r24, 5
     3b2:	0b c0       	rjmp	.+22     	; 0x3ca <DataflashManager_WriteBlocks+0xc2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     3b4:	80 91 e8 00 	lds	r24, 0x00E8
     3b8:	8b 77       	andi	r24, 0x7B	; 123
     3ba:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     3be:	99 83       	std	Y+1, r25	; 0x01
     3c0:	96 d6       	rcall	.+3372   	; 0x10ee <Endpoint_WaitUntilReady>
     3c2:	99 81       	ldd	r25, Y+1	; 0x01
     3c4:	88 23       	and	r24, r24
     3c6:	09 f0       	breq	.+2      	; 0x3ca <DataflashManager_WriteBlocks+0xc2>
     3c8:	c9 c0       	rjmp	.+402    	; 0x55c <DataflashManager_WriteBlocks+0x254>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     3ca:	90 34       	cpi	r25, 0x40	; 64
     3cc:	09 f0       	breq	.+2      	; 0x3d0 <DataflashManager_WriteBlocks+0xc8>
     3ce:	3a c0       	rjmp	.+116    	; 0x444 <DataflashManager_WriteBlocks+0x13c>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     3d0:	74 df       	rcall	.-280    	; 0x2ba <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     3d2:	bb 20       	and	r11, r11
     3d4:	11 f0       	breq	.+4      	; 0x3da <DataflashManager_WriteBlocks+0xd2>
     3d6:	86 e8       	ldi	r24, 0x86	; 134
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <DataflashManager_WriteBlocks+0xd4>
     3da:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3dc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3de:	0d b4       	in	r0, 0x2d	; 45
     3e0:	07 fe       	sbrs	r0, 7
     3e2:	fd cf       	rjmp	.-6      	; 0x3de <DataflashManager_WriteBlocks+0xd6>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     3e4:	c3 01       	movw	r24, r6
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	75 df       	rcall	.-278    	; 0x2d6 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     3ec:	08 94       	sec
     3ee:	61 1c       	adc	r6, r1
     3f0:	71 1c       	adc	r7, r1
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     3f2:	8e b1       	in	r24, 0x0e	; 14
     3f4:	80 95       	com	r24
     3f6:	83 70       	andi	r24, 0x03	; 3

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     3f8:	82 30       	cpi	r24, 0x02	; 2
     3fa:	09 f4       	brne	.+2      	; 0x3fe <DataflashManager_WriteBlocks+0xf6>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     3fc:	b9 24       	eor	r11, r9

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     3fe:	c3 01       	movw	r24, r6
     400:	3f df       	rcall	.-386    	; 0x280 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     402:	00 34       	cpi	r16, 0x40	; 64
     404:	11 05       	cpc	r17, r1
     406:	78 f4       	brcc	.+30     	; 0x426 <DataflashManager_WriteBlocks+0x11e>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     408:	58 df       	rcall	.-336    	; 0x2ba <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     40a:	bb 20       	and	r11, r11
     40c:	11 f0       	breq	.+4      	; 0x412 <DataflashManager_WriteBlocks+0x10a>
     40e:	85 e5       	ldi	r24, 0x55	; 85
     410:	01 c0       	rjmp	.+2      	; 0x414 <DataflashManager_WriteBlocks+0x10c>
     412:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     414:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     416:	0d b4       	in	r0, 0x2d	; 45
     418:	07 fe       	sbrs	r0, 7
     41a:	fd cf       	rjmp	.-6      	; 0x416 <DataflashManager_WriteBlocks+0x10e>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     41c:	c3 01       	movw	r24, r6
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	59 df       	rcall	.-334    	; 0x2d6 <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     424:	4a df       	rcall	.-364    	; 0x2ba <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     426:	bb 20       	and	r11, r11
     428:	11 f0       	breq	.+4      	; 0x42e <DataflashManager_WriteBlocks+0x126>
     42a:	87 e8       	ldi	r24, 0x87	; 135
     42c:	01 c0       	rjmp	.+2      	; 0x430 <DataflashManager_WriteBlocks+0x128>
     42e:	84 e8       	ldi	r24, 0x84	; 132
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     430:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     432:	0d b4       	in	r0, 0x2d	; 45
     434:	07 fe       	sbrs	r0, 7
     436:	fd cf       	rjmp	.-6      	; 0x432 <DataflashManager_WriteBlocks+0x12a>
				Dataflash_SendAddressBytes(0, 0);
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	4a df       	rcall	.-364    	; 0x2d6 <Dataflash_SendAddressBytes>
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     442:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     444:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     448:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     44a:	0d b4       	in	r0, 0x2d	; 45
     44c:	07 fe       	sbrs	r0, 7
     44e:	fd cf       	rjmp	.-6      	; 0x44a <DataflashManager_WriteBlocks+0x142>
     450:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     454:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     456:	0d b4       	in	r0, 0x2d	; 45
     458:	07 fe       	sbrs	r0, 7
     45a:	fd cf       	rjmp	.-6      	; 0x456 <DataflashManager_WriteBlocks+0x14e>
     45c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     460:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     462:	0d b4       	in	r0, 0x2d	; 45
     464:	07 fe       	sbrs	r0, 7
     466:	fd cf       	rjmp	.-6      	; 0x462 <DataflashManager_WriteBlocks+0x15a>
     468:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     46c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     46e:	0d b4       	in	r0, 0x2d	; 45
     470:	07 fe       	sbrs	r0, 7
     472:	fd cf       	rjmp	.-6      	; 0x46e <DataflashManager_WriteBlocks+0x166>
     474:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     478:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     47a:	0d b4       	in	r0, 0x2d	; 45
     47c:	07 fe       	sbrs	r0, 7
     47e:	fd cf       	rjmp	.-6      	; 0x47a <DataflashManager_WriteBlocks+0x172>
     480:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     484:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     486:	0d b4       	in	r0, 0x2d	; 45
     488:	07 fe       	sbrs	r0, 7
     48a:	fd cf       	rjmp	.-6      	; 0x486 <DataflashManager_WriteBlocks+0x17e>
     48c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     490:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     492:	0d b4       	in	r0, 0x2d	; 45
     494:	07 fe       	sbrs	r0, 7
     496:	fd cf       	rjmp	.-6      	; 0x492 <DataflashManager_WriteBlocks+0x18a>
     498:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     49c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     49e:	0d b4       	in	r0, 0x2d	; 45
     4a0:	07 fe       	sbrs	r0, 7
     4a2:	fd cf       	rjmp	.-6      	; 0x49e <DataflashManager_WriteBlocks+0x196>
     4a4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4a8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4aa:	0d b4       	in	r0, 0x2d	; 45
     4ac:	07 fe       	sbrs	r0, 7
     4ae:	fd cf       	rjmp	.-6      	; 0x4aa <DataflashManager_WriteBlocks+0x1a2>
     4b0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4b4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4b6:	0d b4       	in	r0, 0x2d	; 45
     4b8:	07 fe       	sbrs	r0, 7
     4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <DataflashManager_WriteBlocks+0x1ae>
     4bc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4c0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4c2:	0d b4       	in	r0, 0x2d	; 45
     4c4:	07 fe       	sbrs	r0, 7
     4c6:	fd cf       	rjmp	.-6      	; 0x4c2 <DataflashManager_WriteBlocks+0x1ba>
     4c8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4cc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4ce:	0d b4       	in	r0, 0x2d	; 45
     4d0:	07 fe       	sbrs	r0, 7
     4d2:	fd cf       	rjmp	.-6      	; 0x4ce <DataflashManager_WriteBlocks+0x1c6>
     4d4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4d8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4da:	0d b4       	in	r0, 0x2d	; 45
     4dc:	07 fe       	sbrs	r0, 7
     4de:	fd cf       	rjmp	.-6      	; 0x4da <DataflashManager_WriteBlocks+0x1d2>
     4e0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4e4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4e6:	0d b4       	in	r0, 0x2d	; 45
     4e8:	07 fe       	sbrs	r0, 7
     4ea:	fd cf       	rjmp	.-6      	; 0x4e6 <DataflashManager_WriteBlocks+0x1de>
     4ec:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4f2:	0d b4       	in	r0, 0x2d	; 45
     4f4:	07 fe       	sbrs	r0, 7
     4f6:	fd cf       	rjmp	.-6      	; 0x4f2 <DataflashManager_WriteBlocks+0x1ea>
     4f8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4fc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4fe:	0d b4       	in	r0, 0x2d	; 45
     500:	07 fe       	sbrs	r0, 7
     502:	fd cf       	rjmp	.-6      	; 0x4fe <DataflashManager_WriteBlocks+0x1f6>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     504:	f6 01       	movw	r30, r12
     506:	80 ad       	ldd	r24, Z+56	; 0x38
     508:	88 23       	and	r24, r24
     50a:	41 f5       	brne	.+80     	; 0x55c <DataflashManager_WriteBlocks+0x254>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     50c:	9f 5f       	subi	r25, 0xFF	; 255
     50e:	aa 94       	dec	r10
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     510:	09 f0       	breq	.+2      	; 0x514 <DataflashManager_WriteBlocks+0x20c>
     512:	4c cf       	rjmp	.-360    	; 0x3ac <DataflashManager_WriteBlocks+0xa4>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     514:	08 94       	sec
     516:	e1 08       	sbc	r14, r1
     518:	f1 08       	sbc	r15, r1
     51a:	00 52       	subi	r16, 0x20	; 32
     51c:	10 40       	sbci	r17, 0x00	; 0

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     51e:	e1 14       	cp	r14, r1
     520:	f1 04       	cpc	r15, r1
     522:	09 f0       	breq	.+2      	; 0x526 <DataflashManager_WriteBlocks+0x21e>
     524:	41 cf       	rjmp	.-382    	; 0x3a8 <DataflashManager_WriteBlocks+0xa0>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     526:	c9 de       	rcall	.-622    	; 0x2ba <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     528:	bb 20       	and	r11, r11
     52a:	11 f0       	breq	.+4      	; 0x530 <DataflashManager_WriteBlocks+0x228>
     52c:	86 e8       	ldi	r24, 0x86	; 134
     52e:	01 c0       	rjmp	.+2      	; 0x532 <DataflashManager_WriteBlocks+0x22a>
     530:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     532:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     534:	0d b4       	in	r0, 0x2d	; 45
     536:	07 fe       	sbrs	r0, 7
     538:	fd cf       	rjmp	.-6      	; 0x534 <DataflashManager_WriteBlocks+0x22c>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     53a:	c3 01       	movw	r24, r6
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	ca de       	rcall	.-620    	; 0x2d6 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     542:	bb de       	rcall	.-650    	; 0x2ba <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     544:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     548:	85 fd       	sbrc	r24, 5
     54a:	05 c0       	rjmp	.+10     	; 0x556 <DataflashManager_WriteBlocks+0x24e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     54c:	80 91 e8 00 	lds	r24, 0x00E8
     550:	8b 77       	andi	r24, 0x7B	; 123
     552:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     556:	8e b1       	in	r24, 0x0e	; 14
     558:	83 60       	ori	r24, 0x03	; 3
     55a:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     55c:	0f 90       	pop	r0
     55e:	cf 91       	pop	r28
     560:	df 91       	pop	r29
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	bf 90       	pop	r11
     570:	af 90       	pop	r10
     572:	9f 90       	pop	r9
     574:	7f 90       	pop	r7
     576:	6f 90       	pop	r6
     578:	08 95       	ret

0000057a <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     57a:	bf 92       	push	r11
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	6c 01       	movw	r12, r24
     58e:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     590:	db 01       	movw	r26, r22
     592:	ca 01       	movw	r24, r20
     594:	69 e0       	ldi	r22, 0x09	; 9
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	aa 1f       	adc	r26, r26
     59c:	bb 1f       	adc	r27, r27
     59e:	6a 95       	dec	r22
     5a0:	d1 f7       	brne	.-12     	; 0x596 <DataflashManager_ReadBlocks+0x1c>
     5a2:	3a e0       	ldi	r19, 0x0A	; 10
     5a4:	b6 95       	lsr	r27
     5a6:	a7 95       	ror	r26
     5a8:	97 95       	ror	r25
     5aa:	87 95       	ror	r24
     5ac:	3a 95       	dec	r19
     5ae:	d1 f7       	brne	.-12     	; 0x5a4 <DataflashManager_ReadBlocks+0x2a>
     5b0:	ec 01       	movw	r28, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     5b2:	8a 01       	movw	r16, r20
     5b4:	10 2f       	mov	r17, r16
     5b6:	00 27       	eor	r16, r16
     5b8:	11 0f       	add	r17, r17
     5ba:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     5bc:	61 de       	rcall	.-830    	; 0x280 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5be:	82 ed       	ldi	r24, 0xD2	; 210
     5c0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5c2:	0d b4       	in	r0, 0x2d	; 45
     5c4:	07 fe       	sbrs	r0, 7
     5c6:	fd cf       	rjmp	.-6      	; 0x5c2 <DataflashManager_ReadBlocks+0x48>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     5c8:	ce 01       	movw	r24, r28
     5ca:	b8 01       	movw	r22, r16
     5cc:	84 de       	rcall	.-760    	; 0x2d6 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ce:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5d0:	0d b4       	in	r0, 0x2d	; 45
     5d2:	07 fe       	sbrs	r0, 7
     5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <DataflashManager_ReadBlocks+0x56>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5d6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5d8:	0d b4       	in	r0, 0x2d	; 45
     5da:	07 fe       	sbrs	r0, 7
     5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <DataflashManager_ReadBlocks+0x5e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5de:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5e0:	0d b4       	in	r0, 0x2d	; 45
     5e2:	07 fe       	sbrs	r0, 7
     5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <DataflashManager_ReadBlocks+0x66>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5e6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5e8:	0d b4       	in	r0, 0x2d	; 45
     5ea:	07 fe       	sbrs	r0, 7
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <DataflashManager_ReadBlocks+0x6e>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     5ee:	7f d5       	rcall	.+2814   	; 0x10ee <Endpoint_WaitUntilReady>
     5f0:	88 23       	and	r24, r24
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <DataflashManager_ReadBlocks+0x7c>
     5f4:	bf c0       	rjmp	.+382    	; 0x774 <DataflashManager_ReadBlocks+0x1fa>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     5f6:	94 e0       	ldi	r25, 0x04	; 4
     5f8:	16 95       	lsr	r17
     5fa:	07 95       	ror	r16
     5fc:	9a 95       	dec	r25
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <DataflashManager_ReadBlocks+0x7e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     600:	82 ed       	ldi	r24, 0xD2	; 210
     602:	b8 2e       	mov	r11, r24
     604:	a7 c0       	rjmp	.+334    	; 0x754 <DataflashManager_ReadBlocks+0x1da>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     606:	10 e2       	ldi	r17, 0x20	; 32
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     608:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     60c:	85 fd       	sbrc	r24, 5
     60e:	09 c0       	rjmp	.+18     	; 0x622 <DataflashManager_ReadBlocks+0xa8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     610:	80 91 e8 00 	lds	r24, 0x00E8
     614:	8e 77       	andi	r24, 0x7E	; 126
     616:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     61a:	69 d5       	rcall	.+2770   	; 0x10ee <Endpoint_WaitUntilReady>
     61c:	88 23       	and	r24, r24
     61e:	09 f0       	breq	.+2      	; 0x622 <DataflashManager_ReadBlocks+0xa8>
     620:	a9 c0       	rjmp	.+338    	; 0x774 <DataflashManager_ReadBlocks+0x1fa>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     622:	00 34       	cpi	r16, 0x40	; 64
     624:	e1 f4       	brne	.+56     	; 0x65e <DataflashManager_ReadBlocks+0xe4>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     626:	21 96       	adiw	r28, 0x01	; 1

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     628:	ce 01       	movw	r24, r28
     62a:	2a de       	rcall	.-940    	; 0x280 <Dataflash_SelectChipFromPage>
     62c:	be bc       	out	0x2e, r11	; 46
				while (!(SPSR & (1 << SPIF)));
     62e:	0d b4       	in	r0, 0x2d	; 45
     630:	07 fe       	sbrs	r0, 7
     632:	fd cf       	rjmp	.-6      	; 0x62e <DataflashManager_ReadBlocks+0xb4>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     634:	ce 01       	movw	r24, r28
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	4d de       	rcall	.-870    	; 0x2d6 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     63c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     63e:	0d b4       	in	r0, 0x2d	; 45
     640:	07 fe       	sbrs	r0, 7
     642:	fd cf       	rjmp	.-6      	; 0x63e <DataflashManager_ReadBlocks+0xc4>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     644:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     646:	0d b4       	in	r0, 0x2d	; 45
     648:	07 fe       	sbrs	r0, 7
     64a:	fd cf       	rjmp	.-6      	; 0x646 <DataflashManager_ReadBlocks+0xcc>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     64c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     64e:	0d b4       	in	r0, 0x2d	; 45
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <DataflashManager_ReadBlocks+0xd4>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     654:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     656:	0d b4       	in	r0, 0x2d	; 45
     658:	07 fe       	sbrs	r0, 7
     65a:	fd cf       	rjmp	.-6      	; 0x656 <DataflashManager_ReadBlocks+0xdc>

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     65c:	00 e0       	ldi	r16, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     65e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     660:	0d b4       	in	r0, 0x2d	; 45
     662:	07 fe       	sbrs	r0, 7
     664:	fd cf       	rjmp	.-6      	; 0x660 <DataflashManager_ReadBlocks+0xe6>
				return SPDR;
     666:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     668:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     66c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     66e:	0d b4       	in	r0, 0x2d	; 45
     670:	07 fe       	sbrs	r0, 7
     672:	fd cf       	rjmp	.-6      	; 0x66e <DataflashManager_ReadBlocks+0xf4>
				return SPDR;
     674:	8e b5       	in	r24, 0x2e	; 46
     676:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     67a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     67c:	0d b4       	in	r0, 0x2d	; 45
     67e:	07 fe       	sbrs	r0, 7
     680:	fd cf       	rjmp	.-6      	; 0x67c <DataflashManager_ReadBlocks+0x102>
				return SPDR;
     682:	8e b5       	in	r24, 0x2e	; 46
     684:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     688:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     68a:	0d b4       	in	r0, 0x2d	; 45
     68c:	07 fe       	sbrs	r0, 7
     68e:	fd cf       	rjmp	.-6      	; 0x68a <DataflashManager_ReadBlocks+0x110>
				return SPDR;
     690:	8e b5       	in	r24, 0x2e	; 46
     692:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     696:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     698:	0d b4       	in	r0, 0x2d	; 45
     69a:	07 fe       	sbrs	r0, 7
     69c:	fd cf       	rjmp	.-6      	; 0x698 <DataflashManager_ReadBlocks+0x11e>
				return SPDR;
     69e:	8e b5       	in	r24, 0x2e	; 46
     6a0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6a4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6a6:	0d b4       	in	r0, 0x2d	; 45
     6a8:	07 fe       	sbrs	r0, 7
     6aa:	fd cf       	rjmp	.-6      	; 0x6a6 <DataflashManager_ReadBlocks+0x12c>
				return SPDR;
     6ac:	8e b5       	in	r24, 0x2e	; 46
     6ae:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6b2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6b4:	0d b4       	in	r0, 0x2d	; 45
     6b6:	07 fe       	sbrs	r0, 7
     6b8:	fd cf       	rjmp	.-6      	; 0x6b4 <DataflashManager_ReadBlocks+0x13a>
				return SPDR;
     6ba:	8e b5       	in	r24, 0x2e	; 46
     6bc:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6c0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6c2:	0d b4       	in	r0, 0x2d	; 45
     6c4:	07 fe       	sbrs	r0, 7
     6c6:	fd cf       	rjmp	.-6      	; 0x6c2 <DataflashManager_ReadBlocks+0x148>
				return SPDR;
     6c8:	8e b5       	in	r24, 0x2e	; 46
     6ca:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6ce:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6d0:	0d b4       	in	r0, 0x2d	; 45
     6d2:	07 fe       	sbrs	r0, 7
     6d4:	fd cf       	rjmp	.-6      	; 0x6d0 <DataflashManager_ReadBlocks+0x156>
				return SPDR;
     6d6:	8e b5       	in	r24, 0x2e	; 46
     6d8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6dc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6de:	0d b4       	in	r0, 0x2d	; 45
     6e0:	07 fe       	sbrs	r0, 7
     6e2:	fd cf       	rjmp	.-6      	; 0x6de <DataflashManager_ReadBlocks+0x164>
				return SPDR;
     6e4:	8e b5       	in	r24, 0x2e	; 46
     6e6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6ea:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6ec:	0d b4       	in	r0, 0x2d	; 45
     6ee:	07 fe       	sbrs	r0, 7
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <DataflashManager_ReadBlocks+0x172>
				return SPDR;
     6f2:	8e b5       	in	r24, 0x2e	; 46
     6f4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6f8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6fa:	0d b4       	in	r0, 0x2d	; 45
     6fc:	07 fe       	sbrs	r0, 7
     6fe:	fd cf       	rjmp	.-6      	; 0x6fa <DataflashManager_ReadBlocks+0x180>
				return SPDR;
     700:	8e b5       	in	r24, 0x2e	; 46
     702:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     706:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     708:	0d b4       	in	r0, 0x2d	; 45
     70a:	07 fe       	sbrs	r0, 7
     70c:	fd cf       	rjmp	.-6      	; 0x708 <DataflashManager_ReadBlocks+0x18e>
				return SPDR;
     70e:	8e b5       	in	r24, 0x2e	; 46
     710:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     714:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     716:	0d b4       	in	r0, 0x2d	; 45
     718:	07 fe       	sbrs	r0, 7
     71a:	fd cf       	rjmp	.-6      	; 0x716 <DataflashManager_ReadBlocks+0x19c>
				return SPDR;
     71c:	8e b5       	in	r24, 0x2e	; 46
     71e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     722:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     724:	0d b4       	in	r0, 0x2d	; 45
     726:	07 fe       	sbrs	r0, 7
     728:	fd cf       	rjmp	.-6      	; 0x724 <DataflashManager_ReadBlocks+0x1aa>
				return SPDR;
     72a:	8e b5       	in	r24, 0x2e	; 46
     72c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     730:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     732:	0d b4       	in	r0, 0x2d	; 45
     734:	07 fe       	sbrs	r0, 7
     736:	fd cf       	rjmp	.-6      	; 0x732 <DataflashManager_ReadBlocks+0x1b8>
				return SPDR;
     738:	8e b5       	in	r24, 0x2e	; 46
     73a:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     73e:	f6 01       	movw	r30, r12
     740:	80 ad       	ldd	r24, Z+56	; 0x38
     742:	88 23       	and	r24, r24
     744:	b9 f4       	brne	.+46     	; 0x774 <DataflashManager_ReadBlocks+0x1fa>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     746:	0f 5f       	subi	r16, 0xFF	; 255
     748:	11 50       	subi	r17, 0x01	; 1
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     74a:	09 f0       	breq	.+2      	; 0x74e <DataflashManager_ReadBlocks+0x1d4>
     74c:	5d cf       	rjmp	.-326    	; 0x608 <DataflashManager_ReadBlocks+0x8e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     74e:	08 94       	sec
     750:	e1 08       	sbc	r14, r1
     752:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     754:	e1 14       	cp	r14, r1
     756:	f1 04       	cpc	r15, r1
     758:	09 f0       	breq	.+2      	; 0x75c <DataflashManager_ReadBlocks+0x1e2>
     75a:	55 cf       	rjmp	.-342    	; 0x606 <DataflashManager_ReadBlocks+0x8c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     75c:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     760:	85 fd       	sbrc	r24, 5
     762:	05 c0       	rjmp	.+10     	; 0x76e <DataflashManager_ReadBlocks+0x1f4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     764:	80 91 e8 00 	lds	r24, 0x00E8
     768:	8e 77       	andi	r24, 0x7E	; 126
     76a:	80 93 e8 00 	sts	0x00E8, r24
     76e:	8e b1       	in	r24, 0x0e	; 14
     770:	83 60       	ori	r24, 0x03	; 3
     772:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	df 90       	pop	r13
     782:	cf 90       	pop	r12
     784:	bf 90       	pop	r11
     786:	08 95       	ret

00000788 <DataflashManager_ResetDataflashProtections>:
     788:	8e b1       	in	r24, 0x0e	; 14
     78a:	83 60       	ori	r24, 0x03	; 3
     78c:	8e 7f       	andi	r24, 0xFE	; 254
     78e:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     790:	87 ed       	ldi	r24, 0xD7	; 215
     792:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     794:	0d b4       	in	r0, 0x2d	; 45
     796:	07 fe       	sbrs	r0, 7
     798:	fd cf       	rjmp	.-6      	; 0x794 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     79a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     79c:	0d b4       	in	r0, 0x2d	; 45
     79e:	07 fe       	sbrs	r0, 7
     7a0:	fd cf       	rjmp	.-6      	; 0x79c <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     7a2:	0e b4       	in	r0, 0x2e	; 46
     7a4:	01 fe       	sbrs	r0, 1
     7a6:	15 c0       	rjmp	.+42     	; 0x7d2 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     7a8:	7e dd       	rcall	.-1284   	; 0x2a6 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7aa:	8d e3       	ldi	r24, 0x3D	; 61
     7ac:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7ae:	0d b4       	in	r0, 0x2d	; 45
     7b0:	07 fe       	sbrs	r0, 7
     7b2:	fd cf       	rjmp	.-6      	; 0x7ae <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7b4:	8a e2       	ldi	r24, 0x2A	; 42
     7b6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7b8:	0d b4       	in	r0, 0x2d	; 45
     7ba:	07 fe       	sbrs	r0, 7
     7bc:	fd cf       	rjmp	.-6      	; 0x7b8 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7be:	8f e7       	ldi	r24, 0x7F	; 127
     7c0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7c2:	0d b4       	in	r0, 0x2d	; 45
     7c4:	07 fe       	sbrs	r0, 7
     7c6:	fd cf       	rjmp	.-6      	; 0x7c2 <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7c8:	8a e9       	ldi	r24, 0x9A	; 154
     7ca:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7cc:	0d b4       	in	r0, 0x2d	; 45
     7ce:	07 fe       	sbrs	r0, 7
     7d0:	fd cf       	rjmp	.-6      	; 0x7cc <DataflashManager_ResetDataflashProtections+0x44>
     7d2:	8e b1       	in	r24, 0x0e	; 14
     7d4:	83 60       	ori	r24, 0x03	; 3
     7d6:	8d 7f       	andi	r24, 0xFD	; 253
     7d8:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7da:	87 ed       	ldi	r24, 0xD7	; 215
     7dc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7de:	0d b4       	in	r0, 0x2d	; 45
     7e0:	07 fe       	sbrs	r0, 7
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7e4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7e6:	0d b4       	in	r0, 0x2d	; 45
     7e8:	07 fe       	sbrs	r0, 7
     7ea:	fd cf       	rjmp	.-6      	; 0x7e6 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     7ec:	0e b4       	in	r0, 0x2e	; 46
     7ee:	01 fe       	sbrs	r0, 1
     7f0:	15 c0       	rjmp	.+42     	; 0x81c <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     7f2:	59 dd       	rcall	.-1358   	; 0x2a6 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f4:	8d e3       	ldi	r24, 0x3D	; 61
     7f6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7f8:	0d b4       	in	r0, 0x2d	; 45
     7fa:	07 fe       	sbrs	r0, 7
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7fe:	8a e2       	ldi	r24, 0x2A	; 42
     800:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     802:	0d b4       	in	r0, 0x2d	; 45
     804:	07 fe       	sbrs	r0, 7
     806:	fd cf       	rjmp	.-6      	; 0x802 <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     808:	8f e7       	ldi	r24, 0x7F	; 127
     80a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     80c:	0d b4       	in	r0, 0x2d	; 45
     80e:	07 fe       	sbrs	r0, 7
     810:	fd cf       	rjmp	.-6      	; 0x80c <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     812:	8a e9       	ldi	r24, 0x9A	; 154
     814:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     816:	0d b4       	in	r0, 0x2d	; 45
     818:	07 fe       	sbrs	r0, 7
     81a:	fd cf       	rjmp	.-6      	; 0x816 <DataflashManager_ResetDataflashProtections+0x8e>
     81c:	8e b1       	in	r24, 0x0e	; 14
     81e:	83 60       	ori	r24, 0x03	; 3
     820:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     822:	08 95       	ret

00000824 <DataflashManager_CheckDataflashOperation>:
     824:	8e b1       	in	r24, 0x0e	; 14
     826:	83 60       	ori	r24, 0x03	; 3
     828:	8e 7f       	andi	r24, 0xFE	; 254
     82a:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     82c:	8f e9       	ldi	r24, 0x9F	; 159
     82e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     830:	0d b4       	in	r0, 0x2d	; 45
     832:	07 fe       	sbrs	r0, 7
     834:	fd cf       	rjmp	.-6      	; 0x830 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     836:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     838:	0d b4       	in	r0, 0x2d	; 45
     83a:	07 fe       	sbrs	r0, 7
     83c:	fd cf       	rjmp	.-6      	; 0x838 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     83e:	9e b5       	in	r25, 0x2e	; 46
     840:	8e b1       	in	r24, 0x0e	; 14
     842:	83 60       	ori	r24, 0x03	; 3
     844:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     846:	9f 31       	cpi	r25, 0x1F	; 31
     848:	b1 f4       	brne	.+44     	; 0x876 <DataflashManager_CheckDataflashOperation+0x52>
     84a:	8e b1       	in	r24, 0x0e	; 14
     84c:	83 60       	ori	r24, 0x03	; 3
     84e:	8d 7f       	andi	r24, 0xFD	; 253
     850:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     852:	8f e9       	ldi	r24, 0x9F	; 159
     854:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     856:	0d b4       	in	r0, 0x2d	; 45
     858:	07 fe       	sbrs	r0, 7
     85a:	fd cf       	rjmp	.-6      	; 0x856 <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     85c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     85e:	0d b4       	in	r0, 0x2d	; 45
     860:	07 fe       	sbrs	r0, 7
     862:	fd cf       	rjmp	.-6      	; 0x85e <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     864:	9e b5       	in	r25, 0x2e	; 46
     866:	8e b1       	in	r24, 0x0e	; 14
     868:	83 60       	ori	r24, 0x03	; 3
     86a:	8e b9       	out	0x0e, r24	; 14

/** Performs a simple test on the attached Dataflash IC(s) to ensure that they are working.
 *
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool DataflashManager_CheckDataflashOperation(void)
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	9f 31       	cpi	r25, 0x1F	; 31
     870:	19 f0       	breq	.+6      	; 0x878 <DataflashManager_CheckDataflashOperation+0x54>
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	08 95       	ret
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     876:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     878:	08 95       	ret

0000087a <SwapEndian_16>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint16_t SwapEndian_16(const uint16_t Word) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint16_t SwapEndian_16(const uint16_t Word)
			{
     87a:	28 2f       	mov	r18, r24
				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
			}
     87c:	89 2f       	mov	r24, r25
     87e:	92 2f       	mov	r25, r18
     880:	08 95       	ret

00000882 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     882:	af 92       	push	r10
     884:	bf 92       	push	r11
     886:	cf 92       	push	r12
     888:	df 92       	push	r13
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	df 93       	push	r29
     894:	cf 93       	push	r28
     896:	0f 92       	push	r0
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	5c 01       	movw	r10, r24

		return false;
	}

	/* Load in the 32-bit block address (SCSI uses big-endian, so have to reverse the byte order) */
	BlockAddress = SwapEndian_32(*(uint32_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[2]);
     89e:	fc 01       	movw	r30, r24
     8a0:	7b 96       	adiw	r30, 0x1b	; 27

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     8a2:	e5 80       	ldd	r14, Z+5	; 0x05
     8a4:	f4 80       	ldd	r15, Z+4	; 0x04
     8a6:	03 81       	ldd	r16, Z+3	; 0x03
     8a8:	12 81       	ldd	r17, Z+2	; 0x02

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);
     8aa:	87 81       	ldd	r24, Z+7	; 0x07
     8ac:	90 85       	ldd	r25, Z+8	; 0x08
     8ae:	69 83       	std	Y+1, r22	; 0x01
     8b0:	e4 df       	rcall	.-56     	; 0x87a <SwapEndian_16>
     8b2:	6c 01       	movw	r12, r24

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     8b4:	69 81       	ldd	r22, Y+1	; 0x01
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	e8 16       	cp	r14, r24
     8ba:	80 e8       	ldi	r24, 0x80	; 128
     8bc:	f8 06       	cpc	r15, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	08 07       	cpc	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	18 07       	cpc	r17, r24
     8c6:	68 f0       	brcs	.+26     	; 0x8e2 <SCSI_Command_ReadWrite_10+0x60>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     8c8:	80 91 3b 01 	lds	r24, 0x013B
     8cc:	80 7f       	andi	r24, 0xF0	; 240
     8ce:	85 60       	ori	r24, 0x05	; 5
     8d0:	80 93 3b 01 	sts	0x013B, r24
     8d4:	81 e2       	ldi	r24, 0x21	; 33
     8d6:	80 93 45 01 	sts	0x0145, r24
     8da:	10 92 46 01 	sts	0x0146, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	24 c0       	rjmp	.+72     	; 0x92a <SCSI_Command_ReadWrite_10+0xa8>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     8e2:	66 23       	and	r22, r22
     8e4:	31 f0       	breq	.+12     	; 0x8f2 <SCSI_Command_ReadWrite_10+0x70>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8e6:	c5 01       	movw	r24, r10
     8e8:	b8 01       	movw	r22, r16
     8ea:	a7 01       	movw	r20, r14
     8ec:	96 01       	movw	r18, r12
     8ee:	45 de       	rcall	.-886    	; 0x57a <DataflashManager_ReadBlocks>
     8f0:	05 c0       	rjmp	.+10     	; 0x8fc <SCSI_Command_ReadWrite_10+0x7a>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8f2:	c5 01       	movw	r24, r10
     8f4:	b8 01       	movw	r22, r16
     8f6:	a7 01       	movw	r20, r14
     8f8:	96 01       	movw	r18, r12
     8fa:	06 dd       	rcall	.-1524   	; 0x308 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     8fc:	ee 24       	eor	r14, r14
     8fe:	ff 24       	eor	r15, r15
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	cc 0c       	add	r12, r12
     904:	dd 1c       	adc	r13, r13
     906:	ee 1c       	adc	r14, r14
     908:	ff 1c       	adc	r15, r15
     90a:	8a 95       	dec	r24
     90c:	d1 f7       	brne	.-12     	; 0x902 <SCSI_Command_ReadWrite_10+0x80>
     90e:	f5 01       	movw	r30, r10
     910:	84 89       	ldd	r24, Z+20	; 0x14
     912:	95 89       	ldd	r25, Z+21	; 0x15
     914:	a6 89       	ldd	r26, Z+22	; 0x16
     916:	b7 89       	ldd	r27, Z+23	; 0x17
     918:	8c 19       	sub	r24, r12
     91a:	9d 09       	sbc	r25, r13
     91c:	ae 09       	sbc	r26, r14
     91e:	bf 09       	sbc	r27, r15
     920:	84 8b       	std	Z+20, r24	; 0x14
     922:	95 8b       	std	Z+21, r25	; 0x15
     924:	a6 8b       	std	Z+22, r26	; 0x16
     926:	b7 8b       	std	Z+23, r27	; 0x17

	return true;
     928:	81 e0       	ldi	r24, 0x01	; 1
}
     92a:	0f 90       	pop	r0
     92c:	cf 91       	pop	r28
     92e:	df 91       	pop	r29
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	08 95       	ret

00000942 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     942:	cf 92       	push	r12
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	df 93       	push	r29
     950:	cf 93       	push	r28
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	28 97       	sbiw	r28, 0x08	; 8
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     964:	fc 01       	movw	r30, r24
     966:	83 8d       	ldd	r24, Z+27	; 0x1b
     968:	8d 31       	cpi	r24, 0x1D	; 29
     96a:	09 f4       	brne	.+2      	; 0x96e <SCSI_DecodeSCSICommand+0x2c>
     96c:	ac c0       	rjmp	.+344    	; 0xac6 <SCSI_DecodeSCSICommand+0x184>
     96e:	8e 31       	cpi	r24, 0x1E	; 30
     970:	78 f4       	brcc	.+30     	; 0x990 <SCSI_DecodeSCSICommand+0x4e>
     972:	83 30       	cpi	r24, 0x03	; 3
     974:	09 f4       	brne	.+2      	; 0x978 <SCSI_DecodeSCSICommand+0x36>
     976:	56 c0       	rjmp	.+172    	; 0xa24 <SCSI_DecodeSCSICommand+0xe2>
     978:	84 30       	cpi	r24, 0x04	; 4
     97a:	20 f4       	brcc	.+8      	; 0x984 <SCSI_DecodeSCSICommand+0x42>
     97c:	88 23       	and	r24, r24
     97e:	09 f4       	brne	.+2      	; 0x982 <SCSI_DecodeSCSICommand+0x40>
     980:	df c0       	rjmp	.+446    	; 0xb40 <SCSI_DecodeSCSICommand+0x1fe>
     982:	e4 c0       	rjmp	.+456    	; 0xb4c <SCSI_DecodeSCSICommand+0x20a>
     984:	82 31       	cpi	r24, 0x12	; 18
     986:	b9 f0       	breq	.+46     	; 0x9b6 <SCSI_DecodeSCSICommand+0x74>
     988:	8a 31       	cpi	r24, 0x1A	; 26
     98a:	09 f0       	breq	.+2      	; 0x98e <SCSI_DecodeSCSICommand+0x4c>
     98c:	df c0       	rjmp	.+446    	; 0xb4c <SCSI_DecodeSCSICommand+0x20a>
     98e:	be c0       	rjmp	.+380    	; 0xb0c <SCSI_DecodeSCSICommand+0x1ca>
     990:	88 32       	cpi	r24, 0x28	; 40
     992:	09 f4       	brne	.+2      	; 0x996 <SCSI_DecodeSCSICommand+0x54>
     994:	b5 c0       	rjmp	.+362    	; 0xb00 <SCSI_DecodeSCSICommand+0x1be>
     996:	89 32       	cpi	r24, 0x29	; 41
     998:	38 f4       	brcc	.+14     	; 0x9a8 <SCSI_DecodeSCSICommand+0x66>
     99a:	8e 31       	cpi	r24, 0x1E	; 30
     99c:	09 f4       	brne	.+2      	; 0x9a0 <SCSI_DecodeSCSICommand+0x5e>
     99e:	d0 c0       	rjmp	.+416    	; 0xb40 <SCSI_DecodeSCSICommand+0x1fe>
     9a0:	85 32       	cpi	r24, 0x25	; 37
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <SCSI_DecodeSCSICommand+0x64>
     9a4:	d3 c0       	rjmp	.+422    	; 0xb4c <SCSI_DecodeSCSICommand+0x20a>
     9a6:	63 c0       	rjmp	.+198    	; 0xa6e <SCSI_DecodeSCSICommand+0x12c>
     9a8:	8a 32       	cpi	r24, 0x2A	; 42
     9aa:	09 f4       	brne	.+2      	; 0x9ae <SCSI_DecodeSCSICommand+0x6c>
     9ac:	a6 c0       	rjmp	.+332    	; 0xafa <SCSI_DecodeSCSICommand+0x1b8>
     9ae:	8f 32       	cpi	r24, 0x2F	; 47
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <SCSI_DecodeSCSICommand+0x72>
     9b2:	cc c0       	rjmp	.+408    	; 0xb4c <SCSI_DecodeSCSICommand+0x20a>
     9b4:	c5 c0       	rjmp	.+394    	; 0xb40 <SCSI_DecodeSCSICommand+0x1fe>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
     9b6:	f8 01       	movw	r30, r16
     9b8:	86 8d       	ldd	r24, Z+30	; 0x1e
     9ba:	97 8d       	ldd	r25, Z+31	; 0x1f
     9bc:	5e df       	rcall	.-324    	; 0x87a <SwapEndian_16>
     9be:	6c 01       	movw	r12, r24
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     9c0:	f8 01       	movw	r30, r16
     9c2:	84 8d       	ldd	r24, Z+28	; 0x1c
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	83 70       	andi	r24, 0x03	; 3
     9c8:	90 70       	andi	r25, 0x00	; 0
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <SCSI_DecodeSCSICommand+0x8e>
     9ce:	7f c0       	rjmp	.+254    	; 0xace <SCSI_DecodeSCSICommand+0x18c>
     9d0:	85 8d       	ldd	r24, Z+29	; 0x1d
     9d2:	88 23       	and	r24, r24
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <SCSI_DecodeSCSICommand+0x96>
     9d6:	7b c0       	rjmp	.+246    	; 0xace <SCSI_DecodeSCSICommand+0x18c>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     9d8:	76 01       	movw	r14, r12
     9da:	f5 e2       	ldi	r31, 0x25	; 37
     9dc:	cf 16       	cp	r12, r31
     9de:	d1 04       	cpc	r13, r1
     9e0:	18 f0       	brcs	.+6      	; 0x9e8 <SCSI_DecodeSCSICommand+0xa6>
     9e2:	24 e2       	ldi	r18, 0x24	; 36
     9e4:	e2 2e       	mov	r14, r18
     9e6:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     9e8:	8b e4       	ldi	r24, 0x4B	; 75
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	16 d1       	rcall	.+556    	; 0xc20 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     9f4:	c6 01       	movw	r24, r12
     9f6:	8e 19       	sub	r24, r14
     9f8:	9f 09       	sbc	r25, r15
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	cb d0       	rcall	.+406    	; 0xb96 <Endpoint_Null_Stream>
     a00:	80 91 e8 00 	lds	r24, 0x00E8
     a04:	8e 77       	andi	r24, 0x7E	; 126
     a06:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     a0a:	97 01       	movw	r18, r14
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	f8 01       	movw	r30, r16
     a12:	84 89       	ldd	r24, Z+20	; 0x14
     a14:	95 89       	ldd	r25, Z+21	; 0x15
     a16:	a6 89       	ldd	r26, Z+22	; 0x16
     a18:	b7 89       	ldd	r27, Z+23	; 0x17
     a1a:	82 1b       	sub	r24, r18
     a1c:	93 0b       	sbc	r25, r19
     a1e:	a4 0b       	sbc	r26, r20
     a20:	b5 0b       	sbc	r27, r21
     a22:	89 c0       	rjmp	.+274    	; 0xb36 <SCSI_DecodeSCSICommand+0x1f4>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     a24:	f8 01       	movw	r30, r16
     a26:	c7 8c       	ldd	r12, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     a28:	ec 2c       	mov	r14, r12
     a2a:	fc 2d       	mov	r31, r12
     a2c:	f3 31       	cpi	r31, 0x13	; 19
     a2e:	10 f0       	brcs	.+4      	; 0xa34 <SCSI_DecodeSCSICommand+0xf2>
     a30:	92 e1       	ldi	r25, 0x12	; 18
     a32:	e9 2e       	mov	r14, r25

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     a34:	89 e3       	ldi	r24, 0x39	; 57
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	6e 2d       	mov	r22, r14
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	ef d0       	rcall	.+478    	; 0xc20 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     a42:	8c 2d       	mov	r24, r12
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	8e 19       	sub	r24, r14
     a48:	91 09       	sbc	r25, r1
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	a3 d0       	rcall	.+326    	; 0xb96 <Endpoint_Null_Stream>
     a50:	80 91 e8 00 	lds	r24, 0x00E8
     a54:	8e 77       	andi	r24, 0x7E	; 126
     a56:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     a5a:	f8 01       	movw	r30, r16
     a5c:	84 89       	ldd	r24, Z+20	; 0x14
     a5e:	95 89       	ldd	r25, Z+21	; 0x15
     a60:	a6 89       	ldd	r26, Z+22	; 0x16
     a62:	b7 89       	ldd	r27, Z+23	; 0x17
     a64:	8e 19       	sub	r24, r14
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	64 c0       	rjmp	.+200    	; 0xb36 <SCSI_DecodeSCSICommand+0x1f4>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	9f e7       	ldi	r25, 0x7F	; 127
     a72:	a0 e0       	ldi	r26, 0x00	; 0
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	89 83       	std	Y+1, r24	; 0x01
     a78:	9a 83       	std	Y+2, r25	; 0x02
     a7a:	ab 83       	std	Y+3, r26	; 0x03
     a7c:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	92 e0       	ldi	r25, 0x02	; 2
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	8d 83       	std	Y+5, r24	; 0x05
     a88:	9e 83       	std	Y+6, r25	; 0x06
     a8a:	af 83       	std	Y+7, r26	; 0x07
     a8c:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	64 e0       	ldi	r22, 0x04	; 4
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	1f d1       	rcall	.+574    	; 0xcda <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     a9c:	ce 01       	movw	r24, r28
     a9e:	05 96       	adiw	r24, 0x05	; 5
     aa0:	64 e0       	ldi	r22, 0x04	; 4
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	18 d1       	rcall	.+560    	; 0xcda <Endpoint_Write_Stream_BE>
     aaa:	80 91 e8 00 	lds	r24, 0x00E8
     aae:	8e 77       	andi	r24, 0x7E	; 126
     ab0:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     ab4:	f8 01       	movw	r30, r16
     ab6:	84 89       	ldd	r24, Z+20	; 0x14
     ab8:	95 89       	ldd	r25, Z+21	; 0x15
     aba:	a6 89       	ldd	r26, Z+22	; 0x16
     abc:	b7 89       	ldd	r27, Z+23	; 0x17
     abe:	08 97       	sbiw	r24, 0x08	; 8
     ac0:	a1 09       	sbc	r26, r1
     ac2:	b1 09       	sbc	r27, r1
     ac4:	38 c0       	rjmp	.+112    	; 0xb36 <SCSI_DecodeSCSICommand+0x1f4>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     ac6:	f8 01       	movw	r30, r16
     ac8:	84 8d       	ldd	r24, Z+28	; 0x1c
     aca:	82 fd       	sbrc	r24, 2
     acc:	08 c0       	rjmp	.+16     	; 0xade <SCSI_DecodeSCSICommand+0x19c>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     ace:	80 91 3b 01 	lds	r24, 0x013B
     ad2:	80 7f       	andi	r24, 0xF0	; 240
     ad4:	85 60       	ori	r24, 0x05	; 5
     ad6:	80 93 3b 01 	sts	0x013B, r24
     ada:	84 e2       	ldi	r24, 0x24	; 36
     adc:	3e c0       	rjmp	.+124    	; 0xb5a <SCSI_DecodeSCSICommand+0x218>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     ade:	a2 de       	rcall	.-700    	; 0x824 <DataflashManager_CheckDataflashOperation>
     ae0:	88 23       	and	r24, r24
     ae2:	71 f5       	brne	.+92     	; 0xb40 <SCSI_DecodeSCSICommand+0x1fe>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     ae4:	80 91 3b 01 	lds	r24, 0x013B
     ae8:	80 7f       	andi	r24, 0xF0	; 240
     aea:	84 60       	ori	r24, 0x04	; 4
     aec:	80 93 3b 01 	sts	0x013B, r24
     af0:	10 92 45 01 	sts	0x0145, r1
     af4:	10 92 46 01 	sts	0x0146, r1
     af8:	3e c0       	rjmp	.+124    	; 0xb76 <SCSI_DecodeSCSICommand+0x234>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     afa:	c8 01       	movw	r24, r16
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <SCSI_DecodeSCSICommand+0x1c2>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     b00:	c8 01       	movw	r24, r16
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	be de       	rcall	.-644    	; 0x882 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     b06:	88 23       	and	r24, r24
     b08:	b1 f1       	breq	.+108    	; 0xb76 <SCSI_DecodeSCSICommand+0x234>
     b0a:	2a c0       	rjmp	.+84     	; 0xb60 <SCSI_DecodeSCSICommand+0x21e>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b0c:	10 92 f1 00 	sts	0x00F1, r1
     b10:	10 92 f1 00 	sts	0x00F1, r1
     b14:	10 92 f1 00 	sts	0x00F1, r1
     b18:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b1c:	80 91 e8 00 	lds	r24, 0x00E8
     b20:	8e 77       	andi	r24, 0x7E	; 126
     b22:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     b26:	f8 01       	movw	r30, r16
     b28:	84 89       	ldd	r24, Z+20	; 0x14
     b2a:	95 89       	ldd	r25, Z+21	; 0x15
     b2c:	a6 89       	ldd	r26, Z+22	; 0x16
     b2e:	b7 89       	ldd	r27, Z+23	; 0x17
     b30:	04 97       	sbiw	r24, 0x04	; 4
     b32:	a1 09       	sbc	r26, r1
     b34:	b1 09       	sbc	r27, r1
     b36:	84 8b       	std	Z+20, r24	; 0x14
     b38:	95 8b       	std	Z+21, r25	; 0x15
     b3a:	a6 8b       	std	Z+22, r26	; 0x16
     b3c:	b7 8b       	std	Z+23, r27	; 0x17
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
     b3e:	10 c0       	rjmp	.+32     	; 0xb60 <SCSI_DecodeSCSICommand+0x21e>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     b40:	f8 01       	movw	r30, r16
     b42:	14 8a       	std	Z+20, r1	; 0x14
     b44:	15 8a       	std	Z+21, r1	; 0x15
     b46:	16 8a       	std	Z+22, r1	; 0x16
     b48:	17 8a       	std	Z+23, r1	; 0x17
     b4a:	0a c0       	rjmp	.+20     	; 0xb60 <SCSI_DecodeSCSICommand+0x21e>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b4c:	80 91 3b 01 	lds	r24, 0x013B
     b50:	80 7f       	andi	r24, 0xF0	; 240
     b52:	85 60       	ori	r24, 0x05	; 5
     b54:	80 93 3b 01 	sts	0x013B, r24
     b58:	80 e2       	ldi	r24, 0x20	; 32
     b5a:	80 93 45 01 	sts	0x0145, r24
     b5e:	ca cf       	rjmp	.-108    	; 0xaf4 <SCSI_DecodeSCSICommand+0x1b2>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     b60:	80 91 3b 01 	lds	r24, 0x013B
     b64:	80 7f       	andi	r24, 0xF0	; 240
     b66:	80 93 3b 01 	sts	0x013B, r24
     b6a:	10 92 45 01 	sts	0x0145, r1
     b6e:	10 92 46 01 	sts	0x0146, r1
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	01 c0       	rjmp	.+2      	; 0xb78 <SCSI_DecodeSCSICommand+0x236>
	}

	return false;
     b76:	80 e0       	ldi	r24, 0x00	; 0
}
     b78:	28 96       	adiw	r28, 0x08	; 8
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	08 95       	ret

00000b96 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	ec 01       	movw	r28, r24
     ba6:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
     ba8:	a2 d2       	rcall	.+1348   	; 0x10ee <Endpoint_WaitUntilReady>
     baa:	d8 2e       	mov	r13, r24
     bac:	88 23       	and	r24, r24
     bae:	79 f5       	brne	.+94     	; 0xc0e <Endpoint_Null_Stream+0x78>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
     bb0:	01 15       	cp	r16, r1
     bb2:	11 05       	cpc	r17, r1
     bb4:	29 f0       	breq	.+10     	; 0xbc0 <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
     bb6:	f8 01       	movw	r30, r16
     bb8:	20 81       	ld	r18, Z
     bba:	31 81       	ldd	r19, Z+1	; 0x01
     bbc:	c2 1b       	sub	r28, r18
     bbe:	d3 0b       	sbc	r29, r19
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     bc0:	ee 24       	eor	r14, r14
     bc2:	ff 24       	eor	r15, r15
     bc4:	20 c0       	rjmp	.+64     	; 0xc06 <Endpoint_Null_Stream+0x70>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     bc6:	80 91 e8 00 	lds	r24, 0x00E8
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     bca:	85 fd       	sbrc	r24, 5
     bcc:	16 c0       	rjmp	.+44     	; 0xbfa <Endpoint_Null_Stream+0x64>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bce:	80 91 e8 00 	lds	r24, 0x00E8
     bd2:	8e 77       	andi	r24, 0x7E	; 126
     bd4:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
     bd8:	01 15       	cp	r16, r1
     bda:	11 05       	cpc	r17, r1
     bdc:	51 f0       	breq	.+20     	; 0xbf2 <Endpoint_Null_Stream+0x5c>
			{
				*BytesProcessed += BytesInTransfer;
     bde:	f8 01       	movw	r30, r16
     be0:	80 81       	ld	r24, Z
     be2:	91 81       	ldd	r25, Z+1	; 0x01
     be4:	8e 0d       	add	r24, r14
     be6:	9f 1d       	adc	r25, r15
     be8:	91 83       	std	Z+1, r25	; 0x01
     bea:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     bec:	95 e0       	ldi	r25, 0x05	; 5
     bee:	d9 2e       	mov	r13, r25
     bf0:	0e c0       	rjmp	.+28     	; 0xc0e <Endpoint_Null_Stream+0x78>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     bf2:	7d d2       	rcall	.+1274   	; 0x10ee <Endpoint_WaitUntilReady>
     bf4:	88 23       	and	r24, r24
     bf6:	39 f0       	breq	.+14     	; 0xc06 <Endpoint_Null_Stream+0x70>
     bf8:	09 c0       	rjmp	.+18     	; 0xc0c <Endpoint_Null_Stream+0x76>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bfa:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
     bfe:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
     c00:	08 94       	sec
     c02:	e1 1c       	adc	r14, r1
     c04:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     c06:	20 97       	sbiw	r28, 0x00	; 0
     c08:	f1 f6       	brne	.-68     	; 0xbc6 <Endpoint_Null_Stream+0x30>
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <Endpoint_Null_Stream+0x78>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     c0c:	d8 2e       	mov	r13, r24
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
     c0e:	8d 2d       	mov	r24, r13
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	08 95       	ret

00000c20 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	bf 92       	push	r11
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	0f 92       	push	r0
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	e8 2e       	mov	r14, r24
     c3e:	4b 01       	movw	r8, r22
     c40:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     c42:	99 83       	std	Y+1, r25	; 0x01
     c44:	54 d2       	rcall	.+1192   	; 0x10ee <Endpoint_WaitUntilReady>
     c46:	b8 2e       	mov	r11, r24
     c48:	99 81       	ldd	r25, Y+1	; 0x01
     c4a:	88 23       	and	r24, r24
     c4c:	c1 f5       	brne	.+112    	; 0xcbe <Endpoint_Write_Stream_LE+0x9e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c4e:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c50:	01 15       	cp	r16, r1
     c52:	11 05       	cpc	r17, r1
     c54:	39 f0       	breq	.+14     	; 0xc64 <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     c56:	f8 01       	movw	r30, r16
     c58:	20 81       	ld	r18, Z
     c5a:	31 81       	ldd	r19, Z+1	; 0x01
     c5c:	82 1a       	sub	r8, r18
     c5e:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     c60:	e2 0e       	add	r14, r18
     c62:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     c64:	cc 24       	eor	r12, r12
     c66:	dd 24       	eor	r13, r13
     c68:	25 c0       	rjmp	.+74     	; 0xcb4 <Endpoint_Write_Stream_LE+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c6a:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     c6e:	85 fd       	sbrc	r24, 5
     c70:	16 c0       	rjmp	.+44     	; 0xc9e <Endpoint_Write_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c72:	80 91 e8 00 	lds	r24, 0x00E8
     c76:	8e 77       	andi	r24, 0x7E	; 126
     c78:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     c7c:	01 15       	cp	r16, r1
     c7e:	11 05       	cpc	r17, r1
     c80:	51 f0       	breq	.+20     	; 0xc96 <Endpoint_Write_Stream_LE+0x76>
			{
				*BytesProcessed += BytesInTransfer;
     c82:	f8 01       	movw	r30, r16
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	8c 0d       	add	r24, r12
     c8a:	9d 1d       	adc	r25, r13
     c8c:	91 83       	std	Z+1, r25	; 0x01
     c8e:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     c90:	25 e0       	ldi	r18, 0x05	; 5
     c92:	b2 2e       	mov	r11, r18
     c94:	14 c0       	rjmp	.+40     	; 0xcbe <Endpoint_Write_Stream_LE+0x9e>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     c96:	2b d2       	rcall	.+1110   	; 0x10ee <Endpoint_WaitUntilReady>
     c98:	88 23       	and	r24, r24
     c9a:	61 f0       	breq	.+24     	; 0xcb4 <Endpoint_Write_Stream_LE+0x94>
     c9c:	0f c0       	rjmp	.+30     	; 0xcbc <Endpoint_Write_Stream_LE+0x9c>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     c9e:	f7 01       	movw	r30, r14
     ca0:	81 91       	ld	r24, Z+
     ca2:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ca4:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     ca8:	08 94       	sec
     caa:	81 08       	sbc	r8, r1
     cac:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     cae:	08 94       	sec
     cb0:	c1 1c       	adc	r12, r1
     cb2:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     cb4:	81 14       	cp	r8, r1
     cb6:	91 04       	cpc	r9, r1
     cb8:	c1 f6       	brne	.-80     	; 0xc6a <Endpoint_Write_Stream_LE+0x4a>
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <Endpoint_Write_Stream_LE+0x9e>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     cbc:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     cbe:	8b 2d       	mov	r24, r11
     cc0:	0f 90       	pop	r0
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	df 90       	pop	r13
     cd0:	cf 90       	pop	r12
     cd2:	bf 90       	pop	r11
     cd4:	9f 90       	pop	r9
     cd6:	8f 90       	pop	r8
     cd8:	08 95       	ret

00000cda <Endpoint_Write_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     cda:	bf 92       	push	r11
     cdc:	cf 92       	push	r12
     cde:	df 92       	push	r13
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	6c 01       	movw	r12, r24
     cee:	eb 01       	movw	r28, r22
     cf0:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     cf2:	fd d1       	rcall	.+1018   	; 0x10ee <Endpoint_WaitUntilReady>
     cf4:	b8 2e       	mov	r11, r24
     cf6:	88 23       	and	r24, r24
     cf8:	d1 f5       	brne	.+116    	; 0xd6e <Endpoint_Write_Stream_BE+0x94>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     cfa:	8e 01       	movw	r16, r28
     cfc:	01 50       	subi	r16, 0x01	; 1
     cfe:	10 40       	sbci	r17, 0x00	; 0
     d00:	0c 0d       	add	r16, r12
     d02:	1d 1d       	adc	r17, r13
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d04:	e1 14       	cp	r14, r1
     d06:	f1 04       	cpc	r15, r1
     d08:	39 f0       	breq	.+14     	; 0xd18 <Endpoint_Write_Stream_BE+0x3e>
	{
		Length -= *BytesProcessed;
     d0a:	f7 01       	movw	r30, r14
     d0c:	20 81       	ld	r18, Z
     d0e:	31 81       	ldd	r19, Z+1	; 0x01
     d10:	c2 1b       	sub	r28, r18
     d12:	d3 0b       	sbc	r29, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d14:	02 1b       	sub	r16, r18
     d16:	13 0b       	sbc	r17, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d18:	cc 24       	eor	r12, r12
     d1a:	dd 24       	eor	r13, r13
     d1c:	24 c0       	rjmp	.+72     	; 0xd66 <Endpoint_Write_Stream_BE+0x8c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d1e:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     d22:	85 fd       	sbrc	r24, 5
     d24:	16 c0       	rjmp	.+44     	; 0xd52 <Endpoint_Write_Stream_BE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d26:	80 91 e8 00 	lds	r24, 0x00E8
     d2a:	8e 77       	andi	r24, 0x7E	; 126
     d2c:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     d30:	e1 14       	cp	r14, r1
     d32:	f1 04       	cpc	r15, r1
     d34:	51 f0       	breq	.+20     	; 0xd4a <Endpoint_Write_Stream_BE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     d36:	f7 01       	movw	r30, r14
     d38:	80 81       	ld	r24, Z
     d3a:	91 81       	ldd	r25, Z+1	; 0x01
     d3c:	8c 0d       	add	r24, r12
     d3e:	9d 1d       	adc	r25, r13
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     d44:	35 e0       	ldi	r19, 0x05	; 5
     d46:	b3 2e       	mov	r11, r19
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <Endpoint_Write_Stream_BE+0x94>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d4a:	d1 d1       	rcall	.+930    	; 0x10ee <Endpoint_WaitUntilReady>
     d4c:	88 23       	and	r24, r24
     d4e:	59 f0       	breq	.+22     	; 0xd66 <Endpoint_Write_Stream_BE+0x8c>
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <Endpoint_Write_Stream_BE+0x92>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d52:	f8 01       	movw	r30, r16
     d54:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d56:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
     d5a:	01 50       	subi	r16, 0x01	; 1
     d5c:	10 40       	sbci	r17, 0x00	; 0
			Length--;
     d5e:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
     d60:	08 94       	sec
     d62:	c1 1c       	adc	r12, r1
     d64:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     d66:	20 97       	sbiw	r28, 0x00	; 0
     d68:	d1 f6       	brne	.-76     	; 0xd1e <Endpoint_Write_Stream_BE+0x44>
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <Endpoint_Write_Stream_BE+0x94>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d6c:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     d6e:	8b 2d       	mov	r24, r11
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	bf 90       	pop	r11
     d82:	08 95       	ret

00000d84 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d84:	8f 92       	push	r8
     d86:	9f 92       	push	r9
     d88:	bf 92       	push	r11
     d8a:	cf 92       	push	r12
     d8c:	df 92       	push	r13
     d8e:	ef 92       	push	r14
     d90:	ff 92       	push	r15
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	0f 92       	push	r0
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	e8 2e       	mov	r14, r24
     da2:	4b 01       	movw	r8, r22
     da4:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     da6:	99 83       	std	Y+1, r25	; 0x01
     da8:	a2 d1       	rcall	.+836    	; 0x10ee <Endpoint_WaitUntilReady>
     daa:	b8 2e       	mov	r11, r24
     dac:	99 81       	ldd	r25, Y+1	; 0x01
     dae:	88 23       	and	r24, r24
     db0:	c1 f5       	brne	.+112    	; 0xe22 <Endpoint_Read_Stream_LE+0x9e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     db2:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     db4:	01 15       	cp	r16, r1
     db6:	11 05       	cpc	r17, r1
     db8:	39 f0       	breq	.+14     	; 0xdc8 <Endpoint_Read_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     dba:	f8 01       	movw	r30, r16
     dbc:	20 81       	ld	r18, Z
     dbe:	31 81       	ldd	r19, Z+1	; 0x01
     dc0:	82 1a       	sub	r8, r18
     dc2:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     dc4:	e2 0e       	add	r14, r18
     dc6:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     dc8:	cc 24       	eor	r12, r12
     dca:	dd 24       	eor	r13, r13
     dcc:	25 c0       	rjmp	.+74     	; 0xe18 <Endpoint_Read_Stream_LE+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     dce:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     dd2:	85 fd       	sbrc	r24, 5
     dd4:	16 c0       	rjmp	.+44     	; 0xe02 <Endpoint_Read_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dd6:	80 91 e8 00 	lds	r24, 0x00E8
     dda:	8b 77       	andi	r24, 0x7B	; 123
     ddc:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     de0:	01 15       	cp	r16, r1
     de2:	11 05       	cpc	r17, r1
     de4:	51 f0       	breq	.+20     	; 0xdfa <Endpoint_Read_Stream_LE+0x76>
			{
				*BytesProcessed += BytesInTransfer;
     de6:	f8 01       	movw	r30, r16
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	8c 0d       	add	r24, r12
     dee:	9d 1d       	adc	r25, r13
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     df4:	45 e0       	ldi	r20, 0x05	; 5
     df6:	b4 2e       	mov	r11, r20
     df8:	14 c0       	rjmp	.+40     	; 0xe22 <Endpoint_Read_Stream_LE+0x9e>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     dfa:	79 d1       	rcall	.+754    	; 0x10ee <Endpoint_WaitUntilReady>
     dfc:	88 23       	and	r24, r24
     dfe:	61 f0       	breq	.+24     	; 0xe18 <Endpoint_Read_Stream_LE+0x94>
     e00:	0f c0       	rjmp	.+30     	; 0xe20 <Endpoint_Read_Stream_LE+0x9c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e02:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e06:	f7 01       	movw	r30, r14
     e08:	81 93       	st	Z+, r24
     e0a:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e0c:	08 94       	sec
     e0e:	81 08       	sbc	r8, r1
     e10:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     e12:	08 94       	sec
     e14:	c1 1c       	adc	r12, r1
     e16:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     e18:	81 14       	cp	r8, r1
     e1a:	91 04       	cpc	r9, r1
     e1c:	c1 f6       	brne	.-80     	; 0xdce <Endpoint_Read_Stream_LE+0x4a>
     e1e:	01 c0       	rjmp	.+2      	; 0xe22 <Endpoint_Read_Stream_LE+0x9e>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e20:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     e22:	8b 2d       	mov	r24, r11
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	bf 90       	pop	r11
     e38:	9f 90       	pop	r9
     e3a:	8f 90       	pop	r8
     e3c:	08 95       	ret

00000e3e <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e3e:	28 2f       	mov	r18, r24
     e40:	39 2f       	mov	r19, r25
     e42:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     e44:	80 91 7b 01 	lds	r24, 0x017B
     e48:	90 91 7c 01 	lds	r25, 0x017C
     e4c:	86 17       	cp	r24, r22
     e4e:	97 07       	cpc	r25, r23
     e50:	18 f4       	brcc	.+6      	; 0xe58 <Endpoint_Write_Control_Stream_LE+0x1a>
     e52:	bc 01       	movw	r22, r24
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	37 c0       	rjmp	.+110    	; 0xec6 <Endpoint_Write_Control_Stream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     e58:	61 15       	cp	r22, r1
     e5a:	71 05       	cpc	r23, r1
     e5c:	d9 f7       	brne	.-10     	; 0xe54 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e5e:	80 91 e8 00 	lds	r24, 0x00E8
     e62:	8e 77       	andi	r24, 0x7E	; 126
     e64:	80 93 e8 00 	sts	0x00E8, r24
     e68:	f5 cf       	rjmp	.-22     	; 0xe54 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e6a:	80 91 74 01 	lds	r24, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e6e:	88 23       	and	r24, r24
     e70:	09 f4       	brne	.+2      	; 0xe74 <Endpoint_Write_Control_Stream_LE+0x36>
     e72:	3f c0       	rjmp	.+126    	; 0xef2 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e74:	85 30       	cpi	r24, 0x05	; 5
     e76:	c9 f1       	breq	.+114    	; 0xeea <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e78:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     e7c:	83 fd       	sbrc	r24, 3
     e7e:	37 c0       	rjmp	.+110    	; 0xeee <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e80:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     e84:	82 fd       	sbrc	r24, 2
     e86:	2b c0       	rjmp	.+86     	; 0xede <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e88:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     e8c:	80 ff       	sbrs	r24, 0
     e8e:	1b c0       	rjmp	.+54     	; 0xec6 <Endpoint_Write_Control_Stream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     e90:	80 91 f2 00 	lds	r24, 0x00F2
     e94:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     e98:	06 c0       	rjmp	.+12     	; 0xea6 <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     e9a:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e9c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     ea0:	61 50       	subi	r22, 0x01	; 1
     ea2:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     ea4:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     ea6:	61 15       	cp	r22, r1
     ea8:	71 05       	cpc	r23, r1
     eaa:	19 f0       	breq	.+6      	; 0xeb2 <Endpoint_Write_Control_Stream_LE+0x74>
     eac:	88 30       	cpi	r24, 0x08	; 8
     eae:	91 05       	cpc	r25, r1
     eb0:	a0 f3       	brcs	.-24     	; 0xe9a <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	88 30       	cpi	r24, 0x08	; 8
     eb6:	91 05       	cpc	r25, r1
     eb8:	09 f0       	breq	.+2      	; 0xebc <Endpoint_Write_Control_Stream_LE+0x7e>
     eba:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ebc:	80 91 e8 00 	lds	r24, 0x00E8
     ec0:	8e 77       	andi	r24, 0x7E	; 126
     ec2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ec6:	61 15       	cp	r22, r1
     ec8:	71 05       	cpc	r23, r1
     eca:	79 f6       	brne	.-98     	; 0xe6a <Endpoint_Write_Control_Stream_LE+0x2c>
     ecc:	22 23       	and	r18, r18
     ece:	69 f6       	brne	.-102    	; 0xe6a <Endpoint_Write_Control_Stream_LE+0x2c>
     ed0:	06 c0       	rjmp	.+12     	; 0xede <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ed2:	80 91 74 01 	lds	r24, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ed6:	88 23       	and	r24, r24
     ed8:	61 f0       	breq	.+24     	; 0xef2 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     eda:	85 30       	cpi	r24, 0x05	; 5
     edc:	61 f0       	breq	.+24     	; 0xef6 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ede:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     ee2:	82 ff       	sbrs	r24, 2
     ee4:	f6 cf       	rjmp	.-20     	; 0xed2 <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     eea:	83 e0       	ldi	r24, 0x03	; 3
     eec:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     ef6:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     ef8:	08 95       	ret

00000efa <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     efa:	e8 2f       	mov	r30, r24
     efc:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     efe:	80 91 7b 01 	lds	r24, 0x017B
     f02:	90 91 7c 01 	lds	r25, 0x017C
     f06:	86 17       	cp	r24, r22
     f08:	97 07       	cpc	r25, r23
     f0a:	18 f4       	brcc	.+6      	; 0xf12 <Endpoint_Write_Control_PStream_LE+0x18>
     f0c:	bc 01       	movw	r22, r24
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	38 c0       	rjmp	.+112    	; 0xf82 <Endpoint_Write_Control_PStream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f12:	61 15       	cp	r22, r1
     f14:	71 05       	cpc	r23, r1
     f16:	d9 f7       	brne	.-10     	; 0xf0e <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f18:	80 91 e8 00 	lds	r24, 0x00E8
     f1c:	8e 77       	andi	r24, 0x7E	; 126
     f1e:	80 93 e8 00 	sts	0x00E8, r24
     f22:	f5 cf       	rjmp	.-22     	; 0xf0e <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f24:	80 91 74 01 	lds	r24, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f28:	88 23       	and	r24, r24
     f2a:	09 f4       	brne	.+2      	; 0xf2e <Endpoint_Write_Control_PStream_LE+0x34>
     f2c:	40 c0       	rjmp	.+128    	; 0xfae <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f2e:	85 30       	cpi	r24, 0x05	; 5
     f30:	d1 f1       	breq	.+116    	; 0xfa6 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f32:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     f36:	83 fd       	sbrc	r24, 3
     f38:	38 c0       	rjmp	.+112    	; 0xfaa <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f3a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     f3e:	82 fd       	sbrc	r24, 2
     f40:	2c c0       	rjmp	.+88     	; 0xf9a <Endpoint_Write_Control_PStream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f42:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     f46:	80 ff       	sbrs	r24, 0
     f48:	1c c0       	rjmp	.+56     	; 0xf82 <Endpoint_Write_Control_PStream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     f4a:	80 91 f2 00 	lds	r24, 0x00F2
     f4e:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f52:	07 c0       	rjmp	.+14     	; 0xf62 <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     f54:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f56:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     f5a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     f5c:	61 50       	subi	r22, 0x01	; 1
     f5e:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     f60:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f62:	61 15       	cp	r22, r1
     f64:	71 05       	cpc	r23, r1
     f66:	19 f0       	breq	.+6      	; 0xf6e <Endpoint_Write_Control_PStream_LE+0x74>
     f68:	88 30       	cpi	r24, 0x08	; 8
     f6a:	91 05       	cpc	r25, r1
     f6c:	98 f3       	brcs	.-26     	; 0xf54 <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     f6e:	21 e0       	ldi	r18, 0x01	; 1
     f70:	88 30       	cpi	r24, 0x08	; 8
     f72:	91 05       	cpc	r25, r1
     f74:	09 f0       	breq	.+2      	; 0xf78 <Endpoint_Write_Control_PStream_LE+0x7e>
     f76:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f78:	80 91 e8 00 	lds	r24, 0x00E8
     f7c:	8e 77       	andi	r24, 0x7E	; 126
     f7e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     f82:	61 15       	cp	r22, r1
     f84:	71 05       	cpc	r23, r1
     f86:	71 f6       	brne	.-100    	; 0xf24 <Endpoint_Write_Control_PStream_LE+0x2a>
     f88:	22 23       	and	r18, r18
     f8a:	61 f6       	brne	.-104    	; 0xf24 <Endpoint_Write_Control_PStream_LE+0x2a>
     f8c:	06 c0       	rjmp	.+12     	; 0xf9a <Endpoint_Write_Control_PStream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f8e:	80 91 74 01 	lds	r24, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f92:	88 23       	and	r24, r24
     f94:	61 f0       	breq	.+24     	; 0xfae <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f96:	85 30       	cpi	r24, 0x05	; 5
     f98:	61 f0       	breq	.+24     	; 0xfb2 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f9a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     f9e:	82 ff       	sbrs	r24, 2
     fa0:	f6 cf       	rjmp	.-20     	; 0xf8e <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     fa6:	83 e0       	ldi	r24, 0x03	; 3
     fa8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     fb2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     fb4:	08 95       	ret

00000fb6 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     fb6:	98 2f       	mov	r25, r24
     fb8:	2c c0       	rjmp	.+88     	; 0x1012 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fba:	29 2f       	mov	r18, r25
     fbc:	2f 70       	andi	r18, 0x0F	; 15
     fbe:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     fc2:	98 17       	cp	r25, r24
     fc4:	39 f0       	breq	.+14     	; 0xfd4 <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     fc6:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     fca:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     fce:	50 91 f0 00 	lds	r21, 0x00F0
     fd2:	03 c0       	rjmp	.+6      	; 0xfda <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     fd4:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     fd6:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     fd8:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     fda:	21 ff       	sbrs	r18, 1
     fdc:	19 c0       	rjmp	.+50     	; 0x1010 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     fde:	30 91 eb 00 	lds	r19, 0x00EB
     fe2:	3e 7f       	andi	r19, 0xFE	; 254
     fe4:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     fe8:	30 91 ed 00 	lds	r19, 0x00ED
     fec:	3d 7f       	andi	r19, 0xFD	; 253
     fee:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     ff2:	30 91 eb 00 	lds	r19, 0x00EB
     ff6:	31 60       	ori	r19, 0x01	; 1
     ff8:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     ffc:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1000:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1004:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1008:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    100c:	27 ff       	sbrs	r18, 7
    100e:	08 c0       	rjmp	.+16     	; 0x1020 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1010:	9f 5f       	subi	r25, 0xFF	; 255
    1012:	97 30       	cpi	r25, 0x07	; 7
    1014:	90 f2       	brcs	.-92     	; 0xfba <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1016:	8f 70       	andi	r24, 0x0F	; 15
    1018:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1020:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1022:	08 95       	ret

00001024 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    1032:	e8 2e       	mov	r14, r24
    1034:	e7 01       	movw	r28, r14
    1036:	7e 01       	movw	r14, r28
    1038:	f9 2e       	mov	r15, r25
    103a:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    103c:	00 e0       	ldi	r16, 0x00	; 0
    103e:	2a c0       	rjmp	.+84     	; 0x1094 <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
    1040:	98 81       	ld	r25, Y
    1042:	99 23       	and	r25, r25
    1044:	29 f1       	breq	.+74     	; 0x1090 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1046:	6b 81       	ldd	r22, Y+3	; 0x03
    1048:	e9 81       	ldd	r30, Y+1	; 0x01
    104a:	fa 81       	ldd	r31, Y+2	; 0x02
    104c:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    104e:	89 2f       	mov	r24, r25
    1050:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1052:	87 30       	cpi	r24, 0x07	; 7
    1054:	18 f5       	brcc	.+70     	; 0x109c <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1056:	62 95       	swap	r22
    1058:	66 0f       	add	r22, r22
    105a:	66 0f       	add	r22, r22
    105c:	60 7c       	andi	r22, 0xC0	; 192
    105e:	99 1f       	adc	r25, r25
    1060:	99 27       	eor	r25, r25
    1062:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1064:	69 2b       	or	r22, r25
    1066:	22 30       	cpi	r18, 0x02	; 2
    1068:	10 f0       	brcs	.+4      	; 0x106e <Endpoint_ConfigureEndpointTable+0x4a>
    106a:	96 e0       	ldi	r25, 0x06	; 6
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <Endpoint_ConfigureEndpointTable+0x4c>
    106e:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1070:	28 e0       	ldi	r18, 0x08	; 8
    1072:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	03 c0       	rjmp	.+6      	; 0x107e <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1078:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    107a:	22 0f       	add	r18, r18
    107c:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    107e:	2e 17       	cp	r18, r30
    1080:	3f 07       	cpc	r19, r31
    1082:	d0 f3       	brcs	.-12     	; 0x1078 <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1084:	42 95       	swap	r20
    1086:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1088:	49 2b       	or	r20, r25
    108a:	95 df       	rcall	.-214    	; 0xfb6 <Endpoint_ConfigureEndpoint_Prv>
    108c:	88 23       	and	r24, r24
    108e:	31 f0       	breq	.+12     	; 0x109c <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1090:	0f 5f       	subi	r16, 0xFF	; 255
    1092:	25 96       	adiw	r28, 0x05	; 5
    1094:	01 17       	cp	r16, r17
    1096:	a0 f2       	brcs	.-88     	; 0x1040 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	01 c0       	rjmp	.+2      	; 0x109e <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    109c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	08 95       	ret

000010ac <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    10ac:	80 91 75 01 	lds	r24, 0x0175
    10b0:	87 ff       	sbrs	r24, 7
    10b2:	13 c0       	rjmp	.+38     	; 0x10da <Endpoint_ClearStatusStage+0x2e>
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    10b6:	80 91 74 01 	lds	r24, 0x0174
    10ba:	88 23       	and	r24, r24
    10bc:	b9 f0       	breq	.+46     	; 0x10ec <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10be:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    10c2:	82 ff       	sbrs	r24, 2
    10c4:	f8 cf       	rjmp	.-16     	; 0x10b6 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10c6:	80 91 e8 00 	lds	r24, 0x00E8
    10ca:	8b 77       	andi	r24, 0x7B	; 123
    10cc:	80 93 e8 00 	sts	0x00E8, r24
    10d0:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    10d2:	80 91 74 01 	lds	r24, 0x0174
    10d6:	88 23       	and	r24, r24
    10d8:	49 f0       	breq	.+18     	; 0x10ec <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10da:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    10de:	80 ff       	sbrs	r24, 0
    10e0:	f8 cf       	rjmp	.-16     	; 0x10d2 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10e2:	80 91 e8 00 	lds	r24, 0x00E8
    10e6:	8e 77       	andi	r24, 0x7E	; 126
    10e8:	80 93 e8 00 	sts	0x00E8, r24
    10ec:	08 95       	ret

000010ee <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    10ee:	80 91 e4 00 	lds	r24, 0x00E4
    10f2:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    10f6:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    10f8:	20 91 ec 00 	lds	r18, 0x00EC
    10fc:	20 ff       	sbrs	r18, 0
    10fe:	26 c0       	rjmp	.+76     	; 0x114c <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1100:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1104:	20 fd       	sbrc	r18, 0
    1106:	16 c0       	rjmp	.+44     	; 0x1134 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1108:	20 91 74 01 	lds	r18, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    110c:	22 23       	and	r18, r18
    110e:	a1 f0       	breq	.+40     	; 0x1138 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1110:	25 30       	cpi	r18, 0x05	; 5
    1112:	a1 f0       	breq	.+40     	; 0x113c <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1114:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1118:	25 fd       	sbrc	r18, 5
    111a:	12 c0       	rjmp	.+36     	; 0x1140 <Endpoint_WaitUntilReady+0x52>
    111c:	20 91 e4 00 	lds	r18, 0x00E4
    1120:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1124:	28 17       	cp	r18, r24
    1126:	39 07       	cpc	r19, r25
    1128:	39 f3       	breq	.-50     	; 0x10f8 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    112a:	44 23       	and	r20, r20
    112c:	59 f0       	breq	.+22     	; 0x1144 <Endpoint_WaitUntilReady+0x56>
    112e:	41 50       	subi	r20, 0x01	; 1
    1130:	c9 01       	movw	r24, r18
    1132:	e2 cf       	rjmp	.-60     	; 0x10f8 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    113c:	83 e0       	ldi	r24, 0x03	; 3
    113e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1144:	84 e0       	ldi	r24, 0x04	; 4
    1146:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1148:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    114a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    114c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1150:	22 ff       	sbrs	r18, 2
    1152:	da cf       	rjmp	.-76     	; 0x1108 <Endpoint_WaitUntilReady+0x1a>
    1154:	f9 cf       	rjmp	.-14     	; 0x1148 <Endpoint_WaitUntilReady+0x5a>

00001156 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    115e:	4e d0       	rcall	.+156    	; 0x11fc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1160:	55 d0       	rcall	.+170    	; 0x120c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1162:	c8 ed       	ldi	r28, 0xD8	; 216
    1164:	d0 e0       	ldi	r29, 0x00	; 0
    1166:	88 81       	ld	r24, Y
    1168:	8f 77       	andi	r24, 0x7F	; 127
    116a:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    116c:	88 81       	ld	r24, Y
    116e:	80 68       	ori	r24, 0x80	; 128
    1170:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1172:	88 81       	ld	r24, Y
    1174:	8f 7d       	andi	r24, 0xDF	; 223
    1176:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1178:	e7 ed       	ldi	r30, 0xD7	; 215
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 68       	ori	r24, 0x80	; 128
    1180:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1182:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1184:	10 92 74 01 	sts	0x0174, r1
	USB_Device_ConfigurationNumber  = 0;
    1188:	10 92 70 01 	sts	0x0170, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    118c:	10 92 72 01 	sts	0x0172, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1190:	10 92 71 01 	sts	0x0171, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1194:	00 ee       	ldi	r16, 0xE0	; 224
    1196:	10 e0       	ldi	r17, 0x00	; 0
    1198:	f8 01       	movw	r30, r16
    119a:	80 81       	ld	r24, Z
    119c:	8b 7f       	andi	r24, 0xFB	; 251
    119e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    11a0:	88 81       	ld	r24, Y
    11a2:	81 60       	ori	r24, 0x01	; 1
    11a4:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	42 e0       	ldi	r20, 0x02	; 2
    11ac:	04 df       	rcall	.-504    	; 0xfb6 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    11ae:	e1 ee       	ldi	r30, 0xE1	; 225
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8e 7f       	andi	r24, 0xFE	; 254
    11b6:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    11b8:	e2 ee       	ldi	r30, 0xE2	; 226
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	81 60       	ori	r24, 0x01	; 1
    11c0:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    11c2:	80 81       	ld	r24, Z
    11c4:	88 60       	ori	r24, 0x08	; 8
    11c6:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    11c8:	f8 01       	movw	r30, r16
    11ca:	80 81       	ld	r24, Z
    11cc:	8e 7f       	andi	r24, 0xFE	; 254
    11ce:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    11d0:	88 81       	ld	r24, Y
    11d2:	80 61       	ori	r24, 0x10	; 16
    11d4:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	08 95       	ret

000011e0 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    11e0:	e8 ed       	ldi	r30, 0xD8	; 216
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	8f 7e       	andi	r24, 0xEF	; 239
    11e8:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    11ea:	e7 ed       	ldi	r30, 0xD7	; 215
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	81 60       	ori	r24, 0x01	; 1
    11f2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	80 93 73 01 	sts	0x0173, r24

	USB_ResetInterface();
}
    11fa:	ad cf       	rjmp	.-166    	; 0x1156 <USB_ResetInterface>

000011fc <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    11fc:	e8 ed       	ldi	r30, 0xD8	; 216
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	8c 7f       	andi	r24, 0xFC	; 252
    1204:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1206:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    120a:	08 95       	ret

0000120c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    120c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1210:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1214:	08 95       	ret

00001216 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1216:	1f 92       	push	r1
    1218:	0f 92       	push	r0
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	0f 92       	push	r0
    121e:	0b b6       	in	r0, 0x3b	; 59
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	4f 93       	push	r20
    122a:	5f 93       	push	r21
    122c:	6f 93       	push	r22
    122e:	7f 93       	push	r23
    1230:	8f 93       	push	r24
    1232:	9f 93       	push	r25
    1234:	af 93       	push	r26
    1236:	bf 93       	push	r27
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    123c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1240:	82 ff       	sbrs	r24, 2
    1242:	0a c0       	rjmp	.+20     	; 0x1258 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1244:	80 91 e2 00 	lds	r24, 0x00E2
    1248:	82 ff       	sbrs	r24, 2
    124a:	06 c0       	rjmp	.+12     	; 0x1258 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    124c:	80 91 e1 00 	lds	r24, 0x00E1
    1250:	8b 7f       	andi	r24, 0xFB	; 251
    1252:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1256:	53 d2       	rcall	.+1190   	; 0x16fe <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1258:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    125c:	80 ff       	sbrs	r24, 0
    125e:	1f c0       	rjmp	.+62     	; 0x129e <__vector_10+0x88>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1260:	80 91 d8 00 	lds	r24, 0x00D8
    1264:	80 ff       	sbrs	r24, 0
    1266:	1b c0       	rjmp	.+54     	; 0x129e <__vector_10+0x88>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1268:	80 91 da 00 	lds	r24, 0x00DA
    126c:	8e 7f       	andi	r24, 0xFE	; 254
    126e:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1272:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1276:	80 ff       	sbrs	r24, 0
    1278:	0d c0       	rjmp	.+26     	; 0x1294 <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    127a:	8c e0       	ldi	r24, 0x0C	; 12
    127c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    127e:	8e e0       	ldi	r24, 0x0E	; 14
    1280:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1282:	09 b4       	in	r0, 0x29	; 41
    1284:	00 fe       	sbrs	r0, 0
    1286:	fd cf       	rjmp	.-6      	; 0x1282 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	80 93 74 01 	sts	0x0174, r24
			EVENT_USB_Device_Connect();
    128e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <EVENT_USB_Device_Connect>
    1292:	05 c0       	rjmp	.+10     	; 0x129e <__vector_10+0x88>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1294:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1296:	10 92 74 01 	sts	0x0174, r1
			EVENT_USB_Device_Disconnect();
    129a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    129e:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    12a2:	80 ff       	sbrs	r24, 0
    12a4:	18 c0       	rjmp	.+48     	; 0x12d6 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    12a6:	80 91 e2 00 	lds	r24, 0x00E2
    12aa:	80 ff       	sbrs	r24, 0
    12ac:	14 c0       	rjmp	.+40     	; 0x12d6 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    12ae:	80 91 e2 00 	lds	r24, 0x00E2
    12b2:	8e 7f       	andi	r24, 0xFE	; 254
    12b4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    12b8:	80 91 e2 00 	lds	r24, 0x00E2
    12bc:	80 61       	ori	r24, 0x10	; 16
    12be:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    12c2:	80 91 d8 00 	lds	r24, 0x00D8
    12c6:	80 62       	ori	r24, 0x20	; 32
    12c8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    12cc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    12ce:	85 e0       	ldi	r24, 0x05	; 5
    12d0:	80 93 74 01 	sts	0x0174, r24
		EVENT_USB_Device_Suspend();
    12d4:	14 d2       	rcall	.+1064   	; 0x16fe <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    12d6:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    12da:	84 ff       	sbrs	r24, 4
    12dc:	2d c0       	rjmp	.+90     	; 0x1338 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    12de:	80 91 e2 00 	lds	r24, 0x00E2
    12e2:	84 ff       	sbrs	r24, 4
    12e4:	29 c0       	rjmp	.+82     	; 0x1338 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    12e6:	8c e0       	ldi	r24, 0x0C	; 12
    12e8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    12ea:	8e e0       	ldi	r24, 0x0E	; 14
    12ec:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    12ee:	09 b4       	in	r0, 0x29	; 41
    12f0:	00 fe       	sbrs	r0, 0
    12f2:	fd cf       	rjmp	.-6      	; 0x12ee <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    12f4:	80 91 d8 00 	lds	r24, 0x00D8
    12f8:	8f 7d       	andi	r24, 0xDF	; 223
    12fa:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    12fe:	80 91 e1 00 	lds	r24, 0x00E1
    1302:	8f 7e       	andi	r24, 0xEF	; 239
    1304:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1308:	80 91 e2 00 	lds	r24, 0x00E2
    130c:	8f 7e       	andi	r24, 0xEF	; 239
    130e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1312:	80 91 e2 00 	lds	r24, 0x00E2
    1316:	81 60       	ori	r24, 0x01	; 1
    1318:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    131c:	80 91 70 01 	lds	r24, 0x0170
    1320:	88 23       	and	r24, r24
    1322:	21 f4       	brne	.+8      	; 0x132c <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1324:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1328:	87 ff       	sbrs	r24, 7
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <__vector_10+0x11a>
    132c:	84 e0       	ldi	r24, 0x04	; 4
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <__vector_10+0x11c>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	80 93 74 01 	sts	0x0174, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1336:	e3 d1       	rcall	.+966    	; 0x16fe <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1338:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    133c:	83 ff       	sbrs	r24, 3
    133e:	27 c0       	rjmp	.+78     	; 0x138e <__vector_10+0x178>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1340:	80 91 e2 00 	lds	r24, 0x00E2
    1344:	83 ff       	sbrs	r24, 3
    1346:	23 c0       	rjmp	.+70     	; 0x138e <__vector_10+0x178>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1348:	80 91 e1 00 	lds	r24, 0x00E1
    134c:	87 7f       	andi	r24, 0xF7	; 247
    134e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	80 93 74 01 	sts	0x0174, r24
		USB_Device_ConfigurationNumber = 0;
    1358:	10 92 70 01 	sts	0x0170, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    135c:	80 91 e1 00 	lds	r24, 0x00E1
    1360:	8e 7f       	andi	r24, 0xFE	; 254
    1362:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1366:	80 91 e2 00 	lds	r24, 0x00E2
    136a:	8e 7f       	andi	r24, 0xFE	; 254
    136c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1370:	80 91 e2 00 	lds	r24, 0x00E2
    1374:	80 61       	ori	r24, 0x10	; 16
    1376:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	42 e0       	ldi	r20, 0x02	; 2
    1380:	1a de       	rcall	.-972    	; 0xfb6 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1382:	80 91 f0 00 	lds	r24, 0x00F0
    1386:	88 60       	ori	r24, 0x08	; 8
    1388:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    138c:	b8 d1       	rcall	.+880    	; 0x16fe <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    138e:	ff 91       	pop	r31
    1390:	ef 91       	pop	r30
    1392:	bf 91       	pop	r27
    1394:	af 91       	pop	r26
    1396:	9f 91       	pop	r25
    1398:	8f 91       	pop	r24
    139a:	7f 91       	pop	r23
    139c:	6f 91       	pop	r22
    139e:	5f 91       	pop	r21
    13a0:	4f 91       	pop	r20
    13a2:	3f 91       	pop	r19
    13a4:	2f 91       	pop	r18
    13a6:	0f 90       	pop	r0
    13a8:	0b be       	out	0x3b, r0	; 59
    13aa:	0f 90       	pop	r0
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	0f 90       	pop	r0
    13b0:	1f 90       	pop	r1
    13b2:	18 95       	reti

000013b4 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    13b4:	1f 92       	push	r1
    13b6:	0f 92       	push	r0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	0f 92       	push	r0
    13bc:	0b b6       	in	r0, 0x3b	; 59
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	1f 93       	push	r17
    13c4:	2f 93       	push	r18
    13c6:	3f 93       	push	r19
    13c8:	4f 93       	push	r20
    13ca:	5f 93       	push	r21
    13cc:	6f 93       	push	r22
    13ce:	7f 93       	push	r23
    13d0:	8f 93       	push	r24
    13d2:	9f 93       	push	r25
    13d4:	af 93       	push	r26
    13d6:	bf 93       	push	r27
    13d8:	ef 93       	push	r30
    13da:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13dc:	10 91 e9 00 	lds	r17, 0x00E9
    13e0:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    13e2:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13e6:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    13ea:	80 91 f0 00 	lds	r24, 0x00F0
    13ee:	87 7f       	andi	r24, 0xF7	; 247
    13f0:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    13f4:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    13f6:	1d d0       	rcall	.+58     	; 0x1432 <USB_Device_ProcessControlRequest>
    13f8:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    13fc:	80 91 f0 00 	lds	r24, 0x00F0
    1400:	88 60       	ori	r24, 0x08	; 8
    1402:	80 93 f0 00 	sts	0x00F0, r24
    1406:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    140a:	ff 91       	pop	r31
    140c:	ef 91       	pop	r30
    140e:	bf 91       	pop	r27
    1410:	af 91       	pop	r26
    1412:	9f 91       	pop	r25
    1414:	8f 91       	pop	r24
    1416:	7f 91       	pop	r23
    1418:	6f 91       	pop	r22
    141a:	5f 91       	pop	r21
    141c:	4f 91       	pop	r20
    141e:	3f 91       	pop	r19
    1420:	2f 91       	pop	r18
    1422:	1f 91       	pop	r17
    1424:	0f 90       	pop	r0
    1426:	0b be       	out	0x3b, r0	; 59
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	0f 90       	pop	r0
    142e:	1f 90       	pop	r1
    1430:	18 95       	reti

00001432 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1432:	1f 93       	push	r17
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	ac 97       	sbiw	r28, 0x2c	; 44
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1448:	e5 e7       	ldi	r30, 0x75	; 117
    144a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    144c:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1450:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1452:	21 e0       	ldi	r18, 0x01	; 1
    1454:	ed 37       	cpi	r30, 0x7D	; 125
    1456:	f2 07       	cpc	r31, r18
    1458:	c9 f7       	brne	.-14     	; 0x144c <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    145a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    145e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1462:	83 ff       	sbrs	r24, 3
    1464:	34 c1       	rjmp	.+616    	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1466:	80 91 75 01 	lds	r24, 0x0175

		switch (USB_ControlRequest.bRequest)
    146a:	20 91 76 01 	lds	r18, 0x0176
    146e:	25 30       	cpi	r18, 0x05	; 5
    1470:	09 f4       	brne	.+2      	; 0x1474 <USB_Device_ProcessControlRequest+0x42>
    1472:	84 c0       	rjmp	.+264    	; 0x157c <USB_Device_ProcessControlRequest+0x14a>
    1474:	26 30       	cpi	r18, 0x06	; 6
    1476:	40 f4       	brcc	.+16     	; 0x1488 <USB_Device_ProcessControlRequest+0x56>
    1478:	21 30       	cpi	r18, 0x01	; 1
    147a:	a1 f1       	breq	.+104    	; 0x14e4 <USB_Device_ProcessControlRequest+0xb2>
    147c:	21 30       	cpi	r18, 0x01	; 1
    147e:	70 f0       	brcs	.+28     	; 0x149c <USB_Device_ProcessControlRequest+0x6a>
    1480:	23 30       	cpi	r18, 0x03	; 3
    1482:	09 f0       	breq	.+2      	; 0x1486 <USB_Device_ProcessControlRequest+0x54>
    1484:	24 c1       	rjmp	.+584    	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
    1486:	2e c0       	rjmp	.+92     	; 0x14e4 <USB_Device_ProcessControlRequest+0xb2>
    1488:	28 30       	cpi	r18, 0x08	; 8
    148a:	09 f4       	brne	.+2      	; 0x148e <USB_Device_ProcessControlRequest+0x5c>
    148c:	f1 c0       	rjmp	.+482    	; 0x1670 <USB_Device_ProcessControlRequest+0x23e>
    148e:	29 30       	cpi	r18, 0x09	; 9
    1490:	09 f4       	brne	.+2      	; 0x1494 <USB_Device_ProcessControlRequest+0x62>
    1492:	00 c1       	rjmp	.+512    	; 0x1694 <USB_Device_ProcessControlRequest+0x262>
    1494:	26 30       	cpi	r18, 0x06	; 6
    1496:	09 f0       	breq	.+2      	; 0x149a <USB_Device_ProcessControlRequest+0x68>
    1498:	1a c1       	rjmp	.+564    	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
    149a:	93 c0       	rjmp	.+294    	; 0x15c2 <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    149c:	80 38       	cpi	r24, 0x80	; 128
    149e:	21 f0       	breq	.+8      	; 0x14a8 <USB_Device_ProcessControlRequest+0x76>
    14a0:	82 38       	cpi	r24, 0x82	; 130
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <USB_Device_ProcessControlRequest+0x74>
    14a4:	14 c1       	rjmp	.+552    	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
    14a6:	08 c0       	rjmp	.+16     	; 0x14b8 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    14a8:	80 91 71 01 	lds	r24, 0x0171
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    14ac:	90 91 72 01 	lds	r25, 0x0172
    14b0:	99 23       	and	r25, r25
    14b2:	71 f0       	breq	.+28     	; 0x14d0 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    14b4:	82 60       	ori	r24, 0x02	; 2
    14b6:	0c c0       	rjmp	.+24     	; 0x14d0 <USB_Device_ProcessControlRequest+0x9e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14b8:	80 91 79 01 	lds	r24, 0x0179
    14bc:	8f 70       	andi	r24, 0x0F	; 15
    14be:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    14c2:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	95 ff       	sbrs	r25, 5
    14ca:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14cc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14d0:	90 91 e8 00 	lds	r25, 0x00E8
    14d4:	97 7f       	andi	r25, 0xF7	; 247
    14d6:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    14da:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    14de:	10 92 f1 00 	sts	0x00F1, r1
    14e2:	d1 c0       	rjmp	.+418    	; 0x1686 <USB_Device_ProcessControlRequest+0x254>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14e4:	88 23       	and	r24, r24
    14e6:	19 f0       	breq	.+6      	; 0x14ee <USB_Device_ProcessControlRequest+0xbc>
    14e8:	82 30       	cpi	r24, 0x02	; 2
    14ea:	09 f0       	breq	.+2      	; 0x14ee <USB_Device_ProcessControlRequest+0xbc>
    14ec:	f0 c0       	rjmp	.+480    	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	8f 71       	andi	r24, 0x1F	; 31
    14f2:	90 70       	andi	r25, 0x00	; 0
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	29 f0       	breq	.+10     	; 0x1502 <USB_Device_ProcessControlRequest+0xd0>
    14f8:	82 30       	cpi	r24, 0x02	; 2
    14fa:	91 05       	cpc	r25, r1
    14fc:	09 f0       	breq	.+2      	; 0x1500 <USB_Device_ProcessControlRequest+0xce>
    14fe:	e7 c0       	rjmp	.+462    	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
    1500:	0b c0       	rjmp	.+22     	; 0x1518 <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1502:	80 91 77 01 	lds	r24, 0x0177
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	09 f0       	breq	.+2      	; 0x150c <USB_Device_ProcessControlRequest+0xda>
    150a:	e1 c0       	rjmp	.+450    	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    150c:	23 30       	cpi	r18, 0x03	; 3
    150e:	09 f0       	breq	.+2      	; 0x1512 <USB_Device_ProcessControlRequest+0xe0>
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	80 93 72 01 	sts	0x0172, r24
    1516:	2c c0       	rjmp	.+88     	; 0x1570 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1518:	80 91 77 01 	lds	r24, 0x0177
    151c:	88 23       	and	r24, r24
    151e:	41 f5       	brne	.+80     	; 0x1570 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1520:	20 91 79 01 	lds	r18, 0x0179
    1524:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1526:	09 f4       	brne	.+2      	; 0x152a <USB_Device_ProcessControlRequest+0xf8>
    1528:	d2 c0       	rjmp	.+420    	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    152a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    152e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1532:	80 ff       	sbrs	r24, 0
    1534:	1d c0       	rjmp	.+58     	; 0x1570 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1536:	80 91 76 01 	lds	r24, 0x0176
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	21 f4       	brne	.+8      	; 0x1546 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    153e:	80 91 eb 00 	lds	r24, 0x00EB
    1542:	80 62       	ori	r24, 0x20	; 32
    1544:	13 c0       	rjmp	.+38     	; 0x156c <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1546:	80 91 eb 00 	lds	r24, 0x00EB
    154a:	80 61       	ori	r24, 0x10	; 16
    154c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 c0       	rjmp	.+4      	; 0x155a <USB_Device_ProcessControlRequest+0x128>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	2a 95       	dec	r18
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <USB_Device_ProcessControlRequest+0x124>
    155e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1562:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1566:	80 91 eb 00 	lds	r24, 0x00EB
    156a:	88 60       	ori	r24, 0x08	; 8
    156c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1570:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1574:	80 91 e8 00 	lds	r24, 0x00E8
    1578:	87 7f       	andi	r24, 0xF7	; 247
    157a:	88 c0       	rjmp	.+272    	; 0x168c <USB_Device_ProcessControlRequest+0x25a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    157c:	88 23       	and	r24, r24
    157e:	09 f0       	breq	.+2      	; 0x1582 <USB_Device_ProcessControlRequest+0x150>
    1580:	a6 c0       	rjmp	.+332    	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1582:	10 91 77 01 	lds	r17, 0x0177
    1586:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1588:	80 91 e3 00 	lds	r24, 0x00E3
    158c:	80 78       	andi	r24, 0x80	; 128
    158e:	81 2b       	or	r24, r17
    1590:	80 93 e3 00 	sts	0x00E3, r24
    1594:	80 91 e8 00 	lds	r24, 0x00E8
    1598:	87 7f       	andi	r24, 0xF7	; 247
    159a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    159e:	86 dd       	rcall	.-1268   	; 0x10ac <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15a0:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    15a4:	80 ff       	sbrs	r24, 0
    15a6:	fc cf       	rjmp	.-8      	; 0x15a0 <USB_Device_ProcessControlRequest+0x16e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    15a8:	80 91 e3 00 	lds	r24, 0x00E3
    15ac:	80 68       	ori	r24, 0x80	; 128
    15ae:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    15b2:	11 23       	and	r17, r17
    15b4:	11 f0       	breq	.+4      	; 0x15ba <USB_Device_ProcessControlRequest+0x188>
    15b6:	83 e0       	ldi	r24, 0x03	; 3
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <USB_Device_ProcessControlRequest+0x18a>
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	80 93 74 01 	sts	0x0174, r24
    15c0:	86 c0       	rjmp	.+268    	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15c2:	80 58       	subi	r24, 0x80	; 128
    15c4:	82 30       	cpi	r24, 0x02	; 2
    15c6:	08 f0       	brcs	.+2      	; 0x15ca <USB_Device_ProcessControlRequest+0x198>
    15c8:	82 c0       	rjmp	.+260    	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    15ca:	80 91 77 01 	lds	r24, 0x0177
    15ce:	90 91 78 01 	lds	r25, 0x0178
    15d2:	23 e0       	ldi	r18, 0x03	; 3
    15d4:	8c 3d       	cpi	r24, 0xDC	; 220
    15d6:	92 07       	cpc	r25, r18
    15d8:	91 f5       	brne	.+100    	; 0x163e <USB_Device_ProcessControlRequest+0x20c>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    15da:	83 e0       	ldi	r24, 0x03	; 3
    15dc:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    15de:	8a e2       	ldi	r24, 0x2A	; 42
    15e0:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    15e2:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    15e4:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    15e6:	de 01       	movw	r26, r28
    15e8:	15 96       	adiw	r26, 0x05	; 5
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    15ee:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    15f0:	61 e2       	ldi	r22, 0x21	; 33
    15f2:	e4 2f       	mov	r30, r20
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	60 93 57 00 	sts	0x0057, r22
    15fa:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
    15fc:	80 ff       	sbrs	r24, 0
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <USB_Device_ProcessControlRequest+0x1d4>
					{
						SerialByte >>= 4;
    1600:	e2 95       	swap	r30
    1602:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1604:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1606:	ef 70       	andi	r30, 0x0F	; 15
    1608:	2e 2f       	mov	r18, r30
    160a:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    160c:	ea 30       	cpi	r30, 0x0A	; 10
    160e:	18 f0       	brcs	.+6      	; 0x1616 <USB_Device_ProcessControlRequest+0x1e4>
    1610:	29 5c       	subi	r18, 0xC9	; 201
    1612:	3f 4f       	sbci	r19, 0xFF	; 255
    1614:	02 c0       	rjmp	.+4      	; 0x161a <USB_Device_ProcessControlRequest+0x1e8>
    1616:	20 5d       	subi	r18, 0xD0	; 208
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	2d 93       	st	X+, r18
    161c:	3d 93       	st	X+, r19
    161e:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1620:	84 31       	cpi	r24, 0x14	; 20
    1622:	91 05       	cpc	r25, r1
    1624:	31 f7       	brne	.-52     	; 0x15f2 <USB_Device_ProcessControlRequest+0x1c0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1626:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1628:	80 91 e8 00 	lds	r24, 0x00E8
    162c:	87 7f       	andi	r24, 0xF7	; 247
    162e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1632:	ce 01       	movw	r24, r28
    1634:	03 96       	adiw	r24, 0x03	; 3
    1636:	6a e2       	ldi	r22, 0x2A	; 42
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	01 dc       	rcall	.-2046   	; 0xe3e <Endpoint_Write_Control_Stream_LE>
    163c:	13 c0       	rjmp	.+38     	; 0x1664 <USB_Device_ProcessControlRequest+0x232>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    163e:	60 91 79 01 	lds	r22, 0x0179
    1642:	ae 01       	movw	r20, r28
    1644:	4f 5f       	subi	r20, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	0e 94 13 01 	call	0x226	; 0x226 <CALLBACK_USB_GetDescriptor>
    164c:	bc 01       	movw	r22, r24
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	09 f4       	brne	.+2      	; 0x1654 <USB_Device_ProcessControlRequest+0x222>
    1652:	3d c0       	rjmp	.+122    	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
    1654:	80 91 e8 00 	lds	r24, 0x00E8
    1658:	87 7f       	andi	r24, 0xF7	; 247
    165a:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	4b dc       	rcall	.-1898   	; 0xefa <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1664:	80 91 e8 00 	lds	r24, 0x00E8
    1668:	8b 77       	andi	r24, 0x7B	; 123
    166a:	80 93 e8 00 	sts	0x00E8, r24
    166e:	2f c0       	rjmp	.+94     	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1670:	80 38       	cpi	r24, 0x80	; 128
    1672:	69 f5       	brne	.+90     	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1674:	80 91 e8 00 	lds	r24, 0x00E8
    1678:	87 7f       	andi	r24, 0xF7	; 247
    167a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    167e:	80 91 70 01 	lds	r24, 0x0170
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1682:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1686:	80 91 e8 00 	lds	r24, 0x00E8
    168a:	8e 77       	andi	r24, 0x7E	; 126
    168c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1690:	0d dd       	rcall	.-1510   	; 0x10ac <Endpoint_ClearStatusStage>
    1692:	1d c0       	rjmp	.+58     	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1694:	88 23       	and	r24, r24
    1696:	d9 f4       	brne	.+54     	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1698:	90 91 77 01 	lds	r25, 0x0177
    169c:	92 30       	cpi	r25, 0x02	; 2
    169e:	b8 f4       	brcc	.+46     	; 0x16ce <USB_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16a0:	80 91 e8 00 	lds	r24, 0x00E8
    16a4:	87 7f       	andi	r24, 0xF7	; 247
    16a6:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    16aa:	90 93 70 01 	sts	0x0170, r25

	Endpoint_ClearStatusStage();
    16ae:	fe dc       	rcall	.-1540   	; 0x10ac <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    16b0:	80 91 70 01 	lds	r24, 0x0170
    16b4:	88 23       	and	r24, r24
    16b6:	21 f4       	brne	.+8      	; 0x16c0 <USB_Device_ProcessControlRequest+0x28e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    16b8:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    16bc:	87 ff       	sbrs	r24, 7
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <USB_Device_ProcessControlRequest+0x292>
    16c0:	84 e0       	ldi	r24, 0x04	; 4
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <USB_Device_ProcessControlRequest+0x294>
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	80 93 74 01 	sts	0x0174, r24

	EVENT_USB_Device_ConfigurationChanged();
    16ca:	0e 94 f5 00 	call	0x1ea	; 0x1ea <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16ce:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    16d2:	83 ff       	sbrs	r24, 3
    16d4:	0a c0       	rjmp	.+20     	; 0x16ea <USB_Device_ProcessControlRequest+0x2b8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16d6:	80 91 e8 00 	lds	r24, 0x00E8
    16da:	87 7f       	andi	r24, 0xF7	; 247
    16dc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    16e0:	80 91 eb 00 	lds	r24, 0x00EB
    16e4:	80 62       	ori	r24, 0x20	; 32
    16e6:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    16ea:	ac 96       	adiw	r28, 0x2c	; 44
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	1f 91       	pop	r17
    16fc:	08 95       	ret

000016fe <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    16fe:	08 95       	ret

00001700 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1700:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1702:	80 91 74 01 	lds	r24, 0x0174
    1706:	88 23       	and	r24, r24
    1708:	a9 f0       	breq	.+42     	; 0x1734 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    170a:	80 91 e9 00 	lds	r24, 0x00E9
    170e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1710:	90 91 ec 00 	lds	r25, 0x00EC
    1714:	90 ff       	sbrs	r25, 0
    1716:	02 c0       	rjmp	.+4      	; 0x171c <USB_USBTask+0x1c>
    1718:	10 e8       	ldi	r17, 0x80	; 128
    171a:	01 c0       	rjmp	.+2      	; 0x171e <USB_USBTask+0x1e>
    171c:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    171e:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1720:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1724:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1728:	83 ff       	sbrs	r24, 3
    172a:	01 c0       	rjmp	.+2      	; 0x172e <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
    172c:	82 de       	rcall	.-764    	; 0x1432 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    172e:	1f 70       	andi	r17, 0x0F	; 15
    1730:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1734:	1f 91       	pop	r17
    1736:	08 95       	ret

00001738 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    173e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1742:	83 ff       	sbrs	r24, 3
    1744:	33 c0       	rjmp	.+102    	; 0x17ac <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1746:	88 81       	ld	r24, Y
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	20 91 79 01 	lds	r18, 0x0179
    174e:	30 91 7a 01 	lds	r19, 0x017A
    1752:	28 17       	cp	r18, r24
    1754:	39 07       	cpc	r19, r25
    1756:	51 f5       	brne	.+84     	; 0x17ac <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    1758:	80 91 76 01 	lds	r24, 0x0176
    175c:	8e 3f       	cpi	r24, 0xFE	; 254
    175e:	79 f0       	breq	.+30     	; 0x177e <MS_Device_ProcessControlRequest+0x46>
    1760:	8f 3f       	cpi	r24, 0xFF	; 255
    1762:	21 f5       	brne	.+72     	; 0x17ac <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1764:	80 91 75 01 	lds	r24, 0x0175
    1768:	81 32       	cpi	r24, 0x21	; 33
    176a:	01 f5       	brne	.+64     	; 0x17ac <MS_Device_ProcessControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    176c:	80 91 e8 00 	lds	r24, 0x00E8
    1770:	87 7f       	andi	r24, 0xF7	; 247
    1772:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1776:	9a dc       	rcall	.-1740   	; 0x10ac <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	88 af       	std	Y+56, r24	; 0x38
    177c:	17 c0       	rjmp	.+46     	; 0x17ac <MS_Device_ProcessControlRequest+0x74>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    177e:	80 91 75 01 	lds	r24, 0x0175
    1782:	81 3a       	cpi	r24, 0xA1	; 161
    1784:	99 f4       	brne	.+38     	; 0x17ac <MS_Device_ProcessControlRequest+0x74>
    1786:	80 91 e8 00 	lds	r24, 0x00E8
    178a:	87 7f       	andi	r24, 0xF7	; 247
    178c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1790:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1794:	80 ff       	sbrs	r24, 0
    1796:	fc cf       	rjmp	.-8      	; 0x1790 <MS_Device_ProcessControlRequest+0x58>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1798:	8b 85       	ldd	r24, Y+11	; 0x0b
    179a:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    179c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17a0:	80 91 e8 00 	lds	r24, 0x00E8
    17a4:	8e 77       	andi	r24, 0x7E	; 126
    17a6:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    17aa:	80 dc       	rcall	.-1792   	; 0x10ac <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	08 95       	ret

000017b2 <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    17b8:	0c 96       	adiw	r24, 0x0c	; 12
    17ba:	fc 01       	movw	r30, r24
    17bc:	8d e2       	ldi	r24, 0x2D	; 45
    17be:	df 01       	movw	r26, r30
    17c0:	1d 92       	st	X+, r1
    17c2:	8a 95       	dec	r24
    17c4:	e9 f7       	brne	.-6      	; 0x17c0 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    17ca:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    17cc:	ce 01       	movw	r24, r28
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	61 e0       	ldi	r22, 0x01	; 1
    17d2:	28 dc       	rcall	.-1968   	; 0x1024 <Endpoint_ConfigureEndpointTable>
    17d4:	88 23       	and	r24, r24
    17d6:	29 f0       	breq	.+10     	; 0x17e2 <MS_Device_ConfigureEndpoints+0x30>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    17d8:	ce 01       	movw	r24, r28
    17da:	06 96       	adiw	r24, 0x06	; 6
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	22 dc       	rcall	.-1980   	; 0x1024 <Endpoint_ConfigureEndpointTable>
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <MS_Device_ConfigureEndpoints+0x32>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
    17e2:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	08 95       	ret

000017ea <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    17ea:	cf 92       	push	r12
    17ec:	df 92       	push	r13
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <MS_Device_USBTask+0x12>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1802:	80 91 74 01 	lds	r24, 0x0174
    1806:	84 30       	cpi	r24, 0x04	; 4
    1808:	09 f0       	breq	.+2      	; 0x180c <MS_Device_USBTask+0x22>
    180a:	15 c1       	rjmp	.+554    	; 0x1a36 <MS_Device_USBTask+0x24c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    180c:	f8 01       	movw	r30, r16
    180e:	86 81       	ldd	r24, Z+6	; 0x06
    1810:	8f 70       	andi	r24, 0x0F	; 15
    1812:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1816:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    181a:	82 ff       	sbrs	r24, 2
    181c:	d2 c0       	rjmp	.+420    	; 0x19c2 <MS_Device_USBTask+0x1d8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    181e:	86 81       	ldd	r24, Z+6	; 0x06
    1820:	8f 70       	andi	r24, 0x0F	; 15
    1822:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
    1826:	1a 82       	std	Y+2, r1	; 0x02
    1828:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    182a:	2c e0       	ldi	r18, 0x0C	; 12
    182c:	c2 2e       	mov	r12, r18
    182e:	d1 2c       	mov	r13, r1
    1830:	c0 0e       	add	r12, r16
    1832:	d1 1e       	adc	r13, r17
    1834:	7e 01       	movw	r14, r28
    1836:	08 94       	sec
    1838:	e1 1c       	adc	r14, r1
    183a:	f1 1c       	adc	r15, r1
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <MS_Device_USBTask+0x5e>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    183e:	f8 01       	movw	r30, r16
    1840:	80 ad       	ldd	r24, Z+56	; 0x38
    1842:	88 23       	and	r24, r24
    1844:	09 f0       	breq	.+2      	; 0x1848 <MS_Device_USBTask+0x5e>
    1846:	bd c0       	rjmp	.+378    	; 0x19c2 <MS_Device_USBTask+0x1d8>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1848:	c6 01       	movw	r24, r12
    184a:	6f e0       	ldi	r22, 0x0F	; 15
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	a7 01       	movw	r20, r14
    1850:	99 da       	rcall	.-2766   	; 0xd84 <Endpoint_Read_Stream_LE>
    1852:	85 30       	cpi	r24, 0x05	; 5
    1854:	a1 f3       	breq	.-24     	; 0x183e <MS_Device_USBTask+0x54>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1856:	f8 01       	movw	r30, r16
    1858:	84 85       	ldd	r24, Z+12	; 0x0c
    185a:	95 85       	ldd	r25, Z+13	; 0x0d
    185c:	a6 85       	ldd	r26, Z+14	; 0x0e
    185e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1860:	85 35       	cpi	r24, 0x55	; 85
    1862:	f3 e5       	ldi	r31, 0x53	; 83
    1864:	9f 07       	cpc	r25, r31
    1866:	f2 e4       	ldi	r31, 0x42	; 66
    1868:	af 07       	cpc	r26, r31
    186a:	f3 e4       	ldi	r31, 0x43	; 67
    186c:	bf 07       	cpc	r27, r31
    186e:	81 f4       	brne	.+32     	; 0x1890 <MS_Device_USBTask+0xa6>
    1870:	f8 01       	movw	r30, r16
    1872:	91 8d       	ldd	r25, Z+25	; 0x19
    1874:	83 85       	ldd	r24, Z+11	; 0x0b
    1876:	98 17       	cp	r25, r24
    1878:	58 f4       	brcc	.+22     	; 0x1890 <MS_Device_USBTask+0xa6>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    187a:	80 8d       	ldd	r24, Z+24	; 0x18
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	8f 71       	andi	r24, 0x1F	; 31
    1880:	90 70       	andi	r25, 0x00	; 0
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	29 f4       	brne	.+10     	; 0x1890 <MS_Device_USBTask+0xa6>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    1886:	82 8d       	ldd	r24, Z+26	; 0x1a
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1888:	88 23       	and	r24, r24
    188a:	11 f0       	breq	.+4      	; 0x1890 <MS_Device_USBTask+0xa6>
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    188c:	81 31       	cpi	r24, 0x11	; 17
    188e:	80 f0       	brcs	.+32     	; 0x18b0 <MS_Device_USBTask+0xc6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1890:	80 91 eb 00 	lds	r24, 0x00EB
    1894:	80 62       	ori	r24, 0x20	; 32
    1896:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    189a:	f8 01       	movw	r30, r16
    189c:	81 81       	ldd	r24, Z+1	; 0x01
    189e:	8f 70       	andi	r24, 0x0F	; 15
    18a0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    18a4:	80 91 eb 00 	lds	r24, 0x00EB
    18a8:	80 62       	ori	r24, 0x20	; 32
    18aa:	80 93 eb 00 	sts	0x00EB, r24
    18ae:	89 c0       	rjmp	.+274    	; 0x19c2 <MS_Device_USBTask+0x1d8>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    18b0:	1a 82       	std	Y+2, r1	; 0x02
    18b2:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    18b4:	9b e1       	ldi	r25, 0x1B	; 27
    18b6:	c9 2e       	mov	r12, r25
    18b8:	d1 2c       	mov	r13, r1
    18ba:	c0 0e       	add	r12, r16
    18bc:	d1 1e       	adc	r13, r17
    18be:	7e 01       	movw	r14, r28
    18c0:	08 94       	sec
    18c2:	e1 1c       	adc	r14, r1
    18c4:	f1 1c       	adc	r15, r1
    18c6:	05 c0       	rjmp	.+10     	; 0x18d2 <MS_Device_USBTask+0xe8>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    18c8:	f8 01       	movw	r30, r16
    18ca:	80 ad       	ldd	r24, Z+56	; 0x38
    18cc:	88 23       	and	r24, r24
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <MS_Device_USBTask+0xe8>
    18d0:	78 c0       	rjmp	.+240    	; 0x19c2 <MS_Device_USBTask+0x1d8>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    18d2:	f8 01       	movw	r30, r16
    18d4:	62 8d       	ldd	r22, Z+26	; 0x1a
    18d6:	c6 01       	movw	r24, r12
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	a7 01       	movw	r20, r14
    18dc:	53 da       	rcall	.-2906   	; 0xd84 <Endpoint_Read_Stream_LE>
    18de:	85 30       	cpi	r24, 0x05	; 5
    18e0:	99 f3       	breq	.-26     	; 0x18c8 <MS_Device_USBTask+0xde>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    18e2:	80 91 e8 00 	lds	r24, 0x00E8
    18e6:	8b 77       	andi	r24, 0x7B	; 123
    18e8:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    18ec:	f8 01       	movw	r30, r16
    18ee:	80 8d       	ldd	r24, Z+24	; 0x18
    18f0:	87 ff       	sbrs	r24, 7
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <MS_Device_USBTask+0x112>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18f4:	81 81       	ldd	r24, Z+1	; 0x01
    18f6:	8f 70       	andi	r24, 0x0F	; 15
    18f8:	80 93 e9 00 	sts	0x00E9, r24
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    18fc:	c8 01       	movw	r24, r16
    18fe:	0e 94 03 01 	call	0x206	; 0x206 <CALLBACK_MS_Device_SCSICommandReceived>
	  return false;

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
    1902:	91 e0       	ldi	r25, 0x01	; 1
    1904:	98 27       	eor	r25, r24
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1906:	f8 01       	movw	r30, r16
    1908:	97 ab       	std	Z+55, r25	; 0x37
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    190a:	25 e5       	ldi	r18, 0x55	; 85
    190c:	33 e5       	ldi	r19, 0x53	; 83
    190e:	42 e4       	ldi	r20, 0x42	; 66
    1910:	53 e5       	ldi	r21, 0x53	; 83
    1912:	23 a7       	std	Z+43, r18	; 0x2b
    1914:	34 a7       	std	Z+44, r19	; 0x2c
    1916:	45 a7       	std	Z+45, r20	; 0x2d
    1918:	56 a7       	std	Z+46, r21	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    191a:	20 89       	ldd	r18, Z+16	; 0x10
    191c:	31 89       	ldd	r19, Z+17	; 0x11
    191e:	42 89       	ldd	r20, Z+18	; 0x12
    1920:	53 89       	ldd	r21, Z+19	; 0x13
    1922:	27 a7       	std	Z+47, r18	; 0x2f
    1924:	30 ab       	std	Z+48, r19	; 0x30
    1926:	41 ab       	std	Z+49, r20	; 0x31
    1928:	52 ab       	std	Z+50, r21	; 0x32
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    192a:	24 89       	ldd	r18, Z+20	; 0x14
    192c:	35 89       	ldd	r19, Z+21	; 0x15
    192e:	46 89       	ldd	r20, Z+22	; 0x16
    1930:	57 89       	ldd	r21, Z+23	; 0x17
    1932:	23 ab       	std	Z+51, r18	; 0x33
    1934:	34 ab       	std	Z+52, r19	; 0x34
    1936:	45 ab       	std	Z+53, r20	; 0x35
    1938:	56 ab       	std	Z+54, r21	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    193a:	88 23       	and	r24, r24
    193c:	51 f4       	brne	.+20     	; 0x1952 <MS_Device_USBTask+0x168>
    193e:	21 15       	cp	r18, r1
    1940:	31 05       	cpc	r19, r1
    1942:	41 05       	cpc	r20, r1
    1944:	51 05       	cpc	r21, r1
    1946:	29 f0       	breq	.+10     	; 0x1952 <MS_Device_USBTask+0x168>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1948:	80 91 eb 00 	lds	r24, 0x00EB
    194c:	80 62       	ori	r24, 0x20	; 32
    194e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1952:	f8 01       	movw	r30, r16
    1954:	86 81       	ldd	r24, Z+6	; 0x06
    1956:	8f 70       	andi	r24, 0x0F	; 15
    1958:	80 93 e9 00 	sts	0x00E9, r24
    195c:	04 c0       	rjmp	.+8      	; 0x1966 <MS_Device_USBTask+0x17c>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    195e:	f8 01       	movw	r30, r16
    1960:	80 ad       	ldd	r24, Z+56	; 0x38
    1962:	88 23       	and	r24, r24
    1964:	71 f5       	brne	.+92     	; 0x19c2 <MS_Device_USBTask+0x1d8>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1966:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    196a:	85 fd       	sbrc	r24, 5
    196c:	f8 cf       	rjmp	.-16     	; 0x195e <MS_Device_USBTask+0x174>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    196e:	f8 01       	movw	r30, r16
    1970:	81 81       	ldd	r24, Z+1	; 0x01
    1972:	8f 70       	andi	r24, 0x0F	; 15
    1974:	80 93 e9 00 	sts	0x00E9, r24
    1978:	04 c0       	rjmp	.+8      	; 0x1982 <MS_Device_USBTask+0x198>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    197a:	f8 01       	movw	r30, r16
    197c:	80 ad       	ldd	r24, Z+56	; 0x38
    197e:	88 23       	and	r24, r24
    1980:	01 f5       	brne	.+64     	; 0x19c2 <MS_Device_USBTask+0x1d8>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1982:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    1986:	85 fd       	sbrc	r24, 5
    1988:	f8 cf       	rjmp	.-16     	; 0x197a <MS_Device_USBTask+0x190>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    198a:	1a 82       	std	Y+2, r1	; 0x02
    198c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    198e:	8b e2       	ldi	r24, 0x2B	; 43
    1990:	c8 2e       	mov	r12, r24
    1992:	d1 2c       	mov	r13, r1
    1994:	c0 0e       	add	r12, r16
    1996:	d1 1e       	adc	r13, r17
    1998:	7e 01       	movw	r14, r28
    199a:	08 94       	sec
    199c:	e1 1c       	adc	r14, r1
    199e:	f1 1c       	adc	r15, r1
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <MS_Device_USBTask+0x1c0>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    19a2:	f8 01       	movw	r30, r16
    19a4:	80 ad       	ldd	r24, Z+56	; 0x38
    19a6:	88 23       	and	r24, r24
    19a8:	61 f4       	brne	.+24     	; 0x19c2 <MS_Device_USBTask+0x1d8>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    19aa:	c6 01       	movw	r24, r12
    19ac:	6d e0       	ldi	r22, 0x0D	; 13
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	a7 01       	movw	r20, r14
    19b2:	36 d9       	rcall	.-3476   	; 0xc20 <Endpoint_Write_Stream_LE>
    19b4:	85 30       	cpi	r24, 0x05	; 5
    19b6:	a9 f3       	breq	.-22     	; 0x19a2 <MS_Device_USBTask+0x1b8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19b8:	80 91 e8 00 	lds	r24, 0x00E8
    19bc:	8e 77       	andi	r24, 0x7E	; 126
    19be:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    19c2:	f8 01       	movw	r30, r16
    19c4:	80 ad       	ldd	r24, Z+56	; 0x38
    19c6:	88 23       	and	r24, r24
    19c8:	b1 f1       	breq	.+108    	; 0x1a36 <MS_Device_USBTask+0x24c>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    19ca:	26 81       	ldd	r18, Z+6	; 0x06
    19cc:	2f 70       	andi	r18, 0x0F	; 15
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	ac 01       	movw	r20, r24
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <MS_Device_USBTask+0x1f0>
    19d6:	44 0f       	add	r20, r20
    19d8:	55 1f       	adc	r21, r21
    19da:	2a 95       	dec	r18
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <MS_Device_USBTask+0x1ec>
    19de:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    19e2:	10 92 ea 00 	sts	0x00EA, r1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    19e6:	21 81       	ldd	r18, Z+1	; 0x01
    19e8:	2f 70       	andi	r18, 0x0F	; 15
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <MS_Device_USBTask+0x206>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	2a 95       	dec	r18
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <MS_Device_USBTask+0x202>
    19f4:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    19f8:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19fc:	86 81       	ldd	r24, Z+6	; 0x06
    19fe:	8f 70       	andi	r24, 0x0F	; 15
    1a00:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1a04:	80 91 eb 00 	lds	r24, 0x00EB
    1a08:	80 61       	ori	r24, 0x10	; 16
    1a0a:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1a0e:	80 91 eb 00 	lds	r24, 0x00EB
    1a12:	88 60       	ori	r24, 0x08	; 8
    1a14:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a18:	81 81       	ldd	r24, Z+1	; 0x01
    1a1a:	8f 70       	andi	r24, 0x0F	; 15
    1a1c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1a20:	80 91 eb 00 	lds	r24, 0x00EB
    1a24:	80 61       	ori	r24, 0x10	; 16
    1a26:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1a2a:	80 91 eb 00 	lds	r24, 0x00EB
    1a2e:	88 60       	ori	r24, 0x08	; 8
    1a30:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1a34:	10 ae       	std	Z+56, r1	; 0x38
	}
}
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	ff 90       	pop	r15
    1a44:	ef 90       	pop	r14
    1a46:	df 90       	pop	r13
    1a48:	cf 90       	pop	r12
    1a4a:	08 95       	ret

00001a4c <_exit>:
    1a4c:	f8 94       	cli

00001a4e <__stop_program>:
    1a4e:	ff cf       	rjmp	.-2      	; 0x1a4e <__stop_program>
