
VirtualSerialMassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  00001ef6  00001f8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ef6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008001dc  008001dc  00002066  2**0
                  ALLOC
  3 .stab         00000e64  00000000  00000000  00002068  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000930  00000000  00000000  00002ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000528  00000000  00000000  000037fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e07  00000000  00000000  00003d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000af74  00000000  00000000  00004b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000025a7  00000000  00000000  0000fa9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000086f2  00000000  00000000  00012046  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007d0  00000000  00000000  0001a738  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000418e  00000000  00000000  0001af08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000055ff  00000000  00000000  0001f096  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000012c4  00000000  00000000  00024695  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000808  00000000  00000000  00025959  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	ce c0       	rjmp	.+412    	; 0x1a2 <__bad_interrupt>
       6:	00 00       	nop
       8:	cc c0       	rjmp	.+408    	; 0x1a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ca c0       	rjmp	.+404    	; 0x1a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c0       	rjmp	.+400    	; 0x1a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c0       	rjmp	.+396    	; 0x1a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c0       	rjmp	.+392    	; 0x1a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c0       	rjmp	.+388    	; 0x1a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c0       	rjmp	.+384    	; 0x1a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c0       	rjmp	.+380    	; 0x1a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__vector_10>
      2c:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__vector_11>
      30:	b8 c0       	rjmp	.+368    	; 0x1a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c0       	rjmp	.+364    	; 0x1a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	b4 c0       	rjmp	.+360    	; 0x1a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c0       	rjmp	.+356    	; 0x1a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c0       	rjmp	.+352    	; 0x1a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c0       	rjmp	.+348    	; 0x1a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	ac c0       	rjmp	.+344    	; 0x1a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c0       	rjmp	.+340    	; 0x1a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c0       	rjmp	.+336    	; 0x1a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	a6 c0       	rjmp	.+332    	; 0x1a2 <__bad_interrupt>
      56:	00 00       	nop
      58:	a4 c0       	rjmp	.+328    	; 0x1a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a2 c0       	rjmp	.+324    	; 0x1a2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a0 c0       	rjmp	.+320    	; 0x1a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	9e c0       	rjmp	.+316    	; 0x1a2 <__bad_interrupt>
      66:	00 00       	nop
      68:	9c c0       	rjmp	.+312    	; 0x1a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9a c0       	rjmp	.+308    	; 0x1a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c0       	rjmp	.+304    	; 0x1a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c0       	rjmp	.+300    	; 0x1a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c0       	rjmp	.+296    	; 0x1a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c0       	rjmp	.+292    	; 0x1a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	90 c0       	rjmp	.+288    	; 0x1a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c0       	rjmp	.+284    	; 0x1a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c0       	rjmp	.+280    	; 0x1a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8a c0       	rjmp	.+276    	; 0x1a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c0       	rjmp	.+272    	; 0x1a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	86 c0       	rjmp	.+268    	; 0x1a2 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 ef 02 01 08 eb 03 68 20 01 00 01 02     ..........h ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 5d 00 03 01 00 c0 32 08 0b 00 02 02 02 01     ..].....2.......
      ba:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
      ca:	24 02 06 05 24 06 00 01 07 05 81 03 08 00 ff 09     $...$...........
      da:	04 01 00 02 0a 00 00 00 07 05 03 02 10 00 05 07     ................
      ea:	05 82 02 10 00 05 09 04 02 00 02 08 06 50 00 07     .............P..
      fa:	05 84 02 40 00 05 07 05 05 02 40 00 05              ...@......@..

00000107 <LanguageString>:
     107:	04 03 09 04                                         ....

0000010b <ManufacturerString>:
     10b:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     11b:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000125 <ProductString>:
     125:	3e 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     >.L.U.F.A. .C.D.
     135:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 61 00     C. .a.n.d. .M.a.
     145:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     155:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...
     165:	00                                                  .

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d0 e2       	ldi	r29, 0x20	; 32
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	e6 ef       	ldi	r30, 0xF6	; 246
     17a:	fe e1       	ldi	r31, 0x1E	; 30
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ac 3d       	cpi	r26, 0xDC	; 220
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	ac ed       	ldi	r26, 0xDC	; 220
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a8 3f       	cpi	r26, 0xF8	; 248
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	7c d0       	rcall	.+248    	; 0x296 <main>
     19e:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <_exit>

000001a2 <__bad_interrupt>:
     1a2:	2e cf       	rjmp	.-420    	; 0x0 <__vectors>

000001a4 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1a4:	9b b1       	in	r25, 0x0b	; 11
     1a6:	9f 70       	andi	r25, 0x0F	; 15
     1a8:	98 2b       	or	r25, r24
     1aa:	9b b9       	out	0x0b, r25	; 11
			}
     1ac:	08 95       	ret

000001ae <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1ae:	84 b7       	in	r24, 0x34	; 52
     1b0:	87 7f       	andi	r24, 0xF7	; 247
     1b2:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1b4:	88 e1       	ldi	r24, 0x18	; 24
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	80 93 60 00 	sts	0x0060, r24
     1be:	10 92 60 00 	sts	0x0060, r1
     1c2:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	80 e8       	ldi	r24, 0x80	; 128
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	80 93 61 00 	sts	0x0061, r24
     1d0:	90 93 61 00 	sts	0x0061, r25
     1d4:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1d6:	8a b1       	in	r24, 0x0a	; 10
     1d8:	80 6f       	ori	r24, 0xF0	; 240
     1da:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1dc:	8b b1       	in	r24, 0x0b	; 11
     1de:	8f 70       	andi	r24, 0x0F	; 15
     1e0:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     1e2:	84 b1       	in	r24, 0x04	; 4
     1e4:	8f 71       	andi	r24, 0x1F	; 31
     1e6:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     1e8:	8d b1       	in	r24, 0x0d	; 13
     1ea:	8f 7c       	andi	r24, 0xCF	; 207
     1ec:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     1ee:	85 b1       	in	r24, 0x05	; 5
     1f0:	80 6e       	ori	r24, 0xE0	; 224
     1f2:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     1f4:	8e b1       	in	r24, 0x0e	; 14
     1f6:	80 63       	ori	r24, 0x30	; 48
     1f8:	8e b9       	out	0x0e, r24	; 14
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     1fa:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     1fc:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     1fe:	84 b1       	in	r24, 0x04	; 4
     200:	86 60       	ori	r24, 0x06	; 6
     202:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     204:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     206:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     208:	8d b5       	in	r24, 0x2d	; 45
     20a:	81 60       	ori	r24, 0x01	; 1
     20c:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     20e:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     210:	8c e5       	ldi	r24, 0x5C	; 92
     212:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     214:	8d b1       	in	r24, 0x0d	; 13
     216:	83 60       	ori	r24, 0x03	; 3
     218:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     21a:	8e b1       	in	r24, 0x0e	; 14
     21c:	83 60       	ori	r24, 0x03	; 3
     21e:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	LEDs_Init();
	Joystick_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     220:	0e 94 75 09 	call	0x12ea	; 0x12ea <USB_Init>

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     224:	84 d3       	rcall	.+1800   	; 0x92e <DataflashManager_CheckDataflashOperation>
     226:	88 23       	and	r24, r24
     228:	19 f4       	brne	.+6      	; 0x230 <SetupHardware+0x82>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     22a:	80 e9       	ldi	r24, 0x90	; 144
     22c:	bb df       	rcall	.-138    	; 0x1a4 <LEDs_SetAllLEDs>
     22e:	ff cf       	rjmp	.-2      	; 0x22e <SetupHardware+0x80>
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     230:	30 c3       	rjmp	.+1632   	; 0x892 <DataflashManager_ResetDataflashProtections>

00000232 <CheckJoystickMovement>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     232:	23 b1       	in	r18, 0x03	; 3
     234:	8c b1       	in	r24, 0x0c	; 12
     236:	80 95       	com	r24
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	80 73       	andi	r24, 0x30	; 48
     23c:	90 70       	andi	r25, 0x00	; 0
     23e:	95 95       	asr	r25
     240:	87 95       	ror	r24
     242:	20 95       	com	r18
     244:	20 7e       	andi	r18, 0xE0	; 224
     246:	28 2b       	or	r18, r24
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
     248:	27 fd       	sbrc	r18, 7
     24a:	0b c0       	rjmp	.+22     	; 0x262 <CheckJoystickMovement+0x30>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
     24c:	24 fd       	sbrc	r18, 4
     24e:	0c c0       	rjmp	.+24     	; 0x268 <CheckJoystickMovement+0x36>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
     250:	26 fd       	sbrc	r18, 6
     252:	0d c0       	rjmp	.+26     	; 0x26e <CheckJoystickMovement+0x3c>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
     254:	23 fd       	sbrc	r18, 3
     256:	0e c0       	rjmp	.+28     	; 0x274 <CheckJoystickMovement+0x42>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
     258:	25 fd       	sbrc	r18, 5
     25a:	0f c0       	rjmp	.+30     	; 0x27a <CheckJoystickMovement+0x48>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
     25c:	10 92 ea 01 	sts	0x01EA, r1
     260:	08 95       	ret
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	0b c0       	rjmp	.+22     	; 0x27e <CheckJoystickMovement+0x4c>
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportString = "Joystick Down\r\n";
     268:	8e e0       	ldi	r24, 0x0E	; 14
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	08 c0       	rjmp	.+16     	; 0x27e <CheckJoystickMovement+0x4c>
	else if (JoyStatus_LCL & JOY_LEFT)
	  ReportString = "Joystick Left\r\n";
     26e:	8e e1       	ldi	r24, 0x1E	; 30
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	05 c0       	rjmp	.+10     	; 0x27e <CheckJoystickMovement+0x4c>
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
     274:	8e e2       	ldi	r24, 0x2E	; 46
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	02 c0       	rjmp	.+4      	; 0x27e <CheckJoystickMovement+0x4c>
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
     27a:	8f e3       	ldi	r24, 0x3F	; 63
     27c:	91 e0       	ldi	r25, 0x01	; 1
	else
	  ActionSent = false;

	if ((ReportString != NULL) && (ActionSent == false))
     27e:	20 91 ea 01 	lds	r18, 0x01EA
     282:	22 23       	and	r18, r18
     284:	39 f4       	brne	.+14     	; 0x294 <CheckJoystickMovement+0x62>
	{
		ActionSent = true;
     286:	21 e0       	ldi	r18, 0x01	; 1
     288:	20 93 ea 01 	sts	0x01EA, r18

		/* Write the string to the virtual COM port via the created character stream */
		fputs(ReportString, &USBSerialStream);
     28c:	6c ed       	ldi	r22, 0xDC	; 220
     28e:	71 e0       	ldi	r23, 0x01	; 1
     290:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <fputs>
     294:	08 95       	ret

00000296 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     296:	8b df       	rcall	.-234    	; 0x1ae <SetupHardware>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     298:	82 e5       	ldi	r24, 0x52	; 82
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	6c ed       	ldi	r22, 0xDC	; 220
     29e:	71 e0       	ldi	r23, 0x01	; 1
     2a0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <CDC_Device_CreateStream>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2a4:	80 e1       	ldi	r24, 0x10	; 16
     2a6:	7e df       	rcall	.-260    	; 0x1a4 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     2a8:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		CheckJoystickMovement();
     2aa:	c3 df       	rcall	.-122    	; 0x232 <CheckJoystickMovement>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     2ac:	82 e5       	ldi	r24, 0x52	; 82
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2b4:	82 e5       	ldi	r24, 0x52	; 82
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <CDC_Device_USBTask>
		MS_Device_USBTask(&Disk_MS_Interface);
     2bc:	8d e6       	ldi	r24, 0x6D	; 109
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <MS_Device_USBTask>
		USB_USBTask();
     2c4:	0e 94 05 0c 	call	0x180a	; 0x180a <USB_USBTask>
     2c8:	f0 cf       	rjmp	.-32     	; 0x2aa <main+0x14>

000002ca <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     2ca:	80 ea       	ldi	r24, 0xA0	; 160
}
     2cc:	6b cf       	rjmp	.-298    	; 0x1a4 <LEDs_SetAllLEDs>

000002ce <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2ce:	80 e1       	ldi	r24, 0x10	; 16
}
     2d0:	69 cf       	rjmp	.-302    	; 0x1a4 <LEDs_SetAllLEDs>

000002d2 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     2d2:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2d4:	82 e5       	ldi	r24, 0x52	; 82
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	0e 94 ce 0c 	call	0x199c	; 0x199c <CDC_Device_ConfigureEndpoints>
     2dc:	18 2f       	mov	r17, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     2de:	8d e6       	ldi	r24, 0x6D	; 109
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <MS_Device_ConfigureEndpoints>
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2e6:	21 2f       	mov	r18, r17
     2e8:	30 e0       	ldi	r19, 0x00	; 0
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     2ea:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2ec:	28 23       	and	r18, r24
     2ee:	39 23       	and	r19, r25
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2f0:	20 ff       	sbrs	r18, 0
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <EVENT_USB_Device_ConfigurationChanged+0x26>
     2f4:	80 e6       	ldi	r24, 0x60	; 96
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <EVENT_USB_Device_ConfigurationChanged+0x28>
     2f8:	80 e9       	ldi	r24, 0x90	; 144
     2fa:	54 df       	rcall	.-344    	; 0x1a4 <LEDs_SetAllLEDs>
}
     2fc:	1f 91       	pop	r17
     2fe:	08 95       	ret

00000300 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     300:	82 e5       	ldi	r24, 0x52	; 82
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	0e 94 21 0c 	call	0x1842	; 0x1842 <CDC_Device_ProcessControlRequest>
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     308:	8d e6       	ldi	r24, 0x6D	; 109
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <MS_Device_ProcessControlRequest>

00000310 <CALLBACK_MS_Device_SCSICommandReceived>:
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     318:	80 e2       	ldi	r24, 0x20	; 32
     31a:	44 df       	rcall	.-376    	; 0x1a4 <LEDs_SetAllLEDs>
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     31c:	ce 01       	movw	r24, r28
     31e:	96 d3       	rcall	.+1836   	; 0xa4c <SCSI_DecodeSCSICommand>
     320:	18 2f       	mov	r17, r24
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     322:	80 e6       	ldi	r24, 0x60	; 96
     324:	3f df       	rcall	.-386    	; 0x1a4 <LEDs_SetAllLEDs>

	return CommandSuccess;
}
     326:	81 2f       	mov	r24, r17
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	08 95       	ret

00000330 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     330:	92 30       	cpi	r25, 0x02	; 2
     332:	29 f0       	breq	.+10     	; 0x33e <CALLBACK_USB_GetDescriptor+0xe>
     334:	93 30       	cpi	r25, 0x03	; 3
     336:	41 f0       	breq	.+16     	; 0x348 <CALLBACK_USB_GetDescriptor+0x18>
     338:	91 30       	cpi	r25, 0x01	; 1
     33a:	e9 f4       	brne	.+58     	; 0x376 <CALLBACK_USB_GetDescriptor+0x46>
     33c:	17 c0       	rjmp	.+46     	; 0x36c <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     33e:	2d e5       	ldi	r18, 0x5D	; 93
     340:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     342:	ea ea       	ldi	r30, 0xAA	; 170
     344:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     346:	1b c0       	rjmp	.+54     	; 0x37e <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     348:	81 30       	cpi	r24, 0x01	; 1
     34a:	41 f0       	breq	.+16     	; 0x35c <CALLBACK_USB_GetDescriptor+0x2c>
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	18 f0       	brcs	.+6      	; 0x356 <CALLBACK_USB_GetDescriptor+0x26>
     350:	82 30       	cpi	r24, 0x02	; 2
     352:	89 f4       	brne	.+34     	; 0x376 <CALLBACK_USB_GetDescriptor+0x46>
     354:	06 c0       	rjmp	.+12     	; 0x362 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     356:	e7 e0       	ldi	r30, 0x07	; 7
     358:	f1 e0       	ldi	r31, 0x01	; 1
     35a:	05 c0       	rjmp	.+10     	; 0x366 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     35c:	eb e0       	ldi	r30, 0x0B	; 11
     35e:	f1 e0       	ldi	r31, 0x01	; 1
     360:	02 c0       	rjmp	.+4      	; 0x366 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     362:	e5 e2       	ldi	r30, 0x25	; 37
     364:	f1 e0       	ldi	r31, 0x01	; 1
     366:	24 91       	lpm	r18, Z+
     368:	30 e0       	ldi	r19, 0x00	; 0
					break;
     36a:	09 c0       	rjmp	.+18     	; 0x37e <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     36c:	22 e1       	ldi	r18, 0x12	; 18
     36e:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     370:	e8 e9       	ldi	r30, 0x98	; 152
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	04 c0       	rjmp	.+8      	; 0x37e <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     37a:	e0 e0       	ldi	r30, 0x00	; 0
     37c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     37e:	da 01       	movw	r26, r20
     380:	11 96       	adiw	r26, 0x01	; 1
     382:	fc 93       	st	X, r31
     384:	ee 93       	st	-X, r30
	return Size;
}
     386:	c9 01       	movw	r24, r18
     388:	08 95       	ret

0000038a <Dataflash_SelectChipFromPage>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     38a:	2e b1       	in	r18, 0x0e	; 14
     38c:	23 60       	ori	r18, 0x03	; 3
     38e:	2e b9       	out	0x0e, r18	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     390:	20 e4       	ldi	r18, 0x40	; 64
     392:	80 30       	cpi	r24, 0x00	; 0
     394:	92 07       	cpc	r25, r18
     396:	58 f4       	brcc	.+22     	; 0x3ae <Dataflash_SelectChipFromPage+0x24>
				  return;

				#if (DATAFLASH_TOTALCHIPS == 2)
					if (PageAddress & 0x01)
     398:	80 ff       	sbrs	r24, 0
     39a:	05 c0       	rjmp	.+10     	; 0x3a6 <Dataflash_SelectChipFromPage+0x1c>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     39c:	8e b1       	in	r24, 0x0e	; 14
     39e:	83 60       	ori	r24, 0x03	; 3
     3a0:	8d 7f       	andi	r24, 0xFD	; 253
     3a2:	8e b9       	out	0x0e, r24	; 14
     3a4:	08 95       	ret
     3a6:	8e b1       	in	r24, 0x0e	; 14
     3a8:	83 60       	ori	r24, 0x03	; 3
     3aa:	8e 7f       	andi	r24, 0xFE	; 254
     3ac:	8e b9       	out	0x0e, r24	; 14
     3ae:	08 95       	ret

000003b0 <Dataflash_ToggleSelectedChipCS>:
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     3b0:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     3b2:	9e b1       	in	r25, 0x0e	; 14
     3b4:	93 60       	ori	r25, 0x03	; 3
     3b6:	9e b9       	out	0x0e, r25	; 14
     3b8:	9e b1       	in	r25, 0x0e	; 14
     3ba:	8c 6f       	ori	r24, 0xFC	; 252
     3bc:	93 60       	ori	r25, 0x03	; 3
     3be:	89 23       	and	r24, r25
     3c0:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     3c2:	08 95       	ret

000003c4 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     3c4:	f5 df       	rcall	.-22     	; 0x3b0 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3c6:	87 ed       	ldi	r24, 0xD7	; 215
     3c8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3ca:	0d b4       	in	r0, 0x2d	; 45
     3cc:	07 fe       	sbrs	r0, 7
     3ce:	fd cf       	rjmp	.-6      	; 0x3ca <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     3d0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     3d2:	0d b4       	in	r0, 0x2d	; 45
     3d4:	07 fe       	sbrs	r0, 7
     3d6:	fd cf       	rjmp	.-6      	; 0x3d2 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     3d8:	0e b4       	in	r0, 0x2e	; 46
     3da:	07 fe       	sbrs	r0, 7
     3dc:	f9 cf       	rjmp	.-14     	; 0x3d0 <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     3de:	e8 cf       	rjmp	.-48     	; 0x3b0 <Dataflash_ToggleSelectedChipCS>

000003e0 <Dataflash_SendAddressBytes>:
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				#if (DATAFLASH_TOTALCHIPS == 2)
					PageAddress >>= 1;
     3e0:	9c 01       	movw	r18, r24
     3e2:	36 95       	lsr	r19
     3e4:	27 95       	ror	r18
				#endif
				
				Dataflash_SendByte(PageAddress >> 5);
     3e6:	36 e0       	ldi	r19, 0x06	; 6
     3e8:	96 95       	lsr	r25
     3ea:	87 95       	ror	r24
     3ec:	3a 95       	dec	r19
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3f2:	0d b4       	in	r0, 0x2d	; 45
     3f4:	07 fe       	sbrs	r0, 7
     3f6:	fd cf       	rjmp	.-6      	; 0x3f2 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     3f8:	22 0f       	add	r18, r18
     3fa:	22 0f       	add	r18, r18
     3fc:	22 0f       	add	r18, r18
     3fe:	27 2b       	or	r18, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     400:	2e bd       	out	0x2e, r18	; 46
				while (!(SPSR & (1 << SPIF)));
     402:	0d b4       	in	r0, 0x2d	; 45
     404:	07 fe       	sbrs	r0, 7
     406:	fd cf       	rjmp	.-6      	; 0x402 <Dataflash_SendAddressBytes+0x22>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     408:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     40a:	0d b4       	in	r0, 0x2d	; 45
     40c:	07 fe       	sbrs	r0, 7
     40e:	fd cf       	rjmp	.-6      	; 0x40a <Dataflash_SendAddressBytes+0x2a>
				Dataflash_SendByte(BufferByte);
			}
     410:	08 95       	ret

00000412 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     412:	6f 92       	push	r6
     414:	7f 92       	push	r7
     416:	9f 92       	push	r9
     418:	af 92       	push	r10
     41a:	bf 92       	push	r11
     41c:	cf 92       	push	r12
     41e:	df 92       	push	r13
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	df 93       	push	r29
     42a:	cf 93       	push	r28
     42c:	0f 92       	push	r0
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	6c 01       	movw	r12, r24
     434:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     436:	db 01       	movw	r26, r22
     438:	ca 01       	movw	r24, r20
     43a:	19 e0       	ldi	r17, 0x09	; 9
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	aa 1f       	adc	r26, r26
     442:	bb 1f       	adc	r27, r27
     444:	1a 95       	dec	r17
     446:	d1 f7       	brne	.-12     	; 0x43c <DataflashManager_WriteBlocks+0x2a>
     448:	fa e0       	ldi	r31, 0x0A	; 10
     44a:	b6 95       	lsr	r27
     44c:	a7 95       	ror	r26
     44e:	97 95       	ror	r25
     450:	87 95       	ror	r24
     452:	fa 95       	dec	r31
     454:	d1 f7       	brne	.-12     	; 0x44a <DataflashManager_WriteBlocks+0x38>
     456:	3c 01       	movw	r6, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     458:	8a 01       	movw	r16, r20
     45a:	10 2f       	mov	r17, r16
     45c:	00 27       	eor	r16, r16
     45e:	11 0f       	add	r17, r17
     460:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     462:	93 df       	rcall	.-218    	; 0x38a <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     464:	83 e5       	ldi	r24, 0x53	; 83
     466:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     468:	0d b4       	in	r0, 0x2d	; 45
     46a:	07 fe       	sbrs	r0, 7
     46c:	fd cf       	rjmp	.-6      	; 0x468 <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     46e:	c3 01       	movw	r24, r6
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	b5 df       	rcall	.-150    	; 0x3e0 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     476:	a6 df       	rcall	.-180    	; 0x3c4 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     478:	84 e8       	ldi	r24, 0x84	; 132
     47a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     47c:	0d b4       	in	r0, 0x2d	; 45
     47e:	07 fe       	sbrs	r0, 7
     480:	fd cf       	rjmp	.-6      	; 0x47c <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	b8 01       	movw	r22, r16
     488:	ab df       	rcall	.-170    	; 0x3e0 <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     48a:	b6 d6       	rcall	.+3436   	; 0x11f8 <Endpoint_WaitUntilReady>
     48c:	88 23       	and	r24, r24
     48e:	09 f0       	breq	.+2      	; 0x492 <DataflashManager_WriteBlocks+0x80>
     490:	ea c0       	rjmp	.+468    	; 0x666 <DataflashManager_WriteBlocks+0x254>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     492:	74 e0       	ldi	r23, 0x04	; 4
     494:	16 95       	lsr	r17
     496:	07 95       	ror	r16
     498:	7a 95       	dec	r23
     49a:	e1 f7       	brne	.-8      	; 0x494 <DataflashManager_WriteBlocks+0x82>
     49c:	90 2f       	mov	r25, r16
     49e:	87 01       	movw	r16, r14
     4a0:	65 e0       	ldi	r22, 0x05	; 5
     4a2:	00 0f       	add	r16, r16
     4a4:	11 1f       	adc	r17, r17
     4a6:	6a 95       	dec	r22
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <DataflashManager_WriteBlocks+0x90>
     4aa:	bb 24       	eor	r11, r11
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     4ac:	99 24       	eor	r9, r9
     4ae:	93 94       	inc	r9
     4b0:	bb c0       	rjmp	.+374    	; 0x628 <DataflashManager_WriteBlocks+0x216>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     4b2:	50 e2       	ldi	r21, 0x20	; 32
     4b4:	a5 2e       	mov	r10, r21
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     4b6:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     4ba:	85 fd       	sbrc	r24, 5
     4bc:	0b c0       	rjmp	.+22     	; 0x4d4 <DataflashManager_WriteBlocks+0xc2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4be:	80 91 e8 00 	lds	r24, 0x00E8
     4c2:	8b 77       	andi	r24, 0x7B	; 123
     4c4:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     4c8:	99 83       	std	Y+1, r25	; 0x01
     4ca:	96 d6       	rcall	.+3372   	; 0x11f8 <Endpoint_WaitUntilReady>
     4cc:	99 81       	ldd	r25, Y+1	; 0x01
     4ce:	88 23       	and	r24, r24
     4d0:	09 f0       	breq	.+2      	; 0x4d4 <DataflashManager_WriteBlocks+0xc2>
     4d2:	c9 c0       	rjmp	.+402    	; 0x666 <DataflashManager_WriteBlocks+0x254>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     4d4:	90 34       	cpi	r25, 0x40	; 64
     4d6:	09 f0       	breq	.+2      	; 0x4da <DataflashManager_WriteBlocks+0xc8>
     4d8:	3a c0       	rjmp	.+116    	; 0x54e <DataflashManager_WriteBlocks+0x13c>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     4da:	74 df       	rcall	.-280    	; 0x3c4 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     4dc:	bb 20       	and	r11, r11
     4de:	11 f0       	breq	.+4      	; 0x4e4 <DataflashManager_WriteBlocks+0xd2>
     4e0:	86 e8       	ldi	r24, 0x86	; 134
     4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <DataflashManager_WriteBlocks+0xd4>
     4e4:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4e6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4e8:	0d b4       	in	r0, 0x2d	; 45
     4ea:	07 fe       	sbrs	r0, 7
     4ec:	fd cf       	rjmp	.-6      	; 0x4e8 <DataflashManager_WriteBlocks+0xd6>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     4ee:	c3 01       	movw	r24, r6
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	75 df       	rcall	.-278    	; 0x3e0 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     4f6:	08 94       	sec
     4f8:	61 1c       	adc	r6, r1
     4fa:	71 1c       	adc	r7, r1
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     4fc:	8e b1       	in	r24, 0x0e	; 14
     4fe:	80 95       	com	r24
     500:	83 70       	andi	r24, 0x03	; 3

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     502:	82 30       	cpi	r24, 0x02	; 2
     504:	09 f4       	brne	.+2      	; 0x508 <DataflashManager_WriteBlocks+0xf6>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     506:	b9 24       	eor	r11, r9

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     508:	c3 01       	movw	r24, r6
     50a:	3f df       	rcall	.-386    	; 0x38a <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     50c:	00 34       	cpi	r16, 0x40	; 64
     50e:	11 05       	cpc	r17, r1
     510:	78 f4       	brcc	.+30     	; 0x530 <DataflashManager_WriteBlocks+0x11e>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     512:	58 df       	rcall	.-336    	; 0x3c4 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     514:	bb 20       	and	r11, r11
     516:	11 f0       	breq	.+4      	; 0x51c <DataflashManager_WriteBlocks+0x10a>
     518:	85 e5       	ldi	r24, 0x55	; 85
     51a:	01 c0       	rjmp	.+2      	; 0x51e <DataflashManager_WriteBlocks+0x10c>
     51c:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     51e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     520:	0d b4       	in	r0, 0x2d	; 45
     522:	07 fe       	sbrs	r0, 7
     524:	fd cf       	rjmp	.-6      	; 0x520 <DataflashManager_WriteBlocks+0x10e>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     526:	c3 01       	movw	r24, r6
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	59 df       	rcall	.-334    	; 0x3e0 <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     52e:	4a df       	rcall	.-364    	; 0x3c4 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     530:	bb 20       	and	r11, r11
     532:	11 f0       	breq	.+4      	; 0x538 <DataflashManager_WriteBlocks+0x126>
     534:	87 e8       	ldi	r24, 0x87	; 135
     536:	01 c0       	rjmp	.+2      	; 0x53a <DataflashManager_WriteBlocks+0x128>
     538:	84 e8       	ldi	r24, 0x84	; 132
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     53a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     53c:	0d b4       	in	r0, 0x2d	; 45
     53e:	07 fe       	sbrs	r0, 7
     540:	fd cf       	rjmp	.-6      	; 0x53c <DataflashManager_WriteBlocks+0x12a>
				Dataflash_SendAddressBytes(0, 0);
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	4a df       	rcall	.-364    	; 0x3e0 <Dataflash_SendAddressBytes>
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     54c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     54e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     552:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     554:	0d b4       	in	r0, 0x2d	; 45
     556:	07 fe       	sbrs	r0, 7
     558:	fd cf       	rjmp	.-6      	; 0x554 <DataflashManager_WriteBlocks+0x142>
     55a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     55e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     560:	0d b4       	in	r0, 0x2d	; 45
     562:	07 fe       	sbrs	r0, 7
     564:	fd cf       	rjmp	.-6      	; 0x560 <DataflashManager_WriteBlocks+0x14e>
     566:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     56a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     56c:	0d b4       	in	r0, 0x2d	; 45
     56e:	07 fe       	sbrs	r0, 7
     570:	fd cf       	rjmp	.-6      	; 0x56c <DataflashManager_WriteBlocks+0x15a>
     572:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     576:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     578:	0d b4       	in	r0, 0x2d	; 45
     57a:	07 fe       	sbrs	r0, 7
     57c:	fd cf       	rjmp	.-6      	; 0x578 <DataflashManager_WriteBlocks+0x166>
     57e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     582:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     584:	0d b4       	in	r0, 0x2d	; 45
     586:	07 fe       	sbrs	r0, 7
     588:	fd cf       	rjmp	.-6      	; 0x584 <DataflashManager_WriteBlocks+0x172>
     58a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     58e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     590:	0d b4       	in	r0, 0x2d	; 45
     592:	07 fe       	sbrs	r0, 7
     594:	fd cf       	rjmp	.-6      	; 0x590 <DataflashManager_WriteBlocks+0x17e>
     596:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     59a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     59c:	0d b4       	in	r0, 0x2d	; 45
     59e:	07 fe       	sbrs	r0, 7
     5a0:	fd cf       	rjmp	.-6      	; 0x59c <DataflashManager_WriteBlocks+0x18a>
     5a2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5a6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5a8:	0d b4       	in	r0, 0x2d	; 45
     5aa:	07 fe       	sbrs	r0, 7
     5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <DataflashManager_WriteBlocks+0x196>
     5ae:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5b2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5b4:	0d b4       	in	r0, 0x2d	; 45
     5b6:	07 fe       	sbrs	r0, 7
     5b8:	fd cf       	rjmp	.-6      	; 0x5b4 <DataflashManager_WriteBlocks+0x1a2>
     5ba:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5be:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5c0:	0d b4       	in	r0, 0x2d	; 45
     5c2:	07 fe       	sbrs	r0, 7
     5c4:	fd cf       	rjmp	.-6      	; 0x5c0 <DataflashManager_WriteBlocks+0x1ae>
     5c6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ca:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5cc:	0d b4       	in	r0, 0x2d	; 45
     5ce:	07 fe       	sbrs	r0, 7
     5d0:	fd cf       	rjmp	.-6      	; 0x5cc <DataflashManager_WriteBlocks+0x1ba>
     5d2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5d6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5d8:	0d b4       	in	r0, 0x2d	; 45
     5da:	07 fe       	sbrs	r0, 7
     5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <DataflashManager_WriteBlocks+0x1c6>
     5de:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5e2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5e4:	0d b4       	in	r0, 0x2d	; 45
     5e6:	07 fe       	sbrs	r0, 7
     5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <DataflashManager_WriteBlocks+0x1d2>
     5ea:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ee:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5f0:	0d b4       	in	r0, 0x2d	; 45
     5f2:	07 fe       	sbrs	r0, 7
     5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <DataflashManager_WriteBlocks+0x1de>
     5f6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5fa:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5fc:	0d b4       	in	r0, 0x2d	; 45
     5fe:	07 fe       	sbrs	r0, 7
     600:	fd cf       	rjmp	.-6      	; 0x5fc <DataflashManager_WriteBlocks+0x1ea>
     602:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     606:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     608:	0d b4       	in	r0, 0x2d	; 45
     60a:	07 fe       	sbrs	r0, 7
     60c:	fd cf       	rjmp	.-6      	; 0x608 <DataflashManager_WriteBlocks+0x1f6>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     60e:	f6 01       	movw	r30, r12
     610:	80 ad       	ldd	r24, Z+56	; 0x38
     612:	88 23       	and	r24, r24
     614:	41 f5       	brne	.+80     	; 0x666 <DataflashManager_WriteBlocks+0x254>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     616:	9f 5f       	subi	r25, 0xFF	; 255
     618:	aa 94       	dec	r10
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     61a:	09 f0       	breq	.+2      	; 0x61e <DataflashManager_WriteBlocks+0x20c>
     61c:	4c cf       	rjmp	.-360    	; 0x4b6 <DataflashManager_WriteBlocks+0xa4>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     61e:	08 94       	sec
     620:	e1 08       	sbc	r14, r1
     622:	f1 08       	sbc	r15, r1
     624:	00 52       	subi	r16, 0x20	; 32
     626:	10 40       	sbci	r17, 0x00	; 0

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     628:	e1 14       	cp	r14, r1
     62a:	f1 04       	cpc	r15, r1
     62c:	09 f0       	breq	.+2      	; 0x630 <DataflashManager_WriteBlocks+0x21e>
     62e:	41 cf       	rjmp	.-382    	; 0x4b2 <DataflashManager_WriteBlocks+0xa0>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     630:	c9 de       	rcall	.-622    	; 0x3c4 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     632:	bb 20       	and	r11, r11
     634:	11 f0       	breq	.+4      	; 0x63a <DataflashManager_WriteBlocks+0x228>
     636:	86 e8       	ldi	r24, 0x86	; 134
     638:	01 c0       	rjmp	.+2      	; 0x63c <DataflashManager_WriteBlocks+0x22a>
     63a:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     63c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     63e:	0d b4       	in	r0, 0x2d	; 45
     640:	07 fe       	sbrs	r0, 7
     642:	fd cf       	rjmp	.-6      	; 0x63e <DataflashManager_WriteBlocks+0x22c>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     644:	c3 01       	movw	r24, r6
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	ca de       	rcall	.-620    	; 0x3e0 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     64c:	bb de       	rcall	.-650    	; 0x3c4 <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     64e:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     652:	85 fd       	sbrc	r24, 5
     654:	05 c0       	rjmp	.+10     	; 0x660 <DataflashManager_WriteBlocks+0x24e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     656:	80 91 e8 00 	lds	r24, 0x00E8
     65a:	8b 77       	andi	r24, 0x7B	; 123
     65c:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     660:	8e b1       	in	r24, 0x0e	; 14
     662:	83 60       	ori	r24, 0x03	; 3
     664:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     666:	0f 90       	pop	r0
     668:	cf 91       	pop	r28
     66a:	df 91       	pop	r29
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	df 90       	pop	r13
     676:	cf 90       	pop	r12
     678:	bf 90       	pop	r11
     67a:	af 90       	pop	r10
     67c:	9f 90       	pop	r9
     67e:	7f 90       	pop	r7
     680:	6f 90       	pop	r6
     682:	08 95       	ret

00000684 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	6c 01       	movw	r12, r24
     698:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     69a:	db 01       	movw	r26, r22
     69c:	ca 01       	movw	r24, r20
     69e:	69 e0       	ldi	r22, 0x09	; 9
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	aa 1f       	adc	r26, r26
     6a6:	bb 1f       	adc	r27, r27
     6a8:	6a 95       	dec	r22
     6aa:	d1 f7       	brne	.-12     	; 0x6a0 <DataflashManager_ReadBlocks+0x1c>
     6ac:	3a e0       	ldi	r19, 0x0A	; 10
     6ae:	b6 95       	lsr	r27
     6b0:	a7 95       	ror	r26
     6b2:	97 95       	ror	r25
     6b4:	87 95       	ror	r24
     6b6:	3a 95       	dec	r19
     6b8:	d1 f7       	brne	.-12     	; 0x6ae <DataflashManager_ReadBlocks+0x2a>
     6ba:	ec 01       	movw	r28, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     6bc:	8a 01       	movw	r16, r20
     6be:	10 2f       	mov	r17, r16
     6c0:	00 27       	eor	r16, r16
     6c2:	11 0f       	add	r17, r17
     6c4:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     6c6:	61 de       	rcall	.-830    	; 0x38a <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6c8:	82 ed       	ldi	r24, 0xD2	; 210
     6ca:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6cc:	0d b4       	in	r0, 0x2d	; 45
     6ce:	07 fe       	sbrs	r0, 7
     6d0:	fd cf       	rjmp	.-6      	; 0x6cc <DataflashManager_ReadBlocks+0x48>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     6d2:	ce 01       	movw	r24, r28
     6d4:	b8 01       	movw	r22, r16
     6d6:	84 de       	rcall	.-760    	; 0x3e0 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6d8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6da:	0d b4       	in	r0, 0x2d	; 45
     6dc:	07 fe       	sbrs	r0, 7
     6de:	fd cf       	rjmp	.-6      	; 0x6da <DataflashManager_ReadBlocks+0x56>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6e0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6e2:	0d b4       	in	r0, 0x2d	; 45
     6e4:	07 fe       	sbrs	r0, 7
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <DataflashManager_ReadBlocks+0x5e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6e8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6ea:	0d b4       	in	r0, 0x2d	; 45
     6ec:	07 fe       	sbrs	r0, 7
     6ee:	fd cf       	rjmp	.-6      	; 0x6ea <DataflashManager_ReadBlocks+0x66>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6f0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6f2:	0d b4       	in	r0, 0x2d	; 45
     6f4:	07 fe       	sbrs	r0, 7
     6f6:	fd cf       	rjmp	.-6      	; 0x6f2 <DataflashManager_ReadBlocks+0x6e>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     6f8:	7f d5       	rcall	.+2814   	; 0x11f8 <Endpoint_WaitUntilReady>
     6fa:	88 23       	and	r24, r24
     6fc:	09 f0       	breq	.+2      	; 0x700 <DataflashManager_ReadBlocks+0x7c>
     6fe:	bf c0       	rjmp	.+382    	; 0x87e <DataflashManager_ReadBlocks+0x1fa>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     700:	94 e0       	ldi	r25, 0x04	; 4
     702:	16 95       	lsr	r17
     704:	07 95       	ror	r16
     706:	9a 95       	dec	r25
     708:	e1 f7       	brne	.-8      	; 0x702 <DataflashManager_ReadBlocks+0x7e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     70a:	82 ed       	ldi	r24, 0xD2	; 210
     70c:	b8 2e       	mov	r11, r24
     70e:	a7 c0       	rjmp	.+334    	; 0x85e <DataflashManager_ReadBlocks+0x1da>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     710:	10 e2       	ldi	r17, 0x20	; 32
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     712:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     716:	85 fd       	sbrc	r24, 5
     718:	09 c0       	rjmp	.+18     	; 0x72c <DataflashManager_ReadBlocks+0xa8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     71a:	80 91 e8 00 	lds	r24, 0x00E8
     71e:	8e 77       	andi	r24, 0x7E	; 126
     720:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     724:	69 d5       	rcall	.+2770   	; 0x11f8 <Endpoint_WaitUntilReady>
     726:	88 23       	and	r24, r24
     728:	09 f0       	breq	.+2      	; 0x72c <DataflashManager_ReadBlocks+0xa8>
     72a:	a9 c0       	rjmp	.+338    	; 0x87e <DataflashManager_ReadBlocks+0x1fa>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     72c:	00 34       	cpi	r16, 0x40	; 64
     72e:	e1 f4       	brne	.+56     	; 0x768 <DataflashManager_ReadBlocks+0xe4>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     730:	21 96       	adiw	r28, 0x01	; 1

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     732:	ce 01       	movw	r24, r28
     734:	2a de       	rcall	.-940    	; 0x38a <Dataflash_SelectChipFromPage>
     736:	be bc       	out	0x2e, r11	; 46
				while (!(SPSR & (1 << SPIF)));
     738:	0d b4       	in	r0, 0x2d	; 45
     73a:	07 fe       	sbrs	r0, 7
     73c:	fd cf       	rjmp	.-6      	; 0x738 <DataflashManager_ReadBlocks+0xb4>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     73e:	ce 01       	movw	r24, r28
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	4d de       	rcall	.-870    	; 0x3e0 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     746:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     748:	0d b4       	in	r0, 0x2d	; 45
     74a:	07 fe       	sbrs	r0, 7
     74c:	fd cf       	rjmp	.-6      	; 0x748 <DataflashManager_ReadBlocks+0xc4>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     74e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     750:	0d b4       	in	r0, 0x2d	; 45
     752:	07 fe       	sbrs	r0, 7
     754:	fd cf       	rjmp	.-6      	; 0x750 <DataflashManager_ReadBlocks+0xcc>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     756:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     758:	0d b4       	in	r0, 0x2d	; 45
     75a:	07 fe       	sbrs	r0, 7
     75c:	fd cf       	rjmp	.-6      	; 0x758 <DataflashManager_ReadBlocks+0xd4>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     75e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     760:	0d b4       	in	r0, 0x2d	; 45
     762:	07 fe       	sbrs	r0, 7
     764:	fd cf       	rjmp	.-6      	; 0x760 <DataflashManager_ReadBlocks+0xdc>

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     766:	00 e0       	ldi	r16, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     768:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     76a:	0d b4       	in	r0, 0x2d	; 45
     76c:	07 fe       	sbrs	r0, 7
     76e:	fd cf       	rjmp	.-6      	; 0x76a <DataflashManager_ReadBlocks+0xe6>
				return SPDR;
     770:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     772:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     776:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     778:	0d b4       	in	r0, 0x2d	; 45
     77a:	07 fe       	sbrs	r0, 7
     77c:	fd cf       	rjmp	.-6      	; 0x778 <DataflashManager_ReadBlocks+0xf4>
				return SPDR;
     77e:	8e b5       	in	r24, 0x2e	; 46
     780:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     784:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     786:	0d b4       	in	r0, 0x2d	; 45
     788:	07 fe       	sbrs	r0, 7
     78a:	fd cf       	rjmp	.-6      	; 0x786 <DataflashManager_ReadBlocks+0x102>
				return SPDR;
     78c:	8e b5       	in	r24, 0x2e	; 46
     78e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     792:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     794:	0d b4       	in	r0, 0x2d	; 45
     796:	07 fe       	sbrs	r0, 7
     798:	fd cf       	rjmp	.-6      	; 0x794 <DataflashManager_ReadBlocks+0x110>
				return SPDR;
     79a:	8e b5       	in	r24, 0x2e	; 46
     79c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7a0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7a2:	0d b4       	in	r0, 0x2d	; 45
     7a4:	07 fe       	sbrs	r0, 7
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <DataflashManager_ReadBlocks+0x11e>
				return SPDR;
     7a8:	8e b5       	in	r24, 0x2e	; 46
     7aa:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7ae:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7b0:	0d b4       	in	r0, 0x2d	; 45
     7b2:	07 fe       	sbrs	r0, 7
     7b4:	fd cf       	rjmp	.-6      	; 0x7b0 <DataflashManager_ReadBlocks+0x12c>
				return SPDR;
     7b6:	8e b5       	in	r24, 0x2e	; 46
     7b8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7bc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7be:	0d b4       	in	r0, 0x2d	; 45
     7c0:	07 fe       	sbrs	r0, 7
     7c2:	fd cf       	rjmp	.-6      	; 0x7be <DataflashManager_ReadBlocks+0x13a>
				return SPDR;
     7c4:	8e b5       	in	r24, 0x2e	; 46
     7c6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7ca:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7cc:	0d b4       	in	r0, 0x2d	; 45
     7ce:	07 fe       	sbrs	r0, 7
     7d0:	fd cf       	rjmp	.-6      	; 0x7cc <DataflashManager_ReadBlocks+0x148>
				return SPDR;
     7d2:	8e b5       	in	r24, 0x2e	; 46
     7d4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7d8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7da:	0d b4       	in	r0, 0x2d	; 45
     7dc:	07 fe       	sbrs	r0, 7
     7de:	fd cf       	rjmp	.-6      	; 0x7da <DataflashManager_ReadBlocks+0x156>
				return SPDR;
     7e0:	8e b5       	in	r24, 0x2e	; 46
     7e2:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7e6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7e8:	0d b4       	in	r0, 0x2d	; 45
     7ea:	07 fe       	sbrs	r0, 7
     7ec:	fd cf       	rjmp	.-6      	; 0x7e8 <DataflashManager_ReadBlocks+0x164>
				return SPDR;
     7ee:	8e b5       	in	r24, 0x2e	; 46
     7f0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7f4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7f6:	0d b4       	in	r0, 0x2d	; 45
     7f8:	07 fe       	sbrs	r0, 7
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <DataflashManager_ReadBlocks+0x172>
				return SPDR;
     7fc:	8e b5       	in	r24, 0x2e	; 46
     7fe:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     802:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     804:	0d b4       	in	r0, 0x2d	; 45
     806:	07 fe       	sbrs	r0, 7
     808:	fd cf       	rjmp	.-6      	; 0x804 <DataflashManager_ReadBlocks+0x180>
				return SPDR;
     80a:	8e b5       	in	r24, 0x2e	; 46
     80c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     810:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     812:	0d b4       	in	r0, 0x2d	; 45
     814:	07 fe       	sbrs	r0, 7
     816:	fd cf       	rjmp	.-6      	; 0x812 <DataflashManager_ReadBlocks+0x18e>
				return SPDR;
     818:	8e b5       	in	r24, 0x2e	; 46
     81a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     81e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     820:	0d b4       	in	r0, 0x2d	; 45
     822:	07 fe       	sbrs	r0, 7
     824:	fd cf       	rjmp	.-6      	; 0x820 <DataflashManager_ReadBlocks+0x19c>
				return SPDR;
     826:	8e b5       	in	r24, 0x2e	; 46
     828:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     82c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     82e:	0d b4       	in	r0, 0x2d	; 45
     830:	07 fe       	sbrs	r0, 7
     832:	fd cf       	rjmp	.-6      	; 0x82e <DataflashManager_ReadBlocks+0x1aa>
				return SPDR;
     834:	8e b5       	in	r24, 0x2e	; 46
     836:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     83a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     83c:	0d b4       	in	r0, 0x2d	; 45
     83e:	07 fe       	sbrs	r0, 7
     840:	fd cf       	rjmp	.-6      	; 0x83c <DataflashManager_ReadBlocks+0x1b8>
				return SPDR;
     842:	8e b5       	in	r24, 0x2e	; 46
     844:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     848:	f6 01       	movw	r30, r12
     84a:	80 ad       	ldd	r24, Z+56	; 0x38
     84c:	88 23       	and	r24, r24
     84e:	b9 f4       	brne	.+46     	; 0x87e <DataflashManager_ReadBlocks+0x1fa>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     850:	0f 5f       	subi	r16, 0xFF	; 255
     852:	11 50       	subi	r17, 0x01	; 1
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     854:	09 f0       	breq	.+2      	; 0x858 <DataflashManager_ReadBlocks+0x1d4>
     856:	5d cf       	rjmp	.-326    	; 0x712 <DataflashManager_ReadBlocks+0x8e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     858:	08 94       	sec
     85a:	e1 08       	sbc	r14, r1
     85c:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     85e:	e1 14       	cp	r14, r1
     860:	f1 04       	cpc	r15, r1
     862:	09 f0       	breq	.+2      	; 0x866 <DataflashManager_ReadBlocks+0x1e2>
     864:	55 cf       	rjmp	.-342    	; 0x710 <DataflashManager_ReadBlocks+0x8c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     866:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     86a:	85 fd       	sbrc	r24, 5
     86c:	05 c0       	rjmp	.+10     	; 0x878 <DataflashManager_ReadBlocks+0x1f4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     86e:	80 91 e8 00 	lds	r24, 0x00E8
     872:	8e 77       	andi	r24, 0x7E	; 126
     874:	80 93 e8 00 	sts	0x00E8, r24
     878:	8e b1       	in	r24, 0x0e	; 14
     87a:	83 60       	ori	r24, 0x03	; 3
     87c:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	ff 90       	pop	r15
     888:	ef 90       	pop	r14
     88a:	df 90       	pop	r13
     88c:	cf 90       	pop	r12
     88e:	bf 90       	pop	r11
     890:	08 95       	ret

00000892 <DataflashManager_ResetDataflashProtections>:
     892:	8e b1       	in	r24, 0x0e	; 14
     894:	83 60       	ori	r24, 0x03	; 3
     896:	8e 7f       	andi	r24, 0xFE	; 254
     898:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     89a:	87 ed       	ldi	r24, 0xD7	; 215
     89c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     89e:	0d b4       	in	r0, 0x2d	; 45
     8a0:	07 fe       	sbrs	r0, 7
     8a2:	fd cf       	rjmp	.-6      	; 0x89e <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8a4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8a6:	0d b4       	in	r0, 0x2d	; 45
     8a8:	07 fe       	sbrs	r0, 7
     8aa:	fd cf       	rjmp	.-6      	; 0x8a6 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     8ac:	0e b4       	in	r0, 0x2e	; 46
     8ae:	01 fe       	sbrs	r0, 1
     8b0:	15 c0       	rjmp	.+42     	; 0x8dc <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     8b2:	7e dd       	rcall	.-1284   	; 0x3b0 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8b4:	8d e3       	ldi	r24, 0x3D	; 61
     8b6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8b8:	0d b4       	in	r0, 0x2d	; 45
     8ba:	07 fe       	sbrs	r0, 7
     8bc:	fd cf       	rjmp	.-6      	; 0x8b8 <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8be:	8a e2       	ldi	r24, 0x2A	; 42
     8c0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8c2:	0d b4       	in	r0, 0x2d	; 45
     8c4:	07 fe       	sbrs	r0, 7
     8c6:	fd cf       	rjmp	.-6      	; 0x8c2 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8c8:	8f e7       	ldi	r24, 0x7F	; 127
     8ca:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8cc:	0d b4       	in	r0, 0x2d	; 45
     8ce:	07 fe       	sbrs	r0, 7
     8d0:	fd cf       	rjmp	.-6      	; 0x8cc <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8d2:	8a e9       	ldi	r24, 0x9A	; 154
     8d4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8d6:	0d b4       	in	r0, 0x2d	; 45
     8d8:	07 fe       	sbrs	r0, 7
     8da:	fd cf       	rjmp	.-6      	; 0x8d6 <DataflashManager_ResetDataflashProtections+0x44>
     8dc:	8e b1       	in	r24, 0x0e	; 14
     8de:	83 60       	ori	r24, 0x03	; 3
     8e0:	8d 7f       	andi	r24, 0xFD	; 253
     8e2:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8e4:	87 ed       	ldi	r24, 0xD7	; 215
     8e6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8e8:	0d b4       	in	r0, 0x2d	; 45
     8ea:	07 fe       	sbrs	r0, 7
     8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8ee:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8f0:	0d b4       	in	r0, 0x2d	; 45
     8f2:	07 fe       	sbrs	r0, 7
     8f4:	fd cf       	rjmp	.-6      	; 0x8f0 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     8f6:	0e b4       	in	r0, 0x2e	; 46
     8f8:	01 fe       	sbrs	r0, 1
     8fa:	15 c0       	rjmp	.+42     	; 0x926 <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     8fc:	59 dd       	rcall	.-1358   	; 0x3b0 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8fe:	8d e3       	ldi	r24, 0x3D	; 61
     900:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     902:	0d b4       	in	r0, 0x2d	; 45
     904:	07 fe       	sbrs	r0, 7
     906:	fd cf       	rjmp	.-6      	; 0x902 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     908:	8a e2       	ldi	r24, 0x2A	; 42
     90a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     90c:	0d b4       	in	r0, 0x2d	; 45
     90e:	07 fe       	sbrs	r0, 7
     910:	fd cf       	rjmp	.-6      	; 0x90c <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     912:	8f e7       	ldi	r24, 0x7F	; 127
     914:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     916:	0d b4       	in	r0, 0x2d	; 45
     918:	07 fe       	sbrs	r0, 7
     91a:	fd cf       	rjmp	.-6      	; 0x916 <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     91c:	8a e9       	ldi	r24, 0x9A	; 154
     91e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     920:	0d b4       	in	r0, 0x2d	; 45
     922:	07 fe       	sbrs	r0, 7
     924:	fd cf       	rjmp	.-6      	; 0x920 <DataflashManager_ResetDataflashProtections+0x8e>
     926:	8e b1       	in	r24, 0x0e	; 14
     928:	83 60       	ori	r24, 0x03	; 3
     92a:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     92c:	08 95       	ret

0000092e <DataflashManager_CheckDataflashOperation>:
     92e:	8e b1       	in	r24, 0x0e	; 14
     930:	83 60       	ori	r24, 0x03	; 3
     932:	8e 7f       	andi	r24, 0xFE	; 254
     934:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     936:	8f e9       	ldi	r24, 0x9F	; 159
     938:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     93a:	0d b4       	in	r0, 0x2d	; 45
     93c:	07 fe       	sbrs	r0, 7
     93e:	fd cf       	rjmp	.-6      	; 0x93a <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     940:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     942:	0d b4       	in	r0, 0x2d	; 45
     944:	07 fe       	sbrs	r0, 7
     946:	fd cf       	rjmp	.-6      	; 0x942 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     948:	9e b5       	in	r25, 0x2e	; 46
     94a:	8e b1       	in	r24, 0x0e	; 14
     94c:	83 60       	ori	r24, 0x03	; 3
     94e:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     950:	9f 31       	cpi	r25, 0x1F	; 31
     952:	b1 f4       	brne	.+44     	; 0x980 <DataflashManager_CheckDataflashOperation+0x52>
     954:	8e b1       	in	r24, 0x0e	; 14
     956:	83 60       	ori	r24, 0x03	; 3
     958:	8d 7f       	andi	r24, 0xFD	; 253
     95a:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     95c:	8f e9       	ldi	r24, 0x9F	; 159
     95e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     960:	0d b4       	in	r0, 0x2d	; 45
     962:	07 fe       	sbrs	r0, 7
     964:	fd cf       	rjmp	.-6      	; 0x960 <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     966:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     968:	0d b4       	in	r0, 0x2d	; 45
     96a:	07 fe       	sbrs	r0, 7
     96c:	fd cf       	rjmp	.-6      	; 0x968 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     96e:	9e b5       	in	r25, 0x2e	; 46
     970:	8e b1       	in	r24, 0x0e	; 14
     972:	83 60       	ori	r24, 0x03	; 3
     974:	8e b9       	out	0x0e, r24	; 14

/** Performs a simple test on the attached Dataflash IC(s) to ensure that they are working.
 *
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool DataflashManager_CheckDataflashOperation(void)
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	9f 31       	cpi	r25, 0x1F	; 31
     97a:	19 f0       	breq	.+6      	; 0x982 <DataflashManager_CheckDataflashOperation+0x54>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	08 95       	ret
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     980:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     982:	08 95       	ret

00000984 <SwapEndian_16>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint16_t SwapEndian_16(const uint16_t Word) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint16_t SwapEndian_16(const uint16_t Word)
			{
     984:	28 2f       	mov	r18, r24
				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
			}
     986:	89 2f       	mov	r24, r25
     988:	92 2f       	mov	r25, r18
     98a:	08 95       	ret

0000098c <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     98c:	af 92       	push	r10
     98e:	bf 92       	push	r11
     990:	cf 92       	push	r12
     992:	df 92       	push	r13
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	df 93       	push	r29
     99e:	cf 93       	push	r28
     9a0:	0f 92       	push	r0
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	5c 01       	movw	r10, r24

		return false;
	}

	/* Load in the 32-bit block address (SCSI uses big-endian, so have to reverse the byte order) */
	BlockAddress = SwapEndian_32(*(uint32_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[2]);
     9a8:	fc 01       	movw	r30, r24
     9aa:	7b 96       	adiw	r30, 0x1b	; 27

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     9ac:	e5 80       	ldd	r14, Z+5	; 0x05
     9ae:	f4 80       	ldd	r15, Z+4	; 0x04
     9b0:	03 81       	ldd	r16, Z+3	; 0x03
     9b2:	12 81       	ldd	r17, Z+2	; 0x02

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);
     9b4:	87 81       	ldd	r24, Z+7	; 0x07
     9b6:	90 85       	ldd	r25, Z+8	; 0x08
     9b8:	69 83       	std	Y+1, r22	; 0x01
     9ba:	e4 df       	rcall	.-56     	; 0x984 <SwapEndian_16>
     9bc:	6c 01       	movw	r12, r24

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     9be:	69 81       	ldd	r22, Y+1	; 0x01
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	e8 16       	cp	r14, r24
     9c4:	80 e8       	ldi	r24, 0x80	; 128
     9c6:	f8 06       	cpc	r15, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	08 07       	cpc	r16, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	18 07       	cpc	r17, r24
     9d0:	68 f0       	brcs	.+26     	; 0x9ec <SCSI_Command_ReadWrite_10+0x60>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     9d2:	80 91 a8 01 	lds	r24, 0x01A8
     9d6:	80 7f       	andi	r24, 0xF0	; 240
     9d8:	85 60       	ori	r24, 0x05	; 5
     9da:	80 93 a8 01 	sts	0x01A8, r24
     9de:	81 e2       	ldi	r24, 0x21	; 33
     9e0:	80 93 b2 01 	sts	0x01B2, r24
     9e4:	10 92 b3 01 	sts	0x01B3, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	24 c0       	rjmp	.+72     	; 0xa34 <SCSI_Command_ReadWrite_10+0xa8>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     9ec:	66 23       	and	r22, r22
     9ee:	31 f0       	breq	.+12     	; 0x9fc <SCSI_Command_ReadWrite_10+0x70>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9f0:	c5 01       	movw	r24, r10
     9f2:	b8 01       	movw	r22, r16
     9f4:	a7 01       	movw	r20, r14
     9f6:	96 01       	movw	r18, r12
     9f8:	45 de       	rcall	.-886    	; 0x684 <DataflashManager_ReadBlocks>
     9fa:	05 c0       	rjmp	.+10     	; 0xa06 <SCSI_Command_ReadWrite_10+0x7a>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9fc:	c5 01       	movw	r24, r10
     9fe:	b8 01       	movw	r22, r16
     a00:	a7 01       	movw	r20, r14
     a02:	96 01       	movw	r18, r12
     a04:	06 dd       	rcall	.-1524   	; 0x412 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     a06:	ee 24       	eor	r14, r14
     a08:	ff 24       	eor	r15, r15
     a0a:	89 e0       	ldi	r24, 0x09	; 9
     a0c:	cc 0c       	add	r12, r12
     a0e:	dd 1c       	adc	r13, r13
     a10:	ee 1c       	adc	r14, r14
     a12:	ff 1c       	adc	r15, r15
     a14:	8a 95       	dec	r24
     a16:	d1 f7       	brne	.-12     	; 0xa0c <SCSI_Command_ReadWrite_10+0x80>
     a18:	f5 01       	movw	r30, r10
     a1a:	84 89       	ldd	r24, Z+20	; 0x14
     a1c:	95 89       	ldd	r25, Z+21	; 0x15
     a1e:	a6 89       	ldd	r26, Z+22	; 0x16
     a20:	b7 89       	ldd	r27, Z+23	; 0x17
     a22:	8c 19       	sub	r24, r12
     a24:	9d 09       	sbc	r25, r13
     a26:	ae 09       	sbc	r26, r14
     a28:	bf 09       	sbc	r27, r15
     a2a:	84 8b       	std	Z+20, r24	; 0x14
     a2c:	95 8b       	std	Z+21, r25	; 0x15
     a2e:	a6 8b       	std	Z+22, r26	; 0x16
     a30:	b7 8b       	std	Z+23, r27	; 0x17

	return true;
     a32:	81 e0       	ldi	r24, 0x01	; 1
}
     a34:	0f 90       	pop	r0
     a36:	cf 91       	pop	r28
     a38:	df 91       	pop	r29
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	cf 90       	pop	r12
     a46:	bf 90       	pop	r11
     a48:	af 90       	pop	r10
     a4a:	08 95       	ret

00000a4c <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     a4c:	cf 92       	push	r12
     a4e:	df 92       	push	r13
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	df 93       	push	r29
     a5a:	cf 93       	push	r28
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
     a60:	28 97       	sbiw	r28, 0x08	; 8
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     a6e:	fc 01       	movw	r30, r24
     a70:	83 8d       	ldd	r24, Z+27	; 0x1b
     a72:	8d 31       	cpi	r24, 0x1D	; 29
     a74:	09 f4       	brne	.+2      	; 0xa78 <SCSI_DecodeSCSICommand+0x2c>
     a76:	ac c0       	rjmp	.+344    	; 0xbd0 <SCSI_DecodeSCSICommand+0x184>
     a78:	8e 31       	cpi	r24, 0x1E	; 30
     a7a:	78 f4       	brcc	.+30     	; 0xa9a <SCSI_DecodeSCSICommand+0x4e>
     a7c:	83 30       	cpi	r24, 0x03	; 3
     a7e:	09 f4       	brne	.+2      	; 0xa82 <SCSI_DecodeSCSICommand+0x36>
     a80:	56 c0       	rjmp	.+172    	; 0xb2e <SCSI_DecodeSCSICommand+0xe2>
     a82:	84 30       	cpi	r24, 0x04	; 4
     a84:	20 f4       	brcc	.+8      	; 0xa8e <SCSI_DecodeSCSICommand+0x42>
     a86:	88 23       	and	r24, r24
     a88:	09 f4       	brne	.+2      	; 0xa8c <SCSI_DecodeSCSICommand+0x40>
     a8a:	df c0       	rjmp	.+446    	; 0xc4a <SCSI_DecodeSCSICommand+0x1fe>
     a8c:	e4 c0       	rjmp	.+456    	; 0xc56 <SCSI_DecodeSCSICommand+0x20a>
     a8e:	82 31       	cpi	r24, 0x12	; 18
     a90:	b9 f0       	breq	.+46     	; 0xac0 <SCSI_DecodeSCSICommand+0x74>
     a92:	8a 31       	cpi	r24, 0x1A	; 26
     a94:	09 f0       	breq	.+2      	; 0xa98 <SCSI_DecodeSCSICommand+0x4c>
     a96:	df c0       	rjmp	.+446    	; 0xc56 <SCSI_DecodeSCSICommand+0x20a>
     a98:	be c0       	rjmp	.+380    	; 0xc16 <SCSI_DecodeSCSICommand+0x1ca>
     a9a:	88 32       	cpi	r24, 0x28	; 40
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <SCSI_DecodeSCSICommand+0x54>
     a9e:	b5 c0       	rjmp	.+362    	; 0xc0a <SCSI_DecodeSCSICommand+0x1be>
     aa0:	89 32       	cpi	r24, 0x29	; 41
     aa2:	38 f4       	brcc	.+14     	; 0xab2 <SCSI_DecodeSCSICommand+0x66>
     aa4:	8e 31       	cpi	r24, 0x1E	; 30
     aa6:	09 f4       	brne	.+2      	; 0xaaa <SCSI_DecodeSCSICommand+0x5e>
     aa8:	d0 c0       	rjmp	.+416    	; 0xc4a <SCSI_DecodeSCSICommand+0x1fe>
     aaa:	85 32       	cpi	r24, 0x25	; 37
     aac:	09 f0       	breq	.+2      	; 0xab0 <SCSI_DecodeSCSICommand+0x64>
     aae:	d3 c0       	rjmp	.+422    	; 0xc56 <SCSI_DecodeSCSICommand+0x20a>
     ab0:	63 c0       	rjmp	.+198    	; 0xb78 <SCSI_DecodeSCSICommand+0x12c>
     ab2:	8a 32       	cpi	r24, 0x2A	; 42
     ab4:	09 f4       	brne	.+2      	; 0xab8 <SCSI_DecodeSCSICommand+0x6c>
     ab6:	a6 c0       	rjmp	.+332    	; 0xc04 <SCSI_DecodeSCSICommand+0x1b8>
     ab8:	8f 32       	cpi	r24, 0x2F	; 47
     aba:	09 f0       	breq	.+2      	; 0xabe <SCSI_DecodeSCSICommand+0x72>
     abc:	cc c0       	rjmp	.+408    	; 0xc56 <SCSI_DecodeSCSICommand+0x20a>
     abe:	c5 c0       	rjmp	.+394    	; 0xc4a <SCSI_DecodeSCSICommand+0x1fe>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
     ac0:	f8 01       	movw	r30, r16
     ac2:	86 8d       	ldd	r24, Z+30	; 0x1e
     ac4:	97 8d       	ldd	r25, Z+31	; 0x1f
     ac6:	5e df       	rcall	.-324    	; 0x984 <SwapEndian_16>
     ac8:	6c 01       	movw	r12, r24
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     aca:	f8 01       	movw	r30, r16
     acc:	84 8d       	ldd	r24, Z+28	; 0x1c
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	83 70       	andi	r24, 0x03	; 3
     ad2:	90 70       	andi	r25, 0x00	; 0
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	09 f0       	breq	.+2      	; 0xada <SCSI_DecodeSCSICommand+0x8e>
     ad8:	7f c0       	rjmp	.+254    	; 0xbd8 <SCSI_DecodeSCSICommand+0x18c>
     ada:	85 8d       	ldd	r24, Z+29	; 0x1d
     adc:	88 23       	and	r24, r24
     ade:	09 f0       	breq	.+2      	; 0xae2 <SCSI_DecodeSCSICommand+0x96>
     ae0:	7b c0       	rjmp	.+246    	; 0xbd8 <SCSI_DecodeSCSICommand+0x18c>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     ae2:	76 01       	movw	r14, r12
     ae4:	f5 e2       	ldi	r31, 0x25	; 37
     ae6:	cf 16       	cp	r12, r31
     ae8:	d1 04       	cpc	r13, r1
     aea:	18 f0       	brcs	.+6      	; 0xaf2 <SCSI_DecodeSCSICommand+0xa6>
     aec:	24 e2       	ldi	r18, 0x24	; 36
     aee:	e2 2e       	mov	r14, r18
     af0:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     af2:	88 eb       	ldi	r24, 0xB8	; 184
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	b7 01       	movw	r22, r14
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	16 d1       	rcall	.+556    	; 0xd2a <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     afe:	c6 01       	movw	r24, r12
     b00:	8e 19       	sub	r24, r14
     b02:	9f 09       	sbc	r25, r15
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	cb d0       	rcall	.+406    	; 0xca0 <Endpoint_Null_Stream>
     b0a:	80 91 e8 00 	lds	r24, 0x00E8
     b0e:	8e 77       	andi	r24, 0x7E	; 126
     b10:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b14:	97 01       	movw	r18, r14
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	f8 01       	movw	r30, r16
     b1c:	84 89       	ldd	r24, Z+20	; 0x14
     b1e:	95 89       	ldd	r25, Z+21	; 0x15
     b20:	a6 89       	ldd	r26, Z+22	; 0x16
     b22:	b7 89       	ldd	r27, Z+23	; 0x17
     b24:	82 1b       	sub	r24, r18
     b26:	93 0b       	sbc	r25, r19
     b28:	a4 0b       	sbc	r26, r20
     b2a:	b5 0b       	sbc	r27, r21
     b2c:	89 c0       	rjmp	.+274    	; 0xc40 <SCSI_DecodeSCSICommand+0x1f4>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     b2e:	f8 01       	movw	r30, r16
     b30:	c7 8c       	ldd	r12, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     b32:	ec 2c       	mov	r14, r12
     b34:	fc 2d       	mov	r31, r12
     b36:	f3 31       	cpi	r31, 0x13	; 19
     b38:	10 f0       	brcs	.+4      	; 0xb3e <SCSI_DecodeSCSICommand+0xf2>
     b3a:	92 e1       	ldi	r25, 0x12	; 18
     b3c:	e9 2e       	mov	r14, r25

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     b3e:	86 ea       	ldi	r24, 0xA6	; 166
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	6e 2d       	mov	r22, r14
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	40 e0       	ldi	r20, 0x00	; 0
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	ef d0       	rcall	.+478    	; 0xd2a <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b4c:	8c 2d       	mov	r24, r12
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	8e 19       	sub	r24, r14
     b52:	91 09       	sbc	r25, r1
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	a3 d0       	rcall	.+326    	; 0xca0 <Endpoint_Null_Stream>
     b5a:	80 91 e8 00 	lds	r24, 0x00E8
     b5e:	8e 77       	andi	r24, 0x7E	; 126
     b60:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b64:	f8 01       	movw	r30, r16
     b66:	84 89       	ldd	r24, Z+20	; 0x14
     b68:	95 89       	ldd	r25, Z+21	; 0x15
     b6a:	a6 89       	ldd	r26, Z+22	; 0x16
     b6c:	b7 89       	ldd	r27, Z+23	; 0x17
     b6e:	8e 19       	sub	r24, r14
     b70:	91 09       	sbc	r25, r1
     b72:	a1 09       	sbc	r26, r1
     b74:	b1 09       	sbc	r27, r1
     b76:	64 c0       	rjmp	.+200    	; 0xc40 <SCSI_DecodeSCSICommand+0x1f4>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     b78:	8f ef       	ldi	r24, 0xFF	; 255
     b7a:	9f e7       	ldi	r25, 0x7F	; 127
     b7c:	a0 e0       	ldi	r26, 0x00	; 0
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	89 83       	std	Y+1, r24	; 0x01
     b82:	9a 83       	std	Y+2, r25	; 0x02
     b84:	ab 83       	std	Y+3, r26	; 0x03
     b86:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	8d 83       	std	Y+5, r24	; 0x05
     b92:	9e 83       	std	Y+6, r25	; 0x06
     b94:	af 83       	std	Y+7, r26	; 0x07
     b96:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     b98:	ce 01       	movw	r24, r28
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	64 e0       	ldi	r22, 0x04	; 4
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	1f d1       	rcall	.+574    	; 0xde4 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     ba6:	ce 01       	movw	r24, r28
     ba8:	05 96       	adiw	r24, 0x05	; 5
     baa:	64 e0       	ldi	r22, 0x04	; 4
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	18 d1       	rcall	.+560    	; 0xde4 <Endpoint_Write_Stream_BE>
     bb4:	80 91 e8 00 	lds	r24, 0x00E8
     bb8:	8e 77       	andi	r24, 0x7E	; 126
     bba:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     bbe:	f8 01       	movw	r30, r16
     bc0:	84 89       	ldd	r24, Z+20	; 0x14
     bc2:	95 89       	ldd	r25, Z+21	; 0x15
     bc4:	a6 89       	ldd	r26, Z+22	; 0x16
     bc6:	b7 89       	ldd	r27, Z+23	; 0x17
     bc8:	08 97       	sbiw	r24, 0x08	; 8
     bca:	a1 09       	sbc	r26, r1
     bcc:	b1 09       	sbc	r27, r1
     bce:	38 c0       	rjmp	.+112    	; 0xc40 <SCSI_DecodeSCSICommand+0x1f4>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     bd0:	f8 01       	movw	r30, r16
     bd2:	84 8d       	ldd	r24, Z+28	; 0x1c
     bd4:	82 fd       	sbrc	r24, 2
     bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <SCSI_DecodeSCSICommand+0x19c>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     bd8:	80 91 a8 01 	lds	r24, 0x01A8
     bdc:	80 7f       	andi	r24, 0xF0	; 240
     bde:	85 60       	ori	r24, 0x05	; 5
     be0:	80 93 a8 01 	sts	0x01A8, r24
     be4:	84 e2       	ldi	r24, 0x24	; 36
     be6:	3e c0       	rjmp	.+124    	; 0xc64 <SCSI_DecodeSCSICommand+0x218>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     be8:	a2 de       	rcall	.-700    	; 0x92e <DataflashManager_CheckDataflashOperation>
     bea:	88 23       	and	r24, r24
     bec:	71 f5       	brne	.+92     	; 0xc4a <SCSI_DecodeSCSICommand+0x1fe>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     bee:	80 91 a8 01 	lds	r24, 0x01A8
     bf2:	80 7f       	andi	r24, 0xF0	; 240
     bf4:	84 60       	ori	r24, 0x04	; 4
     bf6:	80 93 a8 01 	sts	0x01A8, r24
     bfa:	10 92 b2 01 	sts	0x01B2, r1
     bfe:	10 92 b3 01 	sts	0x01B3, r1
     c02:	3e c0       	rjmp	.+124    	; 0xc80 <SCSI_DecodeSCSICommand+0x234>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     c04:	c8 01       	movw	r24, r16
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <SCSI_DecodeSCSICommand+0x1c2>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     c0a:	c8 01       	movw	r24, r16
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	be de       	rcall	.-644    	; 0x98c <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     c10:	88 23       	and	r24, r24
     c12:	b1 f1       	breq	.+108    	; 0xc80 <SCSI_DecodeSCSICommand+0x234>
     c14:	2a c0       	rjmp	.+84     	; 0xc6a <SCSI_DecodeSCSICommand+0x21e>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c16:	10 92 f1 00 	sts	0x00F1, r1
     c1a:	10 92 f1 00 	sts	0x00F1, r1
     c1e:	10 92 f1 00 	sts	0x00F1, r1
     c22:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c26:	80 91 e8 00 	lds	r24, 0x00E8
     c2a:	8e 77       	andi	r24, 0x7E	; 126
     c2c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     c30:	f8 01       	movw	r30, r16
     c32:	84 89       	ldd	r24, Z+20	; 0x14
     c34:	95 89       	ldd	r25, Z+21	; 0x15
     c36:	a6 89       	ldd	r26, Z+22	; 0x16
     c38:	b7 89       	ldd	r27, Z+23	; 0x17
     c3a:	04 97       	sbiw	r24, 0x04	; 4
     c3c:	a1 09       	sbc	r26, r1
     c3e:	b1 09       	sbc	r27, r1
     c40:	84 8b       	std	Z+20, r24	; 0x14
     c42:	95 8b       	std	Z+21, r25	; 0x15
     c44:	a6 8b       	std	Z+22, r26	; 0x16
     c46:	b7 8b       	std	Z+23, r27	; 0x17
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
     c48:	10 c0       	rjmp	.+32     	; 0xc6a <SCSI_DecodeSCSICommand+0x21e>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     c4a:	f8 01       	movw	r30, r16
     c4c:	14 8a       	std	Z+20, r1	; 0x14
     c4e:	15 8a       	std	Z+21, r1	; 0x15
     c50:	16 8a       	std	Z+22, r1	; 0x16
     c52:	17 8a       	std	Z+23, r1	; 0x17
     c54:	0a c0       	rjmp	.+20     	; 0xc6a <SCSI_DecodeSCSICommand+0x21e>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c56:	80 91 a8 01 	lds	r24, 0x01A8
     c5a:	80 7f       	andi	r24, 0xF0	; 240
     c5c:	85 60       	ori	r24, 0x05	; 5
     c5e:	80 93 a8 01 	sts	0x01A8, r24
     c62:	80 e2       	ldi	r24, 0x20	; 32
     c64:	80 93 b2 01 	sts	0x01B2, r24
     c68:	ca cf       	rjmp	.-108    	; 0xbfe <SCSI_DecodeSCSICommand+0x1b2>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     c6a:	80 91 a8 01 	lds	r24, 0x01A8
     c6e:	80 7f       	andi	r24, 0xF0	; 240
     c70:	80 93 a8 01 	sts	0x01A8, r24
     c74:	10 92 b2 01 	sts	0x01B2, r1
     c78:	10 92 b3 01 	sts	0x01B3, r1
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <SCSI_DecodeSCSICommand+0x236>
	}

	return false;
     c80:	80 e0       	ldi	r24, 0x00	; 0
}
     c82:	28 96       	adiw	r28, 0x08	; 8
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	df 90       	pop	r13
     c9c:	cf 90       	pop	r12
     c9e:	08 95       	ret

00000ca0 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	ec 01       	movw	r28, r24
     cb0:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
     cb2:	a2 d2       	rcall	.+1348   	; 0x11f8 <Endpoint_WaitUntilReady>
     cb4:	d8 2e       	mov	r13, r24
     cb6:	88 23       	and	r24, r24
     cb8:	79 f5       	brne	.+94     	; 0xd18 <Endpoint_Null_Stream+0x78>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
     cba:	01 15       	cp	r16, r1
     cbc:	11 05       	cpc	r17, r1
     cbe:	29 f0       	breq	.+10     	; 0xcca <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
     cc0:	f8 01       	movw	r30, r16
     cc2:	20 81       	ld	r18, Z
     cc4:	31 81       	ldd	r19, Z+1	; 0x01
     cc6:	c2 1b       	sub	r28, r18
     cc8:	d3 0b       	sbc	r29, r19
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     cca:	ee 24       	eor	r14, r14
     ccc:	ff 24       	eor	r15, r15
     cce:	20 c0       	rjmp	.+64     	; 0xd10 <Endpoint_Null_Stream+0x70>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     cd0:	80 91 e8 00 	lds	r24, 0x00E8
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     cd4:	85 fd       	sbrc	r24, 5
     cd6:	16 c0       	rjmp	.+44     	; 0xd04 <Endpoint_Null_Stream+0x64>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cd8:	80 91 e8 00 	lds	r24, 0x00E8
     cdc:	8e 77       	andi	r24, 0x7E	; 126
     cde:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
     ce2:	01 15       	cp	r16, r1
     ce4:	11 05       	cpc	r17, r1
     ce6:	51 f0       	breq	.+20     	; 0xcfc <Endpoint_Null_Stream+0x5c>
			{
				*BytesProcessed += BytesInTransfer;
     ce8:	f8 01       	movw	r30, r16
     cea:	80 81       	ld	r24, Z
     cec:	91 81       	ldd	r25, Z+1	; 0x01
     cee:	8e 0d       	add	r24, r14
     cf0:	9f 1d       	adc	r25, r15
     cf2:	91 83       	std	Z+1, r25	; 0x01
     cf4:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     cf6:	95 e0       	ldi	r25, 0x05	; 5
     cf8:	d9 2e       	mov	r13, r25
     cfa:	0e c0       	rjmp	.+28     	; 0xd18 <Endpoint_Null_Stream+0x78>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     cfc:	7d d2       	rcall	.+1274   	; 0x11f8 <Endpoint_WaitUntilReady>
     cfe:	88 23       	and	r24, r24
     d00:	39 f0       	breq	.+14     	; 0xd10 <Endpoint_Null_Stream+0x70>
     d02:	09 c0       	rjmp	.+18     	; 0xd16 <Endpoint_Null_Stream+0x76>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d04:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
     d08:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
     d0a:	08 94       	sec
     d0c:	e1 1c       	adc	r14, r1
     d0e:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     d10:	20 97       	sbiw	r28, 0x00	; 0
     d12:	f1 f6       	brne	.-68     	; 0xcd0 <Endpoint_Null_Stream+0x30>
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <Endpoint_Null_Stream+0x78>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d16:	d8 2e       	mov	r13, r24
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
     d18:	8d 2d       	mov	r24, r13
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	ff 90       	pop	r15
     d24:	ef 90       	pop	r14
     d26:	df 90       	pop	r13
     d28:	08 95       	ret

00000d2a <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d2a:	8f 92       	push	r8
     d2c:	9f 92       	push	r9
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	0f 92       	push	r0
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	e8 2e       	mov	r14, r24
     d48:	4b 01       	movw	r8, r22
     d4a:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     d4c:	99 83       	std	Y+1, r25	; 0x01
     d4e:	54 d2       	rcall	.+1192   	; 0x11f8 <Endpoint_WaitUntilReady>
     d50:	b8 2e       	mov	r11, r24
     d52:	99 81       	ldd	r25, Y+1	; 0x01
     d54:	88 23       	and	r24, r24
     d56:	c1 f5       	brne	.+112    	; 0xdc8 <Endpoint_Write_Stream_LE+0x9e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d58:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d5a:	01 15       	cp	r16, r1
     d5c:	11 05       	cpc	r17, r1
     d5e:	39 f0       	breq	.+14     	; 0xd6e <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     d60:	f8 01       	movw	r30, r16
     d62:	20 81       	ld	r18, Z
     d64:	31 81       	ldd	r19, Z+1	; 0x01
     d66:	82 1a       	sub	r8, r18
     d68:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d6a:	e2 0e       	add	r14, r18
     d6c:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d6e:	cc 24       	eor	r12, r12
     d70:	dd 24       	eor	r13, r13
     d72:	25 c0       	rjmp	.+74     	; 0xdbe <Endpoint_Write_Stream_LE+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d74:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     d78:	85 fd       	sbrc	r24, 5
     d7a:	16 c0       	rjmp	.+44     	; 0xda8 <Endpoint_Write_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d7c:	80 91 e8 00 	lds	r24, 0x00E8
     d80:	8e 77       	andi	r24, 0x7E	; 126
     d82:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     d86:	01 15       	cp	r16, r1
     d88:	11 05       	cpc	r17, r1
     d8a:	51 f0       	breq	.+20     	; 0xda0 <Endpoint_Write_Stream_LE+0x76>
			{
				*BytesProcessed += BytesInTransfer;
     d8c:	f8 01       	movw	r30, r16
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	8c 0d       	add	r24, r12
     d94:	9d 1d       	adc	r25, r13
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     d9a:	25 e0       	ldi	r18, 0x05	; 5
     d9c:	b2 2e       	mov	r11, r18
     d9e:	14 c0       	rjmp	.+40     	; 0xdc8 <Endpoint_Write_Stream_LE+0x9e>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     da0:	2b d2       	rcall	.+1110   	; 0x11f8 <Endpoint_WaitUntilReady>
     da2:	88 23       	and	r24, r24
     da4:	61 f0       	breq	.+24     	; 0xdbe <Endpoint_Write_Stream_LE+0x94>
     da6:	0f c0       	rjmp	.+30     	; 0xdc6 <Endpoint_Write_Stream_LE+0x9c>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     da8:	f7 01       	movw	r30, r14
     daa:	81 91       	ld	r24, Z+
     dac:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dae:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     db2:	08 94       	sec
     db4:	81 08       	sbc	r8, r1
     db6:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     db8:	08 94       	sec
     dba:	c1 1c       	adc	r12, r1
     dbc:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     dbe:	81 14       	cp	r8, r1
     dc0:	91 04       	cpc	r9, r1
     dc2:	c1 f6       	brne	.-80     	; 0xd74 <Endpoint_Write_Stream_LE+0x4a>
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <Endpoint_Write_Stream_LE+0x9e>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     dc6:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     dc8:	8b 2d       	mov	r24, r11
     dca:	0f 90       	pop	r0
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	bf 90       	pop	r11
     dde:	9f 90       	pop	r9
     de0:	8f 90       	pop	r8
     de2:	08 95       	ret

00000de4 <Endpoint_Write_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     de4:	bf 92       	push	r11
     de6:	cf 92       	push	r12
     de8:	df 92       	push	r13
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	6c 01       	movw	r12, r24
     df8:	eb 01       	movw	r28, r22
     dfa:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     dfc:	fd d1       	rcall	.+1018   	; 0x11f8 <Endpoint_WaitUntilReady>
     dfe:	b8 2e       	mov	r11, r24
     e00:	88 23       	and	r24, r24
     e02:	d1 f5       	brne	.+116    	; 0xe78 <Endpoint_Write_Stream_BE+0x94>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e04:	8e 01       	movw	r16, r28
     e06:	01 50       	subi	r16, 0x01	; 1
     e08:	10 40       	sbci	r17, 0x00	; 0
     e0a:	0c 0d       	add	r16, r12
     e0c:	1d 1d       	adc	r17, r13
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e0e:	e1 14       	cp	r14, r1
     e10:	f1 04       	cpc	r15, r1
     e12:	39 f0       	breq	.+14     	; 0xe22 <Endpoint_Write_Stream_BE+0x3e>
	{
		Length -= *BytesProcessed;
     e14:	f7 01       	movw	r30, r14
     e16:	20 81       	ld	r18, Z
     e18:	31 81       	ldd	r19, Z+1	; 0x01
     e1a:	c2 1b       	sub	r28, r18
     e1c:	d3 0b       	sbc	r29, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e1e:	02 1b       	sub	r16, r18
     e20:	13 0b       	sbc	r17, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e22:	cc 24       	eor	r12, r12
     e24:	dd 24       	eor	r13, r13
     e26:	24 c0       	rjmp	.+72     	; 0xe70 <Endpoint_Write_Stream_BE+0x8c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e28:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     e2c:	85 fd       	sbrc	r24, 5
     e2e:	16 c0       	rjmp	.+44     	; 0xe5c <Endpoint_Write_Stream_BE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e30:	80 91 e8 00 	lds	r24, 0x00E8
     e34:	8e 77       	andi	r24, 0x7E	; 126
     e36:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     e3a:	e1 14       	cp	r14, r1
     e3c:	f1 04       	cpc	r15, r1
     e3e:	51 f0       	breq	.+20     	; 0xe54 <Endpoint_Write_Stream_BE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     e40:	f7 01       	movw	r30, r14
     e42:	80 81       	ld	r24, Z
     e44:	91 81       	ldd	r25, Z+1	; 0x01
     e46:	8c 0d       	add	r24, r12
     e48:	9d 1d       	adc	r25, r13
     e4a:	91 83       	std	Z+1, r25	; 0x01
     e4c:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     e4e:	35 e0       	ldi	r19, 0x05	; 5
     e50:	b3 2e       	mov	r11, r19
     e52:	12 c0       	rjmp	.+36     	; 0xe78 <Endpoint_Write_Stream_BE+0x94>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e54:	d1 d1       	rcall	.+930    	; 0x11f8 <Endpoint_WaitUntilReady>
     e56:	88 23       	and	r24, r24
     e58:	59 f0       	breq	.+22     	; 0xe70 <Endpoint_Write_Stream_BE+0x8c>
     e5a:	0d c0       	rjmp	.+26     	; 0xe76 <Endpoint_Write_Stream_BE+0x92>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e5c:	f8 01       	movw	r30, r16
     e5e:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e60:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
     e64:	01 50       	subi	r16, 0x01	; 1
     e66:	10 40       	sbci	r17, 0x00	; 0
			Length--;
     e68:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
     e6a:	08 94       	sec
     e6c:	c1 1c       	adc	r12, r1
     e6e:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     e70:	20 97       	sbiw	r28, 0x00	; 0
     e72:	d1 f6       	brne	.-76     	; 0xe28 <Endpoint_Write_Stream_BE+0x44>
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <Endpoint_Write_Stream_BE+0x94>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e76:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     e78:	8b 2d       	mov	r24, r11
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	bf 90       	pop	r11
     e8c:	08 95       	ret

00000e8e <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e8e:	8f 92       	push	r8
     e90:	9f 92       	push	r9
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	0f 92       	push	r0
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	e8 2e       	mov	r14, r24
     eac:	4b 01       	movw	r8, r22
     eae:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     eb0:	99 83       	std	Y+1, r25	; 0x01
     eb2:	a2 d1       	rcall	.+836    	; 0x11f8 <Endpoint_WaitUntilReady>
     eb4:	b8 2e       	mov	r11, r24
     eb6:	99 81       	ldd	r25, Y+1	; 0x01
     eb8:	88 23       	and	r24, r24
     eba:	c1 f5       	brne	.+112    	; 0xf2c <Endpoint_Read_Stream_LE+0x9e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     ebc:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     ebe:	01 15       	cp	r16, r1
     ec0:	11 05       	cpc	r17, r1
     ec2:	39 f0       	breq	.+14     	; 0xed2 <Endpoint_Read_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     ec4:	f8 01       	movw	r30, r16
     ec6:	20 81       	ld	r18, Z
     ec8:	31 81       	ldd	r19, Z+1	; 0x01
     eca:	82 1a       	sub	r8, r18
     ecc:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     ece:	e2 0e       	add	r14, r18
     ed0:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     ed2:	cc 24       	eor	r12, r12
     ed4:	dd 24       	eor	r13, r13
     ed6:	25 c0       	rjmp	.+74     	; 0xf22 <Endpoint_Read_Stream_LE+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ed8:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     edc:	85 fd       	sbrc	r24, 5
     ede:	16 c0       	rjmp	.+44     	; 0xf0c <Endpoint_Read_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ee0:	80 91 e8 00 	lds	r24, 0x00E8
     ee4:	8b 77       	andi	r24, 0x7B	; 123
     ee6:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     eea:	01 15       	cp	r16, r1
     eec:	11 05       	cpc	r17, r1
     eee:	51 f0       	breq	.+20     	; 0xf04 <Endpoint_Read_Stream_LE+0x76>
			{
				*BytesProcessed += BytesInTransfer;
     ef0:	f8 01       	movw	r30, r16
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	8c 0d       	add	r24, r12
     ef8:	9d 1d       	adc	r25, r13
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     efe:	45 e0       	ldi	r20, 0x05	; 5
     f00:	b4 2e       	mov	r11, r20
     f02:	14 c0       	rjmp	.+40     	; 0xf2c <Endpoint_Read_Stream_LE+0x9e>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     f04:	79 d1       	rcall	.+754    	; 0x11f8 <Endpoint_WaitUntilReady>
     f06:	88 23       	and	r24, r24
     f08:	61 f0       	breq	.+24     	; 0xf22 <Endpoint_Read_Stream_LE+0x94>
     f0a:	0f c0       	rjmp	.+30     	; 0xf2a <Endpoint_Read_Stream_LE+0x9c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f0c:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     f10:	f7 01       	movw	r30, r14
     f12:	81 93       	st	Z+, r24
     f14:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     f16:	08 94       	sec
     f18:	81 08       	sbc	r8, r1
     f1a:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     f1c:	08 94       	sec
     f1e:	c1 1c       	adc	r12, r1
     f20:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     f22:	81 14       	cp	r8, r1
     f24:	91 04       	cpc	r9, r1
     f26:	c1 f6       	brne	.-80     	; 0xed8 <Endpoint_Read_Stream_LE+0x4a>
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <Endpoint_Read_Stream_LE+0x9e>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     f2a:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     f2c:	8b 2d       	mov	r24, r11
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	df 90       	pop	r13
     f3e:	cf 90       	pop	r12
     f40:	bf 90       	pop	r11
     f42:	9f 90       	pop	r9
     f44:	8f 90       	pop	r8
     f46:	08 95       	ret

00000f48 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     f48:	28 2f       	mov	r18, r24
     f4a:	39 2f       	mov	r19, r25
     f4c:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     f4e:	80 91 f6 01 	lds	r24, 0x01F6
     f52:	90 91 f7 01 	lds	r25, 0x01F7
     f56:	86 17       	cp	r24, r22
     f58:	97 07       	cpc	r25, r23
     f5a:	18 f4       	brcc	.+6      	; 0xf62 <Endpoint_Write_Control_Stream_LE+0x1a>
     f5c:	bc 01       	movw	r22, r24
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	37 c0       	rjmp	.+110    	; 0xfd0 <Endpoint_Write_Control_Stream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f62:	61 15       	cp	r22, r1
     f64:	71 05       	cpc	r23, r1
     f66:	d9 f7       	brne	.-10     	; 0xf5e <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f68:	80 91 e8 00 	lds	r24, 0x00E8
     f6c:	8e 77       	andi	r24, 0x7E	; 126
     f6e:	80 93 e8 00 	sts	0x00E8, r24
     f72:	f5 cf       	rjmp	.-22     	; 0xf5e <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f74:	80 91 ef 01 	lds	r24, 0x01EF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f78:	88 23       	and	r24, r24
     f7a:	09 f4       	brne	.+2      	; 0xf7e <Endpoint_Write_Control_Stream_LE+0x36>
     f7c:	3f c0       	rjmp	.+126    	; 0xffc <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f7e:	85 30       	cpi	r24, 0x05	; 5
     f80:	c9 f1       	breq	.+114    	; 0xff4 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f82:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     f86:	83 fd       	sbrc	r24, 3
     f88:	37 c0       	rjmp	.+110    	; 0xff8 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f8a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     f8e:	82 fd       	sbrc	r24, 2
     f90:	2b c0       	rjmp	.+86     	; 0xfe8 <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f92:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     f96:	80 ff       	sbrs	r24, 0
     f98:	1b c0       	rjmp	.+54     	; 0xfd0 <Endpoint_Write_Control_Stream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     f9a:	80 91 f2 00 	lds	r24, 0x00F2
     f9e:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     fa2:	06 c0       	rjmp	.+12     	; 0xfb0 <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     fa4:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fa6:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     faa:	61 50       	subi	r22, 0x01	; 1
     fac:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     fae:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     fb0:	61 15       	cp	r22, r1
     fb2:	71 05       	cpc	r23, r1
     fb4:	19 f0       	breq	.+6      	; 0xfbc <Endpoint_Write_Control_Stream_LE+0x74>
     fb6:	88 30       	cpi	r24, 0x08	; 8
     fb8:	91 05       	cpc	r25, r1
     fba:	a0 f3       	brcs	.-24     	; 0xfa4 <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     fbc:	21 e0       	ldi	r18, 0x01	; 1
     fbe:	88 30       	cpi	r24, 0x08	; 8
     fc0:	91 05       	cpc	r25, r1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <Endpoint_Write_Control_Stream_LE+0x7e>
     fc4:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fc6:	80 91 e8 00 	lds	r24, 0x00E8
     fca:	8e 77       	andi	r24, 0x7E	; 126
     fcc:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     fd0:	61 15       	cp	r22, r1
     fd2:	71 05       	cpc	r23, r1
     fd4:	79 f6       	brne	.-98     	; 0xf74 <Endpoint_Write_Control_Stream_LE+0x2c>
     fd6:	22 23       	and	r18, r18
     fd8:	69 f6       	brne	.-102    	; 0xf74 <Endpoint_Write_Control_Stream_LE+0x2c>
     fda:	06 c0       	rjmp	.+12     	; 0xfe8 <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fdc:	80 91 ef 01 	lds	r24, 0x01EF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fe0:	88 23       	and	r24, r24
     fe2:	61 f0       	breq	.+24     	; 0xffc <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fe4:	85 30       	cpi	r24, 0x05	; 5
     fe6:	61 f0       	breq	.+24     	; 0x1000 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fe8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     fec:	82 ff       	sbrs	r24, 2
     fee:	f6 cf       	rjmp	.-20     	; 0xfdc <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1000:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1002:	08 95       	ret

00001004 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1004:	e8 2f       	mov	r30, r24
    1006:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1008:	80 91 f6 01 	lds	r24, 0x01F6
    100c:	90 91 f7 01 	lds	r25, 0x01F7
    1010:	86 17       	cp	r24, r22
    1012:	97 07       	cpc	r25, r23
    1014:	18 f4       	brcc	.+6      	; 0x101c <Endpoint_Write_Control_PStream_LE+0x18>
    1016:	bc 01       	movw	r22, r24
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	38 c0       	rjmp	.+112    	; 0x108c <Endpoint_Write_Control_PStream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    101c:	61 15       	cp	r22, r1
    101e:	71 05       	cpc	r23, r1
    1020:	d9 f7       	brne	.-10     	; 0x1018 <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1022:	80 91 e8 00 	lds	r24, 0x00E8
    1026:	8e 77       	andi	r24, 0x7E	; 126
    1028:	80 93 e8 00 	sts	0x00E8, r24
    102c:	f5 cf       	rjmp	.-22     	; 0x1018 <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    102e:	80 91 ef 01 	lds	r24, 0x01EF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1032:	88 23       	and	r24, r24
    1034:	09 f4       	brne	.+2      	; 0x1038 <Endpoint_Write_Control_PStream_LE+0x34>
    1036:	40 c0       	rjmp	.+128    	; 0x10b8 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1038:	85 30       	cpi	r24, 0x05	; 5
    103a:	d1 f1       	breq	.+116    	; 0x10b0 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    103c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1040:	83 fd       	sbrc	r24, 3
    1042:	38 c0       	rjmp	.+112    	; 0x10b4 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1044:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1048:	82 fd       	sbrc	r24, 2
    104a:	2c c0       	rjmp	.+88     	; 0x10a4 <Endpoint_Write_Control_PStream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    104c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1050:	80 ff       	sbrs	r24, 0
    1052:	1c c0       	rjmp	.+56     	; 0x108c <Endpoint_Write_Control_PStream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1054:	80 91 f2 00 	lds	r24, 0x00F2
    1058:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    105c:	07 c0       	rjmp	.+14     	; 0x106c <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    105e:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1060:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1064:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1066:	61 50       	subi	r22, 0x01	; 1
    1068:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    106a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    106c:	61 15       	cp	r22, r1
    106e:	71 05       	cpc	r23, r1
    1070:	19 f0       	breq	.+6      	; 0x1078 <Endpoint_Write_Control_PStream_LE+0x74>
    1072:	88 30       	cpi	r24, 0x08	; 8
    1074:	91 05       	cpc	r25, r1
    1076:	98 f3       	brcs	.-26     	; 0x105e <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1078:	21 e0       	ldi	r18, 0x01	; 1
    107a:	88 30       	cpi	r24, 0x08	; 8
    107c:	91 05       	cpc	r25, r1
    107e:	09 f0       	breq	.+2      	; 0x1082 <Endpoint_Write_Control_PStream_LE+0x7e>
    1080:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1082:	80 91 e8 00 	lds	r24, 0x00E8
    1086:	8e 77       	andi	r24, 0x7E	; 126
    1088:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    108c:	61 15       	cp	r22, r1
    108e:	71 05       	cpc	r23, r1
    1090:	71 f6       	brne	.-100    	; 0x102e <Endpoint_Write_Control_PStream_LE+0x2a>
    1092:	22 23       	and	r18, r18
    1094:	61 f6       	brne	.-104    	; 0x102e <Endpoint_Write_Control_PStream_LE+0x2a>
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <Endpoint_Write_Control_PStream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1098:	80 91 ef 01 	lds	r24, 0x01EF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    109c:	88 23       	and	r24, r24
    109e:	61 f0       	breq	.+24     	; 0x10b8 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10a0:	85 30       	cpi	r24, 0x05	; 5
    10a2:	61 f0       	breq	.+24     	; 0x10bc <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10a4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    10a8:	82 ff       	sbrs	r24, 2
    10aa:	f6 cf       	rjmp	.-20     	; 0x1098 <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    10b0:	83 e0       	ldi	r24, 0x03	; 3
    10b2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    10bc:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    10be:	08 95       	ret

000010c0 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    10c0:	98 2f       	mov	r25, r24
    10c2:	2c c0       	rjmp	.+88     	; 0x111c <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10c4:	29 2f       	mov	r18, r25
    10c6:	2f 70       	andi	r18, 0x0F	; 15
    10c8:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    10cc:	98 17       	cp	r25, r24
    10ce:	39 f0       	breq	.+14     	; 0x10de <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    10d0:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    10d4:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    10d8:	50 91 f0 00 	lds	r21, 0x00F0
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    10de:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    10e0:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    10e2:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    10e4:	21 ff       	sbrs	r18, 1
    10e6:	19 c0       	rjmp	.+50     	; 0x111a <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    10e8:	30 91 eb 00 	lds	r19, 0x00EB
    10ec:	3e 7f       	andi	r19, 0xFE	; 254
    10ee:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    10f2:	30 91 ed 00 	lds	r19, 0x00ED
    10f6:	3d 7f       	andi	r19, 0xFD	; 253
    10f8:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    10fc:	30 91 eb 00 	lds	r19, 0x00EB
    1100:	31 60       	ori	r19, 0x01	; 1
    1102:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1106:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    110a:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    110e:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1112:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1116:	27 ff       	sbrs	r18, 7
    1118:	08 c0       	rjmp	.+16     	; 0x112a <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    111a:	9f 5f       	subi	r25, 0xFF	; 255
    111c:	97 30       	cpi	r25, 0x07	; 7
    111e:	90 f2       	brcs	.-92     	; 0x10c4 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1120:	8f 70       	andi	r24, 0x0F	; 15
    1122:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    112a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    112c:	08 95       	ret

0000112e <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    113c:	e8 2e       	mov	r14, r24
    113e:	e7 01       	movw	r28, r14
    1140:	7e 01       	movw	r14, r28
    1142:	f9 2e       	mov	r15, r25
    1144:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1146:	00 e0       	ldi	r16, 0x00	; 0
    1148:	2a c0       	rjmp	.+84     	; 0x119e <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
    114a:	98 81       	ld	r25, Y
    114c:	99 23       	and	r25, r25
    114e:	29 f1       	breq	.+74     	; 0x119a <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1150:	6b 81       	ldd	r22, Y+3	; 0x03
    1152:	e9 81       	ldd	r30, Y+1	; 0x01
    1154:	fa 81       	ldd	r31, Y+2	; 0x02
    1156:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1158:	89 2f       	mov	r24, r25
    115a:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    115c:	87 30       	cpi	r24, 0x07	; 7
    115e:	18 f5       	brcc	.+70     	; 0x11a6 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1160:	62 95       	swap	r22
    1162:	66 0f       	add	r22, r22
    1164:	66 0f       	add	r22, r22
    1166:	60 7c       	andi	r22, 0xC0	; 192
    1168:	99 1f       	adc	r25, r25
    116a:	99 27       	eor	r25, r25
    116c:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    116e:	69 2b       	or	r22, r25
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	10 f0       	brcs	.+4      	; 0x1178 <Endpoint_ConfigureEndpointTable+0x4a>
    1174:	96 e0       	ldi	r25, 0x06	; 6
    1176:	01 c0       	rjmp	.+2      	; 0x117a <Endpoint_ConfigureEndpointTable+0x4c>
    1178:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    117a:	28 e0       	ldi	r18, 0x08	; 8
    117c:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	03 c0       	rjmp	.+6      	; 0x1188 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1182:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1184:	22 0f       	add	r18, r18
    1186:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1188:	2e 17       	cp	r18, r30
    118a:	3f 07       	cpc	r19, r31
    118c:	d0 f3       	brcs	.-12     	; 0x1182 <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    118e:	42 95       	swap	r20
    1190:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1192:	49 2b       	or	r20, r25
    1194:	95 df       	rcall	.-214    	; 0x10c0 <Endpoint_ConfigureEndpoint_Prv>
    1196:	88 23       	and	r24, r24
    1198:	31 f0       	breq	.+12     	; 0x11a6 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    119a:	0f 5f       	subi	r16, 0xFF	; 255
    119c:	25 96       	adiw	r28, 0x05	; 5
    119e:	01 17       	cp	r16, r17
    11a0:	a0 f2       	brcs	.-88     	; 0x114a <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    11a6:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	08 95       	ret

000011b6 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    11b6:	80 91 f0 01 	lds	r24, 0x01F0
    11ba:	87 ff       	sbrs	r24, 7
    11bc:	13 c0       	rjmp	.+38     	; 0x11e4 <Endpoint_ClearStatusStage+0x2e>
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    11c0:	80 91 ef 01 	lds	r24, 0x01EF
    11c4:	88 23       	and	r24, r24
    11c6:	b9 f0       	breq	.+46     	; 0x11f6 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11c8:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    11cc:	82 ff       	sbrs	r24, 2
    11ce:	f8 cf       	rjmp	.-16     	; 0x11c0 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11d0:	80 91 e8 00 	lds	r24, 0x00E8
    11d4:	8b 77       	andi	r24, 0x7B	; 123
    11d6:	80 93 e8 00 	sts	0x00E8, r24
    11da:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    11dc:	80 91 ef 01 	lds	r24, 0x01EF
    11e0:	88 23       	and	r24, r24
    11e2:	49 f0       	breq	.+18     	; 0x11f6 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11e4:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    11e8:	80 ff       	sbrs	r24, 0
    11ea:	f8 cf       	rjmp	.-16     	; 0x11dc <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11ec:	80 91 e8 00 	lds	r24, 0x00E8
    11f0:	8e 77       	andi	r24, 0x7E	; 126
    11f2:	80 93 e8 00 	sts	0x00E8, r24
    11f6:	08 95       	ret

000011f8 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    11f8:	80 91 e4 00 	lds	r24, 0x00E4
    11fc:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    1200:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1202:	20 91 ec 00 	lds	r18, 0x00EC
    1206:	20 ff       	sbrs	r18, 0
    1208:	26 c0       	rjmp	.+76     	; 0x1256 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    120a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    120e:	20 fd       	sbrc	r18, 0
    1210:	16 c0       	rjmp	.+44     	; 0x123e <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1212:	20 91 ef 01 	lds	r18, 0x01EF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1216:	22 23       	and	r18, r18
    1218:	a1 f0       	breq	.+40     	; 0x1242 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    121a:	25 30       	cpi	r18, 0x05	; 5
    121c:	a1 f0       	breq	.+40     	; 0x1246 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    121e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1222:	25 fd       	sbrc	r18, 5
    1224:	12 c0       	rjmp	.+36     	; 0x124a <Endpoint_WaitUntilReady+0x52>
    1226:	20 91 e4 00 	lds	r18, 0x00E4
    122a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    122e:	28 17       	cp	r18, r24
    1230:	39 07       	cpc	r19, r25
    1232:	39 f3       	breq	.-50     	; 0x1202 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1234:	44 23       	and	r20, r20
    1236:	59 f0       	breq	.+22     	; 0x124e <Endpoint_WaitUntilReady+0x56>
    1238:	41 50       	subi	r20, 0x01	; 1
    123a:	c9 01       	movw	r24, r18
    123c:	e2 cf       	rjmp	.-60     	; 0x1202 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    124e:	84 e0       	ldi	r24, 0x04	; 4
    1250:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1252:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1254:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1256:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    125a:	22 ff       	sbrs	r18, 2
    125c:	da cf       	rjmp	.-76     	; 0x1212 <Endpoint_WaitUntilReady+0x1a>
    125e:	f9 cf       	rjmp	.-14     	; 0x1252 <Endpoint_WaitUntilReady+0x5a>

00001260 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1268:	4e d0       	rcall	.+156    	; 0x1306 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    126a:	55 d0       	rcall	.+170    	; 0x1316 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    126c:	c8 ed       	ldi	r28, 0xD8	; 216
    126e:	d0 e0       	ldi	r29, 0x00	; 0
    1270:	88 81       	ld	r24, Y
    1272:	8f 77       	andi	r24, 0x7F	; 127
    1274:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1276:	88 81       	ld	r24, Y
    1278:	80 68       	ori	r24, 0x80	; 128
    127a:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    127c:	88 81       	ld	r24, Y
    127e:	8f 7d       	andi	r24, 0xDF	; 223
    1280:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1282:	e7 ed       	ldi	r30, 0xD7	; 215
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	80 68       	ori	r24, 0x80	; 128
    128a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    128c:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    128e:	10 92 ef 01 	sts	0x01EF, r1
	USB_Device_ConfigurationNumber  = 0;
    1292:	10 92 eb 01 	sts	0x01EB, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1296:	10 92 ed 01 	sts	0x01ED, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    129a:	10 92 ec 01 	sts	0x01EC, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    129e:	00 ee       	ldi	r16, 0xE0	; 224
    12a0:	10 e0       	ldi	r17, 0x00	; 0
    12a2:	f8 01       	movw	r30, r16
    12a4:	80 81       	ld	r24, Z
    12a6:	8b 7f       	andi	r24, 0xFB	; 251
    12a8:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    12aa:	88 81       	ld	r24, Y
    12ac:	81 60       	ori	r24, 0x01	; 1
    12ae:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	42 e0       	ldi	r20, 0x02	; 2
    12b6:	04 df       	rcall	.-504    	; 0x10c0 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    12b8:	e1 ee       	ldi	r30, 0xE1	; 225
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8e 7f       	andi	r24, 0xFE	; 254
    12c0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    12c2:	e2 ee       	ldi	r30, 0xE2	; 226
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	81 60       	ori	r24, 0x01	; 1
    12ca:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    12cc:	80 81       	ld	r24, Z
    12ce:	88 60       	ori	r24, 0x08	; 8
    12d0:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    12d2:	f8 01       	movw	r30, r16
    12d4:	80 81       	ld	r24, Z
    12d6:	8e 7f       	andi	r24, 0xFE	; 254
    12d8:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    12da:	88 81       	ld	r24, Y
    12dc:	80 61       	ori	r24, 0x10	; 16
    12de:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	08 95       	ret

000012ea <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    12ea:	e8 ed       	ldi	r30, 0xD8	; 216
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8f 7e       	andi	r24, 0xEF	; 239
    12f2:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    12f4:	e7 ed       	ldi	r30, 0xD7	; 215
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	81 60       	ori	r24, 0x01	; 1
    12fc:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	80 93 ee 01 	sts	0x01EE, r24

	USB_ResetInterface();
}
    1304:	ad cf       	rjmp	.-166    	; 0x1260 <USB_ResetInterface>

00001306 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1306:	e8 ed       	ldi	r30, 0xD8	; 216
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	8c 7f       	andi	r24, 0xFC	; 252
    130e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1310:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1314:	08 95       	ret

00001316 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1316:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    131a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    131e:	08 95       	ret

00001320 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1320:	1f 92       	push	r1
    1322:	0f 92       	push	r0
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	0f 92       	push	r0
    1328:	0b b6       	in	r0, 0x3b	; 59
    132a:	0f 92       	push	r0
    132c:	11 24       	eor	r1, r1
    132e:	2f 93       	push	r18
    1330:	3f 93       	push	r19
    1332:	4f 93       	push	r20
    1334:	5f 93       	push	r21
    1336:	6f 93       	push	r22
    1338:	7f 93       	push	r23
    133a:	8f 93       	push	r24
    133c:	9f 93       	push	r25
    133e:	af 93       	push	r26
    1340:	bf 93       	push	r27
    1342:	ef 93       	push	r30
    1344:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1346:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    134a:	82 ff       	sbrs	r24, 2
    134c:	0a c0       	rjmp	.+20     	; 0x1362 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    134e:	80 91 e2 00 	lds	r24, 0x00E2
    1352:	82 ff       	sbrs	r24, 2
    1354:	06 c0       	rjmp	.+12     	; 0x1362 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1356:	80 91 e1 00 	lds	r24, 0x00E1
    135a:	8b 7f       	andi	r24, 0xFB	; 251
    135c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1360:	53 d2       	rcall	.+1190   	; 0x1808 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1362:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1366:	80 ff       	sbrs	r24, 0
    1368:	1f c0       	rjmp	.+62     	; 0x13a8 <__vector_10+0x88>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    136a:	80 91 d8 00 	lds	r24, 0x00D8
    136e:	80 ff       	sbrs	r24, 0
    1370:	1b c0       	rjmp	.+54     	; 0x13a8 <__vector_10+0x88>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1372:	80 91 da 00 	lds	r24, 0x00DA
    1376:	8e 7f       	andi	r24, 0xFE	; 254
    1378:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    137c:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1380:	80 ff       	sbrs	r24, 0
    1382:	0d c0       	rjmp	.+26     	; 0x139e <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1384:	8c e0       	ldi	r24, 0x0C	; 12
    1386:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1388:	8e e0       	ldi	r24, 0x0E	; 14
    138a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    138c:	09 b4       	in	r0, 0x29	; 41
    138e:	00 fe       	sbrs	r0, 0
    1390:	fd cf       	rjmp	.-6      	; 0x138c <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	80 93 ef 01 	sts	0x01EF, r24
			EVENT_USB_Device_Connect();
    1398:	0e 94 65 01 	call	0x2ca	; 0x2ca <EVENT_USB_Device_Connect>
    139c:	05 c0       	rjmp	.+10     	; 0x13a8 <__vector_10+0x88>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    139e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    13a0:	10 92 ef 01 	sts	0x01EF, r1
			EVENT_USB_Device_Disconnect();
    13a4:	0e 94 67 01 	call	0x2ce	; 0x2ce <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    13a8:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    13ac:	80 ff       	sbrs	r24, 0
    13ae:	18 c0       	rjmp	.+48     	; 0x13e0 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    13b0:	80 91 e2 00 	lds	r24, 0x00E2
    13b4:	80 ff       	sbrs	r24, 0
    13b6:	14 c0       	rjmp	.+40     	; 0x13e0 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    13b8:	80 91 e2 00 	lds	r24, 0x00E2
    13bc:	8e 7f       	andi	r24, 0xFE	; 254
    13be:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    13c2:	80 91 e2 00 	lds	r24, 0x00E2
    13c6:	80 61       	ori	r24, 0x10	; 16
    13c8:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    13cc:	80 91 d8 00 	lds	r24, 0x00D8
    13d0:	80 62       	ori	r24, 0x20	; 32
    13d2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    13d6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    13d8:	85 e0       	ldi	r24, 0x05	; 5
    13da:	80 93 ef 01 	sts	0x01EF, r24
		EVENT_USB_Device_Suspend();
    13de:	14 d2       	rcall	.+1064   	; 0x1808 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    13e0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    13e4:	84 ff       	sbrs	r24, 4
    13e6:	2d c0       	rjmp	.+90     	; 0x1442 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    13e8:	80 91 e2 00 	lds	r24, 0x00E2
    13ec:	84 ff       	sbrs	r24, 4
    13ee:	29 c0       	rjmp	.+82     	; 0x1442 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    13f0:	8c e0       	ldi	r24, 0x0C	; 12
    13f2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    13f4:	8e e0       	ldi	r24, 0x0E	; 14
    13f6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    13f8:	09 b4       	in	r0, 0x29	; 41
    13fa:	00 fe       	sbrs	r0, 0
    13fc:	fd cf       	rjmp	.-6      	; 0x13f8 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    13fe:	80 91 d8 00 	lds	r24, 0x00D8
    1402:	8f 7d       	andi	r24, 0xDF	; 223
    1404:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1408:	80 91 e1 00 	lds	r24, 0x00E1
    140c:	8f 7e       	andi	r24, 0xEF	; 239
    140e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1412:	80 91 e2 00 	lds	r24, 0x00E2
    1416:	8f 7e       	andi	r24, 0xEF	; 239
    1418:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    141c:	80 91 e2 00 	lds	r24, 0x00E2
    1420:	81 60       	ori	r24, 0x01	; 1
    1422:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1426:	80 91 eb 01 	lds	r24, 0x01EB
    142a:	88 23       	and	r24, r24
    142c:	21 f4       	brne	.+8      	; 0x1436 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    142e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1432:	87 ff       	sbrs	r24, 7
    1434:	02 c0       	rjmp	.+4      	; 0x143a <__vector_10+0x11a>
    1436:	84 e0       	ldi	r24, 0x04	; 4
    1438:	01 c0       	rjmp	.+2      	; 0x143c <__vector_10+0x11c>
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	80 93 ef 01 	sts	0x01EF, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1440:	e3 d1       	rcall	.+966    	; 0x1808 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1442:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1446:	83 ff       	sbrs	r24, 3
    1448:	27 c0       	rjmp	.+78     	; 0x1498 <__vector_10+0x178>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    144a:	80 91 e2 00 	lds	r24, 0x00E2
    144e:	83 ff       	sbrs	r24, 3
    1450:	23 c0       	rjmp	.+70     	; 0x1498 <__vector_10+0x178>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1452:	80 91 e1 00 	lds	r24, 0x00E1
    1456:	87 7f       	andi	r24, 0xF7	; 247
    1458:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    145c:	82 e0       	ldi	r24, 0x02	; 2
    145e:	80 93 ef 01 	sts	0x01EF, r24
		USB_Device_ConfigurationNumber = 0;
    1462:	10 92 eb 01 	sts	0x01EB, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1466:	80 91 e1 00 	lds	r24, 0x00E1
    146a:	8e 7f       	andi	r24, 0xFE	; 254
    146c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1470:	80 91 e2 00 	lds	r24, 0x00E2
    1474:	8e 7f       	andi	r24, 0xFE	; 254
    1476:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    147a:	80 91 e2 00 	lds	r24, 0x00E2
    147e:	80 61       	ori	r24, 0x10	; 16
    1480:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	42 e0       	ldi	r20, 0x02	; 2
    148a:	1a de       	rcall	.-972    	; 0x10c0 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    148c:	80 91 f0 00 	lds	r24, 0x00F0
    1490:	88 60       	ori	r24, 0x08	; 8
    1492:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1496:	b8 d1       	rcall	.+880    	; 0x1808 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1498:	ff 91       	pop	r31
    149a:	ef 91       	pop	r30
    149c:	bf 91       	pop	r27
    149e:	af 91       	pop	r26
    14a0:	9f 91       	pop	r25
    14a2:	8f 91       	pop	r24
    14a4:	7f 91       	pop	r23
    14a6:	6f 91       	pop	r22
    14a8:	5f 91       	pop	r21
    14aa:	4f 91       	pop	r20
    14ac:	3f 91       	pop	r19
    14ae:	2f 91       	pop	r18
    14b0:	0f 90       	pop	r0
    14b2:	0b be       	out	0x3b, r0	; 59
    14b4:	0f 90       	pop	r0
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	0f 90       	pop	r0
    14ba:	1f 90       	pop	r1
    14bc:	18 95       	reti

000014be <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    14be:	1f 92       	push	r1
    14c0:	0f 92       	push	r0
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	0f 92       	push	r0
    14c6:	0b b6       	in	r0, 0x3b	; 59
    14c8:	0f 92       	push	r0
    14ca:	11 24       	eor	r1, r1
    14cc:	1f 93       	push	r17
    14ce:	2f 93       	push	r18
    14d0:	3f 93       	push	r19
    14d2:	4f 93       	push	r20
    14d4:	5f 93       	push	r21
    14d6:	6f 93       	push	r22
    14d8:	7f 93       	push	r23
    14da:	8f 93       	push	r24
    14dc:	9f 93       	push	r25
    14de:	af 93       	push	r26
    14e0:	bf 93       	push	r27
    14e2:	ef 93       	push	r30
    14e4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14e6:	10 91 e9 00 	lds	r17, 0x00E9
    14ea:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    14ec:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14f0:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    14f4:	80 91 f0 00 	lds	r24, 0x00F0
    14f8:	87 7f       	andi	r24, 0xF7	; 247
    14fa:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    14fe:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1500:	1d d0       	rcall	.+58     	; 0x153c <USB_Device_ProcessControlRequest>
    1502:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1506:	80 91 f0 00 	lds	r24, 0x00F0
    150a:	88 60       	ori	r24, 0x08	; 8
    150c:	80 93 f0 00 	sts	0x00F0, r24
    1510:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1514:	ff 91       	pop	r31
    1516:	ef 91       	pop	r30
    1518:	bf 91       	pop	r27
    151a:	af 91       	pop	r26
    151c:	9f 91       	pop	r25
    151e:	8f 91       	pop	r24
    1520:	7f 91       	pop	r23
    1522:	6f 91       	pop	r22
    1524:	5f 91       	pop	r21
    1526:	4f 91       	pop	r20
    1528:	3f 91       	pop	r19
    152a:	2f 91       	pop	r18
    152c:	1f 91       	pop	r17
    152e:	0f 90       	pop	r0
    1530:	0b be       	out	0x3b, r0	; 59
    1532:	0f 90       	pop	r0
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	0f 90       	pop	r0
    1538:	1f 90       	pop	r1
    153a:	18 95       	reti

0000153c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    153c:	1f 93       	push	r17
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	ac 97       	sbiw	r28, 0x2c	; 44
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1552:	e0 ef       	ldi	r30, 0xF0	; 240
    1554:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1556:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    155a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    155c:	21 e0       	ldi	r18, 0x01	; 1
    155e:	e8 3f       	cpi	r30, 0xF8	; 248
    1560:	f2 07       	cpc	r31, r18
    1562:	c9 f7       	brne	.-14     	; 0x1556 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1564:	0e 94 80 01 	call	0x300	; 0x300 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1568:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    156c:	83 ff       	sbrs	r24, 3
    156e:	34 c1       	rjmp	.+616    	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1570:	80 91 f0 01 	lds	r24, 0x01F0

		switch (USB_ControlRequest.bRequest)
    1574:	20 91 f1 01 	lds	r18, 0x01F1
    1578:	25 30       	cpi	r18, 0x05	; 5
    157a:	09 f4       	brne	.+2      	; 0x157e <USB_Device_ProcessControlRequest+0x42>
    157c:	84 c0       	rjmp	.+264    	; 0x1686 <USB_Device_ProcessControlRequest+0x14a>
    157e:	26 30       	cpi	r18, 0x06	; 6
    1580:	40 f4       	brcc	.+16     	; 0x1592 <USB_Device_ProcessControlRequest+0x56>
    1582:	21 30       	cpi	r18, 0x01	; 1
    1584:	a1 f1       	breq	.+104    	; 0x15ee <USB_Device_ProcessControlRequest+0xb2>
    1586:	21 30       	cpi	r18, 0x01	; 1
    1588:	70 f0       	brcs	.+28     	; 0x15a6 <USB_Device_ProcessControlRequest+0x6a>
    158a:	23 30       	cpi	r18, 0x03	; 3
    158c:	09 f0       	breq	.+2      	; 0x1590 <USB_Device_ProcessControlRequest+0x54>
    158e:	24 c1       	rjmp	.+584    	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
    1590:	2e c0       	rjmp	.+92     	; 0x15ee <USB_Device_ProcessControlRequest+0xb2>
    1592:	28 30       	cpi	r18, 0x08	; 8
    1594:	09 f4       	brne	.+2      	; 0x1598 <USB_Device_ProcessControlRequest+0x5c>
    1596:	f1 c0       	rjmp	.+482    	; 0x177a <USB_Device_ProcessControlRequest+0x23e>
    1598:	29 30       	cpi	r18, 0x09	; 9
    159a:	09 f4       	brne	.+2      	; 0x159e <USB_Device_ProcessControlRequest+0x62>
    159c:	00 c1       	rjmp	.+512    	; 0x179e <USB_Device_ProcessControlRequest+0x262>
    159e:	26 30       	cpi	r18, 0x06	; 6
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <USB_Device_ProcessControlRequest+0x68>
    15a2:	1a c1       	rjmp	.+564    	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
    15a4:	93 c0       	rjmp	.+294    	; 0x16cc <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15a6:	80 38       	cpi	r24, 0x80	; 128
    15a8:	21 f0       	breq	.+8      	; 0x15b2 <USB_Device_ProcessControlRequest+0x76>
    15aa:	82 38       	cpi	r24, 0x82	; 130
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <USB_Device_ProcessControlRequest+0x74>
    15ae:	14 c1       	rjmp	.+552    	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
    15b0:	08 c0       	rjmp	.+16     	; 0x15c2 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    15b2:	80 91 ec 01 	lds	r24, 0x01EC
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    15b6:	90 91 ed 01 	lds	r25, 0x01ED
    15ba:	99 23       	and	r25, r25
    15bc:	71 f0       	breq	.+28     	; 0x15da <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    15be:	82 60       	ori	r24, 0x02	; 2
    15c0:	0c c0       	rjmp	.+24     	; 0x15da <USB_Device_ProcessControlRequest+0x9e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15c2:	80 91 f4 01 	lds	r24, 0x01F4
    15c6:	8f 70       	andi	r24, 0x0F	; 15
    15c8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    15cc:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	95 ff       	sbrs	r25, 5
    15d4:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15d6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15da:	90 91 e8 00 	lds	r25, 0x00E8
    15de:	97 7f       	andi	r25, 0xF7	; 247
    15e0:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    15e4:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    15e8:	10 92 f1 00 	sts	0x00F1, r1
    15ec:	d1 c0       	rjmp	.+418    	; 0x1790 <USB_Device_ProcessControlRequest+0x254>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15ee:	88 23       	and	r24, r24
    15f0:	19 f0       	breq	.+6      	; 0x15f8 <USB_Device_ProcessControlRequest+0xbc>
    15f2:	82 30       	cpi	r24, 0x02	; 2
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <USB_Device_ProcessControlRequest+0xbc>
    15f6:	f0 c0       	rjmp	.+480    	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	8f 71       	andi	r24, 0x1F	; 31
    15fc:	90 70       	andi	r25, 0x00	; 0
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	29 f0       	breq	.+10     	; 0x160c <USB_Device_ProcessControlRequest+0xd0>
    1602:	82 30       	cpi	r24, 0x02	; 2
    1604:	91 05       	cpc	r25, r1
    1606:	09 f0       	breq	.+2      	; 0x160a <USB_Device_ProcessControlRequest+0xce>
    1608:	e7 c0       	rjmp	.+462    	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
    160a:	0b c0       	rjmp	.+22     	; 0x1622 <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    160c:	80 91 f2 01 	lds	r24, 0x01F2
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	09 f0       	breq	.+2      	; 0x1616 <USB_Device_ProcessControlRequest+0xda>
    1614:	e1 c0       	rjmp	.+450    	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1616:	23 30       	cpi	r18, 0x03	; 3
    1618:	09 f0       	breq	.+2      	; 0x161c <USB_Device_ProcessControlRequest+0xe0>
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	80 93 ed 01 	sts	0x01ED, r24
    1620:	2c c0       	rjmp	.+88     	; 0x167a <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1622:	80 91 f2 01 	lds	r24, 0x01F2
    1626:	88 23       	and	r24, r24
    1628:	41 f5       	brne	.+80     	; 0x167a <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    162a:	20 91 f4 01 	lds	r18, 0x01F4
    162e:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1630:	09 f4       	brne	.+2      	; 0x1634 <USB_Device_ProcessControlRequest+0xf8>
    1632:	d2 c0       	rjmp	.+420    	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1634:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1638:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    163c:	80 ff       	sbrs	r24, 0
    163e:	1d c0       	rjmp	.+58     	; 0x167a <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1640:	80 91 f1 01 	lds	r24, 0x01F1
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	21 f4       	brne	.+8      	; 0x1650 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1648:	80 91 eb 00 	lds	r24, 0x00EB
    164c:	80 62       	ori	r24, 0x20	; 32
    164e:	13 c0       	rjmp	.+38     	; 0x1676 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1650:	80 91 eb 00 	lds	r24, 0x00EB
    1654:	80 61       	ori	r24, 0x10	; 16
    1656:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <USB_Device_ProcessControlRequest+0x128>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	2a 95       	dec	r18
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <USB_Device_ProcessControlRequest+0x124>
    1668:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    166c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1670:	80 91 eb 00 	lds	r24, 0x00EB
    1674:	88 60       	ori	r24, 0x08	; 8
    1676:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    167a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    167e:	80 91 e8 00 	lds	r24, 0x00E8
    1682:	87 7f       	andi	r24, 0xF7	; 247
    1684:	88 c0       	rjmp	.+272    	; 0x1796 <USB_Device_ProcessControlRequest+0x25a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1686:	88 23       	and	r24, r24
    1688:	09 f0       	breq	.+2      	; 0x168c <USB_Device_ProcessControlRequest+0x150>
    168a:	a6 c0       	rjmp	.+332    	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    168c:	10 91 f2 01 	lds	r17, 0x01F2
    1690:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1692:	80 91 e3 00 	lds	r24, 0x00E3
    1696:	80 78       	andi	r24, 0x80	; 128
    1698:	81 2b       	or	r24, r17
    169a:	80 93 e3 00 	sts	0x00E3, r24
    169e:	80 91 e8 00 	lds	r24, 0x00E8
    16a2:	87 7f       	andi	r24, 0xF7	; 247
    16a4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    16a8:	86 dd       	rcall	.-1268   	; 0x11b6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16aa:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    16ae:	80 ff       	sbrs	r24, 0
    16b0:	fc cf       	rjmp	.-8      	; 0x16aa <USB_Device_ProcessControlRequest+0x16e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    16b2:	80 91 e3 00 	lds	r24, 0x00E3
    16b6:	80 68       	ori	r24, 0x80	; 128
    16b8:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    16bc:	11 23       	and	r17, r17
    16be:	11 f0       	breq	.+4      	; 0x16c4 <USB_Device_ProcessControlRequest+0x188>
    16c0:	83 e0       	ldi	r24, 0x03	; 3
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <USB_Device_ProcessControlRequest+0x18a>
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	80 93 ef 01 	sts	0x01EF, r24
    16ca:	86 c0       	rjmp	.+268    	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    16cc:	80 58       	subi	r24, 0x80	; 128
    16ce:	82 30       	cpi	r24, 0x02	; 2
    16d0:	08 f0       	brcs	.+2      	; 0x16d4 <USB_Device_ProcessControlRequest+0x198>
    16d2:	82 c0       	rjmp	.+260    	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    16d4:	80 91 f2 01 	lds	r24, 0x01F2
    16d8:	90 91 f3 01 	lds	r25, 0x01F3
    16dc:	23 e0       	ldi	r18, 0x03	; 3
    16de:	8c 3d       	cpi	r24, 0xDC	; 220
    16e0:	92 07       	cpc	r25, r18
    16e2:	91 f5       	brne	.+100    	; 0x1748 <USB_Device_ProcessControlRequest+0x20c>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    16e8:	8a e2       	ldi	r24, 0x2A	; 42
    16ea:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    16ec:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    16ee:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    16f0:	de 01       	movw	r26, r28
    16f2:	15 96       	adiw	r26, 0x05	; 5
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    16f8:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    16fa:	61 e2       	ldi	r22, 0x21	; 33
    16fc:	e4 2f       	mov	r30, r20
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	60 93 57 00 	sts	0x0057, r22
    1704:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
    1706:	80 ff       	sbrs	r24, 0
    1708:	03 c0       	rjmp	.+6      	; 0x1710 <USB_Device_ProcessControlRequest+0x1d4>
					{
						SerialByte >>= 4;
    170a:	e2 95       	swap	r30
    170c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    170e:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1710:	ef 70       	andi	r30, 0x0F	; 15
    1712:	2e 2f       	mov	r18, r30
    1714:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1716:	ea 30       	cpi	r30, 0x0A	; 10
    1718:	18 f0       	brcs	.+6      	; 0x1720 <USB_Device_ProcessControlRequest+0x1e4>
    171a:	29 5c       	subi	r18, 0xC9	; 201
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <USB_Device_ProcessControlRequest+0x1e8>
    1720:	20 5d       	subi	r18, 0xD0	; 208
    1722:	3f 4f       	sbci	r19, 0xFF	; 255
    1724:	2d 93       	st	X+, r18
    1726:	3d 93       	st	X+, r19
    1728:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    172a:	84 31       	cpi	r24, 0x14	; 20
    172c:	91 05       	cpc	r25, r1
    172e:	31 f7       	brne	.-52     	; 0x16fc <USB_Device_ProcessControlRequest+0x1c0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1730:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1732:	80 91 e8 00 	lds	r24, 0x00E8
    1736:	87 7f       	andi	r24, 0xF7	; 247
    1738:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    173c:	ce 01       	movw	r24, r28
    173e:	03 96       	adiw	r24, 0x03	; 3
    1740:	6a e2       	ldi	r22, 0x2A	; 42
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	01 dc       	rcall	.-2046   	; 0xf48 <Endpoint_Write_Control_Stream_LE>
    1746:	13 c0       	rjmp	.+38     	; 0x176e <USB_Device_ProcessControlRequest+0x232>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1748:	60 91 f4 01 	lds	r22, 0x01F4
    174c:	ae 01       	movw	r20, r28
    174e:	4f 5f       	subi	r20, 0xFF	; 255
    1750:	5f 4f       	sbci	r21, 0xFF	; 255
    1752:	0e 94 98 01 	call	0x330	; 0x330 <CALLBACK_USB_GetDescriptor>
    1756:	bc 01       	movw	r22, r24
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	09 f4       	brne	.+2      	; 0x175e <USB_Device_ProcessControlRequest+0x222>
    175c:	3d c0       	rjmp	.+122    	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
    175e:	80 91 e8 00 	lds	r24, 0x00E8
    1762:	87 7f       	andi	r24, 0xF7	; 247
    1764:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	4b dc       	rcall	.-1898   	; 0x1004 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    176e:	80 91 e8 00 	lds	r24, 0x00E8
    1772:	8b 77       	andi	r24, 0x7B	; 123
    1774:	80 93 e8 00 	sts	0x00E8, r24
    1778:	2f c0       	rjmp	.+94     	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    177a:	80 38       	cpi	r24, 0x80	; 128
    177c:	69 f5       	brne	.+90     	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    177e:	80 91 e8 00 	lds	r24, 0x00E8
    1782:	87 7f       	andi	r24, 0xF7	; 247
    1784:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1788:	80 91 eb 01 	lds	r24, 0x01EB
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    178c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1790:	80 91 e8 00 	lds	r24, 0x00E8
    1794:	8e 77       	andi	r24, 0x7E	; 126
    1796:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    179a:	0d dd       	rcall	.-1510   	; 0x11b6 <Endpoint_ClearStatusStage>
    179c:	1d c0       	rjmp	.+58     	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    179e:	88 23       	and	r24, r24
    17a0:	d9 f4       	brne	.+54     	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    17a2:	90 91 f2 01 	lds	r25, 0x01F2
    17a6:	92 30       	cpi	r25, 0x02	; 2
    17a8:	b8 f4       	brcc	.+46     	; 0x17d8 <USB_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17aa:	80 91 e8 00 	lds	r24, 0x00E8
    17ae:	87 7f       	andi	r24, 0xF7	; 247
    17b0:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    17b4:	90 93 eb 01 	sts	0x01EB, r25

	Endpoint_ClearStatusStage();
    17b8:	fe dc       	rcall	.-1540   	; 0x11b6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    17ba:	80 91 eb 01 	lds	r24, 0x01EB
    17be:	88 23       	and	r24, r24
    17c0:	21 f4       	brne	.+8      	; 0x17ca <USB_Device_ProcessControlRequest+0x28e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    17c2:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    17c6:	87 ff       	sbrs	r24, 7
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <USB_Device_ProcessControlRequest+0x292>
    17ca:	84 e0       	ldi	r24, 0x04	; 4
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <USB_Device_ProcessControlRequest+0x294>
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	80 93 ef 01 	sts	0x01EF, r24

	EVENT_USB_Device_ConfigurationChanged();
    17d4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17d8:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    17dc:	83 ff       	sbrs	r24, 3
    17de:	0a c0       	rjmp	.+20     	; 0x17f4 <USB_Device_ProcessControlRequest+0x2b8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17e0:	80 91 e8 00 	lds	r24, 0x00E8
    17e4:	87 7f       	andi	r24, 0xF7	; 247
    17e6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    17ea:	80 91 eb 00 	lds	r24, 0x00EB
    17ee:	80 62       	ori	r24, 0x20	; 32
    17f0:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    17f4:	ac 96       	adiw	r28, 0x2c	; 44
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	1f 91       	pop	r17
    1806:	08 95       	ret

00001808 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1808:	08 95       	ret

0000180a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    180a:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    180c:	80 91 ef 01 	lds	r24, 0x01EF
    1810:	88 23       	and	r24, r24
    1812:	a9 f0       	breq	.+42     	; 0x183e <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1814:	80 91 e9 00 	lds	r24, 0x00E9
    1818:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    181a:	90 91 ec 00 	lds	r25, 0x00EC
    181e:	90 ff       	sbrs	r25, 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <USB_USBTask+0x1c>
    1822:	10 e8       	ldi	r17, 0x80	; 128
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <USB_USBTask+0x1e>
    1826:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1828:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    182a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    182e:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1832:	83 ff       	sbrs	r24, 3
    1834:	01 c0       	rjmp	.+2      	; 0x1838 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
    1836:	82 de       	rcall	.-764    	; 0x153c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1838:	1f 70       	andi	r17, 0x0F	; 15
    183a:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    183e:	1f 91       	pop	r17
    1840:	08 95       	ret

00001842 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1848:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    184c:	83 ff       	sbrs	r24, 3
    184e:	a3 c0       	rjmp	.+326    	; 0x1996 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1850:	88 81       	ld	r24, Y
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	20 91 f4 01 	lds	r18, 0x01F4
    1858:	30 91 f5 01 	lds	r19, 0x01F5
    185c:	28 17       	cp	r18, r24
    185e:	39 07       	cpc	r19, r25
    1860:	09 f0       	breq	.+2      	; 0x1864 <CDC_Device_ProcessControlRequest+0x22>
    1862:	99 c0       	rjmp	.+306    	; 0x1996 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
    1864:	80 91 f1 01 	lds	r24, 0x01F1
    1868:	81 32       	cpi	r24, 0x21	; 33
    186a:	69 f0       	breq	.+26     	; 0x1886 <CDC_Device_ProcessControlRequest+0x44>
    186c:	82 32       	cpi	r24, 0x22	; 34
    186e:	20 f4       	brcc	.+8      	; 0x1878 <CDC_Device_ProcessControlRequest+0x36>
    1870:	80 32       	cpi	r24, 0x20	; 32
    1872:	09 f0       	breq	.+2      	; 0x1876 <CDC_Device_ProcessControlRequest+0x34>
    1874:	90 c0       	rjmp	.+288    	; 0x1996 <CDC_Device_ProcessControlRequest+0x154>
    1876:	3c c0       	rjmp	.+120    	; 0x18f0 <CDC_Device_ProcessControlRequest+0xae>
    1878:	82 32       	cpi	r24, 0x22	; 34
    187a:	09 f4       	brne	.+2      	; 0x187e <CDC_Device_ProcessControlRequest+0x3c>
    187c:	6b c0       	rjmp	.+214    	; 0x1954 <CDC_Device_ProcessControlRequest+0x112>
    187e:	83 32       	cpi	r24, 0x23	; 35
    1880:	09 f0       	breq	.+2      	; 0x1884 <CDC_Device_ProcessControlRequest+0x42>
    1882:	89 c0       	rjmp	.+274    	; 0x1996 <CDC_Device_ProcessControlRequest+0x154>
    1884:	7a c0       	rjmp	.+244    	; 0x197a <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1886:	80 91 f0 01 	lds	r24, 0x01F0
    188a:	81 3a       	cpi	r24, 0xA1	; 161
    188c:	09 f0       	breq	.+2      	; 0x1890 <CDC_Device_ProcessControlRequest+0x4e>
    188e:	83 c0       	rjmp	.+262    	; 0x1996 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1890:	80 91 e8 00 	lds	r24, 0x00E8
    1894:	87 7f       	andi	r24, 0xF7	; 247
    1896:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    189a:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    189e:	80 ff       	sbrs	r24, 0
    18a0:	fc cf       	rjmp	.-8      	; 0x189a <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    18a2:	8c 89       	ldd	r24, Y+20	; 0x14
    18a4:	9d 89       	ldd	r25, Y+21	; 0x15
    18a6:	ae 89       	ldd	r26, Y+22	; 0x16
    18a8:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    18aa:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    18ae:	29 2f       	mov	r18, r25
    18b0:	3a 2f       	mov	r19, r26
    18b2:	4b 2f       	mov	r20, r27
    18b4:	55 27       	eor	r21, r21
    18b6:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    18ba:	9d 01       	movw	r18, r26
    18bc:	44 27       	eor	r20, r20
    18be:	55 27       	eor	r21, r21
    18c0:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    18c4:	8b 2f       	mov	r24, r27
    18c6:	99 27       	eor	r25, r25
    18c8:	aa 27       	eor	r26, r26
    18ca:	bb 27       	eor	r27, r27
    18cc:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    18d0:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18d2:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    18d6:	89 8d       	ldd	r24, Y+25	; 0x19
    18d8:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    18dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18de:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18e2:	80 91 e8 00 	lds	r24, 0x00E8
    18e6:	8e 77       	andi	r24, 0x7E	; 126
    18e8:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    18ec:	64 dc       	rcall	.-1848   	; 0x11b6 <Endpoint_ClearStatusStage>
    18ee:	53 c0       	rjmp	.+166    	; 0x1996 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    18f0:	80 91 f0 01 	lds	r24, 0x01F0
    18f4:	81 32       	cpi	r24, 0x21	; 33
    18f6:	09 f0       	breq	.+2      	; 0x18fa <CDC_Device_ProcessControlRequest+0xb8>
    18f8:	4e c0       	rjmp	.+156    	; 0x1996 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18fa:	80 91 e8 00 	lds	r24, 0x00E8
    18fe:	87 7f       	andi	r24, 0xF7	; 247
    1900:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1904:	05 c0       	rjmp	.+10     	; 0x1910 <CDC_Device_ProcessControlRequest+0xce>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1906:	80 91 ef 01 	lds	r24, 0x01EF
    190a:	88 23       	and	r24, r24
    190c:	09 f4       	brne	.+2      	; 0x1910 <CDC_Device_ProcessControlRequest+0xce>
    190e:	43 c0       	rjmp	.+134    	; 0x1996 <CDC_Device_ProcessControlRequest+0x154>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1910:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1914:	82 ff       	sbrs	r24, 2
    1916:	f7 cf       	rjmp	.-18     	; 0x1906 <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1918:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
    191c:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
    1920:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
    1924:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1928:	3c 8b       	std	Y+20, r19	; 0x14
    192a:	2d 8b       	std	Y+21, r18	; 0x15
    192c:	9e 8b       	std	Y+22, r25	; 0x16
    192e:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1930:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1934:	88 8f       	std	Y+24, r24	; 0x18
    1936:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    193a:	89 8f       	std	Y+25, r24	; 0x19
    193c:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1940:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1942:	80 91 e8 00 	lds	r24, 0x00E8
    1946:	8b 77       	andi	r24, 0x7B	; 123
    1948:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    194c:	34 dc       	rcall	.-1944   	; 0x11b6 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    194e:	ce 01       	movw	r24, r28
    1950:	1e d1       	rcall	.+572    	; 0x1b8e <CDC_Device_Event_Stub>
    1952:	21 c0       	rjmp	.+66     	; 0x1996 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1954:	80 91 f0 01 	lds	r24, 0x01F0
    1958:	81 32       	cpi	r24, 0x21	; 33
    195a:	e9 f4       	brne	.+58     	; 0x1996 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    195c:	80 91 e8 00 	lds	r24, 0x00E8
    1960:	87 7f       	andi	r24, 0xF7	; 247
    1962:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1966:	27 dc       	rcall	.-1970   	; 0x11b6 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1968:	80 91 f2 01 	lds	r24, 0x01F2
    196c:	90 91 f3 01 	lds	r25, 0x01F3
    1970:	99 8b       	std	Y+17, r25	; 0x11
    1972:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1974:	ce 01       	movw	r24, r28
    1976:	0b d1       	rcall	.+534    	; 0x1b8e <CDC_Device_Event_Stub>
    1978:	0e c0       	rjmp	.+28     	; 0x1996 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    197a:	80 91 f0 01 	lds	r24, 0x01F0
    197e:	81 32       	cpi	r24, 0x21	; 33
    1980:	51 f4       	brne	.+20     	; 0x1996 <CDC_Device_ProcessControlRequest+0x154>
    1982:	80 91 e8 00 	lds	r24, 0x00E8
    1986:	87 7f       	andi	r24, 0xF7	; 247
    1988:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    198c:	14 dc       	rcall	.-2008   	; 0x11b6 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    198e:	ce 01       	movw	r24, r28
    1990:	60 91 f2 01 	lds	r22, 0x01F2
    1994:	fc d0       	rcall	.+504    	; 0x1b8e <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	08 95       	ret

0000199c <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    19a2:	40 96       	adiw	r24, 0x10	; 16
    19a4:	fc 01       	movw	r30, r24
    19a6:	8b e0       	ldi	r24, 0x0B	; 11
    19a8:	df 01       	movw	r26, r30
    19aa:	1d 92       	st	X+, r1
    19ac:	8a 95       	dec	r24
    19ae:	e9 f7       	brne	.-6      	; 0x19aa <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    19b4:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    19b6:	83 e0       	ldi	r24, 0x03	; 3
    19b8:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    19ba:	ce 01       	movw	r24, r28
    19bc:	01 96       	adiw	r24, 0x01	; 1
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	b6 db       	rcall	.-2196   	; 0x112e <Endpoint_ConfigureEndpointTable>
    19c2:	88 23       	and	r24, r24
    19c4:	59 f0       	breq	.+22     	; 0x19dc <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    19c6:	ce 01       	movw	r24, r28
    19c8:	06 96       	adiw	r24, 0x06	; 6
    19ca:	61 e0       	ldi	r22, 0x01	; 1
    19cc:	b0 db       	rcall	.-2208   	; 0x112e <Endpoint_ConfigureEndpointTable>
    19ce:	88 23       	and	r24, r24
    19d0:	29 f0       	breq	.+10     	; 0x19dc <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    19d2:	ce 01       	movw	r24, r28
    19d4:	0b 96       	adiw	r24, 0x0b	; 11
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	aa db       	rcall	.-2220   	; 0x112e <Endpoint_ConfigureEndpointTable>
    19da:	01 c0       	rjmp	.+2      	; 0x19de <CDC_Device_ConfigureEndpoints+0x42>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
    19dc:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	08 95       	ret

000019e4 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	0f 92       	push	r0
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    19f0:	80 91 ef 01 	lds	r24, 0x01EF
    19f4:	84 30       	cpi	r24, 0x04	; 4
    19f6:	f9 f4       	brne	.+62     	; 0x1a36 <CDC_Device_SendByte+0x52>
    19f8:	24 89       	ldd	r18, Z+20	; 0x14
    19fa:	35 89       	ldd	r19, Z+21	; 0x15
    19fc:	46 89       	ldd	r20, Z+22	; 0x16
    19fe:	57 89       	ldd	r21, Z+23	; 0x17
    1a00:	21 15       	cp	r18, r1
    1a02:	31 05       	cpc	r19, r1
    1a04:	41 05       	cpc	r20, r1
    1a06:	51 05       	cpc	r21, r1
    1a08:	b1 f0       	breq	.+44     	; 0x1a36 <CDC_Device_SendByte+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a0a:	81 81       	ldd	r24, Z+1	; 0x01
    1a0c:	8f 70       	andi	r24, 0x0F	; 15
    1a0e:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a12:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    1a16:	85 fd       	sbrc	r24, 5
    1a18:	0a c0       	rjmp	.+20     	; 0x1a2e <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a1a:	80 91 e8 00 	lds	r24, 0x00E8
    1a1e:	8e 77       	andi	r24, 0x7E	; 126
    1a20:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1a24:	69 83       	std	Y+1, r22	; 0x01
    1a26:	e8 db       	rcall	.-2096   	; 0x11f8 <Endpoint_WaitUntilReady>
    1a28:	69 81       	ldd	r22, Y+1	; 0x01
    1a2a:	88 23       	and	r24, r24
    1a2c:	29 f4       	brne	.+10     	; 0x1a38 <CDC_Device_SendByte+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a2e:	60 93 f1 00 	sts	0x00F1, r22
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <CDC_Device_SendByte+0x54>

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1a36:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    1a40:	28 2f       	mov	r18, r24
    1a42:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    1a44:	84 85       	ldd	r24, Z+12	; 0x0c
    1a46:	95 85       	ldd	r25, Z+13	; 0x0d
    1a48:	62 2f       	mov	r22, r18
    1a4a:	cc df       	rcall	.-104    	; 0x19e4 <CDC_Device_SendByte>
    1a4c:	88 23       	and	r24, r24
    1a4e:	19 f0       	breq	.+6      	; 0x1a56 <CDC_Device_putchar+0x16>
    1a50:	2f ef       	ldi	r18, 0xFF	; 255
    1a52:	3f ef       	ldi	r19, 0xFF	; 255
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <CDC_Device_putchar+0x1a>
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
}
    1a5a:	c9 01       	movw	r24, r18
    1a5c:	08 95       	ret

00001a5e <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1a5e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1a60:	80 91 ef 01 	lds	r24, 0x01EF
    1a64:	84 30       	cpi	r24, 0x04	; 4
    1a66:	29 f5       	brne	.+74     	; 0x1ab2 <CDC_Device_Flush+0x54>
    1a68:	24 89       	ldd	r18, Z+20	; 0x14
    1a6a:	35 89       	ldd	r19, Z+21	; 0x15
    1a6c:	46 89       	ldd	r20, Z+22	; 0x16
    1a6e:	57 89       	ldd	r21, Z+23	; 0x17
    1a70:	21 15       	cp	r18, r1
    1a72:	31 05       	cpc	r19, r1
    1a74:	41 05       	cpc	r20, r1
    1a76:	51 05       	cpc	r21, r1
    1a78:	e1 f0       	breq	.+56     	; 0x1ab2 <CDC_Device_Flush+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a7a:	81 81       	ldd	r24, Z+1	; 0x01
    1a7c:	8f 70       	andi	r24, 0x0F	; 15
    1a7e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1a82:	80 91 f2 00 	lds	r24, 0x00F2
    1a86:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	a1 f0       	breq	.+40     	; 0x1ab6 <CDC_Device_Flush+0x58>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a8e:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a92:	80 91 e8 00 	lds	r24, 0x00E8
    1a96:	8e 77       	andi	r24, 0x7E	; 126
    1a98:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1a9c:	95 fd       	sbrc	r25, 5
    1a9e:	0d c0       	rjmp	.+26     	; 0x1aba <CDC_Device_Flush+0x5c>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1aa0:	ab db       	rcall	.-2218   	; 0x11f8 <Endpoint_WaitUntilReady>
    1aa2:	88 23       	and	r24, r24
    1aa4:	59 f4       	brne	.+22     	; 0x1abc <CDC_Device_Flush+0x5e>
    1aa6:	90 91 e8 00 	lds	r25, 0x00E8
    1aaa:	9e 77       	andi	r25, 0x7E	; 126
    1aac:	90 93 e8 00 	sts	0x00E8, r25
    1ab0:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    1aba:	80 e0       	ldi	r24, 0x00	; 0
}
    1abc:	08 95       	ret

00001abe <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1abe:	20 91 ef 01 	lds	r18, 0x01EF
    1ac2:	24 30       	cpi	r18, 0x04	; 4
    1ac4:	99 f4       	brne	.+38     	; 0x1aec <CDC_Device_USBTask+0x2e>
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	24 89       	ldd	r18, Z+20	; 0x14
    1aca:	35 89       	ldd	r19, Z+21	; 0x15
    1acc:	46 89       	ldd	r20, Z+22	; 0x16
    1ace:	57 89       	ldd	r21, Z+23	; 0x17
    1ad0:	21 15       	cp	r18, r1
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	41 05       	cpc	r20, r1
    1ad6:	51 05       	cpc	r21, r1
    1ad8:	49 f0       	breq	.+18     	; 0x1aec <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ada:	21 81       	ldd	r18, Z+1	; 0x01
    1adc:	2f 70       	andi	r18, 0x0F	; 15
    1ade:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ae2:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    1ae6:	20 ff       	sbrs	r18, 0
    1ae8:	01 c0       	rjmp	.+2      	; 0x1aec <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
    1aea:	b9 cf       	rjmp	.-142    	; 0x1a5e <CDC_Device_Flush>
    1aec:	08 95       	ret

00001aee <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1aee:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1af0:	80 91 ef 01 	lds	r24, 0x01EF
    1af4:	84 30       	cpi	r24, 0x04	; 4
    1af6:	49 f5       	brne	.+82     	; 0x1b4a <CDC_Device_ReceiveByte+0x5c>
    1af8:	24 89       	ldd	r18, Z+20	; 0x14
    1afa:	35 89       	ldd	r19, Z+21	; 0x15
    1afc:	46 89       	ldd	r20, Z+22	; 0x16
    1afe:	57 89       	ldd	r21, Z+23	; 0x17
    1b00:	21 15       	cp	r18, r1
    1b02:	31 05       	cpc	r19, r1
    1b04:	41 05       	cpc	r20, r1
    1b06:	51 05       	cpc	r21, r1
    1b08:	01 f1       	breq	.+64     	; 0x1b4a <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b0a:	86 81       	ldd	r24, Z+6	; 0x06
    1b0c:	8f 70       	andi	r24, 0x0F	; 15
    1b0e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b12:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1b16:	82 ff       	sbrs	r24, 2
    1b18:	18 c0       	rjmp	.+48     	; 0x1b4a <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1b1a:	80 91 f2 00 	lds	r24, 0x00F2
    1b1e:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	21 f0       	breq	.+8      	; 0x1b2e <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1b26:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1b2e:	2f ef       	ldi	r18, 0xFF	; 255
    1b30:	3f ef       	ldi	r19, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1b32:	80 91 f2 00 	lds	r24, 0x00F2
    1b36:	90 91 f3 00 	lds	r25, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	41 f4       	brne	.+16     	; 0x1b4e <CDC_Device_ReceiveByte+0x60>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b3e:	80 91 e8 00 	lds	r24, 0x00E8
    1b42:	8b 77       	andi	r24, 0x7B	; 123
    1b44:	80 93 e8 00 	sts	0x00E8, r24
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <CDC_Device_ReceiveByte+0x60>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1b4a:	2f ef       	ldi	r18, 0xFF	; 255
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1b4e:	c9 01       	movw	r24, r18
    1b50:	08 95       	ret

00001b52 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    1b52:	fc 01       	movw	r30, r24
    1b54:	84 85       	ldd	r24, Z+12	; 0x0c
    1b56:	95 85       	ldd	r25, Z+13	; 0x0d
    1b58:	ca df       	rcall	.-108    	; 0x1aee <CDC_Device_ReceiveByte>
    1b5a:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
    1b5c:	97 ff       	sbrs	r25, 7
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <CDC_Device_getchar+0x12>
	  return _FDEV_EOF;
    1b60:	2e ef       	ldi	r18, 0xFE	; 254
    1b62:	3f ef       	ldi	r19, 0xFF	; 255

	return ReceivedByte;
}
    1b64:	c9 01       	movw	r24, r18
    1b66:	08 95       	ret

00001b68 <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
    1b68:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    1b6a:	2e e0       	ldi	r18, 0x0E	; 14
    1b6c:	db 01       	movw	r26, r22
    1b6e:	1d 92       	st	X+, r1
    1b70:	2a 95       	dec	r18
    1b72:	e9 f7       	brne	.-6      	; 0x1b6e <CDC_Device_CreateStream+0x6>
    1b74:	23 e0       	ldi	r18, 0x03	; 3
    1b76:	23 83       	std	Z+3, r18	; 0x03
    1b78:	20 e2       	ldi	r18, 0x20	; 32
    1b7a:	3d e0       	ldi	r19, 0x0D	; 13
    1b7c:	31 87       	std	Z+9, r19	; 0x09
    1b7e:	20 87       	std	Z+8, r18	; 0x08
    1b80:	29 ea       	ldi	r18, 0xA9	; 169
    1b82:	3d e0       	ldi	r19, 0x0D	; 13
    1b84:	33 87       	std	Z+11, r19	; 0x0b
    1b86:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    1b88:	95 87       	std	Z+13, r25	; 0x0d
    1b8a:	84 87       	std	Z+12, r24	; 0x0c
}
    1b8c:	08 95       	ret

00001b8e <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1b8e:	08 95       	ret

00001b90 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b96:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1b9a:	83 ff       	sbrs	r24, 3
    1b9c:	33 c0       	rjmp	.+102    	; 0x1c04 <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1b9e:	88 81       	ld	r24, Y
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	20 91 f4 01 	lds	r18, 0x01F4
    1ba6:	30 91 f5 01 	lds	r19, 0x01F5
    1baa:	28 17       	cp	r18, r24
    1bac:	39 07       	cpc	r19, r25
    1bae:	51 f5       	brne	.+84     	; 0x1c04 <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    1bb0:	80 91 f1 01 	lds	r24, 0x01F1
    1bb4:	8e 3f       	cpi	r24, 0xFE	; 254
    1bb6:	79 f0       	breq	.+30     	; 0x1bd6 <MS_Device_ProcessControlRequest+0x46>
    1bb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bba:	21 f5       	brne	.+72     	; 0x1c04 <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1bbc:	80 91 f0 01 	lds	r24, 0x01F0
    1bc0:	81 32       	cpi	r24, 0x21	; 33
    1bc2:	01 f5       	brne	.+64     	; 0x1c04 <MS_Device_ProcessControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1bc4:	80 91 e8 00 	lds	r24, 0x00E8
    1bc8:	87 7f       	andi	r24, 0xF7	; 247
    1bca:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1bce:	f3 da       	rcall	.-2586   	; 0x11b6 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	88 af       	std	Y+56, r24	; 0x38
    1bd4:	17 c0       	rjmp	.+46     	; 0x1c04 <MS_Device_ProcessControlRequest+0x74>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1bd6:	80 91 f0 01 	lds	r24, 0x01F0
    1bda:	81 3a       	cpi	r24, 0xA1	; 161
    1bdc:	99 f4       	brne	.+38     	; 0x1c04 <MS_Device_ProcessControlRequest+0x74>
    1bde:	80 91 e8 00 	lds	r24, 0x00E8
    1be2:	87 7f       	andi	r24, 0xF7	; 247
    1be4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1be8:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1bec:	80 ff       	sbrs	r24, 0
    1bee:	fc cf       	rjmp	.-8      	; 0x1be8 <MS_Device_ProcessControlRequest+0x58>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1bf0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bf2:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1bf4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bf8:	80 91 e8 00 	lds	r24, 0x00E8
    1bfc:	8e 77       	andi	r24, 0x7E	; 126
    1bfe:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1c02:	d9 da       	rcall	.-2638   	; 0x11b6 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	08 95       	ret

00001c0a <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1c10:	0c 96       	adiw	r24, 0x0c	; 12
    1c12:	fc 01       	movw	r30, r24
    1c14:	8d e2       	ldi	r24, 0x2D	; 45
    1c16:	df 01       	movw	r26, r30
    1c18:	1d 92       	st	X+, r1
    1c1a:	8a 95       	dec	r24
    1c1c:	e9 f7       	brne	.-6      	; 0x1c18 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    1c1e:	82 e0       	ldi	r24, 0x02	; 2
    1c20:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    1c22:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    1c24:	ce 01       	movw	r24, r28
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	61 e0       	ldi	r22, 0x01	; 1
    1c2a:	81 da       	rcall	.-2814   	; 0x112e <Endpoint_ConfigureEndpointTable>
    1c2c:	88 23       	and	r24, r24
    1c2e:	29 f0       	breq	.+10     	; 0x1c3a <MS_Device_ConfigureEndpoints+0x30>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1c30:	ce 01       	movw	r24, r28
    1c32:	06 96       	adiw	r24, 0x06	; 6
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	7b da       	rcall	.-2826   	; 0x112e <Endpoint_ConfigureEndpointTable>
    1c38:	01 c0       	rjmp	.+2      	; 0x1c3c <MS_Device_ConfigureEndpoints+0x32>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
    1c3a:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	08 95       	ret

00001c42 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1c42:	cf 92       	push	r12
    1c44:	df 92       	push	r13
    1c46:	ef 92       	push	r14
    1c48:	ff 92       	push	r15
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <MS_Device_USBTask+0x12>
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1c5a:	80 91 ef 01 	lds	r24, 0x01EF
    1c5e:	84 30       	cpi	r24, 0x04	; 4
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <MS_Device_USBTask+0x22>
    1c62:	16 c1       	rjmp	.+556    	; 0x1e90 <MS_Device_USBTask+0x24e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c64:	f8 01       	movw	r30, r16
    1c66:	86 81       	ldd	r24, Z+6	; 0x06
    1c68:	8f 70       	andi	r24, 0x0F	; 15
    1c6a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c6e:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1c72:	82 ff       	sbrs	r24, 2
    1c74:	d3 c0       	rjmp	.+422    	; 0x1e1c <MS_Device_USBTask+0x1da>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c76:	86 81       	ldd	r24, Z+6	; 0x06
    1c78:	8f 70       	andi	r24, 0x0F	; 15
    1c7a:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
    1c7e:	1a 82       	std	Y+2, r1	; 0x02
    1c80:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1c82:	2c e0       	ldi	r18, 0x0C	; 12
    1c84:	c2 2e       	mov	r12, r18
    1c86:	d1 2c       	mov	r13, r1
    1c88:	c0 0e       	add	r12, r16
    1c8a:	d1 1e       	adc	r13, r17
    1c8c:	7e 01       	movw	r14, r28
    1c8e:	08 94       	sec
    1c90:	e1 1c       	adc	r14, r1
    1c92:	f1 1c       	adc	r15, r1
    1c94:	05 c0       	rjmp	.+10     	; 0x1ca0 <MS_Device_USBTask+0x5e>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1c96:	f8 01       	movw	r30, r16
    1c98:	80 ad       	ldd	r24, Z+56	; 0x38
    1c9a:	88 23       	and	r24, r24
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <MS_Device_USBTask+0x5e>
    1c9e:	be c0       	rjmp	.+380    	; 0x1e1c <MS_Device_USBTask+0x1da>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1ca0:	c6 01       	movw	r24, r12
    1ca2:	6f e0       	ldi	r22, 0x0F	; 15
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	a7 01       	movw	r20, r14
    1ca8:	f2 d8       	rcall	.-3612   	; 0xe8e <Endpoint_Read_Stream_LE>
    1caa:	85 30       	cpi	r24, 0x05	; 5
    1cac:	a1 f3       	breq	.-24     	; 0x1c96 <MS_Device_USBTask+0x54>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1cae:	f8 01       	movw	r30, r16
    1cb0:	84 85       	ldd	r24, Z+12	; 0x0c
    1cb2:	95 85       	ldd	r25, Z+13	; 0x0d
    1cb4:	a6 85       	ldd	r26, Z+14	; 0x0e
    1cb6:	b7 85       	ldd	r27, Z+15	; 0x0f
    1cb8:	85 35       	cpi	r24, 0x55	; 85
    1cba:	f3 e5       	ldi	r31, 0x53	; 83
    1cbc:	9f 07       	cpc	r25, r31
    1cbe:	f2 e4       	ldi	r31, 0x42	; 66
    1cc0:	af 07       	cpc	r26, r31
    1cc2:	f3 e4       	ldi	r31, 0x43	; 67
    1cc4:	bf 07       	cpc	r27, r31
    1cc6:	81 f4       	brne	.+32     	; 0x1ce8 <MS_Device_USBTask+0xa6>
    1cc8:	f8 01       	movw	r30, r16
    1cca:	91 8d       	ldd	r25, Z+25	; 0x19
    1ccc:	83 85       	ldd	r24, Z+11	; 0x0b
    1cce:	98 17       	cp	r25, r24
    1cd0:	58 f4       	brcc	.+22     	; 0x1ce8 <MS_Device_USBTask+0xa6>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1cd2:	80 8d       	ldd	r24, Z+24	; 0x18
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	8f 71       	andi	r24, 0x1F	; 31
    1cd8:	90 70       	andi	r25, 0x00	; 0
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	29 f4       	brne	.+10     	; 0x1ce8 <MS_Device_USBTask+0xa6>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    1cde:	82 8d       	ldd	r24, Z+26	; 0x1a
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1ce0:	88 23       	and	r24, r24
    1ce2:	11 f0       	breq	.+4      	; 0x1ce8 <MS_Device_USBTask+0xa6>
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    1ce4:	81 31       	cpi	r24, 0x11	; 17
    1ce6:	80 f0       	brcs	.+32     	; 0x1d08 <MS_Device_USBTask+0xc6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ce8:	80 91 eb 00 	lds	r24, 0x00EB
    1cec:	80 62       	ori	r24, 0x20	; 32
    1cee:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cf2:	f8 01       	movw	r30, r16
    1cf4:	81 81       	ldd	r24, Z+1	; 0x01
    1cf6:	8f 70       	andi	r24, 0x0F	; 15
    1cf8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1cfc:	80 91 eb 00 	lds	r24, 0x00EB
    1d00:	80 62       	ori	r24, 0x20	; 32
    1d02:	80 93 eb 00 	sts	0x00EB, r24
    1d06:	8a c0       	rjmp	.+276    	; 0x1e1c <MS_Device_USBTask+0x1da>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1d08:	1a 82       	std	Y+2, r1	; 0x02
    1d0a:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1d0c:	9b e1       	ldi	r25, 0x1B	; 27
    1d0e:	c9 2e       	mov	r12, r25
    1d10:	d1 2c       	mov	r13, r1
    1d12:	c0 0e       	add	r12, r16
    1d14:	d1 1e       	adc	r13, r17
    1d16:	7e 01       	movw	r14, r28
    1d18:	08 94       	sec
    1d1a:	e1 1c       	adc	r14, r1
    1d1c:	f1 1c       	adc	r15, r1
    1d1e:	05 c0       	rjmp	.+10     	; 0x1d2a <MS_Device_USBTask+0xe8>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1d20:	f8 01       	movw	r30, r16
    1d22:	80 ad       	ldd	r24, Z+56	; 0x38
    1d24:	88 23       	and	r24, r24
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <MS_Device_USBTask+0xe8>
    1d28:	79 c0       	rjmp	.+242    	; 0x1e1c <MS_Device_USBTask+0x1da>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1d2a:	f8 01       	movw	r30, r16
    1d2c:	62 8d       	ldd	r22, Z+26	; 0x1a
    1d2e:	c6 01       	movw	r24, r12
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	a7 01       	movw	r20, r14
    1d34:	ac d8       	rcall	.-3752   	; 0xe8e <Endpoint_Read_Stream_LE>
    1d36:	85 30       	cpi	r24, 0x05	; 5
    1d38:	99 f3       	breq	.-26     	; 0x1d20 <MS_Device_USBTask+0xde>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d3a:	80 91 e8 00 	lds	r24, 0x00E8
    1d3e:	8b 77       	andi	r24, 0x7B	; 123
    1d40:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1d44:	f8 01       	movw	r30, r16
    1d46:	80 8d       	ldd	r24, Z+24	; 0x18
    1d48:	87 ff       	sbrs	r24, 7
    1d4a:	04 c0       	rjmp	.+8      	; 0x1d54 <MS_Device_USBTask+0x112>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d4c:	81 81       	ldd	r24, Z+1	; 0x01
    1d4e:	8f 70       	andi	r24, 0x0F	; 15
    1d50:	80 93 e9 00 	sts	0x00E9, r24
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1d54:	c8 01       	movw	r24, r16
    1d56:	0e 94 88 01 	call	0x310	; 0x310 <CALLBACK_MS_Device_SCSICommandReceived>
	  return false;

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
    1d5a:	91 e0       	ldi	r25, 0x01	; 1
    1d5c:	98 27       	eor	r25, r24
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1d5e:	f8 01       	movw	r30, r16
    1d60:	97 ab       	std	Z+55, r25	; 0x37
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1d62:	25 e5       	ldi	r18, 0x55	; 85
    1d64:	33 e5       	ldi	r19, 0x53	; 83
    1d66:	42 e4       	ldi	r20, 0x42	; 66
    1d68:	53 e5       	ldi	r21, 0x53	; 83
    1d6a:	23 a7       	std	Z+43, r18	; 0x2b
    1d6c:	34 a7       	std	Z+44, r19	; 0x2c
    1d6e:	45 a7       	std	Z+45, r20	; 0x2d
    1d70:	56 a7       	std	Z+46, r21	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1d72:	20 89       	ldd	r18, Z+16	; 0x10
    1d74:	31 89       	ldd	r19, Z+17	; 0x11
    1d76:	42 89       	ldd	r20, Z+18	; 0x12
    1d78:	53 89       	ldd	r21, Z+19	; 0x13
    1d7a:	27 a7       	std	Z+47, r18	; 0x2f
    1d7c:	30 ab       	std	Z+48, r19	; 0x30
    1d7e:	41 ab       	std	Z+49, r20	; 0x31
    1d80:	52 ab       	std	Z+50, r21	; 0x32
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1d82:	24 89       	ldd	r18, Z+20	; 0x14
    1d84:	35 89       	ldd	r19, Z+21	; 0x15
    1d86:	46 89       	ldd	r20, Z+22	; 0x16
    1d88:	57 89       	ldd	r21, Z+23	; 0x17
    1d8a:	23 ab       	std	Z+51, r18	; 0x33
    1d8c:	34 ab       	std	Z+52, r19	; 0x34
    1d8e:	45 ab       	std	Z+53, r20	; 0x35
    1d90:	56 ab       	std	Z+54, r21	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1d92:	88 23       	and	r24, r24
    1d94:	51 f4       	brne	.+20     	; 0x1daa <MS_Device_USBTask+0x168>
    1d96:	21 15       	cp	r18, r1
    1d98:	31 05       	cpc	r19, r1
    1d9a:	41 05       	cpc	r20, r1
    1d9c:	51 05       	cpc	r21, r1
    1d9e:	29 f0       	breq	.+10     	; 0x1daa <MS_Device_USBTask+0x168>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1da0:	80 91 eb 00 	lds	r24, 0x00EB
    1da4:	80 62       	ori	r24, 0x20	; 32
    1da6:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1daa:	f8 01       	movw	r30, r16
    1dac:	86 81       	ldd	r24, Z+6	; 0x06
    1dae:	8f 70       	andi	r24, 0x0F	; 15
    1db0:	80 93 e9 00 	sts	0x00E9, r24
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <MS_Device_USBTask+0x17c>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1db6:	f8 01       	movw	r30, r16
    1db8:	80 ad       	ldd	r24, Z+56	; 0x38
    1dba:	88 23       	and	r24, r24
    1dbc:	79 f5       	brne	.+94     	; 0x1e1c <MS_Device_USBTask+0x1da>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1dbe:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    1dc2:	85 fd       	sbrc	r24, 5
    1dc4:	f8 cf       	rjmp	.-16     	; 0x1db6 <MS_Device_USBTask+0x174>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	81 81       	ldd	r24, Z+1	; 0x01
    1dca:	8f 70       	andi	r24, 0x0F	; 15
    1dcc:	80 93 e9 00 	sts	0x00E9, r24
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <MS_Device_USBTask+0x198>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	80 ad       	ldd	r24, Z+56	; 0x38
    1dd6:	88 23       	and	r24, r24
    1dd8:	09 f5       	brne	.+66     	; 0x1e1c <MS_Device_USBTask+0x1da>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1dda:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    1dde:	85 fd       	sbrc	r24, 5
    1de0:	f8 cf       	rjmp	.-16     	; 0x1dd2 <MS_Device_USBTask+0x190>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    1de2:	1a 82       	std	Y+2, r1	; 0x02
    1de4:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1de6:	8b e2       	ldi	r24, 0x2B	; 43
    1de8:	c8 2e       	mov	r12, r24
    1dea:	d1 2c       	mov	r13, r1
    1dec:	c0 0e       	add	r12, r16
    1dee:	d1 1e       	adc	r13, r17
    1df0:	7e 01       	movw	r14, r28
    1df2:	08 94       	sec
    1df4:	e1 1c       	adc	r14, r1
    1df6:	f1 1c       	adc	r15, r1
    1df8:	04 c0       	rjmp	.+8      	; 0x1e02 <MS_Device_USBTask+0x1c0>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	80 ad       	ldd	r24, Z+56	; 0x38
    1dfe:	88 23       	and	r24, r24
    1e00:	69 f4       	brne	.+26     	; 0x1e1c <MS_Device_USBTask+0x1da>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1e02:	c6 01       	movw	r24, r12
    1e04:	6d e0       	ldi	r22, 0x0D	; 13
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	a7 01       	movw	r20, r14
    1e0a:	0e 94 95 06 	call	0xd2a	; 0xd2a <Endpoint_Write_Stream_LE>
    1e0e:	85 30       	cpi	r24, 0x05	; 5
    1e10:	a1 f3       	breq	.-24     	; 0x1dfa <MS_Device_USBTask+0x1b8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e12:	80 91 e8 00 	lds	r24, 0x00E8
    1e16:	8e 77       	andi	r24, 0x7E	; 126
    1e18:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1e1c:	f8 01       	movw	r30, r16
    1e1e:	80 ad       	ldd	r24, Z+56	; 0x38
    1e20:	88 23       	and	r24, r24
    1e22:	b1 f1       	breq	.+108    	; 0x1e90 <MS_Device_USBTask+0x24e>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1e24:	26 81       	ldd	r18, Z+6	; 0x06
    1e26:	2f 70       	andi	r18, 0x0F	; 15
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	ac 01       	movw	r20, r24
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <MS_Device_USBTask+0x1f2>
    1e30:	44 0f       	add	r20, r20
    1e32:	55 1f       	adc	r21, r21
    1e34:	2a 95       	dec	r18
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <MS_Device_USBTask+0x1ee>
    1e38:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    1e3c:	10 92 ea 00 	sts	0x00EA, r1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1e40:	21 81       	ldd	r18, Z+1	; 0x01
    1e42:	2f 70       	andi	r18, 0x0F	; 15
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <MS_Device_USBTask+0x208>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	2a 95       	dec	r18
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <MS_Device_USBTask+0x204>
    1e4e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1e52:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e56:	86 81       	ldd	r24, Z+6	; 0x06
    1e58:	8f 70       	andi	r24, 0x0F	; 15
    1e5a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1e5e:	80 91 eb 00 	lds	r24, 0x00EB
    1e62:	80 61       	ori	r24, 0x10	; 16
    1e64:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1e68:	80 91 eb 00 	lds	r24, 0x00EB
    1e6c:	88 60       	ori	r24, 0x08	; 8
    1e6e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e72:	81 81       	ldd	r24, Z+1	; 0x01
    1e74:	8f 70       	andi	r24, 0x0F	; 15
    1e76:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1e7a:	80 91 eb 00 	lds	r24, 0x00EB
    1e7e:	80 61       	ori	r24, 0x10	; 16
    1e80:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1e84:	80 91 eb 00 	lds	r24, 0x00EB
    1e88:	88 60       	ori	r24, 0x08	; 8
    1e8a:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1e8e:	10 ae       	std	Z+56, r1	; 0x38
	}
}
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	ff 90       	pop	r15
    1e9e:	ef 90       	pop	r14
    1ea0:	df 90       	pop	r13
    1ea2:	cf 90       	pop	r12
    1ea4:	08 95       	ret

00001ea6 <fputs>:
    1ea6:	ef 92       	push	r14
    1ea8:	ff 92       	push	r15
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	7c 01       	movw	r14, r24
    1eb4:	eb 01       	movw	r28, r22
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	81 ff       	sbrs	r24, 1
    1eba:	11 c0       	rjmp	.+34     	; 0x1ede <fputs+0x38>
    1ebc:	00 e0       	ldi	r16, 0x00	; 0
    1ebe:	10 e0       	ldi	r17, 0x00	; 0
    1ec0:	08 c0       	rjmp	.+16     	; 0x1ed2 <fputs+0x2c>
    1ec2:	e8 85       	ldd	r30, Y+8	; 0x08
    1ec4:	f9 85       	ldd	r31, Y+9	; 0x09
    1ec6:	be 01       	movw	r22, r28
    1ec8:	09 95       	icall
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	11 f0       	breq	.+4      	; 0x1ed2 <fputs+0x2c>
    1ece:	0f ef       	ldi	r16, 0xFF	; 255
    1ed0:	1f ef       	ldi	r17, 0xFF	; 255
    1ed2:	f7 01       	movw	r30, r14
    1ed4:	81 91       	ld	r24, Z+
    1ed6:	7f 01       	movw	r14, r30
    1ed8:	88 23       	and	r24, r24
    1eda:	99 f7       	brne	.-26     	; 0x1ec2 <fputs+0x1c>
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <fputs+0x3c>
    1ede:	0f ef       	ldi	r16, 0xFF	; 255
    1ee0:	1f ef       	ldi	r17, 0xFF	; 255
    1ee2:	c8 01       	movw	r24, r16
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	ff 90       	pop	r15
    1eee:	ef 90       	pop	r14
    1ef0:	08 95       	ret

00001ef2 <_exit>:
    1ef2:	f8 94       	cli

00001ef4 <__stop_program>:
    1ef4:	ff cf       	rjmp	.-2      	; 0x1ef4 <__stop_program>
