
MIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000e62  00000ef6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010c  0080010c  00000f02  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000480  00000000  00000000  00001b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c8d  00000000  00000000  00001f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000085c9  00000000  00000000  00002c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001fb4  00000000  00000000  0000b1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006ebc  00000000  00000000  0000d195  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006c0  00000000  00000000  00014054  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003bda  00000000  00000000  00014714  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004269  00000000  00000000  000182ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001148  00000000  00000000  0001c557  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006d8  00000000  00000000  0001d69f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
   0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
   4:	c1 c0       	rjmp	.+386    	; 0x188 <__bad_interrupt>
   6:	00 00       	nop
   8:	bf c0       	rjmp	.+382    	; 0x188 <__bad_interrupt>
   a:	00 00       	nop
   c:	bd c0       	rjmp	.+378    	; 0x188 <__bad_interrupt>
   e:	00 00       	nop
  10:	bb c0       	rjmp	.+374    	; 0x188 <__bad_interrupt>
  12:	00 00       	nop
  14:	b9 c0       	rjmp	.+370    	; 0x188 <__bad_interrupt>
  16:	00 00       	nop
  18:	b7 c0       	rjmp	.+366    	; 0x188 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b5 c0       	rjmp	.+362    	; 0x188 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b3 c0       	rjmp	.+358    	; 0x188 <__bad_interrupt>
  22:	00 00       	nop
  24:	b1 c0       	rjmp	.+354    	; 0x188 <__bad_interrupt>
  26:	00 00       	nop
  28:	55 c4       	rjmp	.+2218   	; 0x8d4 <__vector_10>
  2a:	00 00       	nop
  2c:	ad c0       	rjmp	.+346    	; 0x188 <__bad_interrupt>
  2e:	00 00       	nop
  30:	ab c0       	rjmp	.+342    	; 0x188 <__bad_interrupt>
  32:	00 00       	nop
  34:	a9 c0       	rjmp	.+338    	; 0x188 <__bad_interrupt>
  36:	00 00       	nop
  38:	a7 c0       	rjmp	.+334    	; 0x188 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a5 c0       	rjmp	.+330    	; 0x188 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a3 c0       	rjmp	.+326    	; 0x188 <__bad_interrupt>
  42:	00 00       	nop
  44:	a1 c0       	rjmp	.+322    	; 0x188 <__bad_interrupt>
  46:	00 00       	nop
  48:	9f c0       	rjmp	.+318    	; 0x188 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9d c0       	rjmp	.+314    	; 0x188 <__bad_interrupt>
  4e:	00 00       	nop
  50:	9b c0       	rjmp	.+310    	; 0x188 <__bad_interrupt>
  52:	00 00       	nop
  54:	99 c0       	rjmp	.+306    	; 0x188 <__bad_interrupt>
  56:	00 00       	nop
  58:	97 c0       	rjmp	.+302    	; 0x188 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	95 c0       	rjmp	.+298    	; 0x188 <__bad_interrupt>
  5e:	00 00       	nop
  60:	93 c0       	rjmp	.+294    	; 0x188 <__bad_interrupt>
  62:	00 00       	nop
  64:	91 c0       	rjmp	.+290    	; 0x188 <__bad_interrupt>
  66:	00 00       	nop
  68:	8f c0       	rjmp	.+286    	; 0x188 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8d c0       	rjmp	.+282    	; 0x188 <__bad_interrupt>
  6e:	00 00       	nop
  70:	8b c0       	rjmp	.+278    	; 0x188 <__bad_interrupt>
  72:	00 00       	nop
  74:	89 c0       	rjmp	.+274    	; 0x188 <__bad_interrupt>
  76:	00 00       	nop
  78:	87 c0       	rjmp	.+270    	; 0x188 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	85 c0       	rjmp	.+266    	; 0x188 <__bad_interrupt>
  7e:	00 00       	nop
  80:	83 c0       	rjmp	.+262    	; 0x188 <__bad_interrupt>
  82:	00 00       	nop
  84:	81 c0       	rjmp	.+258    	; 0x188 <__bad_interrupt>
  86:	00 00       	nop
  88:	7f c0       	rjmp	.+254    	; 0x188 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7d c0       	rjmp	.+250    	; 0x188 <__bad_interrupt>
  8e:	00 00       	nop
  90:	7b c0       	rjmp	.+246    	; 0x188 <__bad_interrupt>
  92:	00 00       	nop
  94:	79 c0       	rjmp	.+242    	; 0x188 <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
  a8:	00 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  ba:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
  ca:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
  da:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
  ea:	09 24 03 02 04 01 01 01 00 09 05 01 02 40 00 05     .$...........@..
  fa:	00 00 05 25 01 01 01 09 05 82 02 40 00 05 00 00     ...%.......@....
 10a:	05 25 01 01 03                                      .%...

0000010f <LanguageString>:
 10f:	04 03 09 04                                         ....

00000113 <ManufacturerString>:
 113:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 123:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000012d <ProductString>:
 12d:	1e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 49 00     ..L.U.F.A. .M.I.
 13d:	44 00 49 00 20 00 44 00 65 00 6d 00 6f 00 00 00     D.I. .D.e.m.o...
 14d:	00                                                  .

0000014e <__ctors_end>:
 14e:	11 24       	eor	r1, r1
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf ef       	ldi	r28, 0xFF	; 255
 154:	d0 e2       	ldi	r29, 0x20	; 32
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
 15a:	11 e0       	ldi	r17, 0x01	; 1
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	e2 e6       	ldi	r30, 0x62	; 98
 162:	fe e0       	ldi	r31, 0x0E	; 14
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	0b bf       	out	0x3b, r16	; 59
 168:	02 c0       	rjmp	.+4      	; 0x16e <__do_copy_data+0x14>
 16a:	07 90       	elpm	r0, Z+
 16c:	0d 92       	st	X+, r0
 16e:	ac 30       	cpi	r26, 0x0C	; 12
 170:	b1 07       	cpc	r27, r17
 172:	d9 f7       	brne	.-10     	; 0x16a <__do_copy_data+0x10>

00000174 <__do_clear_bss>:
 174:	11 e0       	ldi	r17, 0x01	; 1
 176:	ac e0       	ldi	r26, 0x0C	; 12
 178:	b1 e0       	ldi	r27, 0x01	; 1
 17a:	01 c0       	rjmp	.+2      	; 0x17e <.do_clear_bss_start>

0000017c <.do_clear_bss_loop>:
 17c:	1d 92       	st	X+, r1

0000017e <.do_clear_bss_start>:
 17e:	aa 31       	cpi	r26, 0x1A	; 26
 180:	b1 07       	cpc	r27, r17
 182:	e1 f7       	brne	.-8      	; 0x17c <.do_clear_bss_loop>
 184:	99 d0       	rcall	.+306    	; 0x2b8 <main>
 186:	6b c6       	rjmp	.+3286   	; 0xe5e <_exit>

00000188 <__bad_interrupt>:
 188:	3b cf       	rjmp	.-394    	; 0x0 <__vectors>

0000018a <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 18a:	9b b1       	in	r25, 0x0b	; 11
 18c:	9f 70       	andi	r25, 0x0F	; 15
 18e:	98 2b       	or	r25, r24
 190:	9b b9       	out	0x0b, r25	; 11
			}
 192:	08 95       	ret

00000194 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 194:	84 b7       	in	r24, 0x34	; 52
 196:	87 7f       	andi	r24, 0xF7	; 247
 198:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 19a:	88 e1       	ldi	r24, 0x18	; 24
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	80 93 60 00 	sts	0x0060, r24
 1a4:	10 92 60 00 	sts	0x0060, r1
 1a8:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	80 e8       	ldi	r24, 0x80	; 128
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	80 93 61 00 	sts	0x0061, r24
 1b6:	90 93 61 00 	sts	0x0061, r25
 1ba:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
 1bc:	84 b1       	in	r24, 0x04	; 4
 1be:	8f 71       	andi	r24, 0x1F	; 31
 1c0:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
 1c2:	8d b1       	in	r24, 0x0d	; 13
 1c4:	8f 7c       	andi	r24, 0xCF	; 207
 1c6:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
 1c8:	85 b1       	in	r24, 0x05	; 5
 1ca:	80 6e       	ori	r24, 0xE0	; 224
 1cc:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
 1ce:	8e b1       	in	r24, 0x0e	; 14
 1d0:	80 63       	ori	r24, 0x30	; 48
 1d2:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1d4:	8a b1       	in	r24, 0x0a	; 10
 1d6:	80 6f       	ori	r24, 0xF0	; 240
 1d8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1e0:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 1e2:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
}
 1e4:	5c c3       	rjmp	.+1720   	; 0x89e <USB_Init>

000001e6 <CheckJoystickMovement>:

/** Checks for changes in the position of the board joystick, sending MIDI events to the host upon each change. */
void CheckJoystickMovement(void)
{
 1e6:	1f 93       	push	r17
 1e8:	df 93       	push	r29
 1ea:	cf 93       	push	r28
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <CheckJoystickMovement+0x8>
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <CheckJoystickMovement+0xa>
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 1f4:	13 b1       	in	r17, 0x03	; 3
 1f6:	8c b1       	in	r24, 0x0c	; 12
 1f8:	80 95       	com	r24
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	80 73       	andi	r24, 0x30	; 48
 1fe:	90 70       	andi	r25, 0x00	; 0
 200:	95 95       	asr	r25
 202:	87 95       	ror	r24
 204:	10 95       	com	r17
 206:	10 7e       	andi	r17, 0xE0	; 224
 208:	18 2b       	or	r17, r24
	uint8_t MIDICommand = 0;
	uint8_t MIDIPitch;

	/* Get current joystick mask, XOR with previous to detect joystick changes */
	uint8_t JoystickStatus  = Joystick_GetStatus();
	uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
 20a:	90 91 0c 01 	lds	r25, 0x010C
 20e:	91 27       	eor	r25, r17
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 210:	8c b1       	in	r24, 0x0c	; 12

	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
 212:	82 fd       	sbrc	r24, 2
 214:	02 c0       	rjmp	.+4      	; 0x21a <CheckJoystickMovement+0x34>
 216:	39 e0       	ldi	r19, 0x09	; 9
 218:	01 c0       	rjmp	.+2      	; 0x21c <CheckJoystickMovement+0x36>
 21a:	30 e0       	ldi	r19, 0x00	; 0

	if (JoystickChanges & JOY_LEFT)
 21c:	29 2f       	mov	r18, r25
 21e:	96 ff       	sbrs	r25, 6
 220:	04 c0       	rjmp	.+8      	; 0x22a <CheckJoystickMovement+0x44>
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 222:	16 ff       	sbrs	r17, 6
 224:	04 c0       	rjmp	.+8      	; 0x22e <CheckJoystickMovement+0x48>
 226:	80 e9       	ldi	r24, 0x90	; 144
 228:	03 c0       	rjmp	.+6      	; 0x230 <CheckJoystickMovement+0x4a>
/** Checks for changes in the position of the board joystick, sending MIDI events to the host upon each change. */
void CheckJoystickMovement(void)
{
	static uint8_t PrevJoystickStatus;

	uint8_t MIDICommand = 0;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	01 c0       	rjmp	.+2      	; 0x230 <CheckJoystickMovement+0x4a>
	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));

	if (JoystickChanges & JOY_LEFT)
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 22e:	80 e8       	ldi	r24, 0x80	; 128
		MIDIPitch   = 0x3C;
	}

	if (JoystickChanges & JOY_UP)
 230:	97 ff       	sbrs	r25, 7
 232:	05 c0       	rjmp	.+10     	; 0x23e <CheckJoystickMovement+0x58>
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 234:	17 ff       	sbrs	r17, 7
 236:	05 c0       	rjmp	.+10     	; 0x242 <CheckJoystickMovement+0x5c>
		MIDIPitch   = 0x3D;
 238:	9d e3       	ldi	r25, 0x3D	; 61
		MIDIPitch   = 0x3C;
	}

	if (JoystickChanges & JOY_UP)
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 23a:	80 e9       	ldi	r24, 0x90	; 144
 23c:	04 c0       	rjmp	.+8      	; 0x246 <CheckJoystickMovement+0x60>
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3C;
	}

	if (JoystickChanges & JOY_UP)
 23e:	9c e3       	ldi	r25, 0x3C	; 60
 240:	02 c0       	rjmp	.+4      	; 0x246 <CheckJoystickMovement+0x60>
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3D;
 242:	9d e3       	ldi	r25, 0x3D	; 61
		MIDIPitch   = 0x3C;
	}

	if (JoystickChanges & JOY_UP)
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 244:	80 e8       	ldi	r24, 0x80	; 128
		MIDIPitch   = 0x3D;
	}

	if (JoystickChanges & JOY_RIGHT)
 246:	23 ff       	sbrs	r18, 3
 248:	07 c0       	rjmp	.+14     	; 0x258 <CheckJoystickMovement+0x72>
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 24a:	13 ff       	sbrs	r17, 3
 24c:	03 c0       	rjmp	.+6      	; 0x254 <CheckJoystickMovement+0x6e>
		MIDIPitch   = 0x3E;
 24e:	9e e3       	ldi	r25, 0x3E	; 62
		MIDIPitch   = 0x3D;
	}

	if (JoystickChanges & JOY_RIGHT)
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 250:	80 e9       	ldi	r24, 0x90	; 144
 252:	02 c0       	rjmp	.+4      	; 0x258 <CheckJoystickMovement+0x72>
		MIDIPitch   = 0x3E;
 254:	9e e3       	ldi	r25, 0x3E	; 62
		MIDIPitch   = 0x3D;
	}

	if (JoystickChanges & JOY_RIGHT)
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 256:	80 e8       	ldi	r24, 0x80	; 128
		MIDIPitch   = 0x3E;
	}

	if (JoystickChanges & JOY_DOWN)
 258:	24 ff       	sbrs	r18, 4
 25a:	07 c0       	rjmp	.+14     	; 0x26a <CheckJoystickMovement+0x84>
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 25c:	14 ff       	sbrs	r17, 4
 25e:	03 c0       	rjmp	.+6      	; 0x266 <CheckJoystickMovement+0x80>
		MIDIPitch   = 0x3F;
 260:	9f e3       	ldi	r25, 0x3F	; 63
		MIDIPitch   = 0x3E;
	}

	if (JoystickChanges & JOY_DOWN)
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 262:	80 e9       	ldi	r24, 0x90	; 144
 264:	02 c0       	rjmp	.+4      	; 0x26a <CheckJoystickMovement+0x84>
		MIDIPitch   = 0x3F;
 266:	9f e3       	ldi	r25, 0x3F	; 63
		MIDIPitch   = 0x3E;
	}

	if (JoystickChanges & JOY_DOWN)
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 268:	80 e8       	ldi	r24, 0x80	; 128
		MIDIPitch   = 0x3F;
	}

	if (JoystickChanges & JOY_PRESS)
 26a:	25 ff       	sbrs	r18, 5
 26c:	04 c0       	rjmp	.+8      	; 0x276 <CheckJoystickMovement+0x90>
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 26e:	15 ff       	sbrs	r17, 5
 270:	20 c0       	rjmp	.+64     	; 0x2b2 <CheckJoystickMovement+0xcc>
 272:	80 e9       	ldi	r24, 0x90	; 144
 274:	1f c0       	rjmp	.+62     	; 0x2b4 <CheckJoystickMovement+0xce>
		MIDIPitch   = 0x3B;
	}

	if (MIDICommand)
 276:	88 23       	and	r24, r24
 278:	91 f0       	breq	.+36     	; 0x29e <CheckJoystickMovement+0xb8>
	{
		MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 27a:	28 2f       	mov	r18, r24
 27c:	22 95       	swap	r18
 27e:	2f 70       	andi	r18, 0x0F	; 15
 280:	29 83       	std	Y+1, r18	; 0x01
 282:	83 2b       	or	r24, r19
 284:	8a 83       	std	Y+2, r24	; 0x02
 286:	9b 83       	std	Y+3, r25	; 0x03
 288:	80 e4       	ldi	r24, 0x40	; 64
 28a:	8c 83       	std	Y+4, r24	; 0x04
				.Data1       = MIDICommand | Channel,
				.Data2       = MIDIPitch,
				.Data3       = MIDI_STANDARD_VELOCITY,
			};

		MIDI_Device_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	be 01       	movw	r22, r28
 292:	6f 5f       	subi	r22, 0xFF	; 255
 294:	7f 4f       	sbci	r23, 0xFF	; 255
 296:	7c d5       	rcall	.+2808   	; 0xd90 <MIDI_Device_SendEventPacket>
		MIDI_Device_Flush(&Keyboard_MIDI_Interface);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	96 d5       	rcall	.+2860   	; 0xdca <MIDI_Device_Flush>
	}

	PrevJoystickStatus = JoystickStatus;
 29e:	10 93 0c 01 	sts	0x010C, r17
}
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	cf 91       	pop	r28
 2ac:	df 91       	pop	r29
 2ae:	1f 91       	pop	r17
 2b0:	08 95       	ret
		MIDIPitch   = 0x3F;
	}

	if (JoystickChanges & JOY_PRESS)
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 2b2:	80 e8       	ldi	r24, 0x80	; 128
		MIDIPitch   = 0x3E;
	}

	if (JoystickChanges & JOY_DOWN)
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 2b4:	9b e3       	ldi	r25, 0x3B	; 59
 2b6:	e1 cf       	rjmp	.-62     	; 0x27a <CheckJoystickMovement+0x94>

000002b8 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	df 93       	push	r29
 2be:	cf 93       	push	r28
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <main+0xa>
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <main+0xc>
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
	SetupHardware();
 2c8:	65 df       	rcall	.-310    	; 0x194 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 2ca:	80 e1       	ldi	r24, 0x10	; 16
 2cc:	5e df       	rcall	.-324    	; 0x18a <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 2ce:	78 94       	sei
	for (;;)
	{
		CheckJoystickMovement();

		MIDI_EventPacket_t ReceivedMIDIEvent;
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent))
 2d0:	8e 01       	movw	r16, r28
 2d2:	0f 5f       	subi	r16, 0xFF	; 255
 2d4:	1f 4f       	sbci	r17, 0xFF	; 255
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	for (;;)
	{
		CheckJoystickMovement();
 2d6:	87 df       	rcall	.-242    	; 0x1e6 <CheckJoystickMovement>

		MIDI_EventPacket_t ReceivedMIDIEvent;
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent))
 2d8:	0f c0       	rjmp	.+30     	; 0x2f8 <main+0x40>
		{
			if ((ReceivedMIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_ON)) && (ReceivedMIDIEvent.Data3 > 0))
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	89 30       	cpi	r24, 0x09	; 9
 2de:	51 f4       	brne	.+20     	; 0x2f4 <main+0x3c>
 2e0:	8c 81       	ldd	r24, Y+4	; 0x04
 2e2:	88 23       	and	r24, r24
 2e4:	39 f0       	breq	.+14     	; 0x2f4 <main+0x3c>
			  LEDs_SetAllLEDs(ReceivedMIDIEvent.Data2 > 64 ? LEDS_LED1 : LEDS_LED2);
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	10 f0       	brcs	.+4      	; 0x2f0 <main+0x38>
 2ec:	80 e1       	ldi	r24, 0x10	; 16
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <main+0x3e>
 2f0:	80 e2       	ldi	r24, 0x20	; 32
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <main+0x3e>
			else
			  LEDs_SetAllLEDs(LEDS_NO_LEDS);
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	49 df       	rcall	.-366    	; 0x18a <LEDs_SetAllLEDs>
	for (;;)
	{
		CheckJoystickMovement();

		MIDI_EventPacket_t ReceivedMIDIEvent;
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent))
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	b8 01       	movw	r22, r16
 2fe:	8d d5       	rcall	.+2842   	; 0xe1a <MIDI_Device_ReceiveEventPacket>
 300:	88 23       	and	r24, r24
 302:	59 f7       	brne	.-42     	; 0x2da <main+0x22>
			  LEDs_SetAllLEDs(ReceivedMIDIEvent.Data2 > 64 ? LEDS_LED1 : LEDS_LED2);
			else
			  LEDs_SetAllLEDs(LEDS_NO_LEDS);
		}

		MIDI_Device_USBTask(&Keyboard_MIDI_Interface);
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	79 d5       	rcall	.+2802   	; 0xdfc <MIDI_Device_USBTask>
		USB_USBTask();
 30a:	10 d5       	rcall	.+2592   	; 0xd2c <USB_USBTask>
	}
 30c:	e4 cf       	rjmp	.-56     	; 0x2d6 <main+0x1e>

0000030e <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 30e:	80 ea       	ldi	r24, 0xA0	; 160
}
 310:	3c cf       	rjmp	.-392    	; 0x18a <LEDs_SetAllLEDs>

00000312 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 312:	80 e1       	ldi	r24, 0x10	; 16
}
 314:	3a cf       	rjmp	.-396    	; 0x18a <LEDs_SetAllLEDs>

00000316 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MIDI_Device_ConfigureEndpoints(&Keyboard_MIDI_Interface);
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	24 d5       	rcall	.+2632   	; 0xd64 <MIDI_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 31c:	80 ff       	sbrs	r24, 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <EVENT_USB_Device_ConfigurationChanged+0xe>
 320:	80 e6       	ldi	r24, 0x60	; 96
 322:	01 c0       	rjmp	.+2      	; 0x326 <EVENT_USB_Device_ConfigurationChanged+0x10>
 324:	80 e9       	ldi	r24, 0x90	; 144
}
 326:	31 cf       	rjmp	.-414    	; 0x18a <LEDs_SetAllLEDs>

00000328 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MIDI_Device_ProcessControlRequest(&Keyboard_MIDI_Interface);
}
 328:	08 95       	ret

0000032a <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 32a:	92 30       	cpi	r25, 0x02	; 2
 32c:	29 f0       	breq	.+10     	; 0x338 <CALLBACK_USB_GetDescriptor+0xe>
 32e:	93 30       	cpi	r25, 0x03	; 3
 330:	41 f0       	breq	.+16     	; 0x342 <CALLBACK_USB_GetDescriptor+0x18>
 332:	91 30       	cpi	r25, 0x01	; 1
 334:	e9 f4       	brne	.+58     	; 0x370 <CALLBACK_USB_GetDescriptor+0x46>
 336:	17 c0       	rjmp	.+46     	; 0x366 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 338:	25 e6       	ldi	r18, 0x65	; 101
 33a:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 33c:	ea ea       	ldi	r30, 0xAA	; 170
 33e:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 340:	1b c0       	rjmp	.+54     	; 0x378 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	41 f0       	breq	.+16     	; 0x356 <CALLBACK_USB_GetDescriptor+0x2c>
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	18 f0       	brcs	.+6      	; 0x350 <CALLBACK_USB_GetDescriptor+0x26>
 34a:	82 30       	cpi	r24, 0x02	; 2
 34c:	89 f4       	brne	.+34     	; 0x370 <CALLBACK_USB_GetDescriptor+0x46>
 34e:	06 c0       	rjmp	.+12     	; 0x35c <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 350:	ef e0       	ldi	r30, 0x0F	; 15
 352:	f1 e0       	ldi	r31, 0x01	; 1
 354:	05 c0       	rjmp	.+10     	; 0x360 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 356:	e3 e1       	ldi	r30, 0x13	; 19
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	02 c0       	rjmp	.+4      	; 0x360 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 35c:	ed e2       	ldi	r30, 0x2D	; 45
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	24 91       	lpm	r18, Z+
 362:	30 e0       	ldi	r19, 0x00	; 0
					break;
 364:	09 c0       	rjmp	.+18     	; 0x378 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 366:	22 e1       	ldi	r18, 0x12	; 18
 368:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 36a:	e8 e9       	ldi	r30, 0x98	; 152
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	04 c0       	rjmp	.+8      	; 0x378 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 374:	e0 e0       	ldi	r30, 0x00	; 0
 376:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 378:	da 01       	movw	r26, r20
 37a:	11 96       	adiw	r26, 0x01	; 1
 37c:	fc 93       	st	X, r31
 37e:	ee 93       	st	-X, r30
	return Size;
}
 380:	c9 01       	movw	r24, r18
 382:	08 95       	ret

00000384 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 384:	8f 92       	push	r8
 386:	9f 92       	push	r9
 388:	bf 92       	push	r11
 38a:	cf 92       	push	r12
 38c:	df 92       	push	r13
 38e:	ef 92       	push	r14
 390:	ff 92       	push	r15
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	df 93       	push	r29
 398:	cf 93       	push	r28
 39a:	0f 92       	push	r0
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	e8 2e       	mov	r14, r24
 3a2:	4b 01       	movw	r8, r22
 3a4:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 3a6:	99 83       	std	Y+1, r25	; 0x01
 3a8:	01 d2       	rcall	.+1026   	; 0x7ac <Endpoint_WaitUntilReady>
 3aa:	b8 2e       	mov	r11, r24
 3ac:	99 81       	ldd	r25, Y+1	; 0x01
 3ae:	88 23       	and	r24, r24
 3b0:	c9 f5       	brne	.+114    	; 0x424 <Endpoint_Write_Stream_LE+0xa0>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 3b2:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 3b4:	01 15       	cp	r16, r1
 3b6:	11 05       	cpc	r17, r1
 3b8:	39 f0       	breq	.+14     	; 0x3c8 <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
 3ba:	f8 01       	movw	r30, r16
 3bc:	20 81       	ld	r18, Z
 3be:	31 81       	ldd	r19, Z+1	; 0x01
 3c0:	82 1a       	sub	r8, r18
 3c2:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 3c4:	e2 0e       	add	r14, r18
 3c6:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 3c8:	cc 24       	eor	r12, r12
 3ca:	dd 24       	eor	r13, r13
 3cc:	26 c0       	rjmp	.+76     	; 0x41a <Endpoint_Write_Stream_LE+0x96>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 3ce:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 3d2:	85 fd       	sbrc	r24, 5
 3d4:	17 c0       	rjmp	.+46     	; 0x404 <Endpoint_Write_Stream_LE+0x80>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3d6:	80 91 e8 00 	lds	r24, 0x00E8
 3da:	8e 77       	andi	r24, 0x7E	; 126
 3dc:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 3e0:	a5 d4       	rcall	.+2378   	; 0xd2c <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
 3e2:	01 15       	cp	r16, r1
 3e4:	11 05       	cpc	r17, r1
 3e6:	51 f0       	breq	.+20     	; 0x3fc <Endpoint_Write_Stream_LE+0x78>
			{
				*BytesProcessed += BytesInTransfer;
 3e8:	f8 01       	movw	r30, r16
 3ea:	80 81       	ld	r24, Z
 3ec:	91 81       	ldd	r25, Z+1	; 0x01
 3ee:	8c 0d       	add	r24, r12
 3f0:	9d 1d       	adc	r25, r13
 3f2:	91 83       	std	Z+1, r25	; 0x01
 3f4:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 3f6:	25 e0       	ldi	r18, 0x05	; 5
 3f8:	b2 2e       	mov	r11, r18
 3fa:	14 c0       	rjmp	.+40     	; 0x424 <Endpoint_Write_Stream_LE+0xa0>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 3fc:	d7 d1       	rcall	.+942    	; 0x7ac <Endpoint_WaitUntilReady>
 3fe:	88 23       	and	r24, r24
 400:	61 f0       	breq	.+24     	; 0x41a <Endpoint_Write_Stream_LE+0x96>
 402:	0f c0       	rjmp	.+30     	; 0x422 <Endpoint_Write_Stream_LE+0x9e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 404:	f7 01       	movw	r30, r14
 406:	81 91       	ld	r24, Z+
 408:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 40a:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 40e:	08 94       	sec
 410:	81 08       	sbc	r8, r1
 412:	91 08       	sbc	r9, r1
			BytesInTransfer++;
 414:	08 94       	sec
 416:	c1 1c       	adc	r12, r1
 418:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 41a:	81 14       	cp	r8, r1
 41c:	91 04       	cpc	r9, r1
 41e:	b9 f6       	brne	.-82     	; 0x3ce <Endpoint_Write_Stream_LE+0x4a>
 420:	01 c0       	rjmp	.+2      	; 0x424 <Endpoint_Write_Stream_LE+0xa0>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 422:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 424:	8b 2d       	mov	r24, r11
 426:	0f 90       	pop	r0
 428:	cf 91       	pop	r28
 42a:	df 91       	pop	r29
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	ff 90       	pop	r15
 432:	ef 90       	pop	r14
 434:	df 90       	pop	r13
 436:	cf 90       	pop	r12
 438:	bf 90       	pop	r11
 43a:	9f 90       	pop	r9
 43c:	8f 90       	pop	r8
 43e:	08 95       	ret

00000440 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 440:	8f 92       	push	r8
 442:	9f 92       	push	r9
 444:	bf 92       	push	r11
 446:	cf 92       	push	r12
 448:	df 92       	push	r13
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	df 93       	push	r29
 454:	cf 93       	push	r28
 456:	0f 92       	push	r0
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
 45c:	e8 2e       	mov	r14, r24
 45e:	4b 01       	movw	r8, r22
 460:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 462:	99 83       	std	Y+1, r25	; 0x01
 464:	a3 d1       	rcall	.+838    	; 0x7ac <Endpoint_WaitUntilReady>
 466:	b8 2e       	mov	r11, r24
 468:	99 81       	ldd	r25, Y+1	; 0x01
 46a:	88 23       	and	r24, r24
 46c:	c9 f5       	brne	.+114    	; 0x4e0 <Endpoint_Read_Stream_LE+0xa0>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 46e:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 470:	01 15       	cp	r16, r1
 472:	11 05       	cpc	r17, r1
 474:	39 f0       	breq	.+14     	; 0x484 <Endpoint_Read_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
 476:	f8 01       	movw	r30, r16
 478:	20 81       	ld	r18, Z
 47a:	31 81       	ldd	r19, Z+1	; 0x01
 47c:	82 1a       	sub	r8, r18
 47e:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 480:	e2 0e       	add	r14, r18
 482:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 484:	cc 24       	eor	r12, r12
 486:	dd 24       	eor	r13, r13
 488:	26 c0       	rjmp	.+76     	; 0x4d6 <Endpoint_Read_Stream_LE+0x96>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 48a:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 48e:	85 fd       	sbrc	r24, 5
 490:	17 c0       	rjmp	.+46     	; 0x4c0 <Endpoint_Read_Stream_LE+0x80>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 492:	80 91 e8 00 	lds	r24, 0x00E8
 496:	8b 77       	andi	r24, 0x7B	; 123
 498:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 49c:	47 d4       	rcall	.+2190   	; 0xd2c <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
 49e:	01 15       	cp	r16, r1
 4a0:	11 05       	cpc	r17, r1
 4a2:	51 f0       	breq	.+20     	; 0x4b8 <Endpoint_Read_Stream_LE+0x78>
			{
				*BytesProcessed += BytesInTransfer;
 4a4:	f8 01       	movw	r30, r16
 4a6:	80 81       	ld	r24, Z
 4a8:	91 81       	ldd	r25, Z+1	; 0x01
 4aa:	8c 0d       	add	r24, r12
 4ac:	9d 1d       	adc	r25, r13
 4ae:	91 83       	std	Z+1, r25	; 0x01
 4b0:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 4b2:	45 e0       	ldi	r20, 0x05	; 5
 4b4:	b4 2e       	mov	r11, r20
 4b6:	14 c0       	rjmp	.+40     	; 0x4e0 <Endpoint_Read_Stream_LE+0xa0>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 4b8:	79 d1       	rcall	.+754    	; 0x7ac <Endpoint_WaitUntilReady>
 4ba:	88 23       	and	r24, r24
 4bc:	61 f0       	breq	.+24     	; 0x4d6 <Endpoint_Read_Stream_LE+0x96>
 4be:	0f c0       	rjmp	.+30     	; 0x4de <Endpoint_Read_Stream_LE+0x9e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 4c0:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 4c4:	f7 01       	movw	r30, r14
 4c6:	81 93       	st	Z+, r24
 4c8:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 4ca:	08 94       	sec
 4cc:	81 08       	sbc	r8, r1
 4ce:	91 08       	sbc	r9, r1
			BytesInTransfer++;
 4d0:	08 94       	sec
 4d2:	c1 1c       	adc	r12, r1
 4d4:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 4d6:	81 14       	cp	r8, r1
 4d8:	91 04       	cpc	r9, r1
 4da:	b9 f6       	brne	.-82     	; 0x48a <Endpoint_Read_Stream_LE+0x4a>
 4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <Endpoint_Read_Stream_LE+0xa0>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 4de:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 4e0:	8b 2d       	mov	r24, r11
 4e2:	0f 90       	pop	r0
 4e4:	cf 91       	pop	r28
 4e6:	df 91       	pop	r29
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	ff 90       	pop	r15
 4ee:	ef 90       	pop	r14
 4f0:	df 90       	pop	r13
 4f2:	cf 90       	pop	r12
 4f4:	bf 90       	pop	r11
 4f6:	9f 90       	pop	r9
 4f8:	8f 90       	pop	r8
 4fa:	08 95       	ret

000004fc <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 4fc:	28 2f       	mov	r18, r24
 4fe:	39 2f       	mov	r19, r25
 500:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 502:	80 91 18 01 	lds	r24, 0x0118
 506:	90 91 19 01 	lds	r25, 0x0119
 50a:	86 17       	cp	r24, r22
 50c:	97 07       	cpc	r25, r23
 50e:	18 f4       	brcc	.+6      	; 0x516 <Endpoint_Write_Control_Stream_LE+0x1a>
 510:	bc 01       	movw	r22, r24
 512:	20 e0       	ldi	r18, 0x00	; 0
 514:	37 c0       	rjmp	.+110    	; 0x584 <Endpoint_Write_Control_Stream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 516:	61 15       	cp	r22, r1
 518:	71 05       	cpc	r23, r1
 51a:	d9 f7       	brne	.-10     	; 0x512 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 51c:	80 91 e8 00 	lds	r24, 0x00E8
 520:	8e 77       	andi	r24, 0x7E	; 126
 522:	80 93 e8 00 	sts	0x00E8, r24
 526:	f5 cf       	rjmp	.-22     	; 0x512 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 528:	80 91 11 01 	lds	r24, 0x0111

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 52c:	88 23       	and	r24, r24
 52e:	09 f4       	brne	.+2      	; 0x532 <Endpoint_Write_Control_Stream_LE+0x36>
 530:	3f c0       	rjmp	.+126    	; 0x5b0 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 532:	85 30       	cpi	r24, 0x05	; 5
 534:	c9 f1       	breq	.+114    	; 0x5a8 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 536:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 53a:	83 fd       	sbrc	r24, 3
 53c:	37 c0       	rjmp	.+110    	; 0x5ac <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 53e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 542:	82 fd       	sbrc	r24, 2
 544:	2b c0       	rjmp	.+86     	; 0x59c <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 546:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 54a:	80 ff       	sbrs	r24, 0
 54c:	1b c0       	rjmp	.+54     	; 0x584 <Endpoint_Write_Control_Stream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 54e:	80 91 f2 00 	lds	r24, 0x00F2
 552:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 556:	06 c0       	rjmp	.+12     	; 0x564 <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 558:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 55a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 55e:	61 50       	subi	r22, 0x01	; 1
 560:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 562:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 564:	61 15       	cp	r22, r1
 566:	71 05       	cpc	r23, r1
 568:	19 f0       	breq	.+6      	; 0x570 <Endpoint_Write_Control_Stream_LE+0x74>
 56a:	88 30       	cpi	r24, 0x08	; 8
 56c:	91 05       	cpc	r25, r1
 56e:	a0 f3       	brcs	.-24     	; 0x558 <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 570:	21 e0       	ldi	r18, 0x01	; 1
 572:	88 30       	cpi	r24, 0x08	; 8
 574:	91 05       	cpc	r25, r1
 576:	09 f0       	breq	.+2      	; 0x57a <Endpoint_Write_Control_Stream_LE+0x7e>
 578:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 57a:	80 91 e8 00 	lds	r24, 0x00E8
 57e:	8e 77       	andi	r24, 0x7E	; 126
 580:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 584:	61 15       	cp	r22, r1
 586:	71 05       	cpc	r23, r1
 588:	79 f6       	brne	.-98     	; 0x528 <Endpoint_Write_Control_Stream_LE+0x2c>
 58a:	22 23       	and	r18, r18
 58c:	69 f6       	brne	.-102    	; 0x528 <Endpoint_Write_Control_Stream_LE+0x2c>
 58e:	06 c0       	rjmp	.+12     	; 0x59c <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 590:	80 91 11 01 	lds	r24, 0x0111

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 594:	88 23       	and	r24, r24
 596:	61 f0       	breq	.+24     	; 0x5b0 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 598:	85 30       	cpi	r24, 0x05	; 5
 59a:	61 f0       	breq	.+24     	; 0x5b4 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 59c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 5a0:	82 ff       	sbrs	r24, 2
 5a2:	f6 cf       	rjmp	.-20     	; 0x590 <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5a8:	83 e0       	ldi	r24, 0x03	; 3
 5aa:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5b4:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5b6:	08 95       	ret

000005b8 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 5b8:	e8 2f       	mov	r30, r24
 5ba:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 5bc:	80 91 18 01 	lds	r24, 0x0118
 5c0:	90 91 19 01 	lds	r25, 0x0119
 5c4:	86 17       	cp	r24, r22
 5c6:	97 07       	cpc	r25, r23
 5c8:	18 f4       	brcc	.+6      	; 0x5d0 <Endpoint_Write_Control_PStream_LE+0x18>
 5ca:	bc 01       	movw	r22, r24
 5cc:	20 e0       	ldi	r18, 0x00	; 0
 5ce:	38 c0       	rjmp	.+112    	; 0x640 <Endpoint_Write_Control_PStream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 5d0:	61 15       	cp	r22, r1
 5d2:	71 05       	cpc	r23, r1
 5d4:	d9 f7       	brne	.-10     	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5d6:	80 91 e8 00 	lds	r24, 0x00E8
 5da:	8e 77       	andi	r24, 0x7E	; 126
 5dc:	80 93 e8 00 	sts	0x00E8, r24
 5e0:	f5 cf       	rjmp	.-22     	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5e2:	80 91 11 01 	lds	r24, 0x0111

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5e6:	88 23       	and	r24, r24
 5e8:	09 f4       	brne	.+2      	; 0x5ec <Endpoint_Write_Control_PStream_LE+0x34>
 5ea:	40 c0       	rjmp	.+128    	; 0x66c <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5ec:	85 30       	cpi	r24, 0x05	; 5
 5ee:	d1 f1       	breq	.+116    	; 0x664 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5f0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 5f4:	83 fd       	sbrc	r24, 3
 5f6:	38 c0       	rjmp	.+112    	; 0x668 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5f8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 5fc:	82 fd       	sbrc	r24, 2
 5fe:	2c c0       	rjmp	.+88     	; 0x658 <Endpoint_Write_Control_PStream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 600:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 604:	80 ff       	sbrs	r24, 0
 606:	1c c0       	rjmp	.+56     	; 0x640 <Endpoint_Write_Control_PStream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 608:	80 91 f2 00 	lds	r24, 0x00F2
 60c:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 610:	07 c0       	rjmp	.+14     	; 0x620 <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 612:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 614:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 618:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 61a:	61 50       	subi	r22, 0x01	; 1
 61c:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 61e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 620:	61 15       	cp	r22, r1
 622:	71 05       	cpc	r23, r1
 624:	19 f0       	breq	.+6      	; 0x62c <Endpoint_Write_Control_PStream_LE+0x74>
 626:	88 30       	cpi	r24, 0x08	; 8
 628:	91 05       	cpc	r25, r1
 62a:	98 f3       	brcs	.-26     	; 0x612 <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 62c:	21 e0       	ldi	r18, 0x01	; 1
 62e:	88 30       	cpi	r24, 0x08	; 8
 630:	91 05       	cpc	r25, r1
 632:	09 f0       	breq	.+2      	; 0x636 <Endpoint_Write_Control_PStream_LE+0x7e>
 634:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 636:	80 91 e8 00 	lds	r24, 0x00E8
 63a:	8e 77       	andi	r24, 0x7E	; 126
 63c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 640:	61 15       	cp	r22, r1
 642:	71 05       	cpc	r23, r1
 644:	71 f6       	brne	.-100    	; 0x5e2 <Endpoint_Write_Control_PStream_LE+0x2a>
 646:	22 23       	and	r18, r18
 648:	61 f6       	brne	.-104    	; 0x5e2 <Endpoint_Write_Control_PStream_LE+0x2a>
 64a:	06 c0       	rjmp	.+12     	; 0x658 <Endpoint_Write_Control_PStream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 64c:	80 91 11 01 	lds	r24, 0x0111

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 650:	88 23       	and	r24, r24
 652:	61 f0       	breq	.+24     	; 0x66c <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 654:	85 30       	cpi	r24, 0x05	; 5
 656:	61 f0       	breq	.+24     	; 0x670 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 658:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 65c:	82 ff       	sbrs	r24, 2
 65e:	f6 cf       	rjmp	.-20     	; 0x64c <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 664:	83 e0       	ldi	r24, 0x03	; 3
 666:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 66c:	82 e0       	ldi	r24, 0x02	; 2
 66e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 670:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 672:	08 95       	ret

00000674 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 674:	98 2f       	mov	r25, r24
 676:	2c c0       	rjmp	.+88     	; 0x6d0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 678:	29 2f       	mov	r18, r25
 67a:	2f 70       	andi	r18, 0x0F	; 15
 67c:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 680:	98 17       	cp	r25, r24
 682:	39 f0       	breq	.+14     	; 0x692 <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 684:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 688:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 68c:	50 91 f0 00 	lds	r21, 0x00F0
 690:	03 c0       	rjmp	.+6      	; 0x698 <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 692:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 694:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 696:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 698:	21 ff       	sbrs	r18, 1
 69a:	19 c0       	rjmp	.+50     	; 0x6ce <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 69c:	30 91 eb 00 	lds	r19, 0x00EB
 6a0:	3e 7f       	andi	r19, 0xFE	; 254
 6a2:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 6a6:	30 91 ed 00 	lds	r19, 0x00ED
 6aa:	3d 7f       	andi	r19, 0xFD	; 253
 6ac:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 6b0:	30 91 eb 00 	lds	r19, 0x00EB
 6b4:	31 60       	ori	r19, 0x01	; 1
 6b6:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 6ba:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 6be:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 6c2:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 6c6:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 6ca:	27 ff       	sbrs	r18, 7
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 6ce:	9f 5f       	subi	r25, 0xFF	; 255
 6d0:	97 30       	cpi	r25, 0x07	; 7
 6d2:	90 f2       	brcs	.-92     	; 0x678 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 6d4:	8f 70       	andi	r24, 0x0F	; 15
 6d6:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 6de:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 6e0:	08 95       	ret

000006e2 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
 6e2:	ef 92       	push	r14
 6e4:	ff 92       	push	r15
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 6f0:	e8 2e       	mov	r14, r24
 6f2:	e7 01       	movw	r28, r14
 6f4:	7e 01       	movw	r14, r28
 6f6:	f9 2e       	mov	r15, r25
 6f8:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 6fa:	00 e0       	ldi	r16, 0x00	; 0
 6fc:	2a c0       	rjmp	.+84     	; 0x752 <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
 6fe:	98 81       	ld	r25, Y
 700:	99 23       	and	r25, r25
 702:	29 f1       	breq	.+74     	; 0x74e <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
 704:	6b 81       	ldd	r22, Y+3	; 0x03
 706:	e9 81       	ldd	r30, Y+1	; 0x01
 708:	fa 81       	ldd	r31, Y+2	; 0x02
 70a:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 70c:	89 2f       	mov	r24, r25
 70e:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 710:	87 30       	cpi	r24, 0x07	; 7
 712:	18 f5       	brcc	.+70     	; 0x75a <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
 714:	62 95       	swap	r22
 716:	66 0f       	add	r22, r22
 718:	66 0f       	add	r22, r22
 71a:	60 7c       	andi	r22, 0xC0	; 192
 71c:	99 1f       	adc	r25, r25
 71e:	99 27       	eor	r25, r25
 720:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 722:	69 2b       	or	r22, r25
 724:	22 30       	cpi	r18, 0x02	; 2
 726:	10 f0       	brcs	.+4      	; 0x72c <Endpoint_ConfigureEndpointTable+0x4a>
 728:	96 e0       	ldi	r25, 0x06	; 6
 72a:	01 c0       	rjmp	.+2      	; 0x72e <Endpoint_ConfigureEndpointTable+0x4c>
 72c:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 72e:	28 e0       	ldi	r18, 0x08	; 8
 730:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 732:	40 e0       	ldi	r20, 0x00	; 0
 734:	03 c0       	rjmp	.+6      	; 0x73c <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 736:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 738:	22 0f       	add	r18, r18
 73a:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 73c:	2e 17       	cp	r18, r30
 73e:	3f 07       	cpc	r19, r31
 740:	d0 f3       	brcs	.-12     	; 0x736 <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 742:	42 95       	swap	r20
 744:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 746:	49 2b       	or	r20, r25
 748:	95 df       	rcall	.-214    	; 0x674 <Endpoint_ConfigureEndpoint_Prv>
 74a:	88 23       	and	r24, r24
 74c:	31 f0       	breq	.+12     	; 0x75a <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 74e:	0f 5f       	subi	r16, 0xFF	; 255
 750:	25 96       	adiw	r28, 0x05	; 5
 752:	01 17       	cp	r16, r17
 754:	a0 f2       	brcs	.-88     	; 0x6fe <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	01 c0       	rjmp	.+2      	; 0x75c <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 75a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	1f 91       	pop	r17
 762:	0f 91       	pop	r16
 764:	ff 90       	pop	r15
 766:	ef 90       	pop	r14
 768:	08 95       	ret

0000076a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 76a:	80 91 12 01 	lds	r24, 0x0112
 76e:	87 ff       	sbrs	r24, 7
 770:	13 c0       	rjmp	.+38     	; 0x798 <Endpoint_ClearStatusStage+0x2e>
 772:	04 c0       	rjmp	.+8      	; 0x77c <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 774:	80 91 11 01 	lds	r24, 0x0111
 778:	88 23       	and	r24, r24
 77a:	b9 f0       	breq	.+46     	; 0x7aa <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 77c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 780:	82 ff       	sbrs	r24, 2
 782:	f8 cf       	rjmp	.-16     	; 0x774 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 784:	80 91 e8 00 	lds	r24, 0x00E8
 788:	8b 77       	andi	r24, 0x7B	; 123
 78a:	80 93 e8 00 	sts	0x00E8, r24
 78e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 790:	80 91 11 01 	lds	r24, 0x0111
 794:	88 23       	and	r24, r24
 796:	49 f0       	breq	.+18     	; 0x7aa <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 798:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 79c:	80 ff       	sbrs	r24, 0
 79e:	f8 cf       	rjmp	.-16     	; 0x790 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7a0:	80 91 e8 00 	lds	r24, 0x00E8
 7a4:	8e 77       	andi	r24, 0x7E	; 126
 7a6:	80 93 e8 00 	sts	0x00E8, r24
 7aa:	08 95       	ret

000007ac <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 7ac:	80 91 e4 00 	lds	r24, 0x00E4
 7b0:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 7b4:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 7b6:	20 91 ec 00 	lds	r18, 0x00EC
 7ba:	20 ff       	sbrs	r18, 0
 7bc:	26 c0       	rjmp	.+76     	; 0x80a <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7be:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 7c2:	20 fd       	sbrc	r18, 0
 7c4:	16 c0       	rjmp	.+44     	; 0x7f2 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7c6:	20 91 11 01 	lds	r18, 0x0111

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7ca:	22 23       	and	r18, r18
 7cc:	a1 f0       	breq	.+40     	; 0x7f6 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7ce:	25 30       	cpi	r18, 0x05	; 5
 7d0:	a1 f0       	breq	.+40     	; 0x7fa <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7d2:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 7d6:	25 fd       	sbrc	r18, 5
 7d8:	12 c0       	rjmp	.+36     	; 0x7fe <Endpoint_WaitUntilReady+0x52>
 7da:	20 91 e4 00 	lds	r18, 0x00E4
 7de:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 7e2:	28 17       	cp	r18, r24
 7e4:	39 07       	cpc	r19, r25
 7e6:	39 f3       	breq	.-50     	; 0x7b6 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 7e8:	44 23       	and	r20, r20
 7ea:	59 f0       	breq	.+22     	; 0x802 <Endpoint_WaitUntilReady+0x56>
 7ec:	41 50       	subi	r20, 0x01	; 1
 7ee:	c9 01       	movw	r24, r18
 7f0:	e2 cf       	rjmp	.-60     	; 0x7b6 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 7f6:	82 e0       	ldi	r24, 0x02	; 2
 7f8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 7fa:	83 e0       	ldi	r24, 0x03	; 3
 7fc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 802:	84 e0       	ldi	r24, 0x04	; 4
 804:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 806:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 808:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 80a:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 80e:	22 ff       	sbrs	r18, 2
 810:	da cf       	rjmp	.-76     	; 0x7c6 <Endpoint_WaitUntilReady+0x1a>
 812:	f9 cf       	rjmp	.-14     	; 0x806 <Endpoint_WaitUntilReady+0x5a>

00000814 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 814:	0f 93       	push	r16
 816:	1f 93       	push	r17
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 81c:	4e d0       	rcall	.+156    	; 0x8ba <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 81e:	55 d0       	rcall	.+170    	; 0x8ca <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 820:	c8 ed       	ldi	r28, 0xD8	; 216
 822:	d0 e0       	ldi	r29, 0x00	; 0
 824:	88 81       	ld	r24, Y
 826:	8f 77       	andi	r24, 0x7F	; 127
 828:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
 82a:	88 81       	ld	r24, Y
 82c:	80 68       	ori	r24, 0x80	; 128
 82e:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 830:	88 81       	ld	r24, Y
 832:	8f 7d       	andi	r24, 0xDF	; 223
 834:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 836:	e7 ed       	ldi	r30, 0xD7	; 215
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	80 81       	ld	r24, Z
 83c:	80 68       	ori	r24, 0x80	; 128
 83e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 840:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 842:	10 92 11 01 	sts	0x0111, r1
	USB_Device_ConfigurationNumber  = 0;
 846:	10 92 0d 01 	sts	0x010D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 84a:	10 92 0f 01 	sts	0x010F, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 84e:	10 92 0e 01 	sts	0x010E, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 852:	00 ee       	ldi	r16, 0xE0	; 224
 854:	10 e0       	ldi	r17, 0x00	; 0
 856:	f8 01       	movw	r30, r16
 858:	80 81       	ld	r24, Z
 85a:	8b 7f       	andi	r24, 0xFB	; 251
 85c:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 85e:	88 81       	ld	r24, Y
 860:	81 60       	ori	r24, 0x01	; 1
 862:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	42 e0       	ldi	r20, 0x02	; 2
 86a:	04 df       	rcall	.-504    	; 0x674 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 86c:	e1 ee       	ldi	r30, 0xE1	; 225
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	8e 7f       	andi	r24, 0xFE	; 254
 874:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 876:	e2 ee       	ldi	r30, 0xE2	; 226
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	80 81       	ld	r24, Z
 87c:	81 60       	ori	r24, 0x01	; 1
 87e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 880:	80 81       	ld	r24, Z
 882:	88 60       	ori	r24, 0x08	; 8
 884:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 886:	f8 01       	movw	r30, r16
 888:	80 81       	ld	r24, Z
 88a:	8e 7f       	andi	r24, 0xFE	; 254
 88c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 88e:	88 81       	ld	r24, Y
 890:	80 61       	ori	r24, 0x10	; 16
 892:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 894:	df 91       	pop	r29
 896:	cf 91       	pop	r28
 898:	1f 91       	pop	r17
 89a:	0f 91       	pop	r16
 89c:	08 95       	ret

0000089e <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 89e:	e8 ed       	ldi	r30, 0xD8	; 216
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	80 81       	ld	r24, Z
 8a4:	8f 7e       	andi	r24, 0xEF	; 239
 8a6:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 8a8:	e7 ed       	ldi	r30, 0xD7	; 215
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	80 81       	ld	r24, Z
 8ae:	81 60       	ori	r24, 0x01	; 1
 8b0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	80 93 10 01 	sts	0x0110, r24

	USB_ResetInterface();
}
 8b8:	ad cf       	rjmp	.-166    	; 0x814 <USB_ResetInterface>

000008ba <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 8ba:	e8 ed       	ldi	r30, 0xD8	; 216
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	8c 7f       	andi	r24, 0xFC	; 252
 8c2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 8c4:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 8c8:	08 95       	ret

000008ca <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 8ca:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 8ce:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 8d2:	08 95       	ret

000008d4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 8d4:	1f 92       	push	r1
 8d6:	0f 92       	push	r0
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	0f 92       	push	r0
 8dc:	0b b6       	in	r0, 0x3b	; 59
 8de:	0f 92       	push	r0
 8e0:	11 24       	eor	r1, r1
 8e2:	2f 93       	push	r18
 8e4:	3f 93       	push	r19
 8e6:	4f 93       	push	r20
 8e8:	5f 93       	push	r21
 8ea:	6f 93       	push	r22
 8ec:	7f 93       	push	r23
 8ee:	8f 93       	push	r24
 8f0:	9f 93       	push	r25
 8f2:	af 93       	push	r26
 8f4:	bf 93       	push	r27
 8f6:	ef 93       	push	r30
 8f8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 8fa:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 8fe:	82 ff       	sbrs	r24, 2
 900:	0a c0       	rjmp	.+20     	; 0x916 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 902:	80 91 e2 00 	lds	r24, 0x00E2
 906:	82 ff       	sbrs	r24, 2
 908:	06 c0       	rjmp	.+12     	; 0x916 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 90a:	80 91 e1 00 	lds	r24, 0x00E1
 90e:	8b 7f       	andi	r24, 0xFB	; 251
 910:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 914:	0a d2       	rcall	.+1044   	; 0xd2a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 916:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 91a:	80 ff       	sbrs	r24, 0
 91c:	1d c0       	rjmp	.+58     	; 0x958 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 91e:	80 91 d8 00 	lds	r24, 0x00D8
 922:	80 ff       	sbrs	r24, 0
 924:	19 c0       	rjmp	.+50     	; 0x958 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 926:	80 91 da 00 	lds	r24, 0x00DA
 92a:	8e 7f       	andi	r24, 0xFE	; 254
 92c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 930:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 934:	80 ff       	sbrs	r24, 0
 936:	0c c0       	rjmp	.+24     	; 0x950 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 938:	8c e0       	ldi	r24, 0x0C	; 12
 93a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 93c:	8e e0       	ldi	r24, 0x0E	; 14
 93e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 940:	09 b4       	in	r0, 0x29	; 41
 942:	00 fe       	sbrs	r0, 0
 944:	fd cf       	rjmp	.-6      	; 0x940 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	80 93 11 01 	sts	0x0111, r24
			EVENT_USB_Device_Connect();
 94c:	e0 dc       	rcall	.-1600   	; 0x30e <EVENT_USB_Device_Connect>
 94e:	04 c0       	rjmp	.+8      	; 0x958 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 950:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 952:	10 92 11 01 	sts	0x0111, r1
			EVENT_USB_Device_Disconnect();
 956:	dd dc       	rcall	.-1606   	; 0x312 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 958:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 95c:	80 ff       	sbrs	r24, 0
 95e:	18 c0       	rjmp	.+48     	; 0x990 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 960:	80 91 e2 00 	lds	r24, 0x00E2
 964:	80 ff       	sbrs	r24, 0
 966:	14 c0       	rjmp	.+40     	; 0x990 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 968:	80 91 e2 00 	lds	r24, 0x00E2
 96c:	8e 7f       	andi	r24, 0xFE	; 254
 96e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 972:	80 91 e2 00 	lds	r24, 0x00E2
 976:	80 61       	ori	r24, 0x10	; 16
 978:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 97c:	80 91 d8 00 	lds	r24, 0x00D8
 980:	80 62       	ori	r24, 0x20	; 32
 982:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 986:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 988:	85 e0       	ldi	r24, 0x05	; 5
 98a:	80 93 11 01 	sts	0x0111, r24
		EVENT_USB_Device_Suspend();
 98e:	cd d1       	rcall	.+922    	; 0xd2a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 990:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 994:	84 ff       	sbrs	r24, 4
 996:	2d c0       	rjmp	.+90     	; 0x9f2 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 998:	80 91 e2 00 	lds	r24, 0x00E2
 99c:	84 ff       	sbrs	r24, 4
 99e:	29 c0       	rjmp	.+82     	; 0x9f2 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 9a0:	8c e0       	ldi	r24, 0x0C	; 12
 9a2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 9a4:	8e e0       	ldi	r24, 0x0E	; 14
 9a6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 9a8:	09 b4       	in	r0, 0x29	; 41
 9aa:	00 fe       	sbrs	r0, 0
 9ac:	fd cf       	rjmp	.-6      	; 0x9a8 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 9ae:	80 91 d8 00 	lds	r24, 0x00D8
 9b2:	8f 7d       	andi	r24, 0xDF	; 223
 9b4:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 9b8:	80 91 e1 00 	lds	r24, 0x00E1
 9bc:	8f 7e       	andi	r24, 0xEF	; 239
 9be:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 9c2:	80 91 e2 00 	lds	r24, 0x00E2
 9c6:	8f 7e       	andi	r24, 0xEF	; 239
 9c8:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 9cc:	80 91 e2 00 	lds	r24, 0x00E2
 9d0:	81 60       	ori	r24, 0x01	; 1
 9d2:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 9d6:	80 91 0d 01 	lds	r24, 0x010D
 9da:	88 23       	and	r24, r24
 9dc:	21 f4       	brne	.+8      	; 0x9e6 <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9de:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9e2:	87 ff       	sbrs	r24, 7
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <__vector_10+0x116>
 9e6:	84 e0       	ldi	r24, 0x04	; 4
 9e8:	01 c0       	rjmp	.+2      	; 0x9ec <__vector_10+0x118>
 9ea:	81 e0       	ldi	r24, 0x01	; 1
 9ec:	80 93 11 01 	sts	0x0111, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 9f0:	9c d1       	rcall	.+824    	; 0xd2a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 9f2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 9f6:	83 ff       	sbrs	r24, 3
 9f8:	22 c0       	rjmp	.+68     	; 0xa3e <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 9fa:	80 91 e2 00 	lds	r24, 0x00E2
 9fe:	83 ff       	sbrs	r24, 3
 a00:	1e c0       	rjmp	.+60     	; 0xa3e <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 a02:	80 91 e1 00 	lds	r24, 0x00E1
 a06:	87 7f       	andi	r24, 0xF7	; 247
 a08:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 a0c:	82 e0       	ldi	r24, 0x02	; 2
 a0e:	80 93 11 01 	sts	0x0111, r24
		USB_Device_ConfigurationNumber = 0;
 a12:	10 92 0d 01 	sts	0x010D, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 a16:	80 91 e1 00 	lds	r24, 0x00E1
 a1a:	8e 7f       	andi	r24, 0xFE	; 254
 a1c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a20:	80 91 e2 00 	lds	r24, 0x00E2
 a24:	8e 7f       	andi	r24, 0xFE	; 254
 a26:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a2a:	80 91 e2 00 	lds	r24, 0x00E2
 a2e:	80 61       	ori	r24, 0x10	; 16
 a30:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	60 e0       	ldi	r22, 0x00	; 0
 a38:	42 e0       	ldi	r20, 0x02	; 2
 a3a:	1c de       	rcall	.-968    	; 0x674 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 a3c:	76 d1       	rcall	.+748    	; 0xd2a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 a3e:	ff 91       	pop	r31
 a40:	ef 91       	pop	r30
 a42:	bf 91       	pop	r27
 a44:	af 91       	pop	r26
 a46:	9f 91       	pop	r25
 a48:	8f 91       	pop	r24
 a4a:	7f 91       	pop	r23
 a4c:	6f 91       	pop	r22
 a4e:	5f 91       	pop	r21
 a50:	4f 91       	pop	r20
 a52:	3f 91       	pop	r19
 a54:	2f 91       	pop	r18
 a56:	0f 90       	pop	r0
 a58:	0b be       	out	0x3b, r0	; 59
 a5a:	0f 90       	pop	r0
 a5c:	0f be       	out	0x3f, r0	; 63
 a5e:	0f 90       	pop	r0
 a60:	1f 90       	pop	r1
 a62:	18 95       	reti

00000a64 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a64:	1f 93       	push	r17
 a66:	df 93       	push	r29
 a68:	cf 93       	push	r28
 a6a:	cd b7       	in	r28, 0x3d	; 61
 a6c:	de b7       	in	r29, 0x3e	; 62
 a6e:	ac 97       	sbiw	r28, 0x2c	; 44
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	f8 94       	cli
 a74:	de bf       	out	0x3e, r29	; 62
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 a7a:	e2 e1       	ldi	r30, 0x12	; 18
 a7c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a7e:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a82:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a84:	21 e0       	ldi	r18, 0x01	; 1
 a86:	ea 31       	cpi	r30, 0x1A	; 26
 a88:	f2 07       	cpc	r31, r18
 a8a:	c9 f7       	brne	.-14     	; 0xa7e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a8c:	4d dc       	rcall	.-1894   	; 0x328 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a8e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 a92:	83 ff       	sbrs	r24, 3
 a94:	32 c1       	rjmp	.+612    	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a96:	80 91 12 01 	lds	r24, 0x0112

		switch (USB_ControlRequest.bRequest)
 a9a:	20 91 13 01 	lds	r18, 0x0113
 a9e:	25 30       	cpi	r18, 0x05	; 5
 aa0:	09 f4       	brne	.+2      	; 0xaa4 <USB_Device_ProcessControlRequest+0x40>
 aa2:	84 c0       	rjmp	.+264    	; 0xbac <USB_Device_ProcessControlRequest+0x148>
 aa4:	26 30       	cpi	r18, 0x06	; 6
 aa6:	40 f4       	brcc	.+16     	; 0xab8 <USB_Device_ProcessControlRequest+0x54>
 aa8:	21 30       	cpi	r18, 0x01	; 1
 aaa:	a1 f1       	breq	.+104    	; 0xb14 <USB_Device_ProcessControlRequest+0xb0>
 aac:	21 30       	cpi	r18, 0x01	; 1
 aae:	70 f0       	brcs	.+28     	; 0xacc <USB_Device_ProcessControlRequest+0x68>
 ab0:	23 30       	cpi	r18, 0x03	; 3
 ab2:	09 f0       	breq	.+2      	; 0xab6 <USB_Device_ProcessControlRequest+0x52>
 ab4:	22 c1       	rjmp	.+580    	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
 ab6:	2e c0       	rjmp	.+92     	; 0xb14 <USB_Device_ProcessControlRequest+0xb0>
 ab8:	28 30       	cpi	r18, 0x08	; 8
 aba:	09 f4       	brne	.+2      	; 0xabe <USB_Device_ProcessControlRequest+0x5a>
 abc:	f0 c0       	rjmp	.+480    	; 0xc9e <USB_Device_ProcessControlRequest+0x23a>
 abe:	29 30       	cpi	r18, 0x09	; 9
 ac0:	09 f4       	brne	.+2      	; 0xac4 <USB_Device_ProcessControlRequest+0x60>
 ac2:	ff c0       	rjmp	.+510    	; 0xcc2 <USB_Device_ProcessControlRequest+0x25e>
 ac4:	26 30       	cpi	r18, 0x06	; 6
 ac6:	09 f0       	breq	.+2      	; 0xaca <USB_Device_ProcessControlRequest+0x66>
 ac8:	18 c1       	rjmp	.+560    	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
 aca:	93 c0       	rjmp	.+294    	; 0xbf2 <USB_Device_ProcessControlRequest+0x18e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 acc:	80 38       	cpi	r24, 0x80	; 128
 ace:	21 f0       	breq	.+8      	; 0xad8 <USB_Device_ProcessControlRequest+0x74>
 ad0:	82 38       	cpi	r24, 0x82	; 130
 ad2:	09 f0       	breq	.+2      	; 0xad6 <USB_Device_ProcessControlRequest+0x72>
 ad4:	12 c1       	rjmp	.+548    	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
 ad6:	08 c0       	rjmp	.+16     	; 0xae8 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 ad8:	80 91 0e 01 	lds	r24, 0x010E
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 adc:	90 91 0f 01 	lds	r25, 0x010F
 ae0:	99 23       	and	r25, r25
 ae2:	71 f0       	breq	.+28     	; 0xb00 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 ae4:	82 60       	ori	r24, 0x02	; 2
 ae6:	0c c0       	rjmp	.+24     	; 0xb00 <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ae8:	80 91 16 01 	lds	r24, 0x0116
 aec:	8f 70       	andi	r24, 0x0F	; 15
 aee:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 af2:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
 af6:	81 e0       	ldi	r24, 0x01	; 1
 af8:	95 ff       	sbrs	r25, 5
 afa:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 afc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b00:	90 91 e8 00 	lds	r25, 0x00E8
 b04:	97 7f       	andi	r25, 0xF7	; 247
 b06:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b0a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 b0e:	10 92 f1 00 	sts	0x00F1, r1
 b12:	d0 c0       	rjmp	.+416    	; 0xcb4 <USB_Device_ProcessControlRequest+0x250>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b14:	88 23       	and	r24, r24
 b16:	19 f0       	breq	.+6      	; 0xb1e <USB_Device_ProcessControlRequest+0xba>
 b18:	82 30       	cpi	r24, 0x02	; 2
 b1a:	09 f0       	breq	.+2      	; 0xb1e <USB_Device_ProcessControlRequest+0xba>
 b1c:	ee c0       	rjmp	.+476    	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	8f 71       	andi	r24, 0x1F	; 31
 b22:	90 70       	andi	r25, 0x00	; 0
 b24:	00 97       	sbiw	r24, 0x00	; 0
 b26:	29 f0       	breq	.+10     	; 0xb32 <USB_Device_ProcessControlRequest+0xce>
 b28:	82 30       	cpi	r24, 0x02	; 2
 b2a:	91 05       	cpc	r25, r1
 b2c:	09 f0       	breq	.+2      	; 0xb30 <USB_Device_ProcessControlRequest+0xcc>
 b2e:	e5 c0       	rjmp	.+458    	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
 b30:	0b c0       	rjmp	.+22     	; 0xb48 <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 b32:	80 91 14 01 	lds	r24, 0x0114
 b36:	81 30       	cpi	r24, 0x01	; 1
 b38:	09 f0       	breq	.+2      	; 0xb3c <USB_Device_ProcessControlRequest+0xd8>
 b3a:	df c0       	rjmp	.+446    	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 b3c:	23 30       	cpi	r18, 0x03	; 3
 b3e:	09 f0       	breq	.+2      	; 0xb42 <USB_Device_ProcessControlRequest+0xde>
 b40:	80 e0       	ldi	r24, 0x00	; 0
 b42:	80 93 0f 01 	sts	0x010F, r24
 b46:	2c c0       	rjmp	.+88     	; 0xba0 <USB_Device_ProcessControlRequest+0x13c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b48:	80 91 14 01 	lds	r24, 0x0114
 b4c:	88 23       	and	r24, r24
 b4e:	41 f5       	brne	.+80     	; 0xba0 <USB_Device_ProcessControlRequest+0x13c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b50:	20 91 16 01 	lds	r18, 0x0116
 b54:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b56:	09 f4       	brne	.+2      	; 0xb5a <USB_Device_ProcessControlRequest+0xf6>
 b58:	d0 c0       	rjmp	.+416    	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b5a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b5e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b62:	80 ff       	sbrs	r24, 0
 b64:	1d c0       	rjmp	.+58     	; 0xba0 <USB_Device_ProcessControlRequest+0x13c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b66:	80 91 13 01 	lds	r24, 0x0113
 b6a:	83 30       	cpi	r24, 0x03	; 3
 b6c:	21 f4       	brne	.+8      	; 0xb76 <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b6e:	80 91 eb 00 	lds	r24, 0x00EB
 b72:	80 62       	ori	r24, 0x20	; 32
 b74:	13 c0       	rjmp	.+38     	; 0xb9c <USB_Device_ProcessControlRequest+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b76:	80 91 eb 00 	lds	r24, 0x00EB
 b7a:	80 61       	ori	r24, 0x10	; 16
 b7c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 b80:	81 e0       	ldi	r24, 0x01	; 1
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <USB_Device_ProcessControlRequest+0x126>
 b86:	88 0f       	add	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	2a 95       	dec	r18
 b8c:	e2 f7       	brpl	.-8      	; 0xb86 <USB_Device_ProcessControlRequest+0x122>
 b8e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 b92:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b96:	80 91 eb 00 	lds	r24, 0x00EB
 b9a:	88 60       	ori	r24, 0x08	; 8
 b9c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ba0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ba4:	80 91 e8 00 	lds	r24, 0x00E8
 ba8:	87 7f       	andi	r24, 0xF7	; 247
 baa:	87 c0       	rjmp	.+270    	; 0xcba <USB_Device_ProcessControlRequest+0x256>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bac:	88 23       	and	r24, r24
 bae:	09 f0       	breq	.+2      	; 0xbb2 <USB_Device_ProcessControlRequest+0x14e>
 bb0:	a4 c0       	rjmp	.+328    	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 bb2:	10 91 14 01 	lds	r17, 0x0114
 bb6:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 bb8:	80 91 e3 00 	lds	r24, 0x00E3
 bbc:	80 78       	andi	r24, 0x80	; 128
 bbe:	81 2b       	or	r24, r17
 bc0:	80 93 e3 00 	sts	0x00E3, r24
 bc4:	80 91 e8 00 	lds	r24, 0x00E8
 bc8:	87 7f       	andi	r24, 0xF7	; 247
 bca:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 bce:	cd dd       	rcall	.-1126   	; 0x76a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bd0:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 bd4:	80 ff       	sbrs	r24, 0
 bd6:	fc cf       	rjmp	.-8      	; 0xbd0 <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 bd8:	80 91 e3 00 	lds	r24, 0x00E3
 bdc:	80 68       	ori	r24, 0x80	; 128
 bde:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 be2:	11 23       	and	r17, r17
 be4:	11 f0       	breq	.+4      	; 0xbea <USB_Device_ProcessControlRequest+0x186>
 be6:	83 e0       	ldi	r24, 0x03	; 3
 be8:	01 c0       	rjmp	.+2      	; 0xbec <USB_Device_ProcessControlRequest+0x188>
 bea:	82 e0       	ldi	r24, 0x02	; 2
 bec:	80 93 11 01 	sts	0x0111, r24
 bf0:	84 c0       	rjmp	.+264    	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bf2:	80 58       	subi	r24, 0x80	; 128
 bf4:	82 30       	cpi	r24, 0x02	; 2
 bf6:	08 f0       	brcs	.+2      	; 0xbfa <USB_Device_ProcessControlRequest+0x196>
 bf8:	80 c0       	rjmp	.+256    	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 bfa:	80 91 14 01 	lds	r24, 0x0114
 bfe:	90 91 15 01 	lds	r25, 0x0115
 c02:	23 e0       	ldi	r18, 0x03	; 3
 c04:	8c 3d       	cpi	r24, 0xDC	; 220
 c06:	92 07       	cpc	r25, r18
 c08:	91 f5       	brne	.+100    	; 0xc6e <USB_Device_ProcessControlRequest+0x20a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 c0a:	83 e0       	ldi	r24, 0x03	; 3
 c0c:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 c0e:	8a e2       	ldi	r24, 0x2A	; 42
 c10:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c12:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c14:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 c16:	de 01       	movw	r26, r28
 c18:	15 96       	adiw	r26, 0x05	; 5
 c1a:	80 e0       	ldi	r24, 0x00	; 0
 c1c:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 c1e:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 c20:	61 e2       	ldi	r22, 0x21	; 33
 c22:	e4 2f       	mov	r30, r20
 c24:	f0 e0       	ldi	r31, 0x00	; 0
 c26:	60 93 57 00 	sts	0x0057, r22
 c2a:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
 c2c:	80 ff       	sbrs	r24, 0
 c2e:	03 c0       	rjmp	.+6      	; 0xc36 <USB_Device_ProcessControlRequest+0x1d2>
					{
						SerialByte >>= 4;
 c30:	e2 95       	swap	r30
 c32:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 c34:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 c36:	ef 70       	andi	r30, 0x0F	; 15
 c38:	2e 2f       	mov	r18, r30
 c3a:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 c3c:	ea 30       	cpi	r30, 0x0A	; 10
 c3e:	18 f0       	brcs	.+6      	; 0xc46 <USB_Device_ProcessControlRequest+0x1e2>
 c40:	29 5c       	subi	r18, 0xC9	; 201
 c42:	3f 4f       	sbci	r19, 0xFF	; 255
 c44:	02 c0       	rjmp	.+4      	; 0xc4a <USB_Device_ProcessControlRequest+0x1e6>
 c46:	20 5d       	subi	r18, 0xD0	; 208
 c48:	3f 4f       	sbci	r19, 0xFF	; 255
 c4a:	2d 93       	st	X+, r18
 c4c:	3d 93       	st	X+, r19
 c4e:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c50:	84 31       	cpi	r24, 0x14	; 20
 c52:	91 05       	cpc	r25, r1
 c54:	31 f7       	brne	.-52     	; 0xc22 <USB_Device_ProcessControlRequest+0x1be>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 c56:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c58:	80 91 e8 00 	lds	r24, 0x00E8
 c5c:	87 7f       	andi	r24, 0xF7	; 247
 c5e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c62:	ce 01       	movw	r24, r28
 c64:	03 96       	adiw	r24, 0x03	; 3
 c66:	6a e2       	ldi	r22, 0x2A	; 42
 c68:	70 e0       	ldi	r23, 0x00	; 0
 c6a:	48 dc       	rcall	.-1904   	; 0x4fc <Endpoint_Write_Control_Stream_LE>
 c6c:	12 c0       	rjmp	.+36     	; 0xc92 <USB_Device_ProcessControlRequest+0x22e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c6e:	60 91 16 01 	lds	r22, 0x0116
 c72:	ae 01       	movw	r20, r28
 c74:	4f 5f       	subi	r20, 0xFF	; 255
 c76:	5f 4f       	sbci	r21, 0xFF	; 255
 c78:	58 db       	rcall	.-2384   	; 0x32a <CALLBACK_USB_GetDescriptor>
 c7a:	bc 01       	movw	r22, r24
 c7c:	00 97       	sbiw	r24, 0x00	; 0
 c7e:	09 f4       	brne	.+2      	; 0xc82 <USB_Device_ProcessControlRequest+0x21e>
 c80:	3c c0       	rjmp	.+120    	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
 c82:	80 91 e8 00 	lds	r24, 0x00E8
 c86:	87 7f       	andi	r24, 0xF7	; 247
 c88:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c8c:	89 81       	ldd	r24, Y+1	; 0x01
 c8e:	9a 81       	ldd	r25, Y+2	; 0x02
 c90:	93 dc       	rcall	.-1754   	; 0x5b8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c92:	80 91 e8 00 	lds	r24, 0x00E8
 c96:	8b 77       	andi	r24, 0x7B	; 123
 c98:	80 93 e8 00 	sts	0x00E8, r24
 c9c:	2e c0       	rjmp	.+92     	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c9e:	80 38       	cpi	r24, 0x80	; 128
 ca0:	61 f5       	brne	.+88     	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ca2:	80 91 e8 00 	lds	r24, 0x00E8
 ca6:	87 7f       	andi	r24, 0xF7	; 247
 ca8:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 cac:	80 91 0d 01 	lds	r24, 0x010D
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 cb0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cb4:	80 91 e8 00 	lds	r24, 0x00E8
 cb8:	8e 77       	andi	r24, 0x7E	; 126
 cba:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 cbe:	55 dd       	rcall	.-1366   	; 0x76a <Endpoint_ClearStatusStage>
 cc0:	1c c0       	rjmp	.+56     	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 cc2:	88 23       	and	r24, r24
 cc4:	d1 f4       	brne	.+52     	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 cc6:	90 91 14 01 	lds	r25, 0x0114
 cca:	92 30       	cpi	r25, 0x02	; 2
 ccc:	b0 f4       	brcc	.+44     	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cce:	80 91 e8 00 	lds	r24, 0x00E8
 cd2:	87 7f       	andi	r24, 0xF7	; 247
 cd4:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 cd8:	90 93 0d 01 	sts	0x010D, r25

	Endpoint_ClearStatusStage();
 cdc:	46 dd       	rcall	.-1396   	; 0x76a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 cde:	80 91 0d 01 	lds	r24, 0x010D
 ce2:	88 23       	and	r24, r24
 ce4:	21 f4       	brne	.+8      	; 0xcee <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ce6:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 cea:	87 ff       	sbrs	r24, 7
 cec:	02 c0       	rjmp	.+4      	; 0xcf2 <USB_Device_ProcessControlRequest+0x28e>
 cee:	84 e0       	ldi	r24, 0x04	; 4
 cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <USB_Device_ProcessControlRequest+0x290>
 cf2:	81 e0       	ldi	r24, 0x01	; 1
 cf4:	80 93 11 01 	sts	0x0111, r24

	EVENT_USB_Device_ConfigurationChanged();
 cf8:	0e db       	rcall	.-2532   	; 0x316 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cfa:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 cfe:	83 ff       	sbrs	r24, 3
 d00:	0a c0       	rjmp	.+20     	; 0xd16 <USB_Device_ProcessControlRequest+0x2b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d02:	80 91 e8 00 	lds	r24, 0x00E8
 d06:	87 7f       	andi	r24, 0xF7	; 247
 d08:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d0c:	80 91 eb 00 	lds	r24, 0x00EB
 d10:	80 62       	ori	r24, 0x20	; 32
 d12:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 d16:	ac 96       	adiw	r28, 0x2c	; 44
 d18:	0f b6       	in	r0, 0x3f	; 63
 d1a:	f8 94       	cli
 d1c:	de bf       	out	0x3e, r29	; 62
 d1e:	0f be       	out	0x3f, r0	; 63
 d20:	cd bf       	out	0x3d, r28	; 61
 d22:	cf 91       	pop	r28
 d24:	df 91       	pop	r29
 d26:	1f 91       	pop	r17
 d28:	08 95       	ret

00000d2a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 d2a:	08 95       	ret

00000d2c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 d2c:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 d2e:	80 91 11 01 	lds	r24, 0x0111
 d32:	88 23       	and	r24, r24
 d34:	a9 f0       	breq	.+42     	; 0xd60 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d36:	80 91 e9 00 	lds	r24, 0x00E9
 d3a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 d3c:	90 91 ec 00 	lds	r25, 0x00EC
 d40:	90 ff       	sbrs	r25, 0
 d42:	02 c0       	rjmp	.+4      	; 0xd48 <USB_USBTask+0x1c>
 d44:	10 e8       	ldi	r17, 0x80	; 128
 d46:	01 c0       	rjmp	.+2      	; 0xd4a <USB_USBTask+0x1e>
 d48:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d4a:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d4c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d50:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 d54:	83 ff       	sbrs	r24, 3
 d56:	01 c0       	rjmp	.+2      	; 0xd5a <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 d58:	85 de       	rcall	.-758    	; 0xa64 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d5a:	1f 70       	andi	r17, 0x0F	; 15
 d5c:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 d60:	1f 91       	pop	r17
 d62:	08 95       	ret

00000d64 <MIDI_Device_ConfigureEndpoints>:
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDIClassDevice.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 d64:	cf 93       	push	r28
 d66:	df 93       	push	r29
 d68:	ec 01       	movw	r28, r24
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
 d6a:	1b 86       	std	Y+11, r1	; 0x0b

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
 d6c:	82 e0       	ldi	r24, 0x02	; 2
 d6e:	8c 83       	std	Y+4, r24	; 0x04
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
 d70:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
 d72:	ce 01       	movw	r24, r28
 d74:	01 96       	adiw	r24, 0x01	; 1
 d76:	61 e0       	ldi	r22, 0x01	; 1
 d78:	b4 dc       	rcall	.-1688   	; 0x6e2 <Endpoint_ConfigureEndpointTable>
 d7a:	88 23       	and	r24, r24
 d7c:	29 f0       	breq	.+10     	; 0xd88 <MIDI_Device_ConfigureEndpoints+0x24>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 d7e:	ce 01       	movw	r24, r28
 d80:	06 96       	adiw	r24, 0x06	; 6
 d82:	61 e0       	ldi	r22, 0x01	; 1
 d84:	ae dc       	rcall	.-1700   	; 0x6e2 <Endpoint_ConfigureEndpointTable>
 d86:	01 c0       	rjmp	.+2      	; 0xd8a <MIDI_Device_ConfigureEndpoints+0x26>

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
 d88:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
 d8a:	df 91       	pop	r29
 d8c:	cf 91       	pop	r28
 d8e:	08 95       	ret

00000d90 <MIDI_Device_SendEventPacket>:
	#endif
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
 d90:	fc 01       	movw	r30, r24
 d92:	cb 01       	movw	r24, r22
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d94:	20 91 11 01 	lds	r18, 0x0111
 d98:	24 30       	cpi	r18, 0x04	; 4
 d9a:	a9 f4       	brne	.+42     	; 0xdc6 <MIDI_Device_SendEventPacket+0x36>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d9c:	21 81       	ldd	r18, Z+1	; 0x01
 d9e:	2f 70       	andi	r18, 0x0F	; 15
 da0:	20 93 e9 00 	sts	0x00E9, r18

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
 da4:	64 e0       	ldi	r22, 0x04	; 4
 da6:	70 e0       	ldi	r23, 0x00	; 0
 da8:	40 e0       	ldi	r20, 0x00	; 0
 daa:	50 e0       	ldi	r21, 0x00	; 0
 dac:	eb da       	rcall	.-2602   	; 0x384 <Endpoint_Write_Stream_LE>
 dae:	88 23       	and	r24, r24
 db0:	59 f4       	brne	.+22     	; 0xdc8 <MIDI_Device_SendEventPacket+0x38>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 db2:	90 91 e8 00 	lds	r25, 0x00E8
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
 db6:	95 fd       	sbrc	r25, 5
 db8:	07 c0       	rjmp	.+14     	; 0xdc8 <MIDI_Device_SendEventPacket+0x38>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dba:	90 91 e8 00 	lds	r25, 0x00E8
 dbe:	9e 77       	andi	r25, 0x7E	; 126
 dc0:	90 93 e8 00 	sts	0x00E8, r25
 dc4:	08 95       	ret

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 dc6:	82 e0       	ldi	r24, 0x02	; 2

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
}
 dc8:	08 95       	ret

00000dca <MIDI_Device_Flush>:

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 dca:	20 91 11 01 	lds	r18, 0x0111
 dce:	24 30       	cpi	r18, 0x04	; 4
 dd0:	89 f4       	brne	.+34     	; 0xdf4 <MIDI_Device_Flush+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 dd2:	fc 01       	movw	r30, r24
 dd4:	81 81       	ldd	r24, Z+1	; 0x01
 dd6:	8f 70       	andi	r24, 0x0F	; 15
 dd8:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 ddc:	80 91 f2 00 	lds	r24, 0x00F2
 de0:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_BytesInEndpoint())
 de4:	00 97       	sbiw	r24, 0x00	; 0
 de6:	41 f0       	breq	.+16     	; 0xdf8 <MIDI_Device_Flush+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 de8:	80 91 e8 00 	lds	r24, 0x00E8
 dec:	8e 77       	andi	r24, 0x7E	; 126
 dee:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 df2:	dc cc       	rjmp	.-1608   	; 0x7ac <Endpoint_WaitUntilReady>
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 df4:	82 e0       	ldi	r24, 0x02	; 2
 df6:	08 95       	ret

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
 df8:	80 e0       	ldi	r24, 0x00	; 0
}
 dfa:	08 95       	ret

00000dfc <MIDI_Device_USBTask>:
	return true;
}

void MIDI_Device_USBTask(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 dfc:	20 91 11 01 	lds	r18, 0x0111
 e00:	24 30       	cpi	r18, 0x04	; 4
 e02:	51 f4       	brne	.+20     	; 0xe18 <MIDI_Device_USBTask+0x1c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e04:	fc 01       	movw	r30, r24
 e06:	21 81       	ldd	r18, Z+1	; 0x01
 e08:	2f 70       	andi	r18, 0x0F	; 15
 e0a:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 e0e:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);
	
	if (Endpoint_IsINReady())
 e12:	20 ff       	sbrs	r18, 0
 e14:	01 c0       	rjmp	.+2      	; 0xe18 <MIDI_Device_USBTask+0x1c>
	  MIDI_Device_Flush(MIDIInterfaceInfo);
 e16:	d9 cf       	rjmp	.-78     	; 0xdca <MIDI_Device_Flush>
 e18:	08 95       	ret

00000e1a <MIDI_Device_ReceiveEventPacket>:
	return ENDPOINT_READYWAIT_NoError;
}

bool MIDI_Device_ReceiveEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    MIDI_EventPacket_t* const Event)
{
 e1a:	fc 01       	movw	r30, r24
 e1c:	cb 01       	movw	r24, r22
	if (USB_DeviceState != DEVICE_STATE_Configured)
 e1e:	20 91 11 01 	lds	r18, 0x0111
 e22:	24 30       	cpi	r18, 0x04	; 4
 e24:	c1 f4       	brne	.+48     	; 0xe56 <MIDI_Device_ReceiveEventPacket+0x3c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e26:	26 81       	ldd	r18, Z+6	; 0x06
 e28:	2f 70       	andi	r18, 0x0F	; 15
 e2a:	20 93 e9 00 	sts	0x00E9, r18
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e2e:	20 91 e8 00 	lds	r18, 0x00E8
	  return false;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
 e32:	25 ff       	sbrs	r18, 5
 e34:	10 c0       	rjmp	.+32     	; 0xe56 <MIDI_Device_ReceiveEventPacket+0x3c>
	  return false;

	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
 e36:	64 e0       	ldi	r22, 0x04	; 4
 e38:	70 e0       	ldi	r23, 0x00	; 0
 e3a:	40 e0       	ldi	r20, 0x00	; 0
 e3c:	50 e0       	ldi	r21, 0x00	; 0
 e3e:	00 db       	rcall	.-2560   	; 0x440 <Endpoint_Read_Stream_LE>
 e40:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 e44:	85 fd       	sbrc	r24, 5
 e46:	09 c0       	rjmp	.+18     	; 0xe5a <MIDI_Device_ReceiveEventPacket+0x40>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e48:	80 91 e8 00 	lds	r24, 0x00E8
 e4c:	8b 77       	andi	r24, 0x7B	; 123
 e4e:	80 93 e8 00 	sts	0x00E8, r24
	  Endpoint_ClearOUT();

	return true;
 e52:	81 e0       	ldi	r24, 0x01	; 1
 e54:	08 95       	ret
	  return false;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
	  return false;
 e56:	80 e0       	ldi	r24, 0x00	; 0
 e58:	08 95       	ret
	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearOUT();

	return true;
 e5a:	81 e0       	ldi	r24, 0x01	; 1
}
 e5c:	08 95       	ret

00000e5e <_exit>:
 e5e:	f8 94       	cli

00000e60 <__stop_program>:
 e60:	ff cf       	rjmp	.-2      	; 0xe60 <__stop_program>
