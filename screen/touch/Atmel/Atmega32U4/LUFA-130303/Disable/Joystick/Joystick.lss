
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001148  000011dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800110  00800110  000011ec  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000490  00000000  00000000  00001df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000cf8  00000000  00000000  00002283  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000084cc  00000000  00000000  00002f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001fcc  00000000  00000000  0000b447  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006e6b  00000000  00000000  0000d413  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006e0  00000000  00000000  00014280  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003814  00000000  00000000  00014960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000041e5  00000000  00000000  00018174  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000105b  00000000  00000000  0001c359  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006e8  00000000  00000000  0001d3b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       0:	a5 c0       	rjmp	.+330    	; 0x14c <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	c0 c0       	rjmp	.+384    	; 0x186 <__bad_interrupt>
       6:	00 00       	nop
       8:	be c0       	rjmp	.+380    	; 0x186 <__bad_interrupt>
       a:	00 00       	nop
       c:	bc c0       	rjmp	.+376    	; 0x186 <__bad_interrupt>
       e:	00 00       	nop
      10:	ba c0       	rjmp	.+372    	; 0x186 <__bad_interrupt>
      12:	00 00       	nop
      14:	b8 c0       	rjmp	.+368    	; 0x186 <__bad_interrupt>
      16:	00 00       	nop
      18:	b6 c0       	rjmp	.+364    	; 0x186 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b4 c0       	rjmp	.+360    	; 0x186 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b2 c0       	rjmp	.+356    	; 0x186 <__bad_interrupt>
      22:	00 00       	nop
      24:	b0 c0       	rjmp	.+352    	; 0x186 <__bad_interrupt>
      26:	00 00       	nop
      28:	06 c4       	rjmp	.+2060   	; 0x836 <__vector_10>
      2a:	00 00       	nop
      2c:	ac c0       	rjmp	.+344    	; 0x186 <__bad_interrupt>
      2e:	00 00       	nop
      30:	aa c0       	rjmp	.+340    	; 0x186 <__bad_interrupt>
      32:	00 00       	nop
      34:	a8 c0       	rjmp	.+336    	; 0x186 <__bad_interrupt>
      36:	00 00       	nop
      38:	a6 c0       	rjmp	.+332    	; 0x186 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a4 c0       	rjmp	.+328    	; 0x186 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a2 c0       	rjmp	.+324    	; 0x186 <__bad_interrupt>
      42:	00 00       	nop
      44:	a0 c0       	rjmp	.+320    	; 0x186 <__bad_interrupt>
      46:	00 00       	nop
      48:	9e c0       	rjmp	.+316    	; 0x186 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9c c0       	rjmp	.+312    	; 0x186 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9a c0       	rjmp	.+308    	; 0x186 <__bad_interrupt>
      52:	00 00       	nop
      54:	98 c0       	rjmp	.+304    	; 0x186 <__bad_interrupt>
      56:	00 00       	nop
      58:	96 c0       	rjmp	.+300    	; 0x186 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	94 c0       	rjmp	.+296    	; 0x186 <__bad_interrupt>
      5e:	00 00       	nop
      60:	92 c0       	rjmp	.+292    	; 0x186 <__bad_interrupt>
      62:	00 00       	nop
      64:	90 c0       	rjmp	.+288    	; 0x186 <__bad_interrupt>
      66:	00 00       	nop
      68:	8e c0       	rjmp	.+284    	; 0x186 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8c c0       	rjmp	.+280    	; 0x186 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8a c0       	rjmp	.+276    	; 0x186 <__bad_interrupt>
      72:	00 00       	nop
      74:	88 c0       	rjmp	.+272    	; 0x186 <__bad_interrupt>
      76:	00 00       	nop
      78:	86 c0       	rjmp	.+268    	; 0x186 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	84 c0       	rjmp	.+264    	; 0x186 <__bad_interrupt>
      7e:	00 00       	nop
      80:	82 c0       	rjmp	.+260    	; 0x186 <__bad_interrupt>
      82:	00 00       	nop
      84:	80 c0       	rjmp	.+256    	; 0x186 <__bad_interrupt>
      86:	00 00       	nop
      88:	7e c0       	rjmp	.+252    	; 0x186 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7c c0       	rjmp	.+248    	; 0x186 <__bad_interrupt>
      8e:	00 00       	nop
      90:	7a c0       	rjmp	.+244    	; 0x186 <__bad_interrupt>
      92:	00 00       	nop
      94:	78 c0       	rjmp	.+240    	; 0x186 <__bad_interrupt>
      96:	00 00       	nop

00000098 <JoystickReport>:
      98:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 09 32     ...........0.1.2
      a8:	16 9c ff 26 64 00 36 ff ff 46 01 00 95 03 75 08     ...&d.6..F....u.
      b8:	81 02 c0 05 09 19 01 29 02 15 00 25 01 75 01 95     .......)...%.u..
      c8:	02 81 02 75 06 95 01 81 01 c0                       ...u......

000000d2 <DeviceDescriptor>:
      d2:	12 01 10 01 00 00 00 08 eb 03 43 20 01 00 01 02     ..........C ....
      e2:	00 01                                               ..

000000e4 <ConfigurationDescriptor>:
      e4:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
      f4:	00 00 09 21 11 01 00 01 22 3a 00 07 05 81 03 08     ...!....":......
     104:	00 05                                               ..

00000106 <LanguageString>:
     106:	04 03 09 04                                         ....

0000010a <ManufacturerString>:
     10a:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     11a:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000124 <ProductString>:
     124:	26 03 4c 00 55 00 46 00 41 00 20 00 4a 00 6f 00     &.L.U.F.A. .J.o.
     134:	79 00 73 00 74 00 69 00 63 00 6b 00 20 00 44 00     y.s.t.i.c.k. .D.
     144:	65 00 6d 00 6f 00 00 00                             e.m.o...

0000014c <__ctors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	d0 e2       	ldi	r29, 0x20	; 32
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
     158:	11 e0       	ldi	r17, 0x01	; 1
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	e8 e4       	ldi	r30, 0x48	; 72
     160:	f1 e1       	ldi	r31, 0x11	; 17
     162:	00 e0       	ldi	r16, 0x00	; 0
     164:	0b bf       	out	0x3b, r16	; 59
     166:	02 c0       	rjmp	.+4      	; 0x16c <__do_copy_data+0x14>
     168:	07 90       	elpm	r0, Z+
     16a:	0d 92       	st	X+, r0
     16c:	a0 31       	cpi	r26, 0x10	; 16
     16e:	b1 07       	cpc	r27, r17
     170:	d9 f7       	brne	.-10     	; 0x168 <__do_copy_data+0x10>

00000172 <__do_clear_bss>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e1       	ldi	r26, 0x10	; 16
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	01 c0       	rjmp	.+2      	; 0x17c <.do_clear_bss_start>

0000017a <.do_clear_bss_loop>:
     17a:	1d 92       	st	X+, r1

0000017c <.do_clear_bss_start>:
     17c:	a1 32       	cpi	r26, 0x21	; 33
     17e:	b1 07       	cpc	r27, r17
     180:	e1 f7       	brne	.-8      	; 0x17a <.do_clear_bss_loop>
     182:	30 d0       	rcall	.+96     	; 0x1e4 <main>
     184:	df c7       	rjmp	.+4030   	; 0x1144 <_exit>

00000186 <__bad_interrupt>:
     186:	3c cf       	rjmp	.-392    	; 0x0 <__vectors>

00000188 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     188:	9b b1       	in	r25, 0x0b	; 11
     18a:	9f 70       	andi	r25, 0x0F	; 15
     18c:	98 2b       	or	r25, r24
     18e:	9b b9       	out	0x0b, r25	; 11
			}
     190:	08 95       	ret

00000192 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     192:	84 b7       	in	r24, 0x34	; 52
     194:	87 7f       	andi	r24, 0xF7	; 247
     196:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     198:	88 e1       	ldi	r24, 0x18	; 24
     19a:	0f b6       	in	r0, 0x3f	; 63
     19c:	f8 94       	cli
     19e:	80 93 60 00 	sts	0x0060, r24
     1a2:	10 92 60 00 	sts	0x0060, r1
     1a6:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	80 e8       	ldi	r24, 0x80	; 128
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	f8 94       	cli
     1b0:	80 93 61 00 	sts	0x0061, r24
     1b4:	90 93 61 00 	sts	0x0061, r25
     1b8:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     1ba:	84 b1       	in	r24, 0x04	; 4
     1bc:	8f 71       	andi	r24, 0x1F	; 31
     1be:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     1c0:	8d b1       	in	r24, 0x0d	; 13
     1c2:	8f 7c       	andi	r24, 0xCF	; 207
     1c4:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     1c6:	85 b1       	in	r24, 0x05	; 5
     1c8:	80 6e       	ori	r24, 0xE0	; 224
     1ca:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     1cc:	8e b1       	in	r24, 0x0e	; 14
     1ce:	80 63       	ori	r24, 0x30	; 48
     1d0:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1d2:	8a b1       	in	r24, 0x0a	; 10
     1d4:	80 6f       	ori	r24, 0xF0	; 240
     1d6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1d8:	8b b1       	in	r24, 0x0b	; 11
     1da:	8f 70       	andi	r24, 0x0F	; 15
     1dc:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     1de:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     1e0:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
}
     1e2:	0e c3       	rjmp	.+1564   	; 0x800 <USB_Init>

000001e4 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     1e4:	d6 df       	rcall	.-84     	; 0x192 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1e6:	80 e1       	ldi	r24, 0x10	; 16
     1e8:	cf df       	rcall	.-98     	; 0x188 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     1ea:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Device_USBTask(&Joystick_HID_Interface);
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	c0 d6       	rcall	.+3456   	; 0xf72 <HID_Device_USBTask>
		USB_USBTask();
     1f2:	4d d5       	rcall	.+2714   	; 0xc8e <USB_USBTask>
     1f4:	fb cf       	rjmp	.-10     	; 0x1ec <main+0x8>

000001f6 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1f6:	80 ea       	ldi	r24, 0xA0	; 160
}
     1f8:	c7 cf       	rjmp	.-114    	; 0x188 <LEDs_SetAllLEDs>

000001fa <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1fa:	80 e1       	ldi	r24, 0x10	; 16
}
     1fc:	c5 cf       	rjmp	.-118    	; 0x188 <LEDs_SetAllLEDs>

000001fe <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	9e d6       	rcall	.+3388   	; 0xf40 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     204:	90 91 e2 00 	lds	r25, 0x00E2
     208:	94 60       	ori	r25, 0x04	; 4
     20a:	90 93 e2 00 	sts	0x00E2, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     20e:	80 ff       	sbrs	r24, 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <EVENT_USB_Device_ConfigurationChanged+0x18>
     212:	80 e6       	ldi	r24, 0x60	; 96
     214:	01 c0       	rjmp	.+2      	; 0x218 <EVENT_USB_Device_ConfigurationChanged+0x1a>
     216:	80 e9       	ldi	r24, 0x90	; 144
}
     218:	b7 cf       	rjmp	.-146    	; 0x188 <LEDs_SetAllLEDs>

0000021a <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	91 e0       	ldi	r25, 0x01	; 1
}
     21e:	53 c5       	rjmp	.+2726   	; 0xcc6 <HID_Device_ProcessControlRequest>

00000220 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     220:	80 91 0e 01 	lds	r24, 0x010E
     224:	90 91 0f 01 	lds	r25, 0x010F
     228:	00 97       	sbiw	r24, 0x00	; 0
     22a:	29 f0       	breq	.+10     	; 0x236 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	90 93 0f 01 	sts	0x010F, r25
     232:	80 93 0e 01 	sts	0x010E, r24
     236:	08 95       	ret

00000238 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	d8 01       	movw	r26, r16
	USB_JoystickReport_Data_t* JoystickReport = (USB_JoystickReport_Data_t*)ReportData;
     23e:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     240:	23 b1       	in	r18, 0x03	; 3
     242:	8c b1       	in	r24, 0x0c	; 12
     244:	80 95       	com	r24
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	80 73       	andi	r24, 0x30	; 48
     24a:	90 70       	andi	r25, 0x00	; 0
     24c:	95 95       	asr	r25
     24e:	87 95       	ror	r24
     250:	20 95       	com	r18
     252:	20 7e       	andi	r18, 0xE0	; 224
     254:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     256:	8c b1       	in	r24, 0x0c	; 12
     258:	80 95       	com	r24
     25a:	84 70       	andi	r24, 0x04	; 4

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
     25c:	27 ff       	sbrs	r18, 7
     25e:	02 c0       	rjmp	.+4      	; 0x264 <CALLBACK_HID_Device_CreateHIDReport+0x2c>
	  JoystickReport->Y = -100;
     260:	9c e9       	ldi	r25, 0x9C	; 156
     262:	03 c0       	rjmp	.+6      	; 0x26a <CALLBACK_HID_Device_CreateHIDReport+0x32>
	else if (JoyStatus_LCL & JOY_DOWN)
     264:	24 ff       	sbrs	r18, 4
     266:	02 c0       	rjmp	.+4      	; 0x26c <CALLBACK_HID_Device_CreateHIDReport+0x34>
	  JoystickReport->Y =  100;
     268:	94 e6       	ldi	r25, 0x64	; 100
     26a:	91 83       	std	Z+1, r25	; 0x01

	if (JoyStatus_LCL & JOY_LEFT)
     26c:	26 ff       	sbrs	r18, 6
     26e:	02 c0       	rjmp	.+4      	; 0x274 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
	  JoystickReport->X = -100;
     270:	9c e9       	ldi	r25, 0x9C	; 156
     272:	03 c0       	rjmp	.+6      	; 0x27a <CALLBACK_HID_Device_CreateHIDReport+0x42>
	else if (JoyStatus_LCL & JOY_RIGHT)
     274:	23 ff       	sbrs	r18, 3
     276:	02 c0       	rjmp	.+4      	; 0x27c <CALLBACK_HID_Device_CreateHIDReport+0x44>
	  JoystickReport->X =  100;
     278:	94 e6       	ldi	r25, 0x64	; 100
     27a:	90 83       	st	Z, r25

	if (JoyStatus_LCL & JOY_PRESS)
     27c:	25 ff       	sbrs	r18, 5
     27e:	03 c0       	rjmp	.+6      	; 0x286 <CALLBACK_HID_Device_CreateHIDReport+0x4e>
	  JoystickReport->Button |= (1 << 1);
     280:	93 81       	ldd	r25, Z+3	; 0x03
     282:	92 60       	ori	r25, 0x02	; 2
     284:	93 83       	std	Z+3, r25	; 0x03

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     286:	88 23       	and	r24, r24
     288:	19 f0       	breq	.+6      	; 0x290 <CALLBACK_HID_Device_CreateHIDReport+0x58>
	  JoystickReport->Button |= (1 << 0);
     28a:	83 81       	ldd	r24, Z+3	; 0x03
     28c:	81 60       	ori	r24, 0x01	; 1
     28e:	83 83       	std	Z+3, r24	; 0x03

	*ReportSize = sizeof(USB_JoystickReport_Data_t);
     290:	84 e0       	ldi	r24, 0x04	; 4
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	11 96       	adiw	r26, 0x01	; 1
     296:	9c 93       	st	X, r25
     298:	8e 93       	st	-X, r24
	return false;
}
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	08 95       	ret

000002a2 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Unused (but mandatory for the HID class driver) in this demo, since there are no Host->Device reports
}
     2a2:	08 95       	ret

000002a4 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2a4:	93 30       	cpi	r25, 0x03	; 3
     2a6:	89 f0       	breq	.+34     	; 0x2ca <CALLBACK_USB_GetDescriptor+0x26>
     2a8:	94 30       	cpi	r25, 0x04	; 4
     2aa:	28 f4       	brcc	.+10     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x12>
     2ac:	91 30       	cpi	r25, 0x01	; 1
     2ae:	49 f1       	breq	.+82     	; 0x302 <CALLBACK_USB_GetDescriptor+0x5e>
     2b0:	92 30       	cpi	r25, 0x02	; 2
     2b2:	61 f5       	brne	.+88     	; 0x30c <CALLBACK_USB_GetDescriptor+0x68>
     2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <CALLBACK_USB_GetDescriptor+0x1c>
     2b6:	91 32       	cpi	r25, 0x21	; 33
     2b8:	d1 f0       	breq	.+52     	; 0x2ee <CALLBACK_USB_GetDescriptor+0x4a>
     2ba:	92 32       	cpi	r25, 0x22	; 34
     2bc:	39 f5       	brne	.+78     	; 0x30c <CALLBACK_USB_GetDescriptor+0x68>
     2be:	1c c0       	rjmp	.+56     	; 0x2f8 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     2c0:	22 e2       	ldi	r18, 0x22	; 34
     2c2:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     2c4:	e4 ee       	ldi	r30, 0xE4	; 228
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     2c8:	25 c0       	rjmp	.+74     	; 0x314 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	41 f0       	breq	.+16     	; 0x2de <CALLBACK_USB_GetDescriptor+0x3a>
     2ce:	81 30       	cpi	r24, 0x01	; 1
     2d0:	18 f0       	brcs	.+6      	; 0x2d8 <CALLBACK_USB_GetDescriptor+0x34>
     2d2:	82 30       	cpi	r24, 0x02	; 2
     2d4:	d9 f4       	brne	.+54     	; 0x30c <CALLBACK_USB_GetDescriptor+0x68>
     2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     2d8:	e6 e0       	ldi	r30, 0x06	; 6
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     2de:	ea e0       	ldi	r30, 0x0A	; 10
     2e0:	f1 e0       	ldi	r31, 0x01	; 1
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     2e4:	e4 e2       	ldi	r30, 0x24	; 36
     2e6:	f1 e0       	ldi	r31, 0x01	; 1
     2e8:	24 91       	lpm	r18, Z+
     2ea:	30 e0       	ldi	r19, 0x00	; 0
					break;
     2ec:	13 c0       	rjmp	.+38     	; 0x314 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     2ee:	29 e0       	ldi	r18, 0x09	; 9
     2f0:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
     2f2:	e6 ef       	ldi	r30, 0xF6	; 246
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     2f6:	0e c0       	rjmp	.+28     	; 0x314 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
     2f8:	2a e3       	ldi	r18, 0x3A	; 58
     2fa:	30 e0       	ldi	r19, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &JoystickReport;
     2fc:	e8 e9       	ldi	r30, 0x98	; 152
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(JoystickReport);
			break;
     300:	09 c0       	rjmp	.+18     	; 0x314 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     302:	22 e1       	ldi	r18, 0x12	; 18
     304:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     306:	e2 ed       	ldi	r30, 0xD2	; 210
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	04 c0       	rjmp	.+8      	; 0x314 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     310:	e0 e0       	ldi	r30, 0x00	; 0
     312:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
     314:	da 01       	movw	r26, r20
     316:	11 96       	adiw	r26, 0x01	; 1
     318:	fc 93       	st	X, r31
     31a:	ee 93       	st	-X, r30
	return Size;
}
     31c:	c9 01       	movw	r24, r18
     31e:	08 95       	ret

00000320 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     320:	8f 92       	push	r8
     322:	9f 92       	push	r9
     324:	bf 92       	push	r11
     326:	cf 92       	push	r12
     328:	df 92       	push	r13
     32a:	ef 92       	push	r14
     32c:	ff 92       	push	r15
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	df 93       	push	r29
     334:	cf 93       	push	r28
     336:	0f 92       	push	r0
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	e8 2e       	mov	r14, r24
     33e:	4b 01       	movw	r8, r22
     340:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     342:	99 83       	std	Y+1, r25	; 0x01
     344:	e4 d1       	rcall	.+968    	; 0x70e <Endpoint_WaitUntilReady>
     346:	b8 2e       	mov	r11, r24
     348:	99 81       	ldd	r25, Y+1	; 0x01
     34a:	88 23       	and	r24, r24
     34c:	c9 f5       	brne	.+114    	; 0x3c0 <Endpoint_Write_Stream_LE+0xa0>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     34e:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     350:	01 15       	cp	r16, r1
     352:	11 05       	cpc	r17, r1
     354:	39 f0       	breq	.+14     	; 0x364 <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     356:	f8 01       	movw	r30, r16
     358:	20 81       	ld	r18, Z
     35a:	31 81       	ldd	r19, Z+1	; 0x01
     35c:	82 1a       	sub	r8, r18
     35e:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     360:	e2 0e       	add	r14, r18
     362:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     364:	cc 24       	eor	r12, r12
     366:	dd 24       	eor	r13, r13
     368:	26 c0       	rjmp	.+76     	; 0x3b6 <Endpoint_Write_Stream_LE+0x96>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     36a:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     36e:	85 fd       	sbrc	r24, 5
     370:	17 c0       	rjmp	.+46     	; 0x3a0 <Endpoint_Write_Stream_LE+0x80>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     372:	80 91 e8 00 	lds	r24, 0x00E8
     376:	8e 77       	andi	r24, 0x7E	; 126
     378:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     37c:	88 d4       	rcall	.+2320   	; 0xc8e <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
     37e:	01 15       	cp	r16, r1
     380:	11 05       	cpc	r17, r1
     382:	51 f0       	breq	.+20     	; 0x398 <Endpoint_Write_Stream_LE+0x78>
			{
				*BytesProcessed += BytesInTransfer;
     384:	f8 01       	movw	r30, r16
     386:	80 81       	ld	r24, Z
     388:	91 81       	ldd	r25, Z+1	; 0x01
     38a:	8c 0d       	add	r24, r12
     38c:	9d 1d       	adc	r25, r13
     38e:	91 83       	std	Z+1, r25	; 0x01
     390:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     392:	25 e0       	ldi	r18, 0x05	; 5
     394:	b2 2e       	mov	r11, r18
     396:	14 c0       	rjmp	.+40     	; 0x3c0 <Endpoint_Write_Stream_LE+0xa0>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     398:	ba d1       	rcall	.+884    	; 0x70e <Endpoint_WaitUntilReady>
     39a:	88 23       	and	r24, r24
     39c:	61 f0       	breq	.+24     	; 0x3b6 <Endpoint_Write_Stream_LE+0x96>
     39e:	0f c0       	rjmp	.+30     	; 0x3be <Endpoint_Write_Stream_LE+0x9e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     3a0:	f7 01       	movw	r30, r14
     3a2:	81 91       	ld	r24, Z+
     3a4:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3a6:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     3aa:	08 94       	sec
     3ac:	81 08       	sbc	r8, r1
     3ae:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     3b0:	08 94       	sec
     3b2:	c1 1c       	adc	r12, r1
     3b4:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     3b6:	81 14       	cp	r8, r1
     3b8:	91 04       	cpc	r9, r1
     3ba:	b9 f6       	brne	.-82     	; 0x36a <Endpoint_Write_Stream_LE+0x4a>
     3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <Endpoint_Write_Stream_LE+0xa0>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     3be:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     3c0:	8b 2d       	mov	r24, r11
     3c2:	0f 90       	pop	r0
     3c4:	cf 91       	pop	r28
     3c6:	df 91       	pop	r29
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	bf 90       	pop	r11
     3d6:	9f 90       	pop	r9
     3d8:	8f 90       	pop	r8
     3da:	08 95       	ret

000003dc <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     3dc:	28 2f       	mov	r18, r24
     3de:	39 2f       	mov	r19, r25
     3e0:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     3e2:	80 91 1f 01 	lds	r24, 0x011F
     3e6:	90 91 20 01 	lds	r25, 0x0120
     3ea:	86 17       	cp	r24, r22
     3ec:	97 07       	cpc	r25, r23
     3ee:	18 f4       	brcc	.+6      	; 0x3f6 <Endpoint_Write_Control_Stream_LE+0x1a>
     3f0:	bc 01       	movw	r22, r24
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	37 c0       	rjmp	.+110    	; 0x464 <Endpoint_Write_Control_Stream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     3f6:	61 15       	cp	r22, r1
     3f8:	71 05       	cpc	r23, r1
     3fa:	d9 f7       	brne	.-10     	; 0x3f2 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3fc:	80 91 e8 00 	lds	r24, 0x00E8
     400:	8e 77       	andi	r24, 0x7E	; 126
     402:	80 93 e8 00 	sts	0x00E8, r24
     406:	f5 cf       	rjmp	.-22     	; 0x3f2 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     408:	80 91 18 01 	lds	r24, 0x0118

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     40c:	88 23       	and	r24, r24
     40e:	09 f4       	brne	.+2      	; 0x412 <Endpoint_Write_Control_Stream_LE+0x36>
     410:	3f c0       	rjmp	.+126    	; 0x490 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     412:	85 30       	cpi	r24, 0x05	; 5
     414:	c9 f1       	breq	.+114    	; 0x488 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     416:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     41a:	83 fd       	sbrc	r24, 3
     41c:	37 c0       	rjmp	.+110    	; 0x48c <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     41e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     422:	82 fd       	sbrc	r24, 2
     424:	2b c0       	rjmp	.+86     	; 0x47c <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     426:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     42a:	80 ff       	sbrs	r24, 0
     42c:	1b c0       	rjmp	.+54     	; 0x464 <Endpoint_Write_Control_Stream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     42e:	80 91 f2 00 	lds	r24, 0x00F2
     432:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     436:	06 c0       	rjmp	.+12     	; 0x444 <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     438:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     43a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     43e:	61 50       	subi	r22, 0x01	; 1
     440:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     442:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     444:	61 15       	cp	r22, r1
     446:	71 05       	cpc	r23, r1
     448:	19 f0       	breq	.+6      	; 0x450 <Endpoint_Write_Control_Stream_LE+0x74>
     44a:	88 30       	cpi	r24, 0x08	; 8
     44c:	91 05       	cpc	r25, r1
     44e:	a0 f3       	brcs	.-24     	; 0x438 <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     450:	21 e0       	ldi	r18, 0x01	; 1
     452:	88 30       	cpi	r24, 0x08	; 8
     454:	91 05       	cpc	r25, r1
     456:	09 f0       	breq	.+2      	; 0x45a <Endpoint_Write_Control_Stream_LE+0x7e>
     458:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     45a:	80 91 e8 00 	lds	r24, 0x00E8
     45e:	8e 77       	andi	r24, 0x7E	; 126
     460:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     464:	61 15       	cp	r22, r1
     466:	71 05       	cpc	r23, r1
     468:	79 f6       	brne	.-98     	; 0x408 <Endpoint_Write_Control_Stream_LE+0x2c>
     46a:	22 23       	and	r18, r18
     46c:	69 f6       	brne	.-102    	; 0x408 <Endpoint_Write_Control_Stream_LE+0x2c>
     46e:	06 c0       	rjmp	.+12     	; 0x47c <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     470:	80 91 18 01 	lds	r24, 0x0118

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     474:	88 23       	and	r24, r24
     476:	61 f0       	breq	.+24     	; 0x490 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     478:	85 30       	cpi	r24, 0x05	; 5
     47a:	61 f0       	breq	.+24     	; 0x494 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     47c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     480:	82 ff       	sbrs	r24, 2
     482:	f6 cf       	rjmp	.-20     	; 0x470 <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     488:	83 e0       	ldi	r24, 0x03	; 3
     48a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     494:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     496:	08 95       	ret

00000498 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     498:	61 15       	cp	r22, r1
     49a:	71 05       	cpc	r23, r1
     49c:	31 f5       	brne	.+76     	; 0x4ea <Endpoint_Read_Control_Stream_LE+0x52>
     49e:	20 c0       	rjmp	.+64     	; 0x4e0 <Endpoint_Read_Control_Stream_LE+0x48>
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4a0:	20 91 18 01 	lds	r18, 0x0118

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4a4:	22 23       	and	r18, r18
     4a6:	a9 f1       	breq	.+106    	; 0x512 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4a8:	25 30       	cpi	r18, 0x05	; 5
     4aa:	79 f1       	breq	.+94     	; 0x50a <Endpoint_Read_Control_Stream_LE+0x72>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4ac:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4b0:	23 fd       	sbrc	r18, 3
     4b2:	2d c0       	rjmp	.+90     	; 0x50e <Endpoint_Read_Control_Stream_LE+0x76>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4b4:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     4b8:	22 ff       	sbrs	r18, 2
     4ba:	f2 cf       	rjmp	.-28     	; 0x4a0 <Endpoint_Read_Control_Stream_LE+0x8>
     4bc:	e8 2f       	mov	r30, r24
     4be:	f9 2f       	mov	r31, r25
     4c0:	07 c0       	rjmp	.+14     	; 0x4d0 <Endpoint_Read_Control_Stream_LE+0x38>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     4c2:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4c6:	81 93       	st	Z+, r24
     4c8:	cf 01       	movw	r24, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     4ca:	61 50       	subi	r22, 0x01	; 1
     4cc:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     4ce:	41 f0       	breq	.+16     	; 0x4e0 <Endpoint_Read_Control_Stream_LE+0x48>
     4d0:	cf 01       	movw	r24, r30
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     4d2:	20 91 f2 00 	lds	r18, 0x00F2
     4d6:	30 91 f3 00 	lds	r19, 0x00F3
     4da:	21 15       	cp	r18, r1
     4dc:	31 05       	cpc	r19, r1
     4de:	89 f7       	brne	.-30     	; 0x4c2 <Endpoint_Read_Control_Stream_LE+0x2a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4e0:	20 91 e8 00 	lds	r18, 0x00E8
     4e4:	2b 77       	andi	r18, 0x7B	; 123
     4e6:	20 93 e8 00 	sts	0x00E8, r18
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     4ea:	61 15       	cp	r22, r1
     4ec:	71 05       	cpc	r23, r1
     4ee:	c1 f6       	brne	.-80     	; 0x4a0 <Endpoint_Read_Control_Stream_LE+0x8>
     4f0:	06 c0       	rjmp	.+12     	; 0x4fe <Endpoint_Read_Control_Stream_LE+0x66>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4f2:	80 91 18 01 	lds	r24, 0x0118

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4f6:	88 23       	and	r24, r24
     4f8:	61 f0       	breq	.+24     	; 0x512 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4fa:	85 30       	cpi	r24, 0x05	; 5
     4fc:	61 f0       	breq	.+24     	; 0x516 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4fe:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     502:	80 ff       	sbrs	r24, 0
     504:	f6 cf       	rjmp	.-20     	; 0x4f2 <Endpoint_Read_Control_Stream_LE+0x5a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     50a:	83 e0       	ldi	r24, 0x03	; 3
     50c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     516:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     518:	08 95       	ret

0000051a <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     51a:	e8 2f       	mov	r30, r24
     51c:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     51e:	80 91 1f 01 	lds	r24, 0x011F
     522:	90 91 20 01 	lds	r25, 0x0120
     526:	86 17       	cp	r24, r22
     528:	97 07       	cpc	r25, r23
     52a:	18 f4       	brcc	.+6      	; 0x532 <Endpoint_Write_Control_PStream_LE+0x18>
     52c:	bc 01       	movw	r22, r24
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	38 c0       	rjmp	.+112    	; 0x5a2 <Endpoint_Write_Control_PStream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     532:	61 15       	cp	r22, r1
     534:	71 05       	cpc	r23, r1
     536:	d9 f7       	brne	.-10     	; 0x52e <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     538:	80 91 e8 00 	lds	r24, 0x00E8
     53c:	8e 77       	andi	r24, 0x7E	; 126
     53e:	80 93 e8 00 	sts	0x00E8, r24
     542:	f5 cf       	rjmp	.-22     	; 0x52e <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     544:	80 91 18 01 	lds	r24, 0x0118

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     548:	88 23       	and	r24, r24
     54a:	09 f4       	brne	.+2      	; 0x54e <Endpoint_Write_Control_PStream_LE+0x34>
     54c:	40 c0       	rjmp	.+128    	; 0x5ce <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     54e:	85 30       	cpi	r24, 0x05	; 5
     550:	d1 f1       	breq	.+116    	; 0x5c6 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     552:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     556:	83 fd       	sbrc	r24, 3
     558:	38 c0       	rjmp	.+112    	; 0x5ca <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     55a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     55e:	82 fd       	sbrc	r24, 2
     560:	2c c0       	rjmp	.+88     	; 0x5ba <Endpoint_Write_Control_PStream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     562:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     566:	80 ff       	sbrs	r24, 0
     568:	1c c0       	rjmp	.+56     	; 0x5a2 <Endpoint_Write_Control_PStream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     56a:	80 91 f2 00 	lds	r24, 0x00F2
     56e:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     572:	07 c0       	rjmp	.+14     	; 0x582 <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     574:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     576:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     57a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     57c:	61 50       	subi	r22, 0x01	; 1
     57e:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     580:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     582:	61 15       	cp	r22, r1
     584:	71 05       	cpc	r23, r1
     586:	19 f0       	breq	.+6      	; 0x58e <Endpoint_Write_Control_PStream_LE+0x74>
     588:	88 30       	cpi	r24, 0x08	; 8
     58a:	91 05       	cpc	r25, r1
     58c:	98 f3       	brcs	.-26     	; 0x574 <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     58e:	21 e0       	ldi	r18, 0x01	; 1
     590:	88 30       	cpi	r24, 0x08	; 8
     592:	91 05       	cpc	r25, r1
     594:	09 f0       	breq	.+2      	; 0x598 <Endpoint_Write_Control_PStream_LE+0x7e>
     596:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     598:	80 91 e8 00 	lds	r24, 0x00E8
     59c:	8e 77       	andi	r24, 0x7E	; 126
     59e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5a2:	61 15       	cp	r22, r1
     5a4:	71 05       	cpc	r23, r1
     5a6:	71 f6       	brne	.-100    	; 0x544 <Endpoint_Write_Control_PStream_LE+0x2a>
     5a8:	22 23       	and	r18, r18
     5aa:	61 f6       	brne	.-104    	; 0x544 <Endpoint_Write_Control_PStream_LE+0x2a>
     5ac:	06 c0       	rjmp	.+12     	; 0x5ba <Endpoint_Write_Control_PStream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5ae:	80 91 18 01 	lds	r24, 0x0118

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5b2:	88 23       	and	r24, r24
     5b4:	61 f0       	breq	.+24     	; 0x5ce <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5b6:	85 30       	cpi	r24, 0x05	; 5
     5b8:	61 f0       	breq	.+24     	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5ba:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     5be:	82 ff       	sbrs	r24, 2
     5c0:	f6 cf       	rjmp	.-20     	; 0x5ae <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5d2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5d4:	08 95       	ret

000005d6 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     5d6:	98 2f       	mov	r25, r24
     5d8:	2c c0       	rjmp	.+88     	; 0x632 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5da:	29 2f       	mov	r18, r25
     5dc:	2f 70       	andi	r18, 0x0F	; 15
     5de:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     5e2:	98 17       	cp	r25, r24
     5e4:	39 f0       	breq	.+14     	; 0x5f4 <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     5e6:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     5ea:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     5ee:	50 91 f0 00 	lds	r21, 0x00F0
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     5f4:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     5f6:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     5f8:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     5fa:	21 ff       	sbrs	r18, 1
     5fc:	19 c0       	rjmp	.+50     	; 0x630 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     5fe:	30 91 eb 00 	lds	r19, 0x00EB
     602:	3e 7f       	andi	r19, 0xFE	; 254
     604:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     608:	30 91 ed 00 	lds	r19, 0x00ED
     60c:	3d 7f       	andi	r19, 0xFD	; 253
     60e:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     612:	30 91 eb 00 	lds	r19, 0x00EB
     616:	31 60       	ori	r19, 0x01	; 1
     618:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     61c:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     620:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     624:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     628:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     62c:	27 ff       	sbrs	r18, 7
     62e:	08 c0       	rjmp	.+16     	; 0x640 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     630:	9f 5f       	subi	r25, 0xFF	; 255
     632:	97 30       	cpi	r25, 0x07	; 7
     634:	90 f2       	brcs	.-92     	; 0x5da <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     636:	8f 70       	andi	r24, 0x0F	; 15
     638:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     640:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     642:	08 95       	ret

00000644 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     644:	ef 92       	push	r14
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     652:	e8 2e       	mov	r14, r24
     654:	e7 01       	movw	r28, r14
     656:	7e 01       	movw	r14, r28
     658:	f9 2e       	mov	r15, r25
     65a:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     65c:	00 e0       	ldi	r16, 0x00	; 0
     65e:	2a c0       	rjmp	.+84     	; 0x6b4 <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     660:	98 81       	ld	r25, Y
     662:	99 23       	and	r25, r25
     664:	29 f1       	breq	.+74     	; 0x6b0 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     666:	6b 81       	ldd	r22, Y+3	; 0x03
     668:	e9 81       	ldd	r30, Y+1	; 0x01
     66a:	fa 81       	ldd	r31, Y+2	; 0x02
     66c:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     66e:	89 2f       	mov	r24, r25
     670:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     672:	87 30       	cpi	r24, 0x07	; 7
     674:	18 f5       	brcc	.+70     	; 0x6bc <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     676:	62 95       	swap	r22
     678:	66 0f       	add	r22, r22
     67a:	66 0f       	add	r22, r22
     67c:	60 7c       	andi	r22, 0xC0	; 192
     67e:	99 1f       	adc	r25, r25
     680:	99 27       	eor	r25, r25
     682:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     684:	69 2b       	or	r22, r25
     686:	22 30       	cpi	r18, 0x02	; 2
     688:	10 f0       	brcs	.+4      	; 0x68e <Endpoint_ConfigureEndpointTable+0x4a>
     68a:	96 e0       	ldi	r25, 0x06	; 6
     68c:	01 c0       	rjmp	.+2      	; 0x690 <Endpoint_ConfigureEndpointTable+0x4c>
     68e:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     690:	28 e0       	ldi	r18, 0x08	; 8
     692:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	03 c0       	rjmp	.+6      	; 0x69e <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     698:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     69a:	22 0f       	add	r18, r18
     69c:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     69e:	2e 17       	cp	r18, r30
     6a0:	3f 07       	cpc	r19, r31
     6a2:	d0 f3       	brcs	.-12     	; 0x698 <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     6a4:	42 95       	swap	r20
     6a6:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6a8:	49 2b       	or	r20, r25
     6aa:	95 df       	rcall	.-214    	; 0x5d6 <Endpoint_ConfigureEndpoint_Prv>
     6ac:	88 23       	and	r24, r24
     6ae:	31 f0       	breq	.+12     	; 0x6bc <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     6b0:	0f 5f       	subi	r16, 0xFF	; 255
     6b2:	25 96       	adiw	r28, 0x05	; 5
     6b4:	01 17       	cp	r16, r17
     6b6:	a0 f2       	brcs	.-88     	; 0x660 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	08 95       	ret

000006cc <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6cc:	80 91 19 01 	lds	r24, 0x0119
     6d0:	87 ff       	sbrs	r24, 7
     6d2:	13 c0       	rjmp	.+38     	; 0x6fa <Endpoint_ClearStatusStage+0x2e>
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6d6:	80 91 18 01 	lds	r24, 0x0118
     6da:	88 23       	and	r24, r24
     6dc:	b9 f0       	breq	.+46     	; 0x70c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6de:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     6e2:	82 ff       	sbrs	r24, 2
     6e4:	f8 cf       	rjmp	.-16     	; 0x6d6 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6e6:	80 91 e8 00 	lds	r24, 0x00E8
     6ea:	8b 77       	andi	r24, 0x7B	; 123
     6ec:	80 93 e8 00 	sts	0x00E8, r24
     6f0:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6f2:	80 91 18 01 	lds	r24, 0x0118
     6f6:	88 23       	and	r24, r24
     6f8:	49 f0       	breq	.+18     	; 0x70c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6fa:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     6fe:	80 ff       	sbrs	r24, 0
     700:	f8 cf       	rjmp	.-16     	; 0x6f2 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     702:	80 91 e8 00 	lds	r24, 0x00E8
     706:	8e 77       	andi	r24, 0x7E	; 126
     708:	80 93 e8 00 	sts	0x00E8, r24
     70c:	08 95       	ret

0000070e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     70e:	80 91 e4 00 	lds	r24, 0x00E4
     712:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     716:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     718:	20 91 ec 00 	lds	r18, 0x00EC
     71c:	20 ff       	sbrs	r18, 0
     71e:	26 c0       	rjmp	.+76     	; 0x76c <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     720:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     724:	20 fd       	sbrc	r18, 0
     726:	16 c0       	rjmp	.+44     	; 0x754 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     728:	20 91 18 01 	lds	r18, 0x0118

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     72c:	22 23       	and	r18, r18
     72e:	a1 f0       	breq	.+40     	; 0x758 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     730:	25 30       	cpi	r18, 0x05	; 5
     732:	a1 f0       	breq	.+40     	; 0x75c <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     734:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     738:	25 fd       	sbrc	r18, 5
     73a:	12 c0       	rjmp	.+36     	; 0x760 <Endpoint_WaitUntilReady+0x52>
     73c:	20 91 e4 00 	lds	r18, 0x00E4
     740:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     744:	28 17       	cp	r18, r24
     746:	39 07       	cpc	r19, r25
     748:	39 f3       	breq	.-50     	; 0x718 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     74a:	44 23       	and	r20, r20
     74c:	59 f0       	breq	.+22     	; 0x764 <Endpoint_WaitUntilReady+0x56>
     74e:	41 50       	subi	r20, 0x01	; 1
     750:	c9 01       	movw	r24, r18
     752:	e2 cf       	rjmp	.-60     	; 0x718 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     75c:	83 e0       	ldi	r24, 0x03	; 3
     75e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     764:	84 e0       	ldi	r24, 0x04	; 4
     766:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     768:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     76a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     76c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     770:	22 ff       	sbrs	r18, 2
     772:	da cf       	rjmp	.-76     	; 0x728 <Endpoint_WaitUntilReady+0x1a>
     774:	f9 cf       	rjmp	.-14     	; 0x768 <Endpoint_WaitUntilReady+0x5a>

00000776 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     77e:	4e d0       	rcall	.+156    	; 0x81c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     780:	55 d0       	rcall	.+170    	; 0x82c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     782:	c8 ed       	ldi	r28, 0xD8	; 216
     784:	d0 e0       	ldi	r29, 0x00	; 0
     786:	88 81       	ld	r24, Y
     788:	8f 77       	andi	r24, 0x7F	; 127
     78a:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     78c:	88 81       	ld	r24, Y
     78e:	80 68       	ori	r24, 0x80	; 128
     790:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     792:	88 81       	ld	r24, Y
     794:	8f 7d       	andi	r24, 0xDF	; 223
     796:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     798:	e7 ed       	ldi	r30, 0xD7	; 215
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	80 68       	ori	r24, 0x80	; 128
     7a0:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     7a2:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     7a4:	10 92 18 01 	sts	0x0118, r1
	USB_Device_ConfigurationNumber  = 0;
     7a8:	10 92 14 01 	sts	0x0114, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7ac:	10 92 16 01 	sts	0x0116, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7b0:	10 92 15 01 	sts	0x0115, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     7b4:	00 ee       	ldi	r16, 0xE0	; 224
     7b6:	10 e0       	ldi	r17, 0x00	; 0
     7b8:	f8 01       	movw	r30, r16
     7ba:	80 81       	ld	r24, Z
     7bc:	8b 7f       	andi	r24, 0xFB	; 251
     7be:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     7c0:	88 81       	ld	r24, Y
     7c2:	81 60       	ori	r24, 0x01	; 1
     7c4:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	42 e0       	ldi	r20, 0x02	; 2
     7cc:	04 df       	rcall	.-504    	; 0x5d6 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7ce:	e1 ee       	ldi	r30, 0xE1	; 225
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	8e 7f       	andi	r24, 0xFE	; 254
     7d6:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7d8:	e2 ee       	ldi	r30, 0xE2	; 226
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	81 60       	ori	r24, 0x01	; 1
     7e0:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     7e2:	80 81       	ld	r24, Z
     7e4:	88 60       	ori	r24, 0x08	; 8
     7e6:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     7e8:	f8 01       	movw	r30, r16
     7ea:	80 81       	ld	r24, Z
     7ec:	8e 7f       	andi	r24, 0xFE	; 254
     7ee:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     7f0:	88 81       	ld	r24, Y
     7f2:	80 61       	ori	r24, 0x10	; 16
     7f4:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	08 95       	ret

00000800 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     800:	e8 ed       	ldi	r30, 0xD8	; 216
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	8f 7e       	andi	r24, 0xEF	; 239
     808:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     80a:	e7 ed       	ldi	r30, 0xD7	; 215
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	81 60       	ori	r24, 0x01	; 1
     812:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	80 93 17 01 	sts	0x0117, r24

	USB_ResetInterface();
}
     81a:	ad cf       	rjmp	.-166    	; 0x776 <USB_ResetInterface>

0000081c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     81c:	e8 ed       	ldi	r30, 0xD8	; 216
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	8c 7f       	andi	r24, 0xFC	; 252
     824:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     826:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     82a:	08 95       	ret

0000082c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     82c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     830:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     834:	08 95       	ret

00000836 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     836:	1f 92       	push	r1
     838:	0f 92       	push	r0
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	0f 92       	push	r0
     83e:	0b b6       	in	r0, 0x3b	; 59
     840:	0f 92       	push	r0
     842:	11 24       	eor	r1, r1
     844:	2f 93       	push	r18
     846:	3f 93       	push	r19
     848:	4f 93       	push	r20
     84a:	5f 93       	push	r21
     84c:	6f 93       	push	r22
     84e:	7f 93       	push	r23
     850:	8f 93       	push	r24
     852:	9f 93       	push	r25
     854:	af 93       	push	r26
     856:	bf 93       	push	r27
     858:	ef 93       	push	r30
     85a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     85c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     860:	82 ff       	sbrs	r24, 2
     862:	0a c0       	rjmp	.+20     	; 0x878 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     864:	80 91 e2 00 	lds	r24, 0x00E2
     868:	82 ff       	sbrs	r24, 2
     86a:	06 c0       	rjmp	.+12     	; 0x878 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     86c:	80 91 e1 00 	lds	r24, 0x00E1
     870:	8b 7f       	andi	r24, 0xFB	; 251
     872:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     876:	d4 dc       	rcall	.-1624   	; 0x220 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     878:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     87c:	80 ff       	sbrs	r24, 0
     87e:	1d c0       	rjmp	.+58     	; 0x8ba <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     880:	80 91 d8 00 	lds	r24, 0x00D8
     884:	80 ff       	sbrs	r24, 0
     886:	19 c0       	rjmp	.+50     	; 0x8ba <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     888:	80 91 da 00 	lds	r24, 0x00DA
     88c:	8e 7f       	andi	r24, 0xFE	; 254
     88e:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     892:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     896:	80 ff       	sbrs	r24, 0
     898:	0c c0       	rjmp	.+24     	; 0x8b2 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     89a:	8c e0       	ldi	r24, 0x0C	; 12
     89c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     89e:	8e e0       	ldi	r24, 0x0E	; 14
     8a0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     8a2:	09 b4       	in	r0, 0x29	; 41
     8a4:	00 fe       	sbrs	r0, 0
     8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 18 01 	sts	0x0118, r24
			EVENT_USB_Device_Connect();
     8ae:	a3 dc       	rcall	.-1722   	; 0x1f6 <EVENT_USB_Device_Connect>
     8b0:	04 c0       	rjmp	.+8      	; 0x8ba <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8b2:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8b4:	10 92 18 01 	sts	0x0118, r1
			EVENT_USB_Device_Disconnect();
     8b8:	a0 dc       	rcall	.-1728   	; 0x1fa <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8ba:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8be:	80 ff       	sbrs	r24, 0
     8c0:	18 c0       	rjmp	.+48     	; 0x8f2 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8c2:	80 91 e2 00 	lds	r24, 0x00E2
     8c6:	80 ff       	sbrs	r24, 0
     8c8:	14 c0       	rjmp	.+40     	; 0x8f2 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8ca:	80 91 e2 00 	lds	r24, 0x00E2
     8ce:	8e 7f       	andi	r24, 0xFE	; 254
     8d0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8d4:	80 91 e2 00 	lds	r24, 0x00E2
     8d8:	80 61       	ori	r24, 0x10	; 16
     8da:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8de:	80 91 d8 00 	lds	r24, 0x00D8
     8e2:	80 62       	ori	r24, 0x20	; 32
     8e4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8e8:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     8ea:	85 e0       	ldi	r24, 0x05	; 5
     8ec:	80 93 18 01 	sts	0x0118, r24
		EVENT_USB_Device_Suspend();
     8f0:	cd d1       	rcall	.+922    	; 0xc8c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     8f2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     8f6:	84 ff       	sbrs	r24, 4
     8f8:	2d c0       	rjmp	.+90     	; 0x954 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     8fa:	80 91 e2 00 	lds	r24, 0x00E2
     8fe:	84 ff       	sbrs	r24, 4
     900:	29 c0       	rjmp	.+82     	; 0x954 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     902:	8c e0       	ldi	r24, 0x0C	; 12
     904:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     906:	8e e0       	ldi	r24, 0x0E	; 14
     908:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     90a:	09 b4       	in	r0, 0x29	; 41
     90c:	00 fe       	sbrs	r0, 0
     90e:	fd cf       	rjmp	.-6      	; 0x90a <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     910:	80 91 d8 00 	lds	r24, 0x00D8
     914:	8f 7d       	andi	r24, 0xDF	; 223
     916:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     91a:	80 91 e1 00 	lds	r24, 0x00E1
     91e:	8f 7e       	andi	r24, 0xEF	; 239
     920:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     924:	80 91 e2 00 	lds	r24, 0x00E2
     928:	8f 7e       	andi	r24, 0xEF	; 239
     92a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     92e:	80 91 e2 00 	lds	r24, 0x00E2
     932:	81 60       	ori	r24, 0x01	; 1
     934:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     938:	80 91 14 01 	lds	r24, 0x0114
     93c:	88 23       	and	r24, r24
     93e:	21 f4       	brne	.+8      	; 0x948 <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     940:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     944:	87 ff       	sbrs	r24, 7
     946:	02 c0       	rjmp	.+4      	; 0x94c <__vector_10+0x116>
     948:	84 e0       	ldi	r24, 0x04	; 4
     94a:	01 c0       	rjmp	.+2      	; 0x94e <__vector_10+0x118>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	80 93 18 01 	sts	0x0118, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     952:	9c d1       	rcall	.+824    	; 0xc8c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     954:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     958:	83 ff       	sbrs	r24, 3
     95a:	22 c0       	rjmp	.+68     	; 0x9a0 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     95c:	80 91 e2 00 	lds	r24, 0x00E2
     960:	83 ff       	sbrs	r24, 3
     962:	1e c0       	rjmp	.+60     	; 0x9a0 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     964:	80 91 e1 00 	lds	r24, 0x00E1
     968:	87 7f       	andi	r24, 0xF7	; 247
     96a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     96e:	82 e0       	ldi	r24, 0x02	; 2
     970:	80 93 18 01 	sts	0x0118, r24
		USB_Device_ConfigurationNumber = 0;
     974:	10 92 14 01 	sts	0x0114, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     978:	80 91 e1 00 	lds	r24, 0x00E1
     97c:	8e 7f       	andi	r24, 0xFE	; 254
     97e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     982:	80 91 e2 00 	lds	r24, 0x00E2
     986:	8e 7f       	andi	r24, 0xFE	; 254
     988:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     98c:	80 91 e2 00 	lds	r24, 0x00E2
     990:	80 61       	ori	r24, 0x10	; 16
     992:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	42 e0       	ldi	r20, 0x02	; 2
     99c:	1c de       	rcall	.-968    	; 0x5d6 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     99e:	76 d1       	rcall	.+748    	; 0xc8c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9a0:	ff 91       	pop	r31
     9a2:	ef 91       	pop	r30
     9a4:	bf 91       	pop	r27
     9a6:	af 91       	pop	r26
     9a8:	9f 91       	pop	r25
     9aa:	8f 91       	pop	r24
     9ac:	7f 91       	pop	r23
     9ae:	6f 91       	pop	r22
     9b0:	5f 91       	pop	r21
     9b2:	4f 91       	pop	r20
     9b4:	3f 91       	pop	r19
     9b6:	2f 91       	pop	r18
     9b8:	0f 90       	pop	r0
     9ba:	0b be       	out	0x3b, r0	; 59
     9bc:	0f 90       	pop	r0
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	0f 90       	pop	r0
     9c2:	1f 90       	pop	r1
     9c4:	18 95       	reti

000009c6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     9c6:	1f 93       	push	r17
     9c8:	df 93       	push	r29
     9ca:	cf 93       	push	r28
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	ac 97       	sbiw	r28, 0x2c	; 44
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     9dc:	e9 e1       	ldi	r30, 0x19	; 25
     9de:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9e0:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     9e4:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9e6:	21 e0       	ldi	r18, 0x01	; 1
     9e8:	e1 32       	cpi	r30, 0x21	; 33
     9ea:	f2 07       	cpc	r31, r18
     9ec:	c9 f7       	brne	.-14     	; 0x9e0 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     9ee:	15 dc       	rcall	.-2006   	; 0x21a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9f0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     9f4:	83 ff       	sbrs	r24, 3
     9f6:	32 c1       	rjmp	.+612    	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     9f8:	80 91 19 01 	lds	r24, 0x0119

		switch (USB_ControlRequest.bRequest)
     9fc:	20 91 1a 01 	lds	r18, 0x011A
     a00:	25 30       	cpi	r18, 0x05	; 5
     a02:	09 f4       	brne	.+2      	; 0xa06 <USB_Device_ProcessControlRequest+0x40>
     a04:	84 c0       	rjmp	.+264    	; 0xb0e <USB_Device_ProcessControlRequest+0x148>
     a06:	26 30       	cpi	r18, 0x06	; 6
     a08:	40 f4       	brcc	.+16     	; 0xa1a <USB_Device_ProcessControlRequest+0x54>
     a0a:	21 30       	cpi	r18, 0x01	; 1
     a0c:	a1 f1       	breq	.+104    	; 0xa76 <USB_Device_ProcessControlRequest+0xb0>
     a0e:	21 30       	cpi	r18, 0x01	; 1
     a10:	70 f0       	brcs	.+28     	; 0xa2e <USB_Device_ProcessControlRequest+0x68>
     a12:	23 30       	cpi	r18, 0x03	; 3
     a14:	09 f0       	breq	.+2      	; 0xa18 <USB_Device_ProcessControlRequest+0x52>
     a16:	22 c1       	rjmp	.+580    	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
     a18:	2e c0       	rjmp	.+92     	; 0xa76 <USB_Device_ProcessControlRequest+0xb0>
     a1a:	28 30       	cpi	r18, 0x08	; 8
     a1c:	09 f4       	brne	.+2      	; 0xa20 <USB_Device_ProcessControlRequest+0x5a>
     a1e:	f0 c0       	rjmp	.+480    	; 0xc00 <USB_Device_ProcessControlRequest+0x23a>
     a20:	29 30       	cpi	r18, 0x09	; 9
     a22:	09 f4       	brne	.+2      	; 0xa26 <USB_Device_ProcessControlRequest+0x60>
     a24:	ff c0       	rjmp	.+510    	; 0xc24 <USB_Device_ProcessControlRequest+0x25e>
     a26:	26 30       	cpi	r18, 0x06	; 6
     a28:	09 f0       	breq	.+2      	; 0xa2c <USB_Device_ProcessControlRequest+0x66>
     a2a:	18 c1       	rjmp	.+560    	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
     a2c:	93 c0       	rjmp	.+294    	; 0xb54 <USB_Device_ProcessControlRequest+0x18e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a2e:	80 38       	cpi	r24, 0x80	; 128
     a30:	21 f0       	breq	.+8      	; 0xa3a <USB_Device_ProcessControlRequest+0x74>
     a32:	82 38       	cpi	r24, 0x82	; 130
     a34:	09 f0       	breq	.+2      	; 0xa38 <USB_Device_ProcessControlRequest+0x72>
     a36:	12 c1       	rjmp	.+548    	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
     a38:	08 c0       	rjmp	.+16     	; 0xa4a <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a3a:	80 91 15 01 	lds	r24, 0x0115
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a3e:	90 91 16 01 	lds	r25, 0x0116
     a42:	99 23       	and	r25, r25
     a44:	71 f0       	breq	.+28     	; 0xa62 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a46:	82 60       	ori	r24, 0x02	; 2
     a48:	0c c0       	rjmp	.+24     	; 0xa62 <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a4a:	80 91 1d 01 	lds	r24, 0x011D
     a4e:	8f 70       	andi	r24, 0x0F	; 15
     a50:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a54:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	95 ff       	sbrs	r25, 5
     a5c:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a5e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a62:	90 91 e8 00 	lds	r25, 0x00E8
     a66:	97 7f       	andi	r25, 0xF7	; 247
     a68:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a6c:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     a70:	10 92 f1 00 	sts	0x00F1, r1
     a74:	d0 c0       	rjmp	.+416    	; 0xc16 <USB_Device_ProcessControlRequest+0x250>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a76:	88 23       	and	r24, r24
     a78:	19 f0       	breq	.+6      	; 0xa80 <USB_Device_ProcessControlRequest+0xba>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	09 f0       	breq	.+2      	; 0xa80 <USB_Device_ProcessControlRequest+0xba>
     a7e:	ee c0       	rjmp	.+476    	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	8f 71       	andi	r24, 0x1F	; 31
     a84:	90 70       	andi	r25, 0x00	; 0
     a86:	00 97       	sbiw	r24, 0x00	; 0
     a88:	29 f0       	breq	.+10     	; 0xa94 <USB_Device_ProcessControlRequest+0xce>
     a8a:	82 30       	cpi	r24, 0x02	; 2
     a8c:	91 05       	cpc	r25, r1
     a8e:	09 f0       	breq	.+2      	; 0xa92 <USB_Device_ProcessControlRequest+0xcc>
     a90:	e5 c0       	rjmp	.+458    	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
     a92:	0b c0       	rjmp	.+22     	; 0xaaa <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a94:	80 91 1b 01 	lds	r24, 0x011B
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	09 f0       	breq	.+2      	; 0xa9e <USB_Device_ProcessControlRequest+0xd8>
     a9c:	df c0       	rjmp	.+446    	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a9e:	23 30       	cpi	r18, 0x03	; 3
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <USB_Device_ProcessControlRequest+0xde>
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	80 93 16 01 	sts	0x0116, r24
     aa8:	2c c0       	rjmp	.+88     	; 0xb02 <USB_Device_ProcessControlRequest+0x13c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     aaa:	80 91 1b 01 	lds	r24, 0x011B
     aae:	88 23       	and	r24, r24
     ab0:	41 f5       	brne	.+80     	; 0xb02 <USB_Device_ProcessControlRequest+0x13c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ab2:	20 91 1d 01 	lds	r18, 0x011D
     ab6:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     ab8:	09 f4       	brne	.+2      	; 0xabc <USB_Device_ProcessControlRequest+0xf6>
     aba:	d0 c0       	rjmp	.+416    	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     abc:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ac0:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ac4:	80 ff       	sbrs	r24, 0
     ac6:	1d c0       	rjmp	.+58     	; 0xb02 <USB_Device_ProcessControlRequest+0x13c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ac8:	80 91 1a 01 	lds	r24, 0x011A
     acc:	83 30       	cpi	r24, 0x03	; 3
     ace:	21 f4       	brne	.+8      	; 0xad8 <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ad0:	80 91 eb 00 	lds	r24, 0x00EB
     ad4:	80 62       	ori	r24, 0x20	; 32
     ad6:	13 c0       	rjmp	.+38     	; 0xafe <USB_Device_ProcessControlRequest+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     ad8:	80 91 eb 00 	lds	r24, 0x00EB
     adc:	80 61       	ori	r24, 0x10	; 16
     ade:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <USB_Device_ProcessControlRequest+0x126>
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	2a 95       	dec	r18
     aee:	e2 f7       	brpl	.-8      	; 0xae8 <USB_Device_ProcessControlRequest+0x122>
     af0:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     af4:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     af8:	80 91 eb 00 	lds	r24, 0x00EB
     afc:	88 60       	ori	r24, 0x08	; 8
     afe:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b02:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b06:	80 91 e8 00 	lds	r24, 0x00E8
     b0a:	87 7f       	andi	r24, 0xF7	; 247
     b0c:	87 c0       	rjmp	.+270    	; 0xc1c <USB_Device_ProcessControlRequest+0x256>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b0e:	88 23       	and	r24, r24
     b10:	09 f0       	breq	.+2      	; 0xb14 <USB_Device_ProcessControlRequest+0x14e>
     b12:	a4 c0       	rjmp	.+328    	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b14:	10 91 1b 01 	lds	r17, 0x011B
     b18:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b1a:	80 91 e3 00 	lds	r24, 0x00E3
     b1e:	80 78       	andi	r24, 0x80	; 128
     b20:	81 2b       	or	r24, r17
     b22:	80 93 e3 00 	sts	0x00E3, r24
     b26:	80 91 e8 00 	lds	r24, 0x00E8
     b2a:	87 7f       	andi	r24, 0xF7	; 247
     b2c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b30:	cd dd       	rcall	.-1126   	; 0x6cc <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b32:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     b36:	80 ff       	sbrs	r24, 0
     b38:	fc cf       	rjmp	.-8      	; 0xb32 <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     b3a:	80 91 e3 00 	lds	r24, 0x00E3
     b3e:	80 68       	ori	r24, 0x80	; 128
     b40:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b44:	11 23       	and	r17, r17
     b46:	11 f0       	breq	.+4      	; 0xb4c <USB_Device_ProcessControlRequest+0x186>
     b48:	83 e0       	ldi	r24, 0x03	; 3
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <USB_Device_ProcessControlRequest+0x188>
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	80 93 18 01 	sts	0x0118, r24
     b52:	84 c0       	rjmp	.+264    	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b54:	80 58       	subi	r24, 0x80	; 128
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	08 f0       	brcs	.+2      	; 0xb5c <USB_Device_ProcessControlRequest+0x196>
     b5a:	80 c0       	rjmp	.+256    	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b5c:	80 91 1b 01 	lds	r24, 0x011B
     b60:	90 91 1c 01 	lds	r25, 0x011C
     b64:	23 e0       	ldi	r18, 0x03	; 3
     b66:	8c 3d       	cpi	r24, 0xDC	; 220
     b68:	92 07       	cpc	r25, r18
     b6a:	91 f5       	brne	.+100    	; 0xbd0 <USB_Device_ProcessControlRequest+0x20a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b70:	8a e2       	ldi	r24, 0x2A	; 42
     b72:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b74:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b76:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b78:	de 01       	movw	r26, r28
     b7a:	15 96       	adiw	r26, 0x05	; 5
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b80:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b82:	61 e2       	ldi	r22, 0x21	; 33
     b84:	e4 2f       	mov	r30, r20
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	60 93 57 00 	sts	0x0057, r22
     b8c:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
     b8e:	80 ff       	sbrs	r24, 0
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <USB_Device_ProcessControlRequest+0x1d2>
					{
						SerialByte >>= 4;
     b92:	e2 95       	swap	r30
     b94:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     b96:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     b98:	ef 70       	andi	r30, 0x0F	; 15
     b9a:	2e 2f       	mov	r18, r30
     b9c:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b9e:	ea 30       	cpi	r30, 0x0A	; 10
     ba0:	18 f0       	brcs	.+6      	; 0xba8 <USB_Device_ProcessControlRequest+0x1e2>
     ba2:	29 5c       	subi	r18, 0xC9	; 201
     ba4:	3f 4f       	sbci	r19, 0xFF	; 255
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <USB_Device_ProcessControlRequest+0x1e6>
     ba8:	20 5d       	subi	r18, 0xD0	; 208
     baa:	3f 4f       	sbci	r19, 0xFF	; 255
     bac:	2d 93       	st	X+, r18
     bae:	3d 93       	st	X+, r19
     bb0:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     bb2:	84 31       	cpi	r24, 0x14	; 20
     bb4:	91 05       	cpc	r25, r1
     bb6:	31 f7       	brne	.-52     	; 0xb84 <USB_Device_ProcessControlRequest+0x1be>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     bb8:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bba:	80 91 e8 00 	lds	r24, 0x00E8
     bbe:	87 7f       	andi	r24, 0xF7	; 247
     bc0:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     bc4:	ce 01       	movw	r24, r28
     bc6:	03 96       	adiw	r24, 0x03	; 3
     bc8:	6a e2       	ldi	r22, 0x2A	; 42
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	07 dc       	rcall	.-2034   	; 0x3dc <Endpoint_Write_Control_Stream_LE>
     bce:	12 c0       	rjmp	.+36     	; 0xbf4 <USB_Device_ProcessControlRequest+0x22e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     bd0:	60 91 1d 01 	lds	r22, 0x011D
     bd4:	ae 01       	movw	r20, r28
     bd6:	4f 5f       	subi	r20, 0xFF	; 255
     bd8:	5f 4f       	sbci	r21, 0xFF	; 255
     bda:	64 db       	rcall	.-2360   	; 0x2a4 <CALLBACK_USB_GetDescriptor>
     bdc:	bc 01       	movw	r22, r24
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	09 f4       	brne	.+2      	; 0xbe4 <USB_Device_ProcessControlRequest+0x21e>
     be2:	3c c0       	rjmp	.+120    	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
     be4:	80 91 e8 00 	lds	r24, 0x00E8
     be8:	87 7f       	andi	r24, 0xF7	; 247
     bea:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	93 dc       	rcall	.-1754   	; 0x51a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bf4:	80 91 e8 00 	lds	r24, 0x00E8
     bf8:	8b 77       	andi	r24, 0x7B	; 123
     bfa:	80 93 e8 00 	sts	0x00E8, r24
     bfe:	2e c0       	rjmp	.+92     	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c00:	80 38       	cpi	r24, 0x80	; 128
     c02:	61 f5       	brne	.+88     	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c04:	80 91 e8 00 	lds	r24, 0x00E8
     c08:	87 7f       	andi	r24, 0xF7	; 247
     c0a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c0e:	80 91 14 01 	lds	r24, 0x0114
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c12:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c16:	80 91 e8 00 	lds	r24, 0x00E8
     c1a:	8e 77       	andi	r24, 0x7E	; 126
     c1c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c20:	55 dd       	rcall	.-1366   	; 0x6cc <Endpoint_ClearStatusStage>
     c22:	1c c0       	rjmp	.+56     	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c24:	88 23       	and	r24, r24
     c26:	d1 f4       	brne	.+52     	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c28:	90 91 1b 01 	lds	r25, 0x011B
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	b0 f4       	brcc	.+44     	; 0xc5c <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c30:	80 91 e8 00 	lds	r24, 0x00E8
     c34:	87 7f       	andi	r24, 0xF7	; 247
     c36:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c3a:	90 93 14 01 	sts	0x0114, r25

	Endpoint_ClearStatusStage();
     c3e:	46 dd       	rcall	.-1396   	; 0x6cc <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     c40:	80 91 14 01 	lds	r24, 0x0114
     c44:	88 23       	and	r24, r24
     c46:	21 f4       	brne	.+8      	; 0xc50 <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c48:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c4c:	87 ff       	sbrs	r24, 7
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <USB_Device_ProcessControlRequest+0x28e>
     c50:	84 e0       	ldi	r24, 0x04	; 4
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <USB_Device_ProcessControlRequest+0x290>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 18 01 	sts	0x0118, r24

	EVENT_USB_Device_ConfigurationChanged();
     c5a:	d1 da       	rcall	.-2654   	; 0x1fe <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c5c:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c60:	83 ff       	sbrs	r24, 3
     c62:	0a c0       	rjmp	.+20     	; 0xc78 <USB_Device_ProcessControlRequest+0x2b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c64:	80 91 e8 00 	lds	r24, 0x00E8
     c68:	87 7f       	andi	r24, 0xF7	; 247
     c6a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c6e:	80 91 eb 00 	lds	r24, 0x00EB
     c72:	80 62       	ori	r24, 0x20	; 32
     c74:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     c78:	ac 96       	adiw	r28, 0x2c	; 44
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	1f 91       	pop	r17
     c8a:	08 95       	ret

00000c8c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     c8c:	08 95       	ret

00000c8e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c8e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     c90:	80 91 18 01 	lds	r24, 0x0118
     c94:	88 23       	and	r24, r24
     c96:	a9 f0       	breq	.+42     	; 0xcc2 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c98:	80 91 e9 00 	lds	r24, 0x00E9
     c9c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c9e:	90 91 ec 00 	lds	r25, 0x00EC
     ca2:	90 ff       	sbrs	r25, 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <USB_USBTask+0x1c>
     ca6:	10 e8       	ldi	r17, 0x80	; 128
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <USB_USBTask+0x1e>
     caa:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     cac:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cae:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cb2:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     cb6:	83 ff       	sbrs	r24, 3
     cb8:	01 c0       	rjmp	.+2      	; 0xcbc <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
     cba:	85 de       	rcall	.-758    	; 0x9c6 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cbc:	1f 70       	andi	r17, 0x0F	; 15
     cbe:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     cc6:	6f 92       	push	r6
     cc8:	7f 92       	push	r7
     cca:	8f 92       	push	r8
     ccc:	9f 92       	push	r9
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <HID_Device_ProcessControlRequest+0x1e>
     ce4:	0f 92       	push	r0
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     cec:	6d b6       	in	r6, 0x3d	; 61
     cee:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cf0:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     cf4:	83 ff       	sbrs	r24, 3
     cf6:	0d c1       	rjmp	.+538    	; 0xf12 <HID_Device_ProcessControlRequest+0x24c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     cf8:	f7 01       	movw	r30, r14
     cfa:	80 81       	ld	r24, Z
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	20 91 1d 01 	lds	r18, 0x011D
     d02:	30 91 1e 01 	lds	r19, 0x011E
     d06:	28 17       	cp	r18, r24
     d08:	39 07       	cpc	r19, r25
     d0a:	09 f0       	breq	.+2      	; 0xd0e <HID_Device_ProcessControlRequest+0x48>
     d0c:	02 c1       	rjmp	.+516    	; 0xf12 <HID_Device_ProcessControlRequest+0x24c>
	  return;

	switch (USB_ControlRequest.bRequest)
     d0e:	80 91 1a 01 	lds	r24, 0x011A
     d12:	83 30       	cpi	r24, 0x03	; 3
     d14:	09 f4       	brne	.+2      	; 0xd18 <HID_Device_ProcessControlRequest+0x52>
     d16:	a4 c0       	rjmp	.+328    	; 0xe60 <HID_Device_ProcessControlRequest+0x19a>
     d18:	84 30       	cpi	r24, 0x04	; 4
     d1a:	30 f4       	brcc	.+12     	; 0xd28 <HID_Device_ProcessControlRequest+0x62>
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	71 f0       	breq	.+28     	; 0xd3c <HID_Device_ProcessControlRequest+0x76>
     d20:	82 30       	cpi	r24, 0x02	; 2
     d22:	09 f0       	breq	.+2      	; 0xd26 <HID_Device_ProcessControlRequest+0x60>
     d24:	f6 c0       	rjmp	.+492    	; 0xf12 <HID_Device_ProcessControlRequest+0x24c>
     d26:	d9 c0       	rjmp	.+434    	; 0xeda <HID_Device_ProcessControlRequest+0x214>
     d28:	8a 30       	cpi	r24, 0x0A	; 10
     d2a:	09 f4       	brne	.+2      	; 0xd2e <HID_Device_ProcessControlRequest+0x68>
     d2c:	be c0       	rjmp	.+380    	; 0xeaa <HID_Device_ProcessControlRequest+0x1e4>
     d2e:	8b 30       	cpi	r24, 0x0B	; 11
     d30:	09 f4       	brne	.+2      	; 0xd34 <HID_Device_ProcessControlRequest+0x6e>
     d32:	a7 c0       	rjmp	.+334    	; 0xe82 <HID_Device_ProcessControlRequest+0x1bc>
     d34:	89 30       	cpi	r24, 0x09	; 9
     d36:	09 f0       	breq	.+2      	; 0xd3a <HID_Device_ProcessControlRequest+0x74>
     d38:	ec c0       	rjmp	.+472    	; 0xf12 <HID_Device_ProcessControlRequest+0x24c>
     d3a:	4c c0       	rjmp	.+152    	; 0xdd4 <HID_Device_ProcessControlRequest+0x10e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d3c:	80 91 19 01 	lds	r24, 0x0119
     d40:	81 3a       	cpi	r24, 0xA1	; 161
     d42:	09 f0       	breq	.+2      	; 0xd46 <HID_Device_ProcessControlRequest+0x80>
     d44:	e6 c0       	rjmp	.+460    	; 0xf12 <HID_Device_ProcessControlRequest+0x24c>
     d46:	cd b6       	in	r12, 0x3d	; 61
     d48:	de b6       	in	r13, 0x3e	; 62
     d4a:	9d b6       	in	r9, 0x3d	; 61
     d4c:	8d 2c       	mov	r8, r13
			{
				uint16_t ReportSize = 0;
     d4e:	1b 82       	std	Y+3, r1	; 0x03
     d50:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d52:	80 91 1b 01 	lds	r24, 0x011B
     d56:	00 91 1c 01 	lds	r16, 0x011C
     d5a:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     d5c:	f7 01       	movw	r30, r14
     d5e:	40 85       	ldd	r20, Z+8	; 0x08
     d60:	c4 1a       	sub	r12, r20
     d62:	d1 08       	sbc	r13, r1
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de be       	out	0x3e, r13	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd be       	out	0x3d, r12	; 61
     d6e:	08 94       	sec
     d70:	c1 1c       	adc	r12, r1
     d72:	d1 1c       	adc	r13, r1
     d74:	bc 2c       	mov	r11, r12
     d76:	ad 2c       	mov	r10, r13

				memset(ReportData, 0, sizeof(ReportData));
     d78:	c6 01       	movw	r24, r12
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	da d1       	rcall	.+948    	; 0x1136 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     d82:	40 2f       	mov	r20, r16
     d84:	41 50       	subi	r20, 0x01	; 1
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     d86:	c7 01       	movw	r24, r14
     d88:	be 01       	movw	r22, r28
     d8a:	6f 5f       	subi	r22, 0xFF	; 255
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	96 01       	movw	r18, r12
     d90:	8e 01       	movw	r16, r28
     d92:	0e 5f       	subi	r16, 0xFE	; 254
     d94:	1f 4f       	sbci	r17, 0xFF	; 255
     d96:	50 da       	rcall	.-2912   	; 0x238 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     d98:	f7 01       	movw	r30, r14
     d9a:	26 81       	ldd	r18, Z+6	; 0x06
     d9c:	37 81       	ldd	r19, Z+7	; 0x07
     d9e:	21 15       	cp	r18, r1
     da0:	31 05       	cpc	r19, r1
     da2:	29 f0       	breq	.+10     	; 0xdae <HID_Device_ProcessControlRequest+0xe8>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     da4:	40 85       	ldd	r20, Z+8	; 0x08
     da6:	c9 01       	movw	r24, r18
     da8:	b6 01       	movw	r22, r12
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	bb d1       	rcall	.+886    	; 0x1124 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dae:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     db2:	80 91 e8 00 	lds	r24, 0x00E8
     db6:	87 7f       	andi	r24, 0xF7	; 247
     db8:	80 93 e8 00 	sts	0x00E8, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     dbc:	6a 81       	ldd	r22, Y+2	; 0x02
     dbe:	7b 81       	ldd	r23, Y+3	; 0x03
     dc0:	8b 2d       	mov	r24, r11
     dc2:	9a 2d       	mov	r25, r10
     dc4:	0b db       	rcall	.-2538   	; 0x3dc <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dc6:	80 91 e8 00 	lds	r24, 0x00E8
     dca:	8b 77       	andi	r24, 0x7B	; 123
     dcc:	80 93 e8 00 	sts	0x00E8, r24
     dd0:	94 01       	movw	r18, r8
     dd2:	3e c0       	rjmp	.+124    	; 0xe50 <HID_Device_ProcessControlRequest+0x18a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     dd4:	80 91 19 01 	lds	r24, 0x0119
     dd8:	81 32       	cpi	r24, 0x21	; 33
     dda:	09 f0       	breq	.+2      	; 0xdde <HID_Device_ProcessControlRequest+0x118>
     ddc:	9a c0       	rjmp	.+308    	; 0xf12 <HID_Device_ProcessControlRequest+0x24c>
     dde:	cd b6       	in	r12, 0x3d	; 61
     de0:	de b6       	in	r13, 0x3e	; 62
     de2:	bd b6       	in	r11, 0x3d	; 61
     de4:	9d 2c       	mov	r9, r13
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     de6:	00 91 1f 01 	lds	r16, 0x011F
     dea:	10 91 20 01 	lds	r17, 0x0120
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     dee:	a0 90 1b 01 	lds	r10, 0x011B
     df2:	80 90 1c 01 	lds	r8, 0x011C
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     df6:	8d b7       	in	r24, 0x3d	; 61
     df8:	9e b7       	in	r25, 0x3e	; 62
     dfa:	80 1b       	sub	r24, r16
     dfc:	91 0b       	sbc	r25, r17
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	9e bf       	out	0x3e, r25	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	8d bf       	out	0x3d, r24	; 61
     e08:	cd b6       	in	r12, 0x3d	; 61
     e0a:	de b6       	in	r13, 0x3e	; 62
     e0c:	08 94       	sec
     e0e:	c1 1c       	adc	r12, r1
     e10:	d1 1c       	adc	r13, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e12:	80 91 e8 00 	lds	r24, 0x00E8
     e16:	87 7f       	andi	r24, 0xF7	; 247
     e18:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     e1c:	c6 01       	movw	r24, r12
     e1e:	b8 01       	movw	r22, r16
     e20:	3b db       	rcall	.-2442   	; 0x498 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e22:	80 91 e8 00 	lds	r24, 0x00E8
     e26:	8e 77       	andi	r24, 0x7E	; 126
     e28:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	aa 20       	and	r10, r10
     e32:	11 f4       	brne	.+4      	; 0xe38 <HID_Device_ProcessControlRequest+0x172>
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     e38:	48 2d       	mov	r20, r8
     e3a:	41 50       	subi	r20, 0x01	; 1

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e3c:	96 01       	movw	r18, r12
     e3e:	28 0f       	add	r18, r24
     e40:	39 1f       	adc	r19, r25
     e42:	08 1b       	sub	r16, r24
     e44:	19 0b       	sbc	r17, r25
     e46:	c7 01       	movw	r24, r14
     e48:	6a 2d       	mov	r22, r10
     e4a:	2b da       	rcall	.-2986   	; 0x2a2 <CALLBACK_HID_Device_ProcessHIDReport>
     e4c:	3b 2d       	mov	r19, r11
     e4e:	29 2d       	mov	r18, r9
     e50:	83 2f       	mov	r24, r19
     e52:	92 2f       	mov	r25, r18
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	9e bf       	out	0x3e, r25	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	8d bf       	out	0x3d, r24	; 61
     e5e:	59 c0       	rjmp	.+178    	; 0xf12 <HID_Device_ProcessControlRequest+0x24c>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e60:	80 91 19 01 	lds	r24, 0x0119
     e64:	81 3a       	cpi	r24, 0xA1	; 161
     e66:	09 f0       	breq	.+2      	; 0xe6a <HID_Device_ProcessControlRequest+0x1a4>
     e68:	54 c0       	rjmp	.+168    	; 0xf12 <HID_Device_ProcessControlRequest+0x24c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e6a:	80 91 e8 00 	lds	r24, 0x00E8
     e6e:	87 7f       	andi	r24, 0xF7	; 247
     e70:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e74:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     e78:	80 ff       	sbrs	r24, 0
     e7a:	fc cf       	rjmp	.-8      	; 0xe74 <HID_Device_ProcessControlRequest+0x1ae>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     e7c:	f7 01       	movw	r30, r14
     e7e:	81 85       	ldd	r24, Z+9	; 0x09
     e80:	40 c0       	rjmp	.+128    	; 0xf02 <HID_Device_ProcessControlRequest+0x23c>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e82:	80 91 19 01 	lds	r24, 0x0119
     e86:	81 32       	cpi	r24, 0x21	; 33
     e88:	09 f0       	breq	.+2      	; 0xe8c <HID_Device_ProcessControlRequest+0x1c6>
     e8a:	43 c0       	rjmp	.+134    	; 0xf12 <HID_Device_ProcessControlRequest+0x24c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e8c:	80 91 e8 00 	lds	r24, 0x00E8
     e90:	87 7f       	andi	r24, 0xF7	; 247
     e92:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e96:	1a dc       	rcall	.-1996   	; 0x6cc <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     e98:	90 91 1b 01 	lds	r25, 0x011B
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	99 23       	and	r25, r25
     ea0:	09 f4       	brne	.+2      	; 0xea4 <HID_Device_ProcessControlRequest+0x1de>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	f7 01       	movw	r30, r14
     ea6:	81 87       	std	Z+9, r24	; 0x09
     ea8:	34 c0       	rjmp	.+104    	; 0xf12 <HID_Device_ProcessControlRequest+0x24c>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     eaa:	80 91 19 01 	lds	r24, 0x0119
     eae:	81 32       	cpi	r24, 0x21	; 33
     eb0:	81 f5       	brne	.+96     	; 0xf12 <HID_Device_ProcessControlRequest+0x24c>
     eb2:	80 91 e8 00 	lds	r24, 0x00E8
     eb6:	87 7f       	andi	r24, 0xF7	; 247
     eb8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     ebc:	07 dc       	rcall	.-2034   	; 0x6cc <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     ebe:	80 91 1b 01 	lds	r24, 0x011B
     ec2:	90 91 1c 01 	lds	r25, 0x011C
     ec6:	80 70       	andi	r24, 0x00	; 0
     ec8:	36 e0       	ldi	r19, 0x06	; 6
     eca:	96 95       	lsr	r25
     ecc:	87 95       	ror	r24
     ece:	3a 95       	dec	r19
     ed0:	e1 f7       	brne	.-8      	; 0xeca <HID_Device_ProcessControlRequest+0x204>
     ed2:	f7 01       	movw	r30, r14
     ed4:	95 87       	std	Z+13, r25	; 0x0d
     ed6:	84 87       	std	Z+12, r24	; 0x0c
     ed8:	1c c0       	rjmp	.+56     	; 0xf12 <HID_Device_ProcessControlRequest+0x24c>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     eda:	80 91 19 01 	lds	r24, 0x0119
     ede:	81 3a       	cpi	r24, 0xA1	; 161
     ee0:	c1 f4       	brne	.+48     	; 0xf12 <HID_Device_ProcessControlRequest+0x24c>
     ee2:	80 91 e8 00 	lds	r24, 0x00E8
     ee6:	87 7f       	andi	r24, 0xF7	; 247
     ee8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     eec:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     ef0:	80 ff       	sbrs	r24, 0
     ef2:	fc cf       	rjmp	.-8      	; 0xeec <HID_Device_ProcessControlRequest+0x226>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     ef4:	f7 01       	movw	r30, r14
     ef6:	84 85       	ldd	r24, Z+12	; 0x0c
     ef8:	95 85       	ldd	r25, Z+13	; 0x0d
     efa:	96 95       	lsr	r25
     efc:	87 95       	ror	r24
     efe:	96 95       	lsr	r25
     f00:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f02:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f06:	80 91 e8 00 	lds	r24, 0x00E8
     f0a:	8e 77       	andi	r24, 0x7E	; 126
     f0c:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     f10:	dd db       	rcall	.-2118   	; 0x6cc <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	7e be       	out	0x3e, r7	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	6d be       	out	0x3d, r6	; 61
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	df 90       	pop	r13
     f30:	cf 90       	pop	r12
     f32:	bf 90       	pop	r11
     f34:	af 90       	pop	r10
     f36:	9f 90       	pop	r9
     f38:	8f 90       	pop	r8
     f3a:	7f 90       	pop	r7
     f3c:	6f 90       	pop	r6
     f3e:	08 95       	ret

00000f40 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     f46:	09 96       	adiw	r24, 0x09	; 9
     f48:	dc 01       	movw	r26, r24
     f4a:	87 e0       	ldi	r24, 0x07	; 7
     f4c:	ed 01       	movw	r28, r26
     f4e:	19 92       	st	Y+, r1
     f50:	8a 95       	dec	r24
     f52:	e9 f7       	brne	.-6      	; 0xf4e <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     f58:	84 ef       	ldi	r24, 0xF4	; 244
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	95 87       	std	Z+13, r25	; 0x0d
     f5e:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     f60:	83 e0       	ldi	r24, 0x03	; 3
     f62:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     f64:	cf 01       	movw	r24, r30
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	6c db       	rcall	.-2344   	; 0x644 <Endpoint_ConfigureEndpointTable>
	  return false;	
	
	return true;
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f72:	5f 92       	push	r5
     f74:	6f 92       	push	r6
     f76:	7f 92       	push	r7
     f78:	8f 92       	push	r8
     f7a:	9f 92       	push	r9
     f7c:	af 92       	push	r10
     f7e:	bf 92       	push	r11
     f80:	cf 92       	push	r12
     f82:	df 92       	push	r13
     f84:	ef 92       	push	r14
     f86:	ff 92       	push	r15
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	00 d0       	rcall	.+0      	; 0xf92 <HID_Device_USBTask+0x20>
     f92:	00 d0       	rcall	.+0      	; 0xf94 <HID_Device_USBTask+0x22>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     f9a:	6d b6       	in	r6, 0x3d	; 61
     f9c:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     f9e:	80 91 18 01 	lds	r24, 0x0118
     fa2:	84 30       	cpi	r24, 0x04	; 4
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <HID_Device_USBTask+0x36>
     fa6:	98 c0       	rjmp	.+304    	; 0x10d8 <HID_Device_USBTask+0x166>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     fa8:	80 91 e4 00 	lds	r24, 0x00E4
     fac:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     fb0:	f7 01       	movw	r30, r14
     fb2:	22 85       	ldd	r18, Z+10	; 0x0a
     fb4:	33 85       	ldd	r19, Z+11	; 0x0b
     fb6:	28 17       	cp	r18, r24
     fb8:	39 07       	cpc	r19, r25
     fba:	09 f4       	brne	.+2      	; 0xfbe <HID_Device_USBTask+0x4c>
     fbc:	8d c0       	rjmp	.+282    	; 0x10d8 <HID_Device_USBTask+0x166>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fbe:	81 81       	ldd	r24, Z+1	; 0x01
     fc0:	8f 70       	andi	r24, 0x0F	; 15
     fc2:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fc6:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     fca:	85 ff       	sbrs	r24, 5
     fcc:	85 c0       	rjmp	.+266    	; 0x10d8 <HID_Device_USBTask+0x166>
     fce:	8d b6       	in	r8, 0x3d	; 61
     fd0:	57 2c       	mov	r5, r7
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     fd2:	40 85       	ldd	r20, Z+8	; 0x08
     fd4:	cd b6       	in	r12, 0x3d	; 61
     fd6:	de b6       	in	r13, 0x3e	; 62
     fd8:	c4 1a       	sub	r12, r20
     fda:	d1 08       	sbc	r13, r1
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de be       	out	0x3e, r13	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd be       	out	0x3d, r12	; 61
     fe6:	0d b7       	in	r16, 0x3d	; 61
     fe8:	1e b7       	in	r17, 0x3e	; 62
     fea:	0f 5f       	subi	r16, 0xFF	; 255
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	b0 2e       	mov	r11, r16
     ff0:	a1 2e       	mov	r10, r17
		uint8_t  ReportID     = 0;
     ff2:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
     ff4:	1b 82       	std	Y+3, r1	; 0x03
     ff6:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
     ff8:	c8 01       	movw	r24, r16
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	9a d0       	rcall	.+308    	; 0x1136 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1002:	c7 01       	movw	r24, r14
    1004:	be 01       	movw	r22, r28
    1006:	6f 5f       	subi	r22, 0xFF	; 255
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	40 e0       	ldi	r20, 0x00	; 0
    100c:	98 01       	movw	r18, r16
    100e:	8e 01       	movw	r16, r28
    1010:	0e 5f       	subi	r16, 0xFE	; 254
    1012:	1f 4f       	sbci	r17, 0xFF	; 255
    1014:	11 d9       	rcall	.-3550   	; 0x238 <CALLBACK_HID_Device_CreateHIDReport>
    1016:	98 2e       	mov	r9, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1018:	f7 01       	movw	r30, r14
    101a:	84 85       	ldd	r24, Z+12	; 0x0c
    101c:	95 85       	ldd	r25, Z+13	; 0x0d
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	59 f0       	breq	.+22     	; 0x1038 <HID_Device_USBTask+0xc6>
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	26 85       	ldd	r18, Z+14	; 0x0e
    1028:	37 85       	ldd	r19, Z+15	; 0x0f
    102a:	21 15       	cp	r18, r1
    102c:	31 05       	cpc	r19, r1
    102e:	11 f0       	breq	.+4      	; 0x1034 <HID_Device_USBTask+0xc2>
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1034:	6c 01       	movw	r12, r24
    1036:	02 c0       	rjmp	.+4      	; 0x103c <HID_Device_USBTask+0xca>
    1038:	cc 24       	eor	r12, r12
    103a:	dd 24       	eor	r13, r13

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    103c:	f7 01       	movw	r30, r14
    103e:	06 81       	ldd	r16, Z+6	; 0x06
    1040:	17 81       	ldd	r17, Z+7	; 0x07
    1042:	01 15       	cp	r16, r1
    1044:	11 05       	cpc	r17, r1
    1046:	a1 f0       	breq	.+40     	; 0x1070 <HID_Device_USBTask+0xfe>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1048:	4a 81       	ldd	r20, Y+2	; 0x02
    104a:	5b 81       	ldd	r21, Y+3	; 0x03
    104c:	8b 2d       	mov	r24, r11
    104e:	9a 2d       	mov	r25, r10
    1050:	b8 01       	movw	r22, r16
    1052:	5b d0       	rcall	.+182    	; 0x110a <memcmp>
    1054:	21 e0       	ldi	r18, 0x01	; 1
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	09 f4       	brne	.+2      	; 0x105c <HID_Device_USBTask+0xea>
    105a:	20 e0       	ldi	r18, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    105c:	f7 01       	movw	r30, r14
    105e:	40 85       	ldd	r20, Z+8	; 0x08
    1060:	c8 01       	movw	r24, r16
    1062:	6b 2d       	mov	r22, r11
    1064:	7a 2d       	mov	r23, r10
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	2c 83       	std	Y+4, r18	; 0x04
    106a:	5c d0       	rcall	.+184    	; 0x1124 <memcpy>
    106c:	2c 81       	ldd	r18, Y+4	; 0x04
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <HID_Device_USBTask+0x100>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1070:	20 e0       	ldi	r18, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	9b 81       	ldd	r25, Y+3	; 0x03
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	09 f1       	breq	.+66     	; 0x10bc <HID_Device_USBTask+0x14a>
    107a:	99 20       	and	r9, r9
    107c:	29 f4       	brne	.+10     	; 0x1088 <HID_Device_USBTask+0x116>
    107e:	22 23       	and	r18, r18
    1080:	19 f4       	brne	.+6      	; 0x1088 <HID_Device_USBTask+0x116>
    1082:	c1 14       	cp	r12, r1
    1084:	d1 04       	cpc	r13, r1
    1086:	d1 f0       	breq	.+52     	; 0x10bc <HID_Device_USBTask+0x14a>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1088:	f7 01       	movw	r30, r14
    108a:	84 85       	ldd	r24, Z+12	; 0x0c
    108c:	95 85       	ldd	r25, Z+13	; 0x0d
    108e:	97 87       	std	Z+15, r25	; 0x0f
    1090:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1092:	81 81       	ldd	r24, Z+1	; 0x01
    1094:	8f 70       	andi	r24, 0x0F	; 15
    1096:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	88 23       	and	r24, r24
    109e:	11 f0       	breq	.+4      	; 0x10a4 <HID_Device_USBTask+0x132>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10a0:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    10a4:	6a 81       	ldd	r22, Y+2	; 0x02
    10a6:	7b 81       	ldd	r23, Y+3	; 0x03
    10a8:	8b 2d       	mov	r24, r11
    10aa:	9a 2d       	mov	r25, r10
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	37 d9       	rcall	.-3474   	; 0x320 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10b2:	80 91 e8 00 	lds	r24, 0x00E8
    10b6:	8e 77       	andi	r24, 0x7E	; 126
    10b8:	80 93 e8 00 	sts	0x00E8, r24
    10bc:	80 91 e4 00 	lds	r24, 0x00E4
    10c0:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    10c4:	f7 01       	movw	r30, r14
    10c6:	93 87       	std	Z+11, r25	; 0x0b
    10c8:	82 87       	std	Z+10, r24	; 0x0a
    10ca:	88 2d       	mov	r24, r8
    10cc:	95 2d       	mov	r25, r5
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	9e bf       	out	0x3e, r25	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	8d bf       	out	0x3d, r24	; 61
	}
}
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	7e be       	out	0x3e, r7	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	6d be       	out	0x3d, r6	; 61
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	bf 90       	pop	r11
    10fc:	af 90       	pop	r10
    10fe:	9f 90       	pop	r9
    1100:	8f 90       	pop	r8
    1102:	7f 90       	pop	r7
    1104:	6f 90       	pop	r6
    1106:	5f 90       	pop	r5
    1108:	08 95       	ret

0000110a <memcmp>:
    110a:	fb 01       	movw	r30, r22
    110c:	dc 01       	movw	r26, r24
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <memcmp+0xe>
    1110:	8d 91       	ld	r24, X+
    1112:	01 90       	ld	r0, Z+
    1114:	80 19       	sub	r24, r0
    1116:	21 f4       	brne	.+8      	; 0x1120 <memcmp+0x16>
    1118:	41 50       	subi	r20, 0x01	; 1
    111a:	50 40       	sbci	r21, 0x00	; 0
    111c:	c8 f7       	brcc	.-14     	; 0x1110 <memcmp+0x6>
    111e:	88 1b       	sub	r24, r24
    1120:	99 0b       	sbc	r25, r25
    1122:	08 95       	ret

00001124 <memcpy>:
    1124:	fb 01       	movw	r30, r22
    1126:	dc 01       	movw	r26, r24
    1128:	02 c0       	rjmp	.+4      	; 0x112e <memcpy+0xa>
    112a:	01 90       	ld	r0, Z+
    112c:	0d 92       	st	X+, r0
    112e:	41 50       	subi	r20, 0x01	; 1
    1130:	50 40       	sbci	r21, 0x00	; 0
    1132:	d8 f7       	brcc	.-10     	; 0x112a <memcpy+0x6>
    1134:	08 95       	ret

00001136 <memset>:
    1136:	dc 01       	movw	r26, r24
    1138:	01 c0       	rjmp	.+2      	; 0x113c <memset+0x6>
    113a:	6d 93       	st	X+, r22
    113c:	41 50       	subi	r20, 0x01	; 1
    113e:	50 40       	sbci	r21, 0x00	; 0
    1140:	e0 f7       	brcc	.-8      	; 0x113a <memset+0x4>
    1142:	08 95       	ret

00001144 <_exit>:
    1144:	f8 94       	cli

00001146 <__stop_program>:
    1146:	ff cf       	rjmp	.-2      	; 0x1146 <__stop_program>
