
VirtualSerialMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  000015bc  00001650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080017e  0080017e  000016ce  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004a8  00000000  00000000  000022d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000d3c  00000000  00000000  0000277f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008a02  00000000  00000000  000034bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000208a  00000000  00000000  0000bebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000707e  00000000  00000000  0000df47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000710  00000000  00000000  00014fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003d87  00000000  00000000  000156d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000424e  00000000  00000000  0001945f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001188  00000000  00000000  0001d6ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000700  00000000  00000000  0001e835  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       0:	d3 c0       	rjmp	.+422    	; 0x1a8 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	ed c0       	rjmp	.+474    	; 0x1e0 <__bad_interrupt>
       6:	00 00       	nop
       8:	eb c0       	rjmp	.+470    	; 0x1e0 <__bad_interrupt>
       a:	00 00       	nop
       c:	e9 c0       	rjmp	.+466    	; 0x1e0 <__bad_interrupt>
       e:	00 00       	nop
      10:	e7 c0       	rjmp	.+462    	; 0x1e0 <__bad_interrupt>
      12:	00 00       	nop
      14:	e5 c0       	rjmp	.+458    	; 0x1e0 <__bad_interrupt>
      16:	00 00       	nop
      18:	e3 c0       	rjmp	.+454    	; 0x1e0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e1 c0       	rjmp	.+450    	; 0x1e0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	df c0       	rjmp	.+446    	; 0x1e0 <__bad_interrupt>
      22:	00 00       	nop
      24:	dd c0       	rjmp	.+442    	; 0x1e0 <__bad_interrupt>
      26:	00 00       	nop
      28:	85 c4       	rjmp	.+2314   	; 0x934 <__vector_10>
      2a:	00 00       	nop
      2c:	4c c5       	rjmp	.+2712   	; 0xac6 <__vector_11>
      2e:	00 00       	nop
      30:	d7 c0       	rjmp	.+430    	; 0x1e0 <__bad_interrupt>
      32:	00 00       	nop
      34:	d5 c0       	rjmp	.+426    	; 0x1e0 <__bad_interrupt>
      36:	00 00       	nop
      38:	d3 c0       	rjmp	.+422    	; 0x1e0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d1 c0       	rjmp	.+418    	; 0x1e0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	cf c0       	rjmp	.+414    	; 0x1e0 <__bad_interrupt>
      42:	00 00       	nop
      44:	cd c0       	rjmp	.+410    	; 0x1e0 <__bad_interrupt>
      46:	00 00       	nop
      48:	cb c0       	rjmp	.+406    	; 0x1e0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c9 c0       	rjmp	.+402    	; 0x1e0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c7 c0       	rjmp	.+398    	; 0x1e0 <__bad_interrupt>
      52:	00 00       	nop
      54:	c5 c0       	rjmp	.+394    	; 0x1e0 <__bad_interrupt>
      56:	00 00       	nop
      58:	c3 c0       	rjmp	.+390    	; 0x1e0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c1 c0       	rjmp	.+386    	; 0x1e0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	bf c0       	rjmp	.+382    	; 0x1e0 <__bad_interrupt>
      62:	00 00       	nop
      64:	bd c0       	rjmp	.+378    	; 0x1e0 <__bad_interrupt>
      66:	00 00       	nop
      68:	bb c0       	rjmp	.+374    	; 0x1e0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b9 c0       	rjmp	.+370    	; 0x1e0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b7 c0       	rjmp	.+366    	; 0x1e0 <__bad_interrupt>
      72:	00 00       	nop
      74:	b5 c0       	rjmp	.+362    	; 0x1e0 <__bad_interrupt>
      76:	00 00       	nop
      78:	b3 c0       	rjmp	.+358    	; 0x1e0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b1 c0       	rjmp	.+354    	; 0x1e0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	af c0       	rjmp	.+350    	; 0x1e0 <__bad_interrupt>
      82:	00 00       	nop
      84:	ad c0       	rjmp	.+346    	; 0x1e0 <__bad_interrupt>
      86:	00 00       	nop
      88:	ab c0       	rjmp	.+342    	; 0x1e0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a9 c0       	rjmp	.+338    	; 0x1e0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a7 c0       	rjmp	.+334    	; 0x1e0 <__bad_interrupt>
      92:	00 00       	nop
      94:	a5 c0       	rjmp	.+330    	; 0x1e0 <__bad_interrupt>
      96:	00 00       	nop
      98:	a3 c0       	rjmp	.+326    	; 0x1e0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	a1 c0       	rjmp	.+322    	; 0x1e0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	9f c0       	rjmp	.+318    	; 0x1e0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9d c0       	rjmp	.+314    	; 0x1e0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	9b c0       	rjmp	.+310    	; 0x1e0 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <MouseReport>:
      ac:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
      bc:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
      cc:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
      dc:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

000000e6 <DeviceDescriptor>:
      e6:	12 01 10 01 ef 02 01 08 eb 03 62 20 01 00 01 02     ..........b ....
      f6:	dc 01                                               ..

000000f8 <ConfigurationDescriptor>:
      f8:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
     108:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     118:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
     128:	04 01 00 02 0a 00 00 00 07 05 04 02 10 00 05 07     ................
     138:	05 83 02 10 00 05 09 04 02 00 01 03 01 02 00 09     ................
     148:	21 11 01 00 01 22 3a 00 07 05 81 03 08 00 05        !....":........

00000157 <LanguageString>:
     157:	04 03 09 04                                         ....

0000015b <ManufacturerString>:
     15b:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     16b:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000175 <ProductString>:
     175:	30 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     0.L.U.F.A. .C.D.
     185:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 6f 00     C. .a.n.d. .M.o.
     195:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
     1a5:	00 00 00                                            ...

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf ef       	ldi	r28, 0xFF	; 255
     1ae:	da e0       	ldi	r29, 0x0A	; 10
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	11 e0       	ldi	r17, 0x01	; 1
     1b6:	a0 e0       	ldi	r26, 0x00	; 0
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	ec eb       	ldi	r30, 0xBC	; 188
     1bc:	f5 e1       	ldi	r31, 0x15	; 21
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <__do_copy_data+0x10>
     1c0:	05 90       	lpm	r0, Z+
     1c2:	0d 92       	st	X+, r0
     1c4:	ae 37       	cpi	r26, 0x7E	; 126
     1c6:	b1 07       	cpc	r27, r17
     1c8:	d9 f7       	brne	.-10     	; 0x1c0 <__do_copy_data+0xc>

000001ca <__do_clear_bss>:
     1ca:	11 e0       	ldi	r17, 0x01	; 1
     1cc:	ae e7       	ldi	r26, 0x7E	; 126
     1ce:	b1 e0       	ldi	r27, 0x01	; 1
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <.do_clear_bss_start>

000001d2 <.do_clear_bss_loop>:
     1d2:	1d 92       	st	X+, r1

000001d4 <.do_clear_bss_start>:
     1d4:	af 38       	cpi	r26, 0x8F	; 143
     1d6:	b1 07       	cpc	r27, r17
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <.do_clear_bss_loop>
     1da:	5e d0       	rcall	.+188    	; 0x298 <main>
     1dc:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0f cf       	rjmp	.-482    	; 0x0 <__vectors>

000001e2 <LEDs_SetAllLEDs>:
				PORTE &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTE  = ((PORTE & ~LEDS_ALL_LEDS) | LEDMask);
     1e2:	9e b1       	in	r25, 0x0e	; 14
     1e4:	9f 7b       	andi	r25, 0xBF	; 191
     1e6:	98 2b       	or	r25, r24
     1e8:	9e b9       	out	0x0e, r25	; 14
			}
     1ea:	08 95       	ret

000001ec <Joystick_GetStatus>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     1ec:	23 b1       	in	r18, 0x03	; 3
     1ee:	8c b1       	in	r24, 0x0c	; 12
     1f0:	80 95       	com	r24
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	80 73       	andi	r24, 0x30	; 48
     1f6:	90 70       	andi	r25, 0x00	; 0
     1f8:	95 95       	asr	r25
     1fa:	87 95       	ror	r24
     1fc:	20 95       	com	r18
     1fe:	20 7e       	andi	r18, 0xE0	; 224
			}
     200:	82 2b       	or	r24, r18
     202:	08 95       	ret

00000204 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     204:	84 b7       	in	r24, 0x34	; 52
     206:	87 7f       	andi	r24, 0xF7	; 247
     208:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     20a:	88 e1       	ldi	r24, 0x18	; 24
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	f8 94       	cli
     210:	80 93 60 00 	sts	0x0060, r24
     214:	10 92 60 00 	sts	0x0060, r1
     218:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	80 e8       	ldi	r24, 0x80	; 128
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	f8 94       	cli
     222:	80 93 61 00 	sts	0x0061, r24
     226:	90 93 61 00 	sts	0x0061, r25
     22a:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     22c:	84 b1       	in	r24, 0x04	; 4
     22e:	8f 71       	andi	r24, 0x1F	; 31
     230:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     232:	8d b1       	in	r24, 0x0d	; 13
     234:	8f 7c       	andi	r24, 0xCF	; 207
     236:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     238:	85 b1       	in	r24, 0x05	; 5
     23a:	80 6e       	ori	r24, 0xE0	; 224
     23c:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     23e:	8e b1       	in	r24, 0x0e	; 14
     240:	80 63       	ori	r24, 0x30	; 48
     242:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRE  |=  LEDS_ALL_LEDS;
     244:	6e 9a       	sbi	0x0d, 6	; 13
				PORTE &= ~LEDS_ALL_LEDS;
     246:	76 98       	cbi	0x0e, 6	; 14

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
     248:	58 c3       	rjmp	.+1712   	; 0x8fa <USB_Init>

0000024a <CheckJoystickMovement>:

/** Checks for changes in the position of the board joystick, sending strings to the host upon each change. */
void CheckJoystickMovement(void)
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
     24a:	d0 df       	rcall	.-96     	; 0x1ec <Joystick_GetStatus>
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
     24c:	87 fd       	sbrc	r24, 7
     24e:	0b c0       	rjmp	.+22     	; 0x266 <CheckJoystickMovement+0x1c>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
     250:	84 fd       	sbrc	r24, 4
     252:	0c c0       	rjmp	.+24     	; 0x26c <CheckJoystickMovement+0x22>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
     254:	86 fd       	sbrc	r24, 6
     256:	0d c0       	rjmp	.+26     	; 0x272 <CheckJoystickMovement+0x28>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
     258:	83 fd       	sbrc	r24, 3
     25a:	0e c0       	rjmp	.+28     	; 0x278 <CheckJoystickMovement+0x2e>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
     25c:	85 fd       	sbrc	r24, 5
     25e:	0f c0       	rjmp	.+30     	; 0x27e <CheckJoystickMovement+0x34>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
     260:	10 92 7e 01 	sts	0x017E, r1
     264:	08 95       	ret
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	71 e0       	ldi	r23, 0x01	; 1
     26a:	0b c0       	rjmp	.+22     	; 0x282 <CheckJoystickMovement+0x38>
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportString = "Joystick Down\r\n";
     26c:	6e e0       	ldi	r22, 0x0E	; 14
     26e:	71 e0       	ldi	r23, 0x01	; 1
     270:	08 c0       	rjmp	.+16     	; 0x282 <CheckJoystickMovement+0x38>
	else if (JoyStatus_LCL & JOY_LEFT)
	  ReportString = "Joystick Left\r\n";
     272:	6e e1       	ldi	r22, 0x1E	; 30
     274:	71 e0       	ldi	r23, 0x01	; 1
     276:	05 c0       	rjmp	.+10     	; 0x282 <CheckJoystickMovement+0x38>
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
     278:	6e e2       	ldi	r22, 0x2E	; 46
     27a:	71 e0       	ldi	r23, 0x01	; 1
     27c:	02 c0       	rjmp	.+4      	; 0x282 <CheckJoystickMovement+0x38>
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
     27e:	6f e3       	ldi	r22, 0x3F	; 63
     280:	71 e0       	ldi	r23, 0x01	; 1
	else
	  ActionSent = false;

	if ((ReportString != NULL) && (ActionSent == false))
     282:	80 91 7e 01 	lds	r24, 0x017E
     286:	88 23       	and	r24, r24
     288:	31 f4       	brne	.+12     	; 0x296 <CheckJoystickMovement+0x4c>
	{
		ActionSent = true;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	80 93 7e 01 	sts	0x017E, r24

		CDC_Device_SendString(&VirtualSerial_CDC_Interface, ReportString);
     290:	82 e5       	ldi	r24, 0x52	; 82
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	a4 c6       	rjmp	.+3400   	; 0xfde <CDC_Device_SendString>
     296:	08 95       	ret

00000298 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     298:	b5 df       	rcall	.-150    	; 0x204 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     29a:	80 e4       	ldi	r24, 0x40	; 64
     29c:	a2 df       	rcall	.-188    	; 0x1e2 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     29e:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		CheckJoystickMovement();
     2a0:	d4 df       	rcall	.-88     	; 0x24a <CheckJoystickMovement>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     2a2:	82 e5       	ldi	r24, 0x52	; 82
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	0a d7       	rcall	.+3604   	; 0x10bc <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2a8:	82 e5       	ldi	r24, 0x52	; 82
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	ef d6       	rcall	.+3550   	; 0x108c <CDC_Device_USBTask>
		HID_Device_USBTask(&Mouse_HID_Interface);
     2ae:	8d e6       	ldi	r24, 0x6D	; 109
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <HID_Device_USBTask>
		USB_USBTask();
     2b6:	a6 d5       	rcall	.+2892   	; 0xe04 <USB_USBTask>
     2b8:	f3 cf       	rjmp	.-26     	; 0x2a0 <main+0x8>

000002ba <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     2ba:	80 e0       	ldi	r24, 0x00	; 0
}
     2bc:	92 cf       	rjmp	.-220    	; 0x1e2 <LEDs_SetAllLEDs>

000002be <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2be:	80 e4       	ldi	r24, 0x40	; 64
}
     2c0:	90 cf       	rjmp	.-224    	; 0x1e2 <LEDs_SetAllLEDs>

000002c2 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     2c2:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     2c4:	8d e6       	ldi	r24, 0x6D	; 109
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <HID_Device_ConfigureEndpoints>
     2cc:	18 2f       	mov	r17, r24
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2ce:	82 e5       	ldi	r24, 0x52	; 82
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	61 d6       	rcall	.+3266   	; 0xf96 <CDC_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     2d4:	90 91 e2 00 	lds	r25, 0x00E2
     2d8:	94 60       	ori	r25, 0x04	; 4
     2da:	90 93 e2 00 	sts	0x00E2, r25
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     2de:	21 2f       	mov	r18, r17
     2e0:	30 e0       	ldi	r19, 0x00	; 0
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2e2:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     2e4:	28 23       	and	r18, r24
     2e6:	39 23       	and	r19, r25
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2e8:	20 ff       	sbrs	r18, 0
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <EVENT_USB_Device_ConfigurationChanged+0x2e>
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <EVENT_USB_Device_ConfigurationChanged+0x30>
     2f0:	80 e4       	ldi	r24, 0x40	; 64
     2f2:	77 df       	rcall	.-274    	; 0x1e2 <LEDs_SetAllLEDs>
}
     2f4:	1f 91       	pop	r17
     2f6:	08 95       	ret

000002f8 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     2f8:	82 e5       	ldi	r24, 0x52	; 82
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	9f d5       	rcall	.+2878   	; 0xe3c <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
     2fe:	8d e6       	ldi	r24, 0x6D	; 109
     300:	91 e0       	ldi	r25, 0x01	; 1
}
     302:	19 c7       	rjmp	.+3634   	; 0x1136 <HID_Device_ProcessControlRequest>

00000304 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     304:	80 91 7b 01 	lds	r24, 0x017B
     308:	90 91 7c 01 	lds	r25, 0x017C
     30c:	00 97       	sbiw	r24, 0x00	; 0
     30e:	29 f0       	breq	.+10     	; 0x31a <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	90 93 7c 01 	sts	0x017C, r25
     316:	80 93 7b 01 	sts	0x017B, r24
     31a:	08 95       	ret

0000031c <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
	USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;
     328:	e2 2e       	mov	r14, r18
     32a:	e7 01       	movw	r28, r14
     32c:	7e 01       	movw	r14, r28
     32e:	f3 2e       	mov	r15, r19
     330:	e7 01       	movw	r28, r14

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
     332:	5c df       	rcall	.-328    	; 0x1ec <Joystick_GetStatus>
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     334:	9c b1       	in	r25, 0x0c	; 12
     336:	90 95       	com	r25
     338:	94 70       	andi	r25, 0x04	; 4
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
     33a:	87 ff       	sbrs	r24, 7
     33c:	02 c0       	rjmp	.+4      	; 0x342 <CALLBACK_HID_Device_CreateHIDReport+0x26>
	  MouseReport->Y = -1;
     33e:	2f ef       	ldi	r18, 0xFF	; 255
     340:	03 c0       	rjmp	.+6      	; 0x348 <CALLBACK_HID_Device_CreateHIDReport+0x2c>
	else if (JoyStatus_LCL & JOY_DOWN)
     342:	84 ff       	sbrs	r24, 4
     344:	02 c0       	rjmp	.+4      	; 0x34a <CALLBACK_HID_Device_CreateHIDReport+0x2e>
	  MouseReport->Y =  1;
     346:	21 e0       	ldi	r18, 0x01	; 1
     348:	2a 83       	std	Y+2, r18	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
     34a:	86 ff       	sbrs	r24, 6
     34c:	02 c0       	rjmp	.+4      	; 0x352 <CALLBACK_HID_Device_CreateHIDReport+0x36>
	  MouseReport->X = -1;
     34e:	2f ef       	ldi	r18, 0xFF	; 255
     350:	03 c0       	rjmp	.+6      	; 0x358 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
	else if (JoyStatus_LCL & JOY_RIGHT)
     352:	83 ff       	sbrs	r24, 3
     354:	02 c0       	rjmp	.+4      	; 0x35a <CALLBACK_HID_Device_CreateHIDReport+0x3e>
	  MouseReport->X =  1;
     356:	21 e0       	ldi	r18, 0x01	; 1
     358:	29 83       	std	Y+1, r18	; 0x01

	if (JoyStatus_LCL & JOY_PRESS)
     35a:	85 ff       	sbrs	r24, 5
     35c:	03 c0       	rjmp	.+6      	; 0x364 <CALLBACK_HID_Device_CreateHIDReport+0x48>
	  MouseReport->Button |= (1 << 0);
     35e:	88 81       	ld	r24, Y
     360:	81 60       	ori	r24, 0x01	; 1
     362:	88 83       	st	Y, r24

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     364:	99 23       	and	r25, r25
     366:	19 f0       	breq	.+6      	; 0x36e <CALLBACK_HID_Device_CreateHIDReport+0x52>
	  MouseReport->Button |= (1 << 1);
     368:	88 81       	ld	r24, Y
     36a:	82 60       	ori	r24, 0x02	; 2
     36c:	88 83       	st	Y, r24

	*ReportSize = sizeof(USB_MouseReport_Data_t);
     36e:	83 e0       	ldi	r24, 0x03	; 3
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	f8 01       	movw	r30, r16
     374:	91 83       	std	Z+1, r25	; 0x01
     376:	80 83       	st	Z, r24
	return true;
}
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	08 95       	ret

00000388 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Unused (but mandatory for the HID class driver) in this demo, since there are no Host->Device reports
}
     388:	08 95       	ret

0000038a <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     38a:	93 30       	cpi	r25, 0x03	; 3
     38c:	89 f0       	breq	.+34     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x26>
     38e:	94 30       	cpi	r25, 0x04	; 4
     390:	28 f4       	brcc	.+10     	; 0x39c <CALLBACK_USB_GetDescriptor+0x12>
     392:	91 30       	cpi	r25, 0x01	; 1
     394:	49 f1       	breq	.+82     	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x5e>
     396:	92 30       	cpi	r25, 0x02	; 2
     398:	61 f5       	brne	.+88     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x68>
     39a:	05 c0       	rjmp	.+10     	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x1c>
     39c:	91 32       	cpi	r25, 0x21	; 33
     39e:	d1 f0       	breq	.+52     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x4a>
     3a0:	92 32       	cpi	r25, 0x22	; 34
     3a2:	39 f5       	brne	.+78     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x68>
     3a4:	1c c0       	rjmp	.+56     	; 0x3de <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3a6:	2f e5       	ldi	r18, 0x5F	; 95
     3a8:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3aa:	e8 ef       	ldi	r30, 0xF8	; 248
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3ae:	25 c0       	rjmp	.+74     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     3b0:	81 30       	cpi	r24, 0x01	; 1
     3b2:	41 f0       	breq	.+16     	; 0x3c4 <CALLBACK_USB_GetDescriptor+0x3a>
     3b4:	81 30       	cpi	r24, 0x01	; 1
     3b6:	18 f0       	brcs	.+6      	; 0x3be <CALLBACK_USB_GetDescriptor+0x34>
     3b8:	82 30       	cpi	r24, 0x02	; 2
     3ba:	d9 f4       	brne	.+54     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x68>
     3bc:	06 c0       	rjmp	.+12     	; 0x3ca <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3be:	e7 e5       	ldi	r30, 0x57	; 87
     3c0:	f1 e0       	ldi	r31, 0x01	; 1
     3c2:	05 c0       	rjmp	.+10     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3c4:	eb e5       	ldi	r30, 0x5B	; 91
     3c6:	f1 e0       	ldi	r31, 0x01	; 1
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3ca:	e5 e7       	ldi	r30, 0x75	; 117
     3cc:	f1 e0       	ldi	r31, 0x01	; 1
     3ce:	24 91       	lpm	r18, Z+
     3d0:	30 e0       	ldi	r19, 0x00	; 0
					break;
     3d2:	13 c0       	rjmp	.+38     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     3d4:	29 e0       	ldi	r18, 0x09	; 9
     3d6:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
     3d8:	e7 e4       	ldi	r30, 0x47	; 71
     3da:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3dc:	0e c0       	rjmp	.+28     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
     3de:	2a e3       	ldi	r18, 0x3A	; 58
     3e0:	30 e0       	ldi	r19, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
     3e2:	ec ea       	ldi	r30, 0xAC	; 172
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(MouseReport);
			break;
     3e6:	09 c0       	rjmp	.+18     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3e8:	22 e1       	ldi	r18, 0x12	; 18
     3ea:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     3ec:	e6 ee       	ldi	r30, 0xE6	; 230
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	04 c0       	rjmp	.+8      	; 0x3fa <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3f6:	e0 e0       	ldi	r30, 0x00	; 0
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
     3fa:	da 01       	movw	r26, r20
     3fc:	11 96       	adiw	r26, 0x01	; 1
     3fe:	fc 93       	st	X, r31
     400:	ee 93       	st	-X, r30
	return Size;
}
     402:	c9 01       	movw	r24, r18
     404:	08 95       	ret

00000406 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     406:	8f 92       	push	r8
     408:	9f 92       	push	r9
     40a:	bf 92       	push	r11
     40c:	cf 92       	push	r12
     40e:	df 92       	push	r13
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	df 93       	push	r29
     41a:	cf 93       	push	r28
     41c:	0f 92       	push	r0
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	e8 2e       	mov	r14, r24
     424:	4b 01       	movw	r8, r22
     426:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     428:	99 83       	std	Y+1, r25	; 0x01
     42a:	f3 d1       	rcall	.+998    	; 0x812 <Endpoint_WaitUntilReady>
     42c:	b8 2e       	mov	r11, r24
     42e:	99 81       	ldd	r25, Y+1	; 0x01
     430:	88 23       	and	r24, r24
     432:	c1 f5       	brne	.+112    	; 0x4a4 <Endpoint_Write_Stream_LE+0x9e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     434:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     436:	01 15       	cp	r16, r1
     438:	11 05       	cpc	r17, r1
     43a:	39 f0       	breq	.+14     	; 0x44a <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     43c:	f8 01       	movw	r30, r16
     43e:	20 81       	ld	r18, Z
     440:	31 81       	ldd	r19, Z+1	; 0x01
     442:	82 1a       	sub	r8, r18
     444:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     446:	e2 0e       	add	r14, r18
     448:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     44a:	cc 24       	eor	r12, r12
     44c:	dd 24       	eor	r13, r13
     44e:	25 c0       	rjmp	.+74     	; 0x49a <Endpoint_Write_Stream_LE+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     450:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     454:	85 fd       	sbrc	r24, 5
     456:	16 c0       	rjmp	.+44     	; 0x484 <Endpoint_Write_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     458:	80 91 e8 00 	lds	r24, 0x00E8
     45c:	8e 77       	andi	r24, 0x7E	; 126
     45e:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     462:	01 15       	cp	r16, r1
     464:	11 05       	cpc	r17, r1
     466:	51 f0       	breq	.+20     	; 0x47c <Endpoint_Write_Stream_LE+0x76>
			{
				*BytesProcessed += BytesInTransfer;
     468:	f8 01       	movw	r30, r16
     46a:	80 81       	ld	r24, Z
     46c:	91 81       	ldd	r25, Z+1	; 0x01
     46e:	8c 0d       	add	r24, r12
     470:	9d 1d       	adc	r25, r13
     472:	91 83       	std	Z+1, r25	; 0x01
     474:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     476:	25 e0       	ldi	r18, 0x05	; 5
     478:	b2 2e       	mov	r11, r18
     47a:	14 c0       	rjmp	.+40     	; 0x4a4 <Endpoint_Write_Stream_LE+0x9e>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     47c:	ca d1       	rcall	.+916    	; 0x812 <Endpoint_WaitUntilReady>
     47e:	88 23       	and	r24, r24
     480:	61 f0       	breq	.+24     	; 0x49a <Endpoint_Write_Stream_LE+0x94>
     482:	0f c0       	rjmp	.+30     	; 0x4a2 <Endpoint_Write_Stream_LE+0x9c>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     484:	f7 01       	movw	r30, r14
     486:	81 91       	ld	r24, Z+
     488:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     48a:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     48e:	08 94       	sec
     490:	81 08       	sbc	r8, r1
     492:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     494:	08 94       	sec
     496:	c1 1c       	adc	r12, r1
     498:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     49a:	81 14       	cp	r8, r1
     49c:	91 04       	cpc	r9, r1
     49e:	c1 f6       	brne	.-80     	; 0x450 <Endpoint_Write_Stream_LE+0x4a>
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <Endpoint_Write_Stream_LE+0x9e>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     4a2:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     4a4:	8b 2d       	mov	r24, r11
     4a6:	0f 90       	pop	r0
     4a8:	cf 91       	pop	r28
     4aa:	df 91       	pop	r29
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	df 90       	pop	r13
     4b6:	cf 90       	pop	r12
     4b8:	bf 90       	pop	r11
     4ba:	9f 90       	pop	r9
     4bc:	8f 90       	pop	r8
     4be:	08 95       	ret

000004c0 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     4c0:	48 2f       	mov	r20, r24
     4c2:	59 2f       	mov	r21, r25
     4c4:	fa 01       	movw	r30, r20
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     4c6:	80 91 8d 01 	lds	r24, 0x018D
     4ca:	90 91 8e 01 	lds	r25, 0x018E
     4ce:	86 17       	cp	r24, r22
     4d0:	97 07       	cpc	r25, r23
     4d2:	18 f4       	brcc	.+6      	; 0x4da <Endpoint_Write_Control_Stream_LE+0x1a>
     4d4:	bc 01       	movw	r22, r24
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	3c c0       	rjmp	.+120    	; 0x552 <Endpoint_Write_Control_Stream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     4da:	61 15       	cp	r22, r1
     4dc:	71 05       	cpc	r23, r1
     4de:	d9 f7       	brne	.-10     	; 0x4d6 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4e0:	80 91 e8 00 	lds	r24, 0x00E8
     4e4:	8e 77       	andi	r24, 0x7E	; 126
     4e6:	80 93 e8 00 	sts	0x00E8, r24
     4ea:	f5 cf       	rjmp	.-22     	; 0x4d6 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4ec:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4f0:	88 23       	and	r24, r24
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <Endpoint_Write_Control_Stream_LE+0x36>
     4f4:	44 c0       	rjmp	.+136    	; 0x57e <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4f6:	85 30       	cpi	r24, 0x05	; 5
     4f8:	f1 f1       	breq	.+124    	; 0x576 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4fa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4fe:	83 fd       	sbrc	r24, 3
     500:	3c c0       	rjmp	.+120    	; 0x57a <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     502:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     506:	82 fd       	sbrc	r24, 2
     508:	30 c0       	rjmp	.+96     	; 0x56a <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     50a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     50e:	80 ff       	sbrs	r24, 0
     510:	20 c0       	rjmp	.+64     	; 0x552 <Endpoint_Write_Control_Stream_LE+0x92>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     512:	90 91 f3 00 	lds	r25, 0x00F3
     516:	80 91 f2 00 	lds	r24, 0x00F2
     51a:	39 2f       	mov	r19, r25
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	82 2b       	or	r24, r18
     522:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     524:	06 c0       	rjmp	.+12     	; 0x532 <Endpoint_Write_Control_Stream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     526:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     528:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     52c:	61 50       	subi	r22, 0x01	; 1
     52e:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     530:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     532:	61 15       	cp	r22, r1
     534:	71 05       	cpc	r23, r1
     536:	19 f0       	breq	.+6      	; 0x53e <Endpoint_Write_Control_Stream_LE+0x7e>
     538:	88 30       	cpi	r24, 0x08	; 8
     53a:	91 05       	cpc	r25, r1
     53c:	a0 f3       	brcs	.-24     	; 0x526 <Endpoint_Write_Control_Stream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	88 30       	cpi	r24, 0x08	; 8
     542:	91 05       	cpc	r25, r1
     544:	09 f0       	breq	.+2      	; 0x548 <Endpoint_Write_Control_Stream_LE+0x88>
     546:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     548:	80 91 e8 00 	lds	r24, 0x00E8
     54c:	8e 77       	andi	r24, 0x7E	; 126
     54e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     552:	61 15       	cp	r22, r1
     554:	71 05       	cpc	r23, r1
     556:	51 f6       	brne	.-108    	; 0x4ec <Endpoint_Write_Control_Stream_LE+0x2c>
     558:	44 23       	and	r20, r20
     55a:	41 f6       	brne	.-112    	; 0x4ec <Endpoint_Write_Control_Stream_LE+0x2c>
     55c:	06 c0       	rjmp	.+12     	; 0x56a <Endpoint_Write_Control_Stream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     55e:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     562:	88 23       	and	r24, r24
     564:	61 f0       	breq	.+24     	; 0x57e <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     566:	85 30       	cpi	r24, 0x05	; 5
     568:	61 f0       	breq	.+24     	; 0x582 <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     56a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     56e:	82 ff       	sbrs	r24, 2
     570:	f6 cf       	rjmp	.-20     	; 0x55e <Endpoint_Write_Control_Stream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     582:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     584:	08 95       	ret

00000586 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     586:	61 15       	cp	r22, r1
     588:	71 05       	cpc	r23, r1
     58a:	59 f5       	brne	.+86     	; 0x5e2 <Endpoint_Read_Control_Stream_LE+0x5c>
     58c:	25 c0       	rjmp	.+74     	; 0x5d8 <Endpoint_Read_Control_Stream_LE+0x52>
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     58e:	40 91 86 01 	lds	r20, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     592:	44 23       	and	r20, r20
     594:	d1 f1       	breq	.+116    	; 0x60a <Endpoint_Read_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     596:	45 30       	cpi	r20, 0x05	; 5
     598:	a1 f1       	breq	.+104    	; 0x602 <Endpoint_Read_Control_Stream_LE+0x7c>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     59a:	40 91 e8 00 	lds	r20, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     59e:	43 fd       	sbrc	r20, 3
     5a0:	32 c0       	rjmp	.+100    	; 0x606 <Endpoint_Read_Control_Stream_LE+0x80>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5a2:	40 91 e8 00 	lds	r20, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     5a6:	42 ff       	sbrs	r20, 2
     5a8:	f2 cf       	rjmp	.-28     	; 0x58e <Endpoint_Read_Control_Stream_LE+0x8>
     5aa:	e8 2f       	mov	r30, r24
     5ac:	f9 2f       	mov	r31, r25
     5ae:	07 c0       	rjmp	.+14     	; 0x5be <Endpoint_Read_Control_Stream_LE+0x38>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     5b0:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     5b4:	81 93       	st	Z+, r24
     5b6:	cf 01       	movw	r24, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     5b8:	61 50       	subi	r22, 0x01	; 1
     5ba:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     5bc:	69 f0       	breq	.+26     	; 0x5d8 <Endpoint_Read_Control_Stream_LE+0x52>
     5be:	cf 01       	movw	r24, r30
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     5c0:	50 91 f3 00 	lds	r21, 0x00F3
     5c4:	40 91 f2 00 	lds	r20, 0x00F2
     5c8:	35 2f       	mov	r19, r21
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	42 2b       	or	r20, r18
     5d0:	53 2b       	or	r21, r19
     5d2:	41 15       	cp	r20, r1
     5d4:	51 05       	cpc	r21, r1
     5d6:	61 f7       	brne	.-40     	; 0x5b0 <Endpoint_Read_Control_Stream_LE+0x2a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5d8:	40 91 e8 00 	lds	r20, 0x00E8
     5dc:	4b 77       	andi	r20, 0x7B	; 123
     5de:	40 93 e8 00 	sts	0x00E8, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     5e2:	61 15       	cp	r22, r1
     5e4:	71 05       	cpc	r23, r1
     5e6:	99 f6       	brne	.-90     	; 0x58e <Endpoint_Read_Control_Stream_LE+0x8>
     5e8:	06 c0       	rjmp	.+12     	; 0x5f6 <Endpoint_Read_Control_Stream_LE+0x70>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5ea:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5ee:	88 23       	and	r24, r24
     5f0:	61 f0       	breq	.+24     	; 0x60a <Endpoint_Read_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5f2:	85 30       	cpi	r24, 0x05	; 5
     5f4:	61 f0       	breq	.+24     	; 0x60e <Endpoint_Read_Control_Stream_LE+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5f6:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     5fa:	80 ff       	sbrs	r24, 0
     5fc:	f6 cf       	rjmp	.-20     	; 0x5ea <Endpoint_Read_Control_Stream_LE+0x64>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     602:	83 e0       	ldi	r24, 0x03	; 3
     604:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     60e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     610:	08 95       	ret

00000612 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     612:	e8 2f       	mov	r30, r24
     614:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     616:	80 91 8d 01 	lds	r24, 0x018D
     61a:	90 91 8e 01 	lds	r25, 0x018E
     61e:	86 17       	cp	r24, r22
     620:	97 07       	cpc	r25, r23
     622:	18 f4       	brcc	.+6      	; 0x62a <Endpoint_Write_Control_PStream_LE+0x18>
     624:	bc 01       	movw	r22, r24
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	3e c0       	rjmp	.+124    	; 0x6a6 <Endpoint_Write_Control_PStream_LE+0x94>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     62a:	61 15       	cp	r22, r1
     62c:	71 05       	cpc	r23, r1
     62e:	d9 f7       	brne	.-10     	; 0x626 <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     630:	80 91 e8 00 	lds	r24, 0x00E8
     634:	8e 77       	andi	r24, 0x7E	; 126
     636:	80 93 e8 00 	sts	0x00E8, r24
     63a:	f5 cf       	rjmp	.-22     	; 0x626 <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     63c:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     640:	88 23       	and	r24, r24
     642:	09 f4       	brne	.+2      	; 0x646 <Endpoint_Write_Control_PStream_LE+0x34>
     644:	46 c0       	rjmp	.+140    	; 0x6d2 <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     646:	85 30       	cpi	r24, 0x05	; 5
     648:	09 f4       	brne	.+2      	; 0x64c <Endpoint_Write_Control_PStream_LE+0x3a>
     64a:	3f c0       	rjmp	.+126    	; 0x6ca <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     64c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     650:	83 fd       	sbrc	r24, 3
     652:	3d c0       	rjmp	.+122    	; 0x6ce <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     654:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     658:	82 fd       	sbrc	r24, 2
     65a:	31 c0       	rjmp	.+98     	; 0x6be <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     65c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     660:	80 ff       	sbrs	r24, 0
     662:	21 c0       	rjmp	.+66     	; 0x6a6 <Endpoint_Write_Control_PStream_LE+0x94>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     664:	90 91 f3 00 	lds	r25, 0x00F3
     668:	80 91 f2 00 	lds	r24, 0x00F2
     66c:	39 2f       	mov	r19, r25
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	82 2b       	or	r24, r18
     674:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     676:	07 c0       	rjmp	.+14     	; 0x686 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     678:	44 91       	lpm	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     67a:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     67e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     680:	61 50       	subi	r22, 0x01	; 1
     682:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     684:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     686:	61 15       	cp	r22, r1
     688:	71 05       	cpc	r23, r1
     68a:	19 f0       	breq	.+6      	; 0x692 <Endpoint_Write_Control_PStream_LE+0x80>
     68c:	88 30       	cpi	r24, 0x08	; 8
     68e:	91 05       	cpc	r25, r1
     690:	98 f3       	brcs	.-26     	; 0x678 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     692:	41 e0       	ldi	r20, 0x01	; 1
     694:	88 30       	cpi	r24, 0x08	; 8
     696:	91 05       	cpc	r25, r1
     698:	09 f0       	breq	.+2      	; 0x69c <Endpoint_Write_Control_PStream_LE+0x8a>
     69a:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     69c:	80 91 e8 00 	lds	r24, 0x00E8
     6a0:	8e 77       	andi	r24, 0x7E	; 126
     6a2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     6a6:	61 15       	cp	r22, r1
     6a8:	71 05       	cpc	r23, r1
     6aa:	41 f6       	brne	.-112    	; 0x63c <Endpoint_Write_Control_PStream_LE+0x2a>
     6ac:	44 23       	and	r20, r20
     6ae:	31 f6       	brne	.-116    	; 0x63c <Endpoint_Write_Control_PStream_LE+0x2a>
     6b0:	06 c0       	rjmp	.+12     	; 0x6be <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6b2:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6b6:	88 23       	and	r24, r24
     6b8:	61 f0       	breq	.+24     	; 0x6d2 <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6ba:	85 30       	cpi	r24, 0x05	; 5
     6bc:	61 f0       	breq	.+24     	; 0x6d6 <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6be:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     6c2:	82 ff       	sbrs	r24, 2
     6c4:	f6 cf       	rjmp	.-20     	; 0x6b2 <Endpoint_Write_Control_PStream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6ca:	83 e0       	ldi	r24, 0x03	; 3
     6cc:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6d6:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     6d8:	08 95       	ret

000006da <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     6da:	98 2f       	mov	r25, r24
     6dc:	2c c0       	rjmp	.+88     	; 0x736 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     6de:	29 2f       	mov	r18, r25
     6e0:	2f 70       	andi	r18, 0x0F	; 15
     6e2:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     6e6:	98 17       	cp	r25, r24
     6e8:	39 f0       	breq	.+14     	; 0x6f8 <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     6ea:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     6ee:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     6f2:	50 91 f0 00 	lds	r21, 0x00F0
     6f6:	03 c0       	rjmp	.+6      	; 0x6fe <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     6f8:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     6fa:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     6fc:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     6fe:	21 ff       	sbrs	r18, 1
     700:	19 c0       	rjmp	.+50     	; 0x734 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     702:	30 91 eb 00 	lds	r19, 0x00EB
     706:	3e 7f       	andi	r19, 0xFE	; 254
     708:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     70c:	30 91 ed 00 	lds	r19, 0x00ED
     710:	3d 7f       	andi	r19, 0xFD	; 253
     712:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     716:	30 91 eb 00 	lds	r19, 0x00EB
     71a:	31 60       	ori	r19, 0x01	; 1
     71c:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     720:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     724:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     728:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     72c:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     730:	27 ff       	sbrs	r18, 7
     732:	08 c0       	rjmp	.+16     	; 0x744 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     734:	9f 5f       	subi	r25, 0xFF	; 255
     736:	97 30       	cpi	r25, 0x07	; 7
     738:	90 f2       	brcs	.-92     	; 0x6de <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     73a:	8f 70       	andi	r24, 0x0F	; 15
     73c:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     744:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     746:	08 95       	ret

00000748 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     756:	e8 2e       	mov	r14, r24
     758:	e7 01       	movw	r28, r14
     75a:	7e 01       	movw	r14, r28
     75c:	f9 2e       	mov	r15, r25
     75e:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     760:	00 e0       	ldi	r16, 0x00	; 0
     762:	2a c0       	rjmp	.+84     	; 0x7b8 <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     764:	98 81       	ld	r25, Y
     766:	99 23       	and	r25, r25
     768:	29 f1       	breq	.+74     	; 0x7b4 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     76a:	6b 81       	ldd	r22, Y+3	; 0x03
     76c:	e9 81       	ldd	r30, Y+1	; 0x01
     76e:	fa 81       	ldd	r31, Y+2	; 0x02
     770:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     772:	89 2f       	mov	r24, r25
     774:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     776:	87 30       	cpi	r24, 0x07	; 7
     778:	18 f5       	brcc	.+70     	; 0x7c0 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     77a:	62 95       	swap	r22
     77c:	66 0f       	add	r22, r22
     77e:	66 0f       	add	r22, r22
     780:	60 7c       	andi	r22, 0xC0	; 192
     782:	99 1f       	adc	r25, r25
     784:	99 27       	eor	r25, r25
     786:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     788:	69 2b       	or	r22, r25
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	10 f0       	brcs	.+4      	; 0x792 <Endpoint_ConfigureEndpointTable+0x4a>
     78e:	96 e0       	ldi	r25, 0x06	; 6
     790:	01 c0       	rjmp	.+2      	; 0x794 <Endpoint_ConfigureEndpointTable+0x4c>
     792:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     794:	28 e0       	ldi	r18, 0x08	; 8
     796:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	03 c0       	rjmp	.+6      	; 0x7a2 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     79c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     79e:	22 0f       	add	r18, r18
     7a0:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     7a2:	2e 17       	cp	r18, r30
     7a4:	3f 07       	cpc	r19, r31
     7a6:	d0 f3       	brcs	.-12     	; 0x79c <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     7a8:	42 95       	swap	r20
     7aa:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7ac:	49 2b       	or	r20, r25
     7ae:	95 df       	rcall	.-214    	; 0x6da <Endpoint_ConfigureEndpoint_Prv>
     7b0:	88 23       	and	r24, r24
     7b2:	31 f0       	breq	.+12     	; 0x7c0 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     7b4:	0f 5f       	subi	r16, 0xFF	; 255
     7b6:	25 96       	adiw	r28, 0x05	; 5
     7b8:	01 17       	cp	r16, r17
     7ba:	a0 f2       	brcs	.-88     	; 0x764 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	01 c0       	rjmp	.+2      	; 0x7c2 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     7c0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	08 95       	ret

000007d0 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     7d0:	80 91 87 01 	lds	r24, 0x0187
     7d4:	87 ff       	sbrs	r24, 7
     7d6:	13 c0       	rjmp	.+38     	; 0x7fe <Endpoint_ClearStatusStage+0x2e>
     7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7da:	80 91 86 01 	lds	r24, 0x0186
     7de:	88 23       	and	r24, r24
     7e0:	b9 f0       	breq	.+46     	; 0x810 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7e2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     7e6:	82 ff       	sbrs	r24, 2
     7e8:	f8 cf       	rjmp	.-16     	; 0x7da <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7ea:	80 91 e8 00 	lds	r24, 0x00E8
     7ee:	8b 77       	andi	r24, 0x7B	; 123
     7f0:	80 93 e8 00 	sts	0x00E8, r24
     7f4:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7f6:	80 91 86 01 	lds	r24, 0x0186
     7fa:	88 23       	and	r24, r24
     7fc:	49 f0       	breq	.+18     	; 0x810 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7fe:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     802:	80 ff       	sbrs	r24, 0
     804:	f8 cf       	rjmp	.-16     	; 0x7f6 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     806:	80 91 e8 00 	lds	r24, 0x00E8
     80a:	8e 77       	andi	r24, 0x7E	; 126
     80c:	80 93 e8 00 	sts	0x00E8, r24
     810:	08 95       	ret

00000812 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     812:	80 91 e4 00 	lds	r24, 0x00E4
     816:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     81a:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     81c:	20 91 ec 00 	lds	r18, 0x00EC
     820:	20 ff       	sbrs	r18, 0
     822:	26 c0       	rjmp	.+76     	; 0x870 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     824:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     828:	20 fd       	sbrc	r18, 0
     82a:	16 c0       	rjmp	.+44     	; 0x858 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     82c:	20 91 86 01 	lds	r18, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     830:	22 23       	and	r18, r18
     832:	a1 f0       	breq	.+40     	; 0x85c <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     834:	25 30       	cpi	r18, 0x05	; 5
     836:	a1 f0       	breq	.+40     	; 0x860 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     838:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     83c:	25 fd       	sbrc	r18, 5
     83e:	12 c0       	rjmp	.+36     	; 0x864 <Endpoint_WaitUntilReady+0x52>
     840:	20 91 e4 00 	lds	r18, 0x00E4
     844:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     848:	28 17       	cp	r18, r24
     84a:	39 07       	cpc	r19, r25
     84c:	39 f3       	breq	.-50     	; 0x81c <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     84e:	44 23       	and	r20, r20
     850:	59 f0       	breq	.+22     	; 0x868 <Endpoint_WaitUntilReady+0x56>
     852:	41 50       	subi	r20, 0x01	; 1
     854:	c9 01       	movw	r24, r18
     856:	e2 cf       	rjmp	.-60     	; 0x81c <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     860:	83 e0       	ldi	r24, 0x03	; 3
     862:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     868:	84 e0       	ldi	r24, 0x04	; 4
     86a:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     86c:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     86e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     870:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     874:	22 ff       	sbrs	r18, 2
     876:	da cf       	rjmp	.-76     	; 0x82c <Endpoint_WaitUntilReady+0x1a>
     878:	f9 cf       	rjmp	.-14     	; 0x86c <Endpoint_WaitUntilReady+0x5a>

0000087a <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     882:	4b d0       	rcall	.+150    	; 0x91a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     884:	52 d0       	rcall	.+164    	; 0x92a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     886:	c8 ed       	ldi	r28, 0xD8	; 216
     888:	d0 e0       	ldi	r29, 0x00	; 0
     88a:	88 81       	ld	r24, Y
     88c:	8f 77       	andi	r24, 0x7F	; 127
     88e:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     890:	88 81       	ld	r24, Y
     892:	80 68       	ori	r24, 0x80	; 128
     894:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     896:	88 81       	ld	r24, Y
     898:	8f 7d       	andi	r24, 0xDF	; 223
     89a:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     89c:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     89e:	10 92 86 01 	sts	0x0186, r1
	USB_Device_ConfigurationNumber  = 0;
     8a2:	10 92 82 01 	sts	0x0182, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     8a6:	10 92 84 01 	sts	0x0184, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     8aa:	10 92 83 01 	sts	0x0183, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     8ae:	00 ee       	ldi	r16, 0xE0	; 224
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	f8 01       	movw	r30, r16
     8b4:	80 81       	ld	r24, Z
     8b6:	8b 7f       	andi	r24, 0xFB	; 251
     8b8:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     8ba:	88 81       	ld	r24, Y
     8bc:	81 60       	ori	r24, 0x01	; 1
     8be:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	42 e0       	ldi	r20, 0x02	; 2
     8c6:	09 df       	rcall	.-494    	; 0x6da <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8c8:	e1 ee       	ldi	r30, 0xE1	; 225
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	8e 7f       	andi	r24, 0xFE	; 254
     8d0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8d2:	e2 ee       	ldi	r30, 0xE2	; 226
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	81 60       	ori	r24, 0x01	; 1
     8da:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     8dc:	80 81       	ld	r24, Z
     8de:	88 60       	ori	r24, 0x08	; 8
     8e0:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     8e2:	f8 01       	movw	r30, r16
     8e4:	80 81       	ld	r24, Z
     8e6:	8e 7f       	andi	r24, 0xFE	; 254
     8e8:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     8ea:	88 81       	ld	r24, Y
     8ec:	80 61       	ori	r24, 0x10	; 16
     8ee:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	08 95       	ret

000008fa <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     8fa:	e8 ed       	ldi	r30, 0xD8	; 216
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
     900:	8f 7e       	andi	r24, 0xEF	; 239
     902:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     904:	e7 ed       	ldi	r30, 0xD7	; 215
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	80 81       	ld	r24, Z
     90a:	81 60       	ori	r24, 0x01	; 1
     90c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     90e:	84 e0       	ldi	r24, 0x04	; 4
     910:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 85 01 	sts	0x0185, r24

	USB_ResetInterface();
}
     918:	b0 cf       	rjmp	.-160    	; 0x87a <USB_ResetInterface>

0000091a <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     91a:	e8 ed       	ldi	r30, 0xD8	; 216
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	8e 7f       	andi	r24, 0xFE	; 254
     922:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     924:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     928:	08 95       	ret

0000092a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     92a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     92e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     932:	08 95       	ret

00000934 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     934:	1f 92       	push	r1
     936:	0f 92       	push	r0
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	0f 92       	push	r0
     93c:	11 24       	eor	r1, r1
     93e:	2f 93       	push	r18
     940:	3f 93       	push	r19
     942:	4f 93       	push	r20
     944:	5f 93       	push	r21
     946:	6f 93       	push	r22
     948:	7f 93       	push	r23
     94a:	8f 93       	push	r24
     94c:	9f 93       	push	r25
     94e:	af 93       	push	r26
     950:	bf 93       	push	r27
     952:	ef 93       	push	r30
     954:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     956:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     95a:	82 ff       	sbrs	r24, 2
     95c:	0a c0       	rjmp	.+20     	; 0x972 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     95e:	80 91 e2 00 	lds	r24, 0x00E2
     962:	82 ff       	sbrs	r24, 2
     964:	06 c0       	rjmp	.+12     	; 0x972 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     966:	80 91 e1 00 	lds	r24, 0x00E1
     96a:	8b 7f       	andi	r24, 0xFB	; 251
     96c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     970:	c9 dc       	rcall	.-1646   	; 0x304 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     972:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     976:	80 ff       	sbrs	r24, 0
     978:	1d c0       	rjmp	.+58     	; 0x9b4 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     97a:	80 91 d8 00 	lds	r24, 0x00D8
     97e:	80 ff       	sbrs	r24, 0
     980:	19 c0       	rjmp	.+50     	; 0x9b4 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     982:	80 91 da 00 	lds	r24, 0x00DA
     986:	8e 7f       	andi	r24, 0xFE	; 254
     988:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     98c:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     990:	80 ff       	sbrs	r24, 0
     992:	0c c0       	rjmp	.+24     	; 0x9ac <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     994:	80 e1       	ldi	r24, 0x10	; 16
     996:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     998:	82 e1       	ldi	r24, 0x12	; 18
     99a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     99c:	09 b4       	in	r0, 0x29	; 41
     99e:	00 fe       	sbrs	r0, 0
     9a0:	fd cf       	rjmp	.-6      	; 0x99c <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	80 93 86 01 	sts	0x0186, r24
			EVENT_USB_Device_Connect();
     9a8:	88 dc       	rcall	.-1776   	; 0x2ba <EVENT_USB_Device_Connect>
     9aa:	04 c0       	rjmp	.+8      	; 0x9b4 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     9ac:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     9ae:	10 92 86 01 	sts	0x0186, r1
			EVENT_USB_Device_Disconnect();
     9b2:	85 dc       	rcall	.-1782   	; 0x2be <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     9b4:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     9b8:	80 ff       	sbrs	r24, 0
     9ba:	18 c0       	rjmp	.+48     	; 0x9ec <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     9bc:	80 91 e2 00 	lds	r24, 0x00E2
     9c0:	80 ff       	sbrs	r24, 0
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9c4:	80 91 e2 00 	lds	r24, 0x00E2
     9c8:	8e 7f       	andi	r24, 0xFE	; 254
     9ca:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9ce:	80 91 e2 00 	lds	r24, 0x00E2
     9d2:	80 61       	ori	r24, 0x10	; 16
     9d4:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     9d8:	80 91 d8 00 	lds	r24, 0x00D8
     9dc:	80 62       	ori	r24, 0x20	; 32
     9de:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     9e2:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     9e4:	85 e0       	ldi	r24, 0x05	; 5
     9e6:	80 93 86 01 	sts	0x0186, r24
		EVENT_USB_Device_Suspend();
     9ea:	0b d2       	rcall	.+1046   	; 0xe02 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     9ec:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     9f0:	84 ff       	sbrs	r24, 4
     9f2:	2d c0       	rjmp	.+90     	; 0xa4e <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     9f4:	80 91 e2 00 	lds	r24, 0x00E2
     9f8:	84 ff       	sbrs	r24, 4
     9fa:	29 c0       	rjmp	.+82     	; 0xa4e <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9fc:	80 e1       	ldi	r24, 0x10	; 16
     9fe:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a00:	82 e1       	ldi	r24, 0x12	; 18
     a02:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a04:	09 b4       	in	r0, 0x29	; 41
     a06:	00 fe       	sbrs	r0, 0
     a08:	fd cf       	rjmp	.-6      	; 0xa04 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a0a:	80 91 d8 00 	lds	r24, 0x00D8
     a0e:	8f 7d       	andi	r24, 0xDF	; 223
     a10:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     a14:	80 91 e1 00 	lds	r24, 0x00E1
     a18:	8f 7e       	andi	r24, 0xEF	; 239
     a1a:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     a1e:	80 91 e2 00 	lds	r24, 0x00E2
     a22:	8f 7e       	andi	r24, 0xEF	; 239
     a24:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a28:	80 91 e2 00 	lds	r24, 0x00E2
     a2c:	81 60       	ori	r24, 0x01	; 1
     a2e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     a32:	80 91 82 01 	lds	r24, 0x0182
     a36:	88 23       	and	r24, r24
     a38:	21 f4       	brne	.+8      	; 0xa42 <__vector_10+0x10e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a3a:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     a3e:	87 ff       	sbrs	r24, 7
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <__vector_10+0x112>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <__vector_10+0x114>
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	80 93 86 01 	sts	0x0186, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     a4c:	da d1       	rcall	.+948    	; 0xe02 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     a4e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a52:	83 ff       	sbrs	r24, 3
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__vector_10+0x170>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     a56:	80 91 e2 00 	lds	r24, 0x00E2
     a5a:	83 ff       	sbrs	r24, 3
     a5c:	23 c0       	rjmp	.+70     	; 0xaa4 <__vector_10+0x170>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     a5e:	80 91 e1 00 	lds	r24, 0x00E1
     a62:	87 7f       	andi	r24, 0xF7	; 247
     a64:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	80 93 86 01 	sts	0x0186, r24
		USB_Device_ConfigurationNumber = 0;
     a6e:	10 92 82 01 	sts	0x0182, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a72:	80 91 e1 00 	lds	r24, 0x00E1
     a76:	8e 7f       	andi	r24, 0xFE	; 254
     a78:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a7c:	80 91 e2 00 	lds	r24, 0x00E2
     a80:	8e 7f       	andi	r24, 0xFE	; 254
     a82:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a86:	80 91 e2 00 	lds	r24, 0x00E2
     a8a:	80 61       	ori	r24, 0x10	; 16
     a8c:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	42 e0       	ldi	r20, 0x02	; 2
     a96:	21 de       	rcall	.-958    	; 0x6da <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a98:	80 91 f0 00 	lds	r24, 0x00F0
     a9c:	88 60       	ori	r24, 0x08	; 8
     a9e:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     aa2:	af d1       	rcall	.+862    	; 0xe02 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     aa4:	ff 91       	pop	r31
     aa6:	ef 91       	pop	r30
     aa8:	bf 91       	pop	r27
     aaa:	af 91       	pop	r26
     aac:	9f 91       	pop	r25
     aae:	8f 91       	pop	r24
     ab0:	7f 91       	pop	r23
     ab2:	6f 91       	pop	r22
     ab4:	5f 91       	pop	r21
     ab6:	4f 91       	pop	r20
     ab8:	3f 91       	pop	r19
     aba:	2f 91       	pop	r18
     abc:	0f 90       	pop	r0
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	0f 90       	pop	r0
     ac2:	1f 90       	pop	r1
     ac4:	18 95       	reti

00000ac6 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	11 24       	eor	r1, r1
     ad0:	1f 93       	push	r17
     ad2:	2f 93       	push	r18
     ad4:	3f 93       	push	r19
     ad6:	4f 93       	push	r20
     ad8:	5f 93       	push	r21
     ada:	6f 93       	push	r22
     adc:	7f 93       	push	r23
     ade:	8f 93       	push	r24
     ae0:	9f 93       	push	r25
     ae2:	af 93       	push	r26
     ae4:	bf 93       	push	r27
     ae6:	ef 93       	push	r30
     ae8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     aea:	10 91 e9 00 	lds	r17, 0x00E9
     aee:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     af0:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     af4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     af8:	80 91 f0 00 	lds	r24, 0x00F0
     afc:	87 7f       	andi	r24, 0xF7	; 247
     afe:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     b02:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     b04:	1b d0       	rcall	.+54     	; 0xb3c <USB_Device_ProcessControlRequest>
     b06:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     b0a:	80 91 f0 00 	lds	r24, 0x00F0
     b0e:	88 60       	ori	r24, 0x08	; 8
     b10:	80 93 f0 00 	sts	0x00F0, r24
     b14:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	bf 91       	pop	r27
     b1e:	af 91       	pop	r26
     b20:	9f 91       	pop	r25
     b22:	8f 91       	pop	r24
     b24:	7f 91       	pop	r23
     b26:	6f 91       	pop	r22
     b28:	5f 91       	pop	r21
     b2a:	4f 91       	pop	r20
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	1f 91       	pop	r17
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0
     b38:	1f 90       	pop	r1
     b3a:	18 95       	reti

00000b3c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b3c:	1f 93       	push	r17
     b3e:	df 93       	push	r29
     b40:	cf 93       	push	r28
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	ac 97       	sbiw	r28, 0x2c	; 44
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     b52:	e7 e8       	ldi	r30, 0x87	; 135
     b54:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     b56:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     b5a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	ef 38       	cpi	r30, 0x8F	; 143
     b60:	f2 07       	cpc	r31, r18
     b62:	c9 f7       	brne	.-14     	; 0xb56 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     b64:	c9 db       	rcall	.-2158   	; 0x2f8 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b66:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     b6a:	83 ff       	sbrs	r24, 3
     b6c:	32 c1       	rjmp	.+612    	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     b6e:	80 91 87 01 	lds	r24, 0x0187

		switch (USB_ControlRequest.bRequest)
     b72:	20 91 88 01 	lds	r18, 0x0188
     b76:	25 30       	cpi	r18, 0x05	; 5
     b78:	09 f4       	brne	.+2      	; 0xb7c <USB_Device_ProcessControlRequest+0x40>
     b7a:	84 c0       	rjmp	.+264    	; 0xc84 <USB_Device_ProcessControlRequest+0x148>
     b7c:	26 30       	cpi	r18, 0x06	; 6
     b7e:	40 f4       	brcc	.+16     	; 0xb90 <USB_Device_ProcessControlRequest+0x54>
     b80:	21 30       	cpi	r18, 0x01	; 1
     b82:	a1 f1       	breq	.+104    	; 0xbec <USB_Device_ProcessControlRequest+0xb0>
     b84:	21 30       	cpi	r18, 0x01	; 1
     b86:	70 f0       	brcs	.+28     	; 0xba4 <USB_Device_ProcessControlRequest+0x68>
     b88:	23 30       	cpi	r18, 0x03	; 3
     b8a:	09 f0       	breq	.+2      	; 0xb8e <USB_Device_ProcessControlRequest+0x52>
     b8c:	22 c1       	rjmp	.+580    	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
     b8e:	2e c0       	rjmp	.+92     	; 0xbec <USB_Device_ProcessControlRequest+0xb0>
     b90:	28 30       	cpi	r18, 0x08	; 8
     b92:	09 f4       	brne	.+2      	; 0xb96 <USB_Device_ProcessControlRequest+0x5a>
     b94:	f0 c0       	rjmp	.+480    	; 0xd76 <USB_Device_ProcessControlRequest+0x23a>
     b96:	29 30       	cpi	r18, 0x09	; 9
     b98:	09 f4       	brne	.+2      	; 0xb9c <USB_Device_ProcessControlRequest+0x60>
     b9a:	ff c0       	rjmp	.+510    	; 0xd9a <USB_Device_ProcessControlRequest+0x25e>
     b9c:	26 30       	cpi	r18, 0x06	; 6
     b9e:	09 f0       	breq	.+2      	; 0xba2 <USB_Device_ProcessControlRequest+0x66>
     ba0:	18 c1       	rjmp	.+560    	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
     ba2:	93 c0       	rjmp	.+294    	; 0xcca <USB_Device_ProcessControlRequest+0x18e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ba4:	80 38       	cpi	r24, 0x80	; 128
     ba6:	21 f0       	breq	.+8      	; 0xbb0 <USB_Device_ProcessControlRequest+0x74>
     ba8:	82 38       	cpi	r24, 0x82	; 130
     baa:	09 f0       	breq	.+2      	; 0xbae <USB_Device_ProcessControlRequest+0x72>
     bac:	12 c1       	rjmp	.+548    	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
     bae:	08 c0       	rjmp	.+16     	; 0xbc0 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     bb0:	80 91 83 01 	lds	r24, 0x0183
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     bb4:	90 91 84 01 	lds	r25, 0x0184
     bb8:	99 23       	and	r25, r25
     bba:	71 f0       	breq	.+28     	; 0xbd8 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     bbc:	82 60       	ori	r24, 0x02	; 2
     bbe:	0c c0       	rjmp	.+24     	; 0xbd8 <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bc0:	80 91 8b 01 	lds	r24, 0x018B
     bc4:	8f 70       	andi	r24, 0x0F	; 15
     bc6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     bca:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	95 ff       	sbrs	r25, 5
     bd2:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bd4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bd8:	90 91 e8 00 	lds	r25, 0x00E8
     bdc:	97 7f       	andi	r25, 0xF7	; 247
     bde:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     be2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     be6:	10 92 f1 00 	sts	0x00F1, r1
     bea:	d0 c0       	rjmp	.+416    	; 0xd8c <USB_Device_ProcessControlRequest+0x250>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bec:	88 23       	and	r24, r24
     bee:	19 f0       	breq	.+6      	; 0xbf6 <USB_Device_ProcessControlRequest+0xba>
     bf0:	82 30       	cpi	r24, 0x02	; 2
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <USB_Device_ProcessControlRequest+0xba>
     bf4:	ee c0       	rjmp	.+476    	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	8f 71       	andi	r24, 0x1F	; 31
     bfa:	90 70       	andi	r25, 0x00	; 0
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	29 f0       	breq	.+10     	; 0xc0a <USB_Device_ProcessControlRequest+0xce>
     c00:	82 30       	cpi	r24, 0x02	; 2
     c02:	91 05       	cpc	r25, r1
     c04:	09 f0       	breq	.+2      	; 0xc08 <USB_Device_ProcessControlRequest+0xcc>
     c06:	e5 c0       	rjmp	.+458    	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
     c08:	0b c0       	rjmp	.+22     	; 0xc20 <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c0a:	80 91 89 01 	lds	r24, 0x0189
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	09 f0       	breq	.+2      	; 0xc14 <USB_Device_ProcessControlRequest+0xd8>
     c12:	df c0       	rjmp	.+446    	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c14:	23 30       	cpi	r18, 0x03	; 3
     c16:	09 f0       	breq	.+2      	; 0xc1a <USB_Device_ProcessControlRequest+0xde>
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	80 93 84 01 	sts	0x0184, r24
     c1e:	2c c0       	rjmp	.+88     	; 0xc78 <USB_Device_ProcessControlRequest+0x13c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     c20:	80 91 89 01 	lds	r24, 0x0189
     c24:	88 23       	and	r24, r24
     c26:	41 f5       	brne	.+80     	; 0xc78 <USB_Device_ProcessControlRequest+0x13c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c28:	20 91 8b 01 	lds	r18, 0x018B
     c2c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     c2e:	09 f4       	brne	.+2      	; 0xc32 <USB_Device_ProcessControlRequest+0xf6>
     c30:	d0 c0       	rjmp	.+416    	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c32:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c36:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c3a:	80 ff       	sbrs	r24, 0
     c3c:	1d c0       	rjmp	.+58     	; 0xc78 <USB_Device_ProcessControlRequest+0x13c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c3e:	80 91 88 01 	lds	r24, 0x0188
     c42:	83 30       	cpi	r24, 0x03	; 3
     c44:	21 f4       	brne	.+8      	; 0xc4e <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c46:	80 91 eb 00 	lds	r24, 0x00EB
     c4a:	80 62       	ori	r24, 0x20	; 32
     c4c:	13 c0       	rjmp	.+38     	; 0xc74 <USB_Device_ProcessControlRequest+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     c4e:	80 91 eb 00 	lds	r24, 0x00EB
     c52:	80 61       	ori	r24, 0x10	; 16
     c54:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <USB_Device_ProcessControlRequest+0x126>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	2a 95       	dec	r18
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <USB_Device_ProcessControlRequest+0x122>
     c66:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     c6a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     c6e:	80 91 eb 00 	lds	r24, 0x00EB
     c72:	88 60       	ori	r24, 0x08	; 8
     c74:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c78:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c7c:	80 91 e8 00 	lds	r24, 0x00E8
     c80:	87 7f       	andi	r24, 0xF7	; 247
     c82:	87 c0       	rjmp	.+270    	; 0xd92 <USB_Device_ProcessControlRequest+0x256>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c84:	88 23       	and	r24, r24
     c86:	09 f0       	breq	.+2      	; 0xc8a <USB_Device_ProcessControlRequest+0x14e>
     c88:	a4 c0       	rjmp	.+328    	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     c8a:	10 91 89 01 	lds	r17, 0x0189
     c8e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     c90:	80 91 e3 00 	lds	r24, 0x00E3
     c94:	80 78       	andi	r24, 0x80	; 128
     c96:	81 2b       	or	r24, r17
     c98:	80 93 e3 00 	sts	0x00E3, r24
     c9c:	80 91 e8 00 	lds	r24, 0x00E8
     ca0:	87 7f       	andi	r24, 0xF7	; 247
     ca2:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ca6:	94 dd       	rcall	.-1240   	; 0x7d0 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ca8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     cac:	80 ff       	sbrs	r24, 0
     cae:	fc cf       	rjmp	.-8      	; 0xca8 <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     cb0:	80 91 e3 00 	lds	r24, 0x00E3
     cb4:	80 68       	ori	r24, 0x80	; 128
     cb6:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     cba:	11 23       	and	r17, r17
     cbc:	11 f0       	breq	.+4      	; 0xcc2 <USB_Device_ProcessControlRequest+0x186>
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <USB_Device_ProcessControlRequest+0x188>
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	80 93 86 01 	sts	0x0186, r24
     cc8:	84 c0       	rjmp	.+264    	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     cca:	80 58       	subi	r24, 0x80	; 128
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f0       	brcs	.+2      	; 0xcd2 <USB_Device_ProcessControlRequest+0x196>
     cd0:	80 c0       	rjmp	.+256    	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     cd2:	80 91 89 01 	lds	r24, 0x0189
     cd6:	90 91 8a 01 	lds	r25, 0x018A
     cda:	23 e0       	ldi	r18, 0x03	; 3
     cdc:	8c 3d       	cpi	r24, 0xDC	; 220
     cde:	92 07       	cpc	r25, r18
     ce0:	91 f5       	brne	.+100    	; 0xd46 <USB_Device_ProcessControlRequest+0x20a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     ce6:	8a e2       	ldi	r24, 0x2A	; 42
     ce8:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     cea:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     cec:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     cee:	de 01       	movw	r26, r28
     cf0:	15 96       	adiw	r26, 0x05	; 5
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     cf6:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     cf8:	61 e2       	ldi	r22, 0x21	; 33
     cfa:	e4 2f       	mov	r30, r20
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	60 93 57 00 	sts	0x0057, r22
     d02:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
     d04:	80 ff       	sbrs	r24, 0
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <USB_Device_ProcessControlRequest+0x1d2>
					{
						SerialByte >>= 4;
     d08:	e2 95       	swap	r30
     d0a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     d0c:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     d0e:	ef 70       	andi	r30, 0x0F	; 15
     d10:	2e 2f       	mov	r18, r30
     d12:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d14:	ea 30       	cpi	r30, 0x0A	; 10
     d16:	18 f0       	brcs	.+6      	; 0xd1e <USB_Device_ProcessControlRequest+0x1e2>
     d18:	29 5c       	subi	r18, 0xC9	; 201
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <USB_Device_ProcessControlRequest+0x1e6>
     d1e:	20 5d       	subi	r18, 0xD0	; 208
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	2d 93       	st	X+, r18
     d24:	3d 93       	st	X+, r19
     d26:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d28:	84 31       	cpi	r24, 0x14	; 20
     d2a:	91 05       	cpc	r25, r1
     d2c:	31 f7       	brne	.-52     	; 0xcfa <USB_Device_ProcessControlRequest+0x1be>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d2e:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d30:	80 91 e8 00 	lds	r24, 0x00E8
     d34:	87 7f       	andi	r24, 0xF7	; 247
     d36:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d3a:	ce 01       	movw	r24, r28
     d3c:	03 96       	adiw	r24, 0x03	; 3
     d3e:	6a e2       	ldi	r22, 0x2A	; 42
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	be db       	rcall	.-2180   	; 0x4c0 <Endpoint_Write_Control_Stream_LE>
     d44:	12 c0       	rjmp	.+36     	; 0xd6a <USB_Device_ProcessControlRequest+0x22e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d46:	60 91 8b 01 	lds	r22, 0x018B
     d4a:	ae 01       	movw	r20, r28
     d4c:	4f 5f       	subi	r20, 0xFF	; 255
     d4e:	5f 4f       	sbci	r21, 0xFF	; 255
     d50:	1c db       	rcall	.-2504   	; 0x38a <CALLBACK_USB_GetDescriptor>
     d52:	bc 01       	movw	r22, r24
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	09 f4       	brne	.+2      	; 0xd5a <USB_Device_ProcessControlRequest+0x21e>
     d58:	3c c0       	rjmp	.+120    	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
     d5a:	80 91 e8 00 	lds	r24, 0x00E8
     d5e:	87 7f       	andi	r24, 0xF7	; 247
     d60:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	54 dc       	rcall	.-1880   	; 0x612 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d6a:	80 91 e8 00 	lds	r24, 0x00E8
     d6e:	8b 77       	andi	r24, 0x7B	; 123
     d70:	80 93 e8 00 	sts	0x00E8, r24
     d74:	2e c0       	rjmp	.+92     	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     d76:	80 38       	cpi	r24, 0x80	; 128
     d78:	61 f5       	brne	.+88     	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d7a:	80 91 e8 00 	lds	r24, 0x00E8
     d7e:	87 7f       	andi	r24, 0xF7	; 247
     d80:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     d84:	80 91 82 01 	lds	r24, 0x0182
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d88:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d8c:	80 91 e8 00 	lds	r24, 0x00E8
     d90:	8e 77       	andi	r24, 0x7E	; 126
     d92:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     d96:	1c dd       	rcall	.-1480   	; 0x7d0 <Endpoint_ClearStatusStage>
     d98:	1c c0       	rjmp	.+56     	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d9a:	88 23       	and	r24, r24
     d9c:	d1 f4       	brne	.+52     	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     d9e:	90 91 89 01 	lds	r25, 0x0189
     da2:	92 30       	cpi	r25, 0x02	; 2
     da4:	b0 f4       	brcc	.+44     	; 0xdd2 <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     da6:	80 91 e8 00 	lds	r24, 0x00E8
     daa:	87 7f       	andi	r24, 0xF7	; 247
     dac:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     db0:	90 93 82 01 	sts	0x0182, r25

	Endpoint_ClearStatusStage();
     db4:	0d dd       	rcall	.-1510   	; 0x7d0 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     db6:	80 91 82 01 	lds	r24, 0x0182
     dba:	88 23       	and	r24, r24
     dbc:	21 f4       	brne	.+8      	; 0xdc6 <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     dbe:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     dc2:	87 ff       	sbrs	r24, 7
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <USB_Device_ProcessControlRequest+0x28e>
     dc6:	84 e0       	ldi	r24, 0x04	; 4
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <USB_Device_ProcessControlRequest+0x290>
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	80 93 86 01 	sts	0x0186, r24

	EVENT_USB_Device_ConfigurationChanged();
     dd0:	78 da       	rcall	.-2832   	; 0x2c2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     dd2:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     dd6:	83 ff       	sbrs	r24, 3
     dd8:	0a c0       	rjmp	.+20     	; 0xdee <USB_Device_ProcessControlRequest+0x2b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dda:	80 91 e8 00 	lds	r24, 0x00E8
     dde:	87 7f       	andi	r24, 0xF7	; 247
     de0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     de4:	80 91 eb 00 	lds	r24, 0x00EB
     de8:	80 62       	ori	r24, 0x20	; 32
     dea:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     dee:	ac 96       	adiw	r28, 0x2c	; 44
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	1f 91       	pop	r17
     e00:	08 95       	ret

00000e02 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e02:	08 95       	ret

00000e04 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e04:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     e06:	80 91 86 01 	lds	r24, 0x0186
     e0a:	88 23       	and	r24, r24
     e0c:	a9 f0       	breq	.+42     	; 0xe38 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e0e:	80 91 e9 00 	lds	r24, 0x00E9
     e12:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e14:	90 91 ec 00 	lds	r25, 0x00EC
     e18:	90 ff       	sbrs	r25, 0
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <USB_USBTask+0x1c>
     e1c:	10 e8       	ldi	r17, 0x80	; 128
     e1e:	01 c0       	rjmp	.+2      	; 0xe22 <USB_USBTask+0x1e>
     e20:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e22:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e24:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e28:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     e2c:	83 ff       	sbrs	r24, 3
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
     e30:	85 de       	rcall	.-758    	; 0xb3c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e32:	1f 70       	andi	r17, 0x0F	; 15
     e34:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     e38:	1f 91       	pop	r17
     e3a:	08 95       	ret

00000e3c <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e42:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     e46:	83 ff       	sbrs	r24, 3
     e48:	a3 c0       	rjmp	.+326    	; 0xf90 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     e4a:	88 81       	ld	r24, Y
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	20 91 8b 01 	lds	r18, 0x018B
     e52:	30 91 8c 01 	lds	r19, 0x018C
     e56:	28 17       	cp	r18, r24
     e58:	39 07       	cpc	r19, r25
     e5a:	09 f0       	breq	.+2      	; 0xe5e <CDC_Device_ProcessControlRequest+0x22>
     e5c:	99 c0       	rjmp	.+306    	; 0xf90 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
     e5e:	80 91 88 01 	lds	r24, 0x0188
     e62:	81 32       	cpi	r24, 0x21	; 33
     e64:	69 f0       	breq	.+26     	; 0xe80 <CDC_Device_ProcessControlRequest+0x44>
     e66:	82 32       	cpi	r24, 0x22	; 34
     e68:	20 f4       	brcc	.+8      	; 0xe72 <CDC_Device_ProcessControlRequest+0x36>
     e6a:	80 32       	cpi	r24, 0x20	; 32
     e6c:	09 f0       	breq	.+2      	; 0xe70 <CDC_Device_ProcessControlRequest+0x34>
     e6e:	90 c0       	rjmp	.+288    	; 0xf90 <CDC_Device_ProcessControlRequest+0x154>
     e70:	3c c0       	rjmp	.+120    	; 0xeea <CDC_Device_ProcessControlRequest+0xae>
     e72:	82 32       	cpi	r24, 0x22	; 34
     e74:	09 f4       	brne	.+2      	; 0xe78 <CDC_Device_ProcessControlRequest+0x3c>
     e76:	6b c0       	rjmp	.+214    	; 0xf4e <CDC_Device_ProcessControlRequest+0x112>
     e78:	83 32       	cpi	r24, 0x23	; 35
     e7a:	09 f0       	breq	.+2      	; 0xe7e <CDC_Device_ProcessControlRequest+0x42>
     e7c:	89 c0       	rjmp	.+274    	; 0xf90 <CDC_Device_ProcessControlRequest+0x154>
     e7e:	7a c0       	rjmp	.+244    	; 0xf74 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e80:	80 91 87 01 	lds	r24, 0x0187
     e84:	81 3a       	cpi	r24, 0xA1	; 161
     e86:	09 f0       	breq	.+2      	; 0xe8a <CDC_Device_ProcessControlRequest+0x4e>
     e88:	83 c0       	rjmp	.+262    	; 0xf90 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e8a:	80 91 e8 00 	lds	r24, 0x00E8
     e8e:	87 7f       	andi	r24, 0xF7	; 247
     e90:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e94:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     e98:	80 ff       	sbrs	r24, 0
     e9a:	fc cf       	rjmp	.-8      	; 0xe94 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     e9c:	8c 89       	ldd	r24, Y+20	; 0x14
     e9e:	9d 89       	ldd	r25, Y+21	; 0x15
     ea0:	ae 89       	ldd	r26, Y+22	; 0x16
     ea2:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     ea4:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     ea8:	29 2f       	mov	r18, r25
     eaa:	3a 2f       	mov	r19, r26
     eac:	4b 2f       	mov	r20, r27
     eae:	55 27       	eor	r21, r21
     eb0:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
     eb4:	9d 01       	movw	r18, r26
     eb6:	44 27       	eor	r20, r20
     eb8:	55 27       	eor	r21, r21
     eba:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
     ebe:	8b 2f       	mov	r24, r27
     ec0:	99 27       	eor	r25, r25
     ec2:	aa 27       	eor	r26, r26
     ec4:	bb 27       	eor	r27, r27
     ec6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     eca:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ecc:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     ed0:	89 8d       	ldd	r24, Y+25	; 0x19
     ed2:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     ed6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ed8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     edc:	80 91 e8 00 	lds	r24, 0x00E8
     ee0:	8e 77       	andi	r24, 0x7E	; 126
     ee2:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     ee6:	74 dc       	rcall	.-1816   	; 0x7d0 <Endpoint_ClearStatusStage>
     ee8:	53 c0       	rjmp	.+166    	; 0xf90 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     eea:	80 91 87 01 	lds	r24, 0x0187
     eee:	81 32       	cpi	r24, 0x21	; 33
     ef0:	09 f0       	breq	.+2      	; 0xef4 <CDC_Device_ProcessControlRequest+0xb8>
     ef2:	4e c0       	rjmp	.+156    	; 0xf90 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ef4:	80 91 e8 00 	lds	r24, 0x00E8
     ef8:	87 7f       	andi	r24, 0xF7	; 247
     efa:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     efe:	05 c0       	rjmp	.+10     	; 0xf0a <CDC_Device_ProcessControlRequest+0xce>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     f00:	80 91 86 01 	lds	r24, 0x0186
     f04:	88 23       	and	r24, r24
     f06:	09 f4       	brne	.+2      	; 0xf0a <CDC_Device_ProcessControlRequest+0xce>
     f08:	43 c0       	rjmp	.+134    	; 0xf90 <CDC_Device_ProcessControlRequest+0x154>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f0a:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     f0e:	82 ff       	sbrs	r24, 2
     f10:	f7 cf       	rjmp	.-18     	; 0xf00 <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     f12:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     f16:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     f1a:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     f1e:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     f22:	3c 8b       	std	Y+20, r19	; 0x14
     f24:	2d 8b       	std	Y+21, r18	; 0x15
     f26:	9e 8b       	std	Y+22, r25	; 0x16
     f28:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f2a:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     f2e:	88 8f       	std	Y+24, r24	; 0x18
     f30:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     f34:	89 8f       	std	Y+25, r24	; 0x19
     f36:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     f3a:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f3c:	80 91 e8 00 	lds	r24, 0x00E8
     f40:	8b 77       	andi	r24, 0x7B	; 123
     f42:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     f46:	44 dc       	rcall	.-1912   	; 0x7d0 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f48:	ce 01       	movw	r24, r28
     f4a:	f4 d0       	rcall	.+488    	; 0x1134 <CDC_Device_Event_Stub>
     f4c:	21 c0       	rjmp	.+66     	; 0xf90 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f4e:	80 91 87 01 	lds	r24, 0x0187
     f52:	81 32       	cpi	r24, 0x21	; 33
     f54:	e9 f4       	brne	.+58     	; 0xf90 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f56:	80 91 e8 00 	lds	r24, 0x00E8
     f5a:	87 7f       	andi	r24, 0xF7	; 247
     f5c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f60:	37 dc       	rcall	.-1938   	; 0x7d0 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     f62:	80 91 89 01 	lds	r24, 0x0189
     f66:	90 91 8a 01 	lds	r25, 0x018A
     f6a:	99 8b       	std	Y+17, r25	; 0x11
     f6c:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f6e:	ce 01       	movw	r24, r28
     f70:	e1 d0       	rcall	.+450    	; 0x1134 <CDC_Device_Event_Stub>
     f72:	0e c0       	rjmp	.+28     	; 0xf90 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f74:	80 91 87 01 	lds	r24, 0x0187
     f78:	81 32       	cpi	r24, 0x21	; 33
     f7a:	51 f4       	brne	.+20     	; 0xf90 <CDC_Device_ProcessControlRequest+0x154>
     f7c:	80 91 e8 00 	lds	r24, 0x00E8
     f80:	87 7f       	andi	r24, 0xF7	; 247
     f82:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f86:	24 dc       	rcall	.-1976   	; 0x7d0 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f88:	ce 01       	movw	r24, r28
     f8a:	60 91 89 01 	lds	r22, 0x0189
     f8e:	d2 d0       	rcall	.+420    	; 0x1134 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     f9c:	40 96       	adiw	r24, 0x10	; 16
     f9e:	fc 01       	movw	r30, r24
     fa0:	8b e0       	ldi	r24, 0x0B	; 11
     fa2:	df 01       	movw	r26, r30
     fa4:	1d 92       	st	X+, r1
     fa6:	8a 95       	dec	r24
     fa8:	e9 f7       	brne	.-6      	; 0xfa4 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     fae:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     fb4:	ce 01       	movw	r24, r28
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	61 e0       	ldi	r22, 0x01	; 1
     fba:	c6 db       	rcall	.-2164   	; 0x748 <Endpoint_ConfigureEndpointTable>
     fbc:	88 23       	and	r24, r24
     fbe:	59 f0       	breq	.+22     	; 0xfd6 <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     fc0:	ce 01       	movw	r24, r28
     fc2:	06 96       	adiw	r24, 0x06	; 6
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	c0 db       	rcall	.-2176   	; 0x748 <Endpoint_ConfigureEndpointTable>
     fc8:	88 23       	and	r24, r24
     fca:	29 f0       	breq	.+10     	; 0xfd6 <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     fcc:	ce 01       	movw	r24, r28
     fce:	0b 96       	adiw	r24, 0x0b	; 11
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	ba db       	rcall	.-2188   	; 0x748 <Endpoint_ConfigureEndpointTable>
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <CDC_Device_ConfigureEndpoints+0x42>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
     fd6:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <CDC_Device_SendString>:
	#endif
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
     fde:	fc 01       	movw	r30, r24
     fe0:	cb 01       	movw	r24, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fe2:	20 91 86 01 	lds	r18, 0x0186
     fe6:	24 30       	cpi	r18, 0x04	; 4
     fe8:	c1 f4       	brne	.+48     	; 0x101a <CDC_Device_SendString+0x3c>
     fea:	24 89       	ldd	r18, Z+20	; 0x14
     fec:	35 89       	ldd	r19, Z+21	; 0x15
     fee:	46 89       	ldd	r20, Z+22	; 0x16
     ff0:	57 89       	ldd	r21, Z+23	; 0x17
     ff2:	21 15       	cp	r18, r1
     ff4:	31 05       	cpc	r19, r1
     ff6:	41 05       	cpc	r20, r1
     ff8:	51 05       	cpc	r21, r1
     ffa:	89 f0       	breq	.+34     	; 0x101e <CDC_Device_SendString+0x40>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ffc:	21 81       	ldd	r18, Z+1	; 0x01
     ffe:	2f 70       	andi	r18, 0x0F	; 15
    1000:	20 93 e9 00 	sts	0x00E9, r18
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
    1004:	fb 01       	movw	r30, r22
    1006:	01 90       	ld	r0, Z+
    1008:	00 20       	and	r0, r0
    100a:	e9 f7       	brne	.-6      	; 0x1006 <CDC_Device_SendString+0x28>
    100c:	31 97       	sbiw	r30, 0x01	; 1
    100e:	e6 1b       	sub	r30, r22
    1010:	f7 0b       	sbc	r31, r23
    1012:	bf 01       	movw	r22, r30
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	f6 c9       	rjmp	.-3092   	; 0x406 <Endpoint_Write_Stream_LE>

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	08 95       	ret
    101e:	82 e0       	ldi	r24, 0x02	; 2

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
}
    1020:	08 95       	ret

00001022 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1022:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1024:	80 91 86 01 	lds	r24, 0x0186
    1028:	84 30       	cpi	r24, 0x04	; 4
    102a:	51 f5       	brne	.+84     	; 0x1080 <CDC_Device_Flush+0x5e>
    102c:	24 89       	ldd	r18, Z+20	; 0x14
    102e:	35 89       	ldd	r19, Z+21	; 0x15
    1030:	46 89       	ldd	r20, Z+22	; 0x16
    1032:	57 89       	ldd	r21, Z+23	; 0x17
    1034:	21 15       	cp	r18, r1
    1036:	31 05       	cpc	r19, r1
    1038:	41 05       	cpc	r20, r1
    103a:	51 05       	cpc	r21, r1
    103c:	09 f1       	breq	.+66     	; 0x1080 <CDC_Device_Flush+0x5e>
    103e:	81 81       	ldd	r24, Z+1	; 0x01
    1040:	8f 70       	andi	r24, 0x0F	; 15
    1042:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1046:	90 91 f3 00 	lds	r25, 0x00F3
    104a:	80 91 f2 00 	lds	r24, 0x00F2
    104e:	39 2f       	mov	r19, r25
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	82 2b       	or	r24, r18
    1056:	93 2b       	or	r25, r19

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	a1 f0       	breq	.+40     	; 0x1084 <CDC_Device_Flush+0x62>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    105c:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1060:	80 91 e8 00 	lds	r24, 0x00E8
    1064:	8e 77       	andi	r24, 0x7E	; 126
    1066:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    106a:	95 fd       	sbrc	r25, 5
    106c:	0d c0       	rjmp	.+26     	; 0x1088 <CDC_Device_Flush+0x66>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    106e:	d1 db       	rcall	.-2142   	; 0x812 <Endpoint_WaitUntilReady>
    1070:	88 23       	and	r24, r24
    1072:	59 f4       	brne	.+22     	; 0x108a <CDC_Device_Flush+0x68>
    1074:	90 91 e8 00 	lds	r25, 0x00E8
    1078:	9e 77       	andi	r25, 0x7E	; 126
    107a:	90 93 e8 00 	sts	0x00E8, r25
    107e:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    1088:	80 e0       	ldi	r24, 0x00	; 0
}
    108a:	08 95       	ret

0000108c <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    108c:	20 91 86 01 	lds	r18, 0x0186
    1090:	24 30       	cpi	r18, 0x04	; 4
    1092:	99 f4       	brne	.+38     	; 0x10ba <CDC_Device_USBTask+0x2e>
    1094:	fc 01       	movw	r30, r24
    1096:	24 89       	ldd	r18, Z+20	; 0x14
    1098:	35 89       	ldd	r19, Z+21	; 0x15
    109a:	46 89       	ldd	r20, Z+22	; 0x16
    109c:	57 89       	ldd	r21, Z+23	; 0x17
    109e:	21 15       	cp	r18, r1
    10a0:	31 05       	cpc	r19, r1
    10a2:	41 05       	cpc	r20, r1
    10a4:	51 05       	cpc	r21, r1
    10a6:	49 f0       	breq	.+18     	; 0x10ba <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10a8:	21 81       	ldd	r18, Z+1	; 0x01
    10aa:	2f 70       	andi	r18, 0x0F	; 15
    10ac:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10b0:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    10b4:	20 ff       	sbrs	r18, 0
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
    10b8:	b4 cf       	rjmp	.-152    	; 0x1022 <CDC_Device_Flush>
    10ba:	08 95       	ret

000010bc <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    10bc:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10be:	80 91 86 01 	lds	r24, 0x0186
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	99 f5       	brne	.+102    	; 0x112c <CDC_Device_ReceiveByte+0x70>
    10c6:	24 89       	ldd	r18, Z+20	; 0x14
    10c8:	35 89       	ldd	r19, Z+21	; 0x15
    10ca:	46 89       	ldd	r20, Z+22	; 0x16
    10cc:	57 89       	ldd	r21, Z+23	; 0x17
    10ce:	21 15       	cp	r18, r1
    10d0:	31 05       	cpc	r19, r1
    10d2:	41 05       	cpc	r20, r1
    10d4:	51 05       	cpc	r21, r1
    10d6:	51 f1       	breq	.+84     	; 0x112c <CDC_Device_ReceiveByte+0x70>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10d8:	86 81       	ldd	r24, Z+6	; 0x06
    10da:	8f 70       	andi	r24, 0x0F	; 15
    10dc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10e0:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    10e4:	82 ff       	sbrs	r24, 2
    10e6:	22 c0       	rjmp	.+68     	; 0x112c <CDC_Device_ReceiveByte+0x70>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    10e8:	90 91 f3 00 	lds	r25, 0x00F3
    10ec:	80 91 f2 00 	lds	r24, 0x00F2
    10f0:	39 2f       	mov	r19, r25
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	82 2b       	or	r24, r18
    10f8:	93 2b       	or	r25, r19
	{
		if (Endpoint_BytesInEndpoint())
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	21 f0       	breq	.+8      	; 0x1106 <CDC_Device_ReceiveByte+0x4a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    10fe:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	02 c0       	rjmp	.+4      	; 0x110a <CDC_Device_ReceiveByte+0x4e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1106:	2f ef       	ldi	r18, 0xFF	; 255
    1108:	3f ef       	ldi	r19, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    110a:	90 91 f3 00 	lds	r25, 0x00F3
    110e:	80 91 f2 00 	lds	r24, 0x00F2
    1112:	59 2f       	mov	r21, r25
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	84 2b       	or	r24, r20
    111a:	95 2b       	or	r25, r21
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	41 f4       	brne	.+16     	; 0x1130 <CDC_Device_ReceiveByte+0x74>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1120:	80 91 e8 00 	lds	r24, 0x00E8
    1124:	8b 77       	andi	r24, 0x7B	; 123
    1126:	80 93 e8 00 	sts	0x00E8, r24
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <CDC_Device_ReceiveByte+0x74>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    112c:	2f ef       	ldi	r18, 0xFF	; 255
    112e:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1130:	c9 01       	movw	r24, r18
    1132:	08 95       	ret

00001134 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1134:	08 95       	ret

00001136 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1136:	6f 92       	push	r6
    1138:	7f 92       	push	r7
    113a:	8f 92       	push	r8
    113c:	9f 92       	push	r9
    113e:	af 92       	push	r10
    1140:	bf 92       	push	r11
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <HID_Device_ProcessControlRequest+0x1e>
    1154:	0f 92       	push	r0
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    115c:	6d b6       	in	r6, 0x3d	; 61
    115e:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1160:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1164:	83 ff       	sbrs	r24, 3
    1166:	0d c1       	rjmp	.+538    	; 0x1382 <HID_Device_ProcessControlRequest+0x24c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1168:	f7 01       	movw	r30, r14
    116a:	80 81       	ld	r24, Z
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	20 91 8b 01 	lds	r18, 0x018B
    1172:	30 91 8c 01 	lds	r19, 0x018C
    1176:	28 17       	cp	r18, r24
    1178:	39 07       	cpc	r19, r25
    117a:	09 f0       	breq	.+2      	; 0x117e <HID_Device_ProcessControlRequest+0x48>
    117c:	02 c1       	rjmp	.+516    	; 0x1382 <HID_Device_ProcessControlRequest+0x24c>
	  return;

	switch (USB_ControlRequest.bRequest)
    117e:	80 91 88 01 	lds	r24, 0x0188
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	09 f4       	brne	.+2      	; 0x1188 <HID_Device_ProcessControlRequest+0x52>
    1186:	a4 c0       	rjmp	.+328    	; 0x12d0 <HID_Device_ProcessControlRequest+0x19a>
    1188:	84 30       	cpi	r24, 0x04	; 4
    118a:	30 f4       	brcc	.+12     	; 0x1198 <HID_Device_ProcessControlRequest+0x62>
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	71 f0       	breq	.+28     	; 0x11ac <HID_Device_ProcessControlRequest+0x76>
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	09 f0       	breq	.+2      	; 0x1196 <HID_Device_ProcessControlRequest+0x60>
    1194:	f6 c0       	rjmp	.+492    	; 0x1382 <HID_Device_ProcessControlRequest+0x24c>
    1196:	d9 c0       	rjmp	.+434    	; 0x134a <HID_Device_ProcessControlRequest+0x214>
    1198:	8a 30       	cpi	r24, 0x0A	; 10
    119a:	09 f4       	brne	.+2      	; 0x119e <HID_Device_ProcessControlRequest+0x68>
    119c:	be c0       	rjmp	.+380    	; 0x131a <HID_Device_ProcessControlRequest+0x1e4>
    119e:	8b 30       	cpi	r24, 0x0B	; 11
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <HID_Device_ProcessControlRequest+0x6e>
    11a2:	a7 c0       	rjmp	.+334    	; 0x12f2 <HID_Device_ProcessControlRequest+0x1bc>
    11a4:	89 30       	cpi	r24, 0x09	; 9
    11a6:	09 f0       	breq	.+2      	; 0x11aa <HID_Device_ProcessControlRequest+0x74>
    11a8:	ec c0       	rjmp	.+472    	; 0x1382 <HID_Device_ProcessControlRequest+0x24c>
    11aa:	4c c0       	rjmp	.+152    	; 0x1244 <HID_Device_ProcessControlRequest+0x10e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11ac:	80 91 87 01 	lds	r24, 0x0187
    11b0:	81 3a       	cpi	r24, 0xA1	; 161
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <HID_Device_ProcessControlRequest+0x80>
    11b4:	e6 c0       	rjmp	.+460    	; 0x1382 <HID_Device_ProcessControlRequest+0x24c>
    11b6:	cd b6       	in	r12, 0x3d	; 61
    11b8:	de b6       	in	r13, 0x3e	; 62
    11ba:	9d b6       	in	r9, 0x3d	; 61
    11bc:	8d 2c       	mov	r8, r13
			{
				uint16_t ReportSize = 0;
    11be:	1b 82       	std	Y+3, r1	; 0x03
    11c0:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    11c2:	80 91 89 01 	lds	r24, 0x0189
    11c6:	00 91 8a 01 	lds	r16, 0x018A
    11ca:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    11cc:	f7 01       	movw	r30, r14
    11ce:	40 85       	ldd	r20, Z+8	; 0x08
    11d0:	c4 1a       	sub	r12, r20
    11d2:	d1 08       	sbc	r13, r1
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de be       	out	0x3e, r13	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd be       	out	0x3d, r12	; 61
    11de:	08 94       	sec
    11e0:	c1 1c       	adc	r12, r1
    11e2:	d1 1c       	adc	r13, r1
    11e4:	bc 2c       	mov	r11, r12
    11e6:	ad 2c       	mov	r10, r13

				memset(ReportData, 0, sizeof(ReportData));
    11e8:	c6 01       	movw	r24, r12
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	dc d1       	rcall	.+952    	; 0x15aa <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    11f2:	40 2f       	mov	r20, r16
    11f4:	41 50       	subi	r20, 0x01	; 1
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    11f6:	c7 01       	movw	r24, r14
    11f8:	be 01       	movw	r22, r28
    11fa:	6f 5f       	subi	r22, 0xFF	; 255
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255
    11fe:	96 01       	movw	r18, r12
    1200:	8e 01       	movw	r16, r28
    1202:	0e 5f       	subi	r16, 0xFE	; 254
    1204:	1f 4f       	sbci	r17, 0xFF	; 255
    1206:	8a d8       	rcall	.-3820   	; 0x31c <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1208:	f7 01       	movw	r30, r14
    120a:	26 81       	ldd	r18, Z+6	; 0x06
    120c:	37 81       	ldd	r19, Z+7	; 0x07
    120e:	21 15       	cp	r18, r1
    1210:	31 05       	cpc	r19, r1
    1212:	29 f0       	breq	.+10     	; 0x121e <HID_Device_ProcessControlRequest+0xe8>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1214:	40 85       	ldd	r20, Z+8	; 0x08
    1216:	c9 01       	movw	r24, r18
    1218:	b6 01       	movw	r22, r12
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	bd d1       	rcall	.+890    	; 0x1598 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    121e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1222:	80 91 e8 00 	lds	r24, 0x00E8
    1226:	87 7f       	andi	r24, 0xF7	; 247
    1228:	80 93 e8 00 	sts	0x00E8, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    122c:	6a 81       	ldd	r22, Y+2	; 0x02
    122e:	7b 81       	ldd	r23, Y+3	; 0x03
    1230:	8b 2d       	mov	r24, r11
    1232:	9a 2d       	mov	r25, r10
    1234:	45 d9       	rcall	.-3446   	; 0x4c0 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1236:	80 91 e8 00 	lds	r24, 0x00E8
    123a:	8b 77       	andi	r24, 0x7B	; 123
    123c:	80 93 e8 00 	sts	0x00E8, r24
    1240:	94 01       	movw	r18, r8
    1242:	3e c0       	rjmp	.+124    	; 0x12c0 <HID_Device_ProcessControlRequest+0x18a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1244:	80 91 87 01 	lds	r24, 0x0187
    1248:	81 32       	cpi	r24, 0x21	; 33
    124a:	09 f0       	breq	.+2      	; 0x124e <HID_Device_ProcessControlRequest+0x118>
    124c:	9a c0       	rjmp	.+308    	; 0x1382 <HID_Device_ProcessControlRequest+0x24c>
    124e:	cd b6       	in	r12, 0x3d	; 61
    1250:	de b6       	in	r13, 0x3e	; 62
    1252:	bd b6       	in	r11, 0x3d	; 61
    1254:	9d 2c       	mov	r9, r13
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1256:	00 91 8d 01 	lds	r16, 0x018D
    125a:	10 91 8e 01 	lds	r17, 0x018E
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    125e:	a0 90 89 01 	lds	r10, 0x0189
    1262:	80 90 8a 01 	lds	r8, 0x018A
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1266:	8d b7       	in	r24, 0x3d	; 61
    1268:	9e b7       	in	r25, 0x3e	; 62
    126a:	80 1b       	sub	r24, r16
    126c:	91 0b       	sbc	r25, r17
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	9e bf       	out	0x3e, r25	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	8d bf       	out	0x3d, r24	; 61
    1278:	cd b6       	in	r12, 0x3d	; 61
    127a:	de b6       	in	r13, 0x3e	; 62
    127c:	08 94       	sec
    127e:	c1 1c       	adc	r12, r1
    1280:	d1 1c       	adc	r13, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1282:	80 91 e8 00 	lds	r24, 0x00E8
    1286:	87 7f       	andi	r24, 0xF7	; 247
    1288:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    128c:	c6 01       	movw	r24, r12
    128e:	b8 01       	movw	r22, r16
    1290:	7a d9       	rcall	.-3340   	; 0x586 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1292:	80 91 e8 00 	lds	r24, 0x00E8
    1296:	8e 77       	andi	r24, 0x7E	; 126
    1298:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	aa 20       	and	r10, r10
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <HID_Device_ProcessControlRequest+0x172>
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e0       	ldi	r25, 0x00	; 0
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    12a8:	48 2d       	mov	r20, r8
    12aa:	41 50       	subi	r20, 0x01	; 1

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    12ac:	96 01       	movw	r18, r12
    12ae:	28 0f       	add	r18, r24
    12b0:	39 1f       	adc	r19, r25
    12b2:	08 1b       	sub	r16, r24
    12b4:	19 0b       	sbc	r17, r25
    12b6:	c7 01       	movw	r24, r14
    12b8:	6a 2d       	mov	r22, r10
    12ba:	66 d8       	rcall	.-3892   	; 0x388 <CALLBACK_HID_Device_ProcessHIDReport>
    12bc:	3b 2d       	mov	r19, r11
    12be:	29 2d       	mov	r18, r9
    12c0:	83 2f       	mov	r24, r19
    12c2:	92 2f       	mov	r25, r18
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	9e bf       	out	0x3e, r25	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	8d bf       	out	0x3d, r24	; 61
    12ce:	59 c0       	rjmp	.+178    	; 0x1382 <HID_Device_ProcessControlRequest+0x24c>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    12d0:	80 91 87 01 	lds	r24, 0x0187
    12d4:	81 3a       	cpi	r24, 0xA1	; 161
    12d6:	09 f0       	breq	.+2      	; 0x12da <HID_Device_ProcessControlRequest+0x1a4>
    12d8:	54 c0       	rjmp	.+168    	; 0x1382 <HID_Device_ProcessControlRequest+0x24c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12da:	80 91 e8 00 	lds	r24, 0x00E8
    12de:	87 7f       	andi	r24, 0xF7	; 247
    12e0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12e4:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    12e8:	80 ff       	sbrs	r24, 0
    12ea:	fc cf       	rjmp	.-8      	; 0x12e4 <HID_Device_ProcessControlRequest+0x1ae>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    12ec:	f7 01       	movw	r30, r14
    12ee:	81 85       	ldd	r24, Z+9	; 0x09
    12f0:	40 c0       	rjmp	.+128    	; 0x1372 <HID_Device_ProcessControlRequest+0x23c>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12f2:	80 91 87 01 	lds	r24, 0x0187
    12f6:	81 32       	cpi	r24, 0x21	; 33
    12f8:	09 f0       	breq	.+2      	; 0x12fc <HID_Device_ProcessControlRequest+0x1c6>
    12fa:	43 c0       	rjmp	.+134    	; 0x1382 <HID_Device_ProcessControlRequest+0x24c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12fc:	80 91 e8 00 	lds	r24, 0x00E8
    1300:	87 7f       	andi	r24, 0xF7	; 247
    1302:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1306:	64 da       	rcall	.-2872   	; 0x7d0 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1308:	90 91 89 01 	lds	r25, 0x0189
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	99 23       	and	r25, r25
    1310:	09 f4       	brne	.+2      	; 0x1314 <HID_Device_ProcessControlRequest+0x1de>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	f7 01       	movw	r30, r14
    1316:	81 87       	std	Z+9, r24	; 0x09
    1318:	34 c0       	rjmp	.+104    	; 0x1382 <HID_Device_ProcessControlRequest+0x24c>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    131a:	80 91 87 01 	lds	r24, 0x0187
    131e:	81 32       	cpi	r24, 0x21	; 33
    1320:	81 f5       	brne	.+96     	; 0x1382 <HID_Device_ProcessControlRequest+0x24c>
    1322:	80 91 e8 00 	lds	r24, 0x00E8
    1326:	87 7f       	andi	r24, 0xF7	; 247
    1328:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    132c:	51 da       	rcall	.-2910   	; 0x7d0 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    132e:	80 91 89 01 	lds	r24, 0x0189
    1332:	90 91 8a 01 	lds	r25, 0x018A
    1336:	80 70       	andi	r24, 0x00	; 0
    1338:	36 e0       	ldi	r19, 0x06	; 6
    133a:	96 95       	lsr	r25
    133c:	87 95       	ror	r24
    133e:	3a 95       	dec	r19
    1340:	e1 f7       	brne	.-8      	; 0x133a <HID_Device_ProcessControlRequest+0x204>
    1342:	f7 01       	movw	r30, r14
    1344:	95 87       	std	Z+13, r25	; 0x0d
    1346:	84 87       	std	Z+12, r24	; 0x0c
    1348:	1c c0       	rjmp	.+56     	; 0x1382 <HID_Device_ProcessControlRequest+0x24c>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    134a:	80 91 87 01 	lds	r24, 0x0187
    134e:	81 3a       	cpi	r24, 0xA1	; 161
    1350:	c1 f4       	brne	.+48     	; 0x1382 <HID_Device_ProcessControlRequest+0x24c>
    1352:	80 91 e8 00 	lds	r24, 0x00E8
    1356:	87 7f       	andi	r24, 0xF7	; 247
    1358:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    135c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1360:	80 ff       	sbrs	r24, 0
    1362:	fc cf       	rjmp	.-8      	; 0x135c <HID_Device_ProcessControlRequest+0x226>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1364:	f7 01       	movw	r30, r14
    1366:	84 85       	ldd	r24, Z+12	; 0x0c
    1368:	95 85       	ldd	r25, Z+13	; 0x0d
    136a:	96 95       	lsr	r25
    136c:	87 95       	ror	r24
    136e:	96 95       	lsr	r25
    1370:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1372:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1376:	80 91 e8 00 	lds	r24, 0x00E8
    137a:	8e 77       	andi	r24, 0x7E	; 126
    137c:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1380:	27 da       	rcall	.-2994   	; 0x7d0 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	7e be       	out	0x3e, r7	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	6d be       	out	0x3d, r6	; 61
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	bf 90       	pop	r11
    13a4:	af 90       	pop	r10
    13a6:	9f 90       	pop	r9
    13a8:	8f 90       	pop	r8
    13aa:	7f 90       	pop	r7
    13ac:	6f 90       	pop	r6
    13ae:	08 95       	ret

000013b0 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    13b6:	09 96       	adiw	r24, 0x09	; 9
    13b8:	dc 01       	movw	r26, r24
    13ba:	87 e0       	ldi	r24, 0x07	; 7
    13bc:	ed 01       	movw	r28, r26
    13be:	19 92       	st	Y+, r1
    13c0:	8a 95       	dec	r24
    13c2:	e9 f7       	brne	.-6      	; 0x13be <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    13c8:	84 ef       	ldi	r24, 0xF4	; 244
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	95 87       	std	Z+13, r25	; 0x0d
    13ce:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    13d4:	cf 01       	movw	r24, r30
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	61 e0       	ldi	r22, 0x01	; 1
    13da:	b6 d9       	rcall	.-3220   	; 0x748 <Endpoint_ConfigureEndpointTable>
	  return false;	
	
	return true;
}
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	08 95       	ret

000013e2 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    13e2:	5f 92       	push	r5
    13e4:	6f 92       	push	r6
    13e6:	7f 92       	push	r7
    13e8:	8f 92       	push	r8
    13ea:	9f 92       	push	r9
    13ec:	af 92       	push	r10
    13ee:	bf 92       	push	r11
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	00 d0       	rcall	.+0      	; 0x1402 <HID_Device_USBTask+0x20>
    1402:	00 d0       	rcall	.+0      	; 0x1404 <HID_Device_USBTask+0x22>
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    140a:	6d b6       	in	r6, 0x3d	; 61
    140c:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    140e:	80 91 86 01 	lds	r24, 0x0186
    1412:	84 30       	cpi	r24, 0x04	; 4
    1414:	09 f0       	breq	.+2      	; 0x1418 <HID_Device_USBTask+0x36>
    1416:	9a c0       	rjmp	.+308    	; 0x154c <HID_Device_USBTask+0x16a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1418:	80 91 e4 00 	lds	r24, 0x00E4
    141c:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1420:	f7 01       	movw	r30, r14
    1422:	22 85       	ldd	r18, Z+10	; 0x0a
    1424:	33 85       	ldd	r19, Z+11	; 0x0b
    1426:	28 17       	cp	r18, r24
    1428:	39 07       	cpc	r19, r25
    142a:	09 f4       	brne	.+2      	; 0x142e <HID_Device_USBTask+0x4c>
    142c:	8f c0       	rjmp	.+286    	; 0x154c <HID_Device_USBTask+0x16a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    142e:	81 81       	ldd	r24, Z+1	; 0x01
    1430:	8f 70       	andi	r24, 0x0F	; 15
    1432:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1436:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    143a:	85 ff       	sbrs	r24, 5
    143c:	87 c0       	rjmp	.+270    	; 0x154c <HID_Device_USBTask+0x16a>
    143e:	8d b6       	in	r8, 0x3d	; 61
    1440:	57 2c       	mov	r5, r7
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1442:	40 85       	ldd	r20, Z+8	; 0x08
    1444:	cd b6       	in	r12, 0x3d	; 61
    1446:	de b6       	in	r13, 0x3e	; 62
    1448:	c4 1a       	sub	r12, r20
    144a:	d1 08       	sbc	r13, r1
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de be       	out	0x3e, r13	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd be       	out	0x3d, r12	; 61
    1456:	0d b7       	in	r16, 0x3d	; 61
    1458:	1e b7       	in	r17, 0x3e	; 62
    145a:	0f 5f       	subi	r16, 0xFF	; 255
    145c:	1f 4f       	sbci	r17, 0xFF	; 255
    145e:	b0 2e       	mov	r11, r16
    1460:	a1 2e       	mov	r10, r17
		uint8_t  ReportID     = 0;
    1462:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    1464:	1b 82       	std	Y+3, r1	; 0x03
    1466:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    1468:	c8 01       	movw	r24, r16
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	9c d0       	rcall	.+312    	; 0x15aa <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1472:	c7 01       	movw	r24, r14
    1474:	be 01       	movw	r22, r28
    1476:	6f 5f       	subi	r22, 0xFF	; 255
    1478:	7f 4f       	sbci	r23, 0xFF	; 255
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	98 01       	movw	r18, r16
    147e:	8e 01       	movw	r16, r28
    1480:	0e 5f       	subi	r16, 0xFE	; 254
    1482:	1f 4f       	sbci	r17, 0xFF	; 255
    1484:	0e 94 8e 01 	call	0x31c	; 0x31c <CALLBACK_HID_Device_CreateHIDReport>
    1488:	98 2e       	mov	r9, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    148a:	f7 01       	movw	r30, r14
    148c:	84 85       	ldd	r24, Z+12	; 0x0c
    148e:	95 85       	ldd	r25, Z+13	; 0x0d
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	59 f0       	breq	.+22     	; 0x14aa <HID_Device_USBTask+0xc8>
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	26 85       	ldd	r18, Z+14	; 0x0e
    149a:	37 85       	ldd	r19, Z+15	; 0x0f
    149c:	21 15       	cp	r18, r1
    149e:	31 05       	cpc	r19, r1
    14a0:	11 f0       	breq	.+4      	; 0x14a6 <HID_Device_USBTask+0xc4>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    14a6:	6c 01       	movw	r12, r24
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <HID_Device_USBTask+0xcc>
    14aa:	cc 24       	eor	r12, r12
    14ac:	dd 24       	eor	r13, r13

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    14ae:	f7 01       	movw	r30, r14
    14b0:	06 81       	ldd	r16, Z+6	; 0x06
    14b2:	17 81       	ldd	r17, Z+7	; 0x07
    14b4:	01 15       	cp	r16, r1
    14b6:	11 05       	cpc	r17, r1
    14b8:	a1 f0       	breq	.+40     	; 0x14e2 <HID_Device_USBTask+0x100>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    14ba:	4a 81       	ldd	r20, Y+2	; 0x02
    14bc:	5b 81       	ldd	r21, Y+3	; 0x03
    14be:	8b 2d       	mov	r24, r11
    14c0:	9a 2d       	mov	r25, r10
    14c2:	b8 01       	movw	r22, r16
    14c4:	5c d0       	rcall	.+184    	; 0x157e <memcmp>
    14c6:	21 e0       	ldi	r18, 0x01	; 1
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	09 f4       	brne	.+2      	; 0x14ce <HID_Device_USBTask+0xec>
    14cc:	20 e0       	ldi	r18, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    14ce:	f7 01       	movw	r30, r14
    14d0:	40 85       	ldd	r20, Z+8	; 0x08
    14d2:	c8 01       	movw	r24, r16
    14d4:	6b 2d       	mov	r22, r11
    14d6:	7a 2d       	mov	r23, r10
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	2c 83       	std	Y+4, r18	; 0x04
    14dc:	5d d0       	rcall	.+186    	; 0x1598 <memcpy>
    14de:	2c 81       	ldd	r18, Y+4	; 0x04
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <HID_Device_USBTask+0x102>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    14e2:	20 e0       	ldi	r18, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	9b 81       	ldd	r25, Y+3	; 0x03
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	11 f1       	breq	.+68     	; 0x1530 <HID_Device_USBTask+0x14e>
    14ec:	99 20       	and	r9, r9
    14ee:	29 f4       	brne	.+10     	; 0x14fa <HID_Device_USBTask+0x118>
    14f0:	22 23       	and	r18, r18
    14f2:	19 f4       	brne	.+6      	; 0x14fa <HID_Device_USBTask+0x118>
    14f4:	c1 14       	cp	r12, r1
    14f6:	d1 04       	cpc	r13, r1
    14f8:	d9 f0       	breq	.+54     	; 0x1530 <HID_Device_USBTask+0x14e>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    14fa:	f7 01       	movw	r30, r14
    14fc:	84 85       	ldd	r24, Z+12	; 0x0c
    14fe:	95 85       	ldd	r25, Z+13	; 0x0d
    1500:	97 87       	std	Z+15, r25	; 0x0f
    1502:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1504:	81 81       	ldd	r24, Z+1	; 0x01
    1506:	8f 70       	andi	r24, 0x0F	; 15
    1508:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	88 23       	and	r24, r24
    1510:	11 f0       	breq	.+4      	; 0x1516 <HID_Device_USBTask+0x134>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1512:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1516:	6a 81       	ldd	r22, Y+2	; 0x02
    1518:	7b 81       	ldd	r23, Y+3	; 0x03
    151a:	8b 2d       	mov	r24, r11
    151c:	9a 2d       	mov	r25, r10
    151e:	40 e0       	ldi	r20, 0x00	; 0
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	0e 94 03 02 	call	0x406	; 0x406 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1526:	80 91 e8 00 	lds	r24, 0x00E8
    152a:	8e 77       	andi	r24, 0x7E	; 126
    152c:	80 93 e8 00 	sts	0x00E8, r24
    1530:	80 91 e4 00 	lds	r24, 0x00E4
    1534:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1538:	f7 01       	movw	r30, r14
    153a:	93 87       	std	Z+11, r25	; 0x0b
    153c:	82 87       	std	Z+10, r24	; 0x0a
    153e:	88 2d       	mov	r24, r8
    1540:	95 2d       	mov	r25, r5
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	9e bf       	out	0x3e, r25	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	8d bf       	out	0x3d, r24	; 61
	}
}
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	7e be       	out	0x3e, r7	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	6d be       	out	0x3d, r6	; 61
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	df 90       	pop	r13
    156c:	cf 90       	pop	r12
    156e:	bf 90       	pop	r11
    1570:	af 90       	pop	r10
    1572:	9f 90       	pop	r9
    1574:	8f 90       	pop	r8
    1576:	7f 90       	pop	r7
    1578:	6f 90       	pop	r6
    157a:	5f 90       	pop	r5
    157c:	08 95       	ret

0000157e <memcmp>:
    157e:	fb 01       	movw	r30, r22
    1580:	dc 01       	movw	r26, r24
    1582:	04 c0       	rjmp	.+8      	; 0x158c <memcmp+0xe>
    1584:	8d 91       	ld	r24, X+
    1586:	01 90       	ld	r0, Z+
    1588:	80 19       	sub	r24, r0
    158a:	21 f4       	brne	.+8      	; 0x1594 <memcmp+0x16>
    158c:	41 50       	subi	r20, 0x01	; 1
    158e:	50 40       	sbci	r21, 0x00	; 0
    1590:	c8 f7       	brcc	.-14     	; 0x1584 <memcmp+0x6>
    1592:	88 1b       	sub	r24, r24
    1594:	99 0b       	sbc	r25, r25
    1596:	08 95       	ret

00001598 <memcpy>:
    1598:	fb 01       	movw	r30, r22
    159a:	dc 01       	movw	r26, r24
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <memcpy+0xa>
    159e:	01 90       	ld	r0, Z+
    15a0:	0d 92       	st	X+, r0
    15a2:	41 50       	subi	r20, 0x01	; 1
    15a4:	50 40       	sbci	r21, 0x00	; 0
    15a6:	d8 f7       	brcc	.-10     	; 0x159e <memcpy+0x6>
    15a8:	08 95       	ret

000015aa <memset>:
    15aa:	dc 01       	movw	r26, r24
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <memset+0x6>
    15ae:	6d 93       	st	X+, r22
    15b0:	41 50       	subi	r20, 0x01	; 1
    15b2:	50 40       	sbci	r21, 0x00	; 0
    15b4:	e0 f7       	brcc	.-8      	; 0x15ae <memset+0x4>
    15b6:	08 95       	ret

000015b8 <_exit>:
    15b8:	f8 94       	cli

000015ba <__stop_program>:
    15ba:	ff cf       	rjmp	.-2      	; 0x15ba <__stop_program>
