
MassStorageKeyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  000020da  0000216e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800180  00800180  000021ee  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000021f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00002c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000538  00000000  00000000  00002df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e6e  00000000  00000000  0000332f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000af56  00000000  00000000  0000419d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000025ae  00000000  00000000  0000f0f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008844  00000000  00000000  000116a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007f0  00000000  00000000  00019ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003ef5  00000000  00000000  0001a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005747  00000000  00000000  0001e5cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001272  00000000  00000000  00023d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000818  00000000  00000000  00024f86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       0:	c4 c0       	rjmp	.+392    	; 0x18a <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_10>
      2c:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <__vector_11>
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <KeyboardReport>:
      98:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
      a8:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
      b8:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
      c8:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0        %.....)...u....

000000d7 <DeviceDescriptor>:
      d7:	12 01 10 01 00 00 00 08 eb 03 61 20 01 00 01 02     ..........a ....
      e7:	dc 01                                               ..

000000e9 <ConfigurationDescriptor>:
      e9:	09 02 39 00 02 01 00 80 32 09 04 00 00 02 08 06     ..9.....2.......
      f9:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..
     109:	09 04 01 00 01 03 01 01 00 09 21 11 01 00 01 22     ..........!...."
     119:	3f 00 07 05 81 03 08 00 05                          ?........

00000122 <LanguageString>:
     122:	04 03 09 04                                         ....

00000126 <ManufacturerString>:
     126:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     136:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000140 <ProductString>:
     140:	48 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     H.L.U.F.A. .M.a.
     150:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     160:	67 00 65 00 20 00 61 00 6e 00 64 00 20 00 4b 00     g.e. .a.n.d. .K.
     170:	65 00 79 00 62 00 6f 00 61 00 72 00 64 00 20 00     e.y.b.o.a.r.d. .
     180:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

0000018a <__ctors_end>:
     18a:	11 24       	eor	r1, r1
     18c:	1f be       	out	0x3f, r1	; 63
     18e:	cf ef       	ldi	r28, 0xFF	; 255
     190:	d0 e2       	ldi	r29, 0x20	; 32
     192:	de bf       	out	0x3e, r29	; 62
     194:	cd bf       	out	0x3d, r28	; 61

00000196 <__do_copy_data>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b1 e0       	ldi	r27, 0x01	; 1
     19c:	ea ed       	ldi	r30, 0xDA	; 218
     19e:	f0 e2       	ldi	r31, 0x20	; 32
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a0 38       	cpi	r26, 0x80	; 128
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e8       	ldi	r26, 0x80	; 128
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a5 39       	cpi	r26, 0x95	; 149
     1bc:	b1 07       	cpc	r27, r17
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	4c d0       	rcall	.+152    	; 0x25a <main>
     1c2:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1c8:	9b b1       	in	r25, 0x0b	; 11
     1ca:	9f 70       	andi	r25, 0x0F	; 15
     1cc:	98 2b       	or	r25, r24
     1ce:	9b b9       	out	0x0b, r25	; 11
			}
     1d0:	08 95       	ret

000001d2 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1d2:	84 b7       	in	r24, 0x34	; 52
     1d4:	87 7f       	andi	r24, 0xF7	; 247
     1d6:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1d8:	88 e1       	ldi	r24, 0x18	; 24
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	f8 94       	cli
     1de:	80 93 60 00 	sts	0x0060, r24
     1e2:	10 92 60 00 	sts	0x0060, r1
     1e6:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	80 e8       	ldi	r24, 0x80	; 128
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	80 93 61 00 	sts	0x0061, r24
     1f4:	90 93 61 00 	sts	0x0061, r25
     1f8:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1fa:	8a b1       	in	r24, 0x0a	; 10
     1fc:	80 6f       	ori	r24, 0xF0	; 240
     1fe:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     200:	8b b1       	in	r24, 0x0b	; 11
     202:	8f 70       	andi	r24, 0x0F	; 15
     204:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     206:	84 b1       	in	r24, 0x04	; 4
     208:	8f 71       	andi	r24, 0x1F	; 31
     20a:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     20c:	8d b1       	in	r24, 0x0d	; 13
     20e:	8f 7c       	andi	r24, 0xCF	; 207
     210:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     212:	85 b1       	in	r24, 0x05	; 5
     214:	80 6e       	ori	r24, 0xE0	; 224
     216:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     218:	8e b1       	in	r24, 0x0e	; 14
     21a:	80 63       	ori	r24, 0x30	; 48
     21c:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     21e:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     220:	72 9a       	sbi	0x0e, 2	; 14
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     222:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     224:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     226:	84 b1       	in	r24, 0x04	; 4
     228:	86 60       	ori	r24, 0x06	; 6
     22a:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     22c:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     22e:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     230:	8d b5       	in	r24, 0x2d	; 45
     232:	81 60       	ori	r24, 0x01	; 1
     234:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     236:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     238:	8c e5       	ldi	r24, 0x5C	; 92
     23a:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     23c:	8d b1       	in	r24, 0x0d	; 13
     23e:	83 60       	ori	r24, 0x03	; 3
     240:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     242:	8e b1       	in	r24, 0x0e	; 14
     244:	83 60       	ori	r24, 0x03	; 3
     246:	8e b9       	out	0x0e, r24	; 14
	LEDs_Init();
	Joystick_Init();
	Buttons_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     248:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <USB_Init>

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     24c:	aa d3       	rcall	.+1876   	; 0x9a2 <DataflashManager_CheckDataflashOperation>
     24e:	88 23       	and	r24, r24
     250:	19 f4       	brne	.+6      	; 0x258 <SetupHardware+0x86>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     252:	80 e9       	ldi	r24, 0x90	; 144
     254:	b9 df       	rcall	.-142    	; 0x1c8 <LEDs_SetAllLEDs>
     256:	ff cf       	rjmp	.-2      	; 0x256 <SetupHardware+0x84>
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     258:	56 c3       	rjmp	.+1708   	; 0x906 <DataflashManager_ResetDataflashProtections>

0000025a <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     25a:	bb df       	rcall	.-138    	; 0x1d2 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     25c:	80 e1       	ldi	r24, 0x10	; 16
     25e:	b4 df       	rcall	.-152    	; 0x1c8 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     260:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <MS_Device_USBTask>
		HID_Device_USBTask(&Keyboard_HID_Interface);
     26a:	89 e3       	ldi	r24, 0x39	; 57
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <HID_Device_USBTask>
		USB_USBTask();
     272:	0e 94 81 0c 	call	0x1902	; 0x1902 <USB_USBTask>
     276:	f5 cf       	rjmp	.-22     	; 0x262 <main+0x8>

00000278 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     278:	80 ea       	ldi	r24, 0xA0	; 160
}
     27a:	a6 cf       	rjmp	.-180    	; 0x1c8 <LEDs_SetAllLEDs>

0000027c <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     27c:	80 e1       	ldi	r24, 0x10	; 16
}
     27e:	a4 cf       	rjmp	.-184    	; 0x1c8 <LEDs_SetAllLEDs>

00000280 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     280:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     282:	89 e3       	ldi	r24, 0x39	; 57
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <HID_Device_ConfigureEndpoints>
     28a:	18 2f       	mov	r17, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <MS_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     294:	90 91 e2 00 	lds	r25, 0x00E2
     298:	94 60       	ori	r25, 0x04	; 4
     29a:	90 93 e2 00 	sts	0x00E2, r25
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     29e:	21 2f       	mov	r18, r17
     2a0:	30 e0       	ldi	r19, 0x00	; 0
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     2a2:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     2a4:	28 23       	and	r18, r24
     2a6:	39 23       	and	r19, r25
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2a8:	20 ff       	sbrs	r18, 0
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <EVENT_USB_Device_ConfigurationChanged+0x30>
     2ac:	80 e6       	ldi	r24, 0x60	; 96
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <EVENT_USB_Device_ConfigurationChanged+0x32>
     2b0:	80 e9       	ldi	r24, 0x90	; 144
     2b2:	8a df       	rcall	.-236    	; 0x1c8 <LEDs_SetAllLEDs>
}
     2b4:	1f 91       	pop	r17
     2b6:	08 95       	ret

000002b8 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     2c0:	89 e3       	ldi	r24, 0x39	; 57
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <HID_Device_ProcessControlRequest>

000002c8 <CALLBACK_MS_Device_SCSICommandReceived>:
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     2c8:	1f 93       	push	r17
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     2d0:	80 e2       	ldi	r24, 0x20	; 32
     2d2:	7a df       	rcall	.-268    	; 0x1c8 <LEDs_SetAllLEDs>
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     2d4:	ce 01       	movw	r24, r28
     2d6:	f4 d3       	rcall	.+2024   	; 0xac0 <SCSI_DecodeSCSICommand>
     2d8:	18 2f       	mov	r17, r24
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     2da:	80 e6       	ldi	r24, 0x60	; 96
     2dc:	75 df       	rcall	.-278    	; 0x1c8 <LEDs_SetAllLEDs>

	return CommandSuccess;
}
     2de:	81 2f       	mov	r24, r17
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	08 95       	ret

000002e8 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     2e8:	80 91 47 01 	lds	r24, 0x0147
     2ec:	90 91 48 01 	lds	r25, 0x0148
     2f0:	00 97       	sbiw	r24, 0x00	; 0
     2f2:	29 f0       	breq	.+10     	; 0x2fe <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	90 93 48 01 	sts	0x0148, r25
     2fa:	80 93 47 01 	sts	0x0147, r24
     2fe:	08 95       	ret

00000300 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	d8 01       	movw	r26, r16
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
     306:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     308:	23 b1       	in	r18, 0x03	; 3
     30a:	8c b1       	in	r24, 0x0c	; 12
     30c:	80 95       	com	r24
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	80 73       	andi	r24, 0x30	; 48
     312:	90 70       	andi	r25, 0x00	; 0
     314:	95 95       	asr	r25
     316:	87 95       	ror	r24
     318:	20 95       	com	r18
     31a:	20 7e       	andi	r18, 0xE0	; 224
     31c:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     31e:	8c b1       	in	r24, 0x0c	; 12
     320:	80 95       	com	r24
     322:	84 70       	andi	r24, 0x04	; 4

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	90 83       	st	Z, r25

	if (JoyStatus_LCL & JOY_UP)
     328:	27 ff       	sbrs	r18, 7
     32a:	02 c0       	rjmp	.+4      	; 0x330 <CALLBACK_HID_Device_CreateHIDReport+0x30>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_A;
     32c:	94 e0       	ldi	r25, 0x04	; 4
     32e:	03 c0       	rjmp	.+6      	; 0x336 <CALLBACK_HID_Device_CreateHIDReport+0x36>
	else if (JoyStatus_LCL & JOY_DOWN)
     330:	24 ff       	sbrs	r18, 4
     332:	02 c0       	rjmp	.+4      	; 0x338 <CALLBACK_HID_Device_CreateHIDReport+0x38>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_B;
     334:	95 e0       	ldi	r25, 0x05	; 5
     336:	92 83       	std	Z+2, r25	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
     338:	26 ff       	sbrs	r18, 6
     33a:	02 c0       	rjmp	.+4      	; 0x340 <CALLBACK_HID_Device_CreateHIDReport+0x40>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_C;
     33c:	96 e0       	ldi	r25, 0x06	; 6
     33e:	03 c0       	rjmp	.+6      	; 0x346 <CALLBACK_HID_Device_CreateHIDReport+0x46>
	else if (JoyStatus_LCL & JOY_RIGHT)
     340:	23 ff       	sbrs	r18, 3
     342:	02 c0       	rjmp	.+4      	; 0x348 <CALLBACK_HID_Device_CreateHIDReport+0x48>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     344:	97 e0       	ldi	r25, 0x07	; 7
     346:	92 83       	std	Z+2, r25	; 0x02

	if (JoyStatus_LCL & JOY_PRESS)
     348:	25 ff       	sbrs	r18, 5
     34a:	02 c0       	rjmp	.+4      	; 0x350 <CALLBACK_HID_Device_CreateHIDReport+0x50>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
     34c:	98 e0       	ldi	r25, 0x08	; 8
     34e:	92 83       	std	Z+2, r25	; 0x02

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     350:	88 23       	and	r24, r24
     352:	11 f0       	breq	.+4      	; 0x358 <CALLBACK_HID_Device_CreateHIDReport+0x58>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_F;
     354:	89 e0       	ldi	r24, 0x09	; 9
     356:	82 83       	std	Z+2, r24	; 0x02

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     358:	88 e0       	ldi	r24, 0x08	; 8
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	11 96       	adiw	r26, 0x01	; 1
     35e:	9c 93       	st	X, r25
     360:	8e 93       	st	-X, r24
	return false;
}
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	08 95       	ret

0000036a <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     36a:	f9 01       	movw	r30, r18
     36c:	90 81       	ld	r25, Z
     36e:	90 ff       	sbrs	r25, 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <CALLBACK_HID_Device_ProcessHIDReport+0xc>
	  LEDMask |= LEDS_LED1;
     372:	80 e1       	ldi	r24, 0x10	; 16
     374:	01 c0       	rjmp	.+2      	; 0x378 <CALLBACK_HID_Device_ProcessHIDReport+0xe>
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
     376:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     378:	91 fd       	sbrc	r25, 1
	  LEDMask |= LEDS_LED3;
     37a:	80 68       	ori	r24, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     37c:	92 fd       	sbrc	r25, 2
	  LEDMask |= LEDS_LED4;
     37e:	80 64       	ori	r24, 0x40	; 64

	LEDs_SetAllLEDs(LEDMask);
}
     380:	23 cf       	rjmp	.-442    	; 0x1c8 <LEDs_SetAllLEDs>

00000382 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     382:	93 30       	cpi	r25, 0x03	; 3
     384:	89 f0       	breq	.+34     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x26>
     386:	94 30       	cpi	r25, 0x04	; 4
     388:	28 f4       	brcc	.+10     	; 0x394 <CALLBACK_USB_GetDescriptor+0x12>
     38a:	91 30       	cpi	r25, 0x01	; 1
     38c:	49 f1       	breq	.+82     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x5e>
     38e:	92 30       	cpi	r25, 0x02	; 2
     390:	61 f5       	brne	.+88     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x68>
     392:	05 c0       	rjmp	.+10     	; 0x39e <CALLBACK_USB_GetDescriptor+0x1c>
     394:	91 32       	cpi	r25, 0x21	; 33
     396:	d1 f0       	breq	.+52     	; 0x3cc <CALLBACK_USB_GetDescriptor+0x4a>
     398:	92 32       	cpi	r25, 0x22	; 34
     39a:	39 f5       	brne	.+78     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x68>
     39c:	1c c0       	rjmp	.+56     	; 0x3d6 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     39e:	29 e3       	ldi	r18, 0x39	; 57
     3a0:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3a2:	e9 ee       	ldi	r30, 0xE9	; 233
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3a6:	25 c0       	rjmp	.+74     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     3a8:	81 30       	cpi	r24, 0x01	; 1
     3aa:	41 f0       	breq	.+16     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x3a>
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	18 f0       	brcs	.+6      	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x34>
     3b0:	82 30       	cpi	r24, 0x02	; 2
     3b2:	d9 f4       	brne	.+54     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x68>
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3b6:	e2 e2       	ldi	r30, 0x22	; 34
     3b8:	f1 e0       	ldi	r31, 0x01	; 1
     3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3bc:	e6 e2       	ldi	r30, 0x26	; 38
     3be:	f1 e0       	ldi	r31, 0x01	; 1
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3c2:	e0 e4       	ldi	r30, 0x40	; 64
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	24 91       	lpm	r18, Z+
     3c8:	30 e0       	ldi	r19, 0x00	; 0
					break;
     3ca:	13 c0       	rjmp	.+38     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     3cc:	29 e0       	ldi	r18, 0x09	; 9
     3ce:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
     3d0:	e2 e1       	ldi	r30, 0x12	; 18
     3d2:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3d4:	0e c0       	rjmp	.+28     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
     3d6:	2f e3       	ldi	r18, 0x3F	; 63
     3d8:	30 e0       	ldi	r19, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
     3da:	e8 e9       	ldi	r30, 0x98	; 152
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(KeyboardReport);
			break;
     3de:	09 c0       	rjmp	.+18     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3e0:	22 e1       	ldi	r18, 0x12	; 18
     3e2:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     3e4:	e7 ed       	ldi	r30, 0xD7	; 215
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3ee:	e0 e0       	ldi	r30, 0x00	; 0
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     3f2:	da 01       	movw	r26, r20
     3f4:	11 96       	adiw	r26, 0x01	; 1
     3f6:	fc 93       	st	X, r31
     3f8:	ee 93       	st	-X, r30
	return Size;
}
     3fa:	c9 01       	movw	r24, r18
     3fc:	08 95       	ret

000003fe <Dataflash_SelectChipFromPage>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     3fe:	2e b1       	in	r18, 0x0e	; 14
     400:	23 60       	ori	r18, 0x03	; 3
     402:	2e b9       	out	0x0e, r18	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     404:	20 e4       	ldi	r18, 0x40	; 64
     406:	80 30       	cpi	r24, 0x00	; 0
     408:	92 07       	cpc	r25, r18
     40a:	58 f4       	brcc	.+22     	; 0x422 <Dataflash_SelectChipFromPage+0x24>
				  return;

				#if (DATAFLASH_TOTALCHIPS == 2)
					if (PageAddress & 0x01)
     40c:	80 ff       	sbrs	r24, 0
     40e:	05 c0       	rjmp	.+10     	; 0x41a <Dataflash_SelectChipFromPage+0x1c>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     410:	8e b1       	in	r24, 0x0e	; 14
     412:	83 60       	ori	r24, 0x03	; 3
     414:	8d 7f       	andi	r24, 0xFD	; 253
     416:	8e b9       	out	0x0e, r24	; 14
     418:	08 95       	ret
     41a:	8e b1       	in	r24, 0x0e	; 14
     41c:	83 60       	ori	r24, 0x03	; 3
     41e:	8e 7f       	andi	r24, 0xFE	; 254
     420:	8e b9       	out	0x0e, r24	; 14
     422:	08 95       	ret

00000424 <Dataflash_ToggleSelectedChipCS>:
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     424:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     426:	9e b1       	in	r25, 0x0e	; 14
     428:	93 60       	ori	r25, 0x03	; 3
     42a:	9e b9       	out	0x0e, r25	; 14
     42c:	9e b1       	in	r25, 0x0e	; 14
     42e:	8c 6f       	ori	r24, 0xFC	; 252
     430:	93 60       	ori	r25, 0x03	; 3
     432:	89 23       	and	r24, r25
     434:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     436:	08 95       	ret

00000438 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     438:	f5 df       	rcall	.-22     	; 0x424 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     43a:	87 ed       	ldi	r24, 0xD7	; 215
     43c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     43e:	0d b4       	in	r0, 0x2d	; 45
     440:	07 fe       	sbrs	r0, 7
     442:	fd cf       	rjmp	.-6      	; 0x43e <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     444:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     446:	0d b4       	in	r0, 0x2d	; 45
     448:	07 fe       	sbrs	r0, 7
     44a:	fd cf       	rjmp	.-6      	; 0x446 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     44c:	0e b4       	in	r0, 0x2e	; 46
     44e:	07 fe       	sbrs	r0, 7
     450:	f9 cf       	rjmp	.-14     	; 0x444 <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     452:	e8 cf       	rjmp	.-48     	; 0x424 <Dataflash_ToggleSelectedChipCS>

00000454 <Dataflash_SendAddressBytes>:
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				#if (DATAFLASH_TOTALCHIPS == 2)
					PageAddress >>= 1;
     454:	9c 01       	movw	r18, r24
     456:	36 95       	lsr	r19
     458:	27 95       	ror	r18
				#endif
				
				Dataflash_SendByte(PageAddress >> 5);
     45a:	36 e0       	ldi	r19, 0x06	; 6
     45c:	96 95       	lsr	r25
     45e:	87 95       	ror	r24
     460:	3a 95       	dec	r19
     462:	e1 f7       	brne	.-8      	; 0x45c <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     464:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     466:	0d b4       	in	r0, 0x2d	; 45
     468:	07 fe       	sbrs	r0, 7
     46a:	fd cf       	rjmp	.-6      	; 0x466 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     46c:	22 0f       	add	r18, r18
     46e:	22 0f       	add	r18, r18
     470:	22 0f       	add	r18, r18
     472:	27 2b       	or	r18, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     474:	2e bd       	out	0x2e, r18	; 46
				while (!(SPSR & (1 << SPIF)));
     476:	0d b4       	in	r0, 0x2d	; 45
     478:	07 fe       	sbrs	r0, 7
     47a:	fd cf       	rjmp	.-6      	; 0x476 <Dataflash_SendAddressBytes+0x22>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     47c:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     47e:	0d b4       	in	r0, 0x2d	; 45
     480:	07 fe       	sbrs	r0, 7
     482:	fd cf       	rjmp	.-6      	; 0x47e <Dataflash_SendAddressBytes+0x2a>
				Dataflash_SendByte(BufferByte);
			}
     484:	08 95       	ret

00000486 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     486:	6f 92       	push	r6
     488:	7f 92       	push	r7
     48a:	9f 92       	push	r9
     48c:	af 92       	push	r10
     48e:	bf 92       	push	r11
     490:	cf 92       	push	r12
     492:	df 92       	push	r13
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	df 93       	push	r29
     49e:	cf 93       	push	r28
     4a0:	0f 92       	push	r0
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	6c 01       	movw	r12, r24
     4a8:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     4aa:	db 01       	movw	r26, r22
     4ac:	ca 01       	movw	r24, r20
     4ae:	19 e0       	ldi	r17, 0x09	; 9
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	aa 1f       	adc	r26, r26
     4b6:	bb 1f       	adc	r27, r27
     4b8:	1a 95       	dec	r17
     4ba:	d1 f7       	brne	.-12     	; 0x4b0 <DataflashManager_WriteBlocks+0x2a>
     4bc:	fa e0       	ldi	r31, 0x0A	; 10
     4be:	b6 95       	lsr	r27
     4c0:	a7 95       	ror	r26
     4c2:	97 95       	ror	r25
     4c4:	87 95       	ror	r24
     4c6:	fa 95       	dec	r31
     4c8:	d1 f7       	brne	.-12     	; 0x4be <DataflashManager_WriteBlocks+0x38>
     4ca:	3c 01       	movw	r6, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     4cc:	8a 01       	movw	r16, r20
     4ce:	10 2f       	mov	r17, r16
     4d0:	00 27       	eor	r16, r16
     4d2:	11 0f       	add	r17, r17
     4d4:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     4d6:	93 df       	rcall	.-218    	; 0x3fe <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4d8:	83 e5       	ldi	r24, 0x53	; 83
     4da:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4dc:	0d b4       	in	r0, 0x2d	; 45
     4de:	07 fe       	sbrs	r0, 7
     4e0:	fd cf       	rjmp	.-6      	; 0x4dc <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     4e2:	c3 01       	movw	r24, r6
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	b5 df       	rcall	.-150    	; 0x454 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     4ea:	a6 df       	rcall	.-180    	; 0x438 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4ec:	84 e8       	ldi	r24, 0x84	; 132
     4ee:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4f0:	0d b4       	in	r0, 0x2d	; 45
     4f2:	07 fe       	sbrs	r0, 7
     4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	b8 01       	movw	r22, r16
     4fc:	ab df       	rcall	.-170    	; 0x454 <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     4fe:	f7 d6       	rcall	.+3566   	; 0x12ee <Endpoint_WaitUntilReady>
     500:	88 23       	and	r24, r24
     502:	09 f0       	breq	.+2      	; 0x506 <DataflashManager_WriteBlocks+0x80>
     504:	ea c0       	rjmp	.+468    	; 0x6da <DataflashManager_WriteBlocks+0x254>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     506:	74 e0       	ldi	r23, 0x04	; 4
     508:	16 95       	lsr	r17
     50a:	07 95       	ror	r16
     50c:	7a 95       	dec	r23
     50e:	e1 f7       	brne	.-8      	; 0x508 <DataflashManager_WriteBlocks+0x82>
     510:	90 2f       	mov	r25, r16
     512:	87 01       	movw	r16, r14
     514:	65 e0       	ldi	r22, 0x05	; 5
     516:	00 0f       	add	r16, r16
     518:	11 1f       	adc	r17, r17
     51a:	6a 95       	dec	r22
     51c:	e1 f7       	brne	.-8      	; 0x516 <DataflashManager_WriteBlocks+0x90>
     51e:	bb 24       	eor	r11, r11
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     520:	99 24       	eor	r9, r9
     522:	93 94       	inc	r9
     524:	bb c0       	rjmp	.+374    	; 0x69c <DataflashManager_WriteBlocks+0x216>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     526:	50 e2       	ldi	r21, 0x20	; 32
     528:	a5 2e       	mov	r10, r21
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     52a:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     52e:	85 fd       	sbrc	r24, 5
     530:	0b c0       	rjmp	.+22     	; 0x548 <DataflashManager_WriteBlocks+0xc2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     532:	80 91 e8 00 	lds	r24, 0x00E8
     536:	8b 77       	andi	r24, 0x7B	; 123
     538:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     53c:	99 83       	std	Y+1, r25	; 0x01
     53e:	d7 d6       	rcall	.+3502   	; 0x12ee <Endpoint_WaitUntilReady>
     540:	99 81       	ldd	r25, Y+1	; 0x01
     542:	88 23       	and	r24, r24
     544:	09 f0       	breq	.+2      	; 0x548 <DataflashManager_WriteBlocks+0xc2>
     546:	c9 c0       	rjmp	.+402    	; 0x6da <DataflashManager_WriteBlocks+0x254>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     548:	90 34       	cpi	r25, 0x40	; 64
     54a:	09 f0       	breq	.+2      	; 0x54e <DataflashManager_WriteBlocks+0xc8>
     54c:	3a c0       	rjmp	.+116    	; 0x5c2 <DataflashManager_WriteBlocks+0x13c>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     54e:	74 df       	rcall	.-280    	; 0x438 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     550:	bb 20       	and	r11, r11
     552:	11 f0       	breq	.+4      	; 0x558 <DataflashManager_WriteBlocks+0xd2>
     554:	86 e8       	ldi	r24, 0x86	; 134
     556:	01 c0       	rjmp	.+2      	; 0x55a <DataflashManager_WriteBlocks+0xd4>
     558:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     55a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     55c:	0d b4       	in	r0, 0x2d	; 45
     55e:	07 fe       	sbrs	r0, 7
     560:	fd cf       	rjmp	.-6      	; 0x55c <DataflashManager_WriteBlocks+0xd6>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     562:	c3 01       	movw	r24, r6
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	75 df       	rcall	.-278    	; 0x454 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     56a:	08 94       	sec
     56c:	61 1c       	adc	r6, r1
     56e:	71 1c       	adc	r7, r1
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     570:	8e b1       	in	r24, 0x0e	; 14
     572:	80 95       	com	r24
     574:	83 70       	andi	r24, 0x03	; 3

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	09 f4       	brne	.+2      	; 0x57c <DataflashManager_WriteBlocks+0xf6>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     57a:	b9 24       	eor	r11, r9

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     57c:	c3 01       	movw	r24, r6
     57e:	3f df       	rcall	.-386    	; 0x3fe <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     580:	00 34       	cpi	r16, 0x40	; 64
     582:	11 05       	cpc	r17, r1
     584:	78 f4       	brcc	.+30     	; 0x5a4 <DataflashManager_WriteBlocks+0x11e>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     586:	58 df       	rcall	.-336    	; 0x438 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     588:	bb 20       	and	r11, r11
     58a:	11 f0       	breq	.+4      	; 0x590 <DataflashManager_WriteBlocks+0x10a>
     58c:	85 e5       	ldi	r24, 0x55	; 85
     58e:	01 c0       	rjmp	.+2      	; 0x592 <DataflashManager_WriteBlocks+0x10c>
     590:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     592:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     594:	0d b4       	in	r0, 0x2d	; 45
     596:	07 fe       	sbrs	r0, 7
     598:	fd cf       	rjmp	.-6      	; 0x594 <DataflashManager_WriteBlocks+0x10e>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     59a:	c3 01       	movw	r24, r6
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	59 df       	rcall	.-334    	; 0x454 <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     5a2:	4a df       	rcall	.-364    	; 0x438 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     5a4:	bb 20       	and	r11, r11
     5a6:	11 f0       	breq	.+4      	; 0x5ac <DataflashManager_WriteBlocks+0x126>
     5a8:	87 e8       	ldi	r24, 0x87	; 135
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <DataflashManager_WriteBlocks+0x128>
     5ac:	84 e8       	ldi	r24, 0x84	; 132
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ae:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5b0:	0d b4       	in	r0, 0x2d	; 45
     5b2:	07 fe       	sbrs	r0, 7
     5b4:	fd cf       	rjmp	.-6      	; 0x5b0 <DataflashManager_WriteBlocks+0x12a>
				Dataflash_SendAddressBytes(0, 0);
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	4a df       	rcall	.-364    	; 0x454 <Dataflash_SendAddressBytes>
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     5c0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     5c2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5c6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5c8:	0d b4       	in	r0, 0x2d	; 45
     5ca:	07 fe       	sbrs	r0, 7
     5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <DataflashManager_WriteBlocks+0x142>
     5ce:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5d2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5d4:	0d b4       	in	r0, 0x2d	; 45
     5d6:	07 fe       	sbrs	r0, 7
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <DataflashManager_WriteBlocks+0x14e>
     5da:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5de:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5e0:	0d b4       	in	r0, 0x2d	; 45
     5e2:	07 fe       	sbrs	r0, 7
     5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <DataflashManager_WriteBlocks+0x15a>
     5e6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ea:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5ec:	0d b4       	in	r0, 0x2d	; 45
     5ee:	07 fe       	sbrs	r0, 7
     5f0:	fd cf       	rjmp	.-6      	; 0x5ec <DataflashManager_WriteBlocks+0x166>
     5f2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5f6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5f8:	0d b4       	in	r0, 0x2d	; 45
     5fa:	07 fe       	sbrs	r0, 7
     5fc:	fd cf       	rjmp	.-6      	; 0x5f8 <DataflashManager_WriteBlocks+0x172>
     5fe:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     602:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     604:	0d b4       	in	r0, 0x2d	; 45
     606:	07 fe       	sbrs	r0, 7
     608:	fd cf       	rjmp	.-6      	; 0x604 <DataflashManager_WriteBlocks+0x17e>
     60a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     60e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     610:	0d b4       	in	r0, 0x2d	; 45
     612:	07 fe       	sbrs	r0, 7
     614:	fd cf       	rjmp	.-6      	; 0x610 <DataflashManager_WriteBlocks+0x18a>
     616:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     61a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     61c:	0d b4       	in	r0, 0x2d	; 45
     61e:	07 fe       	sbrs	r0, 7
     620:	fd cf       	rjmp	.-6      	; 0x61c <DataflashManager_WriteBlocks+0x196>
     622:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     626:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     628:	0d b4       	in	r0, 0x2d	; 45
     62a:	07 fe       	sbrs	r0, 7
     62c:	fd cf       	rjmp	.-6      	; 0x628 <DataflashManager_WriteBlocks+0x1a2>
     62e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     632:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     634:	0d b4       	in	r0, 0x2d	; 45
     636:	07 fe       	sbrs	r0, 7
     638:	fd cf       	rjmp	.-6      	; 0x634 <DataflashManager_WriteBlocks+0x1ae>
     63a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     63e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     640:	0d b4       	in	r0, 0x2d	; 45
     642:	07 fe       	sbrs	r0, 7
     644:	fd cf       	rjmp	.-6      	; 0x640 <DataflashManager_WriteBlocks+0x1ba>
     646:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     64a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     64c:	0d b4       	in	r0, 0x2d	; 45
     64e:	07 fe       	sbrs	r0, 7
     650:	fd cf       	rjmp	.-6      	; 0x64c <DataflashManager_WriteBlocks+0x1c6>
     652:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     656:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     658:	0d b4       	in	r0, 0x2d	; 45
     65a:	07 fe       	sbrs	r0, 7
     65c:	fd cf       	rjmp	.-6      	; 0x658 <DataflashManager_WriteBlocks+0x1d2>
     65e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     662:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     664:	0d b4       	in	r0, 0x2d	; 45
     666:	07 fe       	sbrs	r0, 7
     668:	fd cf       	rjmp	.-6      	; 0x664 <DataflashManager_WriteBlocks+0x1de>
     66a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     66e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     670:	0d b4       	in	r0, 0x2d	; 45
     672:	07 fe       	sbrs	r0, 7
     674:	fd cf       	rjmp	.-6      	; 0x670 <DataflashManager_WriteBlocks+0x1ea>
     676:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     67a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     67c:	0d b4       	in	r0, 0x2d	; 45
     67e:	07 fe       	sbrs	r0, 7
     680:	fd cf       	rjmp	.-6      	; 0x67c <DataflashManager_WriteBlocks+0x1f6>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     682:	f6 01       	movw	r30, r12
     684:	80 ad       	ldd	r24, Z+56	; 0x38
     686:	88 23       	and	r24, r24
     688:	41 f5       	brne	.+80     	; 0x6da <DataflashManager_WriteBlocks+0x254>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     68a:	9f 5f       	subi	r25, 0xFF	; 255
     68c:	aa 94       	dec	r10
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     68e:	09 f0       	breq	.+2      	; 0x692 <DataflashManager_WriteBlocks+0x20c>
     690:	4c cf       	rjmp	.-360    	; 0x52a <DataflashManager_WriteBlocks+0xa4>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     692:	08 94       	sec
     694:	e1 08       	sbc	r14, r1
     696:	f1 08       	sbc	r15, r1
     698:	00 52       	subi	r16, 0x20	; 32
     69a:	10 40       	sbci	r17, 0x00	; 0

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     69c:	e1 14       	cp	r14, r1
     69e:	f1 04       	cpc	r15, r1
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <DataflashManager_WriteBlocks+0x21e>
     6a2:	41 cf       	rjmp	.-382    	; 0x526 <DataflashManager_WriteBlocks+0xa0>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     6a4:	c9 de       	rcall	.-622    	; 0x438 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     6a6:	bb 20       	and	r11, r11
     6a8:	11 f0       	breq	.+4      	; 0x6ae <DataflashManager_WriteBlocks+0x228>
     6aa:	86 e8       	ldi	r24, 0x86	; 134
     6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <DataflashManager_WriteBlocks+0x22a>
     6ae:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6b0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6b2:	0d b4       	in	r0, 0x2d	; 45
     6b4:	07 fe       	sbrs	r0, 7
     6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <DataflashManager_WriteBlocks+0x22c>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     6b8:	c3 01       	movw	r24, r6
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	ca de       	rcall	.-620    	; 0x454 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     6c0:	bb de       	rcall	.-650    	; 0x438 <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6c2:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     6c6:	85 fd       	sbrc	r24, 5
     6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <DataflashManager_WriteBlocks+0x24e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6ca:	80 91 e8 00 	lds	r24, 0x00E8
     6ce:	8b 77       	andi	r24, 0x7B	; 123
     6d0:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     6d4:	8e b1       	in	r24, 0x0e	; 14
     6d6:	83 60       	ori	r24, 0x03	; 3
     6d8:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     6da:	0f 90       	pop	r0
     6dc:	cf 91       	pop	r28
     6de:	df 91       	pop	r29
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	bf 90       	pop	r11
     6ee:	af 90       	pop	r10
     6f0:	9f 90       	pop	r9
     6f2:	7f 90       	pop	r7
     6f4:	6f 90       	pop	r6
     6f6:	08 95       	ret

000006f8 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     6f8:	bf 92       	push	r11
     6fa:	cf 92       	push	r12
     6fc:	df 92       	push	r13
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	6c 01       	movw	r12, r24
     70c:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     70e:	db 01       	movw	r26, r22
     710:	ca 01       	movw	r24, r20
     712:	69 e0       	ldi	r22, 0x09	; 9
     714:	88 0f       	add	r24, r24
     716:	99 1f       	adc	r25, r25
     718:	aa 1f       	adc	r26, r26
     71a:	bb 1f       	adc	r27, r27
     71c:	6a 95       	dec	r22
     71e:	d1 f7       	brne	.-12     	; 0x714 <DataflashManager_ReadBlocks+0x1c>
     720:	3a e0       	ldi	r19, 0x0A	; 10
     722:	b6 95       	lsr	r27
     724:	a7 95       	ror	r26
     726:	97 95       	ror	r25
     728:	87 95       	ror	r24
     72a:	3a 95       	dec	r19
     72c:	d1 f7       	brne	.-12     	; 0x722 <DataflashManager_ReadBlocks+0x2a>
     72e:	ec 01       	movw	r28, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     730:	8a 01       	movw	r16, r20
     732:	10 2f       	mov	r17, r16
     734:	00 27       	eor	r16, r16
     736:	11 0f       	add	r17, r17
     738:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     73a:	61 de       	rcall	.-830    	; 0x3fe <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     73c:	82 ed       	ldi	r24, 0xD2	; 210
     73e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     740:	0d b4       	in	r0, 0x2d	; 45
     742:	07 fe       	sbrs	r0, 7
     744:	fd cf       	rjmp	.-6      	; 0x740 <DataflashManager_ReadBlocks+0x48>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     746:	ce 01       	movw	r24, r28
     748:	b8 01       	movw	r22, r16
     74a:	84 de       	rcall	.-760    	; 0x454 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     74c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     74e:	0d b4       	in	r0, 0x2d	; 45
     750:	07 fe       	sbrs	r0, 7
     752:	fd cf       	rjmp	.-6      	; 0x74e <DataflashManager_ReadBlocks+0x56>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     754:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     756:	0d b4       	in	r0, 0x2d	; 45
     758:	07 fe       	sbrs	r0, 7
     75a:	fd cf       	rjmp	.-6      	; 0x756 <DataflashManager_ReadBlocks+0x5e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     75c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     75e:	0d b4       	in	r0, 0x2d	; 45
     760:	07 fe       	sbrs	r0, 7
     762:	fd cf       	rjmp	.-6      	; 0x75e <DataflashManager_ReadBlocks+0x66>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     764:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     766:	0d b4       	in	r0, 0x2d	; 45
     768:	07 fe       	sbrs	r0, 7
     76a:	fd cf       	rjmp	.-6      	; 0x766 <DataflashManager_ReadBlocks+0x6e>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     76c:	c0 d5       	rcall	.+2944   	; 0x12ee <Endpoint_WaitUntilReady>
     76e:	88 23       	and	r24, r24
     770:	09 f0       	breq	.+2      	; 0x774 <DataflashManager_ReadBlocks+0x7c>
     772:	bf c0       	rjmp	.+382    	; 0x8f2 <DataflashManager_ReadBlocks+0x1fa>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     774:	94 e0       	ldi	r25, 0x04	; 4
     776:	16 95       	lsr	r17
     778:	07 95       	ror	r16
     77a:	9a 95       	dec	r25
     77c:	e1 f7       	brne	.-8      	; 0x776 <DataflashManager_ReadBlocks+0x7e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     77e:	82 ed       	ldi	r24, 0xD2	; 210
     780:	b8 2e       	mov	r11, r24
     782:	a7 c0       	rjmp	.+334    	; 0x8d2 <DataflashManager_ReadBlocks+0x1da>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     784:	10 e2       	ldi	r17, 0x20	; 32
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     786:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     78a:	85 fd       	sbrc	r24, 5
     78c:	09 c0       	rjmp	.+18     	; 0x7a0 <DataflashManager_ReadBlocks+0xa8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     78e:	80 91 e8 00 	lds	r24, 0x00E8
     792:	8e 77       	andi	r24, 0x7E	; 126
     794:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     798:	aa d5       	rcall	.+2900   	; 0x12ee <Endpoint_WaitUntilReady>
     79a:	88 23       	and	r24, r24
     79c:	09 f0       	breq	.+2      	; 0x7a0 <DataflashManager_ReadBlocks+0xa8>
     79e:	a9 c0       	rjmp	.+338    	; 0x8f2 <DataflashManager_ReadBlocks+0x1fa>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     7a0:	00 34       	cpi	r16, 0x40	; 64
     7a2:	e1 f4       	brne	.+56     	; 0x7dc <DataflashManager_ReadBlocks+0xe4>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     7a4:	21 96       	adiw	r28, 0x01	; 1

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     7a6:	ce 01       	movw	r24, r28
     7a8:	2a de       	rcall	.-940    	; 0x3fe <Dataflash_SelectChipFromPage>
     7aa:	be bc       	out	0x2e, r11	; 46
				while (!(SPSR & (1 << SPIF)));
     7ac:	0d b4       	in	r0, 0x2d	; 45
     7ae:	07 fe       	sbrs	r0, 7
     7b0:	fd cf       	rjmp	.-6      	; 0x7ac <DataflashManager_ReadBlocks+0xb4>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     7b2:	ce 01       	movw	r24, r28
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	4d de       	rcall	.-870    	; 0x454 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7ba:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7bc:	0d b4       	in	r0, 0x2d	; 45
     7be:	07 fe       	sbrs	r0, 7
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <DataflashManager_ReadBlocks+0xc4>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7c2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7c4:	0d b4       	in	r0, 0x2d	; 45
     7c6:	07 fe       	sbrs	r0, 7
     7c8:	fd cf       	rjmp	.-6      	; 0x7c4 <DataflashManager_ReadBlocks+0xcc>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7ca:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7cc:	0d b4       	in	r0, 0x2d	; 45
     7ce:	07 fe       	sbrs	r0, 7
     7d0:	fd cf       	rjmp	.-6      	; 0x7cc <DataflashManager_ReadBlocks+0xd4>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7d2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7d4:	0d b4       	in	r0, 0x2d	; 45
     7d6:	07 fe       	sbrs	r0, 7
     7d8:	fd cf       	rjmp	.-6      	; 0x7d4 <DataflashManager_ReadBlocks+0xdc>

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     7da:	00 e0       	ldi	r16, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7dc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7de:	0d b4       	in	r0, 0x2d	; 45
     7e0:	07 fe       	sbrs	r0, 7
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <DataflashManager_ReadBlocks+0xe6>
				return SPDR;
     7e4:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7e6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7ea:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7ec:	0d b4       	in	r0, 0x2d	; 45
     7ee:	07 fe       	sbrs	r0, 7
     7f0:	fd cf       	rjmp	.-6      	; 0x7ec <DataflashManager_ReadBlocks+0xf4>
				return SPDR;
     7f2:	8e b5       	in	r24, 0x2e	; 46
     7f4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7f8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7fa:	0d b4       	in	r0, 0x2d	; 45
     7fc:	07 fe       	sbrs	r0, 7
     7fe:	fd cf       	rjmp	.-6      	; 0x7fa <DataflashManager_ReadBlocks+0x102>
				return SPDR;
     800:	8e b5       	in	r24, 0x2e	; 46
     802:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     806:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     808:	0d b4       	in	r0, 0x2d	; 45
     80a:	07 fe       	sbrs	r0, 7
     80c:	fd cf       	rjmp	.-6      	; 0x808 <DataflashManager_ReadBlocks+0x110>
				return SPDR;
     80e:	8e b5       	in	r24, 0x2e	; 46
     810:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     814:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     816:	0d b4       	in	r0, 0x2d	; 45
     818:	07 fe       	sbrs	r0, 7
     81a:	fd cf       	rjmp	.-6      	; 0x816 <DataflashManager_ReadBlocks+0x11e>
				return SPDR;
     81c:	8e b5       	in	r24, 0x2e	; 46
     81e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     822:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     824:	0d b4       	in	r0, 0x2d	; 45
     826:	07 fe       	sbrs	r0, 7
     828:	fd cf       	rjmp	.-6      	; 0x824 <DataflashManager_ReadBlocks+0x12c>
				return SPDR;
     82a:	8e b5       	in	r24, 0x2e	; 46
     82c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     830:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     832:	0d b4       	in	r0, 0x2d	; 45
     834:	07 fe       	sbrs	r0, 7
     836:	fd cf       	rjmp	.-6      	; 0x832 <DataflashManager_ReadBlocks+0x13a>
				return SPDR;
     838:	8e b5       	in	r24, 0x2e	; 46
     83a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     83e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     840:	0d b4       	in	r0, 0x2d	; 45
     842:	07 fe       	sbrs	r0, 7
     844:	fd cf       	rjmp	.-6      	; 0x840 <DataflashManager_ReadBlocks+0x148>
				return SPDR;
     846:	8e b5       	in	r24, 0x2e	; 46
     848:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     84c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     84e:	0d b4       	in	r0, 0x2d	; 45
     850:	07 fe       	sbrs	r0, 7
     852:	fd cf       	rjmp	.-6      	; 0x84e <DataflashManager_ReadBlocks+0x156>
				return SPDR;
     854:	8e b5       	in	r24, 0x2e	; 46
     856:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     85a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     85c:	0d b4       	in	r0, 0x2d	; 45
     85e:	07 fe       	sbrs	r0, 7
     860:	fd cf       	rjmp	.-6      	; 0x85c <DataflashManager_ReadBlocks+0x164>
				return SPDR;
     862:	8e b5       	in	r24, 0x2e	; 46
     864:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     868:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     86a:	0d b4       	in	r0, 0x2d	; 45
     86c:	07 fe       	sbrs	r0, 7
     86e:	fd cf       	rjmp	.-6      	; 0x86a <DataflashManager_ReadBlocks+0x172>
				return SPDR;
     870:	8e b5       	in	r24, 0x2e	; 46
     872:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     876:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     878:	0d b4       	in	r0, 0x2d	; 45
     87a:	07 fe       	sbrs	r0, 7
     87c:	fd cf       	rjmp	.-6      	; 0x878 <DataflashManager_ReadBlocks+0x180>
				return SPDR;
     87e:	8e b5       	in	r24, 0x2e	; 46
     880:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     884:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     886:	0d b4       	in	r0, 0x2d	; 45
     888:	07 fe       	sbrs	r0, 7
     88a:	fd cf       	rjmp	.-6      	; 0x886 <DataflashManager_ReadBlocks+0x18e>
				return SPDR;
     88c:	8e b5       	in	r24, 0x2e	; 46
     88e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     892:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     894:	0d b4       	in	r0, 0x2d	; 45
     896:	07 fe       	sbrs	r0, 7
     898:	fd cf       	rjmp	.-6      	; 0x894 <DataflashManager_ReadBlocks+0x19c>
				return SPDR;
     89a:	8e b5       	in	r24, 0x2e	; 46
     89c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8a0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8a2:	0d b4       	in	r0, 0x2d	; 45
     8a4:	07 fe       	sbrs	r0, 7
     8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <DataflashManager_ReadBlocks+0x1aa>
				return SPDR;
     8a8:	8e b5       	in	r24, 0x2e	; 46
     8aa:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8ae:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8b0:	0d b4       	in	r0, 0x2d	; 45
     8b2:	07 fe       	sbrs	r0, 7
     8b4:	fd cf       	rjmp	.-6      	; 0x8b0 <DataflashManager_ReadBlocks+0x1b8>
				return SPDR;
     8b6:	8e b5       	in	r24, 0x2e	; 46
     8b8:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     8bc:	f6 01       	movw	r30, r12
     8be:	80 ad       	ldd	r24, Z+56	; 0x38
     8c0:	88 23       	and	r24, r24
     8c2:	b9 f4       	brne	.+46     	; 0x8f2 <DataflashManager_ReadBlocks+0x1fa>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     8c4:	0f 5f       	subi	r16, 0xFF	; 255
     8c6:	11 50       	subi	r17, 0x01	; 1
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     8c8:	09 f0       	breq	.+2      	; 0x8cc <DataflashManager_ReadBlocks+0x1d4>
     8ca:	5d cf       	rjmp	.-326    	; 0x786 <DataflashManager_ReadBlocks+0x8e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     8cc:	08 94       	sec
     8ce:	e1 08       	sbc	r14, r1
     8d0:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     8d2:	e1 14       	cp	r14, r1
     8d4:	f1 04       	cpc	r15, r1
     8d6:	09 f0       	breq	.+2      	; 0x8da <DataflashManager_ReadBlocks+0x1e2>
     8d8:	55 cf       	rjmp	.-342    	; 0x784 <DataflashManager_ReadBlocks+0x8c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     8da:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     8de:	85 fd       	sbrc	r24, 5
     8e0:	05 c0       	rjmp	.+10     	; 0x8ec <DataflashManager_ReadBlocks+0x1f4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8e2:	80 91 e8 00 	lds	r24, 0x00E8
     8e6:	8e 77       	andi	r24, 0x7E	; 126
     8e8:	80 93 e8 00 	sts	0x00E8, r24
     8ec:	8e b1       	in	r24, 0x0e	; 14
     8ee:	83 60       	ori	r24, 0x03	; 3
     8f0:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	08 95       	ret

00000906 <DataflashManager_ResetDataflashProtections>:
     906:	8e b1       	in	r24, 0x0e	; 14
     908:	83 60       	ori	r24, 0x03	; 3
     90a:	8e 7f       	andi	r24, 0xFE	; 254
     90c:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     90e:	87 ed       	ldi	r24, 0xD7	; 215
     910:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     912:	0d b4       	in	r0, 0x2d	; 45
     914:	07 fe       	sbrs	r0, 7
     916:	fd cf       	rjmp	.-6      	; 0x912 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     918:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     91a:	0d b4       	in	r0, 0x2d	; 45
     91c:	07 fe       	sbrs	r0, 7
     91e:	fd cf       	rjmp	.-6      	; 0x91a <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     920:	0e b4       	in	r0, 0x2e	; 46
     922:	01 fe       	sbrs	r0, 1
     924:	15 c0       	rjmp	.+42     	; 0x950 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     926:	7e dd       	rcall	.-1284   	; 0x424 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     928:	8d e3       	ldi	r24, 0x3D	; 61
     92a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     92c:	0d b4       	in	r0, 0x2d	; 45
     92e:	07 fe       	sbrs	r0, 7
     930:	fd cf       	rjmp	.-6      	; 0x92c <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     932:	8a e2       	ldi	r24, 0x2A	; 42
     934:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     936:	0d b4       	in	r0, 0x2d	; 45
     938:	07 fe       	sbrs	r0, 7
     93a:	fd cf       	rjmp	.-6      	; 0x936 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     93c:	8f e7       	ldi	r24, 0x7F	; 127
     93e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     940:	0d b4       	in	r0, 0x2d	; 45
     942:	07 fe       	sbrs	r0, 7
     944:	fd cf       	rjmp	.-6      	; 0x940 <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     946:	8a e9       	ldi	r24, 0x9A	; 154
     948:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     94a:	0d b4       	in	r0, 0x2d	; 45
     94c:	07 fe       	sbrs	r0, 7
     94e:	fd cf       	rjmp	.-6      	; 0x94a <DataflashManager_ResetDataflashProtections+0x44>
     950:	8e b1       	in	r24, 0x0e	; 14
     952:	83 60       	ori	r24, 0x03	; 3
     954:	8d 7f       	andi	r24, 0xFD	; 253
     956:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     958:	87 ed       	ldi	r24, 0xD7	; 215
     95a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     95c:	0d b4       	in	r0, 0x2d	; 45
     95e:	07 fe       	sbrs	r0, 7
     960:	fd cf       	rjmp	.-6      	; 0x95c <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     962:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     964:	0d b4       	in	r0, 0x2d	; 45
     966:	07 fe       	sbrs	r0, 7
     968:	fd cf       	rjmp	.-6      	; 0x964 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     96a:	0e b4       	in	r0, 0x2e	; 46
     96c:	01 fe       	sbrs	r0, 1
     96e:	15 c0       	rjmp	.+42     	; 0x99a <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     970:	59 dd       	rcall	.-1358   	; 0x424 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     972:	8d e3       	ldi	r24, 0x3D	; 61
     974:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     976:	0d b4       	in	r0, 0x2d	; 45
     978:	07 fe       	sbrs	r0, 7
     97a:	fd cf       	rjmp	.-6      	; 0x976 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     97c:	8a e2       	ldi	r24, 0x2A	; 42
     97e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     980:	0d b4       	in	r0, 0x2d	; 45
     982:	07 fe       	sbrs	r0, 7
     984:	fd cf       	rjmp	.-6      	; 0x980 <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     986:	8f e7       	ldi	r24, 0x7F	; 127
     988:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     98a:	0d b4       	in	r0, 0x2d	; 45
     98c:	07 fe       	sbrs	r0, 7
     98e:	fd cf       	rjmp	.-6      	; 0x98a <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     990:	8a e9       	ldi	r24, 0x9A	; 154
     992:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     994:	0d b4       	in	r0, 0x2d	; 45
     996:	07 fe       	sbrs	r0, 7
     998:	fd cf       	rjmp	.-6      	; 0x994 <DataflashManager_ResetDataflashProtections+0x8e>
     99a:	8e b1       	in	r24, 0x0e	; 14
     99c:	83 60       	ori	r24, 0x03	; 3
     99e:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     9a0:	08 95       	ret

000009a2 <DataflashManager_CheckDataflashOperation>:
     9a2:	8e b1       	in	r24, 0x0e	; 14
     9a4:	83 60       	ori	r24, 0x03	; 3
     9a6:	8e 7f       	andi	r24, 0xFE	; 254
     9a8:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9aa:	8f e9       	ldi	r24, 0x9F	; 159
     9ac:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9ae:	0d b4       	in	r0, 0x2d	; 45
     9b0:	07 fe       	sbrs	r0, 7
     9b2:	fd cf       	rjmp	.-6      	; 0x9ae <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9b4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9b6:	0d b4       	in	r0, 0x2d	; 45
     9b8:	07 fe       	sbrs	r0, 7
     9ba:	fd cf       	rjmp	.-6      	; 0x9b6 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     9bc:	9e b5       	in	r25, 0x2e	; 46
     9be:	8e b1       	in	r24, 0x0e	; 14
     9c0:	83 60       	ori	r24, 0x03	; 3
     9c2:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     9c4:	9f 31       	cpi	r25, 0x1F	; 31
     9c6:	b1 f4       	brne	.+44     	; 0x9f4 <DataflashManager_CheckDataflashOperation+0x52>
     9c8:	8e b1       	in	r24, 0x0e	; 14
     9ca:	83 60       	ori	r24, 0x03	; 3
     9cc:	8d 7f       	andi	r24, 0xFD	; 253
     9ce:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9d0:	8f e9       	ldi	r24, 0x9F	; 159
     9d2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9d4:	0d b4       	in	r0, 0x2d	; 45
     9d6:	07 fe       	sbrs	r0, 7
     9d8:	fd cf       	rjmp	.-6      	; 0x9d4 <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9da:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9dc:	0d b4       	in	r0, 0x2d	; 45
     9de:	07 fe       	sbrs	r0, 7
     9e0:	fd cf       	rjmp	.-6      	; 0x9dc <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     9e2:	9e b5       	in	r25, 0x2e	; 46
     9e4:	8e b1       	in	r24, 0x0e	; 14
     9e6:	83 60       	ori	r24, 0x03	; 3
     9e8:	8e b9       	out	0x0e, r24	; 14

/** Performs a simple test on the attached Dataflash IC(s) to ensure that they are working.
 *
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool DataflashManager_CheckDataflashOperation(void)
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	9f 31       	cpi	r25, 0x1F	; 31
     9ee:	19 f0       	breq	.+6      	; 0x9f6 <DataflashManager_CheckDataflashOperation+0x54>
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 95       	ret
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     9f4:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     9f6:	08 95       	ret

000009f8 <SwapEndian_16>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint16_t SwapEndian_16(const uint16_t Word) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint16_t SwapEndian_16(const uint16_t Word)
			{
     9f8:	28 2f       	mov	r18, r24
				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
			}
     9fa:	89 2f       	mov	r24, r25
     9fc:	92 2f       	mov	r25, r18
     9fe:	08 95       	ret

00000a00 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     a00:	af 92       	push	r10
     a02:	bf 92       	push	r11
     a04:	cf 92       	push	r12
     a06:	df 92       	push	r13
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	df 93       	push	r29
     a12:	cf 93       	push	r28
     a14:	0f 92       	push	r0
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	5c 01       	movw	r10, r24

		return false;
	}

	/* Load in the 32-bit block address (SCSI uses big-endian, so have to reverse the byte order) */
	BlockAddress = SwapEndian_32(*(uint32_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[2]);
     a1c:	fc 01       	movw	r30, r24
     a1e:	7b 96       	adiw	r30, 0x1b	; 27

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     a20:	e5 80       	ldd	r14, Z+5	; 0x05
     a22:	f4 80       	ldd	r15, Z+4	; 0x04
     a24:	03 81       	ldd	r16, Z+3	; 0x03
     a26:	12 81       	ldd	r17, Z+2	; 0x02

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);
     a28:	87 81       	ldd	r24, Z+7	; 0x07
     a2a:	90 85       	ldd	r25, Z+8	; 0x08
     a2c:	69 83       	std	Y+1, r22	; 0x01
     a2e:	e4 df       	rcall	.-56     	; 0x9f8 <SwapEndian_16>
     a30:	6c 01       	movw	r12, r24

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     a32:	69 81       	ldd	r22, Y+1	; 0x01
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	e8 16       	cp	r14, r24
     a38:	80 e8       	ldi	r24, 0x80	; 128
     a3a:	f8 06       	cpc	r15, r24
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	08 07       	cpc	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	18 07       	cpc	r17, r24
     a44:	68 f0       	brcs	.+26     	; 0xa60 <SCSI_Command_ReadWrite_10+0x60>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     a46:	80 91 4b 01 	lds	r24, 0x014B
     a4a:	80 7f       	andi	r24, 0xF0	; 240
     a4c:	85 60       	ori	r24, 0x05	; 5
     a4e:	80 93 4b 01 	sts	0x014B, r24
     a52:	81 e2       	ldi	r24, 0x21	; 33
     a54:	80 93 55 01 	sts	0x0155, r24
     a58:	10 92 56 01 	sts	0x0156, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	24 c0       	rjmp	.+72     	; 0xaa8 <SCSI_Command_ReadWrite_10+0xa8>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     a60:	66 23       	and	r22, r22
     a62:	31 f0       	breq	.+12     	; 0xa70 <SCSI_Command_ReadWrite_10+0x70>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a64:	c5 01       	movw	r24, r10
     a66:	b8 01       	movw	r22, r16
     a68:	a7 01       	movw	r20, r14
     a6a:	96 01       	movw	r18, r12
     a6c:	45 de       	rcall	.-886    	; 0x6f8 <DataflashManager_ReadBlocks>
     a6e:	05 c0       	rjmp	.+10     	; 0xa7a <SCSI_Command_ReadWrite_10+0x7a>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a70:	c5 01       	movw	r24, r10
     a72:	b8 01       	movw	r22, r16
     a74:	a7 01       	movw	r20, r14
     a76:	96 01       	movw	r18, r12
     a78:	06 dd       	rcall	.-1524   	; 0x486 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     a7a:	ee 24       	eor	r14, r14
     a7c:	ff 24       	eor	r15, r15
     a7e:	89 e0       	ldi	r24, 0x09	; 9
     a80:	cc 0c       	add	r12, r12
     a82:	dd 1c       	adc	r13, r13
     a84:	ee 1c       	adc	r14, r14
     a86:	ff 1c       	adc	r15, r15
     a88:	8a 95       	dec	r24
     a8a:	d1 f7       	brne	.-12     	; 0xa80 <SCSI_Command_ReadWrite_10+0x80>
     a8c:	f5 01       	movw	r30, r10
     a8e:	84 89       	ldd	r24, Z+20	; 0x14
     a90:	95 89       	ldd	r25, Z+21	; 0x15
     a92:	a6 89       	ldd	r26, Z+22	; 0x16
     a94:	b7 89       	ldd	r27, Z+23	; 0x17
     a96:	8c 19       	sub	r24, r12
     a98:	9d 09       	sbc	r25, r13
     a9a:	ae 09       	sbc	r26, r14
     a9c:	bf 09       	sbc	r27, r15
     a9e:	84 8b       	std	Z+20, r24	; 0x14
     aa0:	95 8b       	std	Z+21, r25	; 0x15
     aa2:	a6 8b       	std	Z+22, r26	; 0x16
     aa4:	b7 8b       	std	Z+23, r27	; 0x17

	return true;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
}
     aa8:	0f 90       	pop	r0
     aaa:	cf 91       	pop	r28
     aac:	df 91       	pop	r29
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	cf 90       	pop	r12
     aba:	bf 90       	pop	r11
     abc:	af 90       	pop	r10
     abe:	08 95       	ret

00000ac0 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     ac0:	cf 92       	push	r12
     ac2:	df 92       	push	r13
     ac4:	ef 92       	push	r14
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	df 93       	push	r29
     ace:	cf 93       	push	r28
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	28 97       	sbiw	r28, 0x08	; 8
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     ae2:	fc 01       	movw	r30, r24
     ae4:	83 8d       	ldd	r24, Z+27	; 0x1b
     ae6:	8d 31       	cpi	r24, 0x1D	; 29
     ae8:	09 f4       	brne	.+2      	; 0xaec <SCSI_DecodeSCSICommand+0x2c>
     aea:	ac c0       	rjmp	.+344    	; 0xc44 <SCSI_DecodeSCSICommand+0x184>
     aec:	8e 31       	cpi	r24, 0x1E	; 30
     aee:	78 f4       	brcc	.+30     	; 0xb0e <SCSI_DecodeSCSICommand+0x4e>
     af0:	83 30       	cpi	r24, 0x03	; 3
     af2:	09 f4       	brne	.+2      	; 0xaf6 <SCSI_DecodeSCSICommand+0x36>
     af4:	56 c0       	rjmp	.+172    	; 0xba2 <SCSI_DecodeSCSICommand+0xe2>
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	20 f4       	brcc	.+8      	; 0xb02 <SCSI_DecodeSCSICommand+0x42>
     afa:	88 23       	and	r24, r24
     afc:	09 f4       	brne	.+2      	; 0xb00 <SCSI_DecodeSCSICommand+0x40>
     afe:	df c0       	rjmp	.+446    	; 0xcbe <SCSI_DecodeSCSICommand+0x1fe>
     b00:	e4 c0       	rjmp	.+456    	; 0xcca <SCSI_DecodeSCSICommand+0x20a>
     b02:	82 31       	cpi	r24, 0x12	; 18
     b04:	b9 f0       	breq	.+46     	; 0xb34 <SCSI_DecodeSCSICommand+0x74>
     b06:	8a 31       	cpi	r24, 0x1A	; 26
     b08:	09 f0       	breq	.+2      	; 0xb0c <SCSI_DecodeSCSICommand+0x4c>
     b0a:	df c0       	rjmp	.+446    	; 0xcca <SCSI_DecodeSCSICommand+0x20a>
     b0c:	be c0       	rjmp	.+380    	; 0xc8a <SCSI_DecodeSCSICommand+0x1ca>
     b0e:	88 32       	cpi	r24, 0x28	; 40
     b10:	09 f4       	brne	.+2      	; 0xb14 <SCSI_DecodeSCSICommand+0x54>
     b12:	b5 c0       	rjmp	.+362    	; 0xc7e <SCSI_DecodeSCSICommand+0x1be>
     b14:	89 32       	cpi	r24, 0x29	; 41
     b16:	38 f4       	brcc	.+14     	; 0xb26 <SCSI_DecodeSCSICommand+0x66>
     b18:	8e 31       	cpi	r24, 0x1E	; 30
     b1a:	09 f4       	brne	.+2      	; 0xb1e <SCSI_DecodeSCSICommand+0x5e>
     b1c:	d0 c0       	rjmp	.+416    	; 0xcbe <SCSI_DecodeSCSICommand+0x1fe>
     b1e:	85 32       	cpi	r24, 0x25	; 37
     b20:	09 f0       	breq	.+2      	; 0xb24 <SCSI_DecodeSCSICommand+0x64>
     b22:	d3 c0       	rjmp	.+422    	; 0xcca <SCSI_DecodeSCSICommand+0x20a>
     b24:	63 c0       	rjmp	.+198    	; 0xbec <SCSI_DecodeSCSICommand+0x12c>
     b26:	8a 32       	cpi	r24, 0x2A	; 42
     b28:	09 f4       	brne	.+2      	; 0xb2c <SCSI_DecodeSCSICommand+0x6c>
     b2a:	a6 c0       	rjmp	.+332    	; 0xc78 <SCSI_DecodeSCSICommand+0x1b8>
     b2c:	8f 32       	cpi	r24, 0x2F	; 47
     b2e:	09 f0       	breq	.+2      	; 0xb32 <SCSI_DecodeSCSICommand+0x72>
     b30:	cc c0       	rjmp	.+408    	; 0xcca <SCSI_DecodeSCSICommand+0x20a>
     b32:	c5 c0       	rjmp	.+394    	; 0xcbe <SCSI_DecodeSCSICommand+0x1fe>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
     b34:	f8 01       	movw	r30, r16
     b36:	86 8d       	ldd	r24, Z+30	; 0x1e
     b38:	97 8d       	ldd	r25, Z+31	; 0x1f
     b3a:	5e df       	rcall	.-324    	; 0x9f8 <SwapEndian_16>
     b3c:	6c 01       	movw	r12, r24
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     b3e:	f8 01       	movw	r30, r16
     b40:	84 8d       	ldd	r24, Z+28	; 0x1c
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	83 70       	andi	r24, 0x03	; 3
     b46:	90 70       	andi	r25, 0x00	; 0
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	09 f0       	breq	.+2      	; 0xb4e <SCSI_DecodeSCSICommand+0x8e>
     b4c:	7f c0       	rjmp	.+254    	; 0xc4c <SCSI_DecodeSCSICommand+0x18c>
     b4e:	85 8d       	ldd	r24, Z+29	; 0x1d
     b50:	88 23       	and	r24, r24
     b52:	09 f0       	breq	.+2      	; 0xb56 <SCSI_DecodeSCSICommand+0x96>
     b54:	7b c0       	rjmp	.+246    	; 0xc4c <SCSI_DecodeSCSICommand+0x18c>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     b56:	76 01       	movw	r14, r12
     b58:	f5 e2       	ldi	r31, 0x25	; 37
     b5a:	cf 16       	cp	r12, r31
     b5c:	d1 04       	cpc	r13, r1
     b5e:	18 f0       	brcs	.+6      	; 0xb66 <SCSI_DecodeSCSICommand+0xa6>
     b60:	24 e2       	ldi	r18, 0x24	; 36
     b62:	e2 2e       	mov	r14, r18
     b64:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     b66:	8b e5       	ldi	r24, 0x5B	; 91
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	b7 01       	movw	r22, r14
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	16 d1       	rcall	.+556    	; 0xd9e <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b72:	c6 01       	movw	r24, r12
     b74:	8e 19       	sub	r24, r14
     b76:	9f 09       	sbc	r25, r15
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	cb d0       	rcall	.+406    	; 0xd14 <Endpoint_Null_Stream>
     b7e:	80 91 e8 00 	lds	r24, 0x00E8
     b82:	8e 77       	andi	r24, 0x7E	; 126
     b84:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b88:	97 01       	movw	r18, r14
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	f8 01       	movw	r30, r16
     b90:	84 89       	ldd	r24, Z+20	; 0x14
     b92:	95 89       	ldd	r25, Z+21	; 0x15
     b94:	a6 89       	ldd	r26, Z+22	; 0x16
     b96:	b7 89       	ldd	r27, Z+23	; 0x17
     b98:	82 1b       	sub	r24, r18
     b9a:	93 0b       	sbc	r25, r19
     b9c:	a4 0b       	sbc	r26, r20
     b9e:	b5 0b       	sbc	r27, r21
     ba0:	89 c0       	rjmp	.+274    	; 0xcb4 <SCSI_DecodeSCSICommand+0x1f4>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     ba2:	f8 01       	movw	r30, r16
     ba4:	c7 8c       	ldd	r12, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     ba6:	ec 2c       	mov	r14, r12
     ba8:	fc 2d       	mov	r31, r12
     baa:	f3 31       	cpi	r31, 0x13	; 19
     bac:	10 f0       	brcs	.+4      	; 0xbb2 <SCSI_DecodeSCSICommand+0xf2>
     bae:	92 e1       	ldi	r25, 0x12	; 18
     bb0:	e9 2e       	mov	r14, r25

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     bb2:	89 e4       	ldi	r24, 0x49	; 73
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	6e 2d       	mov	r22, r14
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	ef d0       	rcall	.+478    	; 0xd9e <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     bc0:	8c 2d       	mov	r24, r12
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	8e 19       	sub	r24, r14
     bc6:	91 09       	sbc	r25, r1
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	a3 d0       	rcall	.+326    	; 0xd14 <Endpoint_Null_Stream>
     bce:	80 91 e8 00 	lds	r24, 0x00E8
     bd2:	8e 77       	andi	r24, 0x7E	; 126
     bd4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     bd8:	f8 01       	movw	r30, r16
     bda:	84 89       	ldd	r24, Z+20	; 0x14
     bdc:	95 89       	ldd	r25, Z+21	; 0x15
     bde:	a6 89       	ldd	r26, Z+22	; 0x16
     be0:	b7 89       	ldd	r27, Z+23	; 0x17
     be2:	8e 19       	sub	r24, r14
     be4:	91 09       	sbc	r25, r1
     be6:	a1 09       	sbc	r26, r1
     be8:	b1 09       	sbc	r27, r1
     bea:	64 c0       	rjmp	.+200    	; 0xcb4 <SCSI_DecodeSCSICommand+0x1f4>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	9f e7       	ldi	r25, 0x7F	; 127
     bf0:	a0 e0       	ldi	r26, 0x00	; 0
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	89 83       	std	Y+1, r24	; 0x01
     bf6:	9a 83       	std	Y+2, r25	; 0x02
     bf8:	ab 83       	std	Y+3, r26	; 0x03
     bfa:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	92 e0       	ldi	r25, 0x02	; 2
     c00:	a0 e0       	ldi	r26, 0x00	; 0
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	8d 83       	std	Y+5, r24	; 0x05
     c06:	9e 83       	std	Y+6, r25	; 0x06
     c08:	af 83       	std	Y+7, r26	; 0x07
     c0a:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     c0c:	ce 01       	movw	r24, r28
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	64 e0       	ldi	r22, 0x04	; 4
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	1f d1       	rcall	.+574    	; 0xe58 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     c1a:	ce 01       	movw	r24, r28
     c1c:	05 96       	adiw	r24, 0x05	; 5
     c1e:	64 e0       	ldi	r22, 0x04	; 4
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	18 d1       	rcall	.+560    	; 0xe58 <Endpoint_Write_Stream_BE>
     c28:	80 91 e8 00 	lds	r24, 0x00E8
     c2c:	8e 77       	andi	r24, 0x7E	; 126
     c2e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     c32:	f8 01       	movw	r30, r16
     c34:	84 89       	ldd	r24, Z+20	; 0x14
     c36:	95 89       	ldd	r25, Z+21	; 0x15
     c38:	a6 89       	ldd	r26, Z+22	; 0x16
     c3a:	b7 89       	ldd	r27, Z+23	; 0x17
     c3c:	08 97       	sbiw	r24, 0x08	; 8
     c3e:	a1 09       	sbc	r26, r1
     c40:	b1 09       	sbc	r27, r1
     c42:	38 c0       	rjmp	.+112    	; 0xcb4 <SCSI_DecodeSCSICommand+0x1f4>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     c44:	f8 01       	movw	r30, r16
     c46:	84 8d       	ldd	r24, Z+28	; 0x1c
     c48:	82 fd       	sbrc	r24, 2
     c4a:	08 c0       	rjmp	.+16     	; 0xc5c <SCSI_DecodeSCSICommand+0x19c>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c4c:	80 91 4b 01 	lds	r24, 0x014B
     c50:	80 7f       	andi	r24, 0xF0	; 240
     c52:	85 60       	ori	r24, 0x05	; 5
     c54:	80 93 4b 01 	sts	0x014B, r24
     c58:	84 e2       	ldi	r24, 0x24	; 36
     c5a:	3e c0       	rjmp	.+124    	; 0xcd8 <SCSI_DecodeSCSICommand+0x218>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     c5c:	a2 de       	rcall	.-700    	; 0x9a2 <DataflashManager_CheckDataflashOperation>
     c5e:	88 23       	and	r24, r24
     c60:	71 f5       	brne	.+92     	; 0xcbe <SCSI_DecodeSCSICommand+0x1fe>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     c62:	80 91 4b 01 	lds	r24, 0x014B
     c66:	80 7f       	andi	r24, 0xF0	; 240
     c68:	84 60       	ori	r24, 0x04	; 4
     c6a:	80 93 4b 01 	sts	0x014B, r24
     c6e:	10 92 55 01 	sts	0x0155, r1
     c72:	10 92 56 01 	sts	0x0156, r1
     c76:	3e c0       	rjmp	.+124    	; 0xcf4 <SCSI_DecodeSCSICommand+0x234>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     c78:	c8 01       	movw	r24, r16
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <SCSI_DecodeSCSICommand+0x1c2>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     c7e:	c8 01       	movw	r24, r16
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	be de       	rcall	.-644    	; 0xa00 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     c84:	88 23       	and	r24, r24
     c86:	b1 f1       	breq	.+108    	; 0xcf4 <SCSI_DecodeSCSICommand+0x234>
     c88:	2a c0       	rjmp	.+84     	; 0xcde <SCSI_DecodeSCSICommand+0x21e>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c8a:	10 92 f1 00 	sts	0x00F1, r1
     c8e:	10 92 f1 00 	sts	0x00F1, r1
     c92:	10 92 f1 00 	sts	0x00F1, r1
     c96:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c9a:	80 91 e8 00 	lds	r24, 0x00E8
     c9e:	8e 77       	andi	r24, 0x7E	; 126
     ca0:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     ca4:	f8 01       	movw	r30, r16
     ca6:	84 89       	ldd	r24, Z+20	; 0x14
     ca8:	95 89       	ldd	r25, Z+21	; 0x15
     caa:	a6 89       	ldd	r26, Z+22	; 0x16
     cac:	b7 89       	ldd	r27, Z+23	; 0x17
     cae:	04 97       	sbiw	r24, 0x04	; 4
     cb0:	a1 09       	sbc	r26, r1
     cb2:	b1 09       	sbc	r27, r1
     cb4:	84 8b       	std	Z+20, r24	; 0x14
     cb6:	95 8b       	std	Z+21, r25	; 0x15
     cb8:	a6 8b       	std	Z+22, r26	; 0x16
     cba:	b7 8b       	std	Z+23, r27	; 0x17
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
     cbc:	10 c0       	rjmp	.+32     	; 0xcde <SCSI_DecodeSCSICommand+0x21e>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     cbe:	f8 01       	movw	r30, r16
     cc0:	14 8a       	std	Z+20, r1	; 0x14
     cc2:	15 8a       	std	Z+21, r1	; 0x15
     cc4:	16 8a       	std	Z+22, r1	; 0x16
     cc6:	17 8a       	std	Z+23, r1	; 0x17
     cc8:	0a c0       	rjmp	.+20     	; 0xcde <SCSI_DecodeSCSICommand+0x21e>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     cca:	80 91 4b 01 	lds	r24, 0x014B
     cce:	80 7f       	andi	r24, 0xF0	; 240
     cd0:	85 60       	ori	r24, 0x05	; 5
     cd2:	80 93 4b 01 	sts	0x014B, r24
     cd6:	80 e2       	ldi	r24, 0x20	; 32
     cd8:	80 93 55 01 	sts	0x0155, r24
     cdc:	ca cf       	rjmp	.-108    	; 0xc72 <SCSI_DecodeSCSICommand+0x1b2>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     cde:	80 91 4b 01 	lds	r24, 0x014B
     ce2:	80 7f       	andi	r24, 0xF0	; 240
     ce4:	80 93 4b 01 	sts	0x014B, r24
     ce8:	10 92 55 01 	sts	0x0155, r1
     cec:	10 92 56 01 	sts	0x0156, r1
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <SCSI_DecodeSCSICommand+0x236>
	}

	return false;
     cf4:	80 e0       	ldi	r24, 0x00	; 0
}
     cf6:	28 96       	adiw	r28, 0x08	; 8
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	ff 90       	pop	r15
     d0c:	ef 90       	pop	r14
     d0e:	df 90       	pop	r13
     d10:	cf 90       	pop	r12
     d12:	08 95       	ret

00000d14 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     d14:	df 92       	push	r13
     d16:	ef 92       	push	r14
     d18:	ff 92       	push	r15
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	ec 01       	movw	r28, r24
     d24:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
     d26:	e3 d2       	rcall	.+1478   	; 0x12ee <Endpoint_WaitUntilReady>
     d28:	d8 2e       	mov	r13, r24
     d2a:	88 23       	and	r24, r24
     d2c:	79 f5       	brne	.+94     	; 0xd8c <Endpoint_Null_Stream+0x78>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
     d2e:	01 15       	cp	r16, r1
     d30:	11 05       	cpc	r17, r1
     d32:	29 f0       	breq	.+10     	; 0xd3e <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
     d34:	f8 01       	movw	r30, r16
     d36:	20 81       	ld	r18, Z
     d38:	31 81       	ldd	r19, Z+1	; 0x01
     d3a:	c2 1b       	sub	r28, r18
     d3c:	d3 0b       	sbc	r29, r19
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     d3e:	ee 24       	eor	r14, r14
     d40:	ff 24       	eor	r15, r15
     d42:	20 c0       	rjmp	.+64     	; 0xd84 <Endpoint_Null_Stream+0x70>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d44:	80 91 e8 00 	lds	r24, 0x00E8
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     d48:	85 fd       	sbrc	r24, 5
     d4a:	16 c0       	rjmp	.+44     	; 0xd78 <Endpoint_Null_Stream+0x64>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d4c:	80 91 e8 00 	lds	r24, 0x00E8
     d50:	8e 77       	andi	r24, 0x7E	; 126
     d52:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
     d56:	01 15       	cp	r16, r1
     d58:	11 05       	cpc	r17, r1
     d5a:	51 f0       	breq	.+20     	; 0xd70 <Endpoint_Null_Stream+0x5c>
			{
				*BytesProcessed += BytesInTransfer;
     d5c:	f8 01       	movw	r30, r16
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	8e 0d       	add	r24, r14
     d64:	9f 1d       	adc	r25, r15
     d66:	91 83       	std	Z+1, r25	; 0x01
     d68:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     d6a:	95 e0       	ldi	r25, 0x05	; 5
     d6c:	d9 2e       	mov	r13, r25
     d6e:	0e c0       	rjmp	.+28     	; 0xd8c <Endpoint_Null_Stream+0x78>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d70:	be d2       	rcall	.+1404   	; 0x12ee <Endpoint_WaitUntilReady>
     d72:	88 23       	and	r24, r24
     d74:	39 f0       	breq	.+14     	; 0xd84 <Endpoint_Null_Stream+0x70>
     d76:	09 c0       	rjmp	.+18     	; 0xd8a <Endpoint_Null_Stream+0x76>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d78:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
     d7c:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
     d7e:	08 94       	sec
     d80:	e1 1c       	adc	r14, r1
     d82:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     d84:	20 97       	sbiw	r28, 0x00	; 0
     d86:	f1 f6       	brne	.-68     	; 0xd44 <Endpoint_Null_Stream+0x30>
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <Endpoint_Null_Stream+0x78>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d8a:	d8 2e       	mov	r13, r24
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
     d8c:	8d 2d       	mov	r24, r13
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	df 90       	pop	r13
     d9c:	08 95       	ret

00000d9e <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d9e:	8f 92       	push	r8
     da0:	9f 92       	push	r9
     da2:	bf 92       	push	r11
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	0f 92       	push	r0
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	e8 2e       	mov	r14, r24
     dbc:	4b 01       	movw	r8, r22
     dbe:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     dc0:	99 83       	std	Y+1, r25	; 0x01
     dc2:	95 d2       	rcall	.+1322   	; 0x12ee <Endpoint_WaitUntilReady>
     dc4:	b8 2e       	mov	r11, r24
     dc6:	99 81       	ldd	r25, Y+1	; 0x01
     dc8:	88 23       	and	r24, r24
     dca:	c1 f5       	brne	.+112    	; 0xe3c <Endpoint_Write_Stream_LE+0x9e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     dcc:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     dce:	01 15       	cp	r16, r1
     dd0:	11 05       	cpc	r17, r1
     dd2:	39 f0       	breq	.+14     	; 0xde2 <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     dd4:	f8 01       	movw	r30, r16
     dd6:	20 81       	ld	r18, Z
     dd8:	31 81       	ldd	r19, Z+1	; 0x01
     dda:	82 1a       	sub	r8, r18
     ddc:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     dde:	e2 0e       	add	r14, r18
     de0:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     de2:	cc 24       	eor	r12, r12
     de4:	dd 24       	eor	r13, r13
     de6:	25 c0       	rjmp	.+74     	; 0xe32 <Endpoint_Write_Stream_LE+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     de8:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     dec:	85 fd       	sbrc	r24, 5
     dee:	16 c0       	rjmp	.+44     	; 0xe1c <Endpoint_Write_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     df0:	80 91 e8 00 	lds	r24, 0x00E8
     df4:	8e 77       	andi	r24, 0x7E	; 126
     df6:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     dfa:	01 15       	cp	r16, r1
     dfc:	11 05       	cpc	r17, r1
     dfe:	51 f0       	breq	.+20     	; 0xe14 <Endpoint_Write_Stream_LE+0x76>
			{
				*BytesProcessed += BytesInTransfer;
     e00:	f8 01       	movw	r30, r16
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	8c 0d       	add	r24, r12
     e08:	9d 1d       	adc	r25, r13
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     e0e:	25 e0       	ldi	r18, 0x05	; 5
     e10:	b2 2e       	mov	r11, r18
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <Endpoint_Write_Stream_LE+0x9e>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e14:	6c d2       	rcall	.+1240   	; 0x12ee <Endpoint_WaitUntilReady>
     e16:	88 23       	and	r24, r24
     e18:	61 f0       	breq	.+24     	; 0xe32 <Endpoint_Write_Stream_LE+0x94>
     e1a:	0f c0       	rjmp	.+30     	; 0xe3a <Endpoint_Write_Stream_LE+0x9c>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e1c:	f7 01       	movw	r30, r14
     e1e:	81 91       	ld	r24, Z+
     e20:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e22:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e26:	08 94       	sec
     e28:	81 08       	sbc	r8, r1
     e2a:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     e2c:	08 94       	sec
     e2e:	c1 1c       	adc	r12, r1
     e30:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     e32:	81 14       	cp	r8, r1
     e34:	91 04       	cpc	r9, r1
     e36:	c1 f6       	brne	.-80     	; 0xde8 <Endpoint_Write_Stream_LE+0x4a>
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <Endpoint_Write_Stream_LE+0x9e>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e3a:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     e3c:	8b 2d       	mov	r24, r11
     e3e:	0f 90       	pop	r0
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	cf 90       	pop	r12
     e50:	bf 90       	pop	r11
     e52:	9f 90       	pop	r9
     e54:	8f 90       	pop	r8
     e56:	08 95       	ret

00000e58 <Endpoint_Write_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	6c 01       	movw	r12, r24
     e6c:	eb 01       	movw	r28, r22
     e6e:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     e70:	3e d2       	rcall	.+1148   	; 0x12ee <Endpoint_WaitUntilReady>
     e72:	b8 2e       	mov	r11, r24
     e74:	88 23       	and	r24, r24
     e76:	d1 f5       	brne	.+116    	; 0xeec <Endpoint_Write_Stream_BE+0x94>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e78:	8e 01       	movw	r16, r28
     e7a:	01 50       	subi	r16, 0x01	; 1
     e7c:	10 40       	sbci	r17, 0x00	; 0
     e7e:	0c 0d       	add	r16, r12
     e80:	1d 1d       	adc	r17, r13
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e82:	e1 14       	cp	r14, r1
     e84:	f1 04       	cpc	r15, r1
     e86:	39 f0       	breq	.+14     	; 0xe96 <Endpoint_Write_Stream_BE+0x3e>
	{
		Length -= *BytesProcessed;
     e88:	f7 01       	movw	r30, r14
     e8a:	20 81       	ld	r18, Z
     e8c:	31 81       	ldd	r19, Z+1	; 0x01
     e8e:	c2 1b       	sub	r28, r18
     e90:	d3 0b       	sbc	r29, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e92:	02 1b       	sub	r16, r18
     e94:	13 0b       	sbc	r17, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e96:	cc 24       	eor	r12, r12
     e98:	dd 24       	eor	r13, r13
     e9a:	24 c0       	rjmp	.+72     	; 0xee4 <Endpoint_Write_Stream_BE+0x8c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e9c:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     ea0:	85 fd       	sbrc	r24, 5
     ea2:	16 c0       	rjmp	.+44     	; 0xed0 <Endpoint_Write_Stream_BE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ea4:	80 91 e8 00 	lds	r24, 0x00E8
     ea8:	8e 77       	andi	r24, 0x7E	; 126
     eaa:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     eae:	e1 14       	cp	r14, r1
     eb0:	f1 04       	cpc	r15, r1
     eb2:	51 f0       	breq	.+20     	; 0xec8 <Endpoint_Write_Stream_BE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     eb4:	f7 01       	movw	r30, r14
     eb6:	80 81       	ld	r24, Z
     eb8:	91 81       	ldd	r25, Z+1	; 0x01
     eba:	8c 0d       	add	r24, r12
     ebc:	9d 1d       	adc	r25, r13
     ebe:	91 83       	std	Z+1, r25	; 0x01
     ec0:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     ec2:	35 e0       	ldi	r19, 0x05	; 5
     ec4:	b3 2e       	mov	r11, r19
     ec6:	12 c0       	rjmp	.+36     	; 0xeec <Endpoint_Write_Stream_BE+0x94>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     ec8:	12 d2       	rcall	.+1060   	; 0x12ee <Endpoint_WaitUntilReady>
     eca:	88 23       	and	r24, r24
     ecc:	59 f0       	breq	.+22     	; 0xee4 <Endpoint_Write_Stream_BE+0x8c>
     ece:	0d c0       	rjmp	.+26     	; 0xeea <Endpoint_Write_Stream_BE+0x92>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     ed0:	f8 01       	movw	r30, r16
     ed2:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ed4:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
     ed8:	01 50       	subi	r16, 0x01	; 1
     eda:	10 40       	sbci	r17, 0x00	; 0
			Length--;
     edc:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
     ede:	08 94       	sec
     ee0:	c1 1c       	adc	r12, r1
     ee2:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     ee4:	20 97       	sbiw	r28, 0x00	; 0
     ee6:	d1 f6       	brne	.-76     	; 0xe9c <Endpoint_Write_Stream_BE+0x44>
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <Endpoint_Write_Stream_BE+0x94>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     eea:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     eec:	8b 2d       	mov	r24, r11
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	08 95       	ret

00000f02 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     f02:	8f 92       	push	r8
     f04:	9f 92       	push	r9
     f06:	bf 92       	push	r11
     f08:	cf 92       	push	r12
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	e8 2e       	mov	r14, r24
     f20:	4b 01       	movw	r8, r22
     f22:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     f24:	99 83       	std	Y+1, r25	; 0x01
     f26:	e3 d1       	rcall	.+966    	; 0x12ee <Endpoint_WaitUntilReady>
     f28:	b8 2e       	mov	r11, r24
     f2a:	99 81       	ldd	r25, Y+1	; 0x01
     f2c:	88 23       	and	r24, r24
     f2e:	c1 f5       	brne	.+112    	; 0xfa0 <Endpoint_Read_Stream_LE+0x9e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     f30:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     f32:	01 15       	cp	r16, r1
     f34:	11 05       	cpc	r17, r1
     f36:	39 f0       	breq	.+14     	; 0xf46 <Endpoint_Read_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     f38:	f8 01       	movw	r30, r16
     f3a:	20 81       	ld	r18, Z
     f3c:	31 81       	ldd	r19, Z+1	; 0x01
     f3e:	82 1a       	sub	r8, r18
     f40:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     f42:	e2 0e       	add	r14, r18
     f44:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     f46:	cc 24       	eor	r12, r12
     f48:	dd 24       	eor	r13, r13
     f4a:	25 c0       	rjmp	.+74     	; 0xf96 <Endpoint_Read_Stream_LE+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f4c:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     f50:	85 fd       	sbrc	r24, 5
     f52:	16 c0       	rjmp	.+44     	; 0xf80 <Endpoint_Read_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f54:	80 91 e8 00 	lds	r24, 0x00E8
     f58:	8b 77       	andi	r24, 0x7B	; 123
     f5a:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     f5e:	01 15       	cp	r16, r1
     f60:	11 05       	cpc	r17, r1
     f62:	51 f0       	breq	.+20     	; 0xf78 <Endpoint_Read_Stream_LE+0x76>
			{
				*BytesProcessed += BytesInTransfer;
     f64:	f8 01       	movw	r30, r16
     f66:	80 81       	ld	r24, Z
     f68:	91 81       	ldd	r25, Z+1	; 0x01
     f6a:	8c 0d       	add	r24, r12
     f6c:	9d 1d       	adc	r25, r13
     f6e:	91 83       	std	Z+1, r25	; 0x01
     f70:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     f72:	45 e0       	ldi	r20, 0x05	; 5
     f74:	b4 2e       	mov	r11, r20
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <Endpoint_Read_Stream_LE+0x9e>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     f78:	ba d1       	rcall	.+884    	; 0x12ee <Endpoint_WaitUntilReady>
     f7a:	88 23       	and	r24, r24
     f7c:	61 f0       	breq	.+24     	; 0xf96 <Endpoint_Read_Stream_LE+0x94>
     f7e:	0f c0       	rjmp	.+30     	; 0xf9e <Endpoint_Read_Stream_LE+0x9c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f80:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     f84:	f7 01       	movw	r30, r14
     f86:	81 93       	st	Z+, r24
     f88:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     f8a:	08 94       	sec
     f8c:	81 08       	sbc	r8, r1
     f8e:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     f90:	08 94       	sec
     f92:	c1 1c       	adc	r12, r1
     f94:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     f96:	81 14       	cp	r8, r1
     f98:	91 04       	cpc	r9, r1
     f9a:	c1 f6       	brne	.-80     	; 0xf4c <Endpoint_Read_Stream_LE+0x4a>
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <Endpoint_Read_Stream_LE+0x9e>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     f9e:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     fa0:	8b 2d       	mov	r24, r11
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	ff 90       	pop	r15
     fae:	ef 90       	pop	r14
     fb0:	df 90       	pop	r13
     fb2:	cf 90       	pop	r12
     fb4:	bf 90       	pop	r11
     fb6:	9f 90       	pop	r9
     fb8:	8f 90       	pop	r8
     fba:	08 95       	ret

00000fbc <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     fbc:	28 2f       	mov	r18, r24
     fbe:	39 2f       	mov	r19, r25
     fc0:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     fc2:	80 91 93 01 	lds	r24, 0x0193
     fc6:	90 91 94 01 	lds	r25, 0x0194
     fca:	86 17       	cp	r24, r22
     fcc:	97 07       	cpc	r25, r23
     fce:	18 f4       	brcc	.+6      	; 0xfd6 <Endpoint_Write_Control_Stream_LE+0x1a>
     fd0:	bc 01       	movw	r22, r24
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	37 c0       	rjmp	.+110    	; 0x1044 <Endpoint_Write_Control_Stream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     fd6:	61 15       	cp	r22, r1
     fd8:	71 05       	cpc	r23, r1
     fda:	d9 f7       	brne	.-10     	; 0xfd2 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fdc:	80 91 e8 00 	lds	r24, 0x00E8
     fe0:	8e 77       	andi	r24, 0x7E	; 126
     fe2:	80 93 e8 00 	sts	0x00E8, r24
     fe6:	f5 cf       	rjmp	.-22     	; 0xfd2 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fe8:	80 91 8c 01 	lds	r24, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fec:	88 23       	and	r24, r24
     fee:	09 f4       	brne	.+2      	; 0xff2 <Endpoint_Write_Control_Stream_LE+0x36>
     ff0:	3f c0       	rjmp	.+126    	; 0x1070 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ff2:	85 30       	cpi	r24, 0x05	; 5
     ff4:	c9 f1       	breq	.+114    	; 0x1068 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ff6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     ffa:	83 fd       	sbrc	r24, 3
     ffc:	37 c0       	rjmp	.+110    	; 0x106c <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ffe:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1002:	82 fd       	sbrc	r24, 2
    1004:	2b c0       	rjmp	.+86     	; 0x105c <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1006:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    100a:	80 ff       	sbrs	r24, 0
    100c:	1b c0       	rjmp	.+54     	; 0x1044 <Endpoint_Write_Control_Stream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    100e:	80 91 f2 00 	lds	r24, 0x00F2
    1012:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1016:	06 c0       	rjmp	.+12     	; 0x1024 <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1018:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    101a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    101e:	61 50       	subi	r22, 0x01	; 1
    1020:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    1022:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1024:	61 15       	cp	r22, r1
    1026:	71 05       	cpc	r23, r1
    1028:	19 f0       	breq	.+6      	; 0x1030 <Endpoint_Write_Control_Stream_LE+0x74>
    102a:	88 30       	cpi	r24, 0x08	; 8
    102c:	91 05       	cpc	r25, r1
    102e:	a0 f3       	brcs	.-24     	; 0x1018 <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1030:	21 e0       	ldi	r18, 0x01	; 1
    1032:	88 30       	cpi	r24, 0x08	; 8
    1034:	91 05       	cpc	r25, r1
    1036:	09 f0       	breq	.+2      	; 0x103a <Endpoint_Write_Control_Stream_LE+0x7e>
    1038:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    103a:	80 91 e8 00 	lds	r24, 0x00E8
    103e:	8e 77       	andi	r24, 0x7E	; 126
    1040:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1044:	61 15       	cp	r22, r1
    1046:	71 05       	cpc	r23, r1
    1048:	79 f6       	brne	.-98     	; 0xfe8 <Endpoint_Write_Control_Stream_LE+0x2c>
    104a:	22 23       	and	r18, r18
    104c:	69 f6       	brne	.-102    	; 0xfe8 <Endpoint_Write_Control_Stream_LE+0x2c>
    104e:	06 c0       	rjmp	.+12     	; 0x105c <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1050:	80 91 8c 01 	lds	r24, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1054:	88 23       	and	r24, r24
    1056:	61 f0       	breq	.+24     	; 0x1070 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1058:	85 30       	cpi	r24, 0x05	; 5
    105a:	61 f0       	breq	.+24     	; 0x1074 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    105c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1060:	82 ff       	sbrs	r24, 2
    1062:	f6 cf       	rjmp	.-20     	; 0x1050 <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1074:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1076:	08 95       	ret

00001078 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1078:	61 15       	cp	r22, r1
    107a:	71 05       	cpc	r23, r1
    107c:	31 f5       	brne	.+76     	; 0x10ca <Endpoint_Read_Control_Stream_LE+0x52>
    107e:	20 c0       	rjmp	.+64     	; 0x10c0 <Endpoint_Read_Control_Stream_LE+0x48>
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1080:	20 91 8c 01 	lds	r18, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1084:	22 23       	and	r18, r18
    1086:	a9 f1       	breq	.+106    	; 0x10f2 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1088:	25 30       	cpi	r18, 0x05	; 5
    108a:	79 f1       	breq	.+94     	; 0x10ea <Endpoint_Read_Control_Stream_LE+0x72>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    108c:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1090:	23 fd       	sbrc	r18, 3
    1092:	2d c0       	rjmp	.+90     	; 0x10ee <Endpoint_Read_Control_Stream_LE+0x76>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1094:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1098:	22 ff       	sbrs	r18, 2
    109a:	f2 cf       	rjmp	.-28     	; 0x1080 <Endpoint_Read_Control_Stream_LE+0x8>
    109c:	e8 2f       	mov	r30, r24
    109e:	f9 2f       	mov	r31, r25
    10a0:	07 c0       	rjmp	.+14     	; 0x10b0 <Endpoint_Read_Control_Stream_LE+0x38>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    10a2:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    10a6:	81 93       	st	Z+, r24
    10a8:	cf 01       	movw	r24, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    10aa:	61 50       	subi	r22, 0x01	; 1
    10ac:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    10ae:	41 f0       	breq	.+16     	; 0x10c0 <Endpoint_Read_Control_Stream_LE+0x48>
    10b0:	cf 01       	movw	r24, r30
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    10b2:	20 91 f2 00 	lds	r18, 0x00F2
    10b6:	30 91 f3 00 	lds	r19, 0x00F3
    10ba:	21 15       	cp	r18, r1
    10bc:	31 05       	cpc	r19, r1
    10be:	89 f7       	brne	.-30     	; 0x10a2 <Endpoint_Read_Control_Stream_LE+0x2a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10c0:	20 91 e8 00 	lds	r18, 0x00E8
    10c4:	2b 77       	andi	r18, 0x7B	; 123
    10c6:	20 93 e8 00 	sts	0x00E8, r18
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    10ca:	61 15       	cp	r22, r1
    10cc:	71 05       	cpc	r23, r1
    10ce:	c1 f6       	brne	.-80     	; 0x1080 <Endpoint_Read_Control_Stream_LE+0x8>
    10d0:	06 c0       	rjmp	.+12     	; 0x10de <Endpoint_Read_Control_Stream_LE+0x66>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    10d2:	80 91 8c 01 	lds	r24, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10d6:	88 23       	and	r24, r24
    10d8:	61 f0       	breq	.+24     	; 0x10f2 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10da:	85 30       	cpi	r24, 0x05	; 5
    10dc:	61 f0       	breq	.+24     	; 0x10f6 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10de:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    10e2:	80 ff       	sbrs	r24, 0
    10e4:	f6 cf       	rjmp	.-20     	; 0x10d2 <Endpoint_Read_Control_Stream_LE+0x5a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    10f6:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    10f8:	08 95       	ret

000010fa <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    10fa:	e8 2f       	mov	r30, r24
    10fc:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    10fe:	80 91 93 01 	lds	r24, 0x0193
    1102:	90 91 94 01 	lds	r25, 0x0194
    1106:	86 17       	cp	r24, r22
    1108:	97 07       	cpc	r25, r23
    110a:	18 f4       	brcc	.+6      	; 0x1112 <Endpoint_Write_Control_PStream_LE+0x18>
    110c:	bc 01       	movw	r22, r24
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	38 c0       	rjmp	.+112    	; 0x1182 <Endpoint_Write_Control_PStream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1112:	61 15       	cp	r22, r1
    1114:	71 05       	cpc	r23, r1
    1116:	d9 f7       	brne	.-10     	; 0x110e <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1118:	80 91 e8 00 	lds	r24, 0x00E8
    111c:	8e 77       	andi	r24, 0x7E	; 126
    111e:	80 93 e8 00 	sts	0x00E8, r24
    1122:	f5 cf       	rjmp	.-22     	; 0x110e <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1124:	80 91 8c 01 	lds	r24, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1128:	88 23       	and	r24, r24
    112a:	09 f4       	brne	.+2      	; 0x112e <Endpoint_Write_Control_PStream_LE+0x34>
    112c:	40 c0       	rjmp	.+128    	; 0x11ae <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    112e:	85 30       	cpi	r24, 0x05	; 5
    1130:	d1 f1       	breq	.+116    	; 0x11a6 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1132:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1136:	83 fd       	sbrc	r24, 3
    1138:	38 c0       	rjmp	.+112    	; 0x11aa <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    113a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    113e:	82 fd       	sbrc	r24, 2
    1140:	2c c0       	rjmp	.+88     	; 0x119a <Endpoint_Write_Control_PStream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1142:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1146:	80 ff       	sbrs	r24, 0
    1148:	1c c0       	rjmp	.+56     	; 0x1182 <Endpoint_Write_Control_PStream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    114a:	80 91 f2 00 	lds	r24, 0x00F2
    114e:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1152:	07 c0       	rjmp	.+14     	; 0x1162 <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1154:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1156:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    115a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    115c:	61 50       	subi	r22, 0x01	; 1
    115e:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    1160:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1162:	61 15       	cp	r22, r1
    1164:	71 05       	cpc	r23, r1
    1166:	19 f0       	breq	.+6      	; 0x116e <Endpoint_Write_Control_PStream_LE+0x74>
    1168:	88 30       	cpi	r24, 0x08	; 8
    116a:	91 05       	cpc	r25, r1
    116c:	98 f3       	brcs	.-26     	; 0x1154 <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    116e:	21 e0       	ldi	r18, 0x01	; 1
    1170:	88 30       	cpi	r24, 0x08	; 8
    1172:	91 05       	cpc	r25, r1
    1174:	09 f0       	breq	.+2      	; 0x1178 <Endpoint_Write_Control_PStream_LE+0x7e>
    1176:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1178:	80 91 e8 00 	lds	r24, 0x00E8
    117c:	8e 77       	andi	r24, 0x7E	; 126
    117e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1182:	61 15       	cp	r22, r1
    1184:	71 05       	cpc	r23, r1
    1186:	71 f6       	brne	.-100    	; 0x1124 <Endpoint_Write_Control_PStream_LE+0x2a>
    1188:	22 23       	and	r18, r18
    118a:	61 f6       	brne	.-104    	; 0x1124 <Endpoint_Write_Control_PStream_LE+0x2a>
    118c:	06 c0       	rjmp	.+12     	; 0x119a <Endpoint_Write_Control_PStream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    118e:	80 91 8c 01 	lds	r24, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1192:	88 23       	and	r24, r24
    1194:	61 f0       	breq	.+24     	; 0x11ae <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1196:	85 30       	cpi	r24, 0x05	; 5
    1198:	61 f0       	breq	.+24     	; 0x11b2 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    119a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    119e:	82 ff       	sbrs	r24, 2
    11a0:	f6 cf       	rjmp	.-20     	; 0x118e <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    11a6:	83 e0       	ldi	r24, 0x03	; 3
    11a8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    11b2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    11b4:	08 95       	ret

000011b6 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    11b6:	98 2f       	mov	r25, r24
    11b8:	2c c0       	rjmp	.+88     	; 0x1212 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11ba:	29 2f       	mov	r18, r25
    11bc:	2f 70       	andi	r18, 0x0F	; 15
    11be:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    11c2:	98 17       	cp	r25, r24
    11c4:	39 f0       	breq	.+14     	; 0x11d4 <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    11c6:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    11ca:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    11ce:	50 91 f0 00 	lds	r21, 0x00F0
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    11d4:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    11d6:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    11d8:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    11da:	21 ff       	sbrs	r18, 1
    11dc:	19 c0       	rjmp	.+50     	; 0x1210 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    11de:	30 91 eb 00 	lds	r19, 0x00EB
    11e2:	3e 7f       	andi	r19, 0xFE	; 254
    11e4:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    11e8:	30 91 ed 00 	lds	r19, 0x00ED
    11ec:	3d 7f       	andi	r19, 0xFD	; 253
    11ee:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    11f2:	30 91 eb 00 	lds	r19, 0x00EB
    11f6:	31 60       	ori	r19, 0x01	; 1
    11f8:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    11fc:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1200:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1204:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1208:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    120c:	27 ff       	sbrs	r18, 7
    120e:	08 c0       	rjmp	.+16     	; 0x1220 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1210:	9f 5f       	subi	r25, 0xFF	; 255
    1212:	97 30       	cpi	r25, 0x07	; 7
    1214:	90 f2       	brcs	.-92     	; 0x11ba <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1216:	8f 70       	andi	r24, 0x0F	; 15
    1218:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1220:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1222:	08 95       	ret

00001224 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    1232:	e8 2e       	mov	r14, r24
    1234:	e7 01       	movw	r28, r14
    1236:	7e 01       	movw	r14, r28
    1238:	f9 2e       	mov	r15, r25
    123a:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    123c:	00 e0       	ldi	r16, 0x00	; 0
    123e:	2a c0       	rjmp	.+84     	; 0x1294 <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
    1240:	98 81       	ld	r25, Y
    1242:	99 23       	and	r25, r25
    1244:	29 f1       	breq	.+74     	; 0x1290 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1246:	6b 81       	ldd	r22, Y+3	; 0x03
    1248:	e9 81       	ldd	r30, Y+1	; 0x01
    124a:	fa 81       	ldd	r31, Y+2	; 0x02
    124c:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    124e:	89 2f       	mov	r24, r25
    1250:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1252:	87 30       	cpi	r24, 0x07	; 7
    1254:	18 f5       	brcc	.+70     	; 0x129c <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1256:	62 95       	swap	r22
    1258:	66 0f       	add	r22, r22
    125a:	66 0f       	add	r22, r22
    125c:	60 7c       	andi	r22, 0xC0	; 192
    125e:	99 1f       	adc	r25, r25
    1260:	99 27       	eor	r25, r25
    1262:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1264:	69 2b       	or	r22, r25
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	10 f0       	brcs	.+4      	; 0x126e <Endpoint_ConfigureEndpointTable+0x4a>
    126a:	96 e0       	ldi	r25, 0x06	; 6
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <Endpoint_ConfigureEndpointTable+0x4c>
    126e:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1270:	28 e0       	ldi	r18, 0x08	; 8
    1272:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	03 c0       	rjmp	.+6      	; 0x127e <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1278:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    127a:	22 0f       	add	r18, r18
    127c:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    127e:	2e 17       	cp	r18, r30
    1280:	3f 07       	cpc	r19, r31
    1282:	d0 f3       	brcs	.-12     	; 0x1278 <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1284:	42 95       	swap	r20
    1286:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1288:	49 2b       	or	r20, r25
    128a:	95 df       	rcall	.-214    	; 0x11b6 <Endpoint_ConfigureEndpoint_Prv>
    128c:	88 23       	and	r24, r24
    128e:	31 f0       	breq	.+12     	; 0x129c <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1290:	0f 5f       	subi	r16, 0xFF	; 255
    1292:	25 96       	adiw	r28, 0x05	; 5
    1294:	01 17       	cp	r16, r17
    1296:	a0 f2       	brcs	.-88     	; 0x1240 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	01 c0       	rjmp	.+2      	; 0x129e <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    129c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	08 95       	ret

000012ac <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    12ac:	80 91 8d 01 	lds	r24, 0x018D
    12b0:	87 ff       	sbrs	r24, 7
    12b2:	13 c0       	rjmp	.+38     	; 0x12da <Endpoint_ClearStatusStage+0x2e>
    12b4:	04 c0       	rjmp	.+8      	; 0x12be <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    12b6:	80 91 8c 01 	lds	r24, 0x018C
    12ba:	88 23       	and	r24, r24
    12bc:	b9 f0       	breq	.+46     	; 0x12ec <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12be:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    12c2:	82 ff       	sbrs	r24, 2
    12c4:	f8 cf       	rjmp	.-16     	; 0x12b6 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12c6:	80 91 e8 00 	lds	r24, 0x00E8
    12ca:	8b 77       	andi	r24, 0x7B	; 123
    12cc:	80 93 e8 00 	sts	0x00E8, r24
    12d0:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    12d2:	80 91 8c 01 	lds	r24, 0x018C
    12d6:	88 23       	and	r24, r24
    12d8:	49 f0       	breq	.+18     	; 0x12ec <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12da:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    12de:	80 ff       	sbrs	r24, 0
    12e0:	f8 cf       	rjmp	.-16     	; 0x12d2 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12e2:	80 91 e8 00 	lds	r24, 0x00E8
    12e6:	8e 77       	andi	r24, 0x7E	; 126
    12e8:	80 93 e8 00 	sts	0x00E8, r24
    12ec:	08 95       	ret

000012ee <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    12ee:	80 91 e4 00 	lds	r24, 0x00E4
    12f2:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    12f6:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    12f8:	20 91 ec 00 	lds	r18, 0x00EC
    12fc:	20 ff       	sbrs	r18, 0
    12fe:	26 c0       	rjmp	.+76     	; 0x134c <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1300:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1304:	20 fd       	sbrc	r18, 0
    1306:	16 c0       	rjmp	.+44     	; 0x1334 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1308:	20 91 8c 01 	lds	r18, 0x018C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    130c:	22 23       	and	r18, r18
    130e:	a1 f0       	breq	.+40     	; 0x1338 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1310:	25 30       	cpi	r18, 0x05	; 5
    1312:	a1 f0       	breq	.+40     	; 0x133c <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1314:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1318:	25 fd       	sbrc	r18, 5
    131a:	12 c0       	rjmp	.+36     	; 0x1340 <Endpoint_WaitUntilReady+0x52>
    131c:	20 91 e4 00 	lds	r18, 0x00E4
    1320:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1324:	28 17       	cp	r18, r24
    1326:	39 07       	cpc	r19, r25
    1328:	39 f3       	breq	.-50     	; 0x12f8 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    132a:	44 23       	and	r20, r20
    132c:	59 f0       	breq	.+22     	; 0x1344 <Endpoint_WaitUntilReady+0x56>
    132e:	41 50       	subi	r20, 0x01	; 1
    1330:	c9 01       	movw	r24, r18
    1332:	e2 cf       	rjmp	.-60     	; 0x12f8 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    133c:	83 e0       	ldi	r24, 0x03	; 3
    133e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1344:	84 e0       	ldi	r24, 0x04	; 4
    1346:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1348:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    134a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    134c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1350:	22 ff       	sbrs	r18, 2
    1352:	da cf       	rjmp	.-76     	; 0x1308 <Endpoint_WaitUntilReady+0x1a>
    1354:	f9 cf       	rjmp	.-14     	; 0x1348 <Endpoint_WaitUntilReady+0x5a>

00001356 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    135e:	4e d0       	rcall	.+156    	; 0x13fc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1360:	55 d0       	rcall	.+170    	; 0x140c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1362:	c8 ed       	ldi	r28, 0xD8	; 216
    1364:	d0 e0       	ldi	r29, 0x00	; 0
    1366:	88 81       	ld	r24, Y
    1368:	8f 77       	andi	r24, 0x7F	; 127
    136a:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    136c:	88 81       	ld	r24, Y
    136e:	80 68       	ori	r24, 0x80	; 128
    1370:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1372:	88 81       	ld	r24, Y
    1374:	8f 7d       	andi	r24, 0xDF	; 223
    1376:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1378:	e7 ed       	ldi	r30, 0xD7	; 215
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	80 68       	ori	r24, 0x80	; 128
    1380:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1382:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1384:	10 92 8c 01 	sts	0x018C, r1
	USB_Device_ConfigurationNumber  = 0;
    1388:	10 92 88 01 	sts	0x0188, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    138c:	10 92 8a 01 	sts	0x018A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1390:	10 92 89 01 	sts	0x0189, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1394:	00 ee       	ldi	r16, 0xE0	; 224
    1396:	10 e0       	ldi	r17, 0x00	; 0
    1398:	f8 01       	movw	r30, r16
    139a:	80 81       	ld	r24, Z
    139c:	8b 7f       	andi	r24, 0xFB	; 251
    139e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    13a0:	88 81       	ld	r24, Y
    13a2:	81 60       	ori	r24, 0x01	; 1
    13a4:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	42 e0       	ldi	r20, 0x02	; 2
    13ac:	04 df       	rcall	.-504    	; 0x11b6 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    13ae:	e1 ee       	ldi	r30, 0xE1	; 225
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8e 7f       	andi	r24, 0xFE	; 254
    13b6:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    13b8:	e2 ee       	ldi	r30, 0xE2	; 226
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	81 60       	ori	r24, 0x01	; 1
    13c0:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    13c2:	80 81       	ld	r24, Z
    13c4:	88 60       	ori	r24, 0x08	; 8
    13c6:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    13c8:	f8 01       	movw	r30, r16
    13ca:	80 81       	ld	r24, Z
    13cc:	8e 7f       	andi	r24, 0xFE	; 254
    13ce:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    13d0:	88 81       	ld	r24, Y
    13d2:	80 61       	ori	r24, 0x10	; 16
    13d4:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	08 95       	ret

000013e0 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    13e0:	e8 ed       	ldi	r30, 0xD8	; 216
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	8f 7e       	andi	r24, 0xEF	; 239
    13e8:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    13ea:	e7 ed       	ldi	r30, 0xD7	; 215
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	81 60       	ori	r24, 0x01	; 1
    13f2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	80 93 8b 01 	sts	0x018B, r24

	USB_ResetInterface();
}
    13fa:	ad cf       	rjmp	.-166    	; 0x1356 <USB_ResetInterface>

000013fc <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    13fc:	e8 ed       	ldi	r30, 0xD8	; 216
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	8c 7f       	andi	r24, 0xFC	; 252
    1404:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1406:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    140a:	08 95       	ret

0000140c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    140c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1410:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1414:	08 95       	ret

00001416 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	0b b6       	in	r0, 0x3b	; 59
    1420:	0f 92       	push	r0
    1422:	11 24       	eor	r1, r1
    1424:	2f 93       	push	r18
    1426:	3f 93       	push	r19
    1428:	4f 93       	push	r20
    142a:	5f 93       	push	r21
    142c:	6f 93       	push	r22
    142e:	7f 93       	push	r23
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	af 93       	push	r26
    1436:	bf 93       	push	r27
    1438:	ef 93       	push	r30
    143a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    143c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1440:	82 ff       	sbrs	r24, 2
    1442:	0b c0       	rjmp	.+22     	; 0x145a <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1444:	80 91 e2 00 	lds	r24, 0x00E2
    1448:	82 ff       	sbrs	r24, 2
    144a:	07 c0       	rjmp	.+14     	; 0x145a <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    144c:	80 91 e1 00 	lds	r24, 0x00E1
    1450:	8b 7f       	andi	r24, 0xFB	; 251
    1452:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1456:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    145a:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    145e:	80 ff       	sbrs	r24, 0
    1460:	1f c0       	rjmp	.+62     	; 0x14a0 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1462:	80 91 d8 00 	lds	r24, 0x00D8
    1466:	80 ff       	sbrs	r24, 0
    1468:	1b c0       	rjmp	.+54     	; 0x14a0 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    146a:	80 91 da 00 	lds	r24, 0x00DA
    146e:	8e 7f       	andi	r24, 0xFE	; 254
    1470:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1474:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1478:	80 ff       	sbrs	r24, 0
    147a:	0d c0       	rjmp	.+26     	; 0x1496 <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    147c:	8c e0       	ldi	r24, 0x0C	; 12
    147e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1480:	8e e0       	ldi	r24, 0x0E	; 14
    1482:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1484:	09 b4       	in	r0, 0x29	; 41
    1486:	00 fe       	sbrs	r0, 0
    1488:	fd cf       	rjmp	.-6      	; 0x1484 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	80 93 8c 01 	sts	0x018C, r24
			EVENT_USB_Device_Connect();
    1490:	0e 94 3c 01 	call	0x278	; 0x278 <EVENT_USB_Device_Connect>
    1494:	05 c0       	rjmp	.+10     	; 0x14a0 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1496:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1498:	10 92 8c 01 	sts	0x018C, r1
			EVENT_USB_Device_Disconnect();
    149c:	0e 94 3e 01 	call	0x27c	; 0x27c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    14a0:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    14a4:	80 ff       	sbrs	r24, 0
    14a6:	18 c0       	rjmp	.+48     	; 0x14d8 <__vector_10+0xc2>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    14a8:	80 91 e2 00 	lds	r24, 0x00E2
    14ac:	80 ff       	sbrs	r24, 0
    14ae:	14 c0       	rjmp	.+40     	; 0x14d8 <__vector_10+0xc2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    14b0:	80 91 e2 00 	lds	r24, 0x00E2
    14b4:	8e 7f       	andi	r24, 0xFE	; 254
    14b6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    14ba:	80 91 e2 00 	lds	r24, 0x00E2
    14be:	80 61       	ori	r24, 0x10	; 16
    14c0:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    14c4:	80 91 d8 00 	lds	r24, 0x00D8
    14c8:	80 62       	ori	r24, 0x20	; 32
    14ca:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    14ce:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    14d0:	85 e0       	ldi	r24, 0x05	; 5
    14d2:	80 93 8c 01 	sts	0x018C, r24
		EVENT_USB_Device_Suspend();
    14d6:	14 d2       	rcall	.+1064   	; 0x1900 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    14d8:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    14dc:	84 ff       	sbrs	r24, 4
    14de:	2d c0       	rjmp	.+90     	; 0x153a <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    14e0:	80 91 e2 00 	lds	r24, 0x00E2
    14e4:	84 ff       	sbrs	r24, 4
    14e6:	29 c0       	rjmp	.+82     	; 0x153a <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    14e8:	8c e0       	ldi	r24, 0x0C	; 12
    14ea:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    14ec:	8e e0       	ldi	r24, 0x0E	; 14
    14ee:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    14f0:	09 b4       	in	r0, 0x29	; 41
    14f2:	00 fe       	sbrs	r0, 0
    14f4:	fd cf       	rjmp	.-6      	; 0x14f0 <__vector_10+0xda>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    14f6:	80 91 d8 00 	lds	r24, 0x00D8
    14fa:	8f 7d       	andi	r24, 0xDF	; 223
    14fc:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1500:	80 91 e1 00 	lds	r24, 0x00E1
    1504:	8f 7e       	andi	r24, 0xEF	; 239
    1506:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    150a:	80 91 e2 00 	lds	r24, 0x00E2
    150e:	8f 7e       	andi	r24, 0xEF	; 239
    1510:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1514:	80 91 e2 00 	lds	r24, 0x00E2
    1518:	81 60       	ori	r24, 0x01	; 1
    151a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    151e:	80 91 88 01 	lds	r24, 0x0188
    1522:	88 23       	and	r24, r24
    1524:	21 f4       	brne	.+8      	; 0x152e <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1526:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    152a:	87 ff       	sbrs	r24, 7
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <__vector_10+0x11c>
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <__vector_10+0x11e>
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	80 93 8c 01 	sts	0x018C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1538:	e3 d1       	rcall	.+966    	; 0x1900 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    153a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    153e:	83 ff       	sbrs	r24, 3
    1540:	27 c0       	rjmp	.+78     	; 0x1590 <__vector_10+0x17a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1542:	80 91 e2 00 	lds	r24, 0x00E2
    1546:	83 ff       	sbrs	r24, 3
    1548:	23 c0       	rjmp	.+70     	; 0x1590 <__vector_10+0x17a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    154a:	80 91 e1 00 	lds	r24, 0x00E1
    154e:	87 7f       	andi	r24, 0xF7	; 247
    1550:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	80 93 8c 01 	sts	0x018C, r24
		USB_Device_ConfigurationNumber = 0;
    155a:	10 92 88 01 	sts	0x0188, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    155e:	80 91 e1 00 	lds	r24, 0x00E1
    1562:	8e 7f       	andi	r24, 0xFE	; 254
    1564:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1568:	80 91 e2 00 	lds	r24, 0x00E2
    156c:	8e 7f       	andi	r24, 0xFE	; 254
    156e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1572:	80 91 e2 00 	lds	r24, 0x00E2
    1576:	80 61       	ori	r24, 0x10	; 16
    1578:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	42 e0       	ldi	r20, 0x02	; 2
    1582:	19 de       	rcall	.-974    	; 0x11b6 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1584:	80 91 f0 00 	lds	r24, 0x00F0
    1588:	88 60       	ori	r24, 0x08	; 8
    158a:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    158e:	b8 d1       	rcall	.+880    	; 0x1900 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1590:	ff 91       	pop	r31
    1592:	ef 91       	pop	r30
    1594:	bf 91       	pop	r27
    1596:	af 91       	pop	r26
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	7f 91       	pop	r23
    159e:	6f 91       	pop	r22
    15a0:	5f 91       	pop	r21
    15a2:	4f 91       	pop	r20
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0b be       	out	0x3b, r0	; 59
    15ac:	0f 90       	pop	r0
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	0f 90       	pop	r0
    15b2:	1f 90       	pop	r1
    15b4:	18 95       	reti

000015b6 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    15b6:	1f 92       	push	r1
    15b8:	0f 92       	push	r0
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	0f 92       	push	r0
    15be:	0b b6       	in	r0, 0x3b	; 59
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	1f 93       	push	r17
    15c6:	2f 93       	push	r18
    15c8:	3f 93       	push	r19
    15ca:	4f 93       	push	r20
    15cc:	5f 93       	push	r21
    15ce:	6f 93       	push	r22
    15d0:	7f 93       	push	r23
    15d2:	8f 93       	push	r24
    15d4:	9f 93       	push	r25
    15d6:	af 93       	push	r26
    15d8:	bf 93       	push	r27
    15da:	ef 93       	push	r30
    15dc:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    15de:	10 91 e9 00 	lds	r17, 0x00E9
    15e2:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    15e4:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15e8:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    15ec:	80 91 f0 00 	lds	r24, 0x00F0
    15f0:	87 7f       	andi	r24, 0xF7	; 247
    15f2:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    15f6:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    15f8:	1d d0       	rcall	.+58     	; 0x1634 <USB_Device_ProcessControlRequest>
    15fa:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    15fe:	80 91 f0 00 	lds	r24, 0x00F0
    1602:	88 60       	ori	r24, 0x08	; 8
    1604:	80 93 f0 00 	sts	0x00F0, r24
    1608:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    160c:	ff 91       	pop	r31
    160e:	ef 91       	pop	r30
    1610:	bf 91       	pop	r27
    1612:	af 91       	pop	r26
    1614:	9f 91       	pop	r25
    1616:	8f 91       	pop	r24
    1618:	7f 91       	pop	r23
    161a:	6f 91       	pop	r22
    161c:	5f 91       	pop	r21
    161e:	4f 91       	pop	r20
    1620:	3f 91       	pop	r19
    1622:	2f 91       	pop	r18
    1624:	1f 91       	pop	r17
    1626:	0f 90       	pop	r0
    1628:	0b be       	out	0x3b, r0	; 59
    162a:	0f 90       	pop	r0
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	0f 90       	pop	r0
    1630:	1f 90       	pop	r1
    1632:	18 95       	reti

00001634 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1634:	1f 93       	push	r17
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	ac 97       	sbiw	r28, 0x2c	; 44
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    164a:	ed e8       	ldi	r30, 0x8D	; 141
    164c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    164e:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1652:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1654:	21 e0       	ldi	r18, 0x01	; 1
    1656:	e5 39       	cpi	r30, 0x95	; 149
    1658:	f2 07       	cpc	r31, r18
    165a:	c9 f7       	brne	.-14     	; 0x164e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    165c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1660:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1664:	83 ff       	sbrs	r24, 3
    1666:	34 c1       	rjmp	.+616    	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1668:	80 91 8d 01 	lds	r24, 0x018D

		switch (USB_ControlRequest.bRequest)
    166c:	20 91 8e 01 	lds	r18, 0x018E
    1670:	25 30       	cpi	r18, 0x05	; 5
    1672:	09 f4       	brne	.+2      	; 0x1676 <USB_Device_ProcessControlRequest+0x42>
    1674:	84 c0       	rjmp	.+264    	; 0x177e <USB_Device_ProcessControlRequest+0x14a>
    1676:	26 30       	cpi	r18, 0x06	; 6
    1678:	40 f4       	brcc	.+16     	; 0x168a <USB_Device_ProcessControlRequest+0x56>
    167a:	21 30       	cpi	r18, 0x01	; 1
    167c:	a1 f1       	breq	.+104    	; 0x16e6 <USB_Device_ProcessControlRequest+0xb2>
    167e:	21 30       	cpi	r18, 0x01	; 1
    1680:	70 f0       	brcs	.+28     	; 0x169e <USB_Device_ProcessControlRequest+0x6a>
    1682:	23 30       	cpi	r18, 0x03	; 3
    1684:	09 f0       	breq	.+2      	; 0x1688 <USB_Device_ProcessControlRequest+0x54>
    1686:	24 c1       	rjmp	.+584    	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
    1688:	2e c0       	rjmp	.+92     	; 0x16e6 <USB_Device_ProcessControlRequest+0xb2>
    168a:	28 30       	cpi	r18, 0x08	; 8
    168c:	09 f4       	brne	.+2      	; 0x1690 <USB_Device_ProcessControlRequest+0x5c>
    168e:	f1 c0       	rjmp	.+482    	; 0x1872 <USB_Device_ProcessControlRequest+0x23e>
    1690:	29 30       	cpi	r18, 0x09	; 9
    1692:	09 f4       	brne	.+2      	; 0x1696 <USB_Device_ProcessControlRequest+0x62>
    1694:	00 c1       	rjmp	.+512    	; 0x1896 <USB_Device_ProcessControlRequest+0x262>
    1696:	26 30       	cpi	r18, 0x06	; 6
    1698:	09 f0       	breq	.+2      	; 0x169c <USB_Device_ProcessControlRequest+0x68>
    169a:	1a c1       	rjmp	.+564    	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
    169c:	93 c0       	rjmp	.+294    	; 0x17c4 <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    169e:	80 38       	cpi	r24, 0x80	; 128
    16a0:	21 f0       	breq	.+8      	; 0x16aa <USB_Device_ProcessControlRequest+0x76>
    16a2:	82 38       	cpi	r24, 0x82	; 130
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <USB_Device_ProcessControlRequest+0x74>
    16a6:	14 c1       	rjmp	.+552    	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
    16a8:	08 c0       	rjmp	.+16     	; 0x16ba <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    16aa:	80 91 89 01 	lds	r24, 0x0189
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    16ae:	90 91 8a 01 	lds	r25, 0x018A
    16b2:	99 23       	and	r25, r25
    16b4:	71 f0       	breq	.+28     	; 0x16d2 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    16b6:	82 60       	ori	r24, 0x02	; 2
    16b8:	0c c0       	rjmp	.+24     	; 0x16d2 <USB_Device_ProcessControlRequest+0x9e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16ba:	80 91 91 01 	lds	r24, 0x0191
    16be:	8f 70       	andi	r24, 0x0F	; 15
    16c0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    16c4:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	95 ff       	sbrs	r25, 5
    16cc:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16ce:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16d2:	90 91 e8 00 	lds	r25, 0x00E8
    16d6:	97 7f       	andi	r25, 0xF7	; 247
    16d8:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    16dc:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    16e0:	10 92 f1 00 	sts	0x00F1, r1
    16e4:	d1 c0       	rjmp	.+418    	; 0x1888 <USB_Device_ProcessControlRequest+0x254>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    16e6:	88 23       	and	r24, r24
    16e8:	19 f0       	breq	.+6      	; 0x16f0 <USB_Device_ProcessControlRequest+0xbc>
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <USB_Device_ProcessControlRequest+0xbc>
    16ee:	f0 c0       	rjmp	.+480    	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	8f 71       	andi	r24, 0x1F	; 31
    16f4:	90 70       	andi	r25, 0x00	; 0
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	29 f0       	breq	.+10     	; 0x1704 <USB_Device_ProcessControlRequest+0xd0>
    16fa:	82 30       	cpi	r24, 0x02	; 2
    16fc:	91 05       	cpc	r25, r1
    16fe:	09 f0       	breq	.+2      	; 0x1702 <USB_Device_ProcessControlRequest+0xce>
    1700:	e7 c0       	rjmp	.+462    	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
    1702:	0b c0       	rjmp	.+22     	; 0x171a <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1704:	80 91 8f 01 	lds	r24, 0x018F
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	09 f0       	breq	.+2      	; 0x170e <USB_Device_ProcessControlRequest+0xda>
    170c:	e1 c0       	rjmp	.+450    	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    170e:	23 30       	cpi	r18, 0x03	; 3
    1710:	09 f0       	breq	.+2      	; 0x1714 <USB_Device_ProcessControlRequest+0xe0>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	80 93 8a 01 	sts	0x018A, r24
    1718:	2c c0       	rjmp	.+88     	; 0x1772 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    171a:	80 91 8f 01 	lds	r24, 0x018F
    171e:	88 23       	and	r24, r24
    1720:	41 f5       	brne	.+80     	; 0x1772 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1722:	20 91 91 01 	lds	r18, 0x0191
    1726:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1728:	09 f4       	brne	.+2      	; 0x172c <USB_Device_ProcessControlRequest+0xf8>
    172a:	d2 c0       	rjmp	.+420    	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    172c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1730:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1734:	80 ff       	sbrs	r24, 0
    1736:	1d c0       	rjmp	.+58     	; 0x1772 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1738:	80 91 8e 01 	lds	r24, 0x018E
    173c:	83 30       	cpi	r24, 0x03	; 3
    173e:	21 f4       	brne	.+8      	; 0x1748 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1740:	80 91 eb 00 	lds	r24, 0x00EB
    1744:	80 62       	ori	r24, 0x20	; 32
    1746:	13 c0       	rjmp	.+38     	; 0x176e <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1748:	80 91 eb 00 	lds	r24, 0x00EB
    174c:	80 61       	ori	r24, 0x10	; 16
    174e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 c0       	rjmp	.+4      	; 0x175c <USB_Device_ProcessControlRequest+0x128>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	2a 95       	dec	r18
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <USB_Device_ProcessControlRequest+0x124>
    1760:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1764:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1768:	80 91 eb 00 	lds	r24, 0x00EB
    176c:	88 60       	ori	r24, 0x08	; 8
    176e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1772:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1776:	80 91 e8 00 	lds	r24, 0x00E8
    177a:	87 7f       	andi	r24, 0xF7	; 247
    177c:	88 c0       	rjmp	.+272    	; 0x188e <USB_Device_ProcessControlRequest+0x25a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    177e:	88 23       	and	r24, r24
    1780:	09 f0       	breq	.+2      	; 0x1784 <USB_Device_ProcessControlRequest+0x150>
    1782:	a6 c0       	rjmp	.+332    	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1784:	10 91 8f 01 	lds	r17, 0x018F
    1788:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    178a:	80 91 e3 00 	lds	r24, 0x00E3
    178e:	80 78       	andi	r24, 0x80	; 128
    1790:	81 2b       	or	r24, r17
    1792:	80 93 e3 00 	sts	0x00E3, r24
    1796:	80 91 e8 00 	lds	r24, 0x00E8
    179a:	87 7f       	andi	r24, 0xF7	; 247
    179c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    17a0:	85 dd       	rcall	.-1270   	; 0x12ac <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17a2:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    17a6:	80 ff       	sbrs	r24, 0
    17a8:	fc cf       	rjmp	.-8      	; 0x17a2 <USB_Device_ProcessControlRequest+0x16e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    17aa:	80 91 e3 00 	lds	r24, 0x00E3
    17ae:	80 68       	ori	r24, 0x80	; 128
    17b0:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    17b4:	11 23       	and	r17, r17
    17b6:	11 f0       	breq	.+4      	; 0x17bc <USB_Device_ProcessControlRequest+0x188>
    17b8:	83 e0       	ldi	r24, 0x03	; 3
    17ba:	01 c0       	rjmp	.+2      	; 0x17be <USB_Device_ProcessControlRequest+0x18a>
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	80 93 8c 01 	sts	0x018C, r24
    17c2:	86 c0       	rjmp	.+268    	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    17c4:	80 58       	subi	r24, 0x80	; 128
    17c6:	82 30       	cpi	r24, 0x02	; 2
    17c8:	08 f0       	brcs	.+2      	; 0x17cc <USB_Device_ProcessControlRequest+0x198>
    17ca:	82 c0       	rjmp	.+260    	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    17cc:	80 91 8f 01 	lds	r24, 0x018F
    17d0:	90 91 90 01 	lds	r25, 0x0190
    17d4:	23 e0       	ldi	r18, 0x03	; 3
    17d6:	8c 3d       	cpi	r24, 0xDC	; 220
    17d8:	92 07       	cpc	r25, r18
    17da:	91 f5       	brne	.+100    	; 0x1840 <USB_Device_ProcessControlRequest+0x20c>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    17dc:	83 e0       	ldi	r24, 0x03	; 3
    17de:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    17e0:	8a e2       	ldi	r24, 0x2A	; 42
    17e2:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    17e4:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    17e6:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    17e8:	de 01       	movw	r26, r28
    17ea:	15 96       	adiw	r26, 0x05	; 5
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    17f0:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    17f2:	61 e2       	ldi	r22, 0x21	; 33
    17f4:	e4 2f       	mov	r30, r20
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	60 93 57 00 	sts	0x0057, r22
    17fc:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
    17fe:	80 ff       	sbrs	r24, 0
    1800:	03 c0       	rjmp	.+6      	; 0x1808 <USB_Device_ProcessControlRequest+0x1d4>
					{
						SerialByte >>= 4;
    1802:	e2 95       	swap	r30
    1804:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1806:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1808:	ef 70       	andi	r30, 0x0F	; 15
    180a:	2e 2f       	mov	r18, r30
    180c:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    180e:	ea 30       	cpi	r30, 0x0A	; 10
    1810:	18 f0       	brcs	.+6      	; 0x1818 <USB_Device_ProcessControlRequest+0x1e4>
    1812:	29 5c       	subi	r18, 0xC9	; 201
    1814:	3f 4f       	sbci	r19, 0xFF	; 255
    1816:	02 c0       	rjmp	.+4      	; 0x181c <USB_Device_ProcessControlRequest+0x1e8>
    1818:	20 5d       	subi	r18, 0xD0	; 208
    181a:	3f 4f       	sbci	r19, 0xFF	; 255
    181c:	2d 93       	st	X+, r18
    181e:	3d 93       	st	X+, r19
    1820:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1822:	84 31       	cpi	r24, 0x14	; 20
    1824:	91 05       	cpc	r25, r1
    1826:	31 f7       	brne	.-52     	; 0x17f4 <USB_Device_ProcessControlRequest+0x1c0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1828:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    182a:	80 91 e8 00 	lds	r24, 0x00E8
    182e:	87 7f       	andi	r24, 0xF7	; 247
    1830:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1834:	ce 01       	movw	r24, r28
    1836:	03 96       	adiw	r24, 0x03	; 3
    1838:	6a e2       	ldi	r22, 0x2A	; 42
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	bf db       	rcall	.-2178   	; 0xfbc <Endpoint_Write_Control_Stream_LE>
    183e:	13 c0       	rjmp	.+38     	; 0x1866 <USB_Device_ProcessControlRequest+0x232>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1840:	60 91 91 01 	lds	r22, 0x0191
    1844:	ae 01       	movw	r20, r28
    1846:	4f 5f       	subi	r20, 0xFF	; 255
    1848:	5f 4f       	sbci	r21, 0xFF	; 255
    184a:	0e 94 c1 01 	call	0x382	; 0x382 <CALLBACK_USB_GetDescriptor>
    184e:	bc 01       	movw	r22, r24
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	09 f4       	brne	.+2      	; 0x1856 <USB_Device_ProcessControlRequest+0x222>
    1854:	3d c0       	rjmp	.+122    	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
    1856:	80 91 e8 00 	lds	r24, 0x00E8
    185a:	87 7f       	andi	r24, 0xF7	; 247
    185c:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	4a dc       	rcall	.-1900   	; 0x10fa <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1866:	80 91 e8 00 	lds	r24, 0x00E8
    186a:	8b 77       	andi	r24, 0x7B	; 123
    186c:	80 93 e8 00 	sts	0x00E8, r24
    1870:	2f c0       	rjmp	.+94     	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1872:	80 38       	cpi	r24, 0x80	; 128
    1874:	69 f5       	brne	.+90     	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1876:	80 91 e8 00 	lds	r24, 0x00E8
    187a:	87 7f       	andi	r24, 0xF7	; 247
    187c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1880:	80 91 88 01 	lds	r24, 0x0188
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1884:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1888:	80 91 e8 00 	lds	r24, 0x00E8
    188c:	8e 77       	andi	r24, 0x7E	; 126
    188e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1892:	0c dd       	rcall	.-1512   	; 0x12ac <Endpoint_ClearStatusStage>
    1894:	1d c0       	rjmp	.+58     	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1896:	88 23       	and	r24, r24
    1898:	d9 f4       	brne	.+54     	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    189a:	90 91 8f 01 	lds	r25, 0x018F
    189e:	92 30       	cpi	r25, 0x02	; 2
    18a0:	b8 f4       	brcc	.+46     	; 0x18d0 <USB_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18a2:	80 91 e8 00 	lds	r24, 0x00E8
    18a6:	87 7f       	andi	r24, 0xF7	; 247
    18a8:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    18ac:	90 93 88 01 	sts	0x0188, r25

	Endpoint_ClearStatusStage();
    18b0:	fd dc       	rcall	.-1542   	; 0x12ac <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    18b2:	80 91 88 01 	lds	r24, 0x0188
    18b6:	88 23       	and	r24, r24
    18b8:	21 f4       	brne	.+8      	; 0x18c2 <USB_Device_ProcessControlRequest+0x28e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    18ba:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    18be:	87 ff       	sbrs	r24, 7
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <USB_Device_ProcessControlRequest+0x292>
    18c2:	84 e0       	ldi	r24, 0x04	; 4
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <USB_Device_ProcessControlRequest+0x294>
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	80 93 8c 01 	sts	0x018C, r24

	EVENT_USB_Device_ConfigurationChanged();
    18cc:	0e 94 40 01 	call	0x280	; 0x280 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18d0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    18d4:	83 ff       	sbrs	r24, 3
    18d6:	0a c0       	rjmp	.+20     	; 0x18ec <USB_Device_ProcessControlRequest+0x2b8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18d8:	80 91 e8 00 	lds	r24, 0x00E8
    18dc:	87 7f       	andi	r24, 0xF7	; 247
    18de:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    18e2:	80 91 eb 00 	lds	r24, 0x00EB
    18e6:	80 62       	ori	r24, 0x20	; 32
    18e8:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    18ec:	ac 96       	adiw	r28, 0x2c	; 44
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	1f 91       	pop	r17
    18fe:	08 95       	ret

00001900 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1900:	08 95       	ret

00001902 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1902:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1904:	80 91 8c 01 	lds	r24, 0x018C
    1908:	88 23       	and	r24, r24
    190a:	a9 f0       	breq	.+42     	; 0x1936 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    190c:	80 91 e9 00 	lds	r24, 0x00E9
    1910:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1912:	90 91 ec 00 	lds	r25, 0x00EC
    1916:	90 ff       	sbrs	r25, 0
    1918:	02 c0       	rjmp	.+4      	; 0x191e <USB_USBTask+0x1c>
    191a:	10 e8       	ldi	r17, 0x80	; 128
    191c:	01 c0       	rjmp	.+2      	; 0x1920 <USB_USBTask+0x1e>
    191e:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1920:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1922:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1926:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    192a:	83 ff       	sbrs	r24, 3
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
    192e:	82 de       	rcall	.-764    	; 0x1634 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1930:	1f 70       	andi	r17, 0x0F	; 15
    1932:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1936:	1f 91       	pop	r17
    1938:	08 95       	ret

0000193a <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    193a:	6f 92       	push	r6
    193c:	7f 92       	push	r7
    193e:	8f 92       	push	r8
    1940:	9f 92       	push	r9
    1942:	af 92       	push	r10
    1944:	bf 92       	push	r11
    1946:	cf 92       	push	r12
    1948:	df 92       	push	r13
    194a:	ef 92       	push	r14
    194c:	ff 92       	push	r15
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	00 d0       	rcall	.+0      	; 0x1958 <HID_Device_ProcessControlRequest+0x1e>
    1958:	0f 92       	push	r0
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1960:	6d b6       	in	r6, 0x3d	; 61
    1962:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1964:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1968:	83 ff       	sbrs	r24, 3
    196a:	0f c1       	rjmp	.+542    	; 0x1b8a <HID_Device_ProcessControlRequest+0x250>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    196c:	f7 01       	movw	r30, r14
    196e:	80 81       	ld	r24, Z
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	20 91 91 01 	lds	r18, 0x0191
    1976:	30 91 92 01 	lds	r19, 0x0192
    197a:	28 17       	cp	r18, r24
    197c:	39 07       	cpc	r19, r25
    197e:	09 f0       	breq	.+2      	; 0x1982 <HID_Device_ProcessControlRequest+0x48>
    1980:	04 c1       	rjmp	.+520    	; 0x1b8a <HID_Device_ProcessControlRequest+0x250>
	  return;

	switch (USB_ControlRequest.bRequest)
    1982:	80 91 8e 01 	lds	r24, 0x018E
    1986:	83 30       	cpi	r24, 0x03	; 3
    1988:	09 f4       	brne	.+2      	; 0x198c <HID_Device_ProcessControlRequest+0x52>
    198a:	a6 c0       	rjmp	.+332    	; 0x1ad8 <HID_Device_ProcessControlRequest+0x19e>
    198c:	84 30       	cpi	r24, 0x04	; 4
    198e:	30 f4       	brcc	.+12     	; 0x199c <HID_Device_ProcessControlRequest+0x62>
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	71 f0       	breq	.+28     	; 0x19b0 <HID_Device_ProcessControlRequest+0x76>
    1994:	82 30       	cpi	r24, 0x02	; 2
    1996:	09 f0       	breq	.+2      	; 0x199a <HID_Device_ProcessControlRequest+0x60>
    1998:	f8 c0       	rjmp	.+496    	; 0x1b8a <HID_Device_ProcessControlRequest+0x250>
    199a:	db c0       	rjmp	.+438    	; 0x1b52 <HID_Device_ProcessControlRequest+0x218>
    199c:	8a 30       	cpi	r24, 0x0A	; 10
    199e:	09 f4       	brne	.+2      	; 0x19a2 <HID_Device_ProcessControlRequest+0x68>
    19a0:	c0 c0       	rjmp	.+384    	; 0x1b22 <HID_Device_ProcessControlRequest+0x1e8>
    19a2:	8b 30       	cpi	r24, 0x0B	; 11
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <HID_Device_ProcessControlRequest+0x6e>
    19a6:	a9 c0       	rjmp	.+338    	; 0x1afa <HID_Device_ProcessControlRequest+0x1c0>
    19a8:	89 30       	cpi	r24, 0x09	; 9
    19aa:	09 f0       	breq	.+2      	; 0x19ae <HID_Device_ProcessControlRequest+0x74>
    19ac:	ee c0       	rjmp	.+476    	; 0x1b8a <HID_Device_ProcessControlRequest+0x250>
    19ae:	4d c0       	rjmp	.+154    	; 0x1a4a <HID_Device_ProcessControlRequest+0x110>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    19b0:	80 91 8d 01 	lds	r24, 0x018D
    19b4:	81 3a       	cpi	r24, 0xA1	; 161
    19b6:	09 f0       	breq	.+2      	; 0x19ba <HID_Device_ProcessControlRequest+0x80>
    19b8:	e8 c0       	rjmp	.+464    	; 0x1b8a <HID_Device_ProcessControlRequest+0x250>
    19ba:	cd b6       	in	r12, 0x3d	; 61
    19bc:	de b6       	in	r13, 0x3e	; 62
    19be:	9d b6       	in	r9, 0x3d	; 61
    19c0:	8d 2c       	mov	r8, r13
			{
				uint16_t ReportSize = 0;
    19c2:	1b 82       	std	Y+3, r1	; 0x03
    19c4:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    19c6:	80 91 8f 01 	lds	r24, 0x018F
    19ca:	00 91 90 01 	lds	r16, 0x0190
    19ce:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    19d0:	f7 01       	movw	r30, r14
    19d2:	40 85       	ldd	r20, Z+8	; 0x08
    19d4:	c4 1a       	sub	r12, r20
    19d6:	d1 08       	sbc	r13, r1
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de be       	out	0x3e, r13	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd be       	out	0x3d, r12	; 61
    19e2:	08 94       	sec
    19e4:	c1 1c       	adc	r12, r1
    19e6:	d1 1c       	adc	r13, r1
    19e8:	bc 2c       	mov	r11, r12
    19ea:	ad 2c       	mov	r10, r13

				memset(ReportData, 0, sizeof(ReportData));
    19ec:	c6 01       	movw	r24, r12
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	69 d3       	rcall	.+1746   	; 0x20c8 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    19f6:	40 2f       	mov	r20, r16
    19f8:	41 50       	subi	r20, 0x01	; 1
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    19fa:	c7 01       	movw	r24, r14
    19fc:	be 01       	movw	r22, r28
    19fe:	6f 5f       	subi	r22, 0xFF	; 255
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	96 01       	movw	r18, r12
    1a04:	8e 01       	movw	r16, r28
    1a06:	0e 5f       	subi	r16, 0xFE	; 254
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	0e 94 80 01 	call	0x300	; 0x300 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1a0e:	f7 01       	movw	r30, r14
    1a10:	26 81       	ldd	r18, Z+6	; 0x06
    1a12:	37 81       	ldd	r19, Z+7	; 0x07
    1a14:	21 15       	cp	r18, r1
    1a16:	31 05       	cpc	r19, r1
    1a18:	29 f0       	breq	.+10     	; 0x1a24 <HID_Device_ProcessControlRequest+0xea>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1a1a:	40 85       	ldd	r20, Z+8	; 0x08
    1a1c:	c9 01       	movw	r24, r18
    1a1e:	b6 01       	movw	r22, r12
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	49 d3       	rcall	.+1682   	; 0x20b6 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a24:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a28:	80 91 e8 00 	lds	r24, 0x00E8
    1a2c:	87 7f       	andi	r24, 0xF7	; 247
    1a2e:	80 93 e8 00 	sts	0x00E8, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1a32:	6a 81       	ldd	r22, Y+2	; 0x02
    1a34:	7b 81       	ldd	r23, Y+3	; 0x03
    1a36:	8b 2d       	mov	r24, r11
    1a38:	9a 2d       	mov	r25, r10
    1a3a:	c0 da       	rcall	.-2688   	; 0xfbc <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a3c:	80 91 e8 00 	lds	r24, 0x00E8
    1a40:	8b 77       	andi	r24, 0x7B	; 123
    1a42:	80 93 e8 00 	sts	0x00E8, r24
    1a46:	94 01       	movw	r18, r8
    1a48:	3f c0       	rjmp	.+126    	; 0x1ac8 <HID_Device_ProcessControlRequest+0x18e>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a4a:	80 91 8d 01 	lds	r24, 0x018D
    1a4e:	81 32       	cpi	r24, 0x21	; 33
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <HID_Device_ProcessControlRequest+0x11a>
    1a52:	9b c0       	rjmp	.+310    	; 0x1b8a <HID_Device_ProcessControlRequest+0x250>
    1a54:	cd b6       	in	r12, 0x3d	; 61
    1a56:	de b6       	in	r13, 0x3e	; 62
    1a58:	bd b6       	in	r11, 0x3d	; 61
    1a5a:	9d 2c       	mov	r9, r13
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1a5c:	00 91 93 01 	lds	r16, 0x0193
    1a60:	10 91 94 01 	lds	r17, 0x0194
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1a64:	a0 90 8f 01 	lds	r10, 0x018F
    1a68:	80 90 90 01 	lds	r8, 0x0190
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1a6c:	8d b7       	in	r24, 0x3d	; 61
    1a6e:	9e b7       	in	r25, 0x3e	; 62
    1a70:	80 1b       	sub	r24, r16
    1a72:	91 0b       	sbc	r25, r17
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	9e bf       	out	0x3e, r25	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	8d bf       	out	0x3d, r24	; 61
    1a7e:	cd b6       	in	r12, 0x3d	; 61
    1a80:	de b6       	in	r13, 0x3e	; 62
    1a82:	08 94       	sec
    1a84:	c1 1c       	adc	r12, r1
    1a86:	d1 1c       	adc	r13, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a88:	80 91 e8 00 	lds	r24, 0x00E8
    1a8c:	87 7f       	andi	r24, 0xF7	; 247
    1a8e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1a92:	c6 01       	movw	r24, r12
    1a94:	b8 01       	movw	r22, r16
    1a96:	f0 da       	rcall	.-2592   	; 0x1078 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a98:	80 91 e8 00 	lds	r24, 0x00E8
    1a9c:	8e 77       	andi	r24, 0x7E	; 126
    1a9e:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	aa 20       	and	r10, r10
    1aa8:	11 f4       	brne	.+4      	; 0x1aae <HID_Device_ProcessControlRequest+0x174>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1aae:	48 2d       	mov	r20, r8
    1ab0:	41 50       	subi	r20, 0x01	; 1

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1ab2:	96 01       	movw	r18, r12
    1ab4:	28 0f       	add	r18, r24
    1ab6:	39 1f       	adc	r19, r25
    1ab8:	08 1b       	sub	r16, r24
    1aba:	19 0b       	sbc	r17, r25
    1abc:	c7 01       	movw	r24, r14
    1abe:	6a 2d       	mov	r22, r10
    1ac0:	0e 94 b5 01 	call	0x36a	; 0x36a <CALLBACK_HID_Device_ProcessHIDReport>
    1ac4:	3b 2d       	mov	r19, r11
    1ac6:	29 2d       	mov	r18, r9
    1ac8:	83 2f       	mov	r24, r19
    1aca:	92 2f       	mov	r25, r18
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	9e bf       	out	0x3e, r25	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	8d bf       	out	0x3d, r24	; 61
    1ad6:	59 c0       	rjmp	.+178    	; 0x1b8a <HID_Device_ProcessControlRequest+0x250>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1ad8:	80 91 8d 01 	lds	r24, 0x018D
    1adc:	81 3a       	cpi	r24, 0xA1	; 161
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <HID_Device_ProcessControlRequest+0x1a8>
    1ae0:	54 c0       	rjmp	.+168    	; 0x1b8a <HID_Device_ProcessControlRequest+0x250>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ae2:	80 91 e8 00 	lds	r24, 0x00E8
    1ae6:	87 7f       	andi	r24, 0xF7	; 247
    1ae8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aec:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1af0:	80 ff       	sbrs	r24, 0
    1af2:	fc cf       	rjmp	.-8      	; 0x1aec <HID_Device_ProcessControlRequest+0x1b2>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1af4:	f7 01       	movw	r30, r14
    1af6:	81 85       	ldd	r24, Z+9	; 0x09
    1af8:	40 c0       	rjmp	.+128    	; 0x1b7a <HID_Device_ProcessControlRequest+0x240>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1afa:	80 91 8d 01 	lds	r24, 0x018D
    1afe:	81 32       	cpi	r24, 0x21	; 33
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <HID_Device_ProcessControlRequest+0x1ca>
    1b02:	43 c0       	rjmp	.+134    	; 0x1b8a <HID_Device_ProcessControlRequest+0x250>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b04:	80 91 e8 00 	lds	r24, 0x00E8
    1b08:	87 7f       	andi	r24, 0xF7	; 247
    1b0a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1b0e:	ce db       	rcall	.-2148   	; 0x12ac <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1b10:	90 91 8f 01 	lds	r25, 0x018F
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	99 23       	and	r25, r25
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <HID_Device_ProcessControlRequest+0x1e2>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	f7 01       	movw	r30, r14
    1b1e:	81 87       	std	Z+9, r24	; 0x09
    1b20:	34 c0       	rjmp	.+104    	; 0x1b8a <HID_Device_ProcessControlRequest+0x250>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b22:	80 91 8d 01 	lds	r24, 0x018D
    1b26:	81 32       	cpi	r24, 0x21	; 33
    1b28:	81 f5       	brne	.+96     	; 0x1b8a <HID_Device_ProcessControlRequest+0x250>
    1b2a:	80 91 e8 00 	lds	r24, 0x00E8
    1b2e:	87 7f       	andi	r24, 0xF7	; 247
    1b30:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1b34:	bb db       	rcall	.-2186   	; 0x12ac <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1b36:	80 91 8f 01 	lds	r24, 0x018F
    1b3a:	90 91 90 01 	lds	r25, 0x0190
    1b3e:	80 70       	andi	r24, 0x00	; 0
    1b40:	36 e0       	ldi	r19, 0x06	; 6
    1b42:	96 95       	lsr	r25
    1b44:	87 95       	ror	r24
    1b46:	3a 95       	dec	r19
    1b48:	e1 f7       	brne	.-8      	; 0x1b42 <HID_Device_ProcessControlRequest+0x208>
    1b4a:	f7 01       	movw	r30, r14
    1b4c:	95 87       	std	Z+13, r25	; 0x0d
    1b4e:	84 87       	std	Z+12, r24	; 0x0c
    1b50:	1c c0       	rjmp	.+56     	; 0x1b8a <HID_Device_ProcessControlRequest+0x250>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1b52:	80 91 8d 01 	lds	r24, 0x018D
    1b56:	81 3a       	cpi	r24, 0xA1	; 161
    1b58:	c1 f4       	brne	.+48     	; 0x1b8a <HID_Device_ProcessControlRequest+0x250>
    1b5a:	80 91 e8 00 	lds	r24, 0x00E8
    1b5e:	87 7f       	andi	r24, 0xF7	; 247
    1b60:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b64:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1b68:	80 ff       	sbrs	r24, 0
    1b6a:	fc cf       	rjmp	.-8      	; 0x1b64 <HID_Device_ProcessControlRequest+0x22a>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1b6c:	f7 01       	movw	r30, r14
    1b6e:	84 85       	ldd	r24, Z+12	; 0x0c
    1b70:	95 85       	ldd	r25, Z+13	; 0x0d
    1b72:	96 95       	lsr	r25
    1b74:	87 95       	ror	r24
    1b76:	96 95       	lsr	r25
    1b78:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b7a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b7e:	80 91 e8 00 	lds	r24, 0x00E8
    1b82:	8e 77       	andi	r24, 0x7E	; 126
    1b84:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1b88:	91 db       	rcall	.-2270   	; 0x12ac <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	7e be       	out	0x3e, r7	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	6d be       	out	0x3d, r6	; 61
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	df 90       	pop	r13
    1ba8:	cf 90       	pop	r12
    1baa:	bf 90       	pop	r11
    1bac:	af 90       	pop	r10
    1bae:	9f 90       	pop	r9
    1bb0:	8f 90       	pop	r8
    1bb2:	7f 90       	pop	r7
    1bb4:	6f 90       	pop	r6
    1bb6:	08 95       	ret

00001bb8 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1bbe:	09 96       	adiw	r24, 0x09	; 9
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	87 e0       	ldi	r24, 0x07	; 7
    1bc4:	ed 01       	movw	r28, r26
    1bc6:	19 92       	st	Y+, r1
    1bc8:	8a 95       	dec	r24
    1bca:	e9 f7       	brne	.-6      	; 0x1bc6 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1bd0:	84 ef       	ldi	r24, 0xF4	; 244
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	95 87       	std	Z+13, r25	; 0x0d
    1bd6:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1bd8:	83 e0       	ldi	r24, 0x03	; 3
    1bda:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1bdc:	cf 01       	movw	r24, r30
    1bde:	01 96       	adiw	r24, 0x01	; 1
    1be0:	61 e0       	ldi	r22, 0x01	; 1
    1be2:	20 db       	rcall	.-2496   	; 0x1224 <Endpoint_ConfigureEndpointTable>
	  return false;	
	
	return true;
}
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	08 95       	ret

00001bea <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1bea:	5f 92       	push	r5
    1bec:	6f 92       	push	r6
    1bee:	7f 92       	push	r7
    1bf0:	8f 92       	push	r8
    1bf2:	9f 92       	push	r9
    1bf4:	af 92       	push	r10
    1bf6:	bf 92       	push	r11
    1bf8:	cf 92       	push	r12
    1bfa:	df 92       	push	r13
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <HID_Device_USBTask+0x20>
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <HID_Device_USBTask+0x22>
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1c12:	6d b6       	in	r6, 0x3d	; 61
    1c14:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1c16:	80 91 8c 01 	lds	r24, 0x018C
    1c1a:	84 30       	cpi	r24, 0x04	; 4
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <HID_Device_USBTask+0x36>
    1c1e:	99 c0       	rjmp	.+306    	; 0x1d52 <HID_Device_USBTask+0x168>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1c20:	80 91 e4 00 	lds	r24, 0x00E4
    1c24:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1c28:	f7 01       	movw	r30, r14
    1c2a:	22 85       	ldd	r18, Z+10	; 0x0a
    1c2c:	33 85       	ldd	r19, Z+11	; 0x0b
    1c2e:	28 17       	cp	r18, r24
    1c30:	39 07       	cpc	r19, r25
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <HID_Device_USBTask+0x4c>
    1c34:	8e c0       	rjmp	.+284    	; 0x1d52 <HID_Device_USBTask+0x168>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c36:	81 81       	ldd	r24, Z+1	; 0x01
    1c38:	8f 70       	andi	r24, 0x0F	; 15
    1c3a:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c3e:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1c42:	85 ff       	sbrs	r24, 5
    1c44:	86 c0       	rjmp	.+268    	; 0x1d52 <HID_Device_USBTask+0x168>
    1c46:	8d b6       	in	r8, 0x3d	; 61
    1c48:	57 2c       	mov	r5, r7
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1c4a:	40 85       	ldd	r20, Z+8	; 0x08
    1c4c:	cd b6       	in	r12, 0x3d	; 61
    1c4e:	de b6       	in	r13, 0x3e	; 62
    1c50:	c4 1a       	sub	r12, r20
    1c52:	d1 08       	sbc	r13, r1
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de be       	out	0x3e, r13	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd be       	out	0x3d, r12	; 61
    1c5e:	0d b7       	in	r16, 0x3d	; 61
    1c60:	1e b7       	in	r17, 0x3e	; 62
    1c62:	0f 5f       	subi	r16, 0xFF	; 255
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	b0 2e       	mov	r11, r16
    1c68:	a1 2e       	mov	r10, r17
		uint8_t  ReportID     = 0;
    1c6a:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    1c6c:	1b 82       	std	Y+3, r1	; 0x03
    1c6e:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    1c70:	c8 01       	movw	r24, r16
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	27 d2       	rcall	.+1102   	; 0x20c8 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1c7a:	c7 01       	movw	r24, r14
    1c7c:	be 01       	movw	r22, r28
    1c7e:	6f 5f       	subi	r22, 0xFF	; 255
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	98 01       	movw	r18, r16
    1c86:	8e 01       	movw	r16, r28
    1c88:	0e 5f       	subi	r16, 0xFE	; 254
    1c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8c:	0e 94 80 01 	call	0x300	; 0x300 <CALLBACK_HID_Device_CreateHIDReport>
    1c90:	98 2e       	mov	r9, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1c92:	f7 01       	movw	r30, r14
    1c94:	84 85       	ldd	r24, Z+12	; 0x0c
    1c96:	95 85       	ldd	r25, Z+13	; 0x0d
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	59 f0       	breq	.+22     	; 0x1cb2 <HID_Device_USBTask+0xc8>
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	26 85       	ldd	r18, Z+14	; 0x0e
    1ca2:	37 85       	ldd	r19, Z+15	; 0x0f
    1ca4:	21 15       	cp	r18, r1
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	11 f0       	breq	.+4      	; 0x1cae <HID_Device_USBTask+0xc4>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1cae:	6c 01       	movw	r12, r24
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <HID_Device_USBTask+0xcc>
    1cb2:	cc 24       	eor	r12, r12
    1cb4:	dd 24       	eor	r13, r13

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1cb6:	f7 01       	movw	r30, r14
    1cb8:	06 81       	ldd	r16, Z+6	; 0x06
    1cba:	17 81       	ldd	r17, Z+7	; 0x07
    1cbc:	01 15       	cp	r16, r1
    1cbe:	11 05       	cpc	r17, r1
    1cc0:	a1 f0       	breq	.+40     	; 0x1cea <HID_Device_USBTask+0x100>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1cc2:	4a 81       	ldd	r20, Y+2	; 0x02
    1cc4:	5b 81       	ldd	r21, Y+3	; 0x03
    1cc6:	8b 2d       	mov	r24, r11
    1cc8:	9a 2d       	mov	r25, r10
    1cca:	b8 01       	movw	r22, r16
    1ccc:	e7 d1       	rcall	.+974    	; 0x209c <memcmp>
    1cce:	21 e0       	ldi	r18, 0x01	; 1
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <HID_Device_USBTask+0xec>
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1cd6:	f7 01       	movw	r30, r14
    1cd8:	40 85       	ldd	r20, Z+8	; 0x08
    1cda:	c8 01       	movw	r24, r16
    1cdc:	6b 2d       	mov	r22, r11
    1cde:	7a 2d       	mov	r23, r10
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	2c 83       	std	Y+4, r18	; 0x04
    1ce4:	e8 d1       	rcall	.+976    	; 0x20b6 <memcpy>
    1ce6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <HID_Device_USBTask+0x102>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1cea:	20 e0       	ldi	r18, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	09 f1       	breq	.+66     	; 0x1d36 <HID_Device_USBTask+0x14c>
    1cf4:	99 20       	and	r9, r9
    1cf6:	29 f4       	brne	.+10     	; 0x1d02 <HID_Device_USBTask+0x118>
    1cf8:	22 23       	and	r18, r18
    1cfa:	19 f4       	brne	.+6      	; 0x1d02 <HID_Device_USBTask+0x118>
    1cfc:	c1 14       	cp	r12, r1
    1cfe:	d1 04       	cpc	r13, r1
    1d00:	d1 f0       	breq	.+52     	; 0x1d36 <HID_Device_USBTask+0x14c>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1d02:	f7 01       	movw	r30, r14
    1d04:	84 85       	ldd	r24, Z+12	; 0x0c
    1d06:	95 85       	ldd	r25, Z+13	; 0x0d
    1d08:	97 87       	std	Z+15, r25	; 0x0f
    1d0a:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d0c:	81 81       	ldd	r24, Z+1	; 0x01
    1d0e:	8f 70       	andi	r24, 0x0F	; 15
    1d10:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	88 23       	and	r24, r24
    1d18:	11 f0       	breq	.+4      	; 0x1d1e <HID_Device_USBTask+0x134>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d1a:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1d1e:	6a 81       	ldd	r22, Y+2	; 0x02
    1d20:	7b 81       	ldd	r23, Y+3	; 0x03
    1d22:	8b 2d       	mov	r24, r11
    1d24:	9a 2d       	mov	r25, r10
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	39 d8       	rcall	.-3982   	; 0xd9e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d2c:	80 91 e8 00 	lds	r24, 0x00E8
    1d30:	8e 77       	andi	r24, 0x7E	; 126
    1d32:	80 93 e8 00 	sts	0x00E8, r24
    1d36:	80 91 e4 00 	lds	r24, 0x00E4
    1d3a:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1d3e:	f7 01       	movw	r30, r14
    1d40:	93 87       	std	Z+11, r25	; 0x0b
    1d42:	82 87       	std	Z+10, r24	; 0x0a
    1d44:	88 2d       	mov	r24, r8
    1d46:	95 2d       	mov	r25, r5
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	9e bf       	out	0x3e, r25	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	8d bf       	out	0x3d, r24	; 61
	}
}
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	7e be       	out	0x3e, r7	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	6d be       	out	0x3d, r6	; 61
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	ff 90       	pop	r15
    1d6e:	ef 90       	pop	r14
    1d70:	df 90       	pop	r13
    1d72:	cf 90       	pop	r12
    1d74:	bf 90       	pop	r11
    1d76:	af 90       	pop	r10
    1d78:	9f 90       	pop	r9
    1d7a:	8f 90       	pop	r8
    1d7c:	7f 90       	pop	r7
    1d7e:	6f 90       	pop	r6
    1d80:	5f 90       	pop	r5
    1d82:	08 95       	ret

00001d84 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d8a:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1d8e:	83 ff       	sbrs	r24, 3
    1d90:	33 c0       	rjmp	.+102    	; 0x1df8 <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1d92:	88 81       	ld	r24, Y
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	20 91 91 01 	lds	r18, 0x0191
    1d9a:	30 91 92 01 	lds	r19, 0x0192
    1d9e:	28 17       	cp	r18, r24
    1da0:	39 07       	cpc	r19, r25
    1da2:	51 f5       	brne	.+84     	; 0x1df8 <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    1da4:	80 91 8e 01 	lds	r24, 0x018E
    1da8:	8e 3f       	cpi	r24, 0xFE	; 254
    1daa:	79 f0       	breq	.+30     	; 0x1dca <MS_Device_ProcessControlRequest+0x46>
    1dac:	8f 3f       	cpi	r24, 0xFF	; 255
    1dae:	21 f5       	brne	.+72     	; 0x1df8 <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1db0:	80 91 8d 01 	lds	r24, 0x018D
    1db4:	81 32       	cpi	r24, 0x21	; 33
    1db6:	01 f5       	brne	.+64     	; 0x1df8 <MS_Device_ProcessControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1db8:	80 91 e8 00 	lds	r24, 0x00E8
    1dbc:	87 7f       	andi	r24, 0xF7	; 247
    1dbe:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1dc2:	74 da       	rcall	.-2840   	; 0x12ac <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	88 af       	std	Y+56, r24	; 0x38
    1dc8:	17 c0       	rjmp	.+46     	; 0x1df8 <MS_Device_ProcessControlRequest+0x74>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1dca:	80 91 8d 01 	lds	r24, 0x018D
    1dce:	81 3a       	cpi	r24, 0xA1	; 161
    1dd0:	99 f4       	brne	.+38     	; 0x1df8 <MS_Device_ProcessControlRequest+0x74>
    1dd2:	80 91 e8 00 	lds	r24, 0x00E8
    1dd6:	87 7f       	andi	r24, 0xF7	; 247
    1dd8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ddc:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1de0:	80 ff       	sbrs	r24, 0
    1de2:	fc cf       	rjmp	.-8      	; 0x1ddc <MS_Device_ProcessControlRequest+0x58>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1de4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1de6:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1de8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1dec:	80 91 e8 00 	lds	r24, 0x00E8
    1df0:	8e 77       	andi	r24, 0x7E	; 126
    1df2:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1df6:	5a da       	rcall	.-2892   	; 0x12ac <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	08 95       	ret

00001dfe <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1e04:	0c 96       	adiw	r24, 0x0c	; 12
    1e06:	fc 01       	movw	r30, r24
    1e08:	8d e2       	ldi	r24, 0x2D	; 45
    1e0a:	df 01       	movw	r26, r30
    1e0c:	1d 92       	st	X+, r1
    1e0e:	8a 95       	dec	r24
    1e10:	e9 f7       	brne	.-6      	; 0x1e0c <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    1e16:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    1e18:	ce 01       	movw	r24, r28
    1e1a:	01 96       	adiw	r24, 0x01	; 1
    1e1c:	61 e0       	ldi	r22, 0x01	; 1
    1e1e:	02 da       	rcall	.-3068   	; 0x1224 <Endpoint_ConfigureEndpointTable>
    1e20:	88 23       	and	r24, r24
    1e22:	29 f0       	breq	.+10     	; 0x1e2e <MS_Device_ConfigureEndpoints+0x30>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1e24:	ce 01       	movw	r24, r28
    1e26:	06 96       	adiw	r24, 0x06	; 6
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	fc d9       	rcall	.-3080   	; 0x1224 <Endpoint_ConfigureEndpointTable>
    1e2c:	01 c0       	rjmp	.+2      	; 0x1e30 <MS_Device_ConfigureEndpoints+0x32>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
    1e2e:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	08 95       	ret

00001e36 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1e36:	cf 92       	push	r12
    1e38:	df 92       	push	r13
    1e3a:	ef 92       	push	r14
    1e3c:	ff 92       	push	r15
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <MS_Device_USBTask+0x12>
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    1e4c:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1e4e:	80 91 8c 01 	lds	r24, 0x018C
    1e52:	84 30       	cpi	r24, 0x04	; 4
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <MS_Device_USBTask+0x22>
    1e56:	17 c1       	rjmp	.+558    	; 0x2086 <MS_Device_USBTask+0x250>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e58:	f8 01       	movw	r30, r16
    1e5a:	86 81       	ldd	r24, Z+6	; 0x06
    1e5c:	8f 70       	andi	r24, 0x0F	; 15
    1e5e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1e62:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1e66:	82 ff       	sbrs	r24, 2
    1e68:	d4 c0       	rjmp	.+424    	; 0x2012 <MS_Device_USBTask+0x1dc>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e6a:	86 81       	ldd	r24, Z+6	; 0x06
    1e6c:	8f 70       	andi	r24, 0x0F	; 15
    1e6e:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
    1e72:	1a 82       	std	Y+2, r1	; 0x02
    1e74:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1e76:	2c e0       	ldi	r18, 0x0C	; 12
    1e78:	c2 2e       	mov	r12, r18
    1e7a:	d1 2c       	mov	r13, r1
    1e7c:	c0 0e       	add	r12, r16
    1e7e:	d1 1e       	adc	r13, r17
    1e80:	7e 01       	movw	r14, r28
    1e82:	08 94       	sec
    1e84:	e1 1c       	adc	r14, r1
    1e86:	f1 1c       	adc	r15, r1
    1e88:	05 c0       	rjmp	.+10     	; 0x1e94 <MS_Device_USBTask+0x5e>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	80 ad       	ldd	r24, Z+56	; 0x38
    1e8e:	88 23       	and	r24, r24
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <MS_Device_USBTask+0x5e>
    1e92:	bf c0       	rjmp	.+382    	; 0x2012 <MS_Device_USBTask+0x1dc>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1e94:	c6 01       	movw	r24, r12
    1e96:	6f e0       	ldi	r22, 0x0F	; 15
    1e98:	70 e0       	ldi	r23, 0x00	; 0
    1e9a:	a7 01       	movw	r20, r14
    1e9c:	32 d8       	rcall	.-3996   	; 0xf02 <Endpoint_Read_Stream_LE>
    1e9e:	85 30       	cpi	r24, 0x05	; 5
    1ea0:	a1 f3       	breq	.-24     	; 0x1e8a <MS_Device_USBTask+0x54>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	84 85       	ldd	r24, Z+12	; 0x0c
    1ea6:	95 85       	ldd	r25, Z+13	; 0x0d
    1ea8:	a6 85       	ldd	r26, Z+14	; 0x0e
    1eaa:	b7 85       	ldd	r27, Z+15	; 0x0f
    1eac:	85 35       	cpi	r24, 0x55	; 85
    1eae:	f3 e5       	ldi	r31, 0x53	; 83
    1eb0:	9f 07       	cpc	r25, r31
    1eb2:	f2 e4       	ldi	r31, 0x42	; 66
    1eb4:	af 07       	cpc	r26, r31
    1eb6:	f3 e4       	ldi	r31, 0x43	; 67
    1eb8:	bf 07       	cpc	r27, r31
    1eba:	81 f4       	brne	.+32     	; 0x1edc <MS_Device_USBTask+0xa6>
    1ebc:	f8 01       	movw	r30, r16
    1ebe:	91 8d       	ldd	r25, Z+25	; 0x19
    1ec0:	83 85       	ldd	r24, Z+11	; 0x0b
    1ec2:	98 17       	cp	r25, r24
    1ec4:	58 f4       	brcc	.+22     	; 0x1edc <MS_Device_USBTask+0xa6>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1ec6:	80 8d       	ldd	r24, Z+24	; 0x18
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	8f 71       	andi	r24, 0x1F	; 31
    1ecc:	90 70       	andi	r25, 0x00	; 0
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	29 f4       	brne	.+10     	; 0x1edc <MS_Device_USBTask+0xa6>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    1ed2:	82 8d       	ldd	r24, Z+26	; 0x1a
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1ed4:	88 23       	and	r24, r24
    1ed6:	11 f0       	breq	.+4      	; 0x1edc <MS_Device_USBTask+0xa6>
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    1ed8:	81 31       	cpi	r24, 0x11	; 17
    1eda:	80 f0       	brcs	.+32     	; 0x1efc <MS_Device_USBTask+0xc6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1edc:	80 91 eb 00 	lds	r24, 0x00EB
    1ee0:	80 62       	ori	r24, 0x20	; 32
    1ee2:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	81 81       	ldd	r24, Z+1	; 0x01
    1eea:	8f 70       	andi	r24, 0x0F	; 15
    1eec:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ef0:	80 91 eb 00 	lds	r24, 0x00EB
    1ef4:	80 62       	ori	r24, 0x20	; 32
    1ef6:	80 93 eb 00 	sts	0x00EB, r24
    1efa:	8b c0       	rjmp	.+278    	; 0x2012 <MS_Device_USBTask+0x1dc>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1efc:	1a 82       	std	Y+2, r1	; 0x02
    1efe:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1f00:	9b e1       	ldi	r25, 0x1B	; 27
    1f02:	c9 2e       	mov	r12, r25
    1f04:	d1 2c       	mov	r13, r1
    1f06:	c0 0e       	add	r12, r16
    1f08:	d1 1e       	adc	r13, r17
    1f0a:	7e 01       	movw	r14, r28
    1f0c:	08 94       	sec
    1f0e:	e1 1c       	adc	r14, r1
    1f10:	f1 1c       	adc	r15, r1
    1f12:	05 c0       	rjmp	.+10     	; 0x1f1e <MS_Device_USBTask+0xe8>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1f14:	f8 01       	movw	r30, r16
    1f16:	80 ad       	ldd	r24, Z+56	; 0x38
    1f18:	88 23       	and	r24, r24
    1f1a:	09 f0       	breq	.+2      	; 0x1f1e <MS_Device_USBTask+0xe8>
    1f1c:	7a c0       	rjmp	.+244    	; 0x2012 <MS_Device_USBTask+0x1dc>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1f1e:	f8 01       	movw	r30, r16
    1f20:	62 8d       	ldd	r22, Z+26	; 0x1a
    1f22:	c6 01       	movw	r24, r12
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	a7 01       	movw	r20, r14
    1f28:	0e 94 81 07 	call	0xf02	; 0xf02 <Endpoint_Read_Stream_LE>
    1f2c:	85 30       	cpi	r24, 0x05	; 5
    1f2e:	91 f3       	breq	.-28     	; 0x1f14 <MS_Device_USBTask+0xde>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f30:	80 91 e8 00 	lds	r24, 0x00E8
    1f34:	8b 77       	andi	r24, 0x7B	; 123
    1f36:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	80 8d       	ldd	r24, Z+24	; 0x18
    1f3e:	87 ff       	sbrs	r24, 7
    1f40:	04 c0       	rjmp	.+8      	; 0x1f4a <MS_Device_USBTask+0x114>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f42:	81 81       	ldd	r24, Z+1	; 0x01
    1f44:	8f 70       	andi	r24, 0x0F	; 15
    1f46:	80 93 e9 00 	sts	0x00E9, r24
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1f4a:	c8 01       	movw	r24, r16
    1f4c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <CALLBACK_MS_Device_SCSICommandReceived>
	  return false;

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
    1f50:	91 e0       	ldi	r25, 0x01	; 1
    1f52:	98 27       	eor	r25, r24
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1f54:	f8 01       	movw	r30, r16
    1f56:	97 ab       	std	Z+55, r25	; 0x37
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1f58:	25 e5       	ldi	r18, 0x55	; 85
    1f5a:	33 e5       	ldi	r19, 0x53	; 83
    1f5c:	42 e4       	ldi	r20, 0x42	; 66
    1f5e:	53 e5       	ldi	r21, 0x53	; 83
    1f60:	23 a7       	std	Z+43, r18	; 0x2b
    1f62:	34 a7       	std	Z+44, r19	; 0x2c
    1f64:	45 a7       	std	Z+45, r20	; 0x2d
    1f66:	56 a7       	std	Z+46, r21	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1f68:	20 89       	ldd	r18, Z+16	; 0x10
    1f6a:	31 89       	ldd	r19, Z+17	; 0x11
    1f6c:	42 89       	ldd	r20, Z+18	; 0x12
    1f6e:	53 89       	ldd	r21, Z+19	; 0x13
    1f70:	27 a7       	std	Z+47, r18	; 0x2f
    1f72:	30 ab       	std	Z+48, r19	; 0x30
    1f74:	41 ab       	std	Z+49, r20	; 0x31
    1f76:	52 ab       	std	Z+50, r21	; 0x32
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1f78:	24 89       	ldd	r18, Z+20	; 0x14
    1f7a:	35 89       	ldd	r19, Z+21	; 0x15
    1f7c:	46 89       	ldd	r20, Z+22	; 0x16
    1f7e:	57 89       	ldd	r21, Z+23	; 0x17
    1f80:	23 ab       	std	Z+51, r18	; 0x33
    1f82:	34 ab       	std	Z+52, r19	; 0x34
    1f84:	45 ab       	std	Z+53, r20	; 0x35
    1f86:	56 ab       	std	Z+54, r21	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1f88:	88 23       	and	r24, r24
    1f8a:	51 f4       	brne	.+20     	; 0x1fa0 <MS_Device_USBTask+0x16a>
    1f8c:	21 15       	cp	r18, r1
    1f8e:	31 05       	cpc	r19, r1
    1f90:	41 05       	cpc	r20, r1
    1f92:	51 05       	cpc	r21, r1
    1f94:	29 f0       	breq	.+10     	; 0x1fa0 <MS_Device_USBTask+0x16a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f96:	80 91 eb 00 	lds	r24, 0x00EB
    1f9a:	80 62       	ori	r24, 0x20	; 32
    1f9c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	86 81       	ldd	r24, Z+6	; 0x06
    1fa4:	8f 70       	andi	r24, 0x0F	; 15
    1fa6:	80 93 e9 00 	sts	0x00E9, r24
    1faa:	04 c0       	rjmp	.+8      	; 0x1fb4 <MS_Device_USBTask+0x17e>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1fac:	f8 01       	movw	r30, r16
    1fae:	80 ad       	ldd	r24, Z+56	; 0x38
    1fb0:	88 23       	and	r24, r24
    1fb2:	79 f5       	brne	.+94     	; 0x2012 <MS_Device_USBTask+0x1dc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1fb4:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    1fb8:	85 fd       	sbrc	r24, 5
    1fba:	f8 cf       	rjmp	.-16     	; 0x1fac <MS_Device_USBTask+0x176>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	81 81       	ldd	r24, Z+1	; 0x01
    1fc0:	8f 70       	andi	r24, 0x0F	; 15
    1fc2:	80 93 e9 00 	sts	0x00E9, r24
    1fc6:	04 c0       	rjmp	.+8      	; 0x1fd0 <MS_Device_USBTask+0x19a>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1fc8:	f8 01       	movw	r30, r16
    1fca:	80 ad       	ldd	r24, Z+56	; 0x38
    1fcc:	88 23       	and	r24, r24
    1fce:	09 f5       	brne	.+66     	; 0x2012 <MS_Device_USBTask+0x1dc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1fd0:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    1fd4:	85 fd       	sbrc	r24, 5
    1fd6:	f8 cf       	rjmp	.-16     	; 0x1fc8 <MS_Device_USBTask+0x192>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    1fd8:	1a 82       	std	Y+2, r1	; 0x02
    1fda:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1fdc:	8b e2       	ldi	r24, 0x2B	; 43
    1fde:	c8 2e       	mov	r12, r24
    1fe0:	d1 2c       	mov	r13, r1
    1fe2:	c0 0e       	add	r12, r16
    1fe4:	d1 1e       	adc	r13, r17
    1fe6:	7e 01       	movw	r14, r28
    1fe8:	08 94       	sec
    1fea:	e1 1c       	adc	r14, r1
    1fec:	f1 1c       	adc	r15, r1
    1fee:	04 c0       	rjmp	.+8      	; 0x1ff8 <MS_Device_USBTask+0x1c2>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	80 ad       	ldd	r24, Z+56	; 0x38
    1ff4:	88 23       	and	r24, r24
    1ff6:	69 f4       	brne	.+26     	; 0x2012 <MS_Device_USBTask+0x1dc>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1ff8:	c6 01       	movw	r24, r12
    1ffa:	6d e0       	ldi	r22, 0x0D	; 13
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	a7 01       	movw	r20, r14
    2000:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Endpoint_Write_Stream_LE>
    2004:	85 30       	cpi	r24, 0x05	; 5
    2006:	a1 f3       	breq	.-24     	; 0x1ff0 <MS_Device_USBTask+0x1ba>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2008:	80 91 e8 00 	lds	r24, 0x00E8
    200c:	8e 77       	andi	r24, 0x7E	; 126
    200e:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    2012:	f8 01       	movw	r30, r16
    2014:	80 ad       	ldd	r24, Z+56	; 0x38
    2016:	88 23       	and	r24, r24
    2018:	b1 f1       	breq	.+108    	; 0x2086 <MS_Device_USBTask+0x250>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    201a:	26 81       	ldd	r18, Z+6	; 0x06
    201c:	2f 70       	andi	r18, 0x0F	; 15
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	ac 01       	movw	r20, r24
    2024:	02 c0       	rjmp	.+4      	; 0x202a <MS_Device_USBTask+0x1f4>
    2026:	44 0f       	add	r20, r20
    2028:	55 1f       	adc	r21, r21
    202a:	2a 95       	dec	r18
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <MS_Device_USBTask+0x1f0>
    202e:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    2032:	10 92 ea 00 	sts	0x00EA, r1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2036:	21 81       	ldd	r18, Z+1	; 0x01
    2038:	2f 70       	andi	r18, 0x0F	; 15
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <MS_Device_USBTask+0x20a>
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	2a 95       	dec	r18
    2042:	e2 f7       	brpl	.-8      	; 0x203c <MS_Device_USBTask+0x206>
    2044:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    2048:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    204c:	86 81       	ldd	r24, Z+6	; 0x06
    204e:	8f 70       	andi	r24, 0x0F	; 15
    2050:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2054:	80 91 eb 00 	lds	r24, 0x00EB
    2058:	80 61       	ori	r24, 0x10	; 16
    205a:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    205e:	80 91 eb 00 	lds	r24, 0x00EB
    2062:	88 60       	ori	r24, 0x08	; 8
    2064:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2068:	81 81       	ldd	r24, Z+1	; 0x01
    206a:	8f 70       	andi	r24, 0x0F	; 15
    206c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2070:	80 91 eb 00 	lds	r24, 0x00EB
    2074:	80 61       	ori	r24, 0x10	; 16
    2076:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    207a:	80 91 eb 00 	lds	r24, 0x00EB
    207e:	88 60       	ori	r24, 0x08	; 8
    2080:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    2084:	10 ae       	std	Z+56, r1	; 0x38
	}
}
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	1f 91       	pop	r17
    2090:	0f 91       	pop	r16
    2092:	ff 90       	pop	r15
    2094:	ef 90       	pop	r14
    2096:	df 90       	pop	r13
    2098:	cf 90       	pop	r12
    209a:	08 95       	ret

0000209c <memcmp>:
    209c:	fb 01       	movw	r30, r22
    209e:	dc 01       	movw	r26, r24
    20a0:	04 c0       	rjmp	.+8      	; 0x20aa <memcmp+0xe>
    20a2:	8d 91       	ld	r24, X+
    20a4:	01 90       	ld	r0, Z+
    20a6:	80 19       	sub	r24, r0
    20a8:	21 f4       	brne	.+8      	; 0x20b2 <memcmp+0x16>
    20aa:	41 50       	subi	r20, 0x01	; 1
    20ac:	50 40       	sbci	r21, 0x00	; 0
    20ae:	c8 f7       	brcc	.-14     	; 0x20a2 <memcmp+0x6>
    20b0:	88 1b       	sub	r24, r24
    20b2:	99 0b       	sbc	r25, r25
    20b4:	08 95       	ret

000020b6 <memcpy>:
    20b6:	fb 01       	movw	r30, r22
    20b8:	dc 01       	movw	r26, r24
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <memcpy+0xa>
    20bc:	01 90       	ld	r0, Z+
    20be:	0d 92       	st	X+, r0
    20c0:	41 50       	subi	r20, 0x01	; 1
    20c2:	50 40       	sbci	r21, 0x00	; 0
    20c4:	d8 f7       	brcc	.-10     	; 0x20bc <memcpy+0x6>
    20c6:	08 95       	ret

000020c8 <memset>:
    20c8:	dc 01       	movw	r26, r24
    20ca:	01 c0       	rjmp	.+2      	; 0x20ce <memset+0x6>
    20cc:	6d 93       	st	X+, r22
    20ce:	41 50       	subi	r20, 0x01	; 1
    20d0:	50 40       	sbci	r21, 0x00	; 0
    20d2:	e0 f7       	brcc	.-8      	; 0x20cc <memset+0x4>
    20d4:	08 95       	ret

000020d6 <_exit>:
    20d6:	f8 94       	cli

000020d8 <__stop_program>:
    20d8:	ff cf       	rjmp	.-2      	; 0x20d8 <__stop_program>
